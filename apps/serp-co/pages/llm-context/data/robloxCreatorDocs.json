[
  {
    "owner": "roblox",
    "repo": "creator-docs",
    "content": "TITLE: Server-Side Type Validation for Remote Functions in Roblox\nDESCRIPTION: Shows implementation of server-side type validation for RemoteFunction arguments using the 't' module to prevent type-based exploits.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/security/security-tactics.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal remoteFunction = ReplicatedStorage:WaitForChild(\"RemoteFunctionTest\")\nlocal t = require(ReplicatedStorage:WaitForChild(\"t\"))\n\n-- Create type validator in advance to avoid unnecessary overhead\nlocal createPartTypeValidator = t.tuple(t.instanceIsA(\"Player\"), t.Color3, t.Vector3)\n\n-- Create new part with the passed properties\nlocal function createPart(player, partColor, partPosition)\n\t-- Type check the passed arguments\n\tif not createPartTypeValidator(player, partColor, partPosition) then\n\t\t-- Silently return \"false\" if type check fails here\n\t\t-- Raising an error without a cooldown can be abused to bog down the server\n\t\t-- Provide client feedback instead!\n\n\t\treturn false\n\tend\n\n\tprint(player.Name .. \" requested a new part\")\n\tlocal newPart = Instance.new(\"Part\")\n\tnewPart.Color = partColor\n\tnewPart.Position = partPosition\n\tnewPart.Parent = Workspace\n\treturn newPart\nend\n\n-- Bind \"createPart()\" to the remote function's callback\nremoteFunction.OnServerInvoke = createPart\n```\n\n----------------------------------------\n\nTITLE: Raycasting for Mouse Position in Roblox\nDESCRIPTION: Calculates the 2D mouse position and transforms it into a world ray using Camera:ViewportPointToRay(), followed by raycasting to detect object collisions within a specified distance. This depends on the UserInputService for mouse location and workspace for raycasting operations. Outputs include collision data or calculated mouse positions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal tool = script.Parent\n\nlocal MAX_MOUSE_DISTANCE = 1000\n\nlocal function getWorldMousePosition()\n\tlocal mouseLocation = UserInputService:GetMouseLocation()\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getWorldMousePosition()\n\tlocal mouseLocation = UserInputService:GetMouseLocation()\n\n\t-- Create a ray from the 2D mouse location\n\tlocal screenToWorldRay = workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getWorldMousePosition()\n    local mouseLocation = UserInputService:GetMouseLocation()\n\n    -- Create a ray from the 2D mouse location\n    local screenToWorldRay = workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\n\n    -- The unit direction vector of the ray multiplied by a maximum distance\n    local directionVector = screenToWorldRay.Direction * MAX_MOUSE_DISTANCE\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getWorldMousePosition()\n    local mouseLocation = UserInputService:GetMouseLocation()\n\n    -- Create a ray from the 2D mouse location\n    local screenToWorldRay = workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\n\n    -- The unit direction vector of the ray multiplied by a maximum distance\n    local directionVector = screenToWorldRay.Direction * MAX_MOUSE_DISTANCE\n\n    -- Raycast from the ray's origin towards its direction\n    local raycastResult = workspace:Raycast(screenToWorldRay.Origin, directionVector)\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getWorldMousePosition()\n\tlocal mouseLocation = UserInputService:GetMouseLocation()\n\n\t-- Create a ray from the 2D mouseLocation\n\tlocal screenToWorldRay = workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\n\n\t-- The unit direction vector of the ray multiplied by a maximum distance\n\tlocal directionVector = screenToWorldRay.Direction * MAX_MOUSE_DISTANCE\n\n\t-- Raycast from the ray's origin towards its direction\n\tlocal raycastResult = workspace:Raycast(screenToWorldRay.Origin, directionVector)\n\n\tif raycastResult then\n\t\t-- Return the 3D point of intersection\n\t\treturn raycastResult.Position\n\telse\n\t\t-- No object was hit so calculate the position at the end of the ray\n\t\treturn screenToWorldRay.Origin + directionVector\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Data in Data Store\nDESCRIPTION: This snippet shows how to create a new entry in a data store. It utilizes the SetAsync method to store data under a unique key. The pcall function is used to handle potential errors gracefully.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal success, errorMessage = pcall(function()\n\texperienceStore:SetAsync(\"User_1234\", 50)\nend)\nif not success then\n\tprint(errorMessage)\nend\n```\n\n----------------------------------------\n\nTITLE: Check string length - Roblox\nDESCRIPTION: This snippet shows how to use `Library.string.len()` to check the length of strings related to DataStores, such as the data store name, key name, or scope.  This is important because these components must be under a certain character limit.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/error-codes-and-limits.md#2025-04-21_snippet_2\n\nLANGUAGE: Roblox\nCODE:\n```\n\"Library.string.len()\"\n```\n\n----------------------------------------\n\nTITLE: Creating an OrderedDataStore in Roblox Lua\nDESCRIPTION: This snippet shows how to create an OrderedDataStore using the DataStoreService. Unlike regular DataStores, OrderedDataStores allow for retrieving data in a sorted order, which is useful for leaderboards and other ordered data structures.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal characterAgeStore = DataStoreService:GetOrderedDataStore(\"CharacterAges\")\n```\n\n----------------------------------------\n\nTITLE: Incrementing Data in Data Store\nDESCRIPTION: This snippet specifies how to increment a value in a data store conveniently using the IncrementAsync method. This approach simplifies the process of updating numeric values and handles errors with pcall.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal success, newExperience = pcall(function()\n\treturn experienceStore:IncrementAsync(\"Player_1234\", 1)\nend)\nif success then\n\tprint(newExperience)\nend\n```\n\n----------------------------------------\n\nTITLE: Using task.spawn for Immediate Execution in Roblox\nDESCRIPTION: Demonstrates how to use task.spawn() to immediately execute a function for each player in a collection. The function playerAdded may yield during execution.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function playerAdded(player)\n    ...\n    (yield)\nend\n\nfor _, player in Players:GetPlayers() do\n    task.spawn(playerAdded, player)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Key Prefixes for Data Organization\nDESCRIPTION: ListKeysAsync() helps organize data by filtering keys with specific prefixes. This approach is useful for experiences supporting multiple character profiles for users, allowing for efficient retrieval of user-specific data by using a prefix search.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/best-practices.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n\"Class.DataStore:ListKeysAsync()|ListKeysAsync()\"\n```\n\n----------------------------------------\n\nTITLE: Processing Purchase Receipt - Lua\nDESCRIPTION: This code snippet demonstrates the essential operations for handling a purchase in Roblox, including verifying if the purchase has been processed, awarding the purchase, and saving player data to the global data store.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/player-data-purchasing.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- ProcessReceipt function to handle purchase\nfunction ProcessReceipt(purchaseId)\n    -- Step 1: Verify the PurchaseId has not already been handled\n    if hasBeenHandled(purchaseId) then\n        return PurchaseGranted\n    end\n\n    -- Step 2: Award the purchase in player's data\n    awardPurchase(purchaseId)\n\n    -- Step 3: Record PurchaseId as handled\n    recordPurchaseId(purchaseId)\n\n    -- Step 4: Save player data to DataStore\n    if savePlayerData() then\n        return PurchaseGranted\n    else\n        return NotProcessedYet\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting and Disconnecting from Touched Event - Roblox Lua\nDESCRIPTION: This snippet demonstrates how to connect and disconnect a function from the 'Touched' event of a part. It includes logic to disconnect the event handler when a specific condition is met, ensuring that the function is only called when intended.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/index.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\nlocal targetPart = Workspace.TargetPart\n\n-- Declare an empty placeholder variable for the connection\nlocal connection\n\nlocal function onPartTouched(otherPart)\n\tif otherPart == targetPart then\n\t\tprint(\"The part hit the target!\")\n\t\t-- Disconnect the connection\n\t\tconnection:Disconnect()\n\tend\nend\n\n-- Connect the above function to the Touched event\nconnection = part.Touched:Connect(onPartTouched)\n```\n\n----------------------------------------\n\nTITLE: Clean Up Player Objects and Characters in Luau\nDESCRIPTION: This code snippet demonstrates how to ensure connections don't persist after a user leaves a Roblox experience. By connecting to the `Player.CharacterRemoving` and `Player.PlayerRemoving` events, it destroys the character and player object respectively when the player leaves, preventing memory leaks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/performance-optimization/improve.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nPlayers.PlayerAdded:Connect(function(player)\n  player.CharacterRemoving:Connect(function(character)\n    task.defer(character.Destroy, character)\n  end)\nend)\n\nPlayers.PlayerRemoving:Connect(function(player)\n\ttask.defer(player.Destroy, player)\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Remote Event Handler in Roblox\nDESCRIPTION: Script that sets up a server-side event handler for a RemoteEvent that creates new Parts based on color and position data received from clients. The handler is connected to OnServerEvent and creates Parts in the Workspace.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onCreatePart(player, partColor, partPosition)\n\tprint(player.Name .. \" fired the RemoteEvent\")\n\tlocal newPart = Instance.new(\"Part\")\n\tnewPart.Color = partColor\n\tnewPart.Position = partPosition\n\tnewPart.Parent = Workspace\nend\n\n-- Connect function to event\nremoteEvent.OnServerEvent:Connect(onCreatePart)\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Desynchronization in Roblox Lua\nDESCRIPTION: Example showing how to desynchronize a thread using RunService.Heartbeat:ConnectParallel() to run code in parallel, with synchronization for serial code execution.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/multithreading.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\n\nRunService.Heartbeat:ConnectParallel(function()\n\t...  -- Some parallel code that computes a state update\n\n\ttask.synchronize()\n\n\t...  -- Some serial code that changes the state of instances\nend)\n```\n\n----------------------------------------\n\nTITLE: Basic Function Structure in Luau\nDESCRIPTION: Shows the basic structure of a function in Luau with placeholder comments. This example demonstrates the syntax for defining a function and calling it.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/code-a-function.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function makeDinner()\n\t-- List of instructions\nend\n\n-- Tell the code to run\nmakeDinner()\n```\n\n----------------------------------------\n\nTITLE: Using nil to delete variables and table values in Luau\nDESCRIPTION: This code demonstrates how to use `nil` to delete a local variable and remove a key-value pair from a Luau table. Setting a variable or table entry to `nil` effectively removes the value. The garbage collector will then eventually free the memory used by the variable if there are no other references to the memory location.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/nil.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal variableToDelete = 5\nprint(variableToDelete) -- 5\nvariableToDelete = nil\nprint(variableToDelete) -- nil\n\nlocal dictionaryTable = {\n\tMonday = 1,\n\tTuesday = 2,\n\tWednesday = 3\n}\n-- Output value of 'Tuesday' key\nprint(dictionaryTable.Tuesday) -- 2\n-- Clear 'Tuesday' key\ndictionaryTable.Tuesday = nil\n-- Output value of key again\nprint(dictionaryTable.Tuesday) -- nil\n```\n\n----------------------------------------\n\nTITLE: Auto Save and Load Player Data\nDESCRIPTION: This code automatically saves and loads player gold data when a player joins or leaves the game. It uses the Players service to listen for PlayerAdded and PlayerRemoving events.  It also caches player data locally to prevent excessive datastore calls.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n\n-- Add gold values for each player to a local table to avoid hitting the data\n-- store repeatedly.\nlocal playerGold = {}\n\nlocal function incrementGold(player, amount)\n    playerGold[player.UserId] += amount\nend\n\nlocal function onPlayerAdded(player)\n    -- Read data store key\n    local success, storedGold = pcall(function()\n        return goldStore:GetAsync(player.UserId)\n    end)\n    if success then\n        local currentGold\n        if storedGold then\n            currentGold = storedGold\n        else\n            currentGold = 0\n        end\n        playerGold[player.UserId] = currentGold\n        print(currentGold)\n    end\n\n    -- Test incrementing gold\n    incrementGold(player, 5)\nend\n\nlocal function onPlayerRemoving(player)\n    -- Set data store key\n    local success, err = pcall(function()\n        goldStore:SetAsync(player.UserId, playerGold[player.UserId])\n    end)\n    if not success then\n        warn(err)\n    end\n    -- Clean up entry so that the table doesn't grow for the lifespan of the server\n    playerGold[player.UserId] = nil\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nPlayers.PlayerRemoving:Connect(onPlayerRemoving)\n```\n\n----------------------------------------\n\nTITLE: Capturing Mouse Clicks and Positions in Lua Script\nDESCRIPTION: This snippet captures mouse clicks and outputs the mouse position to the Roblox Output window. It utilizes the `UserInputService` to detect left and right mouse button clicks within a LocalScript placed in `StarterPlayerScripts`. Key dependencies include the `UserInputService` and key parameters like `inputObject.UserInputType` for detecting mouse input.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mouse-and-keyboard.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal function onInputEnded(inputObject, processedEvent)\n\t-- First check if the \"processedEvent\" is true\n\t-- This indicates that another script had already processed the input, so this one is ignored\n\tif processedEvent then return end\n\n\t-- Next, check that the input was a mouse event\n\tif inputObject.UserInputType == Enum.UserInputType.MouseButton1 then\n\t\tprint(\"Left Mouse button was pressed:\", inputObject.Position)\n\telseif inputObject.UserInputType == Enum.UserInputType.MouseButton2 then\n\t\tprint(\"Right Mouse button was pressed:\", inputObject.Position)\n\tend\nend\n\nUserInputService.InputEnded:Connect(onInputEnded)\n```\n\n----------------------------------------\n\nTITLE: Event Firing - Script (RemoteEvent)\nDESCRIPTION: This Script listens for incoming players to the server and fires a RemoteEvent to each player when they join. It retrieves the RemoteEvent instance from ReplicatedStorage and defines a function that is called when a player is added to the game. The function fires the RemoteEvent using FireClient(), passing the player object and additional data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Listen for incoming players and dispatch remote event to each\nlocal function onPlayerAdded(player)\n   print(\"[Server] Firing event to player\", player.Name)\n   remoteEvent:FireClient(player, Players.MaxPlayers, Players.RespawnTime)\nend\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Connecting Anonymous Function to PlayerAdded Event - Roblox Lua\nDESCRIPTION: Shows how to connect an anonymous function to the 'PlayerAdded' event, which captures the player's character removal to save progress. This example demonstrates the use of an anonymous function for event handling in Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/index.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SaveManager = require(ReplicatedStorage:WaitForChild(\"SaveManager\"))\n\nlocal function saveProgress(character)\n\tlocal position = character:FindFirstChild(\"HumanoidRootPart\").Position\n\tSaveManager.saveData(character, position)\nend\n\n-- Anonymous function that calls saveProgress() when a character is removed\n-- from the experience (in this case, when the player leaves).\nPlayers.PlayerAdded:Connect(function(player)\n\tplayer.CharacterRemoving:Connect(saveProgress)\nend)\n```\n\n----------------------------------------\n\nTITLE: Understanding Roblox Analytics Event Types\nDESCRIPTION: Defines three primary event tracking categories for Roblox experiences: Economy events, Funnel events, and Custom events to help developers analyze user behavior and game performance\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/event-types.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Event types\n\n1. **Economy events** let you track your in-experience economy\n2. **Funnel events** let you track user progression\n3. **Custom events** let you track metrics specific to your experience\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Text Filtering in Roblox\nDESCRIPTION: A server-side script that receives text input from clients and filters it using TextService:FilterStringAsync() and GetNonChatStringForBroadcastAsync(). The script implements error handling with pcall() for both the filtering operation and retrieving the filtered text.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/text-filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextService = game:GetService(\"TextService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- RemoteEvent to receive text input from client for filtering\nlocal inputRemoteEvent = ReplicatedStorage:FindFirstChild(\"InputRemoteEvent\")\n\nlocal function getFilterResult(text, fromUserId)\n\tlocal filterResult\n\tlocal success, errorMessage = pcall(function()\n\t\tfilterResult = TextService:FilterStringAsync(text, fromUserId)\n\tend)\n\n\tif success then\n\t\treturn filterResult\n\telse\n\t\twarn(\"Error generating TextFilterResult:\", errorMessage)\n\tend\nend\n\n-- Fired when client submits input from the TextBox\nlocal function onInputReceived(player, text)\n\tif text ~= \"\" then\n\t\tlocal filterResult = getFilterResult(text, player.UserId)\n\t\tif filterResult then\n\t\t\tlocal success, filteredText = pcall(function()\n\t\t\t\treturn filterResult:GetNonChatStringForBroadcastAsync()\n\t\t\tend)\n\n\t\t\tif success then\n\t\t\t\tprint(\"FILTERED:\", filteredText)\n\t\t\telse\n\t\t\t\twarn(\"Error filtering text!\")\n\t\t\tend\n\t\tend\n\tend\nend\n\ninputRemoteEvent.OnServerEvent:Connect(onInputReceived)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Module Script Structure in Lua\nDESCRIPTION: Shows the basic structure of a module script in Roblox, including the creation of a module table and the return statement.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Module = {}\n\nreturn Module\n```\n\n----------------------------------------\n\nTITLE: Complete TreasureManager Implementation\nDESCRIPTION: The complete TreasureManager module implementation including all helper functions, chest management, and key handling functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal TreasureManager = {}\nlocal Players = game:GetService(\"Players\")\nlocal keyDrop = 1\nlocal chestPickCost = 1\nlocal chestReward = 100\n\n------------------ Local Functions\nlocal function getPlayerKeys(whichCharacter)\n   local player = Players:GetPlayerFromCharacter(whichCharacter)\n   local leaderstats = player:FindFirstChild(\"leaderstats\")\n   return leaderstats:WaitForChild(\"Lockpicks\")\nend\n\nlocal function getPlayerTreasure(whichCharacter)\n   local player = Players:GetPlayerFromCharacter(whichCharacter)\n   local leaderstats = player:FindFirstChild(\"leaderstats\")\n   return leaderstats:WaitForChild(\"Treasure\")\nend\n\n------------------ Module Functions\nfunction TreasureManager.openChest(chestPart, whichCharacter)\n   local playerKeys = getPlayerKeys(whichCharacter)\n   local playerTreasure = getPlayerTreasure(whichCharacter)\n   playerKeys.Value = playerKeys.Value - chestPickCost\n   playerTreasure.Value = playerTreasure.Value + chestReward\n   chestPart:Destroy()\nend\n\nfunction TreasureManager.canOpenChest(whichCharacter)\n   local playerKeys = getPlayerKeys(whichCharacter)\n   if playerKeys.Value >= chestPickCost then\n   return true\n   else\n   return false\n   end\nend\n\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n   local playerKeys = getPlayerKeys(whichCharacter)\n   playerKeys.Value = playerKeys.Value + keyDrop\n   keyPart:Destroy()\nend\n\nreturn TreasureManager\n```\n\n----------------------------------------\n\nTITLE: Nil Handling and Conditional Evaluation in Luau\nDESCRIPTION: Demonstrates how nil is used to represent nonexistence and its behavior in conditional statements, showing type checking and nil evaluation\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/index.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal messageToUser\nprint(messageToUser) --> nil\nprint(type(message)) --> nil\nif messageToUser then\n\t-- statement evaluates to false\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Scriptable DragStyle in Roblox DragDetector\nDESCRIPTION: This snippet implements a custom drag behavior using the Scriptable DragStyle. It creates a function that performs raycasting to make the dragged object follow the cursor and align with surface normals, then sets this as the drag style function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/3D-drag-detectors.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal dragDetector = script.Parent.DragDetector\ndragDetector.DragStyle = Enum.DragDetectorDragStyle.Scriptable\n\nlocal cachedHitPoint = Vector3.zero\nlocal cachedHitNormal = Vector3.yAxis\n\nlocal function followTheCursor(cursorRay)\n\t-- Exclude dragged object from raycast detection\n\tlocal raycastParams = RaycastParams.new()\n\traycastParams.FilterDescendantsInstances = {dragDetector.Parent}\n\traycastParams.FilterType = Enum.RaycastFilterType.Exclude\n\n\tlocal hitPoint = Vector3.zero\n\tlocal hitNormal = Vector3.yAxis\n\n\tlocal raycastResult = Workspace:Raycast(cursorRay.Origin, cursorRay.Direction, raycastParams)\n\tif raycastResult then\n\t\thitPoint = raycastResult.Position\n\t\thitNormal = raycastResult.Normal.Unit\n\telse\n\t\thitPoint = cachedHitPoint\n\t\thitNormal = cachedHitNormal\n\tend\n\n\tcachedHitPoint = hitPoint\n\tcachedHitNormal = hitNormal\n\n\tlocal lookDir1 = hitNormal:Cross(Vector3.xAxis)\n\tlocal lookDir2 = hitNormal:Cross(Vector3.yAxis)\n\tlocal lookDir = if lookDir1.Magnitude > lookDir2.Magnitude then lookDir1.Unit else lookDir2.Unit\n\treturn CFrame.lookAt(hitPoint, hitPoint + lookDir, hitNormal)\nend\n\ndragDetector:SetDragStyleFunction(followTheCursor)\n```\n\n----------------------------------------\n\nTITLE: Encapsulating RemoteEvent on Client\nDESCRIPTION: This ModuleScript, placed in ReplicatedFirst, encapsulates the FireServer method of a RemoteEvent. It adds an 'id' parameter to allow sending different network messages through the same RemoteEvent. This simplifies client-side network communication by abstracting away the RemoteEvent object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ReplicatedFirst named NetworkManagerClient\nlocal NetworkManagerClient = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"RemoteEvent\")\n\n-- Encapsulating the remote object's FireServer function\nfunction NetworkManagerClient.FireServer(id, ...)\n  remoteEvent:FireServer(id, ...)\nend\n\nreturn NetworkManagerClient\n\n```\n\n----------------------------------------\n\nTITLE: Multi-Variable Assignment in Luau\nDESCRIPTION: Illustrates assigning values to multiple variables in a single statement in Luau. Excess variables are assigned `nil`, while excess values are ignored.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/variables.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal a, b, c = 1, 2, 3\nlocal d, e, f = 4, 5 -- extra variable\nlocal g, h = 7, 8, 9 -- extra value\n\nprint(a, b, c) -- 1, 2, 3\nprint(d, e, f) -- 4, 5, nil\nprint(g, h) -- 7, 8\n```\n\n----------------------------------------\n\nTITLE: Evaluating object properties in conditional statements\nDESCRIPTION: Script that checks the transparency property of a part and modifies both the target part and another part based on the condition. Demonstrates how to evaluate specific object properties in conditionals.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/intro-to-if-statements.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal mysteryPart = workspace.MysteryPart\n\n-- Evaluates as true if MysteryPart is fully opaque\nif mysteryPart.Transparency == 0 then\n\tworkspace.LieDetector.Color = Color3.fromRGB(0, 255, 0)\n\tmysteryPart.Transparency = .2\nend\n```\n\n----------------------------------------\n\nTITLE: Final Complete Code for the Disappearing Platform in Luau\nDESCRIPTION: This is the complete script combining all functionalities to create a platform that disappears and reappears in Roblox. It serves as the final implementation of the project.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal function disappear()\n    platform.CanCollide = false\n    platform.Transparency = 1\nend\n\nlocal function appear()\n    platform.CanCollide = true\n    platform.Transparency = 0\nend\n\nwhile true do\n   task.wait(3)\n   disappear()\n   task.wait(3)\n   appear()\nend\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Iteration for Inventory\nDESCRIPTION: This code snippet showcases iterating through an inventory dictionary using `pairs()`. It prints a message indicating the quantity and name of each item in the inventory.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal inventory = {\n\t[\"Gold Bricks\"] = 43,\n\tCarrots = 3,\n\tTorches = 2,\n}\n\nprint(\"You have:\")\n\nfor itemName, itemValue in pairs(inventory) do\n\tprint(itemValue, itemName)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Roblox Leaderboard Module for Displaying Player Statistics\nDESCRIPTION: This module script creates and manages a UI leaderboard that displays player statistics. It leverages Roblox's built-in leaderboard system by creating a 'leaderstats' folder under each player and populating it with IntValue objects that represent player stats.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/record-and-display-player-data.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Leaderboard = {}\n\n-- Creating a new leaderboard\nlocal function setupLeaderboard(player)\n  local leaderstats = Instance.new(\"Folder\")\n  -- 'leaderstats' is a reserved name Roblox recognizes for creating a leaderboard\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n  return leaderstats\nend\n\n-- Creating a new leaderboard stat value\nlocal function setupStat(leaderstats, statName)\n  local stat = Instance.new(\"IntValue\")\n  stat.Name = statName\n  stat.Value = 0\n  stat.Parent = leaderstats\n  return stat\nend\n\n-- Updating a player's stat value\nfunction Leaderboard.setStat(player, statName, value)\n  local leaderstats = player:FindFirstChild(\"leaderstats\")\n  if not leaderstats then\n    leaderstats = setupLeaderboard(player)\n  end\n\n  local stat = leaderstats:FindFirstChild(statName)\n  if not stat then\n    stat = setupStat(leaderstats, statName)\n  end\n\n  stat.Value = value\nend\n\nreturn Leaderboard\n```\n\n----------------------------------------\n\nTITLE: Complete Tool Controller Implementation\nDESCRIPTION: Full implementation including ContextActionService integration, action binding/unbinding, and all event connections.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal tool = script.Parent\n\nlocal RELOAD_ACTION = \"reloadWeapon\"\n\nlocal function onAction(actionName, inputState, inputObject)\n\tif actionName == RELOAD_ACTION and inputState == Enum.UserInputState.Begin then\n\t\ttool.TextureId = \"rbxassetid://6593020923\"\n\t\ttask.wait(2)\n\t\ttool.TextureId = \"rbxassetid://92628145\"\n\tend\nend\n\nlocal function toolEquipped()\n\tContextActionService:BindAction(RELOAD_ACTION, onAction, true, Enum.KeyCode.R)\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolUnequipped()\n\tContextActionService:UnbindAction(RELOAD_ACTION)\nend\n\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\nend\n\ntool.Equipped:Connect(toolEquipped)\ntool.Unequipped:Connect(toolUnequipped)\ntool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Generic Functions in Luau\nDESCRIPTION: The example demonstrates how to define and utilize generic functions in Luau that infer types through incoming arguments. Generic functions enhance type flexibility without sacrificing type safety.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal function State<T>(key: string, value: T): State<T>\n\treturn {\n\t\tKey = key,\n\t\tValue = value\n\t}\nend\n\nlocal Activated = State(\"Activated\", false)  -- State<boolean>\nlocal TimesClicked = State(\"TimesClicked\", 0)  -- State<number>\n```\n\n----------------------------------------\n\nTITLE: Complete TreasureManager Module Script in Lua\nDESCRIPTION: The final version of the TreasureManager module script, including all local and module functions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TreasureManager = {}\nlocal Players = game:GetService(\"Players\")\nlocal keyDrop = 1\n\n------------------ Local Functions\nlocal function getPlayerKeys(whichCharacter)\n   local player = Players:GetPlayerFromCharacter(whichCharacter)\n   local leaderstats = player:FindFirstChild(\"leaderstats\")\n   return leaderstats:WaitForChild(\"Lockpicks\")\nend\n\nlocal function getPlayerTreasure(whichCharacter)\n   local player = Players:GetPlayerFromCharacter(whichCharacter)\n   local leaderstats = player:FindFirstChild(\"leaderstats\")\n   return leaderstats:WaitForChild(\"Treasure\")\nend\n\n------------------ Module Functions\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n   local playerKeys = getPlayerKeys(whichCharacter)\n   playerKeys.Value = playerKeys.Value + keyDrop\n   keyPart:Destroy()\nend\n\nreturn TreasureManager\n```\n\n----------------------------------------\n\nTITLE: Roblox Script Type Examples\nDESCRIPTION: Examples of the three main script types in Roblox: Script (server/client), LocalScript (client-only), and ModuleScript (reusable code). The RunContext property determines whether regular Scripts run on server or client.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/locations.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Server/Client Script (RunContext: Legacy, Server, or Client)\nlocal myScript = Instance.new(\"Script\")\n\n-- Client-only Script\nlocal myLocalScript = Instance.new(\"LocalScript\")\n\n-- Reusable Module Script\nlocal myModuleScript = Instance.new(\"ModuleScript\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a RewardManager Module in Lua\nDESCRIPTION: Shows a complete example of a RewardManager module script implementation in Lua for Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal RewardManager = {}\n\n-- Usable only in the module script\nlocal rewardCoins = 50\n\n-- Usable only in the module script\nlocal difficultyModifier = {\n easy = 0.5,\n normal = 1,\n hard = 2\n}\n\n-- Usable in other scripts\nfunction RewardManager.getCoinReward(difficulty)\n local coins = difficultyModifier[difficulty] * rewardCoins\n return coins\nend\n\nreturn RewardManager\n```\n\n----------------------------------------\n\nTITLE: Assign Values to Variables in Luau\nDESCRIPTION: Demonstrates assigning values to variables using the `=` operator in Luau. By default, variables have a global scope unless declared with `local`, which provides faster access.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/variables.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal nilVar\nlocal x = 10\nlocal word = \"Hello\"\nlocal boolean = true\n\nprint(nilVar) -- nil\nprint(x) -- 10\nprint(word) -- Hello\nprint(boolean) -- true\n```\n\n----------------------------------------\n\nTITLE: Connecting to Network Messages in Lua Script\nDESCRIPTION: This Lua snippet depicts a Script that connects to a specified network message ID using the GetServerEventSignal method and prints additional parameters received. It loads the NetworkManagerServer from ServerScriptService.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Script in ServerScriptService\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal NetworkManagerServer = require(ServerScriptService:WaitForChild(\"NetworkManagerServer\"))\nNetworkManagerServer.GetServerEventSignal(\"RequestA\"):Connect(function(player, ...)\n\tprint(\"Received RequestA from\", player, ...)\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Roblox Instance using Python\nDESCRIPTION: This snippet illustrates how to update a specific Roblox Engine Instance by sending a PATCH request via the Update Instance API. It allows specifying properties of the instance to update, requiring the use of an API key, universe ID, place ID, instance ID, and the property details in JSON format.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\n# Generate at https://create.roblox.com/dashboard/credentials\napiKey = \"<API_KEY>\"\n# Find at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nuniverseId = \"<UNIVERSE_ID>\"\n# Find Start Place ID at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nplaceId = \"<PLACE_ID>\"\ninstanceId = \"<INSTANCE_ID>\"\ninstanceType = \"\"\npropertyName = \"\"\npropertyValue = \"\"\n\n# Request header\napiKeyHeaderKey = \"x-api-key\"\ncontentTypeHeaderKey = \"Content-type\"\ncontentTypeHeaderValue = \"application/json\"\n# Endpoint URL for Update Instance method\nupdateInstanceUrl = \"https://apis.roblox.com/cloud/v2/universes/%s/places/%s/instances/%s\"\n# JSON keys\ndetailsJSONKey = \"Details\"\nengineInstanceJSONKey = \"engineInstance\"\n\ndef GeneratePostData():\n  propertiesDict = {propertyName: propertyValue}\n  detailsDict = {instanceType: propertiesDict}\n  instanceDict = {detailsJSONKey: detailsDict}\n  outerDict = {engineInstanceJSONKey: instanceDict}\n  return json.dumps(outerDict)\n\ndef UpdateInstance(postData):\n    url = updateInstanceUrl % (universeId, placeId, instanceId)\n    headerData = {apiKeyHeaderKey: apiKey,\n    contentTypeHeaderKey: contentTypeHeaderValue}\n    return requests.patch(url, headers = headerData, data = postData)\n\npostData = GeneratePostData()\nresponse = UpdateInstance(postData)\nprint(\"Response:\", response.status_code, response.text)\n\n# Parse the Operation object's path from response. Poll for results to perform\n```\n\n----------------------------------------\n\nTITLE: Accessing Workspace in Roblox Lua Scripts\nDESCRIPTION: Demonstrates three equivalent methods to access the Workspace service in Roblox Lua scripts. The recommended approach is using GetService(), but workspace variable and game.Workspace are also valid options.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\ngame:GetService(\"Workspace\")\n```\n\nLANGUAGE: Lua\nCODE:\n```\nworkspace\n```\n\nLANGUAGE: Lua\nCODE:\n```\ngame.Workspace\n```\n\n----------------------------------------\n\nTITLE: Detecting Subscription Status (Server)\nDESCRIPTION: This code snippet demonstrates how to check if a player has an active subscription using `MarketplaceService:GetUserSubscriptionStatusAsync`. It handles both granting awards for subscribed players and revoking awards for unsubscribed players.  It sets up event listeners for player joining and subscription status changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/subscriptions.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Run this code on the server\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SUBSCRIPTION_ID = \"EXP-11111111\" -- Replace with your subscription ID\n\nlocal function grantAward(player: Player)\n\t-- You should grant the award associated with the subscription here\nend\n\nlocal function revokeAwardIfGranted(player: Player)\n\t-- This method is called for every player who does _not_ have the subscription\n    -- If your code saves subscriptions to Data Stores or provides some benefit that needs to be 'revoked'\n    -- you should use this method to handle the revocation\nend\n\nlocal function checkSubStatus(player)\n\tlocal success, response = pcall(function()\n\t\treturn MarketplaceService:GetUserSubscriptionStatusAsync(player, SUBSCRIPTION_ID)\n\tend)\n\n\tif not success then\n\t\twarn(`Error while checking if player has subscription: {response}`)\n\t\treturn\n\tend\n\n\tif response.IsSubscribed then\n\t\tgrantAward(player)\n\telse\n\t\trevokeAwardIfGranted(player)\n\tend\nend\n\nlocal function onUserSubscriptionStatusChanged(player: Player, subscriptionId: string)\n\tif subscriptionId == SUBSCRIPTION_ID then\n\t\tcheckSubStatus(player)\n\tend\nend\n\nPlayers.PlayerAdded:Connect(checkSubStatus)\nPlayers.UserSubscriptionStatusChanged:Connect(onUserSubscriptionStatusChanged)\n```\n\n----------------------------------------\n\nTITLE: Handling Developer Product Purchases in Roblox with Lua\nDESCRIPTION: This Lua script demonstrates how to handle developer product purchases in a Roblox experience. It uses the MarketplaceService to process receipts and execute custom functions based on product IDs. The script includes examples for health restoration and awarding in-game currency.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/developer-products.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal productFunctions = {}\n\n-- Example: product ID 123123 brings the user back to full health\nproductFunctions[123123] = function(receipt, player)\n\tlocal character = player.Character\n\tlocal humanoid = character and character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\thumanoid.Health = humanoid.MaxHealth\n\t\t-- Indicates a successful purchase\n\t\treturn true\n\tend\nend\n\n-- Example: product ID 456456 awards 100 gold coins to the user\nproductFunctions[456456] = function(receipt, player)\n\tlocal leaderstats = player:FindFirstChild(\"leaderstats\")\n\tlocal gold = leaderstats and leaderstats:FindFirstChild(\"Gold\")\n\n\tif gold then\n\t\tgold.Value += 100\n\t\treturn true\n\tend\nend\n\nlocal function processReceipt(receiptInfo)\n\tlocal userId = receiptInfo.PlayerId\n\tlocal productId = receiptInfo.ProductId\n\n\tlocal player = Players:GetPlayerByUserId(userId)\n\tif player then\n\t\t-- Gets the handler function associated with the developer product ID and attempts to run it\n\t\tlocal handler = productFunctions[productId]\n\t\tlocal success, result = pcall(handler, receiptInfo, player)\n\t\tif success then\n\t\t\t-- The user has received their items\n\t\t\t-- Returns \"PurchaseGranted\" to confirm the transaction\n\t\t\treturn Enum.ProductPurchaseDecision.PurchaseGranted\n\t\telse\n\t\t\twarn(\"Failed to process receipt:\", receiptInfo, result)\n\t\tend\n\tend\n\n\t-- The user's items couldn't be awarded\n\t-- Returns \"NotProcessedYet\" and tries again next time the user joins the experience\n\treturn Enum.ProductPurchaseDecision.NotProcessedYet\nend\n\n-- Sets the callback\n-- This can only be done once by one server-side script\nMarketplaceService.ProcessReceipt = processReceipt\n```\n\n----------------------------------------\n\nTITLE: Anonymous Functions in Event Handling and Callbacks\nDESCRIPTION: This snippet provides examples of using anonymous functions in Luau as a callback in `task.delay` and an event handler for `PlayerAdded`. It highlights the use of anonymous functions for temporary or single-use purposes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\n-- Anonymous function in a callback to task.delay()\ntask.delay(2, function(exactTimeElapsed)\n\tprint(exactTimeElapsed) -- 2.0064592329945\nend)\n\n-- Anonymous function in an event handler\nlocal Players = game:GetService(\"Players\")\nPlayers.PlayerAdded:Connect(function(player)\n\tprint(player.Name .. \" joined the game!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Multiple Parameters in Luau\nDESCRIPTION: Creates a function that assigns a player to a team using two parameters: playerName and whichTeam. This demonstrates how to set up a function with multiple parameters separated by commas.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function assignTeam(playerName, whichTeam)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Calling Methods in Tables\nDESCRIPTION: This snippet demonstrates defining a method within a table in Luau. It shows how to reference the parent table using `self` and change a property through a method. The method `changeEnabled` is defined and called to change and print the `enabled` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal testButton = {\n\tenabled = true,\n\tchangeEnabled = function(self, isEnabled)\n\t\tself.enabled = isEnabled\n\t\tprint(self.enabled)\n\tend\n}\n\nprint(testButton.enabled) -- true\n-- Call the method\ntestButton:changeEnabled(false) -- false\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Luau Functions\nDESCRIPTION: This snippet shows how to return values from a Luau function. It includes examples of returning a single value and multiple values. The example functions compute and return sums and differences of numbers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- This function returns one return value\nlocal function addNumbers(num1, num2)\n\tlocal result = num1 + num2\n\treturn result\nend\n\nprint(addNumbers(1, 2)) -- 3\nlocal seven = addNumbers(3, 4)\nprint(seven) -- 7\n\n-- This function returns multiple values: sum and difference\nlocal function addAndSubtract(num1, num2)\n\tlocal sum = num1 + num2\n\tlocal difference = num1 - num2\n\treturn sum, difference\nend\n\n-- Calling a function and expecting multiple return values\nlocal sum, difference = addAndSubtract(2, 3)\nprint(sum) -- 5\nprint(difference) -- -1\n```\n\n----------------------------------------\n\nTITLE: Detecting Animation Events in Roblox Lua\nDESCRIPTION: Demonstrates how to detect animation events using GetMarkerReachedSignal() in a LocalScript. The code shows the process of loading an animation, creating an animation track, and connecting to event markers with optional parameter strings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/events.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal humanoid = character:WaitForChild(\"Humanoid\")\nlocal animator = humanoid:WaitForChild(\"Animator\")\n\n-- Create new \"Animation\" instance\nlocal walkAnim = Instance.new(\"Animation\")\n-- Set its \"AnimationId\" to the corresponding animation asset ID\nwalkAnim.AnimationId = \"rbxassetid://5432167890\"\n\n-- Load animation onto the animator\nlocal walkAnimTrack = animator:LoadAnimation(walkAnim)\n\n-- Connect \"GetMarkerReachedSignal\" event to a specific named keyframe\nwalkAnimTrack:GetMarkerReachedSignal(\"FootStep\"):Connect(function(paramString)\n\tprint(paramString)\nend)\n```\n\n----------------------------------------\n\nTITLE: Gun Configuration Module\nDESCRIPTION: ModuleScript for storing and sharing gun configuration data across different scripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal GunConfig = {}\n\nGunConfig.MagazineSize = 20\nGunConfig.AmmoCount = 100\nGunConfig.Firerate = 600\nGunConfig.Damage = {\n  [\"Head\"] = 50;\n  [\"Torso\"] = 40;\n  [\"Body\"] = 25;\n}\n\nreturn GunConfig\n```\n\n----------------------------------------\n\nTITLE: Server-Side Item Purchase Validation in Roblox\nDESCRIPTION: Implementation of server-side validation for item purchases to prevent spoofed item data and ensure items are legitimate.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/security/security-tactics.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal itemDataFolder = ReplicatedStorage:WaitForChild(\"ItemData\")\nlocal buyItemEvent = ReplicatedStorage:WaitForChild(\"BuyItemEvent\")\n\nlocal function buyItem(player, item)\n\t-- Check if the passed item isn't spoofed and is in the ItemData folder\n\tif typeof(item) ~= \"Instance\" or not item:IsDescendantOf(itemDataFolder) then\n\t\treturn false, \"Invalid item provided\"\n\tend\n\n\t-- The server can then go on to process the purchase based on the example flow below\nend\n\n-- Bind \"buyItem()\" to the remote function's callback\nbuyItemEvent.OnServerInvoke = buyItem\n```\n\n----------------------------------------\n\nTITLE: Player Tag Damage Handler in Lua\nDESCRIPTION: Handles damage application when a player is tagged, including team checks, force field validation, and score incrementing. Ensures health doesn't go below zero and prevents friendly fire.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerTagged(playerBlasted: Player, playerTagged: Player, damageAmount: number)\n\tlocal character = playerTagged.Character\n\tlocal isFriendly = playerBlasted.Team == playerTagged.Team\n\n\tif isFriendly then\n\t\treturn\n\tend\n\n\tlocal humanoid = character and character:FindFirstChild(\"Humanoid\")\n\tif humanoid and humanoid.Health > 0 then\n\t\tlocal damage = math.min(damageAmount, humanoid.Health)\n\t\thumanoid:TakeDamage(damage)\n\t\tif humanoid.Health <= 0 then\n\t\t\tScoring.incrementScore(playerBlasted, 1)\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Content-MD5 using Python\nDESCRIPTION: This code snippet demonstrates how to generate a base-64 encoded MD5 checksum of a given input string in Python. It uses the hashlib and base64 standard libraries to calculate and encode the MD5 checksum. The example shows two methods: one that uses prompts for user input and another that uses stdin to read input directly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/data-store-api-handling.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# With prompts\n$ python -c \"import base64, hashlib; print('content-md5: ' + str(base64.b64encode(hashlib.md5(bytes(input('content: '), encoding='utf8')).digest()), encoding='utf8'))\"\ncontent: 750\ncontent-md5: sTf90fedVsft8zZf6nUg8g==\n# Using just stdin and stdout\n$ echo \"750\" | python -c \"import base64, hashlib; print(str(base64.b64encode(hashlib.md5(bytes(input(), encoding='utf8')).digest()), encoding='utf8'))\"\nsTf90fedVsft8zZf6nUg8g==\n```\n\n----------------------------------------\n\nTITLE: Generalized Iteration For Loop in Luau\nDESCRIPTION: This example showcases generalized iteration in Luau using the `in` keyword directly on a table. This allows iterating through table elements without needing an explicit iterator function like `ipairs()`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfor i, v in {1, 2, 3, 4, 5} do\n\tprint(i, v)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cooldown for the Speed Boost\nDESCRIPTION: Completes the powerup script by adding a one-second cooldown period before the speed boost can be used again, using task.wait() to pause execution.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal speedBoost = script.Parent\n\nlocal function onTouch(otherPart)\n  local character = otherPart.Parent\n  local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n  if humanoid and humanoid.WalkSpeed <= 50 then\n    humanoid.WalkSpeed += 10\n    speedBoost.CanTouch = false\n    task.wait(1)\n    speedBoost.CanTouch = true\n   end\nend\n\nspeedBoost.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop Syntax Example in Luau\nDESCRIPTION: Summary example showing the basic syntax of a for loop that counts from 0 to 10, printing each value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 0, 10, 1 do\n\tprint(count)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Blast Events in Lua\nDESCRIPTION: This snippet is responsible for handling server-side validation and event processing of a player's blaster action. It verifies blast data, checks player abilities, and sends replication events to other clients. The code has dependencies on player data functions and event handling utilities. Inputs include player identity and blast data, and it outputs validation results and replication events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onLaserBlastedEvent(playerBlasted: Player, blastData: BlastData.Type)\n    local validatedBlastData = getValidatedBlastData(playerBlasted, blastData)\n    if not validatedBlastData then\n        return\n    end\n\n    if not canPlayerBlast(playerBlasted) then\n        return\n    end\n\n    blastServer(playerBlasted)\n\n    processTaggedPlayers(playerBlasted, blastData)\n\n    for _, replicateToPlayer in Players:GetPlayers() do\n        if playerBlasted == replicateToPlayer then\n            continue\n        end\n        replicateBlastEvent:FireClient(replicateToPlayer, playerBlasted, blastData)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Class Modifiers in String Matching - Luau\nDESCRIPTION: Illustrates how character class modifiers like +, -, *, ?, and %n modify the behavior of string patterns. Specifically, it shows how these modifiers control matching behavior, such as matching at least 1 or as few characters as possible.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match = string.match(\"The Cloud Kingdom has 25 power gems\", \"%d\")\nprint(match)  --> 2\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match1 = string.match(\"The Cloud Kingdom has 25 power gems\", \"%d\")\nprint(match1)  --> 2\n\nlocal match2 = string.match(\"The Cloud Kingdom has 25 power gems\", \"%d+\")\nprint(match2)  --> 25\n```\n\n----------------------------------------\n\nTITLE: Encapsulating RemoteEvent in Lua ModuleScript\nDESCRIPTION: This Lua snippet defines a ModuleScript named NetworkManagerClient used to simplify network communication in Roblox by encapsulating the RemoteEvent:FireServer method. It simplifies network message sending and requires the 'ReplicatedStorage' service.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ReplicatedFirst named NetworkManagerClient\nlocal NetworkManagerClient = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"RemoteEvent\")\n\n-- Encapsulating the remote object's FireServer function\nfunction NetworkManagerClient.FireServer(id, ...)\n\tremoteEvent:FireServer(id, ...)\nend\n\nreturn NetworkManagerClient\n\n```\n\n----------------------------------------\n\nTITLE: Firing Remote Events - Script\nDESCRIPTION: This script listens for player additions and fires a remote event to each new player with a dictionary of data about the workspace. It utilizes the ReplicatedStorage and Players services of Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Listen for incoming players and dispatch remote event to each\nlocal function onPlayerAdded(player)\n\tremoteEvent:FireClient(player,\n\t\t{\n\t\t\t[Workspace.Baseplate] = true\n\t\t}\n\t)\nend\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Listing Children of a Roblox Instance using Python\nDESCRIPTION: This Python snippet demonstrates how to list all children of a specific instance in Roblox Engine by calling the List Instance Children API. It utilizes the requests library and requires an API key, universe ID, place ID, and instance ID. The snippet handles GET requests and processes responses from the API.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\n# Generate at https://create.roblox.com/dashboard/credentials\napiKey = \"<API_KEY>\"\n# Find at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nuniverseId = \"<UNIVERSE_ID>\"\n# Find Start Place ID at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nplaceId = \"<PLACE_ID>\"\n# The default ID for the root of any place's data model\ninstanceId = \"root\"\n\n# Request header\napiKeyHeaderKey = \"x-api-key\"\n# Endpoint URL for List Children method\nlistChildrenUrl = \"https://apis.roblox.com/cloud/v2/universes/%s/places/%s/instances/%s:listChildren\"\n\ndef ListChildren():\n  url = listChildrenUrl % (universeId, placeId, instanceId)\n  headerData = {apiKeyHeaderKey: apiKey}\n  results = requests.get(url, headers = headerData)\n  return results\n\nresponse = ListChildren()\nprint(\"Operation Results:\", response.status_code, response.text)\n\n# Parse the Operation object's path to later obtain the Instance resource. See the Polling for Results section for more information.\noperationPath = response.json()['path']\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Creation - Empty Dictionary\nDESCRIPTION: This snippet shows how to create an empty dictionary in Luau. An empty dictionary is initialized using curly braces and assigned to a local variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Saving User Data on Leave using Roblox Lua\nDESCRIPTION: This script listens for the PlayerRemoving event and attempts to save a user's data to a datastore using their user ID as the key. It captures the user's current data state before they leave the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/index.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal playerDataStore = DataStoreService:GetDataStore(\"PlayerData\")\n\ngame:GetService(\"Players\").PlayerRemoving:Connect(function(player)\n\tlocal userId = player.UserId\n\n\t-- Get the player's data state in the game\n\tlocal currentData = getCurrentData(player)\n\n\t-- Save to data store\n\tlocal setSuccess, errorMessage = pcall(function()\n\t    playerDataStore:SetAsync(userId, currentData)\n\tend)\n\n\tif not setSuccess then\n\t    warn(errorMessage)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Sorting Players with Anonymous Callbacks\nDESCRIPTION: This snippet shows how an anonymous function can be used as a callback to sort players by name. It integrates an anonymous callback with `table.sort` used in conjunction with `Players:GetPlayers()`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal sortedPlayers = Players:GetPlayers()\n\ntable.sort(sortedPlayers, function(a, b)\n\t-- Use an anonymous callback to sort players by name\n\treturn a.Name < b.Name\nend)\n```\n\n----------------------------------------\n\nTITLE: Optional Types with Nullable Annotations\nDESCRIPTION: This snippet shows how to define optional types in Luau by using a question mark (?) after the type. It allows variables to hold either a specified type or `nil`, providing flexibility in variable type assignments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal foo: string? = nil\n```\n\n----------------------------------------\n\nTITLE: Procedural Terrain Generation with Actors in Luau\nDESCRIPTION: This snippet outlines how to implement procedural terrain generation using multiple actors to enhance the efficiency of world creation in Roblox. It includes functions for voxel generation and managing parallel execution through message passing to handle terrain chunk creation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/multithreading.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Parallel execution requires the use of actors\n-- This script clones itself; the original initiates the process, while the clones act as workers\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal actor = script:GetActor()\nif actor == nil then\n\tlocal workers = {}\n\tfor i = 1, 32 do\n\t\tlocal actor = Instance.new(\"Actor\")\n\t\tscript:Clone().Parent = actor\n\t\ttable.insert(workers, actor)\n\tend\n\n\t-- Parent all actors under self\n\tfor _, actor in workers do\n\t\tactor.Parent = script\n\tend\n\n\t-- Instruct the actors to generate terrain by sending messages\n\t-- In this example, actors are chosen randomly\ntask.defer(function()\n\t\tlocal rand = Random.new()\n\t\tlocal seed = rand:NextNumber()\n\n\t\tlocal sz = 10\n\t\tfor x = -sz, sz do\n\t\t\tfor y = -sz, sz do\n\t\t\t\tfor z = -sz, sz do\n\t\t\t\t\tworkers[rand:NextInteger(1, #workers)]:SendMessage(\"GenerateChunk\", x, y, z, seed)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend)\n\n\t-- Exit from the original script; the rest of the code runs in each actor\n\treturn\nend\n\nfunction makeNdArray(numDim, size, elemValue)\n\tif numDim == 0 then\n\t\treturn elemValue\n\tend\n\tlocal result = {}\n\tfor i = 1, size do\n\t\tresult[i] = makeNdArray(numDim - 1, size, elemValue)\n\tend\n\treturn result\nend\n\nfunction generateVoxelsWithSeed(xd, yd, zd, seed)\n\tlocal matEnums = {Enum.Material.CrackedLava, Enum.Material.Basalt, Enum.Material.Asphalt}\n\tlocal materials = makeNdArray(3, 4, Enum.Material.CrackedLava)\n\tlocal occupancy = makeNdArray(3, 4, 1)\n\n\tlocal rand = Random.new()\n\n\tfor x = 0, 3 do\n\t\tfor y = 0, 3 do\n\t\t\tfor z = 0, 3 do\n\t\t\t\toccupancy[x + 1][y + 1][z + 1] = math.noise(xd + 0.25 * x, yd + 0.25 * y, zd + 0.25 * z)\n\t\t\t\tmaterials[x + 1][y + 1][z + 1] = matEnums[rand:NextInteger(1, #matEnums)]\n\t\t\tend\n\t\tend\n\tend\n\n\treturn {materials = materials, occupancy = occupancy}\nend\n\n-- Bind the callback to be called in parallel execution context\nactor:BindToMessageParallel(\"GenerateChunk\", function(x, y, z, seed)\n\tlocal voxels = generateVoxelsWithSeed(x, y, z, seed)\n\tlocal corner = Vector3.new(x * 16, y * 16, z * 16)\n\n\t-- Currently, WriteVoxels() must be called in the serial phase\ntask.synchronize()\n\tWorkspace.Terrain:WriteVoxels(\n\t\tRegion3.new(corner, corner + Vector3.new(16, 16, 16)),\n\t\t4,\n\t\tvoxels.materials,\n\t\tvoxels.occupancy\n\t)\nend)\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Store in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to access a data store using the DataStoreService in Roblox Lua. The GetDataStore method is called to retrieve a specific data store using its name. This is essential for any operations that involve storing or retrieving persistent data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n```\n\n----------------------------------------\n\nTITLE: Complete PointScript Implementation - Lua\nDESCRIPTION: This is a complete script containing the core logic for the point system. It handles color detection, point calculation, part destruction, and particle effect generation. It encompasses all the previous snippets and provides the surrounding code.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal pointPart = script.Parent\n--local storage = game:GetService(\"ServerStorage\")\n\n-- Gives some points\nlocal blue = Color3.fromRGB(0, 0, 255)\n-- Gives more points\nlocal green = Color3.fromRGB(0, 255, 0)\n-- Makes players lose points\nlocal red = Color3.fromRGB(255, 0, 0)\n\n-- gold given to players\nlocal smallPoints = 10\nlocal largePoints = 50\nlocal losePoints = 100\n\nlocal Players = game:GetService(\"Players\")\n\nlocal function givePoints(player)\n\tlocal currentColor = pointPart.Color\n\n\tlocal playerStats = player:WaitForChild(\"leaderstats\")\n\tlocal playerPoints = playerStats:WaitForChild(\"Points\")\n\n\t-- Gives player gold based on the color of the part\n\tif currentColor == blue then\n\t\tplayerPoints.Value += smallPoints\n\telseif currentColor == green then\n\t\tplayerPoints.Value += largePoints\n\telse\n\t\tplayerPoints.Value -= losePoints\n\tend\n\n\t-- Destroy the part, wait a second, and then destroy the particle\n\tpointPart:Destroy()\n\n\t-- Creates a sparkles effect and destroys it\n\tlocal playerCharacter = player.Character\n\tlocal particle = Instance.new(\"ParticleEmitter\")\n\tparticle.Color = ColorSequence.new(currentColor)\n\tparticle.Parent = playerCharacter:WaitForChild(\"Head\")\n\ttask.wait(1)\n\tparticle:Destroy()\nend\n\nlocal function partTouched(otherPart)\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\n\tif player then\n\t\tgivePoints(player)\n\tend\nend\n\npointPart.Touched:Connect(partTouched)\n\n-- Changes the color of the part based on variables. Needs to be at bottom of script.\nwhile true do\n\tpointPart.Color = blue\n\ttask.wait(4)\n\tpointPart.Color = green\n\ttask.wait(3)\n\tpointPart.Color = red\n\ttask.wait(2)\nend\n```\n\n----------------------------------------\n\nTITLE: If-Else Statement in Luau\nDESCRIPTION: This code snippet demonstrates the use of `if`, `elseif`, and `else` statements in Luau to conditionally execute code blocks. It checks multiple conditions sequentially and executes the corresponding code block if a condition is true.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif 2 + 2 == 5 then\n\tprint(\"Two plus two is five\") -- Doesn't print because the condition is false\nelseif 2 + 3 == 5 then\n\tprint(\"Two plus three is five\") -- Two plus three is five\nelse\n\tprint(\"All conditions failed\") -- Doesn't print because the previous condition is true\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data and Metadata with GetAsync in Roblox Lua\nDESCRIPTION: This snippet shows how to retrieve both data and its associated metadata using GetAsync. It demonstrates accessing service-defined properties like Version, CreatedTime, and UpdatedTime, as well as user-defined metadata and UserIds.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal success, currentExperience, keyInfo = pcall(function()\n    return experienceStore:GetAsync(\"User_1234\")\nend)\nif success then\n    print(currentExperience)\n    print(keyInfo.Version)\n    print(keyInfo.CreatedTime)\n    print(keyInfo.UpdatedTime)\n    print(keyInfo:GetUserIds())\n    print(keyInfo:GetMetadata())\nend\n```\n\n----------------------------------------\n\nTITLE: Basic ModuleScript Structure in Roblox Lua\nDESCRIPTION: Shows the fundamental structure of a ModuleScript with an empty table return pattern.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal module = {}\nreturn module\n```\n\n----------------------------------------\n\nTITLE: Countdown For Loop Implementation in Luau\nDESCRIPTION: A complete countdown implementation using a for loop that counts from 10 to 0, printing each number and waiting 1 second between iterations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0, -1 do\n\t-- Prints the current number the for loop is on\n\tprint(count)\n\t-- Wait 1 second\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Syntax Example\nDESCRIPTION: This code snippet demonstrates the basic syntax for creating a dictionary in Luau, using key-value pairs within curly braces. The keys are strings (Name, Type) and the values are also strings (Bobbie, Dog).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal pet = {\n   Name = \"Bobbie\",\n   Type = \"Dog\",\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Remote Function Invocation in Roblox\nDESCRIPTION: Demonstrates how to invoke a RemoteFunction from a client script to request creation of a part with specific color and position properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/security/security-tactics.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteFunction = ReplicatedStorage:WaitForChild(\"RemoteFunctionTest\")\n\n-- Pass part color and position when invoking the function\nlocal newPart = remoteFunction:InvokeServer(Color3.fromRGB(200, 0, 50), Vector3.new(0, 25, 0))\n\nif newPart then\n\tprint(\"The server created the requested part:\", newPart)\nelseif newPart == false then\n\tprint(\"The server denied the request. No part was created.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Disappearing Bridge Script in Luau\nDESCRIPTION: A full script demonstrating the disappearing bridge functionality using arrays and loops in Luau.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/loops-and-arrays.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal VANISH_RATE = 1.0\n\nlocal pathArray = {\n\tworkspace.Part1,\n\tworkspace.Part2,\n\tworkspace.Part3,\n}\n\nwhile true do\n\t-- Make a part disappear from the array in order\n\tfor partIndex = 1, #pathArray  do\n\t\ttask.wait(VANISH_RATE)\n\t\tlocal whichPart = pathArray[partIndex]\n\t\twhichPart.CanCollide = false\n\t\twhichPart.Transparency = 1\n\tend\n\n\t-- Wait for a second before making the path reappear\n\ttask.wait(1.0)\n\n\t-- Reset the path by making all parts walkable again\n\tfor partIndex = 1, #pathArray do\n\t\tlocal whichPart = pathArray[partIndex]\n\t\twhichPart.CanCollide = true\n\t\twhichPart.Transparency = 0\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Path Movement: Navigating Waypoints in Roblox with Lua\nDESCRIPTION: This snippet handles character movement between waypoints using the Humanoid:MoveTo() method in Roblox. It relies on calculating path waypoints and managing movement events to transition the character across the waypoints. Dependencies include the PathfindingService, Players, and Humanoid classes. The movement stops when the character reaches the destination or a path becomes blocked.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath()\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal TEST_DESTINATION = Vector3.new(100, 0, 100)\n\nlocal waypoints\nlocal nextWaypointIndex\nlocal reachedConnection\nlocal blockedConnection\n\nlocal function followPath(destination)\n\t-- Compute the path\n\tlocal success, errorMessage = pcall(function()\n\t\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\n\tend)\n\n\tif success and path.Status == Enum.PathStatus.Success then\n\t\t-- Get the path waypoints\n\t\twaypoints = path:GetWaypoints()\n\n\t\t-- Detect if path becomes blocked\n\t\tblockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)\n\t\t\t-- Check if the obstacle is further down the path\n\t\t\tif blockedWaypointIndex >= nextWaypointIndex then\n\t\t\t\t-- Stop detecting path blockage until path is re-computed\n\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\t-- Call function to re-compute new path\n\t\t\t\tfollowPath(destination)\n\t\t\tend\n\t\tend)\n\n\t\t-- Detect when movement to next waypoint is complete\n\t\tif not reachedConnection then\n\t\t\treachedConnection = humanoid.MoveToFinished:Connect(function(reached)\n\t\t\t\tif reached and nextWaypointIndex < #waypoints then\n\t\t\t\t\t-- Increase waypoint index and move to next waypoint\n\t\t\t\t\tnextWaypointIndex += 1\n\t\t\t\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\t\t\t\telse\n\t\t\t\t\treachedConnection:Disconnect()\n\t\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\tend\n\t\t\tend)\n\t\tend\n\n\t\t-- Initially move to second waypoint (first waypoint is path start; skip it)\n\t\tnextWaypointIndex = 2\n\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\telse\n\t\twarn(\"Path not computed!\", errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Setting HumanoidDescription for Spawning Players in Lua\nDESCRIPTION: The Lua code sets a specified HumanoidDescription for all new players upon spawning using the PlayerAdded event. Prerequisite is disabling automatic character loading. It relies on the creation of a new HumanoidDescription with specific attributes like HatAccessory and HeadColor. Applied to players as they join.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Stop automatic spawning so it can be done in the \"PlayerAdded\" callback\nPlayers.CharacterAutoLoads = false\n\nlocal function onPlayerAdded(player)\n\t-- Create a HumanoidDescription\n\tlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n\thumanoidDescription.HatAccessory = \"2551510151,2535600138\"\n\thumanoidDescription.BodyTypeScale = 0.1\n\thumanoidDescription.ClimbAnimation = 619521311\n\thumanoidDescription.Face = 86487700\n\thumanoidDescription.GraphicTShirt = 1711661\n\thumanoidDescription.HeadColor = Color3.new(0, 1, 0)\n\n\t-- Spawn character with the HumanoidDescription\n\tplayer:LoadCharacterWithHumanoidDescription(humanoidDescription)\nend\n\n-- Connect \"PlayerAdded\" event to \"onPlayerAdded()\" function\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Completed GameManager Script (Lua)\nDESCRIPTION: This is the completed GameManager script. It handles the main game loop, including waiting for players, starting the match, displaying the status, cleaning up the match, and resetting the match. It relies on several other modules (MatchManager, GameSettings, DisplayManager) and services (ServerStorage, Players) and events (MatchEnd).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tlocal endState = matchEnd.Event:Wait()\n\n\tlocal endStatus = matchManager.getEndStatus(endState)\n\tdisplayManager.updateStatus(endStatus)\n\n\tmatchManager.cleanupMatch()\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.resetMatch()\nend\n```\n\n----------------------------------------\n\nTITLE: Table Memory Leak Example in Luau\nDESCRIPTION: This code demonstrates a common memory leak scenario where player information is added to a table when a player joins, but not removed when they leave. This leads to the table growing indefinitely, consuming more and more memory over time.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/performance-optimization/improve.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerInfo = {}\nPlayers.PlayerAdded:Connect(function(player)\n\tplayerInfo[player] = {} -- some info\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing Health Pickups Loop in Lua\nDESCRIPTION: This snippet initializes all health pickups by enabling them and connecting their touch event to the 'onTouchHealthPickup' function for interaction management.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfor _, healthPickup in ipairs(healthPickups) do\n\thealthPickup:SetAttribute(\"Enabled\", true)\n\thealthPickup.Touched:Connect(function(otherPart)\n\t\tonTouchHealthPickup(otherPart, healthPickup)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Key Collection Script\nDESCRIPTION: Script that handles player interactions with key objects, using the TreasureManager module to process key collection events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal treasureManager = require(ServerStorage:WaitForChild(\"TreasureManager\"))\n\nlocal keys = script.Parent\nlocal keysFolder = keys.Parts\nlocal keysArray = keysFolder:GetChildren()\n\nlocal function partTouched(otherPart, keyPart)\n   local whichCharacter = otherPart.Parent\n   local humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid then\n      treasureManager.getKey(keyPart, whichCharacter)\n   end\nend\n\nfor keyIndex = 1, #keysArray do\n   local keyPart = keysArray[keyIndex]\n   keyPart.Touched:Connect(function(otherPart)\n      partTouched(otherPart, keyPart)\n   end)\nend\n```\n\n----------------------------------------\n\nTITLE: PickupManager ModuleScript Implementation\nDESCRIPTION: Example ModuleScript that implements a pickup bonus calculator with rarity multipliers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal PickupManager = {}\n\nlocal defaultMultiplier = 1.25\nlocal rarityMultipliers = {\n  common = 10,\n  uncommon = 20,\n  rare = 50,\n  legendary = 100\n}\n\nfunction PickupManager.getPickupBonus(rarity)\n  local bonus = rarityMultipliers[rarity] * defaultMultiplier\n  return bonus\nend\n\nreturn PickupManager\n```\n\n----------------------------------------\n\nTITLE: Building a Fading Tower with Nested Loops in Roblox Lua\nDESCRIPTION: This script creates a tower of cubes with increasing transparency from left to right. It uses nested loops to iterate through height, length, and width, creating a 3D structure. The transparency of each cube is calculated based on its position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal TOWER_SIZE = 6\nlocal CUBE_SIZE = 2\n\n-- Creates individual cubes\nlocal function makeCube(spawnX, spawnY, spawnZ)\n    local cube = Instance.new(\"Part\")\n    cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n    cube.Color = currentColor\n    cube.Transparency = cubeTransparency -- Sets transparency\n    cube.CFrame = CFrame.new(spawnX, spawnY, spawnZ)\n    cube.Parent = workspace\nend\n\n-- Builds tower\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\n    currentColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n\n    for lengthIndex = 1, TOWER_SIZE do\n        local spawnX = lengthIndex * CUBE_SIZE\n\tcubeTransparency = (lengthIndex - 1) * 0.10 --Updates every loop starting at 0\n\n        for widthIndex = 1, TOWER_SIZE do\n            local spawnZ = widthIndex * CUBE_SIZE\n            makeCube(spawnX, spawnY, spawnZ)\n            task.wait(0.05)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Event Invocation - LocalScript (RemoteFunction)\nDESCRIPTION: This LocalScript invokes a RemoteFunction on the server and receives a return value. It retrieves the RemoteFunction instance from ReplicatedStorage and invokes the function using InvokeServer(), passing a color and position as arguments. It then prints the returned part reference to the console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get reference to remote function instance\nlocal remoteFunction = ReplicatedStorage:FindFirstChildOfClass(\"RemoteFunction\")\n\n-- Pass a color and position when invoking the callback\nlocal newPart = remoteFunction:InvokeServer(Color3.fromRGB(255, 0, 0), Vector3.new(0, 25, -20))\n\n-- Output the returned part reference\nprint(\"The server created the requested part:\", newPart)\n```\n\n----------------------------------------\n\nTITLE: Declaring Table and List Types\nDESCRIPTION: This snippet explains how to declare various table types in Luau, including lists and indexed tables. The `{}` syntax is used to define structured arrangements of data, enabling structured data manipulation and type checks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal numbers: {number} = {1, 2, 3, 4, 5}\nlocal characterParts: {Instance} = LocalPlayer.Character:GetChildren()\n```\n\n----------------------------------------\n\nTITLE: Awarding Medals Based on Finish Time in Luau\nDESCRIPTION: This snippet demonstrates how to use if, elseif, and else statements to award different medals based on a player's finish time in a Roblox race game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function finish()\n   raceActive = false\n   print(\"You finished in \" .. timePassed)\n\n   if timePassed <= 10 then\n      print(\"You get a gold medal!\")\n   elseif timePassed > 10 and timePassed <= 20 then\n      print(\"You get a silver medal!\")\n   elseif  timePassed > 20 and timePassed <= 30 then\n      print(\"You get a bronze medal!\")\n   else\n      print(\"Try again!\")\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating the Main Game Loop in Lua\nDESCRIPTION: This code creates the main game loop using a `while true do` loop. This loop will run indefinitely, continuously cycling through the game's phases (intermission, competition, cleanup).  The other game logic will be placed inside of this loop.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Main game loop\nwhile true do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Regular Queue Using Table - Luau\nDESCRIPTION: This code demonstrates the implementation of a regular queue using tables in the Luau programming language for Roblox. This implementation allows for checking if the queue is empty, enqueuing, and dequeuing items. It is designed to be saved as a Class.ModuleScript in Class.ReplicatedStorage, making it accessible to both client and server.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/queues.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--!strict\nlocal Queue = {}\nQueue.__index = Queue\n\nexport type Queue<T> = typeof(setmetatable(\n\t{} :: {\n\t\t_first: number,\n\t\t_last: number,\n\t\t_queue: { T },\n\t},\n\tQueue\n))\n\nfunction Queue.new<T>(): Queue<T>\n\tlocal self = setmetatable({\n\t\t_first = 0,\n\t\t_last = -1,\n\t\t_queue = {},\n\t}, Queue)\n\n\treturn self\nend\n\n-- Check if the queue is empty\nfunction Queue.isEmpty<T>(self: Queue<T>)\n\treturn self._first > self._last\nend\n\n-- Add a value to the queue\nfunction Queue.enqueue<T>(self: Queue<T>, value: T)\n\tlocal last = self._last + 1\n\tself._last = last\n\tself._queue[last] = value\nend\n\n-- Remove a value from the queue\nfunction Queue.dequeue<T>(self: Queue<T>): T\n\tif self:isEmpty() then\n\t\terror(\"Cannot dequeue from empty queue\")\n\tend\n\n\tlocal first = self._first\n\tlocal value = self._queue[first]\n\tself._queue[first] = nil\n\tself._first = first + 1\n\n\treturn value\nend\n\nreturn Queue\n```\n\n----------------------------------------\n\nTITLE: Type Annotations and Assignments\nDESCRIPTION: This code illustrates how to assign Luau's primitive types using type annotations. It shows string and number type assignments and highlights the use of the `:` operator for type specification. These examples help enforce type constraints and reduce errors during runtime.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal foo: string = \"bar\"\nlocal x: number = 5\n```\n\n----------------------------------------\n\nTITLE: Using GetAsync with Caching - Luau\nDESCRIPTION: This snippet illustrates how to use the `GetAsync` method from `Class.GlobalDataStore` to read data while using caching. By default, data is cached for four seconds to enhance performance and reduce server requests.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/versioning-listing-and-caching.md#2025-04-21_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal value = Class.GlobalDataStore:GetAsync(key)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through an Array with ipairs() in Luau\nDESCRIPTION: Demonstrates how to use ipairs() to iterate through an array of player names and print their rankings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal players = {\"Ali\", \"Ben\", \"Cammy\"}\n\nfor playerRank, playerName in ipairs(players) do\n\tprint(\"Winner #\" .. playerRank .. \" is \" .. playerName)\nend\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary and PlayerAdded Event - Assigning Initial Points\nDESCRIPTION: This snippet assigns initial points (0) to the player in the `playerPoints` dictionary, using the player's name as the key. It then prints the player's name and their initial point value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setPoints(newPlayer)\n\tlocal name = newPlayer.Name\n\tprint(\"hello \" .. name)\n\tplayerPoints[name] = 0\n\tprint(name .. \" has \" .. playerPoints[name] .. \" points.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Table Addition with Metamethods\nDESCRIPTION: Creates a custom __add metamethod to merge and combine tables with complex logic\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal metatable = {\n\t__add = function(t1, t2)\n\t\tlocal sum = {}\n\t\tfor key, value in t1 do\n\t\t\tsum[key] = value\n\t\tend\n\n\t\tfor key, value in t2 do\n\t\t\tif sum[key] then\n\t\t\t\tsum[key] += value\n\t\t\telse\n\t\t\t\tsum[key] = value\n\t\t\tend\n\t\tend\n\t\treturn sum\n\tend\n}\n\nlocal table1 = setmetatable({10, 11, 12}, metatable)\nlocal table2 = setmetatable({13, 14, 15}, metatable)\n```\n\n----------------------------------------\n\nTITLE: Data Store Entries Response Examples in JSON\nDESCRIPTION: This JSON snippet shows example responses from the Data Stores API when listing entries with different scopes (global, special, and all scopes). It demonstrates the structure of the response, including the 'keys' array containing key-scope pairs and the 'nextPageCursor' for pagination.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/data-store-api-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"// Response for global scope\n{ \\\"keys\\\": [{ \\\"scope\\\": \\\"global\\\", \\\"key\\\": \\\"User_2\\\" }], \\\"nextPageCursor\\\": \\\"\\\" }\n\n// Response for special scope\n{\\\"keys\\\":[{\\\"scope\\\":\\\"special\\\",\\\"key\\\":\\\"User_6\\\"},{\\\"scope\\\":\\\"special\\\",\\\"key\\\":\\\"User_7\\\"}],\\\"nextPageCursor\\\":\\\"\\\"}\n\n// Response for AllScopes\n{\\\"keys\\\":[{\\\"scope\\\":\\\"global\\\",\\\"key\\\":\\\"User_3\\\"},{\\\"scope\\\":\\\"global\\\",\\\"key\\\":\\\"User_4\\\"},{\\\"scope\\\":\\\"global\\\",\\\"key\\\":\\\"User_5\\\"},{\\\"scope\\\":\\\"special\\\",\\\"key\\\":\\\"User_6\\\"},{\\\"scope\\\":\\\"special\\\",\\\"key\\\":\\\"User_7\\\"}],\\\"nextPageCursor\\\":\\\"\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Bid Placement with UpdateAsync in Lua\nDESCRIPTION: Example of using MemoryStoreSortedMap UpdateAsync method to handle concurrent bid updates with conflict resolution and retry mechanism\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/index.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\nlocal map = MemoryStoreService:GetSortedMap(\"AuctionItems\")\n\nfunction placeBid(itemKey, bidAmount)\n    map:UpdateAsync(itemKey, function(item)\n        item = item or { highestBid = 0 }\n        if item.highestBid < bidAmount then\n            item.highestBid = bidAmount\n            return item\n        end\n        print(\"item is \"..item.highestBid)\n        return nil\n    end, 1000)\nend\n\nplaceBid(\"MyItem\", 50)\nplaceBid(\"MyItem\", 40)\nprint(\"done\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a PlayerManager Module for Roblox Battle Arena Game in Lua\nDESCRIPTION: A comprehensive PlayerManager module for a Roblox battle arena game. It handles player spawning, weapon distribution, player tracking, match state management, and winner determination. The module interfaces with game services like Players, ServerStorage, and ReplicatedStorage while tracking active players and managing their lifecycle in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Modules\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\n\n-- Player Variables\nlocal activePlayers = {}\nlocal playerWeapon = ServerStorage.Weapon\n\nlocal function checkPlayerCount()\n\tif #activePlayers == 1 then\n\t\tmatchEnd:Fire(gameSettings.endStates.FoundWinner)\n\t\tprint(\"Found winner\")\n\tend\nend\n\nlocal function removeActivePlayer(player)\n\tprint(\"removing player\")\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tif whichPlayer == player then\n\t\t\ttable.remove(activePlayers, playerKey)\n\t\t\tplayersLeft.Value = #activePlayers\n\t\t\tcheckPlayerCount()\n\t\tend\n\tend\nend\n\nlocal function respawnPlayerInLobby(player)\n\tplayer.RespawnLocation = lobbySpawn\n\tplayer:LoadCharacter()\nend\n\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\n\t-- Give the player a tool\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\n\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\n\thumanoid.Died:Connect(function()\n\t\trespawnPlayerInLobby(player)\n\t\tremoveActivePlayer(player)\n\tend)\nend\n\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n\nlocal function removePlayerWeapon(whichPlayer)\n\t-- Check to see if a player exist in case they disconnected or left.\n\tif whichPlayer then\n\t\tlocal character = whichPlayer.Character\n\n\t\t-- If the player has it currently on their character\n\t\tlocal weapon = character:FindFirstChild(\"Weapon\")\n\n\t\tif weapon then\n\t\t\tweapon:Destroy()\n\t\tend\n\n\t\t-- If the player has the weapon in their backpack\n\t\tlocal backpackWeapon = whichPlayer.Backpack:FindFirstChild(\"Weapon\") \n\n\t\tif backpackWeapon then\n\t\t\tbackpackWeapon:Destroy()\n\t\tend\n\telse\n\t\tprint(\"No player to remove weapon\")\n\tend\nend\n\n\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal availableSpawnPoints = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers,whichPlayer)\n\n\t\t-- Gets a spawn location and then removes it from the table so the next player gets the next spawn\n\t\tlocal spawnLocation = table.remove(availableSpawnPoints, 1)\n\t\tpreparePlayer(whichPlayer, spawnLocation)\n\tend\n\n\tplayersLeft.Value = #activePlayers\nend\n\nfunction PlayerManager.getWinnerName()\n  local winningPlayer = activePlayers[1]\n\n\tif winningPlayer then\n\t\treturn winningPlayer.Name\n\telse\n\t\treturn \"Error: No player found\"\n\tend\nend\n\nfunction PlayerManager.removeAllWeapons()\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tremovePlayerWeapon(whichPlayer)\n\tend\nend\n\nfunction PlayerManager.resetPlayers()\n\tfor playerKey, whichPlayer in activePlayers do\n\t\trespawnPlayerInLobby(whichPlayer)\n\tend\n\n\tactivePlayers = {}\nend\n\n-- Events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Using UpdateAsync with Metadata in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to use UpdateAsync with metadata. The callback function receives the current value and keyInfo object, and returns the modified value along with UserIds and metadata. The example converts a player's nickname to uppercase.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal nicknameStore = DataStoreService:GetDataStore(\"Nicknames\")\n\nlocal function makeNameUpper(currentName, keyInfo)\n    local nameUpper = string.upper(currentName)\n    local userIDs = keyInfo:GetUserIds()\n    local metadata = keyInfo:GetMetadata()\n    return nameUpper, userIDs, metadata\nend\n\nlocal success, updatedName, keyInfo = pcall(function()\n    return nicknameStore:UpdateAsync(\"User_1234\", makeNameUpper)\nend)\nif success then\n    print(updatedName)\n    print(keyInfo.Version)\n    print(keyInfo.CreatedTime)\n    print(keyInfo.UpdatedTime)\n    print(keyInfo:GetUserIds())\n    print(keyInfo:GetMetadata())\nend\n```\n\n----------------------------------------\n\nTITLE: Single-line Comments in Luau\nDESCRIPTION: This code snippet shows how to create single-line comments using double hyphens (`--`). Single-line comments extend to the end of the line and are used for inline notes and explanations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/comments.md#2025-04-21_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\n-- This condition is really important because the world would blow up if it\n-- were missing.\nif not foo then\n\tstopWorldFromBlowingUp()\nend\n```\n\n----------------------------------------\n\nTITLE: Function Type Annotations in Luau\nDESCRIPTION: This function demonstrates how to add type annotations to function parameters and return types in Luau, enforcing stricter type checks on function operations and arguments. It mitigates runtime errors by ensuring correct type usage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function add(x: number, y: number): number\n\treturn x + y\nend\n```\n\n----------------------------------------\n\nTITLE: Get Enum Items in Roblox Lua\nDESCRIPTION: This code snippet demonstrates how to retrieve all items of an Enum using the `GetEnumItems()` method.  It iterates through the items of `Enum.PartType` and prints each item to the console. This provides a list of available PartTypes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/enums.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal partTypes = Enum.PartType:GetEnumItems()\nfor index, enumItem in partTypes do\n\tprint(enumItem)\nend\n\n--[[\n\tEnum.PartType.Ball\n\tEnum.PartType.Block\n\tEnum.PartType.Cylinder\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Array in Luau\nDESCRIPTION: Initialize an empty array to store dialogue options for an NPC, preparing for dynamic interaction\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-arrays.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal dialogueArray = {}\n```\n\n----------------------------------------\n\nTITLE: Setting Network Ownership to a Driver in Roblox Lua Script\nDESCRIPTION: This Lua script listens for changes in occupancy of a `Class.VehicleSeat` and assigns network ownership to the player sitting in the seat, ensuring the driver has control over the vehicle. This is crucial in maintaining a responsive vehicle interaction in gameplay. Dependencies include access to the Roblox Players service. Key parameters are `Players` service to identify player objects, `vehicleSeat` as the main object, and `Occupant` property for player detection. It automatically resets ownership when the seat is unoccupied.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/network-ownership.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal vehicleSeat = script.Parent\n\nvehicleSeat.Changed:Connect(function(prop)\n\tif prop == \"Occupant\" then\n\t\tlocal humanoid = vehicleSeat.Occupant\n\t\tif humanoid then\n\t\t\t-- Get the player from the character\n\t\t\tlocal player = Players:GetPlayerFromCharacter(humanoid.Parent)\n\t\t\tif player then\n\t\t\t\tvehicleSeat:SetNetworkOwner(player)\n\t\t\tend\n\t\telse\n\t\t\t-- Reset ownership when seat is unoccupied\n\t\t\tvehicleSeat:SetNetworkOwnershipAuto()\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Pathfinding with Boat Usage in Lua\nDESCRIPTION: This comprehensive script showcases character pathfinding implementation in Roblox, including path computation, waypoint following, obstacle detection, and custom boat usage for water traversal. It demonstrates how to handle PathfindingLink labels and integrate boat movement into the pathfinding process.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath({\n\tCosts = {\n\t\tWater = 20,\n\t\tUseBoat = 1\n\t}\n})\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal TEST_DESTINATION = Vector3.new(228.9, 17.8, 292.5)\n\nlocal waypoints\nlocal nextWaypointIndex\nlocal reachedConnection\nlocal blockedConnection\n\nlocal function followPath(destination)\n\t-- Compute the path\n\tlocal success, errorMessage = pcall(function()\n\t\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\n\tend)\n\n\tif success and path.Status == Enum.PathStatus.Success then\n\t\t-- Get the path waypoints\n\t\twaypoints = path:GetWaypoints()\n\n\t\t-- Detect if path becomes blocked\n\t\tblockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)\n\t\t\t-- Check if the obstacle is further down the path\n\t\t\tif blockedWaypointIndex >= nextWaypointIndex then\n\t\t\t\t-- Stop detecting path blockage until path is re-computed\n\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\t-- Call function to re-compute new path\n\t\t\t\tfollowPath(destination)\n\t\t\tend\n\t\tend)\n\n\t\t-- Detect when movement to next waypoint is complete\n\t\tif not reachedConnection then\n\t\t\treachedConnection = humanoid.MoveToFinished:Connect(function(reached)\n\t\t\t\tif reached and nextWaypointIndex < #waypoints then\n\t\t\t\t\t-- Increase waypoint index and move to next waypoint\n\t\t\t\t\tnextWaypointIndex += 1\n\n\t\t\t\t\t-- Use boat if waypoint label is \"UseBoat\"; otherwise move to next waypoint\n\t\t\t\t\tif waypoints[nextWaypointIndex].Label == \"UseBoat\" then\n\t\t\t\t\t\tuseBoat()\n\t\t\t\t\telse\n\t\t\t\t\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treachedConnection:Disconnect()\n\t\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\tend\n\t\t\tend)\n\t\tend\n\n\t\t-- Initially move to second waypoint (first waypoint is path start; skip it)\n\t\tnextWaypointIndex = 2\n\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\telse\n\t\twarn(\"Path not computed!\", errorMessage)\n\tend\nend\n\nfunction useBoat()\n\tlocal boat = Workspace.BoatModel\n\n\thumanoid.Seated:Connect(function()\n\t\t-- Start boat moving if agent is seated\n\t\tif humanoid.Sit then\n\t\t\ttask.wait(1)\n\t\t\tboat.CylindricalConstraint.Velocity = 5\n\t\tend\n\t\t-- Detect constraint position in relation to island\n\t\tlocal boatPositionConnection\n\t\tboatPositionConnection = RunService.PostSimulation:Connect(function()\n\t\t\t-- Stop boat when next to island\n\t\t\tif boat.CylindricalConstraint.CurrentPosition >= 94 then\n\t\t\t\tboatPositionConnection:Disconnect()\n\t\t\t\tboat.CylindricalConstraint.Velocity = 0\n\t\t\t\ttask.wait(1)\n\t\t\t\t-- Unseat agent and continue to destination\n\t\t\t\thumanoid.Sit = false\n\t\t\t\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\n\t\t\tend\n\t\tend)\n\tend)\nend\n\nfollowPath(TEST_DESTINATION)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bindable Function Callback\nDESCRIPTION: Demonstrates how to create a BindableFunction and set up its callback function for two-way communication.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\n-- Get reference to bindable function\nlocal bindableFunction = ServerScriptService:WaitForChild(\"TestBindableFunction\")\n\n-- Callback function\nlocal function addTwoNumbers(a, b)\n\treturn a + b\nend\n\n-- Set function as bindable function's callback\nbindableFunction.OnInvoke = addTwoNumbers\n```\n\n----------------------------------------\n\nTITLE: Managing Laser Damage - Roblox Lua\nDESCRIPTION: This snippet handles the server-side logic for managing laser damage to characters. It checks the valid shot conditions and reduces health if a character is hit by a laser fired by a player.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal eventsFolder = ReplicatedStorage.Events\nlocal LASER_DAMAGE = 10\nlocal MAX_HIT_PROXIMITY = 10\n\n-- Find the handle of the tool the player is holding\nlocal function getPlayerToolHandle(player)\n\tlocal weapon = player.Character:FindFirstChildOfClass(\"Tool\")\n\tif weapon then\n\t\treturn weapon:FindFirstChild(\"Handle\")\n\tend\nend\n\nlocal function isHitValid(playerFired, characterToDamage, hitPosition)\n\t-- Validate distance between the character hit and the hit position\n\tlocal characterHitProximity = (characterToDamage.HumanoidRootPart.Position - hitPosition).Magnitude\n\tif characterHitProximity > MAX_HIT_PROXIMITY then\n\t\treturn false\n\tend\n\n\t-- Check if shooting through walls\n\tlocal toolHandle = getPlayerToolHandle(playerFired)\n\tif toolHandle then\n\t\tlocal rayLength = (hitPosition - toolHandle.Position).Magnitude\n\t\tlocal rayDirection = (hitPosition - toolHandle.Position).Unit\n\t\tlocal raycastParams = RaycastParams.new()\n\t\traycastParams.FilterDescendantsInstances = {playerFired.Character}\n\t\tlocal rayResult = workspace:Raycast(toolHandle.Position, rayDirection * rayLength, raycastParams)\n\n\t\t-- If an instance was hit that was not the character then ignore the shot\n\t\tif rayResult and not rayResult.Instance:IsDescendantOf(characterToDamage) then\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true\nend\n\n-- Notify all clients that a laser has been fired so they can display the laser\nlocal function playerFiredLaser(playerFired, endPosition)\n\tlocal toolHandle = getPlayerToolHandle(playerFired)\n\tif toolHandle then\n\t\teventsFolder.LaserFired:FireAllClients(playerFired, toolHandle, endPosition)\n\tend\nend\n\nfunction damageCharacter(playerFired, characterToDamage, hitPosition)\n\tlocal humanoid = characterToDamage:FindFirstChildWhichIsA(\"Humanoid\")\n\tlocal validShot = isHitValid(playerFired, characterToDamage, hitPosition)\n\tif humanoid and validShot then\n\t\t-- Remove health from character\n\t\thumanoid.Health -= LASER_DAMAGE\n\tend\nend\n\n-- Connect events to appropriate functions\neventsFolder.DamageCharacter.OnServerEvent:Connect(damageCharacter)\neventsFolder.LaserFired.OnServerEvent:Connect(playerFiredLaser)\n```\n\n----------------------------------------\n\nTITLE: Forwarding Arguments in Lua Variadic Function\nDESCRIPTION: Demonstrates how to create a wrapper function that captures and passes variable arguments to another function, with additional logging or context.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printAround(functionToPrintAround, ...)\n\tprint(\"Before\")\n\tfunctionToPrintAround(...)\n\tprint(\"After\")\nend\n\nlocal function addNumbers(x, y, z)\n\tprint(\"x =\", x)\n\tprint(\"y + z =\", y + z)\nend\n\nprintAround(addNumbers, 1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Metadata with DataStoreSetOptions in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to set custom metadata when storing data using the SetAsync method. It creates a DataStoreSetOptions object, defines metadata using SetMetadata(), and passes it along with a table of UserIds to SetAsync().\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal setOptions = Instance.new(\"DataStoreSetOptions\")\nsetOptions:SetMetadata({[\"ExperienceElement\"] = \"Fire\"})\n\nlocal success, errorMessage = pcall(function()\n    experienceStore:SetAsync(\"User_1234\", 50, {1234}, setOptions)\nend)\nif not success then\n    print(errorMessage)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing CoinService Script with PlayerData and Leaderboard Integration in Lua\nDESCRIPTION: This script manages coin collection in a Roblox game by handling coin touch events, updating player data using the PlayerData module, and displaying statistics via the Leaderboard module. It includes initialization of services, setting up event listeners for coin collection, and defining cooldown mechanics for coin respawning.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/record-and-display-player-data.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Initializing services and variables\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Modules\nlocal Leaderboard = require(ServerStorage.Leaderboard)\nlocal PlayerData = require(ServerStorage.PlayerData)\n\nlocal coinsFolder = Workspace.World.Coins\nlocal coins = coinsFolder:GetChildren()\n\nlocal COIN_KEY_NAME = PlayerData.COIN_KEY_NAME\nlocal COOLDOWN = 10\nlocal COIN_AMOUNT_TO_ADD = 1\n\nlocal function updatePlayerCoins(player, updateFunction)\n  -- Update the coin table\n  local newCoinAmount = PlayerData.updateValue(player, COIN_KEY_NAME, updateFunction)\n\n  -- Update the coin leaderboard\n  Leaderboard.setStat(player, COIN_KEY_NAME, newCoinAmount)\nend\n\n-- Defining the event handler\nlocal function onCoinTouched(otherPart, coin)\n  if coin:GetAttribute(\"Enabled\") then\n    local character = otherPart.Parent\n    local player = Players:GetPlayerFromCharacter(character)\n    if player then\n      -- Player touched a coin\n      coin.Transparency = 1\n      coin:SetAttribute(\"Enabled\", false)\n      updatePlayerCoins(player, function(oldCoinAmount)\n        oldCoinAmount = oldCoinAmount or 0\n        return oldCoinAmount + COIN_AMOUNT_TO_ADD\n      end)\n\n      task.wait(COOLDOWN)\n      coin.Transparency = 0\n      coin:SetAttribute(\"Enabled\", true)\n    end\n  end\nend\n\n-- Setting up event listeners\nfor _, coin in coins do\n  coin:SetAttribute(\"Enabled\", true)\n  coin.Touched:Connect(function(otherPart)\n    onCoinTouched(otherPart, coin)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a Queue in Luau\nDESCRIPTION: Adds a new item to the Memory Store Queue with an expiration time and an optional priority. The example demonstrates error handling using pcall to manage potential failures during the asynchronous call.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/queue.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal queue = MemoryStoreService:GetQueue(\"Queue1\")\n\nlocal addSuccess, addError = pcall(function()\n\tqueue:AddAsync(\"User_1234\", 30, 1)\nend)\nif not addSuccess then\n\twarn(addError)\nend\n```\n\n----------------------------------------\n\nTITLE: Break Statement in Luau Loop\nDESCRIPTION: This code demonstrates the use of the `break` statement in a Luau `while` loop. The loop continues to execute until `secondsElapsed` equals `timeout`, at which point the `break` statement terminates the loop prematurely.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal secondsElapsed = 0\nlocal timeout = 5\n\nwhile true do\n\ttask.wait(1)\n\tsecondsElapsed += 1\n\tprint(\"Seconds elapsed:\", secondsElapsed)\n\n\tif secondsElapsed == timeout then\n\t\tbreak\n\tend\nend\n\nprint(\"Five seconds elapsed. Time to move on!\")\n\n--[[ Resulting output:\n1\n2\n3\n4\n5\nFive seconds elapsed. Time to move on!\n]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Player State and Respawn Handling in Lua\nDESCRIPTION: This Lua script handles player state changes and respawn behavior in a Roblox laser tag game. It includes functions for managing player movement, camera control, and UI visibility based on the player's state.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerState = require(ReplicatedStorage.PlayerState)\nlocal PlayerAttribute = require(ReplicatedStorage.PlayerAttribute)\nlocal BlasterState = require(ReplicatedStorage.Blaster.BlasterState)\nlocal togglePlayerMovement = require(script.togglePlayerMovement)\nlocal togglePlayerCamera = require(script.togglePlayerCamera)\nlocal scheduleDestroyForceField = require(ReplicatedStorage.scheduleDestroyForceField)\n\nlocal localPlayer = Players.LocalPlayer\n```\n\n----------------------------------------\n\nTITLE: Checking Item Ownership with Python Inventory API\nDESCRIPTION: This Python snippet connects to the Roblox Inventory API to check if a user owns specified item IDs. It uses the 'requests' module and requires setting 'userId' and 'apiKey'. The URL is constructed with a filter for asset IDs. The request returns the user's inventory data, printed in formatted JSON.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/inventory.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nimport json\n\nuserId = 11111111111\napiKey = '123456789012345678901234567890123456789012345678'\n\nhostname = 'https://apis.roblox.com'\npath = f'/cloud/v2/users/{userId}/inventory-items'\nurl = hostname + path\nparameters = {\n    'filter': 'assetIds=62724852,1028595,4773588762'\n}\nheaders = {'x-api-key': f'{apiKey}'}\n\nresponse = requests.get(url, params=parameters, headers=headers)\n\nprint(json.dumps(json.loads(response.text), indent=2))\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in Luau\nDESCRIPTION: This snippet demonstrates how to define a custom type using the `type` keyword in Luau. It requires no additional dependencies and allows creating structured data types, such as a vector. This method enhances type safety by enabling custom type definitions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ntype Vector2 = {x: number, y: number}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Check for Humanoid in Luau\nDESCRIPTION: Uses an if statement to check if a Humanoid was found, ensuring the trap only affects characters with Humanoids.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/traps-with-if-statements.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal trapPart = script.Parent\n\nlocal function onTouch(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n   -- Evaluates if a Humanoid was found\n   if humanoid then\n      print(\"Found a Humanoid\")\n   end\nend\n\ntrapPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Creating Towers with Nested Loops in Luau\nDESCRIPTION: This script creates towers of parts in Roblox Studio using nested loops. The outer loop controls the number of batches of parts, while the inner loop creates the actual parts within each batch. The `createPart` function instantiates and styles each part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal numberOfBatches = 7\nlocal partsPerBatch = 5\nlocal partsMade = 0\n\n-- Makes a single cube\nlocal function createPart()\n  local part = Instance.new(\"Part\")\n  part.Size = Vector3.new(2, 2, 2)\n  part.CFrame = CFrame.new(20, 0, 20)\n  part.Color = currentColor\n  part.Parent = workspace\nend\n\n-- Outer loop\nfor partBatch = 1, numberOfBatches do\n  print(\"Top outer loop: part batch \" .. partBatch)\n  currentColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n\n  -- Inner loop\n  for partNumber = 1, partsPerBatch do\n    createPart()\n    print(\"Inner loop: part \" .. partNumber)\n    partsMade += 1\n    task.wait(0.5)\n  end\n\n  print(\"Bottom outer loop: \" .. partsMade .. \" parts made so far.\")\n\n  task.wait(2)\nend\n```\n\n----------------------------------------\n\nTITLE: Client-side Module Requiring\nDESCRIPTION: Example of requiring and using a ModuleScript from a client script in ReplicatedStorage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get the value returned by the ModuleScript\nlocal PickupManager = require(ReplicatedStorage:WaitForChild(\"PickupManager\"))\n\n-- Call a ModuleScript function\nlocal bonus = PickupManager.getPickupBonus(\"legendary\")\nprint(bonus)  --> 125\n```\n\n----------------------------------------\n\nTITLE: Event Invocation - LocalScript with Table Identity\nDESCRIPTION: This local script invokes a remote function with a table and logs the table identity before and after the invocation, showcasing the differences in table identity. It requires ReplicatedStorage and a remote function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteFunction = ReplicatedStorage:FindFirstChildOfClass(\"RemoteFunction\")\n\nlocal inventoryData = {\n\t\"Sword\", \"Bow\"\n}\n-- Output original table identity\nprint(tostring(inventoryData))  --> table: 0x059bcdbb2b576549\n\nlocal invokeReturn = remoteFunction:InvokeServer(inventoryData)\n\n-- Output table identity upon return\nprint(tostring(invokeReturn))  --> table: 0x9fcae7919563a0e9\n```\n\n----------------------------------------\n\nTITLE: Loading User Data on Join using Roblox Lua\nDESCRIPTION: This script listens for the PlayerAdded event and attempts to retrieve a user's data from a datastore using their user ID as the key. It allows for loading player progress and stats upon joining the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal playerDataStore = DataStoreService:GetDataStore(\"PlayerData\")\n\ngame:GetService(\"Players\").PlayerAdded:Connect(function(player)\n\tlocal userId = player.UserId\n\n\t-- Read data store key\n\tlocal getSuccess, currentData = pcall(function()\n\t\treturn playerDataStore:GetAsync(userId)\n\tend)\n\n\tif getSuccess then\n\t\tprint(currentData)\n\tend\n\n\t-- Do further actions with currentData\nend)\n```\n\n----------------------------------------\n\nTITLE: Polling for Operation Results in Python\nDESCRIPTION: This Python script demonstrates how to poll for the results of a long-running operation in the Roblox Cloud API. It makes repeated GET requests to check if an operation is complete, using a fixed delay between attempts with a maximum number of retries.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport time\n\n# Generate at https://create.roblox.com/dashboard/credentials\napiKey = \"<API_KEY>\"\n# Use the Operation path from your initial request\n# Takes the form of \"universes/<UNIVERSE_ID>/places/<PLACE_ID>/instances/<INSTANCE_ID>/operations/<OPERATION_ID>\"\noperationPath = \"<OPERATION_PATH>\"\n\n# Polling constants\nnumberOfRetries = 10\nretryPollingCadence = 5\n\n# Request header\napiKeyHeaderKey = \"x-api-key\"\n# Endpoint URL for long-running operation polling\ngetOperationUrl = \"https://apis.roblox.com/cloud/v2/%s\"\n# JSON keys\ndoneJSONKey = \"done\"\n\ndef GetOperation(operationPath):\n  url = getOperationUrl % (operationPath)\n  headerData = {apiKeyHeaderKey: apiKey}\n  results = requests.get(url, headers = headerData)\n  return results\n\ndef PollForResults(operationPath):\n  currentRetries = 0\n  while (currentRetries < numberOfRetries):\n    time.sleep(retryPollingCadence)\n    results = GetOperation(operationPath)\n    currentRetries += 1\n\n    if (results.status_code != 200 or results.json()[doneJSONKey]):\n      return results\n\nresponse = PollForResults(operationPath)\nprint(\"Response:\", response.status_code, response.text)\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Code Generation in Luau Scripts\nDESCRIPTION: Enables native code generation for all functions in a Luau script by using the \"--!native\" comment at the top. This allows the script to be compiled directly to machine code, improving performance. No additional changes are needed as all Luau features and APIs remain supported.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/native-code-gen.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--!native\\n\\nprint(\\\"Hello from native code!\\\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Badge Information via BadgeService in Lua\nDESCRIPTION: This Lua code snippet fetches badge details like name, enablement status, description, and icon using GetBadgeInfoAsync. It handles errors gracefully and displays badge information, requiring a valid badge ID for input. Outputs include badge properties and error warnings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/publishing/badges.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal BadgeService = game:GetService(\"BadgeService\")\n\nlocal BADGE_ID = 00000000  -- Change this to your badge ID\n\n-- Fetch badge information\nlocal success, result = pcall(BadgeService.GetBadgeInfoAsync, BadgeService, BADGE_ID)\n\n-- Output the information\nif success then\n\tprint(\"Badge:\", result.Name)\n\tprint(\"Enabled:\", result.IsEnabled)\n\tprint(\"Description:\", result.Description)\n\tprint(\"Icon:\", \"rbxassetid://\" .. result.IconImageId)\nelse\n\twarn(\"Error while fetching badge info:\", result)\nend\n```\n\n----------------------------------------\n\nTITLE: Using SafeTeleport Module to Teleport in Lua\nDESCRIPTION: This snippet demonstrates how to use the SafeTeleport module to teleport a player to a specific place ID.  It retrieves the SafeTeleport module from ServerScriptService, and then calls the SafeTeleport function with the player, place ID, and teleport options.  It provides more robust error handling and retry logic compared to directly using TeleportService:TeleportAsync().\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal SafeTeleport = require(ServerScriptService.SafeTeleport)\n\nlocal TARGET_PLACE_ID = 1818 -- replace with your own place ID\n\nlocal playerToTeleport = Players:GetPlayers()[1] -- get the first user in the game\n\nSafeTeleport(TARGET_PLACE_ID, {playerToTeleport}, teleportOptions)\n```\n\n----------------------------------------\n\nTITLE: Final Code for Health Pickup Management in Lua\nDESCRIPTION: This is the complete implementation of the health pickup script that includes all previously declared functionalities, encapsulating their job in a single cohesive script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal MAX_HEALTH = 100\nlocal ENABLED_TRANSPARENCY = 0.4\nlocal DISABLED_TRANSPARENCY = 0.9\nlocal COOLDOWN = 10\n\nlocal healthPickupsFolder = workspace:WaitForChild(\"HealthPickups\")\nlocal healthPickups = healthPickupsFolder:GetChildren()\n\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tif healthPickup:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\thumanoid.Health = MAX_HEALTH\n\t\t\thealthPickup.Transparency = DISABLED_TRANSPARENCY\n\t\t\thealthPickup:SetAttribute(\"Enabled\", false)\n\t\ttask.wait(COOLDOWN)\n\t\thealthPickup.Transparency = ENABLED_TRANSPARENCY\n\t\thealthPickup:SetAttribute(\"Enabled\", true)\n\t\tend\n\tend\nend\n\nfor _, healthPickup in ipairs(healthPickups) do\n\thealthPickup:SetAttribute(\"Enabled\", true)\n\thealthPickup.Touched:Connect(function(otherPart)\n\t\tonTouchHealthPickup(otherPart, healthPickup)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Iterating Through an Array with a For Loop in Luau\nDESCRIPTION: Use a for loop to iterate through an array of parts, making them disappear one by one with a specified delay.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/loops-and-arrays.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal VANISH_RATE = 1.5\n\nfor partIndex = 1, #pathArray  do\n   task.wait(VANISH_RATE)\n   local whichPart = pathArray[partIndex]\n   whichPart.CanCollide = false\n   whichPart.Transparency = 1\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Collisions Between Parts in Lua\nDESCRIPTION: This script demonstrates how to detect and handle collisions between two parts in Roblox. It creates a function that prints a message when a specific part collides with any other part in the workspace.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/assistant/prompt-engineering.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = workspace.Part\n\nlocal function onTouched(otherPart)\n    print(part.Name .. \" collided with \" .. otherPart.Name)\nend\n\npart.Touched:Connect(onTouched)\n```\n\n----------------------------------------\n\nTITLE: Safe Teleport Function with Retry Logic in Lua\nDESCRIPTION: This ModuleScript defines a SafeTeleport function that handles teleportation with retry logic and error handling. It uses pcall to protect against errors and retries the teleport a limited number of times.  It also defines a handleFailedTeleport function that retries the teleport, or reports an invalid teleport error.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal TeleportService = game:GetService(\"TeleportService\")\n\nlocal ATTEMPT_LIMIT = 5\nlocal RETRY_DELAY = 1\nlocal FLOOD_DELAY = 15\n\nlocal function SafeTeleport(placeId, players, options)\n    local attemptIndex = 0\n    local success, result -- define pcall results outside of loop so results can be reported later on\n\n    repeat\n        success, result = pcall(function()\n            return TeleportService:TeleportAsync(placeId, players, options) -- teleport the user in a protected call to prevent erroring\n        end)\n        attemptIndex += 1\n        if not success then\n            task.wait(RETRY_DELAY)\n        end\n    until success or attemptIndex == ATTEMPT_LIMIT -- stop trying to teleport if call was successful, or if retry limit has been reached\n\n    if not success then\n        warn(result) -- print the failure reason to output\n    end\n\n    return success, result\nend\n\nlocal function handleFailedTeleport(player, teleportResult, errorMessage, targetPlaceId, teleportOptions)\n    if teleportResult == Enum.TeleportResult.Flooded then\n        task.wait(FLOOD_DELAY)\n    elseif teleportResult == Enum.TeleportResult.Failure then\n        task.wait(RETRY_DELAY)\n    else\n        -- if the teleport is invalid, report the error instead of retrying\n        error((\"Invalid teleport [%s]: %s\"):format(teleportResult.Name, errorMessage))\n    end\n\n    SafeTeleport(targetPlaceId, {player}, teleportOptions)\nend\n\nTeleportService.TeleportInitFailed:Connect(handleFailedTeleport)\n\nreturn SafeTeleport\n```\n\n----------------------------------------\n\nTITLE: Complete Dictionary Search Function in Luau\nDESCRIPTION: This function uses pairs() to search a dictionary (representing rooms in a house) for a specific value and return the corresponding key (room name). It demonstrates how to iterate through a dictionary and return a value based on a condition.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/return-values-from-tables.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function findPet(whereToSearch, searchFor)\n\tfor place, value in pairs(whereToSearch) do\n\t\tif value == searchFor then\n\t\t\treturn place\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Player Additions with Roblox Lua\nDESCRIPTION: This snippet listens for player additions in the game and retrieves join data to check for referrals. It then uses a RemoteEvent to communicate with the client, identifying the referrer and allowing the server to process potential rewards for the inviter and invitee. Dependencies include the Players and ReplicatedStorage services and require existing RemoteEvent setup. Inputs involve player objects, and outputs include fired events to clients.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/referral-system.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction onPlayerAdded(player)\n\n\tlocal referredByPlayerId = player:GetJoinData().ReferredByPlayerId\n\n\tlocal referrerEvent: RemoteEvent = ReplicatedStorage:FindFirstChild(\"ReferralReceivedEvent\")\n\treferrerEvent:FireClient(player, referredByPlayerId)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Updating Data Store with SetAsync\nDESCRIPTION: The function SetAsync() updates all related data for a single user efficiently in a data store. This ensures that user data remains consistent. The function uses a single object approach for storing related data, adhering to the 4 MB object size limit.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/best-practices.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n\"Class.GlobalDataStore:SetAsync()|SetAsync()\"\n```\n\n----------------------------------------\n\nTITLE: Access EnumItem Properties in Roblox Lua\nDESCRIPTION: This code snippet shows how to access the properties of an `EnumItem`, specifically `Name`, `Value`, and `EnumType`. It prints the properties of the `Enum.PartType.Cylinder` EnumItem, demonstrating how to retrieve its name, numerical value, and parent Enum.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/enums.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Properties of the EnumItem called Enum.PartType.Cylinder\nprint(Enum.PartType.Cylinder.Name) -- Cylinder\nprint(Enum.PartType.Cylinder.Value) -- 2\nprint(Enum.PartType.Cylinder.EnumType) -- PartType\n```\n\n----------------------------------------\n\nTITLE: Firing Remote Events from Roblox Client\nDESCRIPTION: LocalScript that demonstrates how to fire a RemoteEvent from the client to the server, passing color and position parameters for Part creation. Shows proper usage of FireServer method.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Fire the remote event and pass additional arguments\nremoteEvent:FireServer(Color3.fromRGB(255, 0, 0), Vector3.new(0, 25, -20))\n```\n\n----------------------------------------\n\nTITLE: Deep Cloning Tables in Luau\nDESCRIPTION: Demonstrates creating a deep clone of a table with nested tables using a recursive function in Luau. It details the method for deep copying each element of the table.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\n-- The function used for deep copying a table\nlocal function deepCopy(original)\n\t-- Define the new table for the copy\n\tlocal copy = {}\n\n\t-- Loop through the original table to clone\n\tfor key, value in original do\n\t\t-- If the type of the value is a table, deep copy it to the key (index)\n\t\t-- Else (or) the type isn't a table, assign the default value to the index instead\n\t\tcopy[key] = type(value) == \"table\" and deepCopy(value) or value\n\tend\n\n\t-- Return the finalized copy of the deep cloned table\n\treturn copy\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal original = {\n\tkey = \"value\",\n\tplayerInfo = {\n\t\tplayerID = 505306092,\n\t\tplayerName = \"PlayerName\"\n\t},\n\totherInfo = {\n\t\t{\n\t\t\t{1, 3, 5, 7, 9}\n\t\t}\n\t}\n}\n\nlocal clone = deepCopy(original)\n```\n\n----------------------------------------\n\nTITLE: Raycast Hit Detection and Result Processing in Roblox\nDESCRIPTION: Shows how to check if a raycast hit something and access the properties of the RaycastResult, such as the hit position, instance, distance, material, and normal vector.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/raycasting.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal rayOrigin = Vector3.zero\nlocal rayDirection = Vector3.new(0, -100, 0)\n\nlocal raycastResult = Workspace:Raycast(rayOrigin, rayDirection)\n\nif raycastResult then\n\tprint(\"Instance:\", raycastResult.Instance)\n\tprint(\"Position:\", raycastResult.Position)\n\tprint(\"Distance:\", raycastResult.Distance)\n\tprint(\"Material:\", raycastResult.Material)\n\tprint(\"Normal:\", raycastResult.Normal)\nelse\n\twarn(\"No raycast result!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Variables and Functions in Luau\nDESCRIPTION: This snippet demonstrates how to declare and use a local variable and local function in Luau. The variable 'helloWorld' is declared and accessed within the local function 'printHelloWorld'. The expected output is the string 'Hello World!' when 'printHelloWorld()' is called.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/scope.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal helloWorld = 'Hello World!'\nlocal function printHelloWorld()\n\tprint(helloWorld)\nend\nprintHelloWorld() -- Hello World!\n```\n\n----------------------------------------\n\nTITLE: Reward Mechanism for Video Ad in Roblox\nDESCRIPTION: This Lua code snippet demonstrates how to implement a reward mechanism for users who watch a video ad to completion in a Roblox experience.  It includes functions for granting in-game rewards, showing a reward prompt to the user, and handling different ad events like loading, granting, and unloading.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/immersive-ads.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function grantReward(PlayerId)\n   -- grant an in-game reward\nend\nlocal function showRewardPrompt(PlayerId)\n   -- show Prompt\nend\nlocal function hideRewardPrompt(PlayerId)\n   -- hide Prompt\nend\nlocal AdGui = script.Parent\nAdGui.OnAdEvent = function(eventData)\n   local AdEventType = eventData.AdEventType\n   local PlayerId = eventData.PlayerId\n   if AdEventType == Enum.AdEventType.RewardedAdLoaded then\n       showRewardPrompt(PlayerId)\n       return true\n   elseif AdEventType == Enum.AdEventType.RewardedAdGrant then\n       grantReward(PlayerId)\n       hideRewardPrompt(PlayerId)\n       return true\n   elseif AdEventType == Enum.AdEventType.RewardedAdUnloaded then\n       hideRewardPrompt(PlayerId)\n       return true\n   end\n   return false\nend\n```\n\n----------------------------------------\n\nTITLE: Listening for Property and Attribute Changes\nDESCRIPTION: Demonstrates various ways to detect and respond to changes in properties and attributes using events and signals.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\n-- Local functions\nlocal function onAnyPropertyChange(property)\n\t-- Ignore changes to attributes\n\tif property ~= \"Attributes\" then\n\t\tprint(property) --> Name\n\t\tprint(cabbage[property]) --> Cabbage1\n\tend\nend\n\nlocal function onAnyAttributeChange(attribute)\n\tprint(attribute) --> Grow, GrowthRate\n\tprint(cabbage:GetAttribute(attribute)) --> false, 3\nend\n\n-- Listen for changes and connect to local functions\ncabbage.Changed:Connect(onAnyPropertyChange)\ncabbage.AttributeChanged:Connect(onAnyAttributeChange)\n\n-- Listen for changes and connect to anonymous functions\ncabbage:GetPropertyChangedSignal(\"Name\"):Connect(function()\n\tprint(cabbage.Name) --> Cabbage1\nend)\ncabbage:GetAttributeChangedSignal(\"GrowthRate\"):Connect(function()\n\tprint(cabbage:GetAttribute(\"GrowthRate\")) --> 3\nend)\n\n-- Fires Changed and GetPropertyChangedSignal()\ncabbage.Name = \"Cabbage1\"\n\n-- Fires Changed and AttributeChanged\ncabbage:SetAttribute(\"Grow\", false)\n\n-- Fires Changed, AttributeChanged, and GetAttributeChangedSignal()\ncabbage:SetAttribute(\"GrowthRate\", 3)\n```\n\n----------------------------------------\n\nTITLE: Firing Blast Events in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to fire two types of events when blast data is ready: BindableEvent for client-side notification and RemoteEvent for server-side notification. Dependencies include proper event instances within ReplicatedStorage. It primarily handles the signaling for blast initiation, with the blastData being the core parameter passed. Outputs are event notifications dispatched to different subscribers in the game environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal laserBlastedBindableEvent = ReplicatedStorage.Instances.LaserBlastedBindableEvent\nlocal laserBlastedEvent = ReplicatedStorage.Instances.LaserBlastedEvent\n\nlaserBlastedBindableEvent:Fire(blastData)\nlaserBlastedEvent:FireServer(blastData)\n```\n\n----------------------------------------\n\nTITLE: Defining Unions and Intersections\nDESCRIPTION: The code details how to define and use union and intersection types in Luau, which provide a way to express composite type relationships. These constructs facilitate flexible type management across complex data structures.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\ntype numberOrString = number | string\ntype type1 = {foo: string}\ntype type2 = {bar: number}\ntype type1and2 = type1 & type2  -- {foo: string} & {bar: number}\n\nlocal numString1: numberOrString = true  -- Type error\nlocal numString2: type1and2 = {foo = \"hello\", bar = 1}\n```\n\n----------------------------------------\n\nTITLE: Detecting Animation Markers in Lua\nDESCRIPTION: This snippet demonstrates how to use the AnimationTrack:GetMarkerReachedSignal() method to detect specific points in an animation and trigger actions, such as playing a sound effect when a character's foot touches the ground.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.AnimationTrack:GetMarkerReachedSignal()\n```\n\n----------------------------------------\n\nTITLE: Setting up RaycastParams in Lua\nDESCRIPTION: This snippet sets up RaycastParams to prevent the laser from colliding with the player's own character. The player's character is added to the FilterDescendantsInstances property of the RaycastParams, which tells the raycast to ignore these instances.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal tool = script.Parent\n\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 500\n\nlocal function getWorldMousePosition()\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Data Store\nDESCRIPTION: This snippet demonstrates how to read a value from a data store using the GetAsync method. It captures the result using pcall to manage potential failures, allowing for safe retrieval of stored data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal success, currentExperience = pcall(function()\n\treturn experienceStore:GetAsync(\"User_1234\")\nend)\nif success then\n\tprint(currentExperience)\nend\n```\n\n----------------------------------------\n\nTITLE: Event Firing - Script with Non-Replicated Instance\nDESCRIPTION: This script shows that instances that are not visible to the client, such as those in ServerStorage, will receive 'nil' when fired through a remote event. It listens for player additions and attempts to send a stored part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Will be received as 'nil' because client can't access ServerStorage\nlocal storedPart = Instance.new(\"Part\")\nstoredPart.Parent = ServerStorage\n\nlocal function onPlayerAdded(player)\n\tremoteEvent:FireClient(player, storedPart)\nend\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Sending Network Message from Client\nDESCRIPTION: This LocalScript, placed in ReplicatedFirst, sends a network message using the encapsulated FireServer function from the NetworkManagerClient ModuleScript. It includes an ID ('RequestA') and an optional argument ('Hello'). This demonstrates how to use the encapsulated function to send network messages easily.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- LocalScript in ReplicatedFirst\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\n\nlocal NetworkManagerClient = require(ReplicatedFirst:WaitForChild(\"NetworkManagerClient\"))\nNetworkManagerClient.FireServer(\"RequestA\", \"Hello\")\n\n```\n\n----------------------------------------\n\nTITLE: Save Data to DataStore\nDESCRIPTION: This code saves data to a data store using SetAsync.  It also utilizes pcall to handle potential errors during the network request, ensuring that errors are caught and logged rather than crashing the game. The player's UserID is used as the key, and the amount of gold as the value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n\n-- Data store key and value\nlocal playerUserID = 505306092\nlocal playerGold = 250\n\n-- Set data store key\nlocal success, error = pcall(function()\n    goldStore:SetAsync(playerUserID, playerGold)\nend)\nif not success then\n    warn(error)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Text Animation Module in Roblox\nDESCRIPTION: ModuleScript that implements typewriter animation functionality with localization support. Handles rich text formatting, line breaks, and UTF-8 character processing with configurable animation speed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SOURCE_LOCALE = \"en\"\nlocal translator = nil\n\nlocal AnimateUI = {}\n\nfunction AnimateUI.loadTranslator()\n\tpcall(function()\n\t\ttranslator = LocalizationService:GetTranslatorForPlayerAsync(Players.LocalPlayer)\n\tend)\n\tif not translator then\n\t\tpcall(function()\n\t\t\ttranslator = LocalizationService:GetTranslatorForLocaleAsync(SOURCE_LOCALE)\n\t\tend)\n\tend\nend\n\nfunction AnimateUI.typeWrite(guiObject, text, delayBetweenChars)\n\tguiObject.Visible = true\n\tguiObject.AutoLocalize = false\n\tlocal displayText = text\n\n\t-- Translate text if possible\n\tif translator then\n\t\tdisplayText = translator:Translate(guiObject, text)\n\tend\n\n\t-- Replace line break tags so grapheme loop will not miss those characters\n\tdisplayText = displayText:gsub(\"<br%s*/>\", \"\\n\")\n  \t-- Remove RichText tags since char-by-char animation will break the tags\n\tdisplayText = displayText:gsub(\"<[^<>]->\", \"\")\n\n\t-- Set translated/modified text on parent\n\tguiObject.Text = displayText\n\n\tlocal index = 0\n\tfor first, last in utf8.graphemes(displayText) do\n\t\tindex += 1\n\t\tguiObject.MaxVisibleGraphemes = index\n\t\ttask.wait(delayBetweenChars)\n\tend\nend\n\nreturn AnimateUI\n```\n\n----------------------------------------\n\nTITLE: Configuring Collision Groups in Lua\nDESCRIPTION: This snippet demonstrates how to register collision groups and set them as non-collidable using the PhysicsService in Roblox Lua.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal PhysicsService = game:GetService(\"PhysicsService\")\n\nlocal cubes = \"Cubes\"\nlocal doors = \"Doors\"\n\n-- Register two collision groups\nPhysicsService:RegisterCollisionGroup(cubes)\nPhysicsService:RegisterCollisionGroup(doors)\n\n-- Set cubes to be non-collidable with doors\nPhysicsService:CollisionGroupSetCollidable(cubes, doors, false)\n```\n\n----------------------------------------\n\nTITLE: Versioning DataStore Entries\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific version of a datastore entry closest to a given time using `ListVersionsAsync` and `GetVersionAsync`. It then overwrites the current value with the retrieved version, effectively reverting the data to a previous state, along with setting the metadata.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/versioning-listing-and-caching.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal experienceStore = DataStoreService:GetDataStore(\"PlayerExperience\")\n\nlocal DATA_STORE_KEY = \"User_1234\"\n\nlocal maxDate = DateTime.fromUniversalTime(2020, 10, 09, 01, 42)\n\n-- Gets the version closest to the given time\nlocal listSuccess, pages = pcall(function()\n    return experienceStore:ListVersionsAsync(DATA_STORE_KEY, Enum.SortDirection.Descending, nil, maxDate.UnixTimestampMillis)\nend)\nif listSuccess then\n    local items = pages:GetCurrentPage()\n    if #items > 0 then\n        -- Reads the closest version\n        local closestEntry = items[1]\n        local success, value, info = pcall(function()\n            return experienceStore:GetVersionAsync(DATA_STORE_KEY, closestEntry.Version)\n        end)\n        -- Restores current value by overwriting it with the closest version\n        if success then\n            local setOptions = Instance.new(\"DataStoreSetOptions\")\n            setOptions:SetMetadata(info:GetMetadata())\n            experienceStore:SetAsync(DATA_STORE_KEY, value, nil, setOptions)\n        end\n    else\n        -- No entries found\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Raycast in Roblox Lua\nDESCRIPTION: Demonstrates the fundamental implementation of raycasting from a Vector3 origin point in a specific direction using Workspace:Raycast().\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/raycasting.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal rayOrigin = Vector3.new(0, 0, 0)\nlocal rayDirection = Vector3.new(0, -100, 0)\n\nlocal raycastResult = Workspace:Raycast(rayOrigin, rayDirection)\n```\n\n----------------------------------------\n\nTITLE: Detecting User Input Types in Roblox\nDESCRIPTION: This Lua snippet creates a module for detecting the type of input device currently being used by the player. It checks for keyboard/mouse, touch, or gamepad inputs and returns the relevant input type. The module can be utilized across different scripts to adapt UI and game behavior.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mobile.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal UserInput = {}\n\nlocal inputTypeString\n-- If device has active keyboard and mouse, assume those inputs\nif UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then\n\tinputTypeString = \"Keyboard/Mouse\"\n-- Else if device has touch capability but no keyboard and mouse, assume touch input\nelseif UserInputService.TouchEnabled then\n\tinputTypeString = \"Touch\"\n-- Else if device has an active gamepad, assume gamepad input\nelseif UserInputService.GamepadEnabled then\n\tinputTypeString = \"Gamepad\"\nend\n\nfunction UserInput.getInputType()\n\tlocal lastInputEnum = UserInputService:GetLastInputType()\n\n\tif lastInputEnum == Enum.UserInputType.Keyboard or string.find(tostring(lastInputEnum.Name), \"MouseButton\") or lastInputEnum == Enum.UserInputType.MouseWheel then\n\t\tinputTypeString = \"Keyboard/Mouse\"\n\telseif lastInputEnum == Enum.UserInputType.Touch then\n\t\tinputTypeString = \"Touch\"\n\telseif string.find(tostring(lastInputEnum.Name), \"Gamepad\") then\n\t\tinputTypeString = \"Gamepad\"\n\tend\n\treturn inputTypeString, lastInputEnum\nend\n\nreturn UserInput\n```\n\n----------------------------------------\n\nTITLE: Connecting Function to Touched Event - Roblox Lua\nDESCRIPTION: Demonstrates how to connect a function named 'onPartTouched()' to the 'Touched' event of a part in Roblox. The function logs a message when the part is touched by an object. This snippet illustrates basic event handling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Assumes the script is parented to the part\nlocal part = script.Parent\n\n-- The function you want to run\nlocal function onPartTouched(object)\n\tprint(\"Part was touched by\", object:GetFullName())\nend\n\n-- Connect the function to the part's Touched event\npart.Touched:Connect(onPartTouched)\n```\n\n----------------------------------------\n\nTITLE: Initializing PlayerManager Module Script in Lua\nDESCRIPTION: This snippet initializes the `PlayerManager` as a module script in Roblox, establishing the structure for local and module functions for handling player-related operations. It sets up services needed to manage player states and handles the basic returns for module scripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n-- Local Functions\n\n-- Module Functions\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Data Module for Storing Jump Power and Coins in Roblox Lua\nDESCRIPTION: A module script that manages player data storage for both coins and jump power. It provides functions to retrieve and update player values using a shared data structure, with default values for new players.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/script-an-upgrade-button.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerData = {}\n\nPlayerData.COIN_KEY_NAME = \"Coins\"\nPlayerData.JUMP_KEY_NAME = \"Jump\"\n\nlocal playerData = {\n\t--[[\n\t\t[userId: string] = {\n\t\t\t[\"Coins\"] = coinAmount: number,\n\t\t\t[\"Jump\"] = jumpPower: number\n\t\t}\n\t--]]\n}\n\nlocal DEFAULT_PLAYER_DATA = {\n\t[PlayerData.COIN_KEY_NAME] = 0,\n\t[PlayerData.JUMP_KEY_NAME] = 0,\n}\n\nlocal function getData(player)\n\tlocal data = playerData[tostring(player.UserId)] or DEFAULT_PLAYER_DATA\n\tplayerData[tostring(player.UserId)] = data\n\treturn data\nend\n\nfunction PlayerData.getValue(player, key)\n\treturn getData(player)[key]\nend\n\nfunction PlayerData.updateValue(player, key, updateFunction)\n\tlocal data = getData(player)\n\tlocal oldValue = data[key]\n\tlocal newValue = updateFunction(oldValue)\n\n\tdata[key] = newValue\n\treturn newValue\nend\n\nreturn PlayerData\n```\n\n----------------------------------------\n\nTITLE: Updating the leaderboard score for a player in a Sorted Map\nDESCRIPTION: Updates a player's score in the leaderboard stored in a sorted map using UpdateAsync method, ensuring concurrent updates are handled correctly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/sorted-map.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"Leaderboard\")\n\nlocal function updateLeaderboard(itemKey, killsToAdd, deathsToAdd)\n\tlocal success, newStats, newScore = pcall(function()\n\t\treturn sortedMap:UpdateAsync(itemKey, function(playerStats, playerScore)\n\t\t\tplayerStats = playerStats or { kills = 0, deaths = 0 }\n\t\t\tplayerStats.kills += killsToAdd\n\t\t\tplayerStats.deaths += deathsToAdd\n\t\t\tif playerStats then\n\t\t\t\t-- `playerScore` is the sortKey being used to sort items in the map\n\t\t\t\tplayerScore = playerStats.kills / math.max(playerStats.deaths, 1)\n\t\t\t\treturn playerStats, playerScore\n\t\t\tend\n\t\t\treturn nil\n\t\tend, 30)\n\tend)\n\tif success then\n\t\tprint(newStats)\n\t\tprint(newScore)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Sharding Sorted Maps in Roblox Lua\nDESCRIPTION: Demonstrates how to shard a sorted map in Roblox using Lua. This approach involves creating multiple sorted map buckets and a helper function to determine the correct bucket for a given item key. This helps distribute data across multiple maps to prevent throttling due to item count or memory limits. It requires the `MemoryStoreService` from Roblox and is designed to initialize player scores and retrieve them efficiently.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/best-practices.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Initialize the MemoryStore Service\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\n-- Create your Sorted Map buckets\nlocal sm_AtoG = MemoryStoreService:GetSortedMap(\"AtoG\")\nlocal sm_HtoM = MemoryStoreService:GetSortedMap(\"HtoM\")\nlocal sm_NtoT = MemoryStoreService:GetSortedMap(\"NtoT\")\nlocal sm_UtoZ = MemoryStoreService:GetSortedMap(\"UtoZ\")\n\n-- Helper function to retrieve the correct bucket from the Item Key\nlocal function getSortedMapBucket(itemKey)\n\tif (itemKey >= \"a\" and itemKey < \"h\") then\n\t\treturn sm_AtoG\n\telseif (itemKey < \"n\") then\n\t\treturn sm_HtoM\n\telseif (itemKey < \"u\") then\n\t\treturn sm_NtoT\n\telse\n\t\treturn sm_UtoZ\n\tend\nend\n\n-- Initialize player names with default value of 0\nfor _, player in game:GetService(\"Players\"):GetPlayers() do\n\tlocal bucket = getSortedMapBucket(player)\n\tbucket:SetAsync(player, 0, 600)\nend\n\n-- Retrieve a player's value\nlocal player = \"myPlayer\"\nlocal bucket = getSortedMapBucket(player)\nlocal playerScore = bucket:GetAsync(player)\nprint(playerScore)\n```\n\n----------------------------------------\n\nTITLE: Handling Server Events with BindableEvents in Lua ModuleScript\nDESCRIPTION: This Lua snippet defines a ModuleScript named NetworkManagerServer that manages server-side handling of client network messages using BindableEvents connected to unique IDs. It requires 'ReplicatedStorage' and links BindableEvents with RemoteEvent messages.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ServerScriptService named NetworkManagerServer\nlocal NetworkManagerServer = {}\n\nlocal networkSignalList = {}\nfunction NetworkManagerServer.GetServerEventSignal(id)\n\tlocal bindableEvent = Instance.new(\"BindableEvent\")\n\t-- Linking the new BindableEvent to the id\n\ttable.insert(networkSignalList, {\n\t\tid = id,\n\t\tbindableEvent = bindableEvent,\n\t})\n\treturn bindableEvent.Event\nend\n\n-- Connecting to\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"RemoteEvent\")\nremoteEvent.OnServerEvent:Connect(function(player, id, ...)\n\t-- Finding every bindable event that matches the id of the received remote event\n\tfor _, signal in networkSignalList do\n\t\tif signal.id == id then\n\t\t\tsignal.bindableEvent:Fire(player, ...)\n\t\tend\n\tend\nend)\n\nreturn NetworkManagerServer\n\n```\n\n----------------------------------------\n\nTITLE: Using ipairs() to Add Particles to Parts in Luau\nDESCRIPTION: Demonstrate the use of ipairs() to iterate over an array of parts and add particle emitters to each part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/loops-and-arrays.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal partsFolder = workspace.PartsFolder\n\n-- Gets an array listing the parts in PartsFolder\nlocal partsArray = partsFolder:GetChildren()\n\n-- Adds particles to every part in the array\nfor index, part in ipairs(partsArray) do\n\tlocal particles = Instance.new(\"ParticleEmitter\")\n\tparticles.Parent = part\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a While Loop to Toggle Visibility in Luau\nDESCRIPTION: This snippet creates an infinite while loop that continuously toggles the platform's visibility by alternating calls to the 'disappear' and 'appear' functions with a wait interval. This provides a dynamic effect in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n   task.wait(3)\n   disappear()\n   task.wait(3)\n   appear()\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Health Meter with TweenService in Roblox Lua\nDESCRIPTION: Script that creates an animated health meter using Roblox's TweenService. It updates the meter's size and color based on the player's health, featuring smooth transitions and a color gradient system. The animation occurs over 0.5 seconds using exponential easing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/create-hud-meters.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TweenService = game:GetService(\"TweenService\")\n\n-- Reference to local player, character, and humanoid\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\n-- Tween properties\nlocal tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)\n\n-- Reference to meter bar inner frame\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\nlocal meterBarInner = playerGui.HUDContainer.MeterBar.InnerFill\n\n-- Gradient sequence colors (red, orange, yellow, lime, green)\nlocal gradient = {\n    Color3.fromRGB(225, 50, 0),\n    Color3.fromRGB(255, 100, 0),\n    Color3.fromRGB(255, 200, 0),\n    Color3.fromRGB(150, 225, 0),\n    Color3.fromRGB(0, 225, 50)\n}\n\n-- Function to get color in gradient sequence from fractional point\nlocal function getColorFromSequence(fraction: number): Color3\n    -- Each color in gradient defines the beginning and/or end of a section\n    local numSections = #gradient - 1\n\n    -- Each section represents a portion of 1\n    local sectionSize = 1 / numSections\n\n    -- Determine which section the requested fraction falls into\n    local sectionStartIndex = 1 + math.clamp(fraction, 0, 1) // sectionSize\n\n    -- Get the colors at the start and end of the section\n    local sectionColorStart = gradient[sectionStartIndex]\n    local sectionColorEnd = gradient[sectionStartIndex + 1] or sectionColorStart\n\n    -- Normalize fraction to be a number from 0 to 1 within the section\n    local fractionOfSection = math.clamp(fraction, 0, 1) % sectionSize / sectionSize\n\n    -- Lerp between beginning and end based on the normalized fraction\n    return sectionColorStart:Lerp(sectionColorEnd, fractionOfSection)\nend\n\nlocal function onHealthChanged()\n    -- Calculate new health as percentage of max\n    local healthFraction = math.max(0, humanoid.Health / humanoid.MaxHealth)\n\n    -- Tween the bar to new size/color targets\n    local tweenGoal = {\n        Size = UDim2.new(healthFraction, 0, 1, 0),\n        BackgroundColor3 = getColorFromSequence(healthFraction)\n    }\n    local meterBarTween = TweenService:Create(meterBarInner, tweenInfo, tweenGoal)\n    meterBarTween:Play()\nend\n\n-- Listen for changes to humanoid health\nhumanoid.HealthChanged:Connect(onHealthChanged)\n\n-- Initially set (or reset) bar size/color to current health\nonHealthChanged()\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Fields in Roblox Analytics Service\nDESCRIPTION: Demonstrates logging an economy event with custom fields to track player transaction details including weapon category, player class, and player level\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/custom-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Sink,\n    \"Coins\", -- Currency name\n    80, -- Cost\n    20, -- Balance after transaction\n    Enum.AnalyticsEconomyTransactionType.Shop.Name,\n    \"Obsidian Sword\", -- Item SKU\n    {\n\t[Enum.AnalyticsCustomFieldKeys.CustomField01.Name] = \"Category - Weapon\",\n\t[Enum.AnalyticsCustomFieldKeys.CustomField02.Name] = \"Class - Warrior\",\n\t[Enum.AnalyticsCustomFieldKeys.CustomField03.Name] = \"Level - 10\",\n    } -- Custom field dictionary table\n)\n```\n\n----------------------------------------\n\nTITLE: Roblox Lua: Dynamic Door/Wall Movement Script\nDESCRIPTION: Complex script for managing door/wall movement using TweenService with state tracking, player proximity detection, and sound integration\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal model = script.Parent\nlocal sound = model.Sound.Value\nlocal trigger = model.Trigger\n\nlocal left = model.TargetL_Closed\nlocal right = model.TargetR_Closed\n\nlocal tweenInfo = TweenInfo.new(\n\tmodel.Speed.Value, --Time/Speed of Door Tween\n\tEnum.EasingStyle.Quart, --Easing Style\n\tEnum.EasingDirection.InOut, --EasingDirection\n\t0, --Repeat Count\n\tfalse, --Reverse true\n\t0 --Delay\n)\n\nlocal DoorState = {\n\t[\"Closed\"] = 1,\n\t[\"Opening\"] = 2,\n\t[\"Open\"] = 3,\n\t[\"Closing\"] = 4,\n}\n\nlocal doorState = DoorState.Closed\nlocal playersNear = {}\n\nlocal tweenL = TweenService:Create(left, tweenInfo, {CFrame = model.TargetL_Open.CFrame})\nlocal tweenR = TweenService:Create(right, tweenInfo, {CFrame = model.TargetR_Open.CFrame})\n\nlocal tweenLClose = TweenService:Create(left, tweenInfo, {CFrame = model.TargetL_Closed.CFrame})\nlocal tweenRClose = TweenService:Create(right, tweenInfo, {CFrame = model.TargetR_Closed.CFrame})\n\nlocal function StartOpening()\n\tdoorState = DoorState.Opening\n\tsound:Play()\n\n\ttweenL:Play()\n\ttweenR:Play()\nend\n\nlocal function StartClosing()\n\tdoorState = DoorState.Closing\n\t--model[\"Door\"]:Play()\n\n\ttweenLClose:Play()\n\ttweenRClose:Play()\nend\n\nlocal function tweenOpenCompleted(playbackState)\n\tif next(playersNear) == nil then\n\t\tStartClosing()\n\telse\n\t\tdoorState = DoorState.Open\n\tend\nend\n\nlocal function tweenCloseCompleted(playbackState)\n\tif next(playersNear) ~= nil then\n\t\tStartOpening()\n\telse\n\t\tdoorState = DoorState.Closed\n\tend\nend\n\ntweenL.Completed:Connect(tweenOpenCompleted)\ntweenLClose.Completed:Connect(tweenCloseCompleted)\n\nlocal function touched(otherPart)\n\tif otherPart.Name == \"HumanoidRootPart\" then\n\t\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\t\tif player then\n\t\t\t--print(\"touch\")\n\t\t\tplayersNear[player] = 1\n\t\t\tif doorState == DoorState.Closed then\n\t\t\t\tStartOpening()\n\t\t\tend\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Changing part color based on true condition\nDESCRIPTION: Script that changes a part's color to green when a mathematical condition (3+3=6) evaluates to true. It demonstrates practical use of conditional logic in Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/intro-to-if-statements.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nif 3 + 3 == 6 then\n\tworkspace.LieDetector.Color = Color3.fromRGB(0, 255, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Users using Lua\nDESCRIPTION: This snippet shows how to inspect a user in Roblox by their username. It retrieves the user's ID using the Players service and then utilizes GuiService to open the Inspect Menu based on the retrieved user ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-inspect-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal GuiService = game:GetService(\"GuiService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Get user ID by username\nlocal success, userId = pcall(function()\n\treturn Players:GetUserIdFromNameAsync(\"RobloxUser\")\nend)\n\nif success then\n\tGuiService:InspectPlayerFromUserId(userId)\nend\n```\n\n----------------------------------------\n\nTITLE: For Loops Over Tables in Luau\nDESCRIPTION: Demonstrates how to iterate over tables (arrays and dictionaries) in Luau using `ipairs` for arrays and `pairs` for dictionaries. `ipairs` provides the index and value, while `pairs` provides the key and value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal abcList = {\"a\", \"b\", \"c\"}\n\nfor i, v in ipairs(abcList) do\n\tprint(v)\nend\n\nlocal abcDictionary = { a=1, b=2, c=3 }\n\nfor k, v in pairs(abcDictionary) do\n\tprint(k, v)\nend\n```\n\n----------------------------------------\n\nTITLE: Reading DataStore without Scopes\nDESCRIPTION: This code snippet demonstrates how to read data from a DataStore without any specific scope. It retrieves the `PlayerInventory` data store without specifying a scope and attempts to read the value associated with the key `User_1234`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/versioning-listing-and-caching.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal inventoryStore = DataStoreService:GetDataStore(\"PlayerInventory\")\nlocal success, currentGold = pcall(function()\n  return inventoryStore:GetAsync(\"User_1234\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Building Tower Height Loop in Luau\nDESCRIPTION: This Luau code creates a for loop to control the height of the tower. The `heightIndex` variable iterates from 1 to `TOWER_SIZE`, and the `spawnY` variable calculates the vertical position of each cube layer.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\n-- Builds tower\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up Editable Images, Meshes, and Wrap Deformers in Lua\nDESCRIPTION: This Lua script sets up EditableImages, EditableMeshes, and WrapDeformers for a base body MeshPart in Roblox. It uses AssetService to create editable assets and WrapDeformer to maintain skinning data during mesh edits. The script iterates through descendants of a model, configuring MeshParts based on the presence of WrapTargets.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/in-experience-creation.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AssetService = game:GetService(\"AssetService\")\n\nlocal function setupBodyPart(meshPart, wrapTarget)\n\t-- Create and attach a WrapDeformer to the MeshPart\n\tlocal wrapDeformer = Instance.new(\"WrapDeformer\")\n\twrapDeformer.Parent = meshPart\n\n\t-- Create an editable mesh for the wrap target's cage mesh\n\tlocal cageEditableMesh: EditableMesh =\n\t\tAssetService:CreateEditableMeshAsync(Content.fromUri(wrapTarget.CageMeshId), {\n\t\t\tFixedSize = true,\n\t\t})\n\n\t-- Assign the cage mesh to the WrapDeformer\n\twrapDeformer:SetCageMeshContent(Content.fromObject(cageEditableMesh))\nend\n\nlocal function setupRigidMesh(meshPart)\n\t-- Create an editable mesh from the original MeshPart\n\tlocal editableMesh = AssetService:CreateEditableMeshAsync(Content.fromUri(meshPart.MeshId), {\n\t\tFixedSize = true,\n\t})\n\n\t-- Generate a new MeshPart from the editable mesh\n\tlocal newMeshPart = AssetService:CreateMeshPartAsync(Content.fromObject(editableMesh))\n\n\t-- Copy size, position, and texture from the original MeshPart\n\tnewMeshPart.Size = meshPart.Size\n\tnewMeshPart.CFrame = meshPart.CFrame\n\tnewMeshPart.TextureContent = meshPart.TextureContent\n\n\t-- Apply the new MeshPart back to the original\n\tmeshPart:ApplyMesh(newMeshPart)\nend\n\nlocal function setupMeshTexture(meshPart, textureIdToEditableImageMap)\n\t-- If EditableImage already exists for this TextureID, resuse it rather than making a new one\n\tif textureIdToEditableImageMap[meshPart.TextureID] then\n\t\tmeshPart.TextureContent =\n\t\t\tContent.fromObject(textureIdToEditableImageMap[meshPart.TextureID])\n\t\treturn\n\tend\n\n\t-- Create a new EditableImage and apply it as the texture content\n\tlocal editableImage = AssetService:CreateEditableImageAsync(Content.fromUri(meshPart.TextureID))\n\ttextureIdToEditableImageMap[meshPart.TextureID] = editableImage\n\tmeshPart.TextureContent = Content.fromObject(editableImage)\nend\n\nlocal function setupModel(model)\n\t-- Map for reusing EditableImage instances by texture ID\n\tlocal textureIdToEditableImageMap = {}\n\tfor _, descendant in model:GetDescendants() do\n\t\tif not descendant:IsA(\"MeshPart\") then\n\t\t\tcontinue\n\t\tend\n\n\t\t-- Configure MeshPart based on WrapTarget presence\n\t\t-- If WrapTarget is present, add a WrapDeformer child with an EditableMesh\n\t\t-- Otherwise, apply EditableMesh to the MeshPart directly\n\t\tlocal wrapTarget = descendant:FindFirstChildOfClass(\"WrapTarget\")\n\t\tif wrapTarget then\n\t\t\tsetupBodyPart(descendant, wrapTarget)\n\t\telse\n\t\t\tsetupRigidMesh(descendant)\n\t\tend\n\n\t\t-- Configure the EditableImage for the MeshPart\n\t\tsetupMeshTexture(descendant, textureIdToEditableImageMap)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Server Attributes with MatchmakingService in Lua\nDESCRIPTION: This code snippet initializes server attributes and retrieves or updates attribute values using the MatchmakingService. It showcases how to set up attributes for testing within the Studio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchmakingService = game:GetService(\"MatchmakingService\")\nlocal RunService = game:GetService(\"RunService\")\n\nif RunService:IsStudio() then\n  -- Sets up initial attributes and schema for testing\n  MatchmakingService:InitializeServerAttributesForStudio(\n  {\n    Level = \"Advanced\",\n    Elo = 123.456,\n    TrainingMode = true\n  })\nend\n\n-- Retrieves the Level attribute\nlocal currentLevel, error = MatchmakingService:GetServerAttribute(\"Level\")\n\nif error then\n  print(error)\nelse\n  print(\"Current level: \" .. currentLevel)\nend\n\n-- Updates the Level attribute value to Advanced\nlocal success, error = MatchmakingService:SetServerAttribute(\"Level\", \"Advanced\")\nif not success then\n  print(\"Failed to update server attribute [Level] to [Advanced] due to error: \" .. error)\nelse\n  print(\"Successfully set [Level] to [Advanced]\")\nend\n```\n\n----------------------------------------\n\nTITLE: Finding and Removing All Instances of a Value in Luau\nDESCRIPTION: This code demonstrates how to find and remove all occurrences of a specific value from an array. It uses a reverse loop to avoid index shifting issues.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerItems = {\n\t\"Potion\",\n\t\"Bread\",\n\t\"Bread\",\n\t\"Sleeping Bag\"\n}\n\nfor index = #playerItems, 1, -1 do\n\tif playerItems[index] == \"Bread\" then\n\t\ttable.remove(playerItems, index)\n\tend\nend\n\nfor index = 1, #playerItems do\n\tlocal itemString = playerItems[index]\n\tprint(\"Index \" .. index .. \": \" .. itemString)\nend\n```\n\n----------------------------------------\n\nTITLE: Using GetSortedAsync with OrderedDataStore in Roblox Lua\nDESCRIPTION: This comprehensive example demonstrates how to populate an OrderedDataStore, sort the data in descending order with a specific page size, and iterate through all pages. It stores character ages, retrieves them in sorted order, and prints each character's name and age.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal characterAgeStore = DataStoreService:GetOrderedDataStore(\"CharacterAges\")\n\n-- Populates ordered data store\nlocal characters = {\n\tMars = 19,\n\tJanus = 20,\n\tDiana = 18,\n\tVenus = 25,\n\tNeptune = 62\n}\nfor char, age in characters do\n\tlocal success, errorMessage = pcall(function()\n\t\tcharacterAgeStore:SetAsync(char, age)\n\tend)\n\tif not success then\n\t\tprint(errorMessage)\n\tend\nend\n\n-- Sorts data by descending order into pages of three entries each\nlocal success, pages = pcall(function()\n\treturn characterAgeStore:GetSortedAsync(false, 3)\nend)\nif success then\n\twhile true do\n\t\t-- Gets the current (first) page\n\t\tlocal entries = pages:GetCurrentPage()\n\t\t-- Iterates through all key-value pairs on page\n\t\tfor _, entry in entries do\n\t\t\tprint(entry.key .. \" : \" .. tostring(entry.value))\n\t\tend\n\t\t-- Checks if last page has been reached\n\t\tif pages.IsFinished then\n\t\t\tbreak\n\t\telse\n\t\t\tprint(\"----------\")\n\t\t\t-- Advances to next page\n\t\t\tpages:AdvanceToNextPageAsync()\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Data Store\nDESCRIPTION: This snippet illustrates how to update data in a data store. The UpdateAsync method is used along with a callback function that determines how the existing value should be modified. It employs error handling with pcall.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal nicknameStore = DataStoreService:GetDataStore(\"Nicknames\")\n\nlocal function makeNameUpper(currentName)\n\tlocal nameUpper = string.upper(currentName)\n\treturn nameUpper\nend\n\nlocal success, updatedName = pcall(function()\n\treturn nicknameStore:UpdateAsync(\"User_1234\", makeNameUpper)\nend)\nif success then\n\tprint(\"Uppercase Name:\", updatedName)\nend\n```\n\n----------------------------------------\n\nTITLE: NaN and Infinity Validation Functions in Roblox\nDESCRIPTION: Utility functions for validating numerical values to prevent NaN and Infinity-based exploits.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/security/security-tactics.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function isNaN(n: number): boolean\n\t-- NaN is never equal to itself\n\treturn n ~= n\nend\n\nlocal function isInf(n: number): boolean\n\t-- Number could be -inf or inf\n\treturn math.abs(n) == math.huge\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating hit position in Lua\nDESCRIPTION: This snippet completes the hit detection by calculating the final hitPosition. If the raycast hit an object, the hitPosition is the point of impact. If the raycast hit nothing, the hitPosition is calculated by adding the directionVector to the tool's position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n       local weaponRaycastResult = workspace:Raycast(tool.Handle.Position, directionVector, weaponRaycastParams)\n\n       -- Check if any objects were hit between the start and end position\n       local hitPosition\n       if weaponRaycastResult then\n           hitPosition = weaponRaycastResult.Position\n       else\n           -- Calculate the end position based on maximum laser distance\n           hitPosition = tool.Handle.Position + directionVector\n       end\n   end\n```\n\n----------------------------------------\n\nTITLE: Sharding Queues in Roblox Lua\nDESCRIPTION: Illustrates how to shard a queue in Roblox using Lua by employing a revolving queue approach. This method distributes request throughput across multiple queues, managing simultaneous read and write operations with queue rotation. Dependencies include Roblox's `MemoryStoreService`, and the code initializes with player data and manipulates queues through reading, adding, and removing items, ensuring load distribution.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/best-practices.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Initialize the MemoryStore Service\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\n-- Create your Queues\nlocal q1 = MemoryStoreService:GetQueue(\"q1\")\nlocal q2 = MemoryStoreService:GetQueue(\"q2\")\nlocal q3 = MemoryStoreService:GetQueue(\"q3\")\nlocal q4 = MemoryStoreService:GetQueue(\"q4\")\n\n-- Put the Queues in an Array\nlocal queueArr = { q1, q2, q3, q4 }\n\n-- Create two pointers representing the indices of the read and add queues\nlocal readIndex = 1\nlocal addIndex = 1\n\n-- Create a local function that updates the indices appropriately\nlocal function rotateIndex(index, n)\n\treturn (index + n - 1) % 4 + 1\nend\n\n-- Create a local function that reads n items from the queue\nlocal function readFromQueue(count, allOrNothing, waitTimeout)\n\tlocal endIndex = count % 4\n\tlocal countPerQueue = count // 4\n\tlocal items = {}\n\tlocal ids = {}\n\n\t-- loop through each queue\n\tfor i = 1, 4, 1 do\n\t\t-- determine if this queue will read an extra item\n\t\tlocal diff = i - readIndex\n\t\tif diff < 0 then\n\t\t\tdiff += 4\n\t\tend\n\n\t\tlocal queue = queueArr[i]\n\n\t\t-- read items from each queue\n\t\t-- +1 items if matches extra read criteria\n\t\tif diff < endIndex then\n\t\t\titems[i], ids[i] = queue:ReadAsync(countPerQueue + 1, allOrNothing,waitTimeout)\n\t\telse\n\t\t\titems[i], ids[i] = queue:ReadAsync(countPerQueue, allOrNothing,waitTimeout)\n\t\tend\n\tend\n\n\treadIndex = rotateIndex(readIndex, count)\n\n\treturn items, ids\nend\n\n-- Create a local function that removes n items from the queue\nlocal function removeFromQueue(ids)\n\tfor i = 1, 4, 1 do\n\t\tlocal queue = queueArr[readIndex]\n\t\tqueue:RemoveAsync(ids[i])\n\tend\nend\n\n-- Create a local function that adds an item to the queue\nlocal function addToQueue(itemKey, expiration, priority)\n\tlocal queue = queueArr[readIndex]\n\tqueue:AddAsync(itemKey, expiration, priority)\n\taddIndex = rotateIndex(addIndex, 1)\nend\n\n-- Write some code!\n\nfor _, player in game:GetService(\"Players\"):GetPlayers() do\n\taddToQueue(player, 600, 0)\nend\n\nlocal players, ids = readFromQueue(20, true, -1)\nremoveFromQueue(ids)\n```\n\n----------------------------------------\n\nTITLE: Scheduling Multiple Start Times in Lua\nDESCRIPTION: This snippet defines how to schedule events multiple times within a scene in Roblox using Lua. The 'Schedule' class allows events to be triggered at numerous predefined 'StartTimes'. These events can be marked skippable or non-skippable, and the schedule may sync to an audio configuration, triggering events in relation to audio duration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\\n\\tprint(\"OnRun (Client)\")\\n\\n\\tSchema:schedule({\\n\\t\\tStartTimes = {5, 27.25},\\n\\t\\tOnStart = function(self)\\n\\t\\t\\t-- Initialize temporary heartbeat connection\\n\\t\\t\\tlocal tempConnection = RunService.Heartbeat:Connect(function()\\n\\n\\t\\t\\tend)\\n\\t\\t\\t-- Inform framework of connection\\n\\t\\t\\tSchema:inform(tempConnection)\\n\\t\\tend\\n\\t})\\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling In-Experience Asset Creation with PromptCreateAssetAsync in Lua\nDESCRIPTION: This server-side script demonstrates how to prompt users to save an asset (in this case, a car) they created in an experience using `AssetService:PromptCreateAssetAsync()`. It takes the player, the instance to save, and the asset type as parameters. The script also handles the result of the asset creation attempt, printing success or error messages to the console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/assets/in-experience-asset-creation.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n\"-- Define the AssetService variable\nlocal AssetService = game:GetService(\"AssetService\")\n\n-- Set up PromptCreateAssetAsync() for prompting the submission dialog\nlocal function CreateAsset(player, instance)\n\tlocal complete, result, assetId = pcall(function()\n\t\treturn AssetService:PromptCreateAssetAsync(player, instance, Enum.AssetType.Model)\n\tend)\n\n\tif complete then\n\t\tif result == Enum.PromptCreateAssetResult.Success then\n\t\t\tprint(\"successfully uploaded, AssetId:\", assetId)\n\t\telse\n\t\t\tprint(\"Received result\", result)\n\t\tend\n\telse\n\t\tprint(\"error\")\n\t\tprint(result)\n\tend\nend\n\n-- Car painting logic omitted\n\n-- Add an event handler\nlocal function onUserPublish(player, promptObject)\n\t-- User saves the car instance with the experience's default color\n\tif promptObject.Name == \"car\" then\n\t\tCreateAsset(player, car)\n\telseif promptObject.Name == \"CarPaintYellow\" or promptObject.Name == \"CarPaintBlue\" or promptObject.Name == \"CarPaintBlack\" or promptObject.Name == \"CarPaintRed\" then\n\t\tPaintCarColor(promptObject.Name)\n\tend\nend\n\nPublishEvent.OnServerEvent:Connect(onUserPublish)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Material Costs in Roblox Pathfinding\nDESCRIPTION: This snippet introduces a Cost table when creating a path in Roblox, allowing different materials to have assigned traversal costs. By manipulating these costs, some materials can be made more or less preferable for pathfinding. Pathfinding functionality depends on PathfindingService, Players, and the Paths library for computing paths.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath({\n\tCosts = {\n\t\tWater = 20,\n\t\tMud = 5,\n\t\tNeon = math.huge\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Using Display Manager to Update Game Status\nDESCRIPTION: This code snippet showcases how to require and use the DisplayManager module within a GameManager script to update game status messages to players during gameplay.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal roundManager = require(moduleScripts:WaitForChild(\"RoundManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\n\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\t\n\t-- Additional game logic here...\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Firing a Weapon - Roblox Lua\nDESCRIPTION: This snippet initializes a tool, checks for user input, and defines methods for calculating mouse position in the world and firing a weapon. It ensures that the weapon can only be fired after a predefined rate, and it handles shooting events through raycasts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal LaserRenderer = require(Players.LocalPlayer.PlayerScripts.LaserRenderer)\n\nlocal tool = script.Parent\nlocal eventsFolder = ReplicatedStorage.Events\n\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 500\nlocal FIRE_RATE = 0.3\nlocal timeOfPreviousShot = 0\n\n-- Check if enough time has passed since previous shot was fired\nlocal function canShootWeapon()\n\tlocal currentTime = tick()\n\tif currentTime - timeOfPreviousShot < FIRE_RATE then\n\t\treturn false\n\tend\n\treturn true\nend\n\nlocal function getWorldMousePosition()\n\tlocal mouseLocation = UserInputService:GetMouseLocation()\n\n\t-- Create a ray from the 2D mouse location\n\tlocal screenToWorldRay = workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\n\n\t-- The unit direction vector of the ray multiplied by a maximum distance\n\tlocal directionVector = screenToWorldRay.Direction * MAX_MOUSE_DISTANCE\n\n\t-- Raycast from the roy's origin towards its direction\n\tlocal raycastResult = workspace:Raycast(screenToWorldRay.Origin, directionVector)\n\n\tif raycastResult then\n\t\t-- Return the 3D point of intersection\n\t\treturn raycastResult.Position\n\telse\n\t\t-- No object was hit so calculate the position at the end of the ray\n\t\treturn screenToWorldRay.Origin + directionVector\n\tend\nend\n\nlocal function fireWeapon()\n\tlocal mouseLocation = getWorldMousePosition()\n\n\t-- Calculate a normalised direction vector and multiply by laser distance\n\tlocal targetDirection = (mouseLocation - tool.Handle.Position).Unit\n\n\t-- The direction to fire the weapon, multiplied by a maximum distance\n\tlocal directionVector = targetDirection * MAX_LASER_DISTANCE\n\n\t-- Ignore the player's character to prevent them from damaging themselves\n\tlocal weaponRaycastParams = RaycastParams.new()\n\tweaponRaycastParams.FilterDescendantsInstances = {Players.LocalPlayer.Character}\n\tlocal weaponRaycastResult = workspace:Raycast(tool.Handle.Position, directionVector, weaponRaycastParams)\n\n\t-- Check if any objects were hit between the start and end position\n\tlocal hitPosition\n\tif weaponRaycastResult then\n\t\thitPosition = weaponRaycastResult.Position\n\n\t\t-- The instance hit will be a child of a character model\n\t\t-- If a humanoid is found in the model then it's likely a player's character\n\t\tlocal characterModel = weaponRaycastResult.Instance:FindFirstAncestorOfClass(\"Model\")\n\t\tif characterModel then\n\t\t\trlocal humanoid = characterModel:FindFirstChildWhichIsA(\"Humanoid\")\n\t\t\tif humanoid then\n\t\t\t\teventsFolder.DamageCharacter:FireServer(characterModel, hitPosition)\n\t\t\tend\n\t\tend\n\telse\n\t\t-- Calculate the end position based on maximum laser distance\n\t\thitPosition = tool.Handle.Position + directionVector\n\tend\n\n\ttimeOfPreviousShot = tick()\n\n\teventsFolder.LaserFired:FireServer(hitPosition)\n\tLaserRenderer.createLaser(tool.Handle, hitPosition)\nend\n\nlocal function toolEquipped()\n\tool.Handle.Equip:Play()\nend\n\nlocal function toolActivated()\n\tif canShootWeapon() then\n\t\tfireWeapon()\n\tend\nend\n\ntool.Equipped:Connect(toolEquipped)\n\tool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Implementing Race Timer and Medal System in Roblox Lua\nDESCRIPTION: A complete script that implements a race timing system with medal awards based on completion time. The script tracks race duration, detects when players cross the finish line, and awards gold, silver, or bronze medals based on completion time thresholds. It includes race state management and prevents multiple finish triggers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal timePassed = 0\nlocal finishLine = script.Parent\n\n-- Used to keep finish() and timer from repeating when race is over\nlocal raceActive = true\n\n-- Runs when the player touches the finish line and shows them an award\nlocal function finish()\n   raceActive = false\n   print(\"You finished in \" .. timePassed)\n\n   if timePassed <= 10 then\n      print(\"You get a gold medal!\")\n   elseif timePassed > 10 and timePassed <= 20 then\n      print(\"You get a silver medal!\")\n   elseif  timePassed > 20 and timePassed <= 30 then\n      print(\"You get a bronze medal!\")\n   else\n      print(\"Try again!\")\n   end\nend\n\n\n-- Checks if a player touches the part when a race is active\nlocal function partTouched(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid and raceActive == true then\n      finish()\n   end\n\nend\n\nfinishLine.Touched:Connect(partTouched)\n\n-- Keeps track of race time while the race is active. Needs to be at script bottom.\nwhile raceActive == true do\n   task.wait(1)\n   timePassed += 1\n   print(timePassed)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting TeleportOptions for Reserved Server Access Code in Lua\nDESCRIPTION: This snippet demonstrates how to create a TeleportOptions instance and set the ReservedServerAccessCode property to teleport a user to a specific reserved server.  This requires a valid reserved server code to be assigned to reservedServerCode. This is suitable for scenarios where a private server is needed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal teleportOptions = Instance.new(\"TeleportOptions\")\nteleportOptions.ReservedServerAccessCode = reservedServerCode\n```\n\n----------------------------------------\n\nTITLE: Luau Finished Player Points Script\nDESCRIPTION: This is the complete script that connects to the `PlayerAdded` event and initializes each player's points to 0 when they join the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal playerPoints = {\n\n}\n\nlocal function setPoints(newPlayer)\n   local name = newPlayer.Name\n   print(\"hello \" .. name)\n   playerPoints[name] = 0\n   print(name .. \" has \" .. playerPoints[name] .. \" points.\")\nend\n\nPlayers.PlayerAdded:Connect(setPoints)\n```\n\n----------------------------------------\n\nTITLE: Implementing Proximity Prompt Actions with ModuleScript\nDESCRIPTION: Complete implementation showing how to handle proximity prompt events by delegating to a separate ObjectActions ModuleScript for actual functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/proximity-prompts.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ProximityPromptService = game:GetService(\"ProximityPromptService\")\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal ObjectActions = require(ServerScriptService.ObjectActions)\n\n-- Detect when prompt is triggered\nlocal function onPromptTriggered(promptObject, player)\n\tObjectActions.promptTriggeredActions(promptObject, player)\nend\n\n-- Detect when prompt hold begins\nlocal function onPromptHoldBegan(promptObject, player)\n\tObjectActions.promptHoldBeganActions(promptObject, player)\nend\n\n-- Detect when prompt hold ends\nlocal function onPromptHoldEnded(promptObject, player)\n\tObjectActions.promptHoldEndedActions(promptObject, player)\nend\n\n-- Connect prompt events to handling functions\nProximityPromptService.PromptTriggered:Connect(onPromptTriggered)\nProximityPromptService.PromptButtonHoldBegan:Connect(onPromptHoldBegan)\nProximityPromptService.PromptButtonHoldEnded:Connect(onPromptHoldEnded)\n```\n\n----------------------------------------\n\nTITLE: Weapon Configuration ModuleScript\nDESCRIPTION: Example of using ModuleScript for storing weapon configuration data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal GunConfig = {}\n\nGunConfig.MagazineSize = 20\nGunConfig.AmmoCount = 100\nGunConfig.Firerate = 600\nGunConfig.Damage = {\n\t[\"Head\"] = 50;\n\t[\"Torso\"] = 40;\n\t[\"Body\"] = 25;\n}\n\nreturn GunConfig\n```\n\n----------------------------------------\n\nTITLE: Implementing Race Finish Detection in Luau\nDESCRIPTION: This snippet shows how to implement a function to detect when a player touches the finish line in a Roblox race course.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function finish()\n   print(\"touched the finish line\")\nend\n\nlocal function partTouched(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid then\n      finish()\n   end\nend\n\nfinishLine.Touched:Connect(partTouched)\n```\n\n----------------------------------------\n\nTITLE: ReceiptHandler Singleton\nDESCRIPTION: This code snippet represents the ReceiptHandler singleton class. While the actual code is not provided in the documentation, it's mentioned as being related to developer product processing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/player-data-purchasing.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Creating EmptyScriptAdder Plugin in Lua\nDESCRIPTION: A Roblox Studio plugin that allows users to create empty scripts within ServerScriptService or selected objects, demonstrating plugin creation, toolbar integration, and event handling\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ChangeHistoryService = game:GetService(\"ChangeHistoryService\")\nlocal Selection = game:GetService(\"Selection\")\n\n-- Create a new toolbar section titled \"Custom Script Tools\"\nlocal toolbar = plugin:CreateToolbar(\"Custom Script Tools\")\n\n-- Add a toolbar button named \"Create Empty Script\"\nlocal newScriptButton = toolbar:CreateButton(\"Create Empty Script\", \"Create an empty script\", \"rbxassetid://14978048121\")\n\n-- Make button clickable even if 3D viewport is hidden\nnewScriptButton.ClickableWhenViewportHidden = true\n\nlocal function onNewScriptButtonClicked()\n\tlocal selectedObjects = Selection:Get()\n\tlocal parent = game:GetService(\"ServerScriptService\")\n\tif #selectedObjects > 0 then\n\t\tparent = selectedObjects[1]\n\tend\n\n\tlocal newScript = Instance.new(\"Script\")\n\tnewScript.Source = \"\"\n\tnewScript.Parent = parent\n\tChangeHistoryService:SetWaypoint(\"Added new empty script\")\nend\n\nnewScriptButton.Click:Connect(onNewScriptButtonClicked)\n```\n\n----------------------------------------\n\nTITLE: Initializing MatchManager Module\nDESCRIPTION: Initializes the MatchManager module by getting services, requiring module scripts (PlayerManager, GameSettings, Timer), and defining variables to store references to ReplicatedStorage, DisplayValues, and the TimeLeft IntValue. This setup is used to manage the match, including setting up the timer and updating the time left display.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\nlocal myTimer = timer.new()\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Character Animations in Lua\nDESCRIPTION: Script that handles replacing default character animations with custom ones, including setup for animation weights and character loading.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/using.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\t-- Get animator on humanoid\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animator = humanoid:WaitForChild(\"Animator\")\n\n\t-- Stop all animation tracks\n\tfor _, playingTrack in animator:GetPlayingAnimationTracks() do\n\t\tplayingTrack:Stop(0)\n\tend\n\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\t--animateScript.run.RunAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.walk.WalkAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.jump.JumpAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.idle.Animation1.AnimationId = \"rbxassetid://\"\n\t--animateScript.idle.Animation2.AnimationId = \"rbxassetid://\"\n\t--animateScript.fall.FallAnim.AnimationId = \"rbxassetid://\"\n\t--animateScript.swim.Swim.AnimationId = \"rbxassetid://\"\n\t--animateScript.swimidle.SwimIdle.AnimationId = \"rbxassetid://\"\n\t--animateScript.climb.ClimbAnim.AnimationId = \"rbxassetid://\"\nend\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAppearanceLoaded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Annotating Roblox Data Types and Enums\nDESCRIPTION: This snippet showcases the use of type annotations with Roblox-specific data types and enumerations. It demonstrates how to declare variables of type Part, BrickColor, and Enum, and explains their usage within Roblox scripts for maintaining type consistency.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal somePart: Part = Instance.new(\"Part\")\nlocal brickColor: BrickColor = somePart.BrickColor\nlocal material: Enum.Material = somePart.Material\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequencing Algorithm in Lua\nDESCRIPTION: Shows a sequence-based algorithm that creates a bridge object by following specific steps in order.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/coding-concept-algorithms.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function createBridge()\n  create new block\n  size block\n  set color\n  rotate\n  set location\n  parent to workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Final damageCharacter Function with Validation in Lua\nDESCRIPTION: Updated damageCharacter function that uses the isHitValid function to validate shots before applying damage. This ensures only legitimate hits cause damage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nfunction damageCharacter(playerFired, characterToDamage, hitPosition)\n\tlocal humanoid = characterToDamage:FindFirstChildWhichIsA(\"Humanoid\")\n\tlocal validShot = isHitValid(playerFired, characterToDamage, hitPosition)\n\tif humanoid and validShot then\n\t\t-- Remove health from character\n\t\thumanoid.Health -= LASER_DAMAGE\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Leaderboard on Player Addition - Roblox Lua\nDESCRIPTION: This snippet connects a function to the PlayerAdded event to initialize the leaderboard for each player when they join the game. It creates a 'leaderstats' folder, essential for displaying player stats on the leaderboard.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/leaderboards.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function leaderboardSetup(player)\n\nend\n\n-- Connect the \"leaderboardSetup()\" function to the \"PlayerAdded\" event\nPlayers.PlayerAdded:Connect(leaderboardSetup)\n```\n\n----------------------------------------\n\nTITLE: Timer Module Script in Lua\nDESCRIPTION: This code defines a timer module that can be used to track the duration of a match.  It includes functions to start, stop, and query the time left on the timer, as well as fire an event when the timer completes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Timer = {}\nTimer.__index = Timer\n\nfunction Timer.new()\n\tlocal self = setmetatable({}, Timer)\n\n\tself._finishedEvent = Instance.new(\"BindableEvent\")\n\tself.finished = self._finishedEvent.Event\n\n\tself._running = false\n\tself._startTime = nil\n\tself._duration = nil\n\n\treturn self\nend\n\nfunction Timer:start(duration)\n\tif not self._running then\n\t\ttask.spawn(function()\n\t\t\tself._running = true\n\t\t\tself._duration = duration\n\t\t\tself._startTime = tick()\n\t\t\twhile self._running and tick() - self._startTime < duration do\n\t\t\t\ttask.wait()\n\t\t\tend\n\t\t\tlocal completed = self._running\n\t\t\tself._running = false\n\t\t\tself._startTime = nil\n\t\t\tself._duration = nil\n\t\t\tself._finishedEvent:Fire(completed)\n\t\tend)\n\telse\n\t\twarn(\"Warning: timer could not start again as it is already running.\")\n\tend\nend\n\nfunction Timer:getTimeLeft()\n\tif self._running then\n\t\tlocal now = tick()\n\t\tlocal timeLeft = self._startTime + self._duration - now\n\t\tif timeLeft < 0 then\n\t\t\ttimeLeft = 0\n\t\tend\n\t\treturn timeLeft\n\telse\n\t\twarn(\"Warning: could not get remaining time, timer is not running.\")\n\tend\nend\n\nfunction Timer:isRunning()\n\treturn self._running\nend\n\nfunction Timer:stop()\n\tself._running = false\nend\n\nreturn Timer\n```\n\n----------------------------------------\n\nTITLE: Initializing MatchManager Module in Lua\nDESCRIPTION: This snippet initializes the MatchManager module script, similar to GameSettings. It sets up an empty module table that will later contain functions for managing match-related tasks. The module table must be returned to allow other scripts to use the module's functions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Creating a PlayerData Module Script in Lua for Managing Player Coin Collection\nDESCRIPTION: This module script manages player data storage for coin collection. It provides functions for getting and updating player values, with a data structure that maps player UserIds to their coin counts. The module maintains persistent data throughout the game session.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/record-and-display-player-data.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerData = {}\nPlayerData.COIN_KEY_NAME = \"Coins\"\n\nlocal playerData = {\n  --[[\n    [userId: string] = {\n      [\"Coins\"] = coinAmount: number\n    }\n  ]]\n}\n\nlocal DEFAULT_PLAYER_DATA = {\n  [PlayerData.COIN_KEY_NAME] = 0\n}\n\nlocal function getData(player)\n  local data = playerData[tostring(player.UserId)] or DEFAULT_PLAYER_DATA\n  playerData[tostring(player.UserId)] = data\n  return data\nend\n\nfunction PlayerData.getValue(player, key)\n  return getData(player)[key]\nend\n\nfunction PlayerData.updateValue(player, key, updateFunction)\n  local data = getData(player)\n  local oldValue = data[key]\n  local newValue = updateFunction(oldValue)\n\n  data[key] = newValue\n  return newValue\nend\n\nreturn PlayerData\n```\n\n----------------------------------------\n\nTITLE: Replacing a Game Pass with Subscription (Server)\nDESCRIPTION: This code shows how to replace a Game Pass with a subscription, ensuring existing Game Pass holders retain benefits.  It checks if the player owns the legacy game pass or subscription and awards benefits accordingly.  It also listens for in-game Game Pass purchases in case the game pass is still on sale.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/subscriptions.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Run this code on the server\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal LEGACY_GAME_PASS_ID = 1234 -- Replace with the ID of the game pass being replaced by a subscription\nlocal SUBSCRIPTION_ID = \"EXP-11111111\" -- Replace with your subscription ID\n\nlocal function awardBenefit(player: Player)\n\t-- You should award the subscription here\nend\n\nlocal function revokeBenefitIfGranted(player: Player)\n\t-- This method is called for every player who does _not_ have the subscription\n    -- If your code saves subscriptions to Data Stores or provides some benefit that needs to be 'revoked'\n    -- you should use this method to handle the revocation\nend\n\nlocal function checkSubscriptionStatus(player: Player)\n\tlocal success, result = pcall(function()\n\t\treturn MarketplaceService:GetUserSubscriptionStatusAsync(player, SUBSCRIPTION_ID)\n\tend)\n\n\tif not success then\n\t\tprint(`Error fetching subscription status: {result}`)\n\t\treturn\n\tend\n\n\tif result.IsSubscribed then\n\t\tawardBenefit(player)\n\telse\n\t\trevokeBenefitIfGranted(player)\n\tend\nend\n\nlocal function onPlayerAdded(player: Player)\n\tlocal success, result = pcall(function()\n\t\treturn MarketplaceService:UserOwnsGamePassAsync(player.UserId, LEGACY_GAME_PASS_ID)\n\tend)\n\n\tif not success then\n\t\tprint(`Error fetching game pass status: {result}`)\n\t\treturn\n\tend\n\n\tif result then\n\t\t-- If the player has purchased the legacy game pass, we do not need to look up their subscription status\n\t\t-- as they have the benefit granted for life\n\t\tawardBenefit(player)\n\t\treturn\n\tend\n\n\tcheckSubscriptionStatus(player)\nend\n\nlocal function onUserSubscriptionStatusChanged(player: Player, subscriptionId: string)\n\tif subscriptionId == SUBSCRIPTION_ID then\n\t\tcheckSubscriptionStatus(player)\n\tend\nend\n\n\nlocal function onPromptGamePassPurchaseFinished(player: Player, purchasedPassID: number, purchaseSuccess: boolean)\n\tif purchaseSuccess and purchasedPassID == LEGACY_GAME_PASS_ID then\n\t\tawardBenefit(player)\n\tend\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nPlayers.UserSubscriptionStatusChanged:Connect(onUserSubscriptionStatusChanged)\n-- We will continue to listen for in-game game pass purchases in case the game pass is still on sale\nMarketplaceService.PromptGamePassPurchaseFinished:Connect(onPromptGamePassPurchaseFinished)\n```\n\n----------------------------------------\n\nTITLE: Deep Freezing Tables in Luau\nDESCRIPTION: Demonstrates how to deeply freeze a table with nested tables in Luau by using a recursive function to ensure all nested tables are read-only.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal function deepFreeze(target)\n\t-- Shallow freeze the table\n\ttable.freeze(target)\n\n\t-- Check each key of the table and freeze it if it's a table\n\tfor _, v in target do\n\t\tif type(v) == \"table\" then\n\t\t\tdeepFreeze(v)\n\t\tend\n\tend\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal target = {\n\tkey = \"value\",\n\tplayerInfo = {\n\t\tplayerID = 505306092,\n\t\tplayerName = \"PlayerName\"\n\t},\n\totherInfo = {\n\t\t{\n\t\t\t{1, 3, 5, 7, 9}\n\t\t}\n\t}\n}\n\ndeepFreeze(target)\ntarget.playerInfo.playerID = 1 --> attempt to modify a readonly table\n```\n\n----------------------------------------\n\nTITLE: Playing Feedback Sounds in Roblox\nDESCRIPTION: This Lua script demonstrates how to play a feedback sound when a player touches a collectable object. It uses SoundService to find and play the sound.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/in-game-sounds.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal pickupObjects = workspace.Collectables.Objects\nlocal objectsArray = pickupObjects:GetChildren()\n\nlocal SoundService = game:GetService(\"SoundService\")\nlocal feedbackSound = SoundService:FindFirstChild(\"FeedbackSound\")\n\nlocal function partTouched(otherPart, objectPart)\n\tlocal whichCharacter = otherPart.Parent\n\tlocal humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n\n\t-- Play the sound, once finished, destroy the object\n\tif humanoid and objectPart.CanCollide == true then\n\t\tfeedbackSound:Play()\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Functions and Variables to a Module in Lua\nDESCRIPTION: Shows how to add functions and variables to a module table that can be accessed by other scripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TestModule = {}\n\n-- Adds a variable to 'TestModule' table\nTestModule.myVariable = 100\n\n-- Adds a function to 'TestModule' table\nfunction TestModule.doTask(player)\n\t-- Placeholder code\nend\n\nreturn TestModule\n```\n\n----------------------------------------\n\nTITLE: Retrying DataStore operations with exponential backoff\nDESCRIPTION: This Lua code snippet demonstrates a naive retry mechanism for DataStore operations.  It attempts to execute a DataStore operation multiple times, waiting a specified amount of time between attempts. However, it does not guarantee the order of requests, which can lead to data inconsistencies.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/player-data-purchasing.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function retrySetAsync(dataStore, key, value)\n\tfor _ = 1, MAX_ATTEMPTS do\n\t\tlocal success, result = pcall(dataStore.SetAsync, dataStore, key, value)\n\n\t\tif success then\n\t\t\tbreak\n\t\tend\n\n\t\ttask.wait(TIME_BETWEEN_ATTEMPTS)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Data Size with JSONEncode - Roblox\nDESCRIPTION: This snippet shows how to use `Class.HttpService:JSONEncode()|JSONEncode()` function to estimate the size of Luau data when stored in a DataStore. Since data is stored as a string, this function is used to convert Lua data into a serialized JSON table to measure its size before saving.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/error-codes-and-limits.md#2025-04-21_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\n\"Class.HttpService:JSONEncode()|JSONEncode()\"\n```\n\n----------------------------------------\n\nTITLE: PickupManager ModuleScript Implementation\nDESCRIPTION: ModuleScript that calculates pickup bonuses based on rarity. Demonstrates table usage and function exports in a module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal PickupManager = {}\n\nlocal defaultMultiplier = 1.25\nlocal rarityMultipliers = {\n\tcommon = 10,\n\tuncommon = 20,\n\trare = 50,\n\tlegendary = 100\n}\n\n-- Add the getPickupBonus function to the PickupManager table\nPickupManager.getPickupBonus = function(rarity)\n\tlocal bonus = rarityMultipliers[rarity] * defaultMultiplier\n\treturn bonus\nend\n\nreturn PickupManager\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Jump Power Upgrade System with RemoteFunction in Roblox Lua\nDESCRIPTION: A server script that handles jump power upgrades, transaction validation, and leaderboard updates. It uses a RemoteFunction for client-server communication and includes logic to verify players have enough coins before processing upgrades.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/script-an-upgrade-button.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Modules\nlocal Leaderboard = require(ServerStorage.Leaderboard)\nlocal PlayerData = require(ServerStorage.PlayerData)\n\n-- Events\nlocal IncreaseJumpPowerFunction = ReplicatedStorage.Instances.IncreaseJumpPowerFunction\n\nlocal JUMP_KEY_NAME = PlayerData.JUMP_KEY_NAME\nlocal COIN_KEY_NAME = PlayerData.COIN_KEY_NAME\nlocal JUMP_POWER_INCREMENT = 30\nlocal JUMP_COIN_COST = 5\n\nlocal function updateJumpPower(player, updateFunction)\n\t-- Update the jump power table\n\tlocal newJumpPower = PlayerData.updateValue(player, JUMP_KEY_NAME, updateFunction)\n\n\t-- Update the players jump power\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\thumanoid.JumpPower = newJumpPower\n\n\t\t-- Update the jump leaderboard\n\t\tLeaderboard.setStat(player, JUMP_KEY_NAME, newJumpPower)\n\tend\nend\n\nlocal function onPurchaseJumpIncrease(player)\n\tlocal coinAmount = PlayerData.getValue(player, COIN_KEY_NAME)\n\tif coinAmount < JUMP_COIN_COST then\n\t\treturn false\n\tend\n\n\t-- Increase player's jump power\n\tupdateJumpPower(player, function(oldJumpPower)\n\t\toldJumpPower = oldJumpPower or 0\n\t\treturn oldJumpPower + JUMP_POWER_INCREMENT\n\tend)\n\t-- Update the coin table\n\tlocal newCoinAmount = PlayerData.updateValue(player, COIN_KEY_NAME, function(oldCoinAmount)\n\t\treturn oldCoinAmount - JUMP_COIN_COST\n\tend)\n\t-- Update the coin leaderboard\n\tLeaderboard.setStat(player, COIN_KEY_NAME, newCoinAmount)\n\treturn true\nend\n\nlocal function onCharacterAdded(player)\n\t-- Reset player's jump power when the character is added\n\tupdateJumpPower(player, function(_)\n\t\treturn 0\n\tend)\nend\n\n-- Initialize any players added before connecting to PlayerAdded event\nfor _, player in Players:GetPlayers() do\n\tonCharacterAdded(player)\nend\n\n-- Normal initialization of players from PlayerAdded event\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(function()\n\t\tonCharacterAdded(player)\n\tend)\nend\n\nlocal function onPlayerRemoved(player)\n\tupdateJumpPower(player, function(_)\n\t\treturn nil\n\tend)\nend\n\nIncreaseJumpPowerFunction.OnServerInvoke = onPurchaseJumpIncrease\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nPlayers.PlayerRemoving:Connect(onPlayerRemoved)\n```\n\n----------------------------------------\n\nTITLE: Disabling Caching with GetAsync - Luau\nDESCRIPTION: This snippet demonstrates how to disable caching when retrieving data using the `GetAsync` method. By setting the `UseCache` property to false, you ensure that the call retrieves the most up-to-date value from the server, which may result in higher server limits and quota usage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/versioning-listing-and-caching.md#2025-04-21_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nlocal options = { UseCache = false }\nlocal value = Class.GlobalDataStore:GetAsync(key, options)\n```\n\n----------------------------------------\n\nTITLE: Setting DataStore Options with AllScopes\nDESCRIPTION: This code snippet showcases how to set the `AllScopes` property in `DataStoreOptions` to `true`, allowing access to all scopes within a data store.  The `GetDataStore` function is then called with an empty string for the scope parameter, ensuring that all scopes are considered.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/versioning-listing-and-caching.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal options = Instance.new(\"DataStoreOptions\")\noptions.AllScopes = true\n\nlocal ds = DataStoreService:GetDataStore(\"DS1\", \"\", options)\n```\n\n----------------------------------------\n\nTITLE: Completing Health Pickup Touch Event Functionality in Lua\nDESCRIPTION: This continuation of the previous snippet adds cooldown functionality and resets the pickup state after a delay, ensuring the pickup can be used again after a specified period.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tif healthPickup:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\thumanoid.Health = MAX_HEALTH\n\t\t\thealthPickup.Transparency = DISABLED_TRANSPARENCY\n\t\t\thealthPickup:SetAttribute(\"Enabled\", false)\n\t\t\ttask.wait(COOLDOWN)\n\t\t\thealthPickup.Transparency = ENABLED_TRANSPARENCY\n\t\t\thealthPickup:SetAttribute(\"Enabled\", true)\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Path Computation Using PathfindingService in Roblox\nDESCRIPTION: In this snippet, path computation is performed using the ComputeAsync function of a path object created by PathfindingService. It calculates a path from a starting point to a destination while handling errors using pcall for robust error management. Inputs are Vector3 coordinates for the start and end points, and the computed path is used within the surrounding script for navigation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\\nlocal Players = game:GetService(\"Players\")\\nlocal RunService = game:GetService(\"RunService\")\\nlocal Workspace = game:GetService(\"Workspace\")\\n\\nlocal path = PathfindingService:CreatePath()\\n\\nlocal player = Players.LocalPlayer\\nlocal character = player.Character\\nlocal humanoid = character:WaitForChild(\"Humanoid\")\\n\\nlocal TEST_DESTINATION = Vector3.new(100, 0, 100)\\n\\nlocal waypoints\\nlocal nextWaypointIndex\\nlocal reachedConnection\\nlocal blockedConnection\\n\\nlocal function followPath(destination)\\n\\t-- Compute the path\\n\\tlocal success, errorMessage = pcall(function()\\n\\t\\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\\n\\tend)\\nend\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Car Structure\nDESCRIPTION: This snippet showcases a detailed type definition for a 'Car' object in Luau. It defines the structure for car-related operations and attributes, promoting organized and error-free car-related programming.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\ntype Car = {\n\tSpeed: number,\n\tDrive: (Car) -> ()\n}\n\nlocal function drive(car)\n\t-- Always go the speed limit\nend\n\nlocal taxi: Car = {Speed = 30, Drive = drive}\n```\n\n----------------------------------------\n\nTITLE: Using task.defer for Delayed Execution in Roblox\nDESCRIPTION: Shows how task.defer() schedules code execution for the next resumption cycle, demonstrating the order of execution where deferred code runs after immediate code.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scheduler.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ntask.defer(print, \"A\")\nprint(\"B\")\n--> B\n--> A\n```\n\n----------------------------------------\n\nTITLE: Damage Player Implementation with Attribute-based Debounce\nDESCRIPTION: Enhanced version of the damage system using instance attributes for debounce control. Includes a cooldown period to prevent rapid damage application.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/debounce.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = script.Parent\n\nlocal RESET_TIME = 1\n\nlocal function damagePlayer(otherPart)\n\tprint(part.Name .. \" collided with \" .. otherPart.Name)\n\n\tlocal humanoid = otherPart.Parent:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\tif not part:GetAttribute(\"Touched\") then\n\t\t\tpart:SetAttribute(\"Touched\", true)  -- Set attribute to true\n\t\t\thumanoid.Health -= 10  -- Reduce player health\n\t\t\ttask.wait(RESET_TIME)  -- Wait for reset duration\n\t\t\tpart:SetAttribute(\"Touched\", false)  -- Reset attribute\n\t\tend\n\tend\nend\n\npart.Touched:Connect(damagePlayer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rarity in Lua for Battle Royale Pickup System\nDESCRIPTION: This code snippet is part of the RarityConfiguration script in ReplicatedFirst/Configurations. It defines tables for each rarity category, including color values for pickup particle effects and asset IDs for on-screen GUI backgrounds.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/pickup-system.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal RarityConfiguration = {\n    Common = {\n        Color = Color3.fromRGB(255, 255, 255),\n        Image = \"rbxassetid://123456789\"\n    },\n    Uncommon = {\n        Color = Color3.fromRGB(0, 255, 0),\n        Image = \"rbxassetid://987654321\"\n    },\n    -- Additional rarity categories...\n}\n```\n\n----------------------------------------\n\nTITLE: Sound Effect Debounce for Collision\nDESCRIPTION: Implementation of sound effect debounce using the Sound.IsPlaying property to prevent multiple overlapping sound playbacks during collisions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/debounce.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal projectile = script.Parent\n\nlocal function playSound()\n\t-- Find child sound on the part\n\tlocal sound = projectile:FindFirstChild(\"Impact\")\n\t-- Play the sound only if it's not already playing\n\tif sound and not sound.IsPlaying then\n\t\tsound:Play()\n\tend\nend\n\nprojectile.Touched:Connect(playSound)\n```\n\n----------------------------------------\n\nTITLE: Implementing Jump Upgrade Button Logic in Roblox Lua\nDESCRIPTION: This code snippet sets up a button in the player's GUI that allows the player to purchase jump upgrades using a remote function. It uses protected calls to safely invoke server-side functionality and handle potential errors during the process. The jump purchase GUI is added to the player's GUI when the script runs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/script-an-upgrade-button.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player.PlayerGui\n\nlocal IncreaseJumpPowerFunction = ReplicatedStorage.Instances.IncreaseJumpPowerFunction\nlocal jumpPurchaseGui = ReplicatedStorage.Instances.JumpPurchaseGui\nlocal jumpButton = jumpPurchaseGui.JumpButton\n\nlocal function onButtonClicked()\n\tlocal success, purchased = pcall(IncreaseJumpPowerFunction.InvokeServer, IncreaseJumpPowerFunction)\n\tif not success then\n\t\t-- purchased will be the error message if success is false\n\t\terror(purchased)\n\telseif success and not purchased then\n\t\twarn(\"Not enough coins!\")\n\tend\nend\n\njumpButton.Activated:Connect(onButtonClicked)\n\n-- Add the JumpPurchaseGui to the player's Gui\njumpPurchaseGui.Parent = playerGui\n```\n\n----------------------------------------\n\nTITLE: Tables and Dictionaries in Luau\nDESCRIPTION: Demonstrates creating and accessing arrays and dictionaries in Luau, showing one-based indexing and different access methods\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/index.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal myArray = {\"chips\", \"sparkling water\", \"salsa\"}\nlocal myDictionary = {\n\tsnack = \"chips\",\n\tdrink = \"sparkling water\",\n\tdip = \"salsa\"\n}\nprint(myArray[1]) --> chips\nprint(myDictionary.dip) --> salsa\n```\n\n----------------------------------------\n\nTITLE: Implement Stack Using Table in Luau\nDESCRIPTION: This code implements a stack data structure using Luau tables. It defines methods for creating a new stack, checking if the stack is empty, pushing an element onto the stack, and popping an element from the stack.  It relies on Luau's table manipulation functions like `table.insert` and `table.remove`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/stacks.md#2025-04-21_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nlocal Stack = {}\nStack.__index = Stack\n\nfunction Stack.new()\n\tlocal self = setmetatable({}, Stack)\n\n\tself._stack = {}\n\n\treturn self\nend\n\n-- Check if the stack is empty\nfunction Stack:isEmpty()\n\treturn #self._stack == 0\nend\n\n-- Put a new value onto the stack\nfunction Stack:push(value)\n\ttable.insert(self._stack, value)\nend\n\n-- Take a value off the stack\nfunction Stack:pop()\n\tif self:isEmpty() then\n\t\treturn nil\n\tend\n\n\treturn table.remove(self._stack, #self._stack)\nend\n\nreturn Stack\n```\n\n----------------------------------------\n\nTITLE: Table Identity Handling\nDESCRIPTION: Shows how table identities change when passed through bindable functions, demonstrating that tables are copied rather than passed by reference.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableFunction = ServerScriptService:WaitForChild(\"TestBindableFunction\")\n\n-- Callback function\nlocal function returnTable(passedTable)\n\t-- Output table identity on invocation\n\tprint(tostring(passedTable))  --> table: 0x48eb7aead27563d9\n\treturn passedTable\nend\n\n-- Set function as bindable function's callback\nbindableFunction.OnInvoke = returnTable\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableFunction = ServerScriptService:WaitForChild(\"TestBindableFunction\")\n\nlocal inventoryData = {\n\t\"Sword\", \"Bow\"\n}\n-- Output original table identity\nprint(tostring(inventoryData))  --> table: 0x059bcdbb2b576549\n\nlocal invokeReturn = bindableFunction:Invoke(inventoryData)\n\n-- Output table identity upon return\nprint(tostring(invokeReturn))  --> table: 0x9fcae7919563a0e9\n```\n\n----------------------------------------\n\nTITLE: Rendering Laser Beam - Roblox Lua\nDESCRIPTION: This snippet defines a LaserRenderer module that creates a visual representation of a laser beam in the game. It constructs the laser with a duration, adjusts its size and color, and plays a shooting sound.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\nlocal LaserRenderer = {}\n\nlocal Debris = game:GetService(\"Debris\")\n\nlocal SHOT_DURATION = 0.15 -- Time that the laser is visible for\n\n-- Create a laser beam from a start position towards an end position\nfunction LaserRenderer.createLaser(toolHandle, endPosition)\n\tlocal startPosition = toolHandle.Position\n\n\tlocal laserDistance = (startPosition - endPosition).Magnitude\n\tlocal laserCFrame = CFrame.lookAt(startPosition, endPosition) * CFrame.new(0, 0, -laserDistance / 2)\n\n\tlocal laserPart = Instance.new(\"Part\")\n\tlaserPart.Size = Vector3.new(0.2, 0.2, laserDistance)\n\tlaserPart.CFrame = laserCFrame\n\tlaserPart.Anchored = true\n\tlaserPart.CanCollide = false\n\tlaserPart.Color = Color3.fromRGB(255, 0, 0)\n\tlaserPart.Material = Enum.Material.Neon\n\tlaserPart.Parent = workspace\n\n\t-- Add laser beam to the Debris service to be removed & cleaned up\n\tDebris:AddItem(laserPart, SHOT_DURATION)\n\n\t-- Play the weapon's shooting sound\n\tlocal shootingSound = toolHandle:FindFirstChild(\"Activate\")\n\tif shootingSound then\n\t\tshootingSound:Play()\n\tend\nend\n\nreturn LaserRenderer\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Message Event Handler for Roblox Webhooks\nDESCRIPTION: Defines an asynchronous event handler that processes incoming messages, parses them for user ID and place IDs, and then deletes user data from standard and ordered data stores.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/automate-right-to-erasure.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@client.event\nasync def on_message(message):\n    # Parses and validates message\n    user_id, start_place_ids = message_parser.parse_message(message)\n    if not user_id or not start_place_ids:\n        return\n\n    # Deletes standard data stores user data\n    [successes, failures] = data_stores_api.delete_standard_data_stores(user_id, start_place_ids)\n    if successes:\n        await message.reply(f\"Deleted standard data stores data for \" +\n                           f\"user ID: {user_id}, data: {dict(successes)}\")\n    if failures:\n        await message.reply(f\"Failed to delete standard data stores data for \" +\n                           f\"user ID: {user_id}, data: {dict(failures)}\")\n\n    # Deletes ordered data stores user data\n    [successes, failures] = data_stores_api.delete_ordered_data_stores(user_id, start_place_ids)\n    if successes:\n        await message.reply(f\"Deleted ordered data stores data for \" +\n                           f\"user ID: {user_id}, data: {dict(successes)}\")\n    if failures:\n        await message.reply(f\"Failed to delete ordered data stores data for \" +\n                           f\"user ID: {user_id}, data: {dict(failures)}\")\n```\n\n----------------------------------------\n\nTITLE: Managing Scope in Module Scripts with Lua\nDESCRIPTION: Illustrates how to manage scope in module scripts, distinguishing between local and module-level variables and functions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal RewardManager = {}\n\n-- Usable only in the module script\nlocal rewardCoins = 50\n\n-- Usable only in the module script\nlocal difficultyModifier = {\n\teasy = 0.5,\n\tnormal = 1,\n\thard = 2\n}\n\n-- Usable in other scripts\nfunction RewardManager.getCoinReward(difficulty)\n\tlocal coins = difficultyModifier[difficulty] * rewardCoins\n\treturn coins\nend\n\nreturn RewardManager\n```\n\n----------------------------------------\n\nTITLE: Complete isHitValid Function with Raycast Validation in Lua\nDESCRIPTION: Full implementation of the isHitValid function that performs both distance checking and raycast validation to detect shots through walls. This ensures hits are legitimate.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nlocal function isHitValid(playerFired, characterToDamage, hitPosition)\n\t-- Validate distance between the character hit and the hit position\n\tlocal characterHitProximity = (characterToDamage.HumanoidRootPart.Position - hitPosition).Magnitude\n\tif characterHitProximity > 10 then\n\t\treturn false\n\tend\n\n\t-- Check if shooting through walls\n\tlocal toolHandle = getPlayerToolHandle(playerFired)\n\tif toolHandle then\n\t\tlocal rayLength = (hitPosition - toolHandle.Position).Magnitude\n\t\tlocal rayDirection = (hitPosition - toolHandle.Position).Unit\n\t\tlocal raycastParams = RaycastParams.new()\n\t\traycastParams.FilterDescendantsInstances = {playerFired.Character}\n\t\tlocal rayResult = workspace:Raycast(toolHandle.Position, rayDirection * rayLength, raycastParams)\n\n\t\t-- If an instance was hit that was not the character then ignore the shot\n\t\tif rayResult and not rayResult.Instance:IsDescendantOf(characterToDamage) then\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true\nend\n```\n\n----------------------------------------\n\nTITLE: Substracting Gold after Upgrade Purchase in Roblox Lua\nDESCRIPTION: This snippet subtracts the cost of the upgrade from the player's gold and adds the new spaces to their total after confirming sufficient funds.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/buying-upgrades.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nif playerGold and playerSpaces and playerGold.Value >= upgradeCost then\n    playerGold.Value -= upgradeCost\n    playerSpaces.Value += newSpaces\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Path Attributes in Roblox\nDESCRIPTION: This Lua code snippet creates a path in Roblox with specific attributes by passing a table of parameters to the CreatePath() function of PathfindingService. Key parameters such as AgentRadius, AgentHeight, and AgentCanJump determine the pathfinding agent's physical characteristics and movement capabilities. The Cost parameter allows setting traversal costs for different materials or regions. Dependencies include the 'PathfindingService' in Roblox. Outputs include a customized path object which can then be used for navigation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\\n\\nlocal path = PathfindingService:CreatePath({\\n\\tAgentRadius = 3,\\n\\tAgentHeight = 6,\\n\\tAgentCanJump = false,\\n\\tCosts = {\\n\\t\\tWater = 20\\n\\t}\\n})\n```\n\n----------------------------------------\n\nTITLE: Handling User Input for Blast Button in Roblox Lua\nDESCRIPTION: Client script that connects blast functionality to user input, handling both touch and non-touch input methods. It binds actions for mouse clicks and gamepad buttons, and connects touch events for the blast button.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal attemptBlastClient = require(ReplicatedStorage.Blaster.attemptBlastClient)\n\nlocal function onBlasterActivated(_actionName: string, inputState: Enum.UserInputState, _inputObject: InputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\tattemptBlastClient()\n\tend\nend\n\nContextActionService:BindAction(\"_\", onBlasterActivated, false, Enum.UserInputType.MouseButton1, Enum.KeyCode.ButtonR2)\n\nlocal HUDGui = Players.LocalPlayer.PlayerGui:WaitForChild(\"HUDGui\")\nlocal blastButton = HUDGui.BlastButton\nblastButton.MouseButton1Down:Connect(attemptBlastClient)\n```\n\n----------------------------------------\n\nTITLE: Button Click Sound Debounce\nDESCRIPTION: Implementation of sound effect debounce for GUI button clicks, preventing rapid sound overlapping when button is clicked multiple times.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/debounce.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal button = script.Parent\n\nlocal function onButtonActivated()\n\t-- Find child sound on the button\n\tlocal sound = button:FindFirstChild(\"Click\")\n\t-- Play the sound only if it's not already playing\n\tif sound and not sound.IsPlaying then\n\t\tsound:Play()\n\tend\nend\n\nbutton.Activated:Connect(onButtonActivated)\n```\n\n----------------------------------------\n\nTITLE: First Roblox Script: Array and Table Concatenation\nDESCRIPTION: Demonstrates creating arrays, iterating through them, and using table.concat() to combine array elements\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/index.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal helloArray = {\"h\", \"e\", \"l\", \"l\", \"o\"}\nlocal worldArray = {\"w\", \"o\", \"r\", \"l\", \"d\"}\n\nfor index, value in helloArray do\n\tprint(value)\nend\n\nprint(table.concat(worldArray))\n```\n\n----------------------------------------\n\nTITLE: Adding points based on color - Lua\nDESCRIPTION: This snippet shows how to use `if` and `elseif` statements to add points to a player's `Points` value based on the color of the `pointPart`. If the color is blue, `smallPoints` is added. This function is assumed to be inside another function called givePoints(player) which takes a player as an argument.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal function givePoints(player)\n\tlocal currentColor = pointPart.Color\n\n\tlocal playerStats = player:WaitForChild(\"leaderstats\")\n\tlocal playerPoints = playerStats:WaitForChild(\"Points\")\n\n\tif currentColor == blue then\n\t\tplayerPoints.Value += smallPoints\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotating 3D Objects in a ViewportFrame in Lua\nDESCRIPTION: This script creates a rotating 3D object display inside a ViewportFrame. It initializes a camera, positions the 3D object, and uses RunService to create a continuous rotation effect. The script includes configurable parameters for camera distance, field of view, object pitch angle, and rotation speed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/viewport-frames.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\n\nlocal viewportFrame = script.Parent\n\n-- Parameters to experiment with\nlocal cameraDistance = 10\nlocal cameraFieldOfView = 50\nlocal objectPitchAngle = 40\nlocal objectRotationSpeed = 50\n\n-- Viewport camera initialization\nlocal viewportCamera = Instance.new(\"Camera\")\nviewportCamera.FieldOfView = cameraFieldOfView\nviewportFrame.CurrentCamera = viewportCamera\nviewportCamera.Parent = viewportFrame\n\n-- Viewport object initialization\nlocal object = viewportFrame:FindFirstChildWhichIsA(\"BasePart\")\nif object then\n\tobject.CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(objectPitchAngle), 0, 0)\n\n\t-- Update loop\n\tlocal t = 0\n\tRunService.PostSimulation:Connect(function(delta)\n\t\tt += delta\n\t\tviewportCamera.CFrame = CFrame.Angles(0, math.rad(t * objectRotationSpeed), 0) * CFrame.new(0, 0, cameraDistance)\n\tend)\nelse\n\twarn(\"3D object not found as child of viewport frame\")\nend\n```\n\n----------------------------------------\n\nTITLE: Listing items in a Hash Map - Lua\nDESCRIPTION: This snippet demonstrates how to list all key-value pairs within a hash map in a paginated manner, utilizing the ListItemsAsync method and iterating through the pages.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/hash-map.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\n-- Get list of items, 32 items at a time\nlocal success, pages = pcall(function()\n\treturn hashMap:ListItemsAsync(32)\nend)\nif success then\n\twhile true do\n\t\t-- Get the current page\n\t\tlocal entries = pages:GetCurrentPage()\n\t\t-- Iterate through all key-value pairs on page\n\t\tfor _, entry in ipairs(entries) do\n\t\t\tprint(entry.key .. \" : \" .. tostring(entry.value))\n\t\tend\n\t\t-- Check if last page has been reached\n\t\tif pages.IsFinished then\n\t\t\tbreak\n\t\telse\n\t\t\tprint(\"----------\")\n\t\t\t-- Advance to next page\n\t\t\tpages:AdvanceToNextPageAsync()\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Purchase Handlers in Lua\nDESCRIPTION: Defines functions to handle marketplace purchases and in-experience purchases using the Bundles feature package in Roblox. These functions update player data and ensure proper recording of purchase decisions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function awardMarketplacePurchase(_player: Player, _bundleId: Types.BundleId, _receiptInfo: { [string]: any })\n    task.wait(2)\n    return Enum.ProductPurchaseDecision.PurchaseGranted\nend\n\nlocal function awardInExperiencePurchase(\n    _player: Player,\n    _bundleId: Types.BundleId,\n    _currencyId: CurrencyTypes.CurrencyId,\n    _price: number\n)\n    task.wait(2)\n    return true\nend\n\nlocal function initializePurchaseHandlers()\n    local bundles = Bundles.getBundles()\n    for bundleId, bundle in bundles do\n        if not bundle or bundle.pricing.priceType ~= \"Marketplace\" then\n            continue\n        end\n\n        Bundles.setPurchaseHandler(bundleId, awardMarketplacePurchase)\n        receiptHandlers[bundle.pricing.devProductId] = receiptHandler\n    end\n\n    for currencyId, _ in Currencies do\n        Bundles.setInExperiencePurchaseHandler(currencyId, awardInExperiencePurchase)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Activation for Bridge in Roblox Lua\nDESCRIPTION: This script makes a bridge usable when a button is pressed. It changes the button's color to green, makes the bridge visible by setting transparency to 0, and enables collision so players can walk on it. The script connects a custom function to the button's Touched event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/parameters-practice-buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Insert this script into button\n-- Turns the button green when something touches the button.\n\nlocal button = script.Parent\nlocal bridge = workspace.Bridge\n\nlocal function buttonPressed()\n\tprint(\"button touched\")\n\tbutton.Color = Color3.fromRGB(0, 170, 0)\n\tbridge.Transparency = 0\n\tbridge.CanCollide = true\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: Table Data Passing Examples\nDESCRIPTION: Demonstrates proper usage of passing tables through bindable events, showing both array and dictionary table handling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\nlocal function onEventFire(passedTable)\n\tfor k, v in passedTable do\n\t\tprint(k .. \" = \" .. v)\n\t\t--> 1 = Sword\n\t\t--> 2 = Bow\n\t\t--> CharName = Diva Dragonslayer\n\t\t--> CharClass = Rogue\n\tend\nend\n\n-- Connect function to event\nbindableEvent.Event:Connect(onEventFire)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\n-- Numerically indexed table\nlocal inventoryData = {\n\t\"Sword\", \"Bow\"\n}\n-- Dictionary table\nlocal characterData = {\n\tCharName = \"Diva Dragonslayer\",\n\tCharClass = \"Rogue\"\n}\n\n-- Fire event with consistently-indexed tables\nbindableEvent:Fire(inventoryData)\nbindableEvent:Fire(characterData)\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Luau Scripts in Roblox\nDESCRIPTION: This snippet demonstrates how to add a comment in a Luau script using the double dash (--) syntax. Comments are used to document code but don't affect how the program runs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/object-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Changes the color of a part\n```\n\n----------------------------------------\n\nTITLE: Requesting Subscription Status (Server)\nDESCRIPTION: This server-side code creates a `RemoteFunction` that clients can use to request the status of a subscription. It validates the subscription ID and uses `MarketplaceService:GetUserSubscriptionStatusAsync` to determine if the player is subscribed.  It is used to get a status on the server since you cannot call `MarketplaceService:GetUserSubscriptionStatusAsync` from the client.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/subscriptions.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--This code should run on the server\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Create a RemoteFunction that the client can use to request the subscription status\nlocal getSubscriptionStatusRemote = Instance.new(\"RemoteFunction\")\ngetSubscriptionStatusRemote.Name = \"GetSubscriptionStatus\"\ngetSubscriptionStatusRemote.Parent = ReplicatedStorage\n\ngetSubscriptionStatusRemote.OnServerInvoke = function(player: Player, subscriptionId: string)\n\tassert(typeof(subscriptionId) == \"string\")\n\n\treturn MarketplaceService:GetUserSubscriptionStatusAsync(player, subscriptionId)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Display Manager Module in Roblox\nDESCRIPTION: This snippet outlines how to create a Display Manager module script, which includes functions to update the game status StringValue. This allows other scripts in the game to call the update function when necessary.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal DisplayManager = {}\n\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Display Values used to update Player GUI\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\n\n-- Local Functions\n\n-- Module Functions\n\nfunction DisplayManager.updateStatus(newStatus)\n\tstatus.Value = newStatus\nend\n\nreturn DisplayManager\n```\n\n----------------------------------------\n\nTITLE: Saving Player Position Using Roblox Services\nDESCRIPTION: Demonstrates how to use Roblox services to save a player's position when they exit the experience. The code shows the common pattern of getting services, requiring modules, and setting up event handlers. It uses Players and ReplicatedStorage services along with a custom SaveManager module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/services.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SaveManager = require(ReplicatedStorage:WaitForChild(\"SaveManager\"))\n\n-- Local function that calls a reusable function in the module script.\nlocal function saveProgress(character)\n\t-- Get the position of the player's character.\n\tlocal position = character:FindFirstChild(\"HumanoidRootPart\").Position\n\t-- Use the saveData function in the module script, which writes to the\n\t-- DataStoreService.\n\tSaveManager.saveData(character, position)\nend\n\n-- Another local function that calls saveProgress() when a character is removed\n-- from the experience (in this case, when the player leaves).\nlocal function onPlayerAdded(player)\n\tplayer.CharacterRemoving:Connect(saveProgress)\nend\n\n-- Calls onPlayerAdded when a player first connects to the experience.\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Assign Enum Items to Properties in Roblox Lua\nDESCRIPTION: This code snippet demonstrates several ways to assign an `EnumItem` to a property of an object. It shows how to assign it directly using the full `EnumItem` declaration, by its `Value`, or by its `Name`. The best practice is to assign it directly using the full `EnumItem` declaration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/enums.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Instance.new(\"Part\")\t\t-- Create a new part\npart.Shape = Enum.PartType.Cylinder  -- By EnumItem (best practice)\npart.Shape = Enum.PartType.Cylinder.Value -- By EnumItem Value\npart.Shape = 2  -- By EnumItem Value\npart.Shape = Enum.PartType.Cylinder.Name -- By EnumItem Name\npart.Shape = \"Cylinder\"  -- By EnumItem Name\n\npart.Parent = Workspace\n```\n\n----------------------------------------\n\nTITLE: ModuleScript Requiring Example\nDESCRIPTION: Shows how to require a ModuleScript from another script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PickupManager = require(ReplicatedStorage:WaitForChild(\"PickupManager\"))\n```\n\n----------------------------------------\n\nTITLE: Listen for First Event Occurrence in Lua\nDESCRIPTION: Example demonstrating how to listen for the first occurrence of an event, with notes on how deferred events can queue multiple handler invocations before disconnection.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/deferred.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nconnection = event:Connect(function ()\n   connection:Disconnect()\n   -- do something\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating sendPlayersToMatch Function in Lua\nDESCRIPTION: Implements a function inside the `PlayerManager` module to print a message indicating players are being sent to a match. This function will later be expanded to include logic for moving players to the arena.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Local Functions\n\n-- Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tprint(\"Sending players to match\")\nend\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Generating Code Challenge with JavaScript (PKCE)\nDESCRIPTION: JavaScript implementation for creating a code verifier and code challenge using cryptographic methods for secure OAuth 2.0 authentication\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-develop.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\n\n// base64URL encode the verifier and challenge\nfunction base64URLEncode(str) {\n  return str.toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '');\n}\n\n// create sha256 hash from code verifier\nfunction sha256(buffer) {\n  return crypto.createHash('sha256').update(buffer).digest(`base64`);\n}\n\n// create a random code verifier\nvar code_verifier = base64URLEncode(crypto.randomBytes(32));\n// generate a challenge from the code verifier\nvar code_challenge = base64URLEncode(sha256(code_verifier));\n```\n\n----------------------------------------\n\nTITLE: Saving Avatar Using Avatar Editor Service in Lua\nDESCRIPTION: This code snippet shows how to save the current humanoid description of an avatar to the Roblox platform. It waits for confirmation once the save action is completed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-editor.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal currentDescription = humanoid:GetAppliedDescription()\nAvatarEditorService:PromptSaveAvatar(currentDescription, humanoid.RigType)\n\nlocal result = AvatarEditorService.PromptSaveAvatarCompleted:Wait()\nif result == Enum.AvatarPromptResult.Success then\n  -- Avatar saved!\nend\n```\n\n----------------------------------------\n\nTITLE: Requiring TreasureManager Module in Lua\nDESCRIPTION: Demonstrates how to require and use the TreasureManager module in another script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal treasureManager = require(ServerStorage:WaitForChild(\"TreasureManager\"))\n\nlocal keys = script.Parent\nlocal keysFolder = keys.Parts\nlocal keysArray = keysFolder:GetChildren()\n```\n\n----------------------------------------\n\nTITLE: Custom Events Usage Example\nDESCRIPTION: Shows how to use custom events from a ModuleScript in a LocalScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Switch = require(ReplicatedStorage:WaitForChild(\"Switch\"))\n\nSwitch.Changed:Connect(function(newState)\n\tprint(\"Switch state is now\", newState)\nend)\n\ntask.wait(1)\nSwitch.flip()\ntask.wait(1)\nSwitch.flip()\n```\n\n----------------------------------------\n\nTITLE: Setting Game Variables in GameSettings (Lua)\nDESCRIPTION: This snippet adds game variables like intermission duration, match duration, minimum players, and transition time to the GameSettings module. These variables control the timing and conditions of the game loop. Other scripts depend on these values to manage game phases. The values can be adjusted later.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\n-- Game Variables\nGameSettings.intermissionDuration = 5\nGameSettings.matchDuration = 10\nGameSettings.minimumPlayers = 2\nGameSettings.transitionTime = 5\n\nreturn GameSettings\n```\n\n----------------------------------------\n\nTITLE: Initialize Health Restoration Script in Lua\nDESCRIPTION: This snippet initializes a Lua script in Roblox to manage health restoration by defining a constant `MAX_HEALTH` and a function `onTouchHealthPickup` to handle health restoration logic when a player interacts with a health pickup. It depends on standard Roblox Lua environment with access to player character components.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MAX_HEALTH = 100\n\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting All Data in MemoryStore Sorted Map in Lua\nDESCRIPTION: This Lua code snippet details the process of deleting all data within a sorted map in Roblox's MemoryStore service. It uses `GetRangeAsync` to list a batch (up to 100) keys and removes them by iterating with `RemoveAsync`. The code employs `pcall` for error handling and ensures that all keys are retrieved and deleted, updating the lower bound with the last key from each batch.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/sorted-map.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"SortedMap1\")\n\n-- Initial lower bound of nil starts flush from first item\nlocal exclusiveLowerBound = nil\n\nwhile true do\n\t-- Get up to a hundred items starting from current lower bound\n\tlocal getRangeSuccess, items = pcall(function()\n\t\treturn sortedMap:GetRangeAsync(Enum.SortDirection.Ascending, 100, exclusiveLowerBound)\n\tend)\n\tif getRangeSuccess then\n\t\tlocal removeSuccess = true\n\t\tlocal removeError = nil\n\n\t\tfor _, item in items do\n\t\t\tremoveSuccess, removeError = pcall(function()\n\t\t\t\tsortedMap:RemoveAsync(item.key)\n\t\t\tend)\n\t\tend\n\n\t\t-- If there was an error removing items, try again with the same exclusive lower bound\n\t\tif not removeSuccess then\n\t\t\twarn(removeError)\n\t\t-- If range is less than a hundred items, end of map is reached\n\t\telseif #items < 100 then\n\t\t\tbreak\n\t\telse\n\t\t\t-- The last retrieved key is the exclusive lower bound for the next iteration\n\t\t\texclusiveLowerBound = {}\n\t\t\texclusiveLowerBound[\"key\"] = items[#items].key\n\t\t\texclusiveLowerBound[\"sortKey\"] = items[#items].sortKey\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Player State for Blaster Selection in PlayerStateHandler\nDESCRIPTION: This function handles the player state when selecting a blaster. It toggles camera and movement controls, sets the appropriate GUI, and disables the blaster state.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onSelectingBlaster()\n\ttogglePlayerCamera(true)\n\ttogglePlayerMovement(false)\n\tsetGuiExclusivelyEnabled(playerGui.PickABlasterGui)\n\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n```\n\n----------------------------------------\n\nTITLE: Event Connection - Script with Table Indexing\nDESCRIPTION: This script connects to a remote event and prints out key-value pairs from a passed table, demonstrating how to properly format and avoid mixed key types for data transfer. Requires ReplicatedStorage and a remote event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onEventFire(player, passedTable)\n\tfor k, v in passedTable do\n\t\tprint(k .. \" = \" .. v)\n\t\t--> 1 = Sword\n\t\t--> 2 = Bow\n\t\t--> CharName = Diva Dragonslayer\n\t\t--> CharClass = Rogue\n\tend\nend\n\n-- Connect function to event\nremoteEvent.OnServerEvent:Connect(onEventFire)\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Walk Animation AssetID\nDESCRIPTION: This script snippet demonstrates how to replace the default walk animation assetID of a character with a custom animation assetID. It ensures that the character plays the specified custom walk animation when in the game environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/animation/play-character-animations.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animator = humanoid:WaitForChild(\"Animator\")\n\tprint(\"Animator found!\")\n\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\tanimateScript.walk.WalkAnim.AnimationId = \"rbxassetid://122652394532816\"\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Implementing Elevator Movement Script in Lua\nDESCRIPTION: Script that controls elevator platform movement using a PrismaticConstraint. When triggered by a ProximityPrompt, it checks the current position and moves the platform up or down based on its location. The movement ranges between -10 and 10 studs with a threshold of 9 studs for direction change.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-elevators.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal platform = script.Parent.Platform\nlocal prismaticConstraint = script.Parent.Track.PrismaticConstraint\n\nplatform.ProximityPrompt.Triggered:Connect(function(player)\n\tprint(prismaticConstraint.CurrentPosition)\n\tif prismaticConstraint.CurrentPosition <= -9 then\n\t\tprismaticConstraint.TargetPosition = 10\n\telseif prismaticConstraint.CurrentPosition >= 9 then\n\t\tprismaticConstraint.TargetPosition = -10\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Measuring Load Times in Roblox with Lua\nDESCRIPTION: This Lua script measures the time it takes for a Roblox game to load. The script connects to the game.Loaded event, calculates the duration from start to finish, and outputs the load time in seconds with four decimal place precision. It also prints the number of instances loaded into the game’s workspace. This snippet requires the Roblox environment to execute and it doesn’t measure complete end-to-end load times.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/performance-optimization/identify.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal startTime = os.clock()\n\ngame.Loaded:Connect(function()\n  local loadTime = os.clock() - startTime\n  local roundedLoadTime = math.round(loadTime * 10000) / 10000 -- four decimal places\n  print(\"Game loaded in \" .. roundedLoadTime .. \" seconds.\")\n  print(\"Number of instances loaded: \" .. #workspace:GetDescendants())\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstraction for Backpack Management in Lua\nDESCRIPTION: This code snippet demonstrates the concept of abstraction by creating a function that looks up backpack information from a table. It shows how to centralize data and reduce code duplication for managing multiple backpack items.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/coding-concept-abstraction.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal backpackInfo = {\n    [\"Yellow Backpack\"] = {price = 10, capacity = 5},\n    [\"Violet Backpack\"] = {price = 25, capacity = 8},\n    -- Add more backpacks here\n}\n\nlocal function getBackpackInfo(name)\n    return backpackInfo[name].price, backpackInfo[name].capacity\nend\n\n-- Usage\nlocal price, capacity = getBackpackInfo(\"Yellow Backpack\")\nprint(price, capacity)  -- Output: 10 5\n```\n\n----------------------------------------\n\nTITLE: Reset Players Function in PlayerManager (Lua)\nDESCRIPTION: This code defines the `resetPlayers` function within the `PlayerManager` module. The function iterates through the `activePlayers` table and calls the `respawnPlayerInLobby` function for each player, effectively sending them back to the lobby. After respawning all players, it resets the `activePlayers` table to an empty table, preparing for the next match. It requires the respawnPlayerInLobby function to be defined elsewhere.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.resetPlayers()\n\tfor playerKey, whichPlayer in activePlayers do\n\t\trespawnPlayerInLobby(whichPlayer)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Applying a ParticleEmitter to an Object in a Function\nDESCRIPTION: Completes the sortGarbage function to destroy trash and parent a ParticleEmitter to the recyclable object. This demonstrates parameter usage for both destroying and modifying objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function sortGarbage(trash,recyclable)\n    local sparkle = Instance.new(\"ParticleEmitter\")\n\n    -- Destroy the trash and make recyclables shiny\n    trash:Destroy()\n    sparkle.Parent = recyclable\nend\n\nsortGarbage()\n```\n\n----------------------------------------\n\nTITLE: Scheduling Force Field Destruction in Roblox - Lua\nDESCRIPTION: This module script schedules the destruction of the ForceFieldGui screen based on specific game conditions such as player actions and time elapsed. It monitors when a player blasts their blaster, resets their character, or has been in the round for 8 seconds to disable the ForceField.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal getBlasterStateAttribute = require(ReplicatedStorage.Blaster.getBlasterStateAttribute)\nlocal BlasterState = require(ReplicatedStorage.Blaster.BlasterState)\n\nlocal MAX_FORCE_FIELD_TIME = 8\n\nlocal function destroyForceField(player: Player)\n\tif not player.Character then\n\t\treturn\n\tend\n\n\tlocal forceField = player.Character:FindFirstChildWhichIsA(\"ForceField\")\n\tif forceField then\n\t\tforceField:Destroy()\n\tend\nend\n\nlocal function scheduleDestroyForceField(player: Player)\n\tif not player then\n\t\tplayer = Players.LocalPlayer\n\tend\n\n\tlocal attributeChangedConnection, characterRespawnedConnection\n\tlocal forceFieldEnded = false\n\n\tlocal function endForceField()\n\t\t-- Set a debounce flag to avoid trying to destroy the same force field more than once\n\t\tif forceFieldEnded then\n\t\t\treturn\n\t\tend\n\t\tforceFieldEnded = true\n\n\t\tattributeChangedConnection:Disconnect()\n\t\tcharacterRespawnedConnection:Disconnect()\n\t\tdestroyForceField(player)\n\tend\n\n\t-- This listens for the first activation of the blaster, disabling the ForceField\n\t-- to avoid an unfair situation where a player uses their blaster while protected by the ForceField\n\tlocal blasterStateAttribute = getBlasterStateAttribute()\n\tattributeChangedConnection = player:GetAttributeChangedSignal(blasterStateAttribute):Connect(function()\n\t\tlocal currentBlasterState = player:GetAttribute(blasterStateAttribute)\n\t\tif currentBlasterState == BlasterState.Blasting then\n\t\t\tendForceField()\n\t\tend\n\tend)\n\n\t-- This listens for the character to despawn, ensuring we cancel all our listeners and give the next\n\t-- character a fresh start if the character respawns (e.g. player resets) before the timeout ends or the player blasts\n\tcharacterRespawnedConnection = player.CharacterRemoving:Connect(endForceField)\n\n\t-- This handles the timeout for the ForceField after a blaster is selected\n\ttask.delay(MAX_FORCE_FIELD_TIME, endForceField)\nend\n\nreturn scheduleDestroyForceField\n```\n\n----------------------------------------\n\nTITLE: Setting up and Subscribing Users to a Topic\nDESCRIPTION: This Lua code snippet demonstrates how to set up a topic using `MessagingService` and subscribe users to it when they join the experience. It defines a topic, subscribes to it, and prints the received message data. It also unsubscribes the user when their ancestry changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-messaging.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MessagingService = game:GetService(\"MessagingService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\t-- Define and subscribe to the topic\n\tlocal topic = \"YourTopic\"\n\tlocal connection = MessagingService:SubscribeAsync(topic, function(message)\n\t\tprint(message.Data)\n\tend)\n\n\tplayer.AncestryChanged:Connect(function()\n\t\t-- Unsubscribe from the topic upon player ancestry change\n\t\tconnection:Disconnect()\n\tend)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Creating IntValue for Spaces Stat\nDESCRIPTION: Defines 'Spaces' as an IntValue indicating inventory capacity, initialized to 2, requiring players to manage item space carefully.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerJoin(player)\n      items.Parent = leaderstats\n\n      -- Create the Spaces stat\n      local spaces = Instance.new(\"IntValue\")\n      spaces.Name = \"Spaces\"\n      spaces.Value = 2\n      spaces.Parent = leaderstats\n   end\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Order in Function Calls\nDESCRIPTION: Shows how the order of arguments affects which parameters they're assigned to in a function call. This demonstrates that switching the order of arguments will change which object gets destroyed and which gets recycled.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n--Destroys trash and cleans up recyclables\nlocal function sortGarbage(trash,recyclable)\n     local sparkle = Instance.new(\"ParticleEmitter\")\n\n    trash:Destroy()\n    sparkle.Parent = recyclable\nend\n\n--Goes in order. Cement is destroyed and the glass bottle is recycled\nsortGarbage(cementBlock, glassBottle)\n\n--GlassBottle is destroyed and cementBlock is recycled\nsortGarbage(glassBottle, cementBlock)\n```\n\n----------------------------------------\n\nTITLE: Trigger and Catch Events Mid-Execution in Lua\nDESCRIPTION: Example showing how event handling behavior differs with deferred events. This pattern stops working correctly with deferred events as the callback won't run immediately.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/deferred.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal success = false\nevent:Connect(function ()\n   success = true\nend)\ndoSomethingToTriggerEvent() -- Causes `event` to fire\nreturn success\n```\n\n----------------------------------------\n\nTITLE: Implementing SliderController in Lua for Roblox Interactive UI Elements\nDESCRIPTION: A module that initializes and controls volume sliders in Roblox UI. It handles drag interactions through UIDragDetector, updates the slider's visual appearance, and executes callback functions when values change, allowing for real-time response to player input.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal SliderController = {}\nSliderController.__index = SliderController\n\nexport type Value = number\nexport type OnChanged = (Value) -> ()\n\nfunction SliderController.hydrate(props: {\n\t\tobject: Instance,\n\t\tonChanged: OnChanged,\n\t\tinitialValue: Value?\n\t})\n\tlocal object, onChanged, initialValue = props.object, props.onChanged, props.initialValue\n\n\tlocal handle = object:FindFirstChild(\"Handle\", true)\n\tif not handle then\n\t\twarn(string.format(\"Attempted to hydrate slider %s but couldn't find Handle\", object:GetFullName()))\n\tend\n\n\tlocal innerFill = object:FindFirstChild(\"InnerFill\", true)\n\tif not innerFill then\n\t\twarn(string.format(\"Attempted to hydrate slider %s but couldn't find InnerFill\", object:GetFullName()))\n\tend\n\n\tlocal dragDetector = handle:FindFirstChildWhichIsA(\"UIDragDetector\")\n\tif not dragDetector then\n\t\twarn(string.format(\"Attempted to hydrate slider %s but couldn't find UIDragDetector\", object:GetFullName()))\n\tend\n\n\tlocal self = setmetatable({\n\t\thandle = handle,\n\t\tinnerFill = innerFill,\n\t\tdragDetector = dragDetector,\n\t\tvalue = initialValue or 0.5,\n\t\tonChanged = onChanged,\n\t}, SliderController)\n\n\t-- Set initial value\n\tself:setValue(self.value)\n\n\t-- Connect detector to player manipulation\n\tself.dragConnection = dragDetector.DragContinue:Connect(function()\n\t\tself:setValue(handle.Position.X.Scale)\n\tend)\n\n\treturn self\nend\n\nfunction SliderController:setValue(value: Value)\n\tlocal clampedValue = math.clamp(value, 0, 1)\n\tself.value = clampedValue\n\n\t-- Update the handle position and inner frame size to match\n\tself.handle.Position = UDim2.fromScale(clampedValue, 0.5)\n\tself.innerFill.Size = UDim2.fromScale(clampedValue, 1)\n\n\t-- Run the user's callback with the latest value\n\tlocal changeSuccess, changeResult = pcall(self.onChanged, clampedValue)\n\tif not changeSuccess then\n\t\twarn(\"Error in slider callback:\", changeResult)\n\tend\nend\n\nreturn SliderController\n```\n\n----------------------------------------\n\nTITLE: Creating Default Text Channels in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to enable the automatic creation of default text channels in the TextChatService when the appropriate property is set to true. The channels 'RBXGeneral' and 'RBXSystem' will be created, and additional channels can be created as needed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/in-experience-text-chat.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n// Trigger automatic creation of default text channels\nClass.TextChatService.CreateDefaultTextChannels = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Chest Opening Reward System\nDESCRIPTION: Handles the chest opening process by deducting keys, awarding treasure, and destroying the chest object. Updates player statistics accordingly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfunction TreasureManager.openChest(chestPart, whichCharacter)\n\tlocal playerKeys = getPlayerKeys(whichCharacter)\n\tlocal playerTreasure = getPlayerTreasure(whichCharacter)\n\tplayerKeys.Value = playerKeys.Value - chestPickCost\n\tplayerTreasure.Value = playerTreasure.Value + chestReward\n\tchestPart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Value Access - Bracket and Dot Notation\nDESCRIPTION: This snippet demonstrates two ways to access values in a Luau dictionary: bracket notation (enemy[\"Name\"]) and dot notation (enemy.Name). It prints the enemy's name using both methods.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName = \"Spike\",\n\tHealth = 1000,\n}\n\nprint(\"The villain \" .. enemy[\"Name\"] .. \" approaches!\")\nprint(\"The villain \" .. enemy.Name .. \" approaches!\")\n```\n\n----------------------------------------\n\nTITLE: Shallow Cloning Tables in Luau\nDESCRIPTION: This snippet illustrates how to perform a shallow copy of a table using Luau's `table.clone()`, suitable for tables without nested tables.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal original = {\n\tkey = \"value\",\n\tengine = \"Roblox\",\n\tplayerID = 505306092\n}\n\nlocal clone = table.clone(original)\n```\n\n----------------------------------------\n\nTITLE: Implementing Gumdrop Collection Audio System in Lua\nDESCRIPTION: A server-side script that handles gumdrop collection mechanics, including playing 2D audio feedback, updating leaderboards, and triggering door animations when players collect gumdrops. The script uses AudioPlayer and AudioDeviceOutput objects to manage sound playback.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-2D-audio.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Initializing services\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal TweenService = game:GetService(\"TweenService\")\n\n-- Modules\nlocal Leaderboard = require(ServerStorage.Leaderboard)\nlocal PlayerData = require(ServerStorage.PlayerData)\n\n-- Variables\nlocal gumdropsFolder = Workspace.Gumdrops\nlocal gumdrops = gumdropsFolder:GetChildren()\n\nlocal GUMDROP_KEY_NAME = PlayerData.GUMDROP_KEY_NAME\nlocal GUMDROP_AMOUNT_TO_ADD = 1\n\nlocal function updatePlayerGumdrops(player, updateFunction)\n    -- Update the gumdrop table\n    local newGumdropAmount = PlayerData.updateValue(player, GUMDROP_KEY_NAME, updateFunction)\n\n    -- Update the gumdrop leaderboard\n    Leaderboard.setStat(player, GUMDROP_KEY_NAME, newGumdropAmount)\n\n    -- Check if the player has collected three gumdrops\n    if newGumdropAmount >= 3 then\n        -- Play the door event audio when the player collects three gumdrops\n        local audioPlayer = Workspace.Door.AudioPlayer\n        audioPlayer:Play()\n\n        -- Animate the door to move downward\n        local doorPart = Workspace.Door\n        local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear)\n        local tween = TweenService:Create(doorPart, tweenInfo, {Position = doorPart.Position + Vector3.new(0, -15, 0)})\n        tween:Play()\n    end\nend\n\n-- Defining the event handler\nlocal function onGumdropTouched(otherPart, gumdrop)\n    if gumdrop:GetAttribute(\"Active\") then\n        local character = otherPart.Parent\n        local player = Players:GetPlayerFromCharacter(character)\n        if player then\n            -- Player touched a gumdrop\n\n            local audioPlayer = gumdrop.AudioPlayer\n            audioPlayer:Play()\n\n            gumdrop.Transparency = 1\n            gumdrop:SetAttribute(\"Active\", false)\n            updatePlayerGumdrops(player, function(oldGumdropAmount)\n                oldGumdropAmount = oldGumdropAmount or 0\n                return oldGumdropAmount + GUMDROP_AMOUNT_TO_ADD\n            end)\n        end\n    end\nend\n\n-- Setting up event listeners\nfor _, gumdrop in gumdrops do\n    gumdrop:SetAttribute(\"Active\", true)\n    gumdrop.Touched:Connect(function(otherPart)\n        onGumdropTouched(otherPart, gumdrop)\n    end)\nend\n```\n\n----------------------------------------\n\nTITLE: Using typeof for Inferred Type Definition\nDESCRIPTION: This example demonstrates how to use the `typeof` function in Luau to define types based on the inferred type of existing objects. It is particularly useful for dynamically structured objects and metatables.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\ntype Car = typeof({\n\tSpeed = 0,\n\tWheels = 4\n})  --> Car: {Speed: number, Wheels: number}\n```\n\n----------------------------------------\n\nTITLE: Get DataStoreService\nDESCRIPTION: This code snippet demonstrates how to get the DataStoreService, which is required to create and manage data stores in Roblox. The DataStoreService provides methods for accessing and creating data stores.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n```\n\n----------------------------------------\n\nTITLE: Connecting Function to Touched Event in Lua\nDESCRIPTION: Connects the onTouch function to the trap's Touched event. This causes the function to be called whenever anything touches the trap part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/use-parameters-and-events.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal trap = script.Parent\n\nlocal function onTouch(objectTouched)\n    print(\"Something touched the trap\")\nend\n\n-- Connect the function to the Touched event\ntrap.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Binding Custom Action for Mobile Interactions in Roblox\nDESCRIPTION: This Lua snippet binds an action to a function, allowing an on-screen button to trigger interactions when the specified inputs are detected on mobile devices. The 'handleAction' function prints the action name and input object when the button is pressed. Dependencies include the `ContextActionService` service.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mobile.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal function handleAction(actionName, inputState, inputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\tprint(actionName, inputObject)\n\tend\nend\n\n-- Bind action to function\nContextActionService:BindAction(\"Interact\", handleAction, true, Enum.KeyCode.T, Enum.KeyCode.ButtonR1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Race Timer with While Loop in Luau\nDESCRIPTION: This snippet shows how to use a while loop to create a timer for tracking race duration in a Roblox script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nwhile raceActive == true do\n   task.wait(1)\n   timePassed += 1\n   print(timePassed)\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Player Touch in Roblox Luau\nDESCRIPTION: Function that checks if a player has touched a part using GetPlayerFromCharacter() to determine if the touching object belongs to a player character.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Checks if player touched the part\nlocal function partTouched(otherPart)\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\nend\n```\n\n----------------------------------------\n\nTITLE: Prompt Product Purchase\nDESCRIPTION: This code snippet demonstrates how to prompt a user to purchase a developer product using `MarketplaceService:PromptProductPurchase()`. It first retrieves the player using `Players.LocalPlayer` and then calls `PromptProductPurchase` with the player object and the product ID. Includes error handling via `pcall` to check for purchase prompt failures.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/developer-products.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\nlocal player = Players.LocalPlayer\n\n-- Replace the placeholder ID with your developer product ID\nlocal productId = 000000\n\nlocal function promptProductPurchase()\n    local success, errorMessage = pcall(function()\n      MarketplaceService:PromptProductPurchase(player, productId)\n    end)\n\n    if success then\n      print(\"Purchase prompt shown successfully\")\n\t\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Using ModuleScript Functions\nDESCRIPTION: Demonstrates how to require and use functions from a ModuleScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PickupManager = require(ReplicatedStorage:WaitForChild(\"PickupManager\"))\n\nlocal bonus = PickupManager.getPickupBonus(\"legendary\")\nprint(bonus)  --> 125\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player Policy Information in Roblox Lua\nDESCRIPTION: This snippet demonstrates the usage of the Class.PolicyService to retrieve a player's policy information related to the handling of virtual items. It allows developers to check specific restrictions and permissions for each player concerning paid random items and item trading.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/virtual-items.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal policyInfo = Class.PolicyService:GetPolicyInfoForPlayerAsync(playerId)\n\n-- Check if paid random item interaction is restricted\nif policyInfo.ArePaidRandomItemsRestricted then\n    -- Handle restrictions\nend\n\n-- Check if trading of paid items is allowed\nif policyInfo.IsPaidItemTradingAllowed then\n    -- Handle trading permissions\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Items with Node.js Inventory API\nDESCRIPTION: This Node.js snippet adjusts the filter parameter to retrieve only collectible items from a user's inventory. It modifies the 'params' variable in the original Node.js sample to include filters for collectibles and asset types in the API request.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/inventory.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst params = '?filter=onlyCollectibles=true;inventoryItemAssetTypes=*';\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Health Meter in Roblox\nDESCRIPTION: This Lua script updates a custom health meter based on character health changes. It includes functionality to resize and recolor the meter based on current health percentage, using a color gradient for visual feedback.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/create-hud-meters.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Reference to local player, character, and humanoid\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\n-- Reference to meter bar inner frame\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\nlocal meterBarInner = playerGui.HUDContainer.MeterBar.InnerFill\n\n-- Gradient sequence colors (red, orange, yellow, lime, green)\nlocal gradient = {\n\tColor3.fromRGB(225, 50, 0),\n\tColor3.fromRGB(255, 100, 0),\n\tColor3.fromRGB(255, 200, 0),\n\tColor3.fromRGB(150, 225, 0),\n\tColor3.fromRGB(0, 225, 50)\n}\n\n-- Function to get color in gradient sequence from fractional point\nlocal function getColorFromSequence(fraction: number): Color3\n\t-- Each color in gradient defines the beginning and/or end of a section\n\tlocal numSections = #gradient - 1\n\n\t-- Each section represents a portion of 1\n\tlocal sectionSize = 1 / numSections\n\n\t-- Determine which section the requested fraction falls into\n\tlocal sectionStartIndex = 1 + math.clamp(fraction, 0, 1) // sectionSize\n\n\t-- Get the colors at the start and end of the section\n\tlocal sectionColorStart = gradient[sectionStartIndex]\n\tlocal sectionColorEnd = gradient[sectionStartIndex + 1] or sectionColorStart\n\n\t-- Normalize fraction to be a number from 0 to 1 within the section\n\tlocal fractionOfSection = math.clamp(fraction, 0, 1) % sectionSize / sectionSize\n\n\t-- Lerp between beginning and end based on the normalized fraction\n\treturn sectionColorStart:Lerp(sectionColorEnd, fractionOfSection)\nend\n\nlocal function onHealthChanged()\n\t-- Calculate new health as percentage of max\n\tlocal healthFraction = math.max(0, humanoid.Health / humanoid.MaxHealth)\n\n\t-- Set the bar to new size/color targets\n\tmeterBarInner.Size = UDim2.new(healthFraction, 0, 1, 0)\n\tmeterBarInner.BackgroundColor3 = getColorFromSequence(healthFraction)\nend\n\n-- Listen for changes to humanoid health\nhumanoid.HealthChanged:Connect(onHealthChanged)\n\n-- Initially set (or reset) bar size/color to current health\nonHealthChanged()\n```\n\n----------------------------------------\n\nTITLE: Basic ModuleScript Structure in Roblox\nDESCRIPTION: Basic template for creating a ModuleScript that returns an empty table. This is the foundational structure for modular code in Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal module = {}\n\nreturn module\n```\n\n----------------------------------------\n\nTITLE: Invoking BindableFunction with Tuple Parameters\nDESCRIPTION: This snippet demonstrates how to invoke a BindableFunction in Roblox Lua using multiple arguments as a tuple. The method accepts various types of values including integers, booleans, strings, and Vector3.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tuples.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nBindableFunction:Invoke(1, true, \"string\", Vector3.new(0, 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Menu Controls in Roblox Lua\nDESCRIPTION: A LocalScript that manages a settings UI system with an animated button, sliding menu panel, and volume control sliders. Uses custom StatefulObjectController for state management and SliderController for volume controls. Includes initialization of UI components and event handling for user interactions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal SoundService = game:GetService(\"SoundService\")\n\nlocal SliderController = require(ReplicatedStorage.SliderController)\nlocal StatefulObjectController = require(ReplicatedStorage.StatefulObjectController)\n\nlocal HUDContainer = script.Parent\n\n-- Initialize settings button\nlocal settingsButton = StatefulObjectController.hydrate({\n\tobject = HUDContainer:FindFirstChild(\"SettingsButton\"),\n\tstates = {\n\t\tmenuOpen = {\n\t\t\ttransition = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out),\n\t\t\tproperties = {\n\t\t\t\tRotation = 45,\n\t\t\t},\n\t\t},\n\t\tmenuClosed = {\n\t\t\ttransition = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out),\n\t\t\tproperties = {\n\t\t\t\tRotation = 0,\n\t\t\t},\n\t\t},\n\t},\n\tinitialStateName = \"menuClosed\"\n})\n\n-- Initialize settings menu frame\nlocal settingsMenu = StatefulObjectController.hydrate({\n\tobject = HUDContainer:FindFirstChild(\"SettingsMenu\"),\n\tstates = {\n\t\tmenuOpen = {\n\t\t\ttransition = TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out),\n\t\t\tproperties = {\n\t\t\t\tPosition = UDim2.fromScale(0.5, 0.5),\n\t\t\t\tVisible = true,\n\t\t\t},\n\t\t},\n\t\tmenuClosed = {\n\t\t\ttransition = TweenInfo.new(0),\n\t\t\tproperties = {\n\t\t\t\tPosition = UDim2.fromScale(0.5, 0.4),\n\t\t\t\tVisible = false,\n\t\t\t},\n\t\t},\n\t},\n\tinitialStateName = \"menuClosed\"\n})\n\n-- Initialize effects volume slider\nlocal effectsAudio = SoundService:FindFirstChild(\"Effects\")\nlocal effectsVolumeSlider = SliderController.hydrate({\n\tobject = HUDContainer:FindFirstChild(\"EffectsVolumeSlider\", true),\n\tinitialValue = effectsAudio and effectsAudio.Volume or 0.5,\n\tonChanged = function(value: SliderController.Value)\n\t\tif effectsAudio then\n\t\t\teffectsAudio.Volume = value\n\t\tend\n\tend,\n})\n\n-- Initialize background volume slider\nlocal backgroundAudio = SoundService:FindFirstChild(\"Background\")\nlocal backgroundVolumeSlider = SliderController.hydrate({\n\tobject = HUDContainer:FindFirstChild(\"BackgroundVolumeSlider\", true),\n\tinitialValue = backgroundAudio and backgroundAudio.Volume or 0.5,\n\tonChanged = function(value: SliderController.Value)\n\t\tif backgroundAudio then\n\t\t\tbackgroundAudio.Volume = value\n\t\tend\n\tend,\n})\n\n-- Connect buttons to player interaction\nHUDContainer:FindFirstChild(\"SettingsButton\").Activated:Connect(function()\n\tlocal targetState = if settingsButton.currentStateName == \"menuClosed\"\n\t\tthen \"menuOpen\"\n\t\telse \"menuClosed\"\n\tsettingsButton:setState(targetState)\n\tsettingsMenu:setState(targetState)\nend)\nHUDContainer:FindFirstChild(\"CloseButton\", true).Activated:Connect(function()\n\tsettingsButton:setState(\"menuClosed\")\n\tsettingsMenu:setState(\"menuClosed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialogue Cycling Mechanism\nDESCRIPTION: Create a function that cycles through dialogue array, resetting to the first index when reaching the end\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-arrays.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal dialogueIndex = 1\n\nlocal function speak()\n   local dialogue = dialogueArray[dialogueIndex]\n   Chat:Chat(head, dialogue)\n\n   dialogueIndex = if dialogueIndex == #dialogueArray then 1 else dialogueIndex + 1\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning Players into Team-Based Locations in Roblox Lua\nDESCRIPTION: This function assigns players to teams, sets their neutral status to false so they only spawn at their team's location, and sets their player state to 'SelectingBlaster'. It then loads the player's character to spawn them into the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function spawnPlayersInMap(players: { Player })\n\tfor _, player in players do\n\t\tplayer.Team = getSmallestTeam()\n\t\tplayer.Neutral = false\n\t\tplayer:SetAttribute(PlayerAttribute.playerState, PlayerState.SelectingBlaster)\n\t\ttask.spawn(function()\n\t\t\tplayer:LoadCharacter()\n\t\tend)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Increment Value in For Loop\nDESCRIPTION: Shows how to add an increment value of -1 to a for loop, which specifies how the control variable changes after each iteration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0, -1\n```\n\n----------------------------------------\n\nTITLE: Setup Cooldown with Attributes in Lua\nDESCRIPTION: This snippet extends the functionality by setting a 'Enabled' attribute for cooldown management, ensuring a health pickup can only be used once per cooldown cycle. It modifies both the loop and the `onTouchHealthPickup` function to incorporate this logic.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tif healthPickup:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\thumanoid.Health = MAX_HEALTH\n\t\tend\n\tend\nend\n\nfor _, healthPickup in ipairs(healthPickups) do\n\thealthPickup:SetAttribute(\"Enabled\", true)\n\thealthPickup.Touched:Connect(function(otherPart)\n\t\tonTouchHealthPickup(otherPart, healthPickup)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Receiving Actor Messages in Parallel\nDESCRIPTION: Shows how to bind a callback to receive messages in a parallel context using BindToMessageParallel().\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/multithreading.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Get the actor this script is parented to\nlocal actor = script:GetActor()\n\n-- Bind a callback for the \"Greeting\" message topic\nactor:BindToMessageParallel(\"Greeting\", function(greetingString)\n\tprint(actor.Name, \"-\", greetingString)\nend)\n\nprint(\"Bound to messages\")\n```\n\n----------------------------------------\n\nTITLE: Adding Player Stats to Leaderboard - Roblox Lua\nDESCRIPTION: This snippet demonstrates how to add a stat for gold to the 'leaderstats' folder created for each player. An IntValue instance is created to represent the gold amount, which can be modified during gameplay.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/leaderboards.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function leaderboardSetup(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\n\n\tlocal gold = Instance.new(\"IntValue\")\n\tgold.Name = \"Gold\"\n\tgold.Value = 0\n\tgold.Parent = leaderstats\nend\n\n-- Connect the \"leaderboardSetup()\" function to the \"PlayerAdded\" event\nPlayers.PlayerAdded:Connect(leaderboardSetup)\n```\n\n----------------------------------------\n\nTITLE: Table References in Luau\nDESCRIPTION: Demonstrates how table references work in Luau, highlighting that assigning one table to another variable creates a reference, not a copy. It shows the propagation of changes through references.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal originalArray = {10, 20}\n\nlocal arrayReference = originalArray\n\nprint(\"Original:\", originalArray[1], originalArray[2])\nprint(\"Reference:\", arrayReference[1], arrayReference[2])\n\n-- Change values in original array\noriginalArray[1] = 1000\noriginalArray[2] = 2000\n\nprint(\"Reference:\", arrayReference[1], arrayReference[2])\n\n--[[ Resulting output:\nOriginal: 10 20\nReference: 10 20\nReference: 1000 2000\n]]\n```\n\n----------------------------------------\n\nTITLE: Accessing FaceControls Instance in Roblox Lua\nDESCRIPTION: When importing a head that supports facial animation into Studio, Roblox creates a FaceControls instance. This instance is used to access and combine individual poses to create expressions and animations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal faceControls = headMeshPart:FindFirstChild(\"FaceControls\")\n```\n\n----------------------------------------\n\nTITLE: Playing Custom Animation on Non-Humanoid Character Rig in Lua\nDESCRIPTION: Script that creates an AnimationController and Animator to play animations on rigs without a Humanoid object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/using.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal rig = script.Parent\n\n-- Create a new \"Animation\" instance and assign an animation asset ID\nlocal kickAnimation = Instance.new(\"Animation\")\nkickAnimation.AnimationId = \"rbxassetid://2515090838\"\n\n-- Create a new \"AnimationController\" and \"Animator\"\nlocal animationController = Instance.new(\"AnimationController\")\nanimationController.Parent = rig\n\nlocal animator = Instance.new(\"Animator\")\nanimator.Parent = animationController\n\n-- Load the animation onto the animator\nlocal kickAnimationTrack = animator:LoadAnimation(kickAnimation)\n\n-- Play the animation track\nkickAnimationTrack:Play()\n\n-- If a named event was defined for the animation, connect it to \"GetMarkerReachedSignal()\"\nkickAnimationTrack:GetMarkerReachedSignal(\"KickEnd\"):Connect(function(paramString)\n\tprint(paramString)\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling Basic Functions in Luau\nDESCRIPTION: This snippet demonstrates how to define a basic function without parameters or return values in Luau. It includes necessary syntax elements such as the `local` keyword, `function` keyword, and the `end` keyword. The function calculates the sum of two numbers and prints the result.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- This function has no parameters and returns nil\nlocal function addOneAndTwo()\n\tlocal result = 1 + 2\n\tprint(result)\nend\n-- Calling a function without a return\naddOneAndTwo() -- 3\n```\n\n----------------------------------------\n\nTITLE: Serialization Process in Data Stores - Luau\nDESCRIPTION: This snippet highlights the serialization process when saving Luau data into JSON format for storage in Roblox data stores and the associated data types supported. It emphasizes the need for acceptable data types and warns against unsupported types that result in errors or being stored as nil.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/versioning-listing-and-caching.md#2025-04-21_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal jsonData = Class.HttpService.JSONEncode(yourLuauData)\n```\n\n----------------------------------------\n\nTITLE: Getting the Team with Fewest Players in Roblox Lua\nDESCRIPTION: This function determines which team has the least number of players by sorting all teams in ascending order based on player count, then returning the smallest team. This helps maintain team balance when assigning new players.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getSmallestTeam(): Team\n\tlocal teams = Teams:GetTeams()\n\n\t-- Sort teams in ascending order from smallest to largest\n\ttable.sort(teams, function(teamA: Team, teamB: Team)\n\t\treturn #teamA:GetPlayers() < #teamB:GetPlayers()\n\tend)\n\n\t-- Return the smallest team\n\treturn teams[1]\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Touch Detection with Player Verification in Roblox Luau\nDESCRIPTION: Complete implementation of the part touch detection that verifies if a player touched the part and calls the givePoints function if true. Also includes the connection to the Touched event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Checks if player touched the part\nlocal function partTouched(otherPart)\n\t-- Gets the player if one touched the part\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\tif player then\n\t\tgivePoints(player)\n\tend\nend\n\npointPart.Touched:Connect(partTouched)\n```\n\n----------------------------------------\n\nTITLE: Implementing Team Indicator Logic in Roblox Lua\nDESCRIPTION: This script creates and manages team indicators above player characters' heads. It clones a BillboardGui prefab, sets its color based on the player's team, and makes indicators for friendly players always visible while enemy indicators are only visible when not occluded by objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal localPlayer = Players.LocalPlayer\nlocal otherPlayerIndicatorPrefab = ReplicatedStorage.Instances.Guis.OtherPlayerIndicatorPrefab\n\nlocal characterSpawnConnectionsByPlayer: { [Player]: RBXScriptConnection } = {}\nlocal playerAddedConnection: RBXScriptConnection?\n\nlocal function removeIndicatorFromPlayer(player: Player)\n\tif not player.Character then\n\t\treturn\n\tend\n\n\tlocal head = player.Character:WaitForChild(\"Head\", 3)\n\tif not head then\n\t\treturn\n\tend\n\n\tlocal gui = head:FindFirstChild(otherPlayerIndicatorPrefab.Name)\n\tif gui then\n\t\tgui:Destroy()\n\tend\nend\n\nlocal function addIndicatorToCharacter(otherCharacter: Model?)\n\tlocal otherPlayer = Players:GetPlayerFromCharacter(otherCharacter)\n\tif not otherPlayer then\n\t\treturn\n\tend\n\n\ttask.spawn(function()\n\t\tlocal otherHead = otherCharacter:WaitForChild(\"Head\", 3)\n\t\tif not otherHead then\n\t\t\treturn\n\t\tend\n\n\t\t-- Only add indicators to players participating in the round\n\t\tif not otherPlayer.Team then\n\t\t\treturn\n\t\tend\n\n\t\t-- Avoid adding duplicate indicators, creating a new one only if it doesn't exist\n\t\tlocal gui = otherHead:FindFirstChild(otherPlayerIndicatorPrefab.Name)\n\t\tif not gui then\n\t\t\tgui = otherPlayerIndicatorPrefab:Clone()\n\t\t\tgui.Frame.BackgroundColor3 = otherPlayer.TeamColor.Color\n\t\t\tgui.Parent = otherHead\n\t\tend\n\n\t\t-- The indicator is always on top only if the player is friendly\n\n\t\tlocal isFriendly = otherPlayer.Team == localPlayer.Team\n\t\tgui.AlwaysOnTop = isFriendly\n\tend)\nend\n\nlocal function addIndicatorWhenCharacterSpawns(player: Player)\n\tif characterSpawnConnectionsByPlayer[player] then\n\t\treturn\n\tend\n\tlocal connection = player.CharacterAdded:Connect(addIndicatorToCharacter)\n\tcharacterSpawnConnectionsByPlayer[player] = connection\nend\n\nlocal function stopSyncingIndicators()\n\tfor _, connection in characterSpawnConnectionsByPlayer do\n\t\tconnection:Disconnect()\n\tend\n\ttable.clear(characterSpawnConnectionsByPlayer)\n\n\tif playerAddedConnection then\n\t\tplayerAddedConnection:Disconnect()\n\t\tplayerAddedConnection = nil\n\tend\n\n\tfor _, player in Players:GetPlayers() do\n\t\tremoveIndicatorFromPlayer(player)\n\tend\nend\n\nlocal function addIndicatorToPlayer(player: Player)\n\tif player == localPlayer then\n\t\treturn\n\tend\n\n\taddIndicatorToCharacter(player.Character)\n\taddIndicatorWhenCharacterSpawns(player)\nend\n\nlocal function startSyncingIndicators()\n\tfor _, player in Players:GetPlayers() do\n\t\taddIndicatorToPlayer(player)\n\tend\n\n\tif not playerAddedConnection then\n\t\tplayerAddedConnection = Players.PlayerAdded:Connect(addIndicatorToPlayer)\n\tend\nend\n\nlocal function onLocalTeamChanged()\n\tlocal localTeam = localPlayer.Team\n\tif localTeam then\n\t\tstartSyncingIndicators()\n\telse\n\t\tstopSyncingIndicators()\n\tend\nend\n\nlocalPlayer:GetPropertyChangedSignal(\"Team\"):Connect(onLocalTeamChanged)\nonLocalTeamChanged()\n```\n\n----------------------------------------\n\nTITLE: Awarding Badges using BadgeService in Lua\nDESCRIPTION: This Lua script provides a function to award a badge to a player using Roblox's BadgeService. It retrieves badge information to confirm enablement before awarding. Dependencies include BadgeService and player/user ID input. Key outputs are warnings on errors and badge awarding success.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/publishing/badges.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal BadgeService = game:GetService(\"BadgeService\")\n\nlocal function awardBadge(player, badgeId)\n  -- Fetch badge information\n  local success, badgeInfo = pcall(BadgeService.GetBadgeInfoAsync, BadgeService, badgeId)\n  if success then\n    -- Confirm that badge can be awarded\n    if badgeInfo.IsEnabled then\n      -- Award badge\n      local awarded, errorMessage = pcall(BadgeService.AwardBadge, BadgeService, player.UserId, badgeId)\n      if not awarded then\n        warn(\"Error while awarding badge:\", errorMessage)\n      end\n    end\n  else\n \twarn(\"Error while fetching badge info!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Reset Active Players Table in PlayerManager (Lua)\nDESCRIPTION: This code snippet modifies the `resetPlayers` function in the `PlayerManager` module to include resetting the `activePlayers` table. After respawning each player back to the lobby, the `activePlayers` table is set to an empty table `{}`. This ensures that the `activePlayers` table is cleared before the next match begins. It relies on the existence of the `activePlayers` table and `respawnPlayerInLobby` function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.resetPlayers()\n\tfor playerKey, whichPlayer in activePlayers do\n\t\trespawnPlayerInLobby(whichPlayer)\n\tend\n\n\tactivePlayers = {}\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Function Implementation with Call in Luau\nDESCRIPTION: Demonstrates a complete function implementation including the function call. This example shows how to define a function and then call it afterward to execute its code.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/code-a-function.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printFood()\n\tprint(\"Curry!\")\nend\n\nprintFood()\n```\n\n----------------------------------------\n\nTITLE: Material Plugin with Undo and Redo Support in Lua\nDESCRIPTION: A Roblox Studio plugin demonstrating how to use ChangeHistoryService to enable undo and redo functionality when applying material changes to selected parts\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ChangeHistoryService = game:GetService(\"ChangeHistoryService\")\nlocal Selection = game:GetService(\"Selection\")\n\n-- Create an example plugin\nlocal toolbar = plugin:CreateToolbar(\"Example Plugin\")\nlocal button = toolbar:CreateButton(\"Neon it up\", \"\", \"\")\n\n-- Connect a function to the click event\nbutton.Click:Connect(function()\n    local parts = {}\n    for _, part in Selection:Get() do\n        if part:IsA(\"BasePart\") then\n            parts[#parts + 1] = part\n        end\n    end\n    if #parts < 1 then\n        -- Nothing to do.\n        return\n    end\n\n    -- Try to begin a recording with a specific identifier\n    local recording = ChangeHistoryService:TryBeginRecording(\"Set selection to neon\")\n\n    -- Check if recording was successfully initiated\n    if not recording then\n        -- Handle error here. This indicates that your plugin began a previous\n        -- recording and never completed it. You may only have one recording\n        -- per plugin active at a time.\n        return\n    end\n\n    -- Iterate through the selected parts\n    for _, part in parts do\n        part.Material = Enum.Material.Neon -- Set the material of the part to Neon\n    end\n\n    -- Finish the recording, committing the changes to the history\n    ChangeHistoryService:FinishRecording(recording, Enum.FinishRecordingOperation.Commit)\nend)\n```\n\n----------------------------------------\n\nTITLE: Day/Night Time-Switching Tool Script in Lua\nDESCRIPTION: A server-side script for a magic wand tool that toggles between day and night by changing the Lighting.ClockTime when activated\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/tools.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Lighting = game:GetService(\"Lighting\")\n\nlocal tool = script.Parent\nlocal function onActivate()\n\tif Lighting.ClockTime >= 8 and Lighting.ClockTime < 16 then\n\t\tLighting.ClockTime = 20\n\telse\n\t\tLighting.ClockTime = 8\n\tend\nend\ntool.Activated:Connect(onActivate)\n```\n\n----------------------------------------\n\nTITLE: Defining Functional Types\nDESCRIPTION: The code elaborates on declaring functional types in Luau, demonstrating how to define complex function signatures. These definitions help maintain consistency and enforce type constraints on higher-order programming elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\ntype add = (x: number, y: number) -> number\ntype FindSource = (script: BaseScript, pattern: string) -> (string, number)\n```\n\n----------------------------------------\n\nTITLE: Generic Functions in Luau\nDESCRIPTION: Illustrates the definition of a simple generic function in Luau that increments a number. The function takes a number as input and returns the incremented value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Generic function\nlocal function increment(number)\n\treturn number + 1\nend\n```\n\n----------------------------------------\n\nTITLE: Loading and Utilizing Translators in ROBLOX Lua\nDESCRIPTION: This script demonstrates how to load language translators based on a player’s locale using LocalizationService. Dependencies include ReplicatedStorage and Players services. It shows setting a primary and fallback translator and translating content using the Translate method. Key parameters include locale strings ('pt', 'es'). Outputs include a print statement of the translated text, with potential error handling via pcall.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/localize-with-scripting.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Local variables\nlocal player = Players.LocalPlayer\n\n-- Load Translator for \"pt\". Wrap translator functions within a pcall() to protect against failures.\nlocal res1, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"pt\")\nend)\n\n-- Load second Translator with Player's locale, in this example \"es\"\nlocal res2, fallbackTranslator = pcall(function()\n\treturn LocalizationService:GetTranslatorForPlayerAsync(player)\nend)\n\n-- Use Translate function with first Translator\nif res1 then\n\tlocal translate1 = translator:Translate(game, \"jewels\")\n\tprint(translate1) -- Expected Output in pt: joyas\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n\n-- Use Translate function with second Translator\nif res2 then\n\tlocal translate2 = fallbackTranslator:Translate(game, \"jewels\")\n\tprint(translate2) -- Expected Output in if user is set to 'es': jóias\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. fallbackTranslator)\nend\n```\n\n----------------------------------------\n\nTITLE: Binding Camera Update to RenderStep in Roblox Lua\nDESCRIPTION: This snippet binds the updateCamera function to the render step, ensuring the camera position is updated every frame. It uses RunService and sets a priority just above the default camera.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\n\nlocal player = Players.LocalPlayer\nlocal camera = workspace.CurrentCamera\n\nlocal CAMERA_DEPTH = 24\nlocal HEIGHT_OFFSET = 2\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n            local rootPosition = root.Position + Vector3.new(0, HEIGHT_OFFSET, 0)\n            local cameraPosition = Vector3.new(rootPosition.X, rootPosition.Y, CAMERA_DEPTH)\n            camera.CFrame = CFrame.lookAt(cameraPosition, rootPosition)\n        end\n    end\nend\n\nRunService:BindToRenderStep(\"SidescrollingCamera\", Enum.RenderPriority.Camera.Value + 1, updateCamera)\n```\n\n----------------------------------------\n\nTITLE: Callback Connection - Script\nDESCRIPTION: This script sets up a callback for a remote function and demonstrates how the table identity is altered during the transfer. It outputs the table identity when invoking the remote function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteFunction = ReplicatedStorage:FindFirstChildOfClass(\"RemoteFunction\")\n\n-- Callback function\nlocal function returnTable(player, passedTable)\n\t-- Output table identity on invocation\n\tprint(tostring(passedTable))  --> table: 0x48eb7aead27563d9\n\treturn passedTable\nend\n\n-- Set function as remote function's callback\nremoteFunction.OnServerInvoke = returnTable\n```\n\n----------------------------------------\n\nTITLE: Getting a Range of Keys from a Sorted Map\nDESCRIPTION: Retrieves multiple keys from the sorted map within specified bounds using the GetRangeAsync method. The sample demonstrates how to set bounds for filtering results.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/sorted-map.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"SortedMap1\")\n\nlocal lowerBound = {}\nlowerBound[\"key\"] = \"10\"\nlowerBound[\"sortKey\"] = 100\nlocal upperBound = {}\nupperBound[\"key\"] = \"50\"\nupperBound[\"sortKey\"] = 500\n\n-- Get up to 20 items starting from the beginning\nlocal getSuccess, items = pcall(function()\n\treturn sortedMap:GetRangeAsync(\n\t\tEnum.SortDirection.Ascending, 20, lowerBound, upperBound)\nend)\nif getSuccess then\n\tfor _, item in items do\n\t\tprint(item.key)\n\t\tprint(item.sortKey)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Class in Luau\nDESCRIPTION: This Luau code demonstrates a method for creating classes with strong type inference, differing from idiomatic Lua. It explicitly defines the type of `self` in both the type declaration and the constructor to satisfy Luau's strict typechecking.  The code includes a constructor and a method, illustrating how to maintain type safety.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/plant-reference-project.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n\"--!strict\\n\\nlocal MyClass = {}\\nMyClass.__index = MyClass\\n\\nexport type ClassType = typeof(setmetatable(\\n\\t{} :: {\\n\\t\\tproperty: number,\\n\\t},\\n\\tMyClass\\n))\\n\\nfunction MyClass.new(property: number): ClassType\\n\\tlocal self = {\\n\\t\\tproperty = property,\\n\\t}\\n\\n\\tsetmetatable(self, MyClass)\\n\\n\\treturn self\\nend\\n\\nfunction MyClass.addOne(self: ClassType)\\n\\tself.property += 1\\nend\\n\\nreturn MyClass\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Hitmarker System in Lua\nDESCRIPTION: Module script that handles the hitmarker animation and visibility when a player successfully tags another player. Uses tweening for smooth transitions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal playerTaggedBindableEvent = ReplicatedStorage.Instances.PlayerTaggedBindableEvent\n\nlocal HITMARKER_FLASH_TIME = 0.4\nlocal HITMARKER_TWEEN_INFO =\n\tTweenInfo.new(HITMARKER_FLASH_TIME, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0, true)\n\nlocal function setupHitmarker(gui: ScreenGui)\n\tlocal propertyTable = {\n\t\tImageTransparency = 0,\n\t}\n\tlocal tweenHitmarker = TweenService:Create(gui.Crosshair.Hitmarker, HITMARKER_TWEEN_INFO, propertyTable)\n\n\tlocal function onPlayerTaggedEvent()\n\t\ttweenHitmarker:Cancel()\n\t\tgui.Crosshair.Hitmarker.ImageTransparency = 1\n\t\ttweenHitmarker:Play()\n\tend\n\tplayerTaggedBindableEvent.Event:Connect(onPlayerTaggedEvent)\nend\n\nreturn setupHitmarker\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Selling Mechanism in Roblox\nDESCRIPTION: Creates a function to calculate and transfer gold based on player's collected items, resetting item count after selling\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/selling-items.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function sellItems(playerItems, playerGold)\n\t-- Gets how many items the player has and multiplies that by item worth.\n\tlocal totalSell = playerItems.Value * 100\n\t-- Add how much the player earns to their money\n\tplayerGold.Value += totalSell\n\t-- Reset player's items to 0\n\tplayerItems.Value = 0\nend\n\nlocal function onTouch(partTouched)\n\tlocal character = partTouched.Parent\n\tlocal player = Players:GetPlayerFromCharacter(character)\n\n\tif player then\n\t\tlocal playerStats = player:FindFirstChild(\"leaderstats\")\n\n\t\tif playerStats then\n\t\t\tlocal playerItems = playerStats:FindFirstChild(\"Items\")\n\t\t\tlocal playerGold = playerStats:FindFirstChild(\"Gold\")\n\n\t\t\tif playerItems and playerGold then\n\t\t\t\tsellItems(playerItems, playerGold)\n\t\t\tend\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Emitting Particles on Player Death with Roblox Lua\nDESCRIPTION: This snippet extends the previous example by adding a call to the `Emit()` function on the `particleEmitter` after the player's health is set to zero. The `Emit()` function triggers a burst of particles. `EMIT_AMOUNT` determines the number of particles to emit.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/use-particles-for-explosions.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n\"local trapObject = script.Parent\nlocal particleEmitter = trapObject.Explosion\n\nlocal EMIT_AMOUNT = 100\n\nlocal function killPlayer(otherPart)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\thumanoid.Health = 0\n\t\tparticleEmitter:Emit(EMIT_AMOUNT)\n\tend\nend\n\ntrapObject.Touched:Connect(killPlayer)\"\n```\n\n----------------------------------------\n\nTITLE: Registering Touch Events for Animation Trigger\nDESCRIPTION: This LocalScript, named `TouchPartRegister`, detects when a player touches a part within the `TouchPartFolder` and triggers a corresponding animation. It utilizes the `PlayerAnimationFeedback` module to play the animation, managing a cooldown to prevent repeated triggers. The script depends on `ReplicatedStorage` for the `PlayerAnimationFeedback` module and retrieves the player's character and humanoid.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/adding-animations.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Used with \"PlayerAnimationFeedback\" script to play animations on part touches\n\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal humanoid = character:WaitForChild(\"Humanoid\")\nlocal canTouch = false\n\n-- Include feedback animation module\nlocal PlayerAnimationFeedback = require(ReplicatedStorage:WaitForChild(\"PlayerAnimationFeedback\"))\n\n-- Function called when a part is touched\nlocal function onPartTouch(otherPart)\n\tif humanoid and canTouch == false then\n\t\tcanTouch = true\n\t\tPlayerAnimationFeedback:PlayAnimation()\n\t\tcanTouch = false\n\tend\nend\n\n-- On startup, call animation module load function\nPlayerAnimationFeedback:LoadAnimation(humanoid)\n-- Also bind a folder of parts to the \"Touched\" event to run \"onPartTouch()\"\nlocal touchPartFolder = workspace:WaitForChild(\"TouchPartFolder\")\nlocal touchParts = touchPartFolder:GetChildren()\n\nfor _, touchPart in touchParts do\n\ttouchPart.Touched:Connect(onPartTouch)\nend\n```\n\n----------------------------------------\n\nTITLE: Using task.wait with Duration Tracking in Roblox\nDESCRIPTION: Demonstrates how to use task.wait() to pause execution for a specified duration and capture the actual elapsed time.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scheduler.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal elapsedTime = task.wait(2) -- wait for 2 seconds\nprint(elapsedTime) --> 2.0792941\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Canvases in Roblox\nDESCRIPTION: This Lua snippet retrieves all canvases tagged with 'SurfaceCanvas' from the SurfaceArt module. It requires the 'ReplicatedStorage' service to access 'SurfaceArt'. The snippet returns a table containing all canvas objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nlocal canvases = SurfaceArt.getCanvases()\n```\n\n----------------------------------------\n\nTITLE: Render Player Laser on Client - Lua\nDESCRIPTION: This snippet manages rendering the laser beam on the client side. It checks if the player who fired the laser is not the LocalPlayer to avoid double rendering the same laser.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nlocal function createPlayerLaser(playerWhoShot, toolHandle, endPosition)\n\tif playerWhoShot ~= Players.LocalPlayer then\n\t\tLaserRenderer.createLaser(toolHandle, endPosition)\n\tend\nend\n\neventsFolder.LaserFired.OnClientEvent:Connect(createPlayerLaser)\n```\n\n----------------------------------------\n\nTITLE: While and Repeat Loops in Luau\nDESCRIPTION: Demonstrates the use of `while` and `repeat` loops in Luau for conditional execution of code blocks. The `while` loop continues as long as the boolean expression is true, while the `repeat` loop executes at least once and continues until the boolean expression becomes true.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nwhile boolExpression do\n\tdoSomething()\nend\n\nrepeat\n\tdoSomething()\nuntil not boolExpression\n```\n\n----------------------------------------\n\nTITLE: Iterate with ipairs in a Lua Loop\nDESCRIPTION: This snippet demonstrates looping through the health pickups array with `ipairs` in Lua, connecting each pickup's `Touched` event to a handler function that manages health restoration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\thumanoid.Health = MAX_HEALTH\n\tend\nend\n\nfor _, healthPickup in ipairs(healthPickups) do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Constructing Sets in Lua\nDESCRIPTION: The snippet defines a `Set` table with methods for creating and manipulating set objects. The `Set.new()` method constructs a new set from an optional list of items by using Lua metatables. Dependencies include Lua standard libraries.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Set = {}\nSet.__index = Set\n\n-- Function to construct a set from an optional list of items\nfunction Set.new(items)\n\tlocal newSet = {}\n\tfor key, value in items or {} do\n\t\tnewSet[value] = true\n\tend\n\treturn setmetatable(newSet, Set)\nend\n\n-- Function to add an item to a set\nfunction Set:add(item)\n\tself[item] = true\nend\n\n-- Function to remove an item from a set\nfunction Set:remove(item)\n\tself[item] = nil\nend\n\n-- Function to check if a set contains an item\nfunction Set:contains(item)\n\treturn self[item] == true\nend\n\n-- Function to output set as a comma-delimited list for debugging\nfunction Set:output()\n\tlocal elems = {}\n\tfor key, value in self do\n\t\ttable.insert(elems, tostring(key))\n\tend\n\tprint(table.concat(elems, \", \"))\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Basic User Notification via Roblox Open Cloud API\nDESCRIPTION: Demonstrates how to send a basic user notification using cURL, including setting the API key, universe source, and notification payload\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/experience-notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://apis.roblox.com/cloud/v2/users/${UserId}/notifications' \\\n--header 'x-api-key: ${ApiKey}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\t\"source\": {\n\t\t\"universe\": \"universes/${UniverseID}\"\n\t},\n\t\"payload\": {\n\t\t\"message_id\": \"${AssetID}\",\n\t\t\"type\": \"MOMENT\"\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: Profiling Raycast Code\nDESCRIPTION: This Lua code snippet wraps the raycasting code with `debug.profilebegin()` and `debug.profileend()` to create a custom label in the MicroProfiler. This allows for precise identification of the performance impact of the raycasting code. The MicroProfiler will display the custom label, making it easier to pinpoint the performance bottleneck.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/microprofiler/use-microprofiler.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n\"local function onStepped()\n\n  debug.profilebegin(\\\"Raycast Spam\\\")\n\n  for _ = 1, RAYS_PER_SECOND do\n    local startPosition = getRandomPosition()\n    local endPosition = getRandomPosition()\n    local direction = endPosition - startPosition\n\n    Workspace:Raycast(\n      startPosition,\n      endPosition\n    )\n  end\n\n  debug.profileend()\n\nend\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Metatables in Lua\nDESCRIPTION: Demonstrates basic metatable creation and attachment using setmetatable() and getmetatable() functions\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal x = {}\nlocal metaTable = {} -- metaTables are tables, too!\nsetmetatable(x, metaTable) -- Give x a metatable called metaTable!\nprint(getmetatable(x)) --> table: [hexadecimal memory address]\n```\n\n----------------------------------------\n\nTITLE: Keyboard Input Detection in Roblox using Lua\nDESCRIPTION: This Lua snippet detects keyboard key releases and logs the `Enum.KeyCode` to the Roblox Output window. The LocalScript depends on the `UserInputService` to track input events and requires placement in `StarterPlayerScripts`. It checks for keyboard input type specifically and outputs the name of the released key.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mouse-and-keyboard.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal function onInputEnded(inputObject, processedEvent)\n\t-- First check if the \"processedEvent\" is true\n\t-- This indicates that another script had already processed the input, so this one is ignored.\n\tif processedEvent then return end\n\n\t-- Next, check that the input was a keyboard event\n\tif inputObject.UserInputType == Enum.UserInputType.Keyboard then\n\t\tprint(\"A key was released: \" .. inputObject.KeyCode.Name)\n\tend\nend\n\nUserInputService.InputEnded:Connect(onInputEnded)\n```\n\n----------------------------------------\n\nTITLE: Creating the Appear Function in Luau\nDESCRIPTION: This snippet defines a function named 'appear' that restores the platform's properties, making it visible and allowing collisions again after being hidden.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function appear()\n    platform.CanCollide = true\n    platform.Transparency = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Locking Mouse Icon Position in Roblox via Lua Script\nDESCRIPTION: This snippet demonstrates how to lock a mouse icon's position using `MouseBehavior` settings in Roblox. The script sets `UserInputService.MouseBehavior` to prevent free mouse movement, requiring careful timing for locking, and shows how to track mouse movement for application in locked states, limited by mouse constraints during lock duration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mouse-and-keyboard.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\ntask.wait(5)\n\nUserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition\n\nUserInputService.InputChanged:Connect(function(inputObject)\n\tif inputObject.UserInputType == Enum.UserInputType.MouseMovement then\n\t\tprint(\"Mouse delta is (\" .. tostring(inputObject.Delta.X) .. \", \" ..  tostring(inputObject.Delta.Y) .. \")\")\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Adding Avatar Assets to MerchBooth in Lua\nDESCRIPTION: Script that adds avatar items to the MerchBooth using asset IDs. Includes error handling and demonstrates how to add multiple items like hats and accessories.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t607702162, -- Roblox Baseball Cap\n\t4819740796, -- Robox\n\t1374269, -- Kitty Ears\n\t11884330, -- Nerd Glasses\n\t10476359, -- Paper Hat\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Complete BuyScript for Upgrade Functionality in Roblox Lua\nDESCRIPTION: This snippet includes the full implementation of the script that allows players to purchase upgrades, including initialization of variables, the upgrade function logic, and the connection to the click detector.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/buying-upgrades.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Lets players click a button to buy an upgrade that increases MaxSpaces\nlocal buyButton = script.Parent\nlocal clickDetector = buyButton.ClickDetector\n\n-- Variables for the upgrade\nlocal newSpaces = 10\nlocal upgradeCost = 100\n\nlocal function giveUpgrade(player)\n    print(\"Someone clicked the button\")\n    -- Get's the player's leaderboard to get other IntValues\n    local playerStats = player:FindFirstChild(\"leaderstats\")\n\n    if playerStats then\n        -- Gets the player's money and spaces to make changes\n        local playerGold = playerStats:FindFirstChild(\"Gold\")\n        local playerSpaces = playerStats:FindFirstChild(\"Spaces\")\n\n        -- Checks if player has enough money to afford the upgrade\n        if playerGold and playerSpaces and playerGold.Value >= upgradeCost then\n            print(\"Player can buy item\")\n            -- Subtract the item's cost from the player's money\n            playerGold.Value -= upgradeCost\n            playerSpaces.Value += newSpaces\n        end\n    end\nend\n\nclickDetector.MouseClick:Connect(giveUpgrade)\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Topic in Roblox Using MessagingService\nDESCRIPTION: This snippet illustrates how to publish messages to a topic in Roblox using the MessagingService. When a player joins a server, the system notifies all subscribers with the player's name and the unique JobId of the current server instance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/cross-server-messaging.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MessagingService = game:GetService(\"MessagingService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal MESSAGING_TOPIC = \"FriendServerEvent\"\n\nPlayers.PlayerAdded:Connect(function(player)\n\t-- Publish to topic\n\tlocal publishSuccess, publishResult = pcall(function()\n\t\tlocal message = player.Name .. \" joined server with 'JobId' of \" .. game.JobId\n\t\tMessagingService:PublishAsync(MESSAGING_TOPIC, message)\n\tend)\n\tif not publishSuccess then\n\t\tprint(publishResult)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Health Pickup with Cooldown Debounce\nDESCRIPTION: Implementation of a health pickup system with visual feedback, using instance attributes for debounce control and transparency changes to indicate cooldown state.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/debounce.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = script.Parent\npart.Anchored = true\npart.CanCollide = false\n\nlocal COOLDOWN_TIME = 5\n\nlocal function healPlayer(otherPart)\n\tlocal humanoid = otherPart.Parent:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\tif not part:GetAttribute(\"CoolingDown\") then\n\t\t\tpart:SetAttribute(\"CoolingDown\", true)  -- Set attribute to true\n\t\t\thumanoid.Health += 25  -- Increase player health\n\t\t\tpart.Transparency = 0.75  -- Make part semi-transparent to indicate cooldown state\n\t\t\ttask.wait(COOLDOWN_TIME)  -- Wait for cooldown duration\n\t\t\tpart.Transparency = 0  -- Reset part to fully opaque\n\t\t\tpart:SetAttribute(\"CoolingDown\", false)  -- Reset attribute\n\t\tend\n\tend\nend\n\npart.Touched:Connect(healPlayer)\n```\n\n----------------------------------------\n\nTITLE: Basic Tool Event Handling Script in Lua\nDESCRIPTION: A template script demonstrating how to handle standard tool events like equipping, unequipping, activating, and deactivating a tool in Roblox\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/tools.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal tool = script.Parent\nlocal function onEquip()\n\tprint(\"The tool is now equipped.\")\nend\nlocal function onUnequip()\n\tprint(\"The tool is now unequipped.\")\nend\nlocal function onActivate()\n\tprint(\"The tool is now activated.\")\nend\nlocal function onDeactivate()\n\tprint(\"The tool is now deactivated.\")\nend\ntool.Equipped:Connect(onEquip)\ntool.Unequipped:Connect(onUnequip)\ntool.Activated:Connect(onActivate)\ntool.Deactivated:Connect(onDeactivate)\n```\n\n----------------------------------------\n\nTITLE: DataStores Class Definition in Node.js\nDESCRIPTION: This snippet defines a `DataStores` class in Node.js, which provides methods for interacting with the Roblox Data Stores API.  It encapsulates the base URL, API key, universe ID, and necessary headers for making API requests. The class includes methods for getting, listing, and incrementing data store entries.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require('node-fetch');\n\nclass DataStores {\n  constructor() {\n    this._baseUrl =\n      'https://apis.roblox.com/datastores/v1/universes/{universeId}';\n    this._apiKey = process.env.API_KEY;\n    this._universeId = 'UNIVERSE_ID';\n    this.ATTR_HDR = 'Roblox-entry-Attributes';\n    this.USER_ID_HDR = 'Roblox-entry-UserIds';\n    this._objectsUrl = `${this._baseUrl}${this._universeId}/standard-datastores/datastore/entries/entry`;\n    this._incrementUrl = `${this._objectsUrl}/increment`;\n    this._listObjectsUrl = `${this._baseUrl}${this._universeId}/standard-datastores/datastore/entries`;\n  }\n\n  async _getHeaders() {\n    return { 'x-api-key': this._apiKey };\n  }\n\n  async getEntry(datastore, objectKey, scope = null) {\n    const url = `${\n      this._objectsUrl\n    }?datastoreName=${datastore}&entryKey=${objectKey}&scope=${scope || ''}`;\n    const response = await fetch(url, { headers: await this._getHeaders() });\n    const data = await response.json();\n    return data;\n  }\n\n  async listEntries(datastore, scope = null, prefix = '', limit = 100) {\n    const url = `${this._listObjectsUrl}?datastoreName=${datastore}&scope=${scope}&prefix=${prefix}&limit=${limit}`;\n    const response = await fetch(url, { headers: await this._getHeaders() });\n    const data = await response.json();\n    return data;\n  }\n\n  async incrementEntry(datastore, objectKey, incrementBy, scope = null) {\n    const url = `${\n      this._incrementUrl\n    }?datastoreName=${datastore}&entryKey=${objectKey}&incrementBy=${incrementBy}&scope={\n      scope || ''\n    }`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: await this._getHeaders(),\n    });\n    const data = await response.json();\n    return data;\n  }\n}\n\nmodule.exports = DataStores;\n```\n\n----------------------------------------\n\nTITLE: Handling Model Collisions in Lua\nDESCRIPTION: This code demonstrates how to track collisions for a multi-part model by connecting touch events to all BaseParts within the model.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal model = script.Parent\n\nlocal numTouchingParts = 0\n\nlocal function onTouched(otherPart)\n\t-- Ignore instances of the model intersecting with itself\n\tif otherPart:IsDescendantOf(model) then return end\n\t-- Increase count of model parts touching\n\tnumTouchingParts += 1\n\n\tprint(model.Name, \"intersected with\", otherPart.Name, \"| Model parts touching:\", numTouchingParts)\nend\n\nlocal function onTouchEnded(otherPart)\n\t-- Ignore instances of the model un-intersecting with itself\n\tif otherPart:IsDescendantOf(model) then return end\n\t-- Decrease count of model parts touching\n\tnumTouchingParts -= 1\n\n\tprint(model.Name, \"un-intersected from\", otherPart.Name, \"| Model parts touching:\", numTouchingParts)\nend\n\nfor _, child in model:GetChildren() do\n\tif child:IsA(\"BasePart\") then\n\t\tchild.Touched:Connect(onTouched)\n\t\tchild.TouchEnded:Connect(onTouchEnded)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Platform Reappearance After Fade - Luau\nDESCRIPTION: This snippet updates the fade function to include logic for making the platform non-collidable after fading and restoring its visibility and collision properties after a few seconds using task.wait. This ensures the platform is reset for another attempt.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal function fade()\n   for count = 1, 10 do\n      platform.Transparency = count / 10\n      task.wait(0.1)\n   end\n   platform.CanCollide = false\n   task.wait(3)\n   platform.CanCollide = true\n   platform.Transparency = 0\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Table Iteration in Luau\nDESCRIPTION: Shows different methods of iterating over arrays and dictionaries, including standard Lua and Luau generalized iteration syntax\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/index.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfor index, value in ipairs(myArray) do -- standard Lua\n\tprint(index, value)\nend\nfor key, value in pairs(myDictionary) do -- standard Lua\n\tprint(key, value)\nend\nfor key, value in myDictionary do -- Luau generalized iteration\n\tprint(key, value)\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Stats for Item Collection - Lua\nDESCRIPTION: This snippet retrieves player statistics for items and spaces, enabling the script to update the leaderboard when an item is harvested.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal backpack = tool.Parent\nlocal player = backpack.Parent\nlocal playerStats = player:FindFirstChild(\"leaderstats\")\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerItems = playerStats:FindFirstChild(\"Items\")\nlocal playerSpaces = playerStats:FindFirstChild(\"Spaces\")\n```\n\n----------------------------------------\n\nTITLE: Efficient Use of elseif in Luau\nDESCRIPTION: This snippet shows a more efficient and readable way to code multiple conditions using elseif statements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nif finishTime < 5  then\n   -- Get a gold medal\nelseif finishTime >= 5 and <= 10 then\n   -- Get a silver medal\nelseif finishTime > 10 and <= 15 then\n   -- Get a bronze medal\nend\n```\n\n----------------------------------------\n\nTITLE: Reading and Removing Data from Queue with Loop in Luau\nDESCRIPTION: Demonstrates reading one or more items from the queue and removing them after processing them. The example uses a loop to continuously process queued items, ensuring each item is handled only once, with appropriate error handling throughout.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/queue.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal queue = MemoryStoreService:GetQueue(\"Queue1\")\n\nlocal addSuccess, addError = pcall(function()\n\tqueue:AddAsync(\"User_1234\", 30, 1)\nend)\nif not addSuccess then\n\twarn(addError)\nend\n\n-- Queue processing loop\nwhile true do\n\tlocal readSuccess, items, id = pcall(function()\n\t\treturn queue:ReadAsync(1, false, 30)\n\tend)\n\tif not readSuccess then\n\t\ttask.wait(1)\n\telseif #items > 0 then\n\t\tprint(items, id)\n\t\tlocal removeSuccess, removeError = pcall(function()\n\t\t\tqueue:RemoveAsync(id)\n\t\tend)\n\t\tif not removeSuccess then\n\t\t\twarn(removeError)\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Animating Texture Properties Using TweenService - Lua\nDESCRIPTION: This Lua script uses Roblox's TweenService to animate properties of two textures, creating a visual effect that simulates moving fog. The script configures two tweens with different parameters for each texture to achieve smooth transitions and looping animations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/textures-decals.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal texture1 = script.Parent.Texture1\nlocal texture2 = script.Parent.Texture2\n\nlocal tweenInfo1 = TweenInfo.new(8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1)\nlocal tween1 = TweenService:Create(texture1, tweenInfo1, {OffsetStudsV=50})\nlocal tweenInfo2 = TweenInfo.new(7, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)\nlocal tween2 = TweenService:Create(texture2, tweenInfo2, {OffsetStudsU=50, StudsPerTileU=55, StudsPerTileV=45})\n\ntween1:Play()\ntween2:Play()\n```\n\n----------------------------------------\n\nTITLE: Cleanup Match Function in MatchManager (Lua)\nDESCRIPTION: This code snippet defines a function `cleanupMatch` within the `MatchManager` module. Its purpose is to call the `removeAllWeapons` function from the `PlayerManager` module, which removes all weapons from the players in the game, cleaning up the match environment after it concludes. It depends on the PlayerManager module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction MatchManager.cleanupMatch()\n  playerManager.removeAllWeapons()\nend\n```\n\n----------------------------------------\n\nTITLE: Deforming Body Part Meshes using WrapDeformer in Lua\nDESCRIPTION: This Lua function demonstrates how to deform a body part mesh using WrapDeformer and EditableMesh in Roblox. It finds the WrapTarget, creates an EditableMesh from the cage mesh, finds vertices within a specified sphere, deforms those vertices, and then applies the deformed mesh to the WrapDeformer.  This process allows for dynamic modification of the mesh while maintaining skinning and FACS data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/in-experience-creation.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function deformBodyPart(\n\tmeshPart: MeshPart,\n\tcontrolPointCenter: Vector3,\n\tcontrolPointRadius: number,\n\tcontrolPointDeformation: Vector3\n)\n\tlocal wrapTarget = meshPart:FindFirstChildWhichIsA(\"WrapTarget\")\n\tlocal cageMeshId = wrapTarget.CageMeshId\n\tlocal wrapDeformer = Instance.new(\"WrapDeformer\")\n\twrapDeformer.Parent = meshPart\n\n\tlocal cageEditableMesh = AssetService:CreateEditableMeshAsync(cageMeshId)\n\tlocal verticesWithinSphere =\n\t\tcageEditableMesh:FindVerticesWithinSphere(controlPointCenter, controlPointRadius)\n\tfor _, vertexId in verticesWithinSphere do\n\t\tlocal vertexPosition = cageEditableMesh:GetPosition(vertexId)\n\t\tcageEditableMesh:SetPosition(vertexId, vertexPosition + controlPointDeformation)\n\tend\n\n\twrapDeformer:SetCageMeshContent(Content.fromObject(cageEditableMesh))\nend\n```\n\n----------------------------------------\n\nTITLE: Updating ServerLaserManager damageCharacter Function in Lua\nDESCRIPTION: Modified damageCharacter function to accept the hitPosition parameter from the client. This is the first step in implementing server-side validation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nfunction damageCharacter(playerFired, characterToDamage, hitPosition)\n\tlocal humanoid = characterToDamage:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\t-- Remove health from character\n\t\thumanoid.Health -= LASER_DAMAGE\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Player Manager Module Script in Lua\nDESCRIPTION: Comprehensive module for managing players, including joining, preparation, and sending to match.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Player Variables\nlocal activePlayers = {}\nlocal playerWeapon = ServerStorage.Weapon\n\n-- Local Functions\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\nend\n\n-- Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tprint(\"Sending players to match\")\n\n\tlocal arenaSpawns = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers, whichPlayer)\n\t\tlocal spawnLocation = table.remove(arenaSpawns, 1)\n\t\tpreparePlayer(whichPlayer, spawnLocation)\n\tend\nend\n\n--events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Syncing Packages with Rojo\nDESCRIPTION: This JSON snippet configures a Roblox project's file structure to include downloaded packages from Wally within the Rojo project. It ensures packages are available across scripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/external-tools.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"name\": \"my-new-experience\",\n  \"tree\": {\n    \"$className\": \"DataModel\",\n\n    \"ReplicatedStorage\": {\n      \"Shared\": {\n        \"$path\": \"src/shared\"\n      },\n      \"Packages\": {\n        \"$path\": \"Packages\"\n      }\n    },\n\n    ...\n\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Item Ownership with Node.js Inventory API\nDESCRIPTION: This Node.js snippet demonstrates how to connect to the Roblox Inventory API to verify if a user owns specified item IDs. It requires the 'https' module and an API key for authentication. The snippet specifies userId and assets to check through the URL. It returns a status code and parses JSON data from the response body to display ownership details.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/inventory.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst https = require('node:https');\n\nconst userId = 11111111111;\nconst hostname = 'apis.roblox.com';\nconst path = `/cloud/v2/users/${userId}/inventory-items`;\nconst params = '?filter=assetIds=62724852,1028595,4773588762';\n\nconst url = 'https://' + hostname + path + params;\n\nconst apiKey = '123456789012345678901234567890123456789012345678';\n\nconst options = {\n  headers: {\n    'x-api-key': `${apiKey}`,\n  },\n};\n\nhttps\n  .get(url, options, (response) => {\n    console.log('statusCode:', response.statusCode);\n    let data = '';\n    response.on('data', (d) => {\n      data += d;\n    });\n    response.on('end', () => {\n      if (response.statusCode === 200) {\n        const jsonData = JSON.parse(data);\n        console.log('Response Data:', JSON.stringify(jsonData, null, 2));\n      } else {\n        console.error('Error:', response.statusCode, response.statusMessage);\n      }\n    });\n  })\n  .on('error', (e) => {\n    console.error(e);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Blaster Cooldown in Roblox Lua\nDESCRIPTION: This snippet manages the cooldown period between blaster actions by leveraging the 'secondsBetweenBlasts' attribute from the blaster configuration. It ensures synchronous cooldowns between the server and the client and regulates when a player can perform a blast again after the cooldown period. Dependencies include access to player and blaster configuration data, and the output is a timely reset of blaster capabilities.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal blasterConfig = getBlasterConfig(player)\nlocal secondsBetweenBlasts = blasterConfig:GetAttribute(\"secondsBetweenBlasts\")\n\ntask.delay(secondsBetweenBlasts, function()\n    local currentState = player:GetAttribute(PlayerAttribute.blasterStateServer)\n    if currentState == BlasterState.Blasting then\n        player:SetAttribute(PlayerAttribute.blasterStateServer, BlasterState.Ready)\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Playing Looping Background Music in Roblox\nDESCRIPTION: This Lua script plays looping background music as soon as a player joins the experience. It references the parent AudioPlayer object and calls its Play method.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-2D-audio.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal audioPlayer = script.Parent\naudioPlayer:Play()\n```\n\n----------------------------------------\n\nTITLE: Getting Waypoints in Roblox Pathfinding with Lua\nDESCRIPTION: This Lua script sets up character pathfinding by computing a path and extracting waypoints using the PathfindingService in Roblox. It requires the PathfindingService, Players, RunService, and Workspace services. The script initializes pathfinding and retrieves waypoints which will later be used for character navigation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath()\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal TEST_DESTINATION = Vector3.new(100, 0, 100)\n\nlocal waypoints\nlocal nextWaypointIndex\nlocal reachedConnection\nlocal blockedConnection\n\nlocal function followPath(destination)\n\t-- Compute the path\n\tlocal success, errorMessage = pcall(function()\n\t\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\n\tend)\n\n\tif success and path.Status == Enum.PathStatus.Success then\n\t\t-- Get the path waypoints\n\t\twaypoints = path:GetWaypoints()\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Player State Changes in PlayerStateHandler\nDESCRIPTION: This function in the PlayerStateHandler script manages different player states by calling appropriate functions based on the new state. It handles states like selecting a blaster, playing, tagged out, and in lobby.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onPlayerStateChanged(newPlayerState: string)\n\tif newPlayerState == PlayerState.SelectingBlaster then\n\t\tonSelectingBlaster()\n\telseif newPlayerState == PlayerState.Playing then\n\t\tonPlaying()\n\telseif newPlayerState == PlayerState.TaggedOut then\n\t\tonTaggedOut()\n\telseif newPlayerState == PlayerState.InLobby then\n\t\tonInLobby()\n\telse\n\t\twarn(`Invalid player state ({newPlayerState})`)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Callback Connection - Script (RemoteFunction)\nDESCRIPTION: This Script defines a callback function for a RemoteFunction. It retrieves the RemoteFunction instance from ReplicatedStorage and defines a function that creates a new Part in the Workspace with the specified color and position. This function is assigned to the OnServerInvoke event of the RemoteFunction, which is triggered when a client invokes the function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Get reference to remote function instance\nlocal remoteFunction = ReplicatedStorage:FindFirstChildOfClass(\"RemoteFunction\")\n\n-- Callback function\nlocal function createPart(player, partColor, partPosition)\n\tprint(player.Name .. \" requested a new part\")\n\tlocal newPart = Instance.new(\"Part\")\n\tnewPart.Color = partColor\n\tnewPart.Position = partPosition\n\tnewPart.Parent = Workspace\n\treturn newPart\nend\n\n-- Set function as remote function's callback\nremoteFunction.OnServerInvoke = createPart\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a Hash Map - Lua\nDESCRIPTION: This snippet shows how to add or overwrite a key-value pair in the hash map. It handles asynchronous execution using pcall to manage potential errors.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/hash-map.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn hashMap:SetAsync(\"User_1234\", 1000, 30)\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Checking and Updating Item Harvest State in Lua\nDESCRIPTION: This snippet checks if an item can be harvested and updates the player's inventory accordingly. It sets the `canHarvest` value to false once an item is harvested to prevent multiple harvests. Dependencies include a proper game setup in Roblox Studio with defined player stats and items.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nif canHarvest then\n  if canHarvest.Value == true and playerItems.Value < playerSpaces.Value then\n    playerItems.Value += 1\n    canHarvest.Value = false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using RewardManager Module in a Treasure Chest Script\nDESCRIPTION: Demonstrates how to use the RewardManager module in a separate script for a treasure chest in Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Load module script\nlocal RewardManager = require(ServerStorage.RewardManager)\n\n--Calls function from module script\nlocal coins = RewardManager.getCoinReward(\"easy\")\nprint(\"Should award \" .. coins .. \" coins\")\n```\n\n----------------------------------------\n\nTITLE: Sending Messages in a Text Channel\nDESCRIPTION: This snippet exemplifies the usage of the SendAsync method from the TextChannel class, which is responsible for sending messages from clients. It handles both chat commands and regular messages, initiating the necessary events based on the message type.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/in-experience-text-chat.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n// Send a chat message\nClass.TextChannel:SendAsync(message);\n// Check if it's a command and trigger accordingly\nif isCommand then\n\tClass.TextChatCommand.Triggered:Fire();\n} else {\n\t// Fire SendingMessage event\n\tClass.TextChatService.SendingMessage:Fire(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Language Changes in ROBLOX Lua\nDESCRIPTION: This Lua script listens for changes in a player's language settings to update translations in real-time. It uses GetPropertyChangedSignal to react to changes in the LocaleID property. Dependencies include Players and LocalizationService. It dynamically updates localized assets by remapping translations when a language switch is detected, with output displayed to console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/localize-with-scripting.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Players = game:GetService(\"Players\")\nlocal player = Players.LocalPlayer\n\n-- If GetTranslatorForPlayerAsync succeeds, it will return a Translator for player's current locale\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForPlayerAsync(player)\nend)\n\n-- Function that gets called when change in player's locale ID is detected\nlocal function OnLocaleIdChanged()\n\tprint(\"Translator has changed to: \" .. translator.LocaleId)\n\t-- You should re-translate any assets translated with Localization APIs to the player's new language here\nend\n\n-- Check if GetTranslatorForPlayerAsync succeeded\nif res then\n\t-- If succeeded, translate assets here using translator\n\t-- Listen for a change in player's locale ID\n\ttranslator:GetPropertyChangedSignal(\"LocaleId\"):Connect(OnLocaleIdChanged)\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Checking User Eligibility for Ads with PolicyService in Lua\nDESCRIPTION: This script uses PolicyService to check if a user is eligible to see ads. If the AreAdsAllowed property returns false, the script kicks the user from the experience with a message informing them they are ineligible to access the content.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/comply-with-advertising-standards.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal PolicyService = game:GetService(\"PolicyService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal player = Players.LocalPlayer\n\n\n-- Get the policy info for the user\n\tlocal success, result = pcall(PolicyService.GetPolicyInfoForPlayerAsync, PolicyService, player)\n\tif success and result then\n\t\tif not result.AreAdsAllowed then\n\n\t\t\t-- Remove ineligible user from accessing the experience\n\t\t\tplayer:Kick(\"You are ineligible to access the experience.\")\n\t\tend\n\telse\n\t\tprint(\"Failed to get policy for player\", player.Name, \"Exception:\", result)\n\tend\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Variable Within Function in Luau\nDESCRIPTION: This snippet shows how a local variable 'testVar' is declared within function 'testFunc()', ensuring that it is inaccessible outside of its defined scope. The function correctly prints the variable's value, while the external print statement results in 'nil'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/scope.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function testFunc()  -- local scope\n\tlocal testVar = 64  -- local scope\n\tprint(testVar) -- 64\nend\n\ntestFunc()\n\nprint(testVar) -- nil\n```\n\n----------------------------------------\n\nTITLE: Enabling Avatar Context Menu with SetCore\nDESCRIPTION: This snippet demonstrates how to enable the Avatar Context Menu (ACM) in a Roblox experience using `StarterGui:SetCore()` in a `LocalScript`. The ACM is enabled by setting the \"AvatarContextMenuEnabled\" core GUI option to true.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-context-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Run in a LocalScript, ideally within \"StarterPlayerScripts\"\nlocal StarterGui = game:GetService(\"StarterGui\")\nStarterGui:SetCore(\"AvatarContextMenuEnabled\", true)\n```\n\n----------------------------------------\n\nTITLE: Client-Side Chat Tag Display\nDESCRIPTION: LocalScript that handles the display of VIP tags in the chat window by modifying incoming chat messages. Checks the IsVIP attribute set by the server script to determine if a VIP tag should be added.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/group-chat-tags.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nTextChatService.OnIncomingMessage = function(message: TextChatMessage)\n\tlocal textSource = message.TextSource\n\tif textSource then\n\t\tlocal player = Players:GetPlayerByUserId(textSource.UserId)\n\t\tif player then\n\t\t\tif player:GetAttribute(\"IsVIP\") == true then\n\t\t\t\tlocal overrideProperties = Instance.new(\"TextChatMessageProperties\")\n\t\t\t\toverrideProperties.PrefixText = \"[VIP] \" .. message.PrefixText\n\t\t\t\treturn overrideProperties\n\t\t\tend\n\t\tend\n\tend\n\n\treturn nil\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Laser Position and Distance in Lua\nDESCRIPTION: Calculates the start position, distance, and CFrame for the laser beam based on tool handle and end position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nfunction LaserRenderer.createLaser(toolHandle, endPosition)\n\tlocal startPosition = toolHandle.Position\n\n\tlocal laserDistance = (startPosition - endPosition).Magnitude\n\tlocal laserCFrame = CFrame.lookAt(startPosition, endPosition) * CFrame.new(0, 0, -laserDistance / 2)\nend\n```\n\n----------------------------------------\n\nTITLE: Restore Player Health Using Roblox Lua\nDESCRIPTION: This snippet modifies the `onTouchHealthPickup` function to detect the player's character and humanoid upon touching a health pickup, and sets the humanoid's health to `MAX_HEALTH`. Dependencies include player's character object structure in Roblox. Expects player character parts and outputs full health restoration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MAX_HEALTH = 100\n\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\thumanoid.Health = MAX_HEALTH\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Using task.delay with Time Tracking in Roblox\nDESCRIPTION: Illustrates how to use task.delay() to schedule code execution after a specific time delay, including calculation of actual elapsed time.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scheduler.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ntask.delay(2, function(scheduledTime)\n\tprint(os.clock() - scheduledTime) --> 2.038702\nend, os.clock())\n```\n\n----------------------------------------\n\nTITLE: Numeric For Loop in Luau\nDESCRIPTION: This code demonstrates basic numeric `for` loops in Luau. It shows how to iterate with a start value, end value, and optional increment. The increment defaults to 1.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfor counter = 1, 3 do\n\tprint(counter)\nend\n\n--[[ Resulting output:\n1\n2\n3\n]]\n\nfor counter = 1, 6, 2 do\n\tprint(counter)\nend\n\n--[[ Resulting output:\n1\n3\n5\n]]\n\nfor counter = 2, 0, -0.5 do\n\tprint(counter)\nend\n\n--[[ Resulting output:\n2\n1.5\n1\n0.5\n0\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Truss Climbing Path in Roblox\nDESCRIPTION: This script snippet focuses on enabling climbing paths by setting the AgentCanClimb parameter to true. This is particularly useful when agents need to navigate vertical structures like TrussParts in Roblox. The Costs table allows adding a custom cost for climbing paths, influencing the agent's route decisions. The code requires the 'PathfindingService' from Roblox and adjusts pathfinding algorithms to include climbing as an option.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\\n\\nlocal path = PathfindingService:CreatePath({\\n\\tAgentCanClimb = true,\\n\\tCosts = {\\n\\t\\tClimb = 2  -- Cost of the climbing path; default is 1\\n\\t}\\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Blaster Selection State in Roblox Lua\nDESCRIPTION: Function that configures the game state when a player is selecting a blaster. It enables camera controls but disables movement, shows the blaster selection UI, and sets the blaster state to disabled.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onSelectingBlaster()\n\t-- Enable the camera so players can look around while selecting a blaster\n\ttogglePlayerCamera(true)\n\ttogglePlayerMovement(false)\n\tsetGuiExclusivelyEnabled(playerGui.PickABlasterGui)\n\n\t-- Disable blaster while selecting a blaster\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Gumdrop Collection and Door Audio System in Lua\nDESCRIPTION: A server-side script that handles gumdrop collection mechanics, player data tracking, and triggers 3D positional audio when players collect all three gumdrops. The script manages the door animation and audio feedback system using AudioPlayer and AudioEmitter objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-3D-audio.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal Leaderboard = require(ServerStorage.Leaderboard)\nlocal PlayerData = require(ServerStorage.PlayerData)\n\nlocal gumdropsFolder = Workspace.Gumdrops\nlocal gumdrops = gumdropsFolder:GetChildren()\n\nlocal GUMDROP_KEY_NAME = PlayerData.GUMDROP_KEY_NAME\nlocal GUMDROP_AMOUNT_TO_ADD = 1\n\nlocal function updatePlayerGumdrops(player, updateFunction)\n    local newGumdropAmount = PlayerData.updateValue(player, GUMDROP_KEY_NAME, updateFunction)\n    Leaderboard.setStat(player, GUMDROP_KEY_NAME, newGumdropAmount)\n    if newGumdropAmount >= 3 then\n        local audioPlayer = Workspace.Door.AudioPlayer\n        audioPlayer:Play()\n        local doorPart = Workspace.Door\n        local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear)\n        local tween = TweenService:Create(doorPart, tweenInfo, {Position = doorPart.Position + Vector3.new(0, -15, 0)})\n        tween:Play()\n    end\nend\n\nlocal function onGumdropTouched(otherPart, gumdrop)\n    if gumdrop:GetAttribute(\"Enabled\") then\n        local character = otherPart.Parent\n        local player = Players:GetPlayerFromCharacter(character)\n        if player then\n            local audioPlayer = gumdrop.AudioPlayer\n            audioPlayer:Play()\n            gumdrop.Transparency = 1\n            gumdrop:SetAttribute(\"Enabled\", false)\n            updatePlayerGumdrops(player, function(oldGumdropAmount)\n                oldGumdropAmount = oldGumdropAmount or 0\n                return oldGumdropAmount + GUMDROP_AMOUNT_TO_ADD\n            end)\n            print(\"Player collected gumdrop\")\n        end\n    end\nend\n\nfor _, gumdrop in gumdrops do\n    gumdrop:SetAttribute(\"Enabled\", true)\n    gumdrop.Touched:Connect(function(otherPart)\n        onGumdropTouched(otherPart, gumdrop)\n    end)\nend\n```\n\n----------------------------------------\n\nTITLE: Filling Block Volume in Roblox Terrain\nDESCRIPTION: This code snippet demonstrates how to fill a cubic volume with grass material in the Roblox terrain using the FillBlock method. It requires an existing Terrain object and appropriate CFrame and Vector3 parameters to define the location and size of the block.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/terrain.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nworkspace.Terrain:FillBlock(CFrame.new(0, 0, 0), Vector3.new(4, 4, 4), Enum.Material.Grass)\n```\n\n----------------------------------------\n\nTITLE: Handling Playing State in Roblox Lua\nDESCRIPTION: Function that configures the game state when a player is actively playing. It enables player movement, shows the HUD, sets the blaster to ready state, and schedules the force field destruction.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlaying()\n\t-- Enable player movement after picking a blaster\n\ttogglePlayerMovement(true)\n\tsetGuiExclusivelyEnabled(playerGui.HUDGui)\n\n\t-- Enable blaster while playing\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Ready)\n\n\t-- Schedule the destroy force field logic when the player begins playing\n\tscheduleDestroyForceField()\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Variadic Functions in Luau\nDESCRIPTION: This snippet shows how to define a variadic function that accepts a variable number of arguments. It uses the `...` syntax to gather extra arguments into a table and processes them inside the function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function variadic(named, ...)\n\tlocal arguments = {...} -- pack the extra arguments into a table\n\tprint(\"Named argument =\", named)\n\tfor i, value in arguments do\n\t\tprint(\"Input No.\", i, \"=\", value)\n\tend\nend\n\nvariadic(10, \"Hi\", 20, \"Variadic Function\")\n--[[ Resulting output:\nNamed argument = 10\nInput No. 1 = Hi\nInput No. 2 = 20\nInput No. 3 = Variadic Function\n]]\n```\n\n----------------------------------------\n\nTITLE: Adding prepareGame Function to MatchManager (Lua)\nDESCRIPTION: This snippet adds a `prepareGame()` function to the MatchManager module. This function, when called, will initiate the game by transitioning players into the match. Currently, it only prints a message to the console, but it will later be expanded to include more complex logic. No parameters are required.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\nfunction MatchManager.prepareGame()\n\tprint(\"Game starting!\")\nend\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Algorithms in Lua\nDESCRIPTION: Shows how to combine multiple algorithms by creating a getting dressed simulation with separate functions for picking and putting on clothes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/coding-concept-algorithms.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- First algorithm for picking clothes\nlocal function pickClothes()\n    pick top clothing\n    pick bottom clothing\n    pick Socks\n    pick Shoes\nend\n\n-- Second algorithm for putting clothes on\n\nlocal function putOnClothes()\n    put on top clothing\n    put on bottom clothing\n    put on socks\n    put on shoes\nend\n\n-- Main algorithm, calls pickClothes()and putOnClothes()\nlocal function getDressed()\n    pickClothes()\n    putOnClothes()\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Proximity Chat in Roblox with TextChatService\nDESCRIPTION: Server-side script that configures a proximity-based chat system. It uses TextChatService to filter messages based on the physical distance between players in the game world. The script only delivers messages to players within 50 units of the sender.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/proximity-chat.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Get the chat channel for proximity-based chat\n-- You can replace this general channel with a dedicated channel\nlocal generalChannel: TextChannel = TextChatService:WaitForChild(\"TextChannels\").RBXGeneral\n\n-- Function to get the position of a user's character\nlocal function getPositionFromUserId(userId: number)\n\t-- Get the player associated with the given user ID\n\tlocal targetPlayer = Players:GetPlayerByUserId(userId)\n\n\t-- If the player exists, get their character's position\n\tif targetPlayer then\n\t\tlocal targetCharacter = targetPlayer.Character\n\t\tif targetCharacter then\n\t\t\treturn targetCharacter:GetPivot().Position\n\t\tend\n\tend\n\n\t-- Return a default position if the player or character cannot be found\n\treturn Vector3.zero\nend\n\n-- Set the callback for the general channel to control message delivery\ngeneralChannel.ShouldDeliverCallback = function(textChatMessage: TextChatMessage, targetTextSource: TextSource)\n\t-- Get the positions of the message sender and target\n\tlocal sourcePos = getPositionFromUserId(textChatMessage.TextSource.UserId)\n\tlocal targetPos = getPositionFromUserId(targetTextSource.UserId)\n\n\t-- Deliver message if distance between sender and target is less than 50 units\n\treturn (targetPos - sourcePos).Magnitude < 50\nend\n```\n\n----------------------------------------\n\nTITLE: Getting an Empty Queue in Luau\nDESCRIPTION: Retrieves a queue instance from the MemoryStoreService using a specified name for access within the experience. The invisibility timeout, which prevents duplicated processing, is optional and defaults to 30 seconds if not specified.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/queue.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal queue = MemoryStoreService:GetQueue(\"Queue1\")\n```\n\n----------------------------------------\n\nTITLE: Model Transformation Methods in Lua\nDESCRIPTION: Various Lua methods for programmatically moving, translating, and transforming Model objects in a Roblox experience\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/models.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- MoveTo(): Move model to specific position\nmodel:MoveTo(Vector3.new(x, y, z))\n\n-- PivotTo(): Transform model at specified CFrame\nmodel:PivotTo(CFrame.new(position))\n\n-- TranslateBy(): Shift model by offset\nmodel:TranslateBy(Vector3.new(x, y, z))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Collectable Sounds in Roblox\nDESCRIPTION: This Lua script sets up a system for playing sounds when a player touches collectable objects. It iterates through objects in the workspace and connects a touch event to each one.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/in-game-sounds.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal pickupObjects = workspace.Collectables.Objects\nlocal objectsArray = pickupObjects:GetChildren()\n\nlocal function partTouched(otherPart, objectPart)\n\tlocal whichCharacter = otherPart.Parent\n\tlocal humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid and objectPart.CanCollide == true then\n\n\tend\nend\n\n-- Binds every object part to the touch function so it works on all parts\nfor objectIndex = 1, #objectsArray do\n\tlocal objectPart = objectsArray[objectIndex]\n\tobjectPart.Touched:Connect(function(otherPart)\n\t\tpartTouched(otherPart, objectPart)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Checking State of Gamepad Inputs\nDESCRIPTION: This snippet checks the current state of all buttons and sticks on Gamepad1 and reacts when a specific button is pressed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal leftFoot = character:WaitForChild(\"LeftFoot\")\n\n-- When left foot comes into contact with something, check the gamepad input state\nleftFoot.Touched:Connect(function(hit)\n\tlocal state = UserInputService:GetGamepadState(Enum.UserInputType.Gamepad1)\n\tfor _, input in state do\n\t\t-- If the ButtonR2 is currently held, print out a message\n\t\tif input.KeyCode == Enum.KeyCode.ButtonR2 and input.UserInputState == Enum.UserInputState.Begin then\n\t\t\tprint(\"Character's left foot touched something while holding right trigger\")\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables for Timed Bridge in Lua\nDESCRIPTION: Sets up the necessary variables for the timed bridge script, including references to game objects and the timer duration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal bridge = script.Parent\nlocal button = workspace.ButtonBridge\nlocal timerText = workspace.TimerDisplay.SurfaceGui.TextLabel\n\n-- How long the bridge will stay solid\nlocal timerDuration = 5\n```\n\n----------------------------------------\n\nTITLE: Assigning Pass Privileges in Lua\nDESCRIPTION: This snippet assigns privileges to a player who has just joined the experience if they own a specific game pass. It uses an event to check the pass ownership during the player's entry.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/game-passes.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Replace the placeholder ID with your pass ID\nlocal passID = 0000000\n\nlocal function onPlayerAdded(player)\n\tlocal hasPass = false\n\n\t-- Check if user already owns the pass\n\tlocal success, message = pcall(function()\n\t\thasPass = MarketplaceService:UserOwnsGamePassAsync(player.UserId, passID)\n\tend)\n\n\tif not success then\n\t\t-- Issue a warning and exit the function\n\t\twarn(\"Error while checking if player has pass: \" .. tostring(message))\n\t\treturn\n\tend\n\n\tif hasPass then\n\t\t-- Assign user the ability or bonus related to the pass\n\t\tprint(player.Name .. \" owns the Pass with ID \" .. passID)\n\tend\nend\n\n-- Connect PlayerAdded events to the function\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Repeat-Until Loop in Luau\nDESCRIPTION: This code snippet shows how to use a `repeat`—`until` loop in Luau. The loop executes at least once, and then repeats until the `currentGoblinCount` is equal to 25. The loop increments the goblin count, prints the current count, and then checks the condition.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal currentGoblinCount = 18\n\n-- Spawn goblins up to a maximum of 25 in the game\nrepeat\n\tspawnGoblin()\n\tcurrentGoblinCount += 1\n\tprint(\"Current goblin count: \" .. currentGoblinCount)\nuntil currentGoblinCount == 25\n\nprint(\"Goblins repopulated!\")\n\n--[[ Resulting output:\nCurrent goblin count: 19\nCurrent goblin count: 20\nCurrent goblin count: 21\nCurrent goblin count: 22\nCurrent goblin count: 23\nCurrent goblin count: 24\nCurrent goblin count: 25\nGoblins repopulated!\n]]\n```\n\n----------------------------------------\n\nTITLE: Complete For Loop Structure in Luau\nDESCRIPTION: Demonstrates the complete structure of a for loop with the do and end keywords, creating the code block where statements to be repeated are placed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0, -1 do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Using 'and' Logical Operator in Luau\nDESCRIPTION: Demonstrates the use of the 'and' logical operator in Luau, which returns the first operand if it evaluates to 'true'; otherwise, it returns the second operand. This is useful for combining multiple conditions in control structures like 'if' statements or 'while' loops. The snippet shows various executions and outputs of 'and' combinations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/operators.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nprint(4 and 5) -- 5\nprint(nil and 12) -- nil\nprint(false and 12) -- false\nprint(false and true) -- false\nprint(false and false) -- false\nprint(true and false) -- false\nprint(true and true) -- true\n```\n\n----------------------------------------\n\nTITLE: Implementing Team-Based Voice Chat in Roblox\nDESCRIPTION: This Lua script sets up team-based voice chat in a Roblox experience. It creates two teams, assigns players to teams, and configures voice chat so that players can only hear teammates. The script handles player joining, team assignments, and updates voice chat settings dynamically.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-voice-chat.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Teams = game:GetService(\"Teams\")\nlocal Players = game:GetService(\"Players\")\n\nlocal redTeam = Instance.new(\"Team\", Teams)\nredTeam.TeamColor = BrickColor.new(\"Bright red\")\nredTeam.AutoAssignable = true\nredTeam.Name = \"Red Team\"\n\nlocal blueTeam = Instance.new(\"Team\", Teams)\nblueTeam.TeamColor = BrickColor.new(\"Bright blue\")\nblueTeam.AutoAssignable = true\nblueTeam.Name = \"Blue Team\"\n\nlocal function getUserIds(team : Team) : {number}\n\tlocal userIds = {}\n\tfor _, player : Player in team:GetPlayers() do\n\t\ttable.insert(userIds, player.UserId)\n\tend\n\treturn userIds\nend\n\nlocal function getDevices(team : Team) : {AudioDeviceInput}\n\tlocal devices = {}\n\tfor _, player : Player in team:GetPlayers() do\n\t\tlocal device : AudioDeviceInput = player:FindFirstChild(\"AudioDeviceInput\")\n\t\tif not device then\n\t\t\tcontinue\n\t\tend\n\t\ttable.insert(devices, device)\n\tend\n\treturn devices\nend\n\nlocal function updateTeam(team : Team)\n\tlocal users = getUserIds(team)\n\tfor _, device in getDevices(team) do\n\t\tdevice.AccessType = Enum.AccessModifierType.Allow\n\t\tdevice:SetUserIdAccessList(users)\n\tend\nend\n\nlocal function onDeviceAdded(device : AudioDeviceInput)\n\tlocal player : Player = device.Parent\n\tif player.Team then\n\t\tupdateTeam(player.Team)\n\tend\nend\n\nlocal function onPlayerAdded(player : Player)\n\tlocal device = player:FindFirstChild(\"AudioDeviceInput\")\n\tif device then\n\t\tonDeviceAdded(device)\n\tend\n\tplayer.ChildAdded:Connect(function(child)\n\t\tif child.Name == \"AudioDeviceInput\" then\n\t\t\tonDeviceAdded(child)\n\t\tend\n\tend)\nend\n\nupdateTeam(blueTeam)\nupdateTeam(redTeam)\n\nfor _, player in Players:GetPlayers() do\n\tonPlayerAdded(player)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nblueTeam.PlayerAdded:Connect(function() updateTeam(blueTeam) end)\nblueTeam.PlayerRemoved:Connect(function() updateTeam(blueTeam) end)\nredTeam.PlayerAdded:Connect(function() updateTeam(redTeam) end)\nredTeam.PlayerRemoved:Connect(function() updateTeam(redTeam) end)\n```\n\n----------------------------------------\n\nTITLE: Pathfinding Character Movement in Roblox\nDESCRIPTION: This Lua script uses PathfindingService to compute and execute movement along a path for a player's character in Roblox. It demonstrates path computation using ComputeAsync, detection of path blockages, and movement through waypoints. Essential services employed include PathfindingService, Players, and RunService. Inputs include a Vector3 destination, and the output results in the character's movement along the defined path.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\\nlocal Players = game:GetService(\"Players\")\\nlocal RunService = game:GetService(\"RunService\")\\nlocal Workspace = game:GetService(\"Workspace\")\\n\\nlocal path = PathfindingService:CreatePath()\\n\\nlocal player = Players.LocalPlayer\\nlocal character = player.Character\\nlocal humanoid = character:WaitForChild(\"Humanoid\")\\n\\nlocal TEST_DESTINATION = Vector3.new(100, 0, 100)\\n\\nlocal waypoints\\nlocal nextWaypointIndex\\nlocal reachedConnection\\nlocal blockedConnection\\n\\nlocal function followPath(destination)\\n\\t-- Compute the path\\n\\tlocal success, errorMessage = pcall(function()\\n\\t\\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\\n\\tend)\\n\\n\\tif success and path.Status == Enum.PathStatus.Success then\\n\\t\\t-- Get the path waypoints\\n\\t\\twaypoints = path:GetWaypoints()\\n\\n\\t\\t-- Detect if path becomes blocked\\n\\t\\tblockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)\\n\\t\\t\\t-- Check if the obstacle is further down the path\\n\\t\\t\\tif blockedWaypointIndex >= nextWaypointIndex then\\n\\t\\t\\t\\t-- Stop detecting path blockage until path is re-computed\\n\\t\\t\\t\\tblockedConnection:Disconnect()\\n\\t\\t\\t\\t-- Call function to re-compute new path\\n\\t\\t\\t\\tfollowPath(destination)\\n\\t\\t\\tend\\n\\t\\tend)\\n\\n\\t\\t-- Detect when movement to next waypoint is complete\\n\\t\\tif not reachedConnection then\\n\\t\\t\\treachedConnection = humanoid.MoveToFinished:Connect(function(reached)\\n\\t\\t\\t\\tif reached and nextWaypointIndex < #waypoints then\\n\\t\\t\\t\\t\\t-- Increase waypoint index and move to next waypoint\\n\\t\\t\\t\\t\\tnextWaypointIndex += 1\\n\\t\\t\\t\\t\\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\treachedConnection:Disconnect()\\n\\t\\t\\t\\t\\tblockedConnection:Disconnect()\\n\\t\\t\\t\\tend\\n\\t\\t\\tend)\\n\\t\\tend\\n\\n\\t\\t-- Initially move to second waypoint (first waypoint is path start; skip it)\\n\\t\\tnextWaypointIndex = 2\\n\\t\\thumanoid:MoveTo(waypoints[nextWaypointIndex].Position)\\n\\telse\\n\\t\\twarn(\"Path not computed!\", errorMessage)\\n\\tend\\nend\\n\\nfollowPath(TEST_DESTINATION)\n```\n\n----------------------------------------\n\nTITLE: Getting TeleportData on the Server in Lua\nDESCRIPTION: This snippet demonstrates how to retrieve teleport data on the server when a player joins after being teleported. It uses Player:GetJoinData() to access the teleport data.  The function connects to the PlayerAdded event.  The data is accessed from the TeleportData field of the join data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n    local joinData = player:GetJoinData()\n    local teleportData = joinData.TeleportData\n    local randomNumber = teleportData.randomNumber\n\n    print(player.Name .. \"joined with the number\" .. randomNumber)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Size Modification Chat Commands in Lua\nDESCRIPTION: Script that creates custom chat commands (/super and /mini) to modify a player's character size in Roblox. The implementation connects to a TextChatCommand's Triggered event and scales the character's size based on the command used.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/custom-text-chat-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal sizeCommand: TextChatCommand = TextChatService:WaitForChild(\"SizeCommand\")\n\nsizeCommand.Triggered:Connect(function(textSource, message)\n    local scaleMult = 1\n    local messageWords = string.split(message, \" \")\n    if messageWords[1] == \"/super\" then\n        scaleMult = 2\n    elseif messageWords[1] == \"/mini\" then\n        scaleMult = 0.5\n    end\n\n    local player = Players:GetPlayerByUserId(textSource.UserId)\n    if player then\n        local character = player.Character\n        if character then\n            local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n            if humanoid then\n                for _, child in humanoid:GetChildren() do\n                    if child:IsA(\"NumberValue\") then\n                        child.Value *= scaleMult\n                    end\n                end\n            end\n        end\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Player Attributes for Chat Customization\nDESCRIPTION: This snippet showcases how to set attributes on Player objects to define visual properties like NameColor and ChatColor for users, facilitating the customization of their chat messages in Class.TextChatService.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/in-experience-text-chat.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nPlayers.PlayerAdded:Connect(function(player)\n\tplayer:SetAttribute(\"NameColor\", Color3.fromRGB(255, 255, 55))\n\tplayer:SetAttribute(\"ChatColor\", Color3.fromRGB(212, 175, 55))\n\tplayer:SetAttribute(\"isYourTag\", true)\n\tplayer:SetAttribute(\"isOtherTag\", true)\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling Client-Side Lightning Effects in Roblox Lua\nDESCRIPTION: This code snippet evaluates client-side conditions to determine if lightning effects should be visible. It excludes effects based on player location or game state, then sets visuals and plays associated audio in templates synchronized with server-provided parameters. Inputs include randomized effect data from the server.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function LightningFunc(info)\n\t…\n\t-- no FX when indoors\n\tif inVolumesCheckerFunc:Invoke() then\n\t\treturn\n\tend\n\n\t-- no FX when not in the \"normal\" world\n\tif not gameStateInfoFunc:Invoke(\"IsInNormal\") then\n\t\treturn\n\tend\n\t…\n```\n\nLANGUAGE: lua\nCODE:\n```\nbeam.Texture = textures[info.textIdx]\n\nbeamPart.Position = Vector3.new(info.center.X + og_center.X, og_center.Y, info.center.Y + og_center.Z)\n\n-- Wipe\nbeam.Brightness = 10\nppCC.Brightness = maxPPBrightness\nppBloom.Intensity = 1.1\nbottom.Position = top.Position\n\ntweenBrightness:Play()\ntweenPPBrightness:Play()\ntweenPPBrightness:Play()\ntweenBottomPos:Play()\ntweenBrightness.Completed:Wait()\n\n-- audio\nif audioFolder and audioPart then\n\tif audioFolder.Value and audioPart.Value then\n\t\taudioUtils.PlayOneShot(audioObj, audioFolder.Value, audioPart.Value)\n\tend\nend\ntask.wait(info.waitTillFlashes)\n```\n\n----------------------------------------\n\nTITLE: Roblox Beam Properties Reference\nDESCRIPTION: Core properties that can be set on a Beam object to customize its appearance, including Texture, Color, Transparency, Width0, and Width1. The beam requires two Attachment objects to function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/effects/beams.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal beam = Instance.new(\"Beam\")\nbeam.Attachment0 = attachment0  -- First attachment point\nbeam.Attachment1 = attachment1  -- Second attachment point\nbeam.Texture = \"texture_id\"    -- Texture asset ID\nbeam.Color = ColorSequence.new(Color3.new(1, 0, 0), Color3.new(0, 0, 1))  -- Red to blue gradient\nbeam.Transparency = NumberSequence.new(0, 1)  -- Fade from visible to invisible\nbeam.Width0 = 0.5  -- Width at start point\nbeam.Width1 = 3    -- Width at end point\n```\n\n----------------------------------------\n\nTITLE: Toggling Mouse Icon Visibility in Roblox using Lua\nDESCRIPTION: This Lua code snippet alternates the visibility of the mouse icon every two seconds within a Roblox experience. Utilizing `UserInputService`, the script adjusts the `MouseIconEnabled` property to hide or show the icon in a repetitive loop. Dependencies include the `UserInputService`, and it must handle task waiting for toggling at intervals.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mouse-and-keyboard.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nwhile true do\n\ttask.wait(2)\n\tUserInputService.MouseIconEnabled = false\n\ttask.wait(2)\n\tUserInputService.MouseIconEnabled = true\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Chat Input Bar in Roblox Lua\nDESCRIPTION: Creates a custom chat input system using TextChatService. Handles message sending when Enter is pressed and includes error handling with pcall. Messages are sent through the RBXGeneral channel.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/simple-custom-frontend-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\n-- RBXGeneral is the default public channel\nlocal RBXGeneral = TextChatService:FindFirstChild(\"TextChannels\"):WaitForChild(\"RBXGeneral\")\n\nlocal textBox = script.Parent\ntextBox.FocusLost:Connect(function(enterPressed)\n\tlocal text = textBox.Text\n\tif enterPressed and #text > 0 then\n\t\tlocal success, response = pcall(function()\n\t\t\treturn RBXGeneral:SendAsync(textBox.Text)\n\t\tend)\n\n\t\tif not success then\n\t\t\tRBXGeneral:DisplaySystemMessage(\"Failed to send message\")\n\t\tend\n\n\t\t-- Users expect the input box to be cleared after sending a message\n\t\ttextBox.Text = \"\"\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays in Luau\nDESCRIPTION: This code snippet shows how to create an array in Luau using a table with sequential values. It requires no external dependencies, and illustrates how an array holds multiple types of values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Construct an array with three items\nlocal testArray = {\"A string\", 3.14159, true}\nprint(testArray)\n```\n\n----------------------------------------\n\nTITLE: Firing Bindable Event\nDESCRIPTION: Shows how to fire a BindableEvent and pass data to connected functions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\n-- Get reference to bindable event instance\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\n-- Fire bindable event\nbindableEvent:Fire(\"Round started!\")\n```\n\n----------------------------------------\n\nTITLE: Casting Types After Logical Guards in Luau\nDESCRIPTION: This Luau code shows how to handle optional parameters with type narrowing. Since Luau doesn't automatically narrow types after guard conditional statements, a new variable is created and explicitly cast to the desired type. This ensures type safety and allows further operations with the narrowed type.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/plant-reference-project.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n\"--!strict\\n\\nlocal function foo(optionalParameter: number?)\\n\\tif not optionalParameter then\\n\\t\\treturn\\n\\tend\\n\\n\\tprint(optionalParameter + 1)\\nend\"\n```\n\nLANGUAGE: lua\nCODE:\n```\n\"--!strict\\n\\nlocal function foo(optionalParameter: number?)\\n\\tif not optionalParameter then\\n\\t\\treturn\\n\\tend\\n\\n\\tlocal parameter = optionalParameter :: number\\n\\n\\tprint(parameter + 1)\\nend\"\n```\n\n----------------------------------------\n\nTITLE: Managing GUI Visibility in Roblox Scavenger Hunt\nDESCRIPTION: Demonstrates how to control ScreenGui and CoreGui visibility when modals appear in the scavenger hunt game. Includes logic for hiding and showing specific GUIs while maintaining a special always-visible GUI instance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal StarterGui = game:GetService(\"StarterGui\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\nlocal hiddenInstances = {}\n\n-- Create a screen GUI that will not be hidden\nlocal specialGuiInstance = Instance.new(\"ScreenGui\")\n-- Draw the screen GUI above the scavenger hunt GUI\nspecialGuiInstance.DisplayOrder = 1\nspecialGuiInstance.Parent = playerGui\n-- Add text label to the GUI\nlocal specialLabel = Instance.new(\"TextLabel\")\nspecialLabel.Size = UDim2.fromScale(1, 0.1)\nspecialLabel.Text = \"Remains visible when displaying modals\"\nspecialLabel.Font = Enum.Font.GothamMedium\nspecialLabel.TextSize = 24\nspecialLabel.Parent = specialGuiInstance\n\nScavengerHunt.hideOtherGuis(function()\n\t-- Hide all developer-defined screen GUIs\n\tlocal instances = playerGui:GetChildren()\n\tfor _, instance in instances do\n\t\tif instance:IsA(\"ScreenGui\") and not instance.Name == \"ScavengerHunt\" and instance.Enabled then\n\t\t\tinstance.Enabled = false\n\t\t\ttable.insert(hiddenInstances, instance)\n\t\tend\n\tend\n\t-- Hide specific core GUIs\n\tStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)\nend)\n\nScavengerHunt.showOtherGuis(function()\n\t-- Show all developer-defined screen GUIs that were hidden\n\tfor _, instance in hiddenInstances do\n\t\tinstance.Enabled = true\n\tend\n\thiddenInstances = {}\n\t-- Show specific core GUIs that were hidden\n\tStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)\nend)\n```\n\n----------------------------------------\n\nTITLE: Controlling Particle Emission Via Sound Time in Roblox Lua\nDESCRIPTION: A Lua script to display how a particle emitter is controlled by an audio's TimePosition property in Roblox. It requires the 'RunService' and 'Workspace' services and creates a neon-colored part with a particle emitter that activates within a specific time range of the sound's playback. Inputs: None directly. Outputs: Visual particle effects conditional on sound playback time.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/objects.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Create a new part\nlocal part = Instance.new(\"Part\")\npart.Anchored = true\npart.Color = Color3.new(0.75, 0.2, 0.5)\npart.Size = Vector3.new(2, 1, 2)\npart.Material = Enum.Material.Neon\npart.Position = Vector3.new(0, 4, 0)\npart.Parent = Workspace\n\n-- Create an attachment on the part\nlocal attachment = Instance.new(\"Attachment\")\nattachment.Position = Vector3.new(0, 0.5, 0)\nattachment.Parent = part\n\n-- Create a particle emitter on the attachment\nlocal emitter = Instance.new(\"ParticleEmitter\")\nemitter.Rate = 5\nemitter.Lifetime = NumberRange.new(1.5, 1.5)\nemitter.Texture = \"rbxassetid://1266170131\"\nemitter.Speed = NumberRange.new(1, 1)\nemitter.Size = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 6)}\nemitter.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(0.25, 0), NumberSequenceKeypoint.new(1, 1)}\nemitter.Orientation = Enum.ParticleOrientation.VelocityPerpendicular\nemitter.Parent = attachment\n\n-- Create a sound on the attachment\nlocal sound = Instance.new(\"Sound\")\nsound.SoundId = \"rbxassetid://1835405646\"\nsound.Parent = attachment\n\n-- Play the sound\nsound:Play()\n\n-- Start checking if emitter should be enabled\nRunService.Heartbeat:Connect(function()\n\t-- Enable the emitter within a time range of the audio; otherwise disable it\n\temitter.Enabled = sound.TimePosition >= 5 and sound.TimePosition < 20\nend)\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing with 'and' in Luau\nDESCRIPTION: Explains utilizing the 'and' operator to verify that multiple conditions hold true within control structures, specifically 'if' statements. If both conditions are 'true', the subsequent code block executes, effectively testing for necessary conditions to fulfill a specific scenario.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/operators.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal pasta = true\nlocal tomatoSauce = true\n\nif pasta == true and tomatoSauce == true then\n\tprint(\"We have spaghetti dinner\")\nelse\n\tprint(\"Something is missing...\")\nend\n-- Output: We have spaghetti dinner\n```\n\n----------------------------------------\n\nTITLE: Connecting to visibilityChanged Event in Lua\nDESCRIPTION: This code snippet demonstrates how to connect to the `visibilityChanged` event of the `FriendsLocator` module in a `LocalScript`.  It prints a message to the console indicating the visibility status of a locator icon for a specific player. This relies on `ReplicatedStorage` and the `FriendsLocator` module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/friends-locator.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nFriendsLocator.visibilityChanged:Connect(function(player, playerCFrame, isVisible)\n\tprint(\"Visibility of locator icon for\", player.DisplayName, \":\", isVisible)\nend)\n```\n\n----------------------------------------\n\nTITLE: Team Color Validation in Roblox Lua\nDESCRIPTION: Helper function that validates team colors by matching GUI team color attributes with Team.Color properties in the Teams service.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getTeamFromTeamColor(teamColor: Color3): Team?\n\tfor _, team in Teams:GetTeams() do\n\t\tif team.TeamColor == teamColor then\n\t\t\treturn team\n\t\tend\n\tend\n\n\treturn nil\n```\n\n----------------------------------------\n\nTITLE: Connecting to Friends Locator Events in Lua\nDESCRIPTION: This code shows how to connect to the 'clicked' event of the Friends Locator module and disable the default teleport behavior. It prints a message when a locator icon is clicked.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/friends-locator.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nFriendsLocator.configure({\n\tshowAllPlayers = RunService:IsStudio(), -- Allows for debugging in Studio\n\tteleportToFriend = false, -- Prevent teleport on icon click/tap\n})\n\nFriendsLocator.clicked:Connect(function(player, playerCFrame)\n\tprint(\"You clicked on locator icon for\", player.DisplayName)\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing TreasureManager Module in Lua\nDESCRIPTION: Creates the basic structure of a TreasureManager module script with local and module function sections.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TreasureManager = {}\n\n------------------ Local Functions\n\n------------------ Module Functions\n\nreturn TreasureManager\n```\n\n----------------------------------------\n\nTITLE: Firing Events with Tables Containing Metatables in Roblox (Lua)\nDESCRIPTION: This code demonstrates how to set up and fire an event with a table that has a metatable. It creates a 'Car' metatable with properties, applies it to a 'truck' object, and then fires the event with this object, illustrating the metatable loss issue.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\nlocal Car = {}\nCar.NumWheels = 4\nCar.__index = Car\n\nlocal truck = {}\ntruck.Name = \"MyTruck\"\nsetmetatable(truck, Car)\n\n-- Fire event with table including a metatable\nbindableEvent:Fire(truck)\n```\n\n----------------------------------------\n\nTITLE: Declaring and Printing Strings in Lua\nDESCRIPTION: This snippet demonstrates how to declare string variables using double and single quotes and print them. It shows multiline string declaration using double brackets for including both quote types without escaping them.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal string1 = \"Hello world!\"\nprint(string1)  --> Hello world!\n\nlocal string2 = 'Hello \"world\"!'\nprint(string2)  --> Hello \"world\"!\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal string1 = [[Hello\nworld!\nHello \"world\"!\nHello 'world'!]]\n\nprint(string1)\n--> Hello\n--> world!\n--> Hello \"world\"!\n--> Hello 'world'!\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal string1 = [=[Hello\n[[world!]]\n]=]\n\nprint(string1)\n--> Hello\n--> [[world!]]\n```\n\n----------------------------------------\n\nTITLE: Get Developer Product Information\nDESCRIPTION: This code snippet demonstrates how to retrieve information about a specific developer product using `MarketplaceService:GetProductInfo()`. It includes error handling using `pcall` and displays the product's name, price, and description if the retrieval is successful. Requires a valid developer product ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/developer-products.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\n\n-- Replace the placeholder ID with your developer product ID\nlocal productId = 000000\n\nlocal success, productInfo = pcall(function()\n\treturn MarketplaceService:GetProductInfo(productId, Enum.InfoType.Product)\nend)\n\nif success and productInfo then\n\t-- Display product information\n\t-- Replace the print statements with UI code to display the product\n  print(\"Developer Product Name: \" .. productInfo.Name)\n  print(\"Price in Robux: \" .. productInfo.PriceInRobux)\n  print(\"Description: \" .. productInfo.Description)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Should Deliver Callback for Message Filtering\nDESCRIPTION: This snippet outlines how to implement the ShouldDeliverCallback to determine if messages are eligible for delivery based on custom conditions. This allows tight integration with gameplay mechanics like proximity-based chatting.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/in-experience-text-chat.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n// Define the ShouldDeliverCallback\nClass.TextChannel.ShouldDeliverCallback = function(textSource)\n\t// Custom logic here to check if message should be delivered\n\treturn true; // Sample logic\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Player Team Icon in Roblox Lua\nDESCRIPTION: This function sets the player's team icon in the GUI based on the player's current team color. It reacts to changes in the player's team.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/create-teams.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setPlayerTeamIcon(gui: ScreenGui)\\n\\tfor _, teamColorIcon in gui.PlayerDisplay.TeamIcons:GetChildren() do\\n\\t\\tlocal iconTeamColor = teamColorIcon:GetAttribute(GuiAttribute.teamColor)\\n\\t\\tteamColorIcon.Visible = localPlayer.TeamColor == iconTeamColor\\n\\tend\\nend\\n\\nlocal function startSyncingTeamColor(gui: ScreenGui)\\n\\tsetPlayerTeamIcon(gui)\\n\\tlocalPlayer:GetPropertyChangedSignal(\"Team\"):Connect(function()\\n\\t\\tsetPlayerTeamIcon(gui)\\n\\tend)\\nend\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Methods in Luau\nDESCRIPTION: This snippet explains how to use methods associated with Roblox objects, using both dot and colon notations. It demonstrates how a method can automatically pass the table instance as the first argument using colon notation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Destroying a part with dot notation (function)\nlocal firstPart = Instance.new(\"Part\")\nfirstPart.Parent = Workspace\nprint(firstPart.Parent) -- Workspace\nfirstPart.Destroy(firstPart)\nprint(firstPart.Parent) -- nil\n\n-- Destroying a part with colon notation (method)\nlocal secondPart = Instance.new(\"Part\")\nsecondPart.Parent = Workspace\nprint(secondPart.Parent) -- Workspace\nsecondPart:Destroy()\nprint(secondPart.Parent) -- nil\n```\n\n----------------------------------------\n\nTITLE: Unioning Parts Asynchronously in Roblox\nDESCRIPTION: The Lua snippet demonstrates the usage of the UnionAsync() method on a BasePart to combine multiple BaseParts into a single UnionOperation. This operation must be invoked on a BasePart with an array of parts to union. The resulting union is repositioned and parented to the workspace. The original parts are subsequently destroyed. This method is asynchronous and hence might impact performance, especially with repeated quick successions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/solid-modeling.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal mainPart = Workspace.Part1\nlocal otherParts = {Workspace.Part2, Workspace.Part3, Workspace.Part4}\n\n-- Perform union operation\nlocal success, newUnion = pcall(function()\n\treturn mainPart:UnionAsync(otherParts)\nend)\n\n-- If operation succeeds, position it at the same location and parent it to the workspace\nif success and newUnion then\n\tnewUnion.Position = mainPart.Position\n\tnewUnion.Parent = Workspace\nend\n\n-- Destroy original parts which remain intact after operation\nmainPart:Destroy()\nfor _, part in otherParts do\n\tpart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in Luau Functions\nDESCRIPTION: This snippet shows how to define a Luau function that takes two parameters. It illustrates how functions ignore extra parameters and pass nil when fewer parameters are provided. The function, `addNumbers`, simply adds two numbers and prints the result.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- This function has two parameters: num1 and num2\nlocal function addNumbers(num1, num2)\n\tprint(num1 + num2)\nend\n\naddNumbers(2, 3) -- 5\naddNumbers(5, 6, 7) -- 11\naddNumbers(9) -- attempt to perform arithmetic (add) on number and nil\n```\n\n----------------------------------------\n\nTITLE: Constant Value Formula for Server Numerical Signal\nDESCRIPTION: Calculates a score based on the difference between a server's numerical attribute and a constant value. The score approaches 1 as the difference approaches the max_relevant_difference.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal diff = math.abs(server_{attribute_name} - constant_value)\nlocal score = math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Tracking Onboarding Steps in Roblox Lua\nDESCRIPTION: Demonstrates logging sequential steps in a user's onboarding journey using AnalyticsService to track progression through different stages of a game experience\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/funnel-events.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\n-- Log the first step of the FTUE\nAnalyticsService:LogOnboardingFunnelStepEvent(\n    player,\n    1, -- Step number\n    \"In Farm\" -- Step name\n)\n\n-- Log the second step\nAnalyticsService:LogOnboardingFunnelStepEvent(\n    player,\n    2, -- Step number\n    \"Plant Seed\" -- Step name\n)\n```\n\n----------------------------------------\n\nTITLE: Creating getKey Module Function in Lua\nDESCRIPTION: Defines a getKey function in the TreasureManager module to handle key pickup and destruction.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n\tkeyPart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Player Lifecycle and Coin Reset in Roblox Lua\nDESCRIPTION: This script handles player lifecycle events including joining, respawning, and leaving the game. It resets a player's coin count to zero when they join or die, and cleans up player data when they leave the experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/create-player-hazards.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerAdded(player)\n\t-- Reset player coins to 0\n\tupdatePlayerCoins(player, function(_)\n\t\treturn 0\n\tend)\n\n\tplayer.CharacterAdded:Connect(function(character)\n\t\t-- WaitForChild would stop the player loop, so below should be done in a separate thread\n\t\ttask.spawn(function()\n\t\t\t-- When a player dies\n\t\t\tcharacter:WaitForChild(\"Humanoid\").Died:Connect(function()\n\t\t\t\t-- Reset player coins to 0\n\t\t\t\tupdatePlayerCoins(player, function(_)\n\t\t\t\t\treturn 0\n\t\t\t\tend)\n\t\t\tend)\n\t\tend)\n\tend)\nend\n\n-- Initialize any players added before connecting to PlayerAdded event\nfor _, player in Players:GetPlayers() do\n\tonPlayerAdded(player)\nend\n\nlocal function onPlayerRemoved(player)\n\tupdatePlayerCoins(player, function(_)\n\t\treturn nil\n\tend)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\nPlayers.PlayerRemoving:Connect(onPlayerRemoved)\n```\n\n----------------------------------------\n\nTITLE: Reading DataStore with Scopes\nDESCRIPTION: This code snippet demonstrates how to read data from a DataStore using a specific scope. It retrieves the `PlayerInventory` data store with the \"gold\" scope and then attempts to read the value associated with the key \"User_1234\".\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/versioning-listing-and-caching.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal inventoryStore = DataStoreService:GetDataStore(\"PlayerInventory\", \"gold\")\nlocal success, currentGold = pcall(function()\n  return inventoryStore:GetAsync(\"User_1234\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Accessing Player UI in Roblox with Lua\nDESCRIPTION: This Lua code snippet demonstrates how to access a player's UI within a LocalScript in Roblox. It retrieves the PlayerGui service, gets the local player, and then accesses specific ScreenGui elements within the PlayerGui to toggle their Enabled property, effectively showing or hiding UI elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/on-screen-containers.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player.PlayerGui\n\nlocal titleScreen = playerGui:WaitForChild(\"TitleScreen\")\nlocal settingsMenu = playerGui:WaitForChild(\"SettingsMenu\")\n\ntitleScreen.Enabled = false  -- Hide title screen\nsettingsMenu.Enabled = true  -- Show settings menu\n```\n\n----------------------------------------\n\nTITLE: Complete Glowing Light Script in Lua\nDESCRIPTION: The finished script for creating a glowing light effect. It includes variable initialization, brightness increase and decrease loops, and a continuous loop for repetition.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n-- Stores the light attached to this lamp\nlightPart = script.Parent\nlight = lightPart.SpotLight\n\n-- How much the light's brightness will change each time\nlocal brightnessChange = 1\n-- How often in seconds the light will change brightness\nlocal timeChange = 0.2\n\nwhile true do\n\tfor count = 0, 5, brightnessChange do\n\t    light.Brightness = count\n\ttask.wait(timeChange)\n\tend\n\n\t-- Second loop to turn off light\n\tfor count = 5, 0, -brightnessChange do\n\t\tlight.Brightness = count\n\t\ttask.wait(timeChange)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Player Team Display Names - Lua\nDESCRIPTION: This script customizes the display names of players based on their team membership when their character is added to the game. Players on the 'Guards' team will have a generic name, while 'Ninjas' will have their names hidden.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/name-health-display.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(function(character)\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\t-- Set the name of all guards to generic \"Guard\"\n\t\t\tif player.Team.Name == \"Guards\" then\n\t\t\t\thumanoid.DisplayName = \"Guard\"\n\t\t\t-- Hide the name for all ninjas\n\t\t\telseif player.Team.Name == \"Ninjas\" then\n\t\t\t\thumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None\n\t\t\tend\n\t\tend\n\tend)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Generating Blast Directions in Lua\nDESCRIPTION: Function for calculating laser beam directions based on blaster configuration, supporting single and multi-beam blasters with horizontal spread\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif numLasers == 1 then\n\t-- For single lasers, they aim straight\n\ttable.insert(directions, originCFrame.LookVector)\nelseif numLasers > 1 then\n\t-- For multiple lasers, spread them out evenly horizontally\n\t-- over an interval laserSpreadDegrees around the center\n\tlocal leftAngleBound = laserSpreadDegrees / 2\n\tlocal rightAngleBound = -leftAngleBound\n\tlocal degreeInterval = laserSpreadDegrees / (numLasers - 1)\n\n\tfor angle = rightAngleBound, leftAngleBound, degreeInterval do\n\t\tlocal direction = (originCFrame * CFrame.Angles(0, math.rad(angle), 0)).LookVector\n\t\ttable.insert(directions, direction)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting Player and Team Scores - Roblox Lua\nDESCRIPTION: This Lua snippet resets individual player points and team points using Roblox APIs. It iterates over all players to reset their leaderboard points and over all teams to reset team-specific scores stored as attributes. Dependencies include the Players and Teams service in Roblox, and the GuiAttribute specifying the name of the team points attribute.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction Scoring.resetScores()\n\tfor _, player in Players:GetPlayers() do\n\t\tplayer.leaderstats.Points.Value = 0\n\tend\n\n\tfor _, team in Teams:GetTeams() do\n\t\tteam:SetAttribute(GuiAttribute.teamPoints, 0)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Typewriter Animation with LocalScript in Roblox\nDESCRIPTION: LocalScript that demonstrates usage of the AnimateUI module to create typewriter animations for TextLabels. Shows how to display multiple messages with rich text formatting and emoji support.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal AnimateUI = require(ReplicatedStorage:WaitForChild(\"AnimateUI\"))\n\nlocal label = script.Parent\n\n-- Load translator if game is localized\n--AnimateUI.loadTranslator()\n\nlocal message1 = [[Beyond this door is the<br /><font size=\"46\" color=\"rgb(255,50,25)\">Great Zorgoth...</font> <font size=\"40\">🗡</font>]]\nAnimateUI.typeWrite(label, message1, 0.05)\n\ntask.wait(1)\n\nlocal message2 = [[...who rules this dungeon <font color=\"rgb(255,200,50)\">unchallenged!</font> <font size=\"30\">😈</font>]]\nAnimateUI.typeWrite(label, message2, 0.05)\n```\n\n----------------------------------------\n\nTITLE: Function with Parameter Syntax in Lua\nDESCRIPTION: Shows the basic syntax for defining a function with a parameter in Lua. The parameter acts as a placeholder for information that will be passed to the function when called.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/use-parameters-and-events.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function functionName(parameterName)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Constructing Tables in Luau\nDESCRIPTION: This snippet demonstrates how to construct an empty table in Luau and print it. There are no dependencies other than the use of Luau syntax. The primary output will show an empty table, illustrating table initialization.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Construct an empty table assigned to variable \"t\"\nlocal t = {}\nprint(t) -- {}\n```\n\n----------------------------------------\n\nTITLE: Tweening UIStroke Color and Thickness in Roblox Lua\nDESCRIPTION: Creates and animates a UIStroke object on a TextLabel by tweening its color from white to red and increasing its thickness from 5 to 10 over 2 seconds.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"TextLabel\")\n\nlocal stroke = Instance.new(\"UIStroke\")\nstroke.Color = Color3.fromRGB(255, 255, 255)\nstroke.Thickness = 5\nstroke.Parent = object\n\nlocal targetColor = Color3.fromRGB(255, 0, 0)\nlocal targetThickness = 10\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(stroke, tweenInfo, {Color = targetColor, Thickness = targetThickness})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Using Color3.fromRGB() in Roblox Luau\nDESCRIPTION: This code shows how to prepare to set a new color for a part using the Color3.fromRGB() function, which accepts RGB values as parameters. The empty parentheses would be filled with color values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/object-properties.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Changes the color of a part\nworkspace.PracticePart.Color = Color3.fromRGB()\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Flicker Script in Roblox Lua\nDESCRIPTION: A Lua script that creates a flickering light effect by manipulating brightness and color properties over time. Uses RunService.Heartbeat to update properties each frame based on a NumberSequence curve. Includes functionality to evaluate NumberSequence values at specific times and applies the resulting brightness values to light components.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/create-flickering-lights.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\n\n-- Gets the attribute values set on the model.\nlocal brightnessCurve = script.Parent:GetAttribute(\"BrightnessCurve\")\nlocal loopDuration = script.Parent:GetAttribute(\"LoopDuration\")\n\n-- Stores references to the model's instances that will change.\nlocal light = script.Parent.lamp_hood.SpotLight\nlocal bulb = script.Parent.lightbulb\nlocal beam = script.Parent.lamp_hood.Beam\n\n-- Stores properties' original values that will change.\nlocal origLightBrightness = light.Brightness\nlocal origBeamBrightness = beam.Brightness\nlocal origBulbColor = bulb.Color\n\n-- Gets the value of the NumberSequence (ns) at a specific time (nsTime)\nfunction evaluateNumberSequence(ns: NumberSequence, nsTime: number)\n\t-- If we are at 0 or 1, returns the first or last keypoint's value, respectively.\n\tif nsTime == 0 then\n\t\treturn ns.Keypoints[1].Value\n\tend\n\tif nsTime == 1 then\n\t\treturn ns.Keypoints[#ns.Keypoints].Value\n\tend\n\n\t-- Otherwise, steps through each sequential pair of keypoints.\n\tfor i = 1, #ns.Keypoints - 1 do\n\t\t-- Gets the current and next keypoint.\n\t\tlocal currKp = ns.Keypoints[i]\n\t\tlocal nextKp = ns.Keypoints[i + 1]\n\n\t\t-- If nsTime is between the keypoints' times,\n\t\tif nsTime >= currKp.Time and nsTime < nextKp.Time then\n\t\t\t-- Calculates where nsTime lies between the keypoints' times, calls this alpha.\n\t\t\tlocal alpha = (nsTime - currKp.Time) / (nextKp.Time - currKp.Time)\n\t\t\t-- Returns the value between the points for nsTime using alpha.\n\t\t\treturn currKp.Value + (nextKp.Value - currKp.Value) * alpha\n\t\tend\n\tend\nend\n\nRunService.Heartbeat:Connect(function()\n\t-- Solves for the NumberSequence's time (between 0 and 1).\n\tlocal t = time() / loopDuration\n\tlocal numberSequenceTime = t - (t // 1)\n\n\t-- Gets the NumberSequence's value at this time.\n\tlocal brightnessValue = evaluateNumberSequence(brightnessCurve, numberSequenceTime)\n\n\t-- Adjusts brightness and color properties based on this value.\n\tlight.Brightness = origLightBrightness * brightnessValue\n\tbeam.Brightness = origBeamBrightness * brightnessValue\n\tbulb.Color = Color3.new(\n\t\torigBulbColor.r * brightnessValue,\n\t\torigBulbColor.g * brightnessValue,\n\t\torigBulbColor.b * brightnessValue\n\t)\nend)\n```\n\n----------------------------------------\n\nTITLE: Updating Resource Count for a Resource in a Shared Inventory - Lua\nDESCRIPTION: This snippet outlines how to update a resource count within a shared inventory using the UpdateAsync function to ensure concurrent modifications are handled correctly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/hash-map.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"ResourceInventory\")\n\nlocal function contributeResources(itemResource, addedCount)\n\tlocal success, newResourceCount = pcall(function()\n\t\treturn hashMap:UpdateAsync(itemResource, function(resource)\n\t\t\tresource = resource or {count = 0}\n\t\t\tresource.count = resource.count + addedCount\n\n\t\t\t-- ensure we don't exceed the maximum resource count\n\t\t\tif resource.count > 500 then\n\t\t\t\tresource.count = 500\n\t\t\tend\n\t\t\treturn resource\n\t\tend, 1200)\n\tend)\n\tif success then\n\t\tprint(newResourceCount)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Rotating and Bouncing an Object with Tweens in Roblox Lua\nDESCRIPTION: This script rotates and moves an object up and down using tweens when clicked in Roblox. It utilizes `TweenService` to smoothly animate the object's CFrame, creating a rotation and bounce effect. Customizable variables include tween time, rotation angles, and move distance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/animating-parts.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Uses tween to make object rotate up and bounce\nlocal TweenService = game:GetService(\"TweenService\")\nlocal partToTween = script.Parent\nlocal clickDetector = partToTween:FindFirstChildWhichIsA(\"ClickDetector\")\nlocal inTween = false\n\n-- Customizable variables\nlocal TWEEN_TIME = 0.25\nlocal TWEEN_ROT_ANGLES = -45\nlocal TWEEN_MOVE_DISTANCE = 3\n\n-- Tween variables\nlocal tweenInfo = TweenInfo.new(\n\tTWEEN_TIME, -- Time\n\tEnum.EasingStyle.Quad, -- EasingStyle\n\tEnum.EasingDirection.Out, -- EasingDirection\n\t1, -- RepeatCount (when less than zero the tween will loop indefinitely)\n\ttrue  -- Reverses (tween will reverse once reaching its goal)\n)\n\nlocal function activateAction()\n\t-- If the object is tweening, prevent it from being tweened again\n\tif inTween == true then\n\t\treturn\n\tend\n\n\t-- Calculate new CFrame for object position and rotation\n\tlocal offsetCFrame = CFrame.new(0, TWEEN_MOVE_DISTANCE, 0)\n\tlocal rotatedCFrame = CFrame.Angles(math.rad(TWEEN_ROT_ANGLES), 0, 0)\n\toffsetCFrame = offsetCFrame:ToWorldSpace(rotatedCFrame)\n\tlocal newCFrame = partToTween.CFrame:ToWorldSpace(offsetCFrame)\n\n\t-- Create a tween and play it\n\tlocal tweenObject = TweenService:Create(partToTween, tweenInfo, {CFrame = newCFrame})\n\ttweenObject:Play()\n\tinTween = true\n\n\t-- On tween completion, make object clickable again\n\ttweenObject.Completed:Connect(function()\n\t\tinTween = false\n\tend)\nend\n\nclickDetector.MouseClick:Connect(activateAction)\n```\n\n----------------------------------------\n\nTITLE: Displaying NPC Chat Bubbles in Roblox\nDESCRIPTION: This Lua code snippet demonstrates how to manually display chat bubbles for NPCs when a ProximityPrompt is triggered. It uses the TextChatService:DisplayBubble method to show a bubble above the NPC's head with a predefined message. This script should be placed in a LocalScript or a Script with RunContext set to Client, within an appropriate container like StarterPlayerScripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/bubble-chat.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal prompt = Workspace.SomeNPC.ProximityPrompt\nlocal head = prompt.Parent:WaitForChild(\"Head\")\n\nprompt.Triggered:Connect(function()\n\tTextChatService:DisplayBubble(head, \"Hello world!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Helper Module in ROBLOX\nDESCRIPTION: This Lua module, TranslationHelper, abstracts common translation management operations, including loading translators and translating text. It supports locale-based translation and manual language switching. Key variables include 'player' and 'sourceLanguageCode'. It defines methods like setLanguage for changing the loaded translator and translate for translating text and utilizing fallback strategies. Outputs include translated strings or false on failure.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/localize-with-scripting.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal TranslationHelper = {}\n\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Local variables\nlocal player = Players.LocalPlayer\nlocal sourceLanguageCode = \"en\"\n\n-- Get translators\nlocal playerTranslator, fallbackTranslator\nlocal foundPlayerTranslator = pcall(function()\n\tplayerTranslator = LocalizationService:GetTranslatorForPlayerAsync(player)\nend)\nlocal foundFallbackTranslator = pcall(function()\n\tfallbackTranslator = LocalizationService:GetTranslatorForLocaleAsync(sourceLanguageCode)\nend)\n\n-- Create a method TranslationHelper.setLanguage to load a new translation for the TranslationHelper\nfunction TranslationHelper.setLanguage(newLanguageCode)\n\tif sourceLanguageCode ~= newLanguageCode then\n\t\tlocal success, newPlayerTranslator = pcall(function()\n\t\t\treturn LocalizationService:GetTranslatorForLocaleAsync(newLanguageCode)\n\t\tend)\n\n\t\t--Only override current playerTranslator if the new one is valid (fallbackTranslator remains as experience's source language)\n\t\tif success and newPlayerTranslator then\n\t\t\tplayerTranslator = newPlayerTranslator\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\n-- Create a Translate function that uses a fallback translator if the first fails to load or return successfully. You can also set the referenced object to default to the generic game object\n\nfunction TranslationHelper.translate(text, object)\n\tif not object then\n\t\tobject = game\n\tend\n\tif foundPlayerTranslator then\n\t\treturn playerTranslator:Translate(object, text)\n\tend\n\tif foundFallbackTranslator then\n\t\treturn fallbackTranslator:Translate(object, text)\n\tend\n\treturn false\nend\n\n-- Create a FormatByKey() function that uses a fallback translator if the first fails to load or return successfully\n\nfunction TranslationHelper.translateByKey(key, arguments)\n\tlocal translation = \"\"\n\tlocal foundTranslation = false\n\n\t-- First tries to translate for the player's language (if a translator was found)\n\tif foundPlayerTranslator then\n\t\tfoundTranslation = pcall(function()\n\t\t\ttranslation = playerTranslator:FormatByKey(key, arguments)\n\t\tend)\n\tend\n\tif foundFallbackTranslator and not foundTranslation then\n\t\tfoundTranslation = pcall(function()\n\t\t\ttranslation = fallbackTranslator:FormatByKey(key, arguments)\n\t\tend)\n\tend\n\tif foundTranslation then\n\t\treturn translation\n\telse\n\t\treturn false\n\tend\nend\n\nreturn TranslationHelper\n```\n\n----------------------------------------\n\nTITLE: Creating Shoppable Regions in Lua\nDESCRIPTION: Implements detection regions that automatically show the merch booth when players enter specific areas. Uses CollectionService tags and touch events to manage booth visibility.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\n-- Remove the default catalog button\nMerchBooth.toggleCatalogButton(false)\n\nlocal function setupRegion(region: BasePart)\n\tregion.Touched:Connect(function(otherPart)\n\t\tlocal character = Players.LocalPlayer.Character\n\t\tif character and otherPart == character.PrimaryPart then\n\t\t\tMerchBooth.openMerchBooth()\n\t\tend\n\tend)\n\n\tregion.TouchEnded:Connect(function(otherPart)\n\t\tlocal character = Players.LocalPlayer.Character\n\t\tif character and otherPart == character.PrimaryPart then\n\t\t\tMerchBooth.closeMerchBooth()\n\t\tend\n\tend)\nend\n\n-- Iterate through existing tagged shop regions\nfor _, region in CollectionService:GetTagged(\"ShopRegion\") do\n\tsetupRegion(region)\nend\n-- Detect when non-streamed shop regions stream in\nCollectionService:GetInstanceAddedSignal(\"ShopRegion\"):Connect(setupRegion)\n```\n\n----------------------------------------\n\nTITLE: Implementing Friendly Fire Prevention in Lua\nDESCRIPTION: Code block that checks if the tagged player is on the same team as the player who fired the blast. If they are teammates, the damage is prevented by returning early.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/create-teams.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n\tlocal character = playerTagged.Character\n\tlocal isFriendly = playerBlasted.Team == playerTagged.Team\n\n\t-- Disallow friendly fire\n\tif isFriendly then\n\t\treturn\n\tend\n```\n\n----------------------------------------\n\nTITLE: Handling Scene Ending Warnings on Server in Lua\nDESCRIPTION: Demonstrates how to connect to the onSceneEndingWarningForServer event to detect when a scene is about to end on the server side.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Detect when scene is about to end (server-side)\nEventSequencer.onSceneEndingWarningForServer:Connect(function()\n\twarn(\"Scene is about to end!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Removing Player and Updating Count (Lua)\nDESCRIPTION: This snippet completes the `removeActivePlayer` function. When a matching player is found, it removes them from the `activePlayers` table using `table.remove()`. It then updates the `playersLeft` value and calls `checkPlayerCount()` to determine if a winning player has been found. This function depends on `activePlayers` table, `playersLeft` Value object and `checkPlayerCount()` function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal function removeActivePlayer(player)\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tif whichPlayer == player then\n\t\t\ttable.remove(activePlayers, playerKey)\n\t\t\tplayersLeft.Value = #activePlayers\n\t\t\tcheckPlayerCount()\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Scripting Button Activation in Roblox Lua\nDESCRIPTION: This script demonstrates how to connect a button's Activated event to a function that changes the button's background color to a random color when the button is clicked. It requires a LocalScript parented to a GuiButton object. The script utilizes Random.new() to generate random numbers for HSV color values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal button = script.Parent\nlocal RNG = Random.new()\nlocal function onButtonActivated()\n\t-- randomize the button color\n\tbutton.BackgroundColor3 = Color3.fromHSV(RNG:NextNumber(), 1, 1)\nend\nbutton.Activated:Connect(onButtonActivated)\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform Fade Effect with Loops - Luau\nDESCRIPTION: This code snippet demonstrates how to use a for loop in Roblox to gradually change the Transparency property of a platform part, creating a fading effect. The task.wait method is used to pace the loop, simulating a smooth transition over 1 second.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal function fade()\n\tfor count = 1, 10 do\n\t\tplatform.Transparency = count / 10\n\t\ttask.wait(0.1)\n\tend\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Final Consolidated Player Points Management Script in Roblox Lua\nDESCRIPTION: The complete script incorporating all previous functions to manage player points and attributes effectively in a Roblox game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n  player:SetAttribute(\"IsAlive\", true)\n  local humanoid = character:WaitForChild(\"Humanoid\")\n\n  humanoid.Died:Connect(function()\n    local points = player.leaderstats.Points\n    points.Value = 0\n    player:SetAttribute(\"IsAlive\", false)\n  end)\nend\n\nlocal function onPlayerAdded(player)\n  local leaderstats = Instance.new(\"Folder\")\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n\n  local points = Instance.new(\"IntValue\")\n  points.Name = \"Points\"\n  points.Value = 0\n  points.Parent = leaderstats\n\n  player:SetAttribute(\"IsAlive\", false)\n\n  player.CharacterAdded:Connect(function(character)\n    onCharacterAdded(character, player)\n  end)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n\nwhile true do\n  task.wait(1)\n  local playerList = Players:GetPlayers()\n  for i = 1, #playerList do\n    local player = playerList[i]\n    if player:GetAttribute(\"IsAlive\") then\n      local points = player.leaderstats.Points\n      points.Value += 1\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Chat Animation Triggers in Lua\nDESCRIPTION: This code shows how to add custom trigger words for chat animations, including linking a new animation and adding an additional trigger for an existing animation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/social-interactions.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\n-- Register string pattern for the \"Tilt\" animation\nSocialInteractions.setTriggerWordsForChatAnimation(\"rbxassetid://3334538554\", {\"cra+zy\"})\n\n-- Register additional string pattern for the \"Applaud\" animation\nSocialInteractions.setTriggerWordsForChatAnimation(\"rbxassetid://5911729486\", {\"coo+l\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Torque Constraint - React\nDESCRIPTION: The Torque constraint is created using this snippet, which focuses on applying constant torque to an assembly from its center of mass, enriching the simulation with rotational physics.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/mover-constraints.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Card variant=\"outlined\" style={{height: '100%'}}>\n<CardContent>\n<Button href=\"../physics/constraints/torque.md\" size=\"large\" color=\"primaryBrand\" variant=\"outlined\" fullWidth>Torque</Button>\n<p></p>\n<CardMedia component=\"video\" controls src=\"../assets/physics/constraints/Torque-Demo.mp4\" />\n<p></p>\n<figcaption>[Torque](../physics/constraints/torque.md) applies constant torque on an assembly from its center of mass</figcaption>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Setting Random Floor Color in Luau\nDESCRIPTION: This Luau code adds the functionality to randomly color each floor of the tower. It assigns a random color to `currentColor` within the outer loop, ensuring that all cubes on the same floor have the same random color.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_10\n\nLANGUAGE: Luau\nCODE:\n```\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\n    currentColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n    for lengthIndex = 1, TOWER_SIZE do\n        local spawnX = lengthIndex * CUBE_SIZE\n        for widthIndex = 1, TOWER_SIZE do\n            local spawnZ = widthIndex * CUBE_SIZE\n            makeCube(spawnX, spawnY, spawnZ)\n            task.wait(0.25)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up Parent Frame in Roblox\nDESCRIPTION: Defines steps to create a parent frame called 'SettingsMenu' within Roblox's HUDContainer. It involves setting key properties such as AnchorPoint, BackgroundColor, Position, and Size to optimize the UI layout and enable responsive interaction based on user states.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Insert a `Class.Frame` into **HUDContainer** and rename it **SettingsMenu**.\n   ...\n2. With **SettingsMenu** selected, set the following properties:\n   - `Class.Frame.AnchorPoint|AnchorPoint` = `0.5`\n   - `Class.Frame.BackgroundColor3|BackgroundColor3` = `30, 30, 60`\n   - `Class.Frame.BackgroundTransparency|BackgroundTransparency` = `0.25`\n   - `Class.Frame.Position|Position` = `0.5, 0, 0.5, 0`\n   - `Class.Frame.Size|Size` = `0.75, 0, 0.75, 0`\n...\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n3. Insert a `Class.UIAspectRatioConstraint` into **SettingsMenu** and set its `Class.UIAspectRatioConstraint.AspectRatio|AspectRatio` property to `2.5`.\n4. Insert a `Class.UICorner` modifier into **SettingsMenu** and set its `Class.UICorner.CornerRadius|CornerRadius` to `0.1, 0`.\n5. Insert a `Class.UISizeConstraint` to constrain size:\n   - MaxSize: `800, inf`\n   - MinSize: `350, 0`\n...\n```\n\n----------------------------------------\n\nTITLE: Setup Collision Detection for Laser Beam in Roblox\nDESCRIPTION: Demonstrates setting up a collision box using a block part to detect player collisions with a laser beam in Roblox. The 'CollisionBox' is anchored to prevent movement and acts as the detection mechanism due to its lack of default collision detection. This setup is crucial before scripting the damage effect when a player comes into contact with the beam.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/laser-traps-with-beams.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Code to setup a collision box for laser beam detection\n-- Insert a block part and configure as collision detection\nlocal collisionBox = Instance.new('Part', LaserBeamBlaster)\ncollisionBox.Name = \"CollisionBox\"\ncollisionBox.Anchored = true\n-- Scale and move the collisionBox as needed\ncollisionBox.Size = Vector3.new(2, 2, 10) -- Example size\ncollisionBox.Position = Vector3.new(x, y, z) -- Example position\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Schema in Lua\nDESCRIPTION: This Lua snippet sets up server-specific configurations in OnSetup. It connects to an event for changing part colors. Dependencies include EventSequencer and ReplicatedStorage. Requires a timePositionObject to display the current time and a ChangePartColor event to manage part color changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nlocal serverEnvironment\nlocal partColorConnection\nlocal changePartColorEvent = script.Parent.Events.ChangePartColor\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Server)\")\n\n\t-- Access scene environment; does not apply to Inline Mode\n\tserverEnvironment = EventSequencer.getCurrentSceneEnvironment()\n\tpartColorConnection = changePartColorEvent.OnServerEvent:Connect(function(player, changedPart, newColor)\n\t\tserverEnvironment.changedPart.Color = newColor\n\tend)\n\n\tprint(\"Current time is:\", timePositionObject.Value)\nend\n```\n\n----------------------------------------\n\nTITLE: Prompting Invite for a Specific Friend - Lua\nDESCRIPTION: This code snippet checks if a player can invite a specific friend by user ID. If the player is allowed to send the invite, it uses the SocialService to prompt the invitation with the specified invite options.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/invite-prompts.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal receiverUserID = 505306092\n\n-- Construct invite options with friend's user ID\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.InviteUser = receiverUserID\n\n-- Function to check whether the player can send an invite\nlocal function canSendGameInvite(sendingPlayer)\n\tlocal success, canSend = pcall(function()\n\t\treturn SocialService:CanSendGameInviteAsync(sendingPlayer, receiverUserID)\n\tend)\n\treturn success and canSend\nend\n\nlocal canInvite = canSendGameInvite(player)\nif canInvite then\n\tSocialService:PromptGameInvite(player, inviteOptions)\nend\n\n```\n\n----------------------------------------\n\nTITLE: Continue Statement in Luau Loop\nDESCRIPTION: This code shows how to use the `continue` keyword to skip an iteration within a loop. In this case, it iterates through the children of a parent object and only adds children of a specific class name to a list.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function GetChildrenOfClass(parent: Instance, className: string): {Instance}\n\tlocal children = {}\n\tfor _, child in parent:GetChildren() do\n\t\tif child.ClassName ~= className then continue end  -- Iterates the loop\n\t\ttable.insert(children, child)\n\tend\n\n\treturn children\nend\n```\n\n----------------------------------------\n\nTITLE: While Loop in Luau\nDESCRIPTION: This code snippet shows how to use a `while` loop in Luau. The loop continues to execute as long as the `timeRemaining` variable is greater than 0. It prints the remaining time, waits for one second, and decrements the `timeRemaining` variable in each iteration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal timeRemaining = 10\n\nwhile timeRemaining > 0 do\n\tprint(\"Seconds remaining: \" .. timeRemaining)\n\ttask.wait(1)\n\ttimeRemaining -= 1\nend\n\nprint(\"Timer reached zero!\")\n--[[ Resulting output:\nSeconds remaining: 10\nSeconds remaining: 9\nSeconds remaining: 8\nSeconds remaining: 7\nSeconds remaining: 6\nSeconds remaining: 5\nSeconds remaining: 4\nSeconds remaining: 3\nSeconds remaining: 2\nSeconds remaining: 1\nTimer reached zero!\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Geographic Latitude in Roblox\nDESCRIPTION: Sets the GeographicLatitude property of the Lighting service to adjust the simulated geographic latitude in degrees, affecting the position of the sun and moon.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.GeographicLatitude = 0\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties in Roblox Luau\nDESCRIPTION: This snippet demonstrates how to access the Color property of a part object using dot notation. The code references the part's location and then accesses its specific property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/object-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Changes the color of a part\nworkspace.PracticePart.Color\n```\n\n----------------------------------------\n\nTITLE: Handling MerchBooth Open Event in Lua\nDESCRIPTION: Connects to the merchBoothOpened event to detect when either the catalog or item detail view are opened. Uses ReplicatedStorage to access the MerchBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.merchBoothOpened:Connect(function()\n\tprint(\"Booth view opened\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Type Casting in Luau with :: Operator\nDESCRIPTION: This snippet illustrates how to perform type casting with the `::` operator in Luau. It highlights scenarios where explicit casting may be necessary to bypass type conversion issues. Caution is advised as incorrect casts can lead to errors.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal myNumber = 1\nlocal myString: string\n\nmyString = myNumber  -- Not OK; type conversion error\nmyString = myNumber :: any  -- OK; all expressions can be cast to 'any'\nlocal myFlag = myNumber :: boolean  -- Not OK; types are unrelated\n```\n\n----------------------------------------\n\nTITLE: Accessing ReplicatedFirst Objects in Lua\nDESCRIPTION: Demonstrates safe access to objects in ReplicatedFirst service without using WaitForChild(). This is safe because ReplicatedFirst contents are loaded first.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\nlocal LoadingScreen = require(ReplicatedFirst.LoadingScreen)\n```\n\n----------------------------------------\n\nTITLE: Capturing Local Variables in Luau\nDESCRIPTION: In this snippet, the function 'f' demonstrates capturing of the local variable 'x'. The local variable retains its value across different scopes, allowing accessible reads within nested functions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/scope.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal x = 5\n\nlocal function f()\n\tprint(x)\nend\n\nf() -- 5\nprint(x) -- 5\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Data in Python\nDESCRIPTION: This Python script uses the `DataStores` class to interact with the Data Stores API. It retrieves a list of user inventory keys, reads the inventory data for each user, and increments a currency value for each user.  It relies on a `tutorialFunctions` module (presumably where the `DataStores` class resides).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport tutorialFunctions\n\nDatastoresApi = tutorialFunctions.DataStores()\n\n# Set up\ndatastoreName = \"Inventory\"\n\n# List keys for a subset of users (you might need to use the nextPageCursor to view other entries)\nkeys = DatastoresApi.list_entries(datastoreName)\nprint(keys.content)\n\n# Read inventory for each user\nfor x in range(5):\n    updatedObjectKey = \"User_\"+str(x+1)\n    value = DatastoresApi.get_entry(datastoreName, updatedObjectKey)\n    # change response type to a string\n    updatedValue = value.json()\n    print(updatedObjectKey + \" has \"+str(updatedValue)+\" gems in their inventory\")\n# Update the currency of each user by 10\nfor x in range(5):\n    updatedObjectKey = \"User_\"+str(x+1)\n    value = DatastoresApi.increment_entry(datastoreName, updatedObjectKey, 10)\n    # change response type to a string\n    updatedValue = value.json()\n    print(updatedObjectKey + \" now has \"+str(updatedValue)+\" robux in their inventory\")\n```\n\n----------------------------------------\n\nTITLE: Coin Collection Script\nDESCRIPTION: This script implements the coin collection mechanic. It initializes services, defines an event handler for when a coin is touched, and connects the handler to each coin's `Touched` event. When a player touches a coin, the coin disappears for a set cooldown period before reappearing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/script-game-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Initializing services and variables\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\n\nlocal coinsFolder = Workspace.World.Coins\nlocal coins = coinsFolder:GetChildren()\n\nlocal COOLDOWN = 10\n\n-- Defining the event handler\nlocal function onCoinTouched(otherPart, coin)\n\tif coin:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal player = Players:GetPlayerFromCharacter(character)\n\t\tif player then\n\t\t\t-- Player touched a coin\n\t\t\tcoin.Transparency = 1\n\t\t\tcoin:SetAttribute(\"Enabled\", false)\n\t\t\tprint(\"Player collected coin\")\n\t\t\ttask.wait(COOLDOWN)\n\t\t\tcoin.Transparency = 0\n\t\t\tcoin:SetAttribute(\"Enabled\", true)\n\t\tend\n\tend\nend\n\n-- Setting up event listeners\nfor _, coin in coins do\n\tcoin:SetAttribute(\"Enabled\", true)\n\tcoin.Touched:Connect(function(otherPart)\n\t\tonCoinTouched(otherPart, coin)\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Get All Developer Products\nDESCRIPTION: This code snippet retrieves all developer products associated with an experience using `MarketplaceService:GetDeveloperProductsAsync()`. It iterates through the first page of results and prints each product's information, which should be replaced with UI code to display in an in-experience store or product list GUI. It also handles potential errors using `pcall`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/developer-products.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\n\nlocal success, developerProducts = pcall(function()\n\treturn MarketplaceService:GetDeveloperProductsAsync()\nend)\n\nif success and developerProducts then\n\tlocal firstPage = developerProducts:GetCurrentPage()\n\tfor _, developerProduct in firstPage do\n\t\t\t-- Replace the print statement with UI code to display the product\n\t\t\tprint(field .. \": \" .. value)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Counting Player Deaths in Roblox Lua\nDESCRIPTION: This script connects to the PlayerAdded event and listens for the CharacterAdded event to track the deaths of players. It increments a death count each time the Humanoid dies and prints the updated count.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/index.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ngame:GetService(\"Players\").PlayerAdded:Connect(function(player)\n\tlocal deaths = 0\n\tplayer.CharacterAdded:Connect(function(character)\n\t\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\t\thumanoid.Died:Connect(function()\n\t\t\tdeaths += 1\n\t\t\tprint(player.Name .. \" death count: \" .. deaths)\n\t\tend)\n\tend)\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing StatefulObjectController in Lua for Roblox UI State Management\nDESCRIPTION: A module that enables attaching behavior to UI objects and toggling/tweening between various states. It manages transitions between different states of a UI object using TweenService, with state definitions containing transition properties and timing information.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal StatefulObjectController = {}\nStatefulObjectController.__index = StatefulObjectController\n\nexport type StateName = string\nexport type State = {\n\ttransition: TweenInfo,\n\tproperties: { [string]: any },\n}\n\nfunction StatefulObjectController.hydrate(props: {\n\t\tobject: Instance,\n\t\tstates: { [StateName]: State },\n\t\tinitialStateName: StateName\n\t})\n\tlocal object, states, initialStateName = props.object, props.states, props.initialStateName\n\n\tlocal self = setmetatable({\n\t\tstates = states,\n\t\tcurrentStateName = initialStateName,\n\t\ttweens = {},\n\t}, StatefulObjectController)\n\n\t-- Create tweens for reuse to avoid making new tweens every time state is changed\n\tfor stateName, state in states do\n\t\tself.tweens[stateName] = TweenService:Create(object, state.transition, state.properties)\n\tend\n\n\tself:setState(self.currentStateName)\n\n\treturn self\nend\n\nfunction StatefulObjectController:setState(stateName: StateName)\n\tlocal stateTween: Tween = self.tweens[stateName]\n\tif not stateTween then\n\t\twarn(string.format(\"Attempted to set %s to unknown state '%s'\", self.object:GetFullName(), stateName))\n\t\treturn\n\tend\n\n\tself.currentStateName = stateName\n\n\t-- Make sure other tweens aren't conflicting\n\tfor _, tween in self.tweens do\n\t\ttween:Cancel()\n\tend\n\n\tstateTween:Play()\nend\n\nreturn StatefulObjectController\n```\n\n----------------------------------------\n\nTITLE: Finding the Intersection of Two Sets in Lua\nDESCRIPTION: The snippet calculates the intersection of two sets using a custom function `getIntersection()`. The function checks shared items using `Set:contains()`, requiring Lua standard libraries.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getIntersection(set1, set2)\n\tlocal result = Set.new()\n\tfor key, value in set1 do\n\t\tif set2:contains(key) then\n\t\t\tresult:add(key)\n\t\tend\n\tend\n\treturn result\nend\n\nlocal freshFruits = Set.new({\"Mango\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\nlocal frozenFruits = Set.new({\"Mango\", \"Peach\", \"Pineapple\"})\n\nlocal commonFruits = getIntersection(freshFruits, frozenFruits)\ncommonFruits:output() -- Mango, Peach\n```\n\n----------------------------------------\n\nTITLE: Shallow Freezing Tables in Luau\nDESCRIPTION: Shows how to make a table read-only using Luau's `table.freeze()`, preventing any modifications to its contents. The example illustrates an attempt to modify the table after freezing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal target = {\n\tkey = \"value\",\n\tengine = \"Roblox\",\n\tplayerID = 505306092\n}\n\ntable.freeze(target)\ntarget.playerID = 1 --> attempt to modify a readonly table\n```\n\n----------------------------------------\n\nTITLE: Creating a Scene Schema in Lua\nDESCRIPTION: Shows how to create a scene schema using the EventSequencer and define an OnSetup function for the schema.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Client)\")\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Chat Window Appearance with Player Attributes\nDESCRIPTION: This snippet demonstrates the implementation of a callback function for Class.TextChatService that alters chat window message properties based on player attributes set previously, enhancing the customization of chat interfaces.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/in-experience-text-chat.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\nTextChatService.OnChatWindowAdded = function(textChatMessage)\n\tlocal textSource = textChatMessage.TextSource\n\tif textSource then\n\t\tlocal player = Players:GetPlayerByUserId(textSource.UserId)\n\t\tif player then\n\t\t\tlocal overrideProperties = TextChatService.ChatWindowConfiguration:DeriveNewMessageProperties()\n\t\t\toverrideProperties.PrefixText = textChatMessage.PrefixText\n\t\t\toverrideProperties.Text = textChatMessage.Text\n\n\t\t\tlocal nameColor = player:GetAttribute(\"NameColor\")\n\t\t\tif nameColor and typeof(nameColor) == \"Color3\" then\n\t\t\t\toverrideProperties.PrefixTextProperties.TextColor3 = nameColor\n\t\t\tend\n\n\t\t\tlocal chatColor = player:GetAttribute(\"ChatColor\")\n\t\t\tif chatColor and typeof(chatColor) == \"Color3\" then\n\t\t\t\toverrideProperties.TextColor3 = chatColor\n\t\t\tend\n\n\t\t\tlocal isYourTag = player:GetAttribute(\"isYourTag\")\n\t\t\tif isYourTag == true then\n\t\t\t\toverrideProperties.PrefixText = `<font color='rgb(0, 255, 0)'>[YourTag]</font> {overrideProperties.PrefixText}`\n\t\t\tend\n\n\t\t\tlocal isOtherTag = player:GetAttribute(\"isOtherTag\")\n\t\t\tif isOtherTag == true then\n\t\t\t\toverrideProperties.PrefixText = `<font color='rgb(255, 0, 0)'>[OtherTag]</font> {overrideProperties.PrefixText}`\n\t\t\tend\n\n\t\t\treturn overrideProperties\n\t\tend\n\tend\n\n\treturn nil\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Request Budget for DataStore Operations - Roblox\nDESCRIPTION: This snippet describes how to use `Class.DataStoreService:GetRequestBudgetForRequestType()|GetRequestBudgetForRequestType()` to determine the number of DataStore requests allowed for a specific operation in the current place. This helps developers understand the request limits and optimize their DataStore usage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/error-codes-and-limits.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\n\"Class.DataStoreService:GetRequestBudgetForRequestType()|GetRequestBudgetForRequestType()\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Device Type Signal Score in Lua\nDESCRIPTION: This code calculates the device type signal score, reflecting the proportion of players in the server sharing the device type of the joining player.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ndeviceTypeSignalScore = (# players with same device as joining player) / (# players on the server)\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Cooldown in Lua\nDESCRIPTION: Shows how to add a cooldown system to the Touched event handler using instance attributes. This prevents the event from firing too frequently when objects are in constant contact.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\n\nlocal COOLDOWN_TIME = 1\n\nlocal function onTouched(otherPart)\n\tif not part:GetAttribute(\"Touched\") then\n\t\tprint(part.Name .. \" collided with \" .. otherPart.Name)\n\n\t\tpart:SetAttribute(\"Touched\", true)  -- Set attribute to true\n\t\ttask.wait(COOLDOWN_TIME)  -- Wait for cooldown duration\n\t\tpart:SetAttribute(\"Touched\", false)  -- Reset attribute\n\tend\nend\n\npart.Touched:Connect(onTouched)\n```\n\n----------------------------------------\n\nTITLE: Registering Collision Groups in Lua\nDESCRIPTION: Shows how to use the PhysicsService to register custom collision groups programmatically. This is useful for setting up collision filtering between different types of objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal PhysicsService = game:GetService(\"PhysicsService\")\n\nlocal cubes = \"Cubes\"\nlocal doors = \"Doors\"\n\n-- Register two collision groups\nPhysicsService:RegisterCollisionGroup(cubes)\nPhysicsService:RegisterCollisionGroup(doors)\n```\n\n----------------------------------------\n\nTITLE: Disabling Character Collisions in Lua\nDESCRIPTION: This script demonstrates how to disable collisions between player characters in Roblox using a custom collision group.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal PhysicsService = game:GetService(\"PhysicsService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal CollisionGroupName = \"Characters\"\nPhysicsService:RegisterCollisionGroup(CollisionGroupName)\nPhysicsService:CollisionGroupSetCollidable(CollisionGroupName, CollisionGroupName, false)\n\nlocal function setCollisionGroup(model)\n  -- Apply collision group to all existing parts in the model\n  for _, descendant in model:GetDescendants() do\n    if descendant:IsA(\"BasePart\") then\n      descendant.CollisionGroup = CollisionGroupName\n    end\n  end\nend\n\nPlayers.PlayerAdded:Connect(function(player)\n  player.CharacterAdded:Connect(function(character)\n    setCollisionGroup(character)\n  end)\n  -- If the player already has a character, apply the collision group immediately\n  if player.Character then\n    setCollisionGroup(player.Character)\n  end\nend)\n```\n\n----------------------------------------\n\nTITLE: Complete Trap Implementation Using Parameters and Events in Lua\nDESCRIPTION: The complete trap script that destroys any object that touches it. It uses a parameter to receive the touching object and the Touched event to detect collisions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/use-parameters-and-events.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal trap = script.Parent\n\nlocal function onTouch(objectTouched)\n    print(\"Something touched the trap\")\n    -- Destroy the touching object\n    objectTouched:Destroy()\nend\n\ntrap.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Event with Value for Mission Duration in Lua\nDESCRIPTION: This snippet shows how to log a custom event with an associated value, specifically tracking the duration of mission completion. This allows for quantitative measurements and can be used to stay within event rate limits by batching custom events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/custom-events.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\nAnalyticsService:LogCustomEvent(\n    player,\n    \"MissionCompletedDuration\", -- Event name\n    120 -- Event value\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Match Status in DisplayManager\nDESCRIPTION: Creates a local function `updateRoundStatus()` to update the status display with the current number of players left and the remaining time. This function concatenates strings with the values from `playersLeft` and `timeLeft` IntValues.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\n-- Local Functions\nlocal function updateRoundStatus()\n\tstatus.Value = \"Players Left: \" .. playersLeft.Value .. \" / Time Left: \" .. timeLeft.Value\nend\n```\n\n----------------------------------------\n\nTITLE: API Request Limit Calculation\nDESCRIPTION: Shows the dynamic request unit quota calculation for MemoryStoreService API calls\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/index.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Request unit quota formula\n-- 1000 + 100 * [number of concurrent users]\nlocal requestUnits = 1000 + 100 * concurrentUsers\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Actions to ACM with SetCore\nDESCRIPTION: This snippet shows how to add a custom action to the Avatar Context Menu (ACM) using `StarterGui:SetCore()` with the `AddAvatarContextMenuOption` option. It creates a `BindableEvent` to handle the custom action and passes an array containing the action name and the event to `SetCore()`. The event is triggered when the custom action is selected.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-context-menu.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal StarterGui = game:GetService(\"StarterGui\")\nlocal player = Players.LocalPlayer\n\n-- Connect a function to a \"BindableEvent\"\nlocal bindableEvent = Instance.new(\"BindableEvent\")\nlocal function onCustomACMAction(targetPlayer)\n\t-- At this point, you could call InvokeServer() on a RemoteFunction to alert the server of the selection\n\tprint(\"ACM event selected by \" .. player.Name .. \" on \" .. targetPlayer.Name)\nend\nbindableEvent.Event:Connect(onCustomACMAction)\n\n-- Add the ACM option using SetCore() with \"AddAvatarContextMenuOption\"\nlocal options = {\"Custom ACM Action\", bindableEvent}\nStarterGui:SetCore(\"AddAvatarContextMenuOption\", options)\n```\n\n----------------------------------------\n\nTITLE: Parenting Particle to Player - Lua\nDESCRIPTION: This snippet parents the particle emitter to the player's head, creating the effect of particles emanating from the player. It retrieves the player's character model and then parents the `particle` to the `Head` using `WaitForChild`. It depends on the player object and the associated Character model.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal particle = Instance.new(\"ParticleEmitter\")\nparticle.Color = ColorSequence.new(currentColor)\n\nlocal playerCharacter = player.Character\nparticle.Parent = playerCharacter:WaitForChild(\"Head\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Appearance with OnIncomingMessage\nDESCRIPTION: Shows how to customize the appearance of chat messages by using the OnIncomingMessage callback and checking message metadata\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/custom-system-messages.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nTextChannel.OnIncomingMessage = function(message: TextChatMessage)\n  if message.Metadata == \"WelcomeMessage\" then\n    local overrideProperties = Instance.new(\"TextChatMessageProperties\")\n    overrideProperties.TextColor = Color3.fromRGB(255, 0, 0)\n    return overrideProperties\n  end\n\n  return nil\nend\n```\n\n----------------------------------------\n\nTITLE: User Information Retrieval using GET Request - Bash\nDESCRIPTION: This code snippet provides an example of how to request user information from the Roblox API using a GET request. An authorization header must be included with the access token.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'https://apis.roblox.com/oauth/v1/userinfo' \\n--header 'Authorization: Bearer eyjlflabtfl...4gxqYBG'\n```\n\n----------------------------------------\n\nTITLE: Calculating Player Attribute ELO Using DataStore in Lua\nDESCRIPTION: This snippet demonstrates how to update and store player ELO scores in the DataStore after a match concludes. It uses the DataStoreService to persist player data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal eloStore = DataStoreService:GetDataStore(\"PlayerElo\")\n\nfunction onMatchEnded(players: {Player}, winners: {Player}, losers: {Player})\n  for _, player in players do\n    local updatedElo = CalculateUpdatedElo(player, winners, losers)\n    local success, errorMessage = pcall(function()\n      eloStore:SetAsync(player.UserId, updatedElo)\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting Parts Using a For Loop in Luau\nDESCRIPTION: Iterate through an array of parts to reset their properties, making them visible and collidable again.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/loops-and-arrays.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfor partIndex = 1, #pathArray do\n   local whichPart = pathArray[partIndex]\n   whichPart.CanCollide = true\n   whichPart.Transparency = 0\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting Bindable Event\nDESCRIPTION: Demonstrates how to create a connection to a BindableEvent and handle incoming data through an anonymous function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\n-- Get reference to bindable event instance\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\n-- Connect anonymous function to event\nbindableEvent.Event:Connect(function(data)\n\tprint(data)  --> Round started!\nend)\n```\n\n----------------------------------------\n\nTITLE: Define Driftspeeder Settings in Luau\nDESCRIPTION: This Luau code defines the settings for a driftspeeder in a Roblox game. It uses a table named `Settings` to store values for `DefaultSpeed`, `BoostSpeed`, `BoostAmount`, and `Steering`. These variables control the speeder's behavior, such as its default speed, boost speed, boost duration, and steering sensitivity. The settings are then returned to the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-galactic-speedway/customize-and-share.md#2025-04-21_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\n\"-- ================================================================================\n-- Settings\n-- ================================================================================\n\nlocal Settings = {}\n\nSettings.DefaultSpeed = 100\t\t-- Speed when not boosted [Studs/second, Range 50-300]\nSettings.BoostSpeed = 200\t\t-- Speed when boosted [Studs/second, Maximum: 400]\nSettings.BoostAmount = 10\t\t-- Duration of boost in seconds\nSettings.Steering = 5\t\t\t-- How quickly the speeder turns [Range: 1-10]\n-- ================================================================================\n\nreturn Settings\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Callback with BindableFunction\nDESCRIPTION: This snippet illustrates setting up a callback function using `BindableFunction.OnInvoke`. It demonstrates how to define the callback to double a number and how it is invoked by passing arguments to `:Invoke()`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal bindableFunction = Instance.new(\"BindableFunction\")\n\nbindableFunction.OnInvoke = function(number)\n\treturn 2 * number\nend\n\nprint(bindableFunction:Invoke(42)) -- 84\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Purchase (Client)\nDESCRIPTION: This client-side code handles prompting subscription purchases and hiding the purchase button if the player already has a subscription. It uses a `RemoteFunction` to check the subscription status on the server and `MarketplaceService:PromptSubscriptionPurchase` to initiate the purchase flow. The button is hidden if the subscription has already been purchased.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/subscriptions.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- This code should run on the client\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SUBSCRIPTION_ID = \"EXP-11111111\" -- Replace with your subscription ID\n\nlocal getSubscriptionStatusRemote = ReplicatedStorage:WaitForChild(\"GetSubscriptionStatus\")\nlocal purchaseSubscriptionButton = script.Parent.PromptPurchaseSubscription -- Replace with your button\n\n\nlocal function playerHasSubscription()\n    -- Note if your subscription is replacing a game pass, you will need to check if the game pass is owned here too\n\n\tlocal success, result = pcall(function()\n\t\treturn getSubscriptionStatusRemote:InvokeServer(SUBSCRIPTION_ID)\n\tend)\n\n\tif not success then\n\t\tprint(`Error fetching subscription status: {result}`)\n\t\treturn\n\tend\n\n    return result.IsSubscribed\nend\n\n-- Hides the button if the player already has the subscription\nlocal function hideButtonIfPlayerHasSubscription()\n    if playerHasSubscription() then\n        purchaseSubscriptionButton.Visible = false\n    end\nend\n\nlocal function onPromptSubscriptionPurchaseFinished(player: Player, subscriptionId: string, didTryPurchasing: boolean)\n    if didTryPurchasing then\n        -- It can take a while for the subscription to be registered, so we will check to see if the purchase went through in 10 seconds\n        -- and hide the button if it has\n        task.delay(10, hideButtonIfPlayerHasSubscription)\n    end\nend\n\n-- If the player already has the subscription, we don't want to show the button at all\nhideButtonIfPlayerHasSubscription()\n\npurchaseSubscriptionButton.Activated:Connect(function()\n    MarketplaceService:PromptSubscriptionPurchase(Players.LocalPlayer, SUBSCRIPTION_ID)\n\n    -- If the player already has the subscription, hide the button\n    hideButtonIfPlayerHasSubscription()\nend)\n\nMarketplaceService.PromptSubscriptionPurchaseFinished:Connect(onPromptSubscriptionPurchaseFinished)\n```\n\n----------------------------------------\n\nTITLE: Defining Winner Name Retrieval in Roblox Lua\nDESCRIPTION: This Lua function in the PlayerManager module retrieves the winner's name from the active players table. It checks if there's a player remaining, and returns their name, or an error message if no player is found. This function is crucial for determining the game's winner at the end of each match.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.getWinnerName()\n  local winningPlayer = activePlayers[1]\n\n  if winningPlayer then\n    return winningPlayer.Name\n  else\n    return \"Error: No winning player found\"\n  end\nend\n\n-- Events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n```\n\n----------------------------------------\n\nTITLE: Updating Player State in Roblox Luau\nDESCRIPTION: This function `onPlayerStateChanged` manages the transition of player state in Roblox. When player state changes to `Playing`, it sets `blasterStateServer` appropriately and schedules removal of any protective force fields, influencing gameplay dynamics.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onPlayerStateChanged(player: Player, newPlayerState: string)\\n\\t-- Blaster state is 'Ready' only if player state is 'Playing'\\n\\tlocal newBlasterState = if newPlayerState == PlayerState.Playing then BlasterState.Ready else BlasterState.Disabled\\n\\n\\t-- Schedule the destroy force field logic when the player begins playing\\n\\tif newPlayerState == PlayerState.Playing then\\n\\t\\tscheduleDestroyForceField(player)\\n\\tend\\n\\n\\tplayer:SetAttribute(PlayerAttribute.blasterStateServer, newBlasterState)\\nend\n```\n\n----------------------------------------\n\nTITLE: Tweening Size and Transparency of UI Elements in Roblox Lua\nDESCRIPTION: Animates an ImageLabel by changing its size to 40% of its parent container while increasing its transparency to 0.8 over 2 seconds. Includes a UIAspectRatioConstraint to maintain the aspect ratio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal aspectRatioConstraint = Instance.new(\"UIAspectRatioConstraint\")\naspectRatioConstraint.Parent = object\n\nlocal targetSize = UDim2.new(0.4, 0, 0.4, 0)\nlocal targetTransparency = 0.8\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Size = targetSize, ImageTransparency = targetTransparency})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Configuring AlignPosition Attachment Mode\nDESCRIPTION: Shows how to set the Mode property to control whether one or two attachments are used for position alignment\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/constraints/align-position.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nalignPosition.Mode = Enum.PositionAlignmentMode.TwoAttachment -- Default, uses both attachments\nalignPosition.Mode = Enum.PositionAlignmentMode.OneAttachment -- Uses single attachment and Position property\n```\n\n----------------------------------------\n\nTITLE: Connecting matchEnd Event to stopTimer (Lua)\nDESCRIPTION: This snippet connects the `matchEnd` event to the `stopTimer` function. This ensures that the timer is stopped whenever the match ends, regardless of the reason. This connection helps prevent errors that might occur if the timer continues to run after the match has concluded.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nmatchStart.Event:Connect(startTimer)\nmatchEnd.Event:Connect(stopTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Initializing Random User Name Colors in Lua\nDESCRIPTION: Customizes chat user name colors by assigning random RGB colors from a predefined color table based on user ID\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/chat-window.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal chatWindowConfiguration = TextChatService.ChatWindowConfiguration\n\nlocal nameColors = {\n\tColor3.fromRGB(255, 0, 0),\n\tColor3.fromRGB(0, 255, 0),\n\tColor3.fromRGB(0, 0, 255),\n\tColor3.fromRGB(255, 255, 0),\n}\n\nTextChatService.OnChatWindowAdded = function(message: TextChatMessage)\n\tlocal properties = chatWindowConfiguration:DeriveNewMessageProperties()\n\n\tlocal textSource = message.TextSource\n\tif textSource then\n\t\tlocal index: number = (textSource.UserId % #nameColors) + 1\n\t\tlocal randomColor: Color3 = nameColors[index]\n\n    \tproperties.PrefixTextProperties = chatWindowConfiguration:DeriveNewMessageProperties()\n\t\tproperties.PrefixTextProperties.TextColor3 = randomColor\n\tend\n\n\treturn properties\nend\n```\n\n----------------------------------------\n\nTITLE: Clustering Example for Player Categorical Signal\nDESCRIPTION: An example implementation of the clustering formula using Guild as the attribute. It calculates the ratio of players in the server who belong to the same Guild as the joining player.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal num_players_same_Guild = 15\nlocal occupancy = 19\n\nlocal score = num_players_same_Guild / occupancy\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Batch Weapon Removal in Roblox Lua\nDESCRIPTION: This Lua function, part of the PlayerManager module, iterates through all active players to remove their weapons. It calls an individual weapon removal function for each player, ensuring the game state is reset before starting a new match.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.removeAllWeapons()\n  for playerKey, whichPlayer in activePlayers do\n    removePlayerWeapon(whichPlayer)\n  end\nend\n\n-- Events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Prompting User for Inventory Access - Avatar Editor Service in Lua\nDESCRIPTION: This code snippet demonstrates how to prompt the user for permission to access their inventory. It waits for the user's response to the prompt and checks if access was granted.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\n\nAvatarEditorService:PromptAllowInventoryReadAccess()\n\nlocal result = AvatarEditorService.PromptAllowInventoryReadAccessCompleted:Wait()\n\nif result == Enum.AvatarPromptResult.Success then\n  -- Access granted!\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Text Input Collection for Filtering in Roblox\nDESCRIPTION: A client-side script that collects text from a TextBox and sends it to the server for filtering when the user completes their input. The script configures the TextBox appearance and handles the FocusLost event to capture submitted text.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/text-filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal textBox = script.Parent\ntextBox.ClearTextOnFocus = false\ntextBox.PlaceholderText = \"...\"\ntextBox.TextXAlignment = Enum.TextXAlignment.Left \ntextBox.TextScaled = true\n\n-- RemoteEvent to send text input to server for filtering\nlocal inputRemoteEvent = ReplicatedStorage:FindFirstChild(\"InputRemoteEvent\")\n\n-- Event handler for focus lost and enter being pressed\nlocal function onFocusLost(enterPressed, inputObject)\n\tif enterPressed then\n\t\tprint(\"SUBMITTED:\", textBox.Text)\n\t\tif inputRemoteEvent then\n\t\t\tinputRemoteEvent:FireServer(textBox.Text)\n\t\tend\n\tend\nend\n\ntextBox.FocusLost:Connect(onFocusLost)\n```\n\n----------------------------------------\n\nTITLE: Adding Leaderboard Structure in Lua\nDESCRIPTION: The code adds a folder named 'leaderstats' to represent the leaderboard. This folder is parented to the player within the player join function, which is necessary for the leaderboard to function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerJoin(player)\n local leaderstats = Instance.new(\"Folder\")\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Messages Between Actors in Roblox Lua\nDESCRIPTION: Demonstrates how to send messages to an actor using the Actor messaging API with a specific topic.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/multithreading.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Send two messages to the worker actor with a topic of \"Greeting\"\nlocal workerActor = Workspace.WorkerActor\nworkerActor:SendMessage(\"Greeting\", \"Hello World!\")\nworkerActor:SendMessage(\"Greeting\", \"Welcome\")\n\nprint(\"Sent messages\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Avatar with Body Parts (Lua)\nDESCRIPTION: This function publishes an avatar using specified body part instances and player information. It constructs a humanoid description, sets body part details, and attempts to create the avatar asynchronously using the AvatarCreationService. Successful uploads or errors are printed for verification.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/in-experience-creation.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nexport type BodyPartInfo = {\n\tbodyPart: Enum.BodyPart,\n\tinstance: Instance --Folder with Created MeshParts\n}\nexport type BodyPartList = {BodyPartInfo}\n\nlocal function publishAvatar(bodyPartInstances: BodyPartList, player: Player, tokenId: string)\n\tlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n\tfor _, bodyPartInfo in bodyPartInstances do\n\t\tlocal bodyPartDescription = Instance.new(\"BodyPartDescription\")\n\t\tbodyPartDescription.Instance = bodyPartInfo.instance\n\t\tbodyPartDescription.BodyPart = bodyPartInfo.bodyPart\n\t\tbodyPartDescription.Parent = humanoidDescription\n\tend\n\n\tlocal success, result, bundleIdOrErrorMessage, outfitId = pcall(function()\n\t\treturn AvatarCreationService:PromptCreateAvatarAsync(tokenId, player, humanoidDescription)\n\tend)\n\tif success then\n\t\tif result == Enum.PromptCreateAvatarResult.Success then\n\t\t\tprint(\"Successfully uploaded with BundleId: \", bundleIdOrErrorMessage)\n\t\t\tprint(\"Successfully uploaded with OutfitId: \", outfitId)\n\t\telse\n\t\t\tprint(\"Unsuccessfully uploaded with error message:\", bundleIdOrErrorMessage)\n\t\tend\n\telse\n\t\tprint(\"Avatar creation unsuccessful\")\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Example Obtain Token Response in JSON\nDESCRIPTION: JSON response example showcasing tokens such as access token and refresh token obtained from the OAuth 2.0 token endpoint.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"...\",\n  \"refresh_token\": \"...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 899,\n  \"scope\": \"universe-messaging-service:publish\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mobile Button Properties in Roblox\nDESCRIPTION: This Lua snippet demonstrates adjusting on-screen mobile button properties using the `ContextActionService`. It sets a title, an image, and a position for the button using the respective functions. Users can customize the button's visual representation and placement in the UI.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mobile.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Set button label to \"Talk\"\nContextActionService:SetTitle(\"Interact\", \"Talk\")\n-- Set button image\nContextActionService:SetImage(\"Interact\", \"rbxassetid://104919049969988\")\n-- Set button position\nContextActionService:SetPosition(\"Interact\", UDim2.new(1, -70, 0, 10))\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Backgrounds for Photo Booth - Lua\nDESCRIPTION: This snippet updates the backgrounds of the Photo Booth by providing an array of asset IDs. The backgrounds should be in a 16:9 aspect ratio. Ensures that the photos captured have an appealing background environment. Requires the ReplicatedStorage service and the PhotoBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/photo-booth.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.setBackgrounds({\n\t\"rbxassetid://7018713114\",\n\t\"rbxassetid://950538356\",\n})\n```\n\n----------------------------------------\n\nTITLE: Playing Animations on Player Interaction\nDESCRIPTION: This ModuleScript, named `PlayerAnimationFeedback`, manages the loading and playing of a specific animation on a player's character. It defines functions for loading the animation from its asset ID and playing it with a specified fade time. The animation ID (`ANIMATION_ID`) needs to be replaced with the actual asset ID of the desired animation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/adding-animations.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Used with \"TouchPartRegister\" script to play animations for a player\nlocal PlayerAnimationFeedback = {}\n\nlocal feedbackAnimationTrack\nlocal ANIMATION_FADE = 0.3\nlocal ANIMATION_ID = \"rbxassetid://YOUR_ANIMATION\"\n\n-- Function to load animation onto player's character\nfunction PlayerAnimationFeedback:LoadAnimation(humanoid)\n\tlocal feedbackAnimation = Instance.new(\"Animation\")\n\tfeedbackAnimation.AnimationId = ANIMATION_ID\n\tfeedbackAnimationTrack = humanoid.Animator:LoadAnimation(feedbackAnimation)\n\tfeedbackAnimationTrack.Priority = Enum.AnimationPriority.Action\n\tfeedbackAnimationTrack.Looped = false\nend\n\n-- Function to play the animation\nfunction PlayerAnimationFeedback:PlayAnimation()\n\tfeedbackAnimationTrack:Play(ANIMATION_FADE)\n\ttask.wait(feedbackAnimationTrack.Length)\nend\n\nreturn PlayerAnimationFeedback\n```\n\n----------------------------------------\n\nTITLE: Triggering Audio Using AudioPlayer in Lua\nDESCRIPTION: This code snippet demonstrates how to trigger an audio playback from a script in Roblox. It connects an event to the 'Play' method of an AudioPlayer object. The snippet assumes that the script is parented to an AudioPlayer object to facilitate audio playback through an event-driven model.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/audio/objects.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal audio = script.Parent\nlocal something = ...\nsomething.SomeEvent:Connect(function()\n    audio:Play()\nend)\n```\n\n----------------------------------------\n\nTITLE: Shadowing Variables with Nil Assignment in Luau\nDESCRIPTION: This snippet reveals how shadowing works with local variables in Luau. The 'fruitName' variable is first declared with a value, then redeclared within a function scope, allowing for reassignment in descendant levels without affecting the original variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/scope.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruitName = \"Chocolate\"\nlocal fruitTable = {\n\tLemon = \"Yellow\",\n\tApple = \"Red\",\n\tOrange = \"Orange\"\n}\n\nlocal function getFruitByColor(color)\n\tlocal fruitName\n\tfor key, value in fruitTable do\n\t\tif value == color then\n\t\t\tfruitName = key\n\t\tend\n\tend\n\treturn fruitName\nend\n\nlocal fruit = getFruitByColor(\"Yellow\")\nprint(fruit) -- Lemon\nprint(fruit .. \", not \" .. fruitName) -- Lemon, not Chocolate\n```\n\n----------------------------------------\n\nTITLE: Requiring Module Scripts in GameManager (Lua)\nDESCRIPTION: This snippet retrieves the ModuleScripts folder and requires the MatchManager and GameSettings module scripts.  It uses `WaitForChild` to ensure the folder exists before attempting to access it. The `require()` function imports the modules, allowing the GameManager script to use their functions and variables.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n```\n\n----------------------------------------\n\nTITLE: Getting HumanoidDescription from Player Character\nDESCRIPTION: Creates a HumanoidDescription based on a player character's current properties by finding the Humanoid and getting its applied description.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\n\nlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n\nif humanoid then\n\thumanoidDescription = humanoid:GetAppliedDescription()\nend\n```\n\n----------------------------------------\n\nTITLE: Tracking Gameplay Source Event in Lua\nDESCRIPTION: Log economy events for resources earned during gameplay, tracking player currency gains across different game levels\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/economy-events.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\n-- After level 1 completion\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Source,\n    \"Coins\", -- Currency name\n    50, -- Amount earned\n    50, -- Current balance\n    Enum.AnalyticsEconomyTransactionType.Gameplay.Name -- Transaction type\n)\n\n-- After level 2 completion\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Source,\n    \"Coins\", -- Currency name\n    50, -- Amount earned\n    100, -- Balance after transaction\n    Enum.AnalyticsEconomyTransactionType.Gameplay.Name -- Transaction type\n)\n```\n\n----------------------------------------\n\nTITLE: Unpacking Array Arguments in Lua Variadic Functions\nDESCRIPTION: Shows how to use the global unpack() function to pass table elements as individual arguments to variadic functions like print().\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal squares = {1, 4, 9, 16, 25}\nprint(\"The first 5 square numbers are:\", unpack(squares))\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Feedback Functionality in Roblox UI\nDESCRIPTION: This Lua script configures a button to provide sensory feedback by playing an audio jingle and visually animating the button when pressed. It utilizes TweenService to animate the button's color and position, enhancing user interaction feedback in the game environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-2D-audio.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal buttonGui = script.Parent\nlocal buttonImageButton = buttonGui.ButtonFrame.ButtonImageButton\nlocal buttonAudioPlayer = buttonGui.AudioPlayer\n\nlocal tweenInfo = TweenInfo.new(.2, Enum.EasingStyle.Exponential)\n\nlocal buttonTweenByIsPressed = {\n    -- Pressed\n    [true] = TweenService:Create(buttonImageButton, tweenInfo, {\n        Position = buttonImageButton.Position + UDim2.fromScale(0, .1),\n        ImageColor3 = Color3.fromRGB(117, 255, 255),\n    }),\n\n    -- Default\n    [false] = TweenService:Create(buttonImageButton, tweenInfo, {\n        Position = buttonImageButton.Position,\n        ImageColor3 = Color3.fromRGB(255, 255, 255),\n    }),\n}\n\nlocal function onIsPlayingChanged()\n    local isPlaying = buttonAudioPlayer.IsPlaying\n    local tween = buttonTweenByIsPressed[isPlaying]\n    tween:Play()\nend\nonIsPlayingChanged()\nbuttonAudioPlayer:GetPropertyChangedSignal(\"IsPlaying\"):Connect(onIsPlayingChanged)\nbuttonAudioPlayer.Ended:Connect(onIsPlayingChanged)\n\nbuttonImageButton.Activated:Connect(function(_hit)\n    buttonAudioPlayer:Play()\nend)\n```\n\n----------------------------------------\n\nTITLE: Match Manager Script in Lua\nDESCRIPTION: Module for managing match preparation, including sending players to the match.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\n\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\nend\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Setting Attribute Values\nDESCRIPTION: Demonstrates how to create or modify an attribute using SetAttribute() method.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\ncabbage:SetAttribute(\"Harvestable\", true)\n```\n\n----------------------------------------\n\nTITLE: Performing a Union of Two Sets in Lua\nDESCRIPTION: This code illustrates performing a union operation between two sets using the metatable `__add` method. It merges the items from both sets, ensuring no duplicates. It relies on Lua's metatable functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nfunction Set:__add(otherSet)\n\tlocal result = Set.new()\n\tfor entry in self do\n\t\tresult[entry] = true\n\tend\n\tfor entry in otherSet do\n\t\tresult[entry] = true\n\tend\n\treturn result\nend\n\nlocal sweetFruits = Set.new({\"Apple\", \"Mango\", \"Cherry\", \"Peach\"})\nlocal sourFruits = Set.new({\"Lemon\", \"Lime\"})\n\nlocal allFruits = sweetFruits + sourFruits\nallFruits:output() -- Peach, Lime, Apple, Cherry, Lemon, Mango\n```\n\n----------------------------------------\n\nTITLE: Implementing Restricted Spawn Areas in Lua\nDESCRIPTION: Script that prevents players from spawning in restricted areas by using CollectionService tags to detect restricted zones and validate spawn points.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/spawn-with-friends.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nlocal SpawnWithFriends = require(ReplicatedStorage:WaitForChild(\"SpawnWithFriends\"))\n\nlocal function validator(playerToTeleport, destinationPlayer, teleportationPoint)\n\t-- Iterate through all tagged parts\n\tfor _, area in CollectionService:GetTagged(\"RestrictedSpawnArea\") do\n\t\tlocal relativePosition = area.CFrame:PointToObjectSpace(teleportationPoint.Position)\n\t\tlocal size = area.Size\n\t\tlocal inXBounds = relativePosition.X < size.X / 2 and relativePosition.X > -size.X / 2\n\t\tlocal inZBounds = relativePosition.Z < size.Z / 2 and relativePosition.Z > -size.Z / 2\n\t\tif inXBounds and inZBounds then\n\t\t\treturn false  -- Spawn destination is within restricted area; abort teleportation\n\t\tend\n\tend\n\treturn true  -- Spawn destination doesn't overlap any restricted area; proceed with teleportation\nend\n\nSpawnWithFriends.setTeleportationValidator(validator)\n```\n\n----------------------------------------\n\nTITLE: Managing Player Attribute Connections in Roblox Luau\nDESCRIPTION: The `PlayerStateHandler` script manages connections to `GetAttributeChangedSignal` for tracking player attribute changes. Connections are stored in `attributeChangedConnectionByPlayer` for each player to properly disconnect the signal when players leave, helping manage memory usage in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal attributeChangedConnectionByPlayer = {}\\nlocal function onPlayerAdded(player: Player)\\n\\n\\t-- Handle all future updates to player state\\n\\tattributeChangedConnectionByPlayer[player] = player\\n\\t\\t:GetAttributeChangedSignal(PlayerAttribute.playerState)\\n\\t\\t:Connect(function()\\n\\t\\t\\tlocal newPlayerState = player:GetAttribute(PlayerAttribute.playerState)\\n\\t\\t\\tonPlayerStateChanged(player, newPlayerState)\\n\\tend)\\nend\\n\\n-- Disconnect from the attribute changed connection when the player leaves\\nlocal function onPlayerRemoving(player: Player)\\n\\tif attributeChangedConnectionByPlayer[player] then\\n\\t\\tattributeChangedConnectionByPlayer[player]:Disconnect()\\n\\t\\tattributeChangedConnectionByPlayer[player] = nil\\n\\tend\\nend\n```\n\n----------------------------------------\n\nTITLE: Round Winner Check in Roblox Lua\nDESCRIPTION: Logic for checking if a team has won the round and notifying all players of the round results.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n\t\t-- Check if the round has finished after each score\n\t\tlocal team: Team\n\t\tlocal score: number = 0\n\n\t\twhile score < TEAM_SCORE_LIMIT do\n\t\t\tteam, score = Scoring.teamScoreChanged:Wait()\n\t\tend\n\n\t\t-- Display winning team\n\t\tfor _, player in Players:GetPlayers() do\n\t\t\troundWinnerRemote:FireClient(player, team, player.Team)\n\t\tend\n```\n\n----------------------------------------\n\nTITLE: Defining Start Timer Function in Lua\nDESCRIPTION: This snippet defines a function `startTimer()` which starts the match timer and connects the `timeUp` function to the timer's finished event, so `timeUp` runs when the timer expires.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Local Functions\nlocal function startTimer()\n\tprint(\"Timer started\")\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\nend\n```\n\n----------------------------------------\n\nTITLE: Obtain Token with Authorization Code using cURL\nDESCRIPTION: Example of a cURL command to obtain a set of tokens utilizing an authorization code. Requires client ID and secret, authorization code, and PKCE code verifier.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/oauth/v1/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=840974200211308101' \\\n--data-urlencode 'client_secret=RBX-CR9...St12L' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'code=yCnq4ofX1...XmGpdx'\n```\n\n----------------------------------------\n\nTITLE: Checking Voice Chat Status in Lua Client Script\nDESCRIPTION: Demonstrates how to verify if voice chat is enabled for the local player using IsVoiceEnabledForUserIdAsync method in a Roblox LocalScript\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/voice-chat.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nloval VoiceChatService = game:GetService(\"VoiceChatService\")\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal success, enabled = pcall(function()\n\treturn VoiceChatService:IsVoiceEnabledForUserIdAsync(localPlayer.UserId)\nend)\nif success and enabled then\n\tprint(\"Voice chat enabled!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Data from Data Store\nDESCRIPTION: This snippet demonstrates the process of removing an entry from a data store using the RemoveAsync method. It shows how to capture the removed value and handle errors using pcall before proceeding.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/index.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal nicknameStore = DataStoreService:GetDataStore(\"Nicknames\")\n\nlocal success, removedValue = pcall(function()\n\treturn nicknameStore:RemoveAsync(\"User_1234\")\nend)\nif success then\n\tprint(removedValue)\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting to itemRemoved Event in Roblox MerchBooth\nDESCRIPTION: Shows how to connect to the itemRemoved event which fires when an item is removed through removeItem, providing the asset ID of the removed item.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.itemRemoved:Connect(function(assetId)\n\tprint(\"Item removed with asset ID of\", assetId)\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Connection - LocalScript\nDESCRIPTION: This snippet sets up a connection to a remote event in Roblox and prints the type of each key in a passed table to ensure keys are converted to strings. It requires the ReplicatedStorage service and a remote event to function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onEventFire(passedTable)\n\tfor k, v in passedTable do\n\t\tprint(typeof(k))  --> string\n\tend\nend\n\n-- Connect function to event\nremoteEvent.OnClientEvent:Connect(onEventFire)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Settings for Roblox Scavenger Hunt\nDESCRIPTION: Shows how to configure client-side settings for the scavenger hunt using the configureClient API. Demonstrates customization of modal text, token rotation speed, navigation beam properties, and modal appearance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.configureClient({\n\tinfoModalText = \"Welcome to my Scavenger Hunt!\",\n\tcompleteModalText = \"Thanks for playing my Scavenger Hunt!\",\n\ttokenRotationSpeed = 60,\n\tnavigationBeam = {\n\t\tlightEmission = 1\n\t},\n\tmodal = {\n\t\ttextSize = 14\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Player Fired Laser Function in ServerLaserManager - Lua\nDESCRIPTION: This snippet defines a function that is called when a LaserFired event occurs. It retrieves the player's tool handle and fires an event to all clients with the necessary parameters to render the laser beam.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nlocal function playerFiredLaser(playerFired, endPosition)\n\tlocal toolHandle = getPlayerToolHandle(playerFired)\n\tif toolHandle then\n\t\teventsFolder.LaserFired:FireAllClients(playerFired, toolHandle, endPosition)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting Items into Arrays in Luau\nDESCRIPTION: Demonstrates two methods for appending elements to the end of Luau arrays using `table.insert()` and direct indexing. It also shows how to insert elements at specific indices.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"A string\", 3.14159}\n\ntable.insert(testArray, \"New string\")\ntestArray[#testArray+1] = \"Another new string\"\n\nprint(testArray[3]) -- New string\nprint(testArray[4]) -- Another new string\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"First item\", \"Next item\"}\n\ntable.insert(testArray, 2, \"NEW ITEM #2\")\n\nprint(testArray[1]) -- First item\nprint(testArray[2]) -- NEW ITEM #2\nprint(testArray[3]) -- Next item\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag-Based Object Management in Roblox\nDESCRIPTION: Using CollectionService to find and manage tagged objects for custom behavior implementation. The system uses an Init function to find initially tagged objects and signal handlers for runtime changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/main-design-requirements.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.CollectionService.GetInstanceAddedSignal\nClass.CollectionService.GetInstanceRemovedSignal\n```\n\n----------------------------------------\n\nTITLE: Creating a Restaurant Soup Simulator using pairs() and ipairs() in Luau\nDESCRIPTION: A practical example that uses pairs() to check selected ingredients and ipairs() to print the order, demonstrating table manipulation and iteration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal menu = {\n\tcabbage = false,\n\tbeef = false,\n\ttomato = false,\n\tnoodles = false,\n}\n\n-- Customer's soup\nlocal selectedIngredients = {}\n\n-- Adds customer's choices to their soup\nfor menuChoice, value in pairs(menu) do\n\tif value then\n\t\ttable.insert(selectedIngredients, menuChoice)\n\tend\nend\n\n-- Prints soup order from \"selectedIngredients\"\nif #selectedIngredients > 0 then\n\tprint(\"You ordered soup with: \")\n\tfor index, soupIngredient in ipairs(selectedIngredients) do\n\t\tprint(soupIngredient)\n\tend\nelse\n\tprint(\"Nothing was selected. Are you not hungry?\")\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Hue Rotator with UIDragDetector Rotation Property\nDESCRIPTION: This script implements a color hue rotator by monitoring changes to a UIDragDetector's DragRotation property. It converts the rotation angle to a hue value and updates the handle's color accordingly, creating an interactive color selector.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/ui-drag-detectors.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal handle = script.Parent.Parent  -- UI element to drag\nlocal uiDragDetector = handle:FindFirstChildWhichIsA(\"UIDragDetector\")\n\nuiDragDetector.DragStyle = Enum.UIDragDetectorDragStyle.Rotate  -- Set drag style to rotate\n\nlocal function changeHue()\n\tlocal currAngle = (math.fmod(handle.Rotation, 360)) / 360\n\tif currAngle < 0 then\n\t\tcurrAngle += 1\n\tend\n\thandle.BackgroundColor3 = Color3.fromHSV(currAngle, 1, 1)\nend\n\n-- Initially set hue to handle rotation\nchangeHue()\n\n-- Connect function to GetPropertyChangedSignal() of the detector's drag rotation\nuiDragDetector:GetPropertyChangedSignal(\"DragRotation\"):Connect(changeHue)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Chat Animation Event in Roblox Lua\nDESCRIPTION: Example shows how to connect to the onChatAnimationPlayed event in a LocalScript. The event handler receives animationId and triggerWord parameters when a chat animation plays. Requires the SocialInteractions module from ReplicatedStorage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/social-interactions.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\nSocialInteractions.onChatAnimationPlayed:Connect(function(animationId, triggerWord)\n\tprint(animationId, triggerWord)\nend)\n```\n\n----------------------------------------\n\nTITLE: Evaluating if a variable exists in Luau\nDESCRIPTION: Script that checks if a variable was successfully assigned a reference to a part. If the part exists in the workspace, the condition evaluates as true and changes another part's color.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/intro-to-if-statements.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal mysteryPart = workspace.MysteryPart\n\n-- Evaluates as true if MysteryPart was successfully assigned\nif mysteryPart then\n\tworkspace.LieDetector.Color = Color3.fromRGB(0, 255, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Language Signal Score in Lua\nDESCRIPTION: This snippet computes the language signal score, measuring the ratio of players on the server who have the same language setting as the joining player.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlanguageSignalScore = (# players with same language setting as joining player) / (# players on the server)\n```\n\n----------------------------------------\n\nTITLE: Implementing Recurring Shop Funnel Events in Roblox\nDESCRIPTION: Shows how to track multiple steps in a recurring shop funnel using a generated funnel session ID to distinguish between different user shopping sessions\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/funnel-events.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\nlocal HttpService = game:GetService(\"HttpService\")\n\nfunnelSessionId = HttpService:GenerateGUID()\n\n-- Log when the user opens the store\nAnalyticsService:LogFunnelStepEvent(\n    player,\n    \"ArmoryCheckout\", -- Funnel name used to group steps together\n    funnelSessionId, -- Funnel session id for this unique checkout session\n    1, -- Step number\n    \"Opened Store\" -- Step name\n)\n\n-- Log when the user views an item\nAnalyticsService:LogFunnelStepEvent(\n    player,\n    \"ArmoryCheckout\", -- Funnel name used to group steps together\n    funnelSessionId, -- Funnel session id for this unique checkout session\n    2, -- Step number\n    \"Viewed Item\" -- Step name\n)\n\n-- Log when the user views adds to cart\nAnalyticsService:LogFunnelStepEvent(\n    player,\n    \"ArmoryCheckout\", -- Funnel name used to group steps together\n    funnelSessionId, -- Funnel session id for this unique checkout session\n    3, -- Step number\n    \"Added to Cart\" -- Step name\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Color Looping Part Script in Lua\nDESCRIPTION: This final script snippet in Lua loops indefinitely, changing a part's color every three seconds. It uses the 'Color3.fromRGB()' method for specifying colors and the 'task.wait()' function for delays between changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\n-- Create a variable to store the part\nlocal loopingPart = workspace.LoopingPart\n\n-- Looping Code\nwhile true do\n\t-- Changes loopingPart's color\n\tloopingPart.Color = Color3.fromRGB(82, 227, 255)\n\t-- Wait 3 seconds before next instruction\n\ttask.wait(3)\n\tloopingPart.Color = Color3.fromRGB(177, 52, 255)\n\ttask.wait(3)\nend\n```\n\n----------------------------------------\n\nTITLE: Apply Avatar Head Shot Thumbnail in Roblox\nDESCRIPTION: This Lua code snippet retrieves the avatar headshot thumbnail of the local player and displays it in an ImageLabel within the game. It uses Players:GetUserThumbnailAsync to fetch the thumbnail and applies a UICorner to crop the image into a circle.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/assets/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player.PlayerGui\nlocal screenGui = Instance.new(\"ScreenGui\")\nscreenGui.Parent = playerGui\n\nlocal imageLabel = Instance.new(\"ImageLabel\")\nimageLabel.AnchorPoint = Vector2.new(0, 0)\nimageLabel.Size = UDim2.new(0, 150, 0, 150)\nimageLabel.Position = UDim2.new(0, 16, 0, 16)\nimageLabel.BorderSizePixel = 0\nimageLabel.BackgroundColor3 = Color3.new(0, 0, 0)\nimageLabel.BackgroundTransparency = 0.8\nimageLabel.Parent = screenGui\n\nlocal success, content, isReady = pcall(function()\n\treturn Players:GetUserThumbnailAsync(player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size352x352)\nend)\nif success then\n\t-- Apply thumbnail content to image label\n\timageLabel.Image = content\n\t-- Crop thumbnail to circle\n\tlocal corner = Instance.new(\"UICorner\")\n\tcorner.CornerRadius = UDim.new(1, 0)\n\tcorner.Parent = imageLabel\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Scavenger Hunt Collection Events in Lua\nDESCRIPTION: Server-side Script that demonstrates how to listen for token collection events and hunt completion events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.collected:Connect(function(player, itemName)\n\tprint(player.DisplayName, itemName)\nend)\n\nScavengerHunt.allCollected:Connect(function(player)\n\tprint(player.DisplayName .. \" completed the hunt!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Renaming Model for Character Testing in Roblox Lua\nDESCRIPTION: Renames an imported character Model to 'StarterCharacter' and moves it to the StarterPlayer folder for playtesting. This allows you to test the character in-game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/import.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal characterModel = game.Workspace.YourImportedModel\ncharacterModel.Name = \"StarterCharacter\"\ncharacterModel.Parent = game.StarterPlayer\n```\n\n----------------------------------------\n\nTITLE: Checking Vibration Support in Roblox Lua\nDESCRIPTION: This snippet checks if a specific gamepad supports vibration using the HapticService from Roblox. It requires the Enum for the gamepad type and returns a boolean indicating support. The functionality is crucial for avoiding errors on gamepads without vibration support.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal HapticService = game:GetService(\"HapticService\")\n\nlocal gamepad = Enum.UserInputType.Gamepad1\nlocal isVibrationSupported = HapticService:IsVibrationSupported(gamepad)\n```\n\n----------------------------------------\n\nTITLE: Implementing Iteration Algorithm in Lua\nDESCRIPTION: Demonstrates an iteration algorithm using a for loop to create a countdown timer.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/coding-concept-algorithms.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfor countDown = 10, 1, -1 do\n\ttime -= 1\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Timer for Timed Bridge - Lua\nDESCRIPTION: This snippet defines the behavior of a countdown timer for a bridge in Roblox. It initializes the bridge's properties and counts down from a defined duration, changing the bridge's walkability once the timer ends. The snippet is dependent on the Roblox environment, specifically the workspace setup with required parts and GUI elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal bridge = script.Parent\n-- Gets the button as it's typed in the Explorer\nlocal button = workspace.ButtonBridge\n\n-- Gets the part for the display\nlocal timerPart = workspace.TimerDisplay\n-- Gets the Text that will display the timer\nlocal timerText = timerPart.SurfaceGui.TextLabel\n\n-- How long players have to cross the bridge\nlocal timerDuration = 5\nlocal timerActive = false\n\nlocal function startTimer()\n    print(\"Countdown started\")\n\ttimerActive = true\n\tbridge.Transparency = 0\n\tbridge.CanCollide = true\n\n\t-- For loop that counts down from timerDuration\n\tfor count = timerDuration, 0, -1 do\n\t\ttimerText.Text = count\n\t\ttask.wait(1)\n\tend\n\n\t-- Make the bridge not walkable\n\tbridge.Transparency = 0.8\n\tbridge.CanCollide = false\n\ttimerText.Text = \"\"\n\ttimerActive = false\n\nend\n\nlocal function buttonPressed(partTouched)\n\tlocal character = partTouched.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tprint(\"part touched\")\n\n\tif humanoid and timerActive == false then\n\t\tprint(\"starting timer\")\n\t\tstartTimer()\n\tend\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI Visibility in Lua\nDESCRIPTION: Controls whether other GUIs should be hidden when the merch booth appears. Modifies the default behavior of hiding ScreenGuis and CoreGuis.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.configure({\n\thideOtherUis = false\n})\n```\n\n----------------------------------------\n\nTITLE: Animation ID Mapping in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to map animation IDs from an original creator to new animation IDs after an experience transfer. It checks if the game is running in Studio or if the game's creator type is a group and the creator ID matches a specific value. If these conditions are met, it maps the old animation IDs to new IDs using a lookup table.  This ensures that animations continue to function correctly after the transfer.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/experience-ownership-transfer.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Maps animation IDs that belong to the original creator to animation IDs\n-- that belong to the new creator.\nlocal transferAnimationMap = {\n\t[\"6406676108\"] = 14292200298,\n\t[\"6438293322\"] = 14292082312,\n\t[\"6464978998\"] = 14292224322,\n\t[\"6465240715\"] = 14292226967,\n\t[\"6465244287\"] = 14292229476,\n\t[\"6382318344\"] = 14292213468,\n\t[\"6382564692\"] = 14292207171,\n\t[\"6460651769\"] = 14292098870,\n\t[\"6415507655\"] = 14292218236,\n\t[\"6415509331\"] = 14292221034\n}\n\nfunction mapTransferAnimationId(id)\n\n\t-- If experience has been transferred, maps old animation IDs to new\n\tif game:GetService(\"RunService\"):IsStudio() or\n\t(game.CreatorType == Enum.CreatorType.Group and\n\t\tgame.CreatorId == 32626384) then\n\t\t\tlocal animationId = string.match(id, \"%d+$\")\n\t\t\tlocal mappedId = transferAnimationMap[animationId]\n\n\t\t\tif mappedId then\n\t\t\t\treturn \"rbxassetid://\" .. mappedId\n\t\t\tend\n\tend\n\n\treturn id\nend\n\n-- Creates an animation instance associated with the\n-- specified rbxassetid://<animation_id>\nfunction createAnimation(id)\n\tlocal animation = Instance.new(\"Animation\")\n\tanimation.AnimationId = mapTransferAnimationId(id)\n\n\treturn animation\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Resources with Inform in Lua\nDESCRIPTION: This snippet details how to manage temporary connections and modules within Roblox using the 'Inform' method in Lua. It showcases how to declare temporary connections in an 'OnRun' lifecycle, informing the framework to ensure proper cleanup during scene changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\\n\\tprint(\"OnRun (Server)\")\\n\\n\\tSchema:schedule({\\n\\t\\tStartTimes = {5},\\n\\t\\tOnStart = function(self)\\n\\t\\t\\t-- Initialize temporary heartbeat connection\\n\\t\\t\\tlocal tempConnection = RunService.Heartbeat:Connect(function()\\n\\n\\t\\t\\tend)\\n\\t\\t\\t-- Inform framework of connection\\n\\t\\t\\tSchema:inform(tempConnection)\\n\\t\\tend\\n\\t})\\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\\nlocal RunService = game:GetService(\"RunService\")\\n\\nlocal customModule = require(ReplicatedStorage:WaitForChild(\"CustomModule\"))\\n\\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\\n\\nlocal Schema = EventSequencer.createSchema()\\n\\nSchema.OnRun = function()\\n\\tprint(\"OnRun (Server)\")\\n\\n\\tSchema:schedule({\\n\\t\\tStartTimes = {5},\\n\\t\\tOnStart = function(self)\\n\\t\\t\\t-- Call \"init\" function in custom module\\n\\t\\t\\tcustomModule.init()\\n\\t\\t\\t-- Call \"clean\" function in custom module on scene cleanup\\n\\t\\t\\tSchema:inform(customModule, customModule.clean)\\n\\t\\tend,\\n\\t})\\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\\n\\nlocal CustomModule = {}\\n\\nCustomModule.init = function()\\n\\t-- Initialize heartbeat connection\\n\\tCustomModule.connection = RunService.Heartbeat:Connect(function()\\n\\n\\tend)\\nend\\n\\nCustomModule.clean = function()\\n\\t-- Disconnect and clear heartbeat connection\\n\\tif CustomModule.connection then\\n\\t\\tCustomModule.connection:Disconnect()\\n\\t\\tCustomModule.connection = nil\\n\\tend\\nend\\n\\nreturn CustomModule\n```\n\n----------------------------------------\n\nTITLE: Firing Event with Table Data - LocalScript\nDESCRIPTION: This local script demonstrates firing a remote event with two different types of tables: a numerically indexed table and a dictionary table, utilizing the ReplicatedStorage service.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Numerically indexed table\nlocal inventoryData = {\n\t\"Sword\", \"Bow\"\n}\n-- Dictionary table\nlocal characterData = {\n\tCharName = \"Diva Dragonslayer\",\n\tCharClass = \"Rogue\"\n}\n\nremoteEvent:FireServer(inventoryData)\nremoteEvent:FireServer(characterData)\n```\n\n----------------------------------------\n\nTITLE: Memory Store Size Quota Calculation\nDESCRIPTION: Demonstrates the dynamic memory quota calculation for Roblox experiences based on user count\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/index.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Memory quota formula\n-- 64KB + 1KB * [number of users]\nlocal memoryQuota = 64 + 1 * #users\n```\n\n----------------------------------------\n\nTITLE: Substituting Parameters in Localized Strings in Roblox\nDESCRIPTION: This code shows how to translate strings with dynamic parameters. It uses FormatByKey to insert values into parameter placeholders within translated strings, supporting both indexed and named parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/localize-with-scripting.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\n\n-- Load Translator for \"es\". Wrap the function within a pcall() to protect against failures.\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"es\")\nend)\n\nif res then\n\t-- Set the parameter value in \"Key_Prize_1\" to 100\n\tlocal keyTranslation1 = translator:FormatByKey(\"Key_Prize_1\", {100})\n\tprint(keyTranslation1) -- Expected Output: 100 joyas\n\n\t-- Set multiple parameters to 500 and 100 by name\n\tlocal keyTranslation2 = translator:FormatByKey(\"Key_Prize_2\", {AmountCash=500, NumJewels=100})\n\tprint(keyTranslation2) -- Expected Output: $500.00 dinero y 100 joyas\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up an Infinite While Loop in Lua\nDESCRIPTION: The snippet sets up an infinite while loop in Lua to encapsulate the color-changing logic of a Roblox part. This loop runs indefinitely to continuously execute the instructions between 'do' and 'end'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Changes the color of loopingPart every few seconds\nlocal loopingPart = workspace.LoopingPart\n\n-- Looping Code\nwhile true do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Localizing Image Assets in Roblox with Lua\nDESCRIPTION: This code demonstrates how to fetch and apply localized image assets based on locale. It uses LocalizationService to get a translator for a specific locale (Spanish) and retrieves the localized asset ID from the localization table using a key reference.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/localize-with-scripting.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\n\n-- Local variables\nlocal localizedImageID\nlocal localizedImage = Instance.new(\"ImageLabel\")\n\n-- Load Translator for \"es\". Wrap the function within a pcall() to protect against failures.\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"es\")\nend)\n\nif res then\n\t-- Get asset ID from localization table by referencing the Key\n\tlocalizedImageID = translator:FormatByKey(\"Key_JewelsImage\")\n\t-- Set the image\n\tlocalizedImage.Image = \"rbxassetid://\" .. localizedImageID\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Context Overrides for String Translation in Roblox\nDESCRIPTION: This code demonstrates how to use context overrides when translating strings that have multiple meanings. It uses the object's path in the hierarchy to determine which translation to use from the localization table.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/localize-with-scripting.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Load Translator for \"es\". Wrap the function within a pcall() to protect against failures.\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"es\")\nend)\n\nif res then\n\t-- use Translate function, providing object context and string\n\tlocal sourceTranslation = translator:Translate(Workspace.WindowScreen.SurfaceGui.TextLabel, \"Screen\")\n\tprint(sourceTranslation) -- Expected Output: Mosquitero\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Catalog Button in Lua\nDESCRIPTION: Creates a custom catalog button to replace the default MerchBooth button. Requires the MerchBooth module from ReplicatedStorage and must be placed in a LocalScript under the button object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\n-- Remove the default catalog button\nMerchBooth.toggleCatalogButton(false)\n\n-- Connect the custom button\nscript.Parent.Activated:Connect(function()\n\tMerchBooth.openMerchBooth()\nend)\n```\n\n----------------------------------------\n\nTITLE: Binding User Input Actions for Blaster Controls in Roblox\nDESCRIPTION: Uses ContextActionService to bind mouse and gamepad inputs to the blaster activation function. This code binds the left mouse button and gamepad R2 button to trigger the blaster functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nContextActionService:BindAction(\"_\", onBlasterActivated, false,\n  Enum.UserInputType.MouseButton1,\n  Enum.KeyCode.ButtonR2\n)\n```\n\n----------------------------------------\n\nTITLE: Using Event Handlers in Roblox Luau\nDESCRIPTION: This snippet demonstrates assigning a function as an event handler for the `PlayerAdded` event. The handler function, `onPlayerAdded`, is connected to the event and it prints the name of a player who joins the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/functions.md#2025-04-21_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tprint(player.Name .. \" joined the game!\")\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Creating 3D User Interface with DragDetector in Roblox\nDESCRIPTION: Implements a 3D user interface using DragDetector to control particle emitter properties. The code manages particle size, speed, and color based on drag position along X and Z axes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/3D-drag-detectors.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal model = script.Parent\nlocal slider = model.SliderPart\nlocal originPart = model.OriginPart\nlocal emitter = script.Parent.EmitterPart.ParticleEmitter\n\nlocal dragDetector = slider.DragDetector\ndragDetector.ReferenceInstance = originPart\ndragDetector.MinDragTranslation = Vector3.zero\ndragDetector.MaxDragTranslation = Vector3.new(10, 0, 10)\n\nlocal dragRangeX = dragDetector.MaxDragTranslation.X - dragDetector.MinDragTranslation.X\nlocal dragRangeZ = dragDetector.MaxDragTranslation.Z - dragDetector.MinDragTranslation.Z\n\nlocal MIN_PARTICLE_SIZE = 1\nlocal MAX_PARTICLE_SIZE = 1.5\nlocal MIN_PARTICLE_SPEED = 2.5\nlocal MAX_PARTICLE_SPEED = 5\nlocal COLOR1 = Color3.fromRGB(255, 150, 0)\nlocal COLOR2 = Color3.fromRGB(255, 0, 50)\n\nlocal function updateParticles(emitter)\n\tlocal dragFactorX = (dragDetector.DragFrame.Position.X - dragDetector.MinDragTranslation.X) / dragRangeX\n\tlocal dragFactorZ = (dragDetector.DragFrame.Position.Z - dragDetector.MinDragTranslation.Z) / dragRangeZ\n\n\t-- Adjust particle size and speed based on drag detector X factor\n\temitter.Size = NumberSequence.new{\n\t\tNumberSequenceKeypoint.new(0, 0),\n\t\tNumberSequenceKeypoint.new(0.1, MIN_PARTICLE_SIZE + ((MAX_PARTICLE_SIZE - MIN_PARTICLE_SIZE) * dragFactorX)),\n\t\tNumberSequenceKeypoint.new(1, 0)\n\t}\n\tlocal speed = MIN_PARTICLE_SPEED + ((MAX_PARTICLE_SPEED - MIN_PARTICLE_SPEED) * dragFactorX)\n\temitter.Speed = NumberRange.new(speed, speed * 1.2)\n\t-- Adjust particle color based on drag detector Z factor\n\tlocal color = COLOR2:Lerp(COLOR1, dragFactorZ)\n\temitter.Color = ColorSequence.new{\n\t\tColorSequenceKeypoint.new(0, color),\n\t\tColorSequenceKeypoint.new(1, color)\n\t}\nend\n\ndragDetector:GetPropertyChangedSignal(\"DragFrame\"):Connect(function()\n\tupdateParticles(emitter)\nend)\n```\n\n----------------------------------------\n\nTITLE: Removing Data from a Sorted Map\nDESCRIPTION: Removes a specified key from the sorted map using the RemoveAsync method, providing a way to clear data efficiently.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/sorted-map.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n// Example for removing a key (implementation not provided in the text)\n```\n\n----------------------------------------\n\nTITLE: Connecting the Event Handler\nDESCRIPTION: This Lua code snippet connects the `onCoinTouched` event handler to each coin's `Touched` event. It loops through all the coins and attaches the handler to the `Touched` event of each coin using `Connect`. It also sets the `Enabled` attribute of each coin to `true`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/script-game-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfor _, coin in coins do\n   coin:SetAttribute(\"Enabled\", true)\n   coin.Touched:Connect(function(otherPart)\n      onCoinTouched(otherPart, coin)\n   end)\n```\n\n----------------------------------------\n\nTITLE: Reading Event ID from GameJoinContext in Roblox Lua\nDESCRIPTION: This script detects when players join an experience through an event entry point by reading the event ID from the player's GameJoinContext. This allows developers to identify players participating in specific events and customize their experience accordingly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/experience-events.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tlocal source = player:GetJoinData()\n\t-- Check if the provided source is valid\n\tif source then\n\t\t-- Read eventId from GameJoinContext\n\t\tlocal eventId = source.GameJoinContext.EventId\n\n\t\tif eventId then\n\t\t\tprint(player.Name, \"joined from the event:\", eventId)\n\t\tend\n\tend\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Window Display in Roblox Lua\nDESCRIPTION: Creates a custom chat window display system that listens for incoming messages and creates or updates TextLabels for each message. Handles message status and styling for outgoing messages differently.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/simple-custom-frontend-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\n-- Function to create a new text label for each message received\nlocal function addMessageGui(textChatMessage: TextChatMessage)\n\tlocal isOutgoingMessage = textChatMessage.Status == Enum.TextChatMessageStatus.Sending\n\n\tlocal parent = script.Parent\n\n\tlocal originalLabel = parent:FindFirstChild(textChatMessage.MessageId)\n\tif originalLabel then\n\t\toriginalLabel.Text = textChatMessage.Text\n\t\toriginalLabel.BackgroundTransparency = if isOutgoingMessage then 0.5 else 0\n\telse\n\t\tlocal textLabel = Instance.new(\"TextLabel\")\n\t\ttextLabel.BorderSizePixel = 0\n\t\ttextLabel.Font = Enum.Font.BuilderSans\n\t\ttextLabel.TextSize = 18\n\t\ttextLabel.TextXAlignment = Enum.TextXAlignment.Left\n\t\ttextLabel.BackgroundTransparency = if isOutgoingMessage then 0.5 else 0\n\t\ttextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)\n\t\ttextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)\n\t\ttextLabel.Name = textChatMessage.MessageId\n\t\ttextLabel.AutomaticSize = Enum.AutomaticSize.XY\n\t\ttextLabel.Text = textChatMessage.Text\n\t\ttextLabel.Parent = parent\n\tend\nend\n\n-- Start listening for incoming messages\nTextChatService.MessageReceived:Connect(addMessageGui)\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request for XML Place File using cURL in Bash\nDESCRIPTION: This Bash snippet sends a POST request using cURL to the Roblox API to publish a place using an XML file. It requires an API key and the Universe and Place IDs. The content type must be set to 'application/xml', and the place file's path is needed. It uploads a .rbxlx place file.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-place-publishing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --verbose --location POST 'https://apis.roblox.com/universes/v1/{universeId}/places/{placeId}/versions?versionType=Published' \\\n   --header 'x-api-key: <your-api-key>' \\\n   --header 'Content-Type: application/xml' \\\n   --data-binary @/home/placefiles/place1.rbxlx\n```\n\n----------------------------------------\n\nTITLE: Declaring Events in MatchManager in Lua\nDESCRIPTION: This snippet declares variables to store references to the Events folder and the MatchStart and MatchEnd bindable events within the MatchManager module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n--Creates timer\nlocal myTimer = timer.new()\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary with String Keys\nDESCRIPTION: This snippet shows how to create a Luau dictionary with string keys and how to access values using the bracket notation. It defines player names associated with player identifiers and prints the value associated with the \"player1\" key.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerNames = {\n\tplayer1 = \"Zap\",\n\tplayer2 = \"Kel\",\n}\nprint(playerNames[\"player1\"])\n```\n\n----------------------------------------\n\nTITLE: Utilizing the User Input Module in Roblox\nDESCRIPTION: This Lua snippet demonstrates how to require the User Input Module and retrieve the last used input type by a player. It ensures that game developers can adapt gameplay and UI based on the user's input device at runtime. The output is printed to the console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mobile.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Require module\nlocal UserInputModule = require(ReplicatedStorage:WaitForChild(\"UserInputModule\"))\n\nlocal currentUserInput, inputEnum = UserInputModule.getInputType()\nprint(currentUserInput, inputEnum)\n```\n\n----------------------------------------\n\nTITLE: Detecting Instance Streaming with CollectionService in Lua\nDESCRIPTION: A LocalScript that detects when tagged objects stream in or out using CollectionService. The example adds tagged Light objects to a flicker loop when they stream in and removes them when they stream out.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nlocal tagName = \"FlickerLightSource\"\nlocal random = Random.new()\nlocal flickerSources = {}\n\n-- Detect currently and new tagged parts streaming in or out\nfor _, light in CollectionService:GetTagged(tagName) do\n\tflickerSources[light] = true\nend\n\nCollectionService:GetInstanceAddedSignal(tagName):Connect(function(light)\n\tflickerSources[light] = true\nend)\n\nCollectionService:GetInstanceRemovedSignal(tagName):Connect(function(light)\n\tflickerSources[light] = nil\nend)\n\n-- Flicker loop\nwhile true do\n\tfor light in flickerSources do\n\t\tlight.Brightness = 8 + random:NextNumber(-0.4, 0.4)\n\tend\n\n\ttask.wait(0.05)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Client Schema in Lua\nDESCRIPTION: This Lua snippet initializes the client schema by setting up assets and environment variables in OnSetup. Dependencies include the EventSequencer module and ReplicatedStorage service. It requires a timePositionObject to set the current time and accesses scene environments. Prints the current time to console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nlocal clientEnvironment\nlocal serverEnvironment\nlocal dummy\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Client)\")\n\n\t-- Access scene environments; does not apply to Inline Mode\n\tclientEnvironment = EventSequencer.getCurrentSceneEnvironment()\n\tserverEnvironment = EventSequencer.getCurrentServerEnvironmentFromClient()\n\t-- Wait for assets\n\tdummy = clientEnvironment:WaitForChild(\"Dummy\")\n\n\tprint(\"Current time is:\", timePositionObject.Value)\nend\n```\n\n----------------------------------------\n\nTITLE: Reading from Dictionaries in Luau\nDESCRIPTION: Demonstrates how to access dictionary values in Luau using their keys. The snippet shows accessing string and object keys and printing their corresponding values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\nlocal testDictionary = {\n\tpartType = \"Block\",\n\t[part] = true\n}\n-- Include quotes for string keys\nprint(testDictionary[\"partType\"]) -- Block\n-- Omit quotes for non-string keys\nprint(testDictionary[part]) -- true\n```\n\n----------------------------------------\n\nTITLE: Handling Part Color Changes in Server Schema using Lua\nDESCRIPTION: Shows how to set up a server schema that handles part color changes using the EventSequencer and scene environments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nlocal serverEnvironment\nlocal partColorConnection\nlocal changePartColorEvent = script.Parent.Events.ChangePartColor\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Server)\")\n\n\tserverEnvironment = EventSequencer.getCurrentSceneEnvironment()\n\n\tpartColorConnection = changePartColorEvent.OnServerEvent:Connect(function(player, changedPart, newColor)\n\t\tserverEnvironment.changedPart.Color = newColor\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Timed Bridge Functionality in Lua\nDESCRIPTION: Completes the startTimer function to make the bridge visible and walkable, start a countdown, and then revert the bridge to its original state.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal timerDuration = 5\nlocal timerActive = false\n\nlocal function startTimer()\n   timerActive = true\n   bridge.Transparency = 0\n   bridge.CanCollide = true\n\n   for count = timerDuration, 0, -1 do\n      timerText.Text = count\n      task.wait(1)\n   end\n\n   bridge.Transparency = 0.8\n   bridge.CanCollide = false\n   timerText.Text = \"\"\n   timerActive = false\nend\n\nlocal function buttonPressed(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid and timerActive == false then\n      startTimer()\n   end\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: Getting a Particular Key from a Hash Map - Lua\nDESCRIPTION: This snippet retrieves a value associated with a specific key from the hash map, using pcall to handle errors while fetching data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/hash-map.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn hashMap:SetAsync(\"User_1234\", 1000, 30)\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n\nlocal item\nlocal getSuccess, getError = pcall(function()\n\titem = hashMap:GetAsync(\"User_1234\")\nend)\nif getSuccess then\n\tprint(item)\nelse\n\twarn(getError)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic if/then syntax in Luau\nDESCRIPTION: Shows the fundamental syntax pattern for if statements in Luau. This structure allows code to execute only when specified conditions are true.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/intro-to-if-statements.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif \"something happens\" then\n   -- Make something else happen\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Engagement Rewards in Lua\nDESCRIPTION: This snippet shows how to configure time-based and daily login rewards in the EngagementRewardsConfig module. It includes examples of setting reward criteria, icons, display names, and special effects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/engagement-rewards.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal engagementRewardsConfig: Types.EngagementRewardsConfig = {\n   [Types.RewardType.Time] = {\n      tabDisplayName = \"Time\",\n      tabOrder = 1,\n      description = \"Keep playing to unlock rewards!\",\n      rewards = {\n         MinutesPlayed1 = {\n            icon = 116913478160966,\n            displayName = \"Ice Lance\",\n            requiredSecondsInGame = 1 * 5,\n         },\n         -- more\n   [Types.RewardType.Daily] = {\n      tabDisplayName = \"Daily\",\n      tabOrder = 2,\n      description = \"Play daily to unlock rewards!\",\n      rewards = {\n         DailyStreak1 = {\n            icon = 116913478160966,\n            displayName = \"Ice Lance\",\n            requiredDaysVisitedStreak = 1,\n            effect = Types.RewardEffect.Valuable,\n         },\n         -- more\n```\n\n----------------------------------------\n\nTITLE: Server-Side Grab Handling Function\nDESCRIPTION: Manages server-side logic for grabbing objects, including collision checks, constraint creation, and handling player grab attempts\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nfunction Grab(player, model)\n    -- Check if model is already grabbed\n    -- Create attachments on hand and object\n    -- Generate RigidConstraint between attachments\n    -- Disable object collisions\n    -- Handle Restorables\nend\n```\n\n----------------------------------------\n\nTITLE: Handling All Tokens Collected Event\nDESCRIPTION: Connect to the allCollected event to handle scenarios when a player completes the entire scavenger hunt by collecting all tokens or entering all regions\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.allCollected:Connect(function(player)\n\tprint(player.DisplayName .. \" completed the hunt!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Scaling a Part with Tweens in Roblox Lua\nDESCRIPTION: This script tweens the scale of a part when touched by a player in Roblox and then destroys it. It uses the TweenService to smoothly animate the part's size down to zero. The script also handles collision and humanoid detection to ensure the tween only occurs when a player touches the part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/animating-parts.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Tween the scale of a part when it's touched, then destroy it\nlocal TweenService = game:GetService(\"TweenService\")\nlocal partToScale = script.Parent\nlocal inTween = false\n\n-- Customizable variables\nlocal TWEEN_TIME = 1\nlocal TWEEN_SCALE = Vector3.zero\n\n-- Tween variables\nlocal tweenInfo = TweenInfo.new(\n\tTWEEN_TIME, -- Time\n\tEnum.EasingStyle.Exponential, -- EasingStyle\n\tEnum.EasingDirection.Out  -- EasingDirection\n)\n\nlocal function onPartTouch(otherPart)\n\t-- If the object is tweening, prevent it from being tweened again\n\tif inTween == true then\n\t\treturn\n    end\n\n\tlocal partParent = otherPart.Parent\n    local humanoid = partParent:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\t-- Prevent further collisions on object since it has been picked up\n        partToScale.CanCollide = false\n\n\t\t-- Create a tween and play it\n\t\tlocal tweenObject = TweenService:Create(partToScale, tweenInfo, {Size = TWEEN_SCALE})\n\t\ttweenObject:Play()\n        inTween = true\n\n\t\t-- On tween completion, destroy object\n\t\ttweenObject.Completed:Connect(function()\n\t\t\tpartToScale:Destroy()\n\t\tend)\n\tend\nend\n\npartToScale.Touched:Connect(onPartTouch)\n```\n\n----------------------------------------\n\nTITLE: Creating an Audio Asset via Open Cloud API with Bash\nDESCRIPTION: This snippet demonstrates how to create an audio asset using the Open Cloud API through a HTTP request in Bash. Dependencies include a valid API key, and the request must specify the asset type, name, description, and creator information like user ID or group ID. The code uploads audio files specified in fileContent. Proper setup with API key management is required.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/audio/assets.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://apis.roblox.com/assets/v1/assets' \\\n--header 'x-api-key: ${ApiKey}' \\\n--form 'request=\"{\n  \\\"assetType\\\": \\\"Audio\\\",\n  \\\"displayName\\\": \\\"Name\\\",\n  \\\"description\\\": \\\"This is a description\\\",\n  \\\"creationContext\\\": {\n    \\\"creator\\\": {\n      \\\"userId\\\": \\\"${userId}\\\" # Use groupId for creating a group asset\n    }\n  }\n}\"' \\\n--form 'fileContent=@\"/filepath/audio.mp3\";type=audio/mpeg'\n```\n\n----------------------------------------\n\nTITLE: Configuring PrismaticConstraint Properties in Roblox Studio\nDESCRIPTION: Configuration settings for a PrismaticConstraint to enable controlled elevator movement with specific limits, servo settings, and movement parameters. These settings allow the platform to move 10 studs up and down from the center position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-elevators.md#2025-04-21_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nPrismaticConstraint:\nLimitsEnabled = true\nActuatorType = Servo\nLowerLimit = -10\nRestitution = 0\nUpperLimit = 10\nServoMaxForce = 10000\nSpeed = 10\nTargetPosition = -10\n```\n\n----------------------------------------\n\nTITLE: Adding Developer Products to MerchBooth\nDESCRIPTION: Demonstrates adding developer products to the MerchBooth using the addItemAsync method with the Product info type, including error handling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t1236602053, -- Mana Refill\n\t1257880672, -- Healing Potion\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.Product)\n\t\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Player Alive Status in Roblox Lua\nDESCRIPTION: Defines an onPlayerAdded function for setting player attributes and handling character addition, setting the IsAlive attribute to false initially.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerAdded(player)\n  local leaderstats = Instance.new(\"Folder\")\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n\n  local points = Instance.new(\"IntValue\")\n  points.Name = \"Points\"\n  points.Value = 0\n  points.Parent = leaderstats\n\n  player:SetAttribute(\"IsAlive\", false)\n\n  player.CharacterAdded:Connect(function(character)\n    onCharacterAdded(character, player)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Iterator For Loop in Luau\nDESCRIPTION: This snippet uses the `__iter` metamethod to define a custom iterator for a table, enabling reverse iteration. It iterates over the array in reverse order, from its last element to its first.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal myTable = {1, 2, 3, 4, 5}\n\nmyMetatable = {\n\t__iter = function(t)\n\t\tlocal i = #t + 1\n\n\t\treturn function()\n\t\t\ti -= 1\n\n\t\t\tif i > 0 then\n\t\t\t\treturn i, t[i]\n\t\t\tend\n\t\tend\n\tend,\n}\n\nsetmetatable(myTable, myMetatable)\n\nfor i, v in myTable do\n\tprint(i, v)\nend\n\n--[[ Resulting output:\n5 5\n4 4\n3 3\n2 2\n1 1\n]]\n```\n\n----------------------------------------\n\nTITLE: Setting Player Character Auto Load Behavior\nDESCRIPTION: Shows how to control character auto-loading and GUI reset behavior using StarterGui properties\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/index.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nPlayers.CharacterAutoLoads = false\nStarterGui.ResetPlayerGuiOnSpawn = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Humanoid Display Settings and Death Handling in Roblox\nDESCRIPTION: A module script that configures the display settings for a player's humanoid, including name and health visibility. It also prevents characters from breaking apart on death and waits for the Died event to trigger the appropriate handling function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nlocal onHumanoidDied = require(script.onHumanoidDied)\n\nlocal function setupHumanoidAsync(player: Player, humanoid: Humanoid)\n\t-- Give each humanoid full control over its name/health display distance\n\thumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Subject\n\n\t-- Set name and health display distances to a sufficiently large value to show display name\n\t-- and health bar at any practical distance, as long as it is not occluded\n\thumanoid.NameDisplayDistance = 1000\n\thumanoid.HealthDisplayDistance = 1000\n\thumanoid.NameOcclusion = Enum.NameOcclusion.OccludeAll\n\thumanoid.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOn\n\n\t-- Prevent character from falling apart when health is depleted\n\thumanoid.BreakJointsOnDeath = false\n\n\thumanoid.Died:Wait()\n\tonHumanoidDied(player, humanoid)\nend\n\nreturn setupHumanoidAsync\n```\n\n----------------------------------------\n\nTITLE: Performing SubtractAsync in Roblox Lua\nDESCRIPTION: This snippet shows how to use the SubtractAsync function to subtract several parts from a main part. The operation is dependent on the Roblox engine and Workspace access. Key parameters are the main part and the parts to subtract from it. The result is a new part which is parented to the workspace at the original main part's location, and the original parts are destroyed post-operation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/solid-modeling.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal mainPart = Workspace.Part1\nlocal otherParts = {Workspace.Part2, Workspace.Part3, Workspace.Part4}\n\n-- Perform subtract operation\nlocal success, newSubtract = pcall(function()\n\treturn mainPart:SubtractAsync(otherParts)\nend)\n\n-- If operation succeeds, position it at the same location and parent it to the workspace\nif success and newSubtract then\n\tnewSubtract.Position = mainPart.Position\n\tnewSubtract.Parent = Workspace\nend\n\n-- Destroy original parts which remain intact after operation\nmainPart:Destroy()\nfor _, part in otherParts do\n\tpart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Server-side Module Requiring\nDESCRIPTION: Example of requiring a ModuleScript from ServerScriptService.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PickupManager = require(ReplicatedStorage:WaitForChild(\"PickupManager\"))\n```\n\n----------------------------------------\n\nTITLE: Event Firing - Script (RemoteEvent - All Clients)\nDESCRIPTION: This Script fires a RemoteEvent to all clients every second. It retrieves the RemoteEvent instance from ReplicatedStorage and defines a loop that fires the RemoteEvent using FireAllClients(), passing the remaining time as data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal countdown = 5\n\n-- Fire the RemoteEvent every second until time expires\nfor timeRemaining = -1, countdown do\n\tremoteEvent:FireAllClients(countdown - timeRemaining)\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing with 'or' in Luau\nDESCRIPTION: Shows how to apply the 'or' operator in Luau to check when at least one of the conditions is satisfied in control structures. In an 'if'-'then' scenario, it allows for execution when any specified condition evaluates to 'true', thus broadening the criteria for flow control.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/operators.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal pasta = false\nlocal tomatoSauce = true\nlocal garlicBread = true\n\nif (pasta == true and tomatoSauce == true) or garlicBread == true then\n\tprint(\"We have either spaghetti dinner OR garlic bread\")\nelse\n\tprint(\"Something is missing...\")\nend\n\n-- Output: We have either spaghetti dinner OR garlic bread\n```\n\n----------------------------------------\n\nTITLE: Exporting Types for External Use\nDESCRIPTION: This snippet outlines how to use the `export` keyword in Luau to make a type accessible outside of a `Class.ModuleScript`. It facilitates modular designs by making types reusable across different scripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nexport type Cat = {\n\tName: string,\n\tMeow: (Cat) -> ()\n}\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Types = require(ReplicatedStorage.Types)\n\nlocal newCat: Types.Cat = {\n\tName = \"metatablecat\",\n\tMeow = function(self)\n\t\tprint(`{self.Name} said meow`)\n\tend\n}\n\nnewCat:Meow()\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Point Sync in Roblox Lua\nDESCRIPTION: Function that syncs team points with UI counters. It finds team counter GUI objects and sets up listeners for point updates based on team colors.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function startSyncingTeamPoints(gui: ScreenGui)\n\tfor _, teamPointCounter in gui.Objective.TeamPointCounter:GetChildren() do\n\t\tif not teamPointCounter:IsA(\"GuiObject\") then\n\t\t\tcontinue\n\t\tend\n\n\t\tlocal iconTeamColor = teamPointCounter:GetAttribute(GuiAttribute.teamColor)\n```\n\n----------------------------------------\n\nTITLE: Displaying Player Laser - Roblox Lua\nDESCRIPTION: This snippet displays the laser for another player when they fire it. It listens for events signaling when a laser has been fired and uses the LaserRenderer to create a visible laser effect.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal LaserRenderer = require(Players.LocalPlayer.PlayerScripts:WaitForChild(\"LaserRenderer\"))\n\nlocal eventsFolder = ReplicatedStorage.Events\n\n-- Display another player's laser\nlocal function createPlayerLaser(playerWhoShot, toolHandle, endPosition)\n\tif playerWhoShot ~= Players.LocalPlayer then\n\t\tLaserRenderer.createLaser(toolHandle, endPosition)\n\tend\nend\n\neventsFolder.LaserFired.OnClientEvent:Connect(createPlayerLaser)\n```\n\n----------------------------------------\n\nTITLE: Player State Change Handler in Roblox Lua\nDESCRIPTION: Function that determines which state-specific handler to call based on the player's current state. It includes error handling for invalid state values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerStateChanged(newPlayerState: string)\n\tif newPlayerState == PlayerState.SelectingBlaster then\n\t\tonSelectingBlaster()\n\telseif newPlayerState == PlayerState.Playing then\n\t\tonPlaying()\n\telseif newPlayerState == PlayerState.TaggedOut then\n\t\tonTaggedOut()\n\telseif newPlayerState == PlayerState.InLobby then\n\t\tonInLobby()\n\telse\n\t\twarn(`Invalid player state ({newPlayerState})`)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Reading User Inventory - Avatar Editor Service in Lua\nDESCRIPTION: This snippet shows how to read a user's inventory after access has been granted. It filters the items by specific asset types and prints them to the output.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\n\nAvatarEditorService:PromptAllowInventoryReadAccess()\n\nlocal result = AvatarEditorService.PromptAllowInventoryReadAccessCompleted:Wait()\n\nif result == Enum.AvatarPromptResult.Success then\n  -- Access granted!\n  local assetTypes = {\n    Enum.AvatarAssetType.BackAccessory,\n    Enum.AvatarAssetType.ShoulderAccessory,\n    Enum.AvatarAssetType.WaistAccessory\n  }\n  local pagesObject = AvatarEditorService:GetInventory(assetTypes)\n  local currentPage = pagesObject:GetCurrentPage()\n  for _, item in currentPage do\n    print(item)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Call Reset Match Function in GameManager (Lua)\nDESCRIPTION: This code demonstrates how to integrate the `resetMatch` function from the `MatchManager` module into the main game loop within the `GameManager` module. The call to `matchManager.resetMatch()` is placed at the end of the `while true` loop, ensuring that the game state is reset after each match before the next one starts. This allows the game loop to run indefinitely. It requires the MatchManager module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\t\tdisplayManager.updateStatus(\"Get ready!\")\n\t\ttask.wait(gameSettings.transitionTime)\n\n\t\tmatchManager.prepareGame()\n\t\tlocal endState = matchEnd.Event:Wait()\n\n\t\tlocal endStatus = matchManager.getEndStatus(endState)\n\t\tdisplayManager.updateStatus(endStatus)\n\n\t\tmatchManager.cleanupMatch()\n\t\ttask.wait(gameSettings.transitionTime)\n\n\t\tmatchManager.resetMatch()\n   end\n```\n\n----------------------------------------\n\nTITLE: Initializing DisplayManager Module\nDESCRIPTION: Initializes the DisplayManager module by getting services and defining variables to store references to DisplayValues and their children (Status, PlayersLeft, TimeLeft). This setup is essential for updating the player GUI with real-time game information.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal DisplayManager = {}\n\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Display Values used to update Player GUI\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Scripted Drag Permission Policy in Roblox\nDESCRIPTION: This snippet demonstrates how to configure a DragDetector with a scripted permission policy. It sets the permission policy to Scriptable and defines a custom function that determines if a player can drag an object based on player and part attributes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/3D-drag-detectors.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragDetector = script.Parent.DragDetector\ndragDetector.PermissionPolicy = Enum.DragDetectorPermissionPolicy.Scriptable\n\ndragDetector:SetPermissionPolicyFunction(function(player, part)\n\tif player and player:GetAttribute(\"IsInTurn\") then\n\t\treturn true\n\telseif part and not part:GetAttribute(\"IsDraggable\") then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Dependencies and Events in Lua\nDESCRIPTION: This snippet shows how to declare dependencies on other modules and access bindable events stored in ServerStorage for signaling match start and end.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n```\n\n----------------------------------------\n\nTITLE: Applying Random Angular Impulse in Roblox Lua\nDESCRIPTION: This script applies a random angular impulse to a part along the Y axis. It references the parent part and applies between 0 and 100 Rowton-studs of torque, causing the object to spin with an initial velocity before potentially slowing down due to physics forces.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-spinning-objects.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = script.Parent\nlocal impulse = Vector3.new(0, math.random(0, 100), 0)\npart:ApplyAngularImpulse(impulse)\n```\n\n----------------------------------------\n\nTITLE: Customizing SelfieMode Theme\nDESCRIPTION: Shows how to customize the visual theme of selfie mode including fonts, colors and text sizes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.setTheme({\n\ttextSize = 20,\n\tfont = Enum.Font.Michroma,\n\tbackgroundColor = Color3.fromRGB(0, 40, 75),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Layered Accessories\nDESCRIPTION: Shows how to use SetAccessories() to add multiple layered accessories to a HumanoidDescription in a specific order.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\nlocal accessoryTable = {\n\t{\n\t\tOrder = 1,\n\t\tAssetId = 6984769289,\n\t\tAccessoryType = Enum.AccessoryType.Sweater\n\t},\n\t{\n\t\tOrder = 2,\n\t\tAssetId = 6984767443,\n\t\tAccessoryType = Enum.AccessoryType.Jacket\n\t}\n}\n\nhumanoidDescription:SetAccessories(accessoryTable, false)\n```\n\n----------------------------------------\n\nTITLE: VIP Bubbles Customization in Roblox\nDESCRIPTION: This Lua code snippet customizes chat bubbles for VIP users by checking the \"IsVIP\" attribute of the player. It uses the TextChatService.OnBubbleAdded event to create a new BubbleChatMessageProperties instance and modify its properties (TextColor3, BackgroundColor3, FontFace) if the player is a VIP. This customization will only be visible on the client-side.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/bubble-chat.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Event handler for when a new chat bubble is added to the experience\nTextChatService.OnBubbleAdded = function(message: TextChatMessage, adornee: Instance)\n\t-- Check if the chat message has a TextSource (sender) associated with it\n\tif message.TextSource then\n\t\t-- Create a new BubbleChatMessageProperties instance to customize the chat bubble\n\t\tlocal bubbleProperties = Instance.new(\"BubbleChatMessageProperties\")\n\n\t\t-- Get the user who sent the chat message based on their UserId\n\t\tlocal player = Players:GetPlayerByUserId(message.TextSource.UserId)\n\n\t\tif player:GetAttribute(\"IsVIP\") then\n\t\t\t-- If the player is a VIP, customize the chat bubble properties\n\t\t\tbubbleProperties.TextColor3 = Color3.fromHex(\"#F5CD30\")\n\t\t\tbubbleProperties.BackgroundColor3 = Color3.fromRGB(25, 27, 29)\n\t\t\tbubbleProperties.FontFace = Font.fromEnum(Enum.Font.PermanentMarker)\n\t\tend\n\t\treturn bubbleProperties\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Instance Streaming in Roblox Lua\nDESCRIPTION: This code snippet demonstrates how to detect instance streaming in a Roblox LocalScript. It uses WaitForChild() to ensure that instances exist before accessing them, which is a recommended practice when instance streaming is enabled.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.Instance:WaitForChild()|WaitForChild()\n```\n\n----------------------------------------\n\nTITLE: Playing Specific Tracks Using LocalScripts in Roblox Lua\nDESCRIPTION: A Lua script that shows how to play a specific track from a LocalScript in Roblox. It checks and plays a designated track ('LucidDream') if it's not already playing, requiring 'SoundService'. Inputs: None directly. Outputs: Playback of specified sound track.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/objects.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal SoundService = game:GetService(\"SoundService\")\n\nlocal musicTrack = SoundService:FindFirstChild(\"LucidDream\")\nif musicTrack not musicTrack.IsPlaying then\n\tmusicTrack:Play()\nend\n```\n\n----------------------------------------\n\nTITLE: Prompting User to Purchase an Item - Avatar Editor Service in Lua\nDESCRIPTION: This snippet explains how to check if the user owns a catalog asset before prompting them to purchase it, ensuring that they can only save assets they own without prompting invalid purchases.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-editor.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nif not MarketplaceService:PlayerOwnsAsset(player.UserId, assetId) then\n  MarketplaceService:PromptPurchase(player, assetId)\nend\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message via HTTP Request\nDESCRIPTION: This bash code snippet shows how to publish a message to live servers using a `POST` request to the Roblox Cloud API. It includes headers for the API key and content type, and a JSON payload containing the topic and message. Requires an API key with the universe-messaging-service:publish permission and the Universe ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-messaging.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X POST 'https://apis.roblox.com/cloud/v2/universes/{universe}:publishMessage' \\\n-H 'x-api-key: {api-key}' \\\n-H 'Content-Type: application/json' \\\n--data '{\n \"topic\": \"your-topic\",\n \"message\": \"Hello, everyone!\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Sort to Price Low-to-High & Alphabetical in Roblox MerchBooth\nDESCRIPTION: Demonstrates how to set a custom sorting function that first sorts by price from lowest to highest, then alphabetically by title for items with the same price.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setCatalogSort(function(a, b)\n\treturn if a.price == b.price then a.title < b.title else a.price < b.price\nend)\n```\n\n----------------------------------------\n\nTITLE: Including Launch and Analytics Data in Roblox Notifications\nDESCRIPTION: This snippet demonstrates how to create a user notification with launch data and analytics data. It uses the OpenCloud UserNotification module to send a notification to a specific player, including custom launch and analytics information.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/experience-notifications.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal OCUserNotification = require(ServerScriptService.OpenCloud.V2.UserNotification)\nlocal recipientPlayerID = 505306092\n\n-- In the payload, \"messageId\" is the value of the notification asset ID\nlocal userNotification = {\n\tpayload = {\n\t\tmessageId = \"5dd7024b-68e3-ac4d-8232-4217f86ca244\",\n\t\ttype = \"MOMENT\",\n\t\tjoinExperience = {\n\t\t\tlaunchData = \"Test_Launch_Data\"\n\t\t},\n\t\tanalyticsData = {\n\t\t\tcategory = \"Test_Analytics_Category\"\n\t\t}\n\t}\n}\n\nlocal result = OCUserNotification.createUserNotification(recipientPlayerID, userNotification)\n\nif result.statusCode ~= 200 then\n\tprint(result.statusCode)\n\tprint(result.error.code)\n\tprint(result.error.message)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Part Touch Detection Function in Roblox Luau\nDESCRIPTION: Initial setup for a function that will detect when a player touches the part. This creates the function structure but doesn't yet include the player detection logic.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Gives or subtracts points\nlocal function givePoints(player)\n\tprint(\"Giving player points\")\nend\n\n-- Checks if player touched the part\nlocal function partTouched(otherPart)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Toggling SelfieMode Actions\nDESCRIPTION: Demonstrates how to toggle a selfie mode action and check its new state.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal lockGazeAction = SelfieMode.getAction(SelfieMode.Action.LockGaze)\n\nlocal isEnabled = SelfieMode.toggleAction(lockGazeAction)\n\nif isEnabled then\n\tprint(\"Activated\", lockGazeAction.name)\nelse\n\tprint(\"Deactivated\", lockGazeAction.name)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Grid Snap Constraint in Roblox DragDetector\nDESCRIPTION: Demonstrates how to create a custom constraint function that snaps dragged objects to a grid. The function rounds positions to specified increments and can be added or removed from the drag detector dynamically.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/3D-drag-detectors.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragDetector = script.Parent.DragDetector\nlocal startPartPosition = nil\n\nlocal SNAP_INCREMENT = 4\n\ndragDetector.DragStart:Connect(function()\n\tstartPartPosition = script.Parent.Position\nend)\n\ndragDetector.DragEnd:Connect(function()\n\tstartPartPosition = nil\nend)\n\nlocal function snapToWorldGrid(proposedMotion)\n\tif startPartPosition == nil then\n\t\treturn proposedMotion\n\tend\n\tlocal snapIncrement = SNAP_INCREMENT // 1\n\tif snapIncrement < 1 then\n\t\treturn proposedMotion\n\tend\n\tlocal newWorldPosition = startPartPosition + proposedMotion.Position\n\tlocal roundedX = ((newWorldPosition.X / snapIncrement + 0.5) // 1) * snapIncrement\n\tlocal roundedY = ((newWorldPosition.Y / snapIncrement + 0.5) // 1) * snapIncrement\n\tlocal roundedZ = ((newWorldPosition.Z / snapIncrement + 0.5) // 1) * snapIncrement\n\tlocal newRoundedWorldPosition = Vector3.new(roundedX, roundedY, roundedZ)\n\treturn proposedMotion.Rotation + (newRoundedWorldPosition - startPartPosition)\nend\n\nlocal connection = dragDetector:AddConstraintFunction(2, snapToWorldGrid)\n-- When applicable, remove the constraint function by invoking connection:Disconnect()\n```\n\n----------------------------------------\n\nTITLE: Handling Humanoid Death Event in Roblox Lua\nDESCRIPTION: Connects an anonymous function to the Died event of the Humanoid, resetting the player's points to zero when they die.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n  local humanoid = character:WaitForChild(\"Humanoid\")\n\n  humanoid.Died:Connect(function()\n    local points = player.leaderstats.Points\n    points.Value = 0\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing the Pause Screen in Roblox\nDESCRIPTION: A LocalScript that disables the default pause modal and sets up a custom GUI based on the player's pause state. It uses the Player.GameplayPaused property with a GetPropertyChangedSignal connection to detect pause state changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal GuiService = game:GetService(\"GuiService\")\nlocal player = Players.LocalPlayer\n\n-- Disable default pause modal\nGuiService:SetGameplayPausedNotificationEnabled(false)\n\nlocal function onPauseStateChanged()\n\tif player.GameplayPaused then\n\t\t-- Show custom GUI\n\telse\n\t\t-- Hide custom GUI\n\tend\nend\n\nplayer:GetPropertyChangedSignal(\"GameplayPaused\"):Connect(onPauseStateChanged)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Iteration with pairs() in Luau\nDESCRIPTION: This code snippet demonstrates how to iterate over a dictionary in Luau using the `pairs()` function. The `pairs()` function returns an iterator that provides the key and value of each entry in the dictionary.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal dictionary = {\n\t[1] = \"a\",\n\t[\"Hello\"] = \"b\",\n\t[5] = \"c\",\n\t[true] = \"d\",\n\t[\"World\"] = \"f\",\n\t[false] = \"e\"\n}\nfor key, value in pairs(dictionary) do\n\tprint(key, value)\nend\n\n--[[ Resulting output:\nHello b\ntrue d\nfalse e\nWorld f\n5 c\n1 a\n]]\n```\n\n----------------------------------------\n\nTITLE: Updating Player Stats on Collection - Roblox Lua\nDESCRIPTION: This snippet illustrates how to update a player's gold stat when they collect a gold chunk. The script uses the Touched event to detect when a player interacts with the pickup object and increases their gold stat accordingly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/leaderboards.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal goldChunk = script.Parent\n\nlocal function onPartTouch(otherPart)\n\tlocal partParent = otherPart.Parent\n\tlocal player = Players:GetPlayerFromCharacter(partParent)\n\tlocal leaderstats = player and player:FindFirstChild(\"leaderstats\")\n\tlocal goldStat = leaderstats and leaderstats:FindFirstChild(\"Gold\")\n\n\tif goldStat then\n\t\t-- Destroy the pickup\n\t\tgoldChunk:Destroy()\n\n\t\t-- Update the player's leaderboard stat\n\t\tgoldStat.Value += 10\n\tend\nend\n\ngoldChunk.Touched:Connect(onPartTouch)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button Near the Jump Button in Lua\nDESCRIPTION: This script detects the position of the default jump button and places a custom button to its left. It only activates on touch-enabled devices, making it suitable for mobile interfaces. The code waits for the jump button to load fully before creating a custom ImageButton positioned 20 pixels to the left of the jump button.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/position-and-size.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\n\nif UserInputService.TouchEnabled then\n\t-- Wait for jump button to be fully loaded\n\twhile not (playerGui:FindFirstChild(\"JumpButton\", true) and playerGui:FindFirstChild(\"JumpButton\", true).IsLoaded) do\n\t\ttask.wait()\n\tend\n\tlocal jumpButton = playerGui:FindFirstChild(\"JumpButton\", true)\n\n\t-- Place new custom button to left of jump button\n\tlocal customButton = Instance.new(\"ImageButton\")\n\tcustomButton.AnchorPoint = Vector2.new(1, 1)\n\tcustomButton.Size = UDim2.fromOffset(jumpButton.Size.X.Offset * 0.8, jumpButton.Size.Y.Offset * 0.8)\n\tcustomButton.Position = jumpButton.Position + UDim2.fromOffset(-20, jumpButton.Size.Y.Offset)\n\tcustomButton.Parent = jumpButton.Parent\nelse\n\twarn(\"Device is not touch-enabled or Studio is not emulating a touch-enabled device!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Temporarily Hiding Item Post-Harvest in Lua\nDESCRIPTION: This snippet makes the item invisible and non-collidable immediately after it is harvested, ensuring it cannot be re-interacted with until it resets. The key parameters are transparency and collision settings of the item part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nif canHarvest.Value == true and playerItems.Value < playerSpaces.Value then\n  playerItems.Value += 1\n  canHarvest.Value = false\n  partTouched.Transparency = 1\n  partTouched.CanCollide = false\nend\n```\n\n----------------------------------------\n\nTITLE: Using ProximityPromptService for Handling Proximity Prompt Events in Lua\nDESCRIPTION: This code demonstrates how to set up event handlers for proximity prompt interactions using ProximityPromptService. It includes functions for detecting when a prompt is triggered, when a player begins holding the prompt button, and when they stop holding it.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/proximity-prompts.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ProximityPromptService = game:GetService(\"ProximityPromptService\")\n\n-- Detect when prompt is triggered\nlocal function onPromptTriggered(promptObject, player)\n\nend\n\n-- Detect when prompt hold begins\nlocal function onPromptHoldBegan(promptObject, player)\n\nend\n\n-- Detect when prompt hold ends\nlocal function onPromptHoldEnded(promptObject, player)\n\nend\n\n-- Connect prompt events to handling functions\nProximityPromptService.PromptTriggered:Connect(onPromptTriggered)\nProximityPromptService.PromptButtonHoldBegan:Connect(onPromptHoldBegan)\nProximityPromptService.PromptButtonHoldEnded:Connect(onPromptHoldEnded)\n```\n\n----------------------------------------\n\nTITLE: Assigning Objects to Collision Groups in Lua\nDESCRIPTION: This code shows how to register collision groups, set their collision behavior, and assign objects to these groups using Roblox Lua.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal PhysicsService = game:GetService(\"PhysicsService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal cubes = \"Cubes\"\nlocal doors = \"Doors\"\n\n-- Register two collision groups\nPhysicsService:RegisterCollisionGroup(cubes)\nPhysicsService:RegisterCollisionGroup(doors)\n\n-- Set cubes to be non-collidable with doors\nPhysicsService:CollisionGroupSetCollidable(cubes, doors, false)\n\n-- Assign an object to each group\nWorkspace.Cube1.CollisionGroup = cubes\nWorkspace.Door1.CollisionGroup = doors\n```\n\n----------------------------------------\n\nTITLE: Trigger Animation on Collision in Roblox\nDESCRIPTION: This Lua LocalScript detects when the local player's character touches a specified volume (AnimationDetector) within the Roblox workspace and plays an animation. It uses a debounce to prevent the animation from repeatedly triggering. The script requires an Animation object as a child, and the AnimationDetector part to exist in the workspace.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/animation/play-character-animations.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal animation = script:WaitForChild(\"Animation\")\nlocal humanoid = script.Parent:WaitForChild(\"Humanoid\")\nlocal animator = humanoid:WaitForChild(\"Animator\")\nlocal animationTrack = animator:LoadAnimation(animation)\nlocal animationDetector = Workspace:WaitForChild(\"AnimationDetector\")\n\nlocal debounce = false\n\nanimationDetector.Touched:Connect(function(hit)\n\tif debounce then \n\t\treturn\n\tend\n\t\n\tlocal hitCharacter = hit:FindFirstAncestorWhichIsA(\"Model\")\n\tif hitCharacter ~= localCharacter then\n\t\treturn\n\tend\n\n\tdebounce = true\n\tanimationTrack:Play()\n\tanimationTrack.Ended:Wait()\n\tdebounce = false\nend)\n```\n\n----------------------------------------\n\nTITLE: Updating Camera CFrame for Side-Scrolling View in Roblox Lua\nDESCRIPTION: This code updates the camera's CFrame to create a side-scrolling view. It uses CFrame.lookAt to point the camera at the character from a fixed side position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal player = Players.LocalPlayer\nlocal camera = workspace.CurrentCamera\n\nlocal CAMERA_DEPTH = 24\nlocal HEIGHT_OFFSET = 2\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n            local rootPosition = root.Position + Vector3.new(0, HEIGHT_OFFSET, 0)\n            local cameraPosition = Vector3.new(rootPosition.X, rootPosition.Y, CAMERA_DEPTH)\n            camera.CFrame = CFrame.lookAt(cameraPosition, rootPosition)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Avatar Assets to MerchBooth using Asynchronous Method\nDESCRIPTION: Demonstrates adding multiple avatar assets to the MerchBooth with error handling using pcall. Supports bulk item registration with AssetIds.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t607702162, -- Roblox Baseball Cap\n\t4819740796, -- Robox\n\t1374269, -- Kitty Ears\n\t11884330, -- Nerd Glasses\n\t10476359, -- Paper Hat\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId)\n\t\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Block Comments in Luau\nDESCRIPTION: This code snippet shows how to nest multiple brackets inside a block comment using the same number of equal signs in both the beginning and ending bracket. This is used when in-depth details need to be within block comments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/comments.md#2025-04-21_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\n--[=[\n    In-depth detail about cosmic moon ray: [[[TOP SECRET]]]\n]=]\n```\n\n----------------------------------------\n\nTITLE: Locking Emotes\nDESCRIPTION: Demonstrates how to lock an emote by name on the client.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.lockEmote(\"Applaud\")\n```\n\n----------------------------------------\n\nTITLE: Setting Primary Part for Models\nDESCRIPTION: Defines a primary BasePart for a Model, which serves as the reference point for pivot, bounding box, and transformation operations\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/models.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Set a primary part in Explorer window\n-- Select Model > Choose PrimaryPart property > Select target part\n```\n\n----------------------------------------\n\nTITLE: Setting Up Referral Events in Roblox\nDESCRIPTION: This Lua script sets up a listener for player join events and retrieves referral information. It uses this data to trigger a RemoteEvent, allowing client-side notification and potential reward logic. Dependencies include the Players and ReplicatedStorage services in Roblox. The code is server-side and requires a pre-existing RemoteEvent named 'ReferralReceivedEvent'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/referral-system.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Create or get the RemoteEvent for handling referrals\nlocal referrerEvent: RemoteEvent = ReplicatedStorage:FindFirstChild(\"ReferralReceivedEvent\")\n\n-- Function that triggers when a player joins\nfunction onPlayerAdded(player)\n    local joinData = player:GetJoinData()\n    local referredByPlayerId = joinData.ReferredByPlayerId\n\n    -- Check if the player was invited through a referral\n    if referredByPlayerId and referredByPlayerId ~= 0 then\n        -- Fire the referral event to the client, passing the inviter's ID\n        referrerEvent:FireClient(player, referredByPlayerId)\n\n        -- Additional logic for rewarding inviter and invitee can be added here\n        -- e.g., rewardReferrer(referredByPlayerId)\n        -- e.g., rewardInvitee(player)\n    end\nend\n\n-- Connect the function to the PlayerAdded event\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Playing Custom Animation on Player Character in Lua\nDESCRIPTION: LocalScript that loads and plays a custom kick animation on a player character. Includes animation event handling through GetMarkerReachedSignal.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/using.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\n\n-- Ensure that the character's humanoid contains an \"Animator\" object\nlocal humanoid = character:WaitForChild(\"Humanoid\")\nlocal animator = humanoid:WaitForChild(\"Animator\")\n\n-- Create a new \"Animation\" instance and assign an animation asset ID\nlocal kickAnimation = Instance.new(\"Animation\")\nkickAnimation.AnimationId = \"rbxassetid://2515090838\"\n\n-- Load the animation onto the animator\nlocal kickAnimationTrack = animator:LoadAnimation(kickAnimation)\n\n-- Play the animation track\nkickAnimationTrack:Play()\n\n-- If a named event was defined for the animation, connect it to \"GetMarkerReachedSignal()\"\nkickAnimationTrack:GetMarkerReachedSignal(\"KickEnd\"):Connect(function(paramString)\n\tprint(paramString)\nend)\n```\n\n----------------------------------------\n\nTITLE: Searching for a Value in an Array in Luau\nDESCRIPTION: This code defines a function to find a specific value in an array and return its index. It then demonstrates how to use the function and print the result.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerItems = {\n\t\"Potion\",\n\t\"Bread\",\n\t\"Bread\",\n\t\"Sleeping Bag\"\n}\n\nlocal function findValue(whichArray, itemName)\n\tfor currentIndex = 1, #whichArray do\n\t\tif whichArray[currentIndex] == itemName then\n\t\t\treturn currentIndex\n\t\tend\n\tend\nend\n\nlocal valueFound = findValue(playerItems, \"Bread\")\n\nprint(\"The value is at index \" .. valueFound)\n```\n\n----------------------------------------\n\nTITLE: Generic For Loops in Luau\nDESCRIPTION: Illustrates the use of generic `for` loops in Luau for iterating over a range of numbers. It shows both forward and reverse loops with customizable start, end, and step values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Forward loop\nfor i = 1, 10 do\n\tdoSomething()\nend\n\n-- Reverse loop\nfor i = 10, 1, -1 do\n\tdoSomething()\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GUI for Scavenger Hunt in Lua\nDESCRIPTION: LocalScript code showing how to implement custom GUI modals for the scavenger hunt's info and completion states.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.showInfoModal:Connect(function()\n\t-- Show a custom info modal\n\tlocal infoModal = Players.LocalPlayer.PlayerGui.ScavengerInfoModal\n\tinfoModal.Enabled = true\nend)\n\nScavengerHunt.showCompleteModal:Connect(function()\n\t-- Show a custom complete modal\n\tlocal completeModal = Players.LocalPlayer.PlayerGui.ScavengerCompleteModal\n\tcompleteModal.Enabled = true\nend)\n```\n\n----------------------------------------\n\nTITLE: Naming and Parenting the Leaderboard in Lua\nDESCRIPTION: This snippet sets a crucial name 'leaderstats' for the Folder instance and parents this instance to the player, which is mandatory for Roblox leaderboards.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerJoin(player)\n      local leaderstats = Instance.new(\"Folder\")\n      leaderstats.Name = \"leaderstats\"\n      leaderstats.Parent = player\n   end\n```\n\n----------------------------------------\n\nTITLE: Checking Premium Membership Status in Roblox\nDESCRIPTION: A code snippet that checks if a player has a Premium membership by examining their MembershipType property. This is useful before implementing Premium-specific features or logic in your experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/engagement-based-payouts.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nif player.MembershipType == Enum.MembershipType.Premium then\n\t-- Take some action specifically for Premium members\nend\n```\n\n----------------------------------------\n\nTITLE: Opening SelfieMode Through Code\nDESCRIPTION: Shows how to programmatically open selfie mode and implement a custom button while disabling the default HUD button.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal button = script.Parent\n\n-- Remove the default button\nSelfieMode.setHudButtonEnabled(false)\n\n-- Connect the custom button\nbutton.Activated:Connect(function()\n\tSelfieMode.openSelfieMode()\nend)\n```\n\n----------------------------------------\n\nTITLE: Complete MatchManager Script\nDESCRIPTION: This is a complete MatchManager script.  It initializes services, requires module scripts, defines variables to store references to ReplicatedStorage and DisplayValues. The script includes functions for managing the game timer, starting the match, and handling the time up event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function timeUp()\n\tprint(\"Time is up!\")\nend\n\nlocal function startTimer()\n\tprint(\"Timer started\")\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\n\n\twhile myTimer:isRunning() do\n\t\t-- Adding +1 makes sure the timer display ends at 1 instead of 0.\n\t\ttimeLeft.Value = (myTimer:getTimeLeft() + 1) // 1\n\t\t-- By not setting the time for wait, it offers more accurate looping\n\t\ttask.wait()\n\tend\nend\n\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nmatchStart.Event:Connect(startTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Implementing Force Field Removal Logic in scheduleDestroyForceField\nDESCRIPTION: This function ensures that the force field is only destroyed once, even if multiple conditions for removal are met simultaneously. It uses a boolean flag and disconnects event connections.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function endForceField()\n\tif forceFieldEnded then\n\t\treturn\n\tend\n\tforceFieldEnded = true\n\n\tattributeChangedConnection:Disconnect()\n\tcharacterRespawnedConnection:Disconnect()\n\tdestroyForceField(player)\nend\n```\n\n----------------------------------------\n\nTITLE: Teleport Player Character with Streaming Request\nDESCRIPTION: This Lua snippet illustrates how to teleport a player character while ensuring that necessary game regions are streamed in beforehand using `RequestStreamAroundAsync`. It utilizes a remote event to trigger the teleportation from the client.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal teleportEvent = ReplicatedStorage:WaitForChild(\"TeleportEvent\")\n\nlocal function teleportPlayer(player, teleportTarget)\n\t-- Request streaming around target location\n\tplayer:RequestStreamAroundAsync(teleportTarget)\n\n\t-- Teleport character\n\tlocal character = player.Character\n\tif character and character.Parent then\n\t\tlocal currentPivot = character:GetPivot()\n\t\tcharacter:PivotTo(currentPivot * CFrame.new(teleportTarget))\n\tend\nend\n\n-- Call teleport function when the client fires the remote event\nteleportEvent.OnServerEvent:Connect(teleportPlayer)\n```\n\n----------------------------------------\n\nTITLE: Connect Product to UI Element\nDESCRIPTION: This code snippet demonstrates how to connect an existing developer product to a UI element (button) and prompt a purchase when the user clicks on it. It uses `MarketplaceService:GetProductInfo()` to get the product's information, checks if the product is for sale, and then uses `MarketplaceService:PromptProductPurchase()` to prompt a purchase.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/developer-products.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal button = script.Parent\n\n-- Replace the placeholder ID with your developer product ID\nlocal productId = 000000\n\n\t-- Gets product info when user clicks the UI button\nbutton.MouseButton1Click:Connect(function()\n\tlocal success, productInfo = pcall(function()\n\t\treturn MarketplaceService:GetProductInfo(productId, Enum.InfoType.Product)\n\tend)\n\n\tif success and productInfo then\n\t\t-- Checks if product is for sale\n\t\tif productInfo.IsForSale then\n\t\t\tprint(\"This is for sale\")\n\t\t\t-- Prompts product purchase\n\t\t\tMarketplaceService:PromptProductPurchase(player, productId)\n\t\telse\n\t\t\t-- Notifies product isn't for sale\n\t\t\tprint(\"This product is not currently for sale.\")\n\t\tend\n\telse\n\t\tprint(\"Error retrieving product info: \" .. tostring(productInfo))\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Push-to-Talk with Roblox Lua\nDESCRIPTION: This Lua script integrates a push-to-talk functionality in Roblox, allowing players to activate their microphone only while holding a specific key, enhancing privacy and control. Dependencies include Roblox services such as 'Players' and 'UserInputService', and it requires the script to be set to run in a client context. The script listens for keypress events and mutes/unmutes the microphone accordingly. It triggers upon pressing and releasing the 'V' key, with no specific input parameters required. This implementation is subject to Roblox's event-handling capabilities and depends on the availability of the local player's 'AudioDeviceInput'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-voice-chat.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal audioIn: AudioDeviceInput = Players.LocalPlayer:WaitForChild(\"AudioDeviceInput\")\nlocal pushToTalkKey = Enum.KeyCode.V\n\naudioIn.Muted = true\n\nUserInputService.InputBegan:Connect(function(input: InputObject)\n    if input.KeyCode == pushToTalkKey then\n        audioIn.Muted = false\n    end\nend)\n\nUserInputService.InputEnded:Connect(function(input: InputObject)\n    if input.KeyCode == pushToTalkKey then\n        audioIn.Muted = true\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings in Luau\nDESCRIPTION: This code shows how to compare strings lexicographically using comparison operators in Luau, noting that numeric strings may produce unexpected results due to ASCII value differences.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nprint(\"Apple\" < \"apple\") --> true\nprint(\"Banana\" < \"apple\") --> true (B is before a in ASCII)\nprint(\"number100\" < \"number20\") --> true\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Creation - Adding Key\nDESCRIPTION: This snippet demonstrates how to add a key to a Luau dictionary.  The key `Name` is added to the `enemy` dictionary without an assigned value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Teleport GUI in Lua\nDESCRIPTION: This snippet shows how to set a custom teleport GUI using TeleportService:SetTeleportGui(). It retrieves the TeleportService and ReplicatedStorage services, gets the custom ScreenGui from ReplicatedStorage, and then sets it as the teleport GUI.  The custom GUI provides a more immersive loading experience for users.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TeleportService = game:GetService(\"TeleportService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal teleportGui = ReplicatedStorage.TeleportGui\n\nTeleportService:SetTeleportGui(teleportGui)\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Event for Raycasting Validation in Luau\nDESCRIPTION: This snippet creates a RemoteEvent in Roblox to handle user weapon interactions and validates raycasting hits on server-side with a focus on separating parallel and serial execution for performance. The function 'onRemoteMouseEvent' listens for clicks and processes raycasting, adjusting effects based on hit outcomes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/multithreading.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal tool = script.Parent.Parent\n\nlocal remoteEvent = Instance.new(\"RemoteEvent\")  -- Create new remote event and parent it to the tool\nremoteEvent.Name = \"RemoteMouseEvent\"  -- Rename it so that the local script can look for it\nremoteEvent.Parent = tool\nlocal remoteEventConnection  -- Create a reference for the remote event connection\n\n-- Function which listens for a remote event\nlocal function onRemoteMouseEvent(player: Player, clickLocation: CFrame)\n\t-- SERIAL: Execute setup code in serial\n\tlocal character = player.Character\n\t-- Ignore the user's character while raycasting\n\tlocal params = RaycastParams.new()\n\tparams.FilterType = Enum.RaycastFilterType.Exclude\n\tparams.FilterDescendantsInstances = { character }\n\n\t-- PARALLEL: Perform the raycast in parallel\ntask.desynchronize()\n\tlocal origin = tool.Handle.CFrame.Position\n\tlocal epsilon = 0.01  -- Used to extend the ray slightly since the click location might be slightly offset from the object\n\tlocal lookDirection = (1 + epsilon) * (clickLocation.Position - origin)\n\tlocal raycastResult = Workspace:Raycast(origin, lookDirection, params)\n\tif raycastResult then\n\t\tlocal hitPart = raycastResult.Instance\n\t\tif hitPart and hitPart.Name == \"block\" then\n\t\t\tlocal explosion = Instance.new(\"Explosion\")\n\n\t\t\t-- SERIAL: The code below modifies state outside of the actor\n\t\t\ttask.synchronize()\n\t\t\texplosion.DestroyJointRadiusPercent = 0  -- Make the explosion non-deadly\n\t\t\texplosion.Position = clickLocation.Position\n\n\t\t\t-- Multiple actors could get the same part in a raycast and decide to destroy it\n\t\t\t-- This is perfectly safe but it would result in two explosions at once instead of one\n\t\t\t-- The following double checks that execution got to this part first\n\t\t\tif hitPart.Parent then\n\t\t\t\texplosion.Parent = Workspace\n\t\t\t\thitPart:Destroy()  -- Destroy it\n\t\t\tend\n\t\tend\n\tend\nend\n\n-- Connect the signal in serial initially since some setup code is not able to run in parallel\nremoteEventConnection = remoteEvent.OnServerEvent:Connect(onRemoteMouseEvent)\n```\n\n----------------------------------------\n\nTITLE: Offsetting a CFrame relative to another object in Lua\nDESCRIPTION: This snippet shows how to offset an object from the position of another object. It creates a new CFrame at the blue cube's position and offsets it upwards by 2 studs, then applies this CFrame to the red block.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal blueCube = Workspace.BlueCube\n\nredBlock.CFrame = CFrame.new(blueCube.Position) + Vector3.new(0, 2, 0)\n```\n\n----------------------------------------\n\nTITLE: Long Running Operations Example in Python\nDESCRIPTION: Provides a Python function to poll for results from a long-running operation using exponential backoff strategy for retries.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef PollForResults(operationPath):\n    currentRetries = 0\n    maxRetries = 10\n    retryPollingDelay = 1\n    retryPollingMultiplier = 2\n    while (currentRetries < maxRetries):\n        # No delay on the first check\n        if (currentRetries == 0):\n            results = GetOperation(operationPath)\n        # Retry logic for subsequent checks\n        else:\n            time.sleep(retryPollingDelay)\n            results = GetOperation(operationPath)\n            # Exponential backoff\n            retryPollingDelay *= retryPollingMultiplier\n        # Check for results and return if they exist\n        if (results.status_code != 200 or results.json()[doneJSONKey]):\n            return results\n        # Otherwise, increment the retry count\n        else:\n           currentRetries += 1\n```\n\n----------------------------------------\n\nTITLE: Checking Player Badge Ownership in Lua\nDESCRIPTION: Utilizing Lua in Roblox, this script monitors player entry and checks badge ownership using the UserHasBadgeAsync function. It establishes a player connection and outputs warnings on errors and performs custom actions based on badge ownership.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/publishing/badges.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal BadgeService = game:GetService(\"BadgeService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal BADGE_ID = 00000000  -- Change this to your badge ID\n\nlocal function onPlayerAdded(player)\n  -- Check if the player has the badge\n\tlocal success, hasBadge = pcall(BadgeService.UserHasBadgeAsync, BadgeService, player.UserId, BADGE_ID)\n\n  -- If there's an error, issue a warning and exit the function\n\tif not success then\n\t\twarn(\"Error while checking if player has badge\")\n\t\treturn\n\tend\n\n\tif hasBadge then\n\t\t-- Handle player's badge ownership as needed\n\tend\nend\n\n-- Connect \"PlayerAdded\" events to the \"onPlayerAdded()\" function\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Using nil to remove an object from the experience in Luau\nDESCRIPTION: This code shows how to use `nil` to remove a `Class.Part` from the workspace in Luau. Setting the `Parent` property of an object to `nil` removes it from the scene. Reassigning the `Parent` property will re-add the object.  Assigning `nil` to the variable referencing the part allows the garbage collector to remove the object entirely.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/nil.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Create a new brick\nlocal part = Instance.new(\"Part\")\n-- Parent new part to the workspace, making it viewable\npart.Parent = Workspace\ntask.wait(1)\n-- Remove the part from view but not from memory\npart.Parent = nil\ntask.wait(1)\n-- Part still exists because it's referenced by the variable \"part\", so it can be returned to view\npart.Parent = Workspace\ntask.wait(1)\n-- Remove the part from view again\npart.Parent = nil\n-- Clear part reference so it gets picked up by the garbage collector\npart = nil\n```\n\n----------------------------------------\n\nTITLE: Using Translation Helper in ROBLOX Lua\nDESCRIPTION: This Lua script showcases how to utilize the TranslationHelper module in a LocalScript for translating strings. After requiring the module from ReplicatedStorage, the script illustrates the setLanguage method to change to Spanish and translate static text. Dependencies are handled via requiring services like ReplicatedStorage. Expected output includes a Spanish language translation printed to the console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/localize-with-scripting.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Require translation module\nlocal TranslationHelper = require(ReplicatedStorage:WaitForChild(\"TranslationHelper\"))\n\n-- Use the functions provided in TranslationHelper\nTranslationHelper.setLanguage(\"es\")\nlocal sourceTranslation = TranslationHelper.translate(\"Screen\")\nprint(sourceTranslation) -- Expected Output in 'es': \"Pantalla\"\n```\n\n----------------------------------------\n\nTITLE: Running the Node.js Script\nDESCRIPTION: This bash script sets the `API_KEY` environment variable and then executes the `updateInventory.js` file using Node.js. It assumes that Node.js is installed and available in the system's PATH.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport API_KEY=... \\\nnode updateInventory.js\n```\n\n----------------------------------------\n\nTITLE: Creating Leaderstats Folder for Player - Roblox Lua\nDESCRIPTION: This snippet enhances the leaderboard setup function by creating a folder named 'leaderstats' for each player. This folder will contain their respective stats for the leaderboard. The folder name must be in lowercase for Roblox to recognize it.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/leaderboards.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function leaderboardSetup(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\nend\n\n-- Connect the \"leaderboardSetup()\" function to the \"PlayerAdded\" event\nPlayers.PlayerAdded:Connect(leaderboardSetup)\n```\n\n----------------------------------------\n\nTITLE: Enabling Rich Text in Roblox TextLabel\nDESCRIPTION: This code creates a new TextLabel instance and enables rich text formatting by setting the RichText property to true. It then sets the text to include a bold formatting tag.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/rich-text.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal title = Instance.new(\"TextLabel\")\ntitle.RichText = true\n\ntitle.Text = \"Use a <b>bold title</b>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SelfieMode Settings in Lua\nDESCRIPTION: Demonstrates how to override default configuration options for SelfieMode behavior, such as disabling character movement while in selfie mode.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.configure({\n\tdisableCharacterMovement = true\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Text Generation Display in Lua\nDESCRIPTION: Client script that handles displaying generated text in chat bubbles. Uses TextChatService to show messages received from the server through a RemoteEvent.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/generate-text.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal ChatEvent = ReplicatedStorage:WaitForChild(\"ChatEvent\")\n\nChatEvent.OnClientEvent:Connect(function(part, message)\n  TextChatService:DisplayBubble(part, message)\n  -- Optionally print for debug purposes\n  print(\"LLM output: \" .. message)\nend)\n```\n\n----------------------------------------\n\nTITLE: Declaring Variable Types in Luau\nDESCRIPTION: Demonstrates Luau's dynamic typing and optional type declaration capabilities, showing how variables can be defined without explicit type annotations or with optional type checking.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/index.md#2025-04-21_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\n-- Dynamic typing\nlocal dynamicVariable = 42\nlocal anotherVariable = \"Hello, Luau!\"\n\n-- Optional type declaration\nlocal typedVariable: number = 100\nlocal stringVariable: string = \"Type checked\"\n```\n\n----------------------------------------\n\nTITLE: Changing Mouse Icon in Roblox with Lua Script\nDESCRIPTION: This snippet alters the default mouse icon in a Roblox game to a custom image specified by a Roblox asset ID. The script requires the `UserInputService` and changes the icon by setting the `MouseIcon` property in a LocalScript. It showcases basic customization of the mouse interface, limited to visible icon changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mouse-and-keyboard.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nUserInputService.MouseIcon = \"rbxassetid://3400146391\"\n```\n\n----------------------------------------\n\nTITLE: Applying HumanoidDescription to a Single Humanoid in Lua\nDESCRIPTION: The Lua code targets a single Humanoid in a player's character to apply a customized HumanoidDescription. Dependencies include the player's character having a Humanoid. Parameters modified include Torso and FaceAccessory. Inputs must be valid asset IDs for Roblox. The output is an updated Humanoid appendage with specified accessories.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\nif humanoid then\n\tlocal descriptionClone = humanoid:GetAppliedDescription()\n\tdescriptionClone.Torso = 86500008\n\t-- Multiple face accessory assets are allowed in a comma-separated string\n\tdescriptionClone.FaceAccessory = descriptionClone.FaceAccessory .. \",2535420239\"\n\t-- Apply modified \"descriptionClone\" to humanoid\n\thumanoid:ApplyDescription(descriptionClone)\nend\n```\n\n----------------------------------------\n\nTITLE: Tweening Image Color in Roblox Lua\nDESCRIPTION: Shows how to dynamically change an ImageLabel's color using TweenService\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nlocal targetColor = Color3.fromRGB(255, 0, 0)\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {ImageColor3 = targetColor})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Populating an Array with Dialogue Strings\nDESCRIPTION: Add multiple dialogue strings to the array, representing different conversation lines for the NPC to use\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-arrays.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal dialogueArray = {\"Hi!\", \"Do I know you?\", \"Goodbye!\"}\n```\n\n----------------------------------------\n\nTITLE: Creating fireWeapon function in Lua\nDESCRIPTION: This snippet defines a function fireWeapon that calculates the target position using getWorldMousePosition. This target position will be used as the endpoint for the raycast that will simulate the laser. It also shows the toolEquipped function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n           -- No object was hit so calculate the position at the end of the ray\n           return screenToWorldRay.Origin + directionVector\n       end\n   end\n\n   local function fireWeapon()\n       local mouseLocation = getWorldMousePosition()\n   end\n\n   local function toolEquipped()\n       tool.Handle.Equip:Play()\n   end\n```\n\n----------------------------------------\n\nTITLE: Initializing TreasureManager Module\nDESCRIPTION: Sets up the basic TreasureManager module with key variables and player key tracking functionality. Includes service references and configuration values for key costs and rewards.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal TreasureManager = {}\n\nlocal Players = game:GetService(\"Players\")\nlocal keyDrop = 1\nlocal chestPickCost = 1\nlocal chestReward = 100\n\n------------------ Local Functions\nlocal function getPlayerKeys(whichCharacter)\n\tlocal player = Players:GetPlayerFromCharacter(whichCharacter)\n\tlocal leaderstats = player:FindFirstChild(\"leaderstats\")\n\treturn leaderstats:WaitForChild(\"Lockpicks\")\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Product Info of a Game Pass in Lua\nDESCRIPTION: This code snippet retrieves information about a specific game pass using Roblox's MarketplaceService. It demonstrates how to check if the product is for sale and display its details.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/game-passes.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\n\n-- Replace the placeholder ID with your pass ID\nlocal productId = 000000\n\nlocal success, productInfo = pcall(function()\n\treturn MarketplaceService:GetProductInfo(productId, Enum.InfoType.GamePass)\nend)\n\n\nif success and productInfo then\n\t-- Check if product is for sale\n\tif productInfo.IsForSale then\n\t\t-- Display product information\n\t\t-- Replace the print statements with UI code to display the pass\n\t\tprint(\"Pass Name: \" .. productInfo.Name)\n\t\tprint(\"Price in Robux: \" .. productInfo.PriceInRobux)\n\t\tprint(\"Description: \" .. productInfo.Description)\n\telse\n\t\tprint(\"This product isn't for sale\")\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring HingeConstraint Motor for Ferris Wheel\nDESCRIPTION: Set up a HingeConstraint to act as a motor with specific angular velocity and torque for a rotating ferris wheel mechanism\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/build-a-ferris-wheel.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Configure HingeConstraint properties\nMainMotor.ActuatorType = Enum.ActuatorType.Motor\nMainMotor.AngularVelocity = 0.314\nMainMotor.MotorMaxTorque = math.huge\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparency Slider with UIDragDetector Event Signals\nDESCRIPTION: This script uses UIDragDetector event signals to create a transparency slider. It configures the detector to use scale-based line translation within a container, updating the container's transparency based on the handle's X position and providing visual feedback when dragging.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/ui-drag-detectors.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Hierarchy is SliderContainer ⟩ Handle ⟩ UIDragDetector ⟩ (this script)\nlocal sliderContainer = script.Parent.Parent.Parent\nlocal handle = sliderContainer:FindFirstChild(\"Handle\")\nlocal uiDragDetector = handle:FindFirstChildWhichIsA(\"UIDragDetector\")\n\nuiDragDetector.ResponseStyle = Enum.UIDragDetectorResponseStyle.Scale  -- Set dragging by scale\nuiDragDetector.DragStyle = Enum.UIDragDetectorDragStyle.TranslateLine  -- Restricts dragging to line\nuiDragDetector.BoundingUI = sliderContainer\n\n-- Initially set container transparency to X scale value of handle\nsliderContainer.BackgroundTransparency = 1 - handle.Position.X.Scale\n\n-- Expand handle border to indicate grab start\nuiDragDetector.DragStart:Connect(function(inputPosition)\n\thandle:FindFirstChildWhichIsA(\"UIStroke\").Thickness = 6\nend)\n\n-- Change transparency by how much it dragged in scale\nuiDragDetector.DragContinue:Connect(function(inputPosition)\n\tsliderContainer.BackgroundTransparency = 1 - handle.Position.X.Scale\nend)\n\n-- Revert handle border to indicate grab end\nuiDragDetector.DragEnd:Connect(function(inputPosition)\n\thandle:FindFirstChildWhichIsA(\"UIStroke\").Thickness = 4\nend)\n```\n\n----------------------------------------\n\nTITLE: Prompting Phone Book in Roblox Connect (Lua)\nDESCRIPTION: Demonstrates the use of SocialService to prompt the phone book, allowing players to initiate calls. This method is connected to the call button in the starting lobby.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/roblox-connect.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nClass.SocialService:PromptPhoneBook()\n```\n\n----------------------------------------\n\nTITLE: Initializing PlayerManager Module\nDESCRIPTION: Initializes the PlayerManager module by getting services and defining local variables for accessing the ReplicatedStorage service, DisplayValues folder, and PlayersLeft IntValue. This setup is crucial for accessing the player count and displaying it in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\n```\n\n----------------------------------------\n\nTITLE: Tweening a Part Back and Forth in Roblox Lua\nDESCRIPTION: This script tweens a part back and forth along a chosen axis when a player clicks on it. It uses the TweenService to animate the part's CFrame, creating the illusion of movement. Customizable variables include tween time and move distance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/animating-parts.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Tweens a part back and forth based on a chosen axis\n-- The button has an on/off state which moves the part forwards or backwards\n\nlocal TweenService = game:GetService(\"TweenService\")\nlocal button = script.Parent\nlocal clickDetector = button:FindFirstChildWhichIsA(\"ClickDetector\")\nlocal buttonState = -1  -- Determines button direction; -1 means it will press in, 1 means it will pop out\nlocal inTween = false\n\n-- Customizable variables\nlocal TWEEN_TIME = 0.15\nlocal TWEEN_MOVE_DISTANCE = 1.5\n\n-- Tween variables\nlocal buttonTweenInfo = TweenInfo.new(\n\tTWEEN_TIME, -- Time\n\tEnum.EasingStyle.Quad, -- EasingStyle\n\tEnum.EasingDirection.Out -- EasingDirection\n)\n\nlocal function buttonPress()\n\t-- If the button is tweening, prevent it from being used again\n\tif inTween == true then\n\t\treturn\n\tend\n\n\t-- Calculate new CFrame for button position\n\tlocal offsetCFrame = CFrame.new(0, TWEEN_MOVE_DISTANCE * buttonState, 0)\n\tlocal newCFrame = button.CFrame:ToWorldSpace(offsetCFrame)\n\n\t-- Create a tween and play it\n\tlocal tweenButton = TweenService:Create(button, buttonTweenInfo, {CFrame = newCFrame})\n\ttweenButton:Play()\n\tinTween = true\n\n\t-- On tween completion, make button usable again\n\ttweenButton.Completed:Connect(function()\n\t\tinTween = false\n\t\t-- Invert the button state\n\t\tbuttonState *= -1\n\tend)\n\nend\n\nclickDetector.MouseClick:Connect(buttonPress)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Character Animations in Roblox\nDESCRIPTION: This script initializes the player character's humanoid and animator objects when they are added to the game, allowing for further manipulation of animations. It is intended to override the default animations in the game with custom settings for each player.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/animation/play-character-animations.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animator = humanoid:WaitForChild(\"Animator\")\n\tprint(\"Animator found!\")\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Handling Tagged Out State in Roblox Lua\nDESCRIPTION: Function that configures the game state when a player has been tagged out. It disables player movement and camera controls, shows the out state UI, and disables the blaster.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTaggedOut()\n\t-- Disable controls while tagged out\n\ttogglePlayerMovement(false)\n\ttogglePlayerCamera(false)\n\tsetGuiExclusivelyEnabled(playerGui.OutStateGui)\n\n\t-- Disable blaster while tagged out\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n```\n\n----------------------------------------\n\nTITLE: Repositioning Players in Roblox Connect (Lua)\nDESCRIPTION: Demonstrates how players are repositioned within the same place using the PivotTo() method of the PVInstance class. This is used in the environment switcher feature to move players between different environments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/roblox-connect.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nClass.PVInstance:PivotTo()\n```\n\n----------------------------------------\n\nTITLE: Handling RemoteEvent on Server with BindableEvents\nDESCRIPTION: This ModuleScript, located in ServerScriptService, manages BindableEvents for each script to connect to a specific ID. When a client sends a network message, the corresponding BindableEvent fires. It uses a table to store BindableEvents and their associated IDs, facilitating message distribution on the server-side.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- ModuleScript in ServerScriptService named NetworkManagerServer\nlocal NetworkManagerServer = {}\n\nlocal networkSignalList = {}\nfunction NetworkManagerServer.GetServerEventSignal(id)\n\tlocal bindableEvent = Instance.new(\"BindableEvent\")\n\t-- Linking the new BindableEvent to the id\n\ttable.insert(networkSignalList, {\n\t\tid = id,\n\t\tbindableEvent = bindableEvent,\n\t})\n\treturn bindableEvent.Event\nend\n\n-- Connecting to\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"RemoteEvent\")\nremoteEvent.OnServerEvent:Connect(function(player, id, ...)\n\t-- Finding every bindable event that matches the id of the received remote event\n\tfor _, signal in networkSignalList do\n\t\tif signal.id == id then\n\t\t\tsignal.bindableEvent:Fire(player, ...)\n\t\tend\n\tend\nend)\n\nreturn NetworkManagerServer\n\n```\n\n----------------------------------------\n\nTITLE: Tracking In-App Purchase Source Event in Lua\nDESCRIPTION: Log economy events for in-app purchases, tracking Robux transactions and currency bundle acquisitions with optional item SKU\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/economy-events.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Source,\n    \"Coins\",\n    1000, -- How many coins are in the bundle\n    1020, -- Balance after transaction\n    Enum.AnalyticsEconomyTransactionType.IAP.Name,\n    \"1000CoinBundle\" -- Unique item SKU identifier of the coin bundle\n)\n```\n\n----------------------------------------\n\nTITLE: Infinite While Loop in Luau\nDESCRIPTION: This code snippet demonstrates an infinite `while` loop in Luau. It uses `true` as the condition, causing the loop to run indefinitely.  It's important to include a `task.wait()` call within the loop to prevent freezing the experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\tprint(\"Looping...\")\n\ttask.wait(0.5)\nend\n\n--[[ Resulting output:\nLooping...\nLooping...\nLooping...\nLooping...\n...\n]]\n```\n\n----------------------------------------\n\nTITLE: Customizing Beam Appearance for Laser Effect\nDESCRIPTION: Describes adding a 'Beam' object to the collision box and customizing its properties such as texture, color, width, and emission to achieve a futuristic laser beam appearance. The settings ensure the beam is visible and emits light correctly within the game environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/laser-traps-with-beams.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Customize beam's visual appearance\nlocal beam = Instance.new('Beam', CollisionBox)\nbeam.Attachment0 = CollisionBox:FindFirstChild(\"StartAttachment\")\nbeam.Attachment1 = CollisionBox:FindFirstChild(\"EndAttachment\")\nbeam.Texture = \"rbxassetid://6060542021\"\nbeam.Color = Color3.fromRGB(255, 47, 137)\nbeam.LightEmission = 0.5\nbeam.Width0 = 4\nbeam.Width1 = 4\nbeam.TextureSpeed = 2\nbeam.FaceCamera = true\n```\n\n----------------------------------------\n\nTITLE: Variable Argument Number in Luau\nDESCRIPTION: Demonstrates how to define a function in Luau that accepts a variable number of arguments using the `...` syntax. The `...` is used both in the function definition and when calling the function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Variable argument number\nlocal function variableArguments(...)\n\tprint(...)\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Camera Position for Side-Scrolling View in Roblox Lua\nDESCRIPTION: This snippet calculates the root position with a height offset and sets the camera position for a side-scrolling view. It uses constants for easy adjustment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal player = Players.LocalPlayer\n\nlocal CAMERA_DEPTH = 24\nlocal HEIGHT_OFFSET = 2\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n            local rootPosition = root.Position + Vector3.new(0, HEIGHT_OFFSET, 0)\n            local cameraPosition = Vector3.new(rootPosition.X, rootPosition.Y, CAMERA_DEPTH)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Based Chat with Roblox Lua\nDESCRIPTION: This Lua script provides a time-based voice chat mechanism in Roblox, where players can only speak and hear each other during specified time intervals, facilitating structured communication phases. It relies on Roblox's 'Players' service and executes within the server context, periodically toggling the mute state of players' microphones through a function called every 15 seconds. No additional inputs are required from the user to initiate the toggle, but the feature can be limited by server performance and the proper initialization of players' 'AudioDeviceInput'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-voice-chat.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal muteAll = false\n\nlocal function toggleMuteAll()\n    muteAll = not muteAll\n    for _, player in Players:GetPlayers() do\n        local device : AudioDeviceInput = player:FindFirstChild(\"AudioDeviceInput\")\n        if not device then\n            continue\n        end\n        device.Muted = muteAll\n    end\nend\n\nwhile true do\n    task.wait(15) -- every 15 seconds\n    toggleMuteAll() -- either allow people to speak, or prevent them from speaking\nend\n```\n\n----------------------------------------\n\nTITLE: Index Type Definitions in Tables\nDESCRIPTION: The code snippet demonstrates defining tables with specific index types in Luau using `[indexType]: valueType` syntax. It shows how explicit index typing ensures type safety when interacting with table elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal numberList: {[string]: number} = {\n\tFoo = 1,\n\tBaz = 10\n}\n\nnumberList[\"bar\"] = true  -- Type error: boolean can't convert to number\n```\n\n----------------------------------------\n\nTITLE: Configuring Emote Wheel GUI in Lua\nDESCRIPTION: This code snippet shows how to configure the Emote Bar module to use the Emote Wheel GUI type instead of the default Emote Bar.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureClient({\n\tguiType = EmoteBar.GuiType.EmoteWheel,\n})\n```\n\n----------------------------------------\n\nTITLE: Concatenation Operations in Luau\nDESCRIPTION: Shows how Luau coerces numbers to strings during concatenation operations, providing an example with direct concatenation and using string formatting for precise control over the output format.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-coercion.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nprint(\"Pi is \" .. math.pi) --> Pi is 3.1415926535898\nprint(\"Pi is \" .. 3.1415927) --> Pi is 3.1415927\n\n-- Rounds to three decimal places\nprint(\"Pi is \" .. string.format(\"%.3f\", 3.1415927)) -- Pi is 3.142\n```\n\n----------------------------------------\n\nTITLE: Setting TeleportOptions to Reserve a New Server in Lua\nDESCRIPTION: This snippet demonstrates how to create a TeleportOptions instance and set the ShouldReserveServer property to true, instructing the teleport to create a new reserved server.  This is useful when starting a new instance for a set of players. The Server automatically handles the process.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal teleportOptions = Instance.new(\"TeleportOptions\")\nteleportOptions.ShouldReserveServer = true\n```\n\n----------------------------------------\n\nTITLE: Working with Regions in Roblox Pathfinding\nDESCRIPTION: This snippet allows for the definition of non-traversable regions using PathfindingModifier objects in Roblox. It demonstrates how to use a Costs table within the CreatePath method to incorporate a modifier labeled as DangerZone to prevent path traversal through the region.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath({\n\tCosts = {\n\t\tDangerZone = math.huge\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Door Gate System with Button Activation in Roblox Lua\nDESCRIPTION: This optional challenge script demonstrates how to create a gate that becomes invisible and non-collidable when a button is pressed. It changes the button color to red for feedback and allows players to walk through the gate area.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/parameters-practice-buttons.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal button = script.Parent\n-- Reminder: Replace the name of the part, Gate, with the one in your project\nlocal gate = workspace.Gate\n\nlocal function buttonPressed()\n\tprint(\"button touched\")\n\t-- Changes button to red to give player feedback\n\tbutton.BrickColor = BrickColor.Red() -- CHANGE THIS\n\t-- Make the gate invisible\n\tgate.Transparency = 1\n\t-- Makes it so the player can walk through the gate\n\tgate.CanCollide = false\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: Listening for User Input in Luau\nDESCRIPTION: This code sample demonstrates how to detect user input when a player equips a fishing pole. It listens for the 'E' key press and triggers a function to perform an action when the key is pressed down. The functionality is tied to the equipped state of the fishing pole, enabling and disabling the input detection appropriately.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/engine-comparisons/fishing-pole-code-sample.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Get the necessary game services\\nlocal ContextActionService = game:GetService(\"ContextActionService\")\\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\\n\\n-- Get a module script from ReplicatedStorage that returns a single function\\nlocal performSomeAction = require(ReplicatedStorage.performSomeAction)\\n\\n-- Assumes that this script is a child of the fishing pole\\nlocal fishingPole = script.Parent\\nlocal ACTION_CAST = \"Cast\"\\n\\n-- Check that the key is down, then call another function\\nlocal function castLine(_actionName, inputState, _inputObject)\\n\\tif inputState == Enum.UserInputState.Begin then\\n\\t\\tperformSomeAction()\\n\\tend\\nend\\n\\n-- Only enable the action when the player equips the fishing pole\\nfishingPole.Equipped:Connect(function()\\n\\tContextActionService:BindAction(ACTION_CAST, castLine, true, Enum.KeyCode.E)\\nend)\\n\\n-- Disable the action when the player unequips the fishing pole\\nfishingPole.Unequipped:Connect(function()\\n\\tContextActionService:UnbindAction(ACTION_CAST)\\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing For Loop to Decrease Light Brightness in Lua\nDESCRIPTION: Creates a second for loop that gradually decreases the light's brightness. It uses the same structure as the increasing loop but with reversed values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfor currentBrightness = 5, 0, -brightnessChange do\n   light.Brightness = currentBrightness\n   task.wait(timeChange)\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Sensor Configuration with Manual Update\nDESCRIPTION: Implementing custom sensing logic by switching ControllerPartSensor to manual update mode\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/character-controllers.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Custom sensor setup\nControllerPartSensor.UpdateType = Enum.UpdateType.Manual\n\n-- Example custom sensing script\nlocal raycastResult = workspace:Raycast(startPos, direction)\nif raycastResult then\n  sensor.SensedPart = raycastResult.Instance\n  sensor.HitNormal = raycastResult.Normal\nend\n```\n\n----------------------------------------\n\nTITLE: Firing Damage Character Event - Lua\nDESCRIPTION: This snippet handles firing the DamageCharacter remote event when a player character is hit. It checks if the hit instance is a Model and if it contains a Humanoid to apply the damage to it.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal characterModel = weaponRaycastResult.Instance:FindFirstAncestorOfClass(\"Model\")\nif characterModel then\n    local humanoid = characterModel:FindFirstChildWhichIsA(\"Humanoid\")\n    if humanoid then\n        eventsFolder.DamageCharacter:FireServer(characterModel)\n    end\nend\nelse\n    -- Calculate the end position based on maximum laser distance\n    hitPosition = tool.Handle.Position + directionVector\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Blast Data for Laser Weapons in Roblox\nDESCRIPTION: Function that creates detailed data about a blast, including the player who fired, the origin position, and ray results. It gets the blaster configuration, calculates ray directions based on camera position, and performs ray casting to determine hit results.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function generateBlastData(): BlastData.Type\n    local blasterConfig = getBlasterConfig()\n\n    local rayDirections = getDirectionsForBlast(\n        currentCamera.CFrame, blasterConfig)\n    local rayResults = castLaserRay(\n        localPlayer, currentCamera.CFrame.Position, rayDirections)\n\n    local blastData: BlastData.Type = {\n        player = localPlayer,\n        originCFrame = currentCamera.CFrame,\n        rayResults = rayResults,\n    }\n    return blastData\nend\n```\n\n----------------------------------------\n\nTITLE: Destroying Particle after Delay - Lua\nDESCRIPTION: This snippet adds a delay of one second using `task.wait(1)` before destroying the particle emitter. This ensures that the player sees the particles before they disappear. It uses the task library for asynchronous waiting.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal particle = Instance.new(\"ParticleEmitter\")\nparticle.Color = ColorSequence.new(currentColor)\n\nlocal playerCharacter = player.Character\nparticle.Parent = playerCharacter:WaitForChild(\"Head\")\n\ntask.wait(1)\nparticle:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Initializing UI Position Tween in Roblox Lua\nDESCRIPTION: Demonstrates how to move a UI element to the center of the screen using TweenService, by setting AnchorPoint and creating a position tween\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal targetPosition = UDim2.new(0.5, 0, 0.5, 0)\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Position = targetPosition})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Polling for Results After Listing Children using Python\nDESCRIPTION: This Python snippet shows how to poll an Operation endpoint to retrieve the actual list of children after initiating the List Children API call. It requires retry parameters to handle the asynchronous nature of the operation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport time\n\napiKey = \"<API_KEY>\"\nuniverseId = \"<UNIVERSE_ID>\"\nplaceId = \"<PLACE_ID>\"\ninstanceId = \"root\"\n\napiKeyHeaderKey = \"x-api-key\"\n\nlistChildrenUrl = \"https://apis.roblox.com/cloud/v2/universes/%s/places/%s/instances/%s:listChildren\"\ngetOperationUrl = \"https://apis.roblox.com/cloud/v2/%s\"\n\nnumberOfRetries = 10\nretryPollingCadence = 5\n\ndoneJSONKey = \"done\"\n\ndef ListChildren():\n  url = listChildrenUrl % (universeId, placeId, instanceId)\n  headerData = {apiKeyHeaderKey: apiKey}\n  results = requests.get(url, headers = headerData)\n  return results\n\ndef GetOperation(operationPath):\n  url = getOperationUrl % (operationPath)\n  headerData = {apiKeyHeaderKey: apiKey}\n  results = requests.get(url, headers = headerData)\n  return results\n\ndef PollForResults(operationPath):\n  currentRetries = 0\n  while (currentRetries < numberOfRetries):\n    time.sleep(retryPollingCadence)\n    results = GetOperation(operationPath)\n    currentRetries += 1\n\n    if (results.status_code != 200 or results.json()[doneJSONKey]):\n      return results\n\nresponse = ListChildren()\nprint(\"Operation Results:\", response.status_code, response.text)\n# Parse the Operation object's path to use in polling for the instance resource.\noperationPath = response.json()['path']\nresponse = PollForResults(operationPath)\nprint(\"Response:\", response.status_code, response.text)\n```\n\n----------------------------------------\n\nTITLE: Creating Sound Object and Playing Background Music in Roblox Lua\nDESCRIPTION: This code snippet demonstrates how to create a Sound object for background music in Roblox and play it using a LocalScript. It accesses the SoundService, retrieves the BackgroundMusic object, and calls the Play() function to start the music.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/play-background-music.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal SoundService = game:GetService(\"SoundService\")\nlocal backgroundMusic = SoundService.BackgroundMusic\n\nbackgroundMusic:Play()\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Environments in Lua\nDESCRIPTION: Demonstrates how to access client and server scene environments using EventSequencer functions in a client schema script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nlocal Schema = EventSequencer.createSchema()\n\nlocal clientEnvironment\nlocal serverEnvironment\n\nSchema.OnSetup = function(timePositionObject)\n\tprint(\"OnSetup (Client)\")\n\n\t-- Access scene environments; does not apply to Inline Mode\n\tclientEnvironment = EventSequencer.getCurrentSceneEnvironment()\n\tserverEnvironment = EventSequencer.getCurrentServerEnvironmentFromClient()\n\n\tprint(\"Current time is:\", timePositionObject.Value)\nend\n```\n\n----------------------------------------\n\nTITLE: Managing HUD Button Visibility\nDESCRIPTION: Demonstrates how to control the visibility of the default selfie mode button when implementing custom UI.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal button = script.Parent\n\n-- Remove the default button\nSelfieMode.setHudButtonEnabled(false)\n\n-- Connect the custom button\nbutton.Activated:Connect(function()\n\tSelfieMode.openSelfieMode()\nend)\n```\n\n----------------------------------------\n\nTITLE: Mapping AnimationIds to Character Names in Roblox\nDESCRIPTION: This Lua script retrieves Animation instances from Character models in Roblox Workspace, extracts their AnimationIds, and maps them to character names, storing the result as a long string output.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/transfer-animations.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal ANIMSTRING = \"\"\n\nfor _, character in Workspace:GetChildren() do\n\t  if not character:IsA(\"Model\") then\n\t\t  continue\n\t  end\n\n\t  local animations = character:FindFirstChild(\"Animations\")\n\t  if not animations then\n\t\t  continue\n\t  end\n\n\t  for _, animation in animations:GetChildren() do\n\t\t  local animationId = string.match(animation.AnimationId, \"%d+\")\n\t\t  if animationId then\n\t\t\t  ANIMSTRING ..= (animationId .. \" \" .. character.Name .. \"_\" .. string.gsub(animation.Name, \" \", \"_\") .. \"\\n\")\n\t\t  end\n\t  end\nend\n\nprint(ANIMSTRING)\n```\n\n----------------------------------------\n\nTITLE: Determining Game End Status in Roblox Lua\nDESCRIPTION: This function in the MatchManager module assigns an end status message based on the game state, either announcing a winner or a timer expiration. It uses predefined game settings to determine the appropriate message and handles error cases where the end state is undefined.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction MatchManager.getEndStatus(endState)\n  local statusToReturn\n\n  if endState == gameSettings.endStates.FoundWinner then\n    local winnerName = playerManager.getWinnerName()\n    statusToReturn = \"Winner is : \" .. winnerName\n  elseif endState == gameSettings.endStates.TimerUp then\n    statusToReturn = \"Time ran out!\"\n  else\n    statusToReturn = \"Error found\"\n  end\n\n  return statusToReturn\nend\n```\n\n----------------------------------------\n\nTITLE: Prompting Game Invite with Launch Data for Multiple Friends in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to create an ExperienceInviteOptions object with launch data and prompt a game invite for multiple friends. It includes error handling and permission checking.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/invite-prompts.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nlocal data = {\n\tsenderUserID = player.UserId,\n\tspawnLocation = {12, 48, 205.5}\n}\n\nlocal launchData = HttpService:JSONEncode(data)\n\n-- Construct invite options with launch data\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.LaunchData = launchData\n\n-- Function to check whether the player can send an invite\nlocal function canSendGameInvite(sendingPlayer)\n\tlocal success, canSend = pcall(function()\n\t\treturn SocialService:CanSendGameInviteAsync(sendingPlayer)\n\tend)\n\treturn success and canSend\nend\n\nlocal canInvite = canSendGameInvite(player)\nif canInvite then\n\tSocialService:PromptGameInvite(player, inviteOptions)\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Lightning Effect Updates on the Server in Roblox Lua\nDESCRIPTION: This snippet controls lightning updates on the server side, managing the timing and parameters for lightning effects. It uses a loop to wait a random number of seconds, create effect data, and broadcast this data to all clients. Key dependencies include task scheduling for timing and event broadcasting for client synchronization.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function LightningUpdate()\n\twhile true do\n\t\ttask.wait(rand:NextNumber(3.0, 10.0))\n\t\tlocal info = CreateFXData()\n\t\tlightningEvent:FireAllClients(info)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Waiting for Match End Event in Lua\nDESCRIPTION: This snippet demonstrates how to use the `Wait()` function on a bindable event to pause the game manager script until the match end event is fired.  This ensures the game loop waits for the current match to complete before restarting.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\t\tprint(\"Restarting intermission\")\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\t-- Placeholder wait for the length of the game.\n\tmatchEnd.Event:Wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Firing MatchEnd Event with TimerUp State (Roblox Lua)\nDESCRIPTION: This snippet shows how to fire the `matchEnd` event with the `TimerUp` end state when the timer runs out. The `matchEnd:Fire()` function is called with the `gameSettings.endStates.TimerUp` variable as an argument.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function timeUp()\n\tmatchEnd:Fire(gameSettings.endStates.TimerUp)\nend\n```\n\n----------------------------------------\n\nTITLE: Remove a Key from a Hash Map - Lua\nDESCRIPTION: This snippet illustrates how to remove a specific key from the hash map using RemoveAsync, handling possible errors via pcall.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/hash-map.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn hashMap:SetAsync(\"User_1234\", 1000, 30)\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n\nlocal removeSuccess, removeError = pcall(function()\n\thashMap:RemoveAsync(\"User_1234\")\nend)\nif not removeSuccess then\n\twarn(removeError)\nend\n```\n\n----------------------------------------\n\nTITLE: Iterating and Finding Player in Table (Lua)\nDESCRIPTION: This snippet expands the `removeActivePlayer` function by iterating through the `activePlayers` table using a `for` loop. Inside the loop, it checks if the current player in the table matches the `player` passed into the function. If a match is found, the code prepares to remove the player from the table.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function removeActivePlayer(player)\n\tfor playerKey, whichPlayer in activePlayers do\n\t\tif whichPlayer == player then\n\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Finding Character and Humanoid in Luau\nDESCRIPTION: Locates the character and humanoid of the touching part, which is necessary to affect the player's health.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/traps-with-if-statements.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal trapPart = script.Parent\n\nlocal function onTouch(otherPart)\n  local character = otherPart.Parent\n  local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\nend\ntrapPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Customizing Incoming Messages in Roblox Chat (Lua)\nDESCRIPTION: This Lua code snippet customizes incoming messages in Roblox's TextChatService. It checks for system messages with metadata, adds a prefix to make them appear as player messages, and displays bubble chat above a specified Workspace object (Statue). The code uses `TextChatService.OnIncomingMessage` to intercept and modify messages and `TextChatService:DisplayBubble` to render bubble chat.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/chat-window.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal generalChannel: TextChannel = TextChatService:WaitForChild(\"TextChannels\").RBXGeneral\n\nTextChatService.OnIncomingMessage = function(textChatMessage: TextChatMessage)\n\tlocal properties = Instance.new(\"TextChatMessageProperties\")\n\n\t-- Check for system messages that contain metadata\n\tif not textChatMessage.TextSource and textChatMessage.Metadata ~= \"\" then\n\n\t\t-- Add prefix to make message look like it was sent by a player\n\t\tproperties.PrefixText = string.format(\"<font color='#%s'>%s: </font>\", \"#50C999\", textChatMessage.Metadata)\n\n\t\t-- Add bubble chat\n\t\tTextChatService:DisplayBubble(Workspace.Statue, textChatMessage.Text)\n\tend\n\n\treturn properties\nend\n\nlocal message = \"Welcome! I will be your guide.\"\nlocal speakerName = \"Ancient Knight\"\ngeneralChannel:DisplaySystemMessage(message, speakerName)\n```\n\n----------------------------------------\n\nTITLE: Applying Texture Recoloring and Stickers in Lua\nDESCRIPTION: These Lua functions demonstrate how to recolor a texture and apply stickers to a MeshPart using EditableImage in Roblox. The `recolorTexture` function recolors a MeshPart's texture using a specified color. The `applySticker` function applies a sticker to a MeshPart's texture at a given texture coordinate. The `applyStickerProjected` function applies a sticker to a MeshPart's texture using projection parameters, accounting for the position and orientation of the sticker.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/in-experience-creation.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function recolorTexture(\n\tmeshPart: MeshPart,\n\tcolor: Color3\n)\n\tlocal bodyPartTexture = AssetService:CreateEditableImageAsync(meshPart.TextureID)\n\tmeshPart.TextureContent = Content.fromObject(bodyPartTexture)\n\n\tbodyPartTexture:DrawRectangle(\n\t\tVector2.new(0, 0),\n\t\tbodyPartTexture.Size,\n\t\tcolor,\n\t\t0,\n\t\tEnum.ImageCombineType.Overwrite\n\t)\nend\n\nlocal function applySticker(\n\tmeshPart: MeshPart,\n\ttextureCoordinate: Vector2,\n\tstickerId: TextureId\n)\n\tlocal bodyPartTexture = AssetService:CreateEditableImageAsync(meshPart.TextureID)\n\tmeshPart.TextureContent = Content.fromObject(bodyPartTexture)\n\n\tlocal stickerTexture = AssetService:CreateEditableImageAsync(stickerId)\n\tbodyPartTexture:DrawImage(textureCoordinate, stickerTexture, Enum.ImageCombineType.BlendSourceOver)\nend\n\nlocal function applyStickerProjected(\n  meshPart: MeshPart,\n  targetMesh: EditableMesh,\n  stickerId: TextureId,\n  raycastHitPos: Vector3\n)\n  local bodyPartTexture = AssetService:CreateEditableImageAsync(meshPart.TextureID)\n\n  local relativePos = meshPart.CFrame:PointToWorldSpace(raycastHitPos)\n  local direction = (game.Workspace.CurrentCamera.CFrame.Position - relativePos).Unit\n\n  local projectionParams: ProjectionParams = {\n      Direction = meshPart.CFrame:VectorToObjectSpace(direction),\n      Position = meshPart.CFrame:PointToObjectSpace(relativePos),\n      Size = Vector3.new(1, 1, 1),\n      Up = meshPart.CFrame:VectorToObjectSpace(Vector3.new(0, 1, 0)),\n  }\n\n  local stickerTexture = AssetService:CreateEditableImageAsync(stickerId)\n  local localBrushConfig: BrushConfig = {\n      Decal = stickerTexture,\n      ColorBlendType = Enum.ImageCombineType.BlendSourceOver,\n      AlphaBlendType = Enum.ImageAlphaType.Default,\n      BlendIntensity = 1,\n      FadeAngle = 90.0\n  }\n\n  bodyPartTexture:DrawImageProjected(targetMesh, projectionParams, localBrushConfig)\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Proximity Button from Item in Roblox MerchBooth\nDESCRIPTION: Shows how to remove a proximity prompt that was added with addProximityButton. This example adds a proximity button and then removes it after a 5-second delay.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tlocal item = Workspace:FindFirstChild(\"Robox\")\n\tif item then\n\t\tMerchBooth.addProximityButton(item, 4819740796)\n\tend\n\n\t-- After some time, remove the prompt\n\ttask.wait(5)\n\tMerchBooth.removeProximityButton(item)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Item View Close Event in Lua\nDESCRIPTION: Connects to the itemViewClosed event to detect when the item detail view is closed. Uses ReplicatedStorage to access the MerchBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.itemViewClosed:Connect(function()\n\tprint(\"Item view closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Example API Call URL\nDESCRIPTION: Demonstrates forming a complete URL for making requests to Open Cloud APIs with included path parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nhttps://apis.roblox.com/cloud/v2/users/4687549151/inventory-items?maxPageSize=100\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Offset for Storm Center in Lua\nDESCRIPTION: This snippet shows how to set the map size and offset the storm's center point. The map_offset variable determines where players will be forced as the storm boundary shrinks, instead of defaulting to the map's center.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/the-storm.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nmap_size = 2450 * 4,\nmap_offset = Vector3.new(4900, 0, 4900),\n```\n\n----------------------------------------\n\nTITLE: Completed MatchManager Script (Lua)\nDESCRIPTION: This is the completed MatchManager script. It handles the overall flow of a match, including preparing the game, determining the end status, cleaning up after the match, and resetting for the next match. It depends on several other modules (PlayerManager, GameSettings, DisplayManager, Timer) and services (ServerStorage, ReplicatedStorage), along with events (MatchStart, MatchEnd) and values (TimeLeft).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Values\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function stopTimer()\n\tmyTimer:stop()\nend\n\nlocal function timeUp()\n\tmatchEnd:Fire(gameSettings.endStates.TimerUp)\nend\n\nlocal function startTimer()\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\n\n\twhile myTimer:isRunning() do\n\t\t-- Adding +1 makes sure the timer display ends at 1 instead of 0.\n\t\ttimeLeft.Value = (myTimer:getTimeLeft() + 1) // 1\n\t\t-- By not setting the time for wait, it offers more accurate looping\n\t\ttask.wait()\n\tend\nend\n\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nfunction MatchManager.getEndStatus(endState)\n\tlocal messageToReturn\n\n\tif endState == gameSettings.endStates.FoundWinner then\n\t\tlocal winnerName = playerManager.getWinnerName()\n\t\tmessageToReturn = \"Winner is : \" .. winnerName\n\telseif endState == gameSettings.endStates.TimerUp then\n\t\tmessageToReturn = \"Time ran out!\"\n\telse\n\t\tmessageToReturn = \"Error found\"\n\tend\n\n\treturn messageToReturn\nend\n\nfunction MatchManager.cleanupMatch()\n\tplayerManager.removeAllWeapons()\nend\n\nfunction MatchManager.resetMatch()\n\tplayerManager.resetPlayers()\nend\n\nmatchStart.Event:Connect(startTimer)\nmatchEnd.Event:Connect(stopTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Searching the Marketplace - Avatar Editor Service in Lua\nDESCRIPTION: This code snippet illustrates how to construct a search query using the CatalogSearchParams object and how to call the SearchCatalog function to retrieve available items.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-editor.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\n\nlocal catalogSearchParams = CatalogSearchParams.new()\nlocal assetTypes = {\n  Enum.AvatarAssetType.BackAccessory,\n  Enum.AvatarAssetType.ShoulderAccessory\n}\ncatalogSearchParams.AssetTypes = assetTypes\n\nlocal pagesObject =\n--This function returns a CatalogPages object containing the results.\nAvatarEditorService:SearchCatalog(catalogSearchParams)\nlocal currentPage = pagesObject:GetCurrentPage()\nfor _, item in currentPage do\n  print(item)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Source Content to CSV Format for Localization Table\nDESCRIPTION: Example CSV structure for adding source content to the Roblox localization table. This demonstrates the basic format with Key, Context, Example and Source columns, where only the Source field is populated with text that needs translation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/manual-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: CSV\nCODE:\n```\nKey,Context,Example,Source\n,,,Options\n,,,Start\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Time in a Scene using Lua\nDESCRIPTION: Demonstrates how to use the EventSequencer's seek function to jump to a specific time in the currently loaded scene.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nEventSequencer.seek(95.58)\n```\n\n----------------------------------------\n\nTITLE: Adding Volume Multipliers to Sound Groups\nDESCRIPTION: Technique for applying a global volume adjustment to all sounds within a sound group without individually modifying each sound's volume.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/groups.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Use `Class.SoundGroup.Volume` property\n- Set a multiplier between 0 and 10\n- Affects all child audio objects proportionally\n```\n\n----------------------------------------\n\nTITLE: Adding Game Passes to MerchBooth in Lua\nDESCRIPTION: Script that adds game passes to the MerchBooth using pass IDs. Includes error handling and demonstrates how to specify items as game passes using Enum.InfoType.GamePass.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t4343758, -- ColdFyre Armor\n\t28521575, -- Slime Shield\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.GamePass)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Emotes\nDESCRIPTION: Demonstrates how to configure server-side emotes with custom animations and properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureServer({\n\tuseDefaultEmotes = false,\n})\n\nEmoteBar.setEmotes({\n\t{\n\t\tname = \"Hello\",\n\t\tanimation = \"rbxassetid://3344650532\",\n\t\timage = \"rbxassetid://7719817462\",\n\t\tdefaultTempo = 1,\n\t},\n\t{\n\t\tname = \"Applaud\",\n\t\tanimation = \"rbxassetid://5915693819\",\n\t\timage = \"rbxassetid://7720292217\",\n\t\tdefaultTempo = 2,\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Maps for Battle Royale Game in Roblox Lua\nDESCRIPTION: This Lua snippet defines a MapManager module to handle the selection and retrieval of spawn locations from different maps in a Roblox game. It uses a random number generator to pick a new map from a predefined set of available maps stored in the Workspace.Maps folder.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/finishing-the-project.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--[[\nSetup Notes:\n1. In Workspace, create a folder named Maps. Store all parts of a map in individual folders.\n2. For each individual map, include a folder named SpawnLocations\n3. When starting a match, use pickNewMap() to get a random map. When assigning player spawn points, use\n\tGetSpawnLocations() to get a table with all locations.\n]]\n\nlocal MapManager = {}\n\nlocal mapsFolder = workspace.Maps\n-- Stores all maps that can be rotated between\nlocal availableMaps = mapsFolder:GetChildren()\n\n-- Stores the current map in play\nlocal activeMap\n\n-- Used to get random maps.\nlocal randomGenerator = Random.new()\n\n-- Gets a random map from the available maps table\nfunction MapManager.pickNewMap()\n\tlocal whichMapKey = randomGenerator:NextInteger(1, #availableMaps)\n\tactiveMap = availableMaps[whichMapKey]\n\tprint(\"New map: \" .. activeMap.Name)\nend\n\n-- returns a table with the maps current spawn points\nfunction MapManager.getSpawnLocations()\n\tlocal spawnPoints = activeMap:FindFirstChild(\"SpawnLocations\")\n\tlocal availableSpawnPoints = spawnPoints:GetChildren()\n\treturn availableSpawnPoints\nend\n\nreturn MapManager\n```\n\n----------------------------------------\n\nTITLE: Rich Text Customization for Chat Messages in Lua\nDESCRIPTION: Applies rich text formatting to chat messages, allowing custom color and styling for user names\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/chat-window.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal chatWindowConfiguration = TextChatService.ChatWindowConfiguration\n\nlocal gradient = Instance.new(\"UIGradient\")\ngradient.Color = ColorSequence.new{\n\tColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),\n\tColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 0)),\n\tColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))\n}\n\nTextChatService.OnChatWindowAdded = function(message: TextChatMessage)\n\tlocal properties = chatWindowConfiguration:DeriveNewMessageProperties()\n\n\tif message.TextSource then\n\t\tproperties.PrefixText = \"[VIP]\"\n\t\tproperties.Text = string.format(\"<font color='#00ffff'>%s</font>\", message.PrefixText) .. \" \" .. message.Text\n\n\t\tproperties.PrefixTextProperties = chatWindowConfiguration:DeriveNewMessageProperties()\n\t\tgradient:Clone().Parent = properties.PrefixTextProperties\n\tend\n\n\treturn properties\nend\n```\n\n----------------------------------------\n\nTITLE: Finalized Fading Platform with Debounce - Luau\nDESCRIPTION: This final snippet presents the complete implementation of the fading platform with debounce logic. It ensures that the fade script executes fully only upon the first touch, resetting after the platform reappears.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal isTouched = false\n\nlocal function fade()\n\tif not isTouched then\n\t\tisTouched = true\n\t\tfor count = 1, 10 do\n\t\t    platform.Transparency = count / 10\n\t\t    task.wait(0.1)\n\t    end\n\t\tplatform.CanCollide = false\n\t\ttask.wait(3)\n\t\tplatform.CanCollide = true\n\t\tplatform.Transparency = 0\n\t\tisTouched = false\n\tend\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Save and Load Character Position\nDESCRIPTION: This code saves and loads the player's character position when they join or leave the game.  It utilizes `CharacterAdded` and `CharacterRemoving` events. Since data stores only accept primitive types, the `Vector3` position is broken down into its X, Y, and Z components before saving.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal DataStoreService = game:GetService(\"DataStoreService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal playerPositionStore = DataStoreService:GetDataStore(\"PlayerPositionStore\")\n\nlocal function positionHandler(player)\n\n    -- Load position on character add\n    player.CharacterAdded:Connect(function(character)\n        local success, coords = pcall(function()\n            return playerPositionStore:GetAsync(player.UserId)\n        end)\n        local position = Vector3.new(coords[1], coords[2], coords[3])\n        if success and position then\n            character:PivotTo(CFrame.new(position))\n            print(\"Loaded player position!\")\n        else\n            warn(\"Failed to load position for player \" .. player.Name .. \". Placing in default position.\")\n        end\n\n        -- Handle player respawn on death\n        local humanoid = character:FindFirstChildOfClass(\"Humanoid\")\n        humanoid.Died:Connect(function()\n            local spawnLocation = Workspace:FindFirstChild(\"SpawnLocation\")\n            character:PivotTo(spawnLocation.CFrame)\n        end)\n    end)\n\n    -- Save position on character removal\n    player.CharacterRemoving:Connect(function(character)\n        local position = character:GetPivot().Position\n        local success, err = pcall(function()\n            playerPositionStore:SetAsync(player.UserId, {position.X, position.Y, position.Z})\n            print(\"Saved player position!\")\n        end)\n        if not success then\n            warn(\"Failed to save position for player \" .. player.Name .. \": \" .. err)\n        end\n    end)\nend\n\nPlayers.PlayerAdded:Connect(positionHandler)\n```\n\n----------------------------------------\n\nTITLE: Server-Side Group Membership Check\nDESCRIPTION: Script that runs on the server to check if a player is in a specific group when they join and sets an IsVIP attribute accordingly. Uses pcall for safe group membership checking.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/group-chat-tags.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Replace 123456 with the group ID you want to check for\nlocal groupID = 123456\n\nPlayers.PlayerAdded:Connect(function(player)\n\tlocal success, isInGroup = pcall(function()\n\t\treturn player:IsInGroup(groupID)\n\tend)\n\n\tif success and isInGroup then\n\t\tplayer:SetAttribute(\"IsVIP\", true)\n\telse\n\t\tplayer:SetAttribute(\"IsVIP\", false)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Sending Network Message in Lua LocalScript\nDESCRIPTION: This Lua snippet shows a LocalScript that sends a network message with a specified ID and optional parameters using the NetworkManagerClient ModuleScript. It requires 'ReplicatedFirst' service to load the ModuleScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- LocalScript in ReplicatedFirst\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\n\nlocal NetworkManagerClient = require(ReplicatedFirst:WaitForChild(\"NetworkManagerClient\"))\nNetworkManagerClient.FireServer(\"RequestA\", \"Hello\")\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Algorithm in Lua\nDESCRIPTION: Demonstrates a selection-based algorithm using an if-then conditional statement to control traffic light color.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/coding-concept-algorithms.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif time == 0 then\n\tstopLightColor = red\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a Sorted Map\nDESCRIPTION: Adds or overwrites data in the sorted map using the SetAsync method, which accepts a key name, a value, an optional expiration time, and an optional sort key.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/sorted-map.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"SortedMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn sortedMap:SetAsync(\"User_1234\", 1000, 30, 3.14152)\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Values to an Array in Luau\nDESCRIPTION: This snippet demonstrates how to create an empty array and add items to it using the table.insert() function. It then prints the array contents.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nplayerItems = {}\n\ntable.insert(playerItems, \"Potion\")\ntable.insert(playerItems, \"Bread\")\ntable.insert(playerItems, \"Sleeping Bag\")\n\nprint(playerItems)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Arrays in Luau\nDESCRIPTION: This code snippet illustrates two methods for iterating over arrays in Luau: general iteration and using numeric loops. It demonstrates iterating by index and value through array lengths.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"A string\", 3.14159, true, \"New string\"}\n\n-- Loop using general iteration\nfor index, value in testArray do\n\tprint(index, value)\nend\n\n-- Iterate using the array length operator (#)\nfor index = 1, #testArray do\n\tprint(index, testArray[index])\nend\n```\n\n----------------------------------------\n\nTITLE: Scripting Collision-Based Damage in Roblox using Lua\nDESCRIPTION: This Lua script is designed to detect when Roblox game objects collide with a laser beam's collision box. When a collision is detected, the script checks for a Humanoid object within the colliding object and sets its Health property to zero, effectively disassembling the character. It requires that the script is a child of a LaserBeamBlaster and that the collision box is correctly named.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/laser-traps-with-beams.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal laserTrap = script.Parent\nlocal collisionBox = laserTrap.CollisionBox\n\nlocal function onTouch(otherPart)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\thumanoid.Health = 0\n\tend\nend\n\ncollisionBox.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Calculating target direction in Lua\nDESCRIPTION: This snippet calculates the direction vector from the tool's position to the mouse location, normalizes it, and stores it in the targetDirection variable. This normalized vector represents the firing direction of the laser.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function fireWeapon()\n\tlocal mouseLocation = getWorldMousePosition()\n\n\t-- Calculate a normalised direction vector and multiply by laser distance\n\tlocal targetDirection = (mouseLocation - tool.Handle.Position).Unit\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Interactions Module in Lua\nDESCRIPTION: This snippet demonstrates how to configure the SocialInteractions module by adjusting the waist orientation weight and disabling chat animations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/social-interactions.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\n-- Make waist rotation more pronounced and disable the chat animations feature\nSocialInteractions.configure({\n\twaistOrientationWeight = 0.75,\n\tuseChatAnimations = false,\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Non-String Table Indices\nDESCRIPTION: Example showing how non-string table indices are automatically converted to strings when passed through bindable events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\nlocal function onEventFire(passedTable)\n\tfor k, v in passedTable do\n\t\tprint(typeof(k))  --> string\n\tend\nend\n\n-- Connect function to event\nbindableEvent.Event:Connect(onEventFire)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\n-- Fire event with table containing a workspace instance as a key\nbindableEvent:Fire({\n\t[workspace.Baseplate] = true\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Effects to Art Placement in Roblox Surface Art Module\nDESCRIPTION: This snippet demonstrates how to add custom visual effects when artwork is placed using the Surface Art module. It connects to the artChanged event and creates a particle emitter effect when new art is added.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nlocal function createParticleEmitter(canvas, position)\n\tlocal attachment = Instance.new(\"Attachment\")\n\tattachment.Position = canvas.CFrame:PointToObjectSpace(position)\n\tattachment.Axis = Vector3.new(0, 0, 1)\n\tattachment.SecondaryAxis = Vector3.new(1, 0, 0)\n\tattachment.Parent = canvas\n\n\tlocal particleEmitter = Instance.new(\"ParticleEmitter\")\n\tparticleEmitter.Speed = NumberRange.new(50)\n\tparticleEmitter.Rate = 50\n\tparticleEmitter.Color = ColorSequence.new(Color3.fromRGB(128, 254, 7))\n\tparticleEmitter.SpreadAngle = Vector2.new(35, 35)\n\tparticleEmitter.Parent = attachment\n\n\treturn attachment\nend\n\nSurfaceArt.artChanged:Connect(function(canvas, spot, spotPosition, artId, ownerId)\n\tif artId then\n\t\t-- Show some sparkles for 3 seconds\n\t\ttask.spawn(function()\n\t\t\tlocal emitterAttachment = createParticleEmitter(canvas, spotPosition)\n\t\t\ttask.wait(3)\n\t\t\temitterAttachment:Destroy()\n\t\tend)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Running the Python Script\nDESCRIPTION: This bash script sets the `API_KEY` environment variable and then executes the `update_inventory` Python script. It assumes Python is installed and in the system's PATH.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport API_KEY=... \\\npython update_inventory\n```\n\n----------------------------------------\n\nTITLE: Defining checkPlayerCount() Function (Roblox Lua)\nDESCRIPTION: This snippet defines a new local function named `checkPlayerCount()` in PlayerManager. This function will be used to check if there is only one player left in the activePlayers table.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Player Variables\nlocal activePlayers = {}\nlocal playerWeapon = ServerStorage.Weapon\n\nlocal function checkPlayerCount()\n\nend\n\nlocal function respawnPlayerInLobby(player)\n```\n\n----------------------------------------\n\nTITLE: Configuring Beam Curve Properties in Roblox\nDESCRIPTION: Demonstrates the properties used to create curved beams using cubic Bézier curves with four control points. Includes CurveSize0, CurveSize1, and Attachment configurations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/effects/beams.md#2025-04-21_snippet_3\n\nLANGUAGE: roblox\nCODE:\n```\nBeam.CurveSize0\nBeam.CurveSize1\nBeam.Attachment0\nBeam.Attachment1\n```\n\n----------------------------------------\n\nTITLE: Clearing All Canvases in Roblox Surface Art Module\nDESCRIPTION: This code snippet shows how to remove all existing art from all canvases in the world using the Surface Art module. It calls the removeAllArt function from a Script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.removeAllArt()\n```\n\n----------------------------------------\n\nTITLE: Implementing Proximity Prompt Event Handlers - Basic Framework\nDESCRIPTION: Basic framework for handling proximity prompt events using ProximityPromptService. Shows how to detect when prompts are triggered, held, and released.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/proximity-prompts.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ProximityPromptService = game:GetService(\"ProximityPromptService\")\n\n-- Detect when prompt is triggered\nlocal function onPromptTriggered(promptObject, player)\n\nend\n\n-- Detect when prompt hold begins\nlocal function onPromptHoldBegan(promptObject, player)\n\nend\n\n-- Detect when prompt hold ends\nlocal function onPromptHoldEnded(promptObject, player)\n\nend\n\n-- Connect prompt events to handling functions\nProximityPromptService.PromptTriggered:Connect(onPromptTriggered)\nProximityPromptService.PromptButtonHoldBegan:Connect(onPromptHoldBegan)\nProximityPromptService.PromptButtonHoldEnded:Connect(onPromptHoldEnded)\n```\n\n----------------------------------------\n\nTITLE: Creating Story Variables in Lua for Roblox\nDESCRIPTION: Initial code setup showing how to create a local variable to store a player's input response to a question and preparing a story variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/code-the-story.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n  -- Code story between the dashes\n  -- =============================================\n     local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n     local story\n  -- =============================================\n```\n\n----------------------------------------\n\nTITLE: Creating a Path with Roblox PathfindingService\nDESCRIPTION: This snippet demonstrates how to create a path using PathfindingService in Roblox. It initializes the service and calls the CreatePath() function to establish a navigational route. Dependencies include access to the 'PathfindingService' module in Roblox. No parameters are required for a basic path creation, but additional options can be provided in a table to customize the path's characteristics. There are no inputs required for this basic initialization, and the output is a path object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\\n\\nlocal path = PathfindingService:CreatePath()\n```\n\n----------------------------------------\n\nTITLE: Dynamically Scripted Product Price Retrieval in Lua\nDESCRIPTION: Example of retrieving a product's price dynamically using MarketplaceService in a Roblox client script. This method allows for flexible price management and is required for price optimization testing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/price-optimization.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal productInfo = MarketplaceService:GetProductInfo(PRODUCT_ID)\nlocal price = productInfo.PriceInRobux\n```\n\n----------------------------------------\n\nTITLE: Custom Vector2 Division with Metamethods\nDESCRIPTION: Implements complex division operations for a custom vector2 class using metamethods to handle different scenarios\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal vector2 = {__type = \"vector2\"}\nlocal mt = {__index = vector2}\n\nfunction mt.__div(a, b)\n\tif type(a) == \"number\" then\n\t\t-- a is a scalar, b is a vector\n\t\tlocal scalar, vector = a, b\n\t\treturn vector2.new(scalar / vector.x, scalar / vector.y)\n\telseif type(b) == \"number\" then\n\t\t-- a is a vector, b is a scalar\n\t\tlocal vector, scalar = a, b\n\t\treturn vector2.new(vector.x / scalar, vector.y / scalar)\n\telseif (a.__type and a.__type == \"vector2\" and b.__type and b.__type == \"vector2\") then\n\t\t-- both a and b are vectors\n\t\treturn vector2.new(a.x / b.x, a.y / b.y)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Stack Usage Example in Luau\nDESCRIPTION: This code demonstrates how to use the stack implementation. It retrieves the stack module from ReplicatedStorage, creates a new stack instance, pushes several values onto the stack, and then pops values from the stack while printing the popped values. It relies on the previous Stack implementation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/stacks.md#2025-04-21_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Stack = require(ReplicatedStorage:WaitForChild(\"Stack\"))\n\nlocal s = Stack.new()\n\n-- Change the stack \tResulting stack\t\t Output\n\ns:push(1)      \t\t\t-- {1}\n\ns:push(5)      \t\t\t-- {1, 5}\n\ns:push(10)     \t\t\t-- {1, 5, 10}\n\nprint(s:pop()) \t\t\t-- {1, 5}            10\n\nprint(s:pop()) \t\t\t-- {1}               5\n\ns:push(20)     \t\t\t-- {1, 20}\n\nprint(s:pop()) \t\t\t-- {1}               20\n\nprint(s:pop()) \t\t\t-- {}                1\n```\n\n----------------------------------------\n\nTITLE: Receiving Network Message on Server\nDESCRIPTION: This Script, located in ServerScriptService, connects to the network message ID 'RequestA' using the NetworkManagerServer ModuleScript. When a message with this ID is received, it prints a statement with the player and any additional parameters. This demonstrates how to receive and handle network messages on the server-side.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Script in ServerScriptService\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal NetworkManagerServer = require(ServerScriptService:WaitForChild(\"NetworkManagerServer\"))\nNetworkManagerServer.GetServerEventSignal(\"RequestA\"):Connect(function(player, ...)\n\tprint(\"Received RequestA from\", player, ...)\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Low Health Bubbles Customization in Roblox\nDESCRIPTION: This Lua code snippet customizes chat bubbles for players with low health (less than 25). It utilizes the TextChatService.OnBubbleAdded event to detect new chat bubbles and checks the Health property of the player's Humanoid. If the health is low, it modifies the bubble's BackgroundColor3, TextColor3, TextSize, FontFace, and adds a UIGradient to enhance the visual effect. This customization is performed on the client-side.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/bubble-chat.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Event handler for when a new chat bubble is added to the experience\nTextChatService.OnBubbleAdded = function(message: TextChatMessage, adornee: Instance)\n\t-- Check if the chat message has a TextSource (sender) associated with it\n\tif message.TextSource then\n\t\t-- Get the user who sent the chat message by using their UserId\n\t\tlocal player = Players:GetPlayerByUserId(message.TextSource.UserId)\n\n\t\t-- Find the humanoid in the user's character\n\t\tlocal humanoid = player.Character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\t\tif humanoid and humanoid.Health < 25 then\n\t\t\t-- Create a new BubbleChatMessageProperties instance to customize the chat bubble\n\t\t\tlocal bubbleProperties :BubbleChatMessageProperties = Instance.new(\"BubbleChatMessageProperties\")\n\n\t\t\t-- Customize the chat bubble properties for low health condition\n\t\t\tbubbleProperties.BackgroundColor3 = Color3.fromRGB(245, 245, 245)\n\t\t\tbubbleProperties.TextColor3 = Color3.fromRGB(234, 51, 96)\n\t\t\tbubbleProperties.TextSize = 20\n\t\t\tbubbleProperties.FontFace = Font.fromEnum(Enum.Font.DenkOne)\n\n\t\t\t-- Add a UIGradient as a child to customize the gradient\n\t\t\tlocal uiGradient : UIGradient = Instance.new(\"UIGradient\")\n\t\t\tuiGradient.Color = ColorSequence.new(Color3.fromRGB(110, 4, 0), Color3.fromRGB(0, 0, 0))\n\t\t\tuiGradient.Rotation = 90\n\t\t\tuiGradient.Parent = bubbleProperties\n\t\t\t\n\t\t\treturn bubbleProperties\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Processing Drag-and-Drop Actions in Roblox - Lua\nDESCRIPTION: This snippet details how to process drop data when a drag-and-drop event occurs. By connecting to the PluginDragDropped event on a widget, it handles received data based on its MIME type, updating the UI to reflect the received data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onDragDrop(dragData)\n\tprint(\"PluginDragDropped\")\n\tif dragData.MimeType == \"text/plain\" then\n\t\ttextLabel.Text = dragData.Data\n\telse\n\t\ttextLabel.Text = dragData.MimeType\n\tend\nend\n\ndragTargetWidget.PluginDragDropped:Connect(onDragDrop)\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification with Parameters\nDESCRIPTION: Shows how to send a personalized notification with dynamic parameters using cURL, enabling variable content for each recipient\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/experience-notifications.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://apis.roblox.com/cloud/v2/users/${UserId}/notifications' \\\n--header 'x-api-key: ${ApiKey}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\t\"source\": {\n\t\t\"universe\": \"universes/${UniverseID}\"\n\t},\n\t\"payload\": {\n\t\t\"message_id\": \"${AssetID}\",\n\t\t\"type\": \"MOMENT\",\n\t\t\"parameters\": {\n\t\t\t\"userId-friend\": {\"int64_value\": 3702832553},\n\t\t\t\"points\": {\"string_value\": \"5\"}\n\t\t}\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: Toggling Catalog Button Visibility in Roblox MerchBooth\nDESCRIPTION: Demonstrates how to hide the default catalog button that appears on the right side of the screen, useful when implementing custom buttons or limiting access to the MerchBooth UI.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.toggleCatalogButton(false)\n```\n\n----------------------------------------\n\nTITLE: Calculating Age Signal Score in Lua\nDESCRIPTION: This snippet calculates the age difference signal score, which inversely correlates to the age difference between the average server age and the joining player's age. It limits the maximum age difference to 25.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nageDifferenceSignalScore = 1 - min(25, ageDifference) / 25, where\nageDifference = abs(avgServerAge - joiningPlayerAge)\n```\n\n----------------------------------------\n\nTITLE: Ray Path Obstruction Check in Lua\nDESCRIPTION: Validates if a ray's path is obstructed by scaling the direction vector to check for walls or obstacles between origin and destination.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal scaledDirection = (rayResult.destination.Position - blastData.originCFrame.Position)\nscaledDirection *= (scaledDirection.Magnitude - 1) / scaledDirection.Magnitude\n```\n\n----------------------------------------\n\nTITLE: Implementing Hazard Detection with Touched Event in Lua\nDESCRIPTION: This script creates a hazard detection system that sets a player's health to zero when they touch a hazard part. It locates all hazard objects in the Hazards folder and connects a touch event handler to each one.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/create-player-hazards.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal hazardsFolder = Workspace.World.Hazards\nlocal hazards = hazardsFolder:GetChildren()\n\nlocal function onHazardTouched(otherPart)\n\tlocal character = otherPart.Parent\n\tlocal player = Players:GetPlayerFromCharacter(character)\n\tif player then\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\thumanoid.Health = 0\n\t\tend\n\tend\nend\n\nfor _, hazard in hazards do\n\thazard.Touched:Connect(onHazardTouched)\nend\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with OAuth 2.0 Access Token\nDESCRIPTION: This bash code snippet shows how to publish a message using an OAuth 2.0 access token for authorization. It includes the access token in the authorization header, along with the content type and the message payload. It publishes a message to a specific universe.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-messaging.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/cloud/v2/universes/{universe}:publishMessage' \\\n--header 'Authorization: Bearer <access_token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"topic\": \"some-topic\",\"message\":\"message to publish\"}'\n```\n\n----------------------------------------\n\nTITLE: Container Capability Example\nDESCRIPTION: Example of capability inheritance between nested containers, demonstrating how inner container capabilities are limited by outer container capabilities.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/capabilities.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Outer container: Basic, Audio, CSG\n-- Inner container: Basic, Network\n-- Result: Only Basic capabilities available to inner container\n```\n\n----------------------------------------\n\nTITLE: Configuring Dust Particle Emitter Properties in Roblox Studio\nDESCRIPTION: These property settings create atmospheric dust motes that gently float upward. The configuration includes size, transparency, rotation, and acceleration settings to create natural-looking dust particles that add depth to the game environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/building/create-basic-visual-effects.md#2025-04-21_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nColor: 192, 241, 255\nSize: NumberSequence (rises to 0.25 shortly after creation, then fades down gradually to 0)\nTexture: rbxassetid://14302399641\nTransparency: NumberSequence (begins fully transparent, becomes randomly more opaque with envelope of 0.1, then fades out)\nZOffset: -5\nLifetime: 1, 10\nRate: 50000\nRotation: -45, 45\nRotSpeed: -60\nSpeed: 1, 5\nAcceleration: 1, -1, 1\n```\n\n----------------------------------------\n\nTITLE: Implementing GameManager Script in Lua for Roblox Game Flow Control\nDESCRIPTION: This script controls the overall game flow including intermission periods and match transitions. It uses the MatchManager module and GameSettings to determine timing. The script continuously cycles between intermission and match states, waiting for enough players before starting a new match.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\nwhile true do\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\t\tprint(\"Restarting intermission\")\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\t-- Placeholder wait for the length of the game.\n\tmatchEnd.Event:Wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting to actionDeactivated Event in Lua\nDESCRIPTION: Demonstrates how to connect to the actionDeactivated event which fires when a primary action or sub-action is deactivated. The callback receives the deactivated action object as a parameter. This can only be used in a LocalScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.actionDeactivated:Connect(function(action)\n\tprint(action.name, \"deactivated\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Example Notification String Formats\nDESCRIPTION: Sample notification string templates showing different ways to incorporate custom parameters into experience notifications. These examples demonstrate usage of parameters like numQuests, eggName, numRaces, racetrackName, and userId-friend.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/experience-notifications/implementation-create-notification-string.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"You're {numQuests} quests away from completing the weekly challenge!\"\n\"Your {eggName} hatched! Come meet your new pet.\"\n\"You won {numRaces} races this week and unlocked the {racetrackName} track!\"\n\"{userId-friend} just beat your record on the Tokyo Tour track! Time for revenge?\"\n```\n\n----------------------------------------\n\nTITLE: Implementing For Loop to Increase Light Brightness in Lua\nDESCRIPTION: Creates a for loop that gradually increases the light's brightness. It uses the control variable to set the light's brightness and includes a wait function for a gradual effect.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfor currentBrightness = 0, 5, brightnessChange do\n   light.Brightness = currentBrightness\n   task.wait(timeChange)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an Array of Parts in Luau\nDESCRIPTION: Initialize an array to store references to parts in the Roblox workspace.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/loops-and-arrays.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal pathArray = {\n\tworkspace.Part1,\n\tworkspace.Part2,\n\tworkspace.Part3,\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Resource ID Filtering\nDESCRIPTION: Comprehensive query to filter multiple resource types by their specific IDs, including assets, badges, game passes, and private servers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_10\n\nLANGUAGE: query_filter\nCODE:\n```\nfilter=assetIds=1,2,3,4;badgeIds=1,2,3,4;gamePassIds=1,2,3,4;privateServerIds=1,2,3,4\n```\n\n----------------------------------------\n\nTITLE: Implementing Purchase Handlers in Lua for Roblox Bundles Package\nDESCRIPTION: This snippet shows how to implement purchase handlers for both marketplace and in-experience purchases. It includes functions to award purchases and initialize handlers for different bundle types.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function awardInExperiencePurchase(\n    _player: Player,\n    _bundleId: Types.BundleId,\n    _currencyId: CurrencyTypes.CurrencyId,\n    _price: number\n)\n    -- Check if the player has enough currency to purchase the bundle\n    -- Update player data, give items, etc.\n    -- Deduct the currency from the player\n\n    task.wait(2)\n    return true\nend\n\nlocal function initializePurchaseHandlers()\n    local bundles = Bundles.getBundles()\n    for bundleId, bundle in bundles do\n        -- Bundle is not associated with a developer product if it does not have marketplace price type\n        if not bundle or bundle.pricing.priceType ~= \"Marketplace\" then\n            continue\n        end\n\n        Bundles.setPurchaseHandler(bundleId, awardMarketplacePurchase)\n        receiptHandlers[bundle.pricing.devProductId] = receiptHandler\n    end\n\n    -- If you have any in-experience currencies that you are using for bundles, set the handler here\n    for currencyId, _ in Currencies do\n        Bundles.setInExperiencePurchaseHandler(currencyId, awardInExperiencePurchase)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Gamepad\nDESCRIPTION: This snippet checks if a player's device has a gamepad enabled using the UserInputService.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nif UserInputService.GamepadEnabled then\n\tprint(\"Player has gamepad enabled...\")\nend\n```\n\n----------------------------------------\n\nTITLE: Increasing Player WalkSpeed on Touch\nDESCRIPTION: Modifies the Humanoid's WalkSpeed property by adding 10 to the current value each time the powerup is touched.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouch(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n   if humanoid then\n\t   humanoid.WalkSpeed += 10\n   end\nend\n\nspeedBoost.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Subtracting One Set from Another in Lua\nDESCRIPTION: This snippet demonstrates subtracting items from one set by another using the metatable `__sub` method. It removes items present in the second set from the first.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nfunction Set:__sub(otherSet)\n\tlocal result = Set.new()\n\tfor entry in self do\n\t\tresult[entry] = true\n\tend\n\tfor entry in otherSet do\n\t\tresult[entry] = nil\n\tend\n\treturn result\nend\n\nlocal allFruits = Set.new({\"Apple\", \"Lemon\", \"Mango\", \"Cherry\", \"Lime\", \"Peach\"})\nlocal sourFruits = Set.new({\"Lemon\", \"Lime\"})\n\nlocal sweetFruits = allFruits - sourFruits\nsweetFruits:output() -- Mango, Apple, Cherry, Peach\n```\n\n----------------------------------------\n\nTITLE: Positioning a CFrame using Vector3 in Lua\nDESCRIPTION: This snippet shows an alternative way to create a CFrame using a Vector3 position. It creates a Vector3 at (-2, 2, 4) and uses it to create a new CFrame, which is then applied to a red block.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\n-- Create new CFrame\nlocal newVector3 = Vector3.new(-2, 2, 4)\nlocal newCFrame = CFrame.new(newVector3)\n\n-- Overwrite redBlock's current CFrame with new CFrame\nredBlock.CFrame = newCFrame\n```\n\n----------------------------------------\n\nTITLE: Array Iteration with ipairs() in Luau\nDESCRIPTION: This code snippet demonstrates how to iterate over an array in Luau using the `ipairs()` function. The `ipairs()` function returns an iterator that provides the index and value of each element in the array.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/control-structures.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal array = {\"a\", \"b\", \"c\", \"d\", \"e\"}\nfor index, value in ipairs(array) do\n\tprint(index, value)\nend\n\n--[[ Resulting output:\n1 a\n2 b\n3 c\n4 d\n5 e\n]]\n```\n\n----------------------------------------\n\nTITLE: Repeating Array Operations with a While Loop in Luau\nDESCRIPTION: Use a while loop to continuously cycle through disappearing and reappearing parts in an array.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/loops-and-arrays.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n   -- Make a part disappear from the array in order\n\tfor partIndex = 1, #pathArray  do\n\t\ttask.wait(VANISH_RATE)\n\t\tlocal whichPart = pathArray[partIndex]\n\t\twhichPart.CanCollide = false\n\t\twhichPart.Transparency = 1\n\tend\n\n\t-- Wait for a second before making the path reappear\n\ttask.wait(1)\n\n\t-- Reset the path by making all parts walkable again\n\tfor partIndex = 1, #pathArray do\n\t\tlocal whichPart = pathArray[partIndex]\n\t\twhichPart.CanCollide = true\n\t\twhichPart.Transparency = 0\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Points in Roblox Luau\nDESCRIPTION: Complete setup for the givePoints function that accesses both the player's leaderstats folder and their Points value, which will be modified based on the part's color.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal function givePoints(player)\n\tlocal currentColor = pointPart.Color\n\n\tlocal playerStats = player:WaitForChild(\"leaderstats\")\n\tlocal playerPoints = playerStats:WaitForChild(\"Points\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Emote Bar Options in Lua\nDESCRIPTION: This snippet demonstrates how to configure server-side options for the Emote Bar module, such as adjusting the minimum number of players for mega emotes and disabling particle effects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureServer({\n\temoteMinPlayers = 2,\n\tplayParticles = false,\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Bubble Customization in Roblox Lua\nDESCRIPTION: This Lua script customizes the appearance of bubble chat in a Roblox game. It modifies properties like text color and font, adds a UICorner for sharp corners, adjusts UIPadding for spacing, and sets a background image using an ImageLabel. It relies on the TextChatService and its BubbleChatConfiguration to implement these changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/bubble-chat.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal bubbleChatConfiguration = TextChatService.BubbleChatConfiguration\nbubbleChatConfiguration.TailVisible = false\nbubbleChatConfiguration.TextColor3 = Color3.fromRGB(220, 50, 50)\nbubbleChatConfiguration.FontFace = Font.fromEnum(Enum.Font.LuckiestGuy)\n\nlocal bubbleUICorner = bubbleChatConfiguration:FindFirstChildOfClass(\"UICorner\")\nif not bubbleUICorner then\n\tbubbleUICorner = Instance.new(\"UICorner\")\n\tbubbleUICorner.Parent = bubbleChatConfiguration\nend\nbubbleUICorner.CornerRadius = UDim.new(0, 0)\n\nlocal bubbleUIPadding = bubbleChatConfiguration:FindFirstChildOfClass(\"UIPadding\")\nif not bubbleUIPadding then\n\tbubbleUIPadding = Instance.new(\"UIPadding\")\n\tbubbleUIPadding.Parent = bubbleChatConfiguration\nend\nbubbleUIPadding.PaddingTop = UDim.new(0, 20)\nbubbleUIPadding.PaddingRight = UDim.new(0, 10)\nbubbleUIPadding.PaddingBottom = UDim.new(0, 15)\nbubbleUIPadding.PaddingLeft = UDim.new(0, 10)\n\nlocal bubbleImageLabel = bubbleChatConfiguration:FindFirstChildOfClass(\"ImageLabel\")\nif not bubbleImageLabel then\n\tbubbleImageLabel = Instance.new(\"ImageLabel\")\n\tbubbleImageLabel.Parent = bubbleChatConfiguration\nend\nbubbleImageLabel.Image = \"rbxassetid://109157529833093\"\nbubbleImageLabel.ScaleType = Enum.ScaleType.Slice\nbubbleImageLabel.SliceCenter = Rect.new(40, 40, 320, 120)\nbubbleImageLabel.SliceScale = 0.5\n```\n\n----------------------------------------\n\nTITLE: Removing Key-Value Pairs in Dictionaries\nDESCRIPTION: This snippet shows how to remove a key-value pair from a dictionary in Luau by setting its value to `nil`. It demonstrates the resulting dictionary after removal.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal testDictionary = {\n\tfruitName = \"Lemon\",\n\tfruitColor = \"Yellow\",\n\tsour = true\n}\n\ntestDictionary[\"sour\"] = nil\n\nfor key, value in pairs(testDictionary) do\n\tprint(key, value)\nend\n--[[ Resulting output:\nfruitName Lemon\nfruitColor Yellow\n]]\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Size Sequence in Roblox Lua\nDESCRIPTION: Command to configure the size sequence of mist particles, making them increase from 20 to 25 studs over their lifetime with some variation. This creates a realistic vapor expansion effect.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-waterfalls.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nworkspace.Mist.RiseMist.Mist.Size = NumberSequence.new{NumberSequenceKeypoint.new(0,20,1), NumberSequenceKeypoint.new(1,25,5)}\n```\n\n----------------------------------------\n\nTITLE: Using Anchors in String Matching - Luau\nDESCRIPTION: This snippet demonstrates using the ^ and $ anchors to match patterns at the start and end of strings, as well as the combination of both to match entire strings. It shows how these anchors affect string matching outcomes in Luau.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal start1 = string.match(\"first second third\", \"^first\")  -- Matches because \"first\" is at the beginning\nprint(start1)  --> first\n\nlocal start2 = string.match(\"third second first\", \"^first\")  -- Doesn't match because \"first\" isn't at the beginning\nprint(start2)  --> nil\n\nlocal end1 = string.match(\"first second third\", \"third$\")  -- Matches because \"third\" is at the end\nprint(end1)  --> third\n\nlocal end2 = string.match(\"third second first\", \"third$\")  -- Doesn't match because \"third\" isn't at the end\nprint(end2)  --> nil\n```\n\nLANGUAGE: Lua\nCODE:\n```\n-- Using both ^ and $ to match across a full string\nlocal match1 = string.match(\"Roblox\", \"^Roblox$\")  -- Matches because \"Roblox\" is the entire string (equality)\nprint(match1)  --> Roblox\n\nlocal match2 = string.match(\"I play Roblox\", \"^Roblox$\")  -- Doesn't match because \"Roblox\" isn't at the beginning AND end\nprint(match2)  --> nil\n\nlocal match3 = string.match(\"I play Roblox\", \"Roblox\")  -- Matches because \"Roblox\" is contained within \"I play Roblox\"\nprint(match3)  --> Roblox\n```\n\n----------------------------------------\n\nTITLE: Removing All Artworks in Roblox\nDESCRIPTION: This Lua snippet removes all artwork from all canvases using the SurfaceArt module. It requires the 'ReplicatedStorage' service to access 'SurfaceArt'. The snippet effectively clears all art assets.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.removeAllArt()\n```\n\n----------------------------------------\n\nTITLE: Forcing Player Character Reload in Lua\nDESCRIPTION: Completes the `preparePlayer` function to force player character reloads, which resets their spawn location and ensures players only start with tools assigned by the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Lava Reference - Roblox Lua\nDESCRIPTION: Creates a reference to the parent object (lava floor part) that contains the script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Creating Line Force Constraint - React\nDESCRIPTION: This snippet exemplifies how to implement a Line Force constraint, which applies force along the line connecting two attachments, vital for specific movement dynamics.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/mover-constraints.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Card variant=\"outlined\" style={{height: '100%'}}>\n<CardContent>\n<Button href=\"../physics/constraints/line-force.md\" size=\"large\" color=\"primaryBrand\" variant=\"outlined\" fullWidth>Line Force</Button>\n<p></p>\n<CardMedia component=\"video\" controls src=\"../assets/physics/constraints/LineForce-Demo.mp4\" />\n<p></p>\n<figcaption>[LineForce](../physics/constraints/line-force.md) applies force along the theoretical line connecting its two attachments</figcaption>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Facing a CFrame toward a point in Lua\nDESCRIPTION: This snippet shows how to use CFrame.new() to point the front surface of a CFrame at a specific point in the world. It positions a red block at (0, 3, 0) and points its front surface at a blue cube's position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal blueCube = Workspace.BlueCube\n\n-- Create a Vector3 for both the start position and target position\nlocal startPosition = Vector3.new(0, 3, 0)\nlocal targetPosition = blueCube.Position\n\n-- Put the redBlock at 'startPosition' and point its front surface at 'targetPosition'\nredBlock.CFrame = CFrame.new(startPosition, targetPosition)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered MerchBooth Items\nDESCRIPTION: Shows how to retrieve a dictionary of currently registered items in the MerchBooth after successfully adding an item, using the getItems method.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tlocal items = MerchBooth.getItems()\n\tprint(items)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Blocked Paths in Roblox Pathfinding\nDESCRIPTION: This code snippet is designed to manage dynamic changes in Roblox paths, particularly when a computational path becomes blocked. It listens for the Path.Blocked event and re-computes the path to navigate around obstacles. The snippet builds on previously defined functions for path computation and requires the PathfindingService, Players, and Humanoid classes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath()\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal TEST_DESTINATION = Vector3.new(100, 0, 100)\n\nlocal waypoints\nlocal nextWaypointIndex\nlocal reachedConnection\nlocal blockedConnection\n\nlocal function followPath(destination)\n\t-- Compute the path\n\tlocal success, errorMessage = pcall(function()\n\t\tpath:ComputeAsync(character.PrimaryPart.Position, destination)\n\tend)\n\n\tif success and path.Status == Enum.PathStatus.Success then\n\t\t-- Get the path waypoints\n\t\twaypoints = path:GetWaypoints()\n\n\t\t-- Detect if path becomes blocked\n\t\tblockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)\n\t\t\t-- Check if the obstacle is further down the path\n\t\t\tif blockedWaypointIndex >= nextWaypointIndex then\n\t\t\t\t-- Stop detecting path blockage until path is re-computed\n\t\t\t\tblockedConnection:Disconnect()\n\t\t\t\t-- Call function to re-compute new path\n\t\t\t\tfollowPath(destination)\n\t\t\tend\n\t\tend)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Clustering Formula for Player Categorical Signal\nDESCRIPTION: Calculates a score based on the ratio of players in the server who have the same categorical attribute as the joining player. Higher scores indicate more players sharing the same attribute value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal score = num_players_same_{attribute_name} / occupancy\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Defining Season Passes in Lua\nDESCRIPTION: This code snippet demonstrates how to define a pass with a unique assetID to represent a season pass. It sets the details of the pass in the 'premiumTrack' field of the season configuration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/season-passes.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n    premiumTrack = {\n        pricing = {\n            gamePassId = 928192647,\n        },\n        trackMetadata = {\n            trackName = \"Premium Track\",\n        },\n    },\n```\n\n----------------------------------------\n\nTITLE: Playing Looping Waterfall Audio in Roblox\nDESCRIPTION: This Lua script plays a looping audio track for a waterfall. It references the parent AudioPlayer object and sets it to play continuously.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-3D-audio.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal audioPlayer = script.Parent\naudioPlayer:Play()\n```\n\n----------------------------------------\n\nTITLE: Scaling UI Size with Aspect Ratio Constraint in Roblox Lua\nDESCRIPTION: Shows how to dynamically resize a UI element to a percentage of screen size while maintaining its aspect ratio using UIAspectRatioConstraint and TweenService\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal aspectRatioConstraint = Instance.new(\"UIAspectRatioConstraint\")\naspectRatioConstraint.Parent = object\n\nlocal targetSize = UDim2.new(0.4, 0, 0.4, 0)\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Size = targetSize})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Preventing Multiple Finish Calls in Luau\nDESCRIPTION: This snippet demonstrates how to use a boolean flag to ensure the finish function is only called once in a Roblox race script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal raceActive = true\n\nlocal function partTouched(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid and raceActive == true then\n      finish()\n   end\nend\n\nlocal function finish()\n   print(\"touched the finish line\")\n   raceActive = false\nend\n```\n\n----------------------------------------\n\nTITLE: Creating stopTimer Function (Lua)\nDESCRIPTION: This snippet defines a local function `stopTimer` which calls the `myTimer:stop()` method. This function is designed to halt the timer, and depends on the `myTimer` object which is initialized elsewhere in the script.  It is intended to be used when the match ends.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function stopTimer()\n\tmyTimer:stop()\nend\n\nlocal function timeUp()\n\tmatchEnd:Fire(gameSettings.endStates.TimerUp)\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Launch and Analytics Data\nDESCRIPTION: Demonstrates adding launch data and analytics tracking to a notification, enabling personalized user experiences and performance tracking\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/experience-notifications.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://apis.roblox.com/cloud/v2/users/${UserId}/notifications' \\\n--header 'x-api-key: ${ApiKey}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\t\"source\": {\n\t\t\"universe\": \"universes/${UniverseID}\"\n\t},\n\t\"payload\": {\n\t\t\"message_id\": \"${AssetID}\",\n\t\t\"type\": \"MOMENT\"\n\t},\n\t\"join_experience\": {\n\t\t\"launch_data\": \"Test_Launch_Data\"\n\t},\n\t\"analytics_data\": {\n\t\t\"category\": \"Test_Analytics_Category\"\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: Reading from Arrays in Luau\nDESCRIPTION: This snippet demonstrates accessing array elements using 1-based indexing in Luau. It reads and prints values from an array, emphasizing Luau's 1-based index system over the more common 0-based indexing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Construct an array with three items\nlocal testArray = {\"A string\", 3.14159, true}\n\nprint(testArray[1]) -- A string\nprint(testArray[2]) -- 3.14159\nprint(testArray[3]) -- true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Variables for Race Course in Luau\nDESCRIPTION: This snippet initializes variables for tracking race time and referencing the finish line in a Roblox script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal finishLine = script.Parent\nlocal timePassed = 0\n```\n\n----------------------------------------\n\nTITLE: SessionLockedDataStoreWrapper Class\nDESCRIPTION: This code snippet represents the SessionLockedDataStoreWrapper class. While the actual code is not provided in the documentation, the surrounding text explains that it's a meta-wrapper around DataStoreWrapper that adds session locking functionality by wrapping every DataStore request in an UpdateAsync call.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/data-stores/player-data-purchasing.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Nesting Sound Groups for Organization\nDESCRIPTION: Method for creating a hierarchical structure of sound groups to manage audio categories and priorities in an experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/groups.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Explorer window, click-and-drag a sound group over the parent sound group.\n2. Drop the sound group to nest it under the parent group.\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags to Player Characters in Roblox Lua\nDESCRIPTION: This code snippet demonstrates how to assign a tag to a player character using CollectionService in Roblox. It adds the 'SoldierEnemy' tag to the parent of the script, which is assumed to be the player character.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/npc-kit.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nCollectionService:AddTag(script.Parent, \"SoldierEnemy\")\n```\n\n----------------------------------------\n\nTITLE: Block Comments in Luau\nDESCRIPTION: This code snippet demonstrates how to create multiline block comments using double hyphens and double brackets (`--[[]]`). Block comments are useful for documenting files, functions, and objects by describing their purpose and intent.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/comments.md#2025-04-21_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\n--[[\n    Shuts off the cosmic moon ray immediately.\n\n    Should only be called within 15 minutes of midnight Mountain Standard\n    Time, or the cosmic moon ray may be damaged.\n]]\nlocal function stopCosmicMoonRay()\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce Logic for Fade Function - Luau\nDESCRIPTION: This snippet introduces a debounce mechanism for the fade function to prevent it from executing multiple times if multiple body parts touch the platform. A boolean variable is used to track whether the function is currently running.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal isTouched = false\n\nlocal function fade()\n\tfor count = 1, 10 do\n\t\tplatform.Transparency = count / 10\n\t\ttask.wait(0.1)\n\tend\n\tplatform.CanCollide = false\n\ttask.wait(3)\n\tplatform.CanCollide = true\n\tplatform.Transparency = 0\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider Icon in Roblox\nDESCRIPTION: Provides guidance on adding a visual cue for users in the form of an icon within the 'EffectsVolumeSlider' frame. The icon aids in user experience by associating the slider's functionality with volume control, using ImageLabel and associated constraints to adjust appearance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Insert an `Class.ImageLabel` into the **EffectsVolumeSlider** frame and rename it to **Icon**.\n   ...\n2. With **Icon** selected, set the following properties:\n   - `Class.ImageLabel.BackgroundTransparency|BackgroundTransparency` = `1`\n   - `Class.ImageLabel.Size|Size` = `2.5, 0, 2.5, 0`\n   - `Class.ImageLabel.Image|Image` = `rbxassetid://90019827067389`\n3. Insert a `Class.UIAspectRatioConstraint` into **Icon** and leave its properties as defaults.\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Cube's CFrame in Luau\nDESCRIPTION: This code sets the `CFrame` property of the cube, positioning it in 3D space using the provided `spawnX`, `spawnY`, and `spawnZ` parameters. CFrame combines position and orientation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function makeCube(spawnX, spawnY, spawnZ)\n    local cube = Instance.new(\"Part\")\n    cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n    cube.Color = currentColor\n    cube.CFrame = CFrame.new(spawnX, spawnY, spawnZ)\n    cube.Parent = workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Seeking Permissions in Roblox EventSequencer\nDESCRIPTION: This Lua script sets up seeking permissions for the EventSequencer module. It defines which place IDs, user IDs, and group roles are allowed to seek within scenes. The script should be placed in ServerScriptService.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nEventSequencer.setSeekingPermissions({\n\tplaceIDs = {},\n\tuserIDs = {},\n\tgroups = {\n\t\t{GroupID = , MinimumRankID = },\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Handling User Input with Frames in Roblox - Lua\nDESCRIPTION: This Lua code snippet creates a transparent frame to capture user input by subscribing to the InputBegan event. This allows for detecting keyboard inputs when the frame is on focus. The snippet covers setting up the frame's properties and connecting the input event handler.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal frame = Instance.new(\"Frame\")\nframe.BackgroundTransparency = 1  -- Hide the frame\nframe.Size = UDim2.new(1, 0, 1, 0)  -- Cover the screen\nframe.Position = UDim2.new(0, 0, 0, 0)\nframe.Parent = testWidget\n\nlocal function onInputBegan(inputObject)\n\t-- Process the input object here, for example detect key presses\nend\nframe.InputBegan:Connect(onInputBegan)\n```\n\n----------------------------------------\n\nTITLE: Creating Upgrade Function in Roblox Lua\nDESCRIPTION: This snippet creates the 'giveUpgrade()' function which is responsible for handling the upgrade process when a player interacts with the shop button. It does not yet include the logic for checking player stats.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/buying-upgrades.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function giveUpgrade(player)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Removing a Value by Index from an Array in Luau\nDESCRIPTION: This snippet demonstrates how to remove a value at a specific index from an array using table.remove() with an index parameter.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nplayerItems = {}\n\ntable.insert(playerItems, \"Potion\")\ntable.insert(playerItems, \"Bread\")\ntable.insert(playerItems, \"Sleeping bag\")\n\ntable.remove(playerItems, 1)\n```\n\n----------------------------------------\n\nTITLE: Using 'or' Logical Operator in Luau\nDESCRIPTION: Illustrates the usage of the 'or' logical operator in Luau, which evaluates expressions by returning the first operand if it is 'true'; otherwise, it returns the second operand. This is practical for handling default values or multi-condition validation in control structures.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/operators.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal y = x or 1\nprint(y) -- 1 because x doesn't exist and is therefore nil\n\nlocal d = false\nlocal e = d or 1\nprint(e) -- 1 because d is false\n\nprint(4 or 5) -- 4\nprint(nil or 12) -- 12\nprint(false or 12) -- 12\nprint(false or true) -- true\nprint(false or false) -- false\nprint(true or false) -- true\nprint(true or true) -- true\n```\n\n----------------------------------------\n\nTITLE: Orienting Object Surfaces Using CFrame in Roblox Lua\nDESCRIPTION: Demonstrates how to make different surfaces of an object face a target position using CFrame operations. First points the front surface at a target, then rotates the top surface to face the target using relative rotation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal blueCube = Workspace.BlueCube\n\n-- Create a Vector3 for the target position\nlocal targetPosition = blueCube.Position\n\n-- Point the redBlock's front surface at 'targetPosition'\nredBlock.CFrame = CFrame.new(redBlock.Position, targetPosition)\n\n-- Now the redBlock's front surface (white circle) is pointing towards the blueCube\n\n-- Rotate redBlock's CFrame relative to itself so that its top surface (not front) points toward the target\nlocal rotatedCFrame = CFrame.Angles(math.rad(-90), 0, 0)\nredBlock.CFrame = redBlock.CFrame:ToWorldSpace(rotatedCFrame)\n\n-- Now the redBlock's top surface (black circle) is pointing towards the blueCube (as seen in After below)\n```\n\n----------------------------------------\n\nTITLE: Writing to Arrays in Luau\nDESCRIPTION: Shows how to rewrite values in an array at specific indices using Luau's syntax. The code also demonstrates dynamically adding new elements at a non-existing index.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"A string\", 3.14159, true}\n\ntestArray[2] = 12345\ntestArray[4] = \"New string\"\n\nprint(testArray[2]) --12345\nprint(testArray[4]) -- New string\n```\n\n----------------------------------------\n\nTITLE: Implementing Chest Opening Validation\nDESCRIPTION: Function to check if a player has enough keys to open a chest. Returns true if the player has sufficient keys, false otherwise.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction TreasureManager.canOpenChest(whichCharacter)\n\tlocal playerKeys = getPlayerKeys(whichCharacter)\n\tif playerKeys.Value >= chestPickCost then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Game Passes to MerchBooth\nDESCRIPTION: Shows how to add game passes to the MerchBooth using the addItemAsync method with the GamePass info type, including error handling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t4343758, -- ColdFyre Armor\n\t28521575, -- Slime Shield\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.GamePass)\n\t\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\n}\n```\n\n----------------------------------------\n\nTITLE: Tweens and Audio Sync in Lua\nDESCRIPTION: This snippet demonstrates how to create and configure a tween that is synced with an audio track in Roblox. It requires 'TweenService' for tween creation and a 'Sound' object. The snippet configures properties like 'Brightness' to change over a defined duration and uses custom functions to handle tween events. The tween can sync with audio via specific start times.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\\n\\tprint(\"OnRun (Client)\")\\n\\n\\tlocal MainAudio = Schema:audio({\\n\\t\\tStartTime = 1,\\n\\t\\tSoundId = \"rbxassetid://1838673350\",\\n\\t})\\n\\n\\tlocal LightFadeOut = Schema:tween({\\n\\t\\tStartTimes = {29.884},\\n\\t\\tTween = {\\n\\t\\t\\tObject = game:GetService(\"Lighting\"),\\n\\t\\t\\tInfo = TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),\\n\\t\\t\\tProperties = {\\n\\t\\t\\t\\tBrightness = 0,\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tSyncToAudio = {\\n\\t\\t\\tAudio = MainAudio,\\n\\t\\t\\tStartAtAudioTimes = {5, 7.2, 9.4, 11.6},\\n\\t\\t},\\n\\t\\tOnStart = function(self)\\n\\t\\t\\tprint(\"Tween playing\")\\n\\t\\tend,\\n\\t\\tOnHeartbeat = function(self, alpha)\\n\\t\\t\\tprint(\"Tween alpha\", alpha)\\n\\t\\tend,\\n\\t\\tOnEnd = function(self)\\n\\t\\t\\tprint(\"Tween completed\")\\n\\t\\tend,\\n\\t})\\nend\n```\n\n----------------------------------------\n\nTITLE: Subtracting points and Destroying the part - Lua\nDESCRIPTION: This snippet adds an `else` statement to subtract points if the `pointPart`'s color is neither blue nor green, subtracting `losePoints` from the player's `Points` value. After the conditional block, the `pointPart` is destroyed using `pointPart:Destroy()` to prevent repeated point gains/losses. It depends on `losePoints` variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nif currentColor == blue then\n\tplayerPoints.Value += smallPoints\nelif currentColor == green then\n\tplayerPoints.Value += largePoints\nelse\n\tplayerPoints.Value -= losePoints\nend\n\npointPart:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Part Color in Roblox Luau\nDESCRIPTION: Function update that retrieves the current color of the part when a player touches it, which will be used to determine how many points to award.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function givePoints(player)\n\tlocal currentColor = pointPart.Color\nend\n```\n\n----------------------------------------\n\nTITLE: Verifying Supported Inputs\nDESCRIPTION: This snippet checks the supported key codes for a specific gamepad type using UserInputService.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal availableInputs = UserInputService:GetSupportedGamepadKeyCodes(Enum.UserInputType.Gamepad2)\n\nprint(\"This controller supports the following controls:\")\nfor _, control in availableInputs do\n\tprint(control)\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Event Switch Module\nDESCRIPTION: ModuleScript implementing a switch with custom event handling using BindableEvents.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Switch = {}\n\n-- Creating bindable so any script can listen to when the switch was changed\nlocal bindableEvent = Instance.new(\"BindableEvent\")\nSwitch.Changed = bindableEvent.Event\n\nlocal state = false\nfunction Switch.flip()\n  state = not state\n  bindableEvent:Fire(state)\nend\n\nreturn Switch\n```\n\n----------------------------------------\n\nTITLE: Building Tower Width Loop in Luau\nDESCRIPTION: This Luau code completes the nested loop structure by adding a third for loop to control the width of the tower. The `widthIndex` variable iterates from 1 to `TOWER_SIZE`, `spawnZ` calculates the cube's position, and the `makeCube` function is called to create the cube.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_9\n\nLANGUAGE: Luau\nCODE:\n```\n-- Builds tower\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\n\n    for lengthIndex = 1, TOWER_SIZE do\n        local spawnX = lengthIndex * CUBE_SIZE\n\n        for widthIndex = 1, TOWER_SIZE do\n            local spawnZ = widthIndex * CUBE_SIZE\n            makeCube(spawnX, spawnY, spawnZ)\n            task.wait(0.25)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Required Packages in Roblox Scripts\nDESCRIPTION: This Lua snippet shows how to require and use packages within a Roblox script, allowing developers to integrate third-party libraries like React for UI creation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/external-tools.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n\"\"\"\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal React = require(ReplicatedStorage.Packages.react)\nlocal ReactRoblox = require(ReplicatedStorage.Packages[\"react-roblox\"])\n\nlocal handle = Instance.new(\"ScreenGui\", Players.LocalPlayer.PlayerGui)\nlocal root = ReactRoblox.createRoot(handle)\n\nlocal helloFrame = React.createElement(\"TextLabel\", {\n\tText = \"Hello World!\",\n\tSize = UDim2.new(0, 200, 0, 200),\n\tPosition = UDim2.new(0.5, 0, 0.5, 0),\n\tAnchorPoint = Vector2.new(0.5, 0.5),\n\tBackgroundColor3 = Color3.fromRGB(248, 217, 109),\n\tFont = Enum.Font.LuckiestGuy,\n\tTextSize = 24\n})\n\nroot:render(helloFrame)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Dictionaries in Luau\nDESCRIPTION: Illustrates the process of iterating over a dictionary in Luau using the `pairs()` function, highlighting the unordered nature of dictionary traversal.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal testDictionary = {\n\tfruitName = \"Lemon\",\n\tfruitColor = \"Yellow\",\n\tsour = true\n}\n\nfor key, value in pairs(testDictionary) do\n\tprint(key, value)\nend\n\n--[[ Resulting output:\nfruitName Lemon\nsour true\nfruitColor Yellow\n]]\n```\n\n----------------------------------------\n\nTITLE: Event Connection - LocalScript (RemoteEvent - All Clients)\nDESCRIPTION: This LocalScript connects an event handler to the OnClientEvent event of a RemoteEvent which is fired to all clients. It retrieves the RemoteEvent instance from ReplicatedStorage and defines a function that is called when the event is fired from the server. The function prints the value of seconds to the console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onTimerUpdate(seconds)\n\tprint(seconds)\nend\n\n-- Connect function to event\nremoteEvent.OnClientEvent:Connect(onTimerUpdate)\n```\n\n----------------------------------------\n\nTITLE: Preparing Player Character in Lua\nDESCRIPTION: Function to prepare a player's character, including setting respawn location and loading the character.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Story Segments in Lua\nDESCRIPTION: Example of how to build a longer narrative by concatenating multiple string segments. This technique adds additional sentences to the story while maintaining proper spacing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/finish-and-add.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal name1 = storyMaker:GetInput(\"What is your favorite name?\")\nlocal food1 = storyMaker:GetInput(\"What is your favorite food?\")\n\nlocal story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \" .. \"Every morning, the wizard loves eating a giant bowl of honey roasted \"\n```\n\n----------------------------------------\n\nTITLE: Defining the Event Handler\nDESCRIPTION: This Lua function defines the event handler for when a coin is touched. It checks if the coin is enabled, detects whether a player touched the coin, and disables the coin for a set period. `task.wait()` is used for better performance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/script-game-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onCoinTouched(otherPart, coin)\n   if coin:GetAttribute(\"Enabled\") then\n      local character = otherPart.Parent\n      local player = Players:GetPlayerFromCharacter(character)\n      if player then\n         -- Player touched a coin\n         coin.Transparency = 1\n         coin:SetAttribute(\"Enabled\", false)\n         print(\"Player collected coin\")\n         task.wait(COOLDOWN)\n         coin.Transparency = 0\n         coin:SetAttribute(\"Enabled\", true)\n      end\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Art Assets in Roblox Surface Art Module\nDESCRIPTION: This snippet demonstrates how to use custom art assets instead of the default ones in the Surface Art module. It defines a table of custom assets and passes it to the configure function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nlocal customAssets = {\n\tCustomAsset1 = {\n\t\tname = \"Custom Asset 1\",\n\t\tassetId = \"rbxassetid://7322508294\",\n\t},\n\tCustomAsset2 = {\n\t\tname = \"Custom Asset 2\",\n\t\tassetId = \"rbxassetid://7322547665\",\n\t},\n}\n\nSurfaceArt.configure({\n\tassets = customAssets,\n})\n```\n\n----------------------------------------\n\nTITLE: Wally Configuration for Package Management\nDESCRIPTION: This configuration snippet represents how to define package dependencies for a Roblox project using Wally. It sets up the package name, version, and necessary dependencies.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/external-tools.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n\"\"\"\n[package]\nname = \"my-home-directory/my-new-experience\"\nversion = \"0.1.0\"\nregistry = \"https://github.com/UpliftGames/wally-index\"\nrealm = \"shared\"\n\n[dependencies]\nreact = \"jsdotlua/react@17.1.0\"\nreact-roblox = \"jsdotlua/react-roblox@17.1.0\"\ncryo = \"phalanxia/cryo@1.0.3\"\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Parts in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to reference Part objects in Roblox Lua. It's used when explaining the initial stage of building out the environment using simple shapes before finalizing with more complex meshes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/building-architecture.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nClass.Part\n```\n\n----------------------------------------\n\nTITLE: Event Connection - LocalScript (RemoteEvent)\nDESCRIPTION: This LocalScript connects an event handler to the OnClientEvent event of a RemoteEvent. It retrieves the RemoteEvent instance from ReplicatedStorage and defines a function that is called when the event is fired from the server. The function prints a message to the console with the player's name and any additional arguments passed by the server.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Get reference to remote event instance\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal player = Players.LocalPlayer\n\nlocal function onNotifyPlayer(maxPlayers, respawnTime)\n   print(\"[Client] Event received by player\", player.Name)\n   print(maxPlayers, respawnTime)\nend\n\n-- Connect function to event\nremoteEvent.OnClientEvent:Connect(onNotifyPlayer)\n```\n\n----------------------------------------\n\nTITLE: Getting All Attributes\nDESCRIPTION: Demonstrates how to retrieve all attributes using GetAttributes() method and iterate through them.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\nlocal cabbageAttributes = cabbage:GetAttributes()\n\nprint(cabbageAttributes.GrowthRate) --> 2\n\nfor k, v in cabbageAttributes do\n\tprint(k, v)\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning Custom Objects (Cupcakes) Using Nested Loops in Roblox Lua\nDESCRIPTION: This script demonstrates spawning custom objects (cupcakes) using nested loops. It creates multiple batches of cupcakes with randomized colors for frosting and cup. The script also tracks the total number of cupcakes spawned.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal numberOfBatches = 30\nlocal cupcakesPerBatch = 6\n\nlocal cupcakesBaked = 0\n\n--Makes a single cupcake\nlocal function makeCupcake()\n    local ServerStorage = game:GetService(\"ServerStorage\")\n    local cupcake = ServerStorage.Cupcake:Clone()\n    local cup = cupcake.Cup\n    local frosting = cupcake.Frosting\n    cupcake:SetPrimaryPartCFrame(CFrame.new(0, 20, 0) * CFrame.Angles(0, 0, -90))\n    frosting.Color = frostingColor\n    cup.Color = cupColor\n    cupcake.Parent = workspace\nend\n\n\n-- Outer loop\nfor cupcakeBatch = 1, numberOfBatches do\n    print(\"Top outer loop: cupcake batch \" .. cupcakeBatch)\n    frostingColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n    cupColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))\n\n    -- Inner loop\n    for cupcakeNumber = 1, cupcakesPerBatch do\n        makeCupcake()\n        print(\"Inner loop: cupcake \" .. cupcakeNumber)\n        -- Track muffins baked\n        cupcakesBaked += 1\n        task.wait(0.5)\n    end\n\n    print(\"Bottom outer loop: \" .. cupcakesBaked .. \" cupcakes baked so far.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Server Script for Handling Translation Request in Lua\nDESCRIPTION: This Lua server script sets up a RemoteFunction in ReplicatedStorage that listens for translation requests. It utilizes the Open Cloud API to translate text based on the player's locale and the given universe ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/auto-translate-dynamic-content.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Server script in ServerScriptService\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\nlocal oc = require(ServerScriptService.OpenCloud.V2)\n\n-- Find at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nlocal universeID = <your_universe_id>\n\n-- Create RemoteFunction\nlocal remoteFunction = Instance.new(\"RemoteFunction\")\nremoteFunction.Name = \"TranslateTextFunction\"\nremoteFunction.Parent = ReplicatedStorage\n\nremoteFunction.OnServerInvoke = function(player, text, locale, uni)\n    print(player.Name .. \" requested translation for text: \" .. text .. \" to locale: \" .. locale)\n\n    -- Prepare the translation request\n\n    local request : oc.TranslateTextRequest = {\n        path = oc:UniversePath(universeID),\n        text = text,\n\t      -- target language codes supports a list of multiple locales to translate to.\n\t      -- Here we are passing just one language:\n\t      --The player locale retrieved in the local script\n        target_language_codes = {locale}\n    }\n\n    local result = oc:TranslateText(request)\n\n    if result.Error == nil then\n        return result.Response.translations[locale] -- Assuming translations[locale] contains the translated text\n    else\n        return \"Error: \" .. result.Error.message\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Click Detector to Upgrade Function in Roblox Lua\nDESCRIPTION: This snippet connects the click detector's MouseClick event to the giveUpgrade function, allowing player interactions to trigger the upgrade logic.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/buying-upgrades.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nclickDetector.MouseClick:Connect(giveUpgrade)\n```\n\n----------------------------------------\n\nTITLE: Handling 'selectorHidden' Event in Roblox\nDESCRIPTION: This Lua snippet handles the 'selectorHidden' event which fires when the surface art selector UI is hidden for a player. The event handler logs the action of closing the selector. Connections to the event are made using a 'Class.LocalScript'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.selectorHidden:Connect(function()\n\tprint(Players.LocalPlayer, \"closed surface art selector\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Localized Badge Name and Description - REST API\nDESCRIPTION: This endpoint deletes a specific badge name and description for a given badgeId and languageCode. Appropriate permissions are needed to execute this operation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE v1/badges/{badgeId}/name-description/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Checking Scene Loading Status in Lua\nDESCRIPTION: Demonstrates how to check if a scene is currently loading using the EventSequencer's isLoadingScene function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\nprint(EventSequencer.isLoadingScene())\n\nwhile EventSequencer.isLoadingScene() do\n\ttask.wait()\nend\nprint(\"Scene loaded\")\n```\n\n----------------------------------------\n\nTITLE: Using Type Annotations for Native Optimization\nDESCRIPTION: Shows how type annotations can optimize native code generation by inferring variable types for better performance. Specifically recommends annotating Datatype.Vector3 arguments to generate code specialized for vectors.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/native-code-gen.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--!native\\n\\n-- \\\"v\\\" is assumed to be a table; function performs slower due to table checks\\nlocal function sumComponentsSlow(v)\\n\\treturn v.X + v.Y + v.Z\\nend\\n\\n-- \\\"v\\\" is declared to be a Vector3; code specialized for vectors is generated\\nlocal function sumComponentsFast(v: Vector3)\\n\\treturn v.X + v.Y + v.Z\\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Low Pose for Left Foot Cycle - Roblox Animation Editor\nDESCRIPTION: This snippet provides a comprehensive guide on how to create a Low pose for the left foot cycle in character animations using the Roblox Animation Editor. It includes instructions to pose the upper body and legs, adjust the torso position, and save the animation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/animation/create-an-animation.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1. In the **Explorer** window, click-and-drag the scrubber to the 3rd frame.\n1. Pose the rig's upper body so that it leans even more toward the ground than the previous pose.\n   1. In the viewport, select and angle the **UpperTorso** body part so that the torso is significantly bent forward.\n   1. Select and angle the **Head** body part so that the rig's face is looking toward the ground.\n1. Pose the rig's legs so that the rig's body weight is supported by its left leg.\n   1. In the viewport, select and angle the **LeftUpperLeg**, **LeftLowerLeg**, and **LeftFoot** body parts until the left leg is nearly bent at a 90 degree angle with a foot flat on the ground.\n   1. Repeat this process for the **RightUpperLeg**, **RightLowerLeg**, and **RightFoot** body parts until the right leg is nearly straight behind the rig with the bottom of its foot angled toward the sky.\n1. Move the rig down so that its left foot touches the ground.\n   1. In the viewport, select the **LowerTorso** body part.\n   1. Move it down until the rig's left foot is parallel to the ground.\n1. Pose the rig's arms so that they swing closer to the torso.\n   1. In the viewport, select and angle the **LeftUpperArm** and **LeftLowerArm** body parts until the left arm is closer to the character's waist.\n   1. Repeat this process for the **RightUpperArm** and **RightLowerArm** body parts until the right arm is closer to the character's waist.\n1. Save the animation.\n```\n\n----------------------------------------\n\nTITLE: Using 'not' Logical Operator in Luau\nDESCRIPTION: Demonstrates the 'not' operator in Luau, which yields the logical negation of its operand. It's instrumental in control structures to trigger actions when a condition is not met, offering a way to manage logic involving inverse conditions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/operators.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nprint(not true) -- false\nprint(not false) -- true\nprint(not nil) -- true\nprint(not \"text\") -- false\nprint(not 0) -- false\n```\n\n----------------------------------------\n\nTITLE: Prompting Pass Purchase in Lua\nDESCRIPTION: This snippet prompts the player to purchase a game pass if they don't already own it. It checks the ownership status and handles the purchase interaction.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/game-passes.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\n-- Replace the placeholder ID with your pass ID\nlocal passID = 0000000\n\n-- Prompt pass purchase\nlocal function promptPurchase()\n\tlocal player = Players.LocalPlayer\n\tlocal hasPass = false\n\n\tlocal success, message = pcall(function()\n\t\thasPass = MarketplaceService:UserOwnsGamePassAsync(player.UserId, passID)\n\tend)\n\n\tif not success then\n\t\twarn(\"Error while checking if player has pass: \" .. tostring(message))\n\t\treturn\n\tend\n\n\tif hasPass then\n\t\t-- Show a message telling user they already own the pass\n\telse\n\t\t-- Prompt pass purchase\n\t\tMarketplaceService:PromptGamePassPurchase(player, passID)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering an Application Button for Today's Picks\nDESCRIPTION: This snippet displays a button for users to apply for today's picks. It uses a Button component from a UI library with a link to a survey. The button is styled for size and appearance and aims to facilitate user engagement by making the application process accessible.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/todays-picks-home.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Button href=\"https://survey.roblox.com/jfe/form/SV_cHDxf7DtHltY4US\" size='large' variant='contained' style={{width:200}}>Apply</Button>\n```\n\n----------------------------------------\n\nTITLE: Assigning Sound Objects to Sound Groups\nDESCRIPTION: Process for linking a Sound object to a specific SoundGroup through the Properties window, enabling volume and effect management.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/groups.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select a sound object in the Explorer window.\n2. In the Properties window, click the **SoundGroup** property field.\n3. Click the target sound group object to assign.\n```\n\n----------------------------------------\n\nTITLE: Event Connection - Script Handling Metatables\nDESCRIPTION: This script handles events and demonstrates that metatable information is lost when transferring a table, as shown through the properties after firing the remote event. It relies on ReplicatedStorage and a remote event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onEvent(player, param)\n\tprint(param)  --> {['Name'] = 'MyTruck'}\nend\n\n-- Connect function to event\nremoteEvent.OnServerEvent:Connect(onEvent)\n```\n\n----------------------------------------\n\nTITLE: Complete ToolScript for Item Harvesting in Roblox Lua\nDESCRIPTION: The complete script manages item interactivity and visibility post-harvest in a Roblox game. It reacts to player interaction, updates item states, and enables item regeneration. Dependencies are properly structured player stats and item components.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal toolPart = script.Parent\nlocal tool = toolPart.Parent\n\nlocal backpack = tool.Parent\nlocal player = backpack.Parent\nlocal playerStats = player:FindFirstChild(\"leaderstats\")\nlocal playerItems = playerStats:FindFirstChild(\"Items\")\nlocal playerSpaces = playerStats:FindFirstChild(\"Spaces\")\n\nlocal function onTouch(partTouched)\n\tlocal canHarvest = partTouched:FindFirstChild(\"CanHarvest\")\n\tif canHarvest then\n\t\tif canHarvest.Value == true and playerItems.Value < playerSpaces.Value then\n\t\t\tplayerItems.Value += 1\n\t\t\tcanHarvest.Value = false\n\t\t\t-- Reset partTouched, the harvested item\n\t\t\tpartTouched.Transparency = 1\n\t\t\tpartTouched.CanCollide = false\n\n\t\t\ttask.wait(5)\n\t\t\t-- Make the harvested item reappear and usable again\n\t\t\tcanHarvest.Value = true\n\t\t\tpartTouched.Transparency = 0\n\t\t\tpartTouched.CanCollide = true\n\t\tend\n\tend\nend\n\ntoolPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Connecting the PlayerAdded Event with Lua\nDESCRIPTION: The 'onPlayerJoin' function is connected to the 'PlayerAdded' event. This ensures that when a player joins, they’re automatically added to the leaderboard.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n   local function onPlayerJoin(player)\n      local leaderstats = Instance.new(\"Folder\")\n      leaderstats.Name = \"leaderstats\"\n      leaderstats.Parent = player\n   end\n\n   Players.PlayerAdded:Connect(onPlayerJoin)\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Badge Icons - REST API\nDESCRIPTION: This endpoint retrieves localized badge icons based on the specified badgeId. The API requires OAuth 2.0 or an API key for authentication.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET v1/badges/{badgeId}/icons\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Value Modification\nDESCRIPTION: This snippet demonstrates how to change the value associated with a key in a Luau dictionary using the assignment operator. It changes the enemy's name from \"Spike\" to \"Rana\" and prints the updated name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName = \"Spike\",\n\tHealth = 1000,\n}\n\nenemy.Name = \"Rana\"\n\nprint(\"The enemy's name is \" .. enemy.Name)\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Iteration with pairs()\nDESCRIPTION: This code demonstrates how to iterate through a Luau dictionary using the `pairs()` function. It prints each key-value pair in the dictionary.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal myDictionary = {\n\t[\"Blue Player\"] = \"Ana\",\n\t[\"Gold Player\"] = \"Binh\",\n\t[\"Red Player\"] = \"Cate\",\n}\n\nfor key, value in pairs(myDictionary) do\n\tprint(key .. \" is \" .. value)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting TeleportData in TeleportOptions in Lua\nDESCRIPTION: This snippet demonstrates how to set custom data to be passed along with the teleport using TeleportOptions:SetTeleportData(). This allows sending basic non-secure data between places.  Secure data should be handled with data stores.  The data is structured as a table.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal teleportData = {\n    randomNumber = RNG:NextInteger(1, 100),\n}\n\nlocal teleportOptions = Instance.new(\"TeleportOptions\")\nteleportOptions:SetTeleportData(teleportData)\n```\n\n----------------------------------------\n\nTITLE: Checking for Harvestable Items in Tool Script - Lua\nDESCRIPTION: This snippet enhances the tool script to check if a touched object is harvestable and prints a confirmation message when it is detected.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouch(partTouched)\n    local canHarvest = partTouched:FindFirstChild(\"CanHarvest\")\n    if canHarvest then\n        print(\"Found an item\")\n    end\nend\n\ntoolPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Leaderboard in Roblox Luau\nDESCRIPTION: Updated givePoints function that accesses a player's leaderboard using WaitForChild to ensure the leaderstats folder is available.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal function givePoints(player)\n\tlocal currentColor = pointPart.Color\n\n\tlocal playerStats = player:WaitForChild(\"leaderstats\")\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sine Wave Movement with Scriptable UIDragDetector\nDESCRIPTION: This script demonstrates using UIDragDetector's Scriptable drag style to create custom movement patterns. It implements a sine wave pattern where dragging horizontally moves the UI element along a sine wave, with configurable amplitude and frequency.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/ui-drag-detectors.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal frame = script.Parent  -- UI element to drag\nlocal uiDragDetector = frame:FindFirstChildWhichIsA(\"UIDragDetector\")\n\nlocal initialXValue = 0\nlocal maxHeightChange = 200\nlocal pixelsPerRadian = 75  -- Lower this value to increase frequency\n\nuiDragDetector.DragStart:Connect(function(inputPosition)\n\tinitialXValue = inputPosition.X\nend)\n\nlocal function computeSinWaveCoordinate(inputPosition)\n\tlocal deltaX = inputPosition.X - initialXValue\n\t-- Negative Y delta so that it goes \"up\" on the screen with positive Y change\n\tlocal deltaY = -math.sin(deltaX / pixelsPerRadian) * maxHeightChange\n\treturn UDim2.fromOffset(deltaX, deltaY)\nend\n\nuiDragDetector:SetDragStyleFunction(computeSinWaveCoordinate)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Emotes in Lua\nDESCRIPTION: This snippet demonstrates how to configure the Emote Bar module with custom emotes. It disables default emotes and sets two custom emotes using the setEmotes function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureServer({\n\tuseDefaultEmotes = false,\n})\n\nEmoteBar.setEmotes({\n\t{\n\t\tname = \"Hello\",\n\t\tanimation = \"rbxassetid://3344650532\",\n\t\timage = \"rbxassetid://7719817462\",\n\t\tdefaultTempo = 1,\n\t},\n\t{\n\t\tname = \"Applaud\",\n\t\tanimation = \"rbxassetid://5915693819\",\n\t\timage = \"rbxassetid://7720292217\",\n\t\tdefaultTempo = 2,\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Values by Index\nDESCRIPTION: Retrieve specific dialogue lines from the array using index notation, allowing sequential or indexed access\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-arrays.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal dialogue = dialogueArray[2]\n```\n\n----------------------------------------\n\nTITLE: Updating Mission Progress in Lua\nDESCRIPTION: Examples of how to update mission progress, including incrementing task counters and managing timed tasks\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/missions.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Increases progress on a mission Jumping with a Jumps task\nMissions.addProgressToTask(player, \"Jumping\", \"Jumps\", 1)\n\n-- Starts the timer on a mission BattlingTime with a TimeInBattle task\nMissions.startTimedTask(player, \"BattlingTime\", \"TimeInBattle\")\n\n-- Stops the timer on a mission BattlingTime with a TimeInBattle task\nMissions.stopTimedTask(player, \"BattlingTime\", \"TimeInBattle\")\n\n-- Increases the progress on all tasks tied to the Jumps counter\nCounterSystem.addCounter(player, \"Jumps\", 1)\n\n-- Starts the timer on all timed tasks tied to the TimeInBattle timer counter\nCounterSystem.startTimer(player, \"TimeInBattle\")\n\n-- Stops the timer on all timed tasks tied to the TimeInBattle timer counter\nCounterSystem.stopTimer(player, \"TimeInBattle\")\n```\n\n----------------------------------------\n\nTITLE: Building Tower Length Loop in Luau\nDESCRIPTION: This code adds a nested for loop inside the height loop to control the length of the tower.  The `lengthIndex` variable iterates from 1 to `TOWER_SIZE`, and `spawnX` is calculated accordingly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_8\n\nLANGUAGE: Luau\nCODE:\n```\nfor heightIndex = 1, TOWER_SIZE do\n    local spawnY = (heightIndex - 1) * CUBE_SIZE\n\n    for lengthIndex = 1, TOWER_SIZE do\n        local spawnX = lengthIndex * CUBE_SIZE\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a ParticleEmitter in a Function with Multiple Parameters\nDESCRIPTION: Sets up a sortGarbage function that creates a ParticleEmitter instance. This demonstrates using Instance.new() within a function with multiple parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function sortGarbage(trash,recyclable)\n    -- Create a new Particle Emitter\n    local sparkle = Instance.new(\"ParticleEmitter\")\n\nend\n\nsortGarbage()\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary and PlayerAdded Event - Function Definition\nDESCRIPTION: This snippet defines a function `setPoints` that will be connected to the `PlayerAdded` event. It takes a `newPlayer` parameter, which will be the player object that joined.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerPoints = {\n\n}\n\nlocal function setPoints(newPlayer)\n\nend\n\nPlayers.PlayerAdded:Connect(setPoints)\n```\n\n----------------------------------------\n\nTITLE: Direct Matches and Character Classes in Luau\nDESCRIPTION: Demonstrates how to use direct matches with string.match() for finding substrings and employs character classes for versatile string searches based on character categories like letters or digits.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match1 = string.match(\"Welcome to Roblox!\", \"Roblox\")\nlocal match2 = string.match(\"Welcome to my awesome game!\", \"Roblox\")\nprint(match1)  --> Roblox\nprint(match2)  --> nil\n```\n\n----------------------------------------\n\nTITLE: Rotating a CFrame in Lua\nDESCRIPTION: This snippet demonstrates how to create a rotated CFrame using CFrame.Angles(). It rotates a red block 45 degrees counterclockwise on its y-axis by converting degrees to radians using math.rad().\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\n-- Create new rotated CFrame\nlocal newCFrame = CFrame.Angles(0, math.rad(45), 0)\n\n-- Overwrite redBlock's current CFrame with new CFrame\nredBlock.CFrame = newCFrame\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Loading Screen with LocalScript in Roblox (Lua)\nDESCRIPTION: This code creates a custom loading screen by instantiating a ScreenGui and its children (TextLabel). It then removes the default loading screen and destroys the custom screen after the game loads. The loading screen design is defined within the script itself.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/loading-screens.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\n\nlocal screenGui = Instance.new(\"ScreenGui\")\nscreenGui.IgnoreGuiInset = true\nscreenGui.Parent = playerGui\n\n-- Replace ScreenGui values with your own\nlocal textLabel = Instance.new(\"TextLabel\")\ntextLabel.Size = UDim2.new(1, 0, 1, 0)\ntextLabel.BackgroundColor3 = Color3.fromRGB(0, 20, 40)\ntextLabel.Font = Enum.Font.GothamMedium\ntextLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)\ntextLabel.Text = \"Loading\"\ntextLabel.TextSize = 28\ntextLabel.Parent = screenGui\n\n-- Remove the default loading screen\nReplicatedFirst:RemoveDefaultLoadingScreen()\n\ntask.wait(5)  -- Force screen to appear for a minimum number of seconds\n\nif not game:IsLoaded() then\n game.Loaded:Wait()\nend\n\nscreenGui:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Face Control: RightInnerBrowRaiser\nDESCRIPTION: This section describes the `RightInnerBrowRaiser` face control, which raises the interior half of the character's right brow upwards. It references the `Class.FaceControls.RightInnerBrowRaiser` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Custom Events ModuleScript Implementation\nDESCRIPTION: Demonstrates creating custom events using ModuleScript and BindableEvent.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/scripts.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Switch = {}\n\nlocal bindableEvent = Instance.new(\"BindableEvent\")\nSwitch.Changed = bindableEvent.Event\n\nlocal state = false\nfunction Switch.flip()\n\tstate = not state\n\tbindableEvent:Fire(state)\nend\n\nreturn Switch\n```\n\n----------------------------------------\n\nTITLE: Setting Up Gold Nugget Mesh Properties\nDESCRIPTION: Configuration of a MeshPart to create a gold nugget object with specific mesh ID, material, and color properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/basic-particle-effects.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\nMeshId = \"rbxassetid://2903918852\"\nMaterial = Neon\nColor = Color3.new(255, 180, 0)\n```\n\n----------------------------------------\n\nTITLE: Ending Intermission and Starting Match (Lua)\nDESCRIPTION: This code snippet ends the intermission phase after enough players have joined. It prints a message, waits for a transition time, and then calls the `prepareGame()` function from the MatchManager module to start the match. The code relies on variables defined in `GameSettings` and functions in `MatchManager`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\trepeat\n\t\tprint(\"Starting intermission\")\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\n\tmatchManager.prepareGame()\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Class Type with typeof in Luau\nDESCRIPTION: This code demonstrates how to define a class type in Luau using `typeof()`.  It shows how to capture the type of a class instance, although it notes limitations when the class is initiated with runtime values. This is an alternative to idiomatic Lua class syntax for better type safety in Luau.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/plant-reference-project.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n\"type ClassType = typeof(Class.new())\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Turbulent White Water ParticleEmitter in Roblox\nDESCRIPTION: Configures a ParticleEmitter named 'TurbulentWW' with properties to create more turbulent white water effects. This emitter creates stronger aeration effects with different size sequence, transparency, lifetime, emission rate, speed, and acceleration values compared to the gentle white water emitter.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-waterfalls.md#2025-04-21_snippet_3\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n-- ParticleEmitter Properties for Turbulent White Water\nSize = NumberSequence.new({\n  NumberSequenceKeypoint.new(0, 1.6, 0.562),\n  NumberSequenceKeypoint.new(1, 2.63, 0.563)\n})\nTransparency = NumberSequence.new({\n  NumberSequenceKeypoint.new(0, 1, 0),\n  NumberSequenceKeypoint.new(0.156, 0.0437, 0.0437),\n  NumberSequenceKeypoint.new(0.55, 0.075, 0.0252),\n  NumberSequenceKeypoint.new(1, 1, 0)\n})\nLifetime = NumberRange.new(0.25, 0.5)\nRate = 20\nSpeed = NumberRange.new(5, 6)\nAcceleration = Vector3.new(0, -15, 0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Server Score in Roblox using Lua\nDESCRIPTION: This Lua snippet demonstrates the calculation of the server score using a weighted sum of signal scores. It illustrates the composition of weighted signal scores, which are used to evaluate server suitability for players in Roblox matchmaking. Signals are multiplied by their respective weights, summed up to derive the final server score.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/scoring.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nServerScore\n  = WeightedSignalScore_1 + WeightedSignalScore_2 + ... + WeightedSignalScore_n\n  = Weight_1 * SignalScore_1 + Weight_2 * SignalScore_2 + ... + Weight_n * SignalScore_n\n```\n\n----------------------------------------\n\nTITLE: Dictionary Definition for House Search in Luau\nDESCRIPTION: This code snippet defines a dictionary representing rooms in a house and their contents. It's used as the data structure for the subsequent search function example.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/return-values-from-tables.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal house = {\n\tkitchen = \"pile of Junk\",\n\tlivingRoom = \"kitten\",\n\tbedroom1 = \"nobody there\",\n\tbedroom2 = \"puppy\",\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Laser Event from Client - Lua\nDESCRIPTION: This snippet shows how the client notifies the server that a laser has been fired and sends the hit position to be rendered by other clients.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\ntimeOfPreviousShot = tick()\n\n        eventsFolder.LaserFired:FireServer(hitPosition)\n        LaserRenderer.createLaser(tool.Handle, hitPosition)\n```\n\n----------------------------------------\n\nTITLE: Relative positioning using CFrame:ToWorldSpace() in Lua\nDESCRIPTION: This snippet demonstrates how to use CFrame:ToWorldSpace() to offset an object relative to another object's orientation. It offsets the red block 2 studs along the blue cube's local y-axis.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal blueCube = Workspace.BlueCube\n\nlocal offsetCFrame = CFrame.new(0, 2, 0)\nredBlock.CFrame = blueCube.CFrame:ToWorldSpace(offsetCFrame)\n```\n\n----------------------------------------\n\nTITLE: Calling fireWeapon on tool activation in Lua\nDESCRIPTION: This snippet connects the fireWeapon function to the toolActivated event. This ensures that the laser is fired every time the tool is activated by the player.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\n\tfireWeapon()\nend\n```\n\n----------------------------------------\n\nTITLE: Basic System Message Display in Roblox Chat\nDESCRIPTION: Demonstrates how to display a basic system welcome message in the chat window using TextChatService\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/custom-system-messages.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\nlocal TextChannel = TextChatService:WaitForChild(\"TextChannels\").RBXSystem\n\nTextChannel:DisplaySystemMessage(\"Hello \" .. Players.LocalPlayer.Name, \"WelcomeMessage\")\n```\n\n----------------------------------------\n\nTITLE: Defining Tower Size and Cube Size Constants in Luau\nDESCRIPTION: This code snippet defines two constant variables, `TOWER_SIZE` and `CUBE_SIZE`, which determine the dimensions of the tower to be built. These constants are used throughout the script to control the size and spacing of the cubes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal TOWER_SIZE = 4\nlocal CUBE_SIZE = 2\n```\n\n----------------------------------------\n\nTITLE: Interface Audio Playback on GUI Button Activation in Roblox Lua\nDESCRIPTION: A Lua script for playing interface audio in Roblox on GUI button activation. It ensures the sound is loaded before playing, making use of 'SoundService' and a custom button 'Activated' event handler. Inputs: GUI interface interaction. Outputs: Audio feedback on user interactions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/objects.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal SoundService = game:GetService(\"SoundService\")\n\nlocal button = script.Parent\nlocal sound = SoundService:FindFirstChild(\"SOUND_NAME\")\n\nif not sound.isLoaded then\n\tsound.Loaded:Wait()\nend\n\nlocal function onButtonActivated()\n\tif sound and not sound.IsPlaying then\n\t\tsound:Play()\n\tend\nend\n\nbutton.Activated:Connect(onButtonActivated)\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Program Cards - React JSX\nDESCRIPTION: This snippet creates individual `Card` components for each creator program, displaying the program name, status, and a brief description. Each card includes a button linking to more information about the specific program, facilitating ease of navigation for users.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n    <h4>Brand Developer Directory and Roblox Partner Program</h4>\n        <figure>\n    <Chip\n        color=\"success\"\n        label=\"Status: Open\"\n        size=\"medium\"\n        variant=\"filled\"/>\n    </figure>\n    <Typography variant='body1'>Promotes developers with a strong background in partnering with brands</Typography>\n    </CardContent>\n    <CardActions>\n        <Button href=\"/creator-programs/brand-developer-directory\" variant=\"contained\" color=\"secondary\" size='large'>Learn More</Button>\n    </CardActions>\n    </Card>\n```\n\n----------------------------------------\n\nTITLE: Loading HumanoidDescription from Workspace in Lua\nDESCRIPTION: This code snippet illustrates accessing a HumanoidDescription stored in Workspace and applying it to players as they join the game. The script listens to the PlayerAdded event, assumes the description instance exists in the Workspace, and applies it to the player's character.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Stop automatic spawning so it can be done in the \"PlayerAdded\" callback\nPlayers.CharacterAutoLoads = false\n\nlocal function onPlayerAdded(player)\n\t-- Spawn character with \"workspace.StudioHumanoidDescription\"\n\tplayer:LoadCharacterWithHumanoidDescription(workspace.StudioHumanoidDescription)\nend\n\n-- Connect \"PlayerAdded\" event to \"onPlayerAdded()\" function\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Tweening Position and Rotation of UI Elements in Roblox Lua\nDESCRIPTION: Demonstrates animating an ImageLabel by moving it to the center of the screen while rotating it 45 degrees over 2 seconds. The AnchorPoint is set to the center for proper rotation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal targetPosition = UDim2.new(0.5, 0, 0.5, 0)\nlocal targetRotation = 45\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Position = targetPosition, Rotation = targetRotation})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Creating Align Orientation Constraint - React\nDESCRIPTION: The Align Orientation constraint is implemented through this snippet, which provides the necessary components to align two attachments or one attachment with a specific orientation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/mover-constraints.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Card variant=\"outlined\" style={{height: '100%'}}>\n<CardContent>\n<Button href=\"../physics/constraints/align-orientation.md\" size=\"large\" color=\"primaryBrand\" variant=\"outlined\" fullWidth>Align Orientation</Button>\n<p></p>\n<CardMedia component=\"video\" controls src=\"../assets/physics/constraints/AlignOrientation-Demo.mp4\" />\n<p></p>\n<figcaption>[AlignOrientation](../physics/constraints/align-orientation.md) applies torque to align two attachments, or to align one attachment with a goal orientation</figcaption>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Connecting Died Event with Anonymous Function (Roblox Lua)\nDESCRIPTION: This snippet connects an anonymous function to the Died event of a player's humanoid. This allows to trigger a function that respawns player's character when they die. In the anonymous function, it calls respawnPlayerInLobby() passing in the player variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nhumanoid.Died:Connect(function()\n\nend)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nhumanoid.Died:Connect(function()\n\trespawnPlayerInLobby(player)\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking Motor Support in Roblox Lua\nDESCRIPTION: This code checks for support of specific vibration motors on a gamepad, crucial for targeting specific feedback mechanisms like large or small vibrations. It iterates through different motor types under the condition that vibration support is confirmed, returning boolean values for each.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal HapticService = game:GetService(\"HapticService\")\n\nlocal gamepad = Enum.UserInputType.Gamepad1\nlocal isVibrationSupported = HapticService:IsVibrationSupported(gamepad)\n\nif isVibrationSupported then\n\tlocal largeMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.Large)\n\tlocal smallMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.Small)\n\tlocal leftTriggerMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.LeftTrigger)\n\tlocal rightTriggerMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.RightTrigger)\n\tlocal leftHandMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.LeftHand)\n\tlocal rightHandMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.RightHand)\nend\n```\n\n----------------------------------------\n\nTITLE: Contextual Audio Playback in Roblox Lua\nDESCRIPTION: A Lua script for contextual audio playback in Roblox using a LocalScript. Audio is defined and played from the Workspace, looping indefinitely. It demonstrates dynamic audio control for immersive gaming experience. Inputs: None directly. Outputs: Continuous audio playback.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/objects.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal sound = Instance.new(\"Sound\")\nsound.SoundId = \"rbxassetid://9120386436\"\nsound.Looped = true\nsound.Parent = Workspace\nsound:Play()\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Translation Status - REST API\nDESCRIPTION: This endpoint sets the automatic translation status for a particular languageCode in relation to the gameId. Requires appropriate permissions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH /v1/supported-languages/games/{gameId}/languages/{languageCode}/automatic-translation-status\n```\n\n----------------------------------------\n\nTITLE: Traversing DataModel Hierarchies with Type Casting in Luau\nDESCRIPTION: This Luau code demonstrates traversing a DataModel hierarchy by casting to `any` to access child properties. It illustrates a workaround for cases where specific type information is unavailable for the data model structure.  The text advocates using a generic `getInstance` module to encapsulate the `any` cast internally for better readability.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/plant-reference-project.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n\"local function enableVendor(vendor: Model)\\n\\tlocal zonePart: BasePart = (vendor :: any).ZonePart\\nend\"\n```\n\nLANGUAGE: lua\nCODE:\n```\n\"local function enableVendor(vendor: Model)\\n\\tlocal zonePart: BasePart = getInstance(vendor, \\\"ZonePart\\\")\\nend\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dynamic Object Creation and Animation\nDESCRIPTION: Example of interpolating properties for dynamically created objects using parameter references.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n{objectParam = \"BlackScreenObject\",\n\tproperty = \"BackgroundTransparency\",\n\tkeys = {\n\t\t{value = 0},\n\t\t{time = 19, value = 0},\n\t\t{value = 1},\n\t}}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a Dictionary with pairs() in Luau\nDESCRIPTION: Demonstrates how to use pairs() to iterate through a dictionary, printing each key-value pair.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal myDictionary = {\n\t[\"Blue Player\"] = \"Ana\",\n\t[\"Gold Player\"] = \"Binh\",\n\t[\"Red Player\"] = \"Cate\",\n}\n\nfor key, value in pairs(myDictionary) do\n\tprint(key .. \" is \" .. value)\nend\n```\n\n----------------------------------------\n\nTITLE: Updating GUI Text with Changes in Game Status\nDESCRIPTION: This snippet shows how to define a function to update the text of a TextLabel to reflect the current game status. It includes connecting the update function to the Status string's Changed event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function updateText()\n\ttextLabel.Text = status.Value\nend\n\nstatus.Changed:Connect(updateText)\nupdateText()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tool Script for Harvesting Items - Lua\nDESCRIPTION: This snippet is part of the setup for a tool that allows players to collect items. It includes defining the tool and its touch functionality, which checks if the touched item can be harvested.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Gives players item when they touch a harvestable part\nlocal tool = script.Parent\nlocal toolPart = tool.Handle\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouch(partTouched)\n\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouch(partTouched)\n    local canHarvest = partTouched:FindFirstChild(\"CanHarvest\")\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouch(partTouched)\n    local canHarvest = partTouched:FindFirstChild(\"CanHarvest\")\n    if canHarvest then\n\n    end\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nif canHarvest then\n    -- Used for testing if code works\n    print(\"Found an item\")\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\ntoolPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Drop Water Effect in Roblox\nDESCRIPTION: This snippet details how to set up a fast-running cascade effect for the main waterfall drop in Roblox Studio using beams and attachments. The setup includes positioning attachments and assigning beam properties to simulate a water cascade. Dependencies include access to the Roblox Studio environment and familiarity with its interface. Essential parameters involve the configuration of texture properties like speed, length, and color sequences to visually represent fast-moving water. The input involves moving attachments to define the flow path, with the visual outcome being a realistic cascading waterfall effect.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-waterfalls.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n1. Create the fast running cascading water from the main drop.\n   1. In the **Explorer** window, create a **Folder** in the **Workspace** to contain all cascading water objects, then rename the folder **Cascades**.\n   1. Insert two **block** parts into the **Cascades** folder, then rename them **MainDropStart** and **MainDropStop**, respectively.\n   1. Move **MainDropStart** to the edge of the cliff, and move **MainDropStop** to where it's underneath the plunge pool.\n\n      <img src=\"../../../assets/tutorials/creating-waterfalls/Cascades-2C.png\" alt=\"An angled side view of the cliff with two block parts positioned where the fast running cascade texture should render.\" width=\"80%\" />\n\n   1. Configure attachments for all cascading water beams from the main drop to use to render their textures.\n      1. Insert an attachment into **MainDropStart**, then rotate the attachment until the yellow visual aid points away from the cliff.\n      1. Insert an attachment into **MainDropStop**, then rotate the attachment until the yellow visual aid points toward from the cliff.\n\n      <img src=\"../../../assets/tutorials/creating-waterfalls/Cascades-2D.png\" alt=\"An angled side view of the cliff with two block parts that include attachements. The block part at the top of the cliff includes a yellow visual aid that points away from the cliff, and the block part at the bottom of the cliff includes a yellow visual aid that points toward the cliff.\" width=\"80%\" />\n\n   1. Insert a **Beam** into the **Cascades** folder, then rename it **FastDrop**.\n   1. Assign each part's attachment to **FastDrop**.\n      1. In the **Explorer** window, select **FastDrop**.\n      1. In the **Properties** window,\n         1. Set **Attachment0** to the attachment in **MainDropStart**.\n         1. Set **Attachment1** to the attachment in **MainDropStop**. The beam renders its default texture between the two attachments.\n```\n\n----------------------------------------\n\nTITLE: Creating Sequential UI Tweens in Roblox Lua\nDESCRIPTION: Implements a sequence of tweens where an ImageLabel first moves to the center of the screen and then rotates 45 degrees. Uses the Completed event to chain the animations in sequence.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal targetPosition = UDim2.new(0.5, 0, 0.5, 0)\nlocal targetRotation = 45\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal positionTween = TweenService:Create(object, tweenInfo, {Position = targetPosition})\nlocal rotationTween = TweenService:Create(object, tweenInfo, {Rotation = targetRotation})\n\n-- Initially play position tween\npositionTween:Play()\n\n-- Play rotation tween upon completion of position tween\npositionTween.Completed:Connect(function()\n\trotationTween:Play()\nend)\n```\n\n----------------------------------------\n\nTITLE: Getting a Sorted Map in Roblox\nDESCRIPTION: Retrieves a sorted map by calling the GetSortedMap method on the MemoryStoreService, allowing the use of the specified name across the experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/sorted-map.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"SortedMap1\")\n```\n\n----------------------------------------\n\nTITLE: Loop Part Color Change with RGB in Lua\nDESCRIPTION: This code snippet demonstrates setting the color of a Roblox part inside a while loop using Color3.fromRGB() method. The snippet shows how to change the color to specific RGB values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal loopingPart = workspace.LoopingPart\n\nwhile true do\n\tloopingPart.Color = Color3.fromRGB(82, 227, 255)\nend\n```\n\n----------------------------------------\n\nTITLE: Getting a Roblox Instance using Python\nDESCRIPTION: This Python snippet provides a method for retrieving a single Roblox Engine Instance using the Get Instance API. It requires an API key, universe ID, place ID, and instance ID, while also handling the API response.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\n# Generate at https://create.roblox.com/dashboard/credentials\napiKey = \"<API_KEY>\"\n# Find at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nuniverseId = \"<UNIVERSE_ID>\"\n# Find Start Place ID at https://create.roblox.com/dashboard/creations in the overflow menu of an experience tile\nplaceId = \"<PLACE_ID>\"\n# The default ID for the root of any place's data model\ninstanceId = \"<INSTANCE_ID>\"\n\n# Request header\napiKeyHeaderKey = \"x-api-key\"\n# Endpoint URL for Get Instance method\ngetInstanceUrl = \"https://apis.roblox.com/cloud/v2/universes/%s/places/%s/instances/%s\"\n\ndef GetInstance():\n  url = getInstanceUrl % (universeId, placeId, instanceId)\n  headerData = {apiKeyHeaderKey: apiKey}\n  return requests.get(url, headers = headerData)\n\nresponse = GetInstance()\nprint(\"Response:\", response.status_code, response.text)\n\n# Parse the Operation object's path from response. See the Polling for Results section for more information.\noperationPath = response.json()['path']\n```\n\n----------------------------------------\n\nTITLE: Configuring Season Tier Reward Icons in Lua\nDESCRIPTION: This code snippet shows how to add an on-screen icon for a tier reward that players can earn if they have enough XP. It uses the Missions config to define unique reward tiers within a season.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/season-passes.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n\tTier3Mission = {\n\t\tcategoryId = \"General\",\n\t\tmetadata = {\n\t\t\tdisplayName = \"Tier 3 Mission\",\n\t\t\tdescription = \"Jump 10 times\",\n\t\t\tvisibleAfterComplete = true,\n\t\t\tvisibleBeforeUnlocked = true,\n\t\t\trewards = {\n\t\t\t\t{\n\t\t\t\t\ticon = 16826775737,\n\t\t\t\t\tdisplayName = \"Item\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ticon = 106912146245070,\n\t\t\t\t\tdisplayName = \"Season XP\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing GUI Colors with Studio Theme in Roblox Studio - Lua\nDESCRIPTION: This snippet defines a function to synchronize the colors of GUI elements to match the Roblox Studio theme. It connects to the ThemeChanged event for dynamic adjustments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ntestButton.Parent = testWidget\n\nlocal function syncGuiColors(objects)\n\tlocal function setColors()\n\t\tfor _, guiObject in objects do\n\t\t\t-- Sync background color\n\t\t\tguiObject.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainBackground)\n\t\t\t-- Sync text color\n\t\t\tguiObject.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)\n\t\tend\n\tend\n\t-- Run 'setColors()' function to initially sync colors\n\tsetColors()\n\t-- Connect 'ThemeChanged' event to the 'setColors()' function\n\tsettings().Studio.ThemeChanged:Connect(setColors)\nend\n\n-- Run 'syncGuiColors()' function to sync colors of provided objects\nsyncGuiColors({testButton})\n```\n\n----------------------------------------\n\nTITLE: Implementing Blaster Cooldown Bar Animation in Lua\nDESCRIPTION: A module script that handles the tweening visual effect for a blaster's cooldown bar. The script sets the bar to full width when fired and tweens it down to zero over the cooldown duration. Uses TweenService for smooth animation and requires a blaster configuration module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal getBlasterConfig = require(ReplicatedStorage.Blaster.getBlasterConfig)\n\nlocal END_SIZE = UDim2.fromScale(0, 1)\nlocal EASING_DIRECTION = Enum.EasingDirection.In\nlocal EASING_STYLE = Enum.EasingStyle.Quad\n\nlocal function runCooldownBarEffect(part: Part)\n\tlocal bar = part.SurfaceGui.Container.Bar\n\n\t-- Set bar size to 1 (bar filled)\n\tbar.Size = UDim2.fromScale(1, 1)\n\n\t-- Tween the size to 0 (bar empty) for the duration of secondsBetweenBlasts\n\tlocal secondsBetweenBlasts = getBlasterConfig():GetAttribute(\"secondsBetweenBlasts\")\n\tlocal tweenInfo = TweenInfo.new(secondsBetweenBlasts, EASING_STYLE, EASING_DIRECTION)\n\tlocal propertyTable = {\n\t\tSize = END_SIZE,\n\t}\n\tlocal tween = TweenService:Create(bar, tweenInfo, propertyTable)\n\ttween:Play()\nend\n\nreturn runCooldownBarEffect\n```\n\n----------------------------------------\n\nTITLE: Checking Player Position Proximity in Lua\nDESCRIPTION: Validates if a player is near a specific position using a distance tolerance check. Returns false if the player is too far from the specified position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal distanceFromCharacterToPosition = position - character:GetPivot().Position\nif distanceFromCharacterToPosition.Magnitude > ToleranceValues.DISTANCE_SANITY_CHECK_TOLERANCE_STUDS then\n    return false\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Reactionary Force in AlignPosition\nDESCRIPTION: Shows how to enable or disable reactionary force between attachments using the ReactionForceEnabled property, controlling whether force is applied to both attachments\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/constraints/align-position.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nalignPosition.ReactionForceEnabled = false -- Force applied only to Attachment0\nalignPosition.ReactionForceEnabled = true -- Force applied to both Attachment0 and Attachment1\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Replicated Functions - LocalScript\nDESCRIPTION: This local script connects to a remote event and demonstrates that functions passed as arguments cannot be replicated across the client-server boundary, resulting in receiving 'nil'. It requires the ReplicatedStorage service and a remote event to function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function onClientEvent(func)\n\tprint(func)  --> nil\nend\n\nremoteEvent.OnClientEvent:Connect(onClientEvent)\n```\n\n----------------------------------------\n\nTITLE: Declaring MAX_LASER_DISTANCE in Lua\nDESCRIPTION: This code snippet declares a constant, MAX_LASER_DISTANCE, which determines the maximum range of the laser blaster. It also includes the declaration of UserInputService and tool, MAX_MOUSE_DISTANCE. These variables are used throughout the script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal tool = script.Parent\n\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 500\n```\n\n----------------------------------------\n\nTITLE: Checking Connection and Disconnection\nDESCRIPTION: This snippet connects events to detect when a gamepad is connected or disconnected and logs the event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nUserInputService.GamepadConnected:Connect(function(gamepad)\n\tprint(\"User has connected controller: \" .. tostring(gamepad))\nend)\n\nUserInputService.GamepadDisconnected:Connect(function(gamepad)\n\tprint(\"User has disconnected controller: \" .. tostring(gamepad))\nend)\n```\n\n----------------------------------------\n\nTITLE: Prompting Game Invite with Launch Data for Specific Friend in Roblox Lua\nDESCRIPTION: This snippet shows how to create an ExperienceInviteOptions object with launch data and prompt a game invite for a specific friend. It includes the friend's user ID in the invite options.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/invite-prompts.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal receiverUserID = 505306092\n\nlocal data = {\n\tsenderUserID = player.UserId,\n\tspawnLocation = {12, 48, 205.5}\n}\n\nlocal launchData = HttpService:JSONEncode(data)\n\n-- Construct invite options with friend's user ID and launch data\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.InviteUser = receiverUserID\ninviteOptions.LaunchData = launchData\n\n-- Function to check whether the player can send an invite\nlocal function canSendGameInvite(sendingPlayer)\n\tlocal success, canSend = pcall(function()\n\t\treturn SocialService:CanSendGameInviteAsync(sendingPlayer, receiverUserID)\n\tend)\n\treturn success and canSend\nend\n\nlocal canInvite = canSendGameInvite(player)\nif canInvite then\n\tSocialService:PromptGameInvite(player, inviteOptions)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Ancestry Changes with Deferred Events in Lua\nDESCRIPTION: Example showing how deferred events affect the timing of ancestry and property change handlers, where the handler runs after the instance is already destroyed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/deferred.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = Instance.new(\"Part\", workspace)\n\nlocal function onPartDestroying()\n\tprint(\"In signal:\", part:GetFullName(), #part:GetChildren())\nend\n\npart.Destroying:Connect(onPartDestroying)\npart:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Ducking with CompressorSoundEffect\nDESCRIPTION: Setting up dynamic audio prioritization using CompressorSoundEffect to reduce volume of low-priority sounds when high-priority sounds play.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/groups.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Insert CompressorSoundEffect into target SoundGroup\n2. Set SideChain to prioritized audio object\n3. Configure Threshold, Attack, Release, and Ratio properties\n4. Test and adjust audio dynamics\n```\n\n----------------------------------------\n\nTITLE: Initializing GUI Elements in Roblox\nDESCRIPTION: This snippet demonstrates how to initialize a Screen GUI and a TextLabel to display game status in Roblox. It details the steps to create these GUI elements in the StarterGUI folder to ensure all players can see them.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\n\nlocal textLabel = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Adjusting Environment Diffuse Scale in Roblox\nDESCRIPTION: Sets the EnvironmentDiffuseScale property of the Lighting service to determine how much ambient light is derived from the environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.EnvironmentDiffuseScale = 0\n```\n\n----------------------------------------\n\nTITLE: Defining Tile Type Configuration for Wall Object\nDESCRIPTION: Configures a wall tile's asset offset, connectivity, and occupancy using bitmask values in the building system grid configuration\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/building-system.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nObjectTypeConfigurations.Wall = {\n\tASSET_OFFSET_FROM_CENTER = Vector3.new(0, 0, -CELL_DIMENSIONS.Z / 2),\n\tCONNECTIVITY = 0xFF8000, -- 0b 111 111 111 000 000 000 000 000\n\tOCCUPANCY = 0x20, -- 0b 00 00 00 00 1 0 0 0 0 0\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Line Breaks in Lua Strings\nDESCRIPTION: Demonstration of how to add line breaks within a string using the \\n escape sequence. This allows for formatting the story text with vertical spacing for better readability.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/finish-and-add.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n\"One \\n Two \\n\\n Three\"\n```\n\n----------------------------------------\n\nTITLE: Score Tracking System Setup in Roblox Lua\nDESCRIPTION: Initialization of the scoring system with a bindable event for tracking team score changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal teamScoreChangedBindable = Instance.new(\"BindableEvent\")\n\nlocal Scoring = {\n\tteamScoreChanged = teamScoreChangedBindable.Event,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Card Module in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to configure the Profile Card module using the configure function. It sets various options like alwaysOnTop, maxClickDistance, backgroundColor, and backgroundTransparency.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/profile-card.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ProfileCard = require(ReplicatedStorage:WaitForChild(\"ProfileCard\"))\n\nProfileCard.configure({\n\talwaysOnTop = true,\n\tmaxClickDistance = 50,\n\tbackgroundColor = Color3.fromRGB(0, 0, 0),\n\tbackgroundTransparency = 0.4\n})\n```\n\n----------------------------------------\n\nTITLE: Laser Ray Casting with Destination Handling in Lua\nDESCRIPTION: Function for casting laser rays and determining their destination based on raycast results, supporting hit detection and destination calculation\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nif result then\n\t-- The blast hit something, check if it was a player.\n    destination = CFrame.lookAt(result.Position, result.Position + result.Normal)\n    taggedPlayer = getPlayerFromDescendant(result.Instance)\nelse\n\t-- The blast didn't hit anything, so its destination is\n\t-- the point at its maximum distance.\n\tlocal distantPosition = origin + rayDirection * MAX_DISTANCE\n\tdestination = CFrame.lookAt(distantPosition, distantPosition - rayDirection)\n\ttaggedPlayer = nil\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Tagged Out Indicator Logic in Roblox\nDESCRIPTION: A module script that handles the logic when a player is eliminated. It updates the player's state to 'TaggedOut', adds the visual indicator above their head, and prevents their character from falling over by adding an AlignOrientation instance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PlayerState = require(ReplicatedStorage.PlayerState)\nlocal PlayerAttribute = require(ReplicatedStorage.PlayerAttribute)\nlocal taggedOutIndicatorGuiPrefab = ReplicatedStorage.Instances.Guis.TaggedOutIndicatorGuiPrefab\n\nlocal function onHumanoidDied(player: Player, humanoid: Humanoid)\n\t-- Update player state to be tagged out except when they're in the lobby,\n\t-- which happens when they're tagged out right as the round ends\n\tif player:GetAttribute(PlayerAttribute.playerState) ~= PlayerState.InLobby then\n\t\tplayer:SetAttribute(PlayerAttribute.playerState, PlayerState.TaggedOut)\n\tend\n\n\t-- Add Tagged Out indicator to character\n\tlocal newIndicator = taggedOutIndicatorGuiPrefab:Clone()\n\tlocal character = humanoid.Parent\n\tnewIndicator.Parent = character:FindFirstChild(\"Head\")\n\n\t-- Add an AlignOrientation to the character to prevent it from falling over\n\tlocal alignOrientation = Instance.new(\"AlignOrientation\")\n\talignOrientation.RigidityEnabled = true\n\talignOrientation.Mode = Enum.OrientationAlignmentMode.OneAttachment\n\talignOrientation.Attachment0 = humanoid.RootPart.RootAttachment\n\talignOrientation.CFrame = humanoid.RootPart.CFrame\n\talignOrientation.Parent = humanoid.RootPart\nend\n\nreturn onHumanoidDied\n```\n\n----------------------------------------\n\nTITLE: Implementing Fire Rate Control in Lua\nDESCRIPTION: Sets up variables and a function to control the weapon's fire rate.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 300\nlocal FIRE_RATE = 0.3\nlocal timeOfPreviousShot = 0\n\n-- Check if enough time has passed since previous shot was fired\nlocal function canShootWeapon()\n\tlocal currentTime = tick()\n\tif currentTime - timeOfPreviousShot < FIRE_RATE then\n\t\treturn false\n\tend\n\treturn true\nend\n```\n\n----------------------------------------\n\nTITLE: Tweening Canvas Group Transparency in Roblox Lua\nDESCRIPTION: Demonstrates how to modify an entire CanvasGroup's transparency, affecting all child elements simultaneously\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal canvasGroup = ScreenGui:WaitForChild(\"CanvasGroup\")\n\nlocal targetTransparency = 0.8\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(canvasGroup, tweenInfo, {GroupTransparency = targetTransparency})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Setting MeshPart TextureID in Roblox Lua\nDESCRIPTION: Sets the TextureID property of a MeshPart to a uploaded texture image. This is used when manually adding textures to an imported character model.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/import.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.MeshPart.TextureID = \"uploaded_texture_image_id\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Reward Handlers in Lua\nDESCRIPTION: Creates server-side logic for handling reward claims when players progress through tiers. Includes handler function setup and initialization for both free and premium rewards.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/season-passes.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function rewardClaimedHandlerFunction(_player: Player, _rewardId: Types.RewardId): boolean\n\ttask.wait(2)\n\treturn true\nend\n\nlocal function initializeRewardClaimedHandlers()\n\tfor tierId, tier in pairs(Season.tiers) do\n\t\tif tier then\n\t\t\tif tier.freeReward then\n\t\t\t\tSeasonPasses.setRewardClaimedHandler(tier.freeReward.rewardId, rewardClaimedHandlerFunction)\n\t\t\tend\n\t\t\tif tier.premiumReward then\n\t\t\t\tSeasonPasses.setRewardClaimedHandler(tier.premiumReward.rewardId, rewardClaimedHandlerFunction)\n\t\t\tend\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Running Client Schema with Animation in Lua\nDESCRIPTION: This OnRun function launches audio and animation configurations. It sets up a dance animation synchronized with the main audio. Parameters include the animation asset ID, rig for the animation, and synchronization details with audio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Client)\")\n\n\tlocal MainAudio = Schema:audio({\n\t\tStartTime = 1,\n\t\tSoundId = \"rbxassetid://1838673350\",\n\t})\n\n\tlocal DanceAnimation = Schema:animate({\n\t\tAnimationId = \"rbxassetid://3695333486\",\n\t\tRig = Dummy,\n\t\tSpeed = 1,\n\t\tFadeInTime = 0.1,\n\t\tFadeOutTime = 0.3,\n\t\tSyncToAudio = {\n\t\t\tAudio = MainAudio,\n\t\t\tStartAtAudioTime = 5,\n\t\t},\n\t\tOnStart = function(self)\n\t\t\tprint(\"Animation playing\")\n\t\tend,\n\t\tOnEnd = function(self)\n\t\t\tprint(\"Animation stopped\")\n\t\tend\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Objects from ReplicatedStorage\nDESCRIPTION: Demonstrates how to safely access objects from ReplicatedStorage using WaitForChild() method.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal signsFolder = ReplicatedStorage:WaitForChild(\"Signs\")\nlocal sign = signsFolder:WaitForChild(\"InteractiveSign\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Magma Visual Appearance - Lua\nDESCRIPTION: This snippet provides detailed steps for customizing the appearance of the Magma beam, including setting width, curve size, color sequence, and transparency parameters to simulate the visual effects of cooling magma.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\n1. Customize the beam's visual appearance so it looks like flowing magma.\n   1. In the **Explorer** window, verify **Magma** is still selected.\n   1. In the **Properties** window,\n      1. Set **Width0** to `50` to widen the texture from the axis that it starts to render...\n      1. Set **Color** to a color sequence that starts bright red and becomes dark red...\n      - **Time** = `0`, **RGB Value** = `255, 51, 0`\n      - **Time** = `0.5`, **RGB Value** = `211, 39, 0`\n      - **Time** = `1`, **RGB Value** = `118, 24, 0`\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Type - JSON\nDESCRIPTION: This snippet outlines how to represent decimal values in Open Cloud APIs using signficand and exponent. It provides examples for various decimal representations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/types.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"significand\": 17, \"exponent\": 0}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"significand\": -5, \"exponent\": -3}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"significand\": 335, \"exponent\": 5}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"significand\": 1375, \"exponent\": -3}\n```\n\n----------------------------------------\n\nTITLE: Calculating New CFrame for Button Position in Roblox Lua\nDESCRIPTION: This code snippet calculates a new CFrame for a button's position by creating an offset CFrame based on a specified distance and direction.  It multiplies the `TWEEN_MOVE_DISTANCE` by `buttonState` to determine the direction of movement and then converts this offset to world space relative to the button's current CFrame.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/animating-parts.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Calculate new CFrame for button position\nlocal offsetCFrame = CFrame.new(0, TWEEN_MOVE_DISTANCE * buttonState, 0)\nlocal newCFrame = button.CFrame:ToWorldSpace(offsetCFrame)\n```\n\n----------------------------------------\n\nTITLE: Roblox Avatar Rigging Hierarchy\nDESCRIPTION: Required bone/joint hierarchy and naming convention for humanoid character rigs in Roblox. The structure must follow this exact hierarchy starting from Root.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/specifications.md#2025-04-21_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\nRoot\nHumanoidRootNode\nLowerTorso\nUpperTorso\nHead\nLeftUpperArm\nLeftLowerArm\nLeftHand\nRightUpperArm\nRightLowerArm\nRightHand\nLeftUpperLeg\nLeftLowerLeg\nLeftFoot\nRightUpperLeg\nRightLowerLeg\nRightFoot\n```\n\n----------------------------------------\n\nTITLE: Connecting MatchStart Event to StartTimer Function in Lua\nDESCRIPTION: This snippet connects the MatchStart event to the startTimer function, ensuring that the timer starts when the match begins.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\nend\n\nmatchStart.Event:Connect(startTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Creating a Player Join Function in Roblox with Lua\nDESCRIPTION: This snippet demonstrates initializing a function to handle player joins by creating a leaderboard using a folder. It is essential to parent this folder to the player and name it 'leaderstats' to ensure Roblox recognizes it as a leaderboard.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Creates a leaderboard that shows player variables\n\n   local function onPlayerJoin(player)\n\n   end\n```\n\n----------------------------------------\n\nTITLE: Updating DamageCharacter Remote Event in ToolController in Lua\nDESCRIPTION: Modified code to send the hit position to the server when firing the DamageCharacter remote event. This allows the server to perform position validation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nif characterModel then\n\tlocal humanoid = characterModel:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\teventsFolder.DamageCharacter:FireServer(characterModel, hitPosition)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Score Text Display\nDESCRIPTION: Setup for the score text label with proper formatting, including font selection, color settings, and size constraints to ensure readability across different screen sizes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/create-a-score-bar.md#2025-04-21_snippet_2\n\nLANGUAGE: Roblox\nCODE:\n```\n-- TextLabel Properties\nBackgroundTransparency = 1\nSize = UDim2.new(1, 0, 1, 0)\nSizeConstraint = Enum.SizeConstraint.RelativeYY\nFont = Enum.Font.GothamSSm\nText = \"0\"\nTextColor3 = Color3.fromRGB(255, 200, 100)\nTextSize = 30\nTextXAlignment = Enum.TextXAlignment.Left\n```\n\n----------------------------------------\n\nTITLE: Coding the Intermission with Repeat Loop in Lua\nDESCRIPTION: This Lua code implements the intermission phase using a `repeat...until` loop within the main game loop. It checks if the number of players is greater than or equal to the minimum required players specified in the GameSettings module. The repeat loop ensures at least one iteration, during which an intermission message is printed, and the game waits for a specified duration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\trepeat\n\t\tprint(\"Starting intermission\")\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\nend\n```\n\n----------------------------------------\n\nTITLE: Empty if statement structure in Luau\nDESCRIPTION: Shows an incomplete if statement structure that needs a condition to be added. This demonstrates how the if-then-end block appears in code.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/intro-to-if-statements.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n  if then\n  -- empty code\nend\n\n```\n\n----------------------------------------\n\nTITLE: Event Firing - LocalScript with Metatables\nDESCRIPTION: This script attempts to fire a remote event with a table that has a metatable, demonstrating that properties from the metatable are not transferred. It requires ReplicatedStorage and a remote event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal Car = {}\nCar.NumWheels = 4\nCar.__index = Car\n\nlocal truck = {}\ntruck.Name = \"MyTruck\"\nsetmetatable(truck, Car)\n\n-- Fire event with table including a metatable\nremoteEvent:FireServer(truck)\n```\n\n----------------------------------------\n\nTITLE: Complete GameManager Script\nDESCRIPTION: This is a complete GameManager script.  It initializes services, requires module scripts, updates the game status using DisplayManager, and prepares the game using MatchManager.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal displayManager = require(moduleScripts:WaitForChild(\"DisplayManager\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tmatchEnd.Event:Wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming Module Table in Lua\nDESCRIPTION: Demonstrates how to rename the module table to reflect its purpose, using pascal case naming convention.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal RewardManager = {}\n\nreturn RewardManager\n```\n\n----------------------------------------\n\nTITLE: Initializing First Person Blaster Visuals in Lua\nDESCRIPTION: Main client script that handles all visual logic for the player's first-person blaster, including cooldown meter setup and animation. It manages the blaster's visual state based on player attributes and game state changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\nlocal RunService = game:GetService(\"RunService\")\n\nlocal BlastData = require(ReplicatedStorage.Blaster.BlastData)\nlocal PlayerAttribute = require(ReplicatedStorage.PlayerAttribute)\nlocal PlayerState = require(ReplicatedStorage.PlayerState)\nlocal getBlasterConfig = require(ReplicatedStorage.Blaster.getBlasterConfig)\n\nlocal runBlastVisuals = require(script.runBlastVisuals)\nlocal setupAnimations = require(script.setupAnimations)\nlocal addCooldownBar = require(script.addCooldownBar)\nlocal runCooldownBarEffect = require(script.runCooldownBarEffect)\n\nlocal laserBlastedBindableEvent = ReplicatedStorage.Instances.LaserBlastedBindableEvent\n\nlocal RIG_OFFSET_FROM_CAMERA = CFrame.new(2, -2, -3) * CFrame.Angles(math.rad(0.25), math.rad(95.25), 0)\n\nlocal localPlayer = Players.LocalPlayer\nlocal currentCamera = Workspace.CurrentCamera\n\nlocal rigModel = nil\nlocal cooldownBar = nil\nlocal animations = {}\n\nlocal function addFirstPersonVisuals()\n\tlocal blasterConfig = getBlasterConfig()\n\n\t-- Add the first person rig\n\trigModel = blasterConfig.RigModel:Clone()\n\trigModel.Parent = Workspace\n\n\t-- Add the cooldownBar\n\tcooldownBar = addCooldownBar(rigModel.PrimaryPart.CooldownBarAttachment)\n\n\tanimations = setupAnimations(blasterConfig, rigModel)\nend\n\nlocal function removeFirstPersonVisuals()\n\tfor _, animation in animations do\n\t\tanimation:Stop()\n\t\tanimation:Destroy()\n\t\tanimation = nil\n\tend\n\tif rigModel then\n\t\t-- This also destroys the cooldown bar since it is parented to the rig\n\t\trigModel:Destroy()\n\t\trigModel = nil\n\tend\nend\n\n-- Run first person visual effects when a blast occurs\nlaserBlastedBindableEvent.Event:Connect(function(blastData: BlastData.Type)\n\trunBlastVisuals(rigModel.PrimaryPart.TipAttachment, blastData, animations.blastAnimation)\n\trunCooldownBarEffect(cooldownBar)\nend)\n\n-- Bind the rig to the camera if it exists\nRunService.RenderStepped:Connect(function()\n\tif rigModel then\n\t\t-- Update to rig's CFrame relative to the camera's position and RIG_OFFSET_FROM_CAMERA\n\t\trigModel:PivotTo(currentCamera.CFrame * RIG_OFFSET_FROM_CAMERA)\n\tend\nend)\n\n-- Handles changing visuals when the blasterType changes while playing\nlocalPlayer:GetAttributeChangedSignal(PlayerAttribute.blasterType):Connect(function()\n\tlocal playerState = localPlayer:GetAttribute(PlayerAttribute.playerState)\n\tif playerState == PlayerState.Playing then\n\t\tremoveFirstPersonVisuals()\n\t\taddFirstPersonVisuals()\n\tend\nend)\n\n-- Handles changing visuals when the playerState changes\nlocalPlayer:GetAttributeChangedSignal(PlayerAttribute.playerState):Connect(function()\n\tlocal newPlayerState = localPlayer:GetAttribute(PlayerAttribute.playerState)\n\t-- Remove the visuals when the player is selecting a blaster or is in the lobby\n\tif newPlayerState == PlayerState.SelectingBlaster or newPlayerState == PlayerState.InLobby then\n\t\tremoveFirstPersonVisuals()\n\t-- Add the visuals back when the player finishes selecting the blaster.\n\telseif newPlayerState == PlayerState.Playing then\n\t\taddFirstPersonVisuals()\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Validating Ray Angles in Lua\nDESCRIPTION: Validates the angle between claimed and expected ray directions for laser blasts. Uses a tolerance value to determine if the difference in angles is within acceptable limits.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal claimedDirection = (rayResult.destination.Position - originCFrame.Position).Unit\nlocal directionErrorDegrees = getAngleBetweenDirections(claimedDirection, expectedDirection)\n\nreturn directionErrorDegrees <= ToleranceValues.BLAST_ANGLE_SANITY_CHECK_TOLERANCE_DEGREES\n```\n\n----------------------------------------\n\nTITLE: Creating removeActivePlayer Function (Lua)\nDESCRIPTION: This snippet defines a local function named `removeActivePlayer` which takes a `player` as a parameter.  This function is intended to be used to remove players from the `activePlayers` table when they are defeated or eliminated from the game. The function is initially empty and requires further implementation to function correctly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function checkPlayerCount()\n\tif #activePlayers == 1 then\n\t\tmatchEnd:Fire(gameSettings.endStates.FoundWinner)\n\tend\nend\n\nlocal function removeActivePlayer(player)\n\nend\n```\n\n----------------------------------------\n\nTITLE: UserInputService Button Press Detection\nDESCRIPTION: This snippet detects when a button is pressed on Gamepad1 using UserInputService, specifically checking for Button A.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nUserInputService.InputBegan:Connect(function(input)\n\tif input.UserInputType == Enum.UserInputType.Gamepad1 then\n\t\tif input.KeyCode == Enum.KeyCode.ButtonA then\n\t\t\tprint(\"Button A pressed on Gamepad1\")\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Ending Server Scene in Lua\nDESCRIPTION: This snippet defines the OnEndScene hook for cleaning up in a server schema. It disconnects event connections established during OnSetup. This is essential for freeing up resources and avoiding memory leaks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nSchema.OnEndScene = function()\n\tprint(\"OnEndScene (Server)\")\n\n\tif partColorConnection then\n\t\tpartColorConnection:Disconnect()\n\t\tpartColorConnection = nil\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Round Results Display in Roblox Lua\nDESCRIPTION: Client-side handler for displaying round results UI and playing victory/defeat sounds based on team outcome.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onRoundWinner(winner: Team, localTeam: Team?)\n\tlocal victoryDefeatText = \"Round ended!\"\n\tif localTeam then\n\t\t-- If our team won, we'll display Victory! Otherwise display Defeat...\n\t\tlocal isVictory = winner == localTeam\n\t\tif isVictory then\n\t\t\tvictorySound:Play()\n\t\t\tvictoryDefeatText = VICTORY_TEXT\n\t\telse\n\t\t\tdefeatSound:Play()\n\t\t\tvictoryDefeatText = DEFEAT_TEXT\n\t\tend\n```\n\n----------------------------------------\n\nTITLE: Example Code Comment Comparison\nDESCRIPTION: Demonstrates the difference between poor and good code commenting practices in Roblox Lua scripts, emphasizing the importance of specific and descriptive comments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/lesson-plans/roblox-developer/roblox-developer-2.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Not Specific: Runs code\n\n-- Improved: Changes color of PracticePart\n```\n\n----------------------------------------\n\nTITLE: Syncing Team Color in Lua\nDESCRIPTION: This script handles syncing the player indicator's team color and icon to the player's corresponding team after they select their blaster. It checks the player's TeamColor value and sets the visibility of the appropriate team icon (TeamAIcon or TeamBIcon) based on whether the player's TeamColor is mint or carnation pink. The script uses GetPropertyChangedSignal to update the team icon whenever the player's team changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal function setPlayerTeamIcon(gui: ScreenGui)\n\tfor _, teamColorIcon in gui.PlayerDisplay.TeamIcons:GetChildren() do\n\t\tlocal iconTeamColor = teamColorIcon:GetAttribute(GuiAttribute.teamColor)\n\t\tteamColorIcon.Visible = localPlayer.TeamColor == iconTeamColor\n\tend\nend\n\nlocal function startSyncingTeamColor(gui: ScreenGui)\n\tsetPlayerTeamIcon(gui)\n\n\tlocalPlayer:GetPropertyChangedSignal(\"Team\"):Connect(function()\n\t\tsetPlayerTeamIcon(gui)\n\tend)\nend\n\nreturn startSyncingTeamColor\n```\n\n----------------------------------------\n\nTITLE: Disabling Moods for Characters in Roblox Lua\nDESCRIPTION: This script removes the mood object from each character's Animate LocalScript when they join the experience, effectively disabling moods.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/moods.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\tanimateScript.mood:Destroy()\nend\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAppearanceLoaded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Using Variadics in Function Definitions\nDESCRIPTION: This example demonstrates how to define variadic functions in Luau, allowing the function to accept a variable number of arguments. This mechanism provides flexibility but requires caution to avoid unexpected type errors.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function addLotsOfNumbers(...: number)\n\tlocal sum = 0\n\n\tfor _, v in {...} do\n\t\tsum += v\n\tend\n\n\treturn sum\nend\n\nprint(addLotsOfNumbers(1, 2, 3, 4, 5))\nprint(addLotsOfNumbers(1, 2, \"car\", 4, 5))  -- Type error: string could not be converted into number\n```\n\n----------------------------------------\n\nTITLE: Activating SelfieMode Actions\nDESCRIPTION: Demonstrates how to programmatically activate a selfie mode action like filters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\n-- Activate \"Filter\" action\nSelfieMode.activateAction(SelfieMode.Action.Filter)\n```\n\n----------------------------------------\n\nTITLE: Disabling Scavenger Hunt Interactions\nDESCRIPTION: Disable all Scavenger Hunt UI, input event listeners, and prevent token or region interactions for players\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.disable()\n```\n\n----------------------------------------\n\nTITLE: Rotating Objects Based on Streaming in Roblox Lua\nDESCRIPTION: This code snippet rotates objects in Roblox based on their current rotational speed and streaming status. Using heartbeats to update rotations, it handles streaming limitations where an object’s PrimaryPart might not yet be available. It calculates transformations depending on whether the object is a Model or MeshPart.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal parentTransform\nif parentObj:IsA(\"Model\") then\n\tif not parentObj.PrimaryPart then\n\t\t-- primary part might not be streamed in yet\n\t\tcontinue -- wait for primary part to replicate\n\tend\n\tparentTransform = parentObj.PrimaryPart.CFrame\nelse\n\tparentTransform = parentObj.CFrame\nend\n\ncurObjInfo.curAngle += dT * curObjInfo.timeToAngle\nlocal rotatedLocalCFrame = curObjInfo.origLocalCFrame * CFrame.Angles( curObjInfo.axisMask.X * curObjInfo.curAngle, curObjInfo.axisMask.Y * curObjInfo.curAngle, curObjInfo.axisMask.Z * curObjInfo.curAngle )\n\nif obj:IsA(\"Model\") then\n\tobj.PrimaryPart.CFrame = parentTransform * rotatedLocalCFrame\nelse\n\tobj.CFrame = parentTransform * rotatedLocalCFrame\nend\n```\n\n----------------------------------------\n\nTITLE: Complete StatusDisplay Script\nDESCRIPTION: This is a complete StatusDisplay script. It gets the ReplicatedStorage service, the display values and status. The textLabel will update according to the status value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\n\nlocal textLabel = script.Parent\n\nlocal function updateText()\n\ttextLabel.Text = status.Value\nend\n\nstatus.Changed:Connect(updateText)\nupdateText()\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Touch Event Handler in Roblox\nDESCRIPTION: Creates a function that responds when an object is touched and connects it to the Touched event of the powerup part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal speedBoost = script.Parent\n\nlocal function onTouch(otherPart)\n\tprint(\"Something touched speedBoost\")\nend\n\nspeedBoost.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gentle White Water ParticleEmitter in Roblox\nDESCRIPTION: Configures a ParticleEmitter named 'GentleWW' with properties to create less turbulent white water effects where waterfall outflow collides with surrounding boulders. The emitter uses a specific texture, color sequence, size sequence, and transparency settings to mimic aerated water splashes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-waterfalls.md#2025-04-21_snippet_2\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n-- ParticleEmitter Properties for Gentle White Water\nTexture = rbxassetid://16808075391\nColor = ColorSequence.new({\n  ColorSequenceKeypoint.new(0, Color3.fromRGB(189, 246, 255)),\n  ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))\n})\nSize = NumberSequence.new({\n  NumberSequenceKeypoint.new(0, 1.13, 0.562),\n  NumberSequenceKeypoint.new(1, 5.56, 0.563)\n})\nTransparency = NumberSequence.new({\n  NumberSequenceKeypoint.new(0, 1, 0),\n  NumberSequenceKeypoint.new(0.143, 0.462, 0.0625),\n  NumberSequenceKeypoint.new(0.336, 0.462, 0.0562),\n  NumberSequenceKeypoint.new(0.622, 0.788, 0.0538),\n  NumberSequenceKeypoint.new(1, 1, 0)\n})\nZOffset = 2\nLifetime = NumberRange.new(1.25, 1.5)\nRate = 12\nRotation = NumberRange.new(-45, 45)\nRotSpeed = NumberRange.new(-40, 40)\nSpeed = NumberRange.new(15, 18)\nSpreadAngle = Vector2.new(5, 5)\nAcceleration = Vector3.new(0, -35, 0)\nDrag = 0.25\nLightEmission = 0.6\nLightInfluence = 0.1\n```\n\n----------------------------------------\n\nTITLE: Transitioning Pages with UIPageLayout in Lua\nDESCRIPTION: Script demonstrates programmatically navigating between pages using Next() and Previous() methods of UIPageLayout. Waits two seconds between each page transition to create a sequential navigation effect.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/page-layouts.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal frame = script.Parent\\n\\nlocal pageLayout = frame:FindFirstChildWhichIsA(\"UIPageLayout\")\\n\\ntask.wait(2)\\npageLayout:Next()\\n\\ntask.wait(2)\\npageLayout:Next()\\n\\ntask.wait(2)\\npageLayout:Previous()\\n\\ntask.wait(2)\\npageLayout:Previous()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Player Character Initialization in Roblox Lua\nDESCRIPTION: A server script that establishes character initialization for all players, ensuring that when a player's character is added to the game, the setupHumanoidAsync function is called with their Humanoid object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal setupHumanoidAsync = require(script.setupHumanoidAsync)\n\nlocal function onCharacterAdded(player: Player, character: Model)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tsetupHumanoidAsync(player, humanoid)\nend\n\nlocal function onPlayerAdded(player: Player)\n\t-- Call onCharacterAdded if the player already has a character\n\tif player.Character then\n\t\tonCharacterAdded(player, player.Character)\n\tend\n\t-- Call onCharacterAdded for all future character spawns for this player\n\tplayer.CharacterAdded:Connect(function(character: Model)\n\t\tonCharacterAdded(player, character)\n\tend)\nend\n\n-- Call onPlayerAdded for any players already in the game\nfor _, player in Players:GetPlayers() do\n\tonPlayerAdded(player)\nend\n-- Call onPlayerAdded for all future players\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Activate Directional Indicator in WeaponsGui (Lua)\nDESCRIPTION: This code snippet demonstrates how to activate a directional indicator within the WeaponsGui script. It uses the DirectionalIndicatorGuiManager to activate an indicator by name, pointing towards a specified world position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/weapons-kit.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nself.DirectionalIndicatorGuiManager:ActivateDirectionalIndicator(indicatorName, worldPos)\n```\n\n----------------------------------------\n\nTITLE: Removing Menu Options from ACM with SetCore\nDESCRIPTION: This snippet demonstrates how to remove both custom and default menu options from the Avatar Context Menu (ACM) using `StarterGui:SetCore()` with the `RemoveAvatarContextMenuOption` option.  It shows removing a custom option by its name and a default option using the `Enum.AvatarContextMenuOption` enum.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-context-menu.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Remove the \"Custom ACM Action\" option\nStarterGui:SetCore(\"RemoveAvatarContextMenuOption\", \"Custom ACM Action\")\n\n-- Remove the default \"Friend\" option by referencing the AvatarContextMenuOption.Friend Enum\nStarterGui:SetCore(\"RemoveAvatarContextMenuOption\", Enum.AvatarContextMenuOption.Friend)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Team Points Sync in Lua\nDESCRIPTION: Code fragment showing team points counter synchronization implementation. Part of a larger script that handles team point updates.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n\t\tend)\n\tend\nend\n\nreturn startSyncingTeamPoints\n```\n\n----------------------------------------\n\nTITLE: Handling DragDetector Event Signals in Roblox\nDESCRIPTION: This snippet shows how to connect to the DragStart, DragContinue, and DragEnd events of a DragDetector. It creates a highlight effect that activates when dragging begins and deactivates when dragging ends.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/3D-drag-detectors.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragDetector = script.Parent.DragDetector\n\nlocal highlight = Instance.new(\"Highlight\")\nhighlight.Enabled = false\nhighlight.Parent = script.Parent\n\ndragDetector.DragStart:Connect(function()\n\thighlight.Enabled = true\nend)\n\ndragDetector.DragContinue:Connect(function()\n\nend)\n\ndragDetector.DragEnd:Connect(function()\n\thighlight.Enabled = false\nend)\n```\n\n----------------------------------------\n\nTITLE: Writing to Dictionaries in Luau\nDESCRIPTION: This snippet explains updating existing keys or adding new key-value pairs to dictionaries in Luau. It includes examples of modifying current values and inserting new ones.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal testDictionary = {\n\tfruitName = \"Lemon\",\n\tsour = true\n}\n\n-- Change value of existing keys\ntestDictionary[\"fruitName\"] = \"Cherry\"\ntestDictionary[\"sour\"] = false\n\n-- Insert new key-value pair\ntestDictionary[\"fruitCount\"] = 10\n\nprint(testDictionary[\"fruitName\"]) -- Cherry\nprint(testDictionary[\"sour\"]) -- false\nprint(testDictionary[\"fruitCount\"]) -- 10\n```\n\n----------------------------------------\n\nTITLE: Creating Local Lighting for Volcano\nDESCRIPTION: Setup of point light sources to illuminate different areas of the volcano, including caldera, magma, and outflow regions\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Create LocalLighting Folder\nlocal localLightingFolder = Instance.new(\"Folder\")\nlocalLightingFolder.Name = \"LocalLighting\"\nlocalLightingFolder.Parent = workspace\n\n-- Create Light Parts\nlocal lightCaldera = Instance.new(\"Part\")\nlightCaldera.Name = \"LightCaldera\"\nlightCaldera.Transparency = 1\nlightCaldera.Parent = localLightingFolder\n\n-- Add PointLight to Caldera\nlocal caelderaLight = Instance.new(\"PointLight\")\ncaelderaLight.Brightness = 15\ncaelderaLight.Color = Color3.fromRGB(255, 85, 0)\ncaelderaLight.Range = 60\ncaelderaLight.Parent = lightCaldera\n```\n\n----------------------------------------\n\nTITLE: Managing GUI Visibility in Roblox Lua\nDESCRIPTION: Function that enables only a specific GUI screen while disabling all others. This creates mutually exclusive UI states where only one screen can be visible at a time.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\n-- Disable all UI Layers except the given exception\nlocal function setGuiExclusivelyEnabled(enabledGui: ScreenGui?)\n\t-- guiLayers contains a list of the guis that should be set exclusively.\n\tfor _, screenGui in guiLayers do\n\t\tscreenGui.Enabled = screenGui == enabledGui\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Scavenger Hunt Interactions\nDESCRIPTION: Enable Scavenger Hunt UI, input event listeners, and allow players to collect tokens and interact with regions\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.enable()\n```\n\n----------------------------------------\n\nTITLE: Type Coercion in TimeOfDay Property in Luau\nDESCRIPTION: Details the conversion of a number to a string representation of the Datatype.DateTime when setting the TimeOfDay property. Demonstrates how Luau facilitates this conversion automatically.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-coercion.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Lighting = game:GetService(\"Lighting\")\n\nLighting.TimeOfDay = \"05:00:00\"\nprint(Lighting.TimeOfDay) -- 05:00:00\n\nLighting.TimeOfDay = 5\nprint(Lighting.TimeOfDay) -- 05:00:00\n```\n\n----------------------------------------\n\nTITLE: Equipping Player with Weapon in Lua\nDESCRIPTION: Extends the preparePlayer function to clone the weapon and add it to the player's character.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\nend\n```\n\n----------------------------------------\n\nTITLE: Alternate Metatable Assignment Techniques\nDESCRIPTION: Shows two equivalent methods of creating and setting metatables in a single line\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal x = {}\nsetmetatable(x, {})\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal x = setmetatable({}, {})\n```\n\n----------------------------------------\n\nTITLE: Spawning Players in Map - Roblox Lua\nDESCRIPTION: This code snippet handles spawning players in appropriate team locations and listens for new players joining. The script sets the neutral spawn location to false, calls the spawnPlayersInMap function to balance teams, and uses the PlayerAdded event to ensure new players are also assigned. Dependencies include the Players service in Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n\t\t-- Spawn all players in the map\n\t\tneutralSpawn.Neutral = false\n\t\tspawnPlayersInMap(Players:GetPlayers())\n\n\t\t-- Spawn new players in the map when they join\n\t\tlocal playerAddedConnection = Players.PlayerAdded:Connect(function(player: Player)\n\t\t\tspawnPlayersInMap({ player })\n\t\tend)\n```\n\n----------------------------------------\n\nTITLE: Importing LaserRenderer in ToolController\nDESCRIPTION: Requires the LaserRenderer module in the ToolController script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal LaserRenderer = require(Players.LocalPlayer.PlayerScripts.LaserRenderer)\n\nlocal tool = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Prompting Bundles Based on Gameplay Events in Lua\nDESCRIPTION: Illustrates prompting bundles to players based on custom gameplay events using Bundles.promptIfValidAsync to ensure offers are appropriately considered.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPromptBundleXYZEvent(player: Player)\n    task.spawn(Bundles.promptIfValidAsync, player, <Some_Bundle_Id>)\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Garbage Sorting Function with Arguments in Luau\nDESCRIPTION: A complete implementation of the sortGarbage function that takes workspace objects as arguments. It demonstrates getting objects from the workspace, defining a function with multiple parameters, and passing arguments to the function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Objects to use as arguments\nlocal cementBlock = Workspace.CementBlock\nlocal glassBottle = Workspace.GlassBottle\n\n--Destroys trash and cleans up recyclables\nlocal function sortGarbage(trash,recyclable)\n    local sparkle = Instance.new(\"ParticleEmitter\")\n\n    trash:Destroy()\n    sparkle.Parent = recyclable\nend\n\n-- Pass in the arguments\nsortGarbage(cementBlock, glassBottle)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HumanoidDescription Instance in Lua\nDESCRIPTION: Creates a new empty HumanoidDescription instance that can be used to customize character appearance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Tweening Module in Lua for Roblox\nDESCRIPTION: This ModuleScript defines various tweening functions for UI elements in Roblox, including fading, moving, sizing, rotating, and blurring. It uses TweenService to create smooth animations for different properties of UI objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/user-interface.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal UITween = {}\n\n-- for fading images\nfunction UITween.fadePart(object, amount, time, delay)\n\n\tlocal tweenAlpha = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quad, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay --Delay time\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenAlpha, {Transparency = amount})\n\ttween:Play()\nend\n\nfunction UITween.fade(object, amount, time, delay)\n\n\tlocal tweenAlpha = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quad, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay --Delay time\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenAlpha, {ImageTransparency = amount})\n\ttween:Play()\nend\n\n-- for fading images\nfunction UITween.fadeBackground(object, amount, time, delay)\n\n\tlocal tweenAlpha = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quad, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay --Delay time\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenAlpha, {BackgroundTransparency = amount})\n\ttween:Play()\nend\n\n-- for fading text\nfunction UITween.fadeText(object, amount, time, delay)\n\n\tlocal tweenAlpha = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quad, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay --Delay time\n\t)\n\n\tlocal tween1 = TweenService:Create(object, tweenAlpha, {TextTransparency = amount})\n\ttween1:Play()\nend\n\n-- for moving text and images\nfunction UITween.move(object, position, time, delay)\n\n\ttask.wait(delay)\n\tobject:TweenPosition(position, Enum.EasingDirection.Out, Enum.EasingStyle.Quint, time)\nend\n\n-- for changing size\nfunction UITween.size(object, size, time, delay, override, callback)\n\n\tlocal tweenSize = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quint, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay, --Delay time\n\t\toverride,\n\t\tcallback\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenSize, {Size = size})\n\ttween:Play()\nend\n\nfunction UITween.rotate(object, rotation, time, delay, override, callback)\n\n\tlocal tweenSize = TweenInfo.new(\n\t\ttime, --Time\n\t\tEnum.EasingStyle.Quint, --EasingStyle\n\t\tEnum.EasingDirection.Out, --EasingDirection\n\t\t0, --Repeat count\n\t\tfalse, --Reverses if true\n\t\tdelay, --Delay time\n\t\toverride,\n\t\tcallback\n\t)\n\n\tlocal tween = TweenService:Create(object, tweenSize, {Rotation = rotation})\n\ttween:Play()\nend\n\n-- for blurring the game camera\nfunction UITween.blur(object, amount, time)\n\n\tlocal tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0)\n\tlocal tween = TweenService:Create(object, tweenInfo, {Size = amount})\n\ttween:Play()\nend\n\n-- for blurring the game camera\nfunction UITween.turnOn(object, amount, time)\n\n\tlocal tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0)\n\tlocal tween = TweenService:Create(object, tweenInfo, {Brightness = amount})\n\ttween:Play()\nend\n\nreturn UITween\n```\n\n----------------------------------------\n\nTITLE: VFX Update Module for Animated Models\nDESCRIPTION: Module script that handles attaching VFX parts to animated character bones. Requires models to be tagged with 'AnimatedVfxModel' and parts to have 'AttachedBoneName' attributes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/custom-characters.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal VfxUpdateModule = {}\nlocal CollectionService = game:GetService(\"CollectionService\")\n\nlocal vfxModels = CollectionService:GetTagged(\"AnimatedVfxModel\")\nlocal vfxTable = {}\n\nfor _, model in vfxModels do\n vfxTable[model] = {}\n local vfxParts = model:FindFirstChild(\"VFX\"):GetChildren()\n\n for _,part in vfxParts do\n   local name = part:GetAttribute(\"AttachedBoneName\")\n   local bone = model:FindFirstChild(name, true)\n   if bone then\n     local offset = (bone.TransformedWorldCFrame:inverse() * part.CFrame)\n     vfxTable[model][part] = {bone, offset}\n   else\n     warn(\"Vfx part refers to bone that could not be found.\")\n   end\n end\nend\nprint(vfxTable)\n\nfunction VfxUpdateModule.updateVfx()\n for model, vfxParts in vfxTable do\n   for part, bone in vfxParts do\n     part.CFrame = bone[1].TransformedWorldCFrame * bone[2]\n   end\n end\nend\n\nreturn VfxUpdateModule\n```\n\n----------------------------------------\n\nTITLE: Calculating Direction Vector for Raycast in Roblox\nDESCRIPTION: Shows how to calculate a ray's direction vector when the origin and destination points are known, useful for ray casting between two dynamic points.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/raycasting.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal rayOrigin = Workspace.TestOrigin.Position\nlocal rayDestination = Workspace.TestDestination.Position\n\nlocal rayDirection = rayDestination - rayOrigin\n\nlocal raycastResult = Workspace:Raycast(rayOrigin, rayDirection)\n```\n\n----------------------------------------\n\nTITLE: Setting TeleportOptions for Server Instance ID in Lua\nDESCRIPTION: This snippet demonstrates how to create a TeleportOptions instance and set the ServerInstanceId property to teleport a user to a specific server. This allows directing users to a specific public server identified by its unique instance ID. The targetServerId variable should be replaced with the valid instance ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal teleportOptions = Instance.new(\"TeleportOptions\")\nteleportOptions.ServerInstanceId = targetServerId\n```\n\n----------------------------------------\n\nTITLE: Calculating Play History Signal Score in Lua\nDESCRIPTION: This code calculates the play history signal score, comparing the joining player's past playtime with the average playtime of other players in the server over the last 28 days.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nplayHistorySignalScore = 1 - min(4.6, playHistoryDifference / 4.6), where\nplayHistoryDifference = abs(avgServerPlayHistory - joiningPlayerPlayHistory)\n```\n\n----------------------------------------\n\nTITLE: Referencing Objects in Roblox's Workspace\nDESCRIPTION: This code shows how to reference a part named 'PracticePart' located in the Workspace. It uses the 'workspace' keyword as a shortcut to access the Workspace container.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/object-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Changes the color of a part\nworkspace.PracticePart\n```\n\n----------------------------------------\n\nTITLE: Checking for character hit in Lua\nDESCRIPTION: This code snippet checks if the raycast hit a player's character by finding the first ancestor of class Model and verifying if it contains a Humanoid. If both conditions are met, it prints \"Player hit\" to the output.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n   -- Check if any objects were hit between the start and end position\n   local hitPosition\n   if weaponRaycastResult then\n   \thitPosition = weaponRaycastResult.Position\n\n   \t-- The instance hit will be a child of a character model\n   \t-- If a humanoid is found in the model then it's likely a player's character\n   \tlocal characterModel = weaponRaycastResult.Instance:FindFirstAncestorOfClass(\"Model\")\n   \tif characterModel then\n   \t\tlocal humanoid = characterModel:FindFirstChildWhichIsA(\"Humanoid\")\n   \t\tif humanoid then\n   \t\t\tprint(\"Player hit\")\n   \t\tend\n   \tend\n   else\n   \t-- Calculate the end position based on maximum laser distance\n   \thitPosition = tool.Handle.Position + directionVector\n   end\n```\n\n----------------------------------------\n\nTITLE: For Loop incrementing Global Variable in Luau\nDESCRIPTION: In this snippet, a global variable 'x' is incremented within a for loop. The code illustrates how the variable 'x' retains its global value due to its declaration outside the loop, resulting in printed outputs during each iteration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/scope.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nx = 0  -- Global variable \"x\"\n\nfor i = 1, 4 do\n\tx += 1\n\tprint(\"Global 'x' = \" .. x)\nend\n\nprint(\"Global 'x' = \" .. x)\n\n--[[ Resulting output:\nGlobal 'x' = 1\nGlobal 'x' = 2\nGlobal 'x' = 3\nGlobal 'x' = 4\nGlobal 'x' = 4\n]]\n```\n\n----------------------------------------\n\nTITLE: Generating Blast Data with Logging in Lua\nDESCRIPTION: Example of generating blast data with added logging to help developers understand ray direction calculations\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal rayDirections = getDirectionsForBlast(currentCamera.CFrame, blasterConfig)\nfor _, direction in rayDirections do  -- new line\n    print(direction)                  -- new line\nend                                   -- new line\nlocal rayResults = castLaserRay(localPlayer, currentCamera.CFrame.Position, rayDirections)\n```\n\n----------------------------------------\n\nTITLE: Setting Mood Animation using AnimationId in Roblox Lua\nDESCRIPTION: This script sets a specific mood animation for each character when they enter the experience by editing the mood's AnimationId.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/moods.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character)\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\n\tlocal animateScript = character:WaitForChild(\"Animate\")\n\tanimateScript.mood.Animation1.AnimationId = \"rbxassetid://7715145252\" -- Mood\nend\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAppearanceLoaded:Connect(onCharacterAdded)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Setting Player Portrait in Lua\nDESCRIPTION: This script sets the player portrait in the HUD to the player's avatar headshot. It fetches the player's UserId and constructs a rbxthumb:// URL to load the avatar headshot image with specific width and height. The image is then assigned to the Image property of the playerPortrait object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal function setPlayerPortrait(gui: ScreenGui)\n\tlocal playerPortrait = gui.PlayerDisplay.PlayerPortrait\n\n\tlocal userId = localPlayer.UserId\n\tlocal thumbType = \"AvatarHeadShot\"\n\tlocal rbxthumbContentString = `rbxthumb://type={thumbType}&id={userId}&w=150&h=150`\n\tplayerPortrait.Image = rbxthumbContentString\nend\n\nreturn setPlayerPortrait\n```\n\n----------------------------------------\n\nTITLE: Setting Ambient Color in Roblox Lighting\nDESCRIPTION: Sets the Ambient property of the Lighting service to adjust the overall hue of the experience. This affects both outdoor and indoor environments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.Ambient = Color3.new(0, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Connecting Player Events in Lua\nDESCRIPTION: Connects the `onPlayerJoin` function to the PlayerAdded event, allowing the program to react dynamically when a player joins the game by setting their spawn location appropriately.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Functions\nfunction PlayerManager.sendPlayersToMatch()\n\tprint(\"Sending players to match\")\nend\n\n-- Events\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n```\n\n----------------------------------------\n\nTITLE: Detecting Scene Start on Client in Lua\nDESCRIPTION: Shows how to use the onSceneLoadedForClient event to detect when a scene starts on the client side.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Detect when scene is starting (client-side)\nEventSequencer.onSceneLoadedForClient:Connect(function()\n\twarn(\"Scene is starting!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Read Data from DataStore\nDESCRIPTION: This code reads data from a data store using GetAsync. The code uses pcall to handle potential network errors when accessing data from the data store, providing error handling to ensure stability. The player's gold is retrieved using their UserID as the key.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n\n-- Data store key and value\nlocal playerUserID = 505306092\nlocal playerGold = 250\n\n-- Set data store key\nlocal setSuccess, errorMessage = pcall(function()\n\tgoldStore:SetAsync(playerUserID, playerGold)\nend)\nif not setSuccess then\n\twarn(errorMessage)\nend\n\n-- Read data store key\nlocal getSuccess, currentGold = pcall(function()\n\treturn goldStore:GetAsync(playerUserID)\nend)\nif getSuccess then\n\tprint(currentGold)\nend\n```\n\n----------------------------------------\n\nTITLE: Invoking Bindable Function\nDESCRIPTION: Shows how to invoke a BindableFunction and handle its return value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\n-- Get reference to bindable function\nlocal bindableFunction = ServerScriptService:WaitForChild(\"TestBindableFunction\")\n\n-- Invoke callback function and output returned value\nlocal sum = bindableFunction:Invoke(2, 4)\nprint(sum)  --> 6\n```\n\n----------------------------------------\n\nTITLE: Card Layout for Environmental Art Curriculum - React (JavaScript)\nDESCRIPTION: This snippet creates a card layout for the environmental art curriculum, providing a structured approach to learning essential skills.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/curriculum-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>Environmental art</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nLearn the foundational skills you need to become an environmental artist.\n</Typography>\n<>\n<Grid\n    alignItems=\"stretch\"\n    container\n    direction=\"row\">\n<Grid item Large={6} XSmall={12} direction=\"column\">\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe src=\"https://www.youtube-nocookie.com/embed/nwShvDmFHWc?si=2gk0n6cb9uq-48Ni\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen  style={{position: \"absolute\", top: 0, left: 0, width: \"90%\", height: \"90%\"}}></iframe>\n</div>\n</Grid>\n<Grid item Large={6} XSmall={12} direction=\"column\">\n<>\n<Stepper activeStep={3} orientation=\"vertical\">\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Create a plan for your environment and necessary assets.\">\n<h5 style={{marginTop: 36}}>Plan</h5>\n</StepLabel>\n</Step>\n<Step style={{marginTop: -36}}>\n<StepLabel\n optional=\"Assemble and apply your asset library to the 3D space to bring your world to life.\">\n<h5 style={{marginTop: 36}}>Construct</h5>\n</StepLabel>\n</Step>\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Configure your assets and Studio settings to keep your frame rate and performance levels high.\" >\n<h5 style={{marginTop: 36}}>Optimize</h5>\n</StepLabel>\n</Step>\n</Stepper>\n</>\n</Grid>\n</Grid>\n</>\n<a href=\"../curriculums/environmental-art/index.md\">\n  <Button\n    variant=\"contained\"\n    size=\"large\">\n  Start creating\n  </Button>\n</a>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Using getKey Module Function in Lua\nDESCRIPTION: Shows how to call the getKey function from the TreasureManager module when a player touches a key part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function partTouched(otherPart, keyPart)\n\tlocal whichCharacter = otherPart.Parent\n\tlocal humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\ttreasureManager.getKey(keyPart, whichCharacter)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Rounding numbers in Luau\nDESCRIPTION: This code snippet demonstrates the use of `math.floor()`, `math.ceil()`, and `math.modf()` for rounding numbers in Luau. It showcases how each function rounds numbers, including negative numbers, and returns the integer and fractional parts (for `math.modf()`).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/numbers.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nprint(math.floor(3.3))  --> 3\nprint(math.floor(-3.3))  --> -4\nprint(math.ceil(3.3))  --> 4\nprint(math.ceil(-3.3))  --> -3\nprint(math.modf(3.3))  --> 3 0.2999999999999998\nprint(math.modf(-3.3))  --> -3 -0.2999999999999998\n```\n\n----------------------------------------\n\nTITLE: Connecting IntValue Changes to Update Status\nDESCRIPTION: Connects the `Changed` event of the `playersLeft` and `timeLeft` IntValue variables to the `updateRoundStatus()` function. This ensures that the status display is automatically updated whenever either the number of players left or the time left changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Functions\nfunction DisplayManager.updateStatus(newStatus)\n\tstatus.Value = newStatus\nend\n\nplayersLeft.Changed:Connect(updateRoundStatus)\ntimeLeft.Changed:Connect(updateRoundStatus)\n\nreturn DisplayManager\n```\n\n----------------------------------------\n\nTITLE: Creating HumanoidDescription from Outfit ID\nDESCRIPTION: Retrieves a HumanoidDescription from a specific outfit ID using the Players service.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal outfitId = 480059254\n\nlocal humanoidDescriptionFromOutfit = Players:GetHumanoidDescriptionFromOutfitId(outfitId)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Token Resources using POST Request - Bash\nDESCRIPTION: This code snippet demonstrates how to make a POST request to obtain the resources associated with a specific access token in Roblox. The request requires the access token, client ID, and client secret as form data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST https://apis.roblox.com/oauth/v1/token/resources' \\n--header 'Content-Type: application/x-www-form-urlencoded' \\n--data-urlencode 'token=eyjlflabtfl...4gxqYBG' \\n--data-urlencode 'client_id=840974200211308101' \\n--data-urlencode 'client_secret=RBX-CR9...St12L'\n```\n\n----------------------------------------\n\nTITLE: If statement with a false condition using greater than or equal operator\nDESCRIPTION: Demonstrates an if statement with an intentionally false mathematical condition using the greater than or equal to operator. Since 3+3 is not greater than or equal to 10, the code inside won't execute.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/intro-to-if-statements.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nif 3 + 3 >= 10 then\n\tworkspace.LieDetector.Color = Color3.fromRGB(0, 255, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Chip Component\nDESCRIPTION: This snippet renders a Chip component indicating the status of the marketplace as 'Open'. It uses predefined props for styling and status indication.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/todays-picks-marketplace.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Chip\n    color=\"success\"\n    label=\"Status: Open\"\n    size=\"medium\"\n    variant=\"filled\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Teleportation using TeleportService in Lua\nDESCRIPTION: This snippet demonstrates the basic usage of TeleportService:TeleportAsync() to teleport a player to a specific place ID.  It retrieves the TeleportService and Players service, defines the target place ID, and teleports the first player in the game to the specified place. It is crucial to replace the placeholder ID with the actual place ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/teleport.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TeleportService = game:GetService(\"TeleportService\")\n\nlocal TARGET_PLACE_ID = 1234 -- replace with your own place ID\n\nlocal playerToTeleport = Players:GetPlayers()[1] -- get the first user in the experience\n\nTeleportService:TeleportAsync(TARGET_PLACE_ID, {playerToTeleport}, teleportOptions)\n```\n\n----------------------------------------\n\nTITLE: Loading and Transitioning Scenes in Lua\nDESCRIPTION: Demonstrates how to use the EventSequencer to load scenes and handle scene transitions based on the completion of previous scenes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Figure out next scene to load when current scene finishes\nEventSequencer.onOrchestrationFinished:Connect(function(endedSceneName)\n\tif endedSceneName == \"PreShow\" then\n\t\t-- \"PreShow\" ended; load the first scene in the concert\n\t\tEventSequencer.loadScene(\"Track1\")\n\telseif endedSceneName == \"Track1\" then\n\t\t-- \"Track1\" ended; load the second scene in the concert\n\t\tEventSequencer.loadScene(\"Track2\")\n\telse\n\t\t-- Loop back to the pre-show scene\n\t\tEventSequencer.loadScene(\"PreShow\")\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing HUD GUI Setup in Roblox Lua\nDESCRIPTION: Main script that coordinates the setup of various HUD elements including the touch blast button. It imports and executes multiple module scripts to configure player portraits, names, team colors, objectives, and touch controls.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal setPlayerPortrait = require(script.setPlayerPortrait)\nlocal setPlayerName = require(script.setPlayerName)\nlocal startSyncingTeamColor = require(script.startSyncingTeamColor)\nlocal setObjective = require(script.setObjective)\nlocal setupTouchButtonAsync = require(script.setupTouchButtonAsync)\nlocal startSyncingTeamPoints = require(script.startSyncingTeamPoints)\nlocal disableMouseWhileGuiEnabled = require(script.disableMouseWhileGuiEnabled)\nlocal setupHitmarker = require(script.setupHitmarker)\n\nlocal localPlayer = Players.LocalPlayer\nlocal gui = localPlayer.PlayerGui:WaitForChild(\"HUDGui\")\n\nsetPlayerPortrait(gui)\nsetPlayerName(gui)\nstartSyncingTeamColor(gui)\nsetObjective(gui)\nstartSyncingTeamPoints(gui)\ndisableMouseWhileGuiEnabled(gui)\nsetupHitmarker(gui)\nsetupTouchButtonAsync(gui)\n```\n\n----------------------------------------\n\nTITLE: Call Cleanup Function in GameManager (Lua)\nDESCRIPTION: This snippet demonstrates how to integrate the `cleanupMatch` function, previously defined in the `MatchManager` module, into the main game loop within the `GameManager` module. The call to `matchManager.cleanupMatch()` is placed before the `task.wait()` function, ensuring that player weapons are removed during the ending intermission phase of each match. This snippet depends on the MatchManager and gameSettings modules.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  displayManager.updateStatus(\"Waiting for Players\")\n\n  repeat\n    task.wait(gameSettings.intermissionDuration)\n  until #Players:GetPlayers() >= gameSettings.minimumPlayers\n     \n  displayManager.updateStatus(\"Get ready!\")\n  task.wait(gameSettings.transitionTime)\n\n  matchManager.prepareGame()\n  local endState = matchEnd.Event:Wait()\n\n  local endStatus = matchManager.getEndStatus(endState)\n  displayManager.updateStatus(endStatus)\n\n  matchManager.cleanupMatch()\n  task.wait(gameSettings.transitionTime)\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Player Alive Status on Respawn in Roblox Lua\nDESCRIPTION: Modifies the onCharacterAdded function to set the IsAlive attribute when a character is added and reset it when the character dies.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n  player:SetAttribute(\"IsAlive\", true)\n\n  local humanoid = character:WaitForChild(\"Humanoid\")\n\n  humanoid.Died:Connect(function()\n    local points = player.leaderstats.Points\n    points.Value = 0\n    player:SetAttribute(\"IsAlive\", false)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Item View Open Event in Lua\nDESCRIPTION: Connects to the itemViewOpened event to detect when the item detail view is opened. Uses ReplicatedStorage to access the MerchBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.itemViewOpened:Connect(function()\n\tprint(\"Item view opened\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Place IDs in Lua for Battle Royale Game\nDESCRIPTION: This Lua snippet defines a table of place IDs for different components of a Battle Royale game, including the lobby, gameplay, and various queue types. It's part of the MainConfiguration script and is crucial for enabling player teleportation between different game areas.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/installation-and-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal _places = {\n lobby = 0123456789,\n gameplay_development = 0,\n queue_default = 0,\n queue_deathmatch = 0,\n queue_teamDeathmatch = 0,\n queue_freePlay = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing End State from MatchEnd Event (Roblox Lua)\nDESCRIPTION: This snippet captures the end state from the `matchEnd` event in the `GameManager` script. It assigns the received data (endState) to a local variable and then prints it to the console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tlocal endState = matchEnd.Event:Wait()\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n\tdisplayManager.updateStatus(\"Waiting for Players\")\n\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tdisplayManager.updateStatus(\"Get ready!\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\n\tlocal endState = matchEnd.Event:Wait()\n\tprint(\"Game ended with: \" .. endState)\nend\n```\n\n----------------------------------------\n\nTITLE: Iterating Player Array to Assign Spawn in Lua\nDESCRIPTION: Uses a for loop in `sendPlayersToMatch` to iterate through players, assigning and removing arena spawn points for each participant. This ensures unique spawn locations for players entering the arena.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal arenaSpawns = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers, whichPlayer)\n\t\tlocal spawnLocation = table.remove(arenaSpawns, 1)\n\t\tpreparePlayer(whichPlayer, spawnLocation)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Numbers in Lua\nDESCRIPTION: This code demonstrates converting strings to numbers using tonumber() and highlights that strings without numeric representation will return nil. Key parameter is the string to convert.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal numericString = \"123\"\nprint(tonumber(numericString))  --> 123\n\nlocal alphanumericString = \"Hello123\"\nprint(tonumber(alphanumericString))  --> nil\n```\n\n----------------------------------------\n\nTITLE: Installing Rojo Plugin for Roblox Studio\nDESCRIPTION: This command installs the Rojo plugin in Roblox Studio, which connects with the Rojo server for file synchronization.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/external-tools.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"\nrojo plugin install\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Display Status Chip using React\nDESCRIPTION: This React code snippet renders a Chip component to display the status of the Creator Affiliate Pilot Program. The Chip displays 'Status: Open' with a green color, indicating that the program is currently open for applications. It requires importing the Chip component from your UI library.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/creator-affiliate.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Chip\n    color=\"success\"\n    label=\"Status: Open\"\n    size=\"medium\"\n    variant=\"filled\" />\n```\n\n----------------------------------------\n\nTITLE: Starting the Rojo Server\nDESCRIPTION: This command starts the Rojo server, allowing for live synchronization of files between your text editor and Roblox Studio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/external-tools.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"\nrojo serve\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to actionActivated Event in Lua\nDESCRIPTION: Demonstrates how to connect to the actionActivated event which fires when a primary action or sub-action is activated. The callback receives the activated action object as a parameter. This can only be used in a LocalScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.actionActivated:Connect(function(action)\n\tprint(action.name, \"activated\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Granting Referral Rewards in Roblox\nDESCRIPTION: This snippet provides functionality for rewarding both the referrer and the invitee when a successful referral has occurred. It operates server-side in Roblox and uses Lua to define reward functions. Dependencies include the Roblox services for handling players and existing RemoteEvent setup for communication.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/referral-system.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Create or get the RemoteEvent for handling referrals\nlocal referrerEvent: RemoteEvent = ReplicatedStorage:FindFirstChild(\"ReferralReceivedEvent\")\n\n-- Function that triggers when a player joins\nfunction onPlayerAdded(player)\n    local joinData = player:GetJoinData()\n    local referredByPlayerId = joinData.ReferredByPlayerId\n\n    -- Check if the player was invited through a referral\n    if referredByPlayerId and referredByPlayerId ~= 0 then\n        -- Fire the referral event to the client, passing the inviter's ID\n        referrerEvent:FireClient(player, referredByPlayerId)\n\n        -- Reward the inviter\n        function rewardReferrer(referrerId)\n          local referrerPlayer = Players:GetPlayerByUserId(referrerId)\n          if referrerPlayer then\n              -- Grant the inviter their reward\n              -- Example: referrerPlayer.leaderstats.Coins.Value += 100\n          end\n        end\n\n        -- Reward the invitee\n        function rewardInvitee(player)\n            -- Grant the invitee their reward\n            -- Example: player.leaderstats.WelcomeBonus.Value += 50\n        end\n    end\nend\n\n-- Connect the function to the PlayerAdded event\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Printing Current Screen Orientation in Roblox\nDESCRIPTION: This Lua code snippet retrieves the current screen orientation of the user's device and prints it to the output. It accesses the PlayerGui service to read the CurrentScreenOrientation property, providing a way to determine the device's current orientation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mobile.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal playerGUI = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\nprint(playerGUI.CurrentScreenOrientation)\n```\n\n----------------------------------------\n\nTITLE: Event Tracking Analytics Workflow\nDESCRIPTION: Demonstrates how to validate event tracking using the View Events tool in the Roblox Creator Dashboard, with steps to confirm proper event configuration\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/event-types.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Validate your event tracking\n\n1. Navigate to the **Economy**, **Funnel**, or **Custom** pages\n2. Click the **View Events** button\n3. Refresh the page to update the list\n```\n\n----------------------------------------\n\nTITLE: Game Manager Script in Lua\nDESCRIPTION: Main game loop that manages intermission and game preparation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal matchManager = require(moduleScripts:WaitForChild(\"MatchManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n\nwhile true do\n\trepeat\n\t\ttask.wait(gameSettings.intermissionDuration)\n\t\tprint(\"Restarting intermission\")\n\tuntil #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n\tprint(\"Intermission over\")\n\ttask.wait(gameSettings.transitionTime)\n\n\tmatchManager.prepareGame()\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing VFX Update Connection in Roblox\nDESCRIPTION: Local script that connects the VFX update function to RunService's PreSimulation event. Must be placed in StarterPlayer/StarterPlayerScripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/custom-characters.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\nlocal vfx = require(workspace.VfxUpdateModule)\n\nRunService.PreSimulation:Connect(vfx.updateVfx)\n```\n\n----------------------------------------\n\nTITLE: Animation Playback Script in Roblox\nDESCRIPTION: Script for playing animations on a character model. Handles both Humanoid and AnimationController objects and supports animation ID loading.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/custom-characters.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal animationId = \"YOUR_ANIMATION_ID\"\nlocal char = script.Parent\nlocal animController = char:FindFirstChildWhichIsA(\"Humanoid\") or char:FindFirstChildOfClass(\"AnimationController\")\n\nlocal animation = Instance.new(\"Animation\")\nanimation.AnimationId = \"rbxassetid://\" .. tostring(animationId)\n\nlocal animTrack = animController:LoadAnimation(animation)\nanimTrack:Play(0, 1, 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Orientation to Portrait in Roblox\nDESCRIPTION: This Lua code snippet demonstrates how to explicitly set the screen orientation to portrait mode for a user's experience within a Roblox game. It accesses the PlayerGui service and sets the ScreenOrientation property to Enum.ScreenOrientation.Portrait, immediately changing the orientation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mobile.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal playerGUI = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\ntask.wait(2)\n\nplayerGUI.ScreenOrientation = Enum.ScreenOrientation.Portrait\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from MemoryStore Sorted Map in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to remove a specific key from a sorted map using MemoryStore in Roblox. Dependencies include the MemoryStoreService available in Roblox. The snippet sets an item to the map using `SetAsync` and then removes it with `RemoveAsync`, handling potential errors with `pcall`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/sorted-map.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"SortedMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn sortedMap:SetAsync(\"User_1234\", 1000, 30, \"someStringSortKey\")\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n\nlocal removeSuccess, removeError = pcall(function()\n\tsortedMap:RemoveAsync(\"User_1234\")\nend)\nif not removeSuccess then\n\twarn(removeError)\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Group Memberships Example\nDESCRIPTION: Describes how to construct a filter for listing group memberships using Common Expression Language (CEL) with support for querying by user or role.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nfilter=\"user == 'users/9876543210'\"\n```\n\nLANGUAGE: json\nCODE:\n```\nfilter=\"role == 'groups/123/roles/7920705'\"\n```\n\nLANGUAGE: json\nCODE:\n```\nfilter=\"user in ['users/1', 'users/156', 'users/9876543210', ...]\"\n```\n\n----------------------------------------\n\nTITLE: Handling Countdown Started Event - Lua\nDESCRIPTION: This snippet connects a callback function to the countdownStarted event, allowing for custom actions when the countdown begins. This is particularly useful for providing user feedback. Can only be used within a Class.LocalScript. Requires the ReplicatedStorage service and the PhotoBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/photo-booth.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.countdownStarted:Connect(function()\n\tprint(\"The countdown has started\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Receiving Data with Lost Metatable Information in Roblox Events (Lua)\nDESCRIPTION: This code snippet shows the receiver side of a BindableEvent. It demonstrates how metatable properties are lost when receiving a table through an event, with only direct table properties being preserved.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/bindable.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal bindableEvent = ServerScriptService:WaitForChild(\"TestBindableEvent\")\n\nlocal function onEvent(param)\n\tprint(param)  --> {[\"Name\"] = \"MyTruck\"}\nend\n\n-- Connect function to event\nbindableEvent.Event:Connect(onEvent)\n```\n\n----------------------------------------\n\nTITLE: Setting Name and Initial Value for Gold Stat\nDESCRIPTION: The snippet sets a name 'Gold' and initializes its value to zero, which is crucial for tracking and displaying player gold in other scripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerJoin(player)\n      local gold = Instance.new(\"IntValue\")\n      gold.Name = \"Gold\"\n   end\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Badge Description - REST API\nDESCRIPTION: This API call updates the description of a localized badge identified by badgeId and languageCode. The new description must be provided in the request.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH v1/badges/{badgeId}/description/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Data in Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to use the `DataStores` class to list a subset of user inventories, read the inventory for each user, and update their virtual currency.  It imports the `DataStores` class, initializes an instance, and then calls the `listEntries`, `getEntry`, and `incrementEntry` methods to interact with the Data Stores API.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DataStores = require('./dataStoresMethods');\nconst dataStoresApi = new DataStores();\n\n// Set up\nconst datastoreName = 'Inventory';\n\n// List keys for a subset of users\ndataStoresApi.listEntries(datastoreName).then((keys) => {\n  console.log(keys);\n});\n\n// Read inventory for each user\nfor (let x = 0; x < 5; x++) {\n  const updatedObjectKey = `User_${x + 1}`;\n  dataStoresApi.getEntry(datastoreName, updatedObjectKey).then((value) => {\n    console.log(\n      `${updatedObjectKey} has ${value.gems} gems in their inventory`\n    );\n  });\n}\n\n// Update the currency of each user by 10\nfor (let x = 0; x < 5; x++) {\n  const updatedObjectKey = `User_${x + 1}`;\n  dataStoresApi\n    .incrementEntry(datastoreName, updatedObjectKey, 10)\n    .then((value) => {\n      console.log(\n        `${updatedObjectKey} now has ${value.robux} robux in their inventory`\n      );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Search Function Structure in Luau\nDESCRIPTION: This snippet outlines the basic structure of a function using pairs() to iterate through a dictionary. It serves as a template for the complete search function implementation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/return-values-from-tables.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function findPet(whereToSearch, searchFor)\n\tfor place, value in pairs(whereToSearch) do\n\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Waiting Between Instructions in a Lua While Loop\nDESCRIPTION: The snippet adds a wait time between color-changing instructions within an infinite while loop in Lua. The 'task.wait(3)' function pauses the loop for three seconds between color changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal loopingPart = workspace.LoopingPart\n\nwhile true do\n\tloopingPart.Color = Color3.fromRGB(82, 227, 255)\n\ttask.wait(3)\nend\n```\n\n----------------------------------------\n\nTITLE: Waiting for Touched Event - Roblox Lua\nDESCRIPTION: Illustrates how to use the 'Wait()' method on the 'Touched' event, allowing a script to yield until the part is touched. It captures the event's arguments for later use.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/index.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\nlocal touchedPart = part.Touched:Wait()\nprint(\"The part was touched by\", touchedPart:GetFullName())\n```\n\n----------------------------------------\n\nTITLE: Chest Interaction Script\nDESCRIPTION: Script that handles player interactions with chest objects, using the TreasureManager module to validate and process chest opening attempts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal treasureManager = require(ServerStorage:WaitForChild(\"TreasureManager\"))\n\nlocal chests = script.Parent\nlocal chestsFolder = chests.Parts\nlocal chestsArray = chestsFolder:GetChildren()\n\nlocal function partTouched(otherPart, chestPart)\n   local whichCharacter = otherPart.Parent\n   local humanoid = whichCharacter:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid then\n      local canOpen = treasureManager.canOpenChest(whichCharacter)\n      if canOpen == true then\n         treasureManager.openChest(chestPart, whichCharacter)\n      end\n   end\nend\n\nfor chestIndex = 1, #chestsArray do\n   local chestPart = chestsArray[chestIndex]\n   chestPart.Touched:Connect(function(otherPart)\n   partTouched(otherPart, chestPart)\n   end)\nend\n```\n\n----------------------------------------\n\nTITLE: Profiling a Function Connected to RunService.PreSimulation in Lua\nDESCRIPTION: This snippet illustrates how to profile a function connected to the `RunService.PreSimulation` event, which runs every frame.  It includes an example of computationally intensive code (swapping variables) within the profiled section to demonstrate how the MicroProfiler can highlight performance issues.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/microprofiler/index.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua\nlocal RunService = game:GetService(\"RunService\")\n\nlocal function onPreSimulation()\n\tdebug.profilebegin(\"Hard Work\")\n\t-- Example hard work: swap two variables 200,000 times\n\tlocal a, b = 0, 1\n\tfor _ = 1, 200000 do\n\t\ta, b = b, a\n\tend\n\tdebug.profileend()\nend\nRunService.PreSimulation:Connect(onPreSimulation)\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Player's Gold and Spaces for Upgrade in Roblox Lua\nDESCRIPTION: This snippet retrieves the player's leaderstats to access their gold and space values, checking if they have enough gold for the upgrade.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/buying-upgrades.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function giveUpgrade(player)\n    local playerStats = player:FindFirstChild(\"leaderstats\")\n\n    if playerStats then\n        local playerGold = playerStats:FindFirstChild(\"Gold\")\n        local playerSpaces = playerStats:FindFirstChild(\"Spaces\")\n\n        -- Checks if player has enough money to afford the upgrade\n        if playerGold and playerSpaces and playerGold.Value >= upgradeCost then\n\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Modified Blaster Check Function for Testing in Roblox\nDESCRIPTION: A modified version of the canLocalPlayerBlast function that always returns true, allowing for unlimited rapid firing. This demonstrates how the state system creates balanced gameplay by limiting fire rate.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function canLocalPlayerBlast(): boolean\n    return true -- updated line, be sure to change back\nend\n```\n\n----------------------------------------\n\nTITLE: Python Leaderboard Implementation\nDESCRIPTION: Demonstrates creating, listing, and updating leaderboard entries using the Ordered Data Stores API client in a Python application\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport leaderboardEndpoints\n\n# input config file here\ndatastores = leaderboardEndpoints.DataStores(\"config.json\")\n\n# Variables\norderedDataStore = \"PlayerScores\"\nscope = \"global\"\nentryNames = [\"Ragdoll\", \"Balinese\", \"Tabby\", \"Siamese\"]\n\n# Create an entry and give each new player 50 points for joining the game\nfor x in range(len(entryNames)):\n    r = datastores.create(orderedDataStore, scope, entryNames[x], 50)\n\n# Display the players scores\nplayerScores = datastores.list(orderedDataStore, scope)\nprint(playerScores.content)\n\n# Increment the first players score for winning the game\ndatastores.increment(orderedDataStore, scope, entryNames[0], 100)\n# Increment all the players scores for participating in the game\nfor x in range(len(entryNames)):\n    datastores.increment(orderedDataStore, scope, entryNames[x], 10)\n\n# Display the leaderboard with the updated scores\nplayerScores = datastores.list(orderedDataStore, scope)\nprint(playerScores.content)\n```\n\n----------------------------------------\n\nTITLE: Configuring PathfindingService with Custom Costs in Lua\nDESCRIPTION: This snippet demonstrates how to create a path using PathfindingService with custom costs for water and boat usage. It sets up the pathfinding configuration with lower cost for boat usage compared to water traversal.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/pathfinding.md#2025-04-21_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal PathfindingService = game:GetService(\"PathfindingService\")\nlocal Players = game:GetService(\"Players\")\nlocal RunService = game:GetService(\"RunService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal path = PathfindingService:CreatePath({\n\tCosts = {\n\t\tWater = 20,\n\t\tUseBoat = 1\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Deadly Lava Implementation - Roblox Lua\nDESCRIPTION: The final implementation that detects when a player touches the lava and sets their health to 0, causing death. Includes humanoid validation and health modification.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n\nlocal function kill(otherPart)\n    local partParent = otherPart.Parent\n    local humanoid = partParent:FindFirstChild(\"Humanoid\")\n    if humanoid then\n        humanoid.Health = 0\n    end\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Item Reset Interval in Lua\nDESCRIPTION: This snippet demonstrates the use of `task.wait(5)` to introduce a time delay before resetting the item's harvest state. The delay allows for item regeneration downtime and can be adjusted according to game requirements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nif canHarvest.Value == true and playerItems.Value < playerSpaces.Value then\n  playerItems.Value += 1\n  canHarvest.Value = false\n  partTouched.Transparency = 1\n  partTouched.CanCollide = false\n  task.wait(5)\nend\n```\n\n----------------------------------------\n\nTITLE: Using String Captures in Pattern Matching - Luau\nDESCRIPTION: Demonstrates the use of string captures to extract sub-patterns in a string, specifically using parentheses for captures and nested captures, and showcases how captures result in substrings or numeric positions when empty.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal pattern = \"(%a+)%s?=%s?(%d+)\"\n\nlocal key1, val1 = string.match(\"TwentyOne = 21\", pattern)\nprint(key1, val1)  --> TwentyOne 21\n\nlocal key2, val2 = string.match(\"TwoThousand= 2000\", pattern)\nprint(key2, val2)  --> TwoThousand 2000\n\nlocal key3, val3 = string.match(\"OneMillion=1000000\", pattern)\nprint(key3, val3)  --> OneMillion 1000000\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal places = \"The Cloud Kingdom is heavenly, The Forest Kingdom is peaceful\"\nlocal pattern = \"(The%s(%a+%sKingdom)[%w%s]+)\"\n\nfor description, kingdom in string.gmatch(places, pattern) do\n\tprint(description)\n\tprint(kingdom)\nend\n--> The Cloud Kingdom is heavenly\n--> Cloud Kingdom\n--> The Forest Kingdom is peaceful\n--> Forest Kingdom\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match1 = \"Where does the capture happen? Who knows!\"\nlocal match2 = \"This string is longer than the first one. Where does the capture happen? Who knows?!\"\n\nlocal pattern = \"()Where does the capture happen%? Who knows!()\"\n\nlocal start1, finish1 = string.match(match1, pattern)\nprint(start1, finish1)  --> 1 42\n\nlocal start2, finish2 = string.match(match2, pattern)\nprint(start2, finish2)  --> 43 84\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal places = \"The Cloud Kingdom is heavenly, The Forest Kingdom is peaceful.\"\nlocal pattern = \"The (%a+()) Kingdom is %a+\"\n\nfor kingdom, position in string.gmatch(places, pattern) do\n\tprint(kingdom, position)\nend\n--> Cloud 10\n--> Forest 42\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match = \"This is an example\"\nlocal pattern = \"This is an ()example\"\n\nlocal position = string.match(match, pattern)\nprint(typeof(position))  --> number\n```\n\n----------------------------------------\n\nTITLE: Mathematical Operations on Strings in Luau\nDESCRIPTION: This snippet explains automatic string-to-number conversion when performing arithmetic operations in Luau, emphasizing errors when strings lack a numeric representation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nprint(\"55\" + 10)  --> 65\nprint(\"55\" - 10)  --> 45\nprint(\"55\" * 10)  --> 550\nprint(\"55\" / 10)  --> 5.5\nprint(\"55\" % 10)  --> 5\nprint(\"Hello\" + 10) --> print(\"Hello\" + 10):1: attempt to perform arithmetic (add) on string and number\n```\n\n----------------------------------------\n\nTITLE: Checking Player Blaster State in Roblox\nDESCRIPTION: Function to verify if the local player can use their blaster based on its current state. It checks if the blaster's state attribute is set to 'Ready', which prevents rapid firing and creates balanced gameplay.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function canLocalPlayerBlast(): boolean\n    return localPlayer:GetAttribute(PlayerAttribute.blasterStateClient) == BlasterState.Ready\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Animation from Animations Module\nDESCRIPTION: This Lua script demonstrates how to retrieve an animation asset stored within a designated Animations module in Roblox using the provided animation name, ensuring proper sourcing of animations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/transfer-animations.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Animations = require(PATH.TO.ANIMATIONS)\nlocal warriorWalk = Instance.new(\"Animation\")\nwarriorWalk.AnimationId = Animations.getAnimation(\"Warrior_Walk\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Controls in Client Script - Lua\nDESCRIPTION: This snippet sets `TouchControlsEnabled` to false in `GuiService` to disable virtual thumbstick and jump button on touch-enabled devices in Roblox. This allows developers to customize the UI experience for touch users.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/ui/default-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nGuiService.TouchControlsEnabled = false\n```\n\n----------------------------------------\n\nTITLE: Rendering a Status Chip Component in React\nDESCRIPTION: This snippet creates a chip component that indicates the status of an experience as 'Open' using React. It utilizes props for the chip's color, label, size, and variant. The component visually represents the status to users.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/todays-picks-home.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Chip\n    color=\"success\"\n    label=\"Status: Open\"\n    size=\"medium\"\n    variant=\"filled\" />\n```\n\n----------------------------------------\n\nTITLE: Try/Catch Structures in C#\nDESCRIPTION: Demonstrates how to handle exceptions in C# using `try-catch` blocks. It attempts to execute a function that might throw an exception and catches a specific exception type (`InvalidWeaponException`) if it occurs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvoid fireWeapon() {\n\tif (!weaponEquipped) {\n\t\t// Use a user-defined exception\n\t\tthrow new InvalidWeaponException(\"No weapon equipped!\");\n\t}\n\t// Proceed...\n}\n\ntry {\n\tfireWeapon();\n} catch (InvalidWeaponException ex) {\n\t// An error was raised\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Content Name and Description History - REST API\nDESCRIPTION: Retrieves the translation history for a game's localized name and description. Requires access tokens for authentication.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST /v1/name-description/games/translation-history\n```\n\n----------------------------------------\n\nTITLE: Closing SelfieMode Programmatically\nDESCRIPTION: Demonstrates how to close selfie mode through code rather than using the UI button.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.closeSelfieMode()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Invite Options for Multiple Friends - Lua\nDESCRIPTION: This code snippet demonstrates how to create an invite options object for inviting multiple friends in Roblox. The Customize prompt message encourages users to invite friends to join their adventure.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/invite-prompts.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\n-- Construct invite options with a custom prompt message\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.PromptMessage = \"Ask your friends to join the adventure!\"\n\n```\n\n----------------------------------------\n\nTITLE: Destroying Custom Class in Lua\nDESCRIPTION: Shows the convention for destroying custom class instances in the project. The destroy() method is used to clean up resources and disconnect any active connections.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/plant-reference-project.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Example of a destroy() method in a custom class\nfunction MyClass:destroy()\n    -- Cleanup code here\nend\n```\n\n----------------------------------------\n\nTITLE: React JSX Card Component for Rigid Accessories Tutorial\nDESCRIPTION: JSX component that displays the rigid accessories tutorial section with an image and vertically oriented stepper showing the workflow steps from modeling to publishing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/tutorials.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>Rigid accessories</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nThis tutorial covers the basic steps to successfully create and sell an accessory. Model and texture an object in Blender, upload the publishable accessory item to Studio, and sell the item on the Marketplace.\n</Typography>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Configuring AudioPlayer in Roblox\nDESCRIPTION: This Lua snippet demonstrates how to configure an AudioPlayer instance in Roblox by setting its Asset property to a private audio asset ID. It requires 'SoundService' to be accessed via 'game:GetService'. The key parameter 'audioPlayer.Asset' needs to be set with a valid 'rbxassetid'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/assets/privacy.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal SoundService = game:GetService(\"SoundService\")\n\nlocal audioPlayer = Instance.new(\"AudioPlayer\")\naudioPlayer.Parent = SoundService\n\n-- Replace with the private audio asset ID\naudioPlayer.Asset = \"rbxassetid://1111111111\"\n```\n\n----------------------------------------\n\nTITLE: Filtering by Specific Asset IDs\nDESCRIPTION: Query to retrieve inventory items matching exact asset ID specifications.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_9\n\nLANGUAGE: query_filter\nCODE:\n```\nfilter=assetIds=1,2,3,4\n```\n\n----------------------------------------\n\nTITLE: Hiding Portal Ads Based on User Eligibility in Roblox\nDESCRIPTION: This Lua code snippet demonstrates how to use `PolicyService:GetPolicyInfoForPlayerAsync()` to determine if a user is eligible to see ads. If a user is ineligible, the script destroys a \"Main Portal Template\" model, effectively hiding the portal ad from the user's view. This helps comply with Roblox's advertising standards by preventing ads from being shown to ineligible users.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/immersive-ads.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal PolicyService = game:GetService(\"PolicyService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal player = Players.LocalPlayer\n-- Sample assumes a \"Main Portal Template\" model exists under Workspace\nlocal mainPortal = Workspace:WaitForChild(\"Main Portal Template\")\n\n-- Get the policy info for the user\n\tlocal success, result = pcall(PolicyService.GetPolicyInfoForPlayerAsync, PolicyService, player)\n\tif success and result then\n\t\tif not result.AreAdsAllowed then\n\t\t\t-- Destroy the \"Main Portal Template\" instance on the user's client if ads are not allowed\n\t\t\tmainPortal:Destroy()\n\t\tend\n\telse\n\t\tprint(\"Failed to get policy for player\", player.Name, \"| Exception:\", result)\n\tend\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Detection for Triggered Dialogue in Roblox with Lua\nDESCRIPTION: This script creates a volume-based audio trigger that plays character dialogue when a player enters a specific area. It uses a debounce pattern to prevent the audio from repeatedly triggering as players continuously collide with the volume, and ensures only the local player triggers the audio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-3D-audio.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\n\nlocal humanoid = script.Parent:WaitForChild(\"Humanoid\")\nlocal volumeDetector = Workspace.DialogueVolume\nlocal trigger = humanoid:WaitForChild(\"Animator\")\nlocal debounce = false\nlocal localPlayer = Players.LocalPlayer\n\nvolumeDetector.Touched:Connect(function(hit)\n\tif debounce then \n\t\treturn\n\tend\n\n\tlocal hitCharacter = hit:FindFirstAncestorWhichIsA(\"Model\")\n\tlocal hitPlayer = Players:GetPlayerFromCharacter(hitCharacter)\n\n\tif hitPlayer ~= localPlayer then\n\t\treturn\n\tend\n\n\tdebounce = true\n\n\tlocal audioPlayer = Workspace.DialogueVolume.AudioPlayer\n\taudioPlayer:Play()\n\taudioPlayer.Ended:Wait()\n\n\tdebounce = false\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating Attachments for Ferris Wheel Axle\nDESCRIPTION: Programmatically create and position attachments on support and wheel axles to enable rotational constraint\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/build-a-ferris-wheel.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Add attachments to axles\nlocal supportAttachment = Instance.new(\"Attachment\")\nsupportAttachment.Name = \"SupportAttachment\"\n\nlocal wheelAttachment = Instance.new(\"Attachment\")\nwheelAttachment.Name = \"WheelAttachment\"\n```\n\n----------------------------------------\n\nTITLE: Applying HumanoidDescription to All Players in Lua\nDESCRIPTION: This snippet demonstrates using Lua to apply a HumanoidDescription to all existing players in the game. It requires the Players service from Roblox and modifies properties like HatAccessory and BodyTypeScale. Input values should be valid Roblox asset IDs. The function iterates over each player, applying the customized description.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nfor _, player in Players:GetPlayers() do\n\tlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\t-- Create a HumanoidDescription\n\t\tlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\n\t\thumanoidDescription.HatAccessory = \"2551510151,2535600138\"\n\t\thumanoidDescription.BodyTypeScale = 0.1\n\t\thumanoidDescription.ClimbAnimation = 619521311\n\t\thumanoidDescription.Face = 86487700\n\t\thumanoidDescription.GraphicTShirt = 1711661\n\t\thumanoidDescription.HeadColor = Color3.new(0, 1, 0)\n\t\thumanoid:ApplyDescription(humanoidDescription)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Cyclical Wind Gusts in Lua for Roblox\nDESCRIPTION: This Lua script creates cyclical gusts of wind by manipulating the GlobalWind property of the Workspace. It uses sine function to ease the wind in and out, creating a natural gust effect. The script allows for customization of gust cycle delay, duration, base wind, and gust intensity.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/global-wind.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal gustCycleDelay = 5  -- Max duration between gust cycles in seconds\nlocal gustCycleDuration = 3.5  -- Duration of each gust cycle in seconds\n\n-- During each gust cycle, a portion of \"gust\" will be added to \"baseWind\" in a ramped fashion\nlocal baseWind = Vector3.new(5, 0, 2)  -- Base wind speed and direction\nlocal gust = Vector3.new(25, 0, 10)  -- Gust speed and direction\nlocal gustIntervals = 100  -- Number of iterations used to calculate each gust interval\nlocal dg = gustCycleDuration / gustIntervals\nlocal dgf = dg / gustCycleDuration\n\n-- Set global wind to base wind initially\nworkspace.GlobalWind = baseWind\n\n-- Wait delay amount before starting gusts\ntask.wait(gustCycleDelay)\n\nwhile true do\n\tfor i = 1, gustIntervals do\n\t\tlocal f = math.sin(math.pi * dgf * i)  -- Use sin() function to ramp gust\n\t\tworkspace.GlobalWind = baseWind + f * gust  -- Set global wind to base wind + gust\n\t\ttask.wait(dg)\n\tend\n\tworkspace.GlobalWind = baseWind  -- Reset global wind to base wind at end of gust cycle\n\ttask.wait(math.random() * gustCycleDelay)  -- Wait a random fraction of delay before next gust cycle\nend\n```\n\n----------------------------------------\n\nTITLE: Showing Custom Complete Modal in LocalScript\nDESCRIPTION: Handle the showCompleteModal event when custom modals are enabled, displaying a completion UI when all tokens are collected\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.showCompleteModal:Connect(function()\n\tlocal completeModal = Players.LocalPlayer.PlayerGui.CompleteModal\n\tcompleteModal.Enabled = true\nend)\n```\n\n----------------------------------------\n\nTITLE: Example PKCE Authorization URL Construction\nDESCRIPTION: Bash example demonstrating the construction of an OAuth 2.0 authorization URL with PKCE parameters for Roblox Open Cloud authentication\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-develop.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://apis.roblox.com/oauth/v1/authorize?client_id=7290610391231237934964\n    &code_challenge=PLEKKVCjdD1V_07wOKlAm7P02NC-LZ_1hQfdu5XSXEI\n    &code_challenge_method=S256\n    &redirect_uri=https://example.com/redirect\n    &scope=openid%20profile\n    &response_type=code\n    &state=abc123\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionaries in Luau\nDESCRIPTION: Demonstrates how to create a dictionary in Luau by defining key-value pairs. It covers the use of different types of keys, including numbers, strings, and object references.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal testDictionary = {\n\tfruitName = \"Lemon\",\n\tfruitColor = \"Yellow\",\n\tsour = true\n}\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\nlocal testDictionary = {\n\tpartType = \"Block\",\n\t[part] = true\n}\n```\n\n----------------------------------------\n\nTITLE: Custom GUI Visibility Management for PhotoBooth\nDESCRIPTION: Implementation of custom GUI visibility control during photo capture, including selective hiding and showing of ScreenGuis and CoreGuis.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/photo-booth.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal StarterGui = game:GetService(\"StarterGui\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\nlocal hiddenInstances = {}\n\n-- Create a screen GUI that will not be hidden\nlocal specialGuiInstance = Instance.new(\"ScreenGui\")\n-- Draw the screen GUI above the photo booth GUI\nspecialGuiInstance.DisplayOrder = 1\nspecialGuiInstance.Parent = playerGui\n-- Set attribute on screen GUI to prevent hiding\nspecialGuiInstance:SetAttribute(\"ShowInPhotoBooth\", true)\n-- Add text label to the GUI\nlocal specialLabel = Instance.new(\"TextLabel\")\nspecialLabel.Size = UDim2.fromScale(1, 0.1)\nspecialLabel.Text = \"Remains visible when taking a photo\"\nspecialLabel.Font = Enum.Font.GothamMedium\nspecialLabel.TextSize = 24\nspecialLabel.Parent = specialGuiInstance\n\nPhotoBooth.hideOtherGuis(function()\n\t-- Hide all developer-defined screen GUIs except those marked with attribute\n\tlocal instances = playerGui:GetChildren()\n\tfor _, instance in instances do\n\t\tif instance:IsA(\"ScreenGui\") and not instance:GetAttribute(\"ShowInPhotoBooth\") and instance.Enabled then\n\t\t\tinstance.Enabled = false\n\t\t\ttable.insert(hiddenInstances, instance)\n\t\tend\n\tend\n\t-- Hide specific core GUIs\n\tStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)\nend)\n\nPhotoBooth.showOtherGuis(function()\n\t-- Show all developer-defined screen GUIs that were hidden\n\tfor _, instance in hiddenInstances do\n\t\tinstance.Enabled = true\n\tend\n\thiddenInstances = {}\n\t-- Show specific core GUIs that were hidden\n\tStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)\nend)\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function Example (Roblox Lua)\nDESCRIPTION: This snippet demonstrates the syntax for creating an anonymous function and connecting it to a `Died` event of a player's character in Roblox. This allows for capturing player-specific information when the event is triggered.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nmyPlayer.Died:Connect(function()\n\tprint(player)\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing Sell Platform Tracking in Roblox Lua\nDESCRIPTION: Sets up a script to track player interactions with a sell platform, retrieving player character and stats for item selling\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/selling-items.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Sells all a player's items and gives them gold\nlocal sellPart = script.Parent\n\nlocal Players = game:GetService(\"Players\")\n\nlocal function onTouch(partTouched)\n\tlocal character = partTouched.Parent\n\tlocal player = Players:GetPlayerFromCharacter(character)\n\n\tif player then\n\t\t-- Gets the player's leaderboard. Needed to get items and money\n\t\tlocal playerStats = player:FindFirstChild(\"leaderstats\")\n\n\t\tif playerStats then\n\t\t\t-- Gets the player's items and money\n\t\t\tlocal playerItems = playerStats:FindFirstChild(\"Items\")\n\t\t\tlocal playerGold = playerStats:FindFirstChild(\"Gold\")\n\n\t\t\tprint(\"A player touched sellPart\")\n\t\tend\n\tend\nend\n\nsellPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Activating Selfie Mode Actions Using Enums in Lua\nDESCRIPTION: This code demonstrates how to activate a specific Selfie Mode action using the SelfieMode.Action enum.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\n-- Activate \"Filter\" action\nSelfieMode.activateAction(SelfieMode.Action.Filter)\n```\n\n----------------------------------------\n\nTITLE: Fire Remote Event to Teleport Player\nDESCRIPTION: This Lua snippet shows how to fire a remote event from a LocalScript to trigger the teleportation of a player character, passing the desired teleport target position as a parameter.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal teleportEvent = ReplicatedStorage:WaitForChild(\"TeleportEvent\")\nlocal teleportTarget = Vector3.new(50, 2, 120)\n\n-- Fire the remote event\nteleportEvent:FireServer(teleportTarget)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Trap Part Reference in Lua\nDESCRIPTION: This code creates a variable referencing the parent of the script, which is the trap part. It establishes the basic setup for a trap mechanism.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/use-parameters-and-events.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Destroys whatever touches the parent\nlocal trap = script.Parent\n\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Selfie Mode in Lua\nDESCRIPTION: This snippet demonstrates how to install the Selfie Mode module from the Creator Store and configure it using a LocalScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.configure({\n\tdisableCharacterMovement = true\n})\n```\n\n----------------------------------------\n\nTITLE: Create DataStore\nDESCRIPTION: This code snippet shows how to create a new data store or access an existing one using the GetDataStore method of the DataStoreService. The data store is named \"PlayerGold\" and will be used to save player gold values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/save-data.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal DataStoreService = game:GetService(\"DataStoreService\")\n\nlocal goldStore = DataStoreService:GetDataStore(\"PlayerGold\")\n```\n\n----------------------------------------\n\nTITLE: Referencing a ScreenGui for a Custom Loading Screen in Roblox (Lua)\nDESCRIPTION: This code references an existing ScreenGui object named 'LoadingScreen' in ReplicatedFirst. It sets the IgnoreGuiInset property to true and parents it to the PlayerGui. The default loading screen is then removed, and the custom screen is destroyed after the game is loaded.  This allows the loading screen to be designed in the Roblox editor.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/loading-screens.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\n\nlocal screenGui = ReplicatedFirst.LoadingScreen\nscreenGui.IgnoreGuiInset = true\nscreenGui.Parent = playerGui\n\n-- Remove the default loading screen\nReplicatedFirst:RemoveDefaultLoadingScreen()\n\ntask.wait(5)  -- Force screen to appear for a minimum number of seconds\n\nif not game:IsLoaded() then\n\tgame.Loaded:Wait()\nend\n\nscreenGui:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Updating Leaderboard Item Count - Lua\nDESCRIPTION: This snippet updates the player's item count on the leaderboard if the harvested item is collectible and the player has enough space.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nif canHarvest.Value == true and playerItems.Value < playerSpaces.Value then\n    playerItems.Value += 1\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Place IDs in MainConfiguration Script\nDESCRIPTION: Lua table containing place IDs for different game modes including lobby, gameplay, and various queue types. Each place ID is mapped to a descriptive key that identifies its purpose in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/installation-and-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--------------------------------------\n-- List of named places in the game\nlocal _places = {\n lobby = 0123456789,\n gameplay_development = 0987654321,\n queue_default = 0123459876,\n queue_deathmatch = 0987651234,\n queue_teamDeathmatch = 0132457689,\n queue_freePlay = 0678912345\n}\n--------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling SelfieMode\nDESCRIPTION: Demonstrates how to completely enable or disable the selfie mode functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.setEnabled(false)\n```\n\n----------------------------------------\n\nTITLE: Getting a Roblox Instance using cURL\nDESCRIPTION: This cURL command is used to retrieve a specific instance from Roblox Engine using the Get Instance API. The command requires appropriate parameters for universe ID, place ID, instance ID, and an API key.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include --location --request GET \"https://apis.roblox.com/cloud/v2/universes/<universeId>/places/<placeId>/instances/<instanceId>\" --header \"x-api-key: <api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Signature Format without Secret for Custom Endpoints\nDESCRIPTION: This CSV snippet represents the format of the 'roblox-signature' when no secret is configured for custom endpoints. It includes only the timestamp, indicating when the notification was sent.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/webhook-notifications.md#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n\"roblox-signature\": \"t=<timestamp>\"\n```\n\n----------------------------------------\n\nTITLE: Duplicating Crust Layers - Lua\nDESCRIPTION: This snippet illustrates the process of duplicating the Crust1 beam to create Crust2 and adjusting its properties to enhance the visual effects of the crust above the magma.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\n1. Duplicate **Crust1**, rename it **Crust2**, then in the **Properties** window,\n   1. Set **Attachment0** to the attachment at the fork in the crevice.\n   1. Set **Attachment1** to the attachment at the edge of the caldera...\n```\n\n----------------------------------------\n\nTITLE: Creating a Cube Instance in Luau\nDESCRIPTION: This Lua code defines a function `makeCube` that creates a new Part instance, sets its size based on the `CUBE_SIZE` constant, and assigns a color. It's part of building a tower of cubes in Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal TOWER_SIZE = 4\nlocal CUBE_SIZE = 2\n\n-- Creates individual cubes\nlocal function makeCube()\n  local cube = Instance.new(\"Part\")\n  cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Damage Player Implementation without Debounce\nDESCRIPTION: Simple implementation of a damage system that triggers when a part is touched. This version lacks debounce protection, causing multiple damage applications in quick succession.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/debounce.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal part = script.Parent\n\nlocal function damagePlayer(otherPart)\n\tprint(part.Name .. \" collided with \" .. otherPart.Name)\n\n\tlocal humanoid = otherPart.Parent:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\thumanoid.Health -= 10  -- Reduce player health\n\tend\nend\n\npart.Touched:Connect(damagePlayer)\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Creation - Multiple Key-Value Pairs\nDESCRIPTION: This snippet shows how to create a Luau dictionary with multiple key-value pairs. It defines an `enemy` dictionary with `Name` and `Health` keys, assigned to a string and a number, respectively.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName = \"Spike\",\n\tHealth = 1000,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Season Details in Lua\nDESCRIPTION: Sets up basic season information including start/end dates, title, description and season ID. Uses DateTime for UTC time handling to manage season duration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/season-passes.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nstartUtc = DateTime.fromUniversalTime(2024, 10, 01, 17, 0, 0),\nendUtc = DateTime.fromUniversalTime(2025, 2, 28, 17, 0, 0),\ntitle = \"Season 1\",\ndescription = \"Into Space City\",\nseasonId = \"season1\",\n```\n\n----------------------------------------\n\nTITLE: Defining Player and Map Variables in Lua\nDESCRIPTION: This snippet defines services, map variables, and player variables needed for player management. Services like \"Players\" and \"ServerStorage\" are required for handling player data and storing player-related items. This setup is crucial for managing spawn locations and tracking active players within a Roblox game instance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n-- Player Variables\nlocal activePlayers = {}\n\n-- Local Functions\n\n-- Module Functions\n\nreturn PlayerManager\n```\n\n----------------------------------------\n\nTITLE: Positioning a CFrame in Lua\nDESCRIPTION: This snippet demonstrates how to create a new CFrame at a specific position and assign it to a part's CFrame property. It uses CFrame.new() to create a CFrame at coordinates (-2, 2, 4) and applies it to a red block.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\n-- Create new CFrame\nlocal newCFrame = CFrame.new(-2, 2, 4)\n\n-- Overwrite redBlock's current CFrame with new CFrame\nredBlock.CFrame = newCFrame\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Luau\nDESCRIPTION: This snippet introduces string interpolation in Luau, allowing expressions within strings using backticks and curly brackets. It details variables and arithmetic operations as part of expressions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal world = \"world\"\n\nlocal string1 = `Hello {world}!`\nprint(string1)  --> Hello world!\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal world = \"world\"\nlocal number = 1\nlocal letters = {\"w\", \"o\", \"r\", \"l\", \"d\"}\n\nlocal string1 = `Hello {world}, {number} time!`\nlocal string2 = `Hello {world}, {number + 1} times!`\nlocal string3 = `Hello {table.concat(letters)} a third time!`\n\nprint(string1)  --> Hello world, 1 time!\nprint(string2)  --> Hello world, 2 times!\nprint(string3)  --> Hello world a third time!\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal string1 = `Hello \\`\\{world\\}\\`!`\nprint(string1)  --> Hello `{world}`!\n```\n\n----------------------------------------\n\nTITLE: Updated Place IDs Configuration in Lua for Battle Royale Game\nDESCRIPTION: This Lua snippet shows an updated version of the _places table with all place IDs filled in. It's used in the MainConfiguration script to define the IDs for each component of the Battle Royale game, enabling proper navigation between different game areas.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/installation-and-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal _places = {\n lobby = 0123456789,\n gameplay_development = 0987654321,\n queue_default = 0123459876,\n queue_deathmatch = 0987651234,\n queue_teamDeathmatch = 0132457689,\n queue_freePlay = 0678912345\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Function in Luau\nDESCRIPTION: Shows how to implement a simple function that prints text. This example demonstrates putting actual code inside the function body.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/code-a-function.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printFood()\n\tprint(\"Curry!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Try/Catch Structures in Luau\nDESCRIPTION: Illustrates how to handle exceptions in Luau using `pcall`. It attempts to execute a function that might throw an error and catches any errors using `pcall`, printing the error message if the function fails.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal function fireWeapon()\n\tif not weaponEquipped then\n\t\terror(\"No weapon equipped!\")\n\tend\n\t-- Proceed...\nend\n\nlocal success, errorMessage = pcall(fireWeapon)\nif not success then\n\tprint(errorMessage)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Object Tags in Roblox\nDESCRIPTION: Implementation of CollectionService for finding and connecting behavior to tagged objects during game initialization.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/main-design-requirements.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nClass.CollectionService\n```\n\n----------------------------------------\n\nTITLE: Sending an Experience Notification in Roblox\nDESCRIPTION: This code snippet shows how to send a basic experience notification to a user in Roblox. It uses the OpenCloud UserNotification module to create and send a notification with a specific message ID and type.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/experience-notifications.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal OCUserNotification = require(ServerScriptService.OpenCloud.V2.UserNotification)\nlocal recipientPlayerID = 505306092\n\n-- In the payload, \"messageId\" is the value of the notification asset ID\nlocal userNotification = {\n\tpayload = {\n\t\tmessageId = \"5dd7024b-68e3-ac4d-8232-4217f86ca244\",\n\t\ttype = \"MOMENT\"\n\t}\n}\n\nlocal result = OCUserNotification.createUserNotification(recipientPlayerID, userNotification)\n\nif result.statusCode ~= 200 then\n\tprint(result.statusCode)\n\tprint(result.error.code)\n\tprint(result.error.message)\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Badge Names and Descriptions - REST API\nDESCRIPTION: This endpoint retrieves the name and description for a localized badge specified by badgeId. It requires authentication for access to the badge management scope.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nGET v1/badges/{badgeId}/name-description\n```\n\n----------------------------------------\n\nTITLE: Connecting to selfieModeClosed Event in Lua\nDESCRIPTION: Demonstrates how to connect to the selfieModeClosed event which fires when the player closes selfie mode. This can only be used in a LocalScript and requires the SelfieMode module to be required from ReplicatedStorage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.selfieModeClosed:Connect(function()\n\tprint(\"Selfie mode closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing TutorialManager Module in Roblox Lua\nDESCRIPTION: This ModuleScript manages the player's progress through tutorial goals. It handles goal interactions, tracks completion status, and manages the end-of-tutorial events. The module provides functions for interacting with goals, retrieving goal parts, and managing player progress tracking.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-mansion-of-wonder/adding-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TutorialManager = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal tutorialFolder = ReplicatedStorage:WaitForChild(\"PlayerTutorial\")\nlocal TutorialEndEvent = tutorialFolder:WaitForChild(\"TutorialEnd\")\nlocal NextGoalEvent = tutorialFolder:WaitForChild(\"NextGoal\")\n\n-- Note Goal parts must be ordered in the table, or else Goal order may be different in-game\nlocal goalParts = {\n workspace.TutorialGoals.GoalPart1,\n workspace.TutorialGoals.GoalPart2\n}\n\nlocal function checkTutorialEnd(player, goalParts)\n local currentIndex = player:WaitForChild(\"GoalProgress\")\n return currentIndex.Value >= #goalParts\nend\n\nlocal function finishTutorial(player)\n local playerBeam = player.Character.HumanoidRootPart:FindFirstChildOfClass(\"Beam\")\n playerBeam:Destroy()\n\n print(player.Name .. \" finished the tutorial\")\n\n -- Placeholder for further code. E.g. if you wanted to send messages to the server to do other tasks\n\nend\n\nfunction TutorialManager.interactGoal(player)\n NextGoalEvent:FireServer()\nend\n\nfunction TutorialManager.getTutorialGoals()\n return goalParts\nend\n\nfunction TutorialManager.nextGoal(player, goalParts)\n if checkTutorialEnd(player, goalParts) then\n   finishTutorial(player)\n else\n   -- Increment the player's Goal tracker\n   local currentGoalIndex = player:WaitForChild(\"GoalProgress\")\n   currentGoalIndex.Value += 1\n end\nend\n\n-- Creates an int value to locally track player's progress through the tutorial Goals\nfunction TutorialManager.setupPlayerProgress(player)\n local currentGoalProgress = Instance.new(\"IntValue\")\n currentGoalProgress.Name = \"GoalProgress\"\n currentGoalProgress.Value = 1\n currentGoalProgress.Parent = player\nend\n\nreturn TutorialManager\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Handler Function\nDESCRIPTION: Creates the onAction function that handles the reload input, including state checking and visual feedback.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onAction(actionName, inputState, inputObject)\n\tif actionName == RELOAD_ACTION and inputState == Enum.UserInputState.Begin then\n\t\ttool.TextureId = \"rbxassetid://6593020923\"\n\t\ttask.wait(2)\n\t\ttool.TextureId = \"rbxassetid://92628145\"\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: While and Repeat Loops in C#\nDESCRIPTION: Demonstrates the use of `while` and `do-while` loops in C# for conditional execution of code blocks. The `while` loop continues as long as the boolean expression is true, while the `do-while` loop executes at least once and continues until the boolean expression becomes false.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nwhile (boolExpression) {\n\tdoSomething();\n}\n\ndo {\n\tdoSomething();\n} while (boolExpression)\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Variables in Roblox Lua\nDESCRIPTION: This snippet shows how to create a variable and set it using the equal sign operator in Lua. The variable is created but not yet assigned a value from player input.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/coding-a-question.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nwhile playing do\n  storyMaker:Reset()\n\n  -- Code story between the dashes\n  -- =============================================\n     local name1 =\n\n  -- =============================================\n\n  -- Add the story variable between the parenthesis below\n  storyMaker:Write()\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Perimeter Lights Properties\nDESCRIPTION: Configuration settings for perimeter lighting using block parts and SurfaceLight objects. Includes specific color values, positioning, and light range settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_40\n\nLANGUAGE: roblox\nCODE:\n```\n-- Block Part Properties\nColor = 199, 166, 147\nMaterial = Neon\nSize = 89.254, 1, 1\nCFrame.Position = -78.297, 21, 293.439\nAnchored = true\n\n-- SurfaceLight Properties\nColor = 211, 190, 150\nFace = Bottom\nRange = 21\n```\n\n----------------------------------------\n\nTITLE: Running Event with Parameters in Roblox Lua\nDESCRIPTION: Demonstrates how to run an event by passing parameters to the RootObject and isEnabled events through the event manager function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal params = {\n\tRootObject = workspace.Content.Interior.Foyer[\"Ritual-DemoVersion\"][\"SealDropoff_\" .. missionName],\n\tisEnabled = enabled\n}\nlocal eventId = eventManagerFunc:Invoke(\"Run\", {eventName = \"Ritual_Init_Dropoff\", eventParams = params} )\n```\n\n----------------------------------------\n\nTITLE: Adding XP from Missions to Seasons in Lua\nDESCRIPTION: This code snippet demonstrates how to award players XP when they complete defined missions using the Missions feature package. It imports season pass data and rewards players based on their progress.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/season-passes.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal SeasonPasses = require(ReplicatedStorage.SeasonPasses.Server.SeasonPasses)\n\nlocal function completeHandler(player: Player, missionId: Types.MissionId)\n\tprint(`{player} completed mission {missionId}`)\n\tif missionId == \"Walking\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Walking2\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Walking3\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Availability\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Manual\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\n\tif missionId == \"Minutely\" then\n\t\tSeasonPasses.addProgressToSeason(player, 100)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Developer Products to MerchBooth in Lua\nDESCRIPTION: Script that adds developer products to the MerchBooth using product IDs. Includes error handling and demonstrates how to specify items as developer products using Enum.InfoType.Product.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal items = {\n\t1236602053, -- Mana Refill\n\t1257880672, -- Healing Potion\n}\n\nfor _, assetId in items do\n\tlocal success, errorMessage = pcall(function()\n\t\tMerchBooth.addItemAsync(assetId, Enum.InfoType.Product)\n\tend)\n\tif not success then\n\t\twarn(errorMessage)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring EmoteBar Client Settings\nDESCRIPTION: Demonstrates how to configure the EmoteBar GUI with custom settings like maxEmotesPerPage and page navigation keys.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureClient({\n\tguiType = EmoteBar.GuiType.EmoteBar,\n\tmaxEmotesPerPage = 6,\n\tnextPageKey = Enum.KeyCode.Z,\n\tprevPageKey = Enum.KeyCode.C,\n})\n```\n\n----------------------------------------\n\nTITLE: Handling onOrchestrationFinished Event in Lua\nDESCRIPTION: This snippet connects to the onOrchestrationFinished event from the EventSequencer in Roblox. When a scene ends, it evaluates the scene name and loads the corresponding next scene, cycling through predefined scenes. Dependencies include the 'EventSequencer' module and ReplicatedStorage service.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Figure out next scene to load when current scene finishes\nEventSequencer.onOrchestrationFinished:Connect(function(endedSceneName)\n\tif endedSceneName == \"PreShow\" then\n\t\t-- \"PreShow\" ended; load the first scene in the concert\n\t\tEventSequencer.loadScene(\"Track1\")\n\telseif endedSceneName == \"Track1\" then\n\t\t-- \"Track1\" ended; load the second scene in the concert\n\t\tEventSequencer.loadScene(\"Track2\")\n\telse\n\t\t-- Loop back to the pre-show scene\n\t\tEventSequencer.loadScene(\"PreShow\")\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Detecting Player Touch and Applying Damage with Roblox Lua\nDESCRIPTION: This code defines a function `killPlayer` that checks if a humanoid touches the trap part. If a humanoid is found, its health is set to 0, effectively killing the player.  An event listener is then created that listens for touch events on the `trapObject` and calls the `killPlayer` function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/use-particles-for-explosions.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n\"local trapObject = script.Parent\nlocal particleEmitter = trapObject.Explosion\n\nlocal EMIT_AMOUNT = 100\n\nlocal function killPlayer(otherPart)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tif humanoid then\n\t\thumanoid.Health = 0\n\tend\nend\n\ntrapObject.Touched:Connect(killPlayer)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Time of Day in Roblox Lighting\nDESCRIPTION: Sets the ClockTime or TimeOfDay property of the Lighting service to adjust the current time of day in the experience. Both properties are directly related and represent time in hours.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.ClockTime = 0  -- or game.Lighting.TimeOfDay = \"00:00:00\"\n```\n\n----------------------------------------\n\nTITLE: Hiding the Leaderboard UI - Roblox Lua\nDESCRIPTION: This snippet hides the leaderboard UI by disabling the PlayerList in the core GUI. This is useful for game menus or cutscenes where displaying player information is not desired.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/leaderboards.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal StarterGui = game:GetService(\"StarterGui\")\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Robux Bundle Item\nDESCRIPTION: Manually defines a bundle item with Robux pricing, icon, and optional metadata caption\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n{\n    itemType = ItemTypes.ItemType.Robux,\n    priceInRobux = 49,\n    icon = <IMAGE_ASSET_ID>,\n    metadata = {\n        caption = {\n            text = \"x1\",\n            color = Color3.fromRGB(236, 201, 74),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Interactions with 3D Audio in Roblox Lua\nDESCRIPTION: This Lua script manages 3D audio playback and button interactions within a Roblox environment. It uses TweenService to provide visual feedback when the button is pressed or released, enhancing player interaction experience. The script reacts to the button being touched and listens for audio playback state changes to update the button's visual state accordingly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/audio/add-3D-audio.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal buttonModel = script.Parent.Parent\nlocal buttonPart = buttonModel.ButtonPart\nlocal buttonPressedAudioPlayer = buttonModel.ButtonPressedAudioPlayer\n\nlocal tweenInfo = TweenInfo.new(.2, Enum.EasingStyle.Exponential)\n\nlocal buttonTweenByIsPressed = {\n\t-- Pressed\n\t[true] = TweenService:Create(buttonPart, tweenInfo, {\n\t\tSize = buttonPart.Size / Vector3.new(2, 1, 1),\n\t\tColor = Color3.fromRGB(75, 151, 75),\n\t}),\n\n\t-- Default\n\t[false] = TweenService:Create(buttonPart, tweenInfo, {\n\t\tSize = buttonPart.Size,\n\t\tColor = Color3.fromRGB(196, 40, 28),\n\t}),\n}\n\nlocal function onIsPlayingChanged()\n\tlocal isPlaying = buttonPressedAudioPlayer.IsPlaying\n\tlocal tween = buttonTweenByIsPressed[isPlaying]\n\ttween:Play()\nend\nonIsPlayingChanged()\nbuttonPressedAudioPlayer:GetPropertyChangedSignal(\"IsPlaying\"):Connect(onIsPlayingChanged)\nbuttonPressedAudioPlayer.Ended:Connect(onIsPlayingChanged)\n\nbuttonPart.Touched:Connect(function(_hit)\n\tbuttonPressedAudioPlayer:Play()\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Player Data Value in Lua\nDESCRIPTION: Demonstrates how to set a player's coin value using the PlayerDataServer system. This method allows for server-to-client replication of player state changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/plant-reference-project.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nPlayerDataServer:setValue(player, \"coins\", 5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Set with Initial Items in Lua\nDESCRIPTION: This snippet demonstrates creating a new set using `Set.new()` with an initial list of items. No external dependencies are required.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruits = Set.new({\"Apple\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\n```\n\n----------------------------------------\n\nTITLE: Changing Color of a Specific Part in Roblox Lua\nDESCRIPTION: This script changes the color of a part named 'ColorPart' by directly referencing it in the Workspace. It uses Color3.fromRGB to set a specific RGB color value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/parents-and-children.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal colorPart = Workspace.ColorPart\ncolorPart.Color = Color3.fromRGB(50, 240, 255)\n```\n\n----------------------------------------\n\nTITLE: Checking ACM Enabled Status\nDESCRIPTION: This code snippet checks if the Avatar Context Menu (ACM) is currently enabled by using the `StarterGui:GetCore()` function with the `AvatarContextMenuEnabled` parameter.  It returns a boolean value indicating the ACM's enabled status.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-context-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n---Returns a boolean indicating if the ACM is currently enabled.\nStarterGui:GetCore(AvatarContextMenuEnabled)\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Components for Developer Share Information in JSX\nDESCRIPTION: JSX code that creates a styled grid layout for displaying information about the developer's share of earnings from Developer Exchange on the Roblox platform. The code uses Material UI Grid and Chip components to create a visual representation with percentage chips and explanatory text.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/earn-on-roblox.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"25%\" size=\"large\" style={{backgroundColor:\"#00a2ff\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Developer share – Developer Exchange\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation Between CFrames in Roblox Lua\nDESCRIPTION: Shows how to use CFrame's Lerp function to position an object between two points. The example places an object 70% of the distance between two reference points.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\nlocal greenCube = Workspace.GreenCube\nlocal cyanCube = Workspace.CyanCube\n\nredBlock.CFrame = greenCube.CFrame:Lerp(cyanCube.CFrame, 0.7)\n```\n\n----------------------------------------\n\nTITLE: Counting Up For Loop in Luau\nDESCRIPTION: Example of a for loop that counts up from 0 to 5 in increments of 1, printing each value and waiting 1 second between iterations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 0, 5, 1 do\n\tprint(count)\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Currency in Lua for Roblox Bundles Package\nDESCRIPTION: This snippet demonstrates how to define a custom currency (Gems) for use with the Bundles feature package. It specifies the currency's display name, symbol, and optional icon.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nGems = {\n    displayName = \"Gems\",\n    symbol = \"💎\",\n    icon = nil,\n},\n```\n\n----------------------------------------\n\nTITLE: Direct Chat Feature Configuration with TextChannel\nDESCRIPTION: This snippet shows how to configure a direct chat channel using the SetDirectChatRequester method on a TextChannel in Roblox. It marks TextChannels for direct chat, considering user privacy settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/guidelines.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n`Class.TextChannel:SetDirectChatRequester()`\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Badge Icon - REST API\nDESCRIPTION: This endpoint updates the icon for a localized badge based on badgeId and languageCode. The request body must contain the new icon data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST v1/badges/{badgeId}/icons/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Checking Call Invite Eligibility in Roblox Connect (Lua)\nDESCRIPTION: Uses the CanSendCallingInviteAsync method to check if a player is eligible to send call invites. This check is performed before prompting the phone book.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/roblox-connect.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nClass.SocialService:CanSendCallingInviteAsync()\n```\n\n----------------------------------------\n\nTITLE: Handling Player Join and Respawn Locations in Lua\nDESCRIPTION: Defines a local function `onPlayerJoin` which sets the respawn location of a player to the lobby, ensuring new players start in the correct position. This function is connected to the PlayerAdded event, updating player properties upon joining.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Local Functions\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Notifications with Parameters in Lua\nDESCRIPTION: This script shows how to customize a notification using parameters. It sets values for placeholders in the notification template, allowing for personalized messages. The example uses a notification that references a friend's user ID and a point value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/experience-notifications.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal OCUserNotification = require(ServerScriptService.OpenCloud.V2.UserNotification)\nlocal recipientPlayerID = 505306092\n\nlocal userIdFriendParam = {int64Value = 3702832553}\nlocal pointsParam = {stringValue = \"5\"}\n\n-- In the payload, \"messageId\" is the value of the notification asset ID\n-- In this example, the notification string is \"{userId-friend} beat your high score by {points} points! Time to level up?\"\nlocal userNotification = {\n\tpayload = {\n\t\tmessageId = \"ef0e0790-e2e8-4441-9a32-93f3a5783bf1\",\n\t\ttype = \"MOMENT\",\n\t\tparameters = {\n\t\t\t[\"userId-friend\"] = userIdFriendParam,\n\t\t\t[\"points\"] = pointsParam\n\t\t}\n\t}\n}\n\nlocal result = OCUserNotification.createUserNotification(recipientPlayerID, userNotification)\n\nif result.statusCode ~= 200 then\n\tprint(result.statusCode)\n\tprint(result.error.code)\n\tprint(result.error.message)\nend\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Algorithms in Lua\nDESCRIPTION: Demonstrates how to combine multiple algorithms by creating a getting dressed routine with separate functions for picking and putting on clothes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/coding-concept-algorithms.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- First algorithm for picking clothes\nlocal function pickClothes()\n    pick top clothing\n    pick bottom clothing\n    pick Socks\n    pick Shoes\nend\n\n-- Second algorithm for putting clothes on\n\nlocal function putOnClothes()\n    put on top clothing\n    put on bottom clothing\n    put on socks\n    put on shoes\nend\n\n-- Main algorithm, calls pickClothes()and putOnClothes()\nlocal function getDressed()\n    pickClothes()\n    putOnClothes()\nend\n```\n\n----------------------------------------\n\nTITLE: Spawning Players in Lobby Between Rounds in Roblox Lua\nDESCRIPTION: This function prepares players for the lobby state between rounds by setting their neutral property to true (which resets their team to nil), changing their player state to 'InLobby', and reloading their character so they spawn at the neutral spawn location.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function spawnPlayersInLobby(players: { Player })\n\tfor _, player in players do\n\t\tplayer.Neutral = true\n\t\tplayer:SetAttribute(PlayerAttribute.playerState, PlayerState.InLobby)\n\t\ttask.spawn(function()\n\t\t\tplayer:LoadCharacter()\n\t\tend)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Using MatchManager to Send Players to Lobby in Lua\nDESCRIPTION: Demonstrates requiring the `PlayerManager` module within `MatchManager` to execute functions that manage player spawning. It prepares the game by calling `sendPlayersToMatch`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\n\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\nend\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Handling Lobby State in Roblox Lua\nDESCRIPTION: Function that configures the game state when a player is in the lobby. It enables movement and camera controls, hides all HUD elements, and disables the blaster.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onInLobby()\n\t-- Enable controls while in the lobby\n\ttogglePlayerMovement(true)\n\ttogglePlayerCamera(true)\n\n\t-- Hide all HUD while in the lobby\n\tsetGuiExclusivelyEnabled(nil)\n\n\t-- Disable blaster while in the lobby\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Execution in Roblox\nDESCRIPTION: Shows how to stop a running event using the event manager function with the Stop command.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\neventManagerFunc:Invoke(\"Stop\", {eventInstId = cooldownId} )\n```\n\n----------------------------------------\n\nTITLE: Configuring Spawn Zone Block Parts in Roblox\nDESCRIPTION: Configuration data for creating spawn zone walls and doorways with specific dimensions and positions. Includes measurements for left and right spawn zones with dual exit points.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_9\n\nLANGUAGE: Roblox\nCODE:\n```\n-- Left spawn zone wall\nSize: Vector3.new(15, 15, 45)\nCFrame.Position: Vector3.new(-117.5, 12.5, 317.5)\n\n-- Right spawn zone wall\nSize: Vector3.new(15, 15, 45)\nCFrame.Position: Vector3.new(-117.5, 12.5, 2.5)\n\n-- Left spawn doorway parts\nLeft spawn, top wall: Size(10, 15, 5), Position(-105, 12.5, 297.5)\nLeft spawn, top door: Size(10, 5, 5), Position(-95, 17.5, 297.5)\nLeft spawn, middle wall: Size(25, 15, 5), Position(-77.5, 12.5, 297.5)\nLeft spawn, bottom door: Size(10, 5, 5), Position(-60, 17.5, 297.5)\nLeft spawn, bottom wall: Size(20, 15, 5), Position(-45, 12.5, 297.5)\n\n-- Right spawn doorway parts\nRight spawn top wall: Size(10, 15, 5), Position(-105, 12.5, 22.5)\nRight spawn, top door: Size(10, 5, 5), Position(-95, 17.5, 22.5)\nRight spawn, middle wall: Size(25, 15, 5), Position(-77.5, 12.5, 22.5)\nRight spawn, bottom door: Size(10, 5, 5), Position(-60, 17.5, 22.5)\nRight spawn, bottom wall: Size(20, 15, 5), Position(-45, 12.5, 22.5)\n```\n\n----------------------------------------\n\nTITLE: Displaying an Alert Component in Markdown\nDESCRIPTION: This snippet demonstrates how to use an Alert component within Markdown to display an informational message about curated resources.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/resources-landing.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<Alert severity=\"info\">\nWe've curated our most popular resources, but the rest of the content can be found in the **left** navigation bar under **Educator Training**.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Heightmap Terrain Import Configuration\nDESCRIPTION: Specifies positioning and sizing parameters for importing terrain heightmap that aligns with the building system's grid\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/building-system.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nPosition (X, Y, Z) = 0, 0, 0\nSize (X, Y, Z) = heightmap_width × 4, 256, heightmap_length × 4\n```\n\n----------------------------------------\n\nTITLE: Connecting to poseChanged Event in Lua\nDESCRIPTION: Demonstrates how to connect to the poseChanged event which fires when a pose is applied or removed. The callback receives both the new pose name and the old pose name as parameters. This can only be used in a LocalScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.poseChanged:Connect(function(newPose, oldPose)\n\tprint(\"Pose changed from\", oldPose, \"to\", newPose)\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing TutorialScript LocalScript in Roblox Lua\nDESCRIPTION: This LocalScript creates and manages the beam that guides players through tutorial goals. It sets up proximity prompts on each goal, updates the beam's target when goals change, and creates necessary attachments for beam connections. The script handles the visual guidance system seen by players.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-mansion-of-wonder/adding-scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal tutorialFolder = ReplicatedStorage:WaitForChild(\"PlayerTutorial\")\nlocal TutorialManager = require(tutorialFolder:WaitForChild(\"TutorialManager\"))\nlocal TutorialEndEvent = tutorialFolder:WaitForChild(\"TutorialEnd\")\n\nlocal player = Players.LocalPlayer\nlocal goalParts = TutorialManager.getTutorialGoals()\nlocal playerBeam = nil\nlocal goalIndex = nil\n\nlocal function getTargetAttachment()\n  local currentTarget = goalParts[goalIndex.Value]\n  local interactionPart = currentTarget:FindFirstChild(\"InteractionPart\")\n  local attachment = interactionPart and interactionPart:FindFirstChildOfClass(\"Attachment\")\n\n  if not attachment then\n    attachment = Instance.new(\"Attachment\")\n    attachment.Name = \"BeamAttachment\"\n    attachment.Parent = currentTarget\n  end\n\n  return attachment\nend\n\nlocal function updateBeamTarget()\n  playerBeam = player.Character.HumanoidRootPart:FindFirstChildOfClass(\"Beam\")\n\n  local targetBeamAttachment = getTargetAttachment()\n\n  if targetBeamAttachment then\n    playerBeam.Attachment1 = targetBeamAttachment\n  else\n    warn(\"Attachment not found in a goal. Check that goals have attachments or they're included under the InteractionPart\")\n  end\nend\n\nlocal function setupGoals()\n  for _, part in goalParts do\n    local interactionPart = part:FindFirstChild(\"InteractionPart\")\n    local proximityPrompt = interactionPart and interactionPart:FindFirstChild(\"ProximityPrompt\")\n\n    if proximityPrompt then\n      proximityPrompt.Triggered:Connect(function(player)\n        proximityPrompt.Enabled = false\n        TutorialManager.nextGoal(player, goalParts)\n        TutorialManager.interactGoal(player)\n      end)\n    else\n      warn(\"Proximity prompt not included in goal. Add one to each goal part under the InteractionPart\")\n    end\n  end\nend\n\nlocal function createBeamForCharacter(character)\n  local humanoidRootPart = character:WaitForChild(\"HumanoidRootPart\")\n  local playerBeamAttachment = Instance.new(\"Attachment\")\n  local beamTemplate = tutorialFolder:WaitForChild(\"TutorialBeam\")\n\n  if not beamTemplate then\n    warn(\"Tutorial Beam not found in ReplicatedStorage\")\n  end\n\n  playerBeamAttachment.Name = \"BeamAttachment\"\n  playerBeamAttachment.Parent = humanoidRootPart\n\n  local targetBeamAttachment = getTargetAttachment()\n\n  playerBeam = beamTemplate:Clone()\n  playerBeam.Attachment0 = playerBeamAttachment\n  playerBeam.Attachment1 = targetBeamAttachment\n  playerBeam.Enabled = true\n  playerBeam.Parent = humanoidRootPart\nend\n\nlocal function setupPlayer()\n  setupGoals()\n  TutorialManager.setupPlayerProgress(player)\n  goalIndex = player:WaitForChild(\"GoalProgress\")\n\n  player.CharacterAdded:Connect(createBeamForCharacter)\n  if player.Character then\n    createBeamForCharacter(player.Character)\n  end\nend\n\nsetupPlayer()\ngoalIndex.Changed:Connect(updateBeamTarget)\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Start Function in Lua\nDESCRIPTION: Creates a function to start the timer for the bridge, initially just printing a message for testing purposes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal timerDuration = 5\n\nlocal function startTimer()\n    print(\"Countdown started\")\nend\n```\n\n----------------------------------------\n\nTITLE: Audio Playback Configuration\nDESCRIPTION: Shows how to configure non-positional audio playback at specific keyframes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nsounds = {\n{startTime = 2, name = \"VisTech_ethereal_voices-001\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variables for Click Detector in Roblox Lua\nDESCRIPTION: This snippet defines the variables needed to interact with the click detector and button in a shop. It initializes the button and click detector components required for the upgrade functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/buying-upgrades.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Lets players click a button to buy an upgrade that increases Spaces\nlocal buyButton = script.Parent\nlocal clickDetector = buyButton.ClickDetector\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Lighting Properties in Roblox\nDESCRIPTION: Settings for the Lighting service to create atmospheric outdoor lighting effects. Includes ambient light, shadow properties, and time of day settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_38\n\nLANGUAGE: roblox\nCODE:\n```\nAmbient = 26, 34, 36\nOutdoorAmbient = 26, 34, 36\nShadowSoftness = 0.15\nTechnology = Future\nGeographicLatitude = -18\nTimeOfDay = -15:16:23\n```\n\n----------------------------------------\n\nTITLE: Handling Locked Emote Activation\nDESCRIPTION: Demonstrates how to handle events when players attempt to use locked emotes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.lockedEmoteActivated:Connect(function(emote)\n\tprint(Players.LocalPlayer, \"clicked\", emote.name)\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Weights in Lua\nDESCRIPTION: Example of setting weights for multiple animations of the same type to control their relative frequency of occurrence.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/using.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nanimateScript.idle.Animation1.AnimationId = \"rbxassetid://656117400\"\nanimateScript.idle.Animation2.AnimationId = \"rbxassetid://656118341\"\nanimateScript.idle.Animation1.Weight.Value = 5\nanimateScript.idle.Animation2.Weight.Value = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring MerchBooth UI and Behavior in LocalScript\nDESCRIPTION: Allows customization of MerchBooth appearance and interaction settings through a configuration object. Can only be called from a LocalScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.configure({\n\tbackgroundColor = Color3.fromRGB(255, 255, 255),\n\ttextSize = 16,\n\ttextFont = Enum.Font.Roboto,\n\ttextColor = Color3.fromRGB(20, 20, 20),\n\thideOtherUis = false,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Layered Fish Tank Sound with Roblox Sound Effects\nDESCRIPTION: Demonstrates how to create a complex audio effect by combining multiple sound sources and applying Roblox sound effects to generate an immersive underwater sound\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/sound-design.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Apply EqualizerSoundEffect to river sound\nriverSound:AddEffect(Class.EqualizerSoundEffect)\n\n-- Apply ChorusSoundEffect to synthesizer loop\nsynth.SoundEffect = Instance.new(\"ChorusSoundEffect\")\nsynth.SoundEffect.Rate = 16\nsynth.SoundEffect.Depth = 0.21\n```\n\n----------------------------------------\n\nTITLE: Preventing Referral System Abuse in Roblox\nDESCRIPTION: This snippet proposes a method for tracking and managing referred players to prevent exploitation of the referral system. It maintains a table to record which players have already been referred, preventing repeat rewards. The code relies on checking player data upon joining and requires a system of player tracking set up within Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/referral-system.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Table to track players who have already been referred\nlocal referredPlayers = {}\n\nfunction onPlayerAdded(player)\n    local joinData = player:GetJoinData()\n    local referredByPlayerId = joinData.ReferredByPlayerId\n\n    -- Check if the player was invited and has not already used a referral\n    if referredByPlayerId and referredByPlayerId ~= 0 and not referredPlayers[player.UserId] then\n        -- Mark the player as referred\n        referredPlayers[player.UserId] = true\n\n        -- Reward inviter and invitee\n        rewardReferrer(referredByPlayerId)\n        rewardInvitee(player)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Angles Between Directions in Lua\nDESCRIPTION: Helper function that calculates the angle between two direction vectors using dot product and arc cosine. Returns the angle in degrees.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getAngleBetweenDirections(directionA: Vector3, directionB: Vector3)\n    local dotProduct = directionA:Dot(directionB)\n    local cosAngle = math.clamp(dotProduct, -1, 1)\n    local angle = math.acos(cosAngle)\n    return math.deg(angle)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring LinearVelocity Constraint for Lily Pad Movement in Roblox\nDESCRIPTION: This code snippet demonstrates how to configure a Class.LinearVelocity constraint for a lily pad to move it 15 studs per second along the world's negative X axis. It outlines the necessary attachment setup and configuration of constraint properties including MaxForce and LineDirection.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-moving-objects.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n1. Insert a `Class.LinearVelocity` constraint into the **Pad** mesh.\n2. In the **Explorer** window, hover over the mesh, then click the ⊕ icon. A contextual menu displays.\n3. From the contextual menu, insert **LinearVelocity**.\n4. Assign the mesh's attachment to the new constraint.\n   - In the **Explorer** window, select the constraint.\n   - In the **Properties** window,\n     - Set **Attachment0** to **MoveAttachment**.\n     - Set **MaxForce** to `5000` to apply up to 5000 Rowtons of constant force to achieve the target linear velocity.\n     - Keep **RelativeTo** to **World** to move the lily pad relative to the world's position and orientation.\n     - Set **VelocityConstraint** to **Line** to constrain the force along a line from the attachment.\n     - Set **LineDirection** to `-1, 0, 0` to move the lily pad along the world's negative X axis.\n     - Set **LineVelocity** to `15` to move the lily pad 15 studs per second.\n```\n\n----------------------------------------\n\nTITLE: Handling 'selectorShown' Event in Roblox\nDESCRIPTION: This Lua snippet connects to the 'selectorShown' event, which triggers when the art selector UI becomes visible to a player. The handler logs the action of opening the surface art selector. This event is made available through a 'Class.LocalScript'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.selectorShown:Connect(function()\n\tprint(Players.LocalPlayer, \"opened surface art selector\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Adding Proximity Button to Item in Roblox MerchBooth\nDESCRIPTION: Demonstrates how to add a proximity prompt to an object that will trigger the display of an item's purchase view. The item must first be added via addItemAsync before a proximity button can be assigned to it.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tlocal item = Workspace:FindFirstChild(\"Robox\")\n\tif item then\n\t\tMerchBooth.addProximityButton(item, 4819740796)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SurfaceArt in Roblox\nDESCRIPTION: This Lua snippet configures the SurfaceArt module by overriding default settings with custom values provided in the config table. It requires the 'ReplicatedStorage' service to access 'SurfaceArt'. Key parameters include quotaPerPlayer, promptKeyCode, and promptMaxActivationDistance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.configure({\n\tquotaPerPlayer = 4,\n\tpromptKeyCode = Enum.KeyCode.T,\n\tpromptMaxActivationDistance = 8,\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving SelfieMode Actions\nDESCRIPTION: Shows how to get an Action object using the SelfieMode.Action enum.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal lockGazeAction = SelfieMode.getAction(SelfieMode.Action.LockGaze)\n```\n\n----------------------------------------\n\nTITLE: Configuring Attachments for Laser Beam Emission\nDESCRIPTION: Explains how to configure two 'Attachment' objects within the collision box to determine the starting and ending points of the beam. These attachments are necessary for the 'Beam' class to function correctly, as the beam renders a texture between them.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/laser-traps-with-beams.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Insert attachments for beam rendering\nlocal startAttachment = Instance.new('Attachment', CollisionBox)\nstartAttachment.Name = \"StartAttachment\"\nlocal endAttachment = Instance.new('Attachment', CollisionBox)\nendAttachment.Name = \"EndAttachment\"\n-- Position attachments to define the beam's start and endpoint\nstartAttachment.Position = Vector3.new(0, 0, 0) -- Example start position\nendAttachment.Position = Vector3.new(0, 0, 10) -- Example end position\n```\n\n----------------------------------------\n\nTITLE: Joining Player Formula for Server Categorical Signal\nDESCRIPTION: Determines if a server's categorical attribute matches the joining player's preference. Returns a score of 1 when attributes match and 0 when they don't, enabling exact matching of categorical preferences.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nif server_{attribute_name} = joining_player_{attribute_name} then\n  return 1 \nelse\n  return 0 \nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Clouds in Roblox\nDESCRIPTION: The steps to enable dynamic clouds by adding a Clouds object under the Terrain class, configuring its properties, and setting cloud motion through global wind settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/clouds.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.Clouds.Cover|Cover -- Controls cloud coverage (0-1)\nClass.Clouds.Density|Density -- Controls cloud particle intensity\nClass.Clouds.Color|Color -- Controls cloud material color\n```\n\n----------------------------------------\n\nTITLE: Handling 'artChanged' Event in Roblox\nDESCRIPTION: This Lua snippet connects to the 'artChanged' event of the SurfaceArt module, which fires when an artwork changes on a canvas. It logs details like position, asset ID, and user who placed the art. The connection is made through 'Class.LocalScript'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.artChanged:Connect(function(canvas, spot, spotPosition, artId, ownerId)\n\tprint(\"Art placed at:\", spotPosition)\n\tprint(\"Art asset ID:\", artId)\n\tprint(\"Art placed by:\", ownerId)\nend)\n```\n\n----------------------------------------\n\nTITLE: Successful API Response Format in JSON\nDESCRIPTION: This JSON snippet illustrates the expected response when a place version is successfully published. It contains a version number indicating the newly published version of the place.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-place-publishing.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"versionNumber\": 7 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Iteration Algorithm in Lua\nDESCRIPTION: Illustrates an iteration-based algorithm using a for loop to create a countdown timer.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/coding-concept-algorithms.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfor countDown = 10, 1, -1 do\n\ttime -= 1\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Values\nDESCRIPTION: Shows how to retrieve a single attribute value using GetAttribute() method.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\ncabbage:SetAttribute(\"Harvestable\", true)\n\nlocal isHarvestable = cabbage:GetAttribute(\"Harvestable\")\nprint(isHarvestable) --> true\n```\n\n----------------------------------------\n\nTITLE: Initializing Players Service and PlayerAdded Event\nDESCRIPTION: Set up the Players service and create an event handler for new players joining the experience\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Script Execution at Keyframes\nDESCRIPTION: Demonstrates how to define script execution at specific keyframes in the Scripts section of an event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nscripts = {\n\t{startTime = 2, scriptName = \"EnablePlayerControls\", params = {true}, onServer = false }\n}\n```\n\n----------------------------------------\n\nTITLE: Show Damage Billboard (Lua)\nDESCRIPTION: This code snippet shows how to activate a damage billboard above a character's head. The DamageBillboardHandler is used to display the amount of damage done, adorning the billboard to the specified part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/weapons-kit.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nDamageBillboardHandler:ShowDamageBillboard(damage, adornmentPart)\n```\n\n----------------------------------------\n\nTITLE: Raycast Filtering in Roblox\nDESCRIPTION: Demonstrates how to use RaycastParams to filter which objects are considered during raycasting, such as excluding specific instances or ignoring water terrain.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/raycasting.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal rayOrigin = Vector3.zero\nlocal rayDirection = Vector3.new(0, -100, 0)\n\nlocal raycastParams = RaycastParams.new()\nraycastParams.FilterDescendantsInstances = {script.Parent}\nraycastParams.FilterType = Enum.RaycastFilterType.Exclude\nraycastParams.IgnoreWater = true\n\nlocal raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)\n```\n\n----------------------------------------\n\nTITLE: Storm System Components in Roblox\nDESCRIPTION: List of core Roblox Studio systems used to create a dynamic storm effect, including TweenService for cloud movement, lighting changes for lightning effects, beams for volumetric lighting, particle emitters for debris, and animations for wind-blown trees.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.TweenService\nLighting changes\nBeams\nParticle Emitters\nAnimations\n```\n\n----------------------------------------\n\nTITLE: Creating Main Floor Geometry in Roblox Studio\nDESCRIPTION: This snippet outlines the steps to create symmetrical left and right surfaces for the main floor using block parts. This geometry forms the foundation of the playable interior and emphasizes the center of the map.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\n1. Open Roblox Studio with a **Baseplate** template.\n1. Navigate to the toolbar's **Model** tab, then:\n\n   1. Set **Rotate** to `90`.\n   1. Set **Move** to `5` studs. This allows you to equally position all greybox geometry on or away from each other in 5 stud increments.\n\n1. Using **block** parts, create symmetrical left and right surfaces for the **main floor** of your building. This geometry represents the length of your playable interior, and its symmetry denotes the center of the map.\n```\n\n----------------------------------------\n\nTITLE: Counting Even Numbers with For Loop in Luau\nDESCRIPTION: Demonstration of a for loop that counts up even numbers from 0 to 10 by using an increment value of 2.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 0, 10, 2 do\n\tprint(count)\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Engagement Rewards Package in Lua\nDESCRIPTION: This snippet demonstrates how to initialize the Engagement Rewards package by requiring necessary modules and defining a reward claimed handler function. The function should be replaced with custom logic to grant rewards to players.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/engagement-rewards.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EngagementRewardsConfig = require(ReplicatedStorage.EngagementRewards.Configs.EngagementRewardsConfig)\nlocal EngagementRewards = require(ReplicatedStorage.EngagementRewards.Server.EngagementRewards)\nlocal EngagementRewardsUtils = require(ReplicatedStorage.EngagementRewards.Utils.EngagementRewardsUtils)\nlocal Types = require(ReplicatedStorage.EngagementRewards.Configs.Types)\n\n-- Replace this handler function with your own reward claimed handler function\n-- This function should handle the reward claimed event for the rewardId passed in\nlocal function rewardClaimedHandlerFunction(player: Player, rewardId: RewardId, quantity: number): (boolean, string?)\n   print(`Reward {rewardId} claimed by {player} with quantity {quantity}`)\n   return true\nend\n-- more\n```\n\n----------------------------------------\n\nTITLE: Handling Invite Launch Data on Server Side in Roblox Lua\nDESCRIPTION: This server-side script demonstrates how to retrieve and use launch data when a player joins via an invite. It includes retry logic to handle potential delays in data availability.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/invite-prompts.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal ATTEMPT_LIMIT = 10\nlocal RETRY_DELAY = 1\n\nlocal function onPlayerAdded(player)\n\tlocal launchData\n\n\tfor _ = 1, ATTEMPT_LIMIT do\n\t\ttask.wait(RETRY_DELAY)\n\t\tlocal joinData = player:GetJoinData()\n\t\tif joinData.LaunchData ~= \"\" then\n\t\t\tlaunchData = joinData.LaunchData\n\t\t\tbreak\n\t\tend\n\tend\n\n\tif launchData then\n\t\tlocal data = HttpService:JSONDecode(launchData)\n\t\tprint(data.senderUserID)\n\t\tprint(data.spawnLocation)\n\telse\n\t\twarn(\"No launch data received!\")\n\tend\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Player State Change Listeners in Roblox Lua\nDESCRIPTION: Code that initializes the state manager and sets up event connections to handle state changes. It ensures the UI updates both when attributes change and when the player's character respawns.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\n-- Handle the initial player state if set\nlocal initialPlayerState = localPlayer:GetAttribute(PlayerAttribute.playerState)\nonPlayerStateChanged(initialPlayerState)\n\nlocal function updateFromPlayerState()\n\tonPlayerStateChanged(localPlayer:GetAttribute(PlayerAttribute.playerState))\nend\n\n-- Handle future player state updates\nlocalPlayer:GetAttributeChangedSignal(PlayerAttribute.playerState):Connect(updateFromPlayerState)\n\n-- Make sure changes are still applied after respawning\nlocalPlayer.CharacterAdded:Connect(updateFromPlayerState)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scavenger Hunt Client Settings in Lua\nDESCRIPTION: LocalScript code for customizing the ScavengerHunt module's client-side settings, including modal text and token rotation speed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.configureClient({\n\tinfoModalText = \"Welcome to my Scavenger Hunt!\",\n\tcompleteModalText = \"Thanks for playing my Scavenger Hunt!\",\n\ttokenRotationSpeed = 60,\n})\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Luau\nDESCRIPTION: This snippet demonstrates the use of the print function in Luau to display 'Hello world!' on the screen. It is often the first program written by beginners.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/create-a-script.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nprint(\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Restricting Text Input to Numbers in Roblox TextBox\nDESCRIPTION: This script demonstrates how to filter text input in a TextBox to allow only numeric characters. It uses GetPropertyChangedSignal to detect when text changes and string.gsub to remove non-numeric characters from the input.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/text-input.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal textBox = script.Parent\n\nlocal function allowOnlyNumbers()\n\ttextBox.Text = string.gsub(textBox.Text, \"%D\", \"\")\nend\n\ntextBox:GetPropertyChangedSignal(\"Text\"):Connect(allowOnlyNumbers)\n```\n\n----------------------------------------\n\nTITLE: Using the 'and' Operator for Multiple Conditions in Luau\nDESCRIPTION: Demonstrates how to combine multiple conditions using the 'and' operator in if statements. The code will only execute if both conditions evaluate to true.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- will not run\nif 2 + 2 == 6 and 4 ~= 6 then\n\tprint(\"Both statements are true\")\nend\n\n-- will run\nif 4 + 2 == 6 and 4 ~= 6 then\n\tprint(\"Both statements are true\")\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloud Rotation with Roblox Lua\nDESCRIPTION: This snippet sets up an initialization function to process tagged objects in the workspace for rotation. It uses CollectionService signals to manage when objects tagged with 'LocalSpaceRotation' are added or removed. Dependencies include the CollectionService for tagging and signaling, and the setup involves queuing objects for rotation initialization.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function Init()\n\tfor _, obj in CollectionService:GetTagged(\"LocalSpaceRotation\") do\n\t\tif obj:IsDescendantOf(workspace) then\n\t\t\tSetupObj(obj)\n\t\tend\n\tend\nend\n\nCollectionService:GetInstanceAddedSignal(\"LocalSpaceRotation\"):Connect(function(obj)\n\tobjInfoQueue[obj] = true\nend)\n\nCollectionService:GetInstanceRemovedSignal(\"LocalSpaceRotation\"):Connect(function(obj)\n\tif objInfo[obj] then\n\t\tobjInfo[obj] = nil\n\t\tif objInfoQueue[obj] then\n\t\t\tobjInfoQueue[obj] = nil\n\t\tend\n\tend\nend)\n\nInit()\n```\n\n----------------------------------------\n\nTITLE: Example Bad Report Format in Markdown\nDESCRIPTION: Shows an example of a poorly written report that lacks specific details.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/intro-to-digital-safety.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"A player is being mean. Help!\"\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Event for Mission Start in Lua\nDESCRIPTION: This snippet demonstrates how to log a custom event indicating a mission has started within a Roblox game. The event captures the occurrence without any associated value, helping track the frequency of mission starts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/custom-events.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\nAnalyticsService:LogCustomEvent(\n    player,\n    \"MissionStarted\" -- Event name\n)\n```\n\n----------------------------------------\n\nTITLE: V2 Resource Error Model JSON Example\nDESCRIPTION: Demonstrates the standard error response format for v2 resource methods, including error code, message, and details\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"INVALID_ARGUMENT\",\n  \"message\": \"The provided filter is invalid.\",\n  \"details\": [\n    {\n      \"...\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Middle Trim Assets in Roblox\nDESCRIPTION: Code snippet showing the CFrame position and orientation values for placing middle trim assets. Includes coordinates for ExtTrimAShort, ExtTrimAMid, ExtTrimALong and ExtTrimACorner pieces.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_34\n\nLANGUAGE: Roblox\nCODE:\n```\nCFrame.Position: -24, 26, 195\nCFrame.Orientation: 0, 90, 0\n\nCFrame.Position: -24, 26, 194\nCFrame.Orientation: 0, 0, 0\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Floor Parts in Roblox\nDESCRIPTION: This code snippet demonstrates how to create and configure floor parts with specific sizes and positions in a Roblox environment. It includes setting up both indoor and outdoor floor areas.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n-- Create indoor floor part\nlocal indoorFloor = Instance.new(\"Part\")\nindoorFloor.Size = Vector3.new(57.5, 6, 142)\nindoorFloor.Position = Vector3.new(-123.75, 2, 281)\nindoorFloor.Parent = workspace\n\n-- Create outdoor floor part\nlocal outdoorFloor = Instance.new(\"Part\")\noutdoorFloor.Size = Vector3.new(13, 6, 64)\noutdoorFloor.Position = Vector3.new(-86.5, 7, 158)\noutdoorFloor.Parent = workspace\n\n-- Anchor all floor parts\nindoorFloor.Anchored = true\noutdoorFloor.Anchored = true\n```\n\n----------------------------------------\n\nTITLE: Event Handling for PhotoBooth Actions\nDESCRIPTION: Connecting to various PhotoBooth events to handle different states of the photo-taking process.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/photo-booth.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.countdownStarted:Connect(function()\n\tprint(\"The countdown has started\")\nend)\n\nPhotoBooth.printoutShown:Connect(function()\n\tprint(\"The printout is showing\")\nend)\n\nPhotoBooth.promptShown:Connect(function()\n\tprint(\"The camera prompt is showing\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamps - JSON\nDESCRIPTION: This snippet demonstrates the format for representing timestamps in Open Cloud APIs using RFC 3339. It ensures timestamps are always Z-normalized with appropriate fractional digits.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/types.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"timestamp\": \"1972-01-01T10:00:20.021Z\" }\n```\n\n----------------------------------------\n\nTITLE: Constructing Sliders in Roblox UI\nDESCRIPTION: Outlines the process to add and configure sliders in the settings menu. Users can interact and adjust values through draggable slider widgets managed by UIDragDetector. This includes creating a parent frame for sliders and setting essential properties to ensure fluid and natural user controls.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Insert a new `Class.Frame` into the **SettingsMenu** container and rename it **EffectsVolumeSlider**.\n   ...\n2. With the **EffectsVolumeSlider** frame selected, set the following properties:\n   - `Class.Frame.AnchorPoint|AnchorPoint` = `0.5`\n   - `Class.Frame.BackgroundTransparency|BackgroundTransparency` = `1`\n   - `Class.Frame.Position|Position` = `0.5, 0, 0.35, 0`\n   - `Class.Frame.Size|Size` = `0.8, 0, 0.1, 0`\n...\n```\n\n----------------------------------------\n\nTITLE: React Button Component - Application Link\nDESCRIPTION: Creates a call-to-action button that directs users to the Community Feedback Program application on the Roblox Developer Forum\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/feedback.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button href=\"https://devforum.roblox.com/t/community-feedback-program-application/1034529\" size='large' variant='contained' style={{width:200}}>Apply</Button>\n```\n\n----------------------------------------\n\nTITLE: Customizing Daily Rewards Configuration in Lua\nDESCRIPTION: This snippet demonstrates how to customize additional options for daily rewards, including hiding rewards on join and aligning rewards to streak reset time.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/engagement-rewards.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n[Types.RewardType.Daily] = {\n    tabDisplayName = \"Daily\",\n    tabOrder = 2,\n    description = \"Play daily to unlock rewards!\",\n    isHiddenOnJoin = true,\n    isAlignedToStreakResetTime = true,\n    rewards = {\n        DailyStreak1 = {\n            icon = 116913478160966,\n            displayName = \"Ice Lance\",\n            requiredDaysVisitedStreak = 1,\n        },\n        -- more\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to Program Cards - React JSX\nDESCRIPTION: This snippet adds action buttons to the `Card` components for creators, allowing users to navigate to detailed information on specific programs. Each button uses the Material-UI design framework for consistent styling and layout.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardActions>\n        <Button href=\"/creator-programs/brand-developer-directory\" variant=\"contained\" color=\"secondary\" size='large'>Learn More</Button>\n    </CardActions>\n```\n\n----------------------------------------\n\nTITLE: Activating Vibration Motor in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to activate a specific vibration motor on a gamepad using HapticService's SetMotor method, which requires both a gamepad type and a vibration amplitude between 0 and 1. This snippet specifically targets the large motor once its support is confirmed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal HapticService = game:GetService(\"HapticService\")\n\nlocal gamepad = Enum.UserInputType.Gamepad1\nlocal isVibrationSupported = HapticService:IsVibrationSupported(gamepad)\n\nif isVibrationSupported then\n\tlocal largeMotor = HapticService:IsMotorSupported(gamepad, Enum.VibrationMotor.Large)\n\tif largeMotor then\n\t\tHapticService:SetMotor(gamepad, Enum.VibrationMotor.Large, 0.5)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Creating endStates Module Table (Roblox Lua)\nDESCRIPTION: This snippet creates an empty module table named `endStates` in GameSettings. This module will store the possible ways that the game can end (e.g. TimerUp, FoundWinner).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\n-- Game Variables\nGameSettings.intermissionDuration = 5\nGameSettings.matchDuration = 10\nGameSettings.minimumPlayers = 2\nGameSettings.transitionTime = 5\n\n-- Possible ways that the game can end.\nGameSettings.endStates = {\n}\n\nreturn GameSettings\n```\n\n----------------------------------------\n\nTITLE: Handling Token Collection Event\nDESCRIPTION: Connect to the collected event to log player interactions with tokens or regions, tracking the player, item name, and total tokens collected\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.collected:Connect(function(player, itemName, totalCollected)\n\tprint(player.DisplayName, itemName, totalCollected)\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Season Tiers and Rewards in Lua\nDESCRIPTION: Defines a season tier structure with XP thresholds and both free and premium rewards. Each tier specifies an upperBoundXP requirement and contains reward details including icons, display names, and reward IDs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/season-passes.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ntiers = {\n        [1] = {\n            upperBoundXP = 100,\n            freeReward = {\n                icon = 128181721602852,\n                displayName = \"Ice Lance\",\n                rewardId = \"iceLance\",\n            },\n            premiumReward = {\n                icon = 95882371958115,\n                displayName = \"Blast Shield\",\n                rewardId = \"blastShield\",\n            },\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Showing Custom Info Modal in LocalScript\nDESCRIPTION: Handle the showInfoModal event when custom modals are enabled, allowing custom UI interactions when the token tracker is clicked\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.showInfoModal:Connect(function()\n\tlocal infoModal = Players.LocalPlayer.PlayerGui.InfoModal\n\tinfoModal.Enabled = true\nend)\n```\n\n----------------------------------------\n\nTITLE: Searching an Array with ipairs() in Luau\nDESCRIPTION: This function uses ipairs() to search an array of ships and return the position of a specific ship in the waiting list. It demonstrates how to iterate through an array and return a value based on a condition.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/return-values-from-tables.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal shipToFind = \"Void Racer\"\n\n-- Ships waiting for repair\nlocal waitingShips = {\"Battle Sun\", \"Void Racer\", \"The Big Slow\"}\n\n-- Get place in line\nlocal function getPlaceInLine(shipName)\n\tfor placeInLine, ship in ipairs(waitingShips) do\n\t\tif ship == shipName then\n\t\t\treturn placeInLine\n\t\tend\n\tend\nend\n\n--Print place in line\nlocal placeInLine = getPlaceInLine(shipToFind)\nprint(\"Your place in line is \" .. placeInLine)\n```\n\n----------------------------------------\n\nTITLE: Handling User Input State for Blaster Activation in Roblox\nDESCRIPTION: Function that determines when the blaster activates based on input state. The code uses Enum.UserInputState.End to activate the blaster when the button is released, demonstrating how input timing affects gameplay responsiveness.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onBlasterActivated(_actionName: string,\n  inputState: Enum.UserInputState, _inputObject: InputObject)\n    if inputState == Enum.UserInputState.End then  -- updated line, be sure to change back\n        attemptBlastClient()\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring EmoteWheel Client Settings\nDESCRIPTION: Shows how to configure the EmoteWheel GUI type for the emote interface.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.configureClient({\n\tguiType = EmoteBar.GuiType.EmoteWheel,\n})\n```\n\n----------------------------------------\n\nTITLE: Using rawset for Module Assignment\nDESCRIPTION: Example showing the recommended way to assign table members in modules using rawset to avoid metamethod interference when working with sandboxed containers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/capabilities.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nGlobal.LuaGlobals.rawset\n```\n\n----------------------------------------\n\nTITLE: Processing Receipts in Lua\nDESCRIPTION: Processes marketplace receipts, determining if a purchase belongs to a bundle and executing necessary actions using Bundles' processReceipt function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function processReceipt(receiptInfo): Enum.ProductPurchaseDecision\n    local userId, productId = receiptInfo.PlayerId, receiptInfo.ProductId\n    local player = Players:GetPlayerByUserId(userId)\n\n    if not player then\n        return Enum.ProductPurchaseDecision.NotProcessedYet\n    end\n\n    local handler = receiptHandlers[productId]\n    local success, result = pcall(handler, receiptInfo, player)\n\n    if not success or not result then\n        warn(\"Failed to process receipt:\", receiptInfo, result)\n        return Enum.ProductPurchaseDecision.NotProcessedYet\n    end\n\n    return Enum.ProductPurchaseDecision.PurchaseGranted\nend\n\nlocal function receiptHandler(receiptInfo: { [string]: any }, player: Player)\n    local bundleId, _bundle = Bundles.getBundleByProductId(receiptInfo.ProductId)\n\n    if bundleId then\n        local purchaseDecision = Bundles.processReceiptAsync(player, bundleId, receiptInfo)\n        return purchaseDecision == Enum.ProductPurchaseDecision.PurchaseGranted\n    end\n\n    return false\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Respawn Time in Roblox\nDESCRIPTION: This Lua code snippet demonstrates how to customize the respawn time for players in a Roblox game. It accesses the `Players` service and sets the `RespawnTime` property to 10 seconds, allowing control over the duration players wait before respawning.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nPlayers.RespawnTime = 10 -- new line, in seconds\n```\n\n----------------------------------------\n\nTITLE: Initializing Maximum Player Spaces in Roblox Lua\nDESCRIPTION: This snippet creates an IntValue instance to represent the maximum number of spaces a player can hold items. It sets the value to 6, a starting point for testing the player inventory size.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/finishing-the-project.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal maxSpaces = Instance.new(\"IntValue\")\\nmaxSpaces.Name = \"Spaces\"\\n-- 6 as a possible value for a player's bag\\nmaxSpaces.Value = 6\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Items and Upgrade Cost in Roblox Lua\nDESCRIPTION: This snippet defines two values for shop functionality: the maximum number of items a player can hold (recommended at 15) and the cost to upgrade (recommended at 500). These values are set as initial variables for the shop.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/finishing-the-project.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Possible values for a game\\nlocal newMaxItems = 15\\nlocal upgradeCost = 500\n```\n\n----------------------------------------\n\nTITLE: Streaming Property Configuration in Roblox Studio\nDESCRIPTION: This snippet demonstrates how to configure streaming properties in Roblox Studio. These properties control instance streaming behavior and must be set on the Workspace object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nworkspace.ModelStreamingBehavior = Enum.ModelStreamingBehavior.Improved\nworkspace.StreamingIntegrityMode = Enum.StreamingIntegrityMode.Default\nworkspace.StreamingMinRadius = 100\nworkspace.StreamingTargetRadius = 1000\nworkspace.StreamOutBehavior = Enum.StreamOutBehavior.Default\n```\n\n----------------------------------------\n\nTITLE: Initializing Light Part and Variables in Lua\nDESCRIPTION: Sets up variables for the lamp part, light, brightness change, and time interval. This code establishes the foundation for controlling the light's behavior.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal lightPart = script.Parent\nlocal light = lightPart.SpotLight\n\n-- How much the light's brightness will change each time\nlocal brightnessChange = 1\n-- How often in seconds the light will change brightness\nlocal timeChange = 1\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Game Thumbnail - REST API\nDESCRIPTION: Updates the thumbnail of a localized game by its gameId and languageCode by providing image data. Requires the necessary permissions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/image\n```\n\n----------------------------------------\n\nTITLE: Bottom Right Perimeter Wall Configuration\nDESCRIPTION: Configuration values for the bottom right perimeter section, including three wall segments matching the bottom left pattern.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_8\n\nLANGUAGE: roblox\nCODE:\n```\nLeft wall: Size(5, 35, 5), CFrame.Position(-27.5, 19.5, 32.5)\nMiddle wall: Size(12, 45, 15), CFrame.Position(-29, 24.5, 22.5)\nRight wall: Size(20, 20, 40), CFrame.Position(-35, 15, 0)\n```\n\n----------------------------------------\n\nTITLE: Initializing Trap Part Reference in Luau\nDESCRIPTION: Sets up a variable to reference the script's parent part, which will act as the trap.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/traps-with-if-statements.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- If a player touches this part, set their health to 0\n\nlocal trapPart = script.Parent\n```\n\n----------------------------------------\n\nTITLE: User Chat Authorization with TextChatService in Roblox\nDESCRIPTION: This code snippet uses methods from Class.TextChatService to check if users are permitted to chat or direct chat in Roblox. It ensures respect for users' privacy and content maturity settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/guidelines.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n`Class.TextChatService:CanUserChatAsync()`\n```\n\nLANGUAGE: Lua\nCODE:\n```\n`Class.TextChatService:CanUserDirectChatAsync()`\n```\n\nLANGUAGE: Lua\nCODE:\n```\n`Class.TextChatService:CanUsersChatAsync()`\n```\n\nLANGUAGE: Lua\nCODE:\n```\n`Class.TextChatService:CanUsersDirectChatAsync()`\n```\n\n----------------------------------------\n\nTITLE: Configuring Touch Button Layout in Roblox Lua\nDESCRIPTION: Module script that handles the dynamic positioning and scaling of the blast button relative to the default jump button. It includes touch input detection and visibility toggling based on input type.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal TOUCH_BUTTON_SIZE_RATIO_TO_JUMP_BUTTON = 0.75\n\nlocal function setupTouchButtonAsync(gui: ScreenGui)\n\tlocal blastButton = gui.BlastButton\n\n\tif not UserInputService.TouchEnabled then\n\t\treturn\n\tend\n\n\tlocal jumpButton =\n\t\tlocalPlayer.PlayerGui:WaitForChild(\"TouchGui\"):WaitForChild(\"TouchControlFrame\"):WaitForChild(\"JumpButton\")\n\n\tlocal function updateTouchButtonSizeAndPosition()\n\t\tlocal scaledTouchButtonSize = UDim2.fromOffset(\n\t\t\tjumpButton.AbsoluteSize.X * TOUCH_BUTTON_SIZE_RATIO_TO_JUMP_BUTTON,\n\t\t\tjumpButton.AbsoluteSize.Y * TOUCH_BUTTON_SIZE_RATIO_TO_JUMP_BUTTON\n\t\t)\n\n\t\tblastButton.Size = scaledTouchButtonSize\n\t\tblastButton.Position = jumpButton.Position + UDim2.fromOffset(jumpButton.AbsoluteSize.X, 0)\n\tend\n\tjumpButton:GetPropertyChangedSignal(\"AbsoluteSize\"):Connect(updateTouchButtonSizeAndPosition)\n\tjumpButton:GetPropertyChangedSignal(\"AbsolutePosition\"):Connect(updateTouchButtonSizeAndPosition)\n\tupdateTouchButtonSizeAndPosition()\n\n\tlocal function updateTouchVisibility()\n\t\tlocal lastInputType = UserInputService:GetLastInputType()\n\t\tlocal isTouchInput = lastInputType == Enum.UserInputType.Touch\n\t\tblastButton.Visible = isTouchInput\n\tend\n\tUserInputService.LastInputTypeChanged:Connect(updateTouchVisibility)\n\tupdateTouchVisibility()\nend\n\nreturn setupTouchButtonAsync\n```\n\n----------------------------------------\n\nTITLE: Configuring Friends Locator with All Options in Lua\nDESCRIPTION: This snippet demonstrates how to configure all available options for the Friends Locator module. It sets values for alwaysOnTop, showAllPlayers, teleportToFriend, thresholdDistance, and maxLocators.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/friends-locator.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nFriendsLocator.configure({\n\talwaysOnTop = true,\n\tshowAllPlayers = false,\n\tteleportToFriend = true,\n\tthresholdDistance = 100,\n\tmaxLocators = 10\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the Platform Variable in Luau\nDESCRIPTION: This snippet creates a variable to reference the platform object in Roblox, allowing for easy manipulation within the script. It requires the script to be a child of the platform object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal platform = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Managing Force Field Duration in scheduleDestroyForceField\nDESCRIPTION: This script handles force field removal by checking three conditions: player acclimation time, blaster activation, and character reset. It uses event connections and a delay to manage force field duration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\n-- End force field if player blasts\nlocal blasterStateAttribute = getBlasterStateAttribute()\nattributeChangedConnection = player:GetAttributeChangedSignal(blasterStateAttribute):Connect(function()\n\tlocal currentBlasterState = player:GetAttribute(blasterStateAttribute)\n\tif currentBlasterState == BlasterState.Blasting then\n\t\tendForceField()\n\tend\nend)\n\n-- End force field if player resets\ncharacterRespawnedConnection = player.CharacterRemoving:Connect(endForceField)\n\n-- End force field after 8 seconds\ntask.delay(MAX_FORCE_FIELD_TIME, endForceField)\n```\n\n----------------------------------------\n\nTITLE: Removing the Last Value from an Array in Luau\nDESCRIPTION: This code shows how to remove the last value from an array using table.remove() without specifying an index. It then prints the updated array.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nplayerItems = {}\n\ntable.insert(playerItems, \"Potion\")\ntable.insert(playerItems, \"Bread\")\ntable.insert(playerItems, \"Sleeping bag\")\n\ntable.remove(playerItems)\n\nprint(playerItems)\n```\n\n----------------------------------------\n\nTITLE: Diversifying Example for Player Categorical Signal\nDESCRIPTION: An example implementation of the diversifying formula using RpgClass as the attribute. It calculates the ratio of players with the same RpgClass and then inverts it to prioritize class diversity.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal num_players_same_RpgClass = 15\nlocal occupancy = 19\n\nlocal score = num_players_same_RpgClass / occupancy\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Defining V2 Resource Specification Extensions\nDESCRIPTION: This snippet defines the specification extensions used in V2 resources that enhance the OpenAPI description. It lists each extension with its location and provides a detailed description of its purpose.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/openapi.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"| Extension                             | Location         | Description                                                                                                                                                                                    |\\n|---------------------------------------|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\\n| `x-categories`                        | OpenAPI Object   | List of strings. All resource categories.                                                                                                                                                      |\\n| `x-visibility`                        | Operation Object | Boolean. The visibility of the operation.                                                                                                                                                      |\\n| `x-roblox-docs`                       | Operation Object | Object. Associates an operation with a category and resource.                                                                                                                                  |\\n| `x-long-running-operation-parameters` | Operation Object | Object. References the metadata and response for the operation's long running response.                                                                                                        |\\n| `x-aep-resource`                      | Schema Object    | Object. An extension annotating the resource type. Has close compatibility to [AEP-4](https://aep.dev/4/#annotating-resource-types), one of the [API Enhancement Proposals](https://aep.dev/). |\\n| `x-oneOf`                             | Schema Object    | Object. Each field contains a list of properties in the schema. Only one of the properties should be present.                                                                                  |\\n| `x-resource`                          | Schema Object    | Boolean. Whether the schema is a resource.                                                                                                                                                     |\\n| `x-immutable`                         | Schema Object    | Boolean. Whether the schema is immutable.                                                                                                                                                      |\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Right Overhang Block Parts\nDESCRIPTION: Configuration parameters for creating block parts that form the right side of the roof overhang. Includes specific size, position, color, and material properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_30\n\nLANGUAGE: Properties\nCODE:\n```\nSize: 12, 5, 90\nCFrame.Position: -14, 38.5, 80\nColor: 181, 173, 156\nMaterial: Concrete\nMaterialVariant: Concrete_Board_Formed_A\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Parts for Columns in Roblox Studio\nDESCRIPTION: Instructions for adding and configuring block parts to create columns in a Roblox environment. Includes specific size, position, orientation, color, and material properties for each part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example for configuring a block part\nlocal part = Instance.new(\"Part\")\npart.Size = Vector3.new(15, 20, 5)\npart.CFrame = CFrame.new(-22.5, 20, 238.5)\npart.Orientation = Vector3.new(0, 0, 0)\npart.Color = Color3.fromRGB(248, 248, 248)\npart.Material = Enum.Material.Concrete\npart.MaterialVariant = \"Concrete_Ribbed_A\"\npart.Parent = workspace\n```\n\n----------------------------------------\n\nTITLE: Interval Execution with Sync in Lua\nDESCRIPTION: This snippet shows how to set up intervals that execute a callback at a specified frequency in Roblox. It uses the 'Interval' class and can be synced with audio configurations. Functions defined within handle custom behaviors during the interval. Synchronizing with audio involves referencing audio configurations and specifying times relative to the audio duration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nSchema.OnRun = function()\\n\\tprint(\"OnRun (Client)\")\\n\\n\\tlocal MainAudio = Schema:audio({\\n\\t\\tStartTime = 1,\\n\\t\\tSoundId = \"rbxassetid://1838673350\",\\n\\t})\\n\\n\\tlocal ClientTimerUpdate = Schema:interval({\\n\\t\\tFrequency = 1,\\n\\t\\tSyncToAudio = {\\n\\t\\t\\tStartAtAudioTime = 2.5,\\n\\t\\t\\tEndAtAudioTime = 10,\\n\\t\\t\\tAudio = MainAudio\\n\\t\\t},\\n\\t\\tOnInterval = function(self)\\n\\t\\t\\tprint(MainAudio.Sound.TimePosition, MainAudio.CurrentSoundIntensityRatio)\\n\\t\\tend,\\n\\t})\\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Player Movement Parameters in Lua\nDESCRIPTION: This code segment allows customization of player movement settings including growth modifier, starting move speed, and speed boost per level.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/personalize-the-game.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Multiplier determines how much players need to move before a level; 1 = small amount of movement, 3 much more movement\nlocal growthModifier = 1.2\n-- How fast a player starts with 0 levels\nlocal startMoveSpeed = 30\n-- The amount of WalkSpeed added per level\nlocal speedBoostPerLevel = 3\n```\n\n----------------------------------------\n\nTITLE: Initialize Tool Methods in Roblox Lua Script\nDESCRIPTION: Defines basic tool methods such as handling tool equip and activate events, connecting them to appropriate functions. It requires the Blaster model from Roblox inventory to function. Inputs include tool actions, and the outputs are the function responses to the tool events. Ensure to add the Blaster model to your StarterPack.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal tool = script.Parent\n\nlocal MAX_MOUSE_DISTANCE = 1000\n\nlocal function getWorldMousePosition() end\n\nlocal function toolEquipped()\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\nend\n\n-- Connect events to appropriate functions\ntool.Equipped:Connect(toolEquipped)\ntool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Section Rendering with React\nDESCRIPTION: Implements a dynamic rendering mechanism for Roblox platform sections, using map functions to generate responsive grid layouts with content, images, and buttons\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/platform.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{sections.map((section, index) => (\n  <Grid style={{ marginBottom: 48 }} item xs={12} key={index}>\n    {section.title && (\n      <Typography variant='h1'>{section.title}</Typography>\n    )}\n    <div style={{ marginTop: 16, marginBottom: 48 }}>\n      {section.description && (\n        <p>{section.description}</p>\n      )}\n      {section.buttons && section.buttons.map((button, btnIndex) => (\n        <Button\n          key={btnIndex}\n          style={{ marginTop: 8, marginRight: 24 }}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          href={button.href}\n        >\n          {button.text}\n        </Button>\n      ))}\n    </div>\n    {section.content && (\n      <Grid container spacing={4}>\n        {section.content.map((content, contentIndex) => {\n          const mdValue = 12 / section.content.length;\n          return (\n            <Grid item xs={12} sm={6} md={mdValue} key={contentIndex}>\n              <div style={{ marginBottom: 48 }}>\n                {content.image && (\n                  <img\n                    style={{ width: '100%', aspectRatio: 16/9, height: 'auto', objectFit: 'cover' }}\n                    src={content.image}\n                    alt=\"\"\n                  />\n                )}\n              </div>\n            </Grid>\n          );\n        })}\n      </Grid>\n    )}\n  </Grid>\n))}\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook Notifications with Sample Payload\nDESCRIPTION: This snippet provides a JSON schema of the 'SampleNotification' type that is used to test whether the webhook can successfully receive notifications. The payload includes notification ID, event type, event time, and event payload containing user ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/webhook-notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Body\": {\n    \"NotificationId\": \"string\",\n    \"EventType\": \"SampleNotification\",\n    \"EventTime\": \"2023-12-30T16:24:24.2118874Z\", // Type: ISO 8601 Timestamp\n    \"EventPayload\": {\n      \"UserId\": 1 // Type: Long\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies for OAuth Sample App\nDESCRIPTION: This bash command installs the app's dependencies as defined in the `package.json` file using npm. Installing these dependencies is necessary for the app to function correctly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-sample.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary and PlayerAdded Event - Getting Player Name\nDESCRIPTION: Inside the `setPoints` function, this snippet retrieves the name of the new player and prints a greeting message using the player's name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setPoints(newPlayer)\n\tlocal name = newPlayer.Name\n\tprint(\"hello \" .. name)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating DockWidgetPluginGuiInfo Object in Roblox Studio - Lua\nDESCRIPTION: This snippet demonstrates how to create a new DockWidgetPluginGuiInfo object, setting its initial state, dimensions, and visibility. It outlines the required parameters for the constructor.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Create new \"DockWidgetPluginGuiInfo\" object\nlocal widgetInfo = DockWidgetPluginGuiInfo.new(\n\tEnum.InitialDockState.Float, -- Widget will be initialized in floating panel\n\ttrue,   -- Widget will be initially enabled\n\tfalse,  -- Don't override the previous enabled state\n\t200,    -- Default width of the floating window\n\t300,    -- Default height of the floating window\n\t150,    -- Minimum width of the floating window\n\t150     -- Minimum height of the floating window\n)\n\n-- Create new widget GUI\nlocal testWidget = plugin:CreateDockWidgetPluginGui(\"TestWidget\", widgetInfo)\ntestWidget.Title = \"Test Widget\"  -- Optional widget title\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Laser Part in Lua\nDESCRIPTION: Creates a new Part instance for the laser beam, sets its properties, and adds it to the workspace and Debris service.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nfunction LaserRenderer.createLaser(toolHandle, endPosition)\n\tlocal startPosition = toolHandle.Position\n\n\tlocal laserDistance = (startPosition - endPosition).Magnitude\n\tlocal laserCFrame = CFrame.lookAt(startPosition, endPosition) * CFrame.new(0, 0, -laserDistance / 2)\n\n\tlocal laserPart = Instance.new(\"Part\")\n\tlaserPart.Size = Vector3.new(0.2, 0.2, laserDistance)\n\tlaserPart.CFrame = laserCFrame\n\tlaserPart.Anchored = true\n\tlaserPart.CanCollide = false\n\tlaserPart.Color = Color3.fromRGB(225, 0, 0)\n\tlaserPart.Material = Enum.Material.Neon\n\tlaserPart.Parent = workspace\n\n\t-- Add laser beam to the Debris service to be removed & cleaned up\n\tDebris:AddItem(laserPart, SHOT_DURATION)\nend\n```\n\n----------------------------------------\n\nTITLE: Marketplace API Query URL\nDESCRIPTION: This URL is used to query avatar items from the Roblox Marketplace.  You must replace `[params]` with appropriate query parameters to customize the search.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/assets/api.md#2025-04-21_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\n\"https://catalog.roblox.com/v1/search/items/details?[params]\"\n```\n\n----------------------------------------\n\nTITLE: Combining Loops for Continuous Light Glowing Effect in Lua\nDESCRIPTION: Wraps both increasing and decreasing for loops inside a while loop to create a continuous glowing effect. This structure allows the light to brighten and dim repeatedly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/glow-lights-with-for-loops.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nwhile true do\n   for currentBrightness = 0, 5, brightnessChange do\n      light.Brightness = currentBrightness\n      task.wait(timeChange)\n   end\n\n   for currentBrightness = 5, 0, -brightnessChange do\n      light.Brightness = currentBrightness\n      task.wait(timeChange)\n   end\nend\n```\n\n----------------------------------------\n\nTITLE: Processing Player Damage and Score Updates in Lua\nDESCRIPTION: Code that handles damage application to players and updates team scores. It checks for valid humanoid, applies damage, and increments team score if the player is tagged out.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/create-teams.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n\tlocal humanoid = character and character:FindFirstChild(\"Humanoid\")\n\tif humanoid and humanoid.Health > 0 then\n\t\tlocal damage = math.min(damageAmount, humanoid.Health)\n\t\thumanoid:TakeDamage(damage)\n\t\tif humanoid.Health <= 0 then\n\t\t\tScoring.incrementScore(playerBlasted, 1)\n\t\tend\n\tend\nend\n\nreturn onPlayerTagged\n```\n\n----------------------------------------\n\nTITLE: Setting Up Point Values in Roblox Luau\nDESCRIPTION: Script that defines variables for different point values that will be awarded based on the part's color. It includes variables for small points, large points, and point deduction.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Colors\nlocal blue = Color3.fromRGB(0, 0, 255)\nlocal green = Color3.fromRGB(0, 255, 0)\nlocal red = Color3.fromRGB(255, 0, 0)\n\n-- Points values\nlocal smallPoints = 10\nlocal largePoints = 50\nlocal losePoints = 100\n```\n\n----------------------------------------\n\nTITLE: Connecting to filterChanged Event in Lua\nDESCRIPTION: Demonstrates how to connect to the filterChanged event which fires when a filter is applied or removed. The callback receives both the new filter name and the old filter name as parameters. This can only be used in a LocalScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.filterChanged:Connect(function(newFilter, oldFilter)\n\tprint(\"Filter changed from\", oldFilter, \"to\", newFilter)\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Text Generation Request in Lua\nDESCRIPTION: Server script that demonstrates making text generation API requests using the OpenCloud module. Sets up the remote event and handles sending generated text to clients.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/generate-text.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Assumes the Open Cloud dev module is in ReplicatedStorage\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal oc = require(ReplicatedStorage.OpenCloud.V2)\n\nlocal chatEvent = Instance.new(\"RemoteEvent\")\nchatEvent.Name = \"ChatEvent\"\nchatEvent.Parent = ReplicatedStorage\n\n-- Form the HTTP request\nlocal requestLLM : oc.GenerateTextRequest = {\n  path = oc:UniversePath(\"<your_universe_id>\"),\n  user_prompt = \"Tell me about Roblox in under 200 characters.\",\n  system_prompt = \"You're extremely polite.\",\n  context_token = \"\",\n  max_tokens = 100,\n  model= \"default\"\n}\n\nlocal resultLLM : oc.Result<oc.GenerateTextResponse> = oc:GenerateText(requestLLM)\n\nlocal npc = workspace:WaitForChild(\"NPCDog\") -- Replace with your NPC's name\nlocal head = npc:WaitForChild(\"Head\") -- Ensure your NPC has a Head part\n\n-- Fire the event to display the chat bubble\nchatEvent:FireAllClients(head, resultLLM.Response.generated_text)\n```\n\n----------------------------------------\n\nTITLE: Prompting Invite for Multiple Friends - Lua\nDESCRIPTION: This code snippet checks if a player can send an invite to multiple friends and then prompts the invitation if possible, using Roblox's SocialService for handling invites.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/invite-prompts.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\n-- Function to check whether the player can send an invite\nlocal function canSendGameInvite(sendingPlayer)\n\tlocal success, canSend = pcall(function()\n\t\treturn SocialService:CanSendGameInviteAsync(sendingPlayer)\n\tend)\n\treturn success and canSend\nend\n\nlocal canInvite = canSendGameInvite(player)\nif canInvite then\n\tSocialService:PromptGameInvite(player)\nend\n\n```\n\n----------------------------------------\n\nTITLE: Creating Contact Pose for Left Foot Cycle - Roblox Animation Editor\nDESCRIPTION: This snippet outlines the steps required to create a Contact pose for the left foot cycling animation using the Roblox Animation Editor. It includes an overview of setting the frame rate, adding keyframes for body parts, posing the upper body, legs, and arms, and saving the animation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/animation/create-an-animation.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. From the toolbar's **Avatar** tab, click **Animation Editor**. The [Animation Editor](../../../animation/editor.md) window displays.\n1. Select your rig. A contextual menu displays.\n1. In the **Animation Name** field, input a name for your animation, then click the **Create** button.\n1. **(Optional)** Set the timeline to 24 frames per second.\n   1. In the editor's playback tools, click the gear icon.\n   1. From the contextual menu, set **Frame Rate** to **24 fps**.\n1. Add a keyframe for each of the rig's body parts to the Animation Editor's track list.\n   1. In the **Animation Editor**, click the **+** button. A contextual menu displays.\n   1. Select **Add All Body**. The Animation Editor's track list updates with all the rig's body parts.\n   1. Right-click on the top bar beneath the timeline, then in the contextual menu, select **Add Keyframe**. The Animation Editor adds a keyframe for every body part in the timeline.\n1. Pose the rig's upper body in a bent position.\n   1. In the toolbar's **Home** tab, select the **Rotate** tool.\n   1. In the viewport, select and angle the **UpperTorso** body part so that the torso is slightly bent forward.\n   1. Select and angle the **Head** body part so that the rig's face is looking straight forward.\n1. Pose the rig's legs so that the left foot touches the ground in front of the rig while the right foot touches the ground behind the rig.\n   1. In the viewport, select and angle the **LeftUpperLeg**, **LeftLowerLeg**, and **LeftFoot** body parts until the left leg is bent while the left foot is slightly raised.\n   1. Repeat this process for the **RightUpperLeg**, **RightLowerLeg**, and **RightFoot** body parts until the right leg is bent while the foot's toes skim the ground.\n1. Pose the rig's arms so that each respective arm swings as far forward or behind the rig for the character's stride.\n   1. In the viewport, select and angle the **LeftUpperArm** and **LeftLowerArm** body parts until the left arm is visible and slightly bent behind the rig.\n   1. Repeat this process for the **RightUpperArm** and **RightLowerArm** body parts until the right arm is slightly bent in front of the rig.\n1. Save the animation.\n   1. In the **Media and Playback Controls**, select the ellipsis button. A contextual menu displays.\n   1. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Client Script for Translation Request in Lua\nDESCRIPTION: This Lua client script retrieves the player's locale ID and sends a request to a server function for translating a given text. The script uses the ReplicatedStorage service to access a remote function that performs the translation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/auto-translate-dynamic-content.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Client script\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal httpRequestFunction = ReplicatedStorage:WaitForChild(\"TranslateTextFunction\")\n\n-- Text to translate\nlocal textToTranslate = \"This is the example text to translate\"\n\n-- Get the player's locale\nlocal Players = game:GetService(\"Players\")\nlocal player = Players.LocalPlayer\n\n-- get the locale ID for the local player's locale or set to any supported locale string\nlocal locale = player.LocaleId\n\nlocal translatedText = httpRequestFunction:InvokeServer(textToTranslate, locale)\n\nprint(\"Translated text: \", translatedText)\n```\n\n----------------------------------------\n\nTITLE: Ordered DataStores Error Response JSON\nDESCRIPTION: Illustrates the simplified error response format for ordered data stores with code and message\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/errors.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"INVALID_ARGUMENT\",\n  \"message\": \"Invalid cursor.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Particular Key from a Sorted Map\nDESCRIPTION: Retrieves the value and sort key associated with a specific key in the sorted map. It demonstrates the use of GetAsync method and error handling with pcall.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/sorted-map.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal sortedMap = MemoryStoreService:GetSortedMap(\"SortedMap1\")\n\nlocal setSuccess, _ = pcall(function()\n\treturn sortedMap:SetAsync(\"User_1234\", 1000, 30, 3.14152)\nend)\nif setSuccess then\n\tprint(\"Set succeeded.\")\nend\n\nlocal item\nlocal getSuccess, getError = pcall(function()\n\titem = sortedMap:GetAsync(\"User_1234\")\nend)\nif getSuccess then\n\tprint(item)\nelse\n\twarn(getError)\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Operation Status with cURL\nDESCRIPTION: This Bash snippet demonstrates how to use cURL to call the Roblox API's Get Operation method to retrieve the status of an asset operation using an API key. The expected input is a valid operation ID in the request URL and an API key in the header. The output is the status of the asset operation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-assets.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://apis.roblox.com/assets/v1/operations/{operationId}' \\\n--header 'x-api-key: {$ApiKey}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Pricing in Lua for Roblox Bundles Package\nDESCRIPTION: This code shows two ways to configure bundle pricing: using a developer product or an in-experience currency. It demonstrates setting price type, dev product ID, or custom currency details.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- If you want to use a dev product, you must provide a unique devProductId, only used by one bundle.\n-- We will fetch bundle price and icon from the developer product\npricing = {\n    priceType = CurrencyTypes.PriceType.Marketplace,\n    devProductId = 1795621566,\n},\n\n-- Otherwise, if you want to use in-experience currency instead of a dev product, you can use the following instead:\n-- Price here is in the in-experience currency, not Robux\npricing = {\n    priceType = CurrencyTypes.PriceType.InExperience,\n    price = 79,\n    currencyId = \"Gems\",\n    icon = 18712203759,\n},\n```\n\n----------------------------------------\n\nTITLE: Partition Assignment Strategies\nDESCRIPTION: Details the different partition assignment methods for various MemoryStore data structures, including sorted maps, queues, and hash maps. Illustrates how data is distributed across partitions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/per-partition-limits.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Partition assignment\n\nPartition storage is different according to the data structure an item is being stored on. For sorted maps and queues, each data structure is assigned a single partition.\n\nFor hash maps, data is automatically distributed across multiple partitions.\n```\n\n----------------------------------------\n\nTITLE: Connecting Touch Event to Trap Part in Luau\nDESCRIPTION: Connects the onTouch function to the trap part's Touched event, ensuring it runs when the part is touched.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/traps-with-if-statements.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal trapPart = script.Parent\n\nlocal function onTouch(otherPart)\n\nend\n\ntrapPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Using Class Sets in String Matching - Luau\nDESCRIPTION: Details how to create and use class sets to capture patterns involving multiple character classes, using brackets for defining sets and the ^ character for negations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match1 = string.match(\"Hello!!! I am another string.\", \"[%l%p]+\")  -- Set\nprint(match1)  --> ello!!!\n\nlocal match2 = string.match(\"Hello!!! I am another string.\", \"%l%p+\")  -- Non-set\nprint(match2)  --> o!!!\n```\n\n----------------------------------------\n\nTITLE: Side Perimeter Wall Configuration\nDESCRIPTION: Configuration values for the side perimeter walls, consisting of left and right segments with matching dimensions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_6\n\nLANGUAGE: roblox\nCODE:\n```\nLeft wall: Size(105, 30, 35), CFrame.Position(-72.5, 20, 357.5)\nRight wall: Size(105, 30, 35), CFrame.Position(-72.5, 20, -37.5)\n```\n\n----------------------------------------\n\nTITLE: Setting Image Property for a Musical Notes Icon in Roblox\nDESCRIPTION: Sets the Image property of an ImageLabel to display a musical notes icon using a Roblox asset ID. This property requires a properly formatted asset ID string.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_4\n\nLANGUAGE: Roblox Studio\nCODE:\n```\nrbxassetid://101125859760167\n```\n\n----------------------------------------\n\nTITLE: Creating Module Grid Layout in JSX/Markdown\nDESCRIPTION: A grid layout component displaying various Roblox developer modules with video previews and descriptive captions. Uses a GridContainer component with two columns to showcase module buttons, videos, and descriptions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<GridContainer numColumns=\"2\">\n  <figure>\n    <Button href=\"../../resources/modules/selfie-mode.md\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Selfie mode</Button>\n\t  <video controls src=\"../../assets/developer-modules/selfie-mode/Showcase-SM.mp4\" width=\"100%\"></video>\n    <figcaption>Pose and capture memorable moments</figcaption>\n  </figure>\n  [... additional figures...]</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for Indoor Floor Parts in Roblox\nDESCRIPTION: This code snippet demonstrates how to set the Color, Material, and MaterialVariant properties for indoor floor parts in a Roblox environment. It uses specific values to create a distinct visual treatment for indoor surfaces.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Select indoor floor parts\nlocal indoorFloorParts = -- Your selection of indoor floor parts\n\n-- Set properties for indoor floor parts\nfor _, part in ipairs(indoorFloorParts) do\n    part.Color = Color3.fromRGB(248, 248, 248)\n    part.Material = Enum.Material.Concrete\n    part.MaterialVariant = \"GlossyTiles\"\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with TextChannel in Roblox\nDESCRIPTION: This code snippet demonstrates the use of Class.TextChannel to send messages within a Roblox experience. It ensures that messages comply with privacy settings and are appropriately text-filtered.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n`Class.TextChannel:SendAsync()`\n```\n\n----------------------------------------\n\nTITLE: Implementing Distance Validation in isHitValid Function in Lua\nDESCRIPTION: Code that checks if the distance between the hit position and the character is within the acceptable range. Returns false if the distance is too large.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nlocal function isHitValid(playerFired, characterToDamage, hitPosition)\n\t-- Validate distance between the character hit and the hit position\n\tlocal characterHitProximity = (characterToDamage.HumanoidRootPart.Position - hitPosition).Magnitude\n\tif characterHitProximity > MAX_HIT_PROXIMITY then\n\t\treturn false\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Offsetting a CFrame in Lua\nDESCRIPTION: This snippet demonstrates how to offset an object by a specific number of studs from its current position. It adds a Vector3 to a new CFrame created at the object's current position to move it upwards by 1.25 studs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\nredBlock.CFrame = CFrame.new(redBlock.Position) + Vector3.new(0, 1.25, 0)\n```\n\n----------------------------------------\n\nTITLE: Adding Humanoid Variable in preparePlayer() Function (Roblox Lua)\nDESCRIPTION: This snippet shows how to get access to the player's Died event. In PlayerManager > `preparePlayer()`, add a variable for the player's humanoid.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\n\tplayer:LoadCharacter()\n\n\tlocal character = player.Character or player.CharacterAdded:Wait()\n\tlocal sword = playerWeapon:Clone()\n\tsword.Parent = character\n\n\tlocal humanoid = character:WaitForChild(\"Humanoid\")\nend\n```\n\n----------------------------------------\n\nTITLE: Firing the MatchStart Event in Lua\nDESCRIPTION: This snippet fires the MatchStart event within the prepareGame function, signaling the start of the match and triggering the execution of any connected functions, such as `startTimer`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Type Checking in Luau\nDESCRIPTION: Demonstrates how to check variable types using the built-in type() function in Luau, showing type inference and type checking capabilities\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlogMessage = \"User has more than 10 items!\"\nprint(logMessage) --> User has more than 10 items!\nprint(type(logMessage)) --> string\n```\n\n----------------------------------------\n\nTITLE: Commenting Out Properties in ForceFieldClientVisuals\nDESCRIPTION: This snippet demonstrates how to comment out properties in the ForceFieldClientVisuals script, reverting to the default sparkling force field instead of a custom hexagonal one.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onCharacterAddedAsync(character: Model)\n    -- local forceField = character:WaitForChild(\"ForceField\", 3)\n    -- if not forceField then\n    -- return\n    -- end\n    -- forceField.Visible = false\n    -- localPlayer.PlayerGui:WaitForChild(\"ForceFieldGui\").Enabled = true\n    -- forceField.Destroying:Wait()\n    -- localPlayer.PlayerGui.ForceFieldGui.Enabled = false\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Died Event to removeActivePlayer (Lua)\nDESCRIPTION: This snippet connects the player's `Died` event to the `removeActivePlayer` function within the `preparePlayer()` function. When a player's humanoid dies, the `respawnPlayerInLobby()` and `removeActivePlayer()` functions are called, ensuring the player is removed from the active player count. This is achieved by adding `removeActivePlayer(player)` within the Died event connection's anonymous function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nhumanoid.Died:Connect(function()\n\trespawnPlayerInLobby(player)\n\tremoveActivePlayer(player)\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing Video on Part Surface in Roblox\nDESCRIPTION: Creates a Part instance with a SurfaceGui and VideoFrame to play a video on its surface. The script handles creating the necessary instances, setting up the video frame properties, waiting for the video to load, and starting playback.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/video-frames.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal screenPart = Instance.new(\"Part\")\nscreenPart.Size = Vector3.new(16, 9, 1)\nscreenPart.Position = Vector3.new(0, 8, -20)\nscreenPart.Orientation = Vector3.new(0, 180, 0)\nscreenPart.Anchored = true\nscreenPart.Parent = Workspace\n\nlocal surfaceGui = Instance.new(\"SurfaceGui\")\nsurfaceGui.Parent = screenPart\n\nlocal videoFrame = Instance.new(\"VideoFrame\")\nvideoFrame.Size = UDim2.new(1, 0, 1, 0)\nvideoFrame.Parent = surfaceGui\n\nvideoFrame.Looped = true\nvideoFrame.Video = \"rbxassetid://5608384572\"  -- Replace with your video's asset ID\n\nwhile not videoFrame.IsLoaded do\n\tvideoFrame.Loaded:Wait()\nend\n\nvideoFrame:Play()\n```\n\n----------------------------------------\n\nTITLE: Declares a new variable\nDESCRIPTION: This code snippet shows how to declare a new variable in Luau using the local keyword. The variable is currently uninitialized.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/create-a-script.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal myAnimal\n```\n\n----------------------------------------\n\nTITLE: Getting User Thumbnail with Tuple Returns\nDESCRIPTION: This snippet shows how to retrieve a user's thumbnail asynchronously in Roblox Lua. The GetUserThumbnailAsync method returns a tuple containing the content URL and a boolean indicating readiness.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tuples.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal userId = 156 -- builderman\nlocal thumbType = Enum.ThumbnailType.HeadShot\nlocal thumbSize = Enum.ThumbnailSize.Size420x420\nlocal content, isReady = Players:GetUserThumbnailAsync(userId, thumbType, thumbSize)\nprint(content, isReady) -- rbxthumb://type=AvatarHeadShot&id=156&w=420&h=420 true\n```\n\n----------------------------------------\n\nTITLE: Configuring Time of Day Settings in Roblox Lighting\nDESCRIPTION: Sets the ClockTime and GeographicLatitude properties to position the sun at an optimal angle for indoor lighting effects. The time is set to 3:45 PM to create dramatic lighting through windows.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#2025-04-21_snippet_2\n\nLANGUAGE: Roblox\nCODE:\n```\nClockTime = 15.6\nGeographicLatitude = 323\n```\n\n----------------------------------------\n\nTITLE: Configuring Wedge Part for Column Top in Roblox Studio\nDESCRIPTION: Instructions for adding and configuring a wedge part to create the top of a column in a Roblox environment. Includes specific size, position, orientation, color, and material properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_15\n\nLANGUAGE: Lua\nCODE:\n```\nlocal wedge = Instance.new(\"WedgePart\")\nwedge.Size = Vector3.new(7, 11, 21)\nwedge.CFrame = CFrame.new(-18.5, 25.5, 238.5) * CFrame.Angles(0, math.rad(-90), math.rad(180))\nwedge.Color = Color3.fromRGB(248, 248, 248)\nwedge.Material = Enum.Material.Concrete\nwedge.MaterialVariant = \"Concrete_Board_Formed_A\"\nwedge.Parent = workspace\n```\n\n----------------------------------------\n\nTITLE: Configuring ControllerPartSensor for Ground Detection\nDESCRIPTION: Setting up a GroundSensor to detect walkable surfaces using Roblox's sensor system\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/character-controllers.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- GroundSensor configuration\nGroundSensor.SearchDistance = 2\nGroundSensor.SensorMode = Enum.SensorMode.Floor\n```\n\n----------------------------------------\n\nTITLE: Setting Mood Animation using HumanoidDescription in Roblox Lua\nDESCRIPTION: This script sets a specific mood animation for a character's idle state using the HumanoidDescription system.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/moods.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\nif humanoid then\n\tlocal descriptionClone = humanoid:GetAppliedDescription()\n\tdescriptionClone.IdleAnimation = 10725833199\n\t-- Apply modified \"descriptionClone\" to humanoid\n\thumanoid:ApplyDescription(descriptionClone)\nend\n```\n\n----------------------------------------\n\nTITLE: Grid Layout Component in JSX/React\nDESCRIPTION: A responsive grid layout component using Material-UI style cards to display downloadable Roblox reference assets. Implements a 3-column layout on large screens with dynamic resizing for smaller devices.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/modeling/project-files.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container alignItems='stretch' style={{margin: -6}}>\n  <Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n    <Card style={{height: '100%'}}>\n      <CardContent style={{marginBottom:'66px'}}>\n        <!-- Card content structure repeats for each asset -->\n      </CardContent>\n      <CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n        <Button href=\"...\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Download</Button>\n      </CardActions>\n    </Card>\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Timeline Position for Second Pose\nDESCRIPTION: Instructions for positioning the timeline cursor at the midpoint (0:15) to create the second animation pose\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/adding-the-second-pose.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSet the current time to `0:15`\n```\n\n----------------------------------------\n\nTITLE: OneTime Bundle Type in Roblox\nDESCRIPTION: The OneTime bundle type is only available when initially offered to a player. It doesn't display on the HUD and cannot be reopened after closing until prompted again by the server.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n#### OneTime\n```\n\n----------------------------------------\n\nTITLE: 3D Import Tool in Roblox Studio\nDESCRIPTION: Import tool for bringing 3D models and textures into Roblox Studio, supporting .fbx and .obj file formats with associated texture files.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/avatar-tab.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**Import 3D** tool allows you to import nearly any type of `.fbx` or `.obj` and associated texture files into Studio.\n```\n\n----------------------------------------\n\nTITLE: Customizing the GUI with TextButton in Roblox Studio - Lua\nDESCRIPTION: This snippet illustrates how to customize the user interface of a widget by adding a TextButton to the newly created widget GUI. It includes property settings for the button.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Create new widget GUI\nlocal testWidget = plugin:CreateDockWidgetPluginGui(\"TestWidget\", widgetInfo)\ntestWidget.Title = \"Test Widget\"  -- Optional widget title\n\nlocal testButton = Instance.new(\"TextButton\")\ntestButton.BorderSizePixel = 0\ntestButton.TextSize = 20\ntestButton.TextColor3 = Color3.new(1,0.2,0.4)\ntestButton.AnchorPoint = Vector2.new(0.5,0.5)\ntestButton.Size = UDim2.new(1,0,1,0)\ntestButton.Position = UDim2.new(0.5,0,0.5,0)\ntestButton.SizeConstraint = Enum.SizeConstraint.RelativeYY\ntestButton.Text = \"Click Me\"\ntestButton.Parent = testWidget\n```\n\n----------------------------------------\n\nTITLE: Handling Printout Shown Event - Lua\nDESCRIPTION: This snippet connects a callback function to the printoutShown event, allowing for user feedback when the printout is displayed. This interaction enhances the user experience during photo captures. Can only be used within a Class.LocalScript. Requires the ReplicatedStorage service and the PhotoBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/photo-booth.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.printoutShown:Connect(function()\n\tprint(\"The printout is showing\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Events Temporarily\nDESCRIPTION: Prevents the speed boost from being applied multiple times by setting the CanTouch property to false after activation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal speedBoost = script.Parent\n\nlocal function onTouch(otherPart)\n  local character = otherPart.Parent\n  local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n  if humanoid and humanoid.WalkSpeed <= 50 then\n    humanoid.WalkSpeed += 10\n    speedBoost.CanTouch = false\n  end\nend\n\nspeedBoost.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Unlocking Emotes\nDESCRIPTION: Shows how to unlock a previously locked emote by name on the client.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.unlockEmote(\"Applaud\")\n```\n\n----------------------------------------\n\nTITLE: DataStores Class Definition in Python\nDESCRIPTION: This snippet defines a `DataStores` class in Python for interacting with the Roblox Data Stores API. It handles API key management, URL construction, and request headers.  The methods `get_entry`, `list_entries`, and `increment_entry` are defined for basic Data Store operations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport requests\nimport json\nimport base64\n\nclass DataStores:\n\n    def __init__(self):\n        self._base_url = \"https://apis.roblox.com/datastores/v1/universes/{universeId}\"\n        # API Key is saved in an environment variable signified by 'API_KEY'\n        self._apiKey = str(os.environ['API_KEY'])\n        self._universeId = \"UNIVERSE_ID\"\n        self.ATTR_HDR = 'Roblox-entry-Attributes'\n        self.USER_ID_HDR = 'Roblox-entry-UserIds'\n        self._objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries/entry'\n        self._increment_url = self._objects_url + '/increment'\n        self._version_url = self._objects_url + '/versions/version'\n        self._list_objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries'\n\n    def _H(self):\n        return { 'x-api-key' : self._apiKey }\n    def _get_url(self, path_format: str):\n        return f\"{self._config['base_url']}/{path_format.format(self._config['universe_id'])}\"\n\n        return r, attributes, user_ids\n\ndef get_entry(self, datastore, object_key, scope = None):\n        self._objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries/entry'\n        headers = { 'x-api-key' : self._apiKey }\n        params={\"datastoreName\" : datastore, \"entryKey\" : object_key}\n        if scope:\n            params[\"scope\"] = scope\n        r = requests.get(self._objects_url, headers=headers, params=params)\n        if 'Content-MD5' in r.headers:\n            expected_checksum = r.headers['Content-MD5']\n            checksum = base64.b64encode(hashlib.md5(r.content).digest())\n            #print(f'Expected {expected_checksum}, got {checksum}')\n\n        attributes = None\n        if self.ATTR_HDR in r.headers:\n            attributes = json.loads(r.headers[self.ATTR_HDR])\n        user_ids = []\n        if self.USER_ID_HDR in r.headers:\n            user_ids = json.loads(r.headers[self.USER_ID_HDR])\n\n        return r\n\n    def list_entries(self, datastore, scope = None, prefix=\"\", limit=100, allScopes = False, exclusive_start_key=None):\n        self._objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries'\n        headers = { 'x-api-key' : self._apiKey }\n        r = requests.get(self._objects_url, headers=headers, params={\"datastoreName\" : datastore, \"scope\" : scope, \"allScopes\" : allScopes, \"prefix\" : prefix, \"limit\" : 100, \"cursor\" : exclusive_start_key})\n        return r\n\n    def increment_entry(self, datastore, object_key, incrementBy, scope = None, attributes=None, user_ids=None):\n        self._objects_url = self._base_url +self._universeId+'/standard-datastores/datastore/entries/entry/increment'\n        headers = { 'x-api-key' : self._apiKey, 'Content-Type': 'application/octet-stream' }\n        params={\"datastoreName\" : datastore, \"entryKey\" : object_key, \"incrementBy\" : incrementBy}\n        if scope:\n            params[\"scope\"] = scope\n\n        r = requests.post(self._objects_url, headers=headers, params=params)\n        attributes = None\n        if self.ATTR_HDR in r.headers:\n            attributes = json.loads(r.headers[self.ATTR_HDR])\n        user_ids = []\n        if self.USER_ID_HDR in r.headers:\n            user_ids = json.loads(r.headers[self.USER_ID_HDR])\n\n        return r\n```\n\n----------------------------------------\n\nTITLE: Using DoubleSided Property for MeshParts\nDESCRIPTION: The DoubleSided property determines if both faces of a mesh are rendered. Useful for planar objects like leaves or cloth, but doubles rendering load as both sides must be processed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/assemble-an-asset-library.md#2025-04-21_snippet_4\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.MeshPart.DoubleSided\n```\n\n----------------------------------------\n\nTITLE: Closing ACM Programmatically with SetCore\nDESCRIPTION: This snippet demonstrates how to programmatically close the Avatar Context Menu (ACM) using `StarterGui:SetCore()` and setting the `AvatarContextMenuTarget` option to `nil`. This effectively closes the ACM if it is currently open.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-context-menu.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nStarterGui:SetCore(\"AvatarContextMenuTarget\", nil)\n```\n\n----------------------------------------\n\nTITLE: Handling Notification API Response\nDESCRIPTION: Displays the JSON response format from the Roblox notification API, which returns a notification ID\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/experience-notifications.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"users/505306092/notifications/6ca4d981-36fa-4255-82a1-14d95c116889\",\n  \"id\": \"6ca4d981-36fa-4255-82a1-14d95c116889\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PrismaticConstraint for Log Movement in Roblox\nDESCRIPTION: This code snippet explains how to set up a Class.PrismaticConstraint for a log assembly to move it 40 studs per second along the world's negative X axis. It includes information on attachment points and adjustable properties like ActuatorType to achieve the desired movement.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-moving-objects.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nTo configure a `Class.PrismaticConstraint` constraint:\n1. Create a new `Class.PrismaticConstraint` object targeting two attachments.\n2. Set **ActuatorType** to **Motor** to apply necessary forces for movement.\n3. Assign the points of movement, specifying the amount of studs each attachment is expected to move per second and the total force displayed as Rowtons that can be applied.\n```\n\n----------------------------------------\n\nTITLE: Collecting Multiple User Inputs in Lua\nDESCRIPTION: Code showing how to collect multiple inputs from the user utilizing storyMaker:GetInput(). This stores player responses in variables for later use in the story.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/finish-and-add.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal name1 = storyMaker:GetInput(\"What is your favorite name?\")\nlocal food1\n\nlocal story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \"\n```\n\n----------------------------------------\n\nTITLE: User Information Response - JSON without Profile Scope\nDESCRIPTION: This JSON example represents the minimal response when retrieving user information without the profile scope. It includes only the user's Roblox ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"sub\": \"1516563360\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Full Bundle Configuration with Multiple Items\nDESCRIPTION: Complete example of a bundle configuration using marketplace pricing, multiple items, and detailed metadata\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal starterBundle: Types.RelativeTimeBundle = {\n    bundleType = Types.BundleType.RelativeTime,\n    pricing = {\n        priceType = CurrencyTypes.PriceType.Marketplace,\n        devProductId = <DEV_PRODUCT_ID>,\n    },\n    includedItems = {\n        [1] = {\n            itemType = ItemTypes.ItemType.Robux,\n            priceInRobux = 49,\n            icon = <IMAGE_ASSET_ID>,\n            metadata = {\n                caption = {\n                    text = \"x1\",\n                    color = Color3.fromRGB(236, 201, 74),\n                },\n            },\n        },\n        [2] = {\n            itemType = ItemTypes.ItemType.Robux,\n            priceInRobux = 99,\n            icon = <IMAGE_ASSET_ID>,\n            metadata = {\n                caption = {\n                    text = \"x1\",\n                    color = Color3.fromRGB(236, 201, 74),\n                },\n            },\n        },\n        [3] = {\n            itemType = ItemTypes.ItemType.Robux,\n            priceInRobux = 149,\n            icon = <IMAGE_ASSET_ID>,\n            metadata = {\n                caption = {\n                    text = \"x1\",\n                    color = Color3.fromRGB(236, 201, 74),\n                },\n            },\n        },\n    },\n    singleUse = true,\n    durationInSeconds = 900,\n    includesOfflineTime = false,\n    metadata = {\n        displayName = \"STARTER BUNDLE\",\n        description = \"Save 75% and get a head start!\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Beam Texture Modes in Roblox\nDESCRIPTION: Demonstrates the TextureMode property options for Roblox beams. Supports Wrap, Static, and Stretch modes that determine how textures repeat across the beam length.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/effects/beams.md#2025-04-21_snippet_1\n\nLANGUAGE: roblox\nCODE:\n```\nEnum.TextureMode.Wrap\nEnum.TextureMode.Static\nEnum.TextureMode.Stretch\n```\n\n----------------------------------------\n\nTITLE: Removing a Found Value from an Array in Luau\nDESCRIPTION: This snippet shows how to remove a value that was found using the findValue function. It checks if a value was found and then removes it from the array.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/make-changes-to-arrays.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nif valueFound then\n\ttable.remove(playerItems, valueFound)\nend\n\nfor index = 1, #playerItems do\n\tlocal itemString = playerItems[index]\n\tprint(\"Index \" .. index .. \": \" .. itemString)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Velocity Constraint - React\nDESCRIPTION: This code snippet showcases the creation of a Linear Velocity mover constraint with a button and video demonstration, addressing users who need to maintain a constant velocity along a 3D vector.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/mover-constraints.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Card variant=\"outlined\" style={{height: '100%'}}>\n<CardContent>\n<Button href=\"../physics/constraints/linear-velocity.md\" size=\"large\" color=\"primaryBrand\" variant=\"outlined\" fullWidth>Linear Velocity</Button>\n<p></p>\n<CardMedia component=\"video\" controls src=\"../assets/physics/constraints/LinearVelocity-Demo.mp4\" />\n<p></p>\n<figcaption>[LinearVelocity](../physics/constraints/linear-velocity.md) applies force on an assembly to maintain a constant velocity along a 3D vector, line, or 2D plane</figcaption>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dust Particle Properties in Roblox\nDESCRIPTION: Configuration values for a ParticleEmitter to create floating dust particles in an outdoor environment. Properties include color, size, texture, transparency, and movement parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_37\n\nLANGUAGE: roblox\nCODE:\n```\nColor = 192, 241, 255\nTexture = rbxassetid://14302399641\nZOffset = -5\nLifetime = 1, 10\nRate = 50000\nRotSpeed = -60\nSpeed = 1, 5\nAcceleration = 1, -1, 1\nLockedToPart = true\n```\n\n----------------------------------------\n\nTITLE: Getting Object Reference Using Parent\nDESCRIPTION: Shows how to reference an object using script.Parent when the script is a child of the target object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal sign = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Using Device Emulator in Roblox Studio for Testing using JavaScript\nDESCRIPTION: This code integrates the DeviceEmulator component, facilitating simulation of device environments within Roblox Studio for comprehensive testing procedures. This requires the DeviceEmulator component from the respective path.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/testing-modes.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DeviceEmulator components={props.components} />\n```\n\n----------------------------------------\n\nTITLE: Playing Emotes via Lua Script\nDESCRIPTION: Plays a specific emote using the PlayEmote method for a character's Humanoid, requiring emote name as a parameter.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/emotes.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal humanoid = Players.LocalPlayer.Character.Humanoid\n\nhumanoid:PlayEmote(\"Shrug\")\n```\n\n----------------------------------------\n\nTITLE: Setting Team Score Limit - Roblox Lua\nDESCRIPTION: This Lua snippet configures the maximum score a team needs to reach to win a round by updating TEAM_SCORE_LIMIT in the game's ReplicatedStorage. Changes to this variable dynamically affect the displayed UI objective. Dependencies include the ReplicatedStorage service and the game's UI configuration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TEAM_SCORE_LIMIT = 200 -- updated line, be sure to change back\n\nreturn TEAM_SCORE_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Checking Paid Item Trading Allowance in Roblox Lua\nDESCRIPTION: Uses PolicyService to check if paid item trading is allowed for a player. Developers should use this to hide or block trading of paid items for certain players.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/content-maturity.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nClass.PolicyService.GetPolicyInfoForPlayerAsync\n```\n\n----------------------------------------\n\nTITLE: Scaling and Positioning Clothing Mesh in Blender\nDESCRIPTION: Steps to scale and position the clothing mesh over a mannequin in Blender, including disabling selection for the mannequin to prevent accidental edits.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating/trimming.md#2025-04-21_snippet_2\n\nLANGUAGE: blender\nCODE:\n```\n1. Return to Object Mode.\n2. Unhide one of your original cage meshes.\n3. In the filter dropdown, enable \"Selectable\" toggles, and set your body mesh to unselectable.\n4. Select your shirt mesh and lightly scale and position your asset to rest over the mannequin.\n5. Press S and use your mouse to scale. In most cases, the scaling should be a small change.\n6. Press G and click to grab your shirt, make sure the shirt rests loosely over the mannequin.\n```\n\n----------------------------------------\n\nTITLE: Defining Variables for Player Count Check (Roblox Lua)\nDESCRIPTION: This snippet defines variables for checking the player count and determine the winning player. These include references to the ModuleScripts folder, GameSettings module, Events folder, and the MatchEnd event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal PlayerManager = {}\n\n-- Services\nlocal Players = game:GetService(\"Players\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Modules\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Fading Platform Event Listener in Roblox - Luau\nDESCRIPTION: This snippet initializes a script in Roblox to listen for the Touched event of a platform, which will trigger a fade function when a player steps on it. It involves connecting the fade function to the Touched event of the part object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/fading-trap.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal platform = script.Parent\n\nlocal function fade()\n\nend\n\nplatform.Touched:Connect(fade)\n```\n\n----------------------------------------\n\nTITLE: Shadowing Variables in Luau\nDESCRIPTION: This snippet demonstrates the concept of shadowing in Luau, where a new local variable 'x' is declared within the for loop, hiding the previous declaration. The outer variable maintains its value while the inner variable operates independently.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/scope.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal x = 0  -- Local variable \"x\"\n\nfor i = 1, 4 do\n\tlocal x = 1  -- Different variable \"x\", local to this \"for\" loop\n\tprint(\"Loop 'x' = \" .. x)\nend\n\nprint(\"Initial 'x' = \" .. x)\n\n--[[ Resulting output:\nLoop 'x' = 1\nLoop 'x' = 1\nLoop 'x' = 1\nLoop 'x' = 1\nInitial 'x' = 0\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop Declaration in Luau\nDESCRIPTION: Example of the initial for loop keyword declaration, which is the first step in creating a for loop in Luau.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfor\n```\n\n----------------------------------------\n\nTITLE: FlatPucker Face Control\nDESCRIPTION: Property that brings mouth corners inward and presses lips against teeth, also known as lip tightener.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.FlatPucker\n```\n\n----------------------------------------\n\nTITLE: Adding Prop Asset for Cover\nDESCRIPTION: Positioning a PlanterSmall prop with specific CFrame position and orientation to provide cover and organic elements\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nPlanterSmall prop at CFrame.Position: `-67.5, 5, 67.5`\nCFrame.Orientation: `0, 90, 0`\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Force Constraint - React\nDESCRIPTION: This section illustrates how to create a Vector Force constraint, which continuously applies a linear force to an assembly, ensuring movement along a defined vector.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/mover-constraints.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Card variant=\"outlined\" style={{height: '100%'}}>\n<CardContent>\n<Button href=\"../physics/constraints/vector-force.md\" size=\"large\" color=\"primaryBrand\" variant=\"outlined\" fullWidth>Vector Force</Button>\n<p></p>\n<CardMedia component=\"video\" controls src=\"../assets/physics/constraints/VectorForce-Demo.mp4\" />\n<p></p>\n<figcaption>[VectorForce](../physics/constraints/vector-force.md) applies constant linear force on an assembly</figcaption>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Diversifying Formula for Player Categorical Signal\nDESCRIPTION: Calculates a score that maximizes the diversity of categorical attributes in a server. Higher scores indicate fewer players sharing the same attribute value as the joining player.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal score = num_players_same_{attribute_name} / occupancy\nreturn 1 - score\n```\n\n----------------------------------------\n\nTITLE: Paginated API Response for Inventory Items\nDESCRIPTION: Shows the expected JSON response format from an API call that returns paginated results, including the nextPageToken for further requests.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nGET /cloud/v2/users/{user_id}/inventory-items?maxPageSize=25\n\n{\n  \"inventoryItems\": [\n    ...\n  ],\n  \"nextPageToken\": \"aaaBBB\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nGET /cloud/v2/universes/{universe_id}/data-stores?maxPageSize=25\n\n{\n  \"dataStores\": [\n    ...\n  ],\n  \"nextPageToken\": \"datastore1\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nGET /cloud/v2/users/{user_id}/inventory-items?maxPageSize=25&pageToken=aaaBBB\n\n{\n  \"inventoryItems\": [\n    ...\n  ],\n  \"nextPageToken\": \"\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nGET /cloud/v2/universes/{universe_id}/data-stores?maxPageSize=25&pageToken=datastore1\n\n{\n  \"dataStores\": [\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Scam Message in Markdown\nDESCRIPTION: Shows a common scam message used to gain access to user accounts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/intro-to-digital-safety.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n\"i'm making a game and i wanna put your roblox character in it. could you upload your roblox char texture as a decal and send me the link? here's a tutorial on youtube if you don't know how to do it.\"\n```\n\n----------------------------------------\n\nTITLE: Error Message Example for Missing Capability\nDESCRIPTION: Example error messages shown when scripts attempt actions without required capabilities.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/capabilities.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe current thread cannot modify 'Workspace' (lacking capability AccessOutsideWrite)\n\nThe current thread cannot call 'Clone' (lacking capability CreateInstances)\n\nThe current thread cannot call 'GetSecret' (lacking capability Network)\n```\n\n----------------------------------------\n\nTITLE: Posing Techniques in Roblox Animation\nDESCRIPTION: Recommendations for efficiently creating animation poses by starting with connected body parts like upper arms and thighs, then moving to extremities\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/adding-the-second-pose.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nRotate body parts connected to the torso first, then work outwards to pose hands and feet\n```\n\n----------------------------------------\n\nTITLE: Malicious Payload Example in Roblox Client\nDESCRIPTION: Demonstrates a potential exploit attempt using table spoofing to bypass item purchase validation, and shows proper usage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/security/security-tactics.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal itemDataFolder = ReplicatedStorage:WaitForChild(\"ItemData\")\nlocal buyItemEvent = ReplicatedStorage:WaitForChild(\"BuyItemEvent\")\nlocal payload = {\n\tName = \"Ultra Blade\",\n\tClassName = \"Folder\",\n\tParent = itemDataFolder,\n\tPrice = {\n\t\tName = \"Price\",\n\t\tClassName = \"NumberValue\",\n\t\tValue = 0, -- Negative values could also be used, resulting in giving currency rather than taking it!\n\t},\n}\n\n-- Send malicious payload to the server (this will be rejected)\nprint(buyItemEvent:InvokeServer(payload))  -- Outputs \"false Invalid item provided\"\n\n-- Send a real item to the server (this will go through!)\nprint(buyItemEvent:InvokeServer(itemDatafolder[\"Real Blade\"]))  -- Outputs \"true\" and remaining currency if purchase succeeds\n```\n\n----------------------------------------\n\nTITLE: Creating a Drag Source in Roblox - Lua\nDESCRIPTION: This Lua snippet demonstrates creating a UI element within a draggable widget using Roblox's Plugin API. It creates a dock widget with a TextButton, enabling the initiation of a drag action when clicked, ready for a drag-and-drop interaction.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Create the widget first\nlocal widgetInfo = DockWidgetPluginGuiInfo.new(Enum.InitialDockState.Float, true, true, 300, 200)\nlocal dragSourceWidget = plugin:CreateDockWidgetPluginGui(\"Drag Source\", widgetInfo)\ndragSourceWidget.Title = \"Drag Source\"\n\n-- Create a TextButton that will initiate the drag\nlocal dragButton = Instance.new(\"TextButton\")\ndragButton.Size = UDim2.new(1, 0, 1, 0)\ndragButton.Text = \"Drag me!\"\ndragButton.Parent = dragSourceWidget\n```\n\n----------------------------------------\n\nTITLE: Adjusting Player Movement Speed in Lua\nDESCRIPTION: This snippet is used to configure the player's movement speed within the game. The 'ENABLED_WALK_SPEED' variable dictates the walk speed, and changes here must be considered alongside validation tolerances. The main input is the player movement speed setting, influencing player accessibility and movement dynamics in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ENABLED_WALK_SPEED = 60 -- updated line, be sure to change back\n```\n\n----------------------------------------\n\nTITLE: Setting End Value in For Loop\nDESCRIPTION: Demonstrates adding an end value of 0 to a for loop, which defines when the loop will stop executing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0\n```\n\n----------------------------------------\n\nTITLE: Customizing Humanoids in Roblox Luau\nDESCRIPTION: The `setupHumanoidAsync` function customizes a humanoid model for a player by setting display and interaction properties. It modifies certain humanoid settings like display distance and health visibility, and waits for the humanoid to 'die' to trigger an additional event. There are no strict prerequisites, but the humanoid parameter should be a valid `Humanoid` object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function setupHumanoidAsync(player: Player, humanoid: Humanoid)\\n\\n\\thumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Subject\\n\\thumanoid.NameDisplayDistance = 1000\\n\\thumanoid.HealthDisplayDistance = 1000\\n\\thumanoid.NameOcclusion = Enum.NameOcclusion.OccludeAll\\n\\thumanoid.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOn\\n\\thumanoid.BreakJointsOnDeath = false\\n\\n\\thumanoid.Died:Wait()\\n\\tonHumanoidDied(player, humanoid)\\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Blast Data in Roblox Lua\nDESCRIPTION: The purpose of this snippet is to check the magnitude of distance between a character's position and the blast origin to ensure it doesn't exceed a predefined threshold. It emphasizes the importance of data validation to maintain game integrity. Key parameters include the player's positional data, with outputs determining whether the validation passes or fails.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/implement-blasters.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal distanceFromCharacterToOrigin = blastData.originCFrame.Position - rootPartCFrame.Position\nprint(distanceFromCharacterToOrigin.Magnitude) -- updated line, be sure to remove\nif distanceFromCharacterToOrigin.Magnitude > ToleranceValues.DISTANCE_SANITY_CHECK_TOLERANCE_STUDS then\n    warn(`Player {player.Name} failed an origin sanity check while blasting`)\n    return\nend\n```\n\n----------------------------------------\n\nTITLE: Function Declaration in Luau\nDESCRIPTION: Shows the syntax for declaring an empty function in Luau. This is the basic structure that appears when creating a new function with autocomplete.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/code-a-function.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printFood()\n\nend\n```\n\n----------------------------------------\n\nTITLE: Setting AlignPosition Force Magnitude and Rigidity\nDESCRIPTION: Demonstrates configuring force magnitude and rigidity through properties like RigidityEnabled, MaxForce, MaxVelocity, and Responsiveness\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/constraints/align-position.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nalignPosition.RigidityEnabled = true -- Maximum possible constraint force\nalignPosition.RigidityEnabled = false -- Force controlled by MaxForce, MaxVelocity, Responsiveness\nalignPosition.MaxForce = 1000 -- Set maximum force\nalignPosition.MaxVelocity = 10 -- Set maximum velocity\nalignPosition.Responsiveness = 10 -- Set constraint responsiveness\n```\n\n----------------------------------------\n\nTITLE: Calculating Occupancy Signal Score in Lua\nDESCRIPTION: This snippet defines the occupancy signal score, which represents the ratio of players in a server compared to its total capacity.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\noccupancySignalScore = (# players in server) / serverCapacity\n```\n\n----------------------------------------\n\nTITLE: Applying Single Texture to MeshPart\nDESCRIPTION: Step-by-step process for adding a single texture to a MeshPart object by importing a texture file and setting the TextureID property\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/meshes.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Import the texture file](../projects/assets/manager.md#asset-import).\n2. Copy the asset ID.\n3. In the **Explorer** window, select the **MeshPart** object.\n4. In the **Properties** window, select the **TextureID** field and paste the asset ID of the texture.\n```\n\n----------------------------------------\n\nTITLE: Parenting Cube to Workspace in Luau\nDESCRIPTION: This Luau snippet finalizes the creation of a cube by parenting it to the `workspace`. This makes the cube visible in the Roblox game world.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function makeCube()\n    local cube = Instance.new(\"Part\")\n    cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n    cube.Color = currentColor\n    cube.Parent = workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Item Types\nDESCRIPTION: Query to return inventory items of specific asset types, including hats, classic pants, and t-shirt accessories.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_7\n\nLANGUAGE: query_filter\nCODE:\n```\nfilter=inventoryItemAssetTypes=HAT,CLASSIC_PANTS,TSHIRT_ACCESSORY\n```\n\n----------------------------------------\n\nTITLE: Handling Health Pickup Touch Event in Lua\nDESCRIPTION: This snippet defines the function 'onTouchHealthPickup' which manages the health restoration process when a player touches a health pickup. It updates the pickup's transparency and enabled state accordingly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tif healthPickup:GetAttribute(\"Enabled\") then\n\t\tlocal character = otherPart.Parent\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\thumanoid.Health = MAX_HEALTH\n\t\t\thealthPickup.Transparency = DISABLED_TRANSPARENCY\n\t\t\thealthPickup:SetAttribute(\"Enabled\", false)\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Finding a Humanoid Object in the Touched Part\nDESCRIPTION: Checks if the part that touched the powerup belongs to a character with a Humanoid component, which is required to modify walking speed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTouch(otherPart)\n  local character = otherPart.Parent\n  local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n  if humanoid then\n    print(\"A Humanoid was found\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Python Ordered Data Stores API Client\nDESCRIPTION: Implements methods for interacting with Roblox Ordered Data Stores API, including list, create, and increment operations for managing leaderboard entries\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport requests\nimport json\n\nclass DataStores:\n    def __init__(self, config_file):\n        with open(config_file) as f:\n            self._config = json.load(f)\n\n    def _H(self):\n        return { 'x-api-key' : self._config[\"api_key\"], 'Content-Type': 'application/json'}\n    def _get_url(self, path_format: str):\n        return f\"{self._config['base_url']}/{path_format.format(self._config['universe_id'])}\"\n\n    def list(self, datastore, scope, pageSize = 10, orderBy = \"\", filter = \"\", exclusiveStartKey = \"\"):\n        self._objects_url = self._config['api_key_url']+\"universes/\"+self._config[\"universe_id\"]+\"/orderedDataStores/\"+datastore+\"/scopes/\"+scope+\"/entries\"\n        headers = { 'x-api-key' : self._config[\"api_key\"] }\n        r = requests.get(self._objects_url, headers=headers, params={\"max_page_size\": pageSize, \"order_by\" : orderBy, \"filter\" : filter, \"page_token\" : \"\"})\n        return r\n\n    def create(self, datastore, scope, entry, data):\n        self._objects_url = self._config['api_key_url']+\"universes/\"+self._config[\"universe_id\"]+\"/orderedDataStores/\"+datastore+\"/scopes/\"+scope+\"/entries\"\n        headers = self._H()\n        payload = json.dumps({\n            \"value\": 11\n            })\n        return requests.post(self._objects_url, params = {\"id\": entry }, data=payload, headers=headers)\n\n    def increment(self, datastore, scope, entry, incrementBy):\n        self._objects_url = self._config['api_key_url']+\"universes/\"+self._config[\"universe_id\"]+\"/orderedDataStores/\"+datastore+\"/scopes/\"+scope+\"/entries/\"+entry+\":increment\"\n        headers = { 'x-api-key' : self._config[\"api_key\"] }\n        payload = json.dumps({\n            \"amount\": 1\n            })\n        r = requests.post(self._objects_url, headers=headers, data=payload)\n        return r\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Bot Ready Event Handler\nDESCRIPTION: Defines an asynchronous event handler that prints a message when the bot is ready and listening for messages.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/automate-right-to-erasure.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@client.event\nasync def on_ready():\n    print(f\"{client.user} is listening to Right to Erasure messages\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Mouse Cursors in Roblox - Lua\nDESCRIPTION: This Lua snippet demonstrates how to change the mouse cursor icon when interacting with a GUI element. By connecting functions to the MouseEnter and MouseLeave events of a button, it changes the mouse cursor dynamically. It depends on the Roblox plugin and user interaction events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setCursor(cursorAsset)\n\tplugin:GetMouse().Icon = cursorAsset\nend\n\ntestButton.MouseEnter:Connect(function()\n\tsetCursor(\"rbxasset://SystemCursors/PointingHand\")\nend)\ntestButton.MouseLeave:Connect(function()\n\tsetCursor(\"\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Type Coercion in Assignment for Enums in Luau\nDESCRIPTION: Illustrates the coercion of numbers and strings to full enum names in property assignments. Emphasizes best practices by using the explicit full enum name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-coercion.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part1 = Instance.new(\"Part\")\npart1.Material = 816\npart1.Parent = Workspace\nprint(part1.Material) -- Enum.Material.Concrete\n\nlocal part2 = Instance.new(\"Part\")\npart2.Material = \"Concrete\"\npart2.Parent = Workspace\nprint(part2.Material) -- Enum.Material.Concrete\n\n-- This is best practice because it's the most explicit\nlocal part3 = Instance.new(\"Part\")\npart3.Material = Enum.Material.Concrete\npart3.Parent = Workspace\nprint(part3.Material) -- Enum.Material.Concrete\n```\n\n----------------------------------------\n\nTITLE: Basic Text Input Handling in Lua for Roblox TextBox\nDESCRIPTION: This script demonstrates how to detect when a user submits text in a TextBox by connecting to the FocusLost event. When the user presses Enter or clicks outside the box, the script checks if Enter was pressed, and if so, prints the contents to the Output window.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/text-input.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal textBox = script.Parent\n\nlocal function onFocusLost(enterPressed, inputObject)\n\tif enterPressed then\n\t\tprint(textBox.Text)\n\tend\nend\n\ntextBox.FocusLost:Connect(onFocusLost)\n```\n\n----------------------------------------\n\nTITLE: Accessory Creation in Roblox Studio\nDESCRIPTION: Tools for creating and fitting accessories, including the Accessory Fitting Tool and Create Accessory functionality. Allows conversion of MeshPart to Accessory object with automatic attachment point and asset type configuration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/avatar-tab.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Accessory Fitting Tool**\nTest and fit meshes on multiple reference characters and animations before converting them to an `Class.Accessory`. The tool automatically adds the correct attachment points and `Enum.AssetType` to the created accessory.\n```\n\n----------------------------------------\n\nTITLE: Configuring Glass Block Properties in Roblox\nDESCRIPTION: Configuration settings for creating transparent glass blocks for skylights in Roblox. Includes color, material, and transparency settings for realistic skylight effects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_17\n\nLANGUAGE: Roblox\nCODE:\n```\nColor = 105, 162, 172\nMaterial = Neon\nTransparency = 0.6\n```\n\n----------------------------------------\n\nTITLE: Getting a Hash Map - Lua\nDESCRIPTION: This snippet demonstrates how to retrieve a hash map instance from the MemoryStoreService using a specific name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/hash-map.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Link to Roblox Creator Challenge Quiz in HTML\nDESCRIPTION: HTML code that creates a button link directing users to the Roblox Creator Challenge quiz game. The button is styled with the 'contained' variant and wrapped in an anchor tag that links to the quiz URL.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/first-challenge.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://www.roblox.com/games/2546610365/Roblox-Creator-Challenge\">\n<Button variant=\"contained\">Take the Challenge</Button>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Mapping FACS Poses in Blender Custom Properties\nDESCRIPTION: Instructions for mapping facial animation frames to FACS pose names using Blender's Custom Properties system. This process links animation frames to specific FACS poses and stores bone positions for use in the Animation Editor.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/create-basic-heads.md#2025-04-21_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nFrame0: \"Funneler_JawDrop_Pucker\"\nRootFaceJoint: \"DynamicHead\"\n```\n\n----------------------------------------\n\nTITLE: Removing an Item from a Set in Lua\nDESCRIPTION: This code snippet demonstrates removing an item from a set using `Set:remove()`. The function sets the item's presence to nil, effectively removing it.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruits = Set.new({\"Apple\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\nfruits:remove(\"Orange\")\n```\n\n----------------------------------------\n\nTITLE: Configuring HUD GUI Setup in Lua\nDESCRIPTION: Main script that initializes all HUD elements including player portrait, name, team color, objective, points, hitmarker and touch controls.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal setPlayerPortrait = require(script.setPlayerPortrait)\nlocal setPlayerName = require(script.setPlayerName)\nlocal startSyncingTeamColor = require(script.startSyncingTeamColor)\nlocal setObjective = require(script.setObjective)\nlocal setupTouchButtonAsync = require(script.setupTouchButtonAsync)\nlocal startSyncingTeamPoints = require(script.startSyncingTeamPoints)\nlocal disableMouseWhileGuiEnabled = require(script.disableMouseWhileGuiEnabled)\nlocal setupHitmarker = require(script.setupHitmarker)\n\nlocal localPlayer = Players.LocalPlayer\nlocal gui = localPlayer.PlayerGui:WaitForChild(\"HUDGui\")\n\nsetPlayerPortrait(gui)\nsetPlayerName(gui)\nstartSyncingTeamColor(gui)\nsetObjective(gui)\nstartSyncingTeamPoints(gui)\ndisableMouseWhileGuiEnabled(gui)\nsetupHitmarker(gui)\nsetupTouchButtonAsync(gui)\n```\n\n----------------------------------------\n\nTITLE: Rotating UI Element in Roblox Lua\nDESCRIPTION: Demonstrates how to rotate a UI element around its center anchor point using TweenService\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nobject.AnchorPoint = Vector2.new(0.5, 0.5)\n\nlocal targetRotation = 45\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {Rotation = targetRotation})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Firing Remote Event to Change Avatar Name - Lua\nDESCRIPTION: This LocalScript demonstrates how to fire a remote event to change a user's avatar name. The new name is passed to the server for processing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/name-health-display.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal changeNameEvent = ReplicatedStorage:WaitForChild(\"ChangeNameEvent\")\nchangeNameEvent:FireServer(\"Amory\")\n```\n\n----------------------------------------\n\nTITLE: Adding Print Statement for Debugging in Roblox Lua\nDESCRIPTION: This snippet adds a print statement inside the 'giveUpgrade()' function to log when a player clicks the upgrade button, useful for debugging.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/buying-upgrades.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function giveUpgrade(player)\n    print(\"Someone clicked the button.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing CastShadow in Roblox\nDESCRIPTION: The CastShadow property controls whether an object casts shadows. Performance impact scales with geometric complexity due to vertex calculations and raycasting from the sun to neighboring objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/assemble-an-asset-library.md#2025-04-21_snippet_3\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.BasePart.CastShadow\n```\n\n----------------------------------------\n\nTITLE: Configuring Friends Locator in Lua\nDESCRIPTION: This snippet demonstrates how to configure the Friends Locator module in a LocalScript. It sets up the module to show all players in Studio for debugging purposes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/friends-locator.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nFriendsLocator.configure({\n\tshowAllPlayers = RunService:IsStudio(), -- Allows for debugging in Studio\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Player Count\nDESCRIPTION: Sets the initial player count by assigning the size of the `activePlayers` array to the `Value` property of the `playersLeft` IntValue.  This is done within the `sendPlayersToMatch()` function, after players have been added to the `activePlayers` table.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction PlayerManager.sendPlayersToMatch()\n\tlocal availableSpawnPoints = spawnLocations:GetChildren()\n\n\tfor playerKey, whichPlayer in Players:GetPlayers() do\n\t\ttable.insert(activePlayers, whichPlayer)\n\n\t\tlocal spawnLocation = table.remove(availableSpawnPoints, 1)\n\t\tpreparePlayer(whichPlayer, spawnLocation)\n\tend\n\n\tplayersLeft.Value = #activePlayers\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Player Weapon in Lua\nDESCRIPTION: Sets up variables for the game, including the player weapon stored in ServerStorage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Map Variables\nlocal lobbySpawn = workspace.Lobby.StartSpawn\nlocal arenaMap = workspace.Arena\nlocal spawnLocations = arenaMap.SpawnLocations\n\n-- Player Variables\nlocal activePlayers = {}\nlocal playerWeapon = ServerStorage.Weapon\n```\n\n----------------------------------------\n\nTITLE: Applying Asset Library to Environment Design\nDESCRIPTION: Explains the strategies for integrating custom asset libraries into 3D game environments, focusing on iteration and user experience design\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Applying your asset library directly onto the greybox geometry to exactly match the original design.\n- Converting the greybox geometry into something else entirely that still respects the intention behind the original design.\n- Converting the greybox geometry into something else while also applying your asset library to the new object to maintain cohesion throughout the environment.\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Makeup Examples - HTML\nDESCRIPTION: This snippet presents examples of permissible and non-permissible makeup for avatars, delineating the guidelines on facial shadowing versus multicolor features. It aims to educate users about acceptable practices when designing avatar heads.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/marketplace/marketplace-policy.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<thead>\n  <tr>\n    <th><center>Facial shadowing and detail are permitted</center></th>\n    <th><center>Face painting and multi-color features are not permitted</center></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>\n      <figure>\n      <center><img src=\"../assets/art/avatar/Makeup-Example-A.png\" /></center>\n      </figure>\n    </td>\n    <td>\n      <figure><center><img src=\"../assets/art/avatar/Makeup-Example-B.png\" /></center>\n      </figure>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <figure>\n      <center><img src=\"../assets/art/avatar/Makeup-Example-C.png\" /></center>\n      </figure>\n    </td>\n    <td>\n      <figure><center><img src=\"../assets/art/avatar/Makeup-Example-D.png\" /></center>\n      </figure>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <figure>\n      <center><img src=\"../assets/art/avatar/Makeup-Example-E.png\" /></center>\n      </figure>\n    </td>\n    <td>\n      <figure><center><img src=\"../assets/art/avatar/Makeup-Example-F.png\" /></center>\n      </figure>\n    </td>\n  </tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Changing Part Color with RGB Values in Roblox\nDESCRIPTION: This complete script changes a part's color using RGB values. It accesses a part named 'PracticePart' in the workspace and sets its Color property to a yellow color (255, 230, 50) using Color3.fromRGB().\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/object-properties.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Changes the color of a part\nworkspace.PracticePart.Color = Color3.fromRGB(255, 230, 50)\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Part Dimensions in Roblox\nDESCRIPTION: Configuration values for block parts used in ceiling construction, including Size and CFrame.Position parameters for precise positioning.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_20\n\nLANGUAGE: roblox\nCODE:\n```\n55, 1, 30\n-77.5, 20.5, 320\n```\n\n----------------------------------------\n\nTITLE: Deleting Attributes\nDESCRIPTION: Shows how to delete an attribute by setting its value to nil.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal cabbage = script.Parent\n\ncabbage:SetAttribute(\"GrowthRate\", nil)\n```\n\n----------------------------------------\n\nTITLE: Requesting Universe IDs via Token Resources Endpoint\nDESCRIPTION: This bash code snippet demonstrates how to request a list of Universe IDs using the token resources endpoint. This involves sending a `POST` request with the access token, client ID, and client secret or code challenge.  The response provides a list of universe IDs the user has granted permission to.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-messaging.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/oauth/v1/token/resources' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token=<access_token>' \\\n--data-urlencode 'client_id=<client_id>' \\\n--data-urlencode 'client_secret=<client_secret>'\n```\n\n----------------------------------------\n\nTITLE: Creating a Points-Giving Function in Roblox Luau\nDESCRIPTION: Function that will handle giving or subtracting points from a player. Currently only includes a test print statement.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n-- Gives or subtracts points\nlocal function givePoints(player)\n\tprint(\"Giving player points\")\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Planters Using Solid Modeling in Roblox Studio\nDESCRIPTION: Instructions for creating planters using solid modeling operations in Roblox Studio. Involves creating block parts, negating one part, and unioning parts together to form the planter base.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\n-- Create planter exterior\nlocal exterior = Instance.new(\"Part\")\nexterior.Size = Vector3.new(20, 11, 5)\nexterior.Position = Vector3.new(-15, 4.5, 257.5)\n\n-- Create divot\nlocal divot = Instance.new(\"Part\")\ndivot.Size = Vector3.new(18.5, 1, 4)\ndivot.Position = Vector3.new(-15, 9.75, 257.5)\n\n-- Negate divot\ndivot.Shape = Enum.PartType.Block\ndivot.Transparency = 1\n\n-- Union parts\nlocal union = exterior:UnionAsync({divot})\nunion.Color = Color3.fromRGB(181, 173, 156)\nunion.Material = Enum.Material.Concrete\nunion.MaterialVariant = \"Concrete_Board_Formed_A\"\nunion.UsePartColor = true\n```\n\n----------------------------------------\n\nTITLE: Managing Textures in Texture Generator Tool\nDESCRIPTION: The following snippet provides a structured way to manage and display saved textures within the Texture Generator tool, including options to insert, show, export, or remove textures.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/texture-generator.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Option</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>**Insert Mesh with Texture**</td>\n      <td>Inserts a copy of the textured mesh/model into the workspace.</td>\n    </tr>\n    <tr>\n      <td>**Show in Inventory**</td>\n      <td>Opens your **Images** inventory on the [Creator Dashboard](https://create.roblox.com/dashboard/creations?activeTab=Image) where you can inspect the texture image.</td>\n    </tr>\n      <tr>\n      <td>**Export**</td>\n      <td>Exports the mesh to your local system as a `.obj` file.</td>\n    </tr>\n      <tr>\n      <td>**Remove**</td>\n      <td>Removes the texture from the **Saved Textures** list.</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Skylight Position Configuration\nDESCRIPTION: Exact positioning coordinates for skylight assets using CFrame.Position and CFrame.Orientation values. These coordinates ensure precise placement of skylight components.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_18\n\nLANGUAGE: Roblox\nCODE:\n```\nCFrame.Position = Vector3.new(-60, 20, 265)\nCFrame.Orientation = Vector3.new(0, 180, 0)\n```\n\n----------------------------------------\n\nTITLE: Inefficient Multiple If Statements in Luau\nDESCRIPTION: This snippet demonstrates an inefficient way of coding multiple conditions using separate if statements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif finishTime < 5  then\n   -- Get a gold medal\nend\n\nif finishTime >= 5 and <= 10 then\n   -- Get a silver medal\nend\n\nif finishTime > 10 and <= 15 then\n   -- Get a bronze medal\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Align Position Constraint - React\nDESCRIPTION: This snippet shows how to set up the Align Position constraint in Roblox, allowing two attachments to move towards each other or to a specific position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/mover-constraints.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Card variant=\"outlined\" style={{height: '100%'}}>\n<CardContent>\n<Button href=\"../physics/constraints/align-position.md\" size=\"large\" color=\"primaryBrand\" variant=\"outlined\" fullWidth>Align Position</Button>\n<p></p>\n<CardMedia component=\"video\" controls src=\"../assets/physics/constraints/AlignPosition-Demo.mp4\" />\n<p></p>\n<figcaption>[AlignPosition](../physics/constraints/align-position.md) applies force to move two attachments together, or to move one attachment to a goal position</figcaption>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Handling Emote Played Events\nDESCRIPTION: Shows how to connect to the emotePlayed event to track when players use emotes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.emotePlayed:Connect(function(player, emote)\n\tprint(player.Name, \"played\", emote.name)\nend)\n```\n\n----------------------------------------\n\nTITLE: Using GetInput Method to Get Player Input in Roblox\nDESCRIPTION: This code demonstrates how to use the storyMaker:GetInput() method to capture player input and store it in a variable. The GetInput method is used without parameters at this stage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/coding-a-question.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nwhile playing do\n  storyMaker:Reset()\n\n  -- Code story between the dashes\n  -- =============================================\n     local name1 = storyMaker:GetInput()\n\n  -- =============================================\n\n  -- Add the story variable between the parenthesis below\n  storyMaker:Write()\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Color Cycling Loop in Roblox Luau\nDESCRIPTION: Completed while loop that cycles through blue, green, and red colors for the part with different wait times between each color change.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Loops through 3 colors, waiting between each color\nwhile true do\n\tpointPart.Color = blue\n\ttask.wait(3)\n\tpointPart.Color = green\n\ttask.wait(2)\n\tpointPart.Color = red\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Animation to a Custom Loading Screen in Roblox (Lua)\nDESCRIPTION: This code creates a custom loading screen with an animated loading ring.  It uses TweenService to continuously rotate an ImageLabel until the game loads. The default loading screen is removed, and a minimum display time is enforced. Requires TweenService to animate the UI element.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/loading-screens.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedFirst = game:GetService(\"ReplicatedFirst\")\nlocal TweenService = game:GetService(\"TweenService\")\n\nlocal player = Players.LocalPlayer\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\n\nlocal screenGui = Instance.new(\"ScreenGui\")\nscreenGui.IgnoreGuiInset = true\nscreenGui.Parent = playerGui\n\nlocal textLabel = Instance.new(\"TextLabel\")\ntextLabel.Size = UDim2.new(1, 0, 1, 0)\ntextLabel.BackgroundColor3 = Color3.fromRGB(0, 20, 40)\ntextLabel.Font = Enum.Font.GothamMedium\ntextLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)\ntextLabel.Text = \"Loading\"\ntextLabel.TextSize = 28\ntextLabel.Parent = screenGui\n\nlocal loadingRing = Instance.new(\"ImageLabel\")\nloadingRing.Size = UDim2.new(0, 256, 0, 256)\nloadingRing.BackgroundTransparency = 1\nloadingRing.Image = \"rbxassetid://4965945816\"\nloadingRing.AnchorPoint = Vector2.new(0.5, 0.5)\nloadingRing.Position = UDim2.new(0.5, 0, 0.5, 0)\nloadingRing.Parent = screenGui\n\n-- Remove the default loading screen\nReplicatedFirst:RemoveDefaultLoadingScreen()\n\nlocal tweenInfo = TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)\nlocal tween = TweenService:Create(loadingRing, tweenInfo, {Rotation = 360})\ntween:Play()\n\ntask.wait(5)  -- Force screen to appear for a minimum number of seconds\n\nif not game:IsLoaded() then\n game.Loaded:Wait()\nend\n\nscreenGui:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Opening Item View for a Specific Item in Roblox MerchBooth\nDESCRIPTION: Shows how to navigate directly to a specific item's purchase view using its asset ID, opening the MerchBooth window if it's currently closed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tMerchBooth.openItemView(4819740796)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Animation Environment in Roblox Studio\nDESCRIPTION: Configures Roblox Studio settings to prepare for animation creation, including disabling snapping and opening the Animation Editor\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/animations-and-feedback.md#2025-04-21_snippet_0\n\nLANGUAGE: instructions\nCODE:\n```\n1. Open Model tab\n2. Turn off Rotate and Move snapping\n3. Go to Plugins > Animation Editor\n4. Click Build Rig in Plugins tab\n```\n\n----------------------------------------\n\nTITLE: Requiring Timer Module in Lua\nDESCRIPTION: This snippet shows how to require the Timer module within the MatchManager script. This allows the MatchManager to use the timer functions for managing the match duration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n```\n\n----------------------------------------\n\nTITLE: Reset Match Function in MatchManager (Lua)\nDESCRIPTION: This snippet defines a function `resetMatch` within the `MatchManager` module.  The purpose is to call the `resetPlayers` function from the `PlayerManager` module. This function depends on the PlayerManager module and serves to initiate the player reset process at the end of a match, sending them back to the lobby.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfunction MatchManager.resetMatch()\n\tplayerManager.resetPlayers()\nend\n```\n\n----------------------------------------\n\nTITLE: NPC Model Structure Configuration\nDESCRIPTION: Describes the hierarchical structure and key components of NPC models in Roblox Studio, including animation handling, body parts, and behavior scripts. Each NPC contains folders for animations, poses, scripts for health and behavior management, and customizable body parts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/npc-kit.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nModel (NPC)\n  ├─ Animations (Folder)\n  ├─ Initial Poses (Folder)\n  ├─ Animate (Script)\n  ├─ Accessory (Accessory)\n  ├─ Health (Script)\n  ├─ Humanoid (Humanoid)\n  ├─ NPC (Script)\n  │  ├─ Maid (ModuleScript)\n  │  ├─ Ragdoll (ModuleScript)\n  │  └─ RigTypes (ModuleScript)\n  ├─ RbxNpcSounds (Script)\n  ├─ BodyParts (BasePart)\n  ├─ HumanoidRootPart (BasePart)\n  └─ Configuration (Configuration)\n```\n\n----------------------------------------\n\nTITLE: Referencing SurfaceAppearance in Roblox Lua\nDESCRIPTION: This code snippet shows how to reference SurfaceAppearance objects in Roblox Lua. It's mentioned in the context of sharing appearance nodes among MeshParts for efficient texture management.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/building-architecture.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nClass.SurfaceAppearance\n```\n\n----------------------------------------\n\nTITLE: Resetting Item to Interactive State in Lua\nDESCRIPTION: After a delay, this snippet resets the harvested item to its original interactive state, making it visible and collidable again, and allowing it to be harvested anew. This involves reverting changes made to the item's properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/collect-items.md#2025-04-21_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\ntask.wait(5)\ncanHarvest.Value = true\npartTouched.Transparency = 0\npartTouched.CanCollide = true\n```\n\n----------------------------------------\n\nTITLE: Initializing a Speed Boost Powerup in Roblox\nDESCRIPTION: Sets up a variable referencing the parent object (a part or model) that will act as a speed boost powerup when touched.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Gives a temporary speed boost when touched\nlocal speedBoost = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Character Detection Implementation - Roblox Lua\nDESCRIPTION: Implements character detection logic by getting the parent of the touching part and finding the Humanoid object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n\nlocal function kill(otherPart)\n  local partParent = otherPart.Parent\n  local humanoid = partParent:FindFirstChild(\"Humanoid\")\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Handling Tagged Out State in Roblox\nDESCRIPTION: This Lua code snippet defines the `onTaggedOut` function, which is triggered when a player is tagged out. It disables player movement and camera controls, activates the respawn UI, and disables the player's blaster by setting attributes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onTaggedOut()\n\t-- Disable controls while tagged out\n\ttogglePlayerMovement(false)\n\ttogglePlayerCamera(false)\n\tsetGuiExclusivelyEnabled(playerGui.OutStateGui)\n\n\t-- Disable blaster while tagged out\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Disabled)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Wall Assets in Roblox HTML\nDESCRIPTION: This snippet shows the predefined CFrame position and orientation values for various wall components in a Roblox combat pocket. Each entry specifies the asset name, position, and orientation necessary for placing the wall components correctly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n   <td>WallLarge</td>\n   <td>`-40, 5, 200`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallLarge</td>\n   <td>`-60, 5, 200`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerInner</td>\n   <td>`-75, 5, 200`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>WallSmall</td>\n   <td>`-80, 5, 205`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerOuter</td>\n   <td>`-80, 5, 210`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>WallLarge</td>\n   <td>`-80, 5, 210`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerOuter</td>\n   <td>`-95, 5, 210`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallRiseA</td>\n   <td>`-95, 5, 210`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallMid</td>\n   <td>`-95, 10, 190`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerInner</td>\n   <td>`-95, 10, 180`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallLarge</td>\n   <td>`-100, 10, 175`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerOuter</td>\n   <td>`-115, 10, 175`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallSmall</td>\n   <td>`-115, 10, 175`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFrame</td>\n   <td>`-115, 10, 170`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallSmall</td>\n   <td>`-115, 10, 150`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerOuter</td>\n   <td>`-115, 10, 145`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallLarge</td>\n   <td>`-115, 10, 145`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerInner</td>\n   <td>`-100, 10, 145`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallMid</td>\n   <td>`-95, 10, 140`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallRiseB</td>\n   <td>`-95, 5, 110`</td>\n   <td>`0, -180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerOuter</td>\n   <td>`-95, 5, 110`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>WallLarge</td>\n   <td>`-95, 5, 110`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerOuter</td>\n   <td>`-80, 5, 110`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallSmall</td>\n   <td>`-80, 5, 110`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerInner</td>\n   <td>`-80, 5, 115`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallLarge</td>\n   <td>`-75, 5, 120`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFrame</td>\n   <td>`-60, 5, 120`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerOuter</td>\n   <td>`-40, 5, 120`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallSmall</td>\n   <td>`-40, 5, 120`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing with 'not' in Luau\nDESCRIPTION: Illustrates how the 'not' operator can be used within control constructs to determine whether a condition is unmet or negate a compound condition. The examples show logical flow when variables are 'false' or 'nil', enabling alternate actions in the program.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/operators.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal nilVariable  -- Variable is declared but has no value, so it's nil\nlocal falseVariable = false  -- Variable is declared with value of false\n\nif not nilVariable then\n\tprint(nilVariable)  -- Outputs \"nil\" because nil isn't true\nend\n\nif not falseVariable then\n\tprint(falseVariable)  -- Outputs \"false\" because false isn't true\nend\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal three = 3\nlocal four = 4\nlocal five = 5\n\nif not (three > four or five < four) then\n\tprint(\"Three is less than 4 and five is greater than 4.\")\nend\n\n-- Output: Three is less than 4 and five is greater than 4.\n```\n\n----------------------------------------\n\nTITLE: Joining Player Example for Server Numerical Signal\nDESCRIPTION: An example implementation of the server numerical signal formula using Level as the attribute. It calculates the difference between a server Level of 4500 and a joining player's Level of 9000, with a maximum relevant difference of 1500.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_Level = 4500\nlocal joining_player_Level = 9000\nlocal max_relevant_difference = 1500\n\nlocal diff = math.abs(server_Level - joining_player_Level)\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\n```\n\n----------------------------------------\n\nTITLE: Applying Impulse Force to Character in Roblox\nDESCRIPTION: Script that applies an upward impulse force when a player's left foot touches a jump pad. The script identifies the character's humanoid, then applies 2500 Rowton-seconds of force along the Y-axis to launch the player upward.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-moving-objects.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal volume = script.Parent\n\nlocal function onTouched(other)\n\tlocal impulse = Vector3.new(0, 2500, 0)\n\tlocal character = other.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid and other.Name == \"LeftFoot\" then\n\t\tother:ApplyImpulse(impulse)\n\tend\nend\n\nvolume.Touched:Connect(onTouched)\n```\n\n----------------------------------------\n\nTITLE: Checking Player Verification Status in Lua\nDESCRIPTION: This script uses the Player:IsVerified() method to check if users have verified their Roblox accounts. It prints verification status to the console for both existing players and new players joining the experience, which is useful for limiting access to competitive features or ranked queues.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/publishing/account-verification.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tprint(player:IsVerified())\nend\n\nfor _, player in Players:GetPlayers() do\n\tonPlayerAdded(player)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Announcement Interrupt RichText Markup\nDESCRIPTION: Rich text markup demonstrating mid-sentence interruption with custom styling and font changes\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/immersive-narrative.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n\"What is…this…<br/><stroke color=\\\"#dcc7ff\\\" joins=\\\"miter\\\" thickness=\\\"2\\\" transparency=\\\"0.5\\\"><font size=\\\"60\\\"><font color=\\\"rgb(10,8,11)\\\"><i>....hunger….void….pull…</i></font></font></stroke>\"\n```\n\n----------------------------------------\n\nTITLE: Creating IntValue for Items Stat\nDESCRIPTION: Introduces 'Items' as a new IntValue stat to represent the quantity of items collected by players. Initialized to zero and parented to leaderstats.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerJoin(player)\n      gold.Parent = leaderstats\n\n      -- Create the Items stat\n      local items = Instance.new(\"IntValue\")\n      items.Name = \"Items\"\n      items.Value = 0\n      items.Parent = leaderstats\n   end\n```\n\n----------------------------------------\n\nTITLE: Utilizing Default Roblox Button Icons\nDESCRIPTION: This Lua script showcases how to use the `UserInputService` to retrieve default button icons for console controllers, specifically demonstrating the mapping for `Enum.KeyCode.ButtonA`. This method enables the use of standardized Roblox icons, simplifying the process for developers and maintaining visual consistency. The method requires Roblox game services and expects key code inputs with image outputs for game UI elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/publishing/console-guidelines.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal imageLabel = script.Parent\nlocal key = Enum.KeyCode.ButtonA\n\nlocal mappedIcon = UserInputService:GetImageForKeyCode(key)\nimageLabel.Image = mappedIcon\n\n```\n\n----------------------------------------\n\nTITLE: Creating Leaderboard Stats Folder\nDESCRIPTION: Create a leaderboard folder for tracking player points with an IntValue object\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerAdded(player)\n  local leaderstats = Instance.new(\"Folder\")\n  leaderstats.Name = \"leaderstats\"\n  leaderstats.Parent = player\n\n  local points = Instance.new(\"IntValue\")\n  points.Name = \"Points\"\n  points.Value = 0\n  points.Parent = leaderstats\nend\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Emotes Using Lua\nDESCRIPTION: Sets and equips custom emotes using the HumanoidDescription class, specifying emote IDs and orders.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/emotes.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal humanoid = Players.LocalPlayer.Character.Humanoid\nlocal humanoidDescription = humanoid.HumanoidDescription\n\n-- Set custom emotes within a table\nlocal emoteTable = {\n  [\"Hello\"] = {3576686446},\n  [\"Stadium\"] = {3360686498},\n  [\"Tilt\"] = {3360692915},\n  [\"Shrug\"] = {3576968026},\n  [\"Salute\"] = {3360689775},\n  [\"Point\"] = {3576823880}\n}\nhumanoidDescription:SetEmotes(emoteTable)\n\n-- Equip emotes in a specific order\nlocal equippedEmotes = {\"Hello\", \"Stadium\", \"Tilt\", \"Shrug\", \"Salute\", \"Point\"}\nhumanoidDescription:SetEquippedEmotes(equippedEmotes)\n```\n\n----------------------------------------\n\nTITLE: Displaying Tattoos with Descriptions - HTML\nDESCRIPTION: This snippet showcases tattoos along with their visual descriptions, emphasizing their distinct nature compared to body textures. It serves to provide clarity on what can be considered a tattoo versus a texture, reinforcing compliance with Roblox standards.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/marketplace/marketplace-policy.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<GridContainer numColumns='2'>\n<figure>\n    <img src=\"../assets/art/avatar/Acc-Tattoos.png\" />\n    <figcaption>Tattoo markings on the upper arm</figcaption>\n</figure>\n<figure>\n    <img src=\"../assets/art/avatar/Acc-Skin-Example.png\" />\n    <figcaption>Texture that makes up natural lizard skin</figcaption>\n</figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Generic Functions in C#\nDESCRIPTION: Illustrates the definition of a simple generic function in C# that increments a number. The function takes an integer as input and returns the incremented value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Generic function\nint increment(int number) {\n\treturn number + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DevProduct Bundle Item\nDESCRIPTION: Defines a bundle item using a developer product, with optional metadata and caption configuration\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n{\n    itemType = ItemTypes.ItemType.DevProduct,\n    devProductId = <DEV_PRODUCT_ID>,\n    metadata = {\n        caption = {\n            text = \"x1\",\n            color = Color3.fromRGB(236, 201, 74),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Upgrade Cost and Space Variables in Roblox Lua\nDESCRIPTION: This snippet defines the upgrade cost and the number of spaces granted when a player purchases an upgrade.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/buying-upgrades.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Variables for the upgrade\nlocal newSpaces = 10\nlocal upgradeCost = 100\n```\n\n----------------------------------------\n\nTITLE: Checking SelfieMode State\nDESCRIPTION: Shows how to check if selfie mode is currently open.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.openSelfieMode()\n\nprint(SelfieMode.isSelfieModeOpen())\n```\n\n----------------------------------------\n\nTITLE: Configuring Right Spawn Zone Position Data\nDESCRIPTION: Table containing position and orientation data for modular assets in the right spawn zone. Each entry specifies the asset name, CFrame position coordinates, and rotation angles.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-110, 5, 15\n0, 90, 0\n```\n\n----------------------------------------\n\nTITLE: Camera Shake Configuration\nDESCRIPTION: Demonstrates how to define camera shake effects with timing and targeting options.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\ncameraShakes = {\n\t{startTime = 15, shake = \"small\", sustainDuration = 7, targets = emConfig.ShakeTargets.allPlayers, onServer = true},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Overhang Wedge Parts\nDESCRIPTION: Configuration parameters for creating wedge parts that form the left side of the roof overhang. Includes specific size, position, orientation, color, and material properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_29\n\nLANGUAGE: Properties\nCODE:\n```\nSize: 2, 11, 21\nCFrame.Position: -18.5, 25.5, 278\nCFrame.Orientation: 0, -90, 180\nColor: 248, 248, 248\nMaterial: Concrete\nMaterialVariant: Concrete_Board_Formed_A\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Color - Lua\nDESCRIPTION: This snippet shows how to set the color of the particle emitter based on the color of the part that was touched. A `ColorSequence` is created using the `currentColor` variable and assigned to the `particle.Color` property. It relies on Roblox's ColorSequence.new() method.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\n-- Destroy part\npointPart:Destroy()\n\n-- Create particles\nlocal particle = Instance.new(\"ParticleEmitter\")\nparticle.Color = ColorSequence.new(currentColor)\n```\n\n----------------------------------------\n\nTITLE: Creating an Apply Button with React\nDESCRIPTION: This React snippet creates a 'Apply' button that directs users to a specified URL. The button is styled with a large size, contained variant, and a fixed width of 200 units. It is implemented with the Material-UI library or similar. Adjust the URL in the 'href' attribute as needed for different application forms.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/spotlights.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Button href=\"https://survey.roblox.com/jfe/form/SV_71CLpOMprlzQ8JM\" size='large' variant='contained' style={{width:200}}>Apply</Button>\n```\n\n----------------------------------------\n\nTITLE: Registering New Chat Animation Trigger in Lua\nDESCRIPTION: This snippet demonstrates how to register a new animation with multiple trigger word patterns for the chat animation feature.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/social-interactions.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SocialInteractions = require(ReplicatedStorage:WaitForChild(\"SocialInteractions\"))\n\n-- Register new string pattern for a custom animation\nSocialInteractions.setTriggerWordsForChatAnimation(\n\t\"rbxassetid://3334538554\",\n\t{\"cra+zy\", \"woah+\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Property Values for ColorGradingEffect\nDESCRIPTION: Enum values available for the TonemapperPreset property of ColorGradingEffect, which controls color rendering in Roblox experiences.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/post-processing-effects.md#2025-04-21_snippet_0\n\nLANGUAGE: roblox\nCODE:\n```\nEnum.TonemapperPreset.Default -- Post-2019 Roblox appearance with vivid colors\\nEnum.TonemapperPreset.Retro  -- Pre-2019 Roblox appearance with less saturation\n```\n\n----------------------------------------\n\nTITLE: Assigning Filtered Names from User Input - Lua\nDESCRIPTION: This script listens for a remote event to receive a name change request from the client, filters the input for inappropriate content, and assigns the filtered name to the user's humanoid display name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/name-health-display.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal TextService = game:GetService(\"TextService\")\n\n-- Create remote event to receive text from client for filtering\nlocal changeNameEvent = Instance.new(\"RemoteEvent\")\nchangeNameEvent.Name = \"ChangeNameEvent\"\nchangeNameEvent.Parent = ReplicatedStorage\n\nlocal function onRequestNameChange(player, newName)\n\tlocal character = player.Character\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n\tlocal filterResult\n\tlocal success, errorMessage = pcall(function()\n\t\tfilterResult = TextService:FilterStringAsync(newName, player.UserId)\n\tend)\n\tif success then\n\t\tlocal filteredName\n\t\tlocal success, errorMessage = pcall(function()\n\t\t\tfilteredName = filterResult:GetNonChatStringForBroadcastAsync()\n\t\tend)\n\t\tif success and humanoid then\n\t\t\thumanoid.DisplayName = filteredName\n\t\tend\n\tend\nend\n\nchangeNameEvent.OnServerEvent:Connect(onRequestNameChange)\n```\n\n----------------------------------------\n\nTITLE: Score Increment Handler in Roblox Lua\nDESCRIPTION: Function that handles incrementing both team and individual player scores, updating both client and server values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction Scoring.incrementScore(player: Player, amount: number)\n\tlocal team = player.Team\n\tassert(team, `Player {player.Name} must be on a team to score a point, but has no team`)\n\n\tlocal teamPoints = team:GetAttribute(GuiAttribute.teamPoints)\n\tteamPoints += amount\n\tteam:SetAttribute(GuiAttribute.teamPoints, teamPoints)\n\n\tlocal leaderstat = player.leaderstats.Points\n\tleaderstat.Value += amount\n\n\tteamScoreChangedBindable:Fire(team, teamPoints)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing a Story String in Lua for Roblox\nDESCRIPTION: Code showing how to initialize a story variable with the first part of the narrative text, preparing it for concatenation with player input.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/code-the-story.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n  -- Code story between the dashes\n  -- =============================================\n     local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n     local story = \"In a tree on a hill lives the great wizard \"\n  -- =============================================\n```\n\n----------------------------------------\n\nTITLE: Syncing Team Points in Lua for Laser Tag HUD\nDESCRIPTION: This script handles the synchronization of team points in the HUD. It matches team colors to the corresponding GUI elements and updates the point display whenever a team's score changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Teams = game:GetService(\"Teams\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\n\nlocal function getTeamFromTeamColor(teamColor: Color3): Team?\n\tfor _, team in Teams:GetTeams() do\n\t\tif team.TeamColor == teamColor then\n\t\t\treturn team\n\t\tend\n\tend\n\n\treturn nil\nend\n\nlocal function startSyncingTeamPoints(gui: ScreenGui)\n\tfor _, teamPointCounter in gui.Objective.TeamPointCounter:GetChildren() do\n\t\tif not teamPointCounter:IsA(\"GuiObject\") then\n\t\t\tcontinue\n\t\tend\n\n\t\tlocal iconTeamColor = teamPointCounter:GetAttribute(GuiAttribute.teamColor)\n\n\t\tlocal team = getTeamFromTeamColor(iconTeamColor)\n\t\tif not team then\n\t\t\twarn(`No team found matching the color {iconTeamColor} to sync team points on {teamPointCounter}`)\n\t\t\tcontinue\n\t\tend\n\n\t\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n\n\t\tteam:GetAttributeChangedSignal(GuiAttribute.teamPoints):Connect(function()\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Tweening with Click Detection in Roblox Lua\nDESCRIPTION: This script changes a part's color when clicked and destroys it after 3 clicks. It uses TweenService to create a smooth transition between the original color and a specified hit color, with the tween reversing after completion. The script also prevents multiple tweens from running simultaneously.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/animating-parts.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Tween an object's color upon click and destroy it after 3 clicks\nlocal TweenService = game:GetService(\"TweenService\")\nlocal partToTween = script.Parent\nlocal clickDetector = partToTween:FindFirstChildWhichIsA(\"ClickDetector\")\nlocal inTween = false\n\n-- Customizeable variables\nlocal TWEEN_TIME = 0.2\nlocal COLOR_ON_HIT = Color3.fromRGB(255, 0, 50)\nlocal hitCount = 0\n\n-- Tween variables\nlocal tweenInfo = TweenInfo.new(\n\tTWEEN_TIME, -- Time\n\tEnum.EasingStyle.Exponential, -- EasingStyle\n\tEnum.EasingDirection.InOut, -- EasingDirection\n\t0, -- RepeatCount (when less than zero the tween will loop indefinitely)\n\ttrue  -- Reverses (tween will reverse once reaching its goal)\n)\n\nlocal function activateAction()\n\t-- If the object is tweening, prevent it from being tweened again\n\tif inTween == true then\n\t\treturn\n\tend\n\n\t-- Create a tween and play it\n\tlocal tweenObject = TweenService:Create(partToTween, tweenInfo, {Color = COLOR_ON_HIT})\n\ttweenObject:Play()\n\tinTween = true\n\n\t-- On tween completion, make object clickable again\n\ttweenObject.Completed:Connect(function()\n\t\tinTween = false\n\t\t-- Increment hit count\n\t\thitCount += 1\n\t\t-- After 3 hits, destroy the object\n\t\tif hitCount == 3 then\n\t\t\tpartToTween:Destroy()\n\t\tend\n\tend)\nend\n\nclickDetector.MouseClick:Connect(activateAction)\n```\n\n----------------------------------------\n\nTITLE: Handling Character Added Event\nDESCRIPTION: Create an event handler for player character spawning with player context\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onCharacterAdded(character, player)\n\nend\n\nlocal function onPlayerAdded(player)\n  player.CharacterAdded:Connect(function(character)\n    onCharacterAdded(character, player)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Effect for Interactive Objects in Roblox\nDESCRIPTION: Uses the Class.Highlight feature to make specific objects stand out from their surroundings, guiding players to interact with story-relevant items. The highlight effect can outline and/or overlay objects with a specific color that fits the shape of the object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/immersive-narrative.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nClass.Highlight\n```\n\n----------------------------------------\n\nTITLE: Creating a Leaderboard System in Roblox Luau\nDESCRIPTION: Script that sets up a basic leaderboard system in Roblox. It creates a 'Points' value for each player when they join the game, which will be displayed on the leaderboard.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--In ServerScriptService, create a script named PlayerSetup with the contents below.\n\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerJoin(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\n\n\t-- Example of an IntValue\n\tlocal points = Instance.new(\"IntValue\")\n\tpoints.Name = \"Points\"\n\tpoints.Value = 0\n\tpoints.Parent = leaderstats\nend\n\n-- Run onPlayerJoin when the PlayerAdded event fires\nPlayers.PlayerAdded:Connect(onPlayerJoin)\n```\n\n----------------------------------------\n\nTITLE: Coding Player Gold Stat in Lua for Roblox\nDESCRIPTION: Adds an IntValue named 'Gold' to the leaderboard for tracking player's money, initialized to zero. The IntValue is parented to leaderstats to ensure visibility.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerJoin(player)\n      local leaderstats = Instance.new(\"Folder\")\n      leaderstats.Name = \"leaderstats\"\n      leaderstats.Parent = player\n\n      local gold = Instance.new(\"IntValue\")\n   end\n```\n\n----------------------------------------\n\nTITLE: Disabling the MerchBooth System in Roblox\nDESCRIPTION: Shows how to check if the MerchBooth is enabled and then disable it, which removes the UI, proximity prompts, and disconnects all events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal isEnabled = MerchBooth.isMerchBoothEnabled()\nif isEnabled then\n\tMerchBooth.setEnabled(false)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating isHitValid Function Skeleton in Lua\nDESCRIPTION: Initial function definition for the isHitValid function that will perform server-side validation of hits. This function will check if a hit is legitimate.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nend\n\nlocal function isHitValid(playerFired, characterToDamage, hitPosition)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Using script.Parent to Change Color of Parent Object in Roblox Lua\nDESCRIPTION: This improved script uses script.Parent to reference whatever part the script is attached to, making it reusable. When the script runs, it changes the color of its parent object without needing to reference it by name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/parents-and-children.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal colorPart = script.Parent\ncolorPart.Color = Color3.fromRGB(50, 240, 255)\n```\n\n----------------------------------------\n\nTITLE: Joining Player Formula for Player Numerical Signal\nDESCRIPTION: Calculates a score based on the difference between the server's average player attribute and the joining player's attribute. The score approaches 1 when the difference is small and decreases to 0 as the difference increases beyond the max_relevant_difference value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal diff = math.abs(server_{aggregation_function}_{attribute_name} - joining_player_{attribute_name})\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Health Meter in Roblox\nDESCRIPTION: This Lua script disables the default Roblox health meter using StarterGui:SetCoreGuiEnabled(). It's placed in a LocalScript within StarterPlayerScripts to run when a player joins the experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/create-hud-meters.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal StarterGui = game:GetService(\"StarterGui\")\n\n-- Hide default health meter\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Health, false)\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Print to Touched Function in Lua\nDESCRIPTION: Adds a print statement to verify when the onTouch function is called. This helps with debugging by confirming the event is firing correctly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/use-parameters-and-events.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal trap = script.Parent\n\nlocal function onTouch(objectTouched)\n    print(\"Something touched the trap\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmosphere Properties in Roblox\nDESCRIPTION: Settings for the Atmosphere object to control environmental atmosphere effects like density, haze, and decay.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_39\n\nLANGUAGE: roblox\nCODE:\n```\nDensity = 0.285\nOffset = 0.65\nDecay = 254, 254, 254\nGlare = 0.3\nHaze = 2\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord Bot with Message Content Intent\nDESCRIPTION: Sets up the Discord client with the message content intent enabled, which is necessary for reading message content.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/automate-right-to-erasure.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nintents = discord.Intents.default()\nintents.message_content = True\nclient = discord.Client(intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Grid Container Component Implementation\nDESCRIPTION: React/JSX component for displaying image grids with configurable column count.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/caging-best-practices.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GridContainer numColumns=\"3\">\n<figure>\n<img src=\"../../assets/accessories/caging-best-practices/7-Typical-Caging-Example-D.png\" width=\"100%\" alt=\"\"/>\n<figcaption>A properly configured cage typically includes a tight layering of the inner cage, clothing mesh, and the outer cage.</figcaption>\n</figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Animating UI Object Along Path in Roblox Lua\nDESCRIPTION: This script animates a GUI object along a Path2D using a Tween. It sets up a tween with specified duration and easing options, and updates the UI object's position based on its correlated sample value. The position is derived from the GetPositionOnCurveArcLength method within the Path2D class.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/2D-paths.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```\nlocal Tweenservice = game:GetService(\"TweenService\")\n\nlocal parent = script.Parent\nlocal path = parent:FindFirstChildWhichIsA(\"Path2D\")\nlocal objectToAnimate = parent:FindFirstChildWhichIsA(\"GuiObject\")\n\nlocal TWEEN_DURATION = 4\nlocal TWEEN_EASING_STYLE = Enum.EasingStyle.Cubic\nlocal TWEEN_EASING_DIRECTION = Enum.EasingDirection.InOut\n\nlocal pathSampleValue = Instance.new(\"NumberValue\")\nlocal tweenInfo = TweenInfo.new(TWEEN_DURATION, TWEEN_EASING_STYLE, TWEEN_EASING_DIRECTION, 0, true, 2)\nlocal tween = Tweenservice:Create(pathSampleValue, tweenInfo, {Value = 1})\n\nlocal function onSampleValueChanged()\n\tobjectToAnimate.Position = path:GetPositionOnCurveArcLength(pathSampleValue.Value)\nend\npathSampleValue.Changed:Connect(onSampleValueChanged)\n\ntween:Play()\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Physics and Rendering Parameters in Lua\nDESCRIPTION: This snippet shows how to set important physics and rendering parameters for BaseParts (including MeshParts) in Lua. These parameters include Anchored, CanCollide, and CanTouch, which affect performance and behavior of objects in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/assemble-an-asset-library.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\npart.Anchored = true -- Removes the object from physics calculations\npart.CanCollide = false -- Disables physical interactions with other objects\npart.CanTouch = false -- Disables Touched and TouchEnded events for the object\n```\n\n----------------------------------------\n\nTITLE: Load Health Pickups Folder in Lua\nDESCRIPTION: This code snippet uses `WaitForChild` to ensure 'HealthPickups' folder is loaded from workspace, and stores its children in an array. It's essential in Roblox environment to handle dynamic loading of game objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MAX_HEALTH = 100\n\nlocal healthPickupsFolder = workspace:WaitForChild(\"HealthPickups\")\nlocal healthPickups = healthPickupsFolder:GetChildren()\n\nlocal function onTouchHealthPickup(otherPart, healthPickup)\n\tlocal character = otherPart.Parent\n\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\thumanoid.Health = MAX_HEALTH\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Friends Locator Click Event with Streaming in Lua\nDESCRIPTION: This code snippet shows how to handle the 'clicked' event of the Friends Locator module, including requesting streaming around the target location if workspace streaming is enabled.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/friends-locator.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal FriendsLocator = require(ReplicatedStorage:WaitForChild(\"FriendsLocator\"))\n\nlocal localPlayer = Players.LocalPlayer\n\nFriendsLocator.clicked:Connect(function(player, playerCFrame)\n\t-- Request streaming around target location\n\tif Workspace.StreamingEnabled then\n\t\tlocal success, errorMessage = pcall(function()\n\t\t\tlocalPlayer:RequestStreamAroundAsync(playerCFrame.Position)\n\t\tend)\n\t\tif not success then\n\t\t\tprint(errorMessage)\n\t\tend\n\tend\n\n\tprint(\"You clicked on locator icon for\", player.DisplayName, \"at position\", playerCFrame.Position)\nend)\n```\n\n----------------------------------------\n\nTITLE: If statement with a mathematical condition\nDESCRIPTION: Demonstrates an if statement with a simple mathematical expression as its condition. The code inside will only execute if the condition evaluates to true.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/intro-to-if-statements.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nif 3 + 3 == 6 then\n\t-- empty code\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Trigger Pressure\nDESCRIPTION: This snippet detects changes in pressure applied to the left and right triggers on Gamepad1.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nUserInputService.InputChanged:Connect(function(input)\n\tif input.UserInputType == Enum.UserInputType.Gamepad1 then\n\t\tif input.KeyCode == Enum.KeyCode.ButtonL2 then\n\t\t\tprint(\"Pressure on left trigger has changed:\", input.Position.Z)\n\t\telseif input.KeyCode == Enum.KeyCode.ButtonR2 then\n\t\t\tprint(\"Pressure on right trigger has changed:\", input.Position.Z)\n\t\tend\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Launching ValidationTool in Maya Python Script Editor\nDESCRIPTION: Command to launch the ValidationTool after the initial import. This can be used for subsequent launches of the tool within the Maya environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/validation-tool.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nValidationTool.validationTool()\n```\n\n----------------------------------------\n\nTITLE: Creating Frame Container for Score Bar\nDESCRIPTION: Instructions for creating a ScreenGui with a frame container that includes UI constraints and layout settings. The frame is positioned at the top-center of the screen with semi-transparent background.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/create-a-score-bar.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\n-- Frame Properties\nAnchorPoint = Vector2.new(0.5, 0)\nBackgroundColor3 = Color3.fromRGB(0, 0, 0)\nBackgroundTransparency = 0.6\nPosition = UDim2.new(0.5, 0, 0.01, 0)\nSize = UDim2.new(0.25, 0, 0.08, 0)\nName = \"ScoreBarFrame\"\n\n-- UISizeConstraint Properties\nMinSize = Vector2.new(0, 40)\n\n-- UIListLayout Properties\nFillDirection = Enum.FillDirection.Horizontal\nVerticalAlignment = Enum.VerticalAlignment.Center\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidechain Compression in Roblox Sound Groups\nDESCRIPTION: Demonstrates how to create dynamic audio mixing using sidechain compression between sound groups to manage audio priority and create spatial audio depth\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/sound-design.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Create sound groups with sidechain compression\nlocal genericAmbience = Instance.new(\"SoundGroup\")\nlocal localAmbience = Instance.new(\"SoundGroup\")\n\n-- Configure sidechain compressor settings\nlocal compressor = Instance.new(\"CompressorSoundEffect\")\ncompressor.Attack = 0.1\ncompressor.Release = 0.5\ncompressor.Threshold = -12\ncompressor.Ratio = 4\n```\n\n----------------------------------------\n\nTITLE: Client-Side Release Function\nDESCRIPTION: Handles client interaction for releasing grabbed objects, triggering server-side release event when GrabReleaseButton is activated\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nfunction ReleaseGrabbedObject()\n    -- Connect to GrabReleaseButton\n    -- Fire release event to server\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumetric Audio for Surface Rain Effects\nDESCRIPTION: A step-by-step configuration for setting up volumetric audio on a car object to create realistic rain impact sounds. This includes part creation, sound object setup, and property configurations for optimal audio emission.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/design-dark-soundscapes.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\nPart.Anchored = true\nPart.CanCollide = false\nPart.Transparency = 1\n\nSound.SoundId = 9178663282\nSound.Playing = true\nSound.Looped = true\nSound.RollOffMaxDistance = 60\nSound.RollOffMinDistance = 15\n```\n\n----------------------------------------\n\nTITLE: Referencing the Start Position in Roblox Animation Timeline\nDESCRIPTION: Indicates the timestamp for the first pose in the animation timeline, which is at the beginning (0:00).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/looping-animations.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`0:00`\n```\n\n----------------------------------------\n\nTITLE: Initializing and Building a New Rojo Project\nDESCRIPTION: This snippet creates and builds a new Rojo project structure for a Roblox experience, allowing you to set up file synchronization.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/external-tools.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"\nrojo init my-new-experience\ncd my-new-experience\nrojo build -o my-new-experience.rbxl\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Game Name in Lua\nDESCRIPTION: Example of how to change the game name by modifying the gameName variable in the GameSettings script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/personalize-the-game.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nGameSettings.gameName = \"Wizardry School Simulator\"\n```\n\n----------------------------------------\n\nTITLE: Initiating a Drag Action in Roblox Widgets - Lua\nDESCRIPTION: This snippet defines how to start a drag operation in Roblox by using the MouseButton1Down event of a button. The drag data is prepared with Meta information like MimeType and Data, then passed to the Plugin's StartDrag method to begin the interaction.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onButton1Down()\n\tlocal dragInfo = {\n\t\tData = \"Hello, world\",      -- The data being dragged\n\t\tMimeType = \"text/plain\",    -- Describes the MIME type of the data\n\t\tSender = \"SomeDragSource\",  -- Describes from where the data originated\n\t\tMouseIcon = \"\",             -- Image content to use for the cursor\n\t\tDragIcon = \"\",              -- Image content to render under the cursor during drag\n\t\tHotSpot = Vector2.zero      -- Where on the DragIcon to center the cursor\n\t}\n\tplugin:StartDrag(dragInfo)\nend\n\ndragButton.MouseButton1Down:Connect(onButton1Down)\n```\n\n----------------------------------------\n\nTITLE: Configuring Interior Modular Assets in Roblox HTML\nDESCRIPTION: This snippet contains the configuration details for various modular assets placed in the middle combat pocket's interior. Each entry specifies the asset name, CFrame position, and orientation appropriate for setting up the space.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n   <td>DoorFrame</td>\n   <td>`-60, 5, 185`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallRiseB</td>\n   <td>`-60, 5, 185`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallSmall</td>\n   <td>`-85, 10, 185`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerInner</td>\n   <td>`-90, 10, 180`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallMid</td>\n   <td>`-90, 10, 170`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFrame</td>\n   <td>`-90, 10, 150`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>WallMid</td>\n   <td>`-90, 10, 140`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>WallCornerInner</td>\n   <td>`-85, 10, 135`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>WallSmall</td>\n   <td>`-80, 10, 135`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>WallRiseA</td>\n   <td>`-60, 5, 135`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFrame</td>\n   <td>`-40, 5, 135`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>ExtTrimAShort</td>\n   <td>`-65, 5, 151`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>ExtTrimAShort</td>\n   <td>`-75, 5, 169`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>ExtTrimAMid</td>\n   <td>`-65, 5, 169`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>ExtTrimAMid</td>\n   <td>`-65, 10, 167`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>ExtTrimACorner</td>\n   <td>`-65, 5, 169`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>ExtTrimACorner</td>\n   <td>`-65, 5, 151`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFramePlug</td>\n   <td>`-40, 5, 200`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFramePlug</td>\n   <td>`-60, 5, 185`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFramePlug</td>\n   <td>`-100, 10, 170`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFramePlug</td>\n   <td>`-105, 10, 170`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFramePlug</td>\n   <td>`-110, 10, 170`</td>\n   <td>`0, 180, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFramePlug</td>\n   <td>`-105, 10, 150`</td>\n   <td>`0, 0, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFramePlug</td>\n   <td>`-60, 5, 120`</td>\n   <td>`0, 90, 0`</td>\n   </tr>\n   <tr>\n   <td>DoorFramePlug</td>\n   <td>`-40, 5, 135`</td>\n   <td>`0, -90, 0`</td>\n   </tr>\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Object Parameters in EventManager\nDESCRIPTION: Example of setting up root object parameters for event handling in the game's foyer area.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nparams = {\n\t[\"RootObject\"] = workspace.Content.Interior.Foyer[\"Ritual-DemoVersion\"],\n},\ninterpolants = {\n      objectName = \"Wander\",\n      attribute = \"TimeScale\",\n      keys = {\n            {value = 0.2}\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling X-Axis Symmetry and Topology Mirror in Blender\nDESCRIPTION: This step ensures symmetrical vertex changes to the cage mesh. It's crucial for maintaining consistency across both sides of the character's head.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/creating/caging.md#2025-04-21_snippet_0\n\nLANGUAGE: blender\nCODE:\n```\n# 1. Select the Head_OuterCage object\n# 2. Switch to Edit Mode\n# 3. Enable X-Axis symmetry\n# 4. Enable Topology Mirror\n```\n\n----------------------------------------\n\nTITLE: Getting Universe Display Info Automatic Translation Settings - REST API\nDESCRIPTION: Retrieves the automatic translation settings for universe display information for the specified gameId. Access requires authentication.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /v1/supported-languages/games/{gameId}/universe-display-info-automatic-translation-settings\n```\n\n----------------------------------------\n\nTITLE: Implementing Literal Types for Constants\nDESCRIPTION: The code demonstrates the use of literal types in Luau to enforce constant value constraints. It shows how assigning a different value than the one specified in the literal definition results in a type error, enhancing type safety with constants.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal alwaysHelloWorld: \"Hello world!\" = \"Hello world!\"\nalwaysHelloWorld = \"Just hello!\"  -- Type error: Type '\"Just hello!\"' could not be converted into '\"Hello world!\"'\n\nlocal alwaysTrue: true = false  -- Type error: Type 'false' could not be converted into 'true'\n```\n\n----------------------------------------\n\nTITLE: Testing a Function with Multiple Parameters using Print\nDESCRIPTION: Creates a sortGarbage function with two parameters (trash and recyclable) and tests it using a print statement. The function is then called without arguments to verify it runs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function sortGarbage(trash, recyclable)\n   print(\"garbage test\")\nend\n\nsortGarbage()\n```\n\n----------------------------------------\n\nTITLE: Accessing SurfaceAppearance Properties in Lua\nDESCRIPTION: This snippet demonstrates how to access the four main properties of a SurfaceAppearance object in Lua. These properties correspond to different texture maps used to create high-quality 3D visual surface treatments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/assemble-an-asset-library.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal surfaceAppearance = Instance.new(\"SurfaceAppearance\")\n\nsurfaceAppearance.ColorMap = -- Represents the albedo texture map\nsurfaceAppearance.MetalnessMap = -- Represents the metalness texture map\nsurfaceAppearance.NormalMap = -- Represents the normal texture map\nsurfaceAppearance.RoughnessMap = -- Represents the roughness texture map\n```\n\n----------------------------------------\n\nTITLE: Setting Objective Text in Lua for Laser Tag HUD\nDESCRIPTION: This script updates the objective text in the HUD GUI by replacing a placeholder with the team score limit. It requires the TEAM_SCORE_LIMIT module to get the correct score limit value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal TEAM_SCORE_LIMIT = require(ReplicatedStorage.TEAM_SCORE_LIMIT)\n\nlocal function setObjective(gui: ScreenGui)\n\tlocal bodyTextLabel = gui.Objective.ObjectiveDisplay.Body.BodyTextLabel\n\tbodyTextLabel.Text = bodyTextLabel.Text:format(TEAM_SCORE_LIMIT)\nend\n\nreturn setObjective\n```\n\n----------------------------------------\n\nTITLE: Closing the MerchBooth UI in Roblox\nDESCRIPTION: Demonstrates how to programmatically close the MerchBooth window from a LocalScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.closeMerchBooth()\n```\n\n----------------------------------------\n\nTITLE: Defining Time Up Function in Lua\nDESCRIPTION: This snippet creates a function named `timeUp()` that is called when the timer finishes.  It currently includes a placeholder print statement, which can be replaced with logic to end the match.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function timeUp()\n\tprint(\"Time is up!\")\nend\n\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\nend\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Setting BasePart.CastShadow Property to Enabled in Roblox\nDESCRIPTION: Example showing how to enable shadow casting for parts in Roblox. This property allows objects to cast shadows, enhancing visual realism at the cost of some performance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/optimize-your-experience.md#2025-04-21_snippet_1\n\nLANGUAGE: roblox\nCODE:\n```\nClass.BasePart.CastShadow = Enabled\n```\n\n----------------------------------------\n\nTITLE: Teleporting Players in Roblox Connect (Lua)\nDESCRIPTION: Shows how players are teleported to different places using the TeleportService. This is used in the environment switcher when moving players to an environment in a different place.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/roblox-connect.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nClass.TeleportService\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Only Containers in Roblox\nDESCRIPTION: Explanation of server-dedicated services like ServerScriptService and ServerStorage for secure, non-replicated script and object management\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/data-model.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- ServerScriptService: Contains server-only scripts\n-- ServerStorage: Stores server-specific objects for runtime usage\n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Sort to Price Low-to-High in Roblox MerchBooth\nDESCRIPTION: Demonstrates how to set a custom sorting function for the catalog view that sorts items by price from lowest to highest.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setCatalogSort(function(a, b)\n\treturn a.price < b.price\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating an Infinite Color Cycle Loop in Roblox Luau\nDESCRIPTION: While loop structure that will be used to cycle through different colors for the part. The 'true' condition ensures the loop runs indefinitely.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n-- Checks if player touched the part\nlocal function partTouched(otherPart)\n\t-- Gets the player if one touched the part\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\tif player then\n\t\tgivePoints(player)\n\tend\nend\n\npointPart.Touched:Connect(partTouched)\n\n-- Loops through colors\nwhile true do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Face Control: LeftInnerBrowRaiser\nDESCRIPTION: This section describes the `LeftInnerBrowRaiser` face control, which raises the interior half of the character's left brow upwards. It references the `Class.FaceControls.LeftInnerBrowRaiser` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Joining Player Example for Player Numerical Signal\nDESCRIPTION: An example implementation of the player numerical signal formula using Elo ratings as the attribute. It calculates the difference between a server's average Elo of 2000 and a joining player's Elo of 1000, with a maximum relevant difference of 1500.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_average_Elo = 2000\nlocal joining_player_Elo = 1000\nlocal max_relevant_difference = 1500\n\nlocal diff = math.abs(server_average_Elo - joining_player_Elo)\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Creating NumberSequence Attribute in Roblox\nDESCRIPTION: Steps to create a NumberSequence attribute called 'BrightnessCurve' that controls the lamp's brightness over time. This allows for custom flickering patterns by manipulating keypoints on a brightness curve.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/create-flickering-lights.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\n-- Create BrightnessCurve attribute\nName: \"BrightnessCurve\"\nType: NumberSequence\n\n-- Create LoopDuration attribute\nName: \"LoopDuration\"\nType: Number\nValue: 1\n```\n\n----------------------------------------\n\nTITLE: Connecting to itemAdded Event in Roblox MerchBooth\nDESCRIPTION: Demonstrates how to connect to the itemAdded event which fires when an item is added through addItemAsync, providing the asset ID and item information.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.itemAdded:Connect(function(assetId, itemInfo)\n\tprint(\"Item added with asset ID of\", assetId)\n\tprint(itemInfo)\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Outdoor Floor Parts in Roblox\nDESCRIPTION: This code snippet shows how to set the Color, Material, and MaterialVariant properties for outdoor floor parts in a Roblox environment. It applies specific values to create a visual distinction for outdoor surfaces.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Select outdoor floor parts\nlocal outdoorFloorParts = -- Your selection of outdoor floor parts\n\n-- Set properties for outdoor floor parts\nfor _, part in ipairs(outdoorFloorParts) do\n    part.Color = Color3.fromRGB(233, 218, 218)\n    part.Material = Enum.Material.Concrete\n    part.MaterialVariant = \"Concrete_Tiles_A\"\nend\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth 2.0 Endpoints in HTTP\nDESCRIPTION: Describes the list of endpoints required for the OAuth 2.0 flow including authorization, token retrieval, and user info.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET v1/authorize\nPOST v1/token\nPOST v1/token/introspect\nPOST v1/token/resources\nPOST v1/token/revoke\nGET v1/userinfo\nGET .well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Variable Reference - Roblox Lua\nDESCRIPTION: Example showing proper capitalization in Roblox API methods. Demonstrates the correct usage of the FindFirstChildWhichIsA method name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/lesson-plans/digital-citizenship/coding-fundamentals.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nFindFirstChildWhichIsA\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Face Recording in Roblox\nDESCRIPTION: Steps for recording facial animations using a webcam in the Roblox Animation Editor, including camera selection, recording controls, and post-recording options.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/capture.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. From the toolbar's **Avatar** tab, click **Animation Editor**\n2. Select the rig in the **Explorer** window\n3. Enter animation name and click **Create**\n4. Click **Face Capture** in track list\n5. (Optional) Select camera if multiple available\n6. Click red circle to begin recording\n7. Click red square or timer to stop\n8. (Optional) Click Re-Record to try again\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer Object in Lua\nDESCRIPTION: This snippet demonstrates how to create a new timer object using the `timer.new()` function.  The resulting object `myTimer` is then used to call the timer's functions, such as start and stop.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n```\n\n----------------------------------------\n\nTITLE: Handling 'promptHidden' Event in Roblox\nDESCRIPTION: This Lua snippet handles the 'promptHidden' event from the SurfaceArt module, which fires when a canvas interaction prompt is hidden. The event handler logs details about the canvas where the prompt was previously shown. The connection is made using a 'Class.LocalScript'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.promptClosed:Connect(function(canvas)\n\tprint(Players.LocalPlayer, canvas)\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Local Variables in Lua\nDESCRIPTION: The snippet demonstrates creating a local variable in Lua to store a reference to a Roblox part. This enables easy manipulation of the part later in the script.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Changes the color of LoopingPart every few seconds\nlocal loopingPart = workspace.LoopingPart\n```\n\n----------------------------------------\n\nTITLE: Placing Art on a Canvas in Roblox\nDESCRIPTION: This Lua snippet enables placing an art piece on a canvas on behalf of a player. It connects to a remote event to place 'BloxyAward' art asset into the first canvas. The canvas must be tagged with 'SurfaceCanvas'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nlocal remoteEvent = ReplicatedStorage:WaitForChild(\"SurfaceArtRemoteEvent\")\n\nremoteEvent.OnServerEvent:Connect(function(player)\n\t-- Place the Bloxy Award from default art assets into the first canvas\n\tlocal canvases = SurfaceArt.getCanvases()\n\tSurfaceArt.placeArt(player, canvases[1], \"BloxyAward\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary Creation - Assigning Value\nDESCRIPTION: This snippet adds a value to the `Name` key in the `enemy` dictionary. The string \"Spike\" is assigned as the value for the `Name` key.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal enemy = {\n\tName = \"Spike\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using pairs() to Print Inventory Items in Luau\nDESCRIPTION: Shows how to use pairs() to iterate through an inventory dictionary and print the quantity and name of each item.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/pairs-and-ipairs.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal inventory = {\n\t[\"Gold Bricks\"] = 43,\n\tCarrots = 3,\n\tTorches = 2,\n}\n\nprint(\"You have:\")\n\nfor itemName, itemValue in pairs(inventory) do\n\tprint(itemValue, itemName)\nend\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Developer Product Icon - REST API\nDESCRIPTION: Updates a localized developer product's icon using the developerProductId and languageCode. The icon data must be present in the request body.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST v1/developer-products/{developerProductId}/icons/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshots in Luau Heap Tool - HTML\nDESCRIPTION: This HTML snippet outlines the steps required to create a snapshot of memory allocation in the Luau Heap tool within the Developer Console. It is crucial for developers wanting to analyze memory usage patterns and make optimizations based on the gathered data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/optimization/memory-usage.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ol>\n<li>Open the **Developer Console**.</li>\n<li>Expand the tools dropdown to select **LuauHeap**.</li>\n<li>Expand the client-server dropdown to select **Client** or **Server**.</li>\n<li>Click the **Create Snapshot** button.</li>\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Complex Inventory Filtering with Game Passes\nDESCRIPTION: Advanced query filtering specific item types, including game passes while explicitly excluding badges from results.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_8\n\nLANGUAGE: query_filter\nCODE:\n```\nfilter=inventoryItemAssetTypes=HAT,CLASSIC_PANTS,TSHIRT_ACCESSORY;gamePasses=true;badges=false\n```\n\n----------------------------------------\n\nTITLE: Defining Money Type - JSON\nDESCRIPTION: This snippet shows how to define a money value in Open Cloud APIs using a currency code and a decimal quantity. It includes examples for standard and Creator Store product pricing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/types.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"myPrice\": {\n  \"currencyCode\": \"USD\",\n  \"quantity\": {\n    \"significand\": 1799,\n    \"exponent\": -2\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"myPrice\": {\n  \"currencyCode\": \"USD\",\n  \"quantity\": {\n    \"significand\": 17990000000,\n    \"exponent\": -9\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Player Event Listeners in Lua\nDESCRIPTION: Connects the PlayerAdded event to load player data and prompt available bundles when a player joins. It highlights the use of Bundles' onPlayerAdded and prompt functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerAdded(player: Player)\n    Bundles.onPlayerAdded(player)\n\n    onPromptBundleXYZEvent(player)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Spawn Zone Lights Properties\nDESCRIPTION: Property settings for spawn zone lighting including dimensions and positioning for both left and right spawn zones using block parts with neon material.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_42\n\nLANGUAGE: roblox\nCODE:\n```\n-- Left Spawn Zone Properties\nColor = 88, 218, 171\nMaterial = Neon\nSize = 62.5, 1, 37.5\nCFrame.Position = -77, 20.6, 321\nAnchored = true\n\n-- Right Spawn Zone Properties\nColor = 255, 170, 255\nMaterial = Neon\nSize = 62.5, 1, 37.5\nCFrame.Position = -77, 20.6, 1\nAnchored = true\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout for Picks\nDESCRIPTION: This snippet utilizes a Grid component from a UI library to layout various sections including eligibility criteria and application instructions. It organizes content into rows and columns with spacing and styling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/todays-picks-marketplace.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Grid container spacing={2}>\n  <Grid item container Large={8} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n  <Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n    <h2>Why apply?</h2>\n    <p>Using the combined efforts of our team of Roblox editors and our Marketplace recommendation system, Today's Picks on Marketplace will give us more ways to feature the work and creativity you bring to Roblox.</p>\n    <h2>Eligibility</h2>\n    <ul>\n      <li>Be 17+ and ID-verified</li>\n      <li>Meet our [Community Standards](https://en.help.roblox.com/hc/en-us/articles/203313410-Roblox-Community-Standards) and [Marketplace Policy](../marketplace/marketplace-policy.md)</li>\n    </ul>\n    <h2>How to apply</h2>\n    <p>Fill out the survey below to nominate your item. We review new submissions every week. Due to the high volume of applicants, only those selected for Today's Picks on Marketplace will be contacted. If you don't hear back, we encourage you to reapply when you have new items to submit.</p>\n    <Button href=\"https://survey.roblox.com/jfe/form/SV_8cZb94oj9OvQm9g\" size='large' variant='contained' style={{width:200}}>Apply</Button>\n  </Grid>\n  </Grid>\n  <Grid item container Large={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n  <Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n      <img src=\"../assets/misc/Todays-Picks-Marketplace.png\" width=\"85%\" />\n  </Grid>\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Right Combat Pocket's Exterior Assets in Roblox HTML\nDESCRIPTION: This snippet provides the asset configurations for the right combat pocket's exterior, listing the necessary components such as walls and their respective CFrame positions and orientations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n      <td>WallCornerOuter</td>\n      <td>`-95, 5, 95`</td>\n      <td>`0, -90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallLarge</td>\n      <td>`-95, 5, 95`</td>\n      <td>`0, 180, 0`</td>\n      </tr>\n      <tr>\n      <td>DoorFrame</td>\n      <td>`-95, 5, 80`</td>\n      <td>`0, 180, 0`</td>\n      </tr>\n      <tr>\n      <td>WallCornerInner</td>\n      <td>`-95, 5, 60`</td>\n      <td>`0, -90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallSmall</td>\n      <td>`-100, 5, 55`</td>\n      <td>`0, -90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallCornerOuter</td>\n      <td>`-105, 5, 55`</td>\n      <td>`0, -90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallLarge</td>\n      <td>`-105, 5, 55`</td>\n      <td>`0, 180, 0`</td>\n      </tr>\n      <tr>\n      <td>WallCornerOuter</td>\n      <td>`-105, 5, 40`</td>\n      <td>`0, 180, 0`</td>\n      </tr>\n      <tr>\n      <td>WallMid</td>\n      <td>`-105, 5, 40`</td>\n      <td>`0, 90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallCornerOuter</td>\n      <td>`-95, 5, 40`</td>\n      <td>`0, 90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallCornerInner</td>\n      <td>`-95, 5, 40`</td>\n      <td>`0, 90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallMid</td>\n      <td>`-90, 5, 45`</td>\n      <td>`0, 90, 0`</td>\n      </tr>\n      <tr>\n      <td>DoorFrame</td>\n      <td>`-80, 5, 45`</td>\n      <td>`0, 90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallLarge</td>\n      <td>`-60, 5, 45`</td>\n      <td>`0, 90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallCornerOuter</td>\n      <td>`-45, 5, 45`</td>\n      <td>`0, 90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallSmall</td>\n      <td>`-45, 5, 45`</td>\n      <td>`0, 0, 0`</td>\n      </tr>\n      <tr>\n      <td>WallLarge</td>\n      <td>`-45, 5, 50`</td>\n      <td>`0, 0, 0`</td>\n      </tr>\n      <tr>\n      <td>WallLarge</td>\n      <td>`-45, 5, 65`</td>\n      <td>`0, 0, 0`</td>\n      </tr>\n      <tr>\n      <td>WallLarge</td>\n      <td>`-45, 5, 80`</td>\n      <td>`0, 0, 0`</td>\n      </tr>\n      <tr>\n      <td>WallCornerOuter</td>\n      <td>`-45, 5, 95`</td>\n      <td>`0, 0, 0`</td>\n      </tr>\n      <tr>\n      <td>WallMid</td>\n      <td>`-45, 5, 95`</td>\n      <td>`0, -90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallSmall</td>\n      <td>`-55, 5, 95`</td>\n      <td>`0, -90, 0`</td>\n      </tr>\n      <tr>\n      <td>DoorFrame</td>\n      <td>`-60, 5, 95`</td>\n      <td>`0, -90, 0`</td>\n      </tr>\n      <tr>\n      <td>WallLarge</td>\n      <td>`-80, 5, 95`</td>\n      <td>`0, -90, 0`</td>\n      </tr>\n```\n\n----------------------------------------\n\nTITLE: Setting Cube Color in Luau\nDESCRIPTION: This Luau snippet adds the functionality to set the color of the cube being created. It uses the `currentColor` variable to define the cube's color property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function makeCube()\n  local cube = Instance.new(\"Part\")\n  cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n  cube.Color = currentColor\nend\n```\n\n----------------------------------------\n\nTITLE: Controlling Eye Direction with FACS\nDESCRIPTION: Basic eye movement controls for looking in different directions using FACS system.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.EyesLookDown\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.EyesLookLeft\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.EyesLookRight\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.EyesLookUp\n```\n\n----------------------------------------\n\nTITLE: Connecting to Selfie Mode Action Events in Lua\nDESCRIPTION: This snippet shows how to connect to the actionActivated and actionDeactivated events of the Selfie Mode module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.actionActivated:Connect(function(action)\n\tprint(action.name, \"activated\")\nend)\n\nSelfieMode.actionDeactivated:Connect(function(action)\n\tprint(action.name, \"deactivated\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Ordering Localized Game Thumbnails - REST API\nDESCRIPTION: This endpoint requests the ordering of localized game thumbnails for a specific gameId and languageCode. The order details should be provided in the request body.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/images/order\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Zoom Range in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to set the maximum and minimum zoom distances for the camera in a Roblox experience using a LocalScript. It accesses the Players service to get the local player and sets their CameraMaxZoomDistance and CameraMinZoomDistance properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/camera.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nplayer.CameraMaxZoomDistance = 25\nplayer.CameraMinZoomDistance = 50\n```\n\n----------------------------------------\n\nTITLE: Enabling Chat Components in Lua Client Script\nDESCRIPTION: This Lua script enables chat components such as the chat window, input bar, and channel tabs in a Roblox game. It accesses the TextChatService to modify the ChatWindowConfiguration, ChatInputBarConfiguration, and ChannelTabsConfiguration, toggling their enabled status. This snippet is executed on the client-side within the StarterPlayerScripts folder in Roblox Studio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/chat-window.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal ChatWindowConfiguration = TextChatService:FindFirstChildOfClass(\"ChatWindowConfiguration\")\nlocal ChatInputBarConfiguration = TextChatService:FindFirstChildOfClass(\"ChatInputBarConfiguration\")\nlocal ChannelTabsConfiguration = TextChatService:FindFirstChildOfClass(\"ChannelTabsConfiguration\")\n\n-- Enable chat window\nif ChatWindowConfiguration then\n\tChatWindowConfiguration.Enabled = true\nend\n-- Enable input bar\nif ChatInputBarConfiguration then\n\tChatInputBarConfiguration.Enabled = true\nend\n-- Enable channel tabs\nif ChannelTabsConfiguration then\n\tChannelTabsConfiguration.Enabled = true\nend\n```\n\n----------------------------------------\n\nTITLE: TODO Comments in Luau\nDESCRIPTION: This code snippet shows how to use `TODO` comments in Luau. Roblox Studio bolds any text following `TODO` (until broken by a space). Use `TODO` comments to keep track of and communicate issues within your code.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/comments.md#2025-04-21_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\n-- TODO: Finish the function below so that it actually does what its name implies.\nlocal function stopWorldFromBlowingUp()\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Cooldown Bar to Blaster in Lua\nDESCRIPTION: Module script that handles attaching a new instance of the cooldown meter to the player's blaster. It positions and welds the cooldown meter UI to face the camera appropriately.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal cooldownBarPrefab = ReplicatedStorage.Instances.Guis.CooldownBarPrefab\n\nlocal function addCooldownBar(attachment: Attachment): Part\n\tlocal part = cooldownBarPrefab:Clone()\n\n\t-- Move and weld the cooldown bar part to the blaster\n\tpart:PivotTo(attachment.WorldCFrame)\n\n\tlocal weld = Instance.new(\"WeldConstraint\")\n\tweld.Part0 = attachment.Parent\n\tweld.Part1 = part\n\tweld.Parent = part\n\n\t-- Make sure the weld is setup prior to parenting to the blaster\n\tpart.Parent = attachment.Parent\n\n\treturn part\nend\n\nreturn addCooldownBar\n```\n\n----------------------------------------\n\nTITLE: Updating Alt Text for Game Thumbnail - REST API\nDESCRIPTION: This endpoint updates the alt text for a game thumbnail associated with the specified gameId and languageCode.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/alt-text\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Sell Value in Roblox Lua\nDESCRIPTION: This snippet computes the total sell value for items based on the number of player items multiplied by a set price of 200. This represents the selling logic for items in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/finishing-the-project.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal totalSell = playerItems.Value * 200\n```\n\n----------------------------------------\n\nTITLE: Local Variable and Function Declaration in Luau\nDESCRIPTION: Shows the recommended practice of using local scope for variables and functions, demonstrating local keyword usage and function definition\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/index.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal logMessage = \"User has more than 10 items!\"\nlocal function printMessage()\n\tprint(logMessage)\nend\nprintMessage() --> User has more than 10 items!\n```\n\n----------------------------------------\n\nTITLE: Advanced Message Categorization with Metadata\nDESCRIPTION: Demonstrates how to use metadata to categorize different types of system messages and apply distinct styles based on message type\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/examples/custom-system-messages.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nTextChannel:DisplaySystemMessage(\"This is an error!\", \"Game.Error.Generic\")\nTextChannel:DisplaySystemMessage(\"Could not find save data!\", \"Game.Error.SaveDataNotFound\")\n\nTextChannel:DisplaySystemMessage(\"You won the game!\", \"Game.Info.Win\")\nTextChannel:DisplaySystemMessage(\"You lost the game!\", \"Game.Info.Lose\")\n\nTextChannel.OnIncomingMessage = function(message: TextChatMessage)\n  if string.find(message.Metadata, \"Error\") then\n    local overrideProperties = Instance.new(\"TextChatMessageProperties\")\n    overrideProperties.TextColor = Color3.fromRGB(255, 0, 0)\n    return overrideProperties\n  elseif string.find(message.Metadata, \"Info\") then\n    local overrideProperties = Instance.new(\"TextChatMessageProperties\")\n    overrideProperties.TextColor = Color3.fromRGB(0, 255, 150)\n    return overrideProperties\n  end\n\n  return nil\nend\n```\n\n----------------------------------------\n\nTITLE: Raycasting with weaponRaycastParams in Lua\nDESCRIPTION: This snippet performs the raycast using the calculated direction vector and the configured RaycastParams. It then stores the RaycastResult in the weaponRaycastResult variable for further processing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function fireWeapon()\n\tlocal mouseLocation = getWorldMousePosition()\n\n\t-- Calculate a normalised direction vector and multiply by laser distance\n\tlocal targetDirection = (mouseLocation - tool.Handle.Position).Unit\n\n\t-- The direction to fire the weapon multiplied by a maximum distance\n\tlocal directionVector = targetDirection * MAX_LASER_DISTANCE\n\n\t-- Ignore the player's character to prevent them from damaging themselves\n\tlocal weaponRaycastParams = RaycastParams.new()\n\tweaponRaycastParams.FilterDescendantsInstances = {Players.LocalPlayer.Character}\n\tlocal weaponRaycastResult = workspace:Raycast(tool.Handle.Position, directionVector, weaponRaycastParams)\nend\n```\n\n----------------------------------------\n\nTITLE: Removing an Item from MerchBooth\nDESCRIPTION: Demonstrates removing a previously added item from the MerchBooth using the removeItem method after a specified delay.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\t-- After some time, remove the item\n\ttask.wait(5)\n\tMerchBooth.removeItem(4819740796)\nend\n```\n\n----------------------------------------\n\nTITLE: Delete all data in a Hash Map - Lua\nDESCRIPTION: This snippet explains how to delete all entries in a hash map by listing all items and removing them individually, ensuring to handle errors gracefully.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/hash-map.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal MemoryStoreService = game:GetService(\"MemoryStoreService\")\n\nlocal hashMap = MemoryStoreService:GetHashMap(\"HashMap1\")\n\n-- Get list of items, 32 items at a time\nlocal success, pages = pcall(function()\n\treturn hashMap:ListItemsAsync(32)\nend)\nif success then\n\twhile true do\n\t\t-- Get the current page\n\t\tlocal entries = pages:GetCurrentPage()\n\t\tlocal removeSuccess = true\n\t\tlocal removeError = nil\n\t\t-- Iterate through all key-value pairs on page\n\t\tfor _, entry in ipairs(entries) do\n\t\t\tprint(entry.key .. \" : \" .. tostring(entry.value))\n\t\t\tremoveSuccess, removeError = pcall(function()\n\t\t\t\thashMap:RemoveAsync(entry.key)\n\t\t\tend)\n\n\t\t\tif not removeSuccess then\n\t\t\t\twarn(removeError)\n\t\t\tend\n\t\tend\n\t\t-- Check if last page has been reached\n\t\tif pages.IsFinished then\n\t\t\tprint(\"Finished deleting all data.\")\n\t\t\tbreak\n\t\telse\n\t\t\tprint(\"----------\")\n\t\t\t-- Advance to next page\n\t\t\tpages:AdvanceToNextPageAsync()\n\t\tend\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Adjusting Ambient Lighting for Custom Experience Colors in Roblox Studio\nDESCRIPTION: This snippet demonstrates how to modify the ambient and reflective lighting colors using the Class.Lighting service properties to create a desired environmental effect.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/building/customize-global-lighting.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. In the **Explorer** window, select **Lighting**.\n2. In the **Properties** window,\n   1. Set **Ambient** to `16, 16, 16`. The entire environment becomes subtly darker.\n   1. Set **ColorShift_Top** to `196, 222, 255`. The hue that reflects from surfaces facing the sun lightens.\n   1. Set **OutdoorAmbient** to `134, 158, 190`. All areas except for the tunnel display with a blue-grey hue.\n```\n\n----------------------------------------\n\nTITLE: Joining Player Formula for Server Numerical Signal\nDESCRIPTION: Calculates a score based on the difference between a server's numerical attribute and the joining player's corresponding attribute. The score approaches 1 when the difference is small and decreases as it approaches max_relevant_difference.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal diff = math.abs(server_{attribute_name} - joining_player_{attribute_name})\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Basic Event Connection Setup - Roblox Lua\nDESCRIPTION: Sets up the basic structure for connecting a kill function to the lava's Touched event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/deadly-lava.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal lava = script.Parent\n\nlocal function kill()\n\nend\n\nlava.Touched:Connect(kill)\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to a Set in Lua\nDESCRIPTION: This snippet uses the `Set:add()` method to add a new item to an existing set. The method ensures no duplicate items are added, consistent with set properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruits = Set.new({\"Apple\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\nfruits:add(\"Mango\")\n```\n\n----------------------------------------\n\nTITLE: Initializing GUI Layers in Roblox Lua\nDESCRIPTION: Sets up references to the different GUI screens that will be managed throughout the player's session. The script waits for each GUI screen to load before proceeding.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerGui = localPlayer.PlayerGui\nlocal guiLayers = {\n\tplayerGui:WaitForChild(\"HUDGui\"),\n\tplayerGui:WaitForChild(\"OutStateGui\"),\n\tplayerGui:WaitForChild(\"PickABlasterGui\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bytes - JSON\nDESCRIPTION: This snippet shows how byte data should be encoded as strings using base64 encoding in Open Cloud APIs. Both standard and URL-safe base64 formats are acceptable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/types.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bytes\": \"YWJjMTIzIT8kKiYoKSctRbLx+\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Body Animation Videos in Roblox\nDESCRIPTION: Instructions for importing and processing video files to generate full-body animations for R15 rigs, including file requirements and import process steps.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/capture.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. From the toolbar's **Avatar** tab, click **Animation Editor**\n2. Select R15 rig in **Explorer** window\n3. Enter animation name and click **Create**\n4. Click **…** in Media and Playback Controls\n5. Hover over **Import**, select **Live Animation Creator**\n6. Click **Choose Video**\n7. Select and open video file\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Code Generation for a Specific Luau Function\nDESCRIPTION: Enables native code generation for a single function using the \"@native\" attribute. This allows the function to be compiled directly to machine code, enhancing performance while keeping functionality unchanged.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/native-code-gen.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n@native\\nlocal function f(x)\\n  return (x + 1)\\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Roblox Backpack GUI\nDESCRIPTION: Demonstrates how to disable the default Roblox backpack GUI and replace it with a custom implementation using StarterGui\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/index.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nStarterGui:SetCoreGuiEnabled()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Story in Roblox Using Lua\nDESCRIPTION: Complete implementation showing how to display the combined story to the player using the storyMaker:Write() function with the story variable as a parameter.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/code-the-story.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n  -- Code story between the dashes\n  -- =============================================\n      local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n      local story = \"In a tree on a hill lives the great wizard \" .. name1\n  -- =============================================\n\n\n    -- Add the story variable between the parenthesis below\n    storyMaker:Write(story)\n```\n\n----------------------------------------\n\nTITLE: Creating Cube with Position Parameters in Luau\nDESCRIPTION: This code modifies the `makeCube` function to accept `spawnX`, `spawnY`, and `spawnZ` parameters. These parameters define the position where the cube will be spawned in the game world.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/nested-loops.md#2025-04-21_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\n-- Creates individual cubes\nlocal function makeCube(spawnX, spawnY, spawnZ)\n    local cube = Instance.new(\"Part\")\n    cube.Size = Vector3.new(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE)\n    cube.Color = currentColor\n    cube.Parent = workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Importing BetaAlert Component in Markdown\nDESCRIPTION: This snippet imports a BetaAlert component from a markdown file, which likely provides functionality related to beta features in Roblox Studio. It requires the correct path to the component's markdown file and is usually utilized in user interface contexts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/ui-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetaAlert from '../includes/beta-features/beta-alert.md'\n```\n\n----------------------------------------\n\nTITLE: Listing Data Store Entries with Scopes using Python\nDESCRIPTION: This code snippet demonstrates how to list entries within a data store, specifying different scopes (global, special, and all scopes). It uses a hypothetical `tutorialFunctions` module and its `DataStores` class to interact with the Data Stores API, showcasing how to retrieve keys associated with various scopes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/data-store-api-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"# Set up\nimport tutorialFunctions\nDatastoresApi = tutorialFunctions.DataStores()\ndatastoreName = \\\"PlayerInventory\\\"\n\n# List keys for global scope\nspecialScopeKeys = DatastoresApi.list_entries(datastoreName, scope = \\\"global\\\", allScopes = False)\nprint(keys.content)\n# List keys for special scope\nspecialScopeKeys = DatastoresApi.list_entries(datastoreName, scope = \\\"special\\\", allScopes = False)\nprint(keys.content)\n# List keys for allScope set to true\nspecialScopeKeys = DatastoresApi.list_entries(datastoreName, allScopes = True)\nprint(specialScopeKeys.content)\"\n```\n\n----------------------------------------\n\nTITLE: Equal assigns values\nDESCRIPTION: This snippet illustrates how to assign a value to a previously declared variable. It shows how to use the equal sign to assign a string to a variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/create-a-script.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal myAnimal =\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Assets for Controller Buttons in Roblox\nDESCRIPTION: This Lua script example demonstrates how to map custom assets to controller button icons in Roblox using the `UserInputService` to ensure the game matches the console's aesthetic. Dependencies include the Roblox game services, and it specifically handles mapping for `Enum.KeyCode.ButtonA`. Parameters include the key codes and their corresponding custom asset paths. Inputs involve game user input and asset data, outputting the correct custom button graphics.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/publishing/console-guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal imageLabel = script.Parent\nlocal key = Enum.KeyCode.ButtonA\n\nlocal mappings = {\n    ButtonA = \"rbxasset://BUTTON_A_ASSET\", -- Replace with the desired ButtonA asset\n    ButtonCross = \"rbxasset://BUTTON_CROSS_ASSET\" -- Replace with the desired ButtonCross asset\n}\n\nlocal mappedKey = UserInputService:GetStringForKeyCode(key)\nlocal image = mappings[mappedKey]\n\nimageLabel.Image = image\n\n```\n\n----------------------------------------\n\nTITLE: Damage Character Function in ServerLaserManager - Lua\nDESCRIPTION: This snippet defines a function to deal damage to the character who was hit. It retrieves the Humanoid from the character model and subtracts a fixed amount of LASER_DAMAGE from its health.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal eventsFolder = ReplicatedStorage.Events\nlocal LASER_DAMAGE = 10\n\nfunction damageCharacter(playerFired, characterToDamage)\n\tlocal humanoid = characterToDamage:FindFirstChildWhichIsA(\"Humanoid\")\n\tif humanoid then\n\t\t-- Remove health from character\n\t\thumanoid.Health -= LASER_DAMAGE\n\tend\nend\n\n-- Connect events to appropriate functions\neventsFolder.DamageCharacter.OnServerEvent:Connect(damageCharacter)\n```\n\n----------------------------------------\n\nTITLE: Rendering Playtest Options in Roblox Studio using JavaScript\nDESCRIPTION: This snippet imports the PlaytestOptions component to render playtest functionalities in Roblox Studio, allowing users to toggle between client and server modes for testing experiences. The dependencies include a reference to the PlaytestOptions component from the specified path.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/testing-modes.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PlaytestOptions from '../includes/studio/testing-modes.md'\n```\n\n----------------------------------------\n\nTITLE: Hard-Coded Product Price Example in Lua\nDESCRIPTION: Demonstrates a statically defined product price, which is not compatible with Roblox's price optimization tool and requires updating to use dynamic pricing methods.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/price-optimization.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal priceInRobux = 500\n```\n\n----------------------------------------\n\nTITLE: Defining Durations - JSON\nDESCRIPTION: This snippet illustrates how to represent duration values in Open Cloud APIs, specifying precision and the required 's' suffix. It includes a range of acceptable duration values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/types.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"duration-9\": \"1.000340012s\",\n  \"duration-0\": \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Grid Layout with Material-UI Components\nDESCRIPTION: React component that renders a responsive grid layout using Material-UI, mapping through sections data to create a structured documentation page with images, typography, and buttons.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/engine.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container spacing={2} marginX=\"auto\" alignItems=\"center\" justifyContent=\"center\">\n  {sections.map((section, index) => (\n    <Container key={index}>\n      <Container style={{ width: \"80%\", textAlign: \"center\", marginTop: 48, marginBottom: 24 }}>\n        <Typography variant='hero'>{section.title}</Typography>\n      </Container>\n      {/* Additional container components and mapping logic */}\n    </Container>\n  ))}\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Creating TutorialParticles Server Script in Roblox Lua\nDESCRIPTION: This ServerScript manages particle effects that appear when players interact with tutorial goals. It sets up particle attachments for each player character and emits particles during goal interactions. The EMIT_RATE variable controls the number of particles spawned during each interaction.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-mansion-of-wonder/adding-scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\nlocal tutorialFolder = ReplicatedStorage:WaitForChild(\"PlayerTutorial\")\nlocal NextGoalEvent = tutorialFolder:WaitForChild(\"NextGoal\")\n\nlocal EMIT_RATE = 50\n\nlocal function playParticleBurst(player)\n  local character = player.Character or player.CharacterAdded:Wait()\n  local humanoidRootPart = character:WaitForChild(\"HumanoidRootPart\")\n  local particleAttachment = humanoidRootPart:WaitForChild(\"ParticleAttachment\")\n\n  -- Go through particles on the attachment and play them according to the type of particle\n  for _, particle in particleAttachment:GetChildren() do\n    if particle:IsA(\"ParticleEmitter\") then\n      particle:Emit(EMIT_RATE)\n    end\n  end\nend\n\nlocal function setupPlayerParticles(player)\n  player.CharacterAdded:Connect(function(character)\n    local humanoidRootPart = character:WaitForChild(\"HumanoidRootPart\")\n    local playerParticleAttachment = Instance.new(\"Attachment\")\n    playerParticleAttachment.Name = \"ParticleAttachment\"\n    playerParticleAttachment.Parent = humanoidRootPart\n\n    -- Clone particles in the folder, even if there are more than one and attach to player\n    for _, emitter in ServerStorage.TutorialParticles:GetChildren() do\n      emitter:Clone().Parent = playerParticleAttachment\n    end\n  end)\nend\n\nPlayers.PlayerAdded:Connect(setupPlayerParticles)\nNextGoalEvent.OnServerEvent:Connect(playParticleBurst)\n```\n\n----------------------------------------\n\nTITLE: Configuring Modular Wall Assets Positioning\nDESCRIPTION: Precise placement of wall components, door frames, and corner pieces with specific CFrame positions and orientations\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nAsset Name | CFrame.Position | CFrame.Orientation\n-------------|-----------------|--------------------\nWallCornerInner | `-90, 5, 80` | `0, 90, 0`\nDoorFrame | `-90, 5, 60` | `0, 0, 0`\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Parts for Middle Top Roof in Roblox\nDESCRIPTION: Specific measurements for placing block parts to create the middle section of the top roof in the Environment Art sample. Includes Size and CFrame.Position properties for four different blocks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_23\n\nLANGUAGE: Roblox\nCODE:\n```\nSize: 15, 10, 90\nCFrame.Position: -147.5, 31, 160\n\nSize: 20, 10, 25\nCFrame.Position: -130, 31, 192.5\n\nSize: 20, 10, 25\nCFrame.Position: -130, 31, 127.5\n\nSize: 26, 10, 90\nCFrame.Position: -107, 31, 160\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Template Documentation\nDESCRIPTION: Markdown document structure showing the layout of avatar template documentation including title, description, and navigation links. Contains formatted tables and tabs showcasing different template categories and their download links.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/creating/template-files.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Template files\ndescription: Roblox provides template models to create your own unique avatar character in Blender.\nnext: /art/characters/creating/head-objects\nprev: /art/characters/creating/\n---\n```\n\n----------------------------------------\n\nTITLE: Modifying HighPoints Value in Lua\nDESCRIPTION: This code snippet demonstrates how to change the HighPoints value in the GameSettings script. It specifically modifies the `HighPoints` entry in the `pointValues` table from 15 to 150. This change increases the number of points awarded for destroying large buildings, impacting the game's reward system.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-create-and-destroy/change-the-script.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n\"GameSettings.pointValues = {\n\t-- Value types must match folder names to award points correctly\n\tLowPoints = 0,\n\tMediumPoints = 10,\n\tHighPoints = 150,\n}\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Eye Closure with FACS\nDESCRIPTION: Control for closing individual eyes using the FACS system.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LeftEyeClosed\n```\n\n----------------------------------------\n\nTITLE: Updating Player Status in Roblox Game Loop\nDESCRIPTION: This segment of the GameManager module updates the game loop to include status messages displayed to players at the end of a match. It interacts with MatchManager to get end status and DisplayManager to update the UI, ensuring players are informed of the match outcome.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  displayManager.updateStatus(\"Waiting for Players\")\n\n  repeat\n    task.wait(gameSettings.intermissionDuration)\n  until #Players:GetPlayers() >= gameSettings.minimumPlayers\n\n  displayManager.updateStatus(\"Get ready!\")\n  task.wait(gameSettings.transitionTime)\n\n  matchManager.prepareGame()\n  local endState = matchEnd.Event:Wait()\n\n  local endStatus = matchManager.getEndStatus(endState)\n  displayManager.updateStatus(endStatus)\n\n  task.wait(gameSettings.transitionTime)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON for Roblox API\nDESCRIPTION: Configuration file for storing Roblox API credentials and connection details for Ordered Data Stores\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"universe_id\": \"\",\n  \"api_key_url\": \"https://apis.roblox.com/datastores/ordered-v1/\",\n  \"api_key\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Player Name in Lua\nDESCRIPTION: This script sets the text displayed in the player name label to the player's display name. It accesses the PlayerNameTextLabel within the provided ScreenGui and sets its Text property to the local player's DisplayName.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal function setPlayerName(gui: ScreenGui)\n\tgui.PlayerDisplay.PlayerNameTextLabel.Text = localPlayer.DisplayName\nend\n\nreturn setPlayerName\n```\n\n----------------------------------------\n\nTITLE: Safe Table Value Generation with rawset()\nDESCRIPTION: Prevents stack overflow by using rawset() to modify tables with __index and __newindex metamethods\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal t = setmetatable({}, {\n\t__index = function(self, i)\n\t\trawset(self, i, i * 10)\n\t\treturn self[i]\n\tend,\n\t__newindex = function(self, i, v)\n\t\t-- Don't set values to the table the normal way\n\tend\n})\nprint(t[1]) --> 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Scavenger Hunt\nDESCRIPTION: Override default server configuration options for the Scavenger Hunt library, allowing customization of token tags, datastore names, and reset behavior\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/scavenger-hunt.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ScavengerHunt = require(ReplicatedStorage:WaitForChild(\"ScavengerHunt\"))\n\nScavengerHunt.configureServer({\n\ttokenTag = \"GreenGem\",\n})\n```\n\n----------------------------------------\n\nTITLE: Outputs 'Porcupines'\nDESCRIPTION: This snippet demonstrates printing the value of the variable myAnimal to the Output window, which will display 'Porcupines'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/create-a-script.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nprint(myAnimal)\n```\n\n----------------------------------------\n\nTITLE: Blender Export Settings for Layered Clothing\nDESCRIPTION: Steps to export layered clothing from Blender as FBX, including setting scene unit scale to .01, configuring path mode to Copy, enabling embedded textures, and disabling leaf bones.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/clothing-export-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: settings\nCODE:\n```\nScene Properties > Unit Scale: .01\nPath Mode: Copy\nEmbed Textures: Enabled\nTransform > Scale: .01\nArmature > Add Leaf Bones: Disabled\n```\n\n----------------------------------------\n\nTITLE: Implementing Fire Rate Check in toolActivated Function\nDESCRIPTION: Adds a check to ensure the weapon can be fired based on the fire rate before activating it.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal function toolActivated()\n\tif canShootWeapon() then\n\t\ttool.Handle.Activate:Play()\n\t\tfireWeapon()\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Completing a Sentence with String Concatenation in Lua\nDESCRIPTION: Example showing how to complete a sentence by concatenating strings with the .. operator. This allows extending text by adding more content to the story variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/finish-and-add.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Code story between the dashes\n-- =============================================\n   local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n   local story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \"\n-- =============================================\n```\n\n----------------------------------------\n\nTITLE: Example Stack Output in Luau\nDESCRIPTION: This code represents the expected output of the Stack Usage Example code snippet when executed. It prints the values that are popped from the stack.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/stacks.md#2025-04-21_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\n10\n5\n20\n1\n```\n\n----------------------------------------\n\nTITLE: Defining Learning Objective Table Structure in HTML\nDESCRIPTION: This HTML snippet provides a table structure for presenting learning objectives at the start of a module. It includes a header for 'Learning objectives' and a list format for presenting up to 4 objectives with specific formatting instructions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/edu-templates/edu-styles.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td><h4>Learning objectives</h4></td>\n      <td>\n        Students will be able to:\n        <ul>\n          <li>Max 4 objectives. End with periods. Bold key concept.</li>\n          <li>Example: Practice <b>modular programming</b> by creating scripts that separately handle game functions, like teleporting players.</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Calculating Latency Signal Score in Lua\nDESCRIPTION: This snippet calculates the latency signal score, inversely correlating to the joining player's estimated ping time, with an upper limit of 250 milliseconds.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlatencySignalScore = 1 - min(250, estimatedPingMs) / 250\n```\n\n----------------------------------------\n\nTITLE: Example of Global Functions and Variables in Luau\nDESCRIPTION: This snippet illustrates the use of global variables and functions in Luau. Here, 'testVar' is defined globally within 'testFunc()' and can be accessed outside the function, demonstrating global scope functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/scope.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function testFunc()  -- local scope\n\ttestVar = 64  -- global scope\nend\n\ntestFunc()\n\nprint(testVar) -- 64\n```\n\n----------------------------------------\n\nTITLE: Token Endpoint Response Example\nDESCRIPTION: JSON representation of a successful token exchange response, including access token, refresh token, and related authentication metadata\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-develop.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"eyJhbGciOiJFUzI1NiIsImtpZCI6IlBOeHhpb2JFNE8zbGhQUUlUZG9QQ3FCTE81amh3aXZFS1pHOWhfTGJNOWMiLCJ0eXAiOiJKV11234.eyJzdWIiOiIyMDY3MjQzOTU5IiwiYWlkIjoiM2Q2MWU3NDctM2ExNS00NTE4LWJiNDEtMWU3M2VhNDUyZWIwIiwic2NvcGUiOiJvcGVuaWQ6cmVhZCBwcm9maWxlOnJlYWQiLCJqdGkiOiJBVC5QbmFWVHpJU3k2YkI5TG5QYnZpTCIsIm5iZiI6MTY5MTYzOTY5OCwiZXhwIjoxNjkxNjQwNTk4LCJpYXQiOjE2OTE2Mzk2OTgsImlzcyI6Imh0dHBzOi8vYXBpcy5yb2Jsb3guY29tL29hdXRoLyIsImF1ZCI6IjcyOTA2MTAzOTc5ODc5MzQ5Nj1234.BjwMkC8Q5a_iP1Q5Th8FrS7ntioAollv_zW9mprF1ats9CD2axCvupZydVzYphzQ8TawunnYXp0Xe8k0t8ithg\",\n  \"refresh_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwia2lkIjoidGpHd1BHaURDWkprZEZkREg1dFZ5emVzRWQyQ0o1NDgtUi1Ya1J1TTBBRSIsInR5cCI6IkpXVCJ9..nKYZvjvXH6msDG8Udluuuw.PwP-_HJIjrgYdY-gMR0Q3cabNwIbmItcMEQHx5r7qStVVa5l4CbrKwJvjY-w9xZ9VFb6P70WmXndNifnio5BPZmivW5QkJgv5_sxLoCwsqB1bmEkz2nFF4ANLzQLCQMvQwgXHPMfCK-lclpVEwnHk4kemrCFOvfuH4qJ1V0Q0j0WjsSU026M67zMaFrrhSKwQh-SzhmXejhKJOjhNfY9hAmeS-LsLLdszAq_JyN7fIvZl1fWDnER_CeDAbQDj5K5ECNOHAQ3RemQ2dADVlc07VEt2KpSqUlHlq3rcaIcNRHCue4GfbCc1lZwQsALbM1aSIzF68klXs1Cj_ZmXxOSOyHxwmbQCHwY7aa16f3VEJzCYa6m0m5U_oHy84iQzsC-_JvBaeFCachrLWmFY818S-nH5fCIORdYgc4s7Fj5HdULnnVwiKeQLKSaYsfneHtqwOc_ux2QYv6Cv6Xn04tkB2TEsuZ7dFwPI-Hw2O30vCzLTcZ-Fl08ER0J0hhq4ep7B641IOnPpMZ1m0gpJJRPbHX_ooqHol9zHZ0gcLKMdYy1wUgsmn_nK_THK3m0RmENXNtepyLw_tSd5vqqIWZ5NFglKSqVnbomEkxneEJRgoFhBGMZiR-3FXMaVryUjq-N.Q_t4NGxTUSMsLVEppkTu0Q6rwt2rKJfFGuvy3s12345\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 899,\n  \"id_token\": \"eyJhbGciOiJFUzI1NiIsImtpZCI6IkNWWDU1Mi1zeWh4Y1VGdW5vNktScmtReFB1eW15YTRQVllodWdsd3hnNzgiLCJ0eXAiOiJKV11234.eyJzdWIiOiIyMDY3MjQzOTU5IiwibmFtZSI6ImxpbmtzZ29hdCIsIm5pY2tuYW1lIjoibGlua3Nnb2F0IiwicHJlZmVycmVkX3VzZXJuYW1lIjoibGlua3Nnb2F0IiwiY3JlYXRlZF9hdCI6MTYwNzM1NDIzMiwicHJvZmlsZSI6Imh0dHBzOi8vd3d3LnJvYmxveC5jb20vdXNlcnMvMjA2NzI0Mzk1OS9wcm9maWxlIiwibm9uY2UiOiIxMjM0NSIsImp0aSI6IklELnltd3ZjTUdpOVg4azkyNm9qd1I5IiwibmJmIjoxNjkxNjM5Njk4LCJleHAiOjE2OTE2NzU2OTgsImlhdCI6MTY5MTYzOTY5OCwiaXNzIjoiaHR0cHM6Ly9hcGlzLnJvYmxveC5jb20vb2F1dGgvIiwiYXVkIjoiNzI5MDYxMDM5Nzk4NzkzNDk2NCJ9.kZgCMJQGsariwCi8HqsUadUBMM8ZOmf_IPDoWyQY9gVX4Kx3PubDz-Q6MvZ9eU5spNFz0-PEH-G2WSvq2ljDyg\",\n  \"scope\": \"openid profile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying UI Tweens to Map Objects in Roblox Lua\nDESCRIPTION: This script demonstrates how to apply the UITween module to various UI objects in a Roblox game. It includes setting up references to UI elements, defining size constants, and applying multiple tweens in sequence to create an animated effect for the map UI.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/user-interface.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Add UITween Module\nlocal UITween = require(ReplicatedStorage.UITweenModule)\n\n-- Find player Guis and UI objects\nlocal playerGui = game:GetService('Players').LocalPlayer:WaitForChild('PlayerGui')\nlocal screenGuiMapUIFrame = playerGui:WaitForChild(\"ScreenGuiMapUIFrame\").SurfaceGui\nlocal mapUIFrameStroke = screenGuiMapUIFrame.FrameStroke\nlocal mapUIFrameFill = screenGuiMapUIFrame.FrameFill\n\n-- Sizes used for tweening\nlocal frameSizeStart = UDim2.new(0, 0, 0, 0)\nlocal frameSizeMid = UDim2.new(1, 0, 0.05, 0)\nlocal frameSizeEnd = UDim2.new(1, 0, 1, 0)\n\n-- Example Tweening\nUITween.fade(mapUIFrameStroke, 0, 2, 0)\nUITween.size(mapUIFrameStroke, frameSizeMid, 0.4, 0)\nUITween.fade(mapUIFrameFill, 0, 2, 0.5)\nUITween.size(mapUIFrameFill, frameSizeEnd, 0.4, 0.25)\ntask.wait(0.25)\nUITween.size(mapUIFrameStroke, frameSizeMid, 0.4, 0)\nUITween.size(mapUIFrameFill, frameSizeMid, 0.4, 0.25)\ntask.wait(0.25)\nUITween.size(mapUIFrameStroke, frameSizeEnd, 0.4, 0)\nUITween.size(mapUIFrameFill, frameSizeEnd, 0.4, 0.25)\n```\n\n----------------------------------------\n\nTITLE: Naming Variables in Luau\nDESCRIPTION: This snippet provides examples of valid and invalid variable names in Luau, adhering to the language's naming conventions. Valid names must not start with a digit, and certain reserved words cannot be used as variable names.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/variables.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nLETTERS   -- valid\na1        -- valid\nvar_name  -- valid\n_test     -- valid\n\nif        -- NOT valid\n25th      -- NOT valid\n```\n\n----------------------------------------\n\nTITLE: Configuring OutdoorAmbient Color in Roblox\nDESCRIPTION: Sets the OutdoorAmbient property of the Lighting service to adjust the hue for outdoor areas of the experience. This can simulate changes in ambient color throughout the day.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.OutdoorAmbient = Color3.new(255/255, 150/255, 50/255)\n```\n\n----------------------------------------\n\nTITLE: Opening the MerchBooth UI in Roblox\nDESCRIPTION: Demonstrates how to programmatically open the MerchBooth window and navigate to the catalog view after adding an item.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(assetId)\nend)\nif not success then\n\twarn(errorMessage)\nend\n\nMerchBooth.openMerchBooth()\n```\n\n----------------------------------------\n\nTITLE: Listing Children of a Roblox Instance using cURL\nDESCRIPTION: This cURL command retrieves the list of children for a specified Roblox Engine instance. It requires an API key, universe ID, place ID, and instance ID. The command is executed via a GET request with the necessary header containing the API key.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include --location --request GET \"https://apis.roblox.com/cloud/v2/universes/<universeId>/places/<placeId>/instances/<instanceId>:listChildren\" --header \"x-api-key: <api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OAuth Client on Windows in PowerShell\nDESCRIPTION: This snippet sets the environment variables required for the OAuth client, including the client ID, secret, and an optional port for the app running on Windows. These variables are crucial for the app's authentication process with Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-sample.md#2025-04-21_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$env:ROBLOX_CLIENT_ID='your_client_id_here'\n$env:ROBLOX_CLIENT_SECRET='your_client_secret_here'\n$env:ROBLOX_PORT=3000 # Optional. Default is 3000.\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Statistics Array in JavaScript\nDESCRIPTION: Defines an array of key performance and usage statistics for the Roblox platform, representing daily active users, unique payers, and engagement metrics\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/platform.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const scaleStats = [\n  { header: \"85.3M\", description: \"Daily active users\" },\n  { header: \"18.9M\", description: \"Monthly unique payers\" },\n  { header: \"18.7B\", description: \"Quarterly hours engaged\" },\n  { header: \"750M\", description: \"Yearly creator earnings\" },\n  { header: \"18.9M\", description: \"DevX\" },\n  { header: \"18.7B\", description: \"xyz\" }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Vector2 AnchorPoint for UI Objects in Roblox\nDESCRIPTION: Examples of creating Vector2 objects to set AnchorPoint values for TextLabels. The first creates a left-middle anchor (0, 0.5), the second creates a center anchor (0.5, 0.5), and the third creates a right-middle anchor (1, 0.5).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/size-modifiers.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nDatatype.Vector2.new()(0, 0.5)\n```\n\nLANGUAGE: lua\nCODE:\n```\nDatatype.Vector2.new()(0.5, 0.5)\n```\n\nLANGUAGE: lua\nCODE:\n```\nDatatype.Vector2.new()(1, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Control Key Codes in Roblox MerchBooth\nDESCRIPTION: Shows how to customize the key bindings for interacting with the MerchBooth UI, specifically changing the proximity prompt activation keys for both keyboard and gamepad.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setControlKeyCodes(MerchBooth.Controls.ProximityPrompts, {\n\tkeyboard = Enum.KeyCode.Q,\n\tgamepad = Enum.KeyCode.ButtonL1,\n})\n```\n\n----------------------------------------\n\nTITLE: Blender FBX Export Settings for Dynamic Heads\nDESCRIPTION: Specific export settings required for Roblox dynamic heads when exporting as FBX. These settings ensure proper export of custom properties, animations, and armature configuration.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/create-basic-heads.md#2025-04-21_snippet_1\n\nLANGUAGE: settings\nCODE:\n```\nInclude:\n  - Active Collection\n  - Custom Properties\nArmature:\n  - Add Leaf Bones: false\nAnimation:\n  - Bake Animation: true\n  - NLA Strips: false\n  - All Actions: false\n  - Force Start/End Keyframes: false\n```\n\n----------------------------------------\n\nTITLE: Sending a Basic Experience Notification in Lua\nDESCRIPTION: This script demonstrates how to send a basic experience notification to a specific user by providing their player ID and the notification's message ID. It includes error handling to check if the notification was successfully created.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/experience-notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ServerScriptService = game:GetService(\"ServerScriptService\")\n\nlocal OCUserNotification = require(ServerScriptService.OpenCloud.V2.UserNotification)\nlocal recipientPlayerID = 505306092\n\n-- In the payload, \"messageId\" is the value of the notification asset ID\nlocal userNotification = {\n\tpayload = {\n\t\tmessageId = \"5dd7024b-68e3-ac4d-8232-4217f86ca244\",\n\t\ttype = \"MOMENT\"\n\t}\n}\n\nlocal result = OCUserNotification.createUserNotification(recipientPlayerID, userNotification)\n\nif result.statusCode ~= 200 then\n\tprint(result.statusCode)\n\tprint(result.error.code)\n\tprint(result.error.message)\nend\n```\n\n----------------------------------------\n\nTITLE: Face Control: RightCheekRaiser\nDESCRIPTION: This section describes the `RightCheekRaiser` face control, which squints the character's right eye. It references the `Class.FaceControls.RightCheekRaiser` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Setting Up Surface Appearance in Roblox Studio\nDESCRIPTION: Instructions for adding a SurfaceAppearance object to a MeshPart to enable PBR textures. The SurfaceAppearance object allows for configuration of color, normal, roughness, and metalness maps through asset IDs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/modeling/surface-appearance.md#2025-04-21_snippet_0\n\nLANGUAGE: roblox\nCODE:\n```\n-- Example structure:\nMeshPart\n  └─ SurfaceAppearance\n      ├─ ColorMap: [AssetId]\n      ├─ NormalMap: [AssetId]\n      ├─ RoughnessMap: [AssetId]\n      └─ MetalnessMap: [AssetId]\n```\n\n----------------------------------------\n\nTITLE: Basic Data Types in Luau\nDESCRIPTION: Illustrates the primary data types supported in Luau, including nil, boolean, number, string, and table types with examples of their usage and characteristics.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/index.md#2025-04-21_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\n-- Nil type\nlocal nilValue = nil\n\n-- Boolean type\nlocal isTrue = true\nlocal isFalse = false\n\n-- Number type\nlocal integerValue = 42\nlocal floatValue = 3.14\n\n-- String type\nlocal greeting = \"Hello, Roblox!\"\n\n-- Table type (array and dictionary)\nlocal arrayTable = {1, 2, 3}\nlocal dictionaryTable = {name = \"John\", age = 30}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prop Assets in Right Combat Pocket HTML\nDESCRIPTION: This snippet defines the configurations for various prop assets placed in the right combat pocket's exterior, detailing their positioning and orientation for accurate implementation in the environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n      <td>Extinguisher</td>\n      <td>`-44, 10, 75.5`</td>\n      <td>`0, 0, 0`</td>\n      </tr>\n      <tr>\n      <td>WallHanging</td>\n      <td>`-44, 5.5, 88`</td>\n      <td>`0, 0, 0`</td>\n      </tr>\n      <tr>\n      <td>WallConsoleA</td>\n      <td>`-44, 12.5, 70.5`</td>\n      <td>`0, 0, 0`</td>\n      </tr>\n      <tr>\n      <td>Extinguisher</td>\n      <td>`-96, 10, 62`</td>\n      <td>`0, 180, 0`</td>\n      </tr>\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Parts for Lower Middle Top Roof in Roblox\nDESCRIPTION: Specific measurements for placing block parts to create the lower middle section of the top roof in the Environment Art sample. Includes Size and CFrame.Position properties for three different blocks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_25\n\nLANGUAGE: Roblox\nCODE:\n```\nSize: 54, 5, 15\nCFrame.Position: -67, 28.5, 187.5\n\nSize: 9, 5, 40\nCFrame.Position: -89.5, 28.5, 160\n\nSize: 54, 5, 15\nCFrame.Position: -67, 28.5, 132.5\n```\n\n----------------------------------------\n\nTITLE: Accessory Type AutoSkin Parameters Reference Table\nDESCRIPTION: Markdown table showing recommended AutoSkin parameter values for different types of accessories in Roblox, including beards, eyebrows, eyelashes, hair, hats, glasses, shirts, pants, and shoes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/automatic-skinning-transfer.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<thead>\n  <tr>\n    <th>Accessory Type</th>\n    <th>Suggested Parameter</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>Beard</td>\n    <td>`EnabledOverride`</td>\n  </tr>\n  <tr>\n    <td>Eyebrow</td>\n    <td>`EnabledOverride`</td>\n  </tr>\n  <tr>\n    <td>Eyelash</td>\n    <td>`Disabled`</td>\n  </tr>\n  <tr>\n    <td>Hair</td>\n    <td>`EnabledOverride`</td>\n  </tr>\n  <tr>\n    <td>Hat</td>\n    <td>`Disabled`</td>\n  </tr>\n  <tr>\n    <td>Glasses</td>\n    <td>`Disabled`</td>\n  </tr>\n  <tr>\n    <td>Shirt</td>\n    <td>`EnabledOverride` or `EnabledPreserve`</td>\n  </tr>\n  <tr>\n    <td>Pants</td>\n    <td>`EnabledOverride` or `EnabledPreserve`</td>\n  </tr>\n  <tr>\n    <td>Shoes</td>\n    <td>`EnabledOverride` or `EnabledPreserve`</td>\n  </tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Initializing Point Values in Lua\nDESCRIPTION: This code snippet initializes the point values for different types of buildings (LowPoints, MediumPoints, HighPoints) within the GameSettings script. The values are assigned to corresponding keys in the `pointValues` table. This table is used to determine how many points a player receives for destroying each type of building.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-create-and-destroy/change-the-script.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n\"-- Game Variables\nGameSettings.intermissionDuration = 10\nGameSettings.roundDuration = 30\nGameSettings.minimumPlayers = 1\nGameSettings.transitionStart = 3\nGameSettings.transitionEnd = 3\nGameSettings.pointValues = {\n\t-- Value types must match folder names to award points correctly\n\tLowPoints = 0,\n\tMediumPoints = 10,\n\tHighPoints = 15,\n}\"\n```\n\n----------------------------------------\n\nTITLE: Reusing Variables in String Concatenation\nDESCRIPTION: Example of how to use the same variable multiple times in a story, allowing for repeated references to the same player input in different parts of the narrative.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/finish-and-add.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n\"I am \" .. name1 .. \" and you are in the palace of \" .. name1 .. \"!\"\n```\n\n----------------------------------------\n\nTITLE: Updating Selected Blaster Index in Roblox Lua\nDESCRIPTION: This script handles the visual updates when a new blaster is selected. It adjusts the size and transparency of the selected and previously selected buttons. The script uses predefined properties for selected and unselected states.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal blasterButtonPrefab = ReplicatedStorage.Instances.Guis.BlasterButtonPrefab\n\nlocal prevIndex = nil\n\n-- Size and BackgroundTransparency values for a selected and unselected button\nlocal ImageButtonProperties = {\n\tSelected = {\n\t\tSize = UDim2.fromScale(1, 1),\n\t\tBackgroundTransparency = 0.1,\n\t},\n\tUnselected = {\n\t\tSize = blasterButtonPrefab.Size,\n\t\tBackgroundTransparency = blasterButtonPrefab.BackgroundTransparency,\n\t},\n}\n\nlocal function updateSelectedIndex(newIndex: number, blasterButtons: { ImageButton })\n\tlocal selectedProperties = ImageButtonProperties.Selected\n\tlocal selectedButton = blasterButtons[newIndex]\n\tselectedButton.Size = selectedProperties.Size\n\tselectedButton.BackgroundTransparency = selectedProperties.BackgroundTransparency\n\n\tlocal unselectedProperties = ImageButtonProperties.Unselected\n\tlocal deselectedButton = blasterButtons[prevIndex]\n\tif deselectedButton then\n\t\tdeselectedButton.Size = unselectedProperties.Size\n\t\tdeselectedButton.BackgroundTransparency = unselectedProperties.BackgroundTransparency\n\tend\n\n\tprevIndex = newIndex\nend\n\nreturn updateSelectedIndex\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient User Name Colors in Lua\nDESCRIPTION: Applies color gradient to chat user names using UIGradient, creating dynamic color transitions for message prefixes\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/chat-window.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal chatWindowConfiguration = TextChatService.ChatWindowConfiguration\n\nlocal gradient = Instance.new(\"UIGradient\")\ngradient.Color = ColorSequence.new{\n\tColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),\n\tColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 0)),\n\tColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))\n}\n\nTextChatService.OnChatWindowAdded = function(message: TextChatMessage)\n\tlocal properties = chatWindowConfiguration:DeriveNewMessageProperties()\n\n\tlocal textSource = message.TextSource\n\tif textSource then\n    \tproperties.PrefixTextProperties = chatWindowConfiguration:DeriveNewMessageProperties()\n\t\tgradient:Clone().Parent = properties.PrefixTextProperties\n\tend\n\n\treturn properties\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Default UI Elements in Client Script - Lua\nDESCRIPTION: This snippet uses the `SetCoreGuiEnabled()` method of `StarterGui` to disable the default health bar and backpack UI elements in a Roblox game. Essential for customizing player UI by removing unnecessary components.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/ui/default-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Disable default health bar and backpack\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Health, false)\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)\n```\n\n----------------------------------------\n\nTITLE: Random Dialogue Selection in Luau\nDESCRIPTION: Implement a random dialogue selection mechanism using Luau's Random generator\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-arrays.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal randomGenerator = Random.new()\n\nlocal function speak()\n   local randomIndex = randomGenerator:NextInteger(1, #dialogueArray)\n   local dialogue = dialogueArray[randomIndex]\n   Chat:Chat(head, dialogue)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Flowing Magma Beams - Lua\nDESCRIPTION: This snippet outlines the configuration of the MagmaRiverBeam, detailing the creation of attachments and the beam that represents flowing magma. It guides the user through the setup of attachment points and properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\n1. In the **Explorer** window, create a **Folder** in the **Workspace** to contain all flowing magma objects, then rename the folder **FlowingMagma**.\n1. Insert a **block** part into the **FlowingMagma** folder, then rename it **MagmaRiverBeam**.\n1. Move **MagmaRiverBeam** to slightly under the edge of the caldera.\n...\n1. Assign the part's attachments to **Magma**.\n   1. In the **Explorer** window, select **Magma**.\n   1. In the **Properties** window,\n      1. Set **Attachment0** to the attachment at the edge of the caldera.\n      1. Set **Attachment1** to the attachment at the fork in the crevice. The beam renders its default texture between the two attachments.\n```\n\n----------------------------------------\n\nTITLE: Updating Previous Shot Time in Lua\nDESCRIPTION: Updates the timeOfPreviousShot variable after firing the weapon.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\n        hitPosition = tool.Handle.Position + directionVector\n    end\n\n    timeOfPreviousShot = tick()\n\n    LaserRenderer.createLaser(tool.Handle, hitPosition)\nend\n```\n\n----------------------------------------\n\nTITLE: Calling LaserRenderer in fireWeapon Function\nDESCRIPTION: Calls the createLaser function from LaserRenderer in the fireWeapon function of ToolController.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\n        -- Calculate the end position based on maximum laser distance\n        hitPosition = tool.Handle.Position + directionVector\n    end\n\n    LaserRenderer.createLaser(tool.Handle, hitPosition)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Tower Parts - Roblox\nDESCRIPTION: This snippet details the necessary block parts and their configurations for creating the left tower in the laser tag greybox environment. It specifies the part names, sizes, and positions crucial for a visually appealing design.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n<table>\n<thead>\n<tr>\n<th>Part</th>\n<th>Size</th>\n<th>CFrame.Position</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Left wall</td>\n<td>`15, 25, 5`</td>\n<td>`-32.5, 22.5, 192.5`</td>\n</tr>\n<tr>\n<td>Right wall</td>\n<td>`15, 40, 10`</td>\n<td>`-32.5, 30, 185`</td>\n</tr>\n<tr>\n<td>Bottom ledge</td>\n<td>`20, 5, 15`</td>\n<td>`-30, 7.5, 187.5`</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Marking Seams in Blender UV Editing\nDESCRIPTION: A technique to manually break up a 3D object's UV map into manageable sections by marking specific edges for unwrapping\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_5\n\nLANGUAGE: steps\nCODE:\n```\n1. Open UV Editing workspace\n2. Select edges in 3D Viewport\n3. Press Ctrl + E\n4. Select \"Mark Seam\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Laser Damage Variables in ToolController - Lua\nDESCRIPTION: This snippet initializes necessary services and variables in ToolController for managing player input and laser parameters. The relevant services include UserInputService, Players, and ReplicatedStorage. Variables define maximum distances for mouse and laser interactions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal LaserRenderer = require(Players.LocalPlayer.PlayerScripts.LaserRenderer)\n\nlocal tool = script.Parent\nlocal eventsFolder = ReplicatedStorage.Events\n\nlocal MAX_MOUSE_DISTANCE = 1000\nlocal MAX_LASER_DISTANCE = 500\n```\n\n----------------------------------------\n\nTITLE: Referencing MeshParts in Roblox Lua\nDESCRIPTION: This snippet demonstrates how to reference MeshPart objects in Roblox Lua. It's used in the context of explaining how packages allow for modular design by grouping MeshParts, trim sheets, and SurfaceAppearance nodes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/beyond-the-dark/building-architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.MeshPart\n```\n\n----------------------------------------\n\nTITLE: Converting Animation File Text to Animation Map\nDESCRIPTION: This Lua function takes a multiline string containing AnimationId and name pairs, processes each line, and forms a new animation map format suitable for Roblox ModuleScript.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/transfer-animations.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal animFileText = [[\n\t4215167 Animation_Name_1\n\t6171235 Animation_Name_2\n\t1251267 Animation_Name_3\n]]\n\nlocal function convertFileToAnimationMap(animFileText: string)\n\tlocal NEW_ANIMATION_MAP = \"\"\n\n\tlocal lines = string.split(animFileText, \"\\n\")\n\tfor _, line in lines do\n\t\tlocal components = string.split(line, \" \")\n\t\tif #components ~= 2 then\n\t\t\tcontinue\n\t\tend\n\n\t\tlocal animationId = components[1]\n\t\tlocal animationName = components[2]\n\n\t\tNEW_ANIMATION_MAP = string.format(\"%s\\t[\\\"%s\\\"] = \\\"rbxassetid://%s\\\",\\n\", NEW_ANIMATION_MAP, animationName, animationId)\n\tend\n\n\treturn string.format(\"return {\\n%s}\", NEW_ANIMATION_MAP)\nend\n\nprint(convertFileToAnimationMap(animFileText))\n```\n\n----------------------------------------\n\nTITLE: Defining Required Property Values for Roblox Marketplace Items\nDESCRIPTION: Lists the required property values for Roblox Marketplace items including Material, Transparency, and VertexColor settings. The code shows the specific class properties and their required values for items to be eligible for marketplace upload.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/specifications.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nClass.MeshPart.Material|Material = Plastic\nClass.MeshPart.Transparency|Transparency = 0\nClass.MeshPart.VertexColor|VertexColor = 1, 1, 1\n```\n\n----------------------------------------\n\nTITLE: Maya R15 Joint Hierarchy Structure\nDESCRIPTION: Required joint hierarchy and naming convention for Roblox avatar animations. Must be followed exactly for Studio to recognize the animation file.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/export-avatar-animations-from-maya.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- Root\n- HumanoidRootPart\n- LowerTorso\n- UpperTorso\n- Head\n- LeftUpperArm\n- LeftLowerArm\n- LeftHand\n- RightUpperArm\n- RightLowerArm\n- RightHand\n- LeftUpperLeg\n- LeftLowerLeg\n- LeftFoot\n- RightUpperLeg\n- RightLowerLeg\n- RightFoot\n```\n\n----------------------------------------\n\nTITLE: Particle Effect Properties Configuration\nDESCRIPTION: Complete set of particle emitter properties for creating a sparkling effect, including color, lifetime, rate, speed, and spread angle settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/basic-particle-effects.md#2025-04-21_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\nColor = Color3.new(255, 200, 50)\nLifetime = NumberRange.new(0.5, 1)\nRate = 7\nSpeed = NumberRange.new(2, 3)\nSpreadAngle = Vector2.new(180, 180)\nSize = 0.3\nLightEmission = 1\nTransparency = 0.5\nDrag = 1.5\n```\n\n----------------------------------------\n\nTITLE: Function Scope Explanation in Luau\nDESCRIPTION: Demonstrates the concept of scope in Luau functions. Comments explain which code will run when the function is called versus code outside the function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/code-a-function.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function printFood()\n\t-- Code here runs when the function is called\nend\n\n-- Code here will not run\n```\n\n----------------------------------------\n\nTITLE: Setting Up Select Button for Blaster Selection in Roblox Lua\nDESCRIPTION: This script sets up the functionality for the select button in the blaster selection UI. When activated, it retrieves the selected blaster's name and fires a server event to equip the chosen blaster to the player's avatar.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\nlocal blasterSelectedEvent = ReplicatedStorage.Instances.BlasterSelectedEvent\n\nlocal function setupSelectButton(gui: ScreenGui, blasterButtons: { ImageButton })\n\tgui.Frame.SelectButton.Activated:Connect(function()\n\t\t-- During button generation, we set the name of the button to correspond to its associated blaster type\n\t\tlocal blasterName = blasterButtons[gui:GetAttribute(GuiAttribute.selectedIndex)].Name\n\t\tblasterSelectedEvent:FireServer(blasterName)\n\tend)\nend\n\nreturn setupSelectButton\n```\n\n----------------------------------------\n\nTITLE: Adjusting Air Particle Density in Atmosphere\nDESCRIPTION: This snippet describes how to use the Class.Atmosphere service to modify the air particle density in a Roblox game. Specifically, it covers setting the Density property to create a sense of thickness in the atmosphere, which affects the players' experience in the 3D space. The key functionality allows developers to enhance the realism of indoor environments without additional localized lighting.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\n1. In the **Explorer** window, select the **Lighting** service's child **Atmosphere** object.\n1. In the **Properties** window, set **Density** to `0.5`. The air becomes hazy.\n```\n\n----------------------------------------\n\nTITLE: Comparing -0 with 0 in Luau\nDESCRIPTION: This code snippet demonstrates that -0 is equivalent to 0 in Luau. It shows how -0 compares to other numbers using relational operators, confirming its behavior as effectively zero.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/numbers.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nprint(0 == -0)  --> true\nprint(-0 > 1)  --> false\nprint(-0 < 1)  --> true\nprint(-0 > -1)  --> true\nprint(-0 < -1)  --> false\n```\n\n----------------------------------------\n\nTITLE: Adjusting Brightness in Roblox Lighting\nDESCRIPTION: Sets the Brightness property of the Lighting service to adjust the intensity of illumination in the experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.Brightness = 0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Photo Booth Settings - Lua\nDESCRIPTION: This snippet initializes the Photo Booth settings, including message display, UI fade delay, and activation distance. It is essential to ensure that the Photo Booth reflects the desired user experience in the game environment. Requires the ReplicatedStorage service and the PhotoBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/photo-booth.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.configure({\n\tframeMessage = \"What a cool pose!\",\n\tfadeUiDelay = 5,\n\tmaxActivationDistance = 5,\n\tprintoutCharacterSize = UDim2.fromScale(1.5, 1.5),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Warning Time and Handling Warnings in Lua\nDESCRIPTION: Shows how to set a warning time for scene endings and connect to the warning event on the server side.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Load scene\nEventSequencer.loadScene(\"BeautifulScene\")\n\n-- Set warning time to 5 seconds before the scene ends\nEventSequencer.setSceneWarningTime(5)\n\n-- Detect when scene is about to end\nEventSequencer.onSceneEndingWarningForServer:Connect(function()\n\twarn(\"Scene is about to end!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Example Redirect URL with Authorization Code\nDESCRIPTION: Bash example showing a typical redirect URL containing the authorization code and state parameter after successful authentication\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-develop.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/redirect?code=10c45PNuquKnFJ6pUcy5-fHkghEM6lSegm-7hj9mVEprub1dSDuStuKK_EAUXY7AHTD63xcnmvxSLthp-C8g3jzIGZVzuXSd20Y2dEYI9hx0LZmPg95ME4z2K03UheiZbroyXUjYyB3ReoMqobzDVPzyx6IS8kj2Uu-11Xq_0JiTYxtDatuqXRNIAmJT8gMJmbSyOLOP_vnDvbeMUiBsqCRrkTGVbWSwYSc8sTVVE-535kYdqQOgNjH1ffCoZLGl8YYxLnpb2CXJlRQPrcjkA&state=6789\n```\n\n----------------------------------------\n\nTITLE: Variable Argument Number in C#\nDESCRIPTION: Demonstrates how to define a function in C# that accepts a variable number of arguments using the `params` keyword. The function takes a variable number of strings as input, iterates through them, and prints each one to the console.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Variable argument number\nvoid variableArguments(params string[] inventoryItems) {\n\tfor (item in inventoryItems) {\n\t\tConsole.WriteLine(item);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RGB Color Value for UIStroke and Frame in Roblox\nDESCRIPTION: Sets the Color or BackgroundColor3 property of UI elements to a magenta color using RGB values. The color is defined as an array of three integers representing red, green, and blue values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_5\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n[255, 0, 125]\n```\n\n----------------------------------------\n\nTITLE: Updating Instance Properties with PATCH Request using cURL\nDESCRIPTION: This cURL command demonstrates how to update properties of an instance in a Roblox place using the Cloud API. It sends a PATCH request with JSON data specifying the instance type and property values to update.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include --location --request PATCH \"https://apis.roblox.com/cloud/v2/universes/<universeId>/places/<placeId>/instances/<instanceId>\" --header \"x-api-key: <api key>\" --header \"Content-Type: application/json\" --data '{\"engineInstance\": {\"details\": {\"<instanceType>\": {\"<propertyName>\": \"<propertyValue>\"}}}}'\n```\n\n----------------------------------------\n\nTITLE: UV Projection Techniques in Blender\nDESCRIPTION: Multiple projection methods for mapping 3D object surfaces onto 2D texture planes, including Cube, Sphere, Cylinder, and Smart UV Project\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_8\n\nLANGUAGE: steps\nCODE:\n```\n1. Open UV Editing workspace\n2. Select all faces\n3. Press U hotkey\n4. Choose projection method:\n   - Cube Projection\n   - Sphere Projection\n   - Cylinder Projection\n   - Project from View\n   - Smart UV Project\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Animation Data in Lua\nDESCRIPTION: Demonstrates how to correctly access local animation data stored in ServerStorage using a reference in the rig's AnimSaves folder. This method preserves animation work and avoids conflicts with other rigs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/editor.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal myAnim = myRig.AnimSaves.Value.myAnimation\n-- Accesses your local animation data with the value reference in your rig\n```\n\n----------------------------------------\n\nTITLE: Face Control: RightEyeUpperLidRaiser\nDESCRIPTION: This section describes the `RightEyeUpperLidRaiser` face control, which raises the character's right eyelid upwards to reveal more of the eye white above the iris. It references the `Class.FaceControls.RightEyeUpperLidRaiser` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Creating Sound Groups in Roblox Studio\nDESCRIPTION: Demonstrates how to create a new sound group under SoundService in the Explorer window. Used for organizing and managing audio objects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/sound/groups.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the **Explorer** window, hover over `Class.SoundService` and click the ⊕ button.\n2. From the menu, insert a `Class.SoundGroup`.\n3. Rename the sound group to describe its purpose.\n```\n\n----------------------------------------\n\nTITLE: Filtering Collectible Items\nDESCRIPTION: Query to retrieve all collectible items owned by a user. Uses a filter parameter to specify collectible items across all asset types.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_6\n\nLANGUAGE: query_filter\nCODE:\n```\nfilter=onlyCollectibles=true;inventoryItemAssetTypes=*\n```\n\n----------------------------------------\n\nTITLE: Switch Event Handler Implementation\nDESCRIPTION: Client script demonstrating how to use the Switch module's custom events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/module.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Switch = require(ReplicatedStorage:WaitForChild(\"Switch\"))\n\nSwitch.Changed:Connect(function(newState)\n  print(\"Switch state is now\", newState)\nend\n\n-- Test the flipping a few times\ntask.wait(1)\nSwitch.flip()\ntask.wait(1)\nSwitch.flip()\n```\n\n----------------------------------------\n\nTITLE: Configuring Right Overhang Wedge Parts\nDESCRIPTION: Configuration parameters for creating wedge parts that form the right side of the roof overhang. Includes specific size, position, orientation, color, and material properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_31\n\nLANGUAGE: Properties\nCODE:\n```\nSize: 2, 11, 21\nCFrame.Position: -18.5, 25.5, 118\nCFrame.Orientation: 0, -90, 180\nColor: 255, 255, 255\nMaterial: Concrete\nMaterialVariant: Concrete_Board_Formed_A\n```\n\n----------------------------------------\n\nTITLE: Configuring Obstacles Between Towers - Roblox\nDESCRIPTION: This snippet presents the configuration of obstacles positioned between the towers, defining their sizes and positioning for tactical gameplay zones.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n<table>\n<thead>\n<tr>\n<th>Part</th>\n<th>Size</th>\n<th>CFrame.Position</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Top obstacle</td>\n<td>`10, 5, 5`</td>\n<td>`-50, 7.5, 160`</td>\n</tr>\n<tr>\n<td>Middle obstacle</td>\n<td>`20, 10, 10`</td>\n<td>`-35, 10, 160`</td>\n</tr>\n<tr>\n<td>Bottom obstacle</td>\n<td>`10, 10, 30`</td>\n<td>`0, 5, 160`</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Right Side Obstacles - Roblox\nDESCRIPTION: This snippet outlines the specifications for obstacles to the right of the towers, including their dimensions and positioning to enhance gameplay dynamics.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n<table>\n<thead>\n<tr>\n<th>Part</th>\n<th>Size</th>\n<th>CFrame.Position</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Left obstacle</td>\n<td>`10, 10, 15`</td>\n<td>`-5, 5, 117.5`</td>\n</tr>\n<tr>\n<td>Middle obstacle</td>\n<td>`15, 30, 5`</td>\n<td>`-22.5, 15, 82.5`</td>\n</tr>\n<tr>\n<td>Right obstacle</td>\n<td>`20, 10, 5`</td>\n<td>`-15, 5, 57.5`</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Simple Script in ReplicatedStorage\nDESCRIPTION: A basic script demonstrating script placement in ReplicatedStorage, with a simple print statement\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/index.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nprint(\"Hello script types and locations!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Mezzanine Floor Geometry in Roblox Studio\nDESCRIPTION: Instructions for constructing symmetrical left and right surfaces for the mezzanine floor using block parts. This floor represents the highest ground on the map, crucial for gameplay strategy.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\n1. Using **block** parts, create symmetrical left and right surfaces for the **mezzanine floor** of your building. This geometry represents the highest ground on the map.\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle Size for Foam Effect in Roblox\nDESCRIPTION: Lua code to configure the particle size sequence for a foam effect, scaling particles from 5 to 20 studs across their lifetime with variation. This creates a dynamic foam ripple effect at the base of a waterfall.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-waterfalls.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nworkspace.Foam.MainDropFoam.FoamRipples.Size = NumberSequence.new{NumberSequenceKeypoint.new(0,5,0), NumberSequenceKeypoint.new(1,20,5)}\n```\n\n----------------------------------------\n\nTITLE: Configuring Surface Ripple ParticleEmitter Properties in Roblox Studio\nDESCRIPTION: A step-by-step configuration of a ParticleEmitter to create realistic lava surface ripples in a volcano caldera. The properties include texture settings, color sequences, size sequences, transparency values, and other particle behavior settings to achieve the churning lava effect.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nTexture = rbxassetid://16829556885\nOrientation = VelocityPerpendicular\nColor[0] = RGB(130, 53, 2)\nColor[0.5] = RGB(224, 37, 0)\nColor[1] = RGB(147, 5, 0)\nSize[0] = 4.81, Envelope = 0.438\nSize[0.341] = 8.75, Envelope = 0.48\nSize[0.497] = 9.38, Envelope = 0.5\nSize[0.644] = 8.75, Envelope = 0.48\nSize[1] = 4.81, Envelope = 0.438\nTransparency[0] = 1, Envelope = 0\nTransparency[0.3] = 0.387, Envelope = 0.0375\nTransparency[0.5] = 0.269, Envelope = 0.0812\nTransparency[0.7] = 0.381, Envelope = 0.05\nTransparency[1] = 1, Envelope = 0\nZOffset = -2\nLifetime = 5, 8\nRate = 12\nRotation = -360, 360\nSpeed = 0.01\nLightEmission = 1\nLightInfluence = 0\nBrightness = 15\n```\n\n----------------------------------------\n\nTITLE: Configuring Character Movement in Lua\nDESCRIPTION: Controls whether character movement should be disabled while the merch booth is open. Adds movement restriction functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.configure({\n\tdisableCharacterMovement = true\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Paid Random Items Restriction in Roblox Lua\nDESCRIPTION: Uses PolicyService to check if paid random items are restricted for a player. Developers should use this to hide or block purchases of random items for certain players.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/content-maturity.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.PolicyService.GetPolicyInfoForPlayerAsync\n```\n\n----------------------------------------\n\nTITLE: Retrieving Operation Path from Cloud API Response in Python\nDESCRIPTION: This Python code snippet extracts the operation path from a JSON response after making a request to the Roblox Cloud API. The path is used for polling the status of asynchronous operations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\noperationPath = response.json()['path']\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Developer Product Name - REST API\nDESCRIPTION: This endpoint updates the name of a localized developer product using developerProductId and languageCode, requiring new name data.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH v1/developer-products/{developerProductId}/name/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Configuring Aerated Splash Fill in Roblox\nDESCRIPTION: Configuration for ParticleEmitter that creates light, aerated splashes to fill space and add dynamic movement. Uses specific transparency and brightness settings to create a glowing effect.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_5\n\nLANGUAGE: Roblox\nCODE:\n```\nSplashFill.Texture = \"rbxassetid://17082061238\"\nSplashFill.Orientation = FacingCameraWorldUp\nSplashFill.Color = Color3.fromRGB(255, 152, 33)\nSplashFill.ZOffset = 1\nSplashFill.Lifetime = 1.5\nSplashFill.Rate = 8\nSplashFill.Rotation = NumberRange.new(0, 360)\nSplashFill.RotSpeed = NumberRange.new(-50, 50)\nSplashFill.Speed = NumberRange.new(12, 20)\nSplashFill.SpreadAngle = Vector2.new(45, 45)\nSplashFill.Acceleration = Vector3.new(0, -25, 0)\nSplashFill.Drag = 1\nSplashFill.LightEmission = 1\nSplashFill.LightInfluence = 0\nSplashFill.Brightness = 8\n```\n\n----------------------------------------\n\nTITLE: Handling TouchEnded Event in Lua\nDESCRIPTION: Demonstrates how to connect a custom function to the TouchEnded event of a BasePart. The function prints a message when two parts stop touching each other.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\n\nlocal function onTouchEnded(otherPart)\n\tprint(part.Name .. \" is no longer touching \" .. otherPart.Name)\nend\n\npart.TouchEnded:Connect(onTouchEnded)\n```\n\n----------------------------------------\n\nTITLE: Using Controller Emulator in Roblox Studio for Testing using JavaScript\nDESCRIPTION: This code incorporates the ControllerEmulator component to simulate controller functionalities within Roblox Studio. This requires the ControllerEmulator component imported from the relevant path for testing input mechanisms effectively.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/testing-modes.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ControllerEmulator components={props.components} />\n```\n\n----------------------------------------\n\nTITLE: YouTube Educators Section in Markdown\nDESCRIPTION: Markdown-formatted list of YouTube channels that provide Roblox development education and tutorials.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/roblox-educators.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Educators on Youtube\n\n<a href=\"https://www.youtube.com/watch?v=BSlGrDBLka4&amp;list=PL14SLYIw8Yncstv8IrGNsiNBaN1Qj60Wr\" title=\"Brisimb17\">Brisimb17</a><br/>\n<!-- Additional YouTube links -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Grab Interaction Processing\nDESCRIPTION: Handles initial grab attempt by processing mouse click or touch, raycasting to detect grabbable objects within interaction distance, and checking for GrabHint attachments\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nfunction ProcessClick()\n    -- Fire ray through clicked point\n    -- Check if hit mesh is grabbable\n    -- Verify distance within maxMovingDist\n    -- Identify closest GrabHint attachment\n    -- Store grab attempt details\nend\n```\n\n----------------------------------------\n\nTITLE: Obtaining Token Resources Response - JSON\nDESCRIPTION: This JSON response example shows the structure of the data returned when successfully querying for token resources. It includes details about the owner and the resources with their identifiers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"resource_infos\": [\\n    {\\n      \"owner\": {\\n        \"id\": \"1516563360\",\\n        \"type\": \"User\"\\n      },\\n      \"resources\": {\\n        \"universe\": {\\n          \"ids\": [\"3828411582\"]\\n        },\\n        \"creator\": {\\n          \"ids\": [\"U\"]\\n        }\\n      }\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Relative rotation using CFrame:ToWorldSpace() in Lua\nDESCRIPTION: This snippet shows how to use CFrame:ToWorldSpace() to rotate an object relative to its own orientation. It rotates the red block 70 degrees counterclockwise on its y-axis and 20 degrees clockwise on its z-axis.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/cframes.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal redBlock = Workspace.RedBlock\n\nlocal rotatedCFrame = CFrame.Angles(0, math.rad(70), math.rad(20))\nredBlock.CFrame = redBlock.CFrame:ToWorldSpace(rotatedCFrame)\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Text Capture for Specific UI Elements\nDESCRIPTION: Demonstrates how to prevent specific UI text elements from being automatically captured for translation by setting the AutoLocalize property to false\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/automatic-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ntextObject.AutoLocalize = false\n```\n\n----------------------------------------\n\nTITLE: Escaping Strings in Lua\nDESCRIPTION: This snippet shows how to escape single and double quotes in strings using a backslash and embedding special characters like newline and tab.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal string1 = 'Hello \\'world\\'!'\nprint(string1)  --> Hello 'world'!\n\nlocal string2 = \"Hello \\\"world\\\"!\"\nprint(string2)  --> Hello \"world\"!\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal string1 = \"Hello\\nworld!\"\nprint(string1)\n--> Hello\n--> world!\n\nlocal string2 = \"Hello\\tworld!\"\nprint(string2)  --> Hello\tworld!\n```\n\n----------------------------------------\n\nTITLE: Lighting Container Service Properties\nDESCRIPTION: Example of core Lighting service properties including ClockTime and Brightness that control global lighting in a Roblox experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.Lighting.ClockTime|ClockTime\nClass.Lighting.Brightness|Brightness\n```\n\n----------------------------------------\n\nTITLE: Creating Rise and Drop in Elevation in Roblox Studio\nDESCRIPTION: Detailed steps for creating a rise in elevation between the main and mezzanine floors and a drop in elevation between the main and outdoor floors using wedge parts. This changes the sight lines for players and enhances the tactical environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_2\n\nLANGUAGE: Roblox\nCODE:\n```\n1. Using **wedge** parts, create a **rise in elevation** between the main and mezzanine floors.\n1. Using **wedge** parts, create a **drop in elevation** between the main and outdoor floor.\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Game Icon - REST API\nDESCRIPTION: This endpoint allows updating the icon of a game specified by gameId and languageCode. The data for the new icon should be included in the request.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST v1/game-icon/games/{gameId}/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Displaying API Warning Alert in Markdown\nDESCRIPTION: A warning alert component that notifies users about the potential risks of using legacy APIs with cookie authentication in production environments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/cloud/legacy-warning.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Legacy API warning\n---\n\n<Alert severity=\"warning\">\nLegacy APIs with cookie authentication can incorporate breaking changes without notice. We don't recommend them for production applications.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Face Control: LeftEyeUpperLidRaiser\nDESCRIPTION: This section describes the `LeftEyeUpperLidRaiser` face control, which raises the character's left eyelid upwards to reveal more of the eye white above the iris. It references the `Class.FaceControls.LeftEyeUpperLidRaiser` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Alert Component Usage\nDESCRIPTION: Alert component showing Llama 3 attribution information.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/assistant/guide.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Alert severity=\"info\">\n[Built with Meta Llama 3](https://llama.meta.com/llama3/license/)\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Defining Game Stages for Different Server Roles in Lua\nDESCRIPTION: This code snippet defines the different gameplay modes organized into lists of stages to be executed. It's located in the 'ReplicatedFirst/Configurations/MainConfiguration' file and outlines the stages for Lobby, Queue, and Gameplay roles.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/core-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal _roleStages = {\n\tLobby = {\"Lobby\"},\n\tQueue = {\"Queue\"},\n\tGameplay = {\"Waiting\", \"Gameplay\", \"EndGame\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GameSettings Module in Lua\nDESCRIPTION: This snippet initializes the GameSettings module script.  It creates a module table and returns it, allowing other scripts to access variables stored within the module. No dependencies are required other than Roblox's Lua environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\nreturn GameSettings\n```\n\n----------------------------------------\n\nTITLE: Face Control: TongueUp\nDESCRIPTION: This section describes the `TongueUp` face control, which bends the tongue up. This pose is only visible if combined with `TongueOut`. It references the `Class.FaceControls.TongueUp` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Displaying Roblox Animation Asset IDs Grid\nDESCRIPTION: This snippet shows how to create a table with rows containing grids of Roblox animation IDs using a JSX-like syntax. The table structure features different animation packs with each grid item displaying animation states such as Run, Walk, Jump, etc., along with their corresponding asset IDs. This markup helps in categorizing and showcasing various Roblox animation packs efficiently.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/using.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n\n<Grid item XSmall={4} XLarge={2}>**Walk**<br />616122287</Grid>\n<Grid item XSmall={4} XLarge={2}>**Jump**<br />616115533</Grid>\n<Grid item XSmall={12} XLarge={6}>**Idle**<br />616111295, 616113536, 885535855</Grid>\n<Grid item XSmall={4} XLarge={2}>**Fall**<br />616108001</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim**<br />616119360</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim (Idle)**<br />616120861</Grid>\n<Grid item XSmall={4} XLarge={2}>**Climb**<br />616104706</Grid>\n<Grid item XSmall={4} XLarge={2}>**Run**<br />782842708</Grid>\n<Grid item XSmall={4} XLarge={2}>**Walk**<br />782843345</Grid>\n<Grid item XSmall={4} XLarge={2}>**Jump**<br />782847020</Grid>\n<Grid item XSmall={12} XLarge={6}>**Idle**<br />782841498, 782845736, 980952228</Grid>\n<Grid item XSmall={4} XLarge={2}>**Fall**<br />782846423</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim**<br />782844582</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim (Idle)**<br />782845186</Grid>\n<Grid item XSmall={4} XLarge={2}>**Climb**<br />782843869</Grid>\n<Grid item XSmall={4} XLarge={2}>**Run**<br />1083462077</Grid>\n<Grid item XSmall={4} XLarge={2}>**Walk**<br />1083473930</Grid>\n<Grid item XSmall={4} XLarge={2}>**Jump**<br />1083455352</Grid>\n<Grid item XSmall={12} XLarge={6}>**Idle**<br />1083445855, 1083450166, 1088037547</Grid>\n<Grid item XSmall={4} XLarge={2}>**Fall**<br />1083443587</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim**<br />1083464683</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim (Idle)**<br />1083467779</Grid>\n<Grid item XSmall={4} XLarge={2}>**Climb**<br />1083439238</Grid>\n<Grid item XSmall={4} XLarge={2}>**Run**<br />1083216690</Grid>\n<Grid item XSmall={4} XLarge={2}>**Walk**<br />1083178339</Grid>\n<Grid item XSmall={4} XLarge={2}>**Jump**<br />1083218792</Grid>\n<Grid item XSmall={12} XLarge={6}>**Idle**<br />1083195517, 1083214717, 1099492820</Grid>\n<Grid item XSmall={4} XLarge={2}>**Fall**<br />1083189019</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim**<br />1083222527</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim (Idle)**<br />1083225406</Grid>\n<Grid item XSmall={4} XLarge={2}>**Climb**<br />1083182000</Grid>\n<Grid item XSmall={4} XLarge={2}>**Run**<br />616163682</Grid>\n<Grid item XSmall={4} XLarge={2}>**Walk**<br />616168032</Grid>\n<Grid item XSmall={4} XLarge={2}>**Jump**<br />616161997</Grid>\n<Grid item XSmall={12} XLarge={6}>**Idle**<br />616158929, 616160636, 885545458</Grid>\n<Grid item XSmall={4} XLarge={2}>**Fall**<br />616157476</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim**<br />616165109</Grid>\n<Grid item XSmall={4} XLarge={2}>**Swim (Idle)**<br />616166655</Grid>\n<Grid item XSmall={4} XLarge={2}>**Climb**<br />616156119</Grid>\n\n```\n\n----------------------------------------\n\nTITLE: V1 DataStores Error Response JSON\nDESCRIPTION: Shows a typical error response for data stores API with error, message, and specific error details\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/errors.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"INVALID_ARGUMENT\",\n  \"message\": \"Invalid cursor.\",\n  \"errorDetails\": [\n    {\n      \"errorDetailType\": \"DatastoreErrorInfo\",\n      \"datastoreErrorCode\": \"InvalidCursor\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Team Points UI Update in Roblox Lua\nDESCRIPTION: Code that updates the UI TextLabels with team points and sets up event listeners for point changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n\t\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n\n\t\tteam:GetAttributeChangedSignal(GuiAttribute.teamPoints):Connect(function()\n\t\t\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\n```\n\n----------------------------------------\n\nTITLE: Using Grab Tool to Adjust Cage Mesh in Blender\nDESCRIPTION: This snippet describes how to use Blender's Grab tool to align the cage mesh tightly over the character's head mesh. It includes important considerations like not deleting vertices and ensuring proper alignment with other body parts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/creating/caging.md#2025-04-21_snippet_1\n\nLANGUAGE: blender\nCODE:\n```\n# 1. Switch to Edit Mode\n# 2. Use Grab tool (G key)\n# 3. Select and move vertices to fit over head mesh\n# 4. Hold Shift to select multiple vertices/edges/faces\n# 5. Check for intersections and adjust as needed\n```\n\n----------------------------------------\n\nTITLE: Code Comments Example - Roblox Lua\nDESCRIPTION: Demonstrates the difference between non-specific and improved code comments in Roblox scripting. Shows how to write more descriptive and meaningful comments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/lesson-plans/digital-citizenship/coding-fundamentals.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Not Specific: Runs code\n\n-- Improved: Changes color of PracticePart\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Side Obstacles - Roblox\nDESCRIPTION: This snippet specifies the configuration for obstacles to the left of the towers, detailing their sizes and positional coordinates. This creates additional cover and strategic depth in the gameplay space.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n<table>\n<thead>\n<tr>\n<th>Part</th>\n<th>Size</th>\n<th>CFrame.Position</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Left obstacle</td>\n<td>`20, 10, 5`</td>\n<td>`-15, 5, 262.5`</td>\n</tr>\n<tr>\n<td>Middle obstacle</td>\n<td>`15, 30, 5`</td>\n<td>`-22.5, 15, 237.5`</td>\n</tr>\n<tr>\n<td>Right obstacle</td>\n<td>`10, 10, 15`</td>\n<td>`-5, 5, 202.5`</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Outflow Water in Roblox\nDESCRIPTION: This snippet provides step-by-step instructions to configure the outflow water for cascading waterfalls using Roblox Studio. It highlights the use of multiple Class.Beam objects with attachments to simulate water flow. Dependencies include the Roblox Studio with access to the Explorer and Properties windows. Key parameters involve customization of textures and color sequences to achieve a realistic waterfall visual effect. Input involves setting attachment points on block parts, while the expected visual output is a seamless water flow from the cliff edge. Constraints involve knowledge of using Roblox Studio tools and properties efficiently.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-waterfalls.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n1. Create the outflow for the cascading water.\n   1. In the **Explorer** window, create a **Folder** in the **Workspace** to contain all outflow objects, then rename the folder **Outflow**.\n   1. Insert two **block** parts into the **Outflow** folder, then rename them **OutflowStart** and **OutflowStop**, respectively.\n   1. Move **OutflowStart** to where you want the outflow to begin, and move **OutflowStop** to the edge of the cliff.\n\n      <img src=\"../../../assets/tutorials/creating-waterfalls/Cascades-1C.png\" alt=\"An angled top-down view of the outflow water with two block parts positioned where the outflow texture should render.\" width=\"80%\" />\n\n   1. Insert an attachment into both **OutflowStart** and **OutflowStop**, then rotate the attachments until the yellow visual aid points upward.\n\n      <img src=\"../../../assets/tutorials/creating-waterfalls/Cascades-1D.png\" alt=\"An angled top-down view of the outflow water with two block parts that include attachements where the yellow visual aids point upward.\" width=\"80%\" />\n\n   1. Insert a **Beam** into the **Outflow** folder, then rename it **OutflowWater**.\n   1. Assign each part's attachment to **OutflowWater**.\n\n      1. In the **Explorer** window, select **OutflowWater**.\n      1. In the **Properties** window,\n         1. Set **Attachment0** to the attachment in **OutflowStart**.\n         1. Set **Attachment1** to the attachment in **OutflowStop**. The beam renders its default texture between the two attachments. \n```\n\n----------------------------------------\n\nTITLE: Setting Player ReplicationFocus in Roblox Lua\nDESCRIPTION: This code snippet shows how to manually set a player's ReplicationFocus in Roblox. This should only be done in unique situations, such as experiences that don't use a Player.Character.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nClass.Player.ReplicationFocus|ReplicationFocus\n```\n\n----------------------------------------\n\nTITLE: Sending System Messages in Lua\nDESCRIPTION: Demonstrates how to send a system message to a player using TextChatService and the RBXGeneral channel\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/chat-window.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal TextChatService = game:GetService(\"TextChatService\")\n\nlocal player = Players.LocalPlayer\nlocal generalChannel: TextChannel = TextChatService:WaitForChild(\"TextChannels\").RBXGeneral\n\nlocal PREFIX = \"[Guide] Welcome \"\n\n-- Send \"system message\" to player with their display name appended\ngeneralChannel:DisplaySystemMessage(PREFIX .. player.DisplayName)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Lighting with PointLight\nDESCRIPTION: This snippet provides instructions on how to insert and configure a Class.PointLight object within a group of candles in a Roblox scene. It details the property adjustments like Brightness, Color, and enabling Shadows to enhance the visual comfort of the lighting setup. The functionality is important for creating realistic environments and maintaining performance in low-end devices.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#2025-04-21_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\n1. Insert a point light into one of the candle groupings.\n   1. In the **Explorer** window, expand the **Candle_Group_A** model.\n   1. Hover over the **FillLight** part, then click the ⊕ icon. A contextual menu displays.\n   1. From the contextual menu, insert a **PointLight**.\n```\n\nLANGUAGE: Lua\nCODE:\n```\n1. Select the new point light, then in the **Properties** window,\n   1. Set **Brightness** to `0.7` to reduce the intensity of the light to be more compatible for candlelight.\n   1. Set **Color** to `255, 202, 156` to tint the light to a peach hue and replicate the warmth of the candle source.\n   1. Enable **Shadows** to allow the candlelight to produce shadows.\n```\n\nLANGUAGE: Lua\nCODE:\n```\n1. Repeat this process for **Candle_Group_B**.\n```\n\n----------------------------------------\n\nTITLE: Implementing R6 to R15 Adapter Parts\nDESCRIPTION: This snippet describes how the R6 to R15 Adapter creates adapter parts in a Roblox experience using Luau scripting. The script injects invisible MeshParts that correspond to R6 body parts and welds them to R15 parts. Dependencies include the proper configuration of Roblox workspace and the AvatarUnificationMode property. The objective is to emulate R6 physics, set R15 parts as non-collideable, and relay property changes from R6 to R15 parts. The main limitation is potential conflicts with existing game systems that rely on R6-specific features.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/r6-to-r15-adapter.md#2025-04-21_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nThe R6 to R15 Adapter implements a Luau script injection when an avatar spawns that creates adapter parts.\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequencing Algorithm in Lua\nDESCRIPTION: Shows a sequence of steps to create a bridge object in Roblox, demonstrating the sequencing methodology.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/coding-concept-algorithms.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function createBridge()\n  create new block\n  size block\n  set color\n  rotate\n  set location\n  parent to workspace\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OAuth Client on Linux/Mac in Bash\nDESCRIPTION: This snippet shows how to export environment variables for the OAuth client on Unix-based systems. These environment settings include client ID, secret, and an optional port, essential for the app's operation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-sample.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ROBLOX_CLIENT_ID=your_client_id_here\nexport ROBLOX_CLIENT_SECRET=your_client_secret_here\nexport ROBLOX_PORT=3000 # Optional. Default is 3000.\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Lua for Roblox Story Game\nDESCRIPTION: Example showing how to begin concatenating strings using the concatenation operator (..) to join the story text with player responses.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/code-the-story.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n  -- Code story between the dashes\n  -- =============================================\n     local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n     local story = \"In a tree on a hill lives the great wizard \" ..\n  -- =============================================\n```\n\n----------------------------------------\n\nTITLE: MemoryStores Partition Overview\nDESCRIPTION: Explains how data is stored and distributed across partitions in different MemoryStore data structures. Highlights the automatic partitioning process managed by the Roblox MemoryStores API.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/per-partition-limits.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Partitions\n\nThe MemoryStores API stores data on _partitions_, which are just subdivisions of storage. Whenever you write an item to a memory store, that item is stored on exactly one partition.\n```\n\n----------------------------------------\n\nTITLE: Filtering Items with Python Inventory API\nDESCRIPTION: This Python snippet modifies the filter parameter to request only collectible items in the inventory. It changes the 'parameters' dictionary in the Python sample to include filters for collectibles and asset types in the API request.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/inventory.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nparameters = {\n    'filter': 'onlyCollectibles=true;inventoryItemAssetTypes=*'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Neon Text Properties\nDESCRIPTION: Configuration settings for the 3D text component of the neon sign, including color and material properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/modeling/create-neon-signs.md#2025-04-21_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nColor = 170,0,0\nMaterial = Neon\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Components for App Store Fees Information in JSX\nDESCRIPTION: JSX code that creates a styled grid layout explaining how Roblox covers app store and payment processing fees for developers. The component uses Material UI Grid and Chip elements to visualize the 22% portion of revenue allocated to these fees.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/earn-on-roblox.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"22%\" size=\"large\" style={{backgroundColor:\"#00a2ff\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"App stores & payment processing fees\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Face Control: LeftOuterBrowRaiser\nDESCRIPTION: This section describes the `LeftOuterBrowRaiser` face control, which raises the outer part of the character's left brow upwards. It references the `Class.FaceControls.LeftOuterBrowRaiser` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Refresh Token with cURL for Roblox OAuth 2.0\nDESCRIPTION: Example using cURL to obtain a new set of tokens with a refresh token. Requires a valid refresh token, client ID, and client secret.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/oauth/v1/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=refresh_token' \\\n--data-urlencode 'refresh_token=Ujfstayclfdlbm...BGydlsnU' \\\n--data-urlencode 'client_id=840974200211308101' \\\n--data-urlencode 'client_secret=RBX-CR9...St12L'\n```\n\n----------------------------------------\n\nTITLE: Defining Base URL for Groups API in Markdown\nDESCRIPTION: Specifies the base URL for the Groups API, along with authentication types and a note about additional endpoints.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n- Base URL: `https://apis.roblox.com/legacy-groups`\n- Authentication types: OAuth 2.0 and API key\n- Additional Groups API endpoints without Open Cloud authentication support can be found [here](/cloud/legacy/groups/v1).\n```\n\n----------------------------------------\n\nTITLE: Creating a Submission Button with HTML/React Components\nDESCRIPTION: An HTML/React component that creates a submit button linking to the Roblox featuring submission form. The button uses size and variant properties to control its appearance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/get-featured-on-roblox-owned-channels.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Button\n  size=\"medium\"\n  variant=\"contained\"\n  href=\"https://corp.roblox.com/submit-for-featuring/\">\nReady to submit? Click here\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Combining Strings with Concatenation in Lua\nDESCRIPTION: This snippet explains string concatenation using the .. operator, and contrasts it with the print command which combines strings with spaces using commas.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal hello = \"Hello\"\nlocal helloWithSpace = \"Hello \"\nlocal world = \"world!\"\n\nlocal string1 = hello .. world\nlocal string2 = helloWithSpace .. world\nlocal string3 = hello .. \" \" .. world\n\nprint(string1)  --> Helloworld!\nprint(string2)  --> Hello world!\nprint(string3)  --> Hello world!\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal hello = \"Hello\"\nlocal world = \"world\"\nlocal exclamationMark = \"!\"\n\nprint(hello .. world .. exclamationMark)  --> Helloworld!\nprint(hello, world .. exclamationMark)  --> Hello world!\nprint(hello, world, exclamationMark)  --> Hello world !\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottom Trim Assets in Roblox\nDESCRIPTION: Code snippet showing the CFrame position and orientation values for placing bottom trim assets. Includes coordinates for ExtTrimALong, ExtTrimAShort, and ExtTrimBCorner pieces.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_33\n\nLANGUAGE: Roblox\nCODE:\n```\nCFrame.Position: -48, 31, 285\nCFrame.Orientation: 0, -90, 0\n\nCFrame.Position: -8, 31, 285\nCFrame.Orientation: 0, 0, 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Trail Texture Properties in Roblox\nDESCRIPTION: Demonstrates the various TextureMode settings (Wrap, Static, Stretch) and their effects on trail textures. TextureLength property determines either the physical length of repeating textures or number of repetitions depending on the mode selected.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/effects/trails.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTextureMode.Wrap: Textures repeat at fixed lengths set by TextureLength\nTextureMode.Static: Textures remain fixed where placed, good for tracks/prints\nTextureMode.Stretch: Texture repeats TextureLength times across total trail length\n```\n\n----------------------------------------\n\nTITLE: Connecting to selfieModeOpened Event in Lua\nDESCRIPTION: Demonstrates how to connect to the selfieModeOpened event which fires when the player opens selfie mode. This can only be used in a LocalScript and requires the SelfieMode module to be required from ReplicatedStorage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nSelfieMode.selfieModeOpened:Connect(function()\n\tprint(\"Selfie mode open\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling Scene Ending Warnings on Client in Lua\nDESCRIPTION: Shows how to connect to the onSceneEndingWarningForClient event to detect when a scene is about to end on the client side.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EventSequencer = require(ReplicatedStorage:WaitForChild(\"EventSequencer\"))\n\n-- Detect when scene is about to end (client-side)\nEventSequencer.onSceneEndingWarningForClient:Connect(function()\n\twarn(\"Scene is about to end!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle Size for Smoke Plume in Roblox\nDESCRIPTION: This code sets the Size property of a ParticleEmitter to gradually increase particle size from 40 to 100 studs over their lifetime, with small variations of 5-15 studs. This creates the effect of smoke expanding as it rises from the volcano caldera.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nworkspace.Caldera.SmokePlume.Smoke.Size = NumberSequence.new{NumberSequenceKeypoint.new(0,40,5), NumberSequenceKeypoint.new(1,100,15)}\n```\n\n----------------------------------------\n\nTITLE: Example Introspect Token Response in JSON\nDESCRIPTION: JSON response indicating the status of a token, showing whether the token is active along with other relevant token details.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true,\n  \"jti\": \"RT.2GcjvTduKzk6QY9tjTfm\",\n  \"iss\": \"https://apis.roblox.com/oauth/\",\n  \"token_type\": \"Bearer\",\n  \"client_id\": \"840974200211308101\",\n  \"aud\": \"4239311013248676173\",\n  \"sub\": \"1516563360\",\n  \"scope\": \"universe-messaging-service:publish\",\n  \"exp\": 1676394509,\n  \"iat\": 1660842510\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Executing For Loop Example in Luau\nDESCRIPTION: Example of a for loop that never executes because the control variable starts beyond the end value while counting up.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10, 0, 1 do\n\tprint(count)\n\ttask.wait(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Harden Shadows in Roblox Studio\nDESCRIPTION: This snippet provides instructions on how to harden shadows in the Roblox Studio environment to create a more dramatic effect with sharp edges.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/building/customize-global-lighting.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1. In the **Explorer** window, select **Lighting**.\n2. In the **Properties** window, set **ShadowSoftness** to `0`. Shadows produce hard edges.\n```\n\n----------------------------------------\n\nTITLE: Setting Beam Camera Facing in Roblox\nDESCRIPTION: Shows how to configure a beam's FaceCamera property to ensure visibility from all camera angles.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/effects/beams.md#2025-04-21_snippet_2\n\nLANGUAGE: roblox\nCODE:\n```\nBeam.FaceCamera = true\n```\n\n----------------------------------------\n\nTITLE: Playing Emotes\nDESCRIPTION: Shows how to play an emote after retrieving it by name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nlocal shrug = EmoteBar.getEmote(\"Shrug\")\nEmoteBar.playEmote(shrug)\n```\n\n----------------------------------------\n\nTITLE: Importing Beta Alert Component in React\nDESCRIPTION: This entry showcases the import of a Beta Alert component within a React application to indicate the beta status of the Texture Generator tool.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/texture-generator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BetaAlert from '../includes/beta-features/beta-alert.md'\n\n<BetaAlert betaName=\"Texture Generator\" leadIn=\"This tool is currently in beta. Enable it through \" leadOut=\".\" components={props.components} />\n```\n\n----------------------------------------\n\nTITLE: Applying Placeholder Materials - Roblox\nDESCRIPTION: This snippet describes how to apply placeholder materials to various parts within the environment to aid user orientation. Color-coding enhances navigational clarity with specific colors assigned to different areas.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Select the top perimeter walls and the top hallway editions, then set their `Class.Part.Color` to `255, 176, 0`.\n1. Select the left-side floor parts, then set their `Class.Part.Color` to `255, 89, 89`.\n1. Select the right-side floor parts, then set their `Class.Part.Color` to `16, 42, 220`.\n1. Select the part for the elevation between the ground and first floor, then set their `Class.Part.Color` to `75, 151, 75`.\n```\n\n----------------------------------------\n\nTITLE: Opening Emotes Menu in Lua\nDESCRIPTION: Opens the emotes menu programmatically by calling SetEmotesMenuOpen on GuiService with true.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/emotes.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Open the emote Menu\nlocal GuiService = game:GetService(\"GuiService\")\nGuiService:SetEmotesMenuOpen(true)\n```\n\n----------------------------------------\n\nTITLE: Mirror Modifier in Blender for Symmetrical 3D Art\nDESCRIPTION: A modifier that allows mirroring geometry across one or multiple axes to create symmetrical 3D art with minimal effort\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select object in Object mode\n2. Navigate to Modifiers tab\n3. Add Mirror modifier\n4. Set axis for mirroring\n5. Modify object in Edit mode\n```\n\n----------------------------------------\n\nTITLE: Attachment Naming Reference\nDESCRIPTION: Reference table for proper naming conventions of attachment points based on accessory types in Roblox Studio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/clothing-specifications.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHat: HatAttachment\nHair: HairAttachment\nBack: BodyBackAttachment\nWaist: WaistFrontAttachment, WaistCenterAttachment, WaistBackAttachment\nShoulder: RightShoulderAttachment, RightCollarAttachment, NeckAttachment, LeftCollarAttachment, LeftShoulderAttachment\nFace/Eyelash/Eyebrow: FaceFrontAttachment, FaceCenterAttachment\nNeck: NeckAttachment\nFront: BodyFrontAttachment\nLayered tops: BodyFrontAttachment\nLayered bottoms: WaistCenterAttachment\n```\n\n----------------------------------------\n\nTITLE: Calculating Second Month Mobile Subscription Revenue\nDESCRIPTION: Mathematical calculation showing the Robux earned from a $12.99 mobile subscription from the second month onward with no platform fee\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/subscriptions.md#2025-04-21_snippet_7\n\nLANGUAGE: math\nCODE:\n```\n1299 = 1299\n```\n\n----------------------------------------\n\nTITLE: Handling MerchBooth Close Event in Lua\nDESCRIPTION: Connects to the merchBoothClosed event to detect when either the catalog or item detail view are closed. Uses ReplicatedStorage to access the MerchBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.merchBoothClosed:Connect(function()\n\tprint(\"Booth view closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Modify Default Speed in Luau\nDESCRIPTION: This Luau code snippet demonstrates how to change the default speed setting of a driftspeeder. It assigns a new value (between 50 and 300) to the `Settings.DefaultSpeed` variable. The comment clarifies the purpose of the setting (speed when not boosted) and its unit (Studs/second).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-galactic-speedway/customize-and-share.md#2025-04-21_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\n\"Settings.DefaultSpeed = 100\t\t-- Speed when not boosted [Studs/second, Range 50-300]\nSettings.BoostSpeed = 200\t\t-- Speed when boosted [Studs/second, Maximum: 400]\nSettings.BoostAmount = 10\t\t-- Duration of boost in seconds\nSettings.Steering = 5\t\t\t-- How quickly the speeder turns [Range: 1-10]\"\n```\n\n----------------------------------------\n\nTITLE: Constant Value Example for Server Categorical Signal\nDESCRIPTION: An example implementation of the constant value formula for server categorical signals using GameNotStarted as the attribute. It checks if the server's game has not started yet by comparing with a constant value of true.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_GameNotStarted = true\n\nif server_GameNotStarted = true then\n  return 1\nelse\n  return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Camera Update Function in Roblox Lua\nDESCRIPTION: This function serves as a template for updating the camera position. It checks for the existence of the player's character and HumanoidRootPart.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n\nlocal function updateCamera()\n    local character = player.Character\n    if character then\n        local root = character:FindFirstChild(\"HumanoidRootPart\")\n        if root then\n\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Token Introspection Using cURL for Roblox OAuth 2.0\nDESCRIPTION: Example cURL command to introspect a token to verify its validity and gain insights into its claims. Requires a valid token, client ID, and client secret.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/oauth/v1/token/introspect' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token=eyjlflabtfl...4gxqYBG' \\\n--data-urlencode 'client_id=840974200211308101' \\\n--data-urlencode 'client_secret=RBX-CR9...St12L'\n```\n\n----------------------------------------\n\nTITLE: Calculating First Month Desktop Subscription Revenue\nDESCRIPTION: Mathematical calculation showing the Robux earned from a $9.99 desktop subscription in the first month after the 30% platform fee\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/subscriptions.md#2025-04-21_snippet_4\n\nLANGUAGE: math\nCODE:\n```\n999 * .7 = 699\n```\n\n----------------------------------------\n\nTITLE: Implementing Premium Purchase Modal with Exclusive Area Access in Roblox\nDESCRIPTION: A comprehensive implementation that prompts non-Premium users to purchase a Premium subscription when they touch a teleporter part. Premium members are immediately teleported to an exclusive area. The script also handles membership changes and implements touch detection with debouncing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/engagement-based-payouts.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal teleporter = script.Parent\nlocal showModal = true\n\nlocal TELEPORT_POSITION = Vector3.new(1200, 200, 60)\n\n-- Teleport character to exclusive area\nlocal function teleportPlayer(player)\n\t-- Request streaming around target location\n\tplayer:RequestStreamAroundAsync(TELEPORT_POSITION)\n\n\t-- Teleport character\n\tlocal character = player.Character\n\tif character and character.Parent then\n\t\tlocal currentPivot = character:GetPivot()\n\t\tcharacter:PivotTo(currentPivot * CFrame.new(TELEPORT_POSITION))\n\tend\nend\n\n-- Detect character parts touching teleporter\nteleporter.Touched:Connect(function(otherPart)\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\tif not player then return end\n\n\tif not player:GetAttribute(\"CharacterPartsTouching\") then\n\t\tplayer:SetAttribute(\"CharacterPartsTouching\", 0)\n\tend\n\tplayer:SetAttribute(\"CharacterPartsTouching\", player:GetAttribute(\"CharacterPartsTouching\") + 1)\n\n\tif player.MembershipType == Enum.MembershipType.Premium then\n\t\t-- User has Premium; teleport character to exclusive area within experience\n\t\tteleportPlayer(player)\n\telse\n\t\t-- Show purchase modal, using debounce to show once every few seconds at most\n\t\tif not showModal then return end\n\t\tshowModal = false\n\t\ttask.delay(5, function()\n\t\t\tshowModal = true\n\t\tend)\n\t\tMarketplaceService:PromptPremiumPurchase(player)\n\tend\nend)\n\n-- Detect character parts exiting teleporter\nteleporter.TouchEnded:Connect(function(otherPart)\n\tlocal player = Players:GetPlayerFromCharacter(otherPart.Parent)\n\tif player and player:GetAttribute(\"CharacterPartsTouching\") then\n\t\tplayer:SetAttribute(\"CharacterPartsTouching\", player:GetAttribute(\"CharacterPartsTouching\") - 1)\n\tend\nend)\n\n-- Handle membership changed event\nPlayers.PlayerMembershipChanged:Connect(function(player)\n\twarn(\"User membership changed; new membership is \" .. tostring(player.MembershipType))\n\n\t-- Teleport character if membership type is Premium and character is on teleporter\n\tif player.MembershipType == Enum.MembershipType.Premium and player:GetAttribute(\"CharacterPartsTouching\") > 0 then\n\t\tteleportPlayer(player)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Team-Based Spawn Validation in Lua\nDESCRIPTION: Script that implements a team-based validation system for the SpawnWithFriends module, ensuring players only spawn near teammates.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/spawn-with-friends.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SpawnWithFriends = require(ReplicatedStorage:WaitForChild(\"SpawnWithFriends\"))\n\n-- Teleports players only if they are on the same team\nlocal function validator(playerToTeleport, destinationPlayer, teleportationPoint)\n\treturn playerToTeleport.Team == destinationPlayer.Team\nend\n\nSpawnWithFriends.setTeleportationValidator(validator)\n```\n\n----------------------------------------\n\nTITLE: ColorCorrectionEffect Properties\nDESCRIPTION: Primary properties available for the ColorCorrectionEffect that control brightness, contrast, saturation, and tint of the visual output.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/post-processing-effects.md#2025-04-21_snippet_1\n\nLANGUAGE: roblox\nCODE:\n```\nColorCorrectionEffect.Brightness  -- Sets pixel brightness\\nColorCorrectionEffect.Contrast   -- Sets dark/light color separation\\nColorCorrectionEffect.Saturation  -- Sets color intensity\\nColorCorrectionEffect.TintColor   -- Scales RGB channel pixels\n```\n\n----------------------------------------\n\nTITLE: Face Control: RightBrowLowerer\nDESCRIPTION: This section describes the `RightBrowLowerer` face control, which lowers the character's right brow down. It references the `Class.FaceControls.RightBrowLowerer` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Face Control: Corrugator\nDESCRIPTION: This section describes the `Corrugator` face control, which brings the left and right brows inward together. It references the `Class.FaceControls.Corrugator` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Updating a Localized Badge Name - REST API\nDESCRIPTION: This endpoint allows for updating the name of a localized badge using the badgeId and languageCode. Necessary changes should be included in the request payload.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH v1/badges/{badgeId}/name/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Advanced Type Definition with Generics\nDESCRIPTION: This snippet introduces the concept of generics in Luau, allowing for highly flexible and reusable type definitions. It explains how to create generic type structures that adapt based on contextually provided types.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-checking.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\ntype GenericType<T> = T\n\ntype List<T> = {T}\n\nlocal Names: List<string> = {\"Bob\", \"Dan\", \"Mary\"}  -- Type becomes {string}\nlocal Fibonacci: List<number> = {1, 1, 2, 3, 5, 8, 13}  -- Type becomes {number}\n\ntype Map<K, V> = {[K]: V}\n\ntype State<T> = {\n\tKey: string,\n\tValue: T\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FieldMask - JSON\nDESCRIPTION: This snippet describes a FieldMask in Open Cloud APIs, which allows clients to specify fields to act on within a JSON resource. The example illustrates how to construct a field mask string.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/types.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": {\n    \"a\": \"c\",\n    \"b\": \"d\"\n  },\n  \"bar\": \"x\",\n  \"baz\": \"y\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unary Negation with Metamethods\nDESCRIPTION: Demonstrates using the __unm metamethod to negate table values dynamically\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal metatable = {\n\t__unm = function(t) -- __unm is for the unary - operator\n    local negated = {}\n  \tfor key, value in t do\n  \t\tnegated[key] = -value -- negate all of the values in this table\n  \tend\n  \treturn negated -- return the table\n\tend\n}\n\nlocal table1 = setmetatable({10, 11, 12}, metatable)\nprint(table.concat(-table1, \"; \")) --> -10; -11; -12\n```\n\n----------------------------------------\n\nTITLE: Configuring Wedge Parts for Side Middle Top Roof in Roblox\nDESCRIPTION: Specific measurements for placing wedge parts to create angled sections of the side middle top roof in the Environment Art sample. Includes Size, CFrame.Position, and CFrame.Orientation properties for two different wedges.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_27\n\nLANGUAGE: Roblox\nCODE:\n```\nSize: 15, 5, 10\nCFrame.Position: -70, 23.5, 187.5\nCFrame.Orientation: 0, 90, 180\n\nSize: 15, 5, 10\nCFrame.Position: -70, 23.5, 132.5\nCFrame.Orientation: 0, 90, 180\n```\n\n----------------------------------------\n\nTITLE: Referencing Roblox CFrame and Transform Properties\nDESCRIPTION: Demonstrates the usage of CFrame datatype and BasePart.Size property in Roblox's transform system, highlighting how they differ from standard engine transforms.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/engine-comparisons/transforms.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDatatype.CFrame|CFrames\nClass.BasePart.Size\n```\n\n----------------------------------------\n\nTITLE: Setting Player Health to Zero in Luau\nDESCRIPTION: Completes the trap functionality by setting the player's health to zero when a Humanoid touches the trap part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/traps-with-if-statements.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal trapPart = script.Parent\n\nlocal function onTouch(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\n   -- Evaluates if a Humanoid was found\n   if humanoid then\n      print(\"Found a Humanoid\")\n      humanoid.Health = 0\n   end\nend\n\ntrapPart.Touched:Connect(onTouch)\n```\n\n----------------------------------------\n\nTITLE: Constant Value Formula for Server Categorical Signal\nDESCRIPTION: Determines if a server's categorical attribute matches a specified constant value. Returns a score of 1 when the attribute matches the constant and 0 when it doesn't.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nif server_{attribute_name} = constant_value then\n  return 1 \nelse\n  return 0\nend\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/microprofiler/index.md#2025-04-21_snippet_2\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```\n\n----------------------------------------\n\nTITLE: Enabling the Future Lighting System in Roblox Studio\nDESCRIPTION: This snippet outlines the steps to switch from the ShadowMap lighting system to the Future lighting system in Roblox Studio for improved lighting effects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/building/customize-global-lighting.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1. In the **Explorer** window, select **Lighting**.\n2. In the **Properties** window, click the **Technology** dropdown, then select **Future**. The lighting system updates.\n```\n\n----------------------------------------\n\nTITLE: Setting Control Variable with Initial Value in For Loop\nDESCRIPTION: Shows how to declare a control variable named 'count' with an initial value of 10 in a Luau for loop.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/intro-to-for-loops.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfor count = 10\n```\n\n----------------------------------------\n\nTITLE: Handling Magic Characters in Luau\nDESCRIPTION: This snippet describes how to utilize magic characters in Luau string patterns and demonstrates escaping them using the % symbol, crucial for accurate character matching.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/strings.md#2025-04-21_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\n-- \"roblox.com\" matches \"roblox#com\" because the period is interpreted as \"any character\"\nlocal match1 = string.match(\"What is roblox#com?\", \"roblox.com\")\nprint(match1)  --> roblox#com\n\n-- Escape the period with % so it is interpreted as a literal period character\nlocal match2 = string.match(\"I love roblox.com!\", \"roblox%.com\")\nprint(match2)  --> roblox.com\n```\n\n----------------------------------------\n\nTITLE: Rendering Roblox Getting Started Guide Sections in JSX\nDESCRIPTION: This JSX code renders the sections of the Roblox getting started guide. It maps through the sections array, displaying titles, descriptions, buttons, and content items with images, videos, and links.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/get-started.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{sections.map((section, index) => (\n  <Grid style={{ marginBottom: 48 }} item xs={12} key={index}>\n    {section.title && (\n      <Typography variant='h1'>{section.title}</Typography>\n    )}\n    <div style={{ marginTop: 16, marginBottom: 48 }}>\n      {section.description && (\n        <p>{section.description}</p>\n      )}\n      {section.buttons && section.buttons.map((button, btnIndex) => (\n        <Button\n          key={btnIndex}\n          style={{ marginTop: 8, marginRight: 24 }}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          href={button.href}\n        >\n          {button.text}\n        </Button>\n      ))}\n    </div>\n    {section.content && (\n      <Grid container spacing={4}>\n        {section.content.map((content, contentIndex) => {\n          const mdValue = 12 / section.content.length;\n          return (\n            <Grid item xs={12} sm={6} md={mdValue} key={contentIndex}>\n              <div style={{ marginBottom: 48 }}>\n                {content.image && (\n                  <img\n                    style={{ width: '100%', aspectRatio: 16/9, height: 'auto', objectFit: 'cover' }}\n                    src={content.image}\n                    alt=\"\"\n                  />\n                )}\n                {content.video && (\n                  <iframe\n                    style={{ marginBottom: 16, width: '100%', aspectRatio: 16/9, height: 'auto' }}\n                    src={content.video}\n                    title=\"YouTube video player\"\n                    frameborder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                    referrerpolicy=\"strict-origin-when-cross-origin\"\n                    allowfullscreen\n                  ></iframe>\n                )}\n                <h3>{content.title}</h3>\n                <p>{content.description}</p>\n                {content.links && content.links.map((link, linkIndex) => (\n                  <a href={link.href} key={linkIndex}>\n                    <Typography variant='buttonLarge'>{link.text}</Typography><br />\n                  </a>\n                ))}\n                {content.buttons && content.buttons.map((button, btnIndex) => (\n                !button.useStudioButton && (\n                  <Button\n                    key={btnIndex}\n                    style={{ marginTop: 16, marginRight: 24 }}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    href={button.href}\n                  >\n                    {button.text}\n                  </Button>\n                )\n                ))}\n              </div>\n            </Grid>\n          );\n        })}\n      </Grid>\n    )}\n  </Grid>\n))}\n```\n\n----------------------------------------\n\nTITLE: Assigning Angular Velocity Properties in Roblox\nDESCRIPTION: This snippet details how to assign properties to a `Class.AngularVelocity` constraint in Roblox characterizing how an object rotates around an axis. The parameters include `Attachment0` for linking to attachment points, `AngularVelocity` to set rotational speed, and `MaxTorque` to establish the maximum torque for achieving that speed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-spinning-objects.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n1. Assign the part's attachment to the new constraint.\n   1. In the **Explorer** window, select the constraint.\n   1. In the **Properties** window,\n      1. Set **Attachment0** to **SpinAttachment**.\n      1. Set **AngularVelocity** to `0, 6, 0` to spin the part 6 radians per second along the Y axis. Note that if you were to set this property to `0, -6, 0`, the block would spin clockwise.\n      1. Set **MaxTorque** to `1000` to apply up to 1000 Rowton-studs of constant angular force per second to achieve the target angular velocity.\n      1. Keep **RelativeTo** to **World** to spin the block relative to the world's position and orientation.\n```\n\n----------------------------------------\n\nTITLE: Generic For Loops in C#\nDESCRIPTION: Illustrates the use of generic `for` loops in C# for iterating over a range of numbers. It shows both forward and reverse loops with customizable start, end, and step values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Forward loop\nfor (int i = 1; i <= 10; i++) {\n\tdoSomething();\n}\n\n// Reverse loop\nfor (int i = 10; i >= 1; i--) {\n\tdoSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Objective on UI - Roblox Lua\nDESCRIPTION: This snippet sets the in-game UI objective display using the TEAM_SCORE_LIMIT. It requires the TEAM_SCORE_LIMIT module, then sets a TextLabel's text to reflect this limit using Lua's string formatting. Dependencies include the ReplicatedStorage and specific UI elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal TEAM_SCORE_LIMIT = require(ReplicatedStorage.TEAM_SCORE_LIMIT)\n\nlocal function setObjective(gui: ScreenGui)\n\tlocal bodyTextLabel = gui.Objective.ObjectiveDisplay.Body.BodyTextLabel\n\tbodyTextLabel.Text = bodyTextLabel.Text:format(TEAM_SCORE_LIMIT)\nend\n```\n\n----------------------------------------\n\nTITLE: Season Passes Feature Package Card Implementation\nDESCRIPTION: JSX implementation of a material card component displaying the Season Passes feature package information with setup steps and image.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/index.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>Season passes</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nThe **Season Passes** feature package offers out-of-the-box functionality to create quests that players can complete to earn rewards during a pre-defined period of time.\n</Typography>\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Ambient Light Color in Roblox\nDESCRIPTION: Adjusts the Ambient lighting property to create a warm, orange hue that complements indoor light sources like fireplaces and candles.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#2025-04-21_snippet_4\n\nLANGUAGE: Roblox\nCODE:\n```\nAmbient = Color3.new(83, 70, 57)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Localized Developer Product Icon - REST API\nDESCRIPTION: This endpoint facilitates the deletion of a localized developer product icon identified by developerProductId and languageCode. Requires appropriate permissions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE v1/developer-products/{developerProductId}/icons/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Setting Control Key Codes in Lua\nDESCRIPTION: Customizes the keyboard and gamepad controls for interacting with the merch booth using the MerchBooth.Controls enum.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setControlKeyCodes(MerchBooth.Controls.ProximityPrompts, {\n\tkeyboard = Enum.KeyCode.Q,\n\tgamepad = Enum.KeyCode.ButtonL1\n})\n```\n\n----------------------------------------\n\nTITLE: Monitoring DragFrame Changes in Roblox DragDetector\nDESCRIPTION: This snippet demonstrates how to track changes to a DragDetector's DragFrame property. It connects to the property changed signal and prints the current drag translation whenever the DragFrame updates.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/3D-drag-detectors.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragDetector = script.Parent.DragDetector\n\ndragDetector:GetPropertyChangedSignal(\"DragFrame\"):Connect(function()\n\tlocal currentDragTranslation = dragDetector.DragFrame.Position\n\tprint(currentDragTranslation)\nend)\n```\n\n----------------------------------------\n\nTITLE: Registering Function with Event Manager\nDESCRIPTION: Shows how to register a function with the event manager module for script execution.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nemModule.RegisterFunction(\"EnablePlayerControls\", EnablePlayerControls)\n```\n\n----------------------------------------\n\nTITLE: Completing a Multi-Question Story Script in Lua\nDESCRIPTION: Complete example showing how to build a two-sentence story with two player-provided inputs. This demonstrates the full pattern of collecting and incorporating multiple user responses.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/finish-and-add.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal name1 = storyMaker:GetInput(\"What is your favorite name?\")\nlocal food1 = storyMaker:GetInput(\"What is your favorite food?\")\n\nlocal story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \" .. \"Every morning, the wizard loves eating a giant bowl of honey roasted \" .. food1 .. \". \"\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations in Luau\nDESCRIPTION: Demonstrates Luau's ability to coerce strings to numbers during arithmetic operations. This auto-conversion allows mathematical computations between number and string values, raising an error when incompatible types are used.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/type-coercion.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nprint(100 + \"7\") -- 107\nprint(100 - \"7\") -- 93\nprint(\"1000\" + 234) -- 1234\nprint(\"1000\" - 234) -- 766\nprint(\"hello\" + 234) -- error: attempt to perform arithmetic (add) string and number\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 Authorization URL Example\nDESCRIPTION: This plain text example shows the structure of an authorization URL for OAuth 2.0, which includes the `universe-messaging-service:publish` scope.  This allows the application to request permission from the user to publish messages to their experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-messaging.md#2025-04-21_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nhttps://authorize.roblox.com?client_id=816547628409595165403873012&redirect_uri=https://my-app.com/redirect&scope=openid+universe-messaging-service:publish&response_type=Code&prompts=login+consent&nonce=12345&state=6789\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Badge Name and Description - REST API\nDESCRIPTION: This endpoint updates the name and description for a localized badge based on the badgeId and languageCode. The new data must be provided in the request body.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH v1/badges/{badgeId}/name-description/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Selection Techniques in 3D Viewport in Markdown\nDESCRIPTION: This section explains methods for object selection within the 3D viewport, including selection cycling for hidden objects. This is essential for efficient modeling and manipulation of items in complex scenes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/ui-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nAs you hover over parts and models in the viewport, they are outlined to indicate their potential selection. You can select an outlined object by clicking it, or you can select multiple objects by holding Shift, Ctrl, or ⌘ as you hover over and click them. \n\nIn more complex environments or when zoomed in, objects will commonly be hidden from your view by other objects in front. To select hidden objects without moving the camera around, hold Alt or ⌥ and click to perform selection cycling to the next further object behind the currently selected object.\n```\n\n----------------------------------------\n\nTITLE: Adding Accordion Components for Course Content\nDESCRIPTION: This snippet implements Accordion components to encapsulate course content chapters in a user-friendly manner. Each chapter displays a title and details that can be expanded or collapsed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n## Course contents\n\n   <BaseAccordion>\n   <AccordionSummary>\n      <Typography variant=\"h4\">Chapter 1 - Choose an art style</Typography>\n   </AccordionSummary>\n   <AccordionDetails>\n\n    Learn how to [plan an aesthetic direction](choose-an-art-style.md) for your UI elements.\n\n   </AccordionDetails>\n   </BaseAccordion>\n\n   <BaseAccordion>\n   <AccordionSummary>\n      <Typography variant=\"h4\">Chapter 2 - Wireframe your layouts</Typography>\n   </AccordionSummary>\n   <AccordionDetails>\n\n    Learn how to [design the structure and flow](wireframe-your-layouts.md) of the information you want to communicate through in various workflows.\n\n   </AccordionDetails>\n   </BaseAccordion>\n\n   <BaseAccordion>\n   <AccordionSummary>\n      <Typography variant=\"h4\">Chapter 3 - Implement designs in Studio</Typography>\n   </AccordionSummary>\n   <AccordionDetails>\n\n    Learn how to [implement your UI layouts](implement-designs-in-studio.md) in Studio using both built-in and custom UI elements with scripts.\n\n        <a href=\"https://www.roblox.com/games/14817965191/Laser-Tag-1A\">\n        <Button\n          color=\"primary\"\n          size=\"medium\"\n          variant=\"contained\">\n          Get the Place File\n        </Button>\n        </a>\n\n   </AccordionDetails>\n   </BaseAccordion>\n```\n\n----------------------------------------\n\nTITLE: Celestial Body Properties Configuration in Roblox\nDESCRIPTION: Properties for customizing celestial bodies in a Roblox skybox, including sun and moon textures, sizes, and star count settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/skybox.md#2025-04-21_snippet_1\n\nLANGUAGE: roblox\nCODE:\n```\nSky.SunTextureId -- Sets the texture of the sun\nSky.SunAngularSize -- Sets the relative size of the sun in degrees\nSky.MoonTextureId -- Sets the texture of the moon\nSky.MoonAngularSize -- Sets the relative size of the moon in degrees\nSky.StarCount -- Sets the amount of stars in the skybox\nSky.CelestialBodiesShown -- Toggles visibility of all celestial bodies\n```\n\n----------------------------------------\n\nTITLE: Rendering Beta Feature Alert Box in JSX\nDESCRIPTION: This code snippet defines a React component that displays an alert box for beta features in Roblox documentation. It uses the Alert component with a 'success' severity and incorporates props for customizable content.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/beta-features/beta-alert.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Alert severity=\"success\">{props.leadIn}**File**&nbsp;&rang; **Beta Features**&nbsp;&rang; **{props.betaName}**{props.leadOut}</Alert>\n```\n\n----------------------------------------\n\nTITLE: Mapping Device Camera to Workspace in Roblox Connect (Lua)\nDESCRIPTION: Uses the GetDeviceCameraCFrame method to map the device camera orientation to the workspace camera, enhancing immersion in Picture-in-Picture mode on mobile devices.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/roblox-connect.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nClass.PlayerViewService:GetDeviceCameraCFrame()\n```\n\n----------------------------------------\n\nTITLE: Missions Feature Package Card Implementation\nDESCRIPTION: JSX implementation of a material card component displaying the Missions feature package information with implementation steps and image.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>Missions</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nThe **Missions** feature package offers out-of-the-box functionality to create missions that players can complete to achieve rewards and progress in your experience.\n</Typography>\n...\n```\n\n----------------------------------------\n\nTITLE: Creating High Pose for Right Step Animation in Roblox\nDESCRIPTION: Instructions for positioning the character rig at frame 21 to create the High pose where the body lifts up on the right foot. Details specific angles and positions for all body parts during the highest point of the step.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/animation/create-an-animation.md#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Displaying Loading Errors for Model Meshes in HTML\nDESCRIPTION: This snippet provides a set of HTML table rows that display error messages related to loading model meshes and performing validation checks in Roblox. Each message indicates a specific failure and suggests checking the existence of the relevant asset. This is crucial for developers to troubleshoot issues with their 3D models.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/validation-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<tr>\n    <td>Failed to load model mesh `%s`. Make sure mesh exists and try again.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Failed to execute triangle count check for `%s`. Make sure mesh exists and try again.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Failed to load model mesh `%s`. Make sure the mesh exists and try again.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Failed to load vertex color map for model mesh `%s`. Make sure it exists and try again.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Failed to execute UV mismatch check for `%s`. Make sure UV map exists and try again.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Failed to execute overlapping mesh vertex check for `%s`. Make sure mesh exists and try again.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Failed to execute texture size check for `%s`. Make sure the textureId is valid and try again.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Failed to load texture for `%s`. Make sure the texture exists and try again.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Failed to execute validateUVSpace check on `%s`. Make sure the UV maps exists and try again.</td>\n    <td></td>\n  </tr>\n```\n\n----------------------------------------\n\nTITLE: Creating HumanoidDescription from User ID\nDESCRIPTION: Retrieves a HumanoidDescription from a specific user ID using the Players service.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal userId = 491243243\n\nlocal humanoidDescriptionFromUser = Players:GetHumanoidDescriptionFromUserId(userId)\n```\n\n----------------------------------------\n\nTITLE: Formatting Webhook Signature for Custom Endpoints\nDESCRIPTION: This CSV snippet represents the format of the 'roblox-signature' when a secret is configured for custom endpoints. It includes both the timestamp and signature values, formatted as a CSV string.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/webhook-notifications.md#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n\"roblox-signature\": \"t=<timestamp>,v1=<signature>\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Localized Badge Icon - REST API\nDESCRIPTION: This endpoint allows for the deletion of a specific localized badge icon identified by the badgeId and languageCode. The operation requires appropriate managing scope for badges.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE v1/badges/{badgeId}/icons/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wedge Part Properties in Roblox\nDESCRIPTION: Configuration values for wedge parts used in elevated ceiling sections, including Size, CFrame.Position, and CFrame.Orientation parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_21\n\nLANGUAGE: roblox\nCODE:\n```\n5, 5, 10\n-102.5, 22.5, 200\n0, 0, 180\n```\n\n----------------------------------------\n\nTITLE: Current Base Materials Texture Asset Mapping\nDESCRIPTION: Comprehensive table of asset IDs for various Roblox base materials including color, normal, metalness, and roughness textures. Covers materials like Asphalt, Brick, Concrete, Metal, and more.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/materials.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Material | ColorMap | Normal | Metalness | Roughness |\n|----------|----------|--------|-----------|----------|\n| Asphalt | 9930003046 | 9429449876 | - | 9429450346 |\n| Brick | 9920482813 | 9438453152 | - | 9438453413 |\n```\n\n----------------------------------------\n\nTITLE: Controlling Stat Order in Leaderboard - Roblox Lua\nDESCRIPTION: This snippet shows how to add an IsPrimary value to a stat, which forces that stat to appear first in the leaderboard. It illustrates the interaction of IsPrimary and Priority values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/leaderboards.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function leaderboardSetup(player)\n\tlocal leaderstats = Instance.new(\"Folder\")\n\tleaderstats.Name = \"leaderstats\"\n\tleaderstats.Parent = player\n\n\tlocal gold = Instance.new(\"IntValue\")\n\tgold.Name = \"Gold\"\n\tgold.Value = 0\n\tgold.Parent = leaderstats\n\n\tlocal isPrimary = Instance.new(\"BoolValue\")\n\tisPrimary.Name = \"IsPrimary\"\n\tisPrimary.Value = true\n\tisPrimary.Parent = gold\nend\n\nPlayers.PlayerAdded:Connect(leaderboardSetup)\n```\n\n----------------------------------------\n\nTITLE: Customizing Depth-of-Field Effect in Selfie Mode\nDESCRIPTION: This code shows how to create a custom DepthOfFieldEffect and apply it to the Selfie Mode module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\nlocal customDepthOfField = Instance.new(\"DepthOfFieldEffect\")\ncustomDepthOfField.NearIntensity = 0\ncustomDepthOfField.FarIntensity = 1\ncustomDepthOfField.FocusDistance = 5\ncustomDepthOfField.InFocusRadius = 5\n\nSelfieMode.configure({\n\tdepthOfFieldEffect = customDepthOfField\n})\n```\n\n----------------------------------------\n\nTITLE: Uploading Asset Using Roblox API and cURL\nDESCRIPTION: This Bash snippet demonstrates uploading an asset to the Roblox platform via POST request using cURL. It requires an authorization token in the header and asset information in the form data. Users need an appropriate user ID, asset type, and file content path for the upload to succeed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-assets.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://apis.roblox.com/assets/v1/assets' \\\n\n--header 'Authorization: Bearer <access_token>' \\\n\n--header 'Content-Type: application/json' \\\n\n--form 'request=\"{\n\n  \\\"assetType\\\": \\\"Decal\\\",\n\n  \\\"displayName\\\": \\\"DecalDemo123\\\",\n\n  \\\"description\\\": \\\"This is a description\\\",\n\n  \\\"creationContext\\\": {\n\n    \\\"creator\\\": {\n\n    \\\"userId\\\": \\\"<user_id>\\\"\n\n    }\n  }\n\n}\"' \\\n\n--form 'fileContent=@\"/filepath/p1.png\"'\n```\n\n----------------------------------------\n\nTITLE: Application Button using React\nDESCRIPTION: This snippet creates a button using React that links to the application form for the Creator Affiliate Pilot Program. The button is styled as a large, contained button and has a fixed width of 200 pixels. It requires importing the Button component from a material UI library.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/creator-affiliate.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Button href=\"https://survey.roblox.com/jfe/form/SV_0OQ5raEV6l54pa6\" size='large' variant='contained' style={{width:200}}>Apply</Button>\n```\n\n----------------------------------------\n\nTITLE: HTML Video Embed for Tutorial Content\nDESCRIPTION: YouTube video embed code for demonstrating caging best practices with necessary attributes for security and functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/caging-best-practices.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"800\" height=\"450\" src=\"https://www.youtube-nocookie.com/embed/QwZaA9Gc-WQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Lighting in Roblox\nDESCRIPTION: Adjusting Lighting service properties to create a realistic environmental lighting effect with bloom and color correction\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Configure Lighting Service\nlocal lighting = game:GetService(\"Lighting\")\nlighting.Ambient = Color3.fromRGB(133, 152, 176)\nlighting.Brightness = 2\nlighting.ColorShift_Top = Color3.fromRGB(207, 178, 72)\nlighting.Technology = Enum.Technology.Future\nlighting.ClockTime = 4.3\nlighting.GeographicLatitude = 199\nlighting.ExposureCompensation = -1\n\n-- Configure Bloom Effect\nlocal bloom = lighting:FindFirstChildOfClass(\"BloomEffect\")\nbloom.Intensity = 0.75\nbloom.Size = 80\nbloom.Threshold = 0.85\n```\n\n----------------------------------------\n\nTITLE: Applying Classic Clothing in Roblox Studio\nDESCRIPTION: This snippet demonstrates how to apply classic clothing items to a Roblox character in Studio. It covers the process of inserting clothing objects, selecting the appropriate properties, and applying clothing textures.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/test-classic-clothing.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.ShirtGraphic.Graphic|Graphic\nClass.Shirt.ShirtTemplate|ShirtTemplate\nClass.Pants.PantsTemplate|PantsTemplate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Invite Options for a Specific Friend - Lua\nDESCRIPTION: This code snippet illustrates how to create an invite options object aimed at a specific friend by using their user ID in Roblox. A custom prompt message is also provided to personalize the invitation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/invite-prompts.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal SocialService = game:GetService(\"SocialService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal receiverUserID = 505306092\n\n-- Construct invite options with friend's user ID and a custom prompt message\nlocal inviteOptions = Instance.new(\"ExperienceInviteOptions\")\ninviteOptions.InviteUser = receiverUserID\ninviteOptions.PromptMessage = \"Invite this friend to join the adventure!\"\n\n```\n\n----------------------------------------\n\nTITLE: Calculating First Month Mobile Subscription Revenue\nDESCRIPTION: Mathematical calculation showing the Robux earned from a $12.99 mobile subscription in the first month after the 30% platform fee\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/subscriptions.md#2025-04-21_snippet_5\n\nLANGUAGE: math\nCODE:\n```\n1299 * .7 = 909\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Gallery in React\nDESCRIPTION: This code snippet illustrates how to create a responsive image gallery using the GridContainer component to showcase generated texture examples for the Texture Generator.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/texture-generator.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<GridContainer numColumns=\"3\">\n  <figure>\n    <img src=\"../assets/studio/texture-generator/Generation-Rusted-Metal-Charred.jpg\" />\n    <figcaption>\"Rusted Charred Metal Castle\"</figcaption>\n  </figure>\n    <figure>\n    <img src=\"../assets/studio/texture-generator/Generation-Mossy-Stone.jpg\" />\n    <figcaption>\"Mossy Stone Fortress\"</figcaption>\n  </figure>\n    <figure>\n    <img src=\"../assets/studio/texture-generator/Generation-Snow-Covered-Ice.jpg\" />\n    <figcaption>\"Snow Covered Ice Sculpture\"</figcaption>\n  </figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Setting Universe Display Info Automatic Translation Settings - REST API\nDESCRIPTION: This endpoint modifies the automatic translation settings for universe display information based on gameId and languageCode.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH /v1/supported-languages/games/{gameId}/languages/{languageCode}/universe-display-info-automatic-translation-settings\n```\n\n----------------------------------------\n\nTITLE: Event Firing - LocalScript with Non-Replicated Instance\nDESCRIPTION: This local script shows that parts created in a LocalScript are not replicable to the server, resulting in 'nil' when fired through a remote event, demonstrating the client-server boundary limitations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\n-- Will be received as 'nil' because the server doesn't know about this part\nlocal clientPart = Instance.new(\"Part\")\nclientPart.Parent = Workspace\n\nremoteEvent:FireServer(clientPart)\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Content Layout in React JSX\nDESCRIPTION: This code renders a responsive grid layout that displays content items with videos, titles, descriptions, links, and buttons. It maps through collections of content items and applies styling for proper display and spacing. The component includes conditional rendering for different content types and appropriate key attributes for React list rendering.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/platform.md#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nstyle={{ width: '100%', aspectRatio: 16/9, height: 'auto' }}\nsrc={content.video}\ntitle=\"YouTube video player\"\nframeborder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nreferrerpolicy=\"strict-origin-when-cross-origin\"\nallowfullscreen\n></iframe>\n)}\n<h3>{content.title}</h3>\n<p>{content.description}</p>\n{content.links && content.links.map((link, linkIndex) => (\n  <a href={link.href} key={linkIndex}>\n    <Typography variant='buttonLarge'>{link.text}</Typography><br />\n  </a>\n))}\n{content.buttons && content.buttons.map((button, btnIndex) => (\n  <Button\n    key={btnIndex}\n    style={{ marginTop: 16, marginRight: 24 }}\n    variant=\"contained\"\n    color=\"secondary\"\n    size=\"large\"\n    href={button.href}\n  >\n    {button.text}\n  </Button>\n))}\n</div>\n</Grid>\n);\n})}\n</Grid>\n)}\n</Grid>\n))}\n```\n\n----------------------------------------\n\nTITLE: Referencing Roblox Classes in Lua\nDESCRIPTION: This snippet demonstrates how to reference Roblox classes in Lua code. It shows the syntax for Model, Accessory, and MeshPart classes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating-rigid/converting.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.Model\nClass.Accessory\nClass.MeshPart\n```\n\n----------------------------------------\n\nTITLE: Redeeming Code for Artist Backpack and Conjurer of Color Badge in Roblox\nDESCRIPTION: A redemption code to be entered in the Roblox Mansion of Wonders experience to obtain the Artist Backpack avatar item and Conjurer of Color badge. This code must be entered when interacting with the Freddie character in-game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-mansion-of-wonder/challenge-checkpoint.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFXArtist\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Category in Lua\nDESCRIPTION: The debug.setmemorycategory function allows developers to assign custom memory category names for memory allocations, helping with organization and tracking in the Memory Categories view.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/optimization/memory-usage.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\ndebug.setmemorycategory\n```\n\n----------------------------------------\n\nTITLE: Modifying Game Text Variables in Lua\nDESCRIPTION: This script segment contains the text variables that can be modified to personalize the game, including the game name, developer name, and level up message.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/personalize-the-game.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal GameSettings = {}\n\n-- ================================================================================\n-- Game Information\n-- These settings affect text that you see in game\n-- ================================================================================\n\nGameSettings.gameName = \"Move It Simulator\"\nGameSettings.developerName = \"RobloxUser\"\n\nGameSettings.levelUpMessage = \"Level Up!\"\n```\n\n----------------------------------------\n\nTITLE: Setting up ScreenGui Container in Roblox\nDESCRIPTION: Demonstrates the basic structure of creating a ScreenGui container in Roblox Studio's StarterGui with proper screen insets and padding configuration. This container serves as the base for the custom health meter UI.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/create-hud-meters.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\n-- Property settings for HUDContainer (ScreenGui)\nScreenInsets = Enum.ScreenInsets.DeviceSafeInsets\n\n-- UIPadding settings\nPaddingBottom = UDim.new(0, 16)\nPaddingLeft = UDim.new(0, 16)\nPaddingRight = UDim.new(0, 16)\nPaddingTop = UDim.new(0, 16)\n```\n\n----------------------------------------\n\nTITLE: Creating Low Pose for Right Step Animation in Roblox\nDESCRIPTION: Instructions for positioning the character rig at frame 15 to create the Low pose where the right foot supports the character's weight. Includes positioning for torso, legs, arms, and head with specific body part adjustments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/animation/create-an-animation.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Getting Localized Game Icons - REST API\nDESCRIPTION: Retrieves the icons associated with a localized game based on gameId. Requires bearer token for validation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nGET v1/game-icon/games/{gameId}\n```\n\n----------------------------------------\n\nTITLE: Displaying Roblox Model Hierarchy Example\nDESCRIPTION: This snippet shows how a SpringyFireball model would be represented in Roblox's Explorer window, illustrating the hierarchical structure of objects in Roblox compared to Unity's GameObjects and components.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/unity.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nModel\n|- ParticleEmitter\n|- MeshPart\n|- SpringConstraint\n|- ClickDetector\n|  |- Script\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Time in Roblox Animation Editor\nDESCRIPTION: Shows how to navigate to the 1:00 mark on the animation timeline by typing the timestamp directly into the current time box.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/looping-animations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`1:00`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating If-Then Statement Syntax in Luau\nDESCRIPTION: This snippet shows the basic syntax of an if-then statement in Luau, which is used in Roblox Studio for conditional logic.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/landing.md#2025-04-21_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nif condition then\n    -- code to execute if condition is true\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Damage Effect with ColorCorrection in Roblox Lua\nDESCRIPTION: Script that implements a custom health meter with damage visual effects using ColorCorrectionEffect. The code tracks health changes, displays a color-coded health bar, and creates a red screen tint effect when damage is taken. It includes gradient-based color transitions and smooth tweening animations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/create-hud-meters.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\nlocal TweenService = game:GetService(\"TweenService\")\n\n-- Reference to local player, character, and humanoid\nlocal player = Players.LocalPlayer\nlocal character = player.Character\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\n-- Tween properties\nlocal tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)\n\n-- Variable to store/cache character health\nlocal cachedHealth = humanoid.Health / humanoid.MaxHealth\n\n-- Get (or create new) color correction effect inside player camera\nlocal colorCorrection = Workspace.CurrentCamera:FindFirstChildWhichIsA(\"ColorCorrectionEffect\") or Instance.new(\"ColorCorrectionEffect\", Workspace.CurrentCamera)\ncolorCorrection.Name = \"DamageColorEffect\"\n\n-- Reference to meter bar inner frame\nlocal playerGui = player:WaitForChild(\"PlayerGui\")\nlocal meterBarInner = playerGui.HUDContainer.MeterBar.InnerFill\n\n-- Gradient sequence colors (red, orange, yellow, lime, green)\nlocal gradient = {\n\tColor3.fromRGB(225, 50, 0),\n\tColor3.fromRGB(255, 100, 0),\n\tColor3.fromRGB(255, 200, 0),\n\tColor3.fromRGB(150, 225, 0),\n\tColor3.fromRGB(0, 225, 50)\n}\n\n-- Function to get color in gradient sequence from fractional point\nlocal function getColorFromSequence(fraction: number): Color3\n\t-- Each color in gradient defines the beginning and/or end of a section\n\tlocal numSections = #gradient - 1\n\n\t-- Each section represents a portion of 1\n\tlocal sectionSize = 1 / numSections\n\n\t-- Determine which section the requested fraction falls into\n\tlocal sectionStartIndex = 1 + math.clamp(fraction, 0, 1) // sectionSize\n\n\t-- Get the colors at the start and end of the section\n\tlocal sectionColorStart = gradient[sectionStartIndex]\n\tlocal sectionColorEnd = gradient[sectionStartIndex + 1] or sectionColorStart\n\n\t-- Normalize fraction to be a number from 0 to 1 within the section\n\tlocal fractionOfSection = math.clamp(fraction, 0, 1) % sectionSize / sectionSize\n\n\t-- Lerp between beginning and end based on the normalized fraction\n\treturn sectionColorStart:Lerp(sectionColorEnd, fractionOfSection)\nend\n\nlocal function onHealthChanged()\n\t-- Calculate new health as percentage of max\n\tlocal healthFraction = math.max(0, humanoid.Health / humanoid.MaxHealth)\n\n\t-- Tween the bar to new size/color targets\n\tlocal tweenGoal = {\n\t\tSize = UDim2.new(healthFraction, 0, 1, 0),\n\t\tBackgroundColor3 = getColorFromSequence(healthFraction)\n\t}\n\tlocal meterBarTween = TweenService:Create(meterBarInner, tweenInfo, tweenGoal)\n\tmeterBarTween:Play()\n\n\t-- Show damage effect if new health is lower than cached health\n\tif healthFraction < cachedHealth then\n\t\t-- Cache new health value\n\t\tcachedHealth = healthFraction\n\n\t\t-- Set color correction to red as the initial tint before tweening\n\t\tcolorCorrection.TintColor = Color3.fromRGB(255, 25, 25)\n\t\tcolorCorrection.Saturation = 2.5\n\n\t\t-- Tween the tint back to white (neutral and no tint change from normal)\n\t\tlocal colorCorrectionTweenGoal = {\n\t\t\tTintColor = Color3.fromRGB(255, 255, 255),\n\t\t\tSaturation = 0\n\t\t}\n\t\tlocal colorCorrectionTween = TweenService:Create(colorCorrection, tweenInfo, colorCorrectionTweenGoal)\n\t\tcolorCorrectionTween:Play()\n\tend\nend\n\n-- Listen for changes to humanoid health\nhumanoid.HealthChanged:Connect(onHealthChanged)\n\n-- Initially set (or reset) bar size/color to current health\nonHealthChanged()\n```\n\n----------------------------------------\n\nTITLE: Initializing Creator Hub Sections in React\nDESCRIPTION: Defines the main sections and content structure for the Roblox Creator Hub using a React component with dynamic rendering of sections, buttons, and content blocks\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-hub.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const sections = [\n  {\n    description: \"You often use Creator Hub and Studio together when you're creating, like managin your creations, tracking analytics, requesting monetization payouts, and a host of other creator actions, all on the web.\",\n    buttons: [\n      {\n        text: \"Go to dashboard\", href: \"https://create.roblox.com/dashboard/creations\"\n      }\n    ],\n    content: [...]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Avatar Setup Workflow - Import and Setup Steps\nDESCRIPTION: A comprehensive guide showing the steps to import a model and use the Avatar Setup tool, including prerequisites and requirements for auto-setup features.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar-setup/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In Studio, navigate to the **Avatar tab** and select **3D Importer**.\n2. In the file browser, select your model object.\n3. When your model object loads in the 3D Import preview, disable the **Upload To Roblox** option.\n   1. This prevents the asset immediately saving to your Toolbox, preventing unwanted copies of similar assets.\n   2. To save time in the future, click the **...** dropdown in the top-right of the 3D Importer window and **Save as New** to create an import profile for this workflow.\n4. Verify the preview and any warnings or errors in your model object.\n5. Select **Import** to add the `Class.Model` instance into your workspace.\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts for Blender UV Unwrapping\nDESCRIPTION: Key keyboard shortcuts and menu commands used during the UV unwrapping process in Blender, including selection and unwrap commands.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating/unwrapping.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAlt + Click - Select edge loop\nA - Select all vertices\nUV > Unwrap - Unwrap selected mesh\n```\n\n----------------------------------------\n\nTITLE: Setting Up Blaster Buttons in Roblox Lua\nDESCRIPTION: This script generates blaster buttons based on Configuration instances, sets up navigation and select buttons, and handles UI updates when a blaster is selected. It uses ReplicatedStorage to access shared resources and connects to various GUI elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal setupSelectButton = require(script.setupSelectButton)\nlocal setupNavButtons = require(script.setupNavButtons)\nlocal updateSelectedIndex = require(script.updateSelectedIndex)\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\n\nlocal laserBlastersFolder = ReplicatedStorage.Instances.LaserBlastersFolder\nlocal blasterButtonPrefab = ReplicatedStorage.Instances.Guis.BlasterButtonPrefab\n\nlocal function setupBlasterButtons(gui: ScreenGui)\n\tlocal frame = gui.Frame.SelectionFrame.Frame\n\tlocal blasterButtonContainer = frame.Container\n\tlocal blasterButtons = {}\n\n\tlocal function createBlasterButton(blasterConfiguration: Configuration)\n\t\tlocal index = blasterConfiguration:GetAttribute(\"iconLayoutOrder\")\n\n\t\tlocal blasterButton = blasterButtonPrefab:Clone()\n\t\t-- Name the blaster button the same as the blaster, so we can read the name\n\t\t-- of the button later to get the associated blaster type\n\t\tblasterButton.Name = blasterConfiguration.Name\n\t\tblasterButton.ImageLabel.Image = blasterConfiguration:GetAttribute(\"iconId\")\n\t\tblasterButton.LayoutOrder = index\n\t\tblasterButton.Parent = blasterButtonContainer\n\n\t\tblasterButton.Activated:Connect(function()\n\t\t\tgui:SetAttribute(GuiAttribute.selectedIndex, index)\n\t\tend)\n\n\t\ttable.insert(blasterButtons, index, blasterButton)\n\tend\n\n\tfor _, blaster in laserBlastersFolder:GetChildren() do\n\t\tcreateBlasterButton(blaster)\n\tend\n\n\t-- Setup other buttons that depend on the generated blasterButtons\n\tsetupSelectButton(gui, blasterButtons)\n\tsetupNavButtons(gui, blasterButtons)\n\n\t-- Change blaster buttons appearance when they are selected or deselected\n\tgui:GetAttributeChangedSignal(GuiAttribute.selectedIndex):Connect(function()\n\t\tlocal newIndex = gui:GetAttribute(GuiAttribute.selectedIndex)\n\t\tupdateSelectedIndex(newIndex, blasterButtons)\n\tend)\nend\n\nreturn setupBlasterButtons\n```\n\n----------------------------------------\n\nTITLE: Example Schema for Right to Erasure Request in JSON\nDESCRIPTION: This JSON snippet provides an example of the payload schema for the 'Right To Erasure Request' event. It includes fields such as 'NotificationId', 'EventType', 'EventTime', and 'EventPayload', which contains user-specific details for the erasure request.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/webhook-notifications.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"NotificationId\": \"string\",\n   \"EventType\": \"RightToErasureRequest\",\n   \"EventTime\": \"2023-12-30T16:24:24.2118874Z\",\n   \"EventPayload\": {\n      \"UserId\": 1, // Type: Long\n      \"GameIds\": [ // Type: An array of Longs\n         1234, 2345\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Marketplace API Response Example\nDESCRIPTION: This JSON object represents an example of the response format from the Marketplace API.  It includes fields like item ID, type, name, description, creator details, price, and other relevant information.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/assets/api.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"keyword\": null,\n\t\"previousPageCursor\": null,\n\t\"nextPageCursor\": \"2_1_c541d05046b5c1c78a5d386b5e302243\",\n\t\"data\": [\n    {\n        \"id\":527373900,\n        \"itemType\":\n        \"Asset\",\n        \"assetType\":42,\n        \"name\":\"Restless Souls Bandana\",\n        \"description\":\"This bandana won't help you blend in with ghosts, but at least you'll be stylish.\",\n        \"productId\":41270974,\n        \"genres\":[\n          \"Scary\",\n          \"Adventure\"\n          ],\n        \"itemStatus\":[],\n        \"itemRestrictions\":[],\n        \"creatorType\":\"User\",\n        \"creatorTargetId\":1,\n        \"creatorName\":\"Roblox\",\n        \"price\":300,\n        \"favoriteCount\":15943,\n        \"offSaleDeadline\":null\n        }\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Part Scale Types\nDESCRIPTION: Roblox property values for configuring avatar part scaling in accessories, used to set the AvatarPartScaleType property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/accessory-fitting-tool.md#2025-04-21_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\nAvatarPartScaleType.ProportionsSlender\nAvatarPartScaleType.ProportionsNormal\n```\n\n----------------------------------------\n\nTITLE: Using AvatarPartScaleType Values in Roblox\nDESCRIPTION: Reference for the string values used in AvatarPartScaleType StringValue objects to identify different body scales in Roblox. These values are used within each avatar character part and associated accessories to define their proportions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/body-scale.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClassic\n```\n\nLANGUAGE: lua\nCODE:\n```\nProportionsNormal\n```\n\nLANGUAGE: lua\nCODE:\n```\nProportionsSlender\n```\n\n----------------------------------------\n\nTITLE: Changing Variable Values in Luau\nDESCRIPTION: Shows how to change the values of variables by reassigning them with new values. This demonstrates the dynamic nature of variable assignment in Luau.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/variables.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal x, y = 10, 20\nprint(x) -- 10\nprint(y) -- 20\n\nlocal x = 1000\nlocal y = 2000\nprint(x) -- 1000\nprint(y) -- 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Skybox Textures in Roblox\nDESCRIPTION: Sets up a custom skybox using six different texture IDs to create a warm atmosphere that enhances the indoor environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#2025-04-21_snippet_5\n\nLANGUAGE: Roblox\nCODE:\n```\nSkyboxBk = \"rbxassetid://162001887\"\nSkyboxDn = \"rbxassetid://161998893\"\nSkyboxFt = \"rbxassetid://162001897\"\nSkyboxLf = \"rbxassetid://162001904\"\nSkyboxRt = \"rbxassetid://162001919\"\nSkyboxUp = \"rbxassetid://162001926\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Container in React\nDESCRIPTION: Creates a responsive container for embedding a YouTube video using React Grid components. The iframe is set to maintain a 16:9 aspect ratio with responsive sizing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe width=\"880\" height=\"495\" src=\"https://www.youtube-nocookie.com/embed/zi0hIuPDyWc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen style={{position: \"absolute\", top: 0, left: 0, width: \"95%\", height: \"95%\"}}></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: UV Editing in Blender for Texture Mapping\nDESCRIPTION: The process of unwrapping 3D object faces and mapping them onto a 2D image texture to apply visual characteristics efficiently across multiple objects\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Unwrap object's faces in UV Editor\n2. Create UV map and UV islands\n3. Adjust island position and orientation\n4. Map texture to minimize distortion\n```\n\n----------------------------------------\n\nTITLE: Referencing Roblox Classes\nDESCRIPTION: Code references to Roblox class types used within the Accessory Fitting Tool, including Class.Accessory, Class.Model, Class.MeshPart, and Class.StringValue.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/accessory-fitting-tool.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.Accessory\nClass.Model\nClass.MeshPart\nClass.StringValue\n```\n\n----------------------------------------\n\nTITLE: Tweening Image Transparency in Roblox Lua\nDESCRIPTION: Shows how to modify an ImageLabel's transparency using TweenService, creating a fade effect\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal object = ScreenGui:WaitForChild(\"ImageLabel\")\n\nlocal targetTransparency = 0.8\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(object, tweenInfo, {ImageTransparency = targetTransparency})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Creating Card for Today's Picks on Home\nDESCRIPTION: This snippet defines a Material-UI Grid component with a Card showcasing 'Today's Picks on Home'. It includes a status Chip showing it is open, a description, and a Button for learning more about the picks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Grid item container Medium={12} Large={4} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n  <Grid item container wrap=\"nowrap\" direction=\"column\">\n    <Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n    <h4>Today's Picks on Home</h4>\n    <figure>\n        <Chip\n        color=\"success\"\n        label=\"Status: Open\"\n        size=\"medium\"\n        variant=\"filled\"/>\n    </figure>\n    <Typography variant='body1'>Daily curation of exciting updates, new and notable experiences, events, and cultural events to provide users fresh content</Typography>\n    </CardContent>\n    <CardActions>\n        <Button href=\"/creator-programs/todays-picks-home\" variant=\"contained\" color=\"secondary\" size='large'>Learn More</Button>\n    </CardActions>\n    </Card>\n  </Grid>\n  </Grid>\n```\n\n----------------------------------------\n\nTITLE: Getting Automatic Translation Status - REST API\nDESCRIPTION: Retrieves the current status of automatic translation for supported languages of the specified gameId. Access requires valid authentication.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /v1/supported-languages/games/{gameId}/automatic-translation-status\n```\n\n----------------------------------------\n\nTITLE: Block Comments in Luau\nDESCRIPTION: Illustrates the use of block comments in Luau, showing multi-line comment syntax and documentation style\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/index.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n--[[\n    Shuts off the cosmic moon ray immediately.\n\n    Should only be called within 15 minutes of midnight Mountain Standard\n    Time to avoid damage to the cosmic moon ray.\n]]\nlocal function stopCosmicMoonRay()\n\t-- add this later, it might prove important\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Future Lighting Technology in Roblox Studio\nDESCRIPTION: Instructions for enabling Future lighting technology in the Lighting service. This configuration enables pixel perfect light emission, detailed shadows, and specular highlights for both indoor and outdoor spaces.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nLighting.Technology = Enum.Technology.Future\n```\n\n----------------------------------------\n\nTITLE: Creating Card for Roblox Research Panel\nDESCRIPTION: This snippet creates a Material-UI Grid component housing a Card that presents details about the Roblox Research Panel. It includes a title, a status Chip indicating that the panel is open, a descriptive Typography element, and a Button linking to more information.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Grid item container Medium={12} Large={4} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n  <Grid item container wrap=\"nowrap\" direction=\"column\">\n    <Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n    <h4>Roblox Research Panel</h4>\n        <figure>\n    <Chip\n        color=\"success\"\n        label=\"Status: Open\"\n        size=\"medium\"\n        variant=\"filled\"/>\n    </figure>\n    <Typography variant='body1'>An exclusive program for people to share their opinions to help improve Roblox</Typography>\n    </CardContent>\n    <CardActions>\n        <Button href=\"/creator-programs/research-panel\" variant=\"contained\" color=\"secondary\" size='large'>Learn More</Button>\n    </CardActions>\n    </Card>\n  </Grid>\n  </Grid>\n```\n\n----------------------------------------\n\nTITLE: Displaying Memory Tools - JSX/React\nDESCRIPTION: This JSX snippet is used to render the OpeningSteps component within React, passing in props. This allows the component to utilize properties passed down for its operation, likely integrating it into a larger component tree.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/optimization/memory-usage.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<OpeningSteps components={props.components}/>\n```\n\n----------------------------------------\n\nTITLE: Alert Component Examples in Roblox Documentation\nDESCRIPTION: Examples showing correct and incorrect implementations of notification alerts using Roblox's Alert components. Demonstrates proper personalization and action-oriented messaging patterns.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/experience-notifications/guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Alert severity=\"success\">\n<Typography variant=\"subtitle2\">You're 2 races away from completing the weekly challenge!</Typography>\n</Alert>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Alert severity=\"error\">\n<Typography variant=\"subtitle2\">A new line of race cars just dropped in Race Car Craze. Check them out!</Typography>\n</Alert>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Alert severity=\"success\">\n<Typography variant=\"subtitle2\">Allie @LaterSk8er1 just beat your record on the Tokyo Tour track! Time for revenge?</Typography>\n</Alert>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Alert severity=\"error\">\n<Typography variant=\"subtitle2\">It's been a few days since you participated in a race with Allie @LaterSk8er1.</Typography>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Funnel Event Validation in Roblox\nDESCRIPTION: Implements server-side validation for funnel events to prevent exploiters from sending invalid data, using a RemoteEvent to communicate between client and server\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/funnel-events.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal onboardingEvent = ReplicatedStorage:WaitForChild(\"OnboardingEvent\")\n\nlocal function fireOnboardingEvent(step: number)\n\tonboardingEvent:FireServer({ step = step })\nend\n\nfireOnboardingEvent(1)\nfireOnboardingEvent(2)\nfireOnboardingEvent(10) -- invalid step\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal onboardingEvent = ReplicatedStorage:WaitForChild(\"OnboardingEvent\")\n\nlocal maxStep = 3\n\nlocal function onPlayerEventFired(player: Player, args: { step: number })\n\tlocal step = args.step\n\tif(step > maxStep) then\n\t\twarn(`Invalid tutorial step {step} received from client.`)\n\t\treturn\n\tend\n\n\tprint(`{player.Name} completed step: {step}`)\n\tAnalyticsService:LogOnboardingFunnelStepEvent(player, step)\nend\n\nonboardingEvent.OnServerEvent:Connect(onPlayerEventFired)\n```\n\n----------------------------------------\n\nTITLE: Server-Side Release Handling\nDESCRIPTION: Processes object release, removing constraints, restoring collisions, and clearing player grab data\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nfunction Release(player)\n    -- Delete attachments and constraints\n    -- Restore object collisions\n    -- Handle Restorables\n    -- Clear player grab information\nend\n```\n\n----------------------------------------\n\nTITLE: Using Module Scripts in Other Lua Scripts\nDESCRIPTION: Demonstrates how to load and use a module script in another Lua script using the require() function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/intro-to-module-scripts.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal MyModule = require(ServerStorage.ModuleScript)\n\nMyModule.myFunction()\n```\n\n----------------------------------------\n\nTITLE: Checking Operation Status with cURL\nDESCRIPTION: This cURL command shows how to check the status of a long-running operation in the Roblox Cloud API. It makes a GET request to the operation endpoint using the operation ID.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/instance.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include --location --request GET \"https://apis.roblox.com/cloud/v2/universes/<universeId>/places/<placeId>/instances/<instanceId>/operations/<operationId>\" --header \"x-api-key:<api key>\"\n```\n\n----------------------------------------\n\nTITLE: Maya Export Settings for Layered Clothing\nDESCRIPTION: Configuration steps for exporting layered clothing from Maya as FBX, including geometry settings, media embedding, and axis conversion settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/clothing-export-settings.md#2025-04-21_snippet_1\n\nLANGUAGE: settings\nCODE:\n```\nGeometry:\n  Smooth Mesh: Enabled\n  Referenced Asset Content: Enabled\nEmbed Media: Enabled (for PNG textures)\nAdvanced Options:\n  Units: Automatic\n  Axis Conversion > Up Axis: Y\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Layout for Tutorial Cards in HTML/JSX\nDESCRIPTION: This code snippet creates a grid layout to display tutorial cards for creating experiences, avatars, and avatar items. It uses Material-UI Grid components and custom styling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/index.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<Grid container spacing={2} style={{marginBottom: 24}}>\n <Grid item container Medium={12} Large={6} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n <Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n   <div class=\"container\"\n   style={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n   <img src=\"../assets/landing/get-started/first-experience.png\" style={{position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\"}} />\n   </div>\n   <Typography variant='h4'>Create your first experience</Typography>\n   <Typography variant='body1'>Learn about important concepts for developing on Roblox by recreating an experience that launches projectiles at floating platforms.</Typography>\n   <div style={{marginTop:16}}>\n     <a underline=\"none\" href=\"./first-experience/index.md\">\n     <Button variant=\"contained\" color=\"secondary\" size='large'\n     style={{marginRight:16, alignSelf: 'flex-start'}}>Get started</Button>\n     </a>\n   </div>\n </Grid>\n </Grid>\n\n <!-- Additional grid items for avatars and avatar items -->\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Object Property Control\nDESCRIPTION: Code showing how to use parameters to dynamically control object properties through events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nparams = {\n\tisEnabled = false\n},\ninterpolants = {\n\t{\n            objectName = \"FocuserGlow\",\n            property = \"Enabled\",\n            keys = {\n                   {valueParam = \"isEnabled\"}\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Selecting Multiple Scripts in Roblox Studio\nDESCRIPTION: Demonstrates how to select multiple scripts in the Drafts window of Roblox Studio using the Shift key and left-click.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/collaboration.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>Shift</kbd>\n```\n\n----------------------------------------\n\nTITLE: Implementing MatchManager Module in Lua for Roblox Game Management\nDESCRIPTION: This module handles match preparation and timing for a Roblox game. It uses several dependencies including PlayerManager, GameSettings, and Timer modules. The script manages starting matches, handling timers, and coordinating player movement to match areas through events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/timers-and-events.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal MatchManager = {}\n\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\n\n-- Module Scripts\nlocal moduleScripts = ServerStorage:WaitForChild(\"ModuleScripts\")\nlocal playerManager = require(moduleScripts:WaitForChild(\"PlayerManager\"))\nlocal gameSettings = require(moduleScripts:WaitForChild(\"GameSettings\"))\nlocal timer = require(moduleScripts:WaitForChild(\"Timer\"))\n\n-- Events\nlocal events = ServerStorage:WaitForChild(\"Events\")\nlocal matchStart = events:WaitForChild(\"MatchStart\")\nlocal matchEnd = events:WaitForChild(\"MatchEnd\")\n\n-- Creates a new timer object to be used to keep track of match time.\nlocal myTimer = timer.new()\n\n-- Local Functions\nlocal function timeUp()\n\tprint(\"Time is up!\")\nend\n\nlocal function startTimer()\n\tprint(\"Timer started\")\n\tmyTimer:start(gameSettings.matchDuration)\n\tmyTimer.finished:Connect(timeUp)\nend\n\n-- Module Functions\nfunction MatchManager.prepareGame()\n\tplayerManager.sendPlayersToMatch()\n\tmatchStart:Fire()\nend\n\nmatchStart.Event:Connect(startTimer)\n\nreturn MatchManager\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Layout with Typography and Images - JSX/CSS\nDESCRIPTION: React Grid component layout with responsive sizing, images, typography elements and navigation buttons. Uses Material-UI components for styling and responsiveness across different screen sizes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/what-is-roblox.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container spacing={2} style={{marginBottom: 24}}>\n  <Grid item container Medium={12} Large={6} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n    <Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n      <div class=\"container\" style={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n        <img src=\"/assets/studio/general/Studio-Splash.jpg\" style={{position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\"}} />\n      </div>\n      <Typography variant='h4'>Creator Hub</Typography>\n      <Typography variant='body1'>Join a thriving community of creators and start your creation journey.</Typography>\n      <div style={{marginTop:16}}>\n        <a underline=\"none\" href=\"https://create.roblox.com/\">\n          <Button variant=\"contained\" color=\"secondary\" size='large' style={{marginRight:16, alignSelf: 'flex-start'}}>Learn More</Button>\n        </a>\n      </div>\n    </Grid>\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Modifying Object Properties\nDESCRIPTION: Shows how to modify properties of a specific part within a model using dot notation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/attributes.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal chair = ReplicatedStorage:WaitForChild(\"Chair\")\n\nchair.LeftArmRest.Size = Vector3.new(10, 1, 10)\n```\n\n----------------------------------------\n\nTITLE: Copying Code to Redeem Item in Roblox\nDESCRIPTION: This snippet provides the code required to redeem an item in Roblox after completing a challenge. The user is instructed to copy the code and use it in-game to receive their rewards.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/challenge-checkpoint-3.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"GetMoving\"\n```\n\n----------------------------------------\n\nTITLE: Card Layout for User Interface Design Curriculum - React (JavaScript)\nDESCRIPTION: This snippet creates a card layout for user interface design curriculum, illustrating skills needed to design UI for Roblox games.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/curriculum-overview.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>User interface design</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nLearn the design skills you need to implement UI that informs players of the laser tag gameplay.\n</Typography>\n<>\n<Grid\n    alignItems=\"stretch\"\n    container\n    direction=\"row\">\n<Grid item Large={6} XSmall={12} direction=\"column\">\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe src=\"https://www.youtube-nocookie.com/embed/eqW9SINYeWg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen  style={{position: \"absolute\", top: 0, left: 0, width: \"90%\", height: \"90%\"}}></iframe>\n</div>\n</Grid>\n<Grid item Large={6} XSmall={12} direction=\"column\">\n<>\n<Stepper activeStep={3} orientation=\"vertical\">\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Plan an art style that drives all design decisions for your UI elements.\">\n<h5 style={{marginTop: 36}}>Plan</h5>\n</StepLabel>\n</Step>\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Wireframe the structure and flow of the information you want to communicate to your players.\">\n<h5 style={{marginTop: 36}}>Wireframe</h5>\n</StepLabel>\n</Step>\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Implement your UI layouts in Studio using both built-in and custom UI elements.\" >\n<h5 style={{marginTop: 36}}>Implement</h5>\n</StepLabel>\n</Step>\n</Stepper>\n</>\n</Grid>\n</Grid>\n</>\n<a href=\"../curriculums/user-interface-design/index.md\">\n  <Button\n    variant=\"contained\"\n    size=\"large\">\n  Start creating\n  </Button>\n</a>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: ContextActionService Bind Action\nDESCRIPTION: This snippet binds an action to gamepad and keyboard inputs using ContextActionService. It defines an action that opens a spell book.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal function openSpellBook(actionName, inputState, inputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\t-- Open spell book\n\tend\nend\n\nContextActionService:BindAction(\"OpenSpellBook\", openSpellBook, false, Enum.KeyCode.ButtonR2, Enum.KeyCode.B)\n```\n\n----------------------------------------\n\nTITLE: Importing Testing Components in JavaScript\nDESCRIPTION: This JavaScript code snippet imports various components related to testing and emulation for Roblox Studio's Test tab. These components include playtest options, device and controller emulators, and a pause/resume physics utility. Each import corresponds to a Markdown file that defines the component logic.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/test-tab.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PlaytestOptions from '../includes/studio/testing-modes.md'\nimport DeviceEmulator from '../includes/studio/device-emulator.md'\nimport ControllerEmulator from '../includes/studio/controller-emulator.md'\nimport PauseResumePhysics from '../includes/studio/pause-resume-physics.md'\nimport BetaAlert from '../includes/beta-features/beta-alert.md'\n```\n\n----------------------------------------\n\nTITLE: Constant Value Formula for Player Numerical Signal\nDESCRIPTION: Calculates a score based on how close the sum of the server's player attributes and the joining player's attribute is to a constant value. The score decreases as the difference increases beyond the max_relevant_difference.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal diff = math.abs(server_sum_{attribute_name} + joining_player_{attribute_name} - constant_value)\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\nreturn score\n```\n\n----------------------------------------\n\nTITLE: Wall Component Color and Material Configuration\nDESCRIPTION: Setting custom color and material variant for wall components to create a specific visual aesthetic\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n1. Set **Color** to `255, 170, 255`\n2. Set **MaterialVariant** to **MetalPanels**\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Table Structure\nDESCRIPTION: This HTML snippet demonstrates the creation of a simple table structure, organizing data into a matrix of rows and columns. It uses standard HTML table tags such as <table>, <tbody>, <tr>, and <td> to create a 3x3 grid of labels. The snippet mimics the row/column pattern that can be translated into Roblox's UI grid layout functionalities.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/grid-table-layouts.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n\t<tbody>\n\t\t<tr> <!-- Row1 -->\n\t\t\t<td>Label 1</td> <!-- TextLabel1 -->\n\t\t\t<td>Label 2</td> <!-- TextLabel2 -->\n\t\t\t<td>Label 3</td> <!-- TextLabel3 -->\n\t\t</tr>\n\t\t<tr> <!-- Row2 -->\n\t\t\t<td>Label 4</td> <!-- TextLabel4 -->\n\t\t\t<td>Label 5</td> <!-- TextLabel5 -->\n\t\t\t<td>Label 6</td> <!-- TextLabel6 -->\n\t\t</tr>\n\t\t<tr> <!-- Row3 -->\n\t\t\t<td>Label 7</td> <!-- TextLabel7 -->\n\t\t\t<td>Label 8</td> <!-- TextLabel8 -->\n\t\t\t<td>Label 9</td> <!-- TextLabel9 -->\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Avatar Setup Process - Setup and Testing Steps\nDESCRIPTION: Detailed steps for running the Avatar Setup process and testing the resulting avatar model, including handling validation errors and scaling issues.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar-setup/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select the model in the workspace.\n   1. If you want to select only specific meshes of your model, navigate to the Explorer, expand the `Class.Model` object, and hold shift and click on the individual mesh objects.\n2. With the Model selected, navigate to the **Avatar tab** and select **Avatar Setup**.\n3. In the Avatar Setup panel, click the blue **Set Up Avatar** button.\n4. Once complete, a `Class.Model` of your avatar populates in your workspace. Review any warnings or errors before using any testing or editing tools.\n```\n\n----------------------------------------\n\nTITLE: Configuring Storm Behavior Options in Lua\nDESCRIPTION: This code snippet demonstrates how to configure various aspects of the storm's behavior, including its initial radius, start time, debug time scale, number of stages, and the properties of the first stage. Each stage can be customized with transition length, wait time, damage, movement scale, and shrinkage factor.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/the-storm.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nstorm = {\n\tradius = 6000,\n\ttime_before_start = 120,\n\tdebug_time_scale = 1,\n\tnumber_of_stages = 10,\n\n\t-- stage 0 (show starting circle with no transition)\n\t{ transition_length = 0,\n\t\twait_length = 150,\n\t\tdamage = 1,\n\t\tmove_scale = 0,\n\t\tshrinkage_factor = 0 },\n```\n\n----------------------------------------\n\nTITLE: Syncing Team Points in Roblox Lua\nDESCRIPTION: This code snippet is responsible for syncing the team points between the GUI and the actual team attributes. It listens for changes in team points.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/create-teams.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function getTeamFromTeamColor(teamColor: Color3): Team?\\n\\tfor _, team in Teams:GetTeams() do\\n\\t\\tif team.TeamColor == teamColor then\\n\\t\\t\\treturn team\\n\\t\\tend\\n\\tend\\n\\n\\treturn nil\\nend\\n\\nlocal function startSyncingTeamPoints(gui: ScreenGui)\\n\\tfor _, teamPointCounter in gui.Objective.TeamPointCounter:GetChildren() do\\n\\t\\tif not teamPointCounter:IsA(\"GuiObject\") then\\n\\t\\t\\tcontinue\\n\\t\\tend\\n\\n\\t\\tlocal iconTeamColor = teamPointCounter:GetAttribute(GuiAttribute.teamColor)\\n\\n\\t\\tlocal team = getTeamFromTeamColor(iconTeamColor)\\n\\t\\tif not team then\\n\\t\\t\\twarn(`No team found matching the color {iconTeamColor} to sync team points on {teamPointCounter}`)\\n\\t\\t\\tcontinue\\n\\t\\tend\\n\\n\\t\\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\\n\\n\\t\\tteam:GetAttributeChangedSignal(GuiAttribute.teamPoints):Connect(function()\\n\\t\\t\\tteamPointCounter.TextLabel.Text = team:GetAttribute(GuiAttribute.teamPoints)\\n\\t\\tend)\\n\\tend\\nend\n```\n\n----------------------------------------\n\nTITLE: Query Specific Gamepad Connection\nDESCRIPTION: This snippet queries if a specific gamepad is connected using UserInputService.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/gamepad.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\n\nif UserInputService:GetGamepadConnected(Enum.UserInputType.Gamepad1) then\n\tprint(\"Gamepad1 is connected\")\nelif UserInputService:GetGamepadConnected(Enum.UserInputType.Gamepad2) then\n\tprint(\"Gamepad2 is connected\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Skybox Properties in Roblox\nDESCRIPTION: Properties used to set up the six faces of a skybox in Roblox, including back, down, front, left, right, and up faces. Each property requires a texture assignment to create the complete skybox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/skybox.md#2025-04-21_snippet_0\n\nLANGUAGE: roblox\nCODE:\n```\nSkyboxBk -- The back square of the skybox\nSkyboxDn -- The down square of the skybox\nSkyboxFt -- The front square of the skybox\nSkyboxLf -- The left square of the skybox\nSkyboxRt -- The right square of the skybox\nSkyboxUp -- The up square of the skybox\n```\n\n----------------------------------------\n\nTITLE: Example Good Report Format in Markdown\nDESCRIPTION: Demonstrates a well-written report with specific details about the incident.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/intro-to-digital-safety.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"Snarly805 is messaging people about giving out free robux if they go to this website.\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Layout with Buttons in Markdown/HTML\nDESCRIPTION: This snippet shows how to create a grid layout using custom Grid components and Button elements to display educational resources.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/resources-landing.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<Grid container spacing={4}>\n\n<Grid item XSmall={4} XLarge={4}>\n<h4>Classroom Best Practices</h4>\nGeneralized tips for running any Roblox classroom.\n<a href=\"../../education/resources/classroom-best-practices.md\">\n<Button variant=\"text\">View</Button>\n</a>\n</Grid>\n\n<Grid item XSmall={4} XLarge={4}>\n<h4>Frequently Asked Questions</h4>\nHardware requirements, recommended ages, and more.\n<a href=\"../../education/resources/frequently-asked-questions-education.md\">\n<Button variant=\"text\">View</Button>\n</a>\n</Grid>\n\n<Grid item XSmall={4} XLarge={4}>\n<h4>Roblox Classroom Kit</h4>\nA .ZIP file with handouts and guides for setting up.\n<a href=\"../../assets/education/handouts/Roblox_Classroom_Kit.zip\">\n<Button variant=\"text\">View</Button>\n</a>\n</Grid>\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting ColorShift_Bottom in Roblox Lighting\nDESCRIPTION: Sets the ColorShift_Bottom property of the Lighting service to adjust the hue that reflects from surfaces facing away from the sun or moon.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.ColorShift_Bottom = Color3.new(255/255, 0/255, 220/255)\n```\n\n----------------------------------------\n\nTITLE: Exporting Roblox Statistics and Section Data in JavaScript\nDESCRIPTION: This code exports constant variables containing Roblox statistics and structured section data for the getting started guide. It includes daily active users, creator earnings, and detailed steps for getting started on the platform.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const statsByline = \"* Figures are as of Q4 2024\";\n\nexport const scaleStats = [\n  { header: \"85.3M\", description: \"Daily active users\" },\n  { header: \"18.9M\", description: \"Monthly unique payers\" },\n  { header: \"18.7B\", description: \"Quarterly hours engaged\" },\n  { header: \"750M\", description: \"Yearly creator earnings\" },\n  { header: \"18.9M\", description: \"DevX\" },\n  { header: \"18.7B\", description: \"xyz\" },\n];\n\nexport const sections = [\n  {\n    title: \"\",\n    description: \"Getting started on Roblox is easy, and learning about the ecosystem only takes a few minutes. Better yet, you can start creating and sharing your creations in less than an hour with these resources.\",\n    content: [\n      // ... content array with detailed steps\n    ]\n  },\n  // ... more sections\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Card for Roblox Innovation Awards\nDESCRIPTION: This snippet defines a Material-UI Grid component that contains a Card displaying information about the Roblox Innovation Awards. It features a filled variant Card with a title, status Chip, descriptive Typography, and a Button for further actions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Grid item container Medium={12} Large={4} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n  <Grid item container wrap=\"nowrap\" direction=\"column\">\n    <Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n    <h4>Roblox Innovation Awards</h4>\n        <figure>\n    <Chip\n        color=\"error\"\n        label=\"Status: Closed\"\n        size=\"medium\"\n        variant=\"filled\"/>\n    </figure>\n    <Typography variant='body1'>Each year, the RIAs are awarded to the most innovative creators, video stars, and experiences.</Typography>\n    </CardContent>\n    <CardActions>\n        <Button href=\"/creator-programs/innovation-awards\" variant=\"contained\" color=\"secondary\" size='large'>Learn More</Button>\n    </CardActions>\n    </Card>\n  </Grid>\n  </Grid>\n```\n\n----------------------------------------\n\nTITLE: Styling and Fundamentals of Grid and Card Components - React JSX\nDESCRIPTION: This snippet illustrates basic styling and structuring of `Grid` items and `Card` components. It incorporates various Material-UI properties for layout configurations, ensuring proper visual hierarchy and spacing within the component tree.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid item container Medium={12} Large={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n```\n\n----------------------------------------\n\nTITLE: Updating Localized Game Name and Description - REST API\nDESCRIPTION: Updates both the name and description for a localized game specified by gameId. The new data must be included in the request payload.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH v1/name-description/games/{gameId}\n```\n\n----------------------------------------\n\nTITLE: Setting BasePart.CastShadow Property in Roblox Studio\nDESCRIPTION: Example of the BasePart.CastShadow property that can be enabled or disabled to balance visual quality and performance. Disabling shadows for foliage near the edges of gameplay areas can save performance without compromising the user experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/optimize-your-experience.md#2025-04-21_snippet_0\n\nLANGUAGE: roblox\nCODE:\n```\nClass.BasePart.CastShadow = Disabled\n```\n\n----------------------------------------\n\nTITLE: Animation Swap Script Implementation in Roblox\nDESCRIPTION: Reference to a Roblox script that allows swapping default character animations with custom animations. The script needs to be imported from the Roblox library and requires an animation ID to be replaced for custom animation implementation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/lesson-plans/digital-citizenship/animating-characters.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\n// Reference to Animation Swap Script\n// URL: https://www.roblox.com/library/5458306166/Default-Animations-Replacement-Script\n// Note: Actual script implementation requires importing from Roblox library\n```\n\n----------------------------------------\n\nTITLE: Enhancing Metal Reflections with Environment Scale Properties\nDESCRIPTION: Configuration for optimizing PBR material reflections by setting the environmental diffuse and specular scale properties to 1. This enhances the realistic appearance of metallic surfaces in indoor environments.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nLighting.EnvironmentDiffuseScale = 1\nLighting.EnvironmentSpecularScale = 1\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Details Table - HTML\nDESCRIPTION: The following HTML snippet represents a table ready to display core memory categories relevant for users monitoring memory usage. The table includes descriptions for each category, which assists developers in understanding the memory contributions of different components.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/optimization/memory-usage.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table size=\"small\">\n<thead>\n<tr>\n<th>Category</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>**HttpCache**</td>\n<td>Assets (images, meshes, etc.) loaded from Roblox servers and now held in a cache in memory.</td>\n</tr>\n<tr>\n<td>**Instances**</td>\n<td>`Class.Instance|Instances` in the place.</td>\n</tr>\n<tr>\n<td>**Signals**</td>\n<td>Signals that fire between instances (an event firing on one instance to trigger an event on another instance).</td>\n</tr>\n<tr>\n<td>**LuaHeap**</td>\n<td>Heap memory for both core scripts (scripts that ship with the Roblox client) and custom scripts.</td>\n</tr>\n<tr>\n<td>**Script**</td>\n<td>Luau Scripts.</td>\n</tr>\n<tr>\n<td>**PhysicsCollision**</td>\n<td>Collision data for physics simulations.</td>\n</tr>\n<tr>\n<td>**PhysicsParts**</td>\n<td>Physics geometry and kinetics.</td>\n</tr>\n<tr>\n<td>**GraphicsSolidModels**</td>\n<td>Graphics data to render solid models.</td>\n</tr>\n<tr>\n<td>**GraphicsMeshParts**</td>\n<td>Graphics for `Class.MeshPart` objects.</td>\n</tr>\n<tr>\n<td>**GraphicsParticles**</td>\n<td>Graphics for particle systems.</td>\n</tr>\n<tr>\n<td>**GraphicsParts**</td>\n<td>Graphics for parts.</td>\n</tr>\n<tr>\n<td>**GraphicsSpatialHash**</td>\n<td>General rendering.</td>\n</tr>\n<tr>\n<td>**GraphicsTerrain**</td>\n<td>Graphics for terrain.</td>\n</tr>\n<tr>\n<td>**GraphicsTexture**</td>\n<td>Texture memory.</td>\n</tr>\n<tr>\n<td>**GraphicsTextureCharacter**</td>\n<td>Texture memory for characters.</td>\n</tr>\n<tr>\n<td>**Sounds**</td>\n<td>In-memory sounds.</td>\n</tr>\n<tr>\n<td>**StreamingSounds**</td>\n<td>Streaming sounds.</td>\n</tr>\n<tr>\n<td>**TerrainVoxels**</td>\n<td>Terrain voxels.</td>\n</tr>\n<tr>\n<td>**TerrainPhysics**</td>\n<td>Terrain physics.</td>\n</tr>\n<tr>\n<td>**Gui**</td>\n<td>Memory used by common GUI elements.</td>\n</tr>\n<tr>\n<td>**Animation**</td>\n<td>Memory used for animation data, such as poses and `Class.KeyframeSequence` cached data for avatar animations.</td>\n</tr>\n<tr>\n<td>**Navigation**</td>\n<td>Memory used by supporting structures for `Class.PathfindingService`.</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Self View in Roblox Connect (Lua)\nDESCRIPTION: Demonstrates the use of ShowSelfView and HideSelfView methods to control the visibility of the caller's self view in different camera modes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/roblox-connect.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nClass.SocialService:ShowSelfView()\nClass.SocialService:HideSelfView()\n```\n\n----------------------------------------\n\nTITLE: Invoking HighlightManager in Lua\nDESCRIPTION: This snippet demonstrates how to call the HighlightManager to determine the highlight status, types of items, and which icon to use for the OnItemIndicator system.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/supporting-systems.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nhighlightItemsFunc:Invoke({\"GetType\", curInst})\n```\n\n----------------------------------------\n\nTITLE: Marketplace API Example Query\nDESCRIPTION: This URL is an example of querying the Marketplace API. It searches for the first 10 \"Gear\" items in \"Accessories\" sorted by all-time relevance created by Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/assets/api.md#2025-04-21_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\n\"https://catalog.roblox.com/v1/search/items/details?Category=11&Subcategory=5&CreatorTargetId=1&SortType=0&SortAggregation=5&Limit=10\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Variables in Roblox Lua Script\nDESCRIPTION: This code snippet demonstrates the structure of a Roblox Lua script with global variables and a game loop. It shows where to add variables for a story game between designated comment sections.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/coding-a-question.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- GLOBAL VARIABLES\nlocal storyMaker = require(script:WaitForChild(\"StoryMaker\"))\n\n-- Code controlling the game\nlocal playing = true\n\nwhile playing do\n  storyMaker:Reset()\n\n  -- Code story between the dashes\n  -- =============================================\n     local name1\n\n  -- =============================================\n\n  -- Add the story variable between the parenthesis below\n  storyMaker:Write()\n\n  -- Play again?\n  playing = storyMaker:PlayAgain()\nend\n```\n\n----------------------------------------\n\nTITLE: YAML Metadata for Roblox Tutorial\nDESCRIPTION: Demonstrates the structured metadata used to describe a Roblox environment art tutorial, including navigation and content information\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Construct your world\ndescription: Explains how to utilize your asset library, configure additional elements of the 3D space to bring your world to life.\nnext: /tutorials/curriculums/environmental-art/optimize-your-experience\nprev: /tutorials/curriculums/environmental-art/assemble-an-asset-library\n---\n```\n\n----------------------------------------\n\nTITLE: Grid Layout Component Structure\nDESCRIPTION: React/Material-UI grid layout structure for organizing content with specific spacing and styling parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/index.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Grid container spacing={2} style={{ marginBottom: 24, width: '100%' }}>\n<Grid item xs={6} style={{ padding: 16 }}>\n<Grid item container wrap=\"nowrap\" direction=\"column\" style={{ gap: 8, flex: 1 }}>\n```\n\n----------------------------------------\n\nTITLE: Face Control: LeftBrowLowerer\nDESCRIPTION: This section describes the `LeftBrowLowerer` face control, which lowers the character's left brow down. It references the `Class.FaceControls.LeftBrowLowerer` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Getting Localized Developer Product Names and Descriptions - REST API\nDESCRIPTION: This endpoint retrieves the name and description of a developer product based on developerProductId. Authentication is required for access.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nGET v1/developer-products/{developerProductId}/name-description\n```\n\n----------------------------------------\n\nTITLE: React Grid Component for Platform Overview\nDESCRIPTION: Renders a responsive grid layout for displaying Roblox platform overview content, using Material-UI Grid components with dynamic styling and image presentation\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/platform.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container direction=\"row\" spacing={4} style={{ marginBottom: 48 }}>\n  <Grid item xs={12} md={5}>\n    <p>Roblox lets you create anything you can imagine...</p>\n    <Button\n      style={{ marginTop: 8, marginRight: 24 }}\n      variant=\"contained\"\n      color=\"secondary\"\n      size=\"large\"\n      href=\"https://www.youtube.com/watch?v=vIiVbFiDbBE\"\n    >\n      Watch overview\n    </Button>\n  </Grid>\n  <Grid item xs={12} md={7}>\n    <img\n      style={{ width: '100%', aspectRatio: 16/9, height: 'auto', objectFit: 'cover' }}\n      src=\"./assets/getting-started/platform-overview/Everything-You-Need.png\"\n      alt=\"\"\n    />\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Shortcuts for Blender Tools\nDESCRIPTION: A collection of essential keyboard shortcuts for Blender modeling tools used in Roblox content creation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSnap: Shift + Tab\nInset: I\nExtrude: E\nAxis Constraint: X, Y, or Z\nBridge Edge Loops: Ctrl + E\nFill: Alt + F\nNew Faces from Edges: F\n```\n\n----------------------------------------\n\nTITLE: Rendering Use Case Tutorials Section in HTML/JSX\nDESCRIPTION: This code snippet creates a section for displaying use case tutorials, focusing on modeling and environments. It includes links to specific tutorials and images.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/index.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<h2 style={{marginBottom: 24, marginTop: 96}}>Use case tutorials</h2>\n\n<Grid container spacing={2} style={{marginBottom: 24}}>\n <Grid item container Medium={12} Large={6} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n <Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n   <div class=\"container\"\n   style={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n   <img src=\"../assets/modeling/solid-modeling/Negated-Part-To-Union.jpg\" style={{position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\"}} />\n   </div>\n   <Typography variant='h4'>Modeling</Typography>\n   <Typography variant='body1' >\n     <ul>\n     <li>Learn the basics of <a href=\"./use-case-tutorials/modeling/create-neon-signs.md\">solid modeling</a> in Studio</li>\n     <li>Learn how to <a href=\"../art/modeling/rig-a-simple-mesh.md\">rig</a> and <a href=\"../art/modeling/skin-a-simple-mesh.md\">skin</a> a simple mesh in Blender</li>\n     <li>Learn how to <a href=\"../art/modeling/rig-a-humanoid-model.md\">rig</a> and <a href=\"../art/modeling/skin-a-humanoid-model.md\">skin</a> a humanoid model in Blender</li>\n     </ul></Typography>\n     <div style={{marginTop:16}}>\n     </div>\n </Grid>\n </Grid>\n\n <!-- Additional grid item for Environments -->\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Bundles Feature Package Card Implementation\nDESCRIPTION: JSX implementation of a material card component displaying the Bundles feature package information with steps and image.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>Bundles</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nThe **Bundles** feature package offers out-of-the-box functionality to sell collections of items to players at a discount.\n</Typography>\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Time Left Value in Timer Loop\nDESCRIPTION: Updates the `timeLeft` IntValue within a while loop that continues as long as the timer is running. The value is updated by getting the time left from the `myTimer` object, adding 1 (to ensure the timer ends at 1 instead of 0), and performing integer division (`// 1`) to get a whole number.  `task.wait()` is used to prevent the loop from consuming too much processing power.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nwhile myTimer:isRunning() do\n\t-- Adding +1 makes sure the timer display ends at 1 instead of 0.\n\ttimeLeft.Value = (myTimer:getTimeLeft() + 1) // 1\n\t-- By not setting the time for wait, it offers more accurate looping\n\ttask.wait()\nend\n```\n\n----------------------------------------\n\nTITLE: Importing ValidationTool in Maya Python Script Editor\nDESCRIPTION: Command to import the ValidationTool module in Maya's Script Editor. This needs to be run the first time the plugin is used to initialize the tool.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/validation-tool.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ValidationTool\n```\n\n----------------------------------------\n\nTITLE: Memory Store Data Structure Selection\nDESCRIPTION: Guidelines for choosing appropriate memory store data structures based on specific use cases like matchmaking, trading, leaderboards, and caching\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/memory-stores/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Choosing data structure based on use case\n-- Queue: Skill-based matchmaking\n-- Sorted Map: Trading, Leaderboards\n-- Hash Map: Shared inventories, Caching\n```\n\n----------------------------------------\n\nTITLE: Scripting Face Animations\nDESCRIPTION: Example note about implementing facial animations in Roblox. While no direct code is shown, the documentation references that animations can be played manually through scripts or automatically by replacing default character animations using animation IDs obtained after export.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/animate-heads.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- No direct code snippets provided in the documentation.\n-- Animations are implemented using standard Roblox animation methods\n-- after obtaining the animation ID from the export process.\n```\n\n----------------------------------------\n\nTITLE: Using BaseAccordion for Prerequisites - React (JavaScript)\nDESCRIPTION: This snippet uses a React component BaseAccordion to display prerequisites for the Roblox curriculum, guiding users on what to learn first.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/curriculum-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<BaseAccordion>\n<AccordionSummary>\n<Typography variant=\"h4\">Prerequisites</Typography>\n</AccordionSummary>\n<AccordionDetails>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nIf you've never used Roblox Studio or coded before, start here before following any of the curriculum paths.\n</Typography>\n\n- [Setting up Roblox Studio](../../studio/setup.md) - Install\n  and configure Roblox Studio.\n- [Create your first experience](../first-experience/index.md) - Build a simple experience.\n- [Coding fundamentals](../../tutorials/fundamentals/coding-1/coding-fundamentals.md) - Learn the basics of programming with Luau.\n</AccordionDetails>\n</BaseAccordion>\n```\n\n----------------------------------------\n\nTITLE: WrapLayer AutoSkin Property Values\nDESCRIPTION: Enumeration values for the WrapLayer.AutoSkin property that controls how skinning is applied to face accessories\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/use-heads-in-studio.md#2025-04-21_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\nWrapLayer.AutoSkin = \"Disabled\" -- Default, disables automatic skinning\nWrapLayer.AutoSkin = \"EnabledOverride\" -- Enables and overrides existing skinning\nWrapLayer.AutoSkin = \"EnabledPreserve\" -- Enables but preserves existing skinning\n```\n\n----------------------------------------\n\nTITLE: Adding SurfaceAppearance Textures in Roblox Studio\nDESCRIPTION: Code snippet showing the hierarchical structure of adding a SurfaceAppearance object to a MeshPart and configuring its texture properties. This is used when manually adding PBR textures to an imported 3D model.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/import-clothing.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nClass.SurfaceAppearance\n  ColorMap = \"_ALB texture image\"\n  MetalnessMap = \"_MTL texture image\"\n  NormalMap = \"_NOR texture image\"\n  RoughnessMap = \"_RGH texture image\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Sun Rays Effect in Roblox\nDESCRIPTION: Configures the SunRays object properties to enhance the visibility and spread of sun rays entering through windows, creating dramatic lighting effects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/lighting/enhance-indoor-environments.md#2025-04-21_snippet_3\n\nLANGUAGE: Roblox\nCODE:\n```\nIntensity = 0.023\nSpread = 0.266\n```\n\n----------------------------------------\n\nTITLE: Creating Unity to Roblox Glossary Table in Markdown\nDESCRIPTION: This markdown table provides a comprehensive comparison between Unity and Roblox terms, including brief notes for clarification. It covers key concepts such as scene management, game objects, prefabs, transformations, UI elements, and development tools.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/unity.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Unity | Roblox | Notes |\n| :--- | :--- | :--- |\n| Scene | [Place](projects.md#places) | |\n| GameObject | `Class.Part` or `Class.Model` | See [Philosophical differences](#philosophical-differences). |\n| Prefab | [Package](projects/assets/packages.md) | |\n| Transform | `Datatype.CFrame` | `CFrame` doesn't include scale information. See [Transforms](#transforms). |\n| Hierarchy window | Explorer window | |\n| Inspector | Properties window |\n| Scene view | Viewport | |\n| Game view | Viewport | The Viewport transitions into a gameplay view when you test your experience. |\n| Project window | [Asset Manager](projects/assets/manager.md) or [Toolbox](projects/assets/toolbox.md) | |\n| Terrain Inspector | Terrain Editor | |\n| Spawn point | `Class.SpawnLocation` | |\n| Console | Output | |\n| Asset Store | [Creator Store](production/creator-store.md) | |\n| Overlays | Menu bar | |\n| Tool | [Plugin](studio/plugins.md) | |\n```\n\n----------------------------------------\n\nTITLE: Camera Controls for 3D Viewport in Markdown\nDESCRIPTION: This section presents the table of key controls for manipulating the camera in the 3D viewport of Roblox Studio. It describes actions associated with keyboard shortcuts, enabling efficient navigation and object interactions within the virtual environment.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/ui-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Keys/Shortcuts       | Action                                                            |\n|-----------------------|-------------------------------------------------------------------|\n| W A S D               | Moves the camera forward/left/back/right.                         |\n| Q E                   | Moves the camera down/up.                                         |\n| Shift                 | In combination with any movement key, changes the camera speed.    |\n| F                     | Focuses the camera on a selected part.                            |\n| Right Mouse Button     | When pressed, dragging the mouse moves the camera view around.   |\n| Mouse Scroll Wheel    | Zooms the camera in or out.                                      |\n| Middle Mouse Button    | When pressed, dragging the mouse pans the camera.                 |\n| Right Mouse Button & Mouse Scroll Wheel | Pressing the right mouse button and scrolling adjusts camera scroll speed. |\n```\n\n----------------------------------------\n\nTITLE: Starting a TruthChecker script with a comment\nDESCRIPTION: Initializes a script with a descriptive comment that explains its purpose of changing a part's color based on a condition.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/intro-to-if-statements.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Changes the part if a condition is true\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Container for Programs - React JSX\nDESCRIPTION: This snippet renders a `Grid` container component that organizes various creator programs available on Roblox. It uses the Material-UI library for layout and styling, enabling responsive design through defined item spacing and direction attributes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={2} style={{marginBottom: 24}}>\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Developer Product Name and Description - REST API\nDESCRIPTION: Updates the name and description for a localized developer product based on developerProductId and languageCode. The new details must be provided in the request.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH v1/developer-products/{developerProductId}/name-description/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: For Loops Over Lists in C#\nDESCRIPTION: Demonstrates how to iterate over lists and dictionaries in C# using `foreach` loops. It showcases iterating over a `List<string>` and a `Dictionary<string, int>`, accessing the key-value pairs using `KeyValuePair`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nList<string> abcList = new List<string>{\"a\", \"b\", \"c\"};\n\nforeach (string v in abcList) {\n\tConsole.WriteLine(v);\n}\n\nDictionary<string, int> abcDictionary = new Dictionary<string, int>\n{ {\"a\", 1}, {\"b\", 2}, {\"c\", 3} };\n\n\nforeach (KeyValuePair<string, int> entry in abcDictionary) {\n\tConsole.WriteLine(entry.Key + \" \" + entry.Value);\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure for Features Documentation\nDESCRIPTION: Basic markdown table structure for documenting discovery features and their descriptions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scale-discovery.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<thead>\n  <tr>\n    <th>Feature</th>\n    <th>Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n  </tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Adds empty print()\nDESCRIPTION: This snippet shows how to add a print function call without parameters. It is intended for students to later modify it by adding their variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/create-a-script.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nprint()\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure with Video and Alert Components\nDESCRIPTION: Structured markdown content including frontmatter metadata, video embedding, and an alert component for additional information and resources.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating/texture-painting.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Texture painting\ndescription: Use Blender's Texture Painting tools to apply a surface appearance to your clothing item.\nprev: /art/accessories/creating/texture-map\nnext: /art/accessories/creating/armature-setup\n---\n\nWith a new image ready to apply textures to, use Blender's Texture Paint mode to quickly brush texture colors onto your mesh:\n\n1. Navigate to **Texture Paint mode**.\n2. On the viewport, select the clothing object.\n3. Open up the sidebar tools to access brush settings.\n4. Select a color, brush size, and falloff to apply. You might need to adjust settings, depending on the modifications you intend to apply.\n5. Draw on either the UV 2D map, or the 3D mesh.\n6. Save the `.png` of your texture map by selecting **Image** > **Save**.\n   <video controls src=\"../../../assets/art/accessories/creating/Texturing_04.mp4\" width=\"100%\"></video>\n\n<Alert severity = 'success'>\nYou've completed the texturing section of this tutorial. If desired, download a [reference sample](../../../assets/art/reference-files/checkpoint/2_LongSleeve-Texturing-Complete.blend) of this project and texture image for comparison.\n\nThere are a lot of ways to texture and apply a unique appearance to your meshes. For additional suggestions, try utilizing alpha transparencies, unique seams, [PBR textures](../../modeling/surface-appearance.md), or Blender's other texturing tools and techniques.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Extracting PII from Payload in Node.js\nDESCRIPTION: This PHP code snippet demonstrates how to extract and handle Personally Identifiable Information (PII) from webhook payloads. It involves extracting timestamp and signature values for security checks, preventing replay attacks, validating the signature, and handling the extracted data to automate data erasure requests.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/webhook-notifications.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nconst crypto = require('crypto')\nconst express = require('express');\nlet app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n// This is a sample only code\napp.all('/*', function (req, res) {\n   console.log('-------- New Request Seen -------');\n   // 1. Extract the timestamp and signature\n   const shared_secret = '<Your secret>' // This can be set as an environment variable\n   const hmac = crypto.createHmac('sha256', shared_secret)\n   const roblox_signature_header = req.headers['roblox-signature'].split(',')\n   // 'roblox-signature' is present in all requests:\n   // Timestamp(t) is present in all requests, however signature value(v1) is not set unless a secret is shared during the webhook configuration.\n   // Fetch header component at Index 0 -> 't=' and Index 1 -> 'v1='\n   const timestamp = roblox_signature_header.find(e => e.startsWith('t=')).substring(2);\n   const extracted_signature = roblox_signature_header.find(e => e.startsWith('v1='));\n   // 2. Prevent Replay attack: 300 seconds window\n   const request_timestamp_ms = timestamp * 1000;\n   const window_time_ms = 300 * 1000\n   const oldest_timestamp_allowed = Date.now() - window_time_ms;\n   if (request_timestamp_ms < oldest_timestamp_allowed) {\n      res.status(403).send('Expired Request')\n   }\n   // 3. Validate Signature\n   if (extracted_signature !== undefined) {\n      const signature_v1 = extracted_signature.substring(3);\n      const message = `${timestamp}.${JSON.stringify(req.body)}`\n      const base64_signature = hmac.update(message).digest('base64')\n      if (signature_v1 !== base64_signature) {\n         res.status(401).send('Unauthorized Request')\n      }\n   }\n   // 4. Your logic to handle payload\n   const payloadBody = req.body\n   const eventType = payloadBody['EventType']\n   if (eventType === 'RightToErasureRequest'){\n      const userId = payloadBody['EventPayload']['UserId']\n      const gameIds = payloadBody['EventPayload']['GameIds']\n      const gameIdString = gameIds.toString()\n      console.log(`The payload: UserId=${userId} and GameIds=${gameIdString}`)\n      // If you store PII in data stores, use the UserId and GameIds to make a data store call to delete the information.\n   }\n   // 5. Return Response\n   res.json({ message: 'Processed the message Successfully' });\n})\napp.listen(8080, function () {\n   console.log('This is a Sample application')\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Player State for Active Gameplay in PlayerStateHandler\nDESCRIPTION: This function handles the player state during active gameplay. It enables player movement, sets the HUD GUI, prepares the blaster for use, and schedules the destruction of the force field.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onPlaying()\n\ttogglePlayerMovement(true)\n\tsetGuiExclusivelyEnabled(playerGui.HUDGui)\n\n\tlocalPlayer:SetAttribute(PlayerAttribute.blasterStateClient, BlasterState.Ready)\n\n\tscheduleDestroyForceField()\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Profiling with debug.profilebegin/end in Lua\nDESCRIPTION: This snippet demonstrates how to wrap code with `debug.profilebegin()` and `debug.profileend()` to measure the execution time of a specific section of code. These calls create a label on the MicroProfiler timeline, allowing you to identify performance bottlenecks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/microprofiler/index.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```lua title=\"HardWorkScript\"\ndebug.profilebegin(\"Hard Work\")\n-- Code to be profiled\ndebug.profileend()\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Transparency Interpolation in Lua\nDESCRIPTION: Code demonstrating how to interpolate TextLabel transparency from 1 to 0 and back using keyframe-based animation system.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ninterpolants = {\n\tobjectParam = \"TextLabel\",\n\tproperty = \"TextTransparency\",\n\tkeys = {\n\t\t{value = 1},\n\t\t{time = .5, value = 0},\n\t\t{time = 2.25, value = 0},\n\t\t{time = 3, value = 1}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Alert Notification in React\nDESCRIPTION: This code segment demonstrates how to show an informational alert for using the Texture Generator tool effectively. It uses the Alert component to convey helpful tips about texture generation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/texture-generator.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Alert severity=\"info\">\n**Texture Generator** is best suited for custom 3D assets where the desired texture is contextual to the asset itself. To generate repeating or tiled images for texturing surfaces like a wood floor or cobblestone pathway, [Material Generator](../studio/material-generator.md) may produce better results.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Example Refresh Token Response in JSON\nDESCRIPTION: JSON response example showcasing new tokens obtained through a refresh token request for the OAuth 2.0 flow.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"...\",\n  \"refresh_token\": \"...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 899,\n  \"scope\": \"universe-messaging-service:publish\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Image Container with Responsive Styling\nDESCRIPTION: Creates a responsive container for images with specific aspect ratio and positioning using CSS-in-JS styling approach.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/experiences.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div class=\"container\" style={{position: \"relative\", paddingBottom: \"56.25%\", height: 0, marginBottom: 12}}>\n  <img src=\"/assets/getting-started/platform-overview/Community.jpg\" style={{position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\"}}/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: RightLowerLipDepressor Face Control\nDESCRIPTION: Property that lowers the lower lip to reveal lower teeth. Required for Marketplace publishing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightLowerLipDepressor\n```\n\n----------------------------------------\n\nTITLE: Setting Trail Camera Facing in Roblox\nDESCRIPTION: Shows how to configure a trail's facing behavior using the FaceCamera property to ensure visibility from any camera angle.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/effects/trails.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTrail.FaceCamera = true  // Makes trail always face the CurrentCamera\n```\n\n----------------------------------------\n\nTITLE: Event Handler Function Definition\nDESCRIPTION: Example of an event handler function that receives event instance and parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/foundational-gameplay-systems.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function EnablePlayerControls(eventInst, params)\n```\n\n----------------------------------------\n\nTITLE: React Landing Page Component with Grid Layout\nDESCRIPTION: A React component that renders a responsive grid layout displaying sections about Roblox's platform features, including discovery, localization, and analytics. Uses Material-UI components for styling and layout.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scale.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport const sections = [\n  {\n    description: \"Our efficient discovery capabilities offer a massive opportunity to find the right audience and acquire new users. We also provide a robust analytics suite of tools to measure and gain insights on your experience's performance. This allows you to adjust content strategies and rapidly iterate to get your desired outcome.\",\n    content: [\n      {\n        title: \"Discovery for millions of users on a variety of devices and form factors\",\n        description: \"Roblox works out of the box on PlayStation, Xbox, Android, iOS, PC, Mac, and Oculus. You get one-click publish and discovery that reaches hundreds of millions of users on a vast social network.\",\n        image: \"/assets/landing/device-family.png\",\n        links: [\n          { text: \"Discovery\", href: \"./discovery\" },\n          { text: \"Roblox user base\", href: \"./production/roblox-user-base\" }\n        ]\n      },\n      // Additional sections...\n    ]\n  }\n];\n\n{sections.map((section, index) => (\n  <Grid container spacing={8} key={index}>\n    <Typography variant='h1'>{section.title}</Typography>\n    <p>{section.description}</p>\n    {section.content.map((section, index) => (\n      <Grid item xs={12} md={5} key={index}>\n        <h2>{section.title}</h2>\n        <p>{section.description}</p>\n        <img src={section.image} alt={section.title} />\n        {section.links && section.links.map((link, linkIndex) => (\n          <a href={link.href} key={linkIndex}>\n            <Typography variant='buttonLarge'>{link.text}</Typography>\n          </a>\n        ))}\n      </Grid>\n    ))}\n  </Grid>\n))}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Asset Operation Status\nDESCRIPTION: This JSON snippet shows a sample response from the Roblox API when querying the status of an asset operation. It includes detailed information such as the asset's path, revision ID, display name, user ID of the creator, and moderation status. The user must interpret this data to check the operation's success or diagnose any issues.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-assets.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"operations/{operationId}\",\n  \"done\": true,\n  \"response\": {\n    \"@type\": \"type.googleapis.com/roblox.open_cloud.assets.v1.Asset\",\n    \"path\": \"assets/2205400862\",\n    \"revisionId\": \"1\",\n    \"revisionCreateTime\": \"2023-03-02T22:27:04.062164400Z\",\n    \"assetId\": \"2205400862\",\n    \"displayName\": \"Name\",\n    \"description\": \"This is a description\",\n    \"assetType\": \"ASSET_TYPE_DECAL\",\n    \"creationContext\": {\n      \"creator\": {\n        \"userId\": \"11112938575\"\n      }\n    },\n    \"moderationResult\": {\n      \"moderationState\": \"MODERATION_STATE_APPROVED\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Element with Volcano Effects Demo\nDESCRIPTION: HTML code for embedding a video that demonstrates rippling caldera effects with embers and splashes. Includes width specification and descriptive alt text for accessibility.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<video controls src=\"../../../assets/tutorials/creating-volcanoes/Splashes-7.mp4\" alt=\"A close front view of the caldera that's rippling, emitting embers, and a wide variation of splashes.\" width=\"90%\"></video>\n```\n\n----------------------------------------\n\nTITLE: Structured HTML Grid Layout for Educational Links\nDESCRIPTION: Two-column grid layout using HTML and Markdown to organize educational resource links, including online schools and academies offering Roblox development courses.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/roblox-educators.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<Grid container spacing={3}>\n <Grid item XSmall={6}>\n   <a href=\"https://superinventores.com\">Academia de Super Inventores</a><br/>\n   <!-- Additional links -->\n </Grid>\n <Grid item XSmall={6}>\n   <!-- Additional links -->\n </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Adding String Parameters to GetInput in Roblox Lua\nDESCRIPTION: This snippet shows how to pass a string question as a parameter to the GetInput method. The string is enclosed in quotation marks and will be displayed to the player as a prompt for input.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/coding-a-question.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n  -- Code story between the dashes\n  -- =============================================\n     local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n  -- =============================================\nend\n```\n\n----------------------------------------\n\nTITLE: Follow Active Quads UV Mapping\nDESCRIPTION: Generates clean UV islands by following the layout of a previously unwrapped active face, ideal for grid-like topology\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_7\n\nLANGUAGE: steps\nCODE:\n```\n1. Open UV Editing workspace\n2. Unwrap initial face\n3. Configure active face\n4. Select faces to follow\n5. Press U\n6. Select \"Follow Active Quads\"\n```\n\n----------------------------------------\n\nTITLE: Dissolve Tool in Blender for Mesh Optimization\nDESCRIPTION: A tool that removes geometry without creating holes in meshes, allowing creators to merge or remove unnecessary mesh elements while maintaining overall structure\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select vertices, edges, or faces in Edit mode\n2. Right-click to display contextual menu\n3. Choose appropriate Dissolve option\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Links Grid Layout\nDESCRIPTION: Implements a responsive grid layout using Material-UI Grid components to display tutorial and community resource links with custom styling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/experiences.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container spacing={2} style={{marginBottom: 24}}>\n<Grid item container Medium={12} Large={6} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n<Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n```\n\n----------------------------------------\n\nTITLE: Checking Set Membership in Lua\nDESCRIPTION: The code uses `Set:contains()` to check if certain items are present in a set, returning true or false. Ensures proper set membership checks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/metatables.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal fruits = Set.new({\"Apple\", \"Lemon\", \"Orange\", \"Cherry\", \"Lime\", \"Peach\"})\n\nlocal result1 = fruits:contains(\"Cherry\")\nprint(result1) -- true\n\nlocal result2 = fruits:contains(\"Watermelon\")\nprint(result2) -- false\n```\n\n----------------------------------------\n\nTITLE: Complete PlayerSetup Script for Roblox\nDESCRIPTION: This is the final version of the script to set up a leaderboard with gold, items, and spaces stats for players. The script includes connecting the 'PlayerAdded' event to ensure full functionality when players join.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\n -- Creates a leaderboard that shows player variables\n local function onPlayerJoin(player)\n   local leaderstats = Instance.new(\"Folder\")\n   leaderstats.Name = \"leaderstats\"\n   leaderstats.Parent = player\n\n   local gold = Instance.new(\"IntValue\")\n   gold.Name = \"Gold\"\n   gold.Value = 0\n   gold.Parent = leaderstats\n\n   local items = Instance.new(\"IntValue\")\n   items.Name = \"Items\"\n   items.Value = 0\n   items.Parent = leaderstats\n\n   local spaces = Instance.new(\"IntValue\")\n   spaces.Name = \"Spaces\"\n   spaces.Value = 2\n   spaces.Parent = leaderstats\n end\n\n -- Run onPlayerJoin when the PlayerAdded event fires\n Players.PlayerAdded:Connect(onPlayerJoin)\n```\n\n----------------------------------------\n\nTITLE: Playing and Looping Animation\nDESCRIPTION: Instructions for enabling animation looping and playing the animation using keyboard shortcuts\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/adding-the-second-pose.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Click the **Loop** icon\n2. Press <kbd>Space</kbd> to play\n3. Press <kbd>Space</kbd> again to stop\n```\n\n----------------------------------------\n\nTITLE: Setting Up Crust Layering - Lua\nDESCRIPTION: This snippet explains the process for adding and customizing the Crust1 Beam above the magma beam, focusing on texture application and visual adjustments to create a crust-like appearance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\n1. Insert another **Beam** into **MagmaRiverBeam**, rename it **Crust1**, then attach the part's attachments to **Crust1** using the same process in step 6.\n1. Customize the beam's visual appearance so it looks like crust on top of the magma.\n   1. In the **Explorer** window, verify **Crust1** is still selected.\n   1. In the **Properties** window,\n      1. Set **Texture** to **rbxassetid://17023930265** to render a new texture that looks like flowing crust...\n```\n\n----------------------------------------\n\nTITLE: Script Execution Warning Message\nDESCRIPTION: Warning message displayed when a script lacks the required execution control capability.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/capabilities.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCannot start server script 'Script' (lacking capability RunServerScript)\n```\n\n----------------------------------------\n\nTITLE: Directing to Authorization Flow for Roblox OAuth 2.0\nDESCRIPTION: Provides an example of how to direct to the authorization flow by constructing a valid URL with all the necessary query parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nhttps://apis.roblox.com/oauth/v1/authorize?client_id=816547628409595165403873012&redirect_uri=https://my-app.com/redirect&scope=openid&response_type=code&nonce=12345&state=6789\n```\n\n----------------------------------------\n\nTITLE: Using BaseAccordion for Additional Accessories - HTML\nDESCRIPTION: This snippet utilizes the BaseAccordion component to organize additional examples of accessories under a collapsible section. It demonstrates the ability to present information in a more structured manner, allowing users to expand details as needed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/marketplace/marketplace-policy.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<BaseAccordion>\n<AccordionSummary>\n<Typography>Additional accessory examples</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n<table>\n<tbody>\n  <tr>\n    <td>\n      <GridContainer numColumns='2'>\n        <img src=\"../assets/art/avatar/Acc-Wings-A.png\" />\n        <img src=\"../assets/art/avatar/Acc-Wings-B.png\" />\n      </GridContainer>\n          <center>Wings</center>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <GridContainer numColumns='2'>\n        <img src=\"../assets/art/avatar/Acc-Horn-A.png\" />\n        <img src=\"../assets/art/avatar/Acc-Horn-B.png\" />\n      </GridContainer>\n      <center>Horns</center>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <GridContainer numColumns='2'>\n        <img src=\"../assets/art/avatar/Acc-Antlers-A.png\" />\n        <img src=\"../assets/art/avatar/Acc-Antlers-B.png\" />\n      </GridContainer>\n      <center>Antlers</center>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <GridContainer numColumns='2'>\n        <img src=\"../assets/art/avatar/Acc-Tail-A.png\"/>\n        <img src=\"../assets/art/avatar/Acc-Tail-B.png\"/>\n      </GridContainer>\n      <center>Tails</center>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <center><img src=\"../assets/art/avatar/Acc-Feathers.png\"/></center>\n      <center>Tail Feathers</center>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <center><img src=\"../assets/art/avatar/Acc-Glasses.png\"/></center>\n      <center>[Hipster Glasses](https://www.roblox.com/catalog/125369932/Hipster-Glasses)</center>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <center><img src=\"../assets/art/avatar/Acc-Sunglasses.png\"/></center>\n      <center>[Sunglasses](https://www.roblox.com/catalog/42847660/Epic-Sunglasses)</center>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <center><img src=\"../assets/art/avatar/Acc-Whiskers.png\"/></center>\n      <center>[Whiskers](https://www.roblox.com/catalog/13209067084/Whiskers)</center>\n    </td>\n  </tr>\n</tbody>\n</table>\n</AccordionDetails>\n</BaseAccordion>\n```\n\n----------------------------------------\n\nTITLE: Adding and Smoothing Vertices in Blender\nDESCRIPTION: Process of adding vertices and smoothing the mesh surface using the Subdivision Surface Modifier and Shade Smooth option in Blender.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating/trimming.md#2025-04-21_snippet_1\n\nLANGUAGE: blender\nCODE:\n```\n1. Switch back to Object Mode.\n2. With the clothing mesh selected, navigate to the Modifier Properties panel.\n3. Select \"Add Modifier\" > \"Subdivision Surface Modifier\" and click \"Apply\" with the default settings.\n4. In the viewport, right-click the object and select \"Shade Smooth\" to eliminate the creases on your clothing article.\n```\n\n----------------------------------------\n\nTITLE: Customizing ACM Theme in Roblox Lua Script\nDESCRIPTION: This Lua code snippet demonstrates how to customize the Avatar Context Menu (ACM) in Roblox by setting various visual parameters such as background image, transparency, colors, and font. It interacts with the `StarterGui` service to modify the theme of the context menu. The primary dependencies include access to Roblox services, and it requires the developer to have permissions to modify the `StarterGui`. Customize the look by altering color values and transparency settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-context-menu.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal StarterGui = game:GetService(\"StarterGui\")\n\nStarterGui:SetCore(\"AvatarContextMenuTheme\", {\n\tBackgroundImage = \"\",\n\tBackgroundTransparency = 0.5,\n\tBackgroundColor = Color3.fromRGB(111, 145, 242),\n\tNameTagColor = Color3.fromRGB(0, 0, 200),\n\tNameUnderlineColor = Color3.fromRGB(213, 233, 255),\n\tButtonFrameColor = Color3.fromRGB(15, 24, 65),\n\tButtonFrameTransparency = 0.2,\n\tButtonUnderlineColor = Color3.fromRGB(213, 233, 255),\n\tFont = Enum.Font.SciFi\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Player Addition in Roblox Luau\nDESCRIPTION: The snippet illustrates setting player state in the `onPlayerAdded` function using the `PlayerStateHandler`. It connects to `CharacterAdded` to handle initial state management for new players. Players are set into a `SelectingBlaster` state and an associated connection is stored for later management.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/spawn-respawn.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function onPlayerAdded(player: Player)\\n\\tplayer.CharacterAdded:Connect(function()\\n\\t\\tif not player.Neutral then\\n\\t\\t\\tplayer:SetAttribute(PlayerAttribute.playerState, PlayerState.SelectingBlaster)\\n\\t\\t\\tonPlayerStateChanged(player, PlayerState.SelectingBlaster)\\n\\t\\tend\\n\\tend)\n```\n\n----------------------------------------\n\nTITLE: Rendering Status Chip in Markdown/React\nDESCRIPTION: A UI component used to display the current status of the Creator Events program with a success color and filled variant\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/creator-events.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Chip\n    color=\"success\"\n    label=\"Status: Open\"\n    size=\"medium\"\n    variant=\"filled\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Card for Today's Picks on Marketplace\nDESCRIPTION: This snippet constructs a Material-UI Grid containing a Card that details 'Today's Picks on Marketplace'. It features a Chip indicating status open, a description for users, and a Button leading to further information on the marketplace picks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/index.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Grid item container Medium={12} Large={4} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n  <Grid item container wrap=\"nowrap\" direction=\"column\">\n    <Card variant=\"filled\" style={{height: \"100%\"}}>\n    <CardContent>\n    <h4>Today's Picks on Marketplace</h4>\n        <figure>\n    <Chip\n        color=\"success\"\n        label=\"Status: Open\"\n        size=\"medium\"\n        variant=\"filled\"/>\n    </figure>\n    <Typography variant='body1'>Daily curation of Marketplace items to help users bring their unique selves to Roblox</Typography>\n    </CardContent>\n    <CardActions>\n        <Button href=\"/creator-programs/todays-picks-marketplace\" variant=\"contained\" color=\"secondary\" size='large'>Learn More</Button>\n    </CardActions>\n    </Card>\n  </Grid>\n  </Grid>\n```\n\n----------------------------------------\n\nTITLE: Creating Video Embed with JSX/HTML\nDESCRIPTION: Embeds a YouTube video player with specific styling and permissions using JSX/HTML iframe element with styling properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/experiences.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/7iJKUUiKc0Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen  style={{position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\"}}></iframe>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Container with Styling\nDESCRIPTION: HTML/JSX code for creating a responsive video container with specific styling for embedding YouTube videos. Uses relative positioning and padding to maintain aspect ratio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/index.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\nclassName=\"container\"\nstyle={{ position: \"relative\", paddingBottom: \"56.25%\", height: 0, marginBottom: 12 }} >\n<iframe\nsrc=\"https://www.youtube-nocookie.com/embed/tzPn6QvU8Bo\"\ntitle=\"YouTube video player\"\nframeBorder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nallowFullScreen\nstyle={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\" }} ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Face Control: TongueDown\nDESCRIPTION: This section describes the `TongueDown` face control, which bends the tongue down. This pose is only visible if combined with `TongueOut`. It references the `Class.FaceControls.TongueDown` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Card Layout for Gameplay Scripting Curriculum - React (JavaScript)\nDESCRIPTION: This snippet generates a card layout for the gameplay scripting curriculum, detailing the programming skills needed for Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/curriculum-overview.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>Gameplay scripting</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nLearn the programming skills you need to introduce gameplay to the laser tag environment.\n</Typography>\n<>\n<Grid\n    alignItems=\"stretch\"\n    container\n    direction=\"row\">\n<Grid item Large={6} XSmall={12} direction=\"column\">\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe src=\"https://www.youtube-nocookie.com/embed/7iJKUUiKc0Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen  style={{position: \"absolute\", top: 0, left: 0, width: \"90%\", height: \"90%\"}}></iframe>\n</div>\n</Grid>\n<Grid item Large={6} XSmall={12} direction=\"column\">\n<>\n<Stepper activeStep={3} orientation=\"vertical\">\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Spawn players into the environment, and respawn them once their health reaches zero.\">\n<h5 style={{marginTop: 36}}>Spawn</h5>\n</StepLabel>\n</Step>\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Create a blast mechanic that is both accurate in the 3D space and satisfying to players.\">\n<h5 style={{marginTop: 36}}>Blast</h5>\n</StepLabel>\n</Step>\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Implement laser detecting behavior that handles blast direction, verifies collision, and reduces player health.\" >\n<h5 style={{marginTop: 36}}>Detect</h5>\n</StepLabel>\n</Step>\n</Stepper>\n</>\n</Grid>\n</Grid>\n</>\n<a href=\"../curriculums/gameplay-scripting/index.md\">\n  <Button\n    variant=\"contained\"\n    size=\"large\">\n  Start creating\n  </Button>\n</a>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Adding more color conditions - Lua\nDESCRIPTION: This snippet extends the previous example to check for a green color using `elseif`. If the color is green, `largePoints` is added to the player's `Points` value. It depends on the previously defined variables like `blue`, `green`, `playerPoints`, and `largePoints`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nif currentColor == blue then\n\tplayerPoints.Value += smallPoints\nelif currentColor == green then\n\tplayerPoints.Value += largePoints\nend\n```\n\n----------------------------------------\n\nTITLE: Named Arguments in C#\nDESCRIPTION: Demonstrates how to use named arguments in C#. The function accepts `name` and `dob` as named parameters, and returns a concatenated string.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Named arguments\nstring namedArguments(string name, string dob) {\n\treturn name + \"'s birthday: \" + dob;\n}\n\nnamedArguments(name: \"Bob\", dob: \"4/1/2000\");\n```\n\n----------------------------------------\n\nTITLE: Class Reference in Baseplate Template Documentation\nDESCRIPTION: Shows how to reference a Roblox class in documentation using the specialized Class markup format.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Class.SpawnLocation`\n```\n\n----------------------------------------\n\nTITLE: Using CanQuery Property in Roblox\nDESCRIPTION: The CanQuery property determines if an object is considered during spatial query operations like raycasting. It's enabled by default for Parts and MeshParts, but should be disabled for objects that don't need spatial queries to improve performance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/assemble-an-asset-library.md#2025-04-21_snippet_2\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.BasePart.CanQuery\n```\n\n----------------------------------------\n\nTITLE: Initializing Player Tag Handler Function in Lua\nDESCRIPTION: Function signature for handling player damage when tagged by another player's blast. Takes parameters for the player who fired, the player who was hit, and the damage amount.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/create-teams.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerTagged(playerBlasted: Player, playerTagged: Player, damageAmount: number)\n```\n\n----------------------------------------\n\nTITLE: Importing Beta Feature for Terrain\nDESCRIPTION: This snippet imports a beta alert feature from another markdown file, which is likely used to notify users about beta functionalities available in the terrain editing experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/terrain.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BetaAlert from '../includes/beta-features/beta-alert.md'\n```\n\n----------------------------------------\n\nTITLE: Running the OAuth 2.0 Sample App in Node.js\nDESCRIPTION: This command starts the Node.js application, allowing users to navigate to the specified address to interact with the app, which includes authentication via Roblox.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-sample.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Educators Directory Table Structure in HTML\nDESCRIPTION: HTML table structure for displaying featured educators, including their logos, links and descriptions. Each entry contains an image, external link, and descriptive text about the educator's programs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/roblox-educators.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<tbody>\n   <tr>\n    <td>\n    <a href=\"https://www.idtech.com/\" target=\"_blank\" rel=\"noopener\"><img src=\"../../assets/education/educators-page/id-tech-logo.png\" /></a>\n    </td>\n    <td>\n    iD Tech is an international educator offering students STEM education through camps, online tutoring, or online classes.\n    </td>\n   </tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Resetting Animation Pose\nDESCRIPTION: Step-by-step process for resetting an individual pose to its default state if not satisfied with the current positioning\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/adding-the-second-pose.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Right click on the top white diamond of the pose\n2. Select **Reset Selected**\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in YouTube Player - HTML\nDESCRIPTION: This snippet embeds a YouTube video player within an HTML container for educational content related to Roblox creation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/curriculum-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"880\" height=\"495\" src=\"https://www.youtube-nocookie.com/embed/DKzFkn7q8MQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Authorizing OAuth 2.0 Apps for Asset Permissions\nDESCRIPTION: This plain text snippet showcases the structure of an authorization URL used to redirect users back to an application when using the Roblox OAuth 2.0 API. Scope parameters include `asset:read` and `asset:write`, which are necessary for managing assets. This should be included in the authorization flow of your OAuth 2.0 app.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-assets.md#2025-04-21_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nhttps://authorize.roblox.com?client_id=819547628404595165403873012&redirect_uri=https://my-app.com/redirect&scope=asset:read+asset:write&response_type=Code&prompts=login+consent&nonce=12345&state=6789\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git\nDESCRIPTION: Command to commit your changes to your branch with a summary and description. This prepares your changes to be pushed to GitHub.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"summary\" -m \"description\"\n```\n\n----------------------------------------\n\nTITLE: Thought Bubble RichText Markup in Roblox\nDESCRIPTION: HTML-style markup for creating dynamic text effects in a thought bubble using TextLabel's RichText property\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/immersive-narrative.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n\"What is…this…<br/><stroke color=\\\"#dcc7ff\\\" joins=\\\"miter\\\" thickness=\\\"2\\\" transparency=\\\"0.5\\\"><font size=\\\"60\\\"><font color=\\\"rgb(10,8,11)\\\"><i>....hunger….void….pull…</i></font></font></stroke>\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Rejected and Accepted Asset Versions - HTML\nDESCRIPTION: This snippet illustrates a comparison between a rejected and an accepted version of an avatar asset to highlight the necessary changes required for compliance with Roblox's guidelines. It shows how to represent visually similar assets in different contexts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/marketplace/marketplace-policy.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<GridContainer numColumns=\"2\">\n<figure>\n<center><img src=\"../assets/art/avatar/Acc-Demon-Horns-A.png\" /></center>\n<figcaption>Body rejected for accessories (horns).</figcaption>\n</figure>\n<figure>\n<center><img src=\"../assets/art/avatar/Acc-Demon-Horns-B.png\" /></center>\n<figcaption> [Demon3](https://www.roblox.com/bundles/2485/Demon3) approved after removal of accessories on body upload.</figcaption>\n</figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Face Control: RightOuterBrowRaiser\nDESCRIPTION: This section describes the `RightOuterBrowRaiser` face control, which raises the outer part of the character's right brow upwards. It references the `Class.FaceControls.RightOuterBrowRaiser` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: RightUpperLipRaiser Face Control\nDESCRIPTION: Property that raises the right upper lip to reveal upper teeth. Required for Marketplace publishing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightUpperLipRaiser\n```\n\n----------------------------------------\n\nTITLE: Defining Section Data Structure for Roblox Engine Documentation\nDESCRIPTION: Exports a sections array containing structured data about Roblox engine features, including titles, descriptions, images, and navigation buttons.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/engine.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const sections = [\n  {\n    title: \"The Roblox Engine\",\n    description: \"More than just a gaming engine—create large-scale, 3D immersive experiences that simulate the real world. The engine comes bundled with the Roblox Studio and Roblox app, allowing you to create once and ship on millions of devices.\",\n    content: [\n      {\n        image: \"/assets/accessories/Layered-Clothing-Banner.jpg\",\n      }\n    ],\n    buttons: [\n          { text: \"Browse APIs\", href: \"./tutorials/first-experience/\" },\n          { text: \"Learn about Roblox Studio\", href: \"./tutorials/first-experience/\" }\n        ]\n  },\n  // Additional sections...\n];\n```\n\n----------------------------------------\n\nTITLE: Running the Discord Bot\nDESCRIPTION: Starts the Discord bot using the token specified in the bot configuration file.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/webhooks/automate-right-to-erasure.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclient.run(bot_config.BOT_TOKEN)\n\nif __name__ == \"__main__\":\n    run()\n```\n\n----------------------------------------\n\nTITLE: Face Control: LeftCheekRaiser\nDESCRIPTION: This section describes the `LeftCheekRaiser` face control, which squints the character's left eye. It references the `Class.FaceControls.LeftCheekRaiser` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Demonstrating External Link Syntax in Markdown\nDESCRIPTION: Shows the correct syntax for creating external links in Markdown format, which should be used for links to websites outside of create.roblox.com.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/STYLE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Creator Dashboard](https://create.roblox.com/dashboard/creations)\n[Blender](https://www.blender.org/)\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect Discovery Document Response - JSON\nDESCRIPTION: This JSON response provides the metadata for the OpenID Connect Discovery Document, including links to various endpoints and supported scopes and claims for the Roblox API.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"issuer\": \"https://apis.roblox.com/oauth/\",\\n  \"authorization_endpoint\": \"https://apis.roblox.com/oauth/v1/authorize\",\\n  \"token_endpoint\": \"https://apis.roblox.com/oauth/v1/token\",\\n  \"introspection_endpoint\": \"https://apis.roblox.com/oauth/v1/token/introspect\",\\n  \"revocation_endpoint\": \"https://apis.roblox.com/oauth/v1/token/revoke\",\\n  \"resources_endpoint\": \"https://apis.roblox.com/oauth/v1/token/resources\",\\n  \"userinfo_endpoint\": \"https://apis.roblox.com/oauth/v1/userinfo\",\\n  \"jwks_uri\": \"https://apis.roblox.com/oauth/v1/certs\",\\n  \"registration_endpoint\": \"https://create.roblox.com/dashboard/credentials\",\\n  \"service_documentation\": \"https://create.roblox.com/docs/reference/cloud\",\\n  \"scopes_supported\": [\\n    \"openid\",\\n    \"profile\",\\n    \"email\",\\n    \"verification\",\\n    \"credentials\",\\n    \"age\",\\n    \"premium\",\\n    \"roles\"\\n  ],\\n  \"response_types_supported\": [\"none\", \"code\"],\\n  \"subject_types_supported\": [\"public\"],\\n  \"id_token_signing_alg_values_supported\": [\"ES256\"],\\n  \"claims_supported\": [\\n    \"sub\",\\n    \"type\",\\n    \"iss\",\\n    \"aud\",\\n    \"exp\",\\n    \"iat\",\\n    \"nonce\",\\n    \"name\",\\n    \"nickname\",\\n    \"preferred_username\",\\n    \"created_at\",\\n    \"profile\",\\n    \"email\",\\n    \"email_verified\",\\n    \"verified\",\\n    \"age_bracket\",\\n    \"premium\",\\n    \"roles\",\\n    \"internal_user\"\\n  ],\\n  \"token_endpoint_auth_methods_supported\": [\\n    \"client_secret_post\",\\n    \"client_secret_basic\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Alerts in Markdown\nDESCRIPTION: This code snippet demonstrates how to format alerts within Markdown using a specific syntax.  It utilizes the `<Alert>` component with a `severity` attribute to indicate the type of alert.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/STYLE.md#2025-04-21_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n\"<Alert severity=\\\"warning\\\">\nThis is a beta feature and is subject to change in future releases.\n</Alert>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Curriculum Paths Section in HTML/JSX\nDESCRIPTION: This code snippet creates a section for displaying curriculum paths, including embedded YouTube videos and descriptions for Core, Environmental Art, and Gameplay Scripting paths.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/index.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h2 style={{marginBottom: 24}}>Curriculum paths</h2>\n\n<Grid container spacing={2} style={{marginBottom: 24}}>\n <Grid item container Medium={12} Large={6} XLarge={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n <Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n <div class=\"container\"\n style={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n <iframe src=\"https://www.youtube-nocookie.com/embed/zi0hIuPDyWc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen  style={{position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\"}}></iframe>\n </div>\n   <Typography variant='h4'>Core</Typography>\n   <Typography variant='body1' >Learn how to build a simple 3D platformer where players collect coins to trade for jump power.</Typography>\n     <div style={{marginTop:16}}>\n       <a underline=\"none\" href=\"./curriculums/core/index.md\">\n       <Button variant=\"contained\" color=\"secondary\" size='large'\n       style={{marginRight:8, alignSelf: 'flex-start'}}>Get started</Button>\n       </a>\n     </div>\n </Grid>\n </Grid>\n\n <!-- Additional grid items for Environmental Art and Gameplay Scripting -->\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: JSX UI Component - Chip Status Indicator\nDESCRIPTION: Renders a status chip to indicate the current status of the Community Feedback Program application process\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/feedback.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Chip\n    color=\"success\"\n    label=\"Status: Open\"\n    size=\"medium\"\n    variant=\"filled\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Crown Icon to Score Bar\nDESCRIPTION: Configuration for adding an ImageLabel with a crown icon to the score bar frame. Includes settings for transparency, layout order, and size constraints to maintain aspect ratio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/create-a-score-bar.md#2025-04-21_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\n-- ImageLabel Properties\nImage = \"rbxassetid://5673786644\"\nBackgroundTransparency = 1\nLayoutOrder = 1\nSize = UDim2.new(1.25, 0, 1, 0)\nSizeConstraint = Enum.SizeConstraint.RelativeYY\n```\n\n----------------------------------------\n\nTITLE: Defining Base URL for Localization Tables API in Markdown\nDESCRIPTION: Specifies the base URL for the Localization Tables API, along with authentication types and a note about additional endpoints.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n- Base URL: `https://apis.roblox.com/legacy-localization-tables`\n- Authentication types: OAuth 2.0 and API key\n- Additional Localization Tables API endpoints without Open Cloud authentication support can be found [here](/cloud/legacy/localizationtables/v1).\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Parts in Roblox Studio\nDESCRIPTION: Step-by-step instructions to add and configure block parts for the main floor, detailing size and position for each part to create the playable areas accurately.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_3\n\nLANGUAGE: Roblox\nCODE:\n```\n1. Add and configure a **block** part for the left-side surface of the **main floor**.\n   1. Navigate to the toolbar's **Model** tab.\n   1. Click the dropdown arrow on the **Part** button and select **Block**. A block part displays in the viewport.\n   1. In the **Explorer** window, select the block, then in the **Properties** window,\n      1. Set **Size** to `105, 1, 185`.\n      1. Set **CFrame.Position** to `-77.5, 4.5, 252.5`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Import Statement\nDESCRIPTION: Import statement for a BetaAlert React component used in the documentation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/assistant/guide.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport BetaAlert from '../includes/beta-features/beta-alert.md'\n```\n\n----------------------------------------\n\nTITLE: Setting Border Part Properties for Neon Sign\nDESCRIPTION: Configuration settings for the border part of the neon sign, including size and color properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/modeling/create-neon-signs.md#2025-04-21_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nBrickColor = Lime Green\nSize = 7.75, 3.75, 0.25\nName = Border\n```\n\n----------------------------------------\n\nTITLE: Modifying HumanoidDescription Properties\nDESCRIPTION: Demonstrates how to set various properties on a HumanoidDescription instance including accessories, body scale, animations, and appearance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/appearance.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal humanoidDescription = Instance.new(\"HumanoidDescription\")\nhumanoidDescription.HatAccessory = \"2551510151,2535600138\"\nhumanoidDescription.BodyTypeScale = 0.1\nhumanoidDescription.ClimbAnimation = 619521311\nhumanoidDescription.Face = 86487700\nhumanoidDescription.GraphicTShirt = 1711661\nhumanoidDescription.HeadColor = Color3.new(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in Lua Scripts\nDESCRIPTION: This Lua snippet shows how to retrieve and manipulate secrets within scripts in a Roblox experience. Dependencies include enabling 'Allow HTTP Requests' in game settings. Secrets can be prefixed or suffixed, and used to form URLs or inserted into headers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\n\nlocal testSecret = HttpService:GetSecret(\"test_secret\")\n```\n\nLANGUAGE: lua\nCODE:\n```\nprint(testSecret) --> Secret(test_secret)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal HttpService = game:GetService(\"HttpService\")\n\nlocal testSecret = HttpService:GetSecret(\"test_secret\")\n\nlocal prefix = \"https://my.example.com/endpoint?apiKey=\"\nlocal suffix = \"&user=username\"\nlocal url = testSecret:AddPrefix(prefix)\nurl = url:AddSuffix(suffix)\nprint(url) --> https://my.example.com/endpoint?apiKey=Secret(test_secret)&user=username\n```\n\n----------------------------------------\n\nTITLE: Roblox Avatar Body Part Naming Specification\nDESCRIPTION: Required naming conventions for avatar body part mesh objects to ensure proper functionality in Roblox. Each limb and body part must follow specific naming with the '_Geo' suffix.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/specifications.md#2025-04-21_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nUpperTorso_Geo\nLowerTorso_Geo\nLeftUpperArm_Geo\nLeftLowerArm_Geo\nLeftHand_Geo\nRightUpperArm_Geo\nRightLowerArm_Geo\nRightHand_Geo\nLeftUpperLeg_Geo\nLeftLowerLeg_Geo\nLeftFoot_Geo\nRightUpperLeg_Geo\nRightLowerLeg_Geo\nRightFoot_Geo\nHead_Geo\n```\n\n----------------------------------------\n\nTITLE: Visualization Options in Markdown\nDESCRIPTION: This section describes the functionality of visualization options available in the upper-right corner of the 3D viewport, which allow users to toggle overlays and adjust visibility settings. It enhances user control over the workspace display.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/ui-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\nIn the upper-right corner of the 3D viewport, you can quickly toggle or set common visualization options related to on-screen UI overlays, light sources, physics simulation, character pathfinding, and more.\n```\n\n----------------------------------------\n\nTITLE: Markdown Alert Component for Avatar Item Archiving\nDESCRIPTION: A markdown alert component that informs users about the process of archiving avatar item assets through a request submission.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/assets/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Alert severity = 'warning'>\nYou can archive avatar item assets by [submitting an archiving request](../../marketplace/moderation.md#archiving-assets).\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Calling the Disappear Function in Luau\nDESCRIPTION: This snippet demonstrates how to invoke the 'disappear' function to execute the behavior defined within it, thus making the platform disappear when the game is played.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ndisappear()\n```\n\n----------------------------------------\n\nTITLE: Displaying Roblox Sales Data Attributes in Markdown Table\nDESCRIPTION: A markdown table displaying the structure of Roblox sales data CSV reports. The table includes attribute names and descriptions with examples for each field that appears in the sales data export.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/analytics-dashboard.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute          | Description                                                                                                                                                                                                             | Example                               |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------- |\n| Buyer User ID      | User ID of the user who purchased the item.                                                                                                                                                                             | `123456789`                           |\n| Sale Date and Time | Date and time of the transaction in UTC.                                                                                                                                                                                | `2022-07-15T19:04:30.397Z`            |\n| Sale Location      | The location in which the user bought the item, such as an experience and the Marketplace.                                                                                                                              | `WebSite`, `Marketplace`, `Game`      |\n| Universe ID        | The unique identifier of the experience that the purchased item belongs to. Only applicable for items that belong to an experience, like a game pass.                                                                   | `987654321`                           |\n| Universe           | The name of the experience that the purchased item belongs to. Only applicable for items that belong to an experience, like a game pass.                                                                                | `My Awesome Experience`               |\n| Asset ID           | The unique identifier of the item.                                                                                                                                                                                      | `234565432`                           |\n| Asset Name         | The name of the item.                                                                                                                                                                                                   | `My Avatar Shirt`, `My Server`        |\n| Asset Type         | The type of the item, which can be a [Roblox asset type](../../projects/assets/index.md#asset-types) or a [developer product](../../production/monetization/developer-products.md) type.                                | `Game Pass`, `Private Server`, `Mesh` |\n| Hold Status        | The status of whether Robux from this sale have been released to you or are still in a hold.                                                                                                                            | `Released`, `Held`, `Cancelled`       |\n| Revenue            | The amount of Robux you receive for the purchase, which is the item listing price excluding any [Marketplace fees](../../marketplace/marketplace-fees-and-commissions.md), Affiliate Fees, and Recurring Group Payouts. | `50`                                  |\n| Price              | The item listing price, which is the amount of Robux that the buyer paid for the purchase.                                                                                                                              | `10`                                  |\n```\n\n----------------------------------------\n\nTITLE: Client Container Services in Roblox\nDESCRIPTION: Overview of client-side container services that replicate objects to connected clients, including StarterPack, StarterGui, and StarterPlayerScripts\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/data-model.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- StarterPack → Player.Backpack\n-- StarterGui → Player.PlayerGui\n-- StarterPlayerScripts → Player.PlayerScripts\n```\n\n----------------------------------------\n\nTITLE: RightLipCornerPuller Face Control\nDESCRIPTION: Property that raises the corners of the mouth upwards to create a smile. Required for Marketplace publishing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightLipCornerPuller\n```\n\n----------------------------------------\n\nTITLE: Node.js Leaderboard Implementation\nDESCRIPTION: Demonstrates creating, listing, and updating leaderboard entries using the Ordered Data Stores API client in a Node.js application\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst leaderboardEndpoints = require('./ordered_data_stores');\n\nconst datastores = new leaderboardEndpoints.DataStores('config.json');\n\n// Variables\nconst orderedDataStore = 'PlayerScores';\nconst scope = 'global';\nconst entryNames = ['Ragdoll', 'Balinese', 'Tabby', 'Siamese'];\n\n// Create an entry and give each new player 50 points for joining the game\nentryNames.forEach(async (name) => {\n  await datastores.create(orderedDataStore, scope, name, 50);\n});\n\n// Display the players' scores\ndatastores.list(orderedDataStore, scope).then((playerScores) => {\n  console.log(playerScores);\n});\n\n// Increment the first player's score for winning the game\ndatastores.increment(orderedDataStore, scope, entryNames[0], 100);\n\n// Increment all the players' scores for participating in the game\nentryNames.forEach(async (name) => {\n  await datastores.increment(orderedDataStore, scope, name, 10);\n});\n\n// Display the updated leaderboard\ndatastores.list(orderedDataStore, scope).then((updatedPlayerScores) => {\n  console.log(updatedPlayerScores);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Link to Roblox Challenge Quiz in HTML\nDESCRIPTION: This code snippet creates a button inside an anchor tag that directs users to the Roblox Creator Challenge quiz game. The button uses a 'contained' variant styling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/third-challenge.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://www.roblox.com/games/2546610365/Roblox-Creator-Challenge\">\n<Button variant=\"contained\">Take the Challenge</Button>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Roblox API Link Syntax in Markdown\nDESCRIPTION: This code snippet shows various examples of how to create links to Roblox Engine API documentation using specific syntax patterns for classes, data types, enums, globals, and libraries.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/STYLE.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `Class.BasePart`\n- `Class.Fire.Color`\n- `Class.MarketplaceService:GetProductInfo()`\n- `Class.MarketplaceService:GetProductInfo()|GetProductInfo()`\n- `Datatype.Color3`\n- `Enum.Font`\n- `Enum.Font|GothamMedium`\n- `Global.RobloxGlobals.tick()`\n- `Library.coroutine.create()`\n- `Class.Beam:SetTextureOffset()|myBeam:SetTextureOffset(1)`\n- `Datatype.CFrame.new(x, y, z)`\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid-Based Drag Constraints in Roblox Lua\nDESCRIPTION: Creates a grid-based constraint system for a UIDragDetector that snaps UI elements to specific positions within a defined grid. The system uses a custom constraint function to round positions to increments based on the specified number of rows and columns. It implements scale-based dragging and relative positioning within a bounding container.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/ui-drag-detectors.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Hierarchy is GridContainer ⟩ Handle ⟩ UIDragDetector ⟩ (this script)\nlocal gridContainer = script.Parent.Parent.Parent\nlocal handle = gridContainer:FindFirstChild(\"Handle\")  -- UI element to drag\nlocal uiDragDetector = handle:FindFirstChildWhichIsA(\"UIDragDetector\")\n\nuiDragDetector.ResponseStyle = Enum.UIDragDetectorResponseStyle.Scale  -- Set dragging by scale\nuiDragDetector.DragRelativity = Enum.UIDragDetectorDragRelativity.Relative\nuiDragDetector.BoundingUI = gridContainer\n\nlocal NUM_COLUMNS = 10\nlocal NUM_ROWS = 5\n\nlocal xScaleIncrement = 1 / NUM_COLUMNS\nlocal yScaleIncrement = 1 / NUM_ROWS\nlocal initialParentPosition = uiDragDetector.Parent.Position\n\nuiDragDetector.DragStart:Connect(function()\n\tinitialParentPosition = uiDragDetector.Parent.Position\nend)\n\nlocal function dragToGridOnly(proposedPosition, proposedRotation)\n\tlocal griddedXScale = math.round(proposedPosition.X.Scale / xScaleIncrement) * xScaleIncrement\n\tlocal griddedYScale = math.round(proposedPosition.Y.Scale / yScaleIncrement) * yScaleIncrement\n\n\treturn UDim2.fromScale(griddedXScale, griddedYScale), proposedRotation\nend\n\nuiDragDetector:AddConstraintFunction(1, dragToGridOnly)\n```\n\n----------------------------------------\n\nTITLE: Calculating New CFrame for Button Position on X Axis in Roblox Lua\nDESCRIPTION: This code snippet calculates a new CFrame for a button's position, specifically moving it along the X axis. It uses `TWEEN_MOVE_DISTANCE` multiplied by `buttonState` to determine the movement amount. The resulting offset is then applied relative to the button's current position.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/animating-parts.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Calculate new CFrame for button position\nlocal offsetCFrame = CFrame.new( TWEEN_MOVE_DISTANCE * buttonState, 0, 0)\nlocal newCFrame = button.CFrame:ToWorldSpace(offsetCFrame)\n```\n\n----------------------------------------\n\nTITLE: Creating Mannequin Models Cards in React\nDESCRIPTION: This snippet illustrates how to create card components for various mannequin models that can be used as design references for avatar accessories and clothing items. These components feature images and links for downloadable models.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/resources.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Grid container alignItems='stretch' style={{margin: -6}}>\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>Classic Mannequin</center>\n<figure>\n<center> <img src=\"../assets/art/resources/Body-Scale-Classic.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nA blank mannequin using Roblox's [Classic](../art/characters/specifications.md#classic) avatar proportions. <br /> <br />Use this reference to aid your creation process for accessories, clothing, and characters in third-party applications.<br /> <br /> The caged `.fbx` contains the individual outer body cages for the body and may not import correctly into Studio without modification.\n</figure>\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n<Button href=\"../assets/art/reference-files/ClassicMannequin.fbx\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Model</Button>\n\n<Button href=\"../assets/art/reference-files/ClassicMannequin_With-Cages.fbx\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>With Cage</Button>\n</CardActions>\n</Card>\n</Grid>\n\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>Rthro Mannequin</center>\n<figure>\n<center> <img src=\"../assets/art/resources/Body-Scale-Rthro-Normal.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nA blank mannequin using Roblox's [Rthro Normal](../art/characters/specifications.md#normal) avatar proportions. <br /> <br />Use this reference to aid your creation process for accessories, clothing, and characters in third-party applications.<br /> <br /> The caged `.fbx` contains the individual outer body cages for the body and may not import correctly into Studio without modification.\n</figure>\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n<Button href=\"../assets/art/reference-files/RthroMannequin.fbx\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Model</Button>\n\n<Button href=\"../assets/art/reference-files/RthroMannequin_With-Cages.fbx\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>With Cage</Button>\n</CardActions>\n</Card>\n</Grid>\n\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>Rthro Slender Mannequin</center>\n<figure>\n<center> <img src=\"../assets/art/resources/Body-Scale-Rthro-Slender.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nA blank mannequin using Roblox's [Rthro Slender](../art/characters/specifications.md#slender) proportions. <br /> <br />Use this reference to aid your creation process for accessories, clothing, and characters in third-party applications.<br /> <br /> The caged `.fbx` contains the individual outer body cages for the body and may not import correctly into Studio without modification.\n</figure>\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n<Button href=\"../assets/art/reference-files/RthroSlenderMannequin.fbx\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Model</Button>\n\n<Button href=\"../assets/art/reference-files/RthroSlenderMannequin_With-Cages.fbx\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>With Cage</Button>\n</CardActions>\n</Card>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Revoking Token using POST Request - Bash\nDESCRIPTION: This code snippet shows how to revoke an authorization session by sending a POST request containing the refresh token, client ID, and client secret to the Roblox revocation endpoint.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST https://apis.roblox.com/oauth/v1/token/revoke' \\n--header 'Content-Type: application/x-www-form-urlencoded' \\n--data-urlencode 'token=Ujfstayclfdlbm...BGydlsnU' \\n--data-urlencode 'client_id=840974200211308101' \\n--data-urlencode 'client_secret=RBX-CR9...St12L'\n```\n\n----------------------------------------\n\nTITLE: Navigating to Roblox Installation Directory in Command Prompt\nDESCRIPTION: This command changes the current directory to the Roblox installation folder in the Command Prompt. Replace 'userName' and the version number with the appropriate values for your system.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/support/creating-bundled-installers.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd C:\\Users\\userName\\AppData\\Local\\Roblox\\Versions\\version-6d02431b656044a6\n```\n\n----------------------------------------\n\nTITLE: Creating a Table for Technical Resources in Markdown\nDESCRIPTION: This snippet demonstrates how to create a table in Markdown to display technical resources with links and descriptions.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/resources-landing.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<table>\n<thead>\n   <tr>\n    <th>Resource</th>\n    <th>Description</th>\n   </tr>\n</thead>\n<tbody>\n   <tr>\n    <td><a href = \"https://en.help.roblox.com/hc/en-us/articles/203312880\" target=\"_blank\" rel=\"noopener\">General Connection Problems</a></td>\n    <td>Troubleshoot common issues like firewalls, connection loss, or issues in loading or connecting to experiences.</td>\n   </tr>\n   <tr>\n    <td><a href = \"https://en.help.roblox.com/hc/en-us/articles/115005744663\" target=\"_blank\" rel=\"noopener\">Troubleshooting Education Networks</a></td>\n    <td>For educators interested in using Roblox in schools. This guide includes domains, ports, and common issues we've found.</td>\n   </tr>\n      <tr>\n    <td><a href = \"https://en.help.roblox.com/hc/en-us/articles/203312840-Firewall-and-Router-Issues\" target=\"_blank\" rel=\"noopener\">Firewall and Router Issues</a></td>\n    <td>Issues with firewalls, routers, and antivirus programs.</td>\n   </tr>\n   <tr>\n    <td><a href = \"https://en.help.roblox.com/hc/en-us/articles/203552894-General-Roblox-Studio-Issues\" target=\"_blank\" rel=\"noopener\">General Roblox Studio Issues</a></td>\n    <td>Provides guidance on how to address common issues such as logging in, crashes, and visual glitches.</td>\n   </tr>\n  \n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Lava Flow Structure - Lua\nDESCRIPTION: This snippet describes the setup process for the lava flow simulation, including layering beams to create depth and turbulence. It focuses on the overall arrangement of Class.Beam objects in the Workspace.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nGridContainer numColumns=\"3\"\n  <figure>\n    <img src=\"../../../assets/tutorials/creating-volcanoes/Bottom-Layer.jpg\" alt=\"\" width=\"80%\"/>\n    <figcaption>Bottom layer</figcaption>\n  </figure>\n  <figure>\n    <img src=\"../../../assets/tutorials/creating-volcanoes/Middle-Layer.jpg\" alt=\"\" width=\"80%\"/>\n    <figcaption>Middle Layer</figcaption>\n  </figure>\n  <figure>\n    <img src=\"../../../assets/tutorials/creating-volcanoes/Top-Layer.jpg\" alt=\"\" width=\"80%\"/>\n    <figcaption>Top Layer</figcaption>\n  </figure>\n</GridContainer>\n\nLayering three Class.Beam objects creates an illusion of parallax to make the lava seem like it has a sense of depth and volume where the lava is flowing at different rates...\n```\n\n----------------------------------------\n\nTITLE: Rendering a Status Chip in React\nDESCRIPTION: This React snippet renders a Chip component with a 'Status: Open' label, a success color, medium size, and a filled variant. It demonstrates the use of properties like color, label, size, and variant to customize the Chip component. The snippet requires React and Material-UI or a similar library for ChIPs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/spotlights.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Chip\n    color=\"success\"\n    label=\"Status: Open\"\n    size=\"medium\"\n    variant=\"filled\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Application Button in Markdown/React\nDESCRIPTION: A button component for initiating the Creator Events program application process with specific styling and href configuration\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/creator-events.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button href=\"https://survey.roblox.com/jfe/form/SV_cSnxeXTXIbKFz0i\" size='large' variant='contained' style={{width:200}}>Apply</Button>\n```\n\n----------------------------------------\n\nTITLE: Unwrapping UV Map in Blender\nDESCRIPTION: Process of cleaning up and organizing UV coordinates to prepare for texture mapping, avoiding stretching and distortion\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_6\n\nLANGUAGE: steps\nCODE:\n```\n1. Open UV Editing workspace\n2. Select faces or mark seams\n3. Press U hotkey\n4. Select \"Unwrap\"\n5. Adjust UV islands in UV Editor\n```\n\n----------------------------------------\n\nTITLE: Configuring Wedge Parts for Elevation in Roblox Studio\nDESCRIPTION: Instructions for adding and configuring wedge parts to create a rise and drop in elevation. Proper size, position, and orientation settings are emphasized for accurate gameplay experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_4\n\nLANGUAGE: Roblox\nCODE:\n```\n1. Add and configure the following **wedge** parts for the **rise in elevation** between the main and mezzanine floor:\n   1. Left-side elevation, Size: `15, 5, 10`, CFrame.Position: `-102.5, 7.5, 200`, CFrame.Orientation: `0, 180, 0`.\n   1. Right-side elevation, Size: `15, 5, 10`, CFrame.Position: `-102.5, 7.5, 120`, CFrame.Orientation: `0, 0, 0`.\n```\n\n----------------------------------------\n\nTITLE: Bottom Left Perimeter Wall Configuration\nDESCRIPTION: Configuration values for the bottom left perimeter section, including three wall segments of varying sizes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_7\n\nLANGUAGE: roblox\nCODE:\n```\nLeft wall: Size(20, 20, 40), CFrame.Position(-34, 15, 320)\nMiddle wall: Size(12, 45, 15), CFrame.Position(-29, 24.5, 297.5)\nRight wall: Size(5, 35, 5), CFrame.Position(-27.5, 19.5, 287.5)\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed\nDESCRIPTION: Iframe element embedding a YouTube video about Assistant features.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/assistant/guide.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube-nocookie.com/embed/vMaOGgeuR4Y?si=fuX-80mMMzhQB6sn&amp;start=240\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Regular Queue Usage Example - Luau\nDESCRIPTION: This code snippet shows how to use the previously defined regular queue in a Roblox environment. It demonstrates enqueuing and dequeuing values within the game workspace, utilizing the shared ModuleScript queue implementation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/queues.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Queue = require(ReplicatedStorage:WaitForChild(\"Queue\"))\n\nlocal myQueue = Queue.new()\n\n-- Add some values to the queue\nmyQueue:enqueue(5)\nmyQueue:enqueue(10)\nmyQueue:enqueue(15)\n\n-- myQueue = { 5, 10, 15 }\n\n-- Remove one value from the queue\nlocal first = myQueue:dequeue()\nprint(\"The first value added to the queue was\", first)\n\n-- myQueue = { 10, 15 }\n\n-- Add more values to the queue\nmyQueue:enqueue(20)\nmyQueue:enqueue(25)\nmyQueue:enqueue(30)\n\n-- myQueue = { 10, 15, 20, 25, 30 }\n\n-- Remove another value from the queue\nlocal second = myQueue:dequeue()\nprint(\"The second value added to the queue was\", second)\n\n-- myQueue = { 15, 20, 25, 30 }\n```\n\n----------------------------------------\n\nTITLE: Pre-2022 Base Materials Texture Asset Mapping\nDESCRIPTION: Historical reference of asset IDs for base materials before the 2022 texture update, including color, normal, metalness, and roughness texture identifiers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/materials.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Material | Color | Normal | Metalness | Roughness |\n|----------|-------|--------|-----------|----------|\n| Brick | 7546648254 | 7546649654 | - | 7546650017 |\n| Concrete | 7546653328 | 7546653707 | - | 7546653868 |\n```\n\n----------------------------------------\n\nTITLE: FixedTime Bundle Type in Roblox\nDESCRIPTION: The FixedTime bundle type remains available until a set UTC time expires. It displays on the player's HUD and automatically prompts on future sessions until expiration or purchase.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/bundles.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n#### FixedTime\n```\n\n----------------------------------------\n\nTITLE: ChinRaiser Face Control\nDESCRIPTION: Property that raises the chin and moves lower lip upwards. Can be combined with ChinRaiserUpperLip to prevent lip collision.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.ChinRaiser\n```\n\n----------------------------------------\n\nTITLE: Redeeming Roblox Code - Plain Text\nDESCRIPTION: This snippet provides a code, StrikeAPose, to be used within the Roblox game 'Island of Move' for redeeming in-game avatar items. The code should be entered in the specified game scenario to claim the rewards.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/challenge-checkpoint-2.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nStrikeAPose\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Parts for Right Top Roof in Roblox\nDESCRIPTION: Specific measurements for placing block parts to create the right section of the top roof in the Environment Art sample. Includes Size and CFrame.Position properties for seven different blocks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_24\n\nLANGUAGE: Roblox\nCODE:\n```\nSize: 100, 15, 35\nCFrame.Position: -105, 28.5, 97.5\n\nSize: 65, 15, 10\nCFrame.Position: -62.5, 28.5, 120\n\nSize: 35, 15, 40\nCFrame.Position: -137.5, 28.5, 60\n\nSize: 25, 15, 40\nCFrame.Position: -97.5, 28.5, 60\n\nSize: 35, 15, 15\nCFrame.Position: -72.5, 28.5, 47.5\n\nSize: 25, 15, 75\nCFrame.Position: -42.5, 28.5, 77.5\n\nSize: 126, 15, 90\nCFrame.Position: -92, 28.5, -5\n```\n\n----------------------------------------\n\nTITLE: Example Response from Token Resources Endpoint\nDESCRIPTION: This JSON code snippet represents the response from the token resources endpoint, containing a list of Universe IDs associated with the user's granted permissions. It includes the owner information (user ID and type) and a list of universe IDs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-messaging.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource_infos\": [\n    {\n      \"owner\": {\n        \"id\": \"1516563360\",\n        \"type\": \"User\"\n      },\n      \"resources\": {\n        \"universe\": {\n          \"ids\": [\"3828411582\"]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Tool in Blender for Mesh Restructuring\nDESCRIPTION: A tool that completely removes geometry from meshes, creating holes and allowing for mesh restructuring during the iteration process\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/blender.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select vertices, edges, or faces in Edit mode\n2. Press X hotkey\n3. Choose deletion option from contextual menu\n```\n\n----------------------------------------\n\nTITLE: Deleting a Localized Developer Product Name and Description - REST API\nDESCRIPTION: Deletes the name and description for a given developerProductId and languageCode. Appropriate management permissions are required.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE v1/developer-products/{developerProductId}/name-description/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Accessing OAuth 2.0 Base URL in HTTP\nDESCRIPTION: Base URL for accessing OAuth 2.0 endpoints on Roblox Open Cloud. Used as the foundation for all OAuth 2.0 API requests.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://apis.roblox.com/oauth\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Components for Platform Hosting Information in JSX\nDESCRIPTION: JSX code that creates a styled grid layout explaining the platform hosting and support costs covered by Roblox. The component uses Material UI Grid and Chip elements to visualize the 18% portion of revenue allocated to hosting servers, moderation, and support.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/earn-on-roblox.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"18%\" size=\"large\" style={{backgroundColor:\"#00a2ff\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Platform hosting & support\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Top Perimeter Wall Configuration\nDESCRIPTION: Configuration values for the top section perimeter walls, including three main segments with specific size and position parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_5\n\nLANGUAGE: roblox\nCODE:\n```\nTop-left wall: Size(30, 30, 185), CFrame.Position(-140, 20, 282.5)\nTop-middle wall: Size(10, 30, 60), CFrame.Position(-150, 20, 160)\nTop-right wall: Size(30, 30, 185), CFrame.Position(-140, 20, 37.5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Creator Catalog in Roblox\nDESCRIPTION: This snippet demonstrates how to specify another creator's catalog in the Roblox UGC Homestore template.  It involves modifying the `DEFAULT_CREATOR_NAME` and `FETCH_CREATOR_NAME` variables within the `Settings` ModuleScript located in `ReplicatedStorage`. This configuration allows the shop to display items from a specific creator instead of the experience owner or the entire marketplace.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/marketplace/homestore.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nNo code snippet available. Instructions refer to modifying variables within the Settings ModuleScript object in ReplicatedStorage, but the script content itself is not provided.\n```\n\n----------------------------------------\n\nTITLE: Accessing Descendant Parts of Atomic Model\nDESCRIPTION: This Lua snippet demonstrates how to access descendant parts of a model that is configured to stream in as atomic. The `WaitForChild` method is used to ensure the model is loaded at runtime before accessing its children.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Atomic model does not exist at load time; use WaitForChild()\nlocal model = Workspace:WaitForChild(\"Model\")\n\n-- Descendant parts stream in with model and are immediately accessible\nlocal meshPart = model.MeshPart\nlocal part = model.Part\n```\n\n----------------------------------------\n\nTITLE: HUD GUI Setup in Lua\nDESCRIPTION: This script sets up the main Heads Up Display (HUD) after a player joins a round and selects their blaster. It requires multiple module scripts to function, including modules for syncing team color, setting player name and portrait, objective, touch button, team points, disabling mouse input and setting up the hitmarker. The script ensures that all HUD UI elements are displayed appropriately for the player's state, device, and team status.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal setPlayerPortrait = require(script.setPlayerPortrait)\nlocal setPlayerName = require(script.setPlayerName)\nlocal startSyncingTeamColor = require(script.startSyncingTeamColor)\nlocal setObjective = require(script.setObjective)\nlocal setupTouchButtonAsync = require(script.setupTouchButtonAsync)\nlocal startSyncingTeamPoints = require(script.startSyncingTeamPoints)\nlocal disableMouseWhileGuiEnabled = require(script.disableMouseWhileGuiEnabled)\nlocal setupHitmarker = require(script.setupHitmarker)\n\nlocal localPlayer = Players.LocalPlayer\nlocal gui = localPlayer.PlayerGui:WaitForChild(\"HUDGui\")\n\nsetPlayerPortrait(gui)\nsetPlayerName(gui)\nstartSyncingTeamColor(gui)\nsetObjective(gui)\nstartSyncingTeamPoints(gui)\ndisableMouseWhileGuiEnabled(gui)\nsetupHitmarker(gui)\nsetupTouchButtonAsync(gui)\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Notification Analytics Metrics\nDESCRIPTION: HTML table structure defining and describing key notification performance metrics including opted-in users, impressions, clicks, CTR, turn off rate, and dismiss rate.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/experience-notifications/analytics-notification-summary.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<thead>\n  <tr>\n    <th>Statistic</th>\n    <th>Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>**Opted-in Users**</td>\n    <td>The total number of users that have turned on notifications for your experience. Please note that this does include users under the age of 13 who are only able to receive notification of [experience updates](../../production/promotion/experience-events.md#announce-experience-updates), not personalized [experience notifications](../../production/promotion/experience-notifications.md).</td>\n  </tr>\n  <tr>\n    <td>**Impressions**</td>\n    <td>The total number of user impressions all of your notifications have received in aggregate.</td>\n  </tr>\n  <tr>\n    <td>**Clicks**</td>\n    <td>The total number of clicks all of your notifications have received in aggregate.</td>\n  </tr>\n  <tr>\n    <td>**CTR**</td>\n    <td>The rate at which users are clicking on your notifications, calculated as the ratio of clicks to impressions.</td>\n  </tr>\n\t<tr>\n    <td>**Turn Off**</td>\n    <td>The rate at which users are turning off notifications for your experience directly from your notifications, calculated as the ratio of turn off actions to impressions.</td>\n  </tr>\n\t<tr>\n    <td>**Dismiss**</td>\n    <td>The rate at which users are dismissing your notifications, calculated as the ratio of dismiss actions to impressions.</td>\n  </tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Method of Accessing Local Animation Data in Lua\nDESCRIPTION: Shows an incorrect way to access local animation data directly from ServerStorage, which can lead to conflicts with other rigs sharing the same name. This method should be avoided.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/editor.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal myAnim = ServerStorage.RBX_ANIMSAVES.myRig.myAnimation\n-- Can conflict with other rigs sharing the same name\n```\n\n----------------------------------------\n\nTITLE: HTML Link Collection for Roblox Educational Platforms\nDESCRIPTION: Compilation of international educational websites offering Roblox game development courses, organized by country\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/roblox-educators.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://cce.tctc.edu/wconnect/CourseStatus.awp?&amp;course=191XDKC71202\" title=\"TriCounty Technical College\">TriCounty Technical College</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Styling and Scaling in Roblox UI\nDESCRIPTION: Demonstrates the use of TextLabel properties such as TextScaled and RichText to control text layout and styling. TextScaled allows text to fill the parent UI element, while RichText enables markup for text formatting.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/immersive-narrative.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nClass.TextLabel.TextScaled\nClass.TextLabel.RichText\n```\n\n----------------------------------------\n\nTITLE: Initializing LaserRenderer Module in Lua\nDESCRIPTION: Sets up the LaserRenderer module with a constant for shot duration and a createLaser function skeleton.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal LaserRenderer = {}\n\nlocal SHOT_DURATION = 0.15 -- Time that the laser is visible for\n\n-- Create a laser beam from a start position towards an end position\nfunction LaserRenderer.createLaser(toolHandle, endPosition)\n\nend\n\nreturn LaserRenderer\n```\n\n----------------------------------------\n\nTITLE: Team Reset Handler in Roblox Lua\nDESCRIPTION: Server-side logic for resetting teams and moving players back to the lobby after a round ends.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/add-rounds.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n\t\t-- Send everyone to the lobby\n\t\tplayerAddedConnection:Disconnect()\n\t\tneutralSpawn.Neutral = true\n\t\tspawnPlayersInLobby(Players:GetPlayers())\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Components for Roblox Share Information in JSX\nDESCRIPTION: JSX code that creates a styled grid layout explaining Roblox's own revenue share. The component uses Material UI Grid and Chip elements to visualize the 17% portion of revenue that goes to Roblox to cover ongoing services and operating costs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/earn-on-roblox.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"17%\" size=\"large\" style={{backgroundColor:\"#004F80\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Roblox share\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Referencing a Part in Roblox Luau\nDESCRIPTION: Simple code snippet showing how to reference a part using the script.Parent property in Roblox Luau.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal pointPart = script.Parent\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid Layout in React\nDESCRIPTION: This snippet initializes a responsive Grid layout using React, allowing for dynamic content arrangement in the user interface. It leverages Material-UI components for layout management.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Grid\n    alignItems=\"stretch\"\n    container\n    direction=\"row\">\n\n<Grid item Large={7} XSmall={12} direction=\"column\">\n\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe width=\"880\" height=\"495\" src=\"https://www.youtube-nocookie.com/embed/eqW9SINYeWg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen style={{position: \"absolute\", top: 0, left: 0, width: \"95%\", height: \"95%\"}}></iframe>\n</div>\n\n</Grid>\n\n<Grid item Large={5} XSmall={12} direction=\"column\">\n\n**User Interface Design** is the discipline of planning and implementing UI elements that either provide essential information for gameplay, or teach players how to complete unique user flows within your experiences.\n\nYou'll learn how to recreate high-quality UI elements for a first-person shooter laser tag experience by following step-by-step processes and best practices for following an art style, wireframing the structure and flow of UI information, and implementing UI designs within Studio.\n\nThis course is intended for readers who are familiar\nwith general building concepts and tools in Roblox Studio. If you need help\nlearning how to build an environment and navigating Studio's UI, try the [core curriculum](../core/index.md).\n</Grid>\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Internal Documentation Link Syntax in Markdown\nDESCRIPTION: Illustrates the correct syntax for creating relative links to other pages within the Roblox Documentation site, including the .md file extension.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/STYLE.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Meshes](../parts/meshes.md)\n[Merch Booth](../resources/modules/merch-booth.md)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Animation in Animation Editor\nDESCRIPTION: Demonstrates how to create a new animation, name it, and add rig parts to the Animation Editor for custom animation design\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/animations-and-feedback.md#2025-04-21_snippet_1\n\nLANGUAGE: instructions\nCODE:\n```\n1. In Animation Editor, type new animation name\n2. Click Create\n3. Click (+) icon\n4. Select 'Add All' to include rig parts\n5. Adjust animation length as needed\n```\n\n----------------------------------------\n\nTITLE: Calculating Second Month Desktop Subscription Revenue\nDESCRIPTION: Mathematical calculation showing the Robux earned from a $9.99 desktop subscription from the second month onward with no platform fee\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/subscriptions.md#2025-04-21_snippet_6\n\nLANGUAGE: math\nCODE:\n```\n999 = 999\n```\n\n----------------------------------------\n\nTITLE: Card Layout for Core Curriculum - React (JavaScript)\nDESCRIPTION: This snippet creates a card layout for the core curriculum using React components to provide structured educational content for Roblox Studio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/curriculum-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>Core</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nStart here for a comprehensive introduction to creating in Studio! It covers\neverything you need to know about creating a simple, but polished experience from scratch.\n</Typography>\n<>\n<Grid\n    alignItems=\"stretch\"\n    container\n    direction=\"row\">\n<Grid item Large={6} XSmall={12} direction=\"column\">\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe src=\"https://www.youtube-nocookie.com/embed/zi0hIuPDyWc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen  style={{position: \"absolute\", top: 0, left: 0, width: \"90%\", height: \"90%\"}}></iframe>\n</div>\n</Grid>\n<Grid item Large={6} XSmall={12} direction=\"column\">\n<>\n<Stepper activeStep={3} orientation=\"vertical\">\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Create the basic structure of the world with in-Studio assets.\">\n<h5 style={{marginTop: 36}}>Build</h5>\n</StepLabel>\n</Step>\n<Step style={{marginTop: -36}}>\n<StepLabel\n optional=\"Create the gameplay for the experience using Luau scripts.\">\n<h5 style={{marginTop: 36}}>Script</h5>\n</StepLabel>\n</Step>\n<Step style={{marginTop: -36}}>\n<StepLabel optional=\"Add lighting, visual effects, and high-quality 3D assets.\" >\n<h5 style={{marginTop: 36}}>Polish</h5>\n</StepLabel>\n</Step>\n</Stepper>\n</>\n</Grid>\n</Grid>\n</>\n<a href=\"../curriculums/core/index.md\">\n  <Button\n    variant=\"contained\"\n    size=\"large\">\n  Start creating\n  </Button>\n</a>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Developer Product Icons - REST API\nDESCRIPTION: This endpoint retrieves icons for localized developer products specified by the developerProductId. Requires valid authentication to access the necessary scopes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nGET v1/developer-products/{developerProductId}/icons\n```\n\n----------------------------------------\n\nTITLE: Roblox Service Locations Reference Table\nDESCRIPTION: A markdown table defining key Roblox service locations and their intended uses, including script execution contexts and replication behavior.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/engine-comparisons/script-locations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nLocation | Description\n:--- | :---\nWorkspace | Represents the game world. This location works well for server scripts that attach directly to objects and control their behavior.\nReplicatedFirst | Contains objects that replicate to the client before anything else. This location is ideal for the absolute minimum set of objects and client scripts necessary to display a loading screen.\nReplicatedStorage | Contains objects that are replicated to both the client and the server. This location is ideal for `Class.ModuleScript\\|ModuleScripts` that you want to use on both the server and the client. `Class.LocalScript\\|LocalScripts` do not run from this location, but `Class.Script\\|Scripts` with a run context of `Client` do.\nServerScriptService | Contains server scripts. This location is ideal for scripts that need to access server-side functionality or objects, such as game logic and cloud storage.\nServerStorage | Contains server-side objects. This location is ideal for large objects that don't need to be immediately replicated to clients when they join an experience. Scripts do not run from this location, but you can store server-side `Class.ModuleScript\\|ModuleScripts` here.\nStarterPlayer.StarterCharacterScripts | Contains `Class.LocalScript\\|LocalScripts` that run when the character spawns.\nStarterPlayer.StarterPlayerScripts | Contains general-purpose `Class.LocalScript\\|LocalScripts` that run when the player joins the experience.\nStarterGui | Contains GUI elements that the client displays when it loads the game. `Class.LocalScript\\|LocalScripts` can run from this location. This location is ideal for scripts that modify the game's user interface, such as adding buttons, menus, and pop-ups.\nStarterPack | Generally only contains `Class.Tool\\|Tools`, but can also include `Class.LocalScript\\|LocalScripts` for setting up player backpacks.\n```\n\n----------------------------------------\n\nTITLE: Example Operation Object Format\nDESCRIPTION: Illustrates the structure of an Operation object returned from a long-running request in JSON format, providing fields for path, completion status, response, and metadata.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"v1/assets/12345/operation/xyz\",\n  \"done\": true,\n  \"response\": {\n    \"value1\": \"myValue\",\n    \"value2\": 1234\n  },\n  \"metadata\": {\n    \"metadata1\": \"string\",\n    \"metadata2\": 5678\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Blender Hotkey Commands for Character Testing\nDESCRIPTION: Essential Blender hotkey commands used for testing character models, including hiding/showing bones, rotation controls, and pose reset commands.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/testing/blender.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nH - Hide selected bones\nAlt+H (⌥H) - Reveal hidden bones\nR - Rotate selected bone\nRight-click - Cancel rotation\nLeft-click - Confirm rotation\nAlt+R (⌥R) - Clear rotation in Pose Mode\n```\n\n----------------------------------------\n\nTITLE: Face Control: LeftNoseWrinkler\nDESCRIPTION: This section describes the `LeftNoseWrinkler` face control, which raises the character's left nostril, pulls the brow down slightly, and wrinkles the left side of the nose. It references the `Class.FaceControls.LeftNoseWrinkler` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Defining V1 Resource Specification Extensions\nDESCRIPTION: This snippet defines specification extensions used in V1 resources, outlining each extension's purpose, its location within the OpenAPI description, and its data type.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/openapi.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"| Extension                                         | Location          | Description                                                                                       |\\n|-------------------------------------------------  |------------------ |-------------------------------------------------------------------------------------------------  |\\n| `x-roblox-cloud-api-operation`                    | Operation Object  | Boolean. Whether the operation is an Open Cloud operation.                                        |\\n| `x-roblox-cloud-api-operation-name`               | Operation Object  | String. The name of the operation.                                                                |\\n| `x-roblox-cloud-api-operation-code-samples`       | Operation Object  | Object. A list of code samples, an object with the language/title and the corresponding script.   |\\n| `x-roblox-cloud-api-operation-throttling-limit`   | Operation Object  | Object. The throttling limits for the operation.                                                  |\"\n```\n\n----------------------------------------\n\nTITLE: Engagement Rewards Feature Package Card Implementation\nDESCRIPTION: JSX implementation of a material card component displaying the Engagement Rewards feature package information with setup instructions and image.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/index.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n<CardContent>\n<h2 style={{marginBottom: 12}}>Engagement rewards</h2>\n<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\nThe **Engagement Rewards** feature package is a customizable framework for offering in-game rewards for certain player activities, such as daily logins, login streaks, and time played.\n</Typography>\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Descendant Parts of Persistent Model\nDESCRIPTION: This Lua snippet shows how to access descendant parts of a persistent model right after a player joins. It highlights that a persistent model is available immediately, hence `WaitForChild` is used similarly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/streaming.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\n-- Persistent model does not exist at load time; use WaitForChild()\nlocal model = Workspace:WaitForChild(\"Model\")\n\n-- Descendant parts stream in with model and are immediately accessible\nlocal meshPart = model.MeshPart\nlocal part = model.Part\n```\n\n----------------------------------------\n\nTITLE: Initializing Blaster Selection UI Controller in Lua\nDESCRIPTION: This script initializes the blaster selection UI system, setting up blaster buttons and connecting reset functionality when the UI is enabled. It also sets the default selected index to 1.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\nlocal setupBlasterButtons = require(script.setupBlasterButtons)\nlocal connectResetSelectionOnEnabled = require(script.connectResetSelectionOnEnabled)\n\nlocal localPlayer = Players.LocalPlayer\nlocal gui = localPlayer.PlayerGui:WaitForChild(\"PickABlasterGui\")\n\nsetupBlasterButtons(gui)\nconnectResetSelectionOnEnabled(gui)\ngui:SetAttribute(GuiAttribute.selectedIndex, 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Language - REST API\nDESCRIPTION: This endpoint sets the source language for the game identified by gameId. Requires appropriate permissions to modify this setting.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH /v1/source-language/games/{gameId}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked Repository with Git\nDESCRIPTION: Command to clone your forked repository to your local machine. Replace 'your-username' and 'your-fork' with your GitHub username and repository name.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/your-username/your-fork.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Without Parameters in Lua\nDESCRIPTION: Initializes a function named onTouch without parameters. This function will later be expanded to handle objects that touch the trap part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/use-parameters-and-events.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal trap = script.Parent\n\nlocal function onTouch()\n\nend\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Textures in Roblox Studio\nDESCRIPTION: This markdown snippet provides instructions for manually adding textures to an imported 3D model in Roblox Studio when they don't load correctly during the initial import process.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating-rigid/importing.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1.  In the **Asset Manager**, click the **Import** button.\n2.  Upload your image file.\n3.  After moderation clears for your image, select the `Class.MeshPart` parented within your imported `Class.Model`.\n4.  In the **TextureID** property, select the value field and add the asset ID of the texture image.\n```\n\n----------------------------------------\n\nTITLE: Calculating Voice Chat Signal Score in Lua\nDESCRIPTION: This snippet measures the voice chat signal score, based on the ratio of players using the same voice setting as the joining player and behavioral conditions pertaining to voice chat.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nvoiceChatSignalScore = (# players with same voice chat setting as joining player) / (# players on the server)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Currently Equipped Items using Lua\nDESCRIPTION: This snippet demonstrates how to disable the profile-based Inspect Menu and load the Inspect menu based on the current HumanoidDescription of a player's character. It utilizes GuiService and accesses the player's humanoid to get their current avatar description.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-inspect-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal GuiService = game:GetService(\"GuiService\")\nlocal Players = game:GetService(\"Players\")\nlocal player = Players.LocalPlayer\n\n-- Make profile-based Inspect Menu inaccessible\nGuiService:SetInspectMenuEnabled(false)\n\nlocal humanoid = player.Character and player.Character:FindFirstChildWhichIsA(\"Humanoid\")\nif humanoid then\n\t-- Get current HumanoidDescription from a player character\n\tlocal humanoidDescription = humanoid:GetAppliedDescription()\n\n\t-- Load the inspect menu from a humanoid description\n\tGuiService:InspectPlayerFromHumanoidDescription(humanoidDescription, player.Name)\nend\n```\n\n----------------------------------------\n\nTITLE: Arranging UI Objects Across Path in Roblox Lua\nDESCRIPTION: This script arranges child UI objects along a Path2D based on their control points. It dynamically adjusts the arrangement if children are added or removed from the parent container. The script calculates positions using the GetPositionOnCurveArcLength method from the Path2D class.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/2D-paths.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n```\nlocal parent = script.Parent\nlocal path = parent:FindFirstChildWhichIsA(\"Path2D\")\n\nlocal function arrangeChildren()\n\tlocal segmentCount = #path:GetControlPoints()\n\tlocal objectsToArrange = {}\n\n\tfor _, child in parent:GetChildren() do\n\t\tif child:IsA(\"GuiObject\") then\n\t\t\ttable.insert(objectsToArrange, child)\n\t\tend\n\tend\n\n\tfor idx, child in objectsToArrange do\n\t\tlocal t = idx / (#objectsToArrange + 1)\n\t\tchild.Position = path:GetPositionOnCurveArcLength(t)\n\tend\nend\n\n-- Initially arrange child UI objects across path\narrangeChildren()\n\n-- Listen for children being added/removed to adjust arrangement\nparent.ChildAdded:Connect(arrangeChildren)\nparent.ChildRemoved:Connect(arrangeChildren)\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This HTML snippet embeds a YouTube video player within a responsive container. It uses inline CSS for positioning and sizing, and includes various allowances for the iframe.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\nclassName=\"container\"\nstyle={{ position: \"relative\", paddingBottom: \"56.25%\", height: 0, marginBottom: 12 }} >\n<iframe\nsrc=\"https://www.youtube-nocookie.com/embed/EUDSIUmLjxA\"\ntitle=\"YouTube video player\"\nframeBorder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nallowFullScreen\nstyle={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\" }} ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Property Reference Example\nDESCRIPTION: Shows the correct capitalization for a Roblox Lua property reference function, used to demonstrate the importance of proper syntax.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/lesson-plans/roblox-developer/roblox-developer-2.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nFindFirstChildWhichIsA\n```\n\n----------------------------------------\n\nTITLE: Joining Player Example for Server Categorical Signal\nDESCRIPTION: An example implementation of the server categorical signal formula using GameMode as the attribute. It compares the server's GameMode (\"Survival\") with the joining player's preferred GameMode (\"Survival\").\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_GameMode = \"Survival\"\nlocal joining_player_GameMode = \"Survival\"\n\nif server_GameMode = joining_player_GameMode then\n  return 1\nelse\n  return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Blender Keyboard Shortcuts for Eye Texturing\nDESCRIPTION: Essential keyboard shortcuts used during the eye texturing process in Blender, including joining objects, changing brush size, and separating meshes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/creating/texturing-eyes.md#2025-04-21_snippet_0\n\nLANGUAGE: shortcut\nCODE:\n```\nCtrl+J (⌘+J) - Join objects\\nF - Quick brush size adjustment\\nP - Separate meshes\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Setup Avatar Cards in React\nDESCRIPTION: This snippet shows how to create card components in React to display avatar auto-setup resources. It utilizes Material-UI's Grid, Card, and Button components to present images and downloadable content for avatar templates.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/resources.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Grid container alignItems='stretch' style={{margin: -6}}>\n\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>Nature Girl - Auto-Setup</center>\n<figure>\n<center> <img src=\"../assets/art/resources/Archer-Girl-Preview.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nA comprehensive `.zip` folder of an [Avatar Auto-Setup](../avatar-setup/index.md#avatar-auto-setup) ready character model, including clothing and rigid accessory assets and PBR texture assets. <br /> <br /> \nThis Auto-Setup template is not compatible with the traditional avatar creation workflow.\n</figure>\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n<Button href=\"../assets/art/reference-files/NatureArcherGirl-AutoSetup.zip\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Download</Button>\n</CardActions>\n</Card>\n</Grid>\n\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>Stylish Male - Auto-Setup</center>\n<figure>\n<center> <img src=\"../assets/art/resources/StylizedMale-Preview.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nA comprehensive `.zip` folder of an [Avatar Auto-Setup](../avatar-setup/index.md#avatar-auto-setup) ready character model, including the base body and associated PBR textures. <br /> <br /> \nThis Auto-Setup template is not compatible with the traditional avatar creation workflow.\n</figure>\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n<Button href=\"../assets/art/reference-files/StylizedMale-AutoSetup.zip\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Download</Button>\n</CardActions>\n</Card>\n</Grid>\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Accessing Players Service in Roblox Luau\nDESCRIPTION: Code snippet showing how to get the Players service in Roblox Luau, which is needed to access player information for awarding points.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Points values\nlocal smallPoints = 10\nlocal largePoints = 50\nlocal losePoints = 100\n\n-- Services needed\nlocal Players = game:GetService(\"Players\")\n```\n\n----------------------------------------\n\nTITLE: Door Properties Configuration\nDESCRIPTION: Key configuration steps for setting up a hinged door in Roblox Studio, including creating door parts, adding attachments, and configuring the HingeConstraint. Critical properties include setting the door frame as Anchored and configuring LimitsEnabled with appropriate LowerAngle and UpperAngle values (-90 and 90 degrees).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/build-a-hinged-door.md#2025-04-21_snippet_0\n\nLANGUAGE: roblox\nCODE:\n```\n-- Door Setup Structure\nDoorFrame\n  |- FrameAttachment\n  |- HingeConstraint\n      |- Attachment0 -> DoorAttachment\n      |- Attachment1 -> FrameAttachment\n      |- LimitsEnabled = true\n      |- LowerAngle = -90\n      |- UpperAngle = 90\n\nDoor\n  |- DoorAttachment\n```\n\n----------------------------------------\n\nTITLE: Performing IntersectAsync in Roblox Lua\nDESCRIPTION: This snippet demonstrates the use of the IntersectAsync function to intersect a main part with other parts in the workspace. Dependencies include the Roblox engine and access to the Workspace service. The main parameter is the table of parts to intersect with the main part. The output is a new intersected part, which is parented to the workspace. The original parts are destroyed after the operation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/solid-modeling.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal mainPart = Workspace.Part1\nlocal otherParts = {Workspace.Part2, Workspace.Part3}\n\n-- Perform intersect operation\nlocal success, newIntersect = pcall(function()\n\treturn mainPart:IntersectAsync(otherParts)\nend)\n\n-- If operation succeeds, position it at the same location and parent it to the workspace\nif success and newIntersect then\n\tnewIntersect.Position = mainPart.Position\n\tnewIntersect.Parent = Workspace\nend\n\n-- Destroy original parts which remain intact after operation\nmainPart:Destroy()\nfor _, part in otherParts do\n\tpart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Roblox Class References\nDESCRIPTION: Key Roblox class references mentioned in the documentation for working with animatable heads including FaceControls, MeshPart, Accessory, Model, WrapLayer, and HumanoidDescription classes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/use-heads-in-studio.md#2025-04-21_snippet_0\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls\nClass.MeshPart\nClass.Accessory\nClass.Model\nClass.WrapLayer\nClass.HumanoidDescription\n```\n\n----------------------------------------\n\nTITLE: Rendering Asset Creation Sections in React\nDESCRIPTION: This code snippet maps through an array of sections, rendering content for each section including titles, descriptions, buttons, and media. It uses React components and Material-UI for styling.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/assets.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{sections.map((section, index) => (\n  <Grid item xs={12} key={index}>\n    {section.title && (\n      <Typography variant='h1'>{section.title}</Typography>\n    )}\n  <div style={{ marginTop: 16, marginBottom: 48 }}>\n    {section.description && (\n      <p>{section.description}</p>\n    )}\n    {section.buttons && section.buttons.map((button, btnIndex) => (\n      <Button\n        key={btnIndex}\n        style={{ marginTop: 8, marginRight: 24 }}\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"large\"\n        href={button.href}\n      >\n        {button.text}\n      </Button>\n    ))}\n  </div>\n    {section.stats && (\n      <Grid item xs={12} sm={12} md={12} lg={12} style={{ textAlign: \"center\", marginTop: -96, marginBottom: 96 }}>\n        <Grid container spacing={4}>\n          {section.stats.map((stat, index) => (\n            <Grid item xs={12} sm={6} md={4} key={index}>\n              <Card variant=\"filled\">\n                <CardContent>\n                  <Typography variant=\"hero\" color=\"info\">{stat.header}</Typography>\n                  <Typography component=\"p\" variant=\"h2\">{stat.description}</Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n    )}\n    {section.content.map((section, index) => (\n      <Grid container spacing={8} key={index} style={{ marginTop: 24 }}>\n        <Grid item xs={12} md={5}>\n          <div>\n            <h2>{section.title}</h2>\n            <p>{section.description}</p>\n            <div style={{ marginTop: 24, marginBottom: 48 }}>\n              {section.links && section.links.map((link, linkIndex) => (\n                <a href={link.href} key={linkIndex}>\n                  <Typography variant='buttonLarge'>{link.text}</Typography><br />\n                </a>\n              ))}\n              {section.buttons &&  section.buttons.map((button, btnIndex) => (\n                <Button\n                  key={btnIndex}\n                  style={{ marginRight: 24, marginBottom:24 }}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  href={button.href}\n                >\n                  {button.text}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={7}>\n          {section.image && (\n            <img\n              style={{ width: '100%', height: 'auto' }}\n              src={section.image}\n              alt={section.title}\n            />\n          )}\n          {section.video && (\n            <iframe\n              style={{ width: '100%', aspectRatio: 16/9, height: 'auto' }}\n              src={section.video}\n              title=\"YouTube video player\"\n              frameborder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n              referrerpolicy=\"strict-origin-when-cross-origin\"\n              allowfullscreen\n            ></iframe>\n          )}\n        </Grid>\n      </Grid>\n    ))}\n  </Grid>\n))}\n```\n\n----------------------------------------\n\nTITLE: Grid Layout Component with Video Embed\nDESCRIPTION: React/JSX code for a grid layout component containing an embedded YouTube video about custom skyboxes, with responsive styling and typography elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid item container XSmall={12} Medium={6} Large={4} direction=\"row\" style={{gap: 24, marginBottom: 12}}>\n<Grid item container wrap=\"nowrap\" direction=\"column\" style={{gap: 8, flex: 1}}>\n\n<div class=\"container\"\nstyle={{position: \"relative\", paddingBottom: \"56.25%\", height: 0}}>\n<iframe src=\"https://www.youtube-nocookie.com/embed/V-SDTfxcIF8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen  style={{position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\"}}></iframe>\n</div>\n<Typography variant='h4'>Custom skyboxes 101</Typography>\n\nApply your own custom skyboxes to your experience to add some flair and elevate your world.\n<a underline=\"none\" href=\"https://devforum.roblox.com/t/custom-skyboxes-101/2849003\">\n<Button variant=\"contained\" color=\"secondary\" size='large'\nstyle={{marginRight:8, alignSelf: 'flex-start'}}>Learn more</Button>\n</a>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Using InOut Easing Direction with UI Tweens in Roblox Lua\nDESCRIPTION: Demonstrates how to combine easing style (Cubic) with easing direction (InOut) to create tweens that start slow, speed up in the middle, and slow down at the end.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut)\nlocal tween = TweenService:Create(object, tweenInfo, {Rotation = 45})\n```\n\n----------------------------------------\n\nTITLE: Constant Value Example for Server Numerical Signal\nDESCRIPTION: An example implementation of the constant value formula for server numerical signals using GameTime as the attribute. It calculates how close the server's GameTime is to the target constant value of 1000.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_GameTime = 500\nlocal max_relevant_difference = 1000\nlocal constant_value = 1000\n\nlocal diff = math.abs(server_GameTime - constant_value)\nlocal score = math.min(diff / max_relevant_difference, 1)\n```\n\n----------------------------------------\n\nTITLE: Face Control: RightLipCornerDown\nDESCRIPTION: This section describes the `RightLipCornerDown` face control, which lowers the corners of the mouth downwards, creating a frowning expression on the avatar. It references the `Class.FaceControls.RightLipCornerDown` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Adding Local Secrets in JSON\nDESCRIPTION: This snippet demonstrates how to add local secrets in JSON format for testing purposes in Roblox. Secrets are base64-encoded and limited to specific domains. For multiple secrets, values are separated by commas.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"secretName\": [\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=\", \"*.example.com\"]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"secretName1\": [\"dGVzdDE=\", \"*.example.com\"],\"secretName2\": [\"dGVzdDI=\", \"*.example.com\"],\"secretName3\": [\"dGVzdDM=\", \"*.example.com\"]}\n```\n\n----------------------------------------\n\nTITLE: Handling Prompt Shown Event - Lua\nDESCRIPTION: This snippet connects a callback function to the promptShown event, allowing feedback when the camera prompt is presented after the printout is closed. This ensures players are notified of the camera's readiness. Can only be used within a Class.LocalScript. Requires the ReplicatedStorage service and the PhotoBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/photo-booth.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.promptShown:Connect(function()\n\tprint(\"The camera prompt is showing\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking MerchBooth UI State in Roblox\nDESCRIPTION: Shows how to check if the MerchBooth UI is currently open and retrieve the asset ID of the item being viewed if the item view is open.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal success, errorMessage = pcall(function()\n\tMerchBooth.addItemAsync(4819740796)\nend)\nif success then\n\tMerchBooth.openItemView(4819740796)\n\n\tlocal isOpen, itemId = MerchBooth.isMerchBoothOpen()\n\tprint(isOpen, itemId)\nend\n```\n\n----------------------------------------\n\nTITLE: Error Code Samples - Roblox Marketplace Validation\nDESCRIPTION: Example validation error messages showing various string format placeholders used in the Roblox validation system. These codes represent different categories of validation failures that can occur when uploading avatar items.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/validation-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n%s asset size is larger than the max allowed bounding size of %s\n%s has size larger than max allowed bounding size. The max size for type %s is [%f, %f, %f]\nMesh resolution of %d for model %s is higher than max supported number of triangles %d\n```\n\n----------------------------------------\n\nTITLE: Referencing Roblox Classes\nDESCRIPTION: References to core Roblox classes used in the accessory conversion process including Model, Accessory, and HumanoidDescription.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating/converting.md#2025-04-21_snippet_0\n\nLANGUAGE: roblox\nCODE:\n```\nClass.Model\n```\n\nLANGUAGE: roblox\nCODE:\n```\nClass.Accessory\n```\n\nLANGUAGE: roblox\nCODE:\n```\nHumanoidDescription\n```\n\n----------------------------------------\n\nTITLE: Setting Supported Languages - REST API\nDESCRIPTION: This API call sets the supported languages for the specified gameId. This action requires permissions management for games.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH /v1/supported-languages/games/{gameId}\n```\n\n----------------------------------------\n\nTITLE: Removing Sound Effect Code from ToolController in Lua\nDESCRIPTION: Modified toolActivated function with the Activate sound code removed. This is part of moving the sound effect playback so it will be heard by all players.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nlocal function toolActivated()\n\tif canShootWeapon() then\n\t\tfireWeapon()\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Setting GUI Visibility\nDESCRIPTION: Shows how to toggle the visibility of the emotes GUI interface.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nEmoteBar.setGuiVisibility(false)\n```\n\n----------------------------------------\n\nTITLE: Referencing Roblox Accessory Class\nDESCRIPTION: Class reference for the Roblox Accessory object type used for face accessories.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/create-face-accessories.md#2025-04-21_snippet_0\n\nLANGUAGE: roblox\nCODE:\n```\nClass.Accessory\n```\n\n----------------------------------------\n\nTITLE: Creating Touch Event Function in Luau\nDESCRIPTION: Defines a function that will be called when the trap part is touched, with a parameter for the touching part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/traps-with-if-statements.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- If a player touches this part, set their health to 0\n\nlocal trapPart = script.Parent\n\nlocal function onTouch(otherPart)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Constant Value Example for Player Numerical Signal\nDESCRIPTION: An example implementation of the constant value formula for player numerical signals using PowerLevel as the attribute. It calculates how close the combined PowerLevel would be to the target constant value of 5000.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal server_sum_PowerLevel = 4500\nlocal joining_player_PowerLevel = 9901\nlocal max_relevant_difference = 1500\nlocal constant_value = 5000\n\nlocal diff = math.abs(server_sum_PowerLevel + joining_player_PowerLevel - constant_value)\nlocal score = 1 - math.min(diff / max_relevant_difference, 1)\n```\n\n----------------------------------------\n\nTITLE: Creating an Outfit with Avatar Editor Service in Lua\nDESCRIPTION: This snippet demonstrates how to create an outfit using the PromptCreateOutfit function, allowing the user to save their current humanoid description as an outfit.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-editor.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal AvatarEditorService = game:GetService(\"AvatarEditorService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\nlocal character = player.Character or player.CharacterAdded:Wait()\nlocal humanoid = character:WaitForChild(\"Humanoid\")\n\nlocal currentDescription = humanoid:GetAppliedDescription()\nAvatarEditorService:PromptCreateOutfit(currentDescription, humanoid.RigType)\n\nlocal result = AvatarEditorService.PromptCreateOutfitCompleted:Wait()\nif result == Enum.AvatarPromptResult.Success then\n  -- Outfit saved!\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Sort to Price High-to-Low in Roblox MerchBooth\nDESCRIPTION: Demonstrates how to set a custom sorting function for the catalog view that sorts items by price from highest to lowest.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.setCatalogSort(function(a, b)\n\treturn a.price > b.price\nend)\n```\n\n----------------------------------------\n\nTITLE: RightEyeClosed Face Control\nDESCRIPTION: Property that controls closing of character's right eyelid. Required for Marketplace publishing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightEyeClosed\n```\n\n----------------------------------------\n\nTITLE: Redeeming Code for Roblox Mansion of Wonders Rewards\nDESCRIPTION: A redemption code that players can use in the Roblox Mansion of Wonders game to unlock the Ghastly Aura avatar item and Alchemical Antics badge.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-mansion-of-wonder/challenge-checkpoint-2.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThingsGoBoom\n```\n\n----------------------------------------\n\nTITLE: Deleting a Localized Game Icon - REST API\nDESCRIPTION: Deletes the localized game icon identified by gameId and languageCode. Requires appropriate authorization for management.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE v1/game-icon/games/{gameId}/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Adding MAX_HIT_PROXIMITY Constant in Lua\nDESCRIPTION: Adding a constant to define the maximum allowed distance between the hit position and the character being hit. This is used for validation checks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal eventsFolder = ReplicatedStorage.Events\nlocal LASER_DAMAGE = 10\nlocal MAX_HIT_PROXIMITY = 10\n```\n\n----------------------------------------\n\nTITLE: Redeem Code for Avatar Item\nDESCRIPTION: Unique identifier code used to claim a special avatar item in the Roblox Island of Move game challenge\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-island-of-move/challenge-checkpoint.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSettingTheStage\n```\n\n----------------------------------------\n\nTITLE: Registering Minimap Indicators in Lua\nDESCRIPTION: Code snippet showing how to register new tags and indicators for the minimap system within the MinimapGui.start() function. This allows adding new tracked objects that will appear on the minimap.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/battle-royale/minimap-system.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction MinimapGui.start(teamDividingAngle)\n\n\twhile not _setupFinished do\n\t\ttask.wait()\n\tend\n\n\tMinimapGui.addMapTag(\"DeliveryVehicle\", \"Bus\")\n\tMinimapGui.addMapTag(Util._clientFocusTag, \"LocalPlayerLocation\")\n\tMinimapGui.addMapTag(\"Player\")\n\tMinimapGui.addMapTag(\"Vehicle\", \"VehicleLocation\")\n\tMinimapGui.addMapTag(tag, indicatorLabel)\n```\n\n----------------------------------------\n\nTITLE: Creating a Drop Target for Dragged Items in Roblox - Lua\nDESCRIPTION: This Lua code snippet shows how to create a drop target using a widget with a TextLabel to receive dragged data. It sets up the GUI environment ready to handle drop events by preparing elements for data display post-drop action.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/build-studio-widgets.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal dragTargetWidget = plugin:CreateDockWidgetPluginGui(\"Drop Target\", widgetInfo)\ndragTargetWidget.Title = \"Drop Target\"\n\n-- This TextLabel will display what was dropped\nlocal textLabel = Instance.new(\"TextLabel\")\ntextLabel.Size = UDim2.new(1, 0, 1, 0)\ntextLabel.Text = \"Drop here...\"\ntextLabel.Parent = dragTargetWidget\n```\n\n----------------------------------------\n\nTITLE: Running Client Schema in Lua\nDESCRIPTION: The OnRun function within the client schema executes timed configurations. It initializes and plays an audio object in the scene at a specified start time. It requires a sound asset ID and provides callbacks for when the audio starts and ends.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/event-sequencer.md#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nSchema.OnRun = function()\n\tprint(\"OnRun (Client)\")\n\n\tlocal MainAudio = Schema:audio({\n\t\tStartTime = 1,\n\t\tSoundId = \"rbxassetid://1838673350\",\n\t\tOnStart = function(self)\n\t\t\tprint(\"Audio playing\")\n\t\tend,\n\t\tOnEnd = function(self)\n\t\t\tprint(\"Audio ended\")\n\t\tend\n\t})\nend\n```\n\n----------------------------------------\n\nTITLE: Node.js Ordered Data Stores API Client\nDESCRIPTION: Implements methods for interacting with Roblox Ordered Data Stores API, including list, create, and increment operations for managing leaderboard entries\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-data-stores.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios');\nconst fs = require('fs');\n\nclass DataStores {\n  constructor(configFile) {\n    this._config = JSON.parse(fs.readFileSync(configFile, 'utf-8'));\n  }\n\n  _H() {\n    return {\n      'x-api-key': this._config.api_key,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  async list(\n    datastore,\n    scope,\n    pageSize = 10,\n    orderBy = '',\n    filter = '',\n    exclusiveStartKey = ''\n  ) {\n    const url = `${this._config.api_key_url}universes/${this._config.universe_id}/orderedDataStores/${datastore}/scopes/${scope}/entries`;\n    const response = await axios.get(url, {\n      headers: this._H(),\n      params: {\n        max_page_size: pageSize,\n        order_by: orderBy,\n        filter: filter,\n        page_token: exclusiveStartKey,\n      },\n    });\n    return response.data;\n  }\n\n  async create(datastore, scope, entry, data) {\n    const url = `${this._config.api_key_url}universes/${this._config.universe_id}/orderedDataStores/${datastore}/scopes/${scope}/entries`;\n    const payload = JSON.stringify({ value: 11 });\n    const response = await axios.post(url, payload, {\n      headers: this._H(),\n      params: { id: entry },\n    });\n    return response.data;\n  }\n\n  async increment(datastore, scope, entry, incrementBy) {\n    const url = `${this._config.api_key_url}universes/${this._config.universe_id}/orderedDataStores/${datastore}/scopes/${scope}/entries/${entry}:increment`;\n    const payload = JSON.stringify({ amount: incrementBy });\n    const response = await axios.post(url, payload, { headers: this._H() });\n    return response.data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Button Action Binding in Roblox\nDESCRIPTION: This Lua code shows how to change the functionality of a button based on game context. The `collectTreasure` function is bound to the same action name but reflects different actions depending on player proximity to interactive objects. It includes dynamic updates to button title and functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/input/mobile.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal ContextActionService = game:GetService(\"ContextActionService\")\n\nlocal function collectTreasure(actionName, inputState, inputObject)\n\tif inputState == Enum.UserInputState.Begin then\n\t\tprint(\"Collect treasure\")\n\tend\nend\n\nContextActionService:BindAction(\"Interact\", collectTreasure, true, Enum.KeyCode.T, Enum.KeyCode.ButtonR1)\nContextActionService:SetTitle(\"Interact\", \"Collect\")\nContextActionService:SetPosition(\"Interact\", UDim2.new(1, -70, 0, 10))\n```\n\n----------------------------------------\n\nTITLE: Subscribing Users to Messages in Roblox Using MessagingService\nDESCRIPTION: This code snippet demonstrates how to subscribe players to a messaging topic in Roblox, allowing them to receive messages when any user is teleported to a different server. The subscription is established upon player addition and disconnects when the player's ancestry changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud-services/cross-server-messaging.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MessagingService = game:GetService(\"MessagingService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal MESSAGING_TOPIC = \"FriendServerEvent\"\n\nPlayers.PlayerAdded:Connect(function(player)\n\t-- Subscribe to the topic\n\tlocal subscribeSuccess, subscribeConnection = pcall(function()\n\t\treturn MessagingService:SubscribeAsync(MESSAGING_TOPIC, function(message)\n\t\t\tprint(message.Data)\n\t\tend)\n\tend)\n\tif subscribeSuccess then\n\t\t-- Unsubscribe from topic upon player ancestry change\n\t\tplayer.AncestryChanged:Connect(function()\n\t\t\tsubscribeConnection:Disconnect()\n\t\tend)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Face Control: TongueOut\nDESCRIPTION: This section describes the `TongueOut` face control, which sticks the tip of the tongue out of the mouth. It references the `Class.FaceControls.TongueOut` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Creating a New Branch in Git\nDESCRIPTION: Command to create and switch to a new branch for your changes. Replace 'your-new-branch' with a descriptive name for your changes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b your-new-branch\n```\n\n----------------------------------------\n\nTITLE: Listing OpenAPI Description Files\nDESCRIPTION: This snippet lists the URLs where various OpenAPI description files for V1 and V2 resources can be accessed. It includes links to documentation for data stores, messaging services, universes, and general resources.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/openapi.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"# All V2 Resources\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/cloud.docs.json\\n\\n# V1 Assets\\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/assets/v1.json\\n\\n# V1 Ordered Data Stores\\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/datastores-api/ordered-v1.json\\n\\n# V1 Standard Data Stores\\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/datastores-api/v1.json\\n\\n# V1 Messaging\\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/messaging-service/v1.json\\n\\n# V1 Universes\\nhttps://github.com/Roblox/creator-docs/blob/main/content/en-us/reference/cloud/universes-api/v1.json\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstraction for In-Game Shop Items in Lua\nDESCRIPTION: This code snippet demonstrates how to create an abstraction for managing backpack items in an in-game shop. It uses a function that takes a backpack name as input and returns its price and capacity, simplifying the process of adding and updating multiple items.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/coding-concept-abstraction.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction getBackpackInfo(backpackName)\n    local backpacks = {\n        [\"Yellow Backpack\"] = {price = 10, capacity = 5},\n        [\"Violet Backpack\"] = {price = 25, capacity = 10},\n        -- Add more backpacks here\n    }\n    return backpacks[backpackName].price, backpacks[backpackName].capacity\nend\n\n-- Usage\nlocal price, capacity = getBackpackInfo(\"Yellow Backpack\")\nprint(\"Yellow Backpack - Price: \" .. price .. \" Robux, Capacity: \" .. capacity .. \" items\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Permission Prompt in Lua\nDESCRIPTION: This LocalScript demonstrates how to prompt users to enable notifications for an experience. It checks if the user is eligible to receive the prompt, displays it if they are, and sets up an event listener for when the prompt is closed. The script uses ExperienceNotificationService to handle the permission flow.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/promotion/experience-notifications.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ExperienceNotificationService = game:GetService(\"ExperienceNotificationService\")\n\n-- Function to check whether the player can be prompted to enable notifications\nlocal function canPromptOptIn()\n\tlocal success, canPrompt = pcall(function()\n\t\treturn ExperienceNotificationService:CanPromptOptInAsync()\n\tend)\n\treturn success and canPrompt\nend\n\nlocal canPrompt = canPromptOptIn()\nif canPrompt then\n\tlocal success, errorMessage = pcall(function()\n\t\tExperienceNotificationService:PromptOptIn()\n\tend)\nend\n\n-- Listen to opt-in prompt closed event\nExperienceNotificationService.OptInPromptClosed:Connect(function()\n\tprint(\"Opt-in prompt closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Player Weapon Removal in Transition Phase for Roblox\nDESCRIPTION: This section of PlayerManager defines functions for removing weapons from players during transitions between matches. It ensures that each player's character and backpack are cleaned of any weapons, maintaining a level playing field for new matches.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/cleanup-and-reset.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function removePlayerWeapon(whichPlayer)\n  -- Check to see if a player exist in case they disconnected or left.\n  if whichPlayer then\n    local character = whichPlayer.Character\n\n    -- If the player has it currently on their character\n    local weapon = character:FindFirstChild(\"Weapon\")\n\n    if weapon then\n      weapon:Destroy()\n    end\n\n    -- If the player has the weapon in their backpack\n    local backpackWeapon = whichPlayer.Backpack:FindFirstChild(\"Weapon\") \n\n    if backpackWeapon then\n      backpackWeapon:Destroy()\n    end\n  else\n    print(\"No player to remove weapon\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Switching to Main Branch in Git\nDESCRIPTION: Command to checkout the main branch in the repository. This ensures you're starting from the latest official version before creating a new branch.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Translating Individual Strings with Roblox LocalizationService\nDESCRIPTION: This code shows how to translate individual strings using the Translator:Translate() method. It retrieves a Spanish translator and translates the word \"Screen\" using the source string as a reference from the localization table.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/localization/localize-with-scripting.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal LocalizationService = game:GetService(\"LocalizationService\")\n\n-- Load Translator for \"es\". Wrap the function within a pcall() to protect against failures.\nlocal res, translator = pcall(function()\n\treturn LocalizationService:GetTranslatorForLocaleAsync(\"es\")\nend)\n\nif res then\n\t-- Use Translate function, providing object context and string\n\tlocal sourceTranslation = translator:Translate(game, \"Screen\")\n\tprint(sourceTranslation) -- Expected Output: \"Pantalla\"\nelse\n\tprint('GetTranslatorForPlayerAsync failed: ' .. translator)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic While Loop Structure in Lua\nDESCRIPTION: This loop in Lua shows the fundamental structure of a while loop, where instructions inside the loop are repeatedly executed as long as the condition (here, 'true') remains satisfied.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#2025-04-21_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nwhile true do\n\t-- Instructions\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Equip Effect in Lua\nDESCRIPTION: Customizes the particle effect shown when a player equips an item from the merch booth. Creates a custom ParticleEmitter with specific properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nlocal myParticleEmitter = Instance.new(\"ParticleEmitter\")\nmyParticleEmitter.SpreadAngle = Vector2.new(22, 22)\nmyParticleEmitter.Lifetime = NumberRange.new(0.5, 1.5)\nmyParticleEmitter.Shape = Enum.ParticleEmitterShape.Sphere\nmyParticleEmitter.Transparency = NumberSequence.new(0, 1)\nmyParticleEmitter.RotSpeed = NumberRange.new(200, 200)\n\nMerchBooth.configure({\n\tparticleEmitterTemplate = myParticleEmitter\n})\n```\n\n----------------------------------------\n\nTITLE: Calculating direction vector in Lua\nDESCRIPTION: This snippet calculates the final direction vector by multiplying the normalized targetDirection with the MAX_LASER_DISTANCE. This extended vector is then used for raycasting to simulate the laser's path.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n       local targetDirection = (mouseLocation - tool.Handle.Position).Unit\n\n       -- The direction to fire the weapon, multiplied by a maximum distance\n       local directionVector = targetDirection * MAX_LASER_DISTANCE\n   end\n```\n\n----------------------------------------\n\nTITLE: Emulating Legacy Chat System SetExtraData using TextChatService\nDESCRIPTION: This snippet demonstrates how to set additional attributes on players to customize chat message appearances using Class.TextChatService. It provides an example of setting color attributes on a player upon being added to the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/chat/in-experience-text-chat.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- An example of setting extra data on a speaker in the legacy chat system\nChatService.SpeakerAdded:Connect(function(playerName)\n\tlocal speaker = ChatService:GetSpeaker(playerName)\n\tspeaker:SetExtraData(\"NameColor\", Color3.fromRGB(255, 255, 55))\n\tspeaker:SetExtraData(\"ChatColor\", Color3.fromRGB(212, 175, 55))\n\tspeaker:SetExtraData(\"Tags\", {{TagText = \"YourTagName\", TagColor = Color3.fromRGB(0, 255, 0)}, {TagText = \"OtherTagName\", TagColor = Color3.fromRGB(255, 0, 0)}})\nend)\n```\n\n----------------------------------------\n\nTITLE: Redeeming Code for Mansion of Wonder Rewards in Roblox\nDESCRIPTION: This is a redemption code to be used in the specified Roblox game world to unlock the Tomes of the Magus avatar item and Master of the Mansion badge after completing the third challenge checkpoint.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-mansion-of-wonder/challenge-checkpoint-3.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nParticleWizard\n```\n\n----------------------------------------\n\nTITLE: React Button Component\nDESCRIPTION: This snippet displays a Button component that links to the application form. It uses the React Button component to provide a call to action for developers to apply to the Partner Program.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/brand-developer-directory.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button href=\"https://survey.roblox.com/jfe/form/SV_802xyrv9VHb7VHM\" size='large' variant='contained' style={{width:200}}>Apply</Button>\n```\n\n----------------------------------------\n\nTITLE: User Information Response - JSON with Profile Scope\nDESCRIPTION: This JSON example demonstrates the response format when retrieving user information with the profile scope enabled. It includes various user metadata such as the Roblox user ID, display name, creation time, and avatar image.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"sub\": \"1516563360\",\\n  \"name\": \"exampleuser\",\\n  \"nickname\": \"exampleuser\",\\n  \"preferred_username\": \"exampleuser\",\\n  \"created_at\": 1584682495,\\n  \"profile\": \"https://www.roblox.com/users/1516563360/profile\",\\n  \"picture\": \"https://tr.rbxcdn.com/03dc2a9abe7b1aacaaf93ea46d5c0646/150/150/AvatarHeadshot/Png\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Examining the StoryManager Script Structure in Lua\nDESCRIPTION: This script outlines the basic framework for a story game in Roblox. It includes global variables, a main game loop, and placeholders where new code will be added. The script uses the StoryMaker module to reset, write, and manage game flow.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/start-coding.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- GLOBAL VARIABLES\nlocal storyMaker = require(script:WaitForChild(\"StoryMaker\"))\n\n-- Code controlling the game\nlocal playing = true\n\nwhile playing do\n\tstoryMaker:Reset()\n\n\t-- Code story between the dashes\n\t-- =============================================\n\n\n\t-- =============================================\n\n\t-- Add the story variable between the parenthesis below\n\tstoryMaker:Write()\n\n\t-- Play again?\n\tplaying = storyMaker:PlayAgain()\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information from Roblox OAuth2 API\nDESCRIPTION: Example response from the user information endpoint (/v1/userinfo) when called with a valid access token and appropriate scopes (openid or openid+profile). Returns basic user profile data including ID, name, nickname, and profile URL.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/auth/oauth2-develop.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"12345678\",\n  \"name\": \"Jane Doe\",\n  \"nickname\": \"robloxjanedoe\",\n  \"preferred_username\": \"robloxjanedoe\",\n  \"created_at\": 1607354232,\n  \"profile\": \"https://www.roblox.com/users/12345678/profile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Scripting Game Mechanics in Lua for Roblox\nDESCRIPTION: This snippet represents the core scripting tasks students will complete, including collecting items, selling items, and buying upgrades. The actual code is not provided in the lesson plan, but these are the key scripting concepts covered.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/lesson-plans/roblox-developer-lesson.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Example placeholder for scripting tasks\n-- Actual code would be implemented by students\n\n-- Collecting Items\nfunction collectItem()\n    -- Code for item collection\nend\n\n-- Selling Items\nfunction sellItems(playerItems, playerGold)\n    -- Code for selling items\nend\n\n-- Buying Upgrades\nfunction giveUpgrade()\n    -- Code for upgrading\nend\n\n-- Event listener example\nclickDetector.MouseClick:Connect(function()\n    -- Upgrade functionality\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking raycast hit in Lua\nDESCRIPTION: This snippet checks if the raycast hit anything. If it did, it assigns the position of the hit object to the hitPosition variable. Otherwise, it calculates the end position of the laser based on MAX_LASER_DISTANCE.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal weaponRaycastResult = workspace:Raycast(tool.Handle.Position, directionVector, weaponRaycastParams)\n\n   -- Check if any objects were hit between the start and end position\n   local hitPosition\n   if weaponRaycastResult then\n   \thitPosition = weaponRaycastResult.Position\n   end\n```\n\n----------------------------------------\n\nTITLE: Configuring MerchBooth Visual Settings in Lua\nDESCRIPTION: LocalScript that customizes the MerchBooth's appearance by setting background color, text properties, and UI functionality options. Demonstrates how to configure visual elements of the merch booth interface.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.configure({\n\tbackgroundColor = Color3.fromRGB(220, 210, 200),\n\ttextSize = 17,\n\ttextFont = Enum.Font.Fondamento,\n\ttextColor = Color3.fromRGB(20, 20, 20),\n\tuseFilters = false\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Infinite While Loop Syntax in Lua\nDESCRIPTION: This Lua code snippet illustrates an infinite while loop that repeatedly executes instructions inside the loop, specifically indicated by the true condition.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nwhile true do\n\tprint(\"This loop is running\")\nend\n```\n\n----------------------------------------\n\nTITLE: Core ControllerManager Setup in Roblox Studio\nDESCRIPTION: Initial configuration for creating a custom character controller with RootPart, ControllerManager, and sensors\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/character-controllers.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Setup steps for ControllerManager\n1. Choose a Part/MeshPart as RootPart\n2. Group part in a Model\n3. Add ControllerManager to model\n```\n\n----------------------------------------\n\nTITLE: Vertical Spread Blaster Directions in Lua\nDESCRIPTION: Extended version of blast direction calculation supporting vertical laser beam spread with dynamic axis rotation\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/gameplay-scripting/detect-hits.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif numLasers == 1 then\n\ttable.insert(directions, originCFrame.LookVector)\nelseif numLasers > 1 then\n\tlocal leftAngleBound = laserSpreadDegrees / 2\n\tlocal rightAngleBound = -leftAngleBound\n\tlocal degreeInterval = laserSpreadDegrees / (numLasers - 1)\n\tfor angle = rightAngleBound, leftAngleBound, degreeInterval do\n\t\tlocal direction\n\t\tif spreadDirection == \"vertical\" then\n\t\t\tdirection = (originCFrame * CFrame.Angles(math.rad(angle), 0, 0)).LookVector\n\t\telse\n\t\t\tdirection = (originCFrame * CFrame.Angles(0, math.rad(angle), 0)).LookVector\n\t\tend\n\t\ttable.insert(directions, direction)\n\tend\nend\nreturn directions\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Spawn Zone Position Data\nDESCRIPTION: Table containing position and orientation data for modular assets in the left spawn zone. Each entry specifies the asset name, CFrame position coordinates, and rotation angles.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-110, 5, 335\n0, 180, 0\n```\n\n----------------------------------------\n\nTITLE: Importing 3D Models in Roblox Studio\nDESCRIPTION: This markdown snippet outlines the steps to import a 3D model into Roblox Studio using the 3D Importer. It includes instructions for handling texture issues and manually adding textures if needed.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating-rigid/importing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In Studio, navigate to the toolbar's **Avatar** tab and select the **3D Importer**.\n2. In the file browser, select the `.fbx` file saved locally. The 3D Importer loads a preview of the object.\n   1. If textures don't load for your asset, continue to the next step and add textures manually later.\n3. Select **Import**.\n   1. The asset populates in your workspace as a `Class.Model` that contains a `Class.MeshPart` with the appropriate textures applied as a `Class.MeshPart.TextureID`.\n   2. If textures were not imported correctly, follow the instructions below to add the file manually.\n```\n\n----------------------------------------\n\nTITLE: Item Purchase System Implementation in Luau\nDESCRIPTION: Example implementation of a shop system where players can purchase items using coins. The system includes verification of sufficient funds and updating player coin balance.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/roblox-for-the-ap-csp-create-performance-task.md#2025-04-21_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nbuyItem(itemToBuy) -- Main algorithm for handling item purchases\nverifyPurchase() -- Checks if player has enough coins\npurchaseItem() -- Processes the purchase and updates coin balance\ngetCost() -- Returns item cost from a dictionary\n```\n\n----------------------------------------\n\nTITLE: Tracking Sink Event for Item Purchase in Lua\nDESCRIPTION: Log economy events for resource expenditure, tracking player spending on in-game items with specific transaction details\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/economy-events.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\n\n-- After level 2 completion\nAnalyticsService:LogEconomyEvent(\n    player,\n    Enum.AnalyticsEconomyFlowType.Sink,\n    \"Coins\", -- Currency name\n    80, -- Cost\n    20, -- Balance after transaction\n    Enum.AnalyticsEconomyTransactionType.Shop.Name,\n    \"DoubleJumpUpgrade\" -- Item SKU\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hinge Constraints in Roblox\nDESCRIPTION: This snippet explains how to configure a `Class.HingeConstraint` for an assembly in Roblox, allowing two objects to rotate together around a specified axis. It outlines the key parameters needed for establishing the rotational behavior, including attachment overlap position and torque settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-spinning-objects.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nTo demonstrate this process, you will add a propeller assembly with two objects to your workspace with attachments in both objects that a `Class.HingeConstraint` constraint references to spin the propeller `3` radians per second (about half a full rotation per second) along the Y axis at a constant angular velocity while the base of the propeller remains stationary.\n```\n\n----------------------------------------\n\nTITLE: Logging Funnel First Step on Player Join in Roblox\nDESCRIPTION: Demonstrates how to start a funnel immediately when a player joins the game by using the PlayerAdded event to log the initial onboarding step\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/analytics/funnel-events.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal AnalyticsService = game:GetService(\"AnalyticsService\")\nlocal Players = game:GetService(\"Players\")\n\nPlayers.PlayerAdded:Connect(function(player)\n    AnalyticsService:LogOnboardingFunnelStepEvent(\n        player,\n        1, -- Step number\n        \"Player Joined\" -- Step name\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Awarding Points Over Time\nDESCRIPTION: Implement a loop to increment player points every second for all active players\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  task.wait(1)\n  local playerList = Players:GetPlayers()\n  for currentPlayer = 1, #playerList do\n    local player = playerList[currentPlayer]\n    local points = player.leaderstats.Points\n    points.Value += 1\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Shortcuts for Duplicating Keyframes in Roblox Animation Editor\nDESCRIPTION: Demonstrates the keyboard shortcut sequence to duplicate keyframes in the Roblox Animation Editor. The process involves selecting keyframes, copying with Ctrl+C/⌘+C, moving the scrubber, and pasting with Ctrl+V/⌘+V.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/animation/editor.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Navigate to the **timeline** and select one or more keyframes. Every selected keyframe is now surrounded by a blue border.\n1. Press <kbd>Ctrl</kbd><kbd>C</kbd> (<kbd>⌘</kbd><kbd>C</kbd>). Every selected keyframe copies to your clipboard.\n1. Move the **scrubber** to a new frame position.\n1. Press <kbd>Ctrl</kbd><kbd>V</kbd> (<kbd>⌘</kbd><kbd>V</kbd>). The keyframe(s) paste into the new frame position.\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Parts for Left Top Roof in Roblox\nDESCRIPTION: Specific measurements for placing block parts to create the left section of the top roof in the Environment Art sample. Includes Size and CFrame.Position properties for seven different blocks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_22\n\nLANGUAGE: Roblox\nCODE:\n```\nSize: 126, 15, 90\nCFrame.Position: -92, 28.5, 325\n\nSize: 35, 15, 40\nCFrame.Position: -137.5, 28.5, 260\n\nSize: 25, 15, 40\nCFrame.Position: -97.5, 28.5, 260\n\nSize: 35, 15, 15\nCFrame.Position: -72.5, 28.5, 272.5\n\nSize: 25, 15, 75\nCFrame.Position: -42.5, 28.5, 242.5\n\nSize: 100, 15, 35\nCFrame.Position: -105, 28.5, 222.5\n\nSize: 65, 15, 10\nCFrame.Position: -62.5, 28.5, 200\n```\n\n----------------------------------------\n\nTITLE: Handling Button Press Event in Lua\nDESCRIPTION: Implements a function to detect when a humanoid touches the button, and calls the startTimer function in response.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/create-a-timed-bridge.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function buttonPressed(otherPart)\n   local character = otherPart.Parent\n   local humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n   if humanoid then\n      startTimer()\n   end\nend\n\nbutton.Touched:Connect(buttonPressed)\n```\n\n----------------------------------------\n\nTITLE: Configuring SpawnWithFriends Module in Lua\nDESCRIPTION: Example of configuring the SpawnWithFriends module with custom settings for teleportation behavior and logging.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/spawn-with-friends.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SpawnWithFriends = require(ReplicatedStorage:WaitForChild(\"SpawnWithFriends\"))\n\nSpawnWithFriends.configure({\n\tteleportToFriendOnRespawn = true,\n\tteleportDistance = 5,\n\tmaxCharacterVelocity = 48,\n\tbypassFriendshipCheck = false,\n\tshowLogs = false\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Player Keys in getKey Module Function\nDESCRIPTION: Enhances the getKey function to update the player's key count in the leaderboard.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nfunction TreasureManager.getKey(keyPart, whichCharacter)\n\tlocal playerKeys = getPlayerKeys(whichCharacter)\n\tplayerKeys.Value = playerKeys.Value + keyDrop\n\tkeyPart:Destroy()\nend\n```\n\n----------------------------------------\n\nTITLE: Preparing Players for Match in Lua\nDESCRIPTION: Defines `preparePlayer`, a local function setting a player's `RespawnLocation` and forcing a character reload, to manage individual player setups as they are moved in the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/managing-players.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal activePlayers = {}\n\n-- Local Functions\nlocal function onPlayerJoin(player)\n\tplayer.RespawnLocation = lobbySpawn\nend\n\nlocal function preparePlayer(player, whichSpawn)\n\tplayer.RespawnLocation = whichSpawn\nend\n```\n\n----------------------------------------\n\nTITLE: Tweening Canvas Group Color in Roblox Lua\nDESCRIPTION: Demonstrates how to modify an entire CanvasGroup's color, affecting all child elements simultaneously\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal TweenService = game:GetService(\"TweenService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal PlayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\")\nlocal ScreenGui = PlayerGui:WaitForChild(\"ScreenGui\")\nlocal canvasGroup = ScreenGui:WaitForChild(\"CanvasGroup\")\n\nlocal targetColor = Color3.fromRGB(255, 0, 0)\n\nlocal tweenInfo = TweenInfo.new(2)\nlocal tween = TweenService:Create(canvasGroup, tweenInfo, {GroupColor3 = targetColor})\n\ntween:Play()\n```\n\n----------------------------------------\n\nTITLE: Configuring Top Trim Assets in Roblox\nDESCRIPTION: Code snippet showing the CFrame position and orientation values for placing top trim assets around a roof perimeter. Includes coordinates for ExtTrimBLong and ExtTrimBCorner pieces.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_32\n\nLANGUAGE: Roblox\nCODE:\n```\nCFrame.Position: -48, 37, 285\nCFrame.Orientation: 0, -90, 0\n\nCFrame.Position: -8, 37, 285\nCFrame.Orientation: 0, 0, 0\n```\n\n----------------------------------------\n\nTITLE: Icon Technical Requirements\nDESCRIPTION: Specifications for icon image format, resolution, and aspect ratio to ensure optimal display across Roblox platform\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/publishing/experience-icons.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Image size: 512×512 pixels\n- Aspect ratio: Square (1:1)\n- Image scaling: Readable at 150×150 pixels\n- Moderation: Must pass Roblox asset moderation\n```\n\n----------------------------------------\n\nTITLE: Initializing Services and Variables\nDESCRIPTION: This Lua code snippet initializes Roblox services and variables needed for the coin collection script. It retrieves instances of the `Workspace` and `Players` services, gets a reference to the `Coins` folder, retrieves all the coin objects within that folder, and defines a cooldown variable.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/core/scripting/script-game-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\nlocal Players = game:GetService(\"Players\")\n\nlocal coinsFolder = Workspace.World.Coins\nlocal coins = coinsFolder:GetChildren()\n\nlocal COOLDOWN = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring HingeConstraint Properties for Rotating Platforms\nDESCRIPTION: Shows the essential property configurations for a HingeConstraint to create constantly rotating platforms. The constraint is set to Motor type with specific angular velocity, acceleration and torque values to maintain consistent movement even when players interact with the platform.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/develop-a-moving-world.md#2025-04-21_snippet_6\n\nLANGUAGE: Roblox\nCODE:\n```\nHingeConstraint.ActuatorType = Motor\nHingeConstraint.AngularVelocity = [value]\nHingeConstraint.MotorMaxAcceleration = [value]\nHingeConstraint.MotorMaxTorque = [value]\n```\n\n----------------------------------------\n\nTITLE: Handling 'promptShown' Event in Roblox\nDESCRIPTION: This Lua snippet connects to the 'promptShown' event of the SurfaceArt module. It fires when a canvas interaction prompt is shown to a player. The event handler logs the canvas where the prompt is displayed. The connection occurs within a 'Class.LocalScript'.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/surface-art.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal SurfaceArt = require(ReplicatedStorage:WaitForChild(\"SurfaceArt\"))\n\nSurfaceArt.promptShown:Connect(function(canvas)\n\tprint(Players.LocalPlayer, canvas)\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring Attachments for Hinge Constraints in Roblox\nDESCRIPTION: This snippet provides instructions on inserting and configuring `Class.Attachment` objects for use with `Class.HingeConstraint` in Roblox. The alignment and positioning of the attachments dictate the direction and effectiveness of the rotational movement within the assembly.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/physics/create-spinning-objects.md#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n1. Insert an `Class.Attachment` object into **Head** and **Base**.\n   1. In the **Explorer** window, hover over **Head** and click the ⊕ button. A contextual menu displays.\n   1. From the menu, insert an **Attachment**.\n   1. Repeat this process for **Base**.\n   1. Rename both attachments **HeadAttachment** and **BaseAttachment**, respectively.\n```\n\n----------------------------------------\n\nTITLE: Calculating Friends Signal Score in Lua\nDESCRIPTION: This code calculates the friends signal score, which indicates the presence of preferred players in the server, offering both categorical and numerical representations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/matchmaking/attributes-and-signals.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfriendsSignalScore = hasFriends ? 1 : 0\n```\n\nLANGUAGE: lua\nCODE:\n```\nfriendsSignalScore = min(# preferred players in server, 1) / 1\n```\n\n----------------------------------------\n\nTITLE: Parenting Gold IntValue to Leaderstats\nDESCRIPTION: Parents the 'Gold' IntValue to leaderstats, which is crucial for the player to see it on the leaderboard.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerJoin(player)\n      local gold = Instance.new(\"IntValue\")\n      gold.Name = \"Gold\"\n      gold.Value = 0\n      gold.Parent = leaderstats\n   end\n```\n\n----------------------------------------\n\nTITLE: Terrain Configuration Properties\nDESCRIPTION: Specific positioning and sizing values for terrain configuration in Roblox Studio, including CFrame positions and orientations for multiple terrain blocks used to create barriers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_35\n\nLANGUAGE: Roblox\nCODE:\n```\nSize: 69, 71, 17\nCFrame.Position: 12.5, 23, -47.5\nCFrame.Orientation: 0, 0, 0\n\nSize: 89, 71, 22\nCFrame.Position: 39, 23, -18\nCFrame.Orientation: 0, -45, 0\n\nSize: 83, 71, 22\nCFrame.Position: 70.5, 23, 46\nCFrame.Orientation: 0, -90, 0\n```\n\n----------------------------------------\n\nTITLE: Getting Services in GameManager Script (Lua)\nDESCRIPTION: This Lua code snippet retrieves references to the ServerStorage and Players services in Roblox. ServerStorage is used to access module scripts, and Players is used to check player count. These services are essential for the GameManager script to function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/coding-the-game-loop.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Services\nlocal ServerStorage = game:GetService(\"ServerStorage\")\nlocal Players = game:GetService(\"Players\")\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Tables for Warning Messages in Markdown\nDESCRIPTION: HTML table structure showing warning messages and troubleshooting steps for potential issues with imported head models.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/use-heads-in-studio.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Error message</th>\n      <th>Troubleshooting</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>You have corrective X, but missing corrective Y to support it.  This may cause odd deformations.</td>\n      <td>You set a 3-corrective without setting the base 2-corrective.  The imported head will animate, but there might be strange deformations.</td>\n    </tr>\n    <!-- Additional warning message rows -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Firing Non-Replicated Functions - Script\nDESCRIPTION: This script attempts to fire a remote event with a function as an argument, illustrating the limitation that the receiving end will get 'nil'. It utilizes the ReplicatedStorage service and a remote event.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/scripting/events/remote.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal remoteEvent = ReplicatedStorage:FindFirstChildOfClass(\"RemoteEvent\")\n\nlocal function testFunction()\n\tprint(\"Hello world!\")\nend\n\n-- Fire remote event with function as an argument\nremoteEvent:FireAllClients(testFunction)\n```\n\n----------------------------------------\n\nTITLE: Handling Touched Event in Lua\nDESCRIPTION: Demonstrates how to connect a custom function to the Touched event of a BasePart. The function prints the names of the colliding parts when a collision occurs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal part = Workspace.Part\n\nlocal function onTouched(otherPart)\n\tprint(part.Name .. \" collided with \" .. otherPart.Name)\nend\n\npart.Touched:Connect(onTouched)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Foreman Configuration for Tools Management\nDESCRIPTION: This snippet demonstrates how to configure Foreman for consistent tool management across development environments. It specifies tools like Rojo and Wally along with their version numbers, enabling team-wide consistency.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/external-tools.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n\"\"\"\n[tools]\nrojo = { github = \"rojo-rbx/rojo\", version = \"7.4.1\" }\nwally = { github = \"UpliftGames/wally\", version = \"0.3.2\" }\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request for Binary Place File using cURL in Bash\nDESCRIPTION: This Bash snippet sends a POST request using cURL to publish a Roblox place with a binary place file. The request requires an API key and specific IDs for the Universe and Place. The 'Content-Type' should be 'application/octet-stream' to handle the .rbxl file.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/guides/usage-place-publishing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --verbose --location POST 'https://apis.roblox.com/universes/v1/{universeId}/places/{placeId}/versions?versionType=Published' \\\n   --header 'x-api-key: <your-api-key>' \\\n   --header 'Content-Type: application/octet-stream' \\\n   --data-binary @/home/placefiles/place1.rbxl\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Display Properties - Lua\nDESCRIPTION: This script connects to the PlayerAdded and CharacterAdded events to set the display distance for avatar names and health bars in Roblox. Display distances are configurable based on predefined values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/name-health-display.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onPlayerAdded(player)\n\tplayer.CharacterAdded:Connect(function(character)\n\t\tlocal humanoid = character:FindFirstChildWhichIsA(\"Humanoid\")\n\t\tif humanoid then\n\t\t\t-- Give each humanoid full control over its name/health display distance\n\t\t\thumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Subject\n\t\t\t-- Set name display distance to 20 studs\n\t\t\thumanoid.NameDisplayDistance = 20\n\t\t\t-- Set health bar display distance to 15 studs\n\t\t\thumanoid.HealthDisplayDistance = 15\n\t\t\t-- Only show health bar when humanoid is damaged\n\t\t\thumanoid.HealthDisplayType = Enum.HumanoidHealthDisplayType.DisplayWhenDamaged\n\t\tend\n\tend)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n```\n\n----------------------------------------\n\nTITLE: Defining TimerUp and FoundWinner Variables (Roblox Lua)\nDESCRIPTION: This snippet creates two variables named `TimerUp` and `FoundWinner` inside the `GameSettings.endStates` table. These variables are assigned string values and represent the possible end states of the game.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nGameSettings.endStates = {\n\tTimerUp = \"TimerUp\",\n\tFoundWinner = \"FoundWinner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Face Control: RightNoseWrinkler\nDESCRIPTION: This section describes the `RightNoseWrinkler` face control, which raises the character's right nostril, pulls the brow down slightly, and wrinkles the right side of the nose. It references the `Class.FaceControls.RightNoseWrinkler` property.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Configuring Block Parts for Side Middle Top Roof in Roblox\nDESCRIPTION: Specific measurements for placing block parts to create the side middle section of the top roof in the Environment Art sample. Includes Size and CFrame.Position properties for two different blocks.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_26\n\nLANGUAGE: Roblox\nCODE:\n```\nSize: 25, 5, 15\nCFrame.Position: -52.5, 23.5, 187.5\n\nSize: 25, 5, 15\nCFrame.Position: -52.5, 23.5, 132.5\n```\n\n----------------------------------------\n\nTITLE: Disabling Emotes Menu in Lua\nDESCRIPTION: Disables the emotes menu using StarterGui's SetCoreGuiEnabled method, affecting only menu access, not chat commands.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/characters/emotes.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal StarterGui = game:GetService(\"StarterGui\")\nStarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, false)\n```\n\n----------------------------------------\n\nTITLE: Defining a Variable Placeholder in Lua\nDESCRIPTION: Code demonstrating how to set up a variable placeholder that will be populated later with user input. This prepares the script to gather another piece of information for the story.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/finish-and-add.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal name1 = storyMaker:GetInput(\"What is your favorite name?\")\nlocal food1\n\nlocal story = \"In a tree on a hill lives the great wizard \" .. name1 .. \". \"\n```\n\n----------------------------------------\n\nTITLE: Barrier Properties Configuration\nDESCRIPTION: Property settings for invisible barrier parts used to contain the playable area, including transparency and collision settings.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_36\n\nLANGUAGE: Roblox\nCODE:\n```\nTransparency = 1\nCanCollide = false\nAnchored = true\n```\n\n----------------------------------------\n\nTITLE: Face Control: JawLeft\nDESCRIPTION: This section describes the `JawLeft` face control, which moves the avatar's jaw, teeth, tongue, and lower lip to the left. It references the `Class.FaceControls.JawLeft` property and compares it to `MouthLeft`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Configuring Hallway Interior Lights Properties\nDESCRIPTION: Settings for hallway interior lighting using block parts and SpotLight objects. Includes specific dimensions, positioning, and spotlight angle configurations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_41\n\nLANGUAGE: roblox\nCODE:\n```\n-- Block Part Properties\nColor = 163, 162, 165\nMaterial = Neon\nSize = 0.25, 0.25, 1\nCFrame.Position = -53.962, 19.936, 291.932\nAnchored = true\n\n-- SpotLight Properties\nAngle = 135\nFace = Bottom\nRange = 20\n```\n\n----------------------------------------\n\nTITLE: Creating the Disappear Function in Luau\nDESCRIPTION: This snippet defines a function named 'disappear' that will change the properties of the platform to make it non-collidable and transparent. This helps manage the platform's visibility without destroying it.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal function disappear()\n    platform.CanCollide = false\n    platform.Transparency = 1\nend\n```\n\n----------------------------------------\n\nTITLE: Loading Animations Based on Game Context in Roblox\nDESCRIPTION: This Lua script checks if the Roblox experience is owned by a group or a user, and retrieves the appropriate animation mapping based on the owner type, facilitating animations management during runtime.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/transfer-animations.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal module = {}\nlocal GROUP_ID = 12345678\nlocal gameContext = {\n\t[\"User\"] = require(script:WaitForChild(\"Animations_User\")),\n\t[\"Group\"] = require(script:WaitForChild(\"Animations_Group\"))\n}\n\nlocal function getAnimationMapForGameContext()\n\tif game.CreatorType == Enum.CreatorType.Group and game.CreatorId == GROUP_ID then\n\t\treturn gameContext.Group\n\tend\n\treturn gameContext.User\nend\n\nlocal animationMap = getAnimationMapForGameContext()\nfunction module.getAnimation(animName: string)\n\treturn animationMap[animName]\nend\n\nreturn module\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary with Instance Keys\nDESCRIPTION: This snippet demonstrates using instances (parts in the workspace) as keys in a Luau dictionary. It accesses parts from the workspace and assigns boolean values to them in the dictionary, then it prints the value associated with `redPart`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal greenPart = workspace.GreenPart\nlocal redPart = workspace.RedPart\n\nlocal partList = {\n\t[greenPart] = true,\n\t[redPart] = false,\n}\nprint(partList[redPart])\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Gold Value\nDESCRIPTION: This snippet sets the initial value of the 'Gold' IntValue to zero, which represents the starting amount of gold for players.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/adventure-game-series/code-the-leaderboard.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal function onPlayerJoin(player)\n      local gold = Instance.new(\"IntValue\")\n      gold.Name = \"Gold\"\n      gold.Value = 0\n   end\n```\n\n----------------------------------------\n\nTITLE: Opening ACM Programmatically with SetCore\nDESCRIPTION: This snippet demonstrates how to programmatically open the Avatar Context Menu (ACM) for a specific player using `StarterGui:SetCore()` and the `AvatarContextMenuTarget` option. `targetPlayer` should be a valid `Player` object.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/players/avatar-context-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- Use StarterGui:SetCore where targetPlayer is a valid Player object\nStarterGui:SetCore(\"AvatarContextMenuTarget\", targetPlayer)\n```\n\n----------------------------------------\n\nTITLE: Icon Upload Process in Creator Dashboard\nDESCRIPTION: Step-by-step workflow for uploading an experience icon in the Roblox Creator Dashboard, including navigation and image selection requirements\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/publishing/experience-icons.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Navigate to the [Creator Dashboard](https://create.roblox.com/dashboard/creations).\n2. Click on the experience you want to upload an icon for.\n3. Under **Configure**, select **Places**.\n4. Click the **start place**.\n5. Select **Icon** in the left-hand navigation menu.\n6. Set media type to **Image** and click **Change**.\n7. Select and confirm the icon image.\n8. Click **Save Changes**.\n```\n\n----------------------------------------\n\nTITLE: Handling Completed Pass Purchase in Lua\nDESCRIPTION: This code snippet handles the event when a player completes a purchase of a game pass. It checks if the purchase was successful and grants the associated privileges.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/monetization/game-passes.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal MarketplaceService = game:GetService(\"MarketplaceService\")\n\n-- Replace the placeholder ID with your pass ID\nlocal passID = 0000000  -- Change this to your Pass ID\n\n-- Handle a completed prompt and purchase\nlocal function onPromptPurchaseFinished(player, purchasedPassID, purchaseSuccess)\n\tif purchaseSuccess and purchasedPassID == passID then\n\t\tprint(player.Name .. \" purchased the Pass with ID \" .. passID)\n\t\t-- Assign the user the ability or bonus related to the pass\n\tend\nend\n\n-- Connect PromptGamePassPurchaseFinished events to the function\nMarketplaceService.PromptGamePassPurchaseFinished:Connect(onPromptPurchaseFinished)\n```\n\n----------------------------------------\n\nTITLE: Creating Project Files Card Components in React\nDESCRIPTION: This snippet demonstrates how to create card components for various project files used for avatar item creation. The snippet follows the same structure as the auto-setup cards but focuses specifically on rigging and attachment files.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/resources.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Grid container alignItems='stretch' style={{margin: -6}}>\n\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>R15 Rig and Attachments</center>\n<figure>\n<center> <img src=\"../assets/art/resources/Rig-And-Attachments-Resource.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nStandard armature rig template for various software. Use this template for rigging **bodies** and **clothing** items.\n</figure>\n\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n  <Button href=\"../assets/modeling/meshes/reference-files/Rig_and_Attachments_Templates.zip\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Download (.blend, .ma, .fbx)</Button>\n</CardActions>\n</Card>\n</Grid>\n\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>Cages for Clothing</center>\n<figure>\n<center> <img src=\"../assets/art/resources/Clothing-Cage-Resource.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nProject files for creation, includes a full-body inner and outer cage mesh for creation of **clothing** items.\n</figure>\n\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n  <Button href=\"../assets/modeling/meshes/reference-files/Clothing_Cage_Templates.zip\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Download (.blend, .ma, .fbx)</Button>\n</CardActions>\n</Card>\n</Grid>\n\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>Cages for Bodies</center>\n<figure>\n<center> <img src=\"../assets/art/resources/Body-Cages-Resource.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nProject files for creation, includes the 15 individual body part cages required for caging your avatar **bodies**.\n</figure>\n\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n  <Button href=\"../assets/modeling/meshes/reference-files/Body_Cage_Templates.zip\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Download (.blend, .ma, .fbx)</Button>\n</CardActions>\n</Card>\n</Grid>\n\n<Grid item XSmall={12} Medium={6} Large={4} style={{padding: 6}}>\n<Card style={{height: '100%'}}>\n<CardContent style={{marginBottom:'66px'}}>\n\n<center>Combined Project Files</center>\n<figure>\n<center> <img src=\"../assets/art/Generic-Icon.png\" width=\"100%\" /> </center>\n</figure>\n<figure>\nTemplate file containing all content from previous templates, includes rig skeleton, body cages, attachment points. <br /> <br /> \nUse this template to rig and cage bodies and clothing.\n</figure>\n\n</CardContent>\n<CardActions style={{position: 'absolute', bottom: 0, width: '100%'}}>\n  <Button href=\"../assets/modeling/meshes/reference-files/Clothing_Cage_Templates.zip\" fullWidth size='large' color='primary' variant='contained' style={{marginBottom:\"4px;\"}}>Download (.blend, .ma, .fbx)</Button>\n</CardActions>\n</Card>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Destroying an Object Passed as a Parameter in Luau\nDESCRIPTION: Adds functionality to the sortGarbage function to destroy the object passed in through the trash parameter. This shows how parameters can be used like variables in a function.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/multiple-parameters-and-arguments.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function sortGarbage(trash,recyclable)\n    local sparkle = Instance.new(\"ParticleEmitter\")\n\n    -- Destroy the trash\n    trash:Destroy()\nend\n\nsortGarbage()\n```\n\n----------------------------------------\n\nTITLE: Creating a Particle Emitter - Lua\nDESCRIPTION: This snippet demonstrates creating a new `ParticleEmitter` instance within the `givePoints` function. This particle system is meant to provide visual feedback to the player. It relies on Roblox's Instance.new() method to create the new particle.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\n\tlocal particle = Instance.new(\"ParticleEmitter\")\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Arrays in Luau\nDESCRIPTION: This snippet shows how to remove elements from a Luau array using `table.remove()`. It illustrates removing an item by specifying its index and how the elements are repositioned.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/tables.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal testArray = {\"First item\", \"Next item\", \"Last item\"}\n\ntable.remove(testArray, 2)\n\nprint(testArray[1]) -- First item\nprint(testArray[2]) -- Last item\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Softness in Roblox\nDESCRIPTION: Sets the ShadowSoftness property of the Lighting service to adjust how blurry shadows appear, from hard edges (0) to soft edges (1).\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.ShadowSoftness = 0\n```\n\n----------------------------------------\n\nTITLE: Recommended Plugin Selection Raycast in Lua\nDESCRIPTION: This snippet demonstrates how to set up a raycast for plugin selection that matches Studio's built-in selection mechanics using the StudioSelectable collision group.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/workspace/collisions.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal UserInputService = game:GetService(\"UserInputService\")\nlocal Workspace = game:GetService(\"Workspace\")\n\nlocal raycastParams = RaycastParams.new()\nraycastParams.CollisionGroup = \"StudioSelectable\"  -- To follow the convention\nraycastParams.BruteForceAllSlow = true  -- So that parts with CanQuery of \"false\" can be selected\n\nlocal mouseLocation = UserInputService:GetMouseLocation()\nlocal mouseRay = Workspace.CurrentCamera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)\nlocal filteredSelectionHit = Workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 10000, raycastParams)\n```\n\n----------------------------------------\n\nTITLE: Creating Color Variables in Roblox Luau\nDESCRIPTION: Script that defines color variables for blue, green, and red using Color3.fromRGB() in Roblox Luau. This sets up the colors that will be used for the point-giving part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/give-points.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal pointPart = script.Parent\n\n-- Colors\nlocal blue = Color3.fromRGB(0, 0, 255)\nlocal green = Color3.fromRGB(0, 255, 0)\nlocal red = Color3.fromRGB(255, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring AlignPosition Force Application Location\nDESCRIPTION: Demonstrates how to control force application location using ApplyAtCenterOfMass property, which determines whether force is applied at the attachment point or the parent's center of mass\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/constraints/align-position.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nalignPosition.ApplyAtCenterOfMass = false -- Apply force at attachment point\nalignPosition.ApplyAtCenterOfMass = true -- Apply force at center of mass\n```\n\n----------------------------------------\n\nTITLE: Creating Passing Pose for Right Step Animation in Roblox\nDESCRIPTION: Instructions for positioning the character rig at frame 18 to create the Passing pose where the left leg passes the right leg. Includes detailed positioning for all body parts as weight shifts between legs.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/animation/create-an-animation.md#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Limiting WalkSpeed with a Compound Condition\nDESCRIPTION: Uses the 'and' operator to ensure the speed boost is only applied if the player's current WalkSpeed is 50 or less, preventing excessive speeds.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/powerups-with-if-statements.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nif humanoid and humanoid.WalkSpeed <= 50 then\n humanoid.WalkSpeed += 10\nend\n```\n\n----------------------------------------\n\nTITLE: Firing MatchEnd Event with FoundWinner State (Roblox Lua)\nDESCRIPTION: This snippet uses an if statement to check if the size of the `activePlayers` table is 1. If true, it fires the `matchEnd` event and passes in `gameSettings.endStates.FoundWinner` to indicate that a winner has been found.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/ending-matches.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal function checkPlayerCount()\n\tif #activePlayers == 1 then\n\t\tmatchEnd:Fire(gameSettings.endStates.FoundWinner)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Completing String Concatenation in Lua for Roblox\nDESCRIPTION: Final step of string concatenation showing how to combine the story text with the player's name input to create a personalized narrative.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-story-games/code-the-story.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n    -- Code story between the dashes\n    -- =============================================\n        local name1 = storyMaker:GetInput(\"What is your favorite name?\")\n\n        local story = \"In a tree on a hill lives the great wizard \" .. name1\n    -- =============================================\n```\n\n----------------------------------------\n\nTITLE: Connecting Character Added Event in Roblox Lua\nDESCRIPTION: Defines a function that handles the addition of a character. It waits for the Humanoid object and prepares for the death event to reset points.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal function onCharacterAdded(character, player)\n  local humanoid = character:WaitForChild(\"Humanoid\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ExposureCompensation in Roblox\nDESCRIPTION: Sets the ExposureCompensation property of the Lighting service to adjust the exposure level in the experience, simulating under or over-exposure effects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.ExposureCompensation = 0\n```\n\n----------------------------------------\n\nTITLE: Applying Cubic Easing Style to UI Tweens in Roblox Lua\nDESCRIPTION: Shows how to specify an easing style (Cubic) when creating a tween. This affects the interpolation rate, making the animation start slowly and accelerate.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/ui/animation.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Cubic)\nlocal tween = TweenService:Create(object, tweenInfo, {Rotation = 45})\n```\n\n----------------------------------------\n\nTITLE: Importing Meshes in Roblox Studio\nDESCRIPTION: Describes the process of importing 3D mesh objects into Roblox Studio using the 3D Importer tool, with automatic object type conversion based on naming conventions\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/meshes.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Import meshes\n\nYou can import meshes into Studio using the [3D Importer](../art/modeling/3d-importer.md).\n```\n\n----------------------------------------\n\nTITLE: Configuring Dense Lava Splashes in Roblox\nDESCRIPTION: Configuration for ParticleEmitter that creates heavy, thick lava splashes using flipbook animation with a dense texture. This emitter uses modified properties to create variation in the splash effects.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_4\n\nLANGUAGE: Roblox\nCODE:\n```\nDenseSplashes.Texture = \"rbxassetid://17363669906\"\nDenseSplashes.Rate = 0.289\n```\n\n----------------------------------------\n\nTITLE: Initial Tool Setup with Action Name\nDESCRIPTION: Sets up the basic tool script with a constant for the reload action name and basic tool event handlers.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/input-and-camera/detect-user-input.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal tool = script.Parent\n\nlocal RELOAD_ACTION = \"reloadWeapon\"\n\nlocal function toolEquipped()\n\ttool.Handle.Equip:Play()\nend\n\nlocal function toolActivated()\n\ttool.Handle.Activate:Play()\nend\n\ntool.Equipped:Connect(toolEquipped)\ntool.Activated:Connect(toolActivated)\n```\n\n----------------------------------------\n\nTITLE: Named Arguments in Luau\nDESCRIPTION: Demonstrates how to simulate named arguments in Luau using a table. The function accepts a table as input and accesses its fields to construct a string.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/luau-csharp-comparison.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n-- Named arguments\nlocal function namedArguments(args)\n\treturn args.name .. \"'s birthday: \" .. args.dob\nend\n\nnamedArguments{name=\"Bob\", dob=\"4/1/2000\"}\n```\n\n----------------------------------------\n\nTITLE: Redeeming Code for Avatar Item in Roblox Experience\nDESCRIPTION: This code snippet provides the redemption code for obtaining the Head Slime avatar item and Glimmer and Gumption badge in a specific Roblox experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/build-it-play-it-mansion-of-wonder/creating-a-sparkler.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nGlimmer\n```\n\n----------------------------------------\n\nTITLE: Handling Catalog View Close Event in Lua\nDESCRIPTION: Connects to the catalogViewClosed event to detect when the catalog view is closed. Uses ReplicatedStorage to access the MerchBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.catalogViewClosed:Connect(function()\n\tprint(\"Catalog view closed\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Updating a Localized Developer Product Description - REST API\nDESCRIPTION: Updates the description for a localized developer product identified by developerProductId and languageCode. The new information must be in the request body.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nPATCH v1/developer-products/{developerProductId}/description/language-codes/{languageCode}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Localized Game Thumbnail - REST API\nDESCRIPTION: Allows deletion of a localized game thumbnail using gameId, languageCode, and imageId. Authorization is required for this operation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/images/{imageId}\n```\n\n----------------------------------------\n\nTITLE: Deactivating SelfieMode Actions\nDESCRIPTION: Shows how to programmatically deactivate a selfie mode action.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/selfie-mode.md#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal SelfieMode = require(ReplicatedStorage:WaitForChild(\"SelfieMode\"))\n\n-- Deactivate \"Filter\" action\nSelfieMode.deactivateAction(SelfieMode.Action.Filter)\n```\n\n----------------------------------------\n\nTITLE: Uses variables and strings together\nDESCRIPTION: This code snippet demonstrates concatenation of strings in Luau by using the .. operator to combine variables with string literals.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/create-a-script.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal firstAnimal = \"porcupines\"\nlocal secondAnimal = \"dolphins\"\n\nprint(\"I like \" .. firstAnimal .. \" and \" .. secondAnimal)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating elseif and else Syntax in Luau\nDESCRIPTION: This snippet shows the basic syntax for using elseif and else in a Luau if statement, using a traffic light example.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-3/multiple-conditions.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif isGreen then\n   print(\"Go\")\nelseif isYellow then\n   print(\"Slow\")\nelseif isPedestrians then\n   print(\"Wait\")\nelse\n   print(\"stop\")\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Part Properties for Neon Sign Backboard\nDESCRIPTION: Configuration settings for the backboard part of the neon sign, including size, color, and anchoring properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/modeling/create-neon-signs.md#2025-04-21_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nBrickColor = Black\nSize = 8,4,1\nName = Backboard\nAnchored = true\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Linking Monospace Text in Roblox API Documentation\nDESCRIPTION: This code snippet demonstrates how to create monospace text that doesn't form a link in Roblox API documentation by using the '|no-link' suffix.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/STYLE.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- `monospace|no-link` → `monospace`\n```\n\n----------------------------------------\n\nTITLE: Atmosphere Object Reference\nDESCRIPTION: Reference to the Atmosphere object within the Lighting service for controlling atmospheric effects like density, haze, and glare.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.Atmosphere\n```\n\n----------------------------------------\n\nTITLE: Defining Portals Using DemoUtils in Lua\nDESCRIPTION: The Lua snippet demonstrates how to define 'Portal' functionality using a helper function 'ProcessPortal' from 'DemoUtils'. It connects the 'Touched' event of a part P1 to teleport a player to the coordinates defined by part P2, using a CFrame coordinate change and invoking a 'Teleport_Jump' event for seamless transition. Dependencies include 'utils.ProcessPortal' and parts P1 and P2 representing start and destination coordinates.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/supporting-systems.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nP1.Touched:Connect(function(otherPart) utils.ProcessPortal(otherPart, P2) end)\n```\n\n----------------------------------------\n\nTITLE: Exporting Profiling Data JSON Schema in Roblox\nDESCRIPTION: Example JSON structure for exported script profiling data, including session metadata, categories, nodes, and function performance details\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/optimization/scriptprofiler.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\":2,\n  \"SessionStartTime\":1704850750514,\n  \"SessionEndTime\":1704850751198,\n  \"Categories\":\n  [\n    {\"Name\":\"Parallel Luau\",\"NodeId\":4},\n    {\"Name\":\"Heartbeat\",\"NodeId\":1}\n  ],\n  \"Nodes\":\n  [\n      {\"TotalDuration\":2530,\"FunctionIds\":[1],\"NodeIds\":[2]},\n      {\"TotalDuration\":2530,\"FunctionIds\":[2,5],\"NodeIds\":[3,7]},\n      {\"TotalDuration\":1267},\n      {\"TotalDuration\":7746,\"FunctionIds\":[3],\"NodeIds\":[5]},\n      {\"TotalDuration\":7746,\"FunctionIds\":[4],\"NodeIds\":[6]},\n      {\"TotalDuration\":7746},\n      {\"TotalDuration\":1263,\"FunctionIds\":[6],\"NodeIds\":[8]},\n      {\"TotalDuration\":1263,\"FunctionIds\":[7],\"NodeIds\":[9]},\n      {\"TotalDuration\":1263,\"FunctionIds\":[8],\"NodeIds\":[10]},\n      {\"TotalDuration\":1263}\n  ],\n  \"Functions\":\n  [\n    {\"Name\":\"main\",\"TotalDuration\":2530},\n    {\"Source\":\"builtin_ManageCollaborators.rbxm.ManageCollaborators.Packages._Index.roblox_rodux-3.0.0.rodux.Store\",\"Line\":81,\"TotalDuration\":1267},\n    {\"Name\":\"Script\",\"TotalDuration\":7746},\n    {\"Source\":\"Workspace.Actor.Script\",\"Line\":1,\"TotalDuration\":7746},\n    {\"Source\":\"builtin_DeveloperInspector.rbxm.DeveloperInspector.Packages._Index.DeveloperFramework.DeveloperFramework.UI.Components.Grid\",\"Line\":221,\"TotalDuration\":1263},\n    {\"Source\":\"builtin_DeveloperInspector.rbxm.DeveloperInspector.Packages._Index.DeveloperFramework.DeveloperFramework.UI.Components.Grid\",\"Name\":\"_update\",\"Line\":236,\"TotalDuration\":1263},\n    {\"Source\":\"builtin_DeveloperInspector.rbxm.DeveloperInspector.Packages._Index.DeveloperFramework.DeveloperFramework.UI.Components.Grid\",\"Name\":\"_getRange\",\"Line\":277,\"TotalDuration\":1263},\n    {\"Source\":\"[C]\",\"Name\":\"ScrollingFrame.CanvasPosition\",\"TotalDuration\":1263}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webby Lava Splashes in Roblox\nDESCRIPTION: Configuration for ParticleEmitter that creates light, thin lava splashes using flipbook animation with a webby texture. The emitter uses specific size, squash, and color properties to create realistic lava movement.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_3\n\nLANGUAGE: Roblox\nCODE:\n```\nWebbySplashes.Texture = \"rbxassetid://17363668312\"\nWebbySplashes.Orientation = FacingCameraWorldUp\nWebbySplashes.Color = Color3.fromRGB(255, 152, 79)\nWebbySplashes.ZOffset = 1\nWebbySplashes.Lifetime = NumberRange.new(1.5, 2)\nWebbySplashes.Rate = 0.37\nWebbySplashes.RotSpeed = NumberRange.new(-20, 20)\nWebbySplashes.Speed = 2\nWebbySplashes.SpreadAngle = Vector2.new(5, 5)\nWebbySplashes.FlipbookLayout = Grid8x8\nWebbySplashes.FlipbookMode = Oneshot\nWebbySplashes.Drag = 0.5\nWebbySplashes.LightEmission = 0.1\nWebbySplashes.LightInfluence = 0.25\n```\n\n----------------------------------------\n\nTITLE: Glass Block Size and Position Configuration\nDESCRIPTION: Size and position specifications for skylight glass blocks, including exact measurements and positioning coordinates.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_19\n\nLANGUAGE: Roblox\nCODE:\n```\nSize = Vector3.new(10, 1.574, 39)\nCFrame.Position = Vector3.new(-115, 21.395, 260.5)\n```\n\n----------------------------------------\n\nTITLE: Configuring PhotoBooth Module in Roblox\nDESCRIPTION: Basic configuration of the PhotoBooth module to customize the frame message that appears at the bottom of photos.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/photo-booth.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal PhotoBooth = require(ReplicatedStorage:WaitForChild(\"PhotoBooth\"))\n\nPhotoBooth.configure({\n\tframeMessage = \"First Photo Booth Capture!\",\n})\n```\n\n----------------------------------------\n\nTITLE: Raycasting LocalScript\nDESCRIPTION: This Lua code snippet demonstrates a performance bottleneck due to excessive raycasting within a LocalScript. It casts 1500 rays per second in random directions, which can significantly impact frame rate. The snippet is part of a larger Roblox experience used to demonstrate MicroProfiler usage.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/microprofiler/use-microprofiler.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n\"local RAYS_PER_SECOND = 1500\n\nlocal function onStepped()\n\n\tfor _ = 1, RAYS_PER_SECOND do\n\t\tlocal startPosition = getRandomPosition()\n\t\tlocal endPosition = getRandomPosition()\n\t\tlocal direction = endPosition - startPosition\n\n\t\tWorkspace:Raycast(\n            startPosition,\n            endPosition\n         )\n\tend\n\nend\n\nRunService.Stepped:Connect(onStepped)\"\n```\n\n----------------------------------------\n\nTITLE: Importing OpeningSteps Component - JavaScript\nDESCRIPTION: This snippet imports the OpeningSteps component from a specified markdown file, enabling the display of initial steps in the Developer Console. This component is likely to render some introductory functionalities or instructions for users.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/optimization/memory-usage.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport OpeningSteps from '../../includes/developer-console/opening-developer-console.md'\n```\n\n----------------------------------------\n\nTITLE: Adding Sound Effect Code to LaserRenderer in Lua\nDESCRIPTION: Code that plays the shooting sound when a laser is created. This ensures all players will hear the sound when a laser is fired, not just the client doing the shooting.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/hit-detection-with-lasers.md#2025-04-21_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\n    laserPart.Parent = workspace\n\n    -- Add laser beam to the Debris service to be removed & cleaned up\n    Debris:AddItem(laserPart, SHOT_DURATION)\n\n    -- Play the weapon's shooting sound\n    local shootingSound = toolHandle:FindFirstChild(\"Activate\")\n    if shootingSound then\n        shootingSound:Play()\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Assigns 'Porcupines' to myAnimal\nDESCRIPTION: This code snippet assigns the string 'Porcupines' to the variable myAnimal, demonstrating variable initialization with a value.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-1/create-a-script.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal myAnimal = \"Porcupines\"\n```\n\n----------------------------------------\n\nTITLE: Creating On-Screen UI Overlay for Lore Display in Roblox\nDESCRIPTION: Utilizes ScreenGui as a container for UI elements, with child Frames controlling the sizing and rescaling of TextLabels and ImageLabels. This setup allows for responsive display of lore information across different devices.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/the-mystery-of-duvall-drive/immersive-narrative.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nClass.ScreenGui\nClass.Frame\nClass.TextLabel\nClass.ImageLabel\n```\n\n----------------------------------------\n\nTITLE: Setting Mission Completion Handler in Lua\nDESCRIPTION: Example of implementing a mission completion handler to process rewards when a player completes a mission\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/missions.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function completeHandler(player: Player, missionId: Types.MissionId)\n    print(`{player} completed mission {missionId}`)\n    -- Award player their rewards.\nend\n\nMissions.setCompletionHandler(missionId, completeHandler)\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: Command to push your committed changes to your fork on GitHub. This makes your changes available for creating a pull request.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin your-branch\n```\n\n----------------------------------------\n\nTITLE: RightLipStretcher Face Control\nDESCRIPTION: Property that stretches the corners of the mouth apart. Required for Marketplace publishing.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.RightLipStretcher\n```\n\n----------------------------------------\n\nTITLE: Navigating to Repository Root Directory\nDESCRIPTION: Command to change directory to the cloned repository root. This is required before performing other Git operations.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd creator-docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Overhang Block Parts\nDESCRIPTION: Configuration parameters for creating block parts that form the left side of the roof overhang. Includes specific size, position, color, and material properties for structural components.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/construct-your-world.md#2025-04-21_snippet_28\n\nLANGUAGE: Properties\nCODE:\n```\nSize: 16, 5, 90\nCFrame.Position: -16, 38.5, 240\nColor: 181, 173, 156\nMaterial: Concrete\nMaterialVariant: Concrete_Board_Formed_A\n```\n\n----------------------------------------\n\nTITLE: Awarding Points Based on Alive Status in Roblox Lua\nDESCRIPTION: Implements a while loop that awards points to players every second, only if the player is alive based on their IsAlive attribute.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/basic-scripting/score-points.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nwhile true do\n  task.wait(1)\n  local playerList = Players:GetPlayers()\n\n  for currentPlayer = 1, #playerList do\n    local player = playerList[currentPlayer]\n\n    if player:GetAttribute(\"IsAlive\") then\n      local points = player.leaderstats.Points\n      points.Value += 1\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Algorithm in Lua\nDESCRIPTION: Demonstrates a simple selection algorithm using an if statement to control traffic light color based on time.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/coding-concept-algorithms.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nif time == 0 then\n\tstopLightColor = red\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Pause and Resume Physics in Roblox Studio using JavaScript\nDESCRIPTION: This snippet imports the PauseResumePhysics component to manage physics states during the testing process. The required dependencies involve the PauseResumePhysics component imported from the designated path, enabling users to control physics simulations effectively.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/testing-modes.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PauseResumePhysics components={props.components} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Roblox Model Structure Example\nDESCRIPTION: This code snippet shows the hierarchical structure of a Roblox Model as displayed in the Explorer window. It demonstrates how a 'SpringyFireball' model would organize components including ParticleEmitter, MeshPart, SpringConstraint, and scripting elements.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/unreal.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nModel\n|- ParticleEmitter\n|- MeshPart\n|- SpringConstraint\n|- ClickDetector\n|  |- Script\n```\n\n----------------------------------------\n\nTITLE: Checking variable type in Luau\nDESCRIPTION: This code snippet uses the `type()` and `typeof()` functions to determine the data type of different variables (integer, decimal, and string). It demonstrates how these functions return the string representation of the variable's type.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/luau/numbers.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal testInt = 5\nlocal testDecimal = 9.12761656\nlocal testString = \"Hello\"\n\nprint(type(testInt))  --> number\nprint(type(testDecimal))  --> number\nprint(type(testString))  --> string\n\nprint(typeof(testInt))  --> number\nprint(typeof(testDecimal))  --> number\nprint(typeof(testString))  --> string\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants for Health Pickup Management in Lua\nDESCRIPTION: This snippet declares constants used for health pickup management in a Roblox game, including transparency settings and a cooldown period.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/scripting/intermediate-scripting/create-a-health-pickup.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal MAX_HEALTH = 100\nlocal ENABLED_TRANSPARENCY = 0.4\nlocal DISABLED_TRANSPARENCY = 0.9\nlocal COOLDOWN = 10\n\nlocal healthPickupsFolder = workspace:WaitForChild(\"HealthPickups\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Right Tower Parts - Roblox\nDESCRIPTION: This snippet provides the configuration details for the right tower, including the part sizes and their respective positions. Proper alignment and spacing are emphasized for replication purposes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/environmental-art/greybox-your-environment.md#2025-04-21_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n<table>\n<thead>\n<tr>\n<th>Part</th>\n<th>Size</th>\n<th>CFrame.Position</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Left wall</td>\n<td>`15, 40, 10`</td>\n<td>`-32.5, 30, 135`</td>\n</tr>\n<tr>\n<td>Right wall</td>\n<td>`15, 25, 5`</td>\n<td>`-32.5, 22.5, 127.5`</td>\n</tr>\n<tr>\n<td>Bottom ledge</td>\n<td>`20, 5, 15`</td>\n<td>`-30, 7.5, 132.5`</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Comparing Two Script Versions in Roblox Studio\nDESCRIPTION: Shows the keyboard shortcut for selecting two script versions to compare in the Version History window of Roblox Studio. The shortcut is Ctrl for Windows and Cmd for Mac.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/collaboration.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>Ctrl</kbd> or <kbd>⌘</kbd>\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Shadows in Roblox\nDESCRIPTION: Toggles the GlobalShadows property of the Lighting service to enable or disable shadow rendering in the experience.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.GlobalShadows = true\n```\n\n----------------------------------------\n\nTITLE: Setting Position Property for Background Volume Slider in Roblox\nDESCRIPTION: Sets the Position property of a duplicated slider to position it below the first slider. The property uses Scale and Offset values for both X and Y axes.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/ui/interactive-ui.md#2025-04-21_snippet_3\n\nLANGUAGE: Roblox Studio\nCODE:\n```\n0.5, 0, 0.7, 0\n```\n\n----------------------------------------\n\nTITLE: Initializing a Script with a Comment in Lua\nDESCRIPTION: This snippet initializes a Lua script in Roblox by deleting default text and adding a comment to describe the script's purpose, in this instance changing the color of a part every few seconds.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-4/repeat-code-with-while-loops.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Changes the color of LoopingPart every few seconds\n```\n\n----------------------------------------\n\nTITLE: Setting Up Navigation Buttons for Blaster Selection in Roblox Lua\nDESCRIPTION: This script implements the functionality for the left and right navigation buttons in the blaster selection UI. It updates the selectedIndex attribute when buttons are activated, allowing players to cycle through available blasters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal GuiAttribute = require(ReplicatedStorage.GuiAttribute)\n\nlocal function setupNavButtons(gui: ScreenGui, blasterButtons: { ImageButton })\n\tlocal frame = gui.Frame.SelectionFrame.Frame\n\tlocal navigationButtonLeft = frame.NavigationButtonLeft\n\tlocal navigationButtonRight = frame.NavigationButtonRight\n\n\tnavigationButtonLeft.Activated:Connect(function()\n\t\tlocal currentIndex = gui:GetAttribute(GuiAttribute.selectedIndex)\n\t\tlocal newIndex = math.clamp(currentIndex - 1, 1, #blasterButtons)\n\t\tgui:SetAttribute(GuiAttribute.selectedIndex, newIndex)\n\tend)\n\n\tnavigationButtonRight.Activated:Connect(function()\n\t\tlocal currentIndex = gui:GetAttribute(GuiAttribute.selectedIndex)\n\t\tlocal newIndex = math.clamp(currentIndex + 1, 1, #blasterButtons)\n\t\tgui:SetAttribute(GuiAttribute.selectedIndex, newIndex)\n\tend)\nend\n\nreturn setupNavButtons\n```\n\n----------------------------------------\n\nTITLE: Unlocking Missions in Lua\nDESCRIPTION: Example showing how to manually unlock a mission for a player\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/missions.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nMissions.unlockMission(player, \"Manual\")\n```\n\n----------------------------------------\n\nTITLE: HTML Grid Container Structure for Image Display\nDESCRIPTION: GridContainer component used to display image galleries in a responsive grid layout with configurable column count. Images include captions and alt text for accessibility.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/overview-studio.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<GridContainer numColumns=\"3\">\n  <figure>\n    <img src=\"../assets/modeling/parts/Basic-Part-Sphere.png\" alt=\"A single gray sphere part\" />\n    <figcaption>Basic sphere part</figcaption>\n  </figure>\n  <figure>\n    <img src=\"../assets/modeling/parts/Part-Example-CSG.jpg\"alt=\"A bright blue hollow bowl that was made with solid modeling operations.\"/>\n    <figcaption>Bowl created with solid modeling</figcaption>\n  </figure>\n  <figure>\n    <img src=\"../assets/modeling/parts/Mesh-Example.jpg\" alt=\"A high-quality treasure chest mesh with a texture.\" />\n    <figcaption>[Mesh](#mesh-parts) with texture</figcaption>\n  </figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Saving Scripts in Roblox Studio\nDESCRIPTION: Shows the keyboard shortcut for manually saving a script in Roblox Studio during live scripting. The shortcut is Ctrl+S for Windows and Cmd+S for Mac.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/projects/collaboration.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>Ctrl</kbd><kbd>S</kbd> (<kbd>⌘</kbd><kbd>S</kbd>)\n```\n\n----------------------------------------\n\nTITLE: Sky and Clouds Object Reference\nDESCRIPTION: Reference to the Sky and Clouds objects used for creating skyboxes and dynamic cloud systems.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.Sky\nClass.Clouds\n```\n\n----------------------------------------\n\nTITLE: Filtering Inventory Items Example\nDESCRIPTION: Clarifies how to apply filtering to inventory item retrieval, specifying type and ID fields along with the expected format for filter parameters.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/reference/patterns.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nfilter={field}={value};{field}={value},{value},...;{field}=...\n```\n\n----------------------------------------\n\nTITLE: Complete DisplayManager Script\nDESCRIPTION: This is a complete DisplayManager script.  It initializes services, defines variables to store references to DisplayValues, creates the function `updateRoundStatus` to update the status display with player count and time, and connect events.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/battle-royale-series/creating-a-gui.md#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal DisplayManager = {}\n\n-- Services\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\n-- Display Values used to update Player GUI\nlocal displayValues = ReplicatedStorage:WaitForChild(\"DisplayValues\")\nlocal status = displayValues:WaitForChild(\"Status\")\nlocal playersLeft = displayValues:WaitForChild(\"PlayersLeft\")\nlocal timeLeft = displayValues:WaitForChild(\"TimeLeft\")\n\n-- Local Functions\nlocal function updateRoundStatus()\n\tstatus.Value = \"Players Left: \" .. playersLeft.Value .. \" / Time Left: \" .. timeLeft.Value\nend\n\n-- Module Functions\nfunction DisplayManager.updateStatus(newStatus)\n\tstatus.Value = newStatus\nend\n\nplayersLeft.Changed:Connect(updateRoundStatus)\ntimeLeft.Changed:Connect(updateRoundStatus)\n\nreturn DisplayManager\n```\n\n----------------------------------------\n\nTITLE: Luau Dictionary with Pre-existing Variables - Initialization\nDESCRIPTION: This snippet initializes the `Players` service and creates an empty dictionary called `playerPoints`. It's intended to store player names as keys and their points as values.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-5/intro-to-dictionaries.md#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal playerPoints = {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Sections in Roblox Studio\nDESCRIPTION: This code snippet utilizes JSX to generate a layout for the sections describing Roblox Studio's functionalities. Each section displays a title, description, and buttons for navigation, structured using the Grid layout from Material-UI.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/studio/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsections.map((section, index) => (\n    <Grid style={{ marginBottom: 48}} item xs={12} key={index}>\n      {section.title && (\n        <Typography variant='h1'>{section.title}</Typography>\n      )}\n    <div style={{ marginTop: 16, marginBottom: 48 }}>\n      {section.description && (\n        <p>{section.description}</p>\n      )}\n      {section.buttons && section.buttons.map((button, btnIndex) => (\n        <Button\n          key={btnIndex}\n          style={{ marginTop: 8, marginRight: 24 }}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          href={button.href}\n        >\n          {button.text}\n        </Button>\n      ))}\n    </div>\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n    {section.stats && (\n      <Grid item xs={12} style={{ textAlign: \"center\", marginTop: -48, marginBottom: 48 }}>\n        <Grid container spacing={4}>\n          {section.stats.map((stat, statIndex) => (\n            <Grid item xs={12} sm={6} md={4} key={statIndex}>\n              <Card variant=\"filled\">\n                <CardContent>\n                  <Typography variant=\"hero\" color=\"info\">{stat.header}</Typography>\n                  <Typography component=\"p\" variant=\"h2\">{stat.description}</Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n      )}\n    {section.content && (\n      <Grid container spacing={4}>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n        {section.content.map((content, contentIndex) => {\n          const mdValue = 12 / section.content.length;\n          return (\n            <Grid item xs={12} sm={6} md={mdValue} key={contentIndex}>\n              <div style={{ marginBottom: 48 }}>\n                {content.image && (\n                  <img\n                    style={{ width: '100%', aspectRatio: 16/9, height: 'auto', objectFit: 'contain' }}\n                    src={content.image}\n                    alt=\"\"\n                  />\n                )}\n                {content.video && (\n                  <iframe  style={{ width: '100%', aspectRatio: 16/9, height: 'auto' }} src={content.video} title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n                )}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n                <h3>{content.title}</h3>\n                <p>{content.description}</p>\n                {content.links && content.links.map((link, linkIndex) => (\n                  <a href={link.href} key={linkIndex}>\n                    <Typography variant='buttonLarge'>{link.text}</Typography><br />\n                  </a>\n                ))}\n                {content.buttons && content.buttons.map((button, btnIndex) => (\n                  <Button\n                    key={btnIndex}\n                    style={{ marginTop: 16, marginRight: 24 }}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    href={button.href}\n                  >\n                    {button.text}\n                  </Button>\n                ))}\n              </div>\n            </Grid>\n          );\n        })}\n      </Grid>\n      )}\n    </Grid>\n  ));\n```\n\n----------------------------------------\n\nTITLE: React JSX Grid Layout for Tutorial Steps\nDESCRIPTION: JSX component using Material-UI Grid and Stepper to create a responsive layout showing tutorial steps with descriptions alongside an image.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/avatar/tutorials.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid\n    alignItems=\"stretch\"\n    container\n    direction=\"row\">\n<Grid item Medium={6} XSmall={12} direction=\"column\" style={{\"maxWidth\": \"800px\"}}>\n<div class=\"container\"\nstyle={{position: \"relative\"}}>\n<img src=\"../assets/art/accessories/creating-rigid/Chest-Studio.png\" width = \"90%\" />\n</div>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Controlling Mouth and Lip Movements with FACS\nDESCRIPTION: Controls for various mouth and lip movements including jaw drop, lip stretching, and puckering.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.JawDrop\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LeftLipCornerPuller\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LeftLipStretcher\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LeftLowerLipDepressor\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LeftUpperLipRaiser\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.LipsTogether\n```\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.Pucker\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Assets in Markdown\nDESCRIPTION: Demonstrates how to include and format image references in Markdown, including using GridContainer for layout.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/choose-an-art-style.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<GridContainer numColumns=\"2\">\n  <figure>\n    <img width=\"100%\" img src=\"../../../assets/tutorials/environmental-art-curriculum/Section3/SAPackages-Intro.jpg\" />\n  </figure>\n  <figure>\n    <img width=\"85%\" img src=\"../../../assets/tutorials/environmental-art-curriculum/Section3/SettingParameters-CanCollide.png\" />\n  </figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Functions in TreasureManager Module\nDESCRIPTION: Defines local functions getPlayerKeys and getPlayerTreasure to interact with player leaderboard stats.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-6/create-with-module-scripts.md#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function getPlayerKeys(whichCharacter)\n\tlocal player = Players:GetPlayerFromCharacter(whichCharacter)\n\tlocal leaderstats = player:FindFirstChild(\"leaderstats\")\n\treturn leaderstats:WaitForChild(\"Lockpicks\")\nend\nlocal function getPlayerTreasure(whichCharacter)\n\tlocal player = Players:GetPlayerFromCharacter(whichCharacter)\n\tlocal leaderstats = player:FindFirstChild(\"leaderstats\")\n\treturn leaderstats:WaitForChild(\"Treasure\")\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables for Explosion Script in Roblox Lua\nDESCRIPTION: This snippet initializes variables for the trap object, the particle emitter, and the emission amount. The script.Parent property gets the part the script is inside of, which is assumed to be the trap. It then gets the Explosion ParticleEmitter from inside the trap part.  EMIT_AMOUNT stores the number of particles that are emitted.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/use-particles-for-explosions.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n\"local trapObject = script.Parent\nlocal particleEmitter = trapObject.Explosion\n\nlocal EMIT_AMOUNT = 100\"\n```\n\n----------------------------------------\n\nTITLE: Creating Bundled Installers for Roblox Studio and Client\nDESCRIPTION: These commands create bundled installers for Roblox Studio and Roblox Client respectively. Run these commands in the Command Prompt after navigating to the correct directory.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/support/creating-bundled-installers.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRobloxStudioLauncherBeta.exe -bundle\nRobloxPlayerLauncher.exe -bundle\n```\n\n----------------------------------------\n\nTITLE: Defining Base URL for Publish API in Markdown\nDESCRIPTION: Specifies the base URL for the Publish API, along with authentication types and a note about additional endpoints.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/cloud/legacy.md#2025-04-21_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n- Base URL: `https://apis.roblox.com/legacy-publish`\n- Authentication types: OAuth 2.0 and API key\n- Additional Publish API endpoints without Open Cloud authentication support can be found [here](/cloud/legacy/publish/v1).\n```\n\n----------------------------------------\n\nTITLE: ChinRaiserUpperLip Face Control\nDESCRIPTION: Property that raises the upper lip when ChinRaiser is engaged to prevent lip collision.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.ChinRaiserUpperLip\n```\n\n----------------------------------------\n\nTITLE: Adding a Parameter to a Function in Lua\nDESCRIPTION: Adds a parameter named objectTouched to the onTouch function. This parameter will receive the object that touches the trap part.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/fundamentals/coding-2/use-parameters-and-events.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal trap = script.Parent\n\nlocal function onTouch(objectTouched)\n\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Catalog View Open Event in Lua\nDESCRIPTION: Connects to the catalogViewOpened event to detect when the catalog view is opened. Uses ReplicatedStorage to access the MerchBooth module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/merch-booth.md#2025-04-21_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal MerchBooth = require(ReplicatedStorage:WaitForChild(\"MerchBooth\"))\n\nMerchBooth.catalogViewOpened:Connect(function()\n\tprint(\"Catalog view opened\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Alert Component Implementation\nDESCRIPTION: Custom alert component used to display an important disclaimer about the listed educators and external links.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/resources/roblox-educators.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Alert severity=\"info\">\nAll educators and external links on this page are provided as a service to our community by Roblox and don't intend to be an endorsement of their work.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Tables for Error Messages in Markdown\nDESCRIPTION: HTML table structure showing error messages and troubleshooting steps for facial animation import failures in Roblox Studio.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/use-heads-in-studio.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Error message</th>\n      <th>Troubleshooting</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Failed importing head with facial animation.</td>\n      <td>The <kbd>.fbx</kbd> file is corrupted.</td>\n    </tr>\n    <!-- Additional error message rows -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating Models in Roblox Studio\nDESCRIPTION: Method for grouping objects into a Model using keyboard shortcut or context menu, which automatically creates a Model object containing the selected elements\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/models.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Group selected objects (Ctrl+G or ⌘+G)\n-- Creates a new Model object with nested children\n```\n\n----------------------------------------\n\nTITLE: Getting Emote Information\nDESCRIPTION: Demonstrates how to retrieve emote information by name from the EmoteBar module.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/modules/emote-bar.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal EmoteBar = require(ReplicatedStorage:WaitForChild(\"EmoteBar\"))\n\nlocal shrug = EmoteBar.getEmote(\"Shrug\")\n```\n\n----------------------------------------\n\nTITLE: Funneler Face Control\nDESCRIPTION: Property that creates an 'O' shape with the mouth.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: Roblox\nCODE:\n```\nClass.FaceControls.Funneler\n```\n\n----------------------------------------\n\nTITLE: Warning Alert Component for Performance Considerations\nDESCRIPTION: HTML component displaying a warning message about memory usage considerations for flipbook textures and particle effects, with specific guidance for mobile optimization.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/vfx/create-volcanoes.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<Alert severity = 'warning'>\nFeatures with custom textures such as flipbooks cost memory to render. If you use many flipbooks with other features that use high memory, then clients automatically deactivate flipbooks when they are low on memory, which is likely for older mobile phones. To reduce the memory usage of flipbooks, use fewer unique animated particle effects or choose a texture of smaller resolution.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Components for Engagement-Based Payouts Information in JSX\nDESCRIPTION: JSX code that creates a styled grid layout explaining the engagement-based payouts (EBP) system on Roblox. The component uses Material UI Grid and Chip elements to show how developers earn additional Robux based on Premium subscriber engagement.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/earn-on-roblox.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"3%\" size=\"large\" style={{backgroundColor:\"#00a2ff\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Developer share – engagement-based payouts (EBP)\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Mission Configuration Type Structure\nDESCRIPTION: Type definition showing the structure of mission configurations in Roblox, including required fields (missionId, categoryId, tasks) and optional fields for unlock conditions and metadata.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/resources/feature-packages/missions.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n{\n  missionId: string,\n  categoryId: string,\n  tasks: table,\n  -- Optional unlock conditions\n  prerequisites?: table,\n  manualOnly?: boolean,\n  availableAfterUtc?: boolean,\n  availableBeforeUtc?: boolean,\n  repeatable?: boolean,\n  repeatLimit?: number,\n  repeatCooldownSeconds?: number,\n  expireSeconds?: number,\n  expireCountOffline?: boolean,\n  -- Optional metadata\n  displayName?: string,\n  description?: string,\n  visibleAfterComplete?: boolean,\n  visibleAfterFailed?: boolean,\n  visibleBeforeUnlocked?: boolean,\n  invisibleWhileActive?: boolean,\n  rewards?: {\n    assetID: number,\n    displayName: string\n  }[]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PBR Textures to MeshPart\nDESCRIPTION: Instructions for adding Physically-Based Rendering (PBR) textures to a mesh using SurfaceAppearance or MaterialVariant objects\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/parts/meshes.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the **Explorer** window, hover over the MeshPart object. Click the **⊕** button and select **SurfaceAppearance** or **MaterialVariant**.\n2. In the **Properties** window, edit the properties corresponding to the PBR texture maps.\n```\n\n----------------------------------------\n\nTITLE: Trimming Clothing Shape in Blender\nDESCRIPTION: Steps to trim the basic shape of a long-sleeve shirt from a full-body mesh in Blender. This process involves selecting vertices and deleting unwanted sections.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/creating/trimming.md#2025-04-21_snippet_0\n\nLANGUAGE: blender\nCODE:\n```\n1. Select the \"LongSleeve\" object.\n2. Switch to Edit Mode.\n3. Enable X-Ray mode in the top right corner of the viewport.\n4. Click and drag over parts of the mesh that you do not want to include in your shirt.\n5. Press X and select \"Vertices\" to delete these sections of your mesh.\n6. Repeat step 4 until you reach your desired clothing shape.\n```\n\n----------------------------------------\n\nTITLE: Displaying Accessories in Grid Layout - HTML\nDESCRIPTION: This snippet displays avatar accessories in a grid format using the GridContainer component. Each accessory has an associated image and caption that describes it. It's intended for showcasing the range of accessories available for avatars in the Roblox Marketplace.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/marketplace/marketplace-policy.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<GridContainer numColumns='2'>\n<figure>\n    <img src=\"../assets/art/avatar/Acc-Antenna.png\" />\n    <figcaption>Antennas are an example of an accessory you can find in the Marketplace and must be sold separately.</figcaption>\n</figure>\n<figure>\n    <img src=\"../assets/art/avatar/Acc-Robot-Arms.png\" />\n    <figcaption>Robot tentacles are an example of an accessory you can find in the Marketplace and must be sold separately.</figcaption>\n</figure>\n</GridContainer>\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Components for Platform Investment Information in JSX\nDESCRIPTION: JSX code that creates a styled grid layout explaining Roblox's platform investment costs. The component uses Material UI Grid and Chip elements to visualize the 15% portion of revenue allocated to future-looking investments in platform capabilities and tools.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/production/earn-on-roblox.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={1}>\n<Grid item XSmall={2}>\n<Chip label=\"15%\" size=\"large\" style={{backgroundColor:\"#004F80\",color:\"white\",fontSize:\"120%\",width:\"100%\"}} />\n</Grid>\n<Grid item XSmall={10}>\n<Chip label=\"Platform investment\" size=\"large\" color=\"primary\" variant=\"outlined\" style={{fontSize:\"105%\"}}/>\n</Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Rendering Creator Hub Sections with React Grid\nDESCRIPTION: Implements a dynamic rendering mechanism for Creator Hub sections using Material-UI Grid components, handling section titles, descriptions, buttons, and content blocks\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-hub.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{sections.map((section, index) => (\n  <Grid item xs={12} key={index}>\n    {section.title && (\n      <Typography variant='h1'>{section.title}</Typography>\n    )}\n    {/* Additional section rendering logic */}\n  </Grid>\n))}\n```\n\n----------------------------------------\n\nTITLE: Initializing Player and LocalPlayer in Roblox Lua\nDESCRIPTION: This snippet gets the Players service and retrieves the local player. It's used as the foundation for camera control scripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/use-case-tutorials/input-and-camera/control-the-users-camera.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal player = Players.LocalPlayer\n```\n\n----------------------------------------\n\nTITLE: React Chip Component\nDESCRIPTION: This snippet displays a Chip component with a 'Status: Open' label and a success color. It uses the React Chip component to visually represent the status of the program.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/creator-programs/brand-developer-directory.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<figure>\n<Chip\n    color=\"success\"\n    label=\"Status: Open\"\n    size=\"medium\"\n    variant=\"filled\" />\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML with React-like Styling\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video using an iframe with React-like styling. It includes responsive design techniques and custom styling for the container and iframe.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/accessories/layered-clothing.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\nclassName=\"container\"\nstyle={{ position: \"relative\", paddingBottom: \"56.25%\", height: 0, marginBottom: 12 }} >\n<iframe\nsrc=\"https://www.youtube-nocookie.com/embed/gXXukd6yOSs\"\ntitle=\"YouTube video player\"\nframeBorder=\"0\"\nallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\nallowFullScreen\nstyle={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\" }} ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Velocity Constraint - React\nDESCRIPTION: This code snippet demonstrates how to create an Angular Velocity mover constraint using React components which includes a button linking to the Angular Velocity documentation and a video demo of the functionality.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/physics/mover-constraints.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Card variant=\"outlined\" style={{height: '100%'}}>\n<CardContent>\n<Button href=\"../physics/constraints/angular-velocity.md\" size=\"large\" color=\"primaryBrand\" variant=\"outlined\" fullWidth>Angular Velocity</Button>\n<p></p>\n<CardMedia component=\"video\" controls src=\"../assets/physics/constraints/AngularVelocity-Demo.mp4\" />\n<p></p>\n<figcaption>[AngularVelocity](../physics/constraints/angular-velocity.md) applies torque on an assembly to maintain a constant angular velocity</figcaption>\n</CardContent>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Managing Force Field Screen Visibility in Roblox - Lua\nDESCRIPTION: This script manages the visibility of the ForceFieldGui screen when a player joins or rejoins a game. It checks for the presence of a ForceField in the player's character and enables or disables the GUI accordingly. The script listens for the CharacterAdded event to run on new character instances.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal localPlayer = Players.LocalPlayer\n\nlocal function onCharacterAddedAsync(character: Model)\n\tlocal forceField = character:WaitForChild(\"ForceField\", 3)\n\tif not forceField then\n\t\t-- If the player spawns at a spawn point with ForceField disabled\n\t\treturn\n\tend\n\n\tforceField.Visible = false\n\tlocalPlayer.PlayerGui:WaitForChild(\"ForceFieldGui\").Enabled = true\n\tforceField.Destroying:Wait()\n\tlocalPlayer.PlayerGui.ForceFieldGui.Enabled = false\nend\n\nif localPlayer.Character then\n\tonCharacterAddedAsync(localPlayer.Character)\nend\n\nlocalPlayer.CharacterAdded:Connect(onCharacterAddedAsync)\n```\n\n----------------------------------------\n\nTITLE: Controller Input Enum Mapping Examples\nDESCRIPTION: Examples of key mappings used in the Controller Emulator to simulate gamepad input, showing keyboard keys mapped to their corresponding gamepad button enums.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/includes/studio/controller-emulator.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nEnum.KeyCode.ButtonL2|ButtonL2\n```\n\nLANGUAGE: lua\nCODE:\n```\nEnum.KeyCode.ButtonA|ButtonA\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Link Substitution in Roblox API Documentation\nDESCRIPTION: This code snippet illustrates how to use link substitution to customize the displayed text of Roblox API links, improving readability and conciseness in documentation.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/STYLE.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- **BAD**: [`MarketplaceService`](https://create.roblox.com/docs/reference/engine/classes/MarketplaceService) is responsible for in-experience transactions. The most notable methods are [`MarketplaceService:PromptProductPurchase()`](https://create.roblox.com/docs/reference/engine/classes/MarketplaceService#PromptProductPurchase) and [`MarketplaceService:PromptPurchase()`](https://create.roblox.com/docs/reference/engine/classes/MarketplaceService#PromptPurchase), as well as the callback [`MarketplaceService.ProcessReceipt`](https://create.roblox.com/docs/reference/engine/classes/MarketplaceService#ProcessReceipt) which must be defined so that transactions do not fail.\n- **BETTER**: [`MarketplaceService`](https://create.roblox.com/docs/reference/engine/classes/MarketplaceService) is responsible for in-experience transactions. The most notable methods are [`PromptProductPurchase()`](https://create.roblox.com/docs/reference/engine/classes/MarketplaceService#PromptProductPurchase) and [`PromptPurchase()`](https://create.roblox.com/docs/reference/engine/classes/MarketplaceService#PromptPurchase), as well as the callback [`ProcessReceipt`](https://create.roblox.com/docs/reference/engine/classes/MarketplaceService#ProcessReceipt) which must be defined so that transactions do not fail.\n```\n\n----------------------------------------\n\nTITLE: Initializing HUD GUI Components in Lua\nDESCRIPTION: This script sets up various components of the Heads Up Display (HUD) GUI for a Laser Tag game, including player portrait, name, team color, objective, team points, hitmarker, and touch button setup.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/tutorials/curriculums/user-interface-design/implement-designs-in-studio.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal setPlayerPortrait = require(script.setPlayerPortrait)\nlocal setPlayerName = require(script.setPlayerName)\nlocal startSyncingTeamColor = require(script.startSyncingTeamColor)\nlocal setObjective = require(script.setObjective)\nlocal setupTouchButtonAsync = require(script.setupTouchButtonAsync)\nlocal startSyncingTeamPoints = require(script.startSyncingTeamPoints)\nlocal disableMouseWhileGuiEnabled = require(script.disableMouseWhileGuiEnabled)\nlocal setupHitmarker = require(script.setupHitmarker)\n\nlocal localPlayer = Players.LocalPlayer\nlocal gui = localPlayer.PlayerGui:WaitForChild(\"HUDGui\")\n\nsetPlayerPortrait(gui)\nsetPlayerName(gui)\nstartSyncingTeamColor(gui)\nsetObjective(gui)\nstartSyncingTeamPoints(gui)\ndisableMouseWhileGuiEnabled(gui)\nsetupHitmarker(gui)\nsetupTouchButtonAsync(gui)\n```\n\n----------------------------------------\n\nTITLE: Face Control: JawRight\nDESCRIPTION: This section describes the `JawRight` face control, which moves the avatar's jaw, teeth, tongue, and lower lip to the right. It references the `Class.FaceControls.JawRight` property and compares it to `MouthRight`.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/facial-animation/facs-poses-reference.md#2025-04-21_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Adjusting ColorShift_Top in Roblox Lighting\nDESCRIPTION: Sets the ColorShift_Top property of the Lighting service to adjust the hue that reflects from surfaces facing the sun or moon.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/environment/lighting.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ngame.Lighting.ColorShift_Top = Color3.new(0/255, 100/255, 255/255)\n```\n\n----------------------------------------\n\nTITLE: Code Reference - Roblox Functions\nDESCRIPTION: Examples of Lua functions referenced in the lesson, including sellItems() with multiple parameters and giveUpgrade() function placement in scripts.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/education/lesson-plans/roblox-developer/roblox-developer-4.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nsellItems(playerItems, playerGold)\n```\n\nLANGUAGE: Lua\nCODE:\n```\nfunction giveUpgrade()\n    -- Function implementation\nend\n\nclickDetector.MouseClick:Connect(function()\n    -- Click handler implementation\nend)\n```\n\n----------------------------------------\n\nTITLE: Configuring SurfaceAppearance for PBR Textures in Roblox Lua\nDESCRIPTION: Sets up a SurfaceAppearance object with PBR (Physically Based Rendering) textures for an imported character model. This includes setting ColorMap, MetalnessMap, NormalMap, and RoughnessMap properties.\nSOURCE: https://github.com/roblox/creator-docs/blob/main/content/en-us/art/characters/import.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal surfaceAppearance = Instance.new(\"SurfaceAppearance\")\nsurfaceAppearance.Parent = meshPart\nsurfaceAppearance.ColorMap = \"_ALB_texture_image_id\"\nsurfaceAppearance.MetalnessMap = \"_MTL_texture_image_id\"\nsurfaceAppearance.NormalMap = \"_NOR_texture_image_id\"\nsurfaceAppearance.RoughnessMap = \"_RGH_texture_image_id\"\n```"
  }
]