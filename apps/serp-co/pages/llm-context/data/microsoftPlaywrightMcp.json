[
  {
    "owner": "microsoft",
    "repo": "playwright-mcp",
    "content": "TITLE: Programmatic Usage of Playwright MCP with Custom Transport\nDESCRIPTION: JavaScript code showing how to create and configure a Playwright MCP server programmatically. This example sets up the server with headless mode and connects it to a Server-Sent Events transport.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { createServer } from '@playwright/mcp';\n\n// ...\n\nconst server = createServer({\n  launchOptions: { headless: true }\n});\ntransport = new SSEServerTransport(\"/messages\", res);\nserver.connect(transport);\n```\n\n----------------------------------------\n\nTITLE: Writing a Regression Test for Bug Verification in Playwright\nDESCRIPTION: This TypeScript code creates a Playwright test that verifies a reported bug where The Garfield Movie displays an incorrect runtime (101 minutes instead of the actual 90 minutes). The test navigates to the movie app, finds the specific movie, and checks the runtime information with appropriate assertions.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/examples.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\n/**\n * Regression test for bug: The Garfield Movie showing incorrect runtime\n * User reported actual runtime is 90 minutes, but site shows 101 minutes\n */\ntest('verify The Garfield Movie runtime bug', async ({ page }) => {\n  // Navigate to the movies app home page\n  await page.goto('https://debs-obrien.github.io/playwright-movies-app');\n  \n  // Wait for page to load completely\n  await expect(page.getByRole('heading', { name: 'Popular', level: 1 })).toBeVisible();\n  \n  // Look for The Garfield Movie and click on it\n  const garfieldMovieLink = page.getByRole('link', { name: /poster of The Garfield Movie/i });\n  await expect(garfieldMovieLink).toBeVisible();\n  await garfieldMovieLink.click();\n  \n  // Verify we're on the correct movie page\n  await expect(page.getByRole('heading', { name: 'The Garfield Movie', level: 1 })).toBeVisible();\n  \n  // Check the runtime information\n  // The bug: Expected runtime should be 90 min, but site shows 101 min\n  const movieInfoText = await page.locator('text=English / 101 min. / 2024').textContent();\n  \n  // This test will fail because of the bug (which is what we want to demonstrate)\n  // Once fixed, this assertion should be updated to the correct runtime (90 min)\n  expect(movieInfoText).toContain('90 min');\n  \n  // Alternative assertion that verifies the incorrect runtime is still present\n  // Uncomment this and comment the above assertion to verify the bug exists\n  // expect(movieInfoText).toContain('101 min');\n});\n```\n\n----------------------------------------\n\nTITLE: Tab Management API Functions\nDESCRIPTION: Core functions for managing browser tabs including listing, creating, selecting, and closing tabs. These functions handle basic tab operations with optional parameters for URL navigation and tab selection.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- browser_tab_list: List browser tabs\n- browser_tab_new: Open new tab with optional URL\n- browser_tab_select: Select tab by index\n- browser_tab_close: Close specified or current tab\n```\n\n----------------------------------------\n\nTITLE: Navigation API Functions\nDESCRIPTION: Basic navigation functions for browser control including URL navigation and page history traversal. These functions enable moving between pages and managing browser history.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- browser_navigate: Navigate to specified URL\n- browser_navigate_back: Go to previous page\n- browser_navigate_forward: Go to next page\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright MCP Server in JavaScript\nDESCRIPTION: Example configuration object for setting up the Playwright MCP server. This defines the command and arguments needed to run the server using npx.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard and Console API Functions\nDESCRIPTION: Functions for keyboard input simulation and console message retrieval. Includes key press simulation and access to browser console output.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- browser_press_key: Simulate keyboard key press\n- browser_console_messages: Retrieve console messages\n```\n\n----------------------------------------\n\nTITLE: Utility API Functions\nDESCRIPTION: General utility functions for browser control including wait operations, page closure, and browser installation. These functions provide basic browser management capabilities.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- browser_wait: Wait for specified duration\n- browser_close: Close current page\n- browser_install: Install required browser\n```\n\n----------------------------------------\n\nTITLE: File and Media API Functions\nDESCRIPTION: Functions for handling file operations including file upload and PDF generation. These utilities manage file interactions and document export capabilities.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- browser_file_upload: Upload single or multiple files\n- browser_pdf_save: Export page as PDF\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Browser Mode for Playwright MCP\nDESCRIPTION: Configuration for running Playwright MCP in headless mode (without GUI). This is useful for background or batch operations where visual output is not needed.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--headless\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vision Mode for Playwright MCP\nDESCRIPTION: Configuration for running Playwright MCP in Vision Mode, which uses screenshots for visual-based interactions instead of accessibility snapshots. This works best with computer use models that can interact using X-Y coordinates.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--vision\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright MCP Server in VS Code via CLI (Standard)\nDESCRIPTION: Command to install the Playwright MCP server using the standard VS Code CLI. This adds the server configuration to VS Code for use with GitHub Copilot agent.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Client for SSE Transport\nDESCRIPTION: Configuration for connecting to a Playwright MCP server using SSE transport. This specifies the URL endpoint for the server running on a specific port.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://localhost:8931/sse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Playwright MCP Server with SSE Transport on Linux\nDESCRIPTION: Command to run the Playwright MCP server with a specific port for Server-Sent Events (SSE) transport. This is useful for systems without a display or when running from IDE worker processes.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @playwright/mcp@latest --port 8931\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright MCP Server in VS Code Insiders via CLI\nDESCRIPTION: Command to install the Playwright MCP server using the VS Code Insiders CLI. This adds the server configuration to VS Code Insiders for use with GitHub Copilot agent.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\n----------------------------------------\n\nTITLE: Listing User Data Directory Paths for Playwright MCP\nDESCRIPTION: Shows the default paths where Playwright MCP stores browser profile data across different operating systems. This information is useful for managing or clearing browser state between sessions.\nSOURCE: https://github.com/microsoft/playwright-mcp/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n- `%USERPROFILE%\\AppData\\Local\\ms-playwright\\mcp-chrome-profile` on Windows\n- `~/Library/Caches/ms-playwright/mcp-chrome-profile` on macOS\n- `~/.cache/ms-playwright/mcp-chrome-profile` on Linux\n```"
  }
]