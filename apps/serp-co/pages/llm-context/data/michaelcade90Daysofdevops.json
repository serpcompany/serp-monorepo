[
  {
    "owner": "michaelcade",
    "repo": "90daysofdevops",
    "content": "TITLE: Defining a Stateless Nginx Application with YAML in Kubernetes\nDESCRIPTION: This YAML manifest defines a complete nginx application deployment with three components: a namespace, a deployment with a single nginx container, and a service to expose the application. This demonstrates how to structure a multi-component application deployment in a single YAML file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day54.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: nginx\n  \"labels\": {\n    \"name\": \"nginx\"\n  }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: nginx\nspec:\n  selector:\n    app: nginx-deployment\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: Defining AWS EC2 Infrastructure with Pulumi in Python\nDESCRIPTION: This example shows how to use Pulumi's Python SDK to define and deploy an AWS EC2 instance as infrastructure as code. The code specifies instance type, AMI, and tags, then exports the instance's public IP address. This can be deployed using the Pulumi CLI.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day47.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pulumi\nfrom pulumi_aws import ec2\n\n# Define an EC2 instance\nserver = ec2.Instance('server',\n    instance_type='t2.micro',\n    ami='ami-0c55b159cbfafe1',\n    tags={\n        'Name': 'cloud-server',\n    },\n)\n\n# Export the server's IP address\npulumi.export('ip_address', server.public_ip)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Ansible Playbook for Apache Web Server Configuration\nDESCRIPTION: This playbook installs and configures Apache on webservers grouped in the hosts file. It defines environment variables, installs the latest version of Apache, configures ports through templates, creates a custom index.html file, ensures Apache is running, and sets up handlers for service restarts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps\"\n  tasks:\n  - name: ensure apache is at the latest version\n    apt:\n      name: apache2\n      state: latest\n\n  - name: write the apache2 ports.conf config file\n    template:\n      src: templates/ports.conf.j2\n      dest: /etc/apache2/ports.conf\n    notify:\n    - restart apache\n\n  - name: write a basic index.html file\n    template:\n      src: templates/index.html.j2\n      dest: /var/www/html/index.html\n    notify:\n    - restart apache\n\n  - name: ensure apache is running\n    service:\n      name: apache2\n      state: started\n\n  handlers:\n    - name: restart apache\n      service:\n        name: apache2\n        state: restarted\n```\n\n----------------------------------------\n\nTITLE: Installing Minikube using Arkade in Bash\nDESCRIPTION: Command to install Minikube using the arkade package manager tool. Arkade simplifies the installation of Kubernetes tools and CLIs across platforms.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get minikube\n```\n\n----------------------------------------\n\nTITLE: Creating a ClusterIP Service for Nginx\nDESCRIPTION: Command to expose a deployment as a ClusterIP service in Kubernetes, making nginx accessible within the cluster on port 80.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl expose deployment nginx --port=80 --target-port=80\n```\n\n----------------------------------------\n\nTITLE: Joining Tables with INNER JOIN in SQL\nDESCRIPTION: SQL query demonstrating an INNER JOIN between the staff and address tables using the address_id column. This retrieves all staff members with their corresponding address information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM staff s\nINNER JOIN address a ON s.address_id = a.address_id\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Container Application with Docker Compose\nDESCRIPTION: This YAML file defines a WordPress application with a MySQL database using Docker Compose. It specifies the services, images, volumes, and environment variables needed to run the application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day46.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\n\nservices:\n  DB:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n\n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    volumes:\n      - wordpress_data:/var/www/html\n    ports:\n      - '8000:80'\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\nvolumes:\n  db_data: {}\n  wordpress_data: {}\n```\n\n----------------------------------------\n\nTITLE: Complete Bash Script for DevOps Environment Setup\nDESCRIPTION: This Bash script automates the setup of a development environment by creating users, installing packages, configuring default shell settings, and creating project directories. It includes error handling, user feedback, and demonstrates common shell scripting patterns for system administration tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day30.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n#######################################\n# DevOps Scenario - The company has just hired a new developer and \n# we need to get their system ready for them to start. \n#######################################\n\n#######################################\n# Setting up username variable\n#######################################\necho \"What is the new developer's name?\"\nread name\necho \"Setting up development environment for $name\"\n\n#######################################\n# Setting up username variable for the system\n#######################################\nusername=$(echo \"$name\" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')\necho \"Creating system username: $username\"\nsleep 2\n\n#######################################\n# Checking if user exists\n#######################################\nif id \"$username\" &>/dev/null; then\n    echo \"User $username already exists!\"\n    exit 1\nfi\n\n#######################################\n# Creating the user\n#######################################\necho \"Creating user: $username\"\nuseradd -m -s /bin/bash \"$username\"\necho \"Created user: $username\"\nsleep 2\n\n#######################################\n# Installing required packages\n#######################################\necho \"Installing development tools and packages...\"\npackages=(\"git\" \"vscode\" \"docker\" \"nodejs\")\n\nfor package in \"${packages[@]}\"; do\n    echo \"Installing $package...\"\n    # This is where you would put your actual install commands\n    # For example: apt-get install -y $package\n    # We're simulating the installation for this exercise\n    sleep 1\n    echo \"$package installed successfully!\"\ndone\n\n#######################################\n# Configuring default shell settings\n#######################################\necho \"Configuring shell preferences...\"\n\n# Create .bashrc with some helpful aliases and settings\ncat > /home/$username/.bashrc << EOF\n# .bashrc for $name\n\n# Source global definitions\nif [ -f /etc/bashrc ]; then\n    . /etc/bashrc\nfi\n\n# User specific environment\nPATH=\\$HOME/.local/bin:\\$HOME/bin:\\$PATH\n\n# Aliases\nalias ll='ls -la'\nalias gh='history | grep'\n\n# Git aliases\nalias gs='git status'\nalias gc='git commit'\nalias gp='git pull'\nalias gpush='git push'\n\n# Docker aliases\nalias dps='docker ps'\nalias di='docker images'\n\n# Welcome message\necho \"Welcome to your development environment, $name!\"\nEOF\n\n# Set correct ownership\nchown $username:$username /home/$username/.bashrc\n\n#######################################\n# Creating project directories\n#######################################\necho \"Setting up project directories...\"\n\nmkdir -p /home/$username/projects\nmkdir -p /home/$username/projects/personal\nmkdir -p /home/$username/projects/work\nmkdir -p /home/$username/projects/test\n\n# Set correct ownership\nchown -R $username:$username /home/$username/projects\n\n#######################################\n# Finishing up\n#######################################\necho \"============================================\"\necho \"Setup complete for $name!\"\necho \"Username: $username\"\necho \"Home directory: /home/$username\"\necho \"Project directories initialized\"\necho \"Development tools installed: ${packages[*]}\"\necho \"============================================\"\necho \"The system is ready for the new developer to start!\"\n\n```\n\n----------------------------------------\n\nTITLE: Vagrant Configuration for Kubernetes Cluster\nDESCRIPTION: Vagrantfile that defines a multi-node Kubernetes cluster setup with one master and two worker nodes. Includes network configuration, resource allocation, and provisioning scripts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day52.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nNUM_WORKER_NODES=2\nIP_NW=\"10.0.0.\"\nIP_START=10\n\nVagrant.configure(\"2\") do |config|\n    config.vm.provision \"shell\", inline: <<-SHELL\n        apt-get update -y\n        echo \"$IP_NW$((IP_START))  master-node\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+1))  worker-node01\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+2))  worker-node02\" >> /etc/hosts\n    SHELL\n    config.vm.box = \"bento/ubuntu-21.10\"\n    config.vm.box_check_update = true\n\n    config.vm.define \"master\" do |master|\n      master.vm.hostname = \"master-node\"\n      master.vm.network \"private_network\", ip: IP_NW + \"#{IP_START}\"\n      master.vm.provider \"virtualbox\" do |vb|\n          vb.memory = 4048\n          vb.cpus = 2\n          vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n      end\n      master.vm.provision \"shell\", path: \"scripts/common.sh\"\n      master.vm.provision \"shell\", path: \"scripts/master.sh\"\n    end\n\n    (1..NUM_WORKER_NODES).each do |i|\n      config.vm.define \"node0#{i}\" do |node|\n        node.vm.hostname = \"worker-node0#{i}\"\n        node.vm.network \"private_network\", ip: IP_NW + \"#{IP_START + i}\"\n        node.vm.provider \"virtualbox\" do |vb|\n            vb.memory = 2048\n            vb.cpus = 1\n            vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n        end\n        node.vm.provision \"shell\", path: \"scripts/common.sh\"\n        node.vm.provision \"shell\", path: \"scripts/node.sh\"\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Git History Rewriting Commands\nDESCRIPTION: Commands for modifying commit history, including amending commits and rebasing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\ngit rebase <base>\ngit reflog\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline for Building and Pushing Docker Image\nDESCRIPTION: A complete Jenkins pipeline script that clones a GitHub repository, builds a Docker image using Kaniko, and pushes it to DockerHub. It uses a Kubernetes Pod template to define the build environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day73.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npodTemplate(yaml: '''\n    apiVersion: v1\n    kind: Pod\n    spec:\n      containers:\n      - name: maven\n        image: maven:3.8.1-jdk-8\n        command:\n        - sleep\n        args:\n        - 99d\n      - name: kaniko\n        image: gcr.io/kaniko-project/executor:debug\n        command:\n        - sleep\n        args:\n        - 9999999\n        volumeMounts:\n        - name: kaniko-secret\n          mountPath: /kaniko/.docker\n      restartPolicy: Never\n      volumes:\n      - name: kaniko-secret\n        secret:\n            secretName: dockercred\n            items:\n            - key: .dockerconfigjson\n              path: config.json\n''') {\n  node(POD_LABEL) {\n    stage('Get the project') {\n      git url: 'https://github.com/scriptcamp/kubernetes-kaniko.git', branch: 'main'\n      container('maven') {\n        stage('Test the project') {\n          sh '''\n          echo pwd\n          '''\n        }\n      }\n    }\n\n    stage('Build & Test the Docker Image') {\n      container('kaniko') {\n        stage('Deploy to DockerHub') {\n          sh '''\n            /kaniko/executor --context `pwd` --destination michaelcade1/helloworld:latest\n          '''\n        }\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx with SSL Termination for Load Balancing\nDESCRIPTION: This configuration demonstrates SSL termination at the Nginx load balancer level. It listens on port 443 with SSL, specifies certificate files, and forwards decrypted traffic to backend servers, reducing the SSL processing load on application servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day34.md#2025-04-17_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 443 ssl;\n    server_name www.example.com;\n\n    ssl_certificate www.example.com.crt;\n    ssl_certificate_key www.example.com.key;\n\n    location / {\n        proxy_pass http://myapp1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gitleaks GitHub Action for Secret Scanning in Repositories\nDESCRIPTION: This GitHub Actions workflow configures Gitleaks to scan repositories for sensitive information like credentials, tokens, and secrets. It runs on pull requests and pushes, and will fail if any secrets are detected in the codebase.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: gitleaks\non:\n  pull_request:\n  push:\njobs:\n  scan:\n    name: gitleaks\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: gitleaks/gitleaks-action@v2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret in Kubernetes using kubectl\nDESCRIPTION: This command creates a TLS secret named 'tls-secret' using certificate and key files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day41.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Infrastructure Testing\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow for testing infrastructure code. It includes jobs for linting, validation, policy checks, security scanning, and functional testing using tools like Terraform, Bicep, Azure Policies, Snyk, and Pester.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day57.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Infrastructure CI/CD\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run linter\n        run: # Add linting commands here\n\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Validate Terraform\n        run: terraform validate\n      - name: Validate Bicep\n        uses: azure/arm-deploy@v1\n        with:\n          deploymentName: preflight\n          template-file: ./main.bicep\n\n  policy-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Azure Policy checks\n        uses: microsoft/ps-rule@v1\n        with:\n          inputPath: './'\n          outputFormat: NUnit3\n          outputPath: ps-rule-results.xml\n\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Snyk Security Scan\n        uses: snyk/actions/iac@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n\n  pester-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Pester Tests\n        shell: pwsh\n        run: |\n          Install-Module -Name Pester -Force\n          Invoke-Pester -Path ./tests -OutputFile test-results.xml -OutputFormat NUnitXml\n\n  deploy:\n    needs: [lint, validate, policy-check, security-scan, pester-tests]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Deploy Infrastructure\n        run: # Add deployment commands here\n\n  post-deploy-tests:\n    needs: deploy\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Post-Deployment Tests\n        run: # Add post-deployment test commands here\n```\n\n----------------------------------------\n\nTITLE: Editing Resources with kubectl in Kubernetes\nDESCRIPTION: Command for editing existing resources in a Kubernetes cluster, specifically a service. This allows for dynamic modification of resource configurations without having to delete and recreate them.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit svc/servicename\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flask Web Application in Python\nDESCRIPTION: This snippet demonstrates how to create a simple Flask web application with a single route that returns 'Hello, World!' when the root URL is accessed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day46.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Declarative Kubernetes Pipeline Example\nDESCRIPTION: Example Jenkins pipeline that demonstrates running commands inside a Kubernetes container using declarative syntax. Creates a pod with Ubuntu container to execute simple commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day73.md#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n// Uses Declarative syntax to run commands inside a container.\npipeline {\n    agent {\n        kubernetes {\n            yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: shell\n    image: ubuntu\n    command:\n    - sleep\n    args:\n    - infinity\n'''\n            defaultContainer 'shell'\n        }\n    }\n    stages {\n        stage('Main') {\n            steps {\n                sh 'hostname'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Operations in Python\nDESCRIPTION: Shows how to create sets and perform common set operations like union, intersection, and difference. Sets are mutable collections that store unique immutable elements and are often used for mathematical operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day44.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_set = {1, 2, 3, 4, 5}\nother_set = {3, 4, 5, 6, 7}\nprint(my_set.union(other_set))  # {1, 2, 3, 4, 5, 6, 7}\nprint(my_set.intersection(other_set)) # {3, 4, 5}\nprint(my_set.difference(other_set))  # {1, 2}\n```\n\n----------------------------------------\n\nTITLE: Apache Web Server Configuration Playbook in Ansible\nDESCRIPTION: Ansible playbook that installs and configures Apache web servers on multiple nodes. The playbook sets up custom ports (8000 for HTTP, 4443 for HTTPS), configures a welcome message, and ensures Apache is running with the latest version. It includes handlers for service restart when configuration changes occur.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day65.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps\"\n  tasks:\n  - name: ensure apache is at the latest version\n    apt:\n      name: apache2\n      state: latest\n\n  - name: write the apache2 ports.conf config file\n    template:\n      src: templates/ports.conf.j2\n      dest: /etc/apache2/ports.conf\n    notify:\n    - restart apache\n\n  - name: write a basic index.html file\n    template:\n      src: templates/index.html.j2\n      dest: /var/www/html/index.html\n    notify:\n    - restart apache\n\n  - name: ensure apache is running\n    service:\n      name: apache2\n      state: started\n\n  handlers:\n    - name: restart apache\n      service:\n        name: apache2\n        state: restarted\n```\n\n----------------------------------------\n\nTITLE: Deploying WordPress with MySQL using Terraform and Docker\nDESCRIPTION: Terraform configuration for deploying WordPress and MySQL containers, equivalent to a docker-compose setup. It creates a Docker volume for database persistence, sets up a Docker network, and establishes the necessary connections between containers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day60.md#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nvariable wordpress_port {\n  default = \"8080\"\n}\n\nresource \"docker_volume\" \"db_data\" {\n  name = \"db_data\"\n}\n\nresource \"docker_network\" \"wordpress_net\" {\n  name = \"wordpress_net\"\n}\n\nresource \"docker_container\" \"db\" {\n  name  = \"db\"\n  image = \"mysql:5.7\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n     \"MYSQL_ROOT_PASSWORD=wordpress\",\n     \"MYSQL_PASSWORD=wordpress\",\n     \"MYSQL_USER=wordpress\",\n     \"MYSQL_DATABASE=wordpress\"\n  ]\n  mounts {\n    type = \"volume\"\n    target = \"/var/lib/mysql\"\n    source = \"db_data\"\n    }\n}\n\nresource \"docker_container\" \"wordpress\" {\n  name  = \"wordpress\"\n  image = \"wordpress:latest\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n    \"WORDPRESS_DB_HOST=db:3306\",\n    \"WORDPRESS_DB_USER=wordpress\",\n    \"WORDPRESS_DB_NAME=wordpress\",\n    \"WORDPRESS_DB_PASSWORD=wordpress\"\n  ]\n  ports {\n    internal = \"80\"\n    external = \"${var.wordpress_port}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic HTTP Load Balancing in Nginx\nDESCRIPTION: This configuration defines an upstream server group with three application servers and sets up a virtual host to distribute client requests across these servers. It includes a health check to ensure traffic is only sent to operational servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day34.md#2025-04-17_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream myapp1 {\n    server srv1.example.com;\n    server srv2.example.com;\n    server srv3.example.com;\n}\n```\n\n----------------------------------------\n\nTITLE: Git Rebase Operations\nDESCRIPTION: Commands for rebasing branches interactively, allowing modification of commit history and integration of changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i <base>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GitHub Actions CI/CD Workflow for a JavaScript Application\nDESCRIPTION: A GitHub Actions workflow configuration that demonstrates a basic CI/CD pipeline. The workflow is triggered on push to the main branch, checks out the code, sets up Node.js, installs dependencies, runs tests, and deploys to a production environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day50.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Node.js CI/CD\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  build-test-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Run tests\n      run: npm test\n      \n    - name: Deploy to production\n      run: |\n        # Commands to deploy to your production environment\n        echo \"Deploying to production...\"\n```\n\n----------------------------------------\n\nTITLE: Describing Kubernetes Resources\nDESCRIPTION: Commands for getting detailed information about Kubernetes resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe nodes\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX to Kubernetes using Terraform\nDESCRIPTION: Terraform configuration to deploy NGINX to a Kubernetes cluster. Creates a namespace, deployment with 2 replicas, and a NodePort service. Uses the Kubernetes provider and requires a valid kubeconfig file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \">= 2.0.0\"\n    }\n  }\n}\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\nresource \"kubernetes_namespace\" \"test\" {\n  metadata {\n    name = \"nginx\"\n  }\n}\nresource \"kubernetes_deployment\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    replicas = 2\n    selector {\n      match_labels = {\n        app = \"MyTestApp\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"MyTestApp\"\n        }\n      }\n      spec {\n        container {\n          image = \"nginx\"\n          name  = \"nginx-container\"\n          port {\n            container_port = 80\n          }\n        }\n      }\n    }\n  }\n}\nresource \"kubernetes_service\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    selector = {\n      app = kubernetes_deployment.test.spec.0.template.0.metadata.0.labels.app\n    }\n    type = \"NodePort\"\n    port {\n      node_port   = 30201\n      port        = 80\n      target_port = 80\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Image Resource in Terraform\nDESCRIPTION: Terraform resource block that pulls an Nginx Docker image from Docker Hub. This specifies the image name and sets a custom tag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_3\n\nLANGUAGE: HCL (Terraform)\nCODE:\n```\nresource \"docker_image\" \"nginx\" {\n  name         = \"nginx:latest\"\n  keep_locally = false\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Cluster Architecture Components\nDESCRIPTION: Overview of core Kubernetes cluster components including API server, scheduler, controller manager, etcd, and worker nodes. These components work together to form the control plane and worker node architecture of a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day49.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCluster Components:\n- API Server: Validates and configures data for API objects\n- Scheduler: Assigns pods to nodes based on resources\n- Controller Manager: Manages core control loops\n- etcd: Key-value store for cluster data\n- Worker Nodes: Run container runtime and kubelet\n```\n\n----------------------------------------\n\nTITLE: Simple Terraform Hello World Output\nDESCRIPTION: This snippet demonstrates a simple Terraform configuration that outputs a 'Hello World' message, showcasing the basic structure of a Terraform file with an output block.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day58.md#2025-04-17_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_version = \">= 0.12.26\"\n}\n\noutput \"hello_world\" {\n  value = \"Hello, 90DaysOfDevOps from Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Super-Linter in GitHub Actions\nDESCRIPTION: Shows how to set up a GitHub Actions workflow that uses the Super-Linter action to lint code in a repository. It triggers on push events and uses the latest Ubuntu runner.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day75.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Super-Linter\n\non: push\n\njobs:\n  super-lint:\n    name: Lint code base\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run Super-Linter\n        uses: github/super-linter@v3\n        env:\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for WordPress and MySQL\nDESCRIPTION: A docker-compose.yml file that defines a multi-container application with WordPress and MySQL. It configures volumes for data persistence, environment variables for database connection, and port mapping for accessing the WordPress site.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day46.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n    \nservices:\n  db:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    \n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    volumes:\n      - wordpress_data:/var/www/html\n    ports:\n      - \"8000:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\nvolumes:\n  db_data: {}\n  wordpress_data: {}\n```\n\n----------------------------------------\n\nTITLE: WordPress and MySQL Docker Compose Configuration\nDESCRIPTION: Docker Compose YAML configuration for deploying WordPress with a MySQL database. Defines services, volumes, environment variables, and networking for a complete WordPress stack.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day46.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  DB:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n\n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    volumes:\n      - wordpress_data:/var/www/html\n    ports:\n      - \"8000:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\nvolumes:\n  db_data: {}\n  wordpress_data: {}\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform Infrastructure\nDESCRIPTION: Command to destroy all resources created by the Terraform configuration, effectively tearing down the infrastructure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Viewing Git History\nDESCRIPTION: Commands for viewing commit history in different formats\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day39.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log\ngit log --oneline\ngit log --oneline --reverse\n```\n\n----------------------------------------\n\nTITLE: Vagrant Configuration for Kubernetes Cluster\nDESCRIPTION: Vagrantfile that defines a multi-node Kubernetes cluster setup with one master and two worker nodes. Configures VM resources, networking, and provisioning scripts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day52.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nNUM_WORKER_NODES=2\nIP_NW=\"10.0.0.\"\nIP_START=10\n\nVagrant.configure(\"2\") do |config|\n    config.vm.provision \"shell\", inline: <<-SHELL\n        apt-get update -y\n        echo \"$IP_NW$((IP_START))  master-node\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+1))  worker-node01\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+2))  worker-node02\" >> /etc/hosts\n    SHELL\n    config.vm.box = \"bento/ubuntu-21.10\"\n    config.vm.box_check_update = true\n\n    config.vm.define \"master\" do |master|\n      master.vm.hostname = \"master-node\"\n      master.vm.network \"private_network\", ip: IP_NW + \"#{IP_START}\"\n      master.vm.provider \"virtualbox\" do |vb|\n          vb.memory = 4048\n          vb.cpus = 2\n          vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n      end\n      master.vm.provision \"shell\", path: \"scripts/common.sh\"\n      master.vm.provision \"shell\", path: \"scripts/master.sh\"\n    end\n\n    (1..NUM_WORKER_NODES).each do |i|\n      config.vm.define \"node0#{i}\" do |node|\n        node.vm.hostname = \"worker-node0#{i}\"\n        node.vm.network \"private_network\", ip: IP_NW + \"#{IP_START + i}\"\n        node.vm.provider \"virtualbox\" do |vb|\n            vb.memory = 2048\n            vb.cpus = 1\n            vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n        end\n        node.vm.provision \"shell\", path: \"scripts/common.sh\"\n        node.vm.provision \"shell\", path: \"scripts/node.sh\"\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Interactive User Account Creation Script\nDESCRIPTION: A more interactive bash script that prompts for username and password input, creates the user account with a home directory, sets the password, and displays a success message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\necho \"What is your intended username?\"\nread  username\necho \"What is your password\"\nread  password\n\n# Bir kullanıcı komut satırı argümanı olarak geçilebilir\necho \"$1 user account being created.\"\n\n# Argüman adıyla bir kullanıcı oluşturulur.\nsudo useradd -m \"$1\"\n\n# Bir şifre komut satırı argümanı olarak geçilebilir.\n# Kullanıcı için şifre ayarlanır.\nsudo chpasswd <<< \"$1\":\"$2\"\n\n# Hesap oluşturma başarılı bir mesajı gösterilir.\necho \"The Account for $username has successfully been created\"\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX Container with Terraform\nDESCRIPTION: A basic Terraform configuration to deploy an NGINX web server as a Docker container and expose it on port 8000. This example demonstrates Terraform initialization, Docker provider configuration, and resource definition for Docker images and containers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day60.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nresource \"docker_image\" \"nginx\" {\n  name         = \"nginx:latest\"\n  keep_locally = false\n}\n\nresource \"docker_container\" \"nginx\" {\n  image = docker_image.nginx.latest\n  name  = \"tutorial\"\n  ports {\n    internal = 80\n    external = 8000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX on Kubernetes using Terraform\nDESCRIPTION: Terraform configuration to create a Kubernetes namespace, deployment with 2 NGINX replicas, and a NodePort service. The configuration uses the Kubernetes provider and references the local kubeconfig file for cluster access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \">= 2.0.0\"\n    }\n  }\n}\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\nresource \"kubernetes_namespace\" \"test\" {\n  metadata {\n    name = \"nginx\"\n  }\n}\nresource \"kubernetes_deployment\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    replicas = 2\n    selector {\n      match_labels = {\n        app = \"MyTestApp\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"MyTestApp\"\n        }\n      }\n      spec {\n        container {\n          image = \"nginx\"\n          name  = \"nginx-container\"\n          port {\n            container_port = 80\n          }\n        }\n      }\n    }\n  }\n}\nresource \"kubernetes_service\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    selector = {\n      app = kubernetes_deployment.test.spec.0.template.0.metadata.0.labels.app\n    }\n    type = \"NodePort\"\n    port {\n      node_port   = 30201\n      port        = 80\n      target_port = 80\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Network Policy\nDESCRIPTION: Command to apply a NetworkPolicy configuration to a Kubernetes cluster using kubectl.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day31.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f <filename>.yaml\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resource Types and Definitions\nDESCRIPTION: Documentation of various Kubernetes resource types including Pods, Deployments, ReplicaSets, StatefulSets, DaemonSets and Services. Each resource type serves a specific purpose in managing containerized applications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day49.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nResource Types:\n- Pods: Smallest deployable units\n- Deployments: Manage pod lifecycle\n- ReplicaSets: Ensure desired pod count\n- StatefulSets: For stateful applications\n- DaemonSets: Run pods on every node\n- Services: Expose pods to network\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible Hosts File with Server Groups\nDESCRIPTION: An example of organizing servers into logical groups in the Ansible hosts file (inventory). The configuration creates control, proxy, webservers, and database groups to organize the infrastructure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day65.md#2025-04-17_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n[control]\nansible-control\n\n[proxy]\nloadbalancer\n\n[webservers]\nweb01\nweb02\n\n[database]\ndb01\n\n```\n\n----------------------------------------\n\nTITLE: Complete Terraform Configuration for AWS EC2 Instance\nDESCRIPTION: This snippet provides a complete Terraform configuration file for deploying an AWS EC2 instance with a web server, including provider configuration and resource definition.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day58.md#2025-04-17_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 0.14.9\"\n}\n\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-west-2\"\n}\n\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n    user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n  }\n\n  tags = {\n    Name = \"ExampleAppServerInstance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Network Configuration with Netmiko\nDESCRIPTION: References a Python script (netmiko_sendchange.py) that connects to network switches via SSH and automates configuration changes, specifically for setting up trunked ports between switches.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day27.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# File reference only - actual code not shown in the source\n# netmiko_sendchange.py\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Actions Workflow Structure in YAML\nDESCRIPTION: This snippet demonstrates the basic structure of a GitHub Actions workflow file, including workflow name, event trigger, job definition, runner specification, and steps.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day75.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 90DaysOfDevOps\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bash Script in Linux\nDESCRIPTION: A simple bash script that creates a directory, navigates into it, creates a file, and lists the contents. This demonstrates the basics of bash scripting execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day19.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir 90DaysOfDevOps\ncd 90DaysOfDevOps\ntouch Day19\nls\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline with Kaniko for Docker Builds\nDESCRIPTION: Complete Jenkins pipeline that uses Kaniko to build and push Docker images to DockerHub. Includes stages for project checkout, testing, and deployment using Maven and Kaniko containers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day73.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npodTemplate(yaml: '''\n    apiVersion: v1\n    kind: Pod\n    spec:\n      containers:\n      - name: maven\n        image: maven:3.8.1-jdk-8\n        command:\n        - sleep\n        args:\n        - 99d\n      - name: kaniko\n        image: gcr.io/kaniko-project/executor:debug\n        command:\n        - sleep\n        args:\n        - 9999999\n        volumeMounts:\n        - name: kaniko-secret\n          mountPath: /kaniko/.docker\n      restartPolicy: Never\n      volumes:\n      - name: kaniko-secret\n        secret:\n            secretName: dockercred\n            items:\n            - key: .dockerconfigjson\n              path: config.json\n''') {\n  node(POD_LABEL) {\n    stage('Get the project') {\n      git url: 'https://github.com/scriptcamp/kubernetes-kaniko.git', branch: 'main'\n      container('maven') {\n        stage('Test the project') {\n          sh '''\n          echo pwd\n          '''\n        }\n      }\n    }\n\n    stage('Build & Test the Docker Image') {\n      container('kaniko') {\n        stage('Deploy to DockerHub') {\n          sh '''\n            /kaniko/executor --context `pwd` --destination michaelcade1/helloworld:latest\n          '''\n        }\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Ansible Playbook in YAML\nDESCRIPTION: A basic Ansible playbook that connects to localhost, runs a ping test, and displays the operating system family using the debug module. This demonstrates the format of a playbook with tasks and how to use variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Simple Play\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Ping me\n      ping:\n    - name: print os\n      debug:\n        msg: \"{{ ansible_os_family }}\"\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Actions Workflow for Super-Linter\nDESCRIPTION: A YAML configuration for a GitHub Actions workflow that uses the Super-Linter action to lint code in a repository. It runs on push events and uses the ubuntu-latest runner.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day75.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Super-Linter\n\non: push\n\njobs:\n  super-lint:\n    name: Lint code base\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run Super-Linter\n        uses: github/super-linter@v3\n        env:\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Go API Project Structure\nDESCRIPTION: Initializes a new Go project and creates the necessary file structure for a RESTful API implementation, including main.go and other supporting files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day53.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir -p goAPI/pkg/handlers\ncd goAPI\ngo mod init github.com/michaelcade/goapi\ntouch main.go\ntouch pkg/handlers/handlers.go\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose YAML Structure\nDESCRIPTION: This is a simple Docker Compose YAML file structure that defines a minimal web service using Nginx with port mapping and volume mounting.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day52.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./app:/usr/share/nginx/html\n```\n\n----------------------------------------\n\nTITLE: Basic Jenkins Pipeline Definition\nDESCRIPTION: A basic Jenkinsfile template showing a three-stage CI pipeline with Build, Test, and Deploy stages. Each stage simply echoes its name as a placeholder for actual implementation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day72.md#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building..'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing..'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                echo 'Deploying....'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting WordPress\nDESCRIPTION: Commands to navigate to the web directory, download the latest WordPress package, extract it, and clean up the downloaded archive file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day18.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www\n\nsudo curl -O https://wordpress.org/latest.tar.gz\n\nsudo tar -xvf latest.tar.gz\n\nsudo rm latest.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Pod IP Addresses\nDESCRIPTION: Displaying wide output format for pods to view IP addresses assigned to each pod in the cluster, showing name, ready status, status, restarts, age, IP, and node.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -o wide\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline with Kaniko for Docker Builds\nDESCRIPTION: Complete Jenkins pipeline that uses Kaniko to build and push Docker images to DockerHub from within a Kubernetes cluster. Includes Maven container for testing and Kaniko executor for building images.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day73.md#2025-04-17_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\npodTemplate(yaml: '''\n    apiVersion: v1\n    kind: Pod\n    spec:\n      containers:\n      - name: maven\n        image: maven:3.8.1-jdk-8\n        command:\n        - sleep\n        args:\n        - 99d\n      - name: kaniko\n        image: gcr.io/kaniko-project/executor:debug\n        command:\n        - sleep\n        args:\n        - 9999999\n        volumeMounts:\n        - name: kaniko-secret\n          mountPath: /kaniko/.docker\n      restartPolicy: Never\n      volumes:\n      - name: kaniko-secret\n        secret:\n            secretName: dockercred\n            items:\n            - key: .dockerconfigjson\n              path: config.json\n''') {\n  node(POD_LABEL) {\n    stage('Get the project') {\n      git url: 'https://github.com/scriptcamp/kubernetes-kaniko.git', branch: 'main'\n      container('maven') {\n        stage('Test the project') {\n          sh '''\n          echo pwd\n          '''\n        }\n      }\n    }\n\n    stage('Build & Test the Docker Image') {\n      container('kaniko') {\n        stage('Deploy to DockerHub') {\n          sh '''\n            /kaniko/executor --context `pwd` --destination michaelcade1/helloworld:latest\n          '''\n        }\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Git User Settings\nDESCRIPTION: These commands set the global Git configuration for user name and email.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day36.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Michael Cade\"\ngit config --global user.email Michael.Cade@90DaysOfDevOPs.com\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline for Building and Pushing Docker Image\nDESCRIPTION: This Jenkins Pipeline script clones a GitHub repository, builds a Docker image using Kaniko, and pushes it to DockerHub. It uses a Kubernetes pod template to define the build environment and leverages the previously created DockerHub secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day73.md#2025-04-17_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\npodTemplate(yaml: '''\n    apiVersion: v1\n    kind: Pod\n    spec:\n      containers:\n      - name: maven\n        image: maven:3.8.1-jdk-8\n        command:\n        - sleep\n        args:\n        - 99d\n      - name: kaniko\n        image: gcr.io/kaniko-project/executor:debug\n        command:\n        - sleep\n        args:\n        - 9999999\n        volumeMounts:\n        - name: kaniko-secret\n          mountPath: /kaniko/.docker\n      restartPolicy: Never\n      volumes:\n      - name: kaniko-secret\n        secret:\n            secretName: dockercred\n            items:\n            - key: .dockerconfigjson\n              path: config.json\n''') {\n  node(POD_LABEL) {\n    stage('Get the project') {\n      git url: 'https://github.com/scriptcamp/kubernetes-kaniko.git', branch: 'main'\n      container('maven') {\n        stage('Test the project') {\n          sh '''\n          echo pwd\n          '''\n        }\n      }\n    }\n\n    stage('Build & Test the Docker Image') {\n      container('kaniko') {\n        stage('Deploy to DockerHub') {\n          sh '''\n            /kaniko/executor --context `pwd` --destination michaelcade1/helloworld:latest\n          '''\n        }\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rebasing Feature Branch onto Main Branch in Git\nDESCRIPTION: Commands to perform a rebase operation that moves a feature branch to incorporate all new commits from the main branch. This creates a linear history by rewriting commit history instead of creating merge commits.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day39.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feature\ngit rebase main\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Actions Workflow Structure\nDESCRIPTION: Demonstrates the basic structure of a GitHub Actions workflow file including events, jobs, runners, steps, and actions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day75.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 90DaysOfDevOps\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources\nDESCRIPTION: Commands for creating new resources in Kubernetes, including namespaces and resources from YAML/JSON files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace name\nkubectl create -f [filename]\n```\n\n----------------------------------------\n\nTITLE: Super-Linter Implementation Workflow\nDESCRIPTION: A workflow configuration that implements GitHub's Super-Linter for code quality checking. It runs on push events and uses the github/super-linter action to validate source code.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day75.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Super-Linter\n\non: push\n\njobs:\n  super-lint:\n    name: Lint code base\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run Super-Linter\n        uses: github/super-linter@v3\n        env:\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Deploying ArgoCD in Kubernetes using kubectl\nDESCRIPTION: These commands create a namespace for ArgoCD and apply the ArgoCD installation manifest to deploy it in a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day76.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in Kubernetes Pod YAML Configuration\nDESCRIPTION: This YAML configuration defines a Pod that accesses the 'my-secret' secret and sets its values as environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day41.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secret-test\nspec:\n  containers:\n  - name: mycontainer\n    image: nginx\n    env:\n    - name: USERNAME\n      valueFrom:\n        secretKeyRef:\n          name: my-secret\n          key: username\n    - name: PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: my-secret\n          key: password\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Simple Ubuntu Nginx Dockerfile\nDESCRIPTION: A basic Dockerfile that creates an Ubuntu 18.04 image with nginx and curl installed. It demonstrates the use of FROM and RUN commands while maintaining a clean image by removing apt cache.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day45.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\n# Install nginx and curl\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y nginx curl\nRUN rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Local Execution Provisioner Example\nDESCRIPTION: Example of using a local-exec provisioner in Terraform to execute commands on the local machine after resource creation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day60.md#2025-04-17_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"docker_container\" \"db\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo The server's IP address is ${self.private_ip}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx to Kubernetes using Terraform\nDESCRIPTION: This Terraform configuration creates a Kubernetes namespace, deployment, and service for Nginx. It uses the Kubernetes provider to interact with a local Kubernetes cluster (e.g., minikube) using the kubeconfig file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \">= 2.0.0\"\n    }\n  }\n}\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\nresource \"kubernetes_namespace\" \"test\" {\n  metadata {\n    name = \"nginx\"\n  }\n}\nresource \"kubernetes_deployment\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    replicas = 2\n    selector {\n      match_labels = {\n        app = \"MyTestApp\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"MyTestApp\"\n        }\n      }\n      spec {\n        container {\n          image = \"nginx\"\n          name  = \"nginx-container\"\n          port {\n            container_port = 80\n          }\n        }\n      }\n    }\n  }\n}\nresource \"kubernetes_service\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    selector = {\n      app = kubernetes_deployment.test.spec.0.template.0.metadata.0.labels.app\n    }\n    type = \"NodePort\"\n    port {\n      node_port   = 30201\n      port        = 80\n      target_port = 80\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress and MySQL Services in Docker Compose YAML\nDESCRIPTION: A docker-compose.yml file that defines a WordPress application with a MySQL database. It includes volume configuration for persistent storage, network settings, environment variables for database credentials, and port mapping.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day46.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n    \nservices:\n  DB:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    \n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    volumes:\n      - wordpress_data:/var/www/html\n    ports:\n      - \"8000:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\nvolumes:\n  db_data: {}\n  wordpress_data: {}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nginx Configuration Template (Jinja2)\nDESCRIPTION: This Jinja2 template dynamically configures Nginx upstream servers using a loop through the 'webservers' group. It demonstrates how to use Ansible facts and variables in templates.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n\t{% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:8000;\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration Ansible Playbook for Web Servers\nDESCRIPTION: This playbook configures Apache web servers with custom ports and welcome message. It ensures Apache is installed, configures ports.conf and index.html using templates, and ensures the service is running. It also includes handlers to restart Apache when configuration changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day65.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps\"\n  tasks:\n  - name: ensure apache is at the latest version\n    apt:\n      name: apache2\n      state: latest\n\n  - name: write the apache2 ports.conf config file\n    template:\n      src: templates/ports.conf.j2\n      dest: /etc/apache2/ports.conf\n    notify:\n    - restart apache\n\n  - name: write a basic index.html file\n    template:\n      src: templates/index.html.j2\n      dest: /var/www/html/index.html\n    notify:\n    - restart apache\n\n  - name: ensure apache is running\n    service:\n      name: apache2\n      state: started\n\n  handlers:\n    - name: restart apache\n      service:\n        name: apache2\n        state: restarted\n```\n\n----------------------------------------\n\nTITLE: Creating a LoadBalancer Service in Kubernetes\nDESCRIPTION: Command to expose a deployment as a LoadBalancer service, which provisions an external load balancer in cloud environments to direct traffic to the service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl expose deployment nginx --port=80 --target-port=80 --type=LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nginx Configuration with Jinja2 Template\nDESCRIPTION: This Jinja2 template creates a dynamic Nginx configuration for load balancing. It uses a for loop to iterate through web servers and includes variables for server names and ports.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n\t{% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:{{ http_port }};\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Validating Network Device Configurations with Python\nDESCRIPTION: References a Python script that validates VLAN configurations on network devices. This script extends the previous automation by adding verification of the applied configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day27.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Reference to netmiko_con_multi_vlan.py\n```\n\n----------------------------------------\n\nTITLE: Declarative Kubernetes Jenkins Pipeline Example\nDESCRIPTION: Basic Jenkins pipeline definition that demonstrates running commands inside a Kubernetes container using declarative syntax. Creates a pod with Ubuntu image and executes simple hostname command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day73.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npipeline {\n    agent {\n        kubernetes {\n            yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: shell\n    image: ubuntu\n    command:\n    - sleep\n    args:\n    - infinity\n'''\n            defaultContainer 'shell'\n        }\n    }\n    stages {\n        stage('Main') {\n            steps {\n                sh 'hostname'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Go Main Function Declaration\nDESCRIPTION: Shows the declaration of the main function, which serves as the entry point of a Go program. This function is required for executable programs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day09.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    fmt.Println(\"Hello #90DaysOfDevOps\")\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying EFK Stack in Kubernetes using YAML\nDESCRIPTION: This command deploys the EFK stack components (Elasticsearch, Fluentd, Kibana) into a Kubernetes cluster using a pre-defined YAML file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day82.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f efk-stack.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoints with curl Commands\nDESCRIPTION: A series of curl commands for testing the REST API endpoints, demonstrating how to get all items, create a new item, get a specific item, update an item, and delete an item.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day53.md#2025-04-17_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncurl http://localhost:4000/items\n\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"My First Task\", \"completed\": false}' http://localhost:4000/items\n\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"My Second Task\", \"completed\": false}' http://localhost:4000/items\n\ncurl -X GET http://localhost:4000/items\n\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"My First Updated Task\", \"completed\": true}' http://localhost:4000/items/<id from get request>\n\ncurl -X GET http://localhost:4000/items/<id from get request>\n\ncurl -X DELETE http://localhost:4000/items/<id from get request>\n\ncurl -X GET http://localhost:4000/items\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function with Gorilla Mux Router in Go\nDESCRIPTION: Creates the main function for a RESTful API application using Gorilla Mux to set up routes for item operations (get, create, update, delete) and starts an HTTP server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day53.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/michaelcade/goapi/pkg/handlers\"\n)\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\trouter.HandleFunc(\"/items\", handlers.GetItems).Methods(http.MethodGet)\n\trouter.HandleFunc(\"/items/{id}\", handlers.GetItem).Methods(http.MethodGet)\n\trouter.HandleFunc(\"/items\", handlers.CreateItem).Methods(http.MethodPost)\n\trouter.HandleFunc(\"/items/{id}\", handlers.UpdateItem).Methods(http.MethodPut)\n\trouter.HandleFunc(\"/items/{id}\", handlers.DeleteItem).Methods(http.MethodDelete)\n\n\tlog.Println(\"API is running!\")\n\thttp.ListenAndServe(\":4000\", router)\n}\n```\n\n----------------------------------------\n\nTITLE: User Creation Script with Command Line Arguments\nDESCRIPTION: A bash script that creates a new user with a password based on command line arguments, demonstrating practical automation for system administration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day19.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n# 사용자 이름이 커맨드 라인 인수로 전달될 수 있습니다.\necho \"$1 user account being created.\"\n\n# 커맨드 라인 인수의 이름으로 사용자가 생성됩니다.\nsudo useradd -m \"$1\"\n\n# password가 커맨드 라인 인수로 전달될 수 있습니다.\nsudo chpasswd <<< \"$1\":\"$2\"\n```\n\n----------------------------------------\n\nTITLE: Git Remote Repository Commands\nDESCRIPTION: Commands for working with remote Git repositories, including adding remotes, fetching changes, pulling updates, and pushing local changes. These commands facilitate collaboration between distributed teams.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Command        | Example                       | Description                                                                                                                               |\n| -------------- | ----------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| git remote add | `git remote add <name> <url>` | 원격 리포지토리에 대한 새 연결을 생성합니다. 리모트를 추가한 후 \\<name>을 다른 명령에서 \\<url>에 대한 바로 가기로 사용할 수 있습니다.     |\n| git fetch      | `git fetch <remote> <branch>` | 리포지토리에서 특정 \\<branch>를 가져옵니다. 모든 원격 레퍼런스를 가져오려면 \\<branch>를 생략하세요.                                       |\n| git pull       | `git pull <remote>`           | 지정된 리모트의 현재 branch 복사본을 가져와서 로컬 복사본에 즉시 merge합니다.                                                             |\n| git push       | `git push <remote> <branch>`  | branch를 필요한 commit 및 오브젝트와 함께 \\<remote>로 push합니다. 원격 리포지토리에 이름이 지정된 branch가 없는 경우 branch를 생성합니다. |\n```\n\n----------------------------------------\n\nTITLE: Unit Testing in Python with unittest\nDESCRIPTION: Shows how to implement unit tests using Python's unittest framework. The example tests a prime number checking function with multiple test cases and assertions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day45.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nclass TestIsPrime(unittest.TestCase):\n    def test_is_prime(self):\n        self.assertTrue(is_prime(2))\n        self.assertTrue(is_prime(3))\n        self.assertTrue(is_prime(5))\n        self.assertFalse(is_prime(4))\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Git Basic Commands Cheat Sheet\nDESCRIPTION: A comprehensive table of basic Git commands including initialization, cloning, configuration, staging, committing, and checking status. Each command is accompanied by an example and description of its functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Command       | Example                     | Description                                                                                                                 |\n| ------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------- |\n| git init      | `git init <directory>`      | 지정한 디렉토리에 빈 git 리포지토리를 만듭니다.                                                                             |\n| git clone     | `git clone <repo>`          | \\<repo>에 있는 리포지토리를 로컬 머신에 복제합니다.                                                                         |\n| git config    | `git config user.name`      | 현재 리포지토리 `system`, `global`, `local` 플래그의 모든 commit에 사용할 작성자 이름을 정의하여 구성 옵션을 설정합니다.    |\n| git add       | `git add <directory>`       | 다음 commit을 위해 \\<directory>의 모든 변경 사항을 스테이징합니다. 모든 항목에 대해 \\<files>와 \\<.>을 추가할 수도 있습니다. |\n| git commit -m | `git commit -m \"<message>\"` | 스테이징된 스냅샷을 commit하고, \\<message>를 사용하여 commit되는 내용을 자세히 설명합니다.                                  |\n| git status    | `git status`                | 스테이징된 파일, 스테이징되지 않은 파일 및 추적되지 않은 파일을 나열합니다.                                                 |\n| git log       | `git log`                   | 기본 형식을 사용하여 모든 commit 기록을 표시합니다. 이 명령에는 추가 옵션이 있습니다.                                       |\n| git diff      | `git diff`                  | 인덱스와 작업 디렉토리 사이의 스테이징되지 않은 변경 내용을 표시합니다.                                                     |\n```\n\n----------------------------------------\n\nTITLE: Testing Network Connection to Nginx\nDESCRIPTION: Demonstrates how to test network connectivity to the Nginx service using a temporary curl pod.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run curl --rm -ti --image=curlimages/curl:latest -- sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Pulumi Infrastructure\nDESCRIPTION: A series of commands to set up, configure, and run a Pulumi program for AWS infrastructure deployment. The commands cover cloning the repository, initializing a stack, configuring AWS settings, and managing infrastructure resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day72.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/scottslowe/2024-90dod-iac-pulumi\ncd 2024-90dod-iac-pulumi\npulumi stack init <name>\nnpm install\npulumi config set aws:region <region>\npulumi config set keypair <keypair-name>\npulumi config set vpcNetworkCidr <cidr>\npulumi config set <instance-type>\npulumi up\npulumi stack output\npulumi destroy\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Node Environment with Vagrant\nDESCRIPTION: A Vagrantfile that defines four Ubuntu virtual machines (web servers, database, and load balancer) for testing Ansible playbooks. The configuration includes networking, port forwarding, and resource allocation for each node.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  servers=[\n    {\n      :hostname => \"db01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.130\",\n      :ssh_port => '2210'\n    },\n    {\n      :hostname => \"web01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.131\",\n      :ssh_port => '2211'\n    },\n    {\n      :hostname => \"web02\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.132\",\n      :ssh_port => '2212'\n    },\n    {\n      :hostname => \"loadbalancer\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.134\",\n      :ssh_port => '2213'\n    }\n\n  ]\n\nconfig.vm.base_address = 600\n\n  servers.each do |machine|\n\n    config.vm.define machine[:hostname] do |node|\n      node.vm.box = machine[:box]\n      node.vm.hostname = machine[:hostname]\n    \n      node.vm.network :public_network, bridge: \"Intel(R) Ethernet Connection (7) I219-V\", ip: machine[:ip]\n      node.vm.network \"forwarded_port\", guest: 22, host: machine[:ssh_port], id: \"ssh\"\n\n      node.vm.provider :virtualbox do |v|\n        v.customize [\"modifyvm\", :id, \"--memory\", 2048]\n        v.customize [\"modifyvm\", :id, \"--name\", machine[:hostname]]\n      end\n    end\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Deploying AKS Cluster with Bicep\nDESCRIPTION: Commands to build the Bicep file into an ARM template JSON file and then deploy it to create an AKS cluster in the specified resource group. The deployment is named 'myAKSDeployment'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day35.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz bicep build myAKS.bicep --output-file aksDeployment.json\naz deployment group create --name myAKSDeployment --resource-group myResourceGroup --template-file aksDeployment.json\n```\n\n----------------------------------------\n\nTITLE: Python Network Information Gathering with Netmiko\nDESCRIPTION: References a Python script (netmiko_con_multi.py) that uses Netmiko to connect to multiple network devices via SSH and gather interface configuration information from each device.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day27.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# File reference only - actual code not shown in the source\n# netmiko_con_multi.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Load Balancer with Jinja2 Template\nDESCRIPTION: This Jinja2 template configures Nginx as a load balancer. It defines an upstream group of web servers and sets up a server block to proxy requests to these web servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day67.md#2025-04-17_snippet_2\n\nLANGUAGE: Jinja2\nCODE:\n```\n    upstream webservers {\n        server 192.168.169.131:8000;\n        server 192.168.169.132:8000;\n    }\n\n    server {\n        listen 80;\n\n        location / {\n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Jenkins Namespace in Kubernetes\nDESCRIPTION: This YAML snippet creates a namespace for Jenkins in a Kubernetes cluster. It's used to isolate Jenkins resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day72.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl create -f jenkins-namespace.yml\n```\n\n----------------------------------------\n\nTITLE: Running an Ansible Ping Module Against a Local Machine\nDESCRIPTION: A basic command to test Ansible functionality by running the ping module against the localhost. This confirms Ansible is working correctly on the control node.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day64.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nansible localhost -m ping\n```\n\n----------------------------------------\n\nTITLE: Creating Database Secret in Kubernetes using kubectl\nDESCRIPTION: This command creates a generic secret named 'db-secret' with database username and password key-value pairs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day41.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic db-secret --from-literal=db_username=dbuser --from-literal=db_password=dbpass\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources\nDESCRIPTION: Commands for creating new resources in Kubernetes, including namespaces and resources from YAML/JSON files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace name\nkubectl create -f [filename]\n```\n\n----------------------------------------\n\nTITLE: Network Security Group Rule Configuration Example (Markdown Table)\nDESCRIPTION: Shows how Network Security Group rules are configured with priority levels, source/destination addresses, ports, and actions to control traffic flow in Azure networks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day33.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Description      | Priority |   Source Address   | Source Port | Destination Address | Destination Port | Action | \n| -----------      | ---------|   --------------   | ----------- | ------------------- | ---------------- | ------ |\n| Inbound 443      | 1005     | *                  | *           | *                   | 443              | Allow  |\n| ILB              | 1010     | Azure LoadBalancer | *           | *                   | 10000            | Allow  |\n| Deny All Inbound | 4000     | *                  | *           | *                   | *                | DENY   |\n```\n\n----------------------------------------\n\nTITLE: Deploying a Stateful Pacman Application\nDESCRIPTION: Command to create all resources defined in the pacman-stateful-demo.yaml file, which includes deployments, services, and StatefulSets for the Pacman application with MongoDB backend.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-stateful-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Provider in Terraform\nDESCRIPTION: Terraform configuration file that sets up the Docker provider, which is required to interact with Docker for container management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_2\n\nLANGUAGE: HCL (Terraform)\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kubernetes Deployment\nDESCRIPTION: This command sets up port forwarding from the local machine to a Kubernetes deployment, allowing access to the application on localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day54.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward deployment/nginx-deployment -n nginx 8090:80\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Command to build a Docker image with a specific tag and name. The -t flag is used to tag the image with a name and version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day45.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 90daysofdevops:0.1 .\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Bash Scripts\nDESCRIPTION: Shows how to define and use variables in a bash script, including user input.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchallenge=\"90DaysOfDevOps\"\necho \"Enter your name\"\nread name\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Super-Linter\nDESCRIPTION: This workflow uses the GitHub Super-Linter action to lint code in a repository. It runs on push events, checks out the code, and executes the linter with specified environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day75.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Super-Linter\n\non: push\n\njobs:\n  super-lint:\n    name: Lint code base\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run Super-Linter\n        uses: github/super-linter@v3\n        env:\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Go Using var Keyword\nDESCRIPTION: Demonstrates how to declare variables in Go using the 'var' keyword with explicit type declaration. Shows declaration for an integer, string, and boolean variable types.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day15.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nvar i int\nvar s string\nvar b bool\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx Application with YAML in Kubernetes\nDESCRIPTION: This YAML file defines a namespace, deployment, and service for an nginx application in Kubernetes. It creates a single replica of nginx and exposes it through a service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day54.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: nginx\n  \"labels\": {\n    \"name\": \"nginx\"\n  }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: nginx\nspec:\n  selector:\n    app: nginx-deployment\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Core Components Documentation\nDESCRIPTION: Documentation outlining the main components and architecture of Kubernetes, including the Control Plane, Worker Nodes, kubelet, kube-proxy, and container runtime.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day49.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Control Plane**\nEvery Kubernetes cluster requires a Control Plane node, the control plane's components make global decisions about the cluster (for example, scheduling), as well as detecting and responding to cluster events.\n\n**Worker Node**\nA worker machine that runs Kubernetes workloads. It can be a physical (bare metal) machine or a virtual machine (VM). Each node can host one or more pods. Kubernetes nodes are managed by a control plane\n\n**kubelet**\nAn agent that runs on each node in the cluster. It makes sure that containers are running in a Pod.\n\n**kube-proxy**\nkube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept.\n\n**Container runtime**\nThe container runtime is the software that is responsible for running containers.\n```\n\n----------------------------------------\n\nTITLE: Complete AWS EC2 Terraform Configuration\nDESCRIPTION: A complete Terraform configuration file for deploying an EC2 instance in AWS, including provider configuration and resource definition with user data script.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day58.md#2025-04-17_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 0.14.9\"\n}\n\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-west-2\"\n}\n\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n    user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n\n\n  tags = {\n    Name = \"ExampleAppServerInstance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Basic Commands\nDESCRIPTION: A table of essential Git commands for initialization, cloning, configuration, staging, committing, and tracking status. These form the foundation of any Git workflow.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Command       | Example                     | Description                                                                                                                 |\n| ------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------- |\n| git init      | `git init <directory>`      | Create an empty git repository in the specified directory.                                                                  |\n| git clone     | `git clone <repo>`          | Clone repository located at \\<repo> onto local machine.                                                                      |\n| git config    | `git config user.name`      | Define author name to be used for all commits in current repository `system`, `global`, `local` flag to set config options. |\n| git add       | `git add <directory>`       | Stage all changes in \\<directory> for the next commit. We can also add \\<files> and \\<.> for everything.                       |\n| git commit -m | `git commit -m \"<message>\"` | Commit the staged snapshot, use \\<message> to detail what is being committed.                                                |\n| git status    | `git status`                | List files that are staged, unstaged and untracked.                                                                         |\n| git log       | `git log`                   | Display all commit history using the default format. There are additional options with this command.                        |\n| git diff      | `git diff`                  | Show unstaged changes between your index and working directory.                                                             |\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Actions Workflow Structure in YAML\nDESCRIPTION: Demonstrates the structure of a simple GitHub Actions workflow file, including workflow name, event trigger, job definition, runner specification, and steps.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day75.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 90DaysOfDevOps\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Complete OpenShift Install Config YAML with Custom Resource Settings\nDESCRIPTION: A comprehensive install-config.yaml file for OpenShift on vSphere with customized compute and control plane resource configurations, network settings, and authentication details.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day58.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nbaseDomain: veducate.local\ncompute: \n- hyperthreading: Enabled \n  name: worker\n  replicas: 1\n  platform:\n    vsphere: \n      cpus: 8\n      coresPerSocket: 4\n      memoryMB: 16384\n      osDisk:\n        diskSizeGB: 120\ncontrolPlane: \n  hyperthreading: Enabled \n  name: master\n  replicas: 3\n  platform:\n    vsphere: \n      cpus: 8\n      coresPerSocket: 4\n      memoryMB: 16384\n      osDisk:\n        diskSizeGB: 120\nmetadata:\n  creationTimestamp: null\n  name: ocp48\nnetworking:\n  clusterNetwork:\n  - cidr: 10.128.0.0/14\n    hostPrefix: 23\n  machineNetwork:\n  - cidr: 10.0.0.0/16\n  networkType: OpenShiftSDN\n  serviceNetwork:\n  - 172.30.0.0/16\nplatform:\n  vsphere:\n    apiVIP: 192.168.200.192\n    cluster: Cluster-1\n    folder: /vEducate-DC/vm/OpenShift/\n    datacenter: vEducate-DC\n    defaultDatastore: Datastore01\n    ingressVIP: 192.168.200.193\n    network: \"network_NW1\"\n    password: Password@!\n    username: admin@veducate.local\n    vCenter: vcenter.veducate.local\npublish: External\npullSecret: '{\"auths\":{\"cloud.openshift.com\":{\"auth\":\"bxxxxxx==\",\"email\":\"openshift@veducate.co.uk\"},\"registry.redhat.io\":{\"auth\":\"Nxxx=\",\"email\":\"openshift@veducate.co.uk\"}}}'\nsshKey: |\n  ssh-rsa AAAABxxxxxx openshift@veducate\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX to Kubernetes using Terraform\nDESCRIPTION: Terraform configuration to deploy NGINX to a Kubernetes cluster. Creates a namespace, deployment with 2 replicas, and a NodePort service. Uses the Kubernetes provider and requires a valid kubeconfig file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \">= 2.0.0\"\n    }\n  }\n}\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\nresource \"kubernetes_namespace\" \"test\" {\n  metadata {\n    name = \"nginx\"\n  }\n}\nresource \"kubernetes_deployment\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    replicas = 2\n    selector {\n      match_labels = {\n        app = \"MyTestApp\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"MyTestApp\"\n        }\n      }\n      spec {\n        container {\n          image = \"nginx\"\n          name  = \"nginx-container\"\n          port {\n            container_port = 80\n          }\n        }\n      }\n    }\n  }\n}\nresource \"kubernetes_service\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    selector = {\n      app = kubernetes_deployment.test.spec.0.template.0.metadata.0.labels.app\n    }\n    type = \"NodePort\"\n    port {\n      node_port   = 30201\n      port        = 80\n      target_port = 80\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX to Kubernetes using Terraform\nDESCRIPTION: This Terraform configuration defines a Kubernetes provider, creates a namespace, deploys an NGINX application with 2 replicas, and exposes it via a NodePort service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \">= 2.0.0\"\n    }\n  }\n}\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\nresource \"kubernetes_namespace\" \"test\" {\n  metadata {\n    name = \"nginx\"\n  }\n}\nresource \"kubernetes_deployment\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    replicas = 2\n    selector {\n      match_labels = {\n        app = \"MyTestApp\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"MyTestApp\"\n        }\n      }\n      spec {\n        container {\n          image = \"nginx\"\n          name  = \"nginx-container\"\n          port {\n            container_port = 80\n          }\n        }\n      }\n    }\n  }\n}\nresource \"kubernetes_service\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    selector = {\n      app = kubernetes_deployment.test.spec.0.template.0.metadata.0.labels.app\n    }\n    type = \"NodePort\"\n    port {\n      node_port   = 30201\n      port        = 80\n      target_port = 80\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Twitter Bot Implementation in Go\nDESCRIPTION: Core implementation of Twitter bot functionality including credential management and tweet posting capabilities using the go-twitter library.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Root Credentials for Vault\nDESCRIPTION: Command to provide AWS access credentials to Vault so it can interact with your AWS account. These credentials allow Vault to create and manage dynamic credentials on your behalf.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day38.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault write aws/config/root \\\n    access_key=AKIAIOSFODNN7EXAMPLE \\\n   secret_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY \\\n    region=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Deploying WordPress and MySQL with Terraform\nDESCRIPTION: A more complex Terraform configuration that deploys WordPress with MySQL database as Docker containers. It creates a Docker volume for persistent database storage, sets up a Docker network, and configures environment variables for container communication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day60.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nvariable wordpress_port {\n  default = \"8080\"\n}\n\nresource \"docker_volume\" \"db_data\" {\n  name = \"db_data\"\n}\n\nresource \"docker_network\" \"wordpress_net\" {\n  name = \"wordpress_net\"\n}\n\nresource \"docker_container\" \"db\" {\n  name  = \"db\"\n  image = \"mysql:5.7\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n     \"MYSQL_ROOT_PASSWORD=wordpress\",\n     \"MYSQL_PASSWORD=wordpress\",\n     \"MYSQL_USER=wordpress\",\n     \"MYSQL_DATABASE=wordpress\"\n  ]\n  mounts {\n    type = \"volume\"\n    target = \"/var/lib/mysql\"\n    source = \"db_data\"\n    }\n}\n\nresource \"docker_container\" \"wordpress\" {\n  name  = \"wordpress\"\n  image = \"wordpress:latest\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n    \"WORDPRESS_DB_HOST=db:3306\",\n    \"WORDPRESS_DB_USER=wordpress\",\n    \"WORDPRESS_DB_NAME=wordpress\",\n    \"WORDPRESS_DB_PASSWORD=wordpress\"\n  ]\n  ports {\n    internal = \"80\"\n    external = \"${var.wordpress_port}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Application Namespace and Service Account\nDESCRIPTION: Commands to create a dedicated namespace for the web application and a service account within that namespace. The service account will be used by the application to authenticate with Vault.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns devwebapp\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create sa internal-app -n devwebapp\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible on Ubuntu\nDESCRIPTION: Commands to install Ansible on an Ubuntu-based control node using apt package manager. Includes adding the Ansible repository and installing the main package.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day64.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository --yes --update ppa:ansible/ansible\nsudo apt install ansible\n```\n\n----------------------------------------\n\nTITLE: Examining FluentBit ConfigMap in Kubernetes\nDESCRIPTION: This snippet shows the structure of a FluentBit ConfigMap in Kubernetes that defines the logging configuration. It includes parsers, service settings, input sources from container logs and systemd, filters for Kubernetes metadata, and output destinations to Elasticsearch.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day81.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName:         fluent-bit\nNamespace:    default\nLabels:       app.kubernetes.io/instance=fluent-bit\n              app.kubernetes.io/managed-by=Helm\n              app.kubernetes.io/name=fluent-bit\n              app.kubernetes.io/version=1.8.14\n              helm.sh/chart=fluent-bit-0.19.21\nAnnotations:  meta.helm.sh/release-name: fluent-bit\n              meta.helm.sh/release-namespace: default\n\nData\n====\ncustom_parsers.conf:\n----\n[PARSER]\n    Name docker_no_time\n    Format json\n    Time_Keep Off\n    Time_Key time\n    Time_Format %Y-%m-%dT%H:%M:%S.%L\n\nfluent-bit.conf:\n----\n[SERVICE]\n    Daemon Off\n    Flush 1\n    Log_Level info\n    Parsers_File parsers.conf\n    Parsers_File custom_parsers.conf\n    HTTP_Server On\n    HTTP_Listen 0.0.0.0\n    HTTP_Port 2020\n    Health_Check On\n\n[INPUT]\n    Name tail\n    Path /var/log/containers/*.log\n    multiline.parser docker, cri\n    Tag kube.*\n    Mem_Buf_Limit 5MB\n    Skip_Long_Lines On\n\n[INPUT]\n    Name systemd\n    Tag host.*\n    Systemd_Filter _SYSTEMD_UNIT=kubelet.service\n    Read_From_Tail On\n\n[FILTER]\n    Name kubernetes\n    Match kube.*\n    Merge_Log On\n    Keep_Log Off\n    K8S-Logging.Parser On\n    K8S-Logging.Exclude On\n\n[OUTPUT]\n    Name es\n    Match kube.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Retry_Limit False\n\n[OUTPUT]\n    Name es\n    Match host.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Logstash_Prefix node\n    Retry_Limit False\n\nEvents:  <none>\n```\n\n----------------------------------------\n\nTITLE: Event-Driven Ansible Rulebook\nDESCRIPTION: YAML configuration defining EDA rulebooks that respond to webhook events and Alertmanager alerts. Includes conditions and actions for automatic service management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Listen to webhook events\n  hosts: all\n  sources:\n    - ansible.eda.webhook:\n        host: 0.0.0.0\n        port: 5000\n  rules:\n    - name: Debug event output\n      condition: 1 == 1\n      action:\n        debug:\n          msg: \"{{ event }}\"\n\n- name: Listen to Alertmanager alerts\n  hosts: all\n  sources:\n    - ansible.eda.alertmanager:\n        host: 0.0.0.0\n        port: 9000\n        data_alerts_path: alerts\n        data_host_path: labels.instance\n        data_path_separator: .\n  rules:\n    - name: Restart MySQL server\n      condition: event.alert.labels.alertname == 'MySQL not running' and event.alert.status == 'firing'\n      action:\n        run_module:\n          name: ansible.builtin.service\n          module_args:\n            name: mysql\n            state: restarted\n    - name: Debug event output\n      condition: 1 == 1\n      action:\n        debug:\n          msg: \"{{ event }}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Network Policy for Frontend Traffic\nDESCRIPTION: Example YAML configuration for a Kubernetes NetworkPolicy that controls ingress traffic to frontend pods. This policy allows traffic to pods labeled 'app=frontend' while denying traffic to all other pods.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day31.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: frontend-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: frontend\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Python with Try/Except\nDESCRIPTION: This code demonstrates exception handling using try/except blocks to catch and handle runtime errors. The example attempts to write to a file and catches any exceptions that might occur during the operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day43.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  f = open(\"90DaysOfDevOps.txt\")\n  try:\n    f.write(\"Python is great\")\n  except:\n    print(\"Something went wrong when writing to the file\")\n```\n\n----------------------------------------\n\nTITLE: Running Go Programs\nDESCRIPTION: Commands used to run and build Go programs from the command line. Shows both direct execution and compilation to binary.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day08.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo build main.go\n```\n\nLANGUAGE: bash\nCODE:\n```\n./main.exe\nHello #90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Comparing Ansible and Terraform Features in Configuration Management\nDESCRIPTION: A markdown table comparing key features and characteristics between Ansible and Terraform, including type, infrastructure approach, language style, provisioning capabilities, packaging support, and lifecycle management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day63.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|               |Ansible                                                        |Terraform                                                          |\n| ------------- | ------------------------------------------------------------- | ----------------------------------------------------------------- |\n|Type           |Ansible is a configuration management tool                     |Terraform is a an orchestration tool                               |\n|Infrastructure |Ansible provides support for mutable infrastructure            |Terraform provides support for immutable infrastructure            |\n|Language       |Ansible follows procedural language                            |Terraform follows a declartive language                            |\n|Provisioning   |Ansible provides partial provisioning (VM, Network, Storage)   |Terraform provides extensive provisioning (VM, Network, Storage)   |\n|Packaging      |Ansible provides complete support for packaging & templating   |Terraform provides partial support for packaging & templating      |\n|Lifecycle Mgmt |Ansible does not have lifecycle management                     |Terraform is heavily  dependant on lifecycle and state mgmt        |\n```\n\n----------------------------------------\n\nTITLE: Basic Git Commands Demo\nDESCRIPTION: Demonstrates basic Git commands including git log, git status, git add, git commit, and git diff with example output\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day35.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"My First Commit\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add samplecode.ps1\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"My Second Commit\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit diff b8f8 709a\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 709a\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit switch -\n```\n\n----------------------------------------\n\nTITLE: WordPress and MySQL Deployment with Terraform\nDESCRIPTION: A more complex Terraform configuration to deploy WordPress with MySQL backend using Docker containers. This example creates a dedicated network, volume for database persistence, and configures environment variables for both containers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day60.md#2025-04-17_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nvariable wordpress_port {\n  default = \"8080\"\n}\n\nresource \"docker_volume\" \"db_data\" {\n  name = \"db_data\"\n}\n\nresource \"docker_network\" \"wordpress_net\" {\n  name = \"wordpress_net\"\n}\n\nresource \"docker_container\" \"db\" {\n  name  = \"db\"\n  image = \"mysql:5.7\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n     \"MYSQL_ROOT_PASSWORD=wordpress\",\n     \"MYSQL_PASSWORD=wordpress\",\n     \"MYSQL_USER=wordpress\",\n     \"MYSQL_DATABASE=wordpress\"\n  ]\n  mounts {\n    type = \"volume\"\n    target = \"/var/lib/mysql\"\n    source = \"db_data\"\n    }\n}\n\nresource \"docker_container\" \"wordpress\" {\n  name  = \"wordpress\"\n  image = \"wordpress:latest\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n    \"WORDPRESS_DB_HOST=db:3306\",\n    \"WORDPRESS_DB_USER=wordpress\",\n    \"WORDPRESS_DB_NAME=wordpress\",\n    \"WORDPRESS_DB_PASSWORD=wordpress\"\n  ]\n  ports {\n    internal = \"80\"\n    external = \"${var.wordpress_port}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository and Updating on Linux\nDESCRIPTION: These commands add the Git repository for software installations, update the package list, and install the latest version of Git on a Linux system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day36.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:git-core/ppa -y\nsudo apt-get update\nsudo apt-get install git -y\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Defining an Insecure Kubernetes Pod Manifest in YAML\nDESCRIPTION: This YAML snippet demonstrates a Kubernetes Pod manifest with several security misconfigurations, such as missing memory limits and running as root. It's used as an example for scanning with KubeSec.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day23.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kubesec-demo\nspec:\n  containers:\n    - name: kubesec-demo\n      image: gcr.io/google-samples/node-hello:1.0\n      securityContext:\n        runAsNonRoot: false\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx Docker Container with Terraform\nDESCRIPTION: Basic Terraform configuration to deploy an nginx container using the kreuzwerker/docker provider. The configuration exposes port 80 internally and maps it to port 8000 externally on the host.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day60.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nresource \"docker_image\" \"nginx\" {\n  name         = \"nginx:latest\"\n  keep_locally = false\n}\n\nresource \"docker_container\" \"nginx\" {\n  image = docker_image.nginx.latest\n  name  = \"tutorial\"\n  ports {\n    internal = 80\n    external = 8000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kopia Snapshot\nDESCRIPTION: Command to create a new snapshot of a specified directory and store it in the configured repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day86.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config kopia snapshot create \"C:\\Users\\micha\\demo\\90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Git Help via Command Line\nDESCRIPTION: Demonstrates how to access Git help documentation directly from the command line using the '--help' and '-h' flags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit add --help\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add -h\n```\n\n----------------------------------------\n\nTITLE: Extracting Kubernetes Service Account Token from Kube-proxy Pod\nDESCRIPTION: Command to extract the Kubernetes service account token from a running kube-proxy pod in the kube-system namespace. This demonstrates how credentials can be accessed if a pod is compromised.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kube-system exec $(kubectl get pods -n kube-system | grep kube-proxy | head -n 1 | awk '{print $1}') -- cat /var/run/secrets/kubernetes.io/serviceaccount/token\n```\n\n----------------------------------------\n\nTITLE: Configuring SonarCloud Properties for NodeJS Project\nDESCRIPTION: This snippet shows the configuration for sonar-project.properties file that needs to be added to the root directory of the repository. It defines the project key, organization, and contains commented optional settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day09.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsonar.projectKey=prateekjaindev_nodejs-todo-app-demo\nsonar.organization=prateekjaindev\n\n# This is the name and version displayed in the SonarCloud UI.\n#sonar.projectName=nodejs-todo-app-demo\n#sonar.projectVersion=1.0\n\n# Path is relative to the sonar-project.properties file. Replace \"\\\" by \"/\" on Windows.\n#sonar.sources=.\n\n# Encoding of the source code. Default is default system encoding\n#sonar.sourceEncoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running WebGoat Vulnerable Application with Docker Compose\nDESCRIPTION: Commands to start the vulnerable WebGoat application container using either the provided run script or Docker Compose directly. After execution, the application will be accessible at http://localhost:8080/WebGoat.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day20.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./run.sh\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Applying Jenkins Service Account Configuration\nDESCRIPTION: Command to create a service account for Jenkins with the necessary permissions to interact with the Kubernetes API, defined in a YAML configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-sa.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Ansible Playbook in YAML\nDESCRIPTION: A basic Ansible playbook that demonstrates the format with two tasks: a ping check and printing the OS family information. This simple playbook runs against localhost and shows the structure of plays and tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Simple Play\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Ping me\n      ping:\n    - name: print os\n      debug:\n        msg: \"{{ ansible_os_family }}\"\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Namespaces\nDESCRIPTION: Command to verify the successful creation of the Jenkins namespace by listing all available namespaces in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespaces\n```\n\n----------------------------------------\n\nTITLE: Using fmt.Scan to Get User Input in Go\nDESCRIPTION: This snippet demonstrates how to use the fmt.Scan() function to collect user input in a Go program. It shows the syntax for getting input and storing it in a variable using a pointer.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day12.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Scan(&TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Installing ArgoCD in Kubernetes\nDESCRIPTION: Commands to create a namespace for ArgoCD and deploy it in a Kubernetes cluster using the official manifest file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day76.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Simple Ansible Playbook Example in YAML\nDESCRIPTION: A basic Ansible playbook that performs two tasks: pinging the local host and printing the OS family. The playbook demonstrates the structure of plays and tasks, including the use of conditionals to display system information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Simple Play\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Ping me\n      ping:\n    - name: print os\n      debug:\n        msg: \"{{ ansible_os_family }}\"\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources with kubectl\nDESCRIPTION: Basic kubectl commands for listing various Kubernetes resources including nodes, namespaces, and pods across different namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\nkubectl get namespaces\nkubectl get pods\nkubectl get pods -n name\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx Application with YAML in Kubernetes\nDESCRIPTION: This YAML file defines a namespace, deployment, and service for a stateless nginx application in Kubernetes. It creates a namespace called 'nginx', deploys one replica of the nginx container, and sets up a service to expose the application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day54.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: nginx\n  \"labels\": {\n    \"name\": \"nginx\"\n  }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: nginx\nspec:\n  selector:\n    app: nginx-deployment\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: WordPress and MySQL Deployment with Terraform\nDESCRIPTION: Terraform configuration for deploying WordPress with MySQL database using Docker containers. Includes network configuration, volume management, and environment variables setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day60.md#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nvariable wordpress_port {\n  default = \"8080\"\n}\n\nresource \"docker_volume\" \"db_data\" {\n  name = \"db_data\"\n}\n\nresource \"docker_network\" \"wordpress_net\" {\n  name = \"wordpress_net\"\n}\n\nresource \"docker_container\" \"db\" {\n  name  = \"db\"\n  image = \"mysql:5.7\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n     \"MYSQL_ROOT_PASSWORD=wordpress\",\n     \"MYSQL_PASSWORD=wordpress\",\n     \"MYSQL_USER=wordpress\",\n     \"MYSQL_DATABASE=wordpress\"\n  ]\n  mounts {\n    type = \"volume\"\n    target = \"/var/lib/mysql\"\n    source = \"db_data\"\n    }\n}\n\nresource \"docker_container\" \"wordpress\" {\n  name  = \"wordpress\"\n  image = \"wordpress:latest\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n    \"WORDPRESS_DB_HOST=db:3306\",\n    \"WORDPRESS_DB_USER=wordpress\",\n    \"WORDPRESS_DB_NAME=wordpress\",\n    \"WORDPRESS_DB_PASSWORD=wordpress\"\n  ]\n  ports {\n    internal = \"80\"\n    external = \"${var.wordpress_port}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Istio\nDESCRIPTION: Commands to download the latest version of Istio, add it to the PATH, and verify the installation prerequisites.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://istio.io/downloadIstio | sh -\ncd istio-1.16.1\nexport PATH=$PWD/bin:$PATH\nistioctl x precheck\n```\n\n----------------------------------------\n\nTITLE: Simple Terraform Hello World Example\nDESCRIPTION: This snippet shows a basic Terraform configuration that outputs a 'Hello World' message. It demonstrates the simplest possible Terraform module.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day58.md#2025-04-17_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_version = \">= 0.12.26\"\n}\n\noutput \"hello_world\" {\n  value = \"Hello, 90DaysOfDevOps from Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Email Address in PostgreSQL\nDESCRIPTION: SQL UPDATE statement that changes the email address for a staff member named 'Andrew'. This demonstrates how to update existing data in a table.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE staff\nSET email = 'apruski@90daysofdevops.com'\nWHERE first_name = 'Andrew'\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Actions Workflow Example\nDESCRIPTION: A basic example workflow that demonstrates the core components of GitHub Actions including events, jobs, runners, steps and actions. This workflow checks the bats version on push events.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day75.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 90DaysOfDevOps\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Git Basic Commands\nDESCRIPTION: Core Git commands for repository initialization, cloning, configuration, and basic operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init <directory>\ngit clone <repo>\ngit config user.name\ngit add <directory>\ngit commit -m \"<message>\"\ngit status\ngit log\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 via Helm\nDESCRIPTION: Adds Kasten Helm repository and installs K10 with specific configuration settings for token authentication and Kanister sidecar injection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day87.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add kasten https://charts.kasten.io/\n\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Root User Dockerfile\nDESCRIPTION: A Dockerfile example showing how to create a non-root user for running containers securely. It creates a basic user with specific group and user IDs to avoid running containers with root privileges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day47.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\nRUN apt-get update && apt-get upgrade -y\nRUN groupadd -g 1000 basicuser && useradd -r -u 1000 -g basicuser basicuser\nUSER basicuser\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Commands\nDESCRIPTION: Commands for working with Git branches, including creating, listing, checking out, and merging branches. These operations are fundamental for parallel development workflows in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Command      | Example                    | Description                                                                                                      |\n| ------------ | -------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| git branch   | `git branch`               | 리포지토리에 있는 모든 branch를 나열합니다. \\<branch> 인수를 추가하여 \\<branch>라는 이름의 새 branch를 만듭니다. |\n| git checkout | `git checkout -b <branch>` | \\<branch>라는 이름의 새 branch를 생성하고 checkout합니다. 기존 branch를 checkout하려면 -b 플래그를 지웁니다.     |\n| git merge    | `git merge <branch>`       | \\<branch>를 현재 branch에 merge합니다.                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Defining Web and Proxy Server Roles in Ansible Playbook (YAML)\nDESCRIPTION: This snippet defines two plays in an Ansible playbook, one for web servers and another for a proxy server. It uses roles and tags to organize tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Terraform Kubernetes Provider Configuration and NGINX Deployment\nDESCRIPTION: A Terraform configuration that sets up a Kubernetes provider, creates a namespace, deploys an NGINX application with 2 replicas, and exposes it via a NodePort service. The configuration uses the local kubeconfig file for authentication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \">= 2.0.0\"\n    }\n  }\n}\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\nresource \"kubernetes_namespace\" \"test\" {\n  metadata {\n    name = \"nginx\"\n  }\n}\nresource \"kubernetes_deployment\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    replicas = 2\n    selector {\n      match_labels = {\n        app = \"MyTestApp\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"MyTestApp\"\n        }\n      }\n      spec {\n        container {\n          image = \"nginx\"\n          name  = \"nginx-container\"\n          port {\n            container_port = 80\n          }\n        }\n      }\n    }\n  }\n}\nresource \"kubernetes_service\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    selector = {\n      app = kubernetes_deployment.test.spec.0.template.0.metadata.0.labels.app\n    }\n    type = \"NodePort\"\n    port {\n      node_port   = 30201\n      port        = 80\n      target_port = 80\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWX Operator in Kubernetes\nDESCRIPTION: Bash commands for deploying AWX Operator to a Kubernetes cluster. This sequence exports the namespace, deploys the operator, and then creates the AWX instance using the configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day69.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=awx\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying ArgoCD on Kubernetes\nDESCRIPTION: Commands to create a namespace for ArgoCD and apply the installation manifest in a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day76.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Ansible Hosts File Configuration\nDESCRIPTION: An example of how to configure the Ansible hosts file to define groups of nodes. This configuration defines control, proxy, webservers, and database groups.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day65.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[control]\nansible-control\n\n[proxy]\nloadbalancer\n\n[webservers]\nweb01\nweb02\n\n[database]\ndb01\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform on Linux\nDESCRIPTION: Commands to download, extract and install Terraform on a Linux system. The commands add the HashiCorp GPG key, add the repository, update the package index, and install Terraform.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update && sudo apt-get install terraform\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphism in Python\nDESCRIPTION: Demonstrates polymorphism through method overriding in inherited classes. This example shows how a speak() method behaves differently when implemented in both the Person parent class and Student child class.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day44.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Person:\n    def __init__(self, name, country):\n        self.name = name\n        self.country = country\n\n    def speak(self):\n        print(\"Hello, my name is {} and I am from {}.\".format(self.name, self.country))\n\nclass Student(Person):\n    def __init__(self, name, country, major):\n        super().__init__(name, country)\n        self.major = major\n\n    def speak(self):\n        print(\"Hello, my name is {} and I am a {} major.\".format(self.name, self.major))\n\nperson = Person(\"Rishab\", \"Canada\")\nstudent = Student(\"John\", \"Canada\", \"Computer Science\")\n\nperson.speak()   # \"Hello, my name is Rishab and I am from Canada.\"\nstudent.speak()  # \"Hello, my name is John and I am a Computer Science major.\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Python Application\nDESCRIPTION: This Dockerfile sets up a Python 3.9 environment, specifies a working directory, copies application files, installs dependencies, and configures the container to run a Python application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day38.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD [\"python\", \"app.py\"]\n```\n\n----------------------------------------\n\nTITLE: Defining ELK Stack Services in Docker Compose YAML\nDESCRIPTION: This snippet shows the structure of the docker-compose.yml file, defining services for Elasticsearch, Logstash, and Kibana. It specifies the Docker images and versions to be used for each service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  elasticsearch:\n    image: elasticsearch:7.8.0\n    ...\n  logstash:\n    image: logstash:7.8.0\n    ...\n  kibana:\n    image: kibana:7.8.0\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Pod with Persistent Volume in Kubernetes\nDESCRIPTION: This YAML configuration defines a Pod that uses a Persistent Volume Claim. The pod runs an nginx container and mounts the claimed persistent volume at /usr/share/nginx/html. This demonstrates how to use persistent storage in a Kubernetes deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day18.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: task-pv-pod\nspec:\n  volumes:\n    - name: task-pv-storage\n      persistentVolumeClaim:\n        claimName: task-pv-claim\n  containers:\n    - name: task-pv-container\n      image: nginx\n      ports:\n        - containerPort: 80\n          name: \"http-server\"\n      volumeMounts:\n        - mountPath: \"/usr/share/nginx/html\"\n          name: task-pv-storage\n```\n\n----------------------------------------\n\nTITLE: Calling a Python Function with Arguments\nDESCRIPTION: This code shows how to call the previously defined add_numbers function with specific arguments. The function receives the values 5 and 2, adds them, and prints the result.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day43.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# calling the function with arguments to add 5 and 2\nadd_numbers(5, 2)\n\n# Output: The sum is: 9\n```\n\n----------------------------------------\n\nTITLE: Nginx Loadbalancer Configuration Template\nDESCRIPTION: This Jinja2 template for Nginx defines an upstream group of webservers and a server block that listens on port 80 and proxies requests to the defined webservers. This creates a simple loadbalancing configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day67.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    upstream webservers {\n        server 192.168.169.131:8000;\n        server 192.168.169.132:8000;\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Simple Ansible Playbook Implementation\nDESCRIPTION: A basic Ansible playbook that demonstrates ping functionality and OS detection. It includes tasks for connectivity testing and system information gathering.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Simple Play\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Ping me\n      ping:\n    - name: print os\n      debug:\n        msg: \"{{ ansible_os_family }}\"\n```\n\n----------------------------------------\n\nTITLE: WordPress with MySQL Docker Compose Configuration\nDESCRIPTION: A Docker Compose configuration for deploying WordPress with a MySQL database. It sets up environment variables, volume mappings, and port configurations to create a working WordPress installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day52.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - \"8080:80\"\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n    volumes:\n      - wordpress_data:/var/www/html\n    depends_on:\n      - db\n\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n      MYSQL_RANDOM_ROOT_PASSWORD: '1'\n    volumes:\n      - db_data:/var/lib/mysql\n\nvolumes:\n  wordpress_data:\n  db_data:\n```\n\n----------------------------------------\n\nTITLE: Simple Terraform Hello World Example\nDESCRIPTION: This snippet demonstrates a simple Terraform configuration that outputs a 'Hello World' message, showcasing basic Terraform syntax and output definition.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day58.md#2025-04-17_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  # 이 모듈은 현재 Terraform 0.13.x에서만 테스트 중입니다. 그러나 더 쉽게 업그레이드할 수 있도록 다음과 같이 설정하고 있습니다.\n  # 0.12.26을 최소 버전으로 설정했는데, 이 버전은 소스 URL이 있는 required_providers에 대한 지원이 추가되었기 때문입니다.\n  # 0.13.x 코드와 호환됩니다.\n  required_version = \">= 0.12.26\"\n}\n\n# website::tag::1:: 가장 간단한 Terraform 모듈: \"Hello, World!\"를 출력하기만 하면 됩니다.\noutput \"hello_world\" {\n  value = \"Hello, 90DaysOfDevOps from Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Virtual Service Configuration in Kubernetes\nDESCRIPTION: This snippet applies a virtual service configuration for the Bookinfo application using kubectl. It sets up routing rules for all microservices to use their v1 versions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining an AWS EC2 Instance Resource in HCL\nDESCRIPTION: This snippet shows how to define an AWS EC2 instance resource in Terraform. It includes instance configuration, user data for installing a web server, and tags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day58.md#2025-04-17_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami               = data.aws_ami.instance_id.id\n  instance_type     = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n  security_groups   = [aws_security_group.allow_web.name]\n  user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Existence Check Script\nDESCRIPTION: A bash script that checks if a specific file exists and outputs appropriate messages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nFILE=\"90DaysOfDevOps.txt\"\nif [ -f \"$FILE\" ]\nthen \n  echo \"$FILE is a file\"\nelse \n  echo \"$FILE is not a file\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Remote State with AWS S3 Backend\nDESCRIPTION: Configuration for storing Terraform state remotely in an AWS S3 bucket. This setup specifies the bucket name, key path, and AWS region, enabling team collaboration and safer state management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day64.md#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket = \"mybucket\"\n    key    = \"path/to/my/key\"\n    region = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Variables to a Bash Script\nDESCRIPTION: Example of defining and using variables in a bash script to make the code more flexible and reusable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day19.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchallenge=\"90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Authorizing GET Requests to Product Page in Istio\nDESCRIPTION: This AuthorizationPolicy allows external clients to perform HTTP GET operations against the product page service. It uses a selector to target the productpage app and explicitly allows GET methods.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: \"get-productpage\"\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: productpage\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n        methods: [\"GET\"]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Authorizing Reviews Service to Access Ratings in Istio\nDESCRIPTION: This AuthorizationPolicy permits the reviews service to make GET requests to the ratings service. It uses service account identity for authentication and restricts HTTP methods to GET only.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: \"get-ratings\"\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: ratings\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/default/sa/bookinfo-reviews\"]\n    to:\n    - operation:\n        methods: [\"GET\"]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Standby Kubernetes Cluster with MiniKube\nDESCRIPTION: Command to start a new MiniKube cluster with required addons for disaster recovery. This creates a separate standby cluster for testing failover capabilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day89.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p standby --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Rewriting History\nDESCRIPTION: Advanced Git commands for modifying commit history, including amending commits, rebasing, and viewing reflog.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase <base>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit reflog\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands to set up the basic Git configuration including user name, email, and preferred text editor. These global settings will apply to all repositories for the current user.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day36.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.name \"Michael Cade\"\ngit config --global user.email Michael.Cade@90DaysOfDevOPs.com\ngit config --global core.editor \"code --wait\"\ngit config --global -e\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent Volume in Kubernetes\nDESCRIPTION: This YAML configuration defines a Persistent Volume (PV) in Kubernetes. It specifies a 10Gi capacity volume with ReadWriteOnce access mode, using the local storage class. The volume is associated with a specific path on the host.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day18.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: task-pv-volume\n  labels:\n    type: local\nspec:\n  storageClassName: manual\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/mnt/data\"\n```\n\n----------------------------------------\n\nTITLE: Deploying and Verifying Application with Vault Integration\nDESCRIPTION: Commands to deploy the web application pod to the Kubernetes cluster and verify that it can access the secret stored in Vault. The final command checks if the credentials were correctly injected into the pod.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f devwebapp.yaml -n devwebapp\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n devwebapp\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec --stdin=true --tty=true devwebapp -n devwebapp -c devwebapp -- cat /vault/secrets/credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Kubescape for Kubernetes Security Scanning\nDESCRIPTION: Commands to install Kubescape using a shell script and then scan a Kubernetes cluster for security issues. The scan includes host scanning with verbose output to provide detailed information about vulnerabilities and misconfigurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day32.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash\nkubescape scan --enable-host-scan --verbose\n```\n\n----------------------------------------\n\nTITLE: Complete Terraform Configuration for AWS EC2 Instance\nDESCRIPTION: This code snippet presents a complete Terraform configuration file for deploying an AWS EC2 instance with a simple web server setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day58.md#2025-04-17_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 0.14.9\"\n}\n\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-west-2\"\n}\n\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n    user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"\n<h1>Deployed via Terraform</h1>\n\n\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n\n  tags = {\n    Name = \"ExampleAppServerInstance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress and MySQL Docker Compose Configuration\nDESCRIPTION: Docker Compose YAML configuration for setting up WordPress with MySQL database. Defines two services: a MySQL database and WordPress frontend, including volume persistence, port mapping, and environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day46.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n    \nservices:\n  db:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    \n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    volumes:\n      - wordpress_data:/var/www/html\n    ports:\n      - \"8000:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\nvolumes:\n  db_data: {}\n  wordpress_data: {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kyverno Policy to Block Privileged Containers\nDESCRIPTION: YAML definition for a Kyverno ClusterPolicy that prevents the creation of privileged containers. The policy validates that the privileged flag under securityContext is set to false for all containers in Pods.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - << EOF\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: no-privileged-containers\n  annotations:\n    policies.kyverno.io/title: No Privileged Containers\n    policies.kyverno.io/subject: Pod\nspec:\n  validationFailureAction: Enforce\n  rules:\n    - name: no-privileged-containers\n      match:\n        any:\n        - resources:\n            kinds:\n              - Pod\n      validate:\n        message: >\n          Privileged containers are not allowed!\n        pattern:\n          spec:\n            containers:\n              - =(securityContext):\n                  =(privileged): \"false\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 using Helm in Kubernetes\nDESCRIPTION: This Helm command installs Kasten K10 in the 'kasten-io' namespace with specific configuration options for token authentication and Kanister sidecar injection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day87.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Using Constants and Variables in Go\nDESCRIPTION: This example shows how to use both constants and variables in a Go program. It defines the challenge name as a variable and the total number of days as a constant.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day11.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    const daystotal = 90\n\n    fmt.Println(\"Welcome to\", challenge)\n    fmt.Println(\"This is a\", daystotal, \"challenge\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Common Packages with Ansible Tasks\nDESCRIPTION: Ansible task definition for installing common utility packages across all servers using apt package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day67.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - neofetch\n   - tree\n   - figlet\n```\n\n----------------------------------------\n\nTITLE: Enforcing Failure on Critical Vulnerabilities with Grype\nDESCRIPTION: Using Grype's --fail-on flag to make the scan fail when critical vulnerabilities are found. This example demonstrates scanning the springio/petclinic image and failing the scan due to critical vulnerabilities, which would fail a CI/CD pipeline.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day21.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ grype springio/petclinic:latest --fail-on critical\n ✔ Vulnerability DB        [no update available]\n ✔ Loaded image\n ✔ Parsed image\n ✔ Cataloged packages      [212 packages]\n ✔ Scanned image           [168 vulnerabilities]\n\nNAME        INSTALLED FIXED-IN TYPE         VULNERABILITY    SEVERITY\nspring-core 5.3.6              java-archive CVE-2016-1000027 Critical\nspring-core 5.3.6              java-archive CVE-2022-22965   Critical\n...\n1 error occurred:\n    * discovered vulnerabilities at or above the severity threshold\n\n$ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Accessing ArgoCD Admin Password\nDESCRIPTION: Command to retrieve the initial admin password for ArgoCD by decoding the secret from Kubernetes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day76.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d && echo\n```\n\n----------------------------------------\n\nTITLE: Using Short Variable Declaration in Go with Type Inference\nDESCRIPTION: Demonstrates the short declaration syntax in Go using the := operator, which allows the compiler to infer variable types from the assigned values.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day15.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ni := 10\ns := \"Canada\"\nb := true\n```\n\n----------------------------------------\n\nTITLE: Conditional Task Example in Ansible Playbook\nDESCRIPTION: An example task that demonstrates how to use conditionals in Ansible playbooks. This specific example shows how to shut down Debian-flavored systems based on the ansible_os_family variable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ntasks:\n  - name: \"shut down Debian flavoured systems\"\n    command: /sbin/shutdown -t now\n    when: ansible_os_family == \"Debian\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Handlers with Gorilla Mux in Go\nDESCRIPTION: Implements HTTP request handlers for a RESTful API including getItems, getItem, createItem, updateItem, and deleteItem functions, using Gorilla Mux for routing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day53.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage handlers\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n)\n\ntype Item struct {\n\tID        string    `json:\"id\"`\n\tName      string    `json:\"name\"`\n\tCompleted bool      `json:\"completed\"`\n\tCreatedAt time.Time `json:\"createdAt\"`\n}\n\ntype Items []Item\n\nvar items Items\n\nfunc GetItems(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(items)\n}\n\nfunc GetItem(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tparams := mux.Vars(r)\n\titemID := params[\"id\"]\n\n\tfor _, item := range items {\n\t\tif item.ID == itemID {\n\t\t\tjson.NewEncoder(w).Encode(item)\n\t\t\treturn\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(&Item{})\n}\n\nfunc CreateItem(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tvar item Item\n\t_ = json.NewDecoder(r.Body).Decode(&item)\n\titem.ID = strconv.Itoa(rand.Intn(1000000))\n\titem.CreatedAt = time.Now()\n\titems = append(items, item)\n\tjson.NewEncoder(w).Encode(item)\n}\n\nfunc UpdateItem(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tparams := mux.Vars(r)\n\titemID := params[\"id\"]\n\n\tfor i, item := range items {\n\t\tif item.ID == itemID {\n\t\t\titems = append(items[:i], items[i+1:]...)\n\t\t\tvar updatedItem Item\n\t\t\t_ = json.NewDecoder(r.Body).Decode(&updatedItem)\n\t\t\tupdatedItem.ID = itemID\n\t\t\tupdatedItem.CreatedAt = time.Now()\n\t\t\titems = append(items, updatedItem)\n\t\t\tjson.NewEncoder(w).Encode(updatedItem)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc DeleteItem(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tparams := mux.Vars(r)\n\titemID := params[\"id\"]\n\n\tfor i, item := range items {\n\t\tif item.ID == itemID {\n\t\t\titems = append(items[:i], items[i+1:]...)\n\t\t\tbreak\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(items)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ArgoCD in Kubernetes\nDESCRIPTION: Commands to create a namespace for ArgoCD and deploy it in a Kubernetes cluster using the official manifest file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day76.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic Go Hello World Program\nDESCRIPTION: A simple Go program that prints 'Hello #90DaysOfDevOps' to the console. Demonstrates the basic structure of a Go program including package declaration, importing the fmt package, and defining the main function.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day08.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello #90DaysOfDevOps\")\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Backup Blueprint Configuration\nDESCRIPTION: Kanister Blueprint YAML defining backup, restore, and delete operations for MySQL\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day88.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cr.kanister.io/v1alpha1\nkind: Blueprint\nmetadata:\n  name: mysql-blueprint\nactions:\n  backup:\n    outputArtifacts:\n      mysqlCloudDump:\n        keyValue:\n          s3path: \"{{ .Phases.dumpToObjectStore.Output.s3path }}\"\n    phases:\n    - func: KubeTask\n      name: dumpToObjectStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"/mysql-backups/{{ .StatefulSet.Namespace }}/{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}/{{ toDate \"2006-01-02T15:04:05.999999999Z07:00\" .Time  | date \"2006-01-02T15-04-05\" }}/dump.sql.gz\"\n          root_password=\"{{ index .Phases.dumpToObjectStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          mysqldump --column-statistics=0 -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }} --single-transaction --all-databases | gzip - | kando location push --profile '{{ toJson .Profile }}' --path ${s3_path} -\n          kando output s3path ${s3_path}\n  restore:\n    inputArtifactNames:\n    - mysqlCloudDump\n    phases:\n    - func: KubeTask\n      name: restoreFromBlobStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"{{ .ArtifactsIn.mysqlCloudDump.KeyValue.s3path }}\"\n          root_password=\"{{ index .Phases.restoreFromBlobStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          kando location pull --profile '{{ toJson .Profile }}' --path ${s3_path} - | gunzip | mysql -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}\n  delete:\n    inputArtifactNames:\n    - mysqlCloudDump\n    phases:\n    - func: KubeTask\n      name: deleteFromBlobStore\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .Namespace.Name }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"{{ .ArtifactsIn.mysqlCloudDump.KeyValue.s3path }}\"\n          kando location delete --profile '{{ toJson .Profile }}' --path ${s3_path}\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Root User in Dockerfile for Container Security\nDESCRIPTION: This Dockerfile example creates a non-root user for running applications securely. It uses Ubuntu 18.04 as the base image, updates packages, creates a user group and user with specific UID/GID, and sets this user as the default for running container processes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day47.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\nRUN apt-get update && apt-get upgrade -y\nRUN groupadd -g 1000 basicuser && useradd -r -u 1000 -g basicuser basicuser\nUSER basicuser\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Ansible Playbook for Web and Proxy Servers\nDESCRIPTION: This YAML snippet defines two plays in an Ansible playbook, one for webservers and another for proxy servers. It demonstrates the use of tags, roles, and variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day68.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Deploying Kasten K10 on Kubernetes with Helm\nDESCRIPTION: Helm command to install Kasten K10 in the kasten-io namespace with token authentication enabled and Kanister sidecar injection configured.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Terraform Built-in Testing Commands\nDESCRIPTION: A summary of the essential Terraform commands used for testing and validating infrastructure code, including formatting, validation, and planning commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day62.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command               | Description                                                                                | \n| --------------------- | ------------------------------------------------------------------------------------------ |\n| `terraform fmt`       | Rewrite Terraform configuration files to a canonical format and style.                     | \n| `terraform validate`  | Validates the configuration files in a directory, referring only to the configuration      | \n| `terraform plan`      | Creates an execution plan, which lets you preview the changes that Terraform plans to make | \n| Custom validation     | Validation of your input variables to ensure they match what you would expect them to be   |\n```\n\n----------------------------------------\n\nTITLE: MySQL Installation Tasks\nDESCRIPTION: Ansible tasks for installing MySQL server and dependencies, ensuring service is running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - python3-pip\n   - mysql-client\n   - python3-mysqldb\n   - libmysqlclient-dev\n\n- name: Ensure mysql-server is installed latest version\n  apt: name=mysql-server state=latest\n\n- name: Installing python module MySQL-python\n  pip:\n    name: PyMySQL\n\n- name: Ensure mysql-server is running\n  service:\n    name: mysql\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Terraform Resource Definition for Azure Virtual Desktop Host Pool\nDESCRIPTION: Terraform configuration block that defines an Azure Virtual Desktop host pool. It configures host pool type, maximum session limits, load balancing algorithm, and other essential host pool properties.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day05.md#2025-04-17_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azurerm_virtual_desktop_host_pool\" \"hostpool\" {\n  location            = azurerm_resource_group.AVD.location\n  resource_group_name = azurerm_resource_group.AVD.name\n\n  name                             = var.hostpool\n  friendly_name                    = var.hostpool\n  validate_environment             = false\n  start_vm_on_connect              = true\n  custom_rdp_properties            = \"audiocapturemode:i:1;audiomode:i:0;\"\n  description                      = \"${var.prefix} Terraform HostPool\"\n  type                             = \"Pooled\"\n  maximum_sessions_allowed         = 16\n  load_balancer_type               = \"DepthFirst\" #\"BreadthFirst\"\n  personal_desktop_assignment_type = null\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx on Kubernetes for Testing\nDESCRIPTION: Creates a simple Nginx deployment in Kubernetes that will be used to demonstrate Falco's runtime detection capabilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day30.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create deployment nginx --image=nginx:1.19\n```\n\n----------------------------------------\n\nTITLE: Installing Common Packages with Ansible Tasks\nDESCRIPTION: An Ansible task that installs common packages (neofetch, tree, and figlet) on target hosts using the apt module with a loop to iterate through the package list.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day67.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - neofetch\n   - tree\n   - figlet\n```\n\n----------------------------------------\n\nTITLE: Using Terraform Workspaces to Manage Multiple Environments\nDESCRIPTION: Example of creating and switching between Terraform workspaces to manage different environments. The workspace name is used to differentiate resources, allowing for environment-specific configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day64.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterraform workspace new dev\nterraform workspace new staging\nterraform workspace new prod\nterraform workspace select dev\n```\n\n----------------------------------------\n\nTITLE: Using Docker Security Scanning with Trivy\nDESCRIPTION: Demonstrates how to scan a Docker image for vulnerabilities using Trivy. This security scanning tool helps identify security issues in container images before deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy:0.36.0 image nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Container for Database Monitoring Demo\nDESCRIPTION: Docker command to create and run a PostgreSQL container for demonstration purposes. The container is exposed on port 5432 and includes a predefined password.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n    --publish 5432:5432 \\\n    --env POSTGRES_PASSWORD=Testing1122 \\\n    --name demo-container \\\n    ghcr.io/dbafromthecold/demo-postgres\n```\n\n----------------------------------------\n\nTITLE: Declarative Kubernetes Pipeline Example\nDESCRIPTION: A sample Jenkins pipeline script using Declarative syntax to run commands inside a Kubernetes container. It demonstrates how to define a Pod template and execute a simple shell command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day73.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n// Uses Declarative syntax to run commands inside a container.\npipeline {\n    agent {\n        kubernetes {\n            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'\n            // Or, to avoid YAML:\n            // containerTemplate {\n            //     name 'shell'\n            //     image 'ubuntu'\n            //     command 'sleep'\n            //     args 'infinity'\n            // }\n            yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: shell\n    image: ubuntu\n    command:\n    - sleep\n    args:\n    - infinity\n'''\n            // Can also wrap individual steps:\n            // container('shell') {\n            //     sh 'hostname'\n            // }\n            defaultContainer 'shell'\n        }\n    }\n    stages {\n        stage('Main') {\n            steps {\n                sh 'hostname'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Lambda Function with Python\nDESCRIPTION: A Python function for AWS Lambda that returns details about the Lambda execution environment. It leverages environmental variables available during function execution to access information like the region, memory allocated, and function name.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day19.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\\nimport os\\n\\ndef lambda_handler(event, context):\\n    json_region = os.environ['AWS_REGION']\\n    return {\\n        \\\"statusCode\\\": 200,\\n        \\\"body\\\": json.dumps({\\n            \\\"message\\\": \\\"hello world\\\",\\n            \\\"region\\\": json_region,\\n            \\\"memory\\\": context.memory_limit_in_mb,\\n            \\\"function_name\\\": context.function_name\\n        }),\\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Terraform Remote State with AWS S3 and DynamoDB\nDESCRIPTION: A more comprehensive remote state configuration using AWS S3 for storage and DynamoDB for state locking. This setup enhances the basic remote state by adding locking capabilities to prevent concurrent modifications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day64.md#2025-04-17_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket         = \"mybucket\"\n    key            = \"path/to/my/key\"\n    region         = \"us-east-1\"\n    dynamodb_table = \"terraform_locks\"\n    encrypt        = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating a Quantum Circuit in Qiskit\nDESCRIPTION: Shows how to simulate a quantum circuit using Qiskit's Aer simulator. The code creates a quantum circuit with Hadamard and CNOT gates, simulates it for multiple shots, and displays the measurement results.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day12.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qiskit import Aer, transpile, execute\nfrom qiskit.visualization import plot_histogram\n\n# Get the Aer simulator backend\nsimulator = Aer.get_backend('qasm_simulator')\n\n# Execute the circuit on the simulator\njob = execute(qc, simulator, shots=1000)\n\n# Get the results\nresult = job.result()\n\n# Get the counts (measurement outcomes)\ncounts = result.get_counts(qc)\n\n# Print the measurement outcomes\nprint(counts)\n\n# Plot a histogram of the results\nplot_histogram(counts)\n```\n\n----------------------------------------\n\nTITLE: Regular Expressions in Python with re Module\nDESCRIPTION: Demonstrates how to use Python's re module for pattern matching in strings. The example shows how to search for a phone number pattern and extract email addresses from text.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day45.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\n# Search for a phone number in a string\ntext = 'My phone number is 555-7777'\nmatch = re.search(r'\\d{3}-\\d{4}', text)\nif match:\n    print(match.group(0))\n\n# Extract email addresses from a string\ntext = 'My email is example@devops.com, but I also use other@cloud.com'\nmatches = re.findall(r'\\S+@\\S+', text)\nprint(matches)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Falco Rule for Curl Detection\nDESCRIPTION: Defines a custom Falco rule in YAML that will detect when the curl command is executed in any container. This would help detect potential data exfiltration attempts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day30.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncustomRules:\n  rules-curl.yaml: |-\n    - rule: DetectCurlCommandExecution\n      desc: Detects the execution of the \"curl\" command\n      condition: spawned_process and proc.name == curl\n      output: \"Curl command executed: %proc.cmdline\"\n      priority: WARNING\n```\n\n----------------------------------------\n\nTITLE: Using Python with Netmiko to Configure Network Devices\nDESCRIPTION: References a Python script that uses Netmiko to configure trunk ports between switches. This demonstrates how Python can be used to automate configuration changes across multiple network devices.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day27.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Reference to netmiko_sendchange.py\n```\n\n----------------------------------------\n\nTITLE: Accessing Git Command Help in Terminal\nDESCRIPTION: Methods to access Git documentation directly from the command line, including viewing detailed manual pages with --help and getting command summaries with -h.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit add --help\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add -h\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Actions Workflow Structure\nDESCRIPTION: Demonstrates the basic structure of a GitHub Actions workflow file including events, jobs, runners, steps, and actions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day75.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 90DaysOfDevOps\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n----------------------------------------\n\nTITLE: Creating AWS EC2 Instance Resource\nDESCRIPTION: Defines an AWS EC2 instance with Apache web server installation via user data script.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day58.md#2025-04-17_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami               = data.aws_ami.instance_id.id\n  instance_type     = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n  security_groups   = [aws_security_group.allow_web.name]\n  user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"\n<h1>Deployed via Terraform</h1>\n\n\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Root Nginx Pod with Security Context\nDESCRIPTION: Demonstrates how to create an Nginx pod that runs as a non-root user with specific security context settings, including user/group ID and privilege escalation prevention.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - << EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-non-root\nspec:\n  containers:\n  - name: nginx\n    image: nginxinc/nginx-unprivileged\n    securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n        allowPrivilegeEscalation: false\n\nEOF\n```\n\n----------------------------------------\n\nTITLE: Basic Go Hello World Program Structure\nDESCRIPTION: A simple Go program demonstrating the essential components of a Go application including package declaration, imports, and main function. The program prints 'Hello #90DaysOfDevOps' to the console.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day09.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello #90DaysOfDevOps\")\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive User Creation Shell Script with User Input\nDESCRIPTION: An improved shell script that prompts the user for username and password interactively rather than taking them as command-line arguments, providing a more user-friendly experience.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\necho \"What is your intended username?\"\nread  username\necho \"What is your password\"\nread  password\n\n#A user can be passed in as a command line argument\necho \"$username user account being created.\"\n\n#A user is created with the name of command line argument\nsudo useradd -m $username\n\n#A password can be parsed in as a command line argument.\nsudo chpasswd <<< $username:$password\n```\n\n----------------------------------------\n\nTITLE: Istio Virtual Service with Conditional Routing\nDESCRIPTION: This YAML configuration sets up a virtual service for the reviews microservice with conditional routing based on the 'end-user' header.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Ansible Playbook in YAML\nDESCRIPTION: A basic Ansible playbook that demonstrates two tasks: pinging the local host and printing the operating system family. This playbook shows the fundamental structure of a playbook with named tasks and conditional output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Simple Play\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Ping me\n      ping:\n    - name: print os\n      debug:\n        msg: \"{{ ansible_os_family }}\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Bash Script with Conditional Logic\nDESCRIPTION: A complete bash script demonstrating variables, user input, and conditional logic to track progress in the 90DaysOfDevOps challenge.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n#   ___   ___  ____                   ___   __ ____              ___\n#  / _ \\ / _ \\|  _ \\  __ _ _   _ ___ / _ \\ / _|  _ \\  _____   __/ _ \\ _ __  ___\n# | (_) | | | | | | |/ _` | | | / __| | | | |_| | | |/ _ \\ \\ / / | | | '_ \\/ __|\n#  \\__, | |_| | |_| | (_| | |_| \\__ \\ |_| |  _| |_| |  __/\\ V /| |_| | |_) \\__ \\\n#    /_/ \\___/|____/ \\__,_|\\__, |___/\\___/|_| |____/ \\___| \\_/  \\___/| .__/|___/\n#                           |___/                                    |_|\n#\n# This script is to demonstrate bash scripting!\n#\n# Variables to be defined\n\nChallengeName=#90DaysOfDevOps\nTotalDays=90\n\n# User Input\n\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to $ChallengeName\"\necho \"How Many Days of the $ChallengeName challenge have you completed?\"\nread DaysCompleted\n\nif [ $DaysCompleted -eq 90 ]\nthen\n  echo \"You have finished, well done\"\nelif [ $DaysCompleted -lt 90 ]\nthen\n  echo \"Keep going you are doing great\"\nelse\n  echo \"You have entered the wrong amount of days\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Adding a Specific File to Git Staging Area\nDESCRIPTION: Command to add a specific file (README.md) to the staging area in preparation for commit. This tracks the file in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add README.md\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl with Arkade in Bash\nDESCRIPTION: Command to install kubectl CLI tool using arkade. kubectl is required to interact with and manage Kubernetes clusters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narkade get kubectl\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Pod to Use TLS Secret\nDESCRIPTION: This YAML configuration defines a Pod that mounts the 'tls-secret' as a volume for use by an nginx container.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day41.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: tls-pod\nspec:\n  containers:\n  - name: mycontainer\n    image: nginx\n    volumeMounts:\n    - name: tls-volume\n      mountPath: \"/etc/nginx/ssl\"\n      readOnly: true\n  volumes:\n  - name: tls-volume\n    secret:\n      secretName: tls-secret\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Basic Ubuntu Nginx Dockerfile\nDESCRIPTION: A Dockerfile that creates an image based on Ubuntu 18.04, installs nginx and curl, and cleans up apt cache to reduce image size. This demonstrates basic Dockerfile commands including FROM, RUN, and cleanup best practices.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day45.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\n# Install nginx and curl\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y nginx curl\nRUN rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Using Fabric for Remote SSH Command Execution in Python\nDESCRIPTION: This snippet demonstrates how to use the Fabric library to connect to a remote server via SSH, execute the 'ls -l' command, and print the output to the console. Fabric streamlines SSH commands and remote execution for server configuration and deployment automation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day47.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fabric import Connection\n\n# Connect to the remote server\nc = Connection('user@remote.host')\n\n# Run a command on the remote server\nresult = c.run('ls -l')\n\n# Print the output of the command\nprint(result.stdout)\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Root User in Dockerfile\nDESCRIPTION: Shows how to configure a non-root user in a Dockerfile for better security. This implements the principle of least privilege by avoiding running containers as root.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nFROM nginx:latest\nRUN useradd -r -u 1000 -g nginx nginx\nUSER nginx\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile with Non-Root User for Container Security\nDESCRIPTION: This Dockerfile template creates a non-root user (basicuser) in an Ubuntu 18.04 container to improve security. It updates the system packages, creates a user group and user with ID 1000, and sets this user as the default for container operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day47.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# 공식 Ubuntu 18.04를 기본으로 사용하세요.\nFROM ubuntu:18.04\nRUN apt-get update && apt-get upgrade -y\nRUN groupadd -g 1000 basicuser && useradd -r -u 1000 -g basicuser basicuser\nUSER basicuser\n```\n\n----------------------------------------\n\nTITLE: Creating a New OpenShift Project using CLI\nDESCRIPTION: This command creates a new OpenShift project with a specified name, description, and display name using the 'oc new-project' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ oc new-project my-sample-project --description=\"My Sample OpenShift Project\" --display-name=\"Sample Project\"\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Bash Scripts\nDESCRIPTION: Example of defining and using variables in a bash script to simplify code and make it more maintainable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchallenge=\"90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Go Application for Multiple Operating Systems\nDESCRIPTION: This code snippet shows how to compile a Go application for multiple operating systems and architectures using environment variables and the go build command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day13.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nGOARCH=amd64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin main.go\nGOARCH=amd64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux main.go\nGOARCH=amd64 GOOS=windows go build -o ${BINARY_NAME}_0.1_windows main.go\nGOARCH=arm64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux_arm64 main.go\nGOARCH=arm64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin_arm64 main.go\n```\n\n----------------------------------------\n\nTITLE: Deploying AWX Operator in Kubernetes\nDESCRIPTION: Bash commands for setting up the namespace and deploying the AWX operator in a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day69.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=awx\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Kubernetes Pod with kubectl\nDESCRIPTION: This command applies the Pod configuration from a YAML file named 'secret-pod.yaml'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day41.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f secret-pod.yaml\n```\n\n----------------------------------------\n\nTITLE: MySQL Database and User Setup Tasks\nDESCRIPTION: This YAML file contains tasks for setting up MySQL configuration, creating a database user, and creating a new database using Ansible MySQL modules.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day68.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create my.cnf configuration file\n  template: src=templates/my.cnf.j2 dest=/etc/mysql/conf.d/mysql.cnf\n  notify: restart mysql\n\n- name: Create database user with name 'devops' and password 'DevOps90' with all database privileges\n  community.mysql.mysql_user:\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n    login_user: \"{{ mysql_user_name }}\"\n    login_password: \"{{ mysql_user_password }}\"\n    name: \"{{db_user}}\"\n    password: \"{{db_pass}}\"\n    priv: '*.*:ALL'\n    host: '%'\n    state: present\n\n- name: Create a new database with name '90daysofdevops'\n  mysql_db:\n    login_user: \"{{ mysql_user_name }}\"\n    login_password: \"{{ mysql_user_password }}\"\n    name: \"{{ db_name }}\"\n    state: present\n```\n\n----------------------------------------\n\nTITLE: MySQL Setup and Configuration Tasks\nDESCRIPTION: Configures MySQL server by creating configuration file, setting up database user with privileges, and creating a new database. Uses templating and MySQL modules.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create my.cnf configuration file\n  template: src=templates/my.cnf.j2 dest=/etc/mysql/conf.d/mysql.cnf\n  notify: restart mysql\n\n- name: Create database user with name 'devops' and password 'DevOps90' with all database privileges\n  community.mysql.mysql_user:\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n    login_user: \"{{ mysql_user_name }}\"\n    login_password: \"{{ mysql_user_password }}\"\n    name: \"{{db_user}}\"\n    password: \"{{db_pass}}\"\n    priv: '*.*:ALL'\n    host: '%'\n    state: present\n\n- name: Create a new database with name '90daysofdevops'\n  mysql_db:\n    login_user: \"{{ mysql_user_name }}\"\n    login_password: \"{{ mysql_user_password }}\"\n    name: \"{{ db_name }}\"\n    state: present\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask App in Python\nDESCRIPTION: Python code to import necessary modules and create a Flask app instance.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template\nimport markdown\n\napp = Flask(__name__)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Web Servers with Ansible Playbook\nDESCRIPTION: Ansible playbook that installs and configures Apache web servers on target nodes. It sets up custom ports, creates a welcome page, and ensures the service is running. The playbook uses templates for configuration files and includes handlers for service restart.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day65.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps\"\n  tasks:\n  - name: ensure apache is at the latest version\n    apt:\n      name: apache2\n      state: latest\n\n  - name: write the apache2 ports.conf config file\n    template:\n      src: templates/ports.conf.j2\n      dest: /etc/apache2/ports.conf\n    notify:\n    - restart apache\n\n  - name: write a basic index.html file\n    template:\n      src: templates/index.html.j2\n      dest: /var/www/html/index.html\n    notify:\n    - restart apache\n\n  - name: ensure apache is running\n    service:\n      name: apache2\n      state: started\n\n  handlers:\n    - name: restart apache\n      service:\n        name: apache2\n        state: restarted\n```\n\n----------------------------------------\n\nTITLE: Granting Developer Role to User in OpenShift Project using CLI\nDESCRIPTION: This command grants the developer role to a specific user in the specified OpenShift project using the 'oc policy add-role-to-user' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ oc policy add-role-to-user developer my-user -n my-sample-project\n```\n\n----------------------------------------\n\nTITLE: Integrating OWASP Dependency Check with GitHub Actions Workflow\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run OWASP Dependency Check on every push to the main branch. It downloads the tool, scans the project, generates a report, and uploads it as an artifact.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day11.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Dependency-Check\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, synchronize, reopened]\njobs:\n  dependency-check:\n    name: Dependency-Check\n    runs-on: ubuntu-latest\n    steps: \n      - name: Download OWASP Dependency Check\n        run: |\n          VERSION=$(curl -s https://jeremylong.github.io/DependencyCheck/current.txt)\n          curl -sL \"https://github.com/jeremylong/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip\" --output dependency-check.zip\n          unzip dependency-check.zip\n      - name: Run Dependency Check\n        run: |\n          ./dependency-check/bin/dependency-check.sh --out report.html --scan .\n          rm -rf dependency-check*\n\n      - name: Upload Artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: artifacts\n          path: report.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Roles in Ansible Playbook for Web Servers\nDESCRIPTION: A host block in an Ansible playbook that applies the common and apache2 roles to web servers and defines variables for HTTP/HTTPS ports and a welcome message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day67.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: Installing Kanister Operator with Helm in Kubernetes\nDESCRIPTION: This command installs the Kanister operator into a Kubernetes cluster using Helm, creating a dedicated namespace and specifying the image version 0.75.0.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kanister --namespace kanister kanister/kanister-operator --set image.tag=0.75.0 --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Git Remote Repository Commands\nDESCRIPTION: Commands for working with remote Git repositories, including adding remotes, fetching, pulling, and pushing, with their usage examples and descriptions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day37.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add <name> <url>\ngit fetch <remote> <branch>\ngit pull <remote>\ngit push <remote> <branch>\n```\n\n----------------------------------------\n\nTITLE: Setting Combined Resource Limits with Docker CLI\nDESCRIPTION: Demonstrates setting both memory and CPU limits simultaneously for a Docker container using the Docker CLI. This ensures comprehensive resource limitation for the container.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nginx --memory=\"500m\" --cpus=\"0.5\" nginx\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository Using HTTPS URL\nDESCRIPTION: This command demonstrates how to clone a GitHub repository to your local machine using the HTTPS URL. It creates a local copy of the repository that you can work on.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day40.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Integrating SQLAlchemy with Flask for Database Operations in Python\nDESCRIPTION: This code example shows how to set up a Flask application with SQLAlchemy to work with a SQLite database. It defines a User model and creates a route to query and display all users.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day46.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50))\n\n@app.route('/')\ndef index():\n    users = User.query.all()\n    return render_template('index.html', users=users)\n```\n\n----------------------------------------\n\nTITLE: Extracting Apache Handlers into a Separate File\nDESCRIPTION: A YAML file containing handler definitions for Apache service restarts. This has been extracted from the main playbook to improve organization and reusability.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day66.md#2025-04-17_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n- name: restart apache\n  service:\n    name: apache2\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing a Basic Bash Script in Linux\nDESCRIPTION: A simple bash script that creates a directory, changes into it, creates a file, and lists the contents.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day19.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir 90DaysOfDevOps\ncd 90DaysOfDevOps\ntouch Day19\nls\n```\n\n----------------------------------------\n\nTITLE: Complete Terraform Configuration for Docker Deployment\nDESCRIPTION: Full Terraform configuration file that combines the provider setup and resource definitions to deploy an Nginx container with exposed port mapping.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_8\n\nLANGUAGE: HCL (Terraform)\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nresource \"docker_image\" \"nginx\" {\n  name         = \"nginx:latest\"\n  keep_locally = false\n}\n\nresource \"docker_container\" \"nginx\" {\n  image = docker_image.nginx.latest\n  name  = \"tutorial\"\n  ports {\n    internal = 80\n    external = 8000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Load Balancer Configuration Template\nDESCRIPTION: A Jinja2 template file for Nginx configuration that sets up load balancing between two web servers on port 8000 and listens on port 80 to route requests to the upstream servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day67.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    upstream webservers {\n        server 192.168.169.131:8000;\n        server 192.168.169.132:8000;\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Declarative Kubernetes Pipeline Example\nDESCRIPTION: This snippet shows a basic declarative Jenkins Pipeline running commands inside a Kubernetes container. It demonstrates how to define a Kubernetes pod template and run a simple shell command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day73.md#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n// Uses Declarative syntax to run commands inside a container.\npipeline {\n    agent {\n        kubernetes {\n            yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: shell\n    image: ubuntu\n    command:\n    - sleep\n    args:\n    - infinity\n'''\n            defaultContainer 'shell'\n        }\n    }\n    stages {\n        stage('Main') {\n            steps {\n                sh 'hostname'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Ansible and Terraform Features in Markdown Table\nDESCRIPTION: A markdown table that contrasts key differences between Ansible and Terraform across multiple dimensions including type, infrastructure approach, language paradigm, provisioning capabilities, packaging support, and lifecycle management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day63.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|               |Ansible                                                        |Terraform                                                          |\n| ------------- | ------------------------------------------------------------- | ----------------------------------------------------------------- |\n|Type           |Ansible is a configuration management tool                     |Terraform is a an orchestration tool                               |\n|Infrastructure |Ansible provides support for mutable infrastructure            |Terraform provides support for immutable infrastructure            |\n|Language       |Ansible follows procedural language                            |Terraform follows a declartive language                            |\n|Provisioning   |Ansible provides partial provisioning (VM, Network, Storage)   |Terraform provides extensive provisioning (VM, Network, Storage)   |\n|Packaging      |Ansible provides complete support for packaging & templating   |Terraform provides partial support for packaging & templating      |\n|Lifecycle Mgmt |Ansible does not have lifecycle management                     |Terraform is heavily  dependant on lifecycle and state mgmt        |\n```\n\n----------------------------------------\n\nTITLE: Conditional Task Example in Ansible\nDESCRIPTION: Demonstrates how to use conditional statements in Ansible tasks, specifically for shutting down Debian systems based on OS family detection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  - name: \"shut down Debian flavoured systems\"\n    command: /sbin/shutdown -t now\n    when: ansible_os_family == \"Debian\"\n```\n\n----------------------------------------\n\nTITLE: Complete Ansible Playbook with Multiple Host Groups\nDESCRIPTION: A complete Ansible playbook with two host blocks - one for web servers applying apache2 and common roles, and another for proxy servers applying nginx and common roles.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day67.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n```\n\n----------------------------------------\n\nTITLE: Go Hello World Program\nDESCRIPTION: A basic Go program that prints 'Hello #90DaysOfDevOps' to the console. Uses the fmt package for printing and demonstrates the basic structure of a Go program with a main function.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day08.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello #90DaysOfDevOps\")\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive User Creation Script\nDESCRIPTION: Final version of the script that prompts for username and password interactively rather than using command line arguments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day19.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\necho \"What is your intended username?\"\nread  username\necho \"What is your password\"\nread  password\n\n#A user can be passed in as a command line argument\necho \"$username user account being created.\"\n\n#A user is created with the name of the command line argument\nsudo useradd -m $username\n\n#A password can be parsed as a command line argument.\nsudo chpasswd <<< $username:$password\n```\n\n----------------------------------------\n\nTITLE: Complete AWS EC2 Deployment Configuration\nDESCRIPTION: Full Terraform configuration combining provider setup and EC2 instance deployment with web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day58.md#2025-04-17_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 0.14.9\"\n}\n\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-west-2\"\n}\n\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n    user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"\n<h1>Deployed via Terraform</h1>\n\n\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n\n  tags = {\n    Name = \"ExampleAppServerInstance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Reset Commands\nDESCRIPTION: Commands for resetting the staging area and working directory to a specific state in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                   |           Example           |           Description                                                                                                                           | \n| ------------------------- |   --------------------------|   --------------------------------------------------------------------------------------------------------------------------------------------- |\n| git reset                 | `git reset `                | Reset staging area to match most recent commit, but leave the working directory unchanged.                                                      |\n| git reset --hard          | `git reset --hard`          | Reset staging area and working directory to match most recent commit and overwrites all changes in the working directory                        |\n| git reset <commit>        | `git reset <commit>`        | Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working directory alone                        |\n| git reset --hard <commit> | `git reset --hard <commit>` | Same as previous, but resets both the staging area & working directory to match. Deletes uncommitted changes, and all commits after <commit>.   |\n```\n\n----------------------------------------\n\nTITLE: Simplified Ansible Playbook with Roles and Tags\nDESCRIPTION: This YAML snippet shows a simplified version of the Ansible playbook, using roles and tags without inline variable definitions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for README Update in YAML\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow that triggers on push events to the main branch. It sets up a Python environment, installs dependencies, and runs a Python script to update the README.md file. The updated file is then committed and pushed back to the repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - README.md\n\njobs:\n  update-readme:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install PyGithub\n      - name: Update README\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: python update_readme.py\n      - name: Commit changes\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add README.md\n          git commit -m \"Update README\" || echo \"No changes to commit\"\n          git push\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nginx Configuration with Jinja2 Template\nDESCRIPTION: This Jinja2 template creates a dynamic Nginx configuration for load balancing. It uses Ansible facts and a for loop to generate server entries for all webservers in the inventory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day68.md#2025-04-17_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n  {% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:8000;\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {\n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking File Status in Git Repository\nDESCRIPTION: Command to check the status of files in a Git repository. Shows which files are tracked/untracked, modified, and which changes are staged for commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Kanister MySQL Backup Blueprint\nDESCRIPTION: YAML configuration defining the Kanister Blueprint for MySQL backup, restore, and delete operations\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cr.kanister.io/v1alpha1\nkind: Blueprint\nmetadata:\n  name: mysql-blueprint\nactions:\n  backup:\n    outputArtifacts:\n      mysqlCloudDump:\n        keyValue:\n          s3path: \"{{ .Phases.dumpToObjectStore.Output.s3path }}\"\n    phases:\n    - func: KubeTask\n      name: dumpToObjectStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"/mysql-backups/{{ .StatefulSet.Namespace }}/{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}/{{ toDate \"2006-01-02T15:04:05.999999999Z07:00\" .Time  | date \"2006-01-02T15-04-05\" }}/dump.sql.gz\"\n          root_password=\"{{ index .Phases.dumpToObjectStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          mysqldump --column-statistics=0 -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }} --single-transaction --all-databases | gzip - | kando location push --profile '{{ toJson .Profile }}' --path ${s3_path} -\n          kando output s3path ${s3_path}\n```\n\n----------------------------------------\n\nTITLE: MySQL Installation and Configuration Tasks\nDESCRIPTION: This YAML file defines tasks for installing and configuring MySQL server. It includes package installation, service management, and Python module setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day68.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - python3-pip\n   - mysql-client\n   - python3-mysqldb\n   - libmysqlclient-dev\n\n- name: Ensure mysql-server is installed latest version\n  apt: name=mysql-server state=latest\n\n- name: Installing python module MySQL-python\n  pip:\n    name: PyMySQL\n\n- name: Ensure mysql-server is running\n  service:\n    name: mysql\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Complete Ansible Playbook with Database Role\nDESCRIPTION: A complete Ansible playbook that configures webservers, a proxy, and a database server, using roles and tags for organization and selective execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags:\n    web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: \n    proxy\n\n- hosts: database\n  become: yes\n  roles:\n    - common\n    - mysql\n  tags: database\n```\n\n----------------------------------------\n\nTITLE: Comprehensive DevOps Challenge Tracking Script\nDESCRIPTION: A more complex bash script that includes ASCII art header, variable definitions, user input collection, and conditional logic to give feedback based on days completed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day19.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n#  ___   ___  ____                   ___   __ ____              ___\n# / _ \\ / _ \\|  _ \\  __ _ _   _ ___ / _ \\ / _|  _ \\  _____   __/ _ \\ _ __  ___\n#| (_) | | | | | | |/ _` | | | / __| | | | |_| | | |/ _ \\ \\ / / | | | '_ \\/ __|\n# \\__, | |_| | |_| | (_| | |_| \\__ \\ |_| |  _| |_| |  __/\\ V /| |_| | |_) \\__ \\\n#   /_/ \\___/|____/ \\__,_|\\__, |___/\\___/|_| |____/ \\___| \\_/  \\___/| .__/|___/\n#                         |___/                                     |_|\n#\n# This script is to demonstrate bash scripting!\n\n# Variables to be defined\n\nChallengeName=#90DaysOfDevOps\nTotalDays=90\n\n# User Input\n\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to $ChallengeName\"\necho \"How Many Days of the $ChallengeName challenge have you completed?\"\nread DaysCompleted\n\nif [ $DaysCompleted -eq 90 ]\nthen\n  echo \"You have finished, well done\"\nelif [ $DaysCompleted -lt 90 ]\nthen\n  echo \"Keep going you are doing great\"\nelse\n  echo \"You have entered the wrong amount of days\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands to set up global Git configuration for user name and email.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day36.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Michael Cade\"\ngit config --global user.email Michael.Cade@90DaysOfDevOPs.com\n```\n\n----------------------------------------\n\nTITLE: Defining Developer Role for OpenShift Project\nDESCRIPTION: This YAML configuration defines a Role object for a developer, specifying the allowed API groups, resources, and verbs for role-based access control (RBAC).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: developer\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\", \"persistentvolumeclaims\"]\n  verbs: [\"create\", \"get\", \"list\", \"watch\", \"update\", \"delete\"]\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with a Message\nDESCRIPTION: Command to commit staged changes with a descriptive message. The -m flag allows for adding a message directly in the command line without opening a text editor.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Meaningful message\"\n```\n\n----------------------------------------\n\nTITLE: Applying Traffic Shifting Configuration in Kubernetes\nDESCRIPTION: This command applies the traffic shifting configuration for the reviews service using kubectl.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Rewriting History\nDESCRIPTION: Advanced Git commands for modifying commit history, including amending commits, rebasing branches, and viewing reference logs. These enable maintaining a clean and meaningful commit history.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Command    | Example              | Description                                                                                                                              |\n| ---------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| git commit | `git commit --amend` | Replace the last commit with the staged changes and the last commit combined. Use with nothing staged to edit the last commit's message. |\n| git rebase | `git rebase <base>`  | Rebase the current branch onto \\<base>. \\<base> can be a commit ID, branch name, a tag, or a relative reference to HEAD.                   |\n| git reflog | `git reflog`         | Show a log of changes to the local repository's HEAD. Add --relative-date flag to show date info or --all to show all refs.              |\n```\n\n----------------------------------------\n\nTITLE: BookInfo Gateway Configuration\nDESCRIPTION: YAML configuration for the Istio Gateway and VirtualService resources that expose the BookInfo application through the Istio Ingress Gateway. The Gateway listens on port 80 for any host, and the VirtualService routes traffic based on URI paths.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: bookinfo-gateway\nspec:\n  # The selector matches the ingress gateway pod labels.\n  # If you installed Istio using Helm following the standard documentation, this would be \"istio=ingress\"\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: bookinfo\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - bookinfo-gateway\n  http:\n  - match:\n    - uri:\n        exact: /productpage\n    - uri:\n        prefix: /static\n    - uri:\n        exact: /login\n    - uri:\n        exact: /logout\n    - uri:\n        prefix: /api/v1/products\n    route:\n    - destination:\n        host: productpage\n        port:\n          number: 9080\n```\n\n----------------------------------------\n\nTITLE: Configuring Vulnerability Exceptions in Grype YAML\nDESCRIPTION: Creating a grype.yaml configuration file to ignore specific vulnerabilities that cannot be fixed immediately or don't pose a risk to the application. This allows the pipeline to succeed despite certain known vulnerabilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day21.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  # This is the full set of supported rule fields:\n  - vulnerability: CVE-2016-1000027\n    fix-state: unknown\n    package:\n      name: spring-core\n      version: 5.3.6\n      type: java-archive\n  # We can list as many of these as we want\n  - vulnerability: CVE-2022-22965\n  # Or list whole packages which we want to ignore\n  - package:\n      type: gem\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX Container with Terraform\nDESCRIPTION: A basic Terraform configuration to deploy an NGINX container, exposing it on port 8000. This example demonstrates the docker provider configuration, image pulling, and container port mapping.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day60.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nresource \"docker_image\" \"nginx\" {\n  name         = \"nginx:latest\"\n  keep_locally = false\n}\n\nresource \"docker_container\" \"nginx\" {\n  image = docker_image.nginx.latest\n  name  = \"tutorial\"\n  ports {\n    internal = 80\n    external = 8000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Master Node in Rancher Cluster\nDESCRIPTION: This Docker command registers a master node (with etcd and controlplane roles) in a Rancher-managed Kubernetes cluster. It includes the necessary parameters for connecting to the Rancher server and configuring the node's roles.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day53.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --etcd --controlplane\n```\n\n----------------------------------------\n\nTITLE: Defining Vagrant Configuration for Kubernetes Cluster\nDESCRIPTION: This Vagrantfile defines the configuration for a 3-node Kubernetes cluster, including the master node and two worker nodes. It specifies the VM settings, network configuration, and provisioning scripts to be run on each node.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day52.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nNUM_WORKER_NODES=2\nIP_NW=\"10.0.0.\"\nIP_START=10\n\nVagrant.configure(\"2\") do |config|\n    config.vm.provision \"shell\", inline: <<-SHELL\n        apt-get update -y\n        echo \"$IP_NW$((IP_START))  master-node\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+1))  worker-node01\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+2))  worker-node02\" >> /etc/hosts\n    SHELL\n    config.vm.box = \"bento/ubuntu-21.10\"\n    config.vm.box_check_update = true\n\n    config.vm.define \"master\" do |master|\n      master.vm.hostname = \"master-node\"\n      master.vm.network \"private_network\", ip: IP_NW + \"#{IP_START}\"\n      master.vm.provider \"virtualbox\" do |vb|\n          vb.memory = 4048\n          vb.cpus = 2\n          vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n      end\n      master.vm.provision \"shell\", path: \"scripts/common.sh\"\n      master.vm.provision \"shell\", path: \"scripts/master.sh\"\n    end\n\n    (1..NUM_WORKER_NODES).each do |i|\n      config.vm.define \"node0#{i}\" do |node|\n        node.vm.hostname = \"worker-node0#{i}\"\n        node.vm.network \"private_network\", ip: IP_NW + \"#{IP_START + i}\"\n        node.vm.provider \"virtualbox\" do |vb|\n            vb.memory = 2048\n            vb.cpus = 1\n            vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n        end\n        node.vm.provision \"shell\", path: \"scripts/common.sh\"\n        node.vm.provision \"shell\", path: \"scripts/node.sh\"\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Validating Terraform Configuration\nDESCRIPTION: This command checks the syntax of the Terraform configuration files to ensure they are valid before attempting to deploy the infrastructure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day55.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraplan validate\n```\n\n----------------------------------------\n\nTITLE: Creating an Ansible Playbook for VM Configuration\nDESCRIPTION: This Ansible playbook defines tasks to be executed on different VM groups. It installs specific packages on Ubuntu (nginx, mariadb-server) and Centos (httpd, mariadb-server) systems, and creates a simple HTML file on all hosts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day60.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- hosts: ubuntu\n  become: yes\n  tasks:\n    - name: \"apt - Install nginx & mariadb\"\n      apt:\n        name:\n          - nginx\n          - mariadb-server\n        state: present\n        update_cache: yes\n\n- hosts: centos\n  become: yes\n  tasks:\n    - name: \"dnf - Install httpd & mariadb\"\n      dnf:\n        name:\n          - httpd\n          - mariadb-server\n        state: present\n\n- hosts: all\n  become: yes\n  tasks:\n    - name: \"Create simple HTML file\"\n      copy:\n        content: \"<h1>90DaysOfDevOps - Configure by Ansible</h1>\"\n        dest: \"/var/html/index.html\"\n```\n\n----------------------------------------\n\nTITLE: Executing OpenShift-Install Create Cluster Command\nDESCRIPTION: The command to initiate the OpenShift cluster creation wizard that generates the install-config.yaml file and automatically creates the cluster using the bundled Terraform.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day58.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenshift-install create cluster\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Test Runtime Comparison\nDESCRIPTION: This shell script compares the runtime of running all tests versus selectively running tests based on code changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day15.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Compare timing\niterations=10\n\ntotal_time_with=0\nfor ((i = 1; i <= $iterations; i++)); do\n  # Run the command\n  runtime=$(\n    TIMEFORMAT='%R'\n    time (./vendor/bin/phpunit >/dev/null 2>&1) 2>&1\n  )\n\n  miliseconds=$(echo \"$runtime\" | tr ',' '.')\n  total_time_with=$(echo \"$total_time_with + $miliseconds * 1000\" | bc)\ndone\n\naverage_time_with=$(echo \"$total_time_with / $iterations\" | bc)\necho \"Average time (not using deptrac): $average_time_with ms\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Connection Environment Variables\nDESCRIPTION: Script to retrieve MySQL root password from Kubernetes secret and set up environment variables for connecting to the MySQL database.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace ${APP_NAME} mysql-store -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode)\nMYSQL_HOST=mysql-store.${APP_NAME}.svc.cluster.local\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n```\n\n----------------------------------------\n\nTITLE: Infrastructure Protocol Documentation in Markdown\nDESCRIPTION: Markdown documentation explaining various network protocols and standards, including their purposes, functionality, and relationships. Covers fundamental protocols like ARP, FTP, SMTP, HTTP, SSL/TLS, HTTPS, DNS, and DHCP, along with subnetting concepts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day23.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntitle: '#90DaysOfDevOps - Network Protocols - Day 23'\npublished: false\ndescription: 90DaysOfDevOps - Network Protocols\ntags: 'devops, 90daysofdevops, learning'\ncover_image: null\ncanonical_url: null\nid: 1048704\n```\n\n----------------------------------------\n\nTITLE: Viewing Commit History in Git\nDESCRIPTION: Use various 'git log' commands to view the commit history in different formats, including one-line and reverse order.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit log\ngit log --oneline\ngit log --oneline --reverse\n```\n\n----------------------------------------\n\nTITLE: Authorizing Product Page to Access Details Service in Istio\nDESCRIPTION: This policy allows the product page service to perform GET requests to the details service. It uses service account principals for authentication and only permits GET HTTP methods.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: \"get-details\"\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: details\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/default/sa/bookinfo-productpage\"]\n    to:\n    - operation:\n        methods: [\"GET\"]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Jenkins Persistent Volume in Kubernetes\nDESCRIPTION: This command applies a YAML configuration to create a persistent volume for Jenkins in Kubernetes, ensuring data persistence across pod restarts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-volume.yml\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources in Kubernetes Namespace\nDESCRIPTION: Command to list all resources (pods, services, deployments, etc.) in the kube-logging namespace to verify the deployment status of EFK stack components.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day82.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nginx Configuration with Jinja2 Template\nDESCRIPTION: This Jinja2 template dynamically configures Nginx upstream servers using a loop over the webservers group. It demonstrates how to use Ansible facts and variables in templates.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day68.md#2025-04-17_snippet_1\n\nLANGUAGE: Jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n  {% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:8000;\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {\n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining AWX Deployment in Kubernetes\nDESCRIPTION: YAML configuration for deploying AWX in a Kubernetes cluster, specifying the service type as ClusterIP.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx-demo\nspec:\n  service_type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 on Standby Cluster\nDESCRIPTION: Helm command to install Kasten K10 on the standby cluster with necessary configurations for Kanister integration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day89.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Template for Binding Address\nDESCRIPTION: A Jinja2 template file that gets rendered into a MySQL configuration file. This particular configuration allows MySQL to listen on all network interfaces by setting bind-address to 0.0.0.0.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_12\n\nLANGUAGE: jinja2\nCODE:\n```\n[mysql]    \nbind-address = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Basic Jenkinsfile Pipeline Definition\nDESCRIPTION: This Groovy script defines a basic Jenkins pipeline with three stages: Build, Test, and Deploy. Each stage simply echoes a message, serving as a template for more complex pipelines.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building..'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing..'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                echo 'Deploying....'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Authentication Role\nDESCRIPTION: Command to create a Kubernetes authentication role that binds the service account, namespace, and policy together. This role defines which pods can access specific secrets based on their service account and namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/kubernetes/role/devweb-app \\\n        bound_service_account_names=internal-app \\\n        bound_service_account_namespaces=webdevapp \\\n        policies=devwebapp \\\n        ttl=24h\n```\n\n----------------------------------------\n\nTITLE: Initializing and Populating MySQL Database with Sample Data\nDESCRIPTION: Script to create a database, define a table schema for Accounts, and populate it with sample data for testing backup and restore operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"create database myImportantData;\" | mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD}\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho \"drop table Accounts\" | ${MYSQL_EXEC}\necho \"create table if not exists Accounts(name text, balance integer); insert into Accounts values('nick', 0);\" |  ${MYSQL_EXEC}\necho \"insert into Accounts values('albert', 112);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('alfred', 358);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('beatrice', 1321);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('bartholomew', 34);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edward', 5589);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwin', 144);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwina', 233);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('rastapopoulos', 377);\" | ${MYSQL_EXEC}\necho \"select * from Accounts;\" |  ${MYSQL_EXEC}\nexit\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Host with Load Balancing in Nginx\nDESCRIPTION: This configuration sets up a virtual host on port 80 that passes client requests to the previously defined upstream server group. It demonstrates how to reference the upstream servers defined in the load balancer configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day34.md#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n\n    location / {\n        proxy_pass http://myapp1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jenkins using Helm\nDESCRIPTION: This command installs Jenkins using Helm. It specifies the chart, namespace, and a custom values file for configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nchart=jenkinsci/jenkins\nhelm install jenkins -n jenkins -f jenkins-values.yml $chart\n```\n\n----------------------------------------\n\nTITLE: Ansible Web and Proxy Server Configuration with Tags\nDESCRIPTION: Playbook configuration defining web servers and proxy setup with tags for selective execution. Includes variable definitions and role assignments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Privileged SCC Configuration in OpenShift\nDESCRIPTION: YAML configuration for the privileged SCC in OpenShift that allows full access to all privileged and host features. This configuration grants pods the ability to run as any user, use host resources, and have elevated privileges, intended for cluster administration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nallowHostDirVolumePlugin: true\nallowHostIPC: true\nallowHostNetwork: true\nallowHostPID: true\nallowHostPorts: true\nallowPrivilegeEscalation: true\nallowPrivilegedContainer: true\nallowedCapabilities:\n- '*'\nallowedUnsafeSysctls:\n- '*'\napiVersion: security.openshift.io/v1\ndefaultAddCapabilities: null\nfsGroup:\n  type: RunAsAny\ngroups:\n- system:cluster-admins\n- system:nodes\n- system:masters\nkind: SecurityContextConstraints\nmetadata:\n  annotations:\n    include.release.openshift.io/ibm-cloud-managed: \"true\"\n    include.release.openshift.io/self-managed-high-availability: \"true\"\n    include.release.openshift.io/single-node-developer: \"true\"\n    kubernetes.io/description: 'privileged allows access to all privileged and host\n      features and the ability to run as any user, any group, any fsGroup, and with\n      any SELinux context.  WARNING: this is the most relaxed SCC and should be used\n      only for cluster administration. Grant with caution.'\n    release.openshift.io/create-only: \"true\"\n  creationTimestamp: \"2023-03-16T09:34:35Z\"\n  generation: 1\n  name: privileged\n  resourceVersion: \"398\"\n  uid: 19a16cc2-ce1f-4037-b70e-49ba261cb599\npriority: null\nreadOnlyRootFilesystem: false\nrequiredDropCapabilities: null\nrunAsUser:\n  type: RunAsAny\nseLinuxContext:\n  type: RunAsAny\nseccompProfiles:\n- '*'\nsupplementalGroups:\n  type: RunAsAny\nusers:\n- system:admin\n- system:serviceaccount:openshift-infra:build-controller\nvolumes:\n- '*'\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Configuration for WordPress and MySQL\nDESCRIPTION: This YAML configuration defines two services (WordPress and MySQL) with their respective images, volumes, environment variables, and port mappings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day46.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n    \nservices:\n  db:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    \n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    volumes:\n      - wordpress_data:/var/www/html\n    ports:\n      - \"8000:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\nvolumes:\n  db_data: {}\n  wordpress_data: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Helm using Curl Script\nDESCRIPTION: This bash script downloads and installs the latest version of Helm, a package manager for Kubernetes. It uses curl to fetch the installer script, sets execute permissions, and runs it.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day54.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n\nchmod 700 get_helm.sh\n\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Operating System Details with Ansible\nDESCRIPTION: An ad hoc command that retrieves OS information from all systems in the 'linux' group by executing a shell command on the remote systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day64.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nansible linux -a \"cat /etc/os-release\"\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Infrastructure Changes\nDESCRIPTION: This command executes the Terraform plan and actually creates or modifies the infrastructure resources as defined in the configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day55.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Defining an AKS Cluster with Bicep\nDESCRIPTION: Bicep template that defines an Azure Kubernetes Service cluster with configurable parameters including cluster name, location, agent count, and VM specifications. The template sets up a managed cluster with Linux nodes and managed identity.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day35.md#2025-04-17_snippet_1\n\nLANGUAGE: bicep\nCODE:\n```\nparam clusterName string = 'myAKSCluster'\nparam location string = 'eastus'\nparam dnsPrefix string = 'mydns'\nparam osDiskSizeInGB int = 30\nparam agentCount int = 1\nparam image string = 'CanonicalUbuntuServer'\n\n@landingSlot\nresource aks myAKSCluster = Microsoft.ContainerInstances/managedClusters@2020-06-01 {\n   name: clusterName\n   location: location\n   properties: {\n      dnsPrefix: dnsPrefix\n      kubernetesVersion: '1.27.7'\n      osType: 'Linux'\n      servicePrincipalProfile: {\n         clientId: '<Your Service Principal Client ID>'\n         secret: '<Your Service Principal Secret>'\n      }\n      enableManagedIdentity: true\n   }\n   sku: {\n      tier: Premium\n      name: Standard_D4_v3\n   }\n   agentPoolProfiles: [\n      {\n         name: 'agentpool'\n         count: agentCount\n         osType: 'Linux'\n         osDiskSizeInGB: osDiskSizeInGB\n         vmSize: 'Standard_DS2_v3'\n         type: 'VirtualMachineScaleSets'\n         mode: System\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: User and Group Management in Linux\nDESCRIPTION: Commands for changing passwords, adding users, creating groups, and modifying group memberships.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npasswd\nsudo useradd NewUser\nsudo groupadd DevOps\nsudo usermod -a -G DevOps\nusermod -a -G sudo NewUser\n```\n\n----------------------------------------\n\nTITLE: Simplified Ansible Playbook with Roles (YAML)\nDESCRIPTION: This playbook demonstrates a clean structure using roles and tags, without inline variable definitions. Variables are moved to separate files for better organization.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day68.md#2025-04-17_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Deploying ArgoCD on Kubernetes\nDESCRIPTION: Commands to create a namespace for ArgoCD and deploy it into a Kubernetes cluster using the official installation manifest.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day76.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Stateful Pacman Application with MongoDB\nDESCRIPTION: Command to create the Pacman application with MongoDB backend from a YAML configuration file, establishing pods, services, deployment, and statefulset objects.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-stateful-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Getting Condensed Status Output\nDESCRIPTION: Command to show a shortened version of the git status output. Shows modified, added, and deleted files in a more compact format, using the -s flag for 'short'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit status -s\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Template\nDESCRIPTION: This Jinja2 template file sets the MySQL bind address to allow connections from any IP address.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day68.md#2025-04-17_snippet_6\n\nLANGUAGE: jinja2\nCODE:\n```\n[mysql]\nbind-address = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Describing a Kanister ActionSet\nDESCRIPTION: Command to view the details of a specific ActionSet including its status and progress.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kanister describe actionset backup-qpnqv\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Nodes with kubectl in Bash\nDESCRIPTION: Basic kubectl command to list all nodes in the Kubernetes cluster. This verifies that the cluster is running and kubectl is properly configured.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Nodes with kubectl in Bash\nDESCRIPTION: Command to list all nodes in the Kubernetes cluster using kubectl. This verifies the cluster is running properly and shows available nodes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Grouping Variable Declarations in Go with var Block\nDESCRIPTION: Demonstrates how to group multiple variable declarations within a single var block in Go, making the code more organized. Shows declarations with and without initializations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day15.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nvar (\n  i int\n  s string\n  b bool\n  k float64 = 0.9\n)\n```\n\n----------------------------------------\n\nTITLE: Git Push Commands\nDESCRIPTION: Advanced Git push commands for forcing pushes, pushing all branches, and pushing tags to remote repositories.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                   |           Example           |           Description                                                                                                                           | \n| ------------------------- |   --------------------------|   --------------------------------------------------------------------------------------------------------------------------------------------- |\n| git push <remote> --force                 | `git push <remote> --force`                | Forces the git push even if it results in a non-fast-forward merge. Do not use the --force flag unless you're absolutely sure you know what you're doing. |\n| git push <remote> --all          | `git push <remote> --all`          | Push all of your local branches to the specified remote.                        |\n| git push <remote> --tags        | `git push <remote> --tags`        | Tags aren't automatically pushed when you push a branch or use the --all flag. The --tags flag sends all of your local tags to the remote repo. |\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Non-Root User\nDESCRIPTION: This command shows how to run a Docker container with a specific non-root user ID. This method overrides any user specified in the Dockerfile, ensuring the container runs with least privilege.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day47.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --user 1009 ubuntu\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible Host Groups in inventory\nDESCRIPTION: An example of how to organize servers into logical groups in the Ansible hosts file. This configuration groups servers as control, proxy, webservers, and database nodes for targeted management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day65.md#2025-04-17_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[control]\nansible-control\n\n[proxy] \nloadbalancer\n\n[webservers] \nweb01\nweb02\n\n[database] \ndb01\n```\n\n----------------------------------------\n\nTITLE: Running Lynis Host System Audit\nDESCRIPTION: Command to execute a comprehensive system audit using Lynis. This scan identifies potential security issues and vulnerabilities on the host system and provides a detailed report.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day32.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo lynis audit system\n```\n\n----------------------------------------\n\nTITLE: Configuring FluentBit in Kubernetes via ConfigMap\nDESCRIPTION: A complete ConfigMap configuration for FluentBit in Kubernetes, defining parsers, service settings, inputs, filters, and outputs for log collection and forwarding to Elasticsearch.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day81.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName:         fluent-bit\nNamespace:    default\nLabels:       app.kubernetes.io/instance=fluent-bit\n              app.kubernetes.io/managed-by=Helm\n              app.kubernetes.io/name=fluent-bit\n              app.kubernetes.io/version=1.8.14\n              helm.sh/chart=fluent-bit-0.19.21\nAnnotations:  meta.helm.sh/release-name: fluent-bit\n              meta.helm.sh/release-namespace: default\n\nData\n====\ncustom_parsers.conf:\n----\n[PARSER]\n    Name docker_no_time\n    Format json\n    Time_Keep Off\n    Time_Key time\n    Time_Format %Y-%m-%dT%H:%M:%S.%L\n\nfluent-bit.conf:\n----\n[SERVICE]\n    Daemon Off\n    Flush 1\n    Log_Level info\n    Parsers_File parsers.conf\n    Parsers_File custom_parsers.conf\n    HTTP_Server On\n    HTTP_Listen 0.0.0.0\n    HTTP_Port 2020\n    Health_Check On\n\n[INPUT]\n    Name tail\n    Path /var/log/containers/*.log\n    multiline.parser docker, cri\n    Tag kube.*\n    Mem_Buf_Limit 5MB\n    Skip_Long_Lines On\n\n[INPUT]\n    Name systemd\n    Tag host.*\n    Systemd_Filter _SYSTEMD_UNIT=kubelet.service\n    Read_From_Tail On\n\n[FILTER]\n    Name kubernetes\n    Match kube.*\n    Merge_Log On\n    Keep_Log Off\n    K8S-Logging.Parser On\n    K8S-Logging.Exclude On\n\n[OUTPUT]\n    Name es\n    Match kube.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Retry_Limit False\n\n[OUTPUT]\n    Name es\n    Match host.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Logstash_Prefix node\n    Retry_Limit False\n```\n\n----------------------------------------\n\nTITLE: Cloud-Init Configuration for VM Customization\nDESCRIPTION: YAML configuration file for cloud-init that automates VM setup, including package installation, user creation, and SSH key configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n#cloud-config\npackage_update: true\npackages:\n  - figlet\nruncmd:\n  - figlet \"90DaysOfDevOps\" > /etc/motd\nssh_authorized_keys:\n  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPM5G51HWQEIRyr3bYOKWWGRYrLXGIjW3qDKKstazmBw cade.mccabe@gmail.com\n```\n\n----------------------------------------\n\nTITLE: Creating VirtualBox VMs with Terraform\nDESCRIPTION: This Terraform configuration creates multiple Ubuntu VMs in VirtualBox. It defines a provider configuration, resource specifications for two VMs with networking, and outputs their IP addresses. The configuration uses the count parameter to create multiple similar resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day59.md#2025-04-17_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    virtualbox = {\n      source = \"terra-farm/virtualbox\"\n      version = \"0.2.2-alpha.1\"\n    }\n  }\n}\n\n# There are currently no configuration options for the provider itself.\n\nresource \"virtualbox_vm\" \"node\" {\n  count     = 2\n  name      = format(\"node-%02d\", count.index + 1)\n  image     = \"https://app.vagrantup.com/ubuntu/boxes/bionic64/versions/20180903.0.0/providers/virtualbox.box\"\n  cpus      = 2\n  memory    = \"512 mib\"\n\n  network_adapter {\n    type           = \"hostonly\"\n    host_interface = \"vboxnet1\"\n  }\n}\n\noutput \"IPAddr\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 1)\n}\n\noutput \"IPAddr_2\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 2)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster with Custom Configuration\nDESCRIPTION: Command to start a Minikube cluster with custom configurations including API server port, container runtime, and Kubernetes version specification.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day51.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start \\\n--apiserver-port=6443 \\\n--container-runtime=containerd \\\n--kubernetes-version=v1.23.3\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Identity Provider in OpenShift\nDESCRIPTION: This YAML configuration sets up an LDAP identity provider in OpenShift. It specifies the LDAP server details, bind credentials, and attribute mappings. This configuration allows OpenShift to authenticate users against an LDAP server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  name: cluster\nspec:\n  identityProviders:\n  - name: ldapidp \n    mappingMethod: claim \n    type: LDAP\n    ldap:\n      attributes:\n        id: \n        - name\n        name: \n        - cn\n        preferredUsername: \n        - sAMAccountName\n      bindDN: \"CN=svc_openshift,OU=Services,OU=Accounts,DC=simon,DC=local\" \n      bindPassword: \n        name: ldap-secret\n      insecure: true\n      url: \"ldap://sc-step-01.simon.local:389/CN=Users,DC=simon,DC=local?sAMAccountName\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Ansible Playbook with Database Configuration (YAML)\nDESCRIPTION: This expanded playbook includes configurations for web servers, proxy server, and a new database server. It uses roles and tags for organization and selective execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags:\n    web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: \n    proxy\n\n- hosts: database\n  become: yes\n  roles:\n    - common\n    - mysql\n  tags: database\n```\n\n----------------------------------------\n\nTITLE: Azure Pipeline Stages Configuration\nDESCRIPTION: Defines the stages of the pipeline including Build and Deploy. Each stage consists of jobs that execute on an agent with specified VM image, with dependencies between stages to ensure sequential execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day25.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n- stage: Build\n  displayName: Build stage\n  jobs:  \n  - job: Build\n    displayName: Build\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: Docker@2\n      displayName: Build and push an image to container registry\n      inputs:\n        command: buildAndPush\n        repository: $(imageRepository)\n        dockerfile: $(dockerfilePath)\n        containerRegistry: $(dockerRegistryServiceConnection)\n        tags: |\n          $(tag)\n          \n    - upload: manifests\n      artifact: manifests\n\n- stage: Deploy\n  displayName: Deploy stage\n  dependsOn: Build\n\n  jobs:\n  - deployment: Deploy\n    displayName: Deploy\n    pool:\n      vmImage: $(vmImageName)\n    environment: 'development.default'\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: KubernetesManifest@0\n            displayName: Create imagePullSecret\n            inputs:\n              action: createSecret\n              secretName: $(imagePullSecret)\n              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)\n              \n          - task: KubernetesManifest@0\n            displayName: Deploy to Kubernetes cluster\n            inputs:\n              action: deploy\n              manifests: |\n                $(Pipeline.Workspace)/manifests/deployment.yml\n                $(Pipeline.Workspace)/manifests/service.yml\n              imagePullSecrets: |\n                $(imagePullSecret)\n              containers: |\n                $(containerRegistry)/$(imageRepository):$(tag)\n```\n\n----------------------------------------\n\nTITLE: Installing Kanister with Helm in Kubernetes\nDESCRIPTION: Command to install the Kanister operator in a Kubernetes cluster using Helm, creating a dedicated namespace and specifying the image version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kanister --namespace kanister kanister/kanister-operator --set image.tag=0.75.0 --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Ansible Playbook with Database Configuration (YAML)\nDESCRIPTION: This playbook includes a new block for database configuration, demonstrating how to add new roles and tags for different server types.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day68.md#2025-04-17_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags:\n    web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags:\n    proxy\n\n- hosts: database\n  become: yes\n  roles:\n    - common\n    - mysql\n  tags: database\n```\n\n----------------------------------------\n\nTITLE: Creating Restore ActionSet\nDESCRIPTION: Command to create a restore ActionSet using kanctl, referencing a previous backup\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkanctl create actionset -n kanister --action restore --from \"backup-qpnqv\"\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube for Kubernetes Deployment\nDESCRIPTION: This command starts a local Kubernetes cluster using Minikube. It's the first step in setting up the environment for Jenkins deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Defining Ansible Role Usage in YAML\nDESCRIPTION: Demonstrates how to include and use the Ansible role in a playbook, showing how to pass variables as parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Configmgmt/ansible-scenario3/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Authorizing Product Page to Access Reviews in Istio\nDESCRIPTION: This policy allows the product page service to make GET requests to the reviews service. It uses service account principals for authentication and limits the allowed HTTP methods to GET.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: \"get-reviews\"\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: reviews\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/default/sa/bookinfo-productpage\"]\n    to:\n    - operation:\n        methods: [\"GET\"]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Jenkins Pipeline with Build, Test, and Deploy Stages\nDESCRIPTION: A simple Jenkinsfile that defines a declarative pipeline with three stages: Build, Test, and Deploy. Each stage simply echoes its name, serving as a placeholder for actual build, test, and deployment commands in a real CI pipeline.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day72.md#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nJenkinsfile (Declarative Pipeline)\n\npipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building..'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing..'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                echo 'Deploying....'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Jenkins Volume Configuration\nDESCRIPTION: This command applies a YAML file that defines the persistent volume for Jenkins. It ensures data persistence across pod restarts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-volume.yml\n```\n\n----------------------------------------\n\nTITLE: Mounting Kopia Snapshots from Google Cloud Storage\nDESCRIPTION: Command to mount all snapshots from the Google Cloud Storage repository to a local drive letter. This allows browsing the backup contents without performing a full restore.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day86.md#2025-04-17_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config mount all Z:\n```\n\n----------------------------------------\n\nTITLE: Using Jinja2 Templates with Ansible Facts for Dynamic Nginx Configuration\nDESCRIPTION: This template demonstrates how to create a dynamic Nginx configuration using Jinja2 templating with Ansible facts to automatically include all webservers in the load balancer upstream configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n\t{% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:8000;\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Azure Pipeline YAML Structure\nDESCRIPTION: The foundational structure of an Azure Pipeline YAML file showing trigger configuration, resources, and variables. It defines when the pipeline runs, what repositories to use, and key variables for the deployment environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day25.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n- main\n\nresources:\n- repo: self\n\nvariables:\n  # Container registry service connection established during pipeline creation\n  dockerRegistryServiceConnection: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n  imageRepository: 'apiname' # name of the repository to deploy\n  containerRegistry: '<ACRname>.azurecr.io' # we need this to upload our images \n  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile' # where are we keeping our dockerfile for our app? \n  tag: '$(Build.BuildId)' # good idea to tag with this so we know what build the image came from \n  imagePullSecret: 'secret' # the Kubernetes cluster can be private, if so then we might need to pull from ACR \n\n  # Agent VM image name\n  vmImageName: 'ubuntu-latest'\n  \n  # Name of the new namespace being created to deploy the PR changes.\n  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'  \n```\n\n----------------------------------------\n\nTITLE: Creating VirtualBox VMs with Terraform Configuration\nDESCRIPTION: Terraform configuration to create multiple Ubuntu VMs in VirtualBox with network configuration and output definitions. The code includes provider configuration, VM resource definition with customizable count, CPU, memory, and networking settings, plus output variables for IP addresses.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day59.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    virtualbox = {\n      source = \"terra-farm/virtualbox\"\n      version = \"0.2.2-alpha.1\"\n    }\n  }\n}\n\n# There are currently no configuration options for the provider itself.\n\nresource \"virtualbox_vm\" \"node\" {\n  count     = 2\n  name      = format(\"node-%02d\", count.index + 1)\n  image     = \"https://app.vagrantup.com/ubuntu/boxes/bionic64/versions/20180903.0.0/providers/virtualbox.box\"\n  cpus      = 2\n  memory    = \"512 mib\"\n\n  network_adapter {\n    type           = \"hostonly\"\n    host_interface = \"vboxnet1\"\n  }\n}\n\noutput \"IPAddr\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 1)\n}\n\noutput \"IPAddr_2\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 2)\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Network Policy for Nginx Access\nDESCRIPTION: Creates a network policy that restricts access to the Nginx pod, allowing only pods with a specific label to connect.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - << EOF\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: nginx-client-access\nspec:\n  podSelector:\n    matchLabels:\n      app: nginx\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          nginx: \"client\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: MySQL Database and User Setup in Ansible\nDESCRIPTION: An Ansible task file for configuring MySQL, creating a database user with specific privileges, and setting up a new database. It uses variables for credentials and configuration templates.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create my.cnf configuration file\n  template: src=templates/my.cnf.j2 dest=/etc/mysql/conf.d/mysql.cnf\n  notify: restart mysql\n\n- name: Create database user with name 'devops' and password 'DevOps90' with all database privileges\n  community.mysql.mysql_user:\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n    login_user: \"{{ mysql_user_name }}\" \n    login_password: \"{{ mysql_user_password }}\" \n    name: \"{{db_user}}\"\n    password: \"{{db_pass}}\"\n    priv: '*.*:ALL'\n    host: '%'\n    state: present\n\n- name: Create a new database with name '90daysofdevops'\n  mysql_db:\n    login_user: \"{{ mysql_user_name }}\" \n    login_password: \"{{ mysql_user_password }}\"    \n    name: \"{{ db_name }}\"\n    state: present\n```\n\n----------------------------------------\n\nTITLE: Basic Ubuntu Nginx Dockerfile\nDESCRIPTION: A Dockerfile that creates an image based on Ubuntu 18.04, installing nginx and curl. It demonstrates basic Dockerfile commands including FROM, RUN, and proper cleanup of apt cache to reduce image size.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day45.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\n# Install nginx and curl\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y nginx curl\nRUN rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus and Grafana on Kubernetes\nDESCRIPTION: Sets up Prometheus for metrics collection and Grafana for visualization in a Kubernetes cluster using Helm. The commands add repository sources, install the charts, and expose the Grafana service for external access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day28.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm install prometheus prometheus-community/prometheus\nhelm install grafana grafana/grafana\nkubectl expose service grafana --type=NodePort --target-port=3000 --name=grafana-np\n```\n\n----------------------------------------\n\nTITLE: Common Variables Configuration\nDESCRIPTION: Defines common variables used across the Ansible playbook including ports, messages, and MySQL credentials.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n\nmysql_user_name: root\nmysql_user_password: \"vagrant\"\ndb_user: devops\ndb_pass: DevOps90\ndb_name: 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Checking AWX Operator Pod Status in Kubernetes\nDESCRIPTION: Command to verify the AWX operator pod is running correctly in the designated namespace after deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day69.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n awx\n```\n\n----------------------------------------\n\nTITLE: Defining EDA Ruleset for Alertmanager Alerts in YAML\nDESCRIPTION: This YAML snippet defines an EDA ruleset that listens for Alertmanager alerts and triggers actions based on specific conditions. It includes a rule to restart the MySQL server when it's not running and a debug rule to output event information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Listen to Alertmanager alerts\n  hosts: all\n  sources:\n    - ansible.eda.alertmanager:\n        host: 0.0.0.0\n        port: 9000\n        data_alerts_path: alerts\n        data_host_path: labels.instance\n        data_path_separator: .\n  rules:\n    - name: Restart MySQL server\n      condition: event.alert.labels.alertname == 'MySQL not running' and event.alert.status == 'firing'\n      action:\n        run_playbook:\n          name: ./playbook.yml\n    - name: Debug event output\n      condition: 1 == 1\n      action:\n        debug:\n          msg: \"{{ event }}\"\n```\n\n----------------------------------------\n\nTITLE: Running NGINX Container with Port Mapping\nDESCRIPTION: This command creates and runs an NGINX container named 'web1' in detached mode, mapping port 8080 on the host to port 80 in the container to allow external access to the web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day47.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name web1 -d -p 8080:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Conditional Task in Ansible Playbook\nDESCRIPTION: An example of a conditional task in an Ansible playbook that shuts down Debian-flavored systems. It demonstrates the use of the 'when' clause for conditional execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  - name: \"shut down Debian flavoured systems\"\n    command: /sbin/shutdown -t now\n    when: ansible_os_family == \"Debian\"\n```\n\n----------------------------------------\n\nTITLE: Denying All Traffic with Istio Authorization Policy in Kubernetes\nDESCRIPTION: This snippet creates an empty AuthorizationPolicy that effectively denies all traffic in the default namespace. With no rules specified, the policy blocks all requests by default.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-nothing\n  namespace: default\nspec:\n  {}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Verifying Istio Component Deployment\nDESCRIPTION: Command to check the status of all Istio components in the istio-system namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes nodes with kubectl in bash\nDESCRIPTION: This command uses kubectl to list all nodes in the Kubernetes cluster, verifying the cluster is running and accessible.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day51.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Ping Module Locally\nDESCRIPTION: Command to run the Ansible ping module against the local machine, used to test Ansible functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day64.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nansible localhost -m ping\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform using Arkade CLI on Linux\nDESCRIPTION: This command demonstrates how to install Terraform using the Arkade CLI tool, which provides a simple way to install various development tools. The 'arkade get terraform' command will either install Terraform or update it if it's already installed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day57.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\narkade get terraform\n```\n\n----------------------------------------\n\nTITLE: Simplified Ansible Playbook with External Variables (YAML)\nDESCRIPTION: This playbook demonstrates a cleaner structure after moving variables to external files. It defines roles for web servers and proxy server with tags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Setting Default Git Editor to Visual Studio Code\nDESCRIPTION: This command sets Visual Studio Code as the default text editor for Git operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day36.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.editor \"code --wait\"\n```\n\n----------------------------------------\n\nTITLE: Complete Ansible Playbook with Webservers and Proxy Configuration\nDESCRIPTION: This YAML snippet shows a complete Ansible playbook with two host blocks - one for webservers deploying apache2 and another for the proxy server deploying nginx. Both include the common role for shared configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day67.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n```\n\n----------------------------------------\n\nTITLE: Defining RoleBinding for User in OpenShift\nDESCRIPTION: YAML definition for a RoleBinding that associates the 'app-mgr' role with a user named 'test' in the 'rbac-test-ns' namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: app-mgr-binding\n  namespace: rbac-test-ns\nsubjects:\n- kind: User\n  name: test\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: app-mgr\n  apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Initializing Minikube Cluster for Jenkins Deployment\nDESCRIPTION: This snippet starts a Minikube cluster, creates a Jenkins namespace, and verifies its creation. It's the initial setup for deploying Jenkins on Kubernetes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n\nkubectl create namespace jenkins or kubectl create -f jenkins-namespace.yml \n\nkubectl get namespaces\n```\n\n----------------------------------------\n\nTITLE: Adding Changes to Git Staging Area\nDESCRIPTION: Command to stage changes for commit in Git. This adds your modified files to the staging area in preparation for committing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day29.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Testing EDA with Different Payload\nDESCRIPTION: Sending a different payload to the EDA webhook endpoint to demonstrate conditional rule processing based on the content of the event.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"bar\": \"baz\"}' \\\n  http://localhost:5000/endpoint\n```\n\n----------------------------------------\n\nTITLE: Comprehensive DevOps Challenge Progress Script\nDESCRIPTION: A complete bash script that includes variables, user input, and conditional statements to track progress in the 90DaysOfDevOps challenge.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n#  ___   ___  ____                   ___   __ ____              ___\n# / _ \\ / _ \\|  _ \\  __ _ _   _ ___ / _ \\ / _|  _ \\  _____   __/ _ \\ _ __  ___\n#| (_) | | | | | | |/ _` | | | / __| | | | |_| | | |/ _ \\ \\ / / | | | '_ \\/ __|\n# \\__, | |_| | |_| | (_| | |_| \\__ \\ |_| |  _| |_| |  __/\\ V /| |_| | |_) \\__ \\\n#   /_/ \\___/|____/ \\__,_|\\__, |___/\\___/|_| |____/ \\___| \\_/  \\___/| .__/|___/\n#                         |___/                                     |_|\n#\n# This script is to demonstrate bash scripting!\n\n# Variables to be defined\n\nChallengeName=#90DaysOfDevOps\nTotalDays=90\n\n# User Input\n\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to $ChallengeName\"\necho \"How Many Days of the $ChallengeName challenge have you completed?\"\nread DaysCompleted\n\nif [ $DaysCompleted -eq 90 ]\nthen\n  echo \"You have finished, well done\"\nelif [ $DaysCompleted -lt 90 ]\nthen\n  echo \"Keep going you are doing great\"\nelse\n  echo \"You have entered the wrong amount of days\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Switching WAL File in PostgreSQL\nDESCRIPTION: Command to force PostgreSQL to switch to a new WAL file, which ensures the current WAL file is archived and available for the recovery process.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npsql -c \"select pg_switch_wal();\"\n```\n\n----------------------------------------\n\nTITLE: Creating DockerHub Credentials in Kubernetes\nDESCRIPTION: Kubernetes command to create a docker-registry secret for storing DockerHub credentials, used for authentication when pushing images.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day73.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret docker-registry dockercred \\\n    --docker-server=https://index.docker.io/v1/ \\\n    --docker-username=<dockerhub-username> \\\n    --docker-password=<dockerhub-password>\\\n    --docker-email=<dockerhub-email>\n```\n\n----------------------------------------\n\nTITLE: Installing Kanister Operator using Helm\nDESCRIPTION: Helm command to install Kanister operator in a Kubernetes cluster with version 0.75.0\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day88.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kanister --namespace kanister kanister/kanister-operator --set image.tag=0.75.0 --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Scanning Ubuntu Container Image with Grype\nDESCRIPTION: This snippet demonstrates how to use the Grype tool to scan the latest Ubuntu container image for vulnerabilities. It shows the command execution and the resulting output, which includes a list of vulnerabilities found in the image.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day14.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ grype ubuntu:latest\n ✔ Vulnerability DB        [updated]\n ✔ Pulled image\n ✔ Loaded image\n ✔ Parsed image\n ✔ Cataloged packages      [101 packages]\n ✔ Scanned image           [16 vulnerabilities]\nNAME          INSTALLED                 FIXED-IN  TYPE  VULNERABILITY   SEVERITY\nbash          5.1-6ubuntu1                        deb   CVE-2022-3715   Medium\ncoreutils     8.32-4.1ubuntu1                     deb   CVE-2016-2781   Low\ngpgv          2.2.27-3ubuntu2.1                   deb   CVE-2022-3219   Low\nlibc-bin      2.35-0ubuntu3.1                     deb   CVE-2016-20013  Negligible\nlibc6         2.35-0ubuntu3.1                     deb   CVE-2016-20013  Negligible\nlibncurses6   6.3-2                               deb   CVE-2022-29458  Negligible\nlibncursesw6  6.3-2                               deb   CVE-2022-29458  Negligible\nlibpcre3      2:8.39-13ubuntu0.22.04.1            deb   CVE-2017-11164  Negligible\nlibsystemd0   249.11-0ubuntu3.6                   deb   CVE-2022-3821   Medium\nlibtinfo6     6.3-2                               deb   CVE-2022-29458  Negligible\nlibudev1      249.11-0ubuntu3.6                   deb   CVE-2022-3821   Medium\nlogin         1:4.8.1-2ubuntu2                    deb   CVE-2013-4235   Low\nncurses-base  6.3-2                               deb   CVE-2022-29458  Negligible\nncurses-bin   6.3-2                               deb   CVE-2022-29458  Negligible\npasswd        1:4.8.1-2ubuntu2                    deb   CVE-2013-4235   Low\nzlib1g        1:1.2.11.dfsg-2ubuntu9.2            deb   CVE-2022-42800  Medium\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Terminal Commands\nDESCRIPTION: Essential Docker Compose commands for managing the application lifecycle, including starting containers in detached mode, stopping containers, and managing volumes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day46.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\ndocker ps\ndocker-compose down\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Git Diff Commands\nDESCRIPTION: Commands for comparing differences between the working directory, staged changes, and commits in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Command           |           Example                       |           Description                                                                                                                 | \n| ---------------   |   ------------------------------------- |   ----------------------------------------------------------------------------------------------------------------------------------- |\n| git diff HEAD     | `git diff HEAD`                         | Show difference between working directory and last commit.                                                                            |\n| git diff --cached | `git diff --cached`                     | Show difference between staged changes and last commit                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Port Forwarding Commands\nDESCRIPTION: Commands for port forwarding Grafana, Prometheus, and Alertmanager services in Kubernetes monitoring namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day83.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/grafana 3000\nkubectl --namespace monitoring port-forward svc/prometheus-k8s 9090\nkubectl --namespace monitoring port-forward svc/alertmanager-main 9093\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Context with Additional Capabilities in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a pod with additional capabilities. It specifies a security context that adds NET_ADMIN and SYS_TIME capabilities to the container.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: security-context-demo-4\nspec:\n  containers:\n  - name: sec-ctx-4\n    image: gcr.io/google-samples/node-hello:1.0\n    securityContext:\n      capabilities:\n        add: [\"NET_ADMIN\", \"SYS_TIME\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider in Terraform\nDESCRIPTION: Defines the AWS provider configuration with version requirements and source location.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day58.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx Application in Kubernetes\nDESCRIPTION: A complete YAML configuration for deploying an Nginx application in Kubernetes. Includes namespace creation, deployment configuration with replicas, and service definition for exposure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day54.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: nginx\n  \"labels\": {\n    \"name\": \"nginx\"\n  }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: nginx\nspec:\n  selector:\n    app: nginx-deployment\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX Container with Terraform\nDESCRIPTION: Terraform configuration to deploy an NGINX container exposed on port 8000. Uses the kreuzwerker/docker provider to manage Docker resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day60.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nresource \"docker_image\" \"nginx\" {\n  name         = \"nginx:latest\"\n  keep_locally = false\n}\n\nresource \"docker_container\" \"nginx\" {\n  image = docker_image.nginx.latest\n  name  = \"tutorial\"\n  ports {\n    internal = 80\n    external = 8000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Trivy Security Scanner\nDESCRIPTION: Shows the command to install Trivy scanner using Homebrew package manager. Trivy is a tool for finding vulnerabilities in container images and filesystems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install trivy\n```\n\n----------------------------------------\n\nTITLE: Git Remote Repository Commands\nDESCRIPTION: Commands for interacting with remote Git repositories, including adding remote connections, fetching changes, pulling updates, and pushing local commits. These enable collaboration across distributed teams.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Command        | Example                       | Description                                                                                                                         |\n| -------------- | ----------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| git remote add | `git remote add <name> <url>` | Create a new connection to a remote repo. After adding a remote, you can use \\<name> as a shortcut for \\<url> in other commands.      |\n| git fetch      | `git fetch <remote> <branch>` | Fetches a specific \\<branch>, from the repo. Leave off \\<branch> to fetch all remote refs.                                            |\n| git pull       | `git pull <remote>`           | Fetch the specified remote's copy of current branch and immediately merge it into the local copy.                                   |\n| git push       | `git push <remote> <branch>`  | Push the branch to \\<remote>, along with necessary commits and objects. Creates named branch in the remote repo if it doesn't exist. |\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Ansible Playbook (YAML)\nDESCRIPTION: This snippet shows how to define tags for different plays in an Ansible playbook. Tags allow for selective execution of specific parts of the playbook.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Container Application with Docker Compose YAML\nDESCRIPTION: This YAML file defines a WordPress application with a MySQL database using Docker Compose. It specifies services, images, volumes, environment variables, and port mappings for both WordPress and MySQL containers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day46.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  DB:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n\n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    volumes:\n      - wordpress_data:/var/www/html\n    ports:\n      - \"8000:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\nvolumes:\n  db_data: {}\n  wordpress_data: {}\n```\n\n----------------------------------------\n\nTITLE: Common Variables for Ansible Configuration\nDESCRIPTION: A variables file containing important configuration parameters for the web server ports, MySQL credentials, and database settings. These variables are referenced throughout the playbook tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n\nmysql_user_name: root\nmysql_user_password: \"vagrant\"\ndb_user: devops\ndb_pass: DevOps90\ndb_name: 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Complete Go Program with Multiple Variables\nDESCRIPTION: Program showing multiple variables for tracking progress in the challenge. It demonstrates using variables of different types (string and integers) together in output statements.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day11.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    const daystotal = 90\n    var dayscomplete = 11\n\n    fmt.Println(\"Welcome to\", challenge, \"\")\n    fmt.Println(\"This is a\", daystotal, \"challenge and you have completed\", dayscomplete, \"days\")\n    fmt.Println(\"Great work\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Upstream Servers using Jinja2 Template\nDESCRIPTION: This Jinja2 template dynamically configures Nginx upstream servers by looping through the 'webservers' group and using Ansible facts to set server names and ports.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n\t{% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:8000;\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Twitter API Authentication\nDESCRIPTION: Commands to set environment variables for Twitter API authentication tokens and keys. Shows the difference between Windows and Linux/macOS commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nset CONSUMER_KEY\nset CONSUMER_SECRET\nset ACCESS_TOKEN\nset ACCESS_TOKEN_SECRET\n```\n\nLANGUAGE: Shell\nCODE:\n```\nexport CONSUMER_KEY\nexport CONSUMER_SECRET\nexport ACCESS_TOKEN\nexport ACCESS_TOKEN_SECRET\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Files PersistentVolumeClaim with YAML\nDESCRIPTION: This YAML manifest defines a PersistentVolumeClaim for Azure Files with ReadWriteMany access mode, requesting 5GB of storage with the default storage class.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day22.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: azurefile\nspec:\n  accessModes:\n    - ReadWriteMany\n  storageClassName: my-azurefile\n  resources:\n    requests:\n      storage: 5Gi\n```\n\n----------------------------------------\n\nTITLE: Creating Jenkins Namespace in Kubernetes\nDESCRIPTION: This YAML snippet creates a namespace for Jenkins in a Kubernetes cluster. It's used to isolate Jenkins resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl create -f jenkins-namespace.yml\n```\n\n----------------------------------------\n\nTITLE: Ansible Playbook with Multiple Role Assignments\nDESCRIPTION: Playbook configuration showing role assignment for both webservers and proxy, including common and specific roles for each host group.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day67.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n```\n\n----------------------------------------\n\nTITLE: Applying Jenkins Service Account Configuration\nDESCRIPTION: This command applies a YAML file that sets up the necessary service account for Jenkins in Kubernetes. It defines the permissions for Jenkins within the cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-sa.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Machine with Azure CLI\nDESCRIPTION: This snippet demonstrates the Azure CLI command for creating a new Azure virtual machine.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day33.md#2025-04-17_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\naz VM create\n```\n\n----------------------------------------\n\nTITLE: Defining EC2 Instance Resource in Terraform\nDESCRIPTION: This snippet shows how to define an AWS EC2 instance resource in Terraform, including instance type, AMI, and user data for initial setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day58.md#2025-04-17_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami               = data.aws_ami.instance_id.id\n  instance_type     = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n  security_groups   = [aws_security_group.allow_web.name]\n  user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"\n<h1>Deployed via Terraform</h1>\n\n\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditionals in Bash Scripts\nDESCRIPTION: Demonstrates the use of if-else conditionals in a bash script to check the number of completed days in a challenge.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day19.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n#  ___   ___  ____                   ___   __ ____              ___\n# / _ \\ / _ \\|  _ \\  __ _ _   _ ___ / _ \\ / _|  _ \\  _____   __/ _ \\ _ __  ___\n#| (_) | | | | | | |/ _` | | | / __| | | | |_| | | |/ _ \\ \\ / / | | | '_ \\/ __|\n# \\__, | |_| | |_| | (_| | |_| \\__ \\ |_| |  _| |_| |  __/\\ V /| |_| | |_) \\__ \\\n#   /_/ \\___/|____/ \\__,_|\\__, |___/\\___/|_| |____/ \\___| \\_/  \\___/| .__/|___/\n#                         |___/                                     |_|\n#\n# This script is to demonstrate bash scripting!\n\n# Variables to be defined\n\nChallengeName=#90DaysOfDevOps\nTotalDays=90\n\n# User Input\n\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to $ChallengeName\"\necho \"How Many Days of the $ChallengeName challenge have you completed?\"\nread DaysCompleted\n\nif [ $DaysCompleted -eq 90 ]\nthen\n  echo \"You have finished, well done\"\nelif [ $DaysCompleted -lt 90 ]\nthen\n  echo \"Keep going you are doing great\"\nelse\n  echo \"You have entered the wrong amount of days\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Kibana Access\nDESCRIPTION: This command sets up port forwarding to access the Kibana dashboard from localhost. Replace the pod name with your actual Kibana pod name.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day82.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward kibana-84cf7f59c-v2l8v 5601:5601 -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditionals in Bash Scripts\nDESCRIPTION: Demonstrates the use of if-else conditionals in a bash script to check the progress of a challenge.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n#  ___   ___  ____                   ___   __ ____              ___\n# / _ \\ / _ \\|  _ \\  __ _ _   _ ___ / _ \\ / _|  _ \\  _____   __/ _ \\ _ __  ___\n#| (_) | | | | | | |/ _` | | | / __| | | | |_| | | |/ _ \\ \\ / / | | | '_ \\/ __|\n# \\__, | |_| | |_| | (_| | |_| \\__ \\ |_| |  _| |_| |  __/\\ V /| |_| | |_) \\__ \\\n#   /_/ \\___/|____/ \\__,_|\\__, |___/\\___/|_| |____/ \\___| \\_/  \\___/| .__/|___/\n#                         |___/                                     |_|\n#\n# This script is to demonstrate bash scripting!\n\n# Variables to be defined\n\nChallengeName=#90DaysOfDevOps\nTotalDays=90\n\n# User Input\n\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to $ChallengeName\"\necho \"How Many Days of the $ChallengeName challenge have you completed?\"\nread DaysCompleted\n\nif [ $DaysCompleted -eq 90 ]\nthen\n  echo \"You have finished, well done\"\nelif [ $DaysCompleted -lt 90 ]\nthen\n  echo \"Keep going you are doing great\"\nelse\n  echo \"You have entered the wrong amount of days\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Cluster Information Commands\nDESCRIPTION: Basic kubectl commands to verify cluster connectivity and view node information from a local workstation after configuring kubeconfig.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day52.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Audit Logs in Minikube\nDESCRIPTION: Sets up a basic audit policy in Minikube to log all API requests at the Metadata level. The configuration creates an audit policy file and starts Minikube with the appropriate flags to enable audit logging to stdout.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day28.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.minikube/files/etc/ssl/certs\ncat <<EOF > ~/.minikube/files/etc/ssl/certs/audit-policy.yaml\n# Log all requests at the Metadata level.\napiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- level: RequestResponse\nEOF\nminikube start --extra-config=apiserver.audit-policy-file=/etc/ssl/certs/audit-policy.yaml --extra-config=apiserver.audit-log-path=-\n```\n\n----------------------------------------\n\nTITLE: Create Kanister Backup ActionSet\nDESCRIPTION: Command to create an ActionSet for backing up MySQL data using Kanister, specifying the blueprint, statefulset, and necessary credentials\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset --action backup --namespace kanister --blueprint mysql-blueprint --statefulset my-production-app/mysql-store --profile my-production-app/s3-profile-dc5zm --secrets mysql=my-production-app/mysql-store\n```\n\n----------------------------------------\n\nTITLE: Reading Data from a File in Python\nDESCRIPTION: This snippet shows how to open a file in read mode, read its entire contents, and then close the file. File handling is an essential operation for many DevOps tasks involving configuration and log files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day43.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nf = open(\"90DaysOfDevOps.txt\", \"r\")\nprint(f.read())\nf.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive User Input for Account Creation\nDESCRIPTION: This snippet modifies the script to use interactive user input for username and password, improving security and user experience.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\necho \"What is your intended username?\"\nread  username\necho \"What is your password\"\nread  password\n\n#A user can be passed in as a command line argument\necho \"$username user account being created.\"\n\n#A user is created with the name of command line argument\nsudo useradd -m $username\n\n#A password can be parsed in as a command line argument.\nsudo chpasswd <<< $username:$password\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible on Ubuntu\nDESCRIPTION: Commands to install Ansible on an Ubuntu system, including updating packages and adding the Ansible repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day64.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository --yes --update ppa:ansible/ansible\nsudo apt install ansible\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible Hosts Inventory Groups\nDESCRIPTION: Example of how to organize hosts into logical groups in the Ansible hosts file. This configuration defines control, proxy, webservers, and database groups for targeted playbook execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day65.md#2025-04-17_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[control]\nansible-control\n\n[proxy] \nloadbalancer\n\n[webservers] \nweb01\nweb02\n\n[database] \ndb01\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container\nDESCRIPTION: Command to run a Docker container from the 'my-python-app' image, publishing port 5000 to the host.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day38.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 5000:5000 my-python-app\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token\nDESCRIPTION: Commands to extract the authentication token from Kubernetes secrets for logging into the Kasten K10 dashboard.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day87.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Creating a Developer Role for AWS in Vault\nDESCRIPTION: Command to create a role for developers that grants read-only access to EC2 in AWS. This role defines what permissions the dynamic credentials will have when generated.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day38.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvault write aws/roles/developer \\\n    policy_arns=arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess \\\n   credential_type=iam_user\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 on Kubernetes with Helm\nDESCRIPTION: Helm command to install Kasten K10 with token authentication and Kanister sidecar injection enabled. This configuration allows for application-consistent backups and disaster recovery capabilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day89.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Creating Resources with kubectl in Kubernetes\nDESCRIPTION: Commands for creating resources in a Kubernetes cluster, including creating namespaces and resources from YAML or JSON files. These commands are essential for setting up and configuring Kubernetes environments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace name\nkubectl create -f [filename]\n```\n\n----------------------------------------\n\nTITLE: Terraform Installation Commands Example\nDESCRIPTION: Example showing how to install Terraform using the arkade package manager on Linux\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day57.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get terraform\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository using HTTPS in Bash\nDESCRIPTION: This snippet demonstrates how to clone a GitHub repository to your local machine using the git clone command with an HTTPS URL. This allows you to download a copy of the repository to work on locally.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day40.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Refactored Ansible Playbook Using Roles\nDESCRIPTION: YAML configuration for an Ansible playbook that uses the newly created Apache2 role.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day66.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: Running Docker Getting Started Container\nDESCRIPTION: This command runs the Docker getting started container in detached mode, mapping port 80 of the container to port 80 on the host.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day44.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 docker/getting-started\n```\n\n----------------------------------------\n\nTITLE: Viewing Differences Between Commits\nDESCRIPTION: The git diff command with two commit hashes shows the differences between those commits. It displays what files have been added, modified, or deleted, helping to understand what changes were made.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit diff b8f8 709a\n```\n\n----------------------------------------\n\nTITLE: Running Ad-hoc Ansible Command to Install Webservers\nDESCRIPTION: Using the Ansible command-line tool to install webservers on target hosts based on the webserver variable defined in the inventory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nansible \\\n   webservers  \\\n  -m package   \\\n  -a 'name=\"{{ webserver }}\"' \\\n  --one-line\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace Environment Variable for AWX Operator\nDESCRIPTION: Command to export the NAMESPACE environment variable for AWX deployment, followed by making the deployment using the operator's Makefile.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day69.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=awx\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository Command\nDESCRIPTION: Command used to clone a forked repository to the local machine using the repository URL\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day41.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources by Label\nDESCRIPTION: Command to list all Kubernetes resources that match a specific label selector, showing pods with the label 'app=nginx'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -l app=nginx\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: Command to view currently running Docker containers, useful for verifying that containers from a docker-compose deployment are running properly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day46.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister Backup ActionSet\nDESCRIPTION: Command to create a backup ActionSet using kanctl, specifying the blueprint, statefulset, profile and secrets\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkanctl create actionset --action backup --namespace kanister --blueprint mysql-blueprint --statefulset my-production-app/mysql-store --profile my-production-app/s3-profile-dc5zm --secrets mysql=my-production-app/mysql-store\n```\n\n----------------------------------------\n\nTITLE: Running Primary PostgreSQL Container\nDESCRIPTION: Launches the primary PostgreSQL container with network configuration and volume mounting for base backup storage.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day66.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \n--publish 5432:5432 \n--network=postgres \n--volume C:\\temp\\base:/postgres/archive/base \n--env POSTGRES_PASSWORD=Testing1122 \n--name demo-container \nghcr.io/dbafromthecold/demo-postgres\n```\n\n----------------------------------------\n\nTITLE: Basic Ubuntu Nginx Dockerfile\nDESCRIPTION: A Dockerfile that creates an image based on Ubuntu 18.04, installing nginx and curl. It demonstrates basic Dockerfile commands including FROM, RUN, and cleanup practices.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day45.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\n# Install nginx and curl\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y nginx curl\nRUN rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Reading Secrets from KV Engine in HashiCorp Vault\nDESCRIPTION: These commands show different ways to read secrets from the KV secrets engine, including retrieving specific fields and formatting output as JSON.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day37.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvault kv get 90daysofdevops/cloud/aws\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault kv get -field=secret_key 90daysofdevops/cloud/aws\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault kv get -format=json 90daysofdevops/cloud/aws | jq -r '.data.data.secret_key'\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: Creates a new commit with a message describing the changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day38.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"<Mensaje significativo>\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Git Push Operations\nDESCRIPTION: Commands for pushing changes to remote repositories with special options, including force pushing, pushing all branches, and pushing tags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                   |           Example           |           Description                                                                                                                           | \n| ------------------------- |   --------------------------|   --------------------------------------------------------------------------------------------------------------------------------------------- |\n| git push <remote> --force                 | `git push <remote> --force`                | Forces the git push even if it results in a non-fast-forward merge. Do not use the --force flag unless you're sure you know what you're doing. |\n| git push <remote> --all          | `git push <remote> --all`          | Push all of your local branches to the specified remote.                        |\n| git push <remote> --tags        | `git push <remote> --tags`        | Tags aren't automatically pushed when you push a branch or use the --all flag. The --tags flag sends all of your local tags to the remote repo. |\n```\n\n----------------------------------------\n\nTITLE: Describing Kubernetes Pod in Detail\nDESCRIPTION: Command to get detailed information about a specific pod in Kubernetes, showing configuration, status, events, and other metadata.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod nginx\n```\n\n----------------------------------------\n\nTITLE: Creating Structs for API Data Model in Go\nDESCRIPTION: Defines structs for the Item data model including ID, Name, Completed status and creation date, plus a struct for the Items slice to store multiple items.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day53.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype Item struct {\n\tID        string    `json:\"id\"`\n\tName      string    `json:\"name\"`\n\tCompleted bool      `json:\"completed\"`\n\tCreatedAt time.Time `json:\"createdAt\"`\n}\n\ntype Items []Item\n```\n\n----------------------------------------\n\nTITLE: MySQL Setup and Database Configuration\nDESCRIPTION: Tasks for creating MySQL configuration, database user with privileges, and a new database using variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create my.cnf configuration file\n  template: src=templates/my.cnf.j2 dest=/etc/mysql/conf.d/mysql.cnf\n  notify: restart mysql\n\n- name: Create database user with name 'devops' and password 'DevOps90' with all database privileges\n  community.mysql.mysql_user:\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n    login_user: \"{{ mysql_user_name }}\" \n    login_password: \"{{ mysql_user_password }}\" \n    name: \"{{db_user}}\"\n    password: \"{{db_pass}}\"\n    priv: '*.*:ALL'\n    host: '%'\n    state: present\n\n- name: Create a new database with name '90daysofdevops'\n  mysql_db:\n    login_user: \"{{ mysql_user_name }}\" \n    login_password: \"{{ mysql_user_password }}\"    \n    name: \"{{ db_name }}\"\n    state: present\n```\n\n----------------------------------------\n\nTITLE: Deploying Bookinfo Application\nDESCRIPTION: Commands to deploy the Bookinfo sample application and verify its deployment status.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml\nkubectl get all\n```\n\n----------------------------------------\n\nTITLE: Registering a Kubernetes Worker Node with Rancher Agent\nDESCRIPTION: Docker command to register a node as a worker component in a Rancher-managed Kubernetes cluster. This configures the node to serve as a worker in the cluster with the same token and CA checksum as the master node.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day53.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --worker\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment YAML Configuration\nDESCRIPTION: A Kubernetes deployment manifest that defines an application deployment. It specifies replicas, selector, container details including image, ports, and resource requirements for running in a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day25.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion : apps/v1\nkind: Deployment\nmetadata:\n  name: api-name # this will be the name of the deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: api-name\n  template:\n    metadata:\n      labels:\n        app: api-name # this label is matched by the selector above \n    spec:\n      containers:\n        - name: api-name \n          image: aksacrname.azurecr.io/api-name \n          ports:\n          - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: MySQL Setup Configuration (YAML)\nDESCRIPTION: Tasks for configuring MySQL including creating database, user and setting up configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create my.cnf configuration file\n  template: src=templates/my.cnf.j2 dest=/etc/mysql/conf.d/mysql.cnf\n  notify: restart mysql\n\n- name: Create database user with name 'devops' and password 'DevOps90' with all database privileges\n  community.mysql.mysql_user:\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n    login_user: \"{{ mysql_user_name }}\"\n    login_password: \"{{ mysql_user_password }}\"\n    name: \"{{db_user}}\"\n    password: \"{{db_pass}}\"\n    priv: '*.*:ALL'\n    host: '%'\n    state: present\n\n- name: Create a new database with name '90daysofdevops'\n  mysql_db:\n    login_user: \"{{ mysql_user_name }}\"\n    login_password: \"{{ mysql_user_password }}\"\n    name: \"{{ db_name }}\"\n    state: present\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Diff Commands\nDESCRIPTION: Basic Git commands for viewing differences between staged, unstaged, and committed files\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day39.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit diff --staged\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Updated Ansible Playbook Without Variables (YAML)\nDESCRIPTION: This updated playbook shows a cleaner structure after moving variables to a separate file. It demonstrates the use of roles and tags for organizing tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Provider in Terraform\nDESCRIPTION: This snippet shows how to define the AWS provider in a Terraform configuration file. It specifies the required provider source and version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day58.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricted SCC Configuration in OpenShift\nDESCRIPTION: YAML configuration for the restricted-v2 SCC in OpenShift that denies access to host features and requires pods to run with specific security constraints. This configuration requires pods to run with allocated UIDs and SELinux contexts, preventing privileged execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallowHostDirVolumePlugin: false\nallowHostIPC: false\nallowHostNetwork: false\nallowHostPID: false\nallowHostPorts: false\nallowPrivilegeEscalation: true\nallowPrivilegedContainer: false\nallowedCapabilities: null\napiVersion: security.openshift.io/v1\ndefaultAddCapabilities: null\nfsGroup:\n  type: MustRunAs\ngroups: []\nkind: SecurityContextConstraints\nmetadata:\n  annotations:\n    include.release.openshift.io/ibm-cloud-managed: \"true\"\n    include.release.openshift.io/self-managed-high-availability: \"true\"\n    include.release.openshift.io/single-node-developer: \"true\"\n    kubernetes.io/description: restricted denies access to all host features and requires\n      pods to be run with a UID, and SELinux context that are allocated to the namespace.\n    release.openshift.io/create-only: \"true\"\n  creationTimestamp: \"2023-03-16T09:34:36Z\"\n  generation: 1\n  name: restricted\n  resourceVersion: \"401\"\n  uid: 8ced4b4e-7fed-4369-a0b8-da40880f4a3d\npriority: null\nreadOnlyRootFilesystem: false\nrequiredDropCapabilities:\n- KILL\n- MKNOD\n- SETUID\n- SETGID\nrunAsUser:\n  type: MustRunAsRange\nseLinuxContext:\n  type: MustRunAs\nsupplementalGroups:\n  type: RunAsAny\nusers: []\nvolumes:\n- configMap\n- downwardAPI\n- emptyDir\n- ephemeral\n- persistentVolumeClaim\n- projected\n- secret\n```\n\n----------------------------------------\n\nTITLE: Deploying MySQL Database in Kubernetes\nDESCRIPTION: Command to deploy a MySQL database using a predefined Kubernetes manifest file. This sets up the database component required for the applications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day2-ops-code/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f database/mysql.yaml\n```\n\n----------------------------------------\n\nTITLE: Git Diff Commands for File Comparison\nDESCRIPTION: Commands for comparing different states of files in Git, including workspace vs. HEAD and staged vs. committed changes. These are crucial for reviewing modifications before committing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Command           | Example             | Description                                                            |\n| ----------------- | ------------------- | ---------------------------------------------------------------------- |\n| git diff HEAD     | `git diff HEAD`     | Show the difference between the working directory and the last commit. |\n| git diff --cached | `git diff --cached` | Show difference between staged changes and last commit                 |\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl via Arkade\nDESCRIPTION: Command to install kubectl CLI tool using Arkade package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narkade get kubectl\n```\n\n----------------------------------------\n\nTITLE: Defining User Variables in YAML File for Ansible\nDESCRIPTION: This YAML snippet shows how to define common variables in a separate file that can be used across multiple plays in Ansible, improving playbook organization and maintainability.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Configuration Management Tools\nDESCRIPTION: A table comparing Ansible and Terraform in terms of type, infrastructure support, language, provisioning capabilities, packaging, and lifecycle management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day63.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                | Ansible                                                      | Terraform                                                        |\n| -------------- | ------------------------------------------------------------ | ---------------------------------------------------------------- |\n| Type           | Ansible is a configuration management tool                   | Terraform is an orchestration tool                             |\n| Infrastructure | Ansible provides support for mutable infrastructure          | Terraform provides support for immutable infrastructure          |\n| Language       | Ansible follows procedural language                          | Terraform follows a declarative language                          |\n| Provisioning   | Ansible provides partial provisioning (VM, Network, Storage) | Terraform provides extensive provisioning (VM, Network, Storage) |\n| Packaging      | Ansible provides complete support for packaging & templating | Terraform provides partial support for packaging & templating    |\n| Lifecycle Mgmt | Ansible does not have lifecycle management                   | Terraform is heavily dependent on lifecycle and state management  |\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Detached Mode\nDESCRIPTION: This command starts the Docker Compose services defined in the YAML file in detached mode, running the containers in the background.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day46.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Joining and Unsealing Additional Vault Pods\nDESCRIPTION: Commands to join the other Vault pods (vault-1 and vault-2) to the Raft cluster and unseal them using the same unseal key. This completes the Vault cluster setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -ti vault-1 -n vault -- vault operator raft join http://vault-0.vault-internal:8200\n\nkubectl exec -ti vault-2 -n vault -- vault operator raft join http://vault-0.vault-internal:8200\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec vault-1 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY\n\nkubectl exec vault-2 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command with Username\nDESCRIPTION: Command structure for building a Docker image that can be pushed to DockerHub, including username in the image name.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day45.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t {{username}}/{{imagename}}:{{version}}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Table in PostgreSQL\nDESCRIPTION: Complete SQL statement for creating a new table with various column types and a primary key constraint. The table includes columns for ID, names, date of birth, and email.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_table (\n  id smallint,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  dob DATE,\n  email VARCHAR(255),\n  CONSTRAINT test_table_pkey PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic in Bash with Challenge Progress Check\nDESCRIPTION: A complete bash script that welcomes users to the 90DaysOfDevOps challenge, collects information about their progress, and provides feedback based on conditional logic.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day19.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n#  ___   ___  ____                   ___   __ ____              ___\n# / _ \\ / _ \\|  _ \\  __ _ _   _ ___ / _ \\ / _|  _ \\  _____   __/ _ \\ _ __  ___\n#| (_) | | | | | | |/ _` | | | / __| | | | |_| | | |/ _ \\ \\ / / | | | '_ \\/ __|\n# \\__, | |_| | |_| | (_| | |_| \\__ \\ |_| |  _| |_| |  __/\\ V /| |_| | |_) \\__ \\\n#   /_/ \\___/|____/ \\__,_|\\__, |___/\\___/|_| |____/ \\___| \\_/  \\___/| .__/|___/\n#                         |___/                                     |_|\n#\n# 이 스크립트는 bash 스크립팅을 시연하기 위한 것입니다!\n\n# 정의할 변수\n\nChallengeName=#90DaysOfDevOps\nTotalDays=90\n\n# 사용자 입력\n\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to $ChallengeName\"\necho \"How Many Days of the $ChallengeName challenge have you completed?\"\nread DaysCompleted\n\nif [ $DaysCompleted -eq 90 ]\nthen\n  echo \"You have finished, well done\"\nelif [ $DaysCompleted -lt 90 ]\nthen\n  echo \"Keep going you are doing great\"\nelse\n  echo \"You have entered the wrong amount of days\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Ansible Playbook for Selective Execution\nDESCRIPTION: This YAML snippet shows how to define tags for different plays in an Ansible playbook, allowing selective execution of webservers or proxy configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Cluster Access Commands\nDESCRIPTION: Basic kubectl commands to verify cluster connectivity and get node information from a local workstation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day52.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hadolint GitHub Action for Dockerfile Linting\nDESCRIPTION: This GitHub Actions workflow implements Hadolint for linting Dockerfiles to check for common mistakes and provide improvement suggestions. It runs on pushes to the main branch and analyzes the Dockerfile for best practices compliance.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day13.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Lint Dockerfile\non:\n  push:\n    branches:\n      - main\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2 \n      - uses: hadolint/hadolint-action@v2.1.0\n        with:\n          dockerfile: Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Refactored Playbook Using Roles for Apache Web Servers\nDESCRIPTION: An updated playbook that uses the Apache role instead of inline tasks and handlers. It defines variables for HTTP and HTTPS ports and a welcome message to be used in templates.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day66.md#2025-04-17_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: Basic OpenShift Install Config YAML\nDESCRIPTION: A sample install-config.yaml file showing network configuration for OpenShift on vSphere, including the required API and Ingress VIP addresses that need to be modified to match your network environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day58.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  machineNetwork:\n  - cidr: 10.0.0.0/16\n\nplatform:\n  vsphere:\n    apiVIP: 192.168.200.192 <<<<<<< This is your api.{cluster_name}.{base_domain} DNS record\n    cluster: Cluster-1\n    folder: /vEducate-DC/vm/OpenShift/\n    datacenter: vEducate-DC\n    defaultDatastore: Datastore01\n    ingressVIP: 192.168.200.193 <<<<<<< This is your *.apps.{cluster_name}.{base_domain} DNS record\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing a Basic Bash Script\nDESCRIPTION: Demonstrates how to create a simple bash script that creates a directory, changes into it, creates a file, and lists the contents.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day19.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/bash\n\nmkdir 90DaysOfDevOps\ncd 90DaysOfDevOps\ntouch Day19\nls\n```\n\n----------------------------------------\n\nTITLE: Deploying Rancher Using Docker\nDESCRIPTION: Command to deploy Rancher as a Docker container on a local workstation. This creates a container that exposes ports 80 and 443 for accessing the Rancher UI.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day53.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher\n```\n\n----------------------------------------\n\nTITLE: Verifying Istio System Pods\nDESCRIPTION: Command to check that all Istio components are running correctly in the istio-system namespace, including ztunnel pods which are essential for Ambient Mesh.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Undoing Changes\nDESCRIPTION: Commands that allow reverting, resetting, and cleaning changes in Git. These are essential for correcting mistakes or unwanted modifications in your repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Command    | Example               | Description                                                                                                                           |\n| ---------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| git revert | `git revert <commit>` | Create a new commit that undoes all of the changes made in \\<commit> then apply it to the current branch.                              |\n| git reset  | `git reset <file>`    | Remove \\<file> from the staging area, but leave the working directory unchanged. This unstaged a file without overwriting any changes. |\n| git clean  | `git clean -n`        | Shows which files would be removed from the working directory. Use `-f` in place of `-n` to execute the clean.                        |\n```\n\n----------------------------------------\n\nTITLE: Setting Container User in Docker Compose\nDESCRIPTION: Shows how to specify a non-root user for a container in a Docker Compose file. This implements security best practices when using Docker Compose for orchestration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  nginx:\n    image: nginx:latest\n    user: \"1000\"\n```\n\n----------------------------------------\n\nTITLE: Role-Based Playbook Configuration\nDESCRIPTION: Updated playbook configuration using roles for Apache web server deployment with custom variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day66.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: AWX Demo Configuration for Kubernetes\nDESCRIPTION: YAML configuration for deploying AWX demo instance with ClusterIP service type in Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx-demo\nspec:\n  service_type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Backup Blueprint in Kanister\nDESCRIPTION: This YAML file defines a Kanister Blueprint that specifies how to backup, restore, and delete MySQL database backups, including the commands for mysqldump and restore operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cr.kanister.io/v1alpha1\nkind: Blueprint\nmetadata:\n  name: mysql-blueprint\nactions:\n  backup:\n    outputArtifacts:\n      mysqlCloudDump:\n        keyValue:\n          s3path: \"{{ .Phases.dumpToObjectStore.Output.s3path }}\"\n    phases:\n    - func: KubeTask\n      name: dumpToObjectStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"/mysql-backups/{{ .StatefulSet.Namespace }}/{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}/{{ toDate \"2006-01-02T15:04:05.999999999Z07:00\" .Time  | date \"2006-01-02T15-04-05\" }}/dump.sql.gz\"\n          root_password=\"{{ index .Phases.dumpToObjectStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          mysqldump --column-statistics=0 -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }} --single-transaction --all-databases | gzip - | kando location push --profile '{{ toJson .Profile }}' --path ${s3_path} -\n          kando output s3path ${s3_path}\n  restore:\n    inputArtifactNames:\n    - mysqlCloudDump\n    phases:\n    - func: KubeTask\n      name: restoreFromBlobStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"{{ .ArtifactsIn.mysqlCloudDump.KeyValue.s3path }}\"\n          root_password=\"{{ index .Phases.restoreFromBlobStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          kando location pull --profile '{{ toJson .Profile }}' --path ${s3_path} - | gunzip | mysql -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}\n  delete:\n    inputArtifactNames:\n    - mysqlCloudDump\n    phases:\n    - func: KubeTask\n      name: deleteFromBlobStore\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .Namespace.Name }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"{{ .ArtifactsIn.mysqlCloudDump.KeyValue.s3path }}\"\n          kando location delete --profile '{{ toJson .Profile }}' --path ${s3_path}\n```\n\n----------------------------------------\n\nTITLE: User Input Collection in Bash Scripts\nDESCRIPTION: Code snippet showing how to prompt for and collect user input to use as variables in a bash script.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day19.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"Enter your name\"\nread name\n```\n\n----------------------------------------\n\nTITLE: Describing Kubernetes Resources\nDESCRIPTION: Commands for getting detailed information about Kubernetes resources, particularly useful for debugging and monitoring.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe nodes\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret in Kubernetes\nDESCRIPTION: Kubernetes command to create a docker-registry secret for storing DockerHub credentials, used for authentication when pushing images.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day73.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry dockercred \\\n    --docker-server=https://index.docker.io/v1/ \\\n    --docker-username=<dockerhub-username> \\\n    --docker-password=<dockerhub-password>\\\n    --docker-email=<dockerhub-email>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token\nDESCRIPTION: Commands to get the authentication token required to log into the Kasten K10 dashboard by retrieving and decoding the secret from Kubernetes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day89.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory File for Ansible Lab\nDESCRIPTION: YAML configuration for defining webservers and EDA controller hosts in the inventory file. Includes host variables for specifying the webserver type for each host.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# hosts.yml\nwebservers:\n  hosts:\n    webshop.example.com:\n      ansible_host: <ip-address>\n      webserver: apache2\n    company.example.com:\n      ansible_host: <ip-address>\n      webserver: httpd\neda_controller:\n  hosts:\n    eda-controller.example.com:\n      ansible_host: <ip-address>\n```\n\n----------------------------------------\n\nTITLE: Basic nano usage for creating and editing text files in Linux\nDESCRIPTION: Shows how to create and edit a file using the nano text editor. The commands demonstrate creating a new file, adding text, saving changes, and viewing the file contents using cat.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day17.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnano 90DaysOfDevOps.txt\n```\n\n----------------------------------------\n\nTITLE: Defining a NodePort Service in YAML\nDESCRIPTION: YAML definition for a NodePort service targeting nginx pods on port 80, exposed on a specific NodePort (31000), allowing external access to the service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 80\n    nodePort: 31000\n  selector:\n    app: nginx\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Terraform Configuration with AWS Provider\nDESCRIPTION: A simple Terraform configuration file that initializes the AWS provider for the eu-west-1 region. This snippet demonstrates the basic structure of a Terraform file that would be used to manage AWS resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day64.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"eu-west-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Default StorageClass in Kubernetes\nDESCRIPTION: Commands to change the default storageclass from the standard class to the csi-hostpath-sc storageclass, which is required for the backup demonstration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Mounting a Volume for Live Code Editing\nDESCRIPTION: Command to run a Docker container with a volume mount that links the local directory to the container's /app directory, enabling live code editing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day38.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 5000:5000 -v $(pwd):/app my-python-app\n```\n\n----------------------------------------\n\nTITLE: Testing Unauthorized Access with Stolen Credentials\nDESCRIPTION: Command to test if the stolen kube-proxy service account token works by attempting to list nodes in the cluster, demonstrating successful credential abuse.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Status and Adding New Files\nDESCRIPTION: Shows how to check the status of a Git repository, add new files, and make additional commits.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day35.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit status\ngit add samplecode.ps1\ngit commit -m \"My Second Commit\"\ngit status\ngit log\n```\n\n----------------------------------------\n\nTITLE: Generated Test Template in Python using Hedra\nDESCRIPTION: This Python code is an example of a generated test template by Hedra. It includes a workflow class with placeholder methods for HTTP, HTTP2, and Playwright interactions, demonstrating the structure and tagging capabilities of Hedra tests.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Generated by Hedra - my_test.py\nimport os\nfrom hedra import (\n    Workflow, \n    step,\n)\nfrom hedra.core.engines import (\n    HTTPResult,\n    HTTP2Result,\n    PlaywrightResult\n)\n\n\nclass MyTest(Workflow):\n    vus=1000\n    duration='1m'\n    tags={\n        'service': 'myapi.com',\n        'environment': 'staging'\n    }\n    \n    @step()\n    async def get_http(self) -> HTTPResult:\n        return await self.client.http.get('<ADD_URL_HERE>')\n\n    @step()\n    async def get_http2(self) -> HTTP2Result:\n        return await self.client.http2.get('<ADD_URL_HERE>')\n\n    @step()\n    async def goto_url(self) -> PlaywrightResult:\n        return await self.client.playwright.goto('<ADD_URL_HERE>')\n```\n\n----------------------------------------\n\nTITLE: Querying Encrypted Data\nDESCRIPTION: SQL queries showing how to select encrypted data and decrypt it using pgp_sym_decrypt function.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT first_name, last_name, passwd FROM test_table\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT first_name, last_name, pgp_sym_decrypt(passwd::bytea, 'ENCRYPTIONPWD') FROM test_table\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Secrets Engine in Vault\nDESCRIPTION: Command executed inside the Vault pod to enable the Key-Value version 2 secrets engine at the path '/secret'. This allows storing and retrieving secrets.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nvault secrets enable -path=secret kv-v2\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch in Git\nDESCRIPTION: Command to create a new branch in Git for your feature or bug fix. This allows you to work independently from the main branch.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day29.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b {new-branch-name}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ingress Information in Kubernetes\nDESCRIPTION: Command to get information about the created Ingress resource in the Pacman namespace. This displays details such as the assigned IP address and hostname.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get ingress -n pacman\n```\n\n----------------------------------------\n\nTITLE: Creating a Standby Minikube Cluster for Disaster Recovery\nDESCRIPTION: This command creates a standby Minikube cluster with volume snapshots and CSI hostpath driver addons enabled for disaster recovery purposes. It specifies a custom API server port and Kubernetes version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day89.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p standby --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Pod with Seccomp Profile\nDESCRIPTION: Shows how to create an Nginx pod with a default seccomp profile (RuntimeDefault) to restrict system calls, enhancing security.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - << EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-seccomp-confined\nspec:\n  securityContext:\n    seccompProfile:\n        type: RuntimeDefault\n  containers:\n  - name: nginx\n    image: nginxinc/nginx-unprivileged\n    securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n        allowPrivilegeEscalation: false\n\nEOF\n```\n\n----------------------------------------\n\nTITLE: Viewing commit history in a condensed format\nDESCRIPTION: Shows a simplified view of the commit history with only the abbreviated hash and commit message for each commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline\n```\n\n----------------------------------------\n\nTITLE: Creating VirtualBox VMs with Terraform Configuration\nDESCRIPTION: Terraform configuration to create multiple Ubuntu VMs in VirtualBox with network configuration and output definitions. Uses the terra-farm/virtualbox provider to provision VMs with specified CPU, memory, and networking settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day59.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    virtualbox = {\n      source = \"terra-farm/virtualbox\"\n      version = \"0.2.2-alpha.1\"\n    }\n  }\n}\n\n# There are currently no configuration options for the provider itself.\n\nresource \"virtualbox_vm\" \"node\" {\n  count     = 2\n  name      = format(\"node-%02d\", count.index + 1)\n  image     = \"https://app.vagrantup.com/ubuntu/boxes/bionic64/versions/20180903.0.0/providers/virtualbox.box\"\n  cpus      = 2\n  memory    = \"512 mib\"\n\n  network_adapter {\n    type           = \"hostonly\"\n    host_interface = \"vboxnet1\"\n  }\n}\n\noutput \"IPAddr\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 1)\n}\n\noutput \"IPAddr_2\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 2)\n}\n```\n\n----------------------------------------\n\nTITLE: Database Types Overview - Markdown Documentation\nDESCRIPTION: A markdown document explaining different database types, their characteristics, and use cases. Includes descriptions of Redis, Cassandra, MongoDB, MySQL, Neo4j, Elasticsearch, and Fauna.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day85.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '#90DaysOfDevOps - Data Services - Day 85'\npublished: false\ndescription: 90DaysOfDevOps - Data Services\ntags: 'devops, 90daysofdevops, learning'\ncover_image: null\ncanonical_url: null\nid: 1048781\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Cluster Access\nDESCRIPTION: Commands to verify successful connection to a Kubernetes cluster from a local workstation. These commands show cluster information and list available nodes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day52.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info\\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination Rules for Reviews Service in Istio\nDESCRIPTION: This YAML snippet defines a Destination Rule for the Reviews service in Istio. It specifies three subsets (v1, v2, v3) corresponding to different versions of the service, using labels to distinguish between them.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: reviews\nspec:\n  host: reviews\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n  - name: v3\n    labels:\n      version: v3\n```\n\n----------------------------------------\n\nTITLE: Deploying MySQL Database via Helm in Kubernetes\nDESCRIPTION: This script creates a namespace for a production application and deploys MySQL using the Bitnami Helm chart with specified persistence size and volume permissions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl create ns ${APP_NAME}\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mysql-store bitnami/mysql --set primary.persistence.size=1Gi,volumePermissions.enabled=true --namespace=${APP_NAME}\nkubectl get pods -n ${APP_NAME} -w\n```\n\n----------------------------------------\n\nTITLE: Managing Processes with ps, kill, and top Commands in Linux\nDESCRIPTION: Shows commands for process management: ps displays running processes, kill terminates processes by PID, and top provides an interactive view of system resource usage and processes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nps aux\nkill PID\ntop\n```\n\n----------------------------------------\n\nTITLE: Deploying Rancher as a Docker Container\nDESCRIPTION: This command pulls the Rancher image and runs it as a Docker container, exposing it on ports 80 and 443. It enables access to the Rancher UI for cluster management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day53.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher\n```\n\n----------------------------------------\n\nTITLE: Creating a Commit with Descriptive Message\nDESCRIPTION: The git commit command creates a new commit with staged changes and includes a descriptive message. The -m flag allows adding a commit message directly in the command line, helping document the purpose of the changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"My First Commit\"\n```\n\n----------------------------------------\n\nTITLE: Complete Playbook with Load Balancer - YAML\nDESCRIPTION: Complete Ansible playbook configuration including both web servers and proxy (load balancer) configurations with their respective roles.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day67.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Infrastructure Deployment\nDESCRIPTION: This command analyzes the Terraform configuration and shows what changes would be made to the infrastructure without actually applying them.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day55.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Root User in Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates how to create a non-root user for running containers securely. It creates a user group and a user, then sets the user as the default for running commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day47.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\nRUN apt-get update && apt-get upgrade -y\nRUN groupadd -g 1000 basicuser && useradd -r -u 1000 -g basicuser basicuser\nUSER basicuser\n```\n\n----------------------------------------\n\nTITLE: Using LEFT OUTER JOIN in SQL\nDESCRIPTION: SQL query demonstrating a LEFT OUTER JOIN which retrieves all rows from the staff table even if there is no matching row in the address table.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM staff s\nLEFT OUTER JOIN address a ON s.address_id = a.address_id\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualBox VMs with Terraform\nDESCRIPTION: This Terraform configuration creates two Ubuntu VMs in VirtualBox with specified CPU, memory, and network settings. It also defines outputs for the IP addresses of the created VMs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day59.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    virtualbox = {\n      source = \"terra-farm/virtualbox\"\n      version = \"0.2.2-alpha.1\"\n    }\n  }\n}\n\n# There are currently no configuration options for the provider itself.\n\nresource \"virtualbox_vm\" \"node\" {\n  count     = 2\n  name      = format(\"node-%02d\", count.index + 1)\n  image     = \"https://app.vagrantup.com/ubuntu/boxes/bionic64/versions/20180903.0.0/providers/virtualbox.box\"\n  cpus      = 2\n  memory    = \"512 mib\"\n\n  network_adapter {\n    type           = \"hostonly\"\n    host_interface = \"vboxnet1\"\n  }\n}\n\noutput \"IPAddr\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 1)\n}\n\noutput \"IPAddr_2\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 2)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jenkins Admin Password\nDESCRIPTION: This command retrieves the initial admin password for Jenkins from the running pod. This password is required for the first login to the Jenkins UI.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/chart-admin-password && echo\n```\n\n----------------------------------------\n\nTITLE: Examining Basic Terraform State File Structure in JSON\nDESCRIPTION: Example of a basic Terraform state file showing version, outputs and resources. This JSON structure represents Terraform's view of the managed infrastructure, including metadata like version numbers and unique identifiers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day58.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 4,\n  \"terraform_version\": \"1.1.6\",\n  \"serial\": 1,\n  \"lineage\": \"a74296e7-670d-0cbb-a048-f332696ca850\",\n  \"outputs\": {\n    \"hello_world\": {\n      \"value\": \"Hello, 90DaysOfDevOps from Terraform\",\n      \"type\": \"string\"\n    }\n  },\n  \"resources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: ELK Stack Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration defining services for Elasticsearch, Logstash, and Kibana with version 7.8.0 images\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  elasticsearch:\n    image: elasticsearch:7.8.0\n    ...\n  logstash:\n    image: logstash:7.8.0\n    ...\n  kibana:\n    image: kibana:7.8.0\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting up ELK Stack with Docker Compose\nDESCRIPTION: Command to start the ELK Stack using Docker Compose, which deploys Elasticsearch, Logstash, and Kibana containers locally.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day80.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Refactored Playbook Using Roles in YAML\nDESCRIPTION: This playbook demonstrates how to use Ansible roles instead of directly including tasks and handlers. It sets variables for HTTP and HTTPS ports and a welcome message, then applies the apache2 role to the webservers group.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day66.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: Configuring AWX Deployment in Kubernetes\nDESCRIPTION: YAML configuration for deploying AWX in a Kubernetes cluster, specifying the service type as ClusterIP.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx-demo\nspec:\n  service_type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Defining Ansible Playbook for Web Servers and Proxy\nDESCRIPTION: This YAML snippet defines an Ansible playbook with two host blocks. It applies common and apache2 roles to webservers, and common and nginx roles to the proxy server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day67.md#2025-04-17_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n```\n\n----------------------------------------\n\nTITLE: Using fmt.Scan() with Pointers for User Input in Go\nDESCRIPTION: Demonstrates how to use the fmt.Scan() function to capture user input in a Go program. The ampersand (&) is used before the variable name to create a pointer that references the memory address where the input will be stored.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day12.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Scan(&TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Creating KinD Cluster for Ambient Mesh\nDESCRIPTION: Command to create a KinD (Kubernetes in Docker) cluster with one control plane and two worker nodes. This configuration is suitable for testing Ambient Mesh.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster --config=- <<EOF\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nname: ambient\nnodes:\n- role: control-plane\n- role: worker\n- role: worker\nEOF\n```\n\n----------------------------------------\n\nTITLE: Skipping Staging Area in Git\nDESCRIPTION: Demonstrates how to commit changes directly without staging, using the -a flag with git commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am \"Skipping the staging area\"\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Services for Microservices in Istio\nDESCRIPTION: This YAML configuration defines Virtual Services for multiple microservices (productpage, reviews, ratings, details) in Istio. Each Virtual Service specifies routing rules for its respective service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: productpage\nspec:\n  hosts:\n  - productpage\n  http:\n  - route:\n    - destination:\n        host: productpage\n        subset: v1\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: details\nspec:\n  hosts:\n  - details\n  http:\n  - route:\n    - destination:\n        host: details\n        subset: v1\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Inheritance in Python\nDESCRIPTION: Shows how to create a subclass that inherits from a parent class. This example defines a Student class that inherits from Person, demonstrating how to extend the parent class with additional attributes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day44.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Student(Person):\n    def __init__(self, name, country, major):\n        super().__init__(name, country)\n        self.major = major\n\nstudent = Student(\"Rishab\", \"Canada\", \"Computer Science\")\nprint(student.name)   # OUTPUT \"Rishab\"\nprint(student.country)    # OUTPUT \"Canada\"\nprint(student.major)  # OUTPUT \"Computer Science\"\n```\n\n----------------------------------------\n\nTITLE: Database Operations\nDESCRIPTION: SQL commands to show databases and drop a specific database for testing restore functionality\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\necho \"SHOW DATABASES;\" |  ${MYSQL_EXEC}\necho \"DROP DATABASE myImportantData;\" |  ${MYSQL_EXEC}\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Secrets Engine in HashiCorp Vault\nDESCRIPTION: This command enables a Key/Value version 2 secrets engine on the path '90daysofdevops' in HashiCorp Vault.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day37.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault secrets enable -path=90daysofdevops kv-v2\n```\n\n----------------------------------------\n\nTITLE: Defining Ansible Role Usage Example in YAML\nDESCRIPTION: Example playbook showing how to include and use the role with parameters. Demonstrates passing variables to the role using the standard Ansible playbook format.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Configmgmt/ansible-scenario5/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter API Authentication and Tweet Posting in Go\nDESCRIPTION: This Go code snippet demonstrates how to authenticate with the Twitter API using OAuth1 and post a tweet. It uses environment variables for API credentials and the go-twitter library for Twitter API interactions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    fmt.Println(\"Go-Twitter Bot v0.01\")\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n\n    client, err := getClient(&creds)\n    if err != nil {\n        log.Println(\"Error getting Twitter Client\")\n        log.Println(err)\n    }\n\n    tweet, resp, err := client.Statuses.Update(\"A Test Tweet from the future, testing a #90DaysOfDevOps Program that tweets, tweet tweet\", nil)\n    if err != nil {\n        log.Println(err)\n    }\n    log.Printf(\"%+v\\n\", resp)\n    log.Printf(\"%+v\\n\", tweet)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minikube Cluster Deployment in Bash\nDESCRIPTION: Advanced Minikube start command with custom configurations. Sets API server port, container runtime, and Kubernetes version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Monitoring Pod Status in Kubernetes\nDESCRIPTION: Kubectl commands to watch and check the status of pods in the monitoring namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n monitoring -w\nkubectl get pods -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Starting a Minikube Kubernetes Cluster in Bash\nDESCRIPTION: Command to start a basic Minikube Kubernetes cluster with default settings. This creates a single-node cluster running as a Docker container with both control and worker plane components.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Go\nDESCRIPTION: A simple Go program that declares a variable to store the challenge name and prints a welcome message using the fmt package.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day11.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    fmt.Println(\"Welcome to\", challenge, \"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Webservers Role Block in Ansible Playbook\nDESCRIPTION: This YAML snippet demonstrates how to define a role block for webservers in an Ansible playbook. It includes variables for HTTP and HTTPS ports, a welcome message, and specifies both common and apache2 roles.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day67.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: Generating Key Pair for Container Image Signing with Cosign\nDESCRIPTION: Command to generate a public-private key pair using cosign. This creates a cosign.key private key file and cosign.pub public key file in the current directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day24.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncosign generate-key-pair\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Region in Terraform\nDESCRIPTION: This snippet demonstrates how to specify the AWS region for resource deployment in a Terraform configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day58.md#2025-04-17_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nprovider \"aws\" {\n  region = \"ap-southeast-1\" //region where resources need to be deployed\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Istio Ingress Gateway Configuration\nDESCRIPTION: Applies the Istio ingress gateway and virtual service configuration for the bookinfo application, which defines how external traffic should be routed to the application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing pwd Command to Show Current Directory in Linux\nDESCRIPTION: Demonstrates the pwd (print working directory) command which displays the full path of the current directory in the Linux filesystem.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npwd\n```\n\n----------------------------------------\n\nTITLE: Basic Directory and File Operations Script\nDESCRIPTION: A simple bash script that creates a directory, changes into it, and creates a new file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir 90DaysOfDevOps\ncd 90DaysOfDevOps\ntouch Day19\nls\n```\n\n----------------------------------------\n\nTITLE: Starting a Minikube cluster in bash\nDESCRIPTION: This command initiates the deployment of a local Kubernetes cluster using Minikube with default settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day51.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Protocol Performance Test Workflow in Python\nDESCRIPTION: This code demonstrates a Hedra workflow class that simulates user interactions using HTTP/2, HTTP, and Playwright for UI testing. It includes methods for API and UI login, book and author searches, showcasing the ability to use multiple protocols concurrently.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom hedra import (\n    Workflow, \n    step,\n)\nfrom hedra.core.engines import (\n    HTTPResult,\n    HTTP2Result,\n    PlaywrightResult\n)\nfrom typing import Literal, Optional\n\n\nclass Test(Workflow):\n    vus=1000\n    duration='1m'\n    username=os.getenv('USERNAME')\n    password=os.getenv('PASSWORD')\n\n    def get_book_title(self) -> Literal['Shakespeare Collected Works']:\n        return 'Shakespeare Collected Works'\n    \n    @step()\n    async def login_via_api(self) -> HTTP2Result:\n        return await self.client.http2.post(\n            'https://myapi.com/api/v1/login',\n            auth=(\n                self.username,\n                self.password\n            )\n        )\n    \n    @step()\n    async def login_via_ui(self) -> PlaywrightResult:\n        await self.client.playwright.goto('https://myapi.com/login')\n\n        await self.client.playwright.input_text(\n            '[data-test-id=\"username-input\"]',\n            self.username\n        )\n\n        await self.client.playwright.input_text(\n            '[data-test-id=\"password-input\"]',\n            self.password\n        )\n\n        return await self.client.playwright.click('[data-test-id=\"login-button\"]')\n\n    @step('login_via_api')\n    async def get_book(\n        self,\n        auth_response: HTTP2Result\n    ) -> HTTPResult:\n        auth_token = response.headers.get('X-API-TOKEN')\n        title = self.get_book_title()\n\n        return await self.client.http.get(\n            f'https://myapi.com/api/v1/books?title={title}',\n            headers={\n                'X-API-TOKEN': auth_token\n            }\n        )\n    \n    @step('login_via_api')\n    async def get_author(\n        self,\n        auth_response: HTTP2Result\n    ) -> HTTPResult:\n        auth_token = response.headers.get('X-API-TOKEN')\n\n        return await self.client.http.get(\n            'https://myapi.com/api/v1/authors?author=william&shakespeare',\n            headers={\n                'X-API-TOKEN': auth_token\n            }\n        )\n    \n    @step('login_via_ui')\n    async def get_author_and_book_via_search(self) -> PlaywrightResult:\n        await self.client.playwright.click('[data-test-id=\"author-search\"]')\n        await self.client.playwright.input_text(\n            '[data-test-id=\"author-search-input\"]',\n            'William Shakespeare'\n        )\n\n\n        title = self.get_book_title()\n        await self.client.playwright.click('[data-test-id=\"book-search\"]')\n        await self.client.playwright.input_text(\n            '[data-test-id=\"book-search-input\"]',\n            title\n        )\n\n        return await self.client.playwright.click('[data-test-id=\"search-button\"]')\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Basic Command Example\nDESCRIPTION: Example showing the basic Azure CLI command structure for creating a virtual machine\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day33.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz VM create\n```\n\n----------------------------------------\n\nTITLE: Setting Default StorageClass in Kubernetes\nDESCRIPTION: Two kubectl commands to configure the default StorageClass in the cluster - first making csi-hostpath-sc the default, then removing the default annotation from the standard StorageClass.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible Dependencies\nDESCRIPTION: Command to install Ansible and other required dependencies specified in the requirements.txt file using pip.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister ActionSet for MySQL Backup\nDESCRIPTION: Command to create an ActionSet using kanctl for backing up MySQL data. It specifies the action, namespace, blueprint, statefulset, profile, and secrets required for the backup operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset --action backup --namespace kanister --blueprint mysql-blueprint --statefulset my-production-app/mysql-store --profile my-production-app/s3-profile-dc5zm --secrets mysql=my-production-app/mysql-store\n```\n\n----------------------------------------\n\nTITLE: Configuring Default StorageClass for Kubernetes Cluster\nDESCRIPTION: Commands to change the default storage class from 'standard' to 'csi-hostpath-sc' to support volume snapshots in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day87.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Extracting Apache Tasks into a Separate File\nDESCRIPTION: A YAML file containing task definitions for installing Apache, configuring ports, creating an index page, and ensuring the service is running. These tasks have been extracted from the main playbook to improve organization.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day66.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- name: ensure apache is at the latest version\n  apt: name=apache2 state=latest\n\n- name: write the apache2 ports.conf config file\n  template:\n    src=templates/ports.conf.j2\n    dest=/etc/apache2/ports.conf\n  notify: restart apache\n\n- name: write a basic index.html file\n  template:\n    src: templates/index.html.j2\n    dest: /var/www/html/index.html\n  notify:\n  - restart apache\n\n- name: ensure apache is running\n  service:\n    name: apache2\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Staging a Specific File for Commit\nDESCRIPTION: The git add command with a specific filename stages just that file for the next commit. This allows for selective staging of changes when you've modified multiple files but only want to commit some of them.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add sample code.ps1\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook Using Roles\nDESCRIPTION: A playbook that demonstrates using roles with pre-tasks and post-tasks. It displays messages and applies the 'example' role to hosts in the webservers group.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example role\n  hosts: webservers\n  gather_facts: false\n  vars:\n    greeting: \"Hello World!\"\n  pre_tasks:\n    - name: Say Hello\n      ansible.builtin.debug:\n        msg: \"{{ greeting }}\"\n  roles:\n    - role: example\n  post_tasks:\n    - name: Say goodbye\n      ansible.builtin.debug:\n        msg: Goodbye!\n```\n\n----------------------------------------\n\nTITLE: Ansible Hosts File Configuration\nDESCRIPTION: Example of host entries in the Ansible inventory file (/etc/ansible/hosts) showing how to define groups of machines and their connection details.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day64.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[windows]\n10.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus on Kubernetes using Helm\nDESCRIPTION: Command to install Prometheus on a Kubernetes cluster using the Helm chart from the Prometheus community repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day78.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install stable prometheus-community/prometheus\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Account using PowerShell\nDESCRIPTION: This PowerShell command connects to an Azure account, allowing for management of Azure resources through PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day33.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount\n```\n\n----------------------------------------\n\nTITLE: Git Rebase Commands\nDESCRIPTION: Commands for rebasing in Git, particularly interactive rebasing which allows for powerful history manipulation. This includes reordering, combining, or modifying commits during the rebase process.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Command               | Example                | Description                                                                                                                |\n| --------------------- | ---------------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| git rebase -i \\<base> | `git rebase -i <base>` | 현재 branch를 \\<base>로 rebase합니다. 편집기를 사용하여 각 commit을 새 저장소로 옮기는 방법에 대한 명령을 입력해야 합니다. |\n```\n\n----------------------------------------\n\nTITLE: Importing Data from CSV into PostgreSQL\nDESCRIPTION: SQL command to import data from a CSV file into the test_table using the COPY command, which specifies the delimiter and includes a header row.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCOPY test_table(id,first_name, last_name, dob, email)\nFROM '/dvdrental/test_data.csv'\nDELIMITER ','\nCSV HEADER;\n```\n\n----------------------------------------\n\nTITLE: Conditional Task Example in Ansible Playbook\nDESCRIPTION: An example task that uses conditionals in Ansible to perform actions based on the detected operating system. This snippet shows how to shut down Debian-based systems using the when clause to evaluate conditions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks: \n  - name: \"shut down Debian flavoured systems\"\n    command: /sbin/shutdown -t now \n    when: ansible_os_family == \"Debian\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Template\nDESCRIPTION: Jinja2 template for MySQL configuration that sets the bind address to allow connections from any IP.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_9\n\nLANGUAGE: j2\nCODE:\n```\n[mysql]\nbind-address = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Terraform Outputs for Remote State Resources\nDESCRIPTION: Terraform outputs that expose important information about the created remote state resources. These outputs provide the bucket name, DynamoDB table name, and ARNs which can be referenced in other configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day64.md#2025-04-17_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"s3_bucket_arn\" {\n  value       = aws_s3_bucket.terraform_state.arn\n  description = \"The ARN of the S3 bucket\"\n}\n\noutput \"dynamodb_table_name\" {\n  value       = aws_dynamodb_table.terraform_locks.name\n  description = \"The name of the DynamoDB table\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Kyverno Policy with a Privileged Pod\nDESCRIPTION: Example of creating a Pod with privileged access that should be blocked by the Kyverno policy. This demonstrates how admission controllers enforce security policies at resource creation time.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - << EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: privileged-container-demo\nspec:\n  containers:\n  - name: privileged-container-demo\n    image: nginx:latest\n    securityContext:\n      privileged: true\nEOF\n```\n\n----------------------------------------\n\nTITLE: Git Diff Commands\nDESCRIPTION: Commands for comparing differences between various states in Git, including comparing the working directory with the last commit and comparing staged changes with the last commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Command           | Example             | Description                                           |\n| ----------------- | ------------------- | ----------------------------------------------------- |\n| git diff HEAD     | `git diff HEAD`     | 작업 디렉토리와 마지막 commit의 diff를 표시합니다.    |\n| git diff --cached | `git diff --cached` | 단계적 변경 사항과 마지막 commit의 diff를 표시합니다. |\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWX Admin Password\nDESCRIPTION: Kubectl command to retrieve and decode the AWX admin password from a Kubernetes secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day69.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret awx-demo-admin-password -o jsonpath=\"{.data.password}\" -n awx| base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Linking to Kubernetes Topology Spread Constraints Documentation\nDESCRIPTION: This snippet provides a link to the Kubernetes documentation on topology spread constraints, which can be used to distribute application replicas across failure zones.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day86.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[topology spread constraints](https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/)\n```\n\n----------------------------------------\n\nTITLE: Using Provisioners in Terraform for Non-Declarative Actions\nDESCRIPTION: An example of using a local-exec provisioner in Terraform to run commands that cannot be expressed declaratively. This example shows how to execute a local command to output a container's IP address.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day60.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"docker_container\" \"db\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo The server's IP address is ${self.private_ip}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for ELK Stack\nDESCRIPTION: A partial Docker Compose configuration that defines services for Elasticsearch, Logstash, and Kibana with version 7.8.0 images.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  elasticsearch:\n    image: elasticsearch:7.8.0\n    ...\n  logstash:\n    image: logstash:7.8.0\n    ...\n  kibana:\n    image: kibana:7.8.0\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Python with Netmiko to Collect Information from Network Devices\nDESCRIPTION: References a Python script that uses Netmiko to connect to multiple network devices and gather interface configuration information. This script allows for centralized monitoring of network device configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day27.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Reference to netmiko_con_multi.py\n```\n\n----------------------------------------\n\nTITLE: Apache Tasks Configuration in YAML\nDESCRIPTION: Basic Apache server configuration tasks including installation, port configuration, and service management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day66.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: ensure apache is at the latest version\n  apt: name=apache2 state=latest\n\n- name: write the apache2 ports.conf config file\n  template: \n    src=templates/ports.conf.j2 \n    dest=/etc/apache2/ports.conf\n  notify: restart apache\n\n- name: write a basic index.html file\n  template:\n    src: templates/index.html.j2\n    dest: /var/www/html/index.html\n  notify:\n  - restart apache\n\n- name: ensure apache is running\n  service:\n    name: apache2\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Restoring Kopia Snapshot\nDESCRIPTION: Command to restore a specific snapshot using its ID with Kopia.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day86.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkopia snapshot restore kdbd9dff738996cfe7bcf99b45314e193\n```\n\n----------------------------------------\n\nTITLE: Creating Web Application Pod with Vault Integration\nDESCRIPTION: Command to create a YAML file defining a pod that uses the Vault Agent Injector for secrets. The annotations specify the role to use and which secret to inject into the pod.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncat > devwebapp.yaml <<EOF\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: devwebapp\n  labels:\n    app: devwebapp\n  annotations:\n    vault.hashicorp.com/agent-inject: \"true\"\n    vault.hashicorp.com/role: \"devweb-app\"\n    vault.hashicorp.com/agent-inject-secret-credentials.txt: \"secret/data/devwebapp/config\"\nspec:\n  serviceAccountName: internal-app\n  containers:\n    - name: devwebapp\n      image: jweissig/app:0.0.1\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress Configuration\nDESCRIPTION: Command to apply the Pacman ingress configuration from a YAML file\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f Pacman-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Git Configuration Commands\nDESCRIPTION: Commands for configuring Git settings, including setting user name, email, creating command aliases, configuring editors, and editing configuration files. These commands help personalize and optimize Git for individual workflows.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                                                | Example                                               | Description                                                                                                                          |\n| ------------------------------------------------------ | ----------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| git config --global user.name \\<name>                  | `git config --global user.name <name>`                | 현재 사용자가 모든 commit에 사용할 작성자 이름을 정의합니다.                                                                         |\n| git config --global user.email \\<email>                | `git config --global user.email <email>`              | 현재 사용자가 모든 commit에 사용할 작성자 이메일을 정의합니다.                                                                       |\n| git config --global alias \\<alias-name> \\<git-command> | `git config --global 별칭 <alias-name> <git-command>` | git 명령에 대한 단축어를 만듭니다.                                                                                                   |\n| git config --system core.editor \\<editor>              | `git config --system core.editor <editor>`            | 컴퓨터의 모든 사용자에 대한 명령에서 사용할 텍스트 편집기를 설정합니다. \\<editor> 인수는 원하는 편집기를 실행하는 명령이어야 합니다. |\n| git config --global --edit                             | `git config --global --edit `                         | 수동 편집을 위해 텍스트 편집기에서 전역 구성 파일을 엽니다.                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Verifying a Signed Container Image with Cosign\nDESCRIPTION: Command to verify a container image's signature using cosign with a public key. The output confirms the image has been signed with the expected key and has not been tampered with.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day24.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cosign verify --key=cosign.pub asankov/signed | jq\n\nVerification for index.docker.io/asankov/signed:latest --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - The signatures were verified against the specified public key\n[\n  {\n    \"critical\": {\n      \"identity\": {\n        \"docker-reference\": \"index.docker.io/asankov/signed\"\n      },\n      \"image\": {\n        \"docker-manifest-digest\": \"sha256:93d62c92b70efc512379cf89317eaf41b8ce6cba84a5e69507a95a7f15708506\"\n      },\n      \"type\": \"cosign container image signature\"\n    },\n    \"optional\": null\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying ELK Stack with Docker Compose\nDESCRIPTION: Command to deploy the ELK Stack (Elasticsearch, Logstash, and Kibana) using Docker Compose. This creates containerized instances of each component with predefined configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day80.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Signing a Container Image with Cosign\nDESCRIPTION: Command to sign a container image using cosign with a private key. This pushes the signature to the container repository alongside the image.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day24.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cosign sign --key cosign.key asankov/signed\nEnter password for private key:\n\nPushing signature to: index.docker.io/asankov/signed\n```\n\n----------------------------------------\n\nTITLE: Checking Kanister ActionSet Status\nDESCRIPTION: Command to describe and check the status of a specific ActionSet in the Kanister namespace. Replace 'backup-qpnqv' with the actual ActionSet name.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kanister describe actionset backup-qpnqv\n```\n\n----------------------------------------\n\nTITLE: Type Checking and Type Conversion in Python\nDESCRIPTION: Demonstrates how to check variable types using the type() function and convert between different data types. This snippet shows converting between integer, float, and string types.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day47.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvar3 = 90\nvar4 = \"90\"\nvar5 = 90.0\n\nprint(type(var3))\nprint(type(var4))\nprint(type(var5))\n\ninteger_number = 90 \nfloat_number = float(integer_number)\nprint(float_number)\nprint(type(float_number))\n\nnumber = 90.6\ninteger_number = int(number)\nprint(integer_number)\nprint(type(integer_number))\n```\n\n----------------------------------------\n\nTITLE: Comparing Test Coverage With and Without Dependency Analysis in Bash\nDESCRIPTION: This script compares testing performance by measuring the number of tests executed and execution time both with and without using the deptrac dependency analysis tool. It calculates the percentage of tests saved and time reduction by using dependency analysis to only run tests affected by code changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day15.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Compare test coverage\ntests_with=$(./vendor/bin/phpunit | grep -oP 'OK \\(\\K\\d+')\necho \"Executed tests (not using deptrac): $tests_with tests\"\n\necho \"\"\n\ntotal_time_without=0\nfor ((i = 1; i <= $iterations; i++)); do\n  # Run the command\n  runtime=$(\n    TIMEFORMAT='%R'\n    time (\n      git diff --name-only |\n        xargs php deptrac.php changed-files --with-dependencies |\n        sed '1s/;/ --testsuite /g; 2s/;/Integration --testsuite /g; /./ { s/^/--testsuite /; 2s/$/Integration/; }' |\n        sed ':a;N;$!ba;s/\\n/ /g' |\n        xargs ./vendor/bin/phpunit >/dev/null 2>&1\n    ) 2>&1\n  )\n\n  miliseconds=$(echo \"$runtime\" | tr ',' '.')\n  total_time_without=$(echo \"$total_time_without + $miliseconds * 1000\" | bc)\ndone\n\naverage_time_without=$(echo \"$total_time_without / $iterations\" | bc)\necho \"Average time (using deptrac): $average_time_without ms\"\ntests_execution_without=$(git diff --name-only |\n  xargs php deptrac.php changed-files --with-dependencies |\n  sed '1s/;/ --testsuite /g; 2s/;/Integration --testsuite /g; /./ { s/^/--testsuite /; 2s/$/Integration/; }' |\n  sed ':a;N;$!ba;s/\\n/ /g' |\n  xargs ./vendor/bin/phpunit)\ntests_without=$(echo \"$tests_execution_without\" | grep -oP 'OK \\(\\K\\d+')\ntests_execution_without_time=$(echo \"$tests_execution_without\" | grep -oP 'Time: 00:\\K\\d+\\.\\d+')\necho \"Executed tests (using deptrac): $tests_without tests\"\n\nexecution_time=$(echo \"$tests_execution_without_time * 1000\" | bc | awk '{gsub(/\\.?0+$/, \"\"); print}')\necho \"Time to find tests to execute (using deptrac): $(echo \"$average_time_without - $tests_execution_without_time * 1000\" | bc | awk '{gsub(/\\.?0+$/, \"\"); print}') ms\"\necho \"Time to execute tests (using deptrac): $execution_time ms\"\n\necho \"\"\n\npercentage=$(echo \"scale=3; $tests_without / $tests_with * 100\" | bc | awk '{gsub(/\\.?0+$/, \"\"); print}')\necho \"Percentage of tests not needing execution given the changed files: $(echo \"100 - $percentage\" | bc)%\"\npercentage=$(echo \"scale=3; $execution_time / $average_time_with * 100\" | bc | awk '{gsub(/\\.?0+$/, \"\"); print}')\necho \"Time saved on testing: $(echo \"$average_time_with - $execution_time\" | bc) ms ($(echo \"100 - $percentage\" | bc)%)\"\npercentage=$(echo \"scale=3; $average_time_without / $average_time_with * 100\" | bc | awk '{gsub(/\\.?0+$/, \"\"); print}')\necho \"Time saved overall: $(echo \"$average_time_with - $average_time_without\" | bc) ms ($(echo \"100 - $percentage\" | bc)%)\"```\n\nwith the following results:\n\n```\nAverage time (not using deptrac): 984 ms\nExecuted tests (not using deptrac): 721 tests\n\nAverage time (using deptrac): 559 ms\nExecuted tests (using deptrac): 21 tests\nTime to find tests to execute (using deptrac): 491 ms\nTime to execute tests (using deptrac): 68 ms\n\nPercentage of tests not needing execution given the changed files: 97.1%\nTime saved on testing: 916 ms (93.1%)\nTime saved overall: 425 ms (43.2%)\n```\n\n----------------------------------------\n\nTITLE: Terraform Resource Definition for Azure Virtual Desktop Workspace\nDESCRIPTION: Terraform configuration block that defines an Azure Virtual Desktop workspace. It specifies the resource group, location, name, description, and friendly name for the workspace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day05.md#2025-04-17_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azurerm_virtual_desktop_workspace\" \"workspace\" {\n  name                = var.workspace\n  location            = azurerm_resource_group.AVD.location\n  resource_group_name = azurerm_resource_group.AVD.name\n\n  friendly_name = \"${var.prefix} Workspace\"\n  description   = \"${var.prefix} Workspace\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes Audit Log in JSON Format\nDESCRIPTION: Shows an example of a Kubernetes audit log entry in JSON format, capturing a request to list secrets in the default namespace. The log includes details about the user, request URI, and timestamp.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day28.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"kind\":\"Event\",\"apiVersion\":\"audit.k8s.io/v1\",\"level\":\"RequestResponse\",\"auditID\":\"8e526e77-1fd9-43c3-9714-367fde233c99\",\"stage\":\"RequestReceived\",\"requestURI\":\"/api/v1/namespaces/default/secrets?limit=500\",\"verb\":\"list\",\"user\":{\"username\":\"minikube-user\",\"groups\":[\"system:masters\",\"system:authenticated\"]},\"sourceIPs\":[\"192.168.49.1\"],\"userAgent\":\"kubectl/v1.25.4 (linux/amd64) kubernetes/872a965\",\"objectRef\":{\"resource\":\"secrets\",\"namespace\":\"default\",\"apiVersion\":\"v1\"},\"requestReceivedTimestamp\":\"2023-02-11T20:34:11.015389Z\",\"stageTimestamp\":\"2023-02-11T20:34:11.015389Z\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple VMs in VirtualBox using Terraform\nDESCRIPTION: Terraform configuration to create multiple Ubuntu VMs in VirtualBox with specified CPU, memory, and network settings. Uses count parameter for multiple instances and includes output definitions for IP addresses.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day59.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    virtualbox = {\n      source = \"terra-farm/virtualbox\"\n      version = \"0.2.2-alpha.1\"\n    }\n  }\n}\n\n# 현재 공급자 자체에 대한 구성 옵션이 없습니다.\n\nresource \"virtualbox_vm\" \"node\" {\n  count     = 2\n  name      = format(\"node-%02d\", count.index + 1)\n  image     = \"https://app.vagrantup.com/ubuntu/boxes/bionic64/versions/20180903.0.0/providers/virtualbox.box\"\n  cpus      = 2\n  memory    = \"512 mib\"\n\n  network_adapter {\n    type           = \"hostonly\"\n    host_interface = \"vboxnet1\"\n  }\n}\n\noutput \"IPAddr\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 1)\n}\n\noutput \"IPAddr_2\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 2)\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Application and Removing Containers and Volumes\nDESCRIPTION: This command stops the running Docker Compose application, removes the containers, and also removes the associated volumes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day46.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Vagrant Configuration for Ansible Test Environment\nDESCRIPTION: A Vagrantfile that sets up a multi-node test environment for Ansible. It creates four Ubuntu VMs (a database server, two web servers, and a load balancer) with specific IP addresses and SSH ports for testing Ansible playbooks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  servers=[\n    {\n      :hostname => \"db01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.130\",\n      :ssh_port => '2210'\n    },\n    {\n      :hostname => \"web01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.131\",\n      :ssh_port => '2211'\n    },\n    {\n      :hostname => \"web02\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.132\",\n      :ssh_port => '2212'\n    },\n    {\n      :hostname => \"loadbalancer\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.134\",\n      :ssh_port => '2213'\n    }\n\n  ]\n\nconfig.vm.base_address = 600\n\n  servers.each do |machine|\n\n    config.vm.define machine[:hostname] do |node|\n      node.vm.box = machine[:box]\n      node.vm.hostname = machine[:hostname]\n    \n      node.vm.network :public_network, bridge: \"Intel(R) Ethernet Connection (7) I219-V\", ip: machine[:ip]\n      node.vm.network \"forwarded_port\", guest: 22, host: machine[:ssh_port], id: \"ssh\"\n\n      node.vm.provider :virtualbox do |v|\n        v.customize [\"modifyvm\", :id, \"--memory\", 2048]\n        v.customize [\"modifyvm\", :id, \"--name\", machine[:hostname]]\n      end\n    end\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Using Vault operator init command\nDESCRIPTION: The command used to initialize a new Vault cluster, which creates the encryption key, unseal/recovery keys, and prepares the storage backend.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day36.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault operator init\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 on Kubernetes Cluster Using Helm\nDESCRIPTION: This Helm command installs Kasten K10 data management platform on a Kubernetes cluster. It enables token authentication and Kanister sidecar injection for application-consistent backups.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day89.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 using Helm\nDESCRIPTION: Commands to add the Kasten Helm repository and install K10 with specific configuration settings for token authentication and Kanister sidecar injection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day87.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add kasten https://charts.kasten.io/\n\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Accessing Pod Shell to Simulate Suspicious Activity\nDESCRIPTION: Opens a bash shell inside the Nginx pod using kubectl exec command. This allows for simulating suspicious activities that Falco will detect.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day30.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it `kubectl get pod | grep nginx | awk '{print $1}'` -- bash\n```\n\n----------------------------------------\n\nTITLE: Dynamic HTML Template with Ansible Facts (Jinja2)\nDESCRIPTION: This Jinja2 template for an HTML file uses Ansible facts and variables to display a dynamic welcome message including the server's hostname.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_3\n\nLANGUAGE: jinja2\nCODE:\n```\n<html>\n\n<h1>{{ html_welcome_msg }}! I'm webserver {{ ansible_facts['nodename'] }} </h1>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Plugins\nDESCRIPTION: Commands to install autosuggestions and syntax highlighting plugins for ZSH.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day20.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting\n```\n\n----------------------------------------\n\nTITLE: Installing Helm on Linux Using Shell Script\nDESCRIPTION: This shell script downloads and executes the Helm installer. Helm is a package manager for Kubernetes that simplifies deploying applications. The script retrieves the latest Helm version, makes the installer executable, and runs it to install Helm on the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day54.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n\nchmod 700 get_helm.sh\n\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Sensitive Variables in Terraform\nDESCRIPTION: This snippet demonstrates how to define a sensitive variable in Terraform. Sensitive variables are useful for storing confidential information like API keys or passwords.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day59.md#2025-04-17_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"some resource\"  {\n    description = \"something important\"\n    type: string\n    sensitive = true\n\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Go Application for Multiple Operating Systems\nDESCRIPTION: This code snippet demonstrates how to compile a Go application for multiple operating systems and architectures using environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day13.md#2025-04-17_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nGOARCH=amd64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin main.go\nGOARCH=amd64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux main.go\nGOARCH=amd64 GOOS=windows go build -o ${BINARY_NAME}_0.1_windows main.go\nGOARCH=arm64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux_arm64 main.go\nGOARCH=arm64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin_arm64 main.go\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Network Policy\nDESCRIPTION: A YAML configuration for a Network Policy that controls pod communication. This policy allows ingress traffic only to pods with the 'app: web' label, and only from sources with the 'role: monitoring' label, demonstrating network security isolation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day61.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: web\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - ipBlock:\n        cidr: 172.17.0.0/16\n        except:\n        - 172.17.1.0/24\n    - namespaceSelector:\n        matchLabels:\n          project: myproject\n    - podSelector:\n        matchLabels:\n          role: monitoring\n    ports:\n    - protocol: TCP\n      port: 6379\n  egress:\n  - to:\n    - ipBlock:\n        cidr: 10.0.0.0/24\n    ports:\n    - protocol: TCP\n      port: 5978\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository Using Git Clone Command\nDESCRIPTION: Demonstrates how to use the git clone command to download a copy of a forked repository to your local machine using the HTTPS URL from GitHub.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day40.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Separating Tasks in Ansible Playbook\nDESCRIPTION: This snippet shows how to separate tasks into their own file for better organization in an Ansible playbook. It includes tasks for ensuring Apache is up-to-date, configuring ports, writing an index file, and ensuring the service is running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day66.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: ensure apache is at the latest version\n  apt: name=apache2 state=latest\n\n- name: write the apache2 ports.conf config file\n  template:\n    src=templates/ports.conf.j2\n    dest=/etc/apache2/ports.conf\n  notify: restart apache\n\n- name: write a basic index.html file\n  template:\n    src: templates/index.html.j2\n    dest: /var/www/html/index.html\n  notify:\n  - restart apache\n\n- name: ensure apache is running\n  service:\n    name: apache2\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Configuring AWX Deployment in Kubernetes\nDESCRIPTION: YAML configuration for deploying AWX in a Kubernetes cluster, specifying the service type as ClusterIP.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx-demo\nspec:\n  service_type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: AWX Demo Configuration for Kubernetes\nDESCRIPTION: YAML configuration for deploying AWX demo instance in Kubernetes, specifying the service type as ClusterIP.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx-demo\nspec:\n  service_type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Running Secondary PostgreSQL Container\nDESCRIPTION: Launches the secondary PostgreSQL container using the base backup from the primary.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day66.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \n--publish 5433:5432 \n--network=postgres \n--volume C:\\temp\\base:/var/lib/postgresql/data \n--env POSTGRES_PASSWORD=Testing1122 \n--name demo-container2 \nghcr.io/dbafromthecold/demo-postgres\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Ping Module Against localhost\nDESCRIPTION: Example of using the Ansible ping module to test connectivity against the local machine, which is a quick way to verify Ansible is working properly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day64.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nansible localhost -m ping\n```\n\n----------------------------------------\n\nTITLE: Removing Cached Files from Git Tracking\nDESCRIPTION: Command to remove a file from Git tracking without deleting it from the filesystem. Useful when you want to start ignoring a previously tracked file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit rm --cached \n```\n\n----------------------------------------\n\nTITLE: Configuring a Multi-Node Test Environment with Vagrant\nDESCRIPTION: A Vagrantfile that defines a test environment with four nodes: a database server, two web servers, and a load balancer. This configuration supports testing Ansible playbooks across multiple machines.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  servers=[\n    {\n      :hostname => \"db01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.130\",\n      :ssh_port => '2210'\n    },\n    {\n      :hostname => \"web01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.131\",\n      :ssh_port => '2211'\n    },\n    {\n      :hostname => \"web02\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.132\",\n      :ssh_port => '2212'\n    },\n    {\n      :hostname => \"loadbalancer\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.134\",\n      :ssh_port => '2213'\n    }\n\n  ]\n\nconfig.vm.base_address = 600\n\n  servers.each do |machine|\n\n    config.vm.define machine[:hostname] do |node|\n      node.vm.box = machine[:box]\n      node.vm.hostname = machine[:hostname]\n    \n      node.vm.network :public_network, bridge: \"Intel(R) Ethernet Connection (7) I219-V\", ip: machine[:ip]\n      node.vm.network \"forwarded_port\", guest: 22, host: machine[:ssh_port], id: \"ssh\"\n\n      node.vm.provider :virtualbox do |v|\n        v.customize [\"modifyvm\", :id, \"--memory\", 2048]\n        v.customize [\"modifyvm\", :id, \"--name\", machine[:hostname]]\n      end\n    end\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Simplified Variable Declaration in Go\nDESCRIPTION: This example shows a simplified way to declare variables in Go using the := operator. It also demonstrates how to use Printf for formatted output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day11.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n    challenge := \"#90DaysOfDevOps\"\n    const daystotal = 90\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Ethernet Cable Between Namespaces\nDESCRIPTION: Command to create a virtual ethernet pair (veth) to connect two network namespaces. This essentially creates a virtual network cable between the namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip link add veth-red type veth peer name veth-blue\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files in Git\nDESCRIPTION: Shows how to create and use a .gitignore file to exclude certain files or directories from version control.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\necho logs/ > .gitignore\n```\n\n----------------------------------------\n\nTITLE: Enabling Sidecar Injection for Default Namespace\nDESCRIPTION: Commands to label the default namespace for automatic sidecar injection and verify the label.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label namespace default istio-injection=enabled\nkubectl get ns --show-labels\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for Ansible Lab\nDESCRIPTION: Commands to clone the lab repository, create a Python virtual environment, and activate it for the Event-Driven Ansible lab setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mocdaniel/lab-event-driven-ansible.git\ncd lab-event-driven-ansible\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Using awk to Extract Data from Command Output\nDESCRIPTION: This command uses the 'who' command to list logged-in users and pipes the output to awk, which then extracts and prints only the first column (usernames) from the output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwho | awk '{print $1}'\n```\n\n----------------------------------------\n\nTITLE: Installing Istio with Ambient Profile\nDESCRIPTION: Command to install Istio with the ambient profile using istioctl. The --skip-confirmation flag allows installation without manual confirmation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nistioctl install --set profile=ambient --skip-confirmation\n```\n\n----------------------------------------\n\nTITLE: Web Servers Playbook Configuration - YAML\nDESCRIPTION: Ansible playbook configuration for web servers, defining HTTP/HTTPS ports and welcome message. Includes common and apache2 roles.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day67.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform using arkade CLI\nDESCRIPTION: This snippet demonstrates how to install Terraform using the arkade CLI tool. The command will either update an existing Terraform installation or install it if not present.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day57.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get terraform\n```\n\n----------------------------------------\n\nTITLE: Basic Ubuntu Nginx Dockerfile\nDESCRIPTION: A Dockerfile that creates an image based on Ubuntu 18.04, installs nginx and curl, and performs cleanup. It demonstrates basic Dockerfile commands and best practices for creating a minimal container image.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day45.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\n# Install nginx and curl\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y nginx curl\nRUN rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Lists in Python\nDESCRIPTION: Demonstrates how to create a list and access its elements by index. Lists are mutable data structures that can store multiple items of any type in a single variable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day44.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nthislist = [\"apple\", \"banana\", \"orange\"]\nprint(thislist[0]) # OUTPUT apple\nprint(thislist[2]) # OUTPUT orange\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources with kubectl in Kubernetes\nDESCRIPTION: Command for removing resources from a Kubernetes cluster. This can be used to delete pods and other resources, with input coming from either stdin or a file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod\n```\n\n----------------------------------------\n\nTITLE: Restoring a file from a previous commit\nDESCRIPTION: Demonstrates how to restore a file to its state in a previous commit when the file has been deleted or modified.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --source=HEAD~1 README.md\n```\n\n----------------------------------------\n\nTITLE: Creating Basic User Account Script in Bash\nDESCRIPTION: This script creates a user account based on command-line arguments. It demonstrates how to add a user, set a password, and display confirmation messages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day19.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1 user account being created.\"\n\n#A user is created with the name of the command line argument\nsudo useradd -m \"$1\"\n\n#A password can be parsed as a command line argument.\nsudo chpasswd <<< \"$1\":\"$2\"\n```\n\n----------------------------------------\n\nTITLE: Creating Classes and Objects in Python\nDESCRIPTION: Demonstrates how to define a class with attributes and create an object instance. This example defines a Person class with a constructor and creates a person object with name and country attributes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day44.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Person:\n    def __init__(self, name, country):\n        self.name = name\n        self.country = country\nperson = Person(\"Rishab\", \"Canada\")\nprint(person.name)   # OUTPUT \"Alice\"\nprint(person.country)    # OUTPUT \"Canada\"\n```\n\n----------------------------------------\n\nTITLE: Creating AWX Deployment Configuration in YAML\nDESCRIPTION: A basic YAML configuration file for AWX deployment using the AWX Operator in Kubernetes. This defines an AWX instance with ClusterIP service type.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx-demo\nspec:\n  service_type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Applying Custom SCC and Granting Permissions in OpenShift CLI\nDESCRIPTION: These shell commands apply the custom SCC to the OpenShift cluster and grant the necessary permissions to the service account used by the MongoDB deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\noc apply -f mongo-custom-scc.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\noc adm policy add-scc-to-user mongo-custom-scc system:serviceaccount:<namespace>:default\n\n# In my environment, I run:\noc adm policy add-scc-to-user mongo-custom-scc system:serviceaccount:pacman:default\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources with kubectl\nDESCRIPTION: Commands for removing resources from a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Command for AKS Credentials\nDESCRIPTION: Command to fetch and configure Kubernetes credentials for authenticating with an Azure Kubernetes Service (AKS) cluster. This enables kubectl commands to work with the specific AKS cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day25.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naz aks get-credentials --resource-group {ResourceGroupName} --name {AKSClusterName}\n```\n\n----------------------------------------\n\nTITLE: Installing Minikube via Arkade\nDESCRIPTION: Command to install Minikube using the Arkade package manager for Kubernetes tools.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get minikube\n```\n\n----------------------------------------\n\nTITLE: Annotating VolumeSnapshotClass for Kasten K10 in Kubernetes\nDESCRIPTION: This command annotates the csi-hostpath-snapclass VolumeSnapshotClass to be used by Kasten K10 for backups.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl annotate volumesnapshotclass csi-hostpath-snapclass \\\n    k10.kasten.io/is-snapshot-class=true\n```\n\n----------------------------------------\n\nTITLE: Inspecting Git Commits and Files\nDESCRIPTION: Commands for viewing specific commit details and file contents from different snapshots.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day39.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit show <commit ID>\ngit show HEAD~1\ngit ls-tree HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Non-Root User\nDESCRIPTION: This command runs an Ubuntu container with a specific non-root user ID (1009), overriding any user specified in the Dockerfile to improve security by using the principle of least privilege.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day47.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --user 1009 ubuntu\n```\n\n----------------------------------------\n\nTITLE: Starting Multi-Container Applications with Docker Compose\nDESCRIPTION: Terminal commands for managing Docker Compose applications, including how to start containers in detached mode, list running containers, and shut down the application with or without removing volumes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day46.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Service Module Against Webservers\nDESCRIPTION: Example command showing how to use the Ansible service module to ensure the httpd service is started on all servers in the 'webservers' group.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day64.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nansible webservers --m service -a \"name=httpd state=started\"\n```\n\n----------------------------------------\n\nTITLE: Interactive User Creation Script with Input Prompts\nDESCRIPTION: An enhanced version of the user creation script that prompts for username and password interactively rather than using command line arguments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day19.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\necho \"What is your intended username?\"\nread  username\necho \"What is your password\"\nread  password\n\n# 사용자 이름이 커맨드 라인 인수로 전달될 수 있습니다.\necho \"$username user account being created.\"\n\n# 커맨드 라인 인수의 이름으로 사용자가 생성됩니다.\nsudo useradd -m $username\n\n# password가 커맨드 라인 인수로 전달될 수 있습니다.\nsudo chpasswd <<< $username:$password\n```\n\n----------------------------------------\n\nTITLE: MySQL Installation Task Configuration\nDESCRIPTION: Ansible task for installing MySQL server and its dependencies, including Python modules and ensuring the service is running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - python3-pip\n   - mysql-client\n   - python3-mysqldb\n   - libmysqlclient-dev\n\n- name: Ensure mysql-server is installed latest version\n  apt: name=mysql-server state=latest\n\n- name: Installing python module MySQL-python\n  pip:\n    name: PyMySQL\n\n- name: Ensure mysql-server is running\n  service:\n    name: mysql\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Creating GCS Repository in Kopia\nDESCRIPTION: Command to create a new repository in Google Cloud Storage using Kopia, specifying the bucket name.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day86.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository create gcs --bucket 90daysofdevops\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Azure Files Storage Class with YAML\nDESCRIPTION: This YAML manifest defines a custom storage class for Azure Files, specifying parameters like storage account type and kind. It's set to dynamically provision storage with a reclaim policy of Delete.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day22.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: my-azurefile\nprovisioner: kubernetes.io/azure-file\nmountOptions:\n  - dir_mode=0777\n  - file_mode=0777\n  - uid=0\n  - gid=0\n  - mfsymlinks\n  - cache=strict\n  - actimeo=30\nparameters:\n  skuName: Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Creating Replication Slot\nDESCRIPTION: Creates a physical replication slot for WAL file management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day66.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pg_create_physical_replication_slot('replication_slot_slave1');\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM for Ubuntu Container Image using Syft\nDESCRIPTION: This code snippet demonstrates how to use the syft tool to generate a Software Bill of Materials (SBOM) for the ubuntu:latest container image. The output includes a list of installed packages, their versions, and types.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day15.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ syft ubuntu\n ✔ Parsed image\n ✔ Cataloged packages      [101 packages]\nNAME                 VERSION                                  TYPE\nadduser              3.118ubuntu5                             deb\napt                  2.4.8                                    deb\nbase-files           12ubuntu4.2                              deb\nbase-passwd          3.5.52build1                             deb\nbash                 5.1-6ubuntu1                             deb\nbsdutils             1:2.37.2-4ubuntu3                        deb\ncoreutils            8.32-4.1ubuntu1                          deb\ndash                 0.5.11+git20210903+057cd650a4ed-3build1  deb\ndebconf              1.5.79ubuntu1                            deb\ndebianutils          5.5-1ubuntu2                             deb\ndiffutils            1:3.8-0ubuntu2                           deb\ndpkg                 1.21.1ubuntu2.1                          deb\ne2fsprogs            1.46.5-2ubuntu1.1                        deb\nfindutils            4.8.0-1ubuntu3                           deb\ngcc-12-base          12.1.0-2ubuntu1~22.04                    deb\ngpgv                 2.2.27-3ubuntu2.1                        deb\ngrep                 3.7-1build1                              deb\ngzip                 1.10-4ubuntu4.1                          deb\nhostname             3.23ubuntu2                              deb\ninit-system-helpers  1.62                                     deb\nlibacl1              2.3.1-1                                  deb\nlibapt-pkg6.0        2.4.8                                    deb\nlibattr1             1:2.5.1-1build1                          deb\nlibaudit-common      1:3.0.7-1build1                          deb\nlibaudit1            1:3.0.7-1build1                          deb\nlibblkid1            2.37.2-4ubuntu3                          deb\nlibbz2-1.0           1.0.8-5build1                            deb\nlibc-bin             2.35-0ubuntu3.1                          deb\nlibc6                2.35-0ubuntu3.1                          deb\nlibcap-ng0           0.7.9-2.2build3                          deb\nlibcap2              1:2.44-1build3                           deb\nlibcom-err2          1.46.5-2ubuntu1.1                        deb\nlibcrypt1            1:4.4.27-1                               deb\nlibdb5.3             5.3.28+dfsg1-0.8ubuntu3                  deb\nlibdebconfclient0    0.261ubuntu1                             deb\nlibext2fs2           1.46.5-2ubuntu1.1                        deb\nlibffi8              3.4.2-4                                  deb\nlibgcc-s1            12.1.0-2ubuntu1~22.04                    deb\nlibgcrypt20          1.9.4-3ubuntu3                           deb\nlibgmp10             2:6.2.1+dfsg-3ubuntu1                    deb\nlibgnutls30          3.7.3-4ubuntu1.1                         deb\nlibgpg-error0        1.43-3                                   deb\nlibgssapi-krb5-2     1.19.2-2                                 deb\nlibhogweed6          3.7.3-1build2                            deb\nlibidn2-0            2.3.2-2build1                            deb\nlibk5crypto3         1.19.2-2                                 deb\nlibkeyutils1         1.6.1-2ubuntu3                           deb\nlibkrb5-3            1.19.2-2                                 deb\nlibkrb5support0      1.19.2-2                                 deb\nliblz4-1             1.9.3-2build2                            deb\nliblzma5             5.2.5-2ubuntu1                           deb\nlibmount1            2.37.2-4ubuntu3                          deb\nlibncurses6          6.3-2                                    deb\nlibncursesw6         6.3-2                                    deb\nlibnettle8           3.7.3-1build2                            deb\nlibnsl2              1.3.0-2build2                            deb\nlibp11-kit0          0.24.0-6build1                           deb\nlibpam-modules       1.4.0-11ubuntu2                          deb\nlibpam-modules-bin   1.4.0-11ubuntu2                          deb\nlibpam-runtime       1.4.0-11ubuntu2                          deb\nlibpam0g             1.4.0-11ubuntu2                          deb\nlibpcre2-8-0         10.39-3ubuntu0.1                         deb\nlibpcre3             2:8.39-13ubuntu0.22.04.1                 deb\nlibprocps8           2:3.3.17-6ubuntu2                        deb\nlibseccomp2          2.5.3-2ubuntu2                           deb\nlibselinux1          3.3-1build2                              deb\nlibsemanage-common   3.3-1build2                              deb\nlibsemanage2         3.3-1build2                              deb\nlibsepol2            3.3-1build1                              deb\nlibsmartcols1        2.37.2-4ubuntu3                          deb\nlibss2               1.46.5-2ubuntu1.1                        deb\nlibssl3              3.0.2-0ubuntu1.7                         deb\nlibstdc++6           12.1.0-2ubuntu1~22.04                    deb\nlibsystemd0          249.11-0ubuntu3.6                        deb\nlibtasn1-6           4.18.0-4build1                           deb\nlibtinfo6            6.3-2                                    deb\nlibtirpc-common      1.3.2-2ubuntu0.1                         deb\nlibtirpc3            1.3.2-2ubuntu0.1                         deb\nlibudev1             249.11-0ubuntu3.6                        deb\nlibunistring2        1.0-1                                    deb\nlibuuid1             2.37.2-4ubuntu3                          deb\nlibxxhash0           0.8.1-1                                  deb\nlibzstd1             1.4.8+dfsg-3build1                       deb\nlogin                1:4.8.1-2ubuntu2                         deb\nlogsave              1.46.5-2ubuntu1.1                        deb\nlsb-base             11.1.0ubuntu4                            deb\nmawk                 1.3.4.20200120-3                         deb\nmount                2.37.2-4ubuntu3                          deb\nncurses-base         6.3-2                                    deb\nncurses-bin          6.3-2                                    deb\npasswd               1:4.8.1-2ubuntu2                         deb\nperl-base            5.34.0-3ubuntu1.1                        deb\nprocps               2:3.3.17-6ubuntu2                        deb\nsed                  4.8-1ubuntu2                             deb\nsensible-utils       0.0.17                                   deb\nsysvinit-utils       3.01-1ubuntu1                            deb\ntar                  1.34+dfsg-1build3                        deb\nubuntu-keyring       2021.03.26                               deb\nusrmerge             25ubuntu2                                deb\nutil-linux           2.37.2-4ubuntu3                          deb\nzlib1g               1:1.2.11.dfsg-2ubuntu9.2                 deb\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Grafana Service in Kubernetes\nDESCRIPTION: Command to port-forward the Grafana service to access it on localhost port 3000, enabling access to the Grafana UI from a local browser.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/grafana 3000\n```\n\n----------------------------------------\n\nTITLE: Creating Opaque Secret in Kubernetes using kubectl\nDESCRIPTION: This command creates a generic secret named 'my-secret' with username and password key-value pairs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day41.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic my-secret --from-literal=username=myuser --from-literal=password=mypassword\n```\n\n----------------------------------------\n\nTITLE: Inspecting Git Commits\nDESCRIPTION: Commands for viewing detailed commit information and file trees\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day39.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit show <commit ID>\ngit show HEAD~1\ngit ls-tree HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Installing Jenkins Using Helm Chart\nDESCRIPTION: This snippet installs Jenkins using a Helm chart with custom values. It deploys Jenkins to the previously created namespace using specified configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchart=jenkinsci/jenkins\nhelm install jenkins -n jenkins -f jenkins-values.yml $chart\n```\n\n----------------------------------------\n\nTITLE: Installing Netmiko Network Automation Module in Python\nDESCRIPTION: Command to install the Netmiko Python module using pip. Netmiko is specifically designed for network device automation and builds on Paramiko with network-specific functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day27.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install netmiko\n```\n\n----------------------------------------\n\nTITLE: Git Push Operations\nDESCRIPTION: Commands for pushing changes to remote repositories, including force pushing, pushing all branches, and pushing tags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push <remote> --force\ngit push <remote> --all\ngit push <remote> --tags\n```\n\n----------------------------------------\n\nTITLE: Executing DAST Scan with ZAP-CLI Against WebGoat Application\nDESCRIPTION: Example command using zap-cli to perform a quick security scan against the WebGoat application. This command runs both a standard and AJAX spider scan against the login page to discover vulnerabilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day20.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzap-cli quick-scan -s all --ajax-spider -r http://127.0.0.1:8080/WebGoat/login.mvc\n```\n\n----------------------------------------\n\nTITLE: Examining Terraform State File Structure in JSON\nDESCRIPTION: A sample Terraform state file in JSON format that stores the current state of infrastructure. This example shows a simple state with an output variable but no resources. The state file contains metadata about the Terraform version, lineage, and outputs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day58.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 4,\n  \"terraform_version\": \"1.1.6\",\n  \"serial\": 1,\n  \"lineage\": \"a74296e7-670d-0cbb-a048-f332696ca850\",\n  \"outputs\": {\n    \"hello_world\": {\n      \"value\": \"Hello, 90DaysOfDevOps from Terraform\",\n      \"type\": \"string\"\n    }\n  },\n  \"resources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Role Main Tasks File\nDESCRIPTION: Main tasks file that imports other task files for MySQL installation and setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks file for roles/mysql\n- import_tasks: install_mysql.yml\n- import_tasks: setup_mysql.yml\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Provider in Terraform\nDESCRIPTION: This snippet shows how to define the AWS provider in a Terraform configuration file, specifying the required provider source and version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day58.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AWS EC2 Instance Resource in Terraform\nDESCRIPTION: This snippet shows how to define an AWS EC2 instance resource in Terraform, including instance type, AMI, availability zone, and user data for installing a web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day58.md#2025-04-17_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami               = data.aws_ami.instance_id.id\n  instance_type     = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n  security_groups   = [aws_security_group.allow_web.name]\n  user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lynis on RHEL/CentOS for Host Vulnerability Scanning\nDESCRIPTION: Command to install the Lynis security scanner on RHEL or CentOS systems using yum package manager. Lynis is used for host-level vulnerability assessment and system hardening.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day32.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install lynis\n```\n\n----------------------------------------\n\nTITLE: Copying and Moving Files with cp and mv Commands in Linux\nDESCRIPTION: Shows how to copy files with cp and move/rename files with mv. These commands are essential for file management operations in Linux environments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncp source.txt destination.txt\ncp -r source_directory destination_directory\nmv old_name.txt new_name.txt\nmv file.txt /path/to/destination/\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault Root Token\nDESCRIPTION: Command to extract the root token from the cluster-keys.json file. This token provides full administrative access to Vault and is needed to enable the secrets engine.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njq -r \".root_token\" cluster-keys.json\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Deployment\nDESCRIPTION: Command to create an execution plan for Terraform, showing what actions will be taken without making any changes to real resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Listing files in a specific commit\nDESCRIPTION: Displays a list of all files in a commit's tree structure, showing file types (blob for files, tree for directories).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-tree HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Volume Permissions\nDESCRIPTION: Sets the correct ownership for the Jenkins data volume inside the Minikube VM. This ensures Jenkins has the necessary permissions to access its data.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nminikube ssh\nsudo chown -R 1000:1000 /data/jenkins-volume\n```\n\n----------------------------------------\n\nTITLE: Installing Minikube using Arkade in Bash\nDESCRIPTION: Command to install Minikube using the Arkade package manager. Arkade simplifies the installation of Kubernetes tools and CLIs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get minikube\n```\n\n----------------------------------------\n\nTITLE: WordPress and MySQL Deployment with Terraform\nDESCRIPTION: Advanced Terraform configuration to deploy WordPress and MySQL containers with networking, volumes, and environment variables. Includes variable definition for WordPress port.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day60.md#2025-04-17_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nvariable wordpress_port {\n  default = \"8080\"\n}\n\nresource \"docker_volume\" \"db_data\" {\n  name = \"db_data\"\n}\n\nresource \"docker_network\" \"wordpress_net\" {\n  name = \"wordpress_net\"\n}\n\nresource \"docker_container\" \"db\" {\n  name  = \"db\"\n  image = \"mysql:5.7\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n     \"MYSQL_ROOT_PASSWORD=wordpress\",\n     \"MYSQL_PASSWORD=wordpress\",\n     \"MYSQL_USER=wordpress\",\n     \"MYSQL_DATABASE=wordpress\"\n  ]\n  mounts {\n    type = \"volume\"\n    target = \"/var/lib/mysql\"\n    source = \"db_data\"\n    }\n}\n\nresource \"docker_container\" \"wordpress\" {\n  name  = \"wordpress\"\n  image = \"wordpress:latest\"\n  restart = \"always\"\n  network_mode = \"wordpress_net\"\n  env = [\n    \"WORDPRESS_DB_HOST=db:3306\",\n    \"WORDPRESS_DB_USER=wordpress\",\n    \"WORDPRESS_DB_NAME=wordpress\",\n    \"WORDPRESS_DB_PASSWORD=wordpress\"\n  ]\n  ports {\n    internal = \"80\"\n    external = \"${var.wordpress_port}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing File Permissions with chmod\nDESCRIPTION: Modifies file permissions using the chmod command with numeric notation 750, giving read/write/execute to owner, read/execute to group, and no permissions to others.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchmod 750 Day15\n```\n\n----------------------------------------\n\nTITLE: Inspecting Kubernetes Resources\nDESCRIPTION: Commands to inspect Kubernetes resources including namespaces, all resources in the pacman namespace, persistent volumes, and persistent volume claims. Used to verify the successful deployment of the stateful application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespace\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n pacman\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pv\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pvc -n pacman\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSH Plugins\nDESCRIPTION: Configuration line to enable git, auto-suggestions, and syntax highlighting plugins in the ZSH shell. This should be added to the .zshrc file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n```\n\n----------------------------------------\n\nTITLE: Generated Network Policy Example\nDESCRIPTION: Example of a generated Kubernetes NetworkPolicy for a nginx pod, allowing ingress traffic on port 80.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  creationTimestamp: null\n  name: nginx-network\n  namespace: default\nspec:\n  ingress:\n  - from:\n    - podSelector: {}\n    ports:\n    - port: 80\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      app: nginx\n  policyTypes:\n  - Ingress\n  - Egress\nstatus: {}\n```\n\n----------------------------------------\n\nTITLE: Package Vulnerability List - System Libraries\nDESCRIPTION: Details of system library package vulnerabilities including libc, ssl, and system utilities. Shows package versions, CVE IDs and severity levels for security tracking.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day14.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2021-35942       Low\nlibc-bin          2.27-3ubuntu1.4                                      deb           CVE-2009-5155        Negligible\nlibc-bin          2.27-3ubuntu1.4                                      deb           CVE-2015-8985        Negligible\nlibc6             2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2021-3999        Medium\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister S3 Profile for Backup Storage\nDESCRIPTION: This command creates a Kanister profile that specifies AWS S3 as the storage location for database backups, using environment variables for AWS credentials.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create profile s3compliant --access-key $ACCESS_KEY --secret-key $SECRET_KEY --bucket $BUCKET --region eu-west-2 --namespace my-production-app\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Service Principal Using Azure CLI\nDESCRIPTION: Azure CLI command to create a Service Principal with Contributor role at the subscription level. Creates and configures the principal in a single command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day45.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp create-for-rbac --name ServicePrincipalName --role Contributor --scopes /subscriptions/<subscription-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Authentication in Vault\nDESCRIPTION: Commands to enable and configure Kubernetes authentication in Vault. This allows Kubernetes pods to authenticate with Vault using their service account token.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nvault auth enable kubernetes\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/kubernetes/config \\\n    kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister ActionSet for MySQL Backup\nDESCRIPTION: This command creates an ActionSet using kanctl to perform a backup of the MySQL database. It specifies the blueprint, statefulset, profile, and secrets needed for the backup operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset --action backup --namespace kanister --blueprint mysql-blueprint --statefulset my-production-app/mysql-store --profile my-production-app/s3-profile-dc5zm --secrets mysql=my-production-app/mysql-store\n```\n\n----------------------------------------\n\nTITLE: Nginx Load Balancer Configuration Template - YAML\nDESCRIPTION: Nginx configuration template for load balancing between two web servers, defining upstream servers and proxy settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day67.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    upstream webservers {\n        server 192.168.169.131:8000;\n        server 192.168.169.132:8000;\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: MongoDB Deployment with PVC and Secret in OpenShift\nDESCRIPTION: YAML configuration for deploying MongoDB in OpenShift with a PersistentVolumeClaim and Secret. The deployment uses an init container to set up permissions, but fails to meet the restricted SCC requirements due to security context configuration issues.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    name: mongo\n  name: mongo\n  namespace: pacman\n  annotations:\n    source: \"https://github.com/saintdle/pacman-tanzu\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: mongo\n  template:\n    metadata:\n      labels:\n        name: mongo\n    spec:\n      initContainers:\n      - args:\n        - |\n          mkdir -p /bitnami/mongodb\n          chown -R \"1001:1001\" \"/bitnami/mongodb\"\n        command:\n        - /bin/bash\n        - -ec\n        image: docker.io/bitnami/bitnami-shell:10-debian-10-r158\n        imagePullPolicy: Always\n        name: volume-permissions\n        resources: {}\n        securityContext:\n          runAsUser: 0\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /bitnami/mongodb\n          name: mongo-db\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: default\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: mongo-db\n        persistentVolumeClaim:\n          claimName: mongo-storage\n      containers:\n      - image: bitnami/mongodb:4.4.8\n        name: mongo\n        env:\n        - name: MONGODB_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              key: database-admin-password\n              name: mongodb-users-secret\n        - name: MONGODB_DATABASE\n          valueFrom:\n            secretKeyRef:\n              key: database-name\n              name: mongodb-users-secret\n        - name: MONGODB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              key: database-password\n              name: mongodb-users-secret\n        - name: MONGODB_USERNAME\n          valueFrom:\n            secretKeyRef:\n              key: database-user\n              name: mongodb-users-secret\n        ports:\n        - name: mongo\n          containerPort: 27017\n        volumeMounts:\n          - name: mongo-db\n            mountPath: /bitnami/mongodb/\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: mongo-storage\n  namespace: pacman\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mongodb-users-secret\n  namespace: pacman\ntype: Opaque \ndata:\n  database-admin-name: Y2x5ZGU=\n  database-admin-password: Y2x5ZGU=\n  database-name: cGFjbWFu\n  database-password: cGlua3k=\n  database-user: Ymxpbmt5\n```\n\n----------------------------------------\n\nTITLE: Generating Falco Key Pair with falcoctl\nDESCRIPTION: Uses falcoctl to generate a key pair for Falco's gRPC communication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day29.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nFALCOCTL_NAME=falco-grpc.default.svc.cluster.local FALCOCTL_PATH=$PWD falcoctl tls install\n```\n\n----------------------------------------\n\nTITLE: Terraform Resource Definition for AVD Workspace-Application Group Association\nDESCRIPTION: Terraform configuration block that associates an application group with a workspace in Azure Virtual Desktop. This association makes the application group available within the specified workspace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day05.md#2025-04-17_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azurerm_virtual_desktop_workspace_application_group_association\" \"ws-dag\" {\n  application_group_id = azurerm_virtual_desktop_application_group.dag.id\n  workspace_id         = azurerm_virtual_desktop_workspace.workspace.id\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kanister Operator in Kubernetes using Helm\nDESCRIPTION: This command installs the Kanister operator in a Kubernetes cluster using Helm, creating a dedicated namespace and specifying the image version 0.75.0.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kanister --namespace kanister kanister/kanister-operator --set image.tag=0.75.0 --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Creating Recovery Signal File for PostgreSQL\nDESCRIPTION: Command to create a recovery.signal file in the base backup directory, which indicates to PostgreSQL that recovery should be performed when the server is started.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntouch /postgres/archive/base/recovery.signal\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Raft Configuration Values File\nDESCRIPTION: Command to create a Helm values file that configures Vault to use high availability mode with Raft consensus protocol. This enables a clustered deployment of Vault.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat > helm-vault-raft-values.yml <<EOF\nserver:\n  affinity: \"\"\n  ha:\n    enabled: true\n    raft: \n      enabled: true\nEOF\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Python\nDESCRIPTION: Demonstrates string concatenation in Python using the + operator. The example combines multiple strings including a space character to create a complete sentence.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day42.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = 'My name is' + ' ' + 'Rishab'\nprint(x) # outputs: My name is Rishab\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Storage Support\nDESCRIPTION: Command to start a minikube cluster with necessary addons for storage functionality. This configuration enables volumesnapshots and the CSI hostpath driver, which provides the storage class needed for persistent volumes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p mc-demo --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: MySQL Installation Tasks in Ansible\nDESCRIPTION: Tasks for installing MySQL server, client, Python dependencies, and ensuring the service is running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - python3-pip\n   - mysql-client\n   - python3-mysqldb\n   - libmysqlclient-dev\n\n- name: Ensure mysql-server is installed latest version\n  apt: name=mysql-server state=latest\n\n- name: Installing python module MySQL-python\n  pip:\n    name: PyMySQL\n\n- name: Ensure mysql-server is running\n  service:\n    name: mysql\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister S3 Profile for Backup Storage\nDESCRIPTION: This command creates a Kanister profile that configures an S3-compatible object storage location for storing and retrieving database backups.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create profile s3compliant --access-key $ACCESS_KEY --secret-key $SECRET_KEY --bucket $BUCKET --region eu-west-2 --namespace my-production-app\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic AWS Credentials\nDESCRIPTION: Command to request dynamic credentials for AWS based on the previously created developer role. This generates temporary credentials with the permissions defined in the role.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day38.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvault read aws/creds/developer\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot and Backing Up to Google Cloud Storage\nDESCRIPTION: Command to create a snapshot of a local directory and back it up to the configured Google Cloud Storage repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day86.md#2025-04-17_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config kopia snapshot create \"C:\\Users\\micha\\demo\\90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Editing Kubernetes Resources\nDESCRIPTION: Commands for modifying existing Kubernetes resources like services.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit svc/servicename\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Ubuntu Docker Container\nDESCRIPTION: Command to run an Ubuntu Docker container in interactive mode with a bash shell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day44.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Creating LDAP Secret in OpenShift\nDESCRIPTION: This command creates a secret in OpenShift containing the LDAP bind password. It's used to securely store the password for the domain account that OpenShift uses to connect to the LDAP server for user lookups.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ oc create secret generic ldap-secret --from-literal=bindPassword=<secret> -n openshift-config \n\n# my example\noc create secret generic ldap-secret --from-literal=bindPassword=VMware1! -n openshift-config\n```\n\n----------------------------------------\n\nTITLE: Running Container with Non-Root User\nDESCRIPTION: Command to run a container with a specific non-root user ID, overriding any user specified in the Dockerfile for enhanced security.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day47.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --user 1009 ubuntu\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nginx Configuration with Variables (Jinja2)\nDESCRIPTION: This Jinja2 template for Nginx configuration uses both Ansible facts and user-defined variables to create a dynamic upstream server list.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day68.md#2025-04-17_snippet_5\n\nLANGUAGE: Jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n  {% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:{{ http_port }};\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {\n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Project\nDESCRIPTION: Command to initialize a Terraform working directory by downloading providers defined in the configuration files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: MySQL Installation Tasks in Ansible\nDESCRIPTION: An Ansible task file for installing MySQL server, client, Python dependencies, and ensuring the service is running. It installs necessary packages including Python modules for MySQL interaction.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - python3-pip\n   - mysql-client\n   - python3-mysqldb\n   - libmysqlclient-dev\n\n- name: Ensure mysql-server is installed latest version\n  apt: name=mysql-server state=latest\n\n- name: Installing python module MySQL-python\n  pip:\n    name: PyMySQL\n\n- name: Ensure mysql-server is running\n  service:\n    name: mysql\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Persistent Storage Add-ons\nDESCRIPTION: Command to start Minikube with volume snapshots and CSI hostpath driver add-ons for persistent storage support.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day55.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p mc-demo --Kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: User Creation Shell Script with Password Setting\nDESCRIPTION: A shell script that takes both username and password as command-line arguments, creates a user account, and sets the password using the chpasswd command. Note that this approach is not secure for production use.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1 user account being created.\"\n\n#A user is created with the name of command line argument\nsudo useradd -m \"$1\"\n\n#A password can be parsed in as a command line argument.\nsudo chpasswd <<< \"$1\":\"$2\"\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Vault Unseal Keys\nDESCRIPTION: Commands to extract the unseal key from the JSON file, store it in a variable, and use it to unseal the first Vault pod (vault-0). The unseal process decrypts Vault's storage to make it accessible.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njq -r \".unseal_keys_b64[]\" cluster-keys.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nVAULT_UNSEAL_KEY=$(jq -r \".unseal_keys_b64[]\" cluster-keys.json)\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY\n```\n\n----------------------------------------\n\nTITLE: Registering a Kubernetes Master Node with Rancher Agent\nDESCRIPTION: Docker command to register a node as both etcd and control-plane components in a Rancher-managed Kubernetes cluster. This configures the node to serve as a master in the cluster with the specified token and CA checksum.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day53.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --etcd --controlplane\n```\n\n----------------------------------------\n\nTITLE: Installing Podman on Ubuntu 20.04 (WSL2)\nDESCRIPTION: This snippet shows how to add the Podman repository, install GPG key, and install Podman on Ubuntu 20.04 running in WSL2.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day48.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /\" |\nsudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L \"https://download.opensuse.org/repositories/devel:/kubic:\n/libcontainers:/stable/xUbuntu_20.04/Release.key\" | sudo apt-key add -\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get upgrade\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install podman\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Non-Root User\nDESCRIPTION: This command demonstrates how to run a Docker container with a specified non-root user ID, overriding any user specified in the Dockerfile for improved security.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day47.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --user 1009 ubuntu\n```\n\n----------------------------------------\n\nTITLE: Configuring a Multinode Kubernetes Cluster with Vagrant\nDESCRIPTION: This Vagrantfile defines the configuration for a 3-node Kubernetes cluster with 1 control plane node and 2 worker nodes. It specifies the VM resources, networking, and provisioning scripts to be executed during deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day52.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nNUM_WORKER_NODES=2\nIP_NW=\"10.0.0.\"\nIP_START=10\n\nVagrant.configure(\"2\") do |config|\n    config.vm.provision \"shell\", inline: <<-SHELL\n        apt-get update -y\n        echo \"$IP_NW$((IP_START))  master-node\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+1))  worker-node01\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+2))  worker-node02\" >> /etc/hosts\n    SHELL\n    config.vm.box = \"bento/ubuntu-21.10\"\n    config.vm.box_check_update = true\n\n    config.vm.define \"master\" do |master|\n      master.vm.hostname = \"master-node\"\n      master.vm.network \"private_network\", ip: IP_NW + \"#{IP_START}\"\n      master.vm.provider \"virtualbox\" do |vb|\n          vb.memory = 4048\n          vb.cpus = 2\n          vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n      end\n      master.vm.provision \"shell\", path: \"scripts/common.sh\"\n      master.vm.provision \"shell\", path: \"scripts/master.sh\"\n    end\n\n    (1..NUM_WORKER_NODES).each do |i|\n      config.vm.define \"node0#{i}\" do |node|\n        node.vm.hostname = \"worker-node0#{i}\"\n        node.vm.network \"private_network\", ip: IP_NW + \"#{IP_START + i}\"\n        node.vm.provider \"virtualbox\" do |vb|\n            vb.memory = 2048\n            vb.cpus = 1\n            vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n        end\n        node.vm.provision \"shell\", path: \"scripts/common.sh\"\n        node.vm.provision \"shell\", path: \"scripts/node.sh\"\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Printing Variable Types in Go\nDESCRIPTION: This example shows how to print the types of variables using the %T format specifier in Printf.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day11.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Printf(\"challenge is %T, daystotal is %T, dayscomplete is %T\\n\", conference, daystotal, dayscomplete)\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Network Automation Python Modules\nDESCRIPTION: Commands to install additional Python modules useful for network automation: netaddr for IP address manipulation and xlrd for reading Excel spreadsheets containing network configuration data.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day27.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install netaddr\npip install xlrd\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Docker Container\nDESCRIPTION: Command to run Prometheus as a Docker container with port mapping\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day78.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Deploying Jenkins using Helm\nDESCRIPTION: This command installs Jenkins in the Kubernetes cluster using Helm. It specifies the namespace, values file, and chart to use for the deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchart=jenkinsci/jenkins\nhelm install jenkins -n jenkins -f jenkins-values.yml $chart\n```\n\n----------------------------------------\n\nTITLE: Scanning Kubernetes Manifest with KubeSec in Shell\nDESCRIPTION: This shell command demonstrates how to use the KubeSec tool to scan a Kubernetes manifest file (kubesec-test.yaml) for security issues. The output shows various security recommendations and explanations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day23.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ kubesec scan kubesec-test.yaml\n[\n  {\n    \"object\": \"Pod/kubesec-demo.default\",\n    \"valid\": true,\n    \"message\": \"Passed with a score of 0 points\",\n    \"score\": 0,\n    \"scoring\": {\n      \"advise\": [\n        {\n          \"selector\": \".metadata .annotations .\\\"container.seccomp.security.alpha.kubernetes.io/pod\\\"\",\n          \"reason\": \"Seccomp profiles set minimum privilege and secure against unknown threats\"\n        },\n        {\n          \"selector\": \".spec .serviceAccountName\",\n          \"reason\": \"Service accounts restrict Kubernetes API access and should be configured with least privilege\"\n        },\n        {\n          \"selector\": \"containers[] .securityContext .runAsNonRoot == true\",\n          \"reason\": \"Force the running image to run as a non-root user to ensure least privilege\"\n        },\n        {\n          \"selector\": \".metadata .annotations .\\\"container.apparmor.security.beta.kubernetes.io/nginx\\\"\",\n          \"reason\": \"Well defined AppArmor policies may provide greater protection from unknown threats. WARNING: NOT PRODUCTION READY\"\n        },\n        {\n          \"selector\": \"containers[] .resources .requests .memory\",\n          \"reason\": \"Enforcing memory requests aids a fair balancing of resources across the cluster\"\n        },\n        {\n          \"selector\": \"containers[] .securityContext .runAsUser -gt 10000\",\n          \"reason\": \"Run as a high-UID user to avoid conflicts with the host's user table\"\n        },\n        {\n          \"selector\": \"containers[] .resources .limits .cpu\",\n          \"reason\": \"Enforcing CPU limits prevents DOS via resource exhaustion\"\n        },\n        {\n          \"selector\": \"containers[] .resources .requests .cpu\",\n          \"reason\": \"Enforcing CPU requests aids a fair balancing of resources across the cluster\"\n        },\n        {\n          \"selector\": \"containers[] .securityContext .readOnlyRootFilesystem == true\",\n          \"reason\": \"An immutable root filesystem can prevent malicious binaries being added to PATH and increase attack cost\"\n        },\n        {\n          \"selector\": \"containers[] .securityContext .capabilities .drop\",\n          \"reason\": \"Reducing kernel capabilities available to a container limits its attack surface\"\n        },\n        {\n          \"selector\": \"containers[] .resources .limits .memory\",\n          \"reason\": \"Enforcing memory limits prevents DOS via resource exhaustion\"\n        },\n        {\n          \"selector\": \"containers[] .securityContext .capabilities .drop | index(\\\"ALL\\\")\",\n          \"reason\": \"Drop all capabilities and add only those required to reduce syscall attack surface\"\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Improved Jinja2 Template with Variable References\nDESCRIPTION: This improved Nginx configuration template uses both Ansible facts and user-defined variables to create a more flexible and dynamic configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_4\n\nLANGUAGE: jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n\t{% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:{{ http_port }};\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Executing Ping Module Against a Defined Host Group\nDESCRIPTION: This command runs the ping module against systems defined in the 'windows' group in the hosts inventory file. It demonstrates targeting specific groups defined in the Ansible inventory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day64.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nansible windows -m ping\n```\n\n----------------------------------------\n\nTITLE: Terraform Hello World Example\nDESCRIPTION: A simple Terraform configuration that outputs a hello world message. This example demonstrates the basic structure of a Terraform file with an output variable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day58.md#2025-04-17_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  # This module is now only being tested with Terraform 0.13.x. However, to make upgrading easier, we are setting\n  # 0.12.26 as the minimum version, as that version added support for required_providers with source URLs, making it\n  # forwards compatible with 0.13.x code.\n  required_version = \">= 0.12.26\"\n}\n\n# website::tag::1:: The simplest possible Terraform module: it just outputs \"Hello, World!\"\noutput \"hello_world\" {\n  value = \"Hello, 90DaysOfDevOps from Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Service Module Command for Webservers\nDESCRIPTION: A practical example of using Ansible's service module to ensure the httpd service is running across all systems in the 'webservers' group.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day64.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nansible webservers --m service -a \"name=httpd state=started\"\n```\n\n----------------------------------------\n\nTITLE: Simulating Data Loss in PostgreSQL\nDESCRIPTION: SQL command to delete all records from the test_table, simulating a data loss scenario that will require point-in-time recovery.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM test_table\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX to Kubernetes using Terraform\nDESCRIPTION: A Terraform configuration that defines a Kubernetes deployment with NGINX. The code creates a namespace, a deployment with 2 replicas, and a NodePort service to expose the application on port 30201.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \">= 2.0.0\"\n    }\n  }\n}\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\nresource \"kubernetes_namespace\" \"test\" {\n  metadata {\n    name = \"nginx\"\n  }\n}\nresource \"kubernetes_deployment\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    replicas = 2\n    selector {\n      match_labels = {\n        app = \"MyTestApp\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"MyTestApp\"\n        }\n      }\n      spec {\n        container {\n          image = \"nginx\"\n          name  = \"nginx-container\"\n          port {\n            container_port = 80\n          }\n        }\n      }\n    }\n  }\n}\nresource \"kubernetes_service\" \"test\" {\n  metadata {\n    name      = \"nginx\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    selector = {\n      app = kubernetes_deployment.test.spec.0.template.0.metadata.0.labels.app\n    }\n    type = \"NodePort\"\n    port {\n      node_port   = 30201\n      port        = 80\n      target_port = 80\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Storage Support\nDESCRIPTION: Command to start Minikube with volume snapshots and CSI hostpath driver addons enabled, configuring the API server port, container runtime, and Kubernetes version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p mc-demo --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Testing Network Policy with Unlabeled Pod\nDESCRIPTION: Demonstrates that an unlabeled pod cannot access the Nginx service after applying the network policy.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run curl --rm -ti --image=curlimages/curl:latest -- sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --connect-timeout 1 nginx\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Public Key to Linux Server\nDESCRIPTION: Command to copy the SSH public key to a Linux server for key-based authentication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nssh-copy-id vagrant@192.168.169.135\n```\n\n----------------------------------------\n\nTITLE: Removing files in Linux\nDESCRIPTION: The 'rm' command deletes files. The 'rm -R' option recursively removes directories and their contents, while 'rm -R -f' forces removal without prompting.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nrm AnotherDay\n```\n\n----------------------------------------\n\nTITLE: Testing Communication to Bookinfo App\nDESCRIPTION: Executes a curl command from the sleep pod to the productpage service to verify connectivity before applying security policies.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec \"$(kubectl get pod -l app=sleep -n sleep -o jsonpath={.items..metadata.name})\" -c sleep -n sleep -- curl productpage.default.svc.cluster.local:9080 -s -o /dev/null -w \"%{http_code}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining Common Variables for Ansible Playbook\nDESCRIPTION: This YAML snippet defines common variables used across the Ansible playbook, including HTTP and HTTPS ports and a welcome message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Vault to Kubernetes using Helm\nDESCRIPTION: Command to install Vault to a dedicated namespace in the Kubernetes cluster using Helm and the previously created values file. This creates a new namespace called 'vault'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install vault hashicorp/vault --namespace vault --values helm-vault-raft-values.yml --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Deploying Rancher as a Docker Container\nDESCRIPTION: This command pulls and runs the Rancher container with the necessary port mappings (80, 443) and privileges to manage Kubernetes clusters from your local machine.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day53.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform using arkade in Linux\nDESCRIPTION: This command demonstrates how to install Terraform CLI using the arkade tool on a Linux system. Arkade provides a simple way to install tools like Terraform without dealing with manual downloads or package management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day57.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get terraform\n```\n\n----------------------------------------\n\nTITLE: Deleting Jenkins Pod for Restart\nDESCRIPTION: Command to delete the Jenkins pod to trigger a restart. This is often done after fixing volume permissions to ensure Jenkins starts with the correct configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod jenkins-0 -n jenkins\n```\n\n----------------------------------------\n\nTITLE: Deploying EFK Stack to Kubernetes Cluster\nDESCRIPTION: Using kubectl to create resources defined in the efk-stack.yaml file. This YAML contains definitions for Elasticsearch, Fluentd, and Kibana components in the kube-logging namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day82.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f efk-stack.yaml\n```\n\n----------------------------------------\n\nTITLE: Nginx Load Balancer Configuration Template\nDESCRIPTION: J2 template for nginx configuration defining upstream webservers and proxy settings for load balancing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day67.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    upstream webservers {\n        server 192.168.169.131:8000;\n        server 192.168.169.132:8000;\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring FluentBit in Kubernetes via ConfigMap\nDESCRIPTION: A comprehensive FluentBit configuration for Kubernetes that sets up log collection from containers and systemd, with outputs to Elasticsearch. Includes parser configuration, input sources, filters, and multiple output streams.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day81.md#2025-04-17_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n[PARSER]\n    Name docker_no_time\n    Format json\n    Time_Keep Off\n    Time_Key time\n    Time_Format %Y-%m-%dT%H:%M:%S.%L\n\n[SERVICE]\n    Daemon Off\n    Flush 1\n    Log_Level info\n    Parsers_File parsers.conf\n    Parsers_File custom_parsers.conf\n    HTTP_Server On\n    HTTP_Listen 0.0.0.0\n    HTTP_Port 2020\n    Health_Check On\n\n[INPUT]\n    Name tail\n    Path /var/log/containers/*.log\n    multiline.parser docker, cri\n    Tag kube.*\n    Mem_Buf_Limit 5MB\n    Skip_Long_Lines On\n\n[INPUT]\n    Name systemd\n    Tag host.*\n    Systemd_Filter _SYSTEMD_UNIT=kubelet.service\n    Read_From_Tail On\n\n[FILTER]\n    Name kubernetes\n    Match kube.*\n    Merge_Log On\n    Keep_Log Off\n    K8S-Logging.Parser On\n    K8S-Logging.Exclude On\n\n[OUTPUT]\n    Name es\n    Match kube.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Retry_Limit False\n\n[OUTPUT]\n    Name es\n    Match host.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Logstash_Prefix node\n    Retry_Limit False\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform AWS Provider\nDESCRIPTION: HCL code block showing how to define the AWS provider in Terraform. This specifies the version requirement and source for the AWS provider.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day58.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running NGINX Container with Port Mapping\nDESCRIPTION: Command to run an NGINX container with port mapping from host port 8080 to container port 80, enabling external access to the web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day47.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name web1 -d -p 8080:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Create Ingress Configuration\nDESCRIPTION: Command to create an Ingress resource from a YAML configuration file\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting an Existing MySQL Client Pod\nDESCRIPTION: This command removes an existing MySQL client pod if one is already running in the application namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n ${APP_NAME} mysql-client\n```\n\n----------------------------------------\n\nTITLE: Applying MySQL Blueprint to Kanister\nDESCRIPTION: Command to create the MySQL Blueprint custom resource in the Kanister namespace, enabling backup and restore operations for MySQL databases.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f mysql-blueprint.yml -n kanister\n```\n\n----------------------------------------\n\nTITLE: Using Short Variable Declaration in Go\nDESCRIPTION: Demonstrates the short variable declaration syntax (:=) which is a more concise way to declare variables in Go. This syntax can only be used for variables, not constants.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day11.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n    challenge := \"#90DaysOfDevOps\"\n    const daystotal = 90\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Quota for OpenShift Project\nDESCRIPTION: This YAML configuration defines a ResourceQuota object to limit CPU and memory consumption for a project. It sets both requests and limits for these resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: my-resource-quota\nspec:\n  hard:\n    requests.cpu: \"2\"\n    requests.memory: 2Gi\n    limits.cpu: \"4\"\n    limits.memory: 4Gi\n```\n\n----------------------------------------\n\nTITLE: Installing Common Packages with Ansible Role\nDESCRIPTION: This YAML snippet defines a task for installing common packages across all servers using the apt module with a loop. It installs neofetch, tree, and figlet packages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day67.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - neofetch\n   - tree\n   - figlet\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Directories with mkdir and rmdir in Linux\nDESCRIPTION: Shows how to create new directories with mkdir and remove empty directories with rmdir. Includes examples of creating nested directories with the -p flag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir new_directory\nmkdir -p parent_directory/child_directory\nrmdir directory_to_remove\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Users and Groups with PowerShell\nDESCRIPTION: This snippet demonstrates how to create users and groups in Azure Active Directory using PowerShell for automated, large-scale management. It's mentioned as an alternative to manual creation through the Azure portal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day30.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Example PowerShell commands for bulk user and group creation in Azure AD\n# (Note: This is a conceptual example, not actual code provided in the text)\n\n# Connect to Azure AD\nConnect-AzureAD\n\n# Create a new user\nNew-AzureADUser -DisplayName \"New User\" -UserPrincipalName \"newuser@90DaysOfDevOps.com\" -PasswordProfile $PasswordProfile -AccountEnabled $true\n\n# Create a new group\nNew-AzureADGroup -DisplayName \"90DaysOfDevOps Users\" -MailEnabled $false -SecurityEnabled $true -Description \"Group for 90DaysOfDevOps users\"\n\n# Add user to group\nAdd-AzureADGroupMember -ObjectId \"<group-object-id>\" -RefObjectId \"<user-object-id>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Install Config with OpenShift-Install\nDESCRIPTION: Command to run the wizard that creates only the install-config.yaml file which can be modified before cluster creation. This is useful for customizing deployment parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day58.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenshift-install create install-config\n```\n\n----------------------------------------\n\nTITLE: Finding ClusterRoleBindings for a Service Account\nDESCRIPTION: Command to list all ClusterRoleBindings that are associated with the kube-proxy service account. This shows which cluster-wide roles are assigned to the kube-proxy service account.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get clusterrolebindings -o wide | grep kube-proxy\n```\n\n----------------------------------------\n\nTITLE: Applying MySQL Blueprint to Kanister\nDESCRIPTION: This command creates the Kanister Blueprint in the Kubernetes cluster, which defines the operations for MySQL backup and restoration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f mysql-blueprint.yml -n kanister\n```\n\n----------------------------------------\n\nTITLE: Declarative Kubernetes Pipeline Example\nDESCRIPTION: Basic Jenkins pipeline script demonstrating Kubernetes pod configuration and simple command execution using declarative syntax.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day73.md#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent {\n        kubernetes {\n            yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: shell\n    image: ubuntu\n    command:\n    - sleep\n    args:\n    - infinity\n'''\n            defaultContainer 'shell'\n        }\n    }\n    stages {\n        stage('Main') {\n            steps {\n                sh 'hostname'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Running Container Resource Limits\nDESCRIPTION: Demonstrates how to verify resource limits for a running container using Docker inspect command. This allows administrators to confirm that limits have been properly applied.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect nginx\n```\n\n----------------------------------------\n\nTITLE: Verifying Interface Assignment in Namespaces\nDESCRIPTION: Commands to verify that the virtual interfaces have been properly assigned to their respective namespaces. Shows the namespace-specific network configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec red ip link list\nsudo ip netns exec blue ip link list\n```\n\n----------------------------------------\n\nTITLE: Using Variables and User Input in Bash Scripts\nDESCRIPTION: Shows how to define and use variables in a bash script, including accepting user input.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day19.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchallenge=\"90DaysOfDevOps\"\necho \"Enter your name\"\nread name\n```\n\n----------------------------------------\n\nTITLE: Setting up EFK Stack in Minikube with kubectl\nDESCRIPTION: Command to create the EFK stack deployment in a Kubernetes cluster using a pre-defined YAML file. This deploys Elasticsearch, Fluentd, and Kibana in the kube-logging namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day82.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f efk-stack.yaml\n```\n\n----------------------------------------\n\nTITLE: Working with Tuples in Python\nDESCRIPTION: Shows how to create a tuple and access its elements. Tuples are immutable data structures similar to lists but cannot be changed once created. This example includes a nested list within the tuple.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day44.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_tuple = (1, 2, [4, 5])\nprint(my_tuple[0])   # OUTPUT 1\nprint(my_tuple[2])   # OUTPUT \"three\"\nprint(my_tuple[3][0]) # OUTPUT 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Settings\nDESCRIPTION: Commands for configuring Git user settings and aliases globally and system-wide. Includes setting up user name, email, command aliases, and editor preferences.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name <name>\ngit config --global user.email <email>\ngit config --global alias <alias-name> <git-command>\ngit config --system core.editor <editor>\ngit config --global --edit\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Grafana Service\nDESCRIPTION: Command to set up port forwarding for accessing Grafana service on localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day83.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/grafana 3000\n```\n\n----------------------------------------\n\nTITLE: Adding Jenkins Helm Repository\nDESCRIPTION: Command to add the official Jenkins Helm chart repository to the local Helm configuration. This repository contains the chart needed to deploy Jenkins.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add jenkinsci https://charts.jenkins.io\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Pod\nDESCRIPTION: Command to delete the mongo-0 pod in the pacman namespace for testing persistence\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod mongo-0 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Deploying AWX Operator in Kubernetes\nDESCRIPTION: Bash commands for setting up the AWX namespace and deploying the AWX operator in a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day69.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=awx\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Managing Jenkins Kubernetes Pod\nDESCRIPTION: This snippet deletes and monitors the Jenkins pod to apply volume permission changes. It ensures the Jenkins pod is properly restarted with the correct permissions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod jenkins-0 -n jenkins\n\nkubectl get pods -n jenkins -w\n```\n\n----------------------------------------\n\nTITLE: Conditional Task Example in Ansible\nDESCRIPTION: A task example showing how to use conditionals in Ansible playbooks to execute commands based on the operating system type. This demonstrates how to shut down only Debian-based systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks: \n  - name: \"shut down Debian flavoured systems\"\n    command: /sbin/shutdown -t now \n    when: ansible_os_family == \"Debian\"\n```\n\n----------------------------------------\n\nTITLE: Checking Kanister Profiles in Kubernetes Namespace\nDESCRIPTION: This command lists the Kanister profiles in the my-production-app namespace, which are used to configure backups.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get profiles.cr.kanister.io -n my-production-app\n```\n\n----------------------------------------\n\nTITLE: Defining Apache2 Handlers in YAML\nDESCRIPTION: YAML configuration for Apache2 handlers, specifically for restarting the Apache2 service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day66.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart apache\n  service:\n    name: apache2\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Docker Container Network Inspection Commands\nDESCRIPTION: Collection of Docker commands for inspecting and managing container networks, including listing networks, inspecting bridge networks, and running containers with network configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day47.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker network\ndocker network list\ndocker network inspect bridge\ndocker run -dt ubuntu sleep infinity\ndocker exec -it 3a99af449ca2 bash\napt-get update && apt-get install -y iputils-ping\nping -c5 www.90daysofdevops.com\ndocker run --name web1 -d -p 8080:80 nginx\ndocker run --user 1009 ubuntu\n```\n\n----------------------------------------\n\nTITLE: Mounting a Disk in Linux\nDESCRIPTION: These commands create a mount point and mount a disk to make it accessible in the file system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day16.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkdir /mnt/NewDisk\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo mount /dev/sdb newdisk\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Ingress Gateway in YAML\nDESCRIPTION: This YAML snippet defines an Istio Gateway resource that listens for HTTP traffic on port 80 for any host. It selects the default Istio ingress gateway controller.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: bookinfo-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Application in Detached Mode\nDESCRIPTION: This command starts the Docker Compose application defined in the docker-compose.yml file in detached mode, allowing it to run in the background.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day46.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Hello World Terraform Example\nDESCRIPTION: Simple Terraform configuration demonstrating basic output functionality with version constraints.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day58.md#2025-04-17_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # This module is now only being tested with Terraform 0.13.x. However, to make upgrading easier, we are setting\n  # 0.12.26 as the minimum version, as that version added support for required_providers with source URLs, making it\n  # forwards compatible with 0.13.x code.\n  required_version = \">= 0.12.26\"\n}\n\n# website::tag::1:: The simplest possible Terraform module: it just outputs \"Hello, World!\"\noutput \"hello_world\" {\n  value = \"Hello, 90DaysOfDevOps from Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Remaining Days Based on User Input in Go\nDESCRIPTION: This code snippet shows how to perform a calculation based on user input. It subtracts the user-provided DaysCompleted from a predefined remainingDays variable to calculate the number of days left in a challenge.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day12.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nremainingDays = remainingDays - DaysCompleted\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for PostgreSQL\nDESCRIPTION: Creates a custom bridge network for Docker containers to communicate using container names.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day66.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create postgres\n```\n\n----------------------------------------\n\nTITLE: Adding User to Sudo Group\nDESCRIPTION: This command demonstrates how to add a user to the sudo group, granting them administrative privileges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nusermod -a -G sudo NewUser\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status in Kubernetes Namespace\nDESCRIPTION: This command retrieves the current status of all pods in the 'kube-logging' namespace, providing a snapshot of the EFK stack deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day82.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Creating Minikube Tunnel for Ingress Access\nDESCRIPTION: Command to create a Minikube tunnel for accessing the Ingress. This is necessary when running Minikube on WSL2 in Windows to enable external access to the cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nminikube tunnel --profile=mc-demo\n```\n\n----------------------------------------\n\nTITLE: Deploying Sleep App from Istio Samples\nDESCRIPTION: Deploys the sleep application from Istio samples to the sleep namespace to test inter-service communication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd istio-1.16.1\nkubectl apply -f samples/sleep/sleep.yaml -n sleep\n```\n\n----------------------------------------\n\nTITLE: Applying Jenkins Persistent Volume Configuration\nDESCRIPTION: Command to create a persistent volume for Jenkins using a predefined YAML configuration file. This ensures Jenkins data persists across pod restarts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-volume.yml\n```\n\n----------------------------------------\n\nTITLE: Searching command history in Linux\nDESCRIPTION: You can search your command history for specific terms by piping the history output to grep, helping you find previously used commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nhistory | grep \"Komut\"\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Service Module on Webservers\nDESCRIPTION: Example command to start the httpd service on all systems in the 'webservers' group using the Ansible service module.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day64.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nansible webservers -m service -a \"name=httpd state=started\"\n```\n\n----------------------------------------\n\nTITLE: Using chmod with Octal Notation in Linux\nDESCRIPTION: Example showing how to change file permissions using chmod with octal notation. The command sets permissions for the file 'new_file.txt' to read/write/execute for the owner, read/write for the group, and read-only for others.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day49.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod 764 new_file.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing ArgoCD Admin Password\nDESCRIPTION: Command to retrieve the initial admin password for ArgoCD from the Kubernetes secret, decoded from base64.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day76.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d && echo\n```\n\n----------------------------------------\n\nTITLE: MySQL Backup and Restore Blueprint for Kanister\nDESCRIPTION: YAML definition for a Kanister Blueprint that defines backup, restore, and delete operations for a MySQL database. This specifies how to dump data, push to S3, and restore from S3.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cr.kanister.io/v1alpha1\nkind: Blueprint\nmetadata:\n  name: mysql-blueprint\nactions:\n  backup:\n    outputArtifacts:\n      mysqlCloudDump:\n        keyValue:\n          s3path: \"{{ .Phases.dumpToObjectStore.Output.s3path }}\"\n    phases:\n    - func: KubeTask\n      name: dumpToObjectStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"/mysql-backups/{{ .StatefulSet.Namespace }}/{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}/{{ toDate \"2006-01-02T15:04:05.999999999Z07:00\" .Time  | date \"2006-01-02T15-04-05\" }}/dump.sql.gz\"\n          root_password=\"{{ index .Phases.dumpToObjectStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          mysqldump --column-statistics=0 -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }} --single-transaction --all-databases | gzip - | kando location push --profile '{{ toJson .Profile }}' --path ${s3_path} -\n          kando output s3path ${s3_path}\n  restore:\n    inputArtifactNames:\n    - mysqlCloudDump\n    phases:\n    - func: KubeTask\n      name: restoreFromBlobStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"{{ .ArtifactsIn.mysqlCloudDump.KeyValue.s3path }}\"\n          root_password=\"{{ index .Phases.restoreFromBlobStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          kando location pull --profile '{{ toJson .Profile }}' --path ${s3_path} - | gunzip | mysql -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}\n  delete:\n    inputArtifactNames:\n    - mysqlCloudDump\n    phases:\n    - func: KubeTask\n      name: deleteFromBlobStore\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .Namespace.Name }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"{{ .ArtifactsIn.mysqlCloudDump.KeyValue.s3path }}\"\n          kando location delete --profile '{{ toJson .Profile }}' --path ${s3_path}\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster with Custom Configuration in Bash\nDESCRIPTION: Command to start a Minikube cluster with custom configurations including API server port, container runtime, and Kubernetes version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd --kubernetes-version=1.23.1\n```\n\n----------------------------------------\n\nTITLE: Upgrading Falco with Custom Rules Using Helm\nDESCRIPTION: Helm command to upgrade the Falco installation with a custom rule file. The command configures Falco to use eBPF for monitoring and sets up certificates for secure communication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day30.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install  falco falcosecurity/falco --set driver.kind=ebpf --set-file certs.server.key=$PWD/server.key,certs.server.crt=$PWD/server.crt,certs.ca.crt=$PWD/ca.crt --set falco.grpc.enabled=true,falco.grpcOutput.enabled=true,falco.grpc_output.enabled=true -f <PATH_TO_RULE_YAML>\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Feature Branch onto Main in Git\nDESCRIPTION: Commands for rebasing a feature branch onto the main branch. This approach rewrites project history by creating new commits for each original commit, resulting in a cleaner, linear project history compared to merging.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feature\ngit rebase main\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Upstream Servers with Variable Port\nDESCRIPTION: This Jinja2 template configures Nginx upstream servers, using a variable for the HTTP port and Ansible facts for server names.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_4\n\nLANGUAGE: jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n\t{% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:{{ http_port }};\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Apache Web Server with Ansible Playbook\nDESCRIPTION: Ansible playbook that installs Apache, configures ports, creates an index page, and ensures the service is running. Uses variables for port configuration and welcome message. Includes handlers for service restart when configurations change.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day65.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps\"\n  tasks:\n  - name: ensure apache is at the latest version\n    apt:\n      name: apache2\n      state: latest\n\n  - name: write the apache2 ports.conf config file\n    template:\n      src: templates/ports.conf.j2\n      dest: /etc/apache2/ports.conf\n    notify:\n    - restart apache\n\n  - name: write a basic index.html file\n    template:\n      src: templates/index.html.j2\n      dest: /var/www/html/index.html\n    notify:\n    - restart apache\n\n  - name: ensure apache is running\n    service:\n      name: apache2\n      state: started\n\n  handlers:\n    - name: restart apache\n      service:\n        name: apache2\n        state: restarted\n```\n\n----------------------------------------\n\nTITLE: Istio Virtual Service with Traffic Shifting\nDESCRIPTION: This YAML configuration defines a virtual service for the reviews microservice that splits traffic between v1 (70%) and v3 (30%) subsets.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 70\n    - destination:\n        host: reviews\n        subset: v3\n      weight: 30\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources\nDESCRIPTION: Commands for removing resources from a Kubernetes cluster, supporting both stdin and file-based deletion.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete pod\n```\n\n----------------------------------------\n\nTITLE: Viewing commit history in reverse chronological order\nDESCRIPTION: Displays the commit history starting from the first commit instead of the default most recent first order.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline --reverse\n```\n\n----------------------------------------\n\nTITLE: Ansible Playbook with Database Configuration (YAML)\nDESCRIPTION: This playbook includes a new play block for database configuration, introducing the MySQL role and demonstrating how to organize playbooks for different server types.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags:\n    web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: \n    proxy\n\n- hosts: database\n  become: yes\n  roles:\n    - common\n    - mysql\n  tags: database\n```\n\n----------------------------------------\n\nTITLE: Find and replace text globally in vim\nDESCRIPTION: Demonstrates how to use vim's search and replace functionality to replace all occurrences of a word in a file. The command shown replaces all instances of 'Day' with '90DaysOfDevOps'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day17.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n:%s/Day/90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Individual Blog Posts\nDESCRIPTION: HTML template for displaying individual blog posts, rendering the Markdown content as HTML.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ title }}</title>\n</head>\n<body>\n    <h1>{{ title }}</h1>\n    <div>{{ content|safe }}</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Common Variables for Ansible Playbook\nDESCRIPTION: This YAML file defines common variables used across the Ansible playbook, including ports, messages, and MySQL configuration details.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day68.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n\nmysql_user_name: root\nmysql_user_password: \"vagrant\"\ndb_user: devops\ndb_pass: DevOps90\ndb_name: 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Deploying Prometheus Operator and Grafana to Kubernetes\nDESCRIPTION: Command to deploy the Prometheus Operator, Grafana, and related monitoring components to the Kubernetes cluster using the provided manifests.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f manifests/\n```\n\n----------------------------------------\n\nTITLE: Deploying Asynchronous Application Components\nDESCRIPTION: Command to deploy the asynchronous communication pattern application components using a Kubernetes manifest file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day2-ops-code/README.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f async/k8s.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Prometheus and Grafana Resources\nDESCRIPTION: Kubectl command to deploy all necessary resources for Prometheus and Grafana in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day83.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f manifests/\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Cluster Information Commands\nDESCRIPTION: Basic kubectl commands to verify cluster connectivity and get node information from a local workstation after configuring kubeconfig.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day52.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Restoring Previous Versions\nDESCRIPTION: Commands for restoring files from previous commits\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day39.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --source=HEAD~1 README.md\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Usage Playbook\nDESCRIPTION: Demonstrates how to include and use the role in an Ansible playbook with variables passed as parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Configmgmt/ansible-scenario4/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Cluster Status\nDESCRIPTION: Commands to check the status of Kubernetes nodes and pods across all namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -o wide\nkubectl get pods -A\n```\n\n----------------------------------------\n\nTITLE: Installing Inspektor Gadget with Krew\nDESCRIPTION: Commands to install the Inspektor Gadget controller using Krew package manager and deploy gadgets in the cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl krew install gadget\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl gadget deploy\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Docker Container\nDESCRIPTION: Command to run Prometheus as a Docker container on localhost port 9090\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day78.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Bot with Go\nDESCRIPTION: Complete implementation of a Twitter bot that authenticates with Twitter API and posts status updates about #90DaysOfDevOps challenge progress. Includes credential handling, client setup, and user input processing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day13.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n    {\n        const DaysTotal int = 90\n        var remainingDays uint = 90\n        challenge := \"#90DaysOfDevOps\"\n\n        fmt.Printf(\"Welcome to the %v challenge.\\nThis challenge consists of %v days\\n\", challenge, DaysTotal)\n\n        var TwitterName string\n        var DaysCompleted uint\n\n        fmt.Println(\"Enter Your Twitter Handle: \")\n        fmt.Scanln(&TwitterName)\n\n        fmt.Println(\"How many days have you completed?: \")\n        fmt.Scanln(&DaysCompleted)\n\n        remainingDays = remainingDays - DaysCompleted\n\n        client, err := getClient(&creds)\n        if err != nil {\n            log.Println(\"Error getting Twitter Client, this is expected if you did not supply your Twitter API tokens\")\n            log.Println(err)\n        }\n\n        message := fmt.Sprintf(\"Hey I am %v I have been doing the %v for %v days and I have %v Days left\", TwitterName, challenge, DaysCompleted, remainingDays)\n        tweet, resp, err := client.Statuses.Update(message, nil)\n        if err != nil {\n            log.Println(err)\n        }\n        log.Printf(\"%+v\\n\", resp)\n        log.Printf(\"%+v\\n\", tweet)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Bot Functionality in Go\nDESCRIPTION: This Go code implements a Twitter bot that can authenticate with the Twitter API and send tweets. It uses the go-twitter library for API interactions and oauth1 for authentication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day13.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    fmt.Println(\"Go-Twitter Bot v0.01\")\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n\n    client, err := getClient(&creds)\n    if err != nil {\n        log.Println(\"Error getting Twitter Client\")\n        log.Println(err)\n    }\n\n    tweet, resp, err := client.Statuses.Update(\"A Test Tweet from the future, testing a #90DaysOfDevOps Program that tweets, tweet tweet\", nil)\n    if err != nil {\n        log.Println(err)\n    }\n    log.Printf(\"%+v\\n\", resp)\n    log.Printf(\"%+v\\n\", tweet)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Jenkins Namespace in Kubernetes\nDESCRIPTION: Commands to create a dedicated namespace for Jenkins in the Kubernetes cluster. This can be done either with a direct kubectl command or by applying a YAML configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace jenkins or kubectl create -f jenkins-namespace.yml\n```\n\n----------------------------------------\n\nTITLE: Calculating Remaining Days in Go\nDESCRIPTION: This code snippet shows how to perform a simple calculation to determine the number of remaining days based on user input in a Go program.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day12.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nremainingDays = remainingDays - DaysCompleted\n```\n\n----------------------------------------\n\nTITLE: Hello World Terraform Configuration\nDESCRIPTION: Simple Terraform configuration that outputs a hello world message. Demonstrates basic output functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day58.md#2025-04-17_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_version = \">= 0.12.26\"\n}\n\noutput \"hello_world\" {\n  value = \"Hello, 90DaysOfDevOps from Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kanister Profiles in Kubernetes\nDESCRIPTION: Command to list Kanister profiles in the my-production-app namespace. Profiles contain connection information for backup destinations like S3.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get profiles.cr.kanister.io -n my-production-app\n```\n\n----------------------------------------\n\nTITLE: Viewing and Changing File Permissions with chmod in Linux\nDESCRIPTION: Demonstrates how to view file permissions with ls -l and modify them with chmod. Includes examples of both symbolic notation (u+x) and numeric notation (755) for permission changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nls -l file.txt\nchmod u+x file.txt\nchmod 755 file.txt\n```\n\n----------------------------------------\n\nTITLE: Conditional Task Example in Ansible Playbook\nDESCRIPTION: An example task that uses conditionals to execute commands based on the target system's operating system family. This demonstrates how Ansible can apply different configurations to different types of systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks: \n  - name: \"shut down Debian flavoured systems\"\n    command: /sbin/shutdown -t now \n    when: ansible_os_family == \"Debian\"\n```\n\n----------------------------------------\n\nTITLE: Unix Kubernetes Config Path\nDESCRIPTION: Default path for storing Kubernetes configuration file on Unix-based systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day52.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n$HOME/.kube/config\n```\n\n----------------------------------------\n\nTITLE: Pull Request Template Example\nDESCRIPTION: Markdown template for creating a pull request with structured sections for description, changes made, related issues, and checklists. This helps maintainers understand the purpose and scope of your contribution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day29.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n\nPlease include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.\n\nFixes # (issue)\n\n## Type of change\n\nPlease delete options that are not relevant.\n\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] This change requires a documentation update\n\n## How Has This Been Tested?\n\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration.\n\n- [ ] Test A\n- [ ] Test B\n\n## Checklist:\n\n- [ ] My code follows the style guidelines of this project\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n- [ ] Any dependent changes have been merged and published in downstream modules\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Cluster Nodes with kubectl in Bash\nDESCRIPTION: Command to list all nodes in the Kubernetes cluster using kubectl, demonstrating basic cluster interaction.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Installing Loki Stack with Helm in Kubernetes\nDESCRIPTION: Installs the Loki stack including Promtail for log collection in a Kubernetes cluster using Helm.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day29.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install loki --namespace=monitoring grafana/loki-stack\n```\n\n----------------------------------------\n\nTITLE: Defining Apache2 Tasks in YAML\nDESCRIPTION: YAML configuration for Apache2 tasks including ensuring latest version, configuring ports, writing index.html, and ensuring the service is running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day66.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: ensure apache is at the latest version\n  apt: name=apache2 state=latest\n\n- name: write the apache2 ports.conf config file\n  template: \n    src=templates/ports.conf.j2 \n    dest=/etc/apache2/ports.conf\n  notify: restart apache\n\n- name: write a basic index.html file\n  template:\n    src: templates/index.html.j2\n    dest: /var/www/html/index.html\n  notify:\n  - restart apache\n\n- name: ensure apache is running\n  service:\n    name: apache2\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment in Linux/MacOS\nDESCRIPTION: Command to create a virtual environment in Linux or MacOS using Python3's venv module.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv /path/to/new/virtual/environment\n```\n\n----------------------------------------\n\nTITLE: Hosts File Configuration for Node Resolution\nDESCRIPTION: A hosts file configuration that maps IP addresses to hostnames for the Ansible control node and managed nodes. This allows for name resolution across the infrastructure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day65.md#2025-04-17_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n192.168.169.140 ansible-control\n192.168.169.130 db01\n192.168.169.131 web01\n192.168.169.132 web02\n192.168.169.133 loadbalancer\n```\n\n----------------------------------------\n\nTITLE: Deploying Istio Sample Addons in Kubernetes\nDESCRIPTION: Command to deploy the observability tools (Prometheus, Grafana, Jaeger, Kiali) included in the Istio sample addons.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/addons\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter API Authentication and Tweet Posting in Go\nDESCRIPTION: Complete code example showing how to authenticate with Twitter API using OAuth credentials and post tweets using the go-twitter library. The code handles Twitter API authentication setup, credential management through environment variables, and tweet posting functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\n\nfunc main() {\n    fmt.Println(\"Go-Twitter Bot v0.01\")\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n\n    client, err := getClient(&creds)\n    if err != nil {\n        log.Println(\"Error getting Twitter Client\")\n        log.Println(err)\n    }\n\n    tweet, resp, err := client.Statuses.Update(\"A Test Tweet from the future, testing a #90DaysOfDevOps Program that tweets, tweet tweet\", nil)\n    if err != nil {\n        log.Println(err)\n    }\n    log.Printf(\"%+v\\n\", resp)\n    log.Printf(\"%+v\\n\", tweet)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Program with Variables and Constants\nDESCRIPTION: Extended program that uses both a variable for the challenge name and a constant for the total number of days. This demonstrates the difference between variables and constants in Go.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day11.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    const daystotal = 90\n\n    fmt.Println(\"Welcome to\", challenge, \"\")\n    fmt.Println(\"This is a\", daystotal, \"challenge\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Ingress Addon in Minikube\nDESCRIPTION: This command enables the ingress addon for a Minikube profile named 'mc-demo'. It's necessary to set up ingress functionality in the Minikube cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nminikube --profile='mc-demo' addons enable ingress\n```\n\n----------------------------------------\n\nTITLE: Handlers for MySQL Service Restart in Ansible\nDESCRIPTION: A handler definition for restarting the MySQL service used by Ansible when configuration changes require a service restart.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart mysql\n  service:\n    name: mysql\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Installing Podman on Ubuntu 20.04 WSL2 - Adding Repository\nDESCRIPTION: Command to add the OpenSUSE repository for Podman installation on Ubuntu 20.04 running in WSL2. This adds the necessary package source to the APT sources list.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day48.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /\" |\nsudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list\n```\n\n----------------------------------------\n\nTITLE: Basic DELETE Statement Structure in SQL\nDESCRIPTION: The fundamental structure of a DELETE statement in SQL, showing the syntax for removing rows from a table with filtering conditions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM table\nWHERE some_condition\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom httpfuzz Plugin in Go\nDESCRIPTION: A Go implementation of the httpfuzz Listener interface that logs response codes from HTTP requests. This plugin provides feedback about the results of the fuzzing requests by capturing and displaying response status codes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day17.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"bytes\"\n    \"io/ioutil\"\n    \"log\"\n\n    \"github.com/joncooperworks/httpfuzz\"\n)\n\ntype logResponseCodePlugin struct {\n    logger *log.Logger\n}\n\nfunc (b *logResponseCodePlugin) Listen(results <-chan *httpfuzz.Result) {\n    for result := range results {\n        b.logger.Printf(\"Got %d response from the server\\n\", result.Response.StatusCode)\n    }\n}\n\n// New returns a logResponseCodePlugin plugin that simple logs the response code of the response.\nfunc New(logger *log.Logger) (httpfuzz.Listener, error) {\n    return &logResponseCodePlugin{logger: logger}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Minikube Ingress\nDESCRIPTION: Command to enable the Ingress addon on a Minikube cluster with profile 'mc-demo'\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nminikube --profile='mc-demo' addons enable ingress\n```\n\n----------------------------------------\n\nTITLE: Initializing Minikube Cluster\nDESCRIPTION: Start a local Kubernetes cluster using Minikube.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Restarting Jenkins Pod and Monitoring Deployment\nDESCRIPTION: Deletes the Jenkins pod to trigger a restart and monitors the pod status. This ensures the Jenkins deployment is running with the correct configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod jenkins-0 -n jenkins\n\nkubectl get pods -n jenkins -w\n```\n\n----------------------------------------\n\nTITLE: Opening ZSH Configuration File\nDESCRIPTION: Command to open the ZSH configuration file (.zshrc) for editing. This file contains settings that control the behavior and appearance of the ZSH shell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kubernetes Pod Status with Watch Command\nDESCRIPTION: Command to watch the status of Kasten K10 pods during deployment, ensuring all components are successfully running before proceeding with disaster recovery setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day89.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kasten-io -w\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider in Terraform\nDESCRIPTION: Basic AWS provider configuration block specifying the source and version requirements for the AWS provider.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day58.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Template\nDESCRIPTION: Template file for MySQL configuration defining bind address.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n[mysql]    \nbind-address = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Push Changes\nDESCRIPTION: Series of Git commands to stage, commit, and push changes back to the forked repository\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day41.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit status\ngit add .\ngit commit -m \"added Kanister presentation links to readme\" \ngit push\n```\n\n----------------------------------------\n\nTITLE: Terraform Variable Definition Example\nDESCRIPTION: Example of defining a sensitive variable in Terraform with description, type, and sensitivity flag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day59.md#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"some resource\"  {\n    description = \"something important\"\n    type: string\n    sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret in Kubernetes\nDESCRIPTION: Kubernetes command to create a secret for Docker registry credentials. This secret is used to authenticate with DockerHub when pushing images from the Jenkins Pipeline.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day73.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry dockercred \\\n    --docker-server=https://index.docker.io/v1/ \\\n    --docker-username=<dockerhub-username> \\\n    --docker-password=<dockerhub-password>\\\n    --docker-email=<dockerhub-email>\n```\n\n----------------------------------------\n\nTITLE: Vagrant Configuration for Multi-Node Test Environment\nDESCRIPTION: A Vagrant configuration file that sets up multiple Ubuntu nodes for testing Ansible playbooks. Defines four servers including database, web servers, and load balancer with specific IP addresses and SSH ports.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  servers=[\n    {\n      :hostname => \"db01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.130\",\n      :ssh_port => '2210'\n    },\n    {\n      :hostname => \"web01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.131\",\n      :ssh_port => '2211'\n    },\n    {\n      :hostname => \"web02\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.132\",\n      :ssh_port => '2212'\n    },\n    {\n      :hostname => \"loadbalancer\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.134\",\n      :ssh_port => '2213'\n    }\n\n  ]\n\nconfig.vm.base_address = 600\n\n  servers.each do |machine|\n\n    config.vm.define machine[:hostname] do |node|\n      node.vm.box = machine[:box]\n      node.vm.hostname = machine[:hostname]\n    \n      node.vm.network :public_network, bridge: \"Intel(R) Ethernet Connection (7) I219-V\", ip: machine[:ip]\n      node.vm.network \"forwarded_port\", guest: 22, host: machine[:ssh_port], id: \"ssh\"\n\n      node.vm.provider :virtualbox do |v|\n        v.customize [\"modifyvm\", :id, \"--memory\", 2048]\n        v.customize [\"modifyvm\", :id, \"--name\", machine[:hostname]]\n      end\n    end\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Terraform Configuration for AWS EC2 Instance\nDESCRIPTION: This snippet presents a complete Terraform configuration file for deploying an AWS EC2 instance with a web server. It includes provider configuration, resource definition, and user data script.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day58.md#2025-04-17_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 0.14.9\"\n}\n\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-west-2\"\n}\n\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n    user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n  }\n\n  tags = {\n    Name = \"ExampleAppServerInstance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Playbook with Database Configuration\nDESCRIPTION: Extended playbook including web servers, proxy, and database configurations with role assignments and tags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags:\n    web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags:\n    proxy\n\n- hosts: database\n  become: yes\n  roles:\n    - common\n    - mysql\n  tags: database\n```\n\n----------------------------------------\n\nTITLE: Capturing User Input in Python\nDESCRIPTION: Shows how to receive user input with the input() function and store it in variables. Demonstrates using formatted strings to display the captured input.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day47.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDay = input(\"What day is it? \")\nprint(Day)\n\nprint(f\"Today is {Day}\")\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl using Arkade in Bash\nDESCRIPTION: Command to install kubectl, the Kubernetes command-line tool, using Arkade package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\narkade get kubectl\n```\n\n----------------------------------------\n\nTITLE: Testing Connectivity to Product Page Service\nDESCRIPTION: Uses the sleep pod to execute a curl command to test connectivity to the productpage service running on port 9080, verifying the service mesh is functioning correctly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec sleep-75bbc86479-xw5lw -c sleep -- curl -sS productpage:9080\n```\n\n----------------------------------------\n\nTITLE: Adding Password Setting Functionality to User Creation Script\nDESCRIPTION: This snippet further enhances the script by adding the ability to set a password for the newly created user account using command-line arguments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1 user account being created.\"\n\n#A user is created with the name of command line argument\nsudo useradd -m \"$1\"\n\n#A password can be parsed in as a command line argument.\nsudo chpasswd <<< \"$1\":\"$2\"\n```\n\n----------------------------------------\n\nTITLE: Querying Container CPU Usage with PromQL\nDESCRIPTION: A basic PromQL query example to monitor container CPU usage in a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day78.md#2025-04-17_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\ncontainer_cpu_usage_seconds_total\n```\n\n----------------------------------------\n\nTITLE: MySQL Bind Address Configuration Template\nDESCRIPTION: Template for MySQL configuration to allow remote connections by binding to all interfaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[mysql]    \nbind-address = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Applying Strict mTLS PeerAuthentication Policy\nDESCRIPTION: Creates and applies an Istio PeerAuthentication policy with STRICT mTLS mode to the istio-system namespace, enforcing mTLS for all communication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: \"default\"\n  namespace: \"istio-system\"\nspec:\n  mtls:\n    mode: STRICT\nEOF\n```\n\n----------------------------------------\n\nTITLE: Restarting Metricbeat Container after Configuration Changes\nDESCRIPTION: This command shows how to restart the Metricbeat container after making changes to its configuration. It uses Docker Compose with the same files as the initial run command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml restart metricbeat\n```\n\n----------------------------------------\n\nTITLE: Using Short Status in Git\nDESCRIPTION: Demonstrates how to use the short format of git status for a more concise output using the -s flag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit status -s\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Namespaces\nDESCRIPTION: Command to list all namespaces in the Kubernetes cluster, used to verify the initial state before deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespace\n```\n\n----------------------------------------\n\nTITLE: Running Docker Getting Started Container\nDESCRIPTION: Command to run the Docker getting started container in detached mode, mapping port 80.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day44.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 docker/getting-started\n```\n\n----------------------------------------\n\nTITLE: Running Filebeat with Docker Compose\nDESCRIPTION: Command to start Docker Compose with Filebeat included in the stack. This uses an additional compose file to add Filebeat to the base configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Añadiendo Archivos al Staging Area en Git\nDESCRIPTION: Comando para añadir todos los archivos del directorio actual al staging area de Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Repository on Ubuntu 20.04\nDESCRIPTION: Commands to add the Podman repository to Ubuntu 20.04 package sources. This adds the OpenSUSE repository for libcontainers to the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day48.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /\" |\nsudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Required Storage Addons\nDESCRIPTION: Command to start Minikube with the necessary addons (volumesnapshots and csi-hostpath-driver) needed for testing stateful applications with persistent storage.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p mc-demo --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Database with Sample Data\nDESCRIPTION: This script creates a new database named 'myImportantData', creates an Accounts table and populates it with sample data for testing backup and restore operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"create database myImportantData;\" | mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD}\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho \"drop table Accounts\" | ${MYSQL_EXEC}\necho \"create table if not exists Accounts(name text, balance integer); insert into Accounts values('nick', 0);\" |  ${MYSQL_EXEC}\necho \"insert into Accounts values('albert', 112);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('alfred', 358);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('beatrice', 1321);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('bartholomew', 34);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edward', 5589);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwin', 144);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwina', 233);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('rastapopoulos', 377);\" | ${MYSQL_EXEC}\necho \"select * from Accounts;\" |  ${MYSQL_EXEC}\nexit\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for DockerHub Credentials\nDESCRIPTION: This kubectl command creates a Kubernetes secret containing DockerHub credentials. This secret is used by the Jenkins Pipeline to authenticate with DockerHub when pushing images.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day73.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry dockercred \\\n    --docker-server=https://index.docker.io/v1/ \\\n    --docker-username=<dockerhub-username> \\\n    --docker-password=<dockerhub-password>\\\n    --docker-email=<dockerhub-email>\n```\n\n----------------------------------------\n\nTITLE: Annotating Kubernetes VolumeSnapshotClass for Kasten K10\nDESCRIPTION: Command to annotate the csi-hostpath-snapclass volumesnapshotclass so that Kasten K10 can use it for creating volume snapshots.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate volumesnapshotclass csi-hostpath-snapclass \\\n    k10.kasten.io/is-snapshot-class=true\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files in Git\nDESCRIPTION: Explains how to ignore files and directories in Git using the .gitignore file. This is useful for excluding files that should not be tracked, such as log files or local configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day38.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"logs/\" >> .gitignore\ngit add .gitignore\ngit commit -m \"Added .gitignore file\"\n```\n\n----------------------------------------\n\nTITLE: Testing Authorization with curl from Sleep Pod in Kubernetes\nDESCRIPTION: This command executes a curl request from a sleep pod to the product page service, showing the HTTP status code. It's used to verify if authorization policies are working correctly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec \"$(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name})\" -c sleep  -- curl productpage.default.svc.cluster.local:9080 -s -o /dev/null -w \"%{http_code}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Manipulation in Go\nDESCRIPTION: This code shows how to perform a simple calculation by subtracting the user-provided value from an existing variable. This enables the program to calculate remaining days in the challenge.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day12.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nremainingDays = remainingDays - DaysCompleted\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Secrets Engine in Vault\nDESCRIPTION: Command to enable the AWS secrets engine on a specific path in Vault. This is the first step in setting up dynamic credential generation for AWS.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day38.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault secrets engine -path=cloud aws\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with APM Server Extension\nDESCRIPTION: Command to start Docker Compose with the APM Server extension included. This combines the main docker-compose.yml file with the APM server-specific compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/apm-server/apm-server-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Commands\nDESCRIPTION: Commands for creating, switching between, and merging Git branches. These facilitate parallel development workflows and feature isolation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Command      | Example                    | Description                                                                                                   |\n| ------------ | -------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| git branch   | `git branch`               | List all of the branches in your repo. Add a \\<branch> argument to create a new branch with the name \\<branch>. |\n| git checkout | `git checkout -b <branch>` | Create and check out a new branch named \\<branch>. Drop the -b flag to checkout an existing branch.            |\n| git merge    | `git merge <branch>`       | Merge \\<branch> into the current branch.                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Commits in Git\nDESCRIPTION: Use the 'git show' command to view details of a specific commit, including changes made in that commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit show <commit ID>\ngit show HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Defining Ansible Playbook with Tags for Web and Proxy Servers\nDESCRIPTION: This YAML snippet defines an Ansible playbook with two plays, one for webservers and one for proxy servers. It uses tags to allow selective execution of plays.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Undoing Changes\nDESCRIPTION: Git commands used to revert changes, reset staged files, and clean untracked files from the working directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit revert <commit>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit reset <file>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -n\n```\n\n----------------------------------------\n\nTITLE: Removing Files from Git Repository\nDESCRIPTION: Command to remove a file from both the working directory and the Git repository. This stages the deletion for the next commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit rm oldcode.ps1\n```\n\n----------------------------------------\n\nTITLE: Examining ClusterRole Permissions\nDESCRIPTION: Command to retrieve the detailed YAML definition of the system:node-proxier ClusterRole. This shows the specific permissions granted to this role, including permissions to interact with endpoints, services, nodes, and events.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get clusterrole system:node-proxier -o yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Resources with kubectl in Kubernetes\nDESCRIPTION: Basic kubectl commands for listing various resources in a Kubernetes cluster, including nodes, namespaces, and pods. These commands help administrators and developers to view resources in the default or specific namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\nkubectl get namespaces\nkubectl get pods\nkubectl get pods -n name\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Services and Removing Volumes\nDESCRIPTION: This command stops the running Docker Compose services and also removes the associated volumes, completely cleaning up the environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day46.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubuntu Desktop VM with Vagrant\nDESCRIPTION: This Vagrantfile defines the configuration for an Ubuntu Desktop 20.04 virtual machine. It specifies the base box, memory allocation, CPU count, and video memory settings for use with VirtualBox.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day14.md#2025-04-17_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"chenhan/ubuntu-desktop-20.04\"\n  config.vm.provider :virtualbox do |v|\n   v.memory  = 8096\n   v.cpus    = 4\n   v.customize [\"modifyvm\", :id, \"--vram\", \"128mb\"]\nend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Client in Go\nDESCRIPTION: Complete Go implementation for authenticating with Twitter API and sending tweets. The code defines credential structures, authentication functions, and a basic tweet posting mechanism.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day13.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    fmt.Println(\"Go-Twitter Bot v0.01\")\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n\n    client, err := getClient(&creds)\n    if err != nil {\n        log.Println(\"Error getting Twitter Client\")\n        log.Println(err)\n    }\n\n    tweet, resp, err := client.Statuses.Update(\"A Test Tweet from the future, testing a #90DaysOfDevOps Program that tweets, tweet tweet\", nil)\n    if err != nil {\n        log.Println(err)\n    }\n    log.Printf(\"%+v\\n\", resp)\n    log.Printf(\"%+v\\n\", tweet)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Services and Resources\nDESCRIPTION: Kubectl commands to list services and all resources in the monitoring namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n monitoring\nkubbell get all -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Entries for Ansible Environment\nDESCRIPTION: Example entries for the /etc/hosts file to enable name resolution for the Ansible control node and managed nodes. This configuration ensures proper connectivity between nodes in the environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day65.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n192.168.169.140 ansible-control\n192.168.169.130 db01\n192.168.169.131 web01\n192.168.169.132 web02\n192.168.169.133 loadbalancer\n```\n\n----------------------------------------\n\nTITLE: Applying Jenkins Configurations\nDESCRIPTION: Apply volume and service account configurations for Jenkins.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-volume.yml\nkubectl apply -f jenkins-sa.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Jenkins Namespace\nDESCRIPTION: Create a dedicated namespace for Jenkins deployment using kubectl.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace jenkins\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project in OpenShift\nDESCRIPTION: Command to create a new project named 'rbac-test-ns' in OpenShift.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ oc new-project rbac-test-ns\n```\n\n----------------------------------------\n\nTITLE: Mounting a New Disk\nDESCRIPTION: These commands create a mount point and mount the new disk.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /mnt/NewDisk\nsudo mount /dev/sdb /mnt/newdisk\n```\n\n----------------------------------------\n\nTITLE: Example Playbook Usage for Ansible Role\nDESCRIPTION: Demonstrates how to include and use the Ansible role in a playbook, with an example of passing a variable. This snippet shows the basic structure for applying the role to servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Configmgmt/ansible-scenario3/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Exiting vim without changes in command mode\nDESCRIPTION: Shows the command sequence to exit vim without saving any changes. The user must press escape to enter command mode, then type :q to quit without saving.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day17.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n:q\n```\n\n----------------------------------------\n\nTITLE: Using Local-Exec Provisioner in Terraform\nDESCRIPTION: An example of using the local-exec provisioner with Terraform to execute a command locally after a resource is created. This specific example prints the container's IP address after deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day60.md#2025-04-17_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"docker_container\" \"db\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo The server's IP address is ${self.private_ip}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Declaration for Variables in Go\nDESCRIPTION: Example showing how to explicitly declare variable types in Go when not assigning an initial value. This is necessary when you want to define a variable without initializing it.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day11.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar TwitterHandle string\nvar DaysCompleted uint\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository and Updating on Linux\nDESCRIPTION: These commands add the Git repository, update the package list, install Git, and check the version on a Linux system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day36.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:git-core/ppa -y\nsudo apt-get update\nsudo apt-get install git -y\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Running the Docker Getting Started Container\nDESCRIPTION: Command to download and run the Docker getting-started container in detached mode with port 80 mapped from the container to the host.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day44.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 docker/getting-started\n```\n\n----------------------------------------\n\nTITLE: Creating Standby Minikube Cluster for Disaster Recovery\nDESCRIPTION: Creating a new Minikube cluster to act as a standby for disaster recovery purposes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day89.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p standby --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kubernetes Service in Bash\nDESCRIPTION: This command sets up port forwarding to access the Pacman service running in the Kubernetes cluster. It forwards local port 9090 to port 80 of the service named 'pacman' in the 'pacman' namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/pacman 9090:80 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu System using apt Package Manager\nDESCRIPTION: This command updates the package lists for upgrades and new package installations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Setting Default StorageClass in Kubernetes\nDESCRIPTION: Commands to patch the StorageClass configuration in Kubernetes, making csi-hostpath-sc the default StorageClass and removing the default annotation from the standard StorageClass.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket and DynamoDB Table for Terraform Remote State\nDESCRIPTION: Terraform configuration to create the AWS infrastructure required for remote state management. This code defines an S3 bucket with versioning enabled and a DynamoDB table with a LockID primary key to handle state locking.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day64.md#2025-04-17_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = var.aws_region\n}\n\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket = var.bucket_name\n\n  # Prevent accidental deletion of this S3 bucket\n  lifecycle {\n    prevent_destroy = true\n  }\n\n  # Enable versioning so we can see the full revision history of our\n  # state files\n  versioning {\n    enabled = true\n  }\n\n  # Enable server-side encryption by default\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n}\n\nresource \"aws_dynamodb_table\" \"terraform_locks\" {\n  name         = var.table_name\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pod Security Policy in Kubernetes\nDESCRIPTION: A YAML configuration for a Pod Security Policy that restricts privileges by disallowing privilege escalation, root containers, and host paths. This policy demonstrates security best practices for Pod deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day61.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: restricted\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes:\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  runAsUser:\n    rule: 'MustRunAsNonRoot'\n  seLinux:\n    rule: 'RunAsAny'\n  supplementalGroups:\n    rule: 'MustRunAs'\n    ranges:\n      - min: 1\n        max: 65535\n  fsGroup:\n    rule: 'MustRunAs'\n    ranges:\n      - min: 1\n        max: 65535\n  readOnlyRootFilesystem: false\n```\n\n----------------------------------------\n\nTITLE: Hello World in Python\nDESCRIPTION: The classic \"Hello World\" example demonstrating how to use the print function to output text to the console. Print is one of Python's built-in functions that outputs text and automatically adds a newline character.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day42.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Audit Logs\nDESCRIPTION: Retrieves and filters the logs from the Kubernetes API server to show only audit events. This command helps in monitoring API operations for security and troubleshooting purposes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day28.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs kube-apiserver-minikube -n kube-system | grep audit.k8s.io/v1\n```\n\n----------------------------------------\n\nTITLE: Working with Git Remote Repositories\nDESCRIPTION: Commands for managing connections to remote repositories, including adding remotes, fetching, pulling, and pushing code changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Command           |           Example                       |           Description                                                                                                                 | \n| ---------------   |   ------------------------------------- |   ----------------------------------------------------------------------------------------------------------------------------------- |\n| git remote add    | `git remote add <name> <url>`           | Create a new connection to a remote repo. After adding a remote, you can use <name> as a shortcut for <url> in other commands.        |\n| git fetch         | `git fetch <remote> <branch>`           | Fetches a specific <branch>, from the repo. Leave off <branch> to fetch all remote refs.                                              |\n| git pull          | `git pull <remote>`                     | Fetch the specified remote's copy of current branch and immediately merge it into the local copy.                                     |\n| git push          | `git push <remote> <branch>`            | Push the branch to <remote>, along with necessary commits and objects. Creates named branch in the remote repo if it doesn't exist.   |\n```\n\n----------------------------------------\n\nTITLE: Creating File Shares in Azure Storage Account\nDESCRIPTION: Demonstration of creating file shares within an Azure storage account, which provides SMB2.1 and 3.0 file sharing capabilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day32.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud6.png)\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Ping Module on Windows Group\nDESCRIPTION: Command to run the Ansible ping module against the 'windows' group defined in the hosts file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day64.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nansible windows -m ping\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Settings\nDESCRIPTION: Commands for configuring Git settings, including user identity, command aliases, editor preferences, and editing configuration files directly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                                               |           Example                                      |           Description                                                                                                                         | \n| ----------------------------------------------------- |   ---------------------------------------------------- |   ------------------------------------------------------------------------------------------------------------------------------------------- |\n| git config --global user.name <name>                  | `git config --global user.name <name>`                 | Define the author name to be used for all commits by the current user.                                                                        |\n| git config --global user.email <email>                | `git config --global user.email <email>`               | Define author email to be used for all commits by the current user.                                                                           |\n| git config --global alias <alias-name> <git-command>  | `git config --global alias <alias-name> <git-command>` | Create shortcut for a git command .                                                                                                           |\n| git config --system core.editor <editor>              | `git config --system core.editor <editor>`             | Set the text editor to be used by commands for all users on the machine. <editor> arg should be the comamnd that launches the desired editor. |\n| git config --global --edit                            | `git config --global --edit `                          | Open the global configuration file in a text editor for manual editing.                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Region\nDESCRIPTION: HCL code showing how to specify the AWS region where resources will be deployed using the provider block.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day58.md#2025-04-17_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nprovider \"aws\" {\n  region = \"ap-southeast-1\" //region where resources need to be deployed\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Filebeat Extension\nDESCRIPTION: Command to start Docker Compose with an additional Filebeat configuration file. This allows Filebeat to be included in the stack alongside other services.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Running a Container in Detached Mode\nDESCRIPTION: Command to run a Docker container in detached mode (background), with port forwarding and volume mounting for development.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day38.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 5000:5000 -v $(pwd):/app my-python-app\n```\n\n----------------------------------------\n\nTITLE: Checking Istio System Pods in Kubernetes\nDESCRIPTION: Command to verify that all observability pods are running correctly in the istio-system namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Monitoring\nDESCRIPTION: Command to create the necessary namespace and resources for setting up monitoring in a Kubernetes cluster using the setup manifests.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f manifests/setup\n```\n\n----------------------------------------\n\nTITLE: Implementing Ansible Role in YAML Playbook\nDESCRIPTION: This snippet demonstrates how to include an Ansible role in a playbook. It shows the basic structure of assigning a role to hosts and passing parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Configmgmt/ansible-scenario6/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Formatting a New Disk\nDESCRIPTION: This command formats a new disk (/dev/sdb) with the ext4 filesystem.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkfs -t ext4 /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Implementing API-Level Test Workflow in Python with Hedra\nDESCRIPTION: This snippet demonstrates how to create a workflow-based test that simulates an authorized user searching for a book by author. It uses Hedra's workflow model to define concurrent test steps with dependencies between them, showing how API interactions can be structured as a graph rather than sequential operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# An example simulating, from API level, an authorized user\n# searching for a book by author.\n\nimport os\nfrom hedra import (\n    Workflow, \n    step,\n)\nfrom hedra.core.engines import (\n    HTTPResult,\n    HTTP2Result\n)\nfrom typing import Literal, Optional\n\n\nclass Test(Workflow):\n    vus=1000\n    duration='1m'\n    username=os.getenv('USERNAME')\n    password=os.getenv('PASSWORD')\n\n    def get_book_title(self) -> Literal['Shakespeare Collected Works']:\n        return 'Shakespeare Collected Works'\n    \n    @step()\n    async def login_via_api(self) -> HTTP2Result:\n        return await self.client.http2.post(\n            'https://myapi.com/api/v1/login',\n            auth=(\n                self.username,\n                self.password\n            )\n        )\n\n    @step('login_via_api')\n    async def get_book(\n        self,\n        auth_response: HTTP2Result\n    ) -> HTTPResult:\n        auth_token = response.headers.get('X-API-TOKEN')\n        title = self.get_book_title()\n\n        return await self.client.http.get(\n            f'https://myapi.com/api/v1/books?title={title}',\n            headers={\n                'X-API-TOKEN': auth_token\n            }\n        )\n    \n    @step('login_via_api')\n    async def get_author(\n        self,\n        auth_response: HTTP2Result\n    ) -> HTTPResult:\n        auth_token = response.headers.get('X-API-TOKEN')\n\n        return await self.client.http.get(\n            'https://myapi.com/api/v1/authors?author=william&shakespeare',\n            headers={\n                'X-API-TOKEN': auth_token\n            }\n        )\n```\n\n----------------------------------------\n\nTITLE: Running an Interactive Ubuntu Container with Bash Shell\nDESCRIPTION: Command to run an Ubuntu container in interactive mode with a bash shell prompt, allowing direct interaction with the container environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day44.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Comparison of Cloud-Specific vs Cloud-Agnostic IaC Tools\nDESCRIPTION: A comparison table showing cloud-specific Infrastructure as Code tools versus cloud-agnostic solutions, highlighting the limitation of cloud-specific tools in multi-cloud environments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day62.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Cloud Specific                  | Cloud Agnostic | \n| ------------------------------- | -------------- |\n| AWS CloudFormation              | Terraform      | \n| Azure Resource Manager          | Pulumi         | \n| Google Cloud Deployment Manager |                | \n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Database via Helm\nDESCRIPTION: Commands to deploy MySQL database using Helm chart with specific configuration for persistence and volume permissions\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl create ns ${APP_NAME}\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mysql-store bitnami/mysql --set primary.persistence.size=1Gi,volumePermissions.enabled=true --namespace=${APP_NAME}\nkubectl get pods -n ${APP_NAME} -w\n```\n\n----------------------------------------\n\nTITLE: Deploying ELK Stack with Docker Compose\nDESCRIPTION: This snippet shows the command to start the ELK Stack using Docker Compose. It assumes the necessary configuration files are present in the current directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day80.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Windows Hypervisor Configuration Commands\nDESCRIPTION: Commands to toggle Windows Hypervisor for WSL2 compatibility with nested virtualization. Must be run as administrator.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day25.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbcdedit /set hypervisorlaunchtype off\n```\n\nLANGUAGE: bash\nCODE:\n```\nbcdedit /set hypervisorlaunchtype auto\n```\n\n----------------------------------------\n\nTITLE: Installing Gorilla Mux Dependency in Go\nDESCRIPTION: Command to install the Gorilla Mux router package which is a popular HTTP router for building RESTful APIs in Go.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day53.md#2025-04-17_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/gorilla/mux\n```\n\n----------------------------------------\n\nTITLE: Installing Minikube using Arkade in Bash\nDESCRIPTION: Command to install Minikube using the Arkade package manager. Arkade simplifies the installation of Kubernetes tools and CLIs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get minikube\n```\n\n----------------------------------------\n\nTITLE: Monitoring EFK Stack Deployment Progress\nDESCRIPTION: Watching the deployment progress of pods in the kube-logging namespace. The -w flag keeps the command running and shows changes to resources in real-time.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day82.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging -w\n```\n\n----------------------------------------\n\nTITLE: Verifying fstab Configuration\nDESCRIPTION: Command to test mount configurations in the fstab file without rebooting, ensuring persistent storage mounts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo mount -a\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL in Docker Container\nDESCRIPTION: Command to run a custom PostgreSQL Docker container with a demo database (dvdrental). The container exposes port 5432 and sets the PostgreSQL password to 'Testing1122'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n--publish 5432:5432 \\\n--env POSTGRES_PASSWORD=Testing1122 \\\n--name demo-container \\\nghcr.io/dbafromthecold/demo-postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Jenkins Kaniko Pipeline for Docker Image Building\nDESCRIPTION: Complete Jenkins pipeline script that uses Kaniko to build and push Docker images within a Kubernetes environment, including Maven container for testing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day73.md#2025-04-17_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\npodTemplate(yaml: '''\n    apiVersion: v1\n    kind: Pod\n    spec:\n      containers:\n      - name: maven\n        image: maven:3.8.1-jdk-8\n        command:\n        - sleep\n        args:\n        - 99d\n      - name: kaniko\n        image: gcr.io/kaniko-project/executor:debug\n        command:\n        - sleep\n        args:\n        - 9999999\n        volumeMounts:\n        - name: kaniko-secret\n          mountPath: /kaniko/.docker\n      restartPolicy: Never\n      volumes:\n      - name: kaniko-secret\n        secret:\n            secretName: dockercred\n            items:\n            - key: .dockerconfigjson\n              path: config.json\n''') {\n  node(POD_LABEL) {\n    stage('Get the project') {\n      git url: 'https://github.com/scriptcamp/kubernetes-kaniko.git', branch: 'main'\n      container('maven') {\n        stage('Test the project') {\n          sh '''\n          echo pwd\n          '''\n        }\n      }\n    }\n\n    stage('Build & Test the Docker Image') {\n      container('kaniko') {\n        stage('Deploy to DockerHub') {\n          sh '''\n            /kaniko/executor --context `pwd` --destination michaelcade1/helloworld:latest\n          '''\n        }\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Playbook for Ansible Role Usage\nDESCRIPTION: Demonstrates how to include the role in an Ansible playbook, showing how to pass variables as parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Configmgmt/ansible-scenario5/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Machine using Azure PowerShell\nDESCRIPTION: This snippet shows the Azure PowerShell cmdlet for creating a new virtual machine in Azure. It demonstrates the syntax difference between Azure PowerShell and Azure CLI for similar operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day33.md#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-AzVM\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Deployment and Service\nDESCRIPTION: Creates a basic Nginx deployment and exposes it as a service in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create deployment nginx --image=nginx\nkubectl expose deployment nginx --port=80\n```\n\n----------------------------------------\n\nTITLE: Deploying Prometheus using Docker\nDESCRIPTION: Basic command to run Prometheus container locally using Docker\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day78.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Using kubectl to Verify Kubernetes Cluster Access\nDESCRIPTION: Commands to verify successful connection to a Kubernetes cluster by displaying cluster information and node details. These commands should be executed after properly configuring the kubectl config file on your workstation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day52.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Ansible Playbook with Database Server Configuration\nDESCRIPTION: This YAML snippet extends the Ansible playbook to include configuration for a database server using MySQL role and tags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags:\n    web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: \n    proxy\n\n- hosts: database\n  become: yes\n  roles:\n    - common\n    - mysql\n  tags: database\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Root User in Dockerfile\nDESCRIPTION: This Dockerfile creates a non-root user 'basicuser' with a specific user ID and group ID, promoting better security practices in container execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day47.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\nRUN apt-get update && apt-get upgrade -y\nRUN groupadd -g 1000 basicuser && useradd -r -u 1000 -g basicuser basicuser\nUSER basicuser\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Pod in Kubernetes\nDESCRIPTION: Bash script to create a temporary MySQL client pod and connect to the MySQL database in the Kubernetes cluster. It sets environment variables for the database connection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked Repository Using Git\nDESCRIPTION: Command to clone a forked repository to your local machine using Git. This creates a local copy of your forked repository that you can work with.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day29.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/{your-username}/{forked-repository-name}.git\n```\n\n----------------------------------------\n\nTITLE: Configuring FluentBit in Kubernetes via ConfigMap\nDESCRIPTION: A comprehensive ConfigMap configuration for FluentBit deployment in Kubernetes, including parsers, service configuration, input sources, filters, and Elasticsearch outputs. This configuration sets up log collection from containers and system services.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day81.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName:         fluent-bit\nNamespace:    default\nLabels:       app.kubernetes.io/instance=fluent-bit\n              app.kubernetes.io/managed-by=Helm\n              app.kubernetes.io/name=fluent-bit\n              app.kubernetes.io/version=1.8.14\n              helm.sh/chart=fluent-bit-0.19.21\nAnnotations:  meta.helm.sh/release-name: fluent-bit\n              meta.helm.sh/release-namespace: default\n\nData\n====\ncustom_parsers.conf:\n----\n[PARSER]\n    Name docker_no_time\n    Format json\n    Time_Keep Off\n    Time_Key time\n    Time_Format %Y-%m-%dT%H:%M:%S.%L\n\nfluent-bit.conf:\n----\n[SERVICE]\n    Daemon Off\n    Flush 1\n    Log_Level info\n    Parsers_File parsers.conf\n    Parsers_File custom_parsers.conf\n    HTTP_Server On\n    HTTP_Listen 0.0.0.0\n    HTTP_Port 2020\n    Health_Check On\n\n[INPUT]\n    Name tail\n    Path /var/log/containers/*.log\n    multiline.parser docker, cri\n    Tag kube.*\n    Mem_Buf_Limit 5MB\n    Skip_Long_Lines On\n\n[INPUT]\n    Name systemd\n    Tag host.*\n    Systemd_Filter _SYSTEMD_UNIT=kubelet.service\n    Read_From_Tail On\n\n[FILTER]\n    Name Kubernetes\n    Match kube.*\n    Merge_Log On\n    Keep_Log Off\n    K8S-Logging.Parser On\n    K8S-Logging.Exclude On\n\n[OUTPUT]\n    Name es\n    Match kube.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Retry_Limit False\n\n[OUTPUT]\n    Name es\n    Match host.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Logstash_Prefix node\n    Retry_Limit False\n\nEvents:  <none>\n```\n\n----------------------------------------\n\nTITLE: MySQL Service Handler Configuration in Ansible\nDESCRIPTION: Handler configuration for restarting MySQL service when configuration changes are made.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart mysql\n  service:\n    name: mysql\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Ruby on Rails Environment\nDESCRIPTION: A series of Bash commands to install and set up Ruby, Rails, and other dependencies on the CentOS 7 VM.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day06.md#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nsudo yum -y install mariadb mariadb-server mariadb-devel\nsudo systemctl start mariadb.service\nsudo yum -y install links\nsudo yum install --assumeyes epel-release\nsudo yum install --assumeyes nodejs\ncurl -L https://get.rvm.io | bash -s stable\nsource /home/vagrant/.rvm/scripts/rvm\nrvm install ruby-2.7\ngem install rails\nsudo yum install git\nsudo yum install epel-release\nsudo yum install redis\n```\n\n----------------------------------------\n\nTITLE: Interactive User Account Creation Script in Bash\nDESCRIPTION: This enhanced script prompts for username and password interactively. It creates a user account, sets the password, and provides feedback on successful creation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day19.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\necho \"What is your intended username?\"\nread  username\necho \"What is your password\"\nread -s password\n\n#A user can be passed in as a command line argument\necho \"$username user account being created.\"\n\n#A user is created with the name of the command line argument\nsudo useradd -m $username\n\n#A password can be parsed as a command line argument.\nsudo chpasswd <<< $username:$password\n\necho \"Account has been created\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Application with Octopus Deploy CLI\nDESCRIPTION: These commands use the Octopus Deploy CLI to set up the context and deploy the application to the OCT Cloud, creating a preview environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day81.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nocto context\nocto up\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Constants in Go\nDESCRIPTION: Demonstrates how to use both variables and constants in a Go program. Constants are values that cannot change during program execution, making them ideal for fixed values like the challenge duration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day11.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    const daystotal = 90\n\n    fmt.Println(\"Welcome to\", challenge, \"\")\n    fmt.Println(\"This is a\", daystotal, \"challenge\")\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Services\nDESCRIPTION: Command to display all services running in the current namespace, showing name, type, cluster IP, external IP, ports, and age.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Docker Container\nDESCRIPTION: Docker command to run a custom PostgreSQL container with specified port and password configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \n--publish 5432:5432 \n--env POSTGRES_PASSWORD=Testing1122 \n--name demo-container \nghcr.io/dbafromthecold/demo-postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Defining Home Route in Flask\nDESCRIPTION: Python code to define the home route for the Flask app.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\ndef home():\n    return render_template('index.html')\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Package Manager\nDESCRIPTION: Bash commands for installing Helm, the package manager for Kubernetes, using a shell script that downloads and installs the latest version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day54.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n\nchmod 700 get_helm.sh\n\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Using Vault operator unseal command\nDESCRIPTION: The command used to unseal Vault by reconstructing the root key needed to decrypt the encryption key. This process must be performed multiple times with different unseal keys.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day36.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Verifying Namespaces in Kubernetes Cluster\nDESCRIPTION: Command to list all namespaces in the Kubernetes cluster to confirm no pacman namespace exists before deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespace\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns with JOIN and WHERE Clause\nDESCRIPTION: SQL query that selects specific columns from both staff and address tables, joining them and filtering for staff with first_name 'Mike'. This demonstrates column selection and table aliasing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT s.first_name, s.last_name, a.address, a.district, a.phone\nFROM staff s\nINNER JOIN address a ON s.address_id = a.address_id\nWHERE first_name = 'Mike'\n```\n\n----------------------------------------\n\nTITLE: Deploying MySQL Database in Kubernetes with Helm\nDESCRIPTION: This bash script sets up a MySQL database deployment in Kubernetes using the Bitnami Helm chart with persistent storage and appropriate permissions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl create ns ${APP_NAME}\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mysql-store bitnami/mysql --set primary.persistence.size=1Gi,volumePermissions.enabled=true --namespace=${APP_NAME}\nkubectl get pods -n ${APP_NAME} -w\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Connection Variables in Kubernetes\nDESCRIPTION: This script extracts the MySQL root password from Kubernetes secrets and defines connection variables for interacting with the database.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace ${APP_NAME} mysql-store -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode)\nMYSQL_HOST=mysql-store.${APP_NAME}.svc.cluster.local\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Variable Declaration in Go\nDESCRIPTION: Example of using the shorthand declaration syntax for variables in Go. This cleaner syntax can only be used for variables, not constants.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day11.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    challenge := \"#90DaysOfDevOps\"\n    const daystotal = 90\n```\n\n----------------------------------------\n\nTITLE: Opening Prometheus Dashboard with Istioctl\nDESCRIPTION: Command to open the Prometheus dashboard using the istioctl utility, which launches a browser window.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nistioctl dashboard prometheus\n```\n\n----------------------------------------\n\nTITLE: Creating directories with mkdir in Linux\nDESCRIPTION: The 'mkdir' command creates a new directory in the specified location. In this example, it creates a 'Day15' directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir Day15\n```\n\n----------------------------------------\n\nTITLE: Simple Arithmetic Operations in Python\nDESCRIPTION: Basic arithmetic operations in Python including addition, subtraction, multiplication, division, and modulo. Shows how different operations behave with both integer and floating-point values.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day47.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na = 10\nb = 5\n\nprint(a + b)  # Addition\nprint(a - b)  # Subtraction\nprint(a * b)  # Multiplication\nprint(a / b)  # Division\nprint(a % b)  # Modulo - remainder after division\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Commands\nDESCRIPTION: Commands for creating, switching, and merging branches in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\ngit checkout -b <branch>\ngit merge <branch>\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Region in Terraform\nDESCRIPTION: Specifies the AWS region for resource deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day58.md#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"ap-southeast-1\" //region where resources need to be deployed\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Configuration for WordPress\nDESCRIPTION: A series of MySQL commands to create a database for WordPress, create a user with appropriate permissions, and configure database access for the WordPress installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day18.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p\n\nCREATE DATABASE wordpressdb;\n\nCREATE USER 'admin-user'@'localhost' IDENTIFIED BY 'password';\n\nGRANT ALL PRIVILEGES ON wordpressdb.* TO 'admin-user'@'localhost';\n\nFLUSH PRIVILEGES;\n\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL Archiving in PostgreSQL\nDESCRIPTION: Configuration settings to enable Write-Ahead Log (WAL) archiving in PostgreSQL by adding parameters to the postgresql.conf file. This sets up the necessary archiving mode and commands for point-in-time recovery.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\narchive_mode = on\narchive_command = 'cp %p /postgres/archive/wal/%f'\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Required Addons for Kubernetes Backup\nDESCRIPTION: Command to start a minikube cluster with the volumesnapshots and csi-hostpath-driver addons enabled, which are required for Kasten K10 backup functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p 90daysofdevops --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Gickup YAML Settings\nDESCRIPTION: YAML configuration structure for Gickup, defining source repositories, destination locations, and backup settings for Git repository management\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day53.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  platform: \"github\"\ndestination:\n  type: \"local\"\n  format: \"structured\"\n  createOrg: true\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Template (INI)\nDESCRIPTION: Template file for MySQL configuration defining bind address.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[mysql]\nbind-address = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Global Settings\nDESCRIPTION: Basic Git configuration commands for setting up user name, email, and default editor globally\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day36.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.name \"Michael Cade\"\ngit config --global user.email Michael.Cade@90DaysOfDevOPs.com\ngit config --global core.editor \"code --wait\"\ngit config --global -e\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service YAML Configuration\nDESCRIPTION: A Kubernetes service manifest that exposes the deployed application. This service configuration maps port 80 to target port 80 for the selected application, making it accessible within the cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day25.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n    name: api-name\nspec:\n    type: ClusterIP\n    ports:\n    - port: 80 \n    selector:\n        app: api-name\n```\n\n----------------------------------------\n\nTITLE: Inspecting Deployment Controller ClusterRole\nDESCRIPTION: Command to view the permissions assigned to the deployment-controller service account. This shows what resources the deployment controller can interact with, especially its permissions to manage ReplicaSets for Deployments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get clusterrole system:controller:deployment-controller -o yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying ELK Stack with Docker Compose\nDESCRIPTION: Command to deploy the ELK stack using Docker Compose in detached mode, with the expected output showing the creation of a network and three containers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\nCreating network \"elasticsearch-logstash-kibana_elastic\" with driver \"bridge\"\nCreating es ... done\nCreating log ... done\nCreating kib ... done\n```\n\n----------------------------------------\n\nTITLE: User Creation Script\nDESCRIPTION: Script that creates a new user account using the first command line argument as the username.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day19.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1 user account being created.\"\n\n#A user is created with the name of the command line argument\nsudo useradd -m \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Repositories\nDESCRIPTION: Command to display the currently configured Helm repositories. This helps verify what repositories are already available before adding the Jenkins repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo list\n```\n\n----------------------------------------\n\nTITLE: Installing Ping Utility in Docker Container\nDESCRIPTION: This command updates the package repository and installs the iputils-ping package in an Ubuntu container to enable network testing functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day47.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt-get update && apt-get install -y iputils-ping\n```\n\n----------------------------------------\n\nTITLE: Common Variables Configuration\nDESCRIPTION: Variable definitions for ports, messages, and MySQL credentials used across the playbook.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n\nmysql_user_name: root\nmysql_user_password: \"vagrant\"\ndb_user: devops\ndb_pass: DevOps90\ndb_name: 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the ELK Stack Containers\nDESCRIPTION: Docker Compose command to stop and remove the ELK stack containers and associated resources created by the compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down\n```\n\n----------------------------------------\n\nTITLE: Scale Pacman Deployment\nDESCRIPTION: Command to scale the Pacman deployment to 10 replicas in the pacman namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl scale deployment pacman --replicas=10 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL Client Pod for Database Operations\nDESCRIPTION: Command to run a temporary MySQL client pod with necessary environment variables to connect to the MySQL database in the application namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Deploying Prometheus and Grafana Resources\nDESCRIPTION: Kubectl command to deploy all necessary resources for Prometheus and Grafana in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f manifests/\n```\n\n----------------------------------------\n\nTITLE: Displaying Azure Service Principal Credentials in PowerShell\nDESCRIPTION: PowerShell command to output the essential credentials needed for authentication when using a Service Principal, including application ID, tenant, and secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day45.md#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$sp.ApplicationId\n$UnsecureSecret\n$tenantID = (Get-AzContext).Tenant.Id\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status in kube-logging Namespace\nDESCRIPTION: Verifying that all the EFK stack components (Elasticsearch, Fluentd, and Kibana) are successfully deployed and running in the kube-logging namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day82.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Executing Azure CLI Command in PowerShell\nDESCRIPTION: This snippet demonstrates how to use the Azure CLI command 'az' within PowerShell to interact with Azure resources. It shows the availability of Azure CLI on a Windows machine running PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day33.md#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\naz\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Prometheus Server\nDESCRIPTION: Commands to export pod name and setup port forwarding for accessing the Prometheus server UI\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day78.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=prometheus,component=server\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl --namespace default port-forward $POD_NAME 9090\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token\nDESCRIPTION: Commands to extract and decode the authentication token required for accessing the Kasten K10 dashboard.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day87.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Cluster Node Status\nDESCRIPTION: This command retrieves the status of all nodes in the Kubernetes cluster using kubectl. It displays information such as node names, status, roles, and versions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day52.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Storage Capabilities for StatefulSet Demo\nDESCRIPTION: Command to start a Minikube cluster with the required addons for persistence (volumesnapshots and csi-hostpath-driver) along with specific Kubernetes version and container runtime settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p mc-demo --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kubernetes Service\nDESCRIPTION: Command to set up port forwarding from local port 9090 to port 80 of the Pacman service in the pacman namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/pacman 9090:80 -n pacman\n```\n\n----------------------------------------\n\nTITLE: ELK Stack Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration defining services for Elasticsearch, Logstash, and Kibana with their respective image versions\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  elasticsearch:\n    image: elasticsearch:7.8.0\n    ...\n  logstash:\n    image: logstash:7.8.0\n    ...\n  kibana:\n    image: kibana:7.8.0\n    ...\n```\n\n----------------------------------------\n\nTITLE: Create Ingress Configuration\nDESCRIPTION: Command to create an Ingress resource from a YAML configuration file\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Git via Linux Package Repository\nDESCRIPTION: Commands to add the Git repository and install the latest version of Git on Ubuntu/Debian systems\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day36.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:git-core/ppa -y\nsudo apt-get update\nsudo apt-get install git -y\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Routing Configuration in Kubernetes\nDESCRIPTION: This command applies the conditional routing configuration for the reviews service using kubectl.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube and Creating Jenkins Namespace\nDESCRIPTION: Initializes a Minikube cluster and creates a dedicated namespace for Jenkins. This sets up the environment for Jenkins deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n\nkubectl create namespace jenkins or kubectl create -f jenkins-namespace.yml \n\nkubectl get namespaces\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Application and Removing Containers\nDESCRIPTION: This command stops the running Docker Compose application and removes the containers, but preserves the volumes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day46.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Go Build Commands\nDESCRIPTION: Commands for compiling Go applications for multiple operating systems and architectures using GOOS and GOARCH environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day13.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nGOARCH=amd64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin main.go\nGOARCH=amd64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux main.go\nGOARCH=amd64 GOOS=windows go build -o ${BINARY_NAME}_0.1_windows main.go\nGOARCH=arm64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux_arm64 main.go\nGOARCH=arm64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin_arm64 main.go\n```\n\n----------------------------------------\n\nTITLE: SELECT All Data from a Table in PostgreSQL\nDESCRIPTION: SQL query to retrieve all columns and rows from the staff table in the PostgreSQL database. The asterisk (*) indicates that all columns should be returned.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM staff\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with WHERE Clause in SQL\nDESCRIPTION: SQL query that filters data from the staff table to only return rows where the first_name column has the value 'Mike'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM  staff\nWHERE first_name = 'Mike'\n```\n\n----------------------------------------\n\nTITLE: Finalizing User Creation Script with Success Message\nDESCRIPTION: This snippet adds a success message to the script and implements password input masking for improved security.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\necho \"What is your intended username?\"\nread username\necho \"What is your password\"\nread -s password\n\n#A user can be passed in as a command line argument\necho \"$username user account being created.\"\n\n#A user is created with the name of command line argument\nsudo useradd -m $username\n\n#A password can be parsed in as a command line argument.\nsudo chpasswd <<< $username:$password\n\necho \"Account has been created\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Istio Gateway Information\nDESCRIPTION: Gets the service information for the Istio system namespace to identify the external IP and port for accessing the application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Git Pull Command with Rebase Option\nDESCRIPTION: Command for fetching and rebasing changes from a remote repository in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                               |           Example                      |           Description                                                                                                                         | \n| ------------------------------------- |   ------------------------------------ |   ------------------------------------------------------------------------------------------------------------------------------------------- |\n| git pull --rebase <remote>            | `git pull --rebase <remote>`           | Fetch the remote's copy of current branch and rebases it into the local copy. Uses git rebase instead of merge to integrate the branches.     |\n```\n\n----------------------------------------\n\nTITLE: Installing Oh My ZSH Framework\nDESCRIPTION: Command to install Oh My ZSH using curl. Oh My ZSH is a framework for managing ZSH configuration that provides plugins, themes, and other enhancements for the ZSH shell experience.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Home Route to Display Blog Post Titles\nDESCRIPTION: Updated Python code for the home route to display a list of blog post titles from Markdown files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\ndef home():\n    posts = []\n    for file in os.listdir('posts'):\n        if file.endswith('.md'):\n            title = file[:-3]\n            posts.append(title)\n    return render_template('index.html', posts=posts)\n```\n\n----------------------------------------\n\nTITLE: Accessing Prometheus Server UI in Kubernetes\nDESCRIPTION: Commands to port forward Prometheus server pod for UI access on localhost:9090\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day78.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=prometheus,component=server\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl --namespace default port-forward $POD_NAME 9090\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings in BASH\nDESCRIPTION: Script that demonstrates string comparison in BASH using the = operator to check if two strings are equal and the != operator to check if they are different.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day48.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nstringvar1=\"Michael\"\nstringvar2=\"Michael\"\nstringvar3=\"Cade\"\n\nif [ \"$stringvar1\" = \"$stringvar2\" ]\nthen\n    echo \"String are equal\"\nelse\n    echo \"Strings are not equal\"\nfi\n\n#Check if strings are not equal\nif [ \"$stringvar1\" != \"$stringvar3\" ]\nthen\n    echo \"Strings are not equal\"\nelse\n    echo \"Strings are equal\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Ansible Playbook for Web Server Configuration\nDESCRIPTION: An Ansible playbook that installs and configures Apache web servers on multiple hosts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps\"\n  tasks:\n  - name: ensure apache is at the latest version\n    apt:\n      name: apache2\n      state: latest\n\n  - name: write the apache2 ports.conf config file\n    template:\n      src: templates/ports.conf.j2\n      dest: /etc/apache2/ports.conf\n    notify:\n    - restart apache\n\n  - name: write a basic index.html file\n    template:\n      src: templates/index.html.j2\n      dest: /var/www/html/index.html\n    notify:\n    - restart apache\n\n  - name: ensure apache is running\n    service:\n      name: apache2\n      state: started\n\n  handlers:\n    - name: restart apache\n      service:\n        name: apache2\n        state: restarted\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ingress Information in Kubernetes\nDESCRIPTION: This command retrieves information about ingress resources in the 'pacman' namespace. It's used to verify the creation and status of the ingress resource.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get ingress -n pacman\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SecurityContextConstraints in OpenShift YAML\nDESCRIPTION: This YAML defines a custom SecurityContextConstraints (SCC) named 'mongo-custom-scc' that allows containers to run as any user, including root. It sets various security parameters to maintain a level of control while allowing necessary privileges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.openshift.io/v1\nkind: SecurityContextConstraints\nmetadata:\n  name: mongo-custom-scc\nallowPrivilegedContainer: false\nallowHostNetwork: false\nallowHostPorts: false\nallowHostPID: false\nallowHostIPC: false\nrunAsUser:\n  type: RunAsAny\nseLinuxContext:\n  type: MustRunAs\nfsGroup:\n  type: RunAsAny\nsupplementalGroups:\n  type: RunAsAny\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress Resource in Kubernetes\nDESCRIPTION: This command creates an ingress resource in Kubernetes using a YAML configuration file named 'pacman-ingress.yaml'. It sets up routing rules for the Pacman application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Excel Reading Module for Network Automation\nDESCRIPTION: Command to install the xlrd Python module, which allows scripts to read Excel workbooks. This is useful for network automation when configuration data is stored in spreadsheets.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day27.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install xlrd\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm and Adding Jenkins Repository\nDESCRIPTION: This snippet lists Helm repositories, adds the Jenkins chart repository, and updates the repository information. It prepares Helm for Jenkins chart installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo list\n\nhelm repo add jenkinsci https://charts.jenkins.io\n\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Diff Tool\nDESCRIPTION: Commands to configure VSCode as the default diff tool in Git\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day39.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global diff.tool vscode\ngit config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'\n```\n\n----------------------------------------\n\nTITLE: Deploying BookInfo Sample Application\nDESCRIPTION: Command to deploy the BookInfo sample application which consists of multiple microservices that will be used to demonstrate Ambient Mesh functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Vault with Key Sharing\nDESCRIPTION: Command to initialize the Vault cluster with key sharing configuration. It generates a root key split into shares and sets the threshold required to unseal Vault, storing the keys in JSON format.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec vault-0 -n vault -- vault operator init \\\n    -key-shares=1 \\\n    -key-threshold=1 \\\n    -format=json > cluster-keys.json\n```\n\n----------------------------------------\n\nTITLE: Git Basics Commands\nDESCRIPTION: A table of basic Git commands including init, clone, config, add, commit, status, log, and diff, with their usage examples and descriptions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day37.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init <directory>\ngit clone <repo>\ngit config user.name\ngit add <directory>\ngit commit -m \"<message>\"\ngit status\ngit log\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Adding NATS Helm Repository and Installing NATS\nDESCRIPTION: Commands to add the NATS Helm repository and install NATS messaging system, which is required for asynchronous communication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day2-ops-code/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add nats https://nats-io.github.io/k8s/helm/charts/\nhelm install my-nats nats/nats\n```\n\n----------------------------------------\n\nTITLE: Importing Data from CSV File in PostgreSQL\nDESCRIPTION: SQL command to import data from a CSV file into a PostgreSQL table using the COPY command. The command specifies the delimiter and indicates that the CSV file includes a header row.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCOPY test_table(id,first_name, last_name, dob, email)\nFROM '/dvdrental/test_data.csv'\nDELIMITER ','\nCSV HEADER;\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret in Kubernetes\nDESCRIPTION: Kubernetes command to create a secret for storing DockerHub credentials used in the pipeline.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day73.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry dockercred \\\n    --docker-server=https://index.docker.io/v1/ \\\n    --docker-username=<dockerhub-username> \\\n    --docker-password=<dockerhub-password>\\\n    --docker-email=<dockerhub-email>\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 on the Standby Cluster\nDESCRIPTION: Helm command to deploy Kasten K10 on the standby cluster with token authentication and Kanister sidecar injection enabled. This prepares the standby cluster for disaster recovery operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day89.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Ping Module Against Linux Group\nDESCRIPTION: Command to run the Ansible ping module against hosts in the Linux group defined in the inventory file, used to test connectivity.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day64.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nansible linux -m ping\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook Implementation\nDESCRIPTION: Shows how to include a role in an Ansible playbook with variables passed as parameters. This example demonstrates the proper syntax for incorporating the role into a playbook targeting servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Configmgmt/ansible-scenario7/roles/mysql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Extensions for WordPress\nDESCRIPTION: Command to install additional PHP extensions required by WordPress, followed by restarting the Apache service to apply changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day18.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for ArgoCD Server\nDESCRIPTION: Command to set up port forwarding to access the ArgoCD server UI locally.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day76.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n----------------------------------------\n\nTITLE: Restoring Files from Previous Versions\nDESCRIPTION: Commands for restoring deleted files from previous Git commits and snapshots.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day39.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --source=HEAD~1 README.md\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Jenkins Service\nDESCRIPTION: This command sets up port forwarding to access the Jenkins service from the local machine on port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace jenkins port-forward svc/jenkins 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Deploying ELK Stack with Docker Compose\nDESCRIPTION: Command to deploy the ELK stack using Docker Compose in detached mode, showing the output of creating a network and the three containers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\nCreating network \"elasticsearch-logstash-kibana_elastic\" with driver \"bridge\"\nCreating es ... done\nCreating log ... done\nCreating kib ... done\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token from Kubernetes\nDESCRIPTION: Script to extract the authentication token from Kubernetes secrets for logging into the Kasten K10 dashboard. This token is required for dashboard authentication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day89.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Terraform Resource Definition for Azure Virtual Desktop Application Group\nDESCRIPTION: Terraform configuration for creating an AVD application group. It associates the application group with a host pool and specifies the type as 'Desktop', indicating it will provide full desktop access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day05.md#2025-04-17_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azurerm_virtual_desktop_application_group\" \"dag\" {\n  location            = azurerm_resource_group.AVD.location\n  resource_group_name = azurerm_resource_group.AVD.name\n\n  name                         = \"${var.prefix}-dag\"\n  type                         = \"Desktop\"\n  host_pool_id                 = azurerm_virtual_desktop_host_pool.hostpool.id\n  friendly_name                = \"Desktop AppGroup\"\n  description                  = \"AVD application group\"\n  default_desktop_display_name = \"SessionDesktop\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Additional PHP Extensions for WordPress\nDESCRIPTION: Command to install additional PHP extensions required for WordPress.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n```\n\n----------------------------------------\n\nTITLE: Deleting Jenkins Pod for Restart\nDESCRIPTION: This command deletes the Jenkins pod, triggering a restart with the new volume permissions. Kubernetes will automatically create a new pod to replace it.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod jenkins-0 -n jenkins\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with APM Server Extension\nDESCRIPTION: Command to start the Docker Compose stack including the APM Server extension by referencing both the main docker-compose.yml file and the apm-server extension compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/apm-server/apm-server-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Linux using apt\nDESCRIPTION: Commands to install Git on a Linux system using the apt package manager. This snippet shows how to update and install the latest version of Git from the Git core PPA repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day36.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:git-core/ppa -y\nsudo apt-get update\nsudo apt-get install git -y\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Ping Module Against a Group\nDESCRIPTION: Command to run the ping module against a group of hosts (called 'linux') defined in the inventory file, verifying SSH connectivity to these systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day64.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nansible linux -m ping\n```\n\n----------------------------------------\n\nTITLE: Git Ignore File Configuration\nDESCRIPTION: Example of creating and using .gitignore file to exclude files/directories from version control\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day38.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho \"logs/\" > .gitignore\ngit status\ngit rm --cached logs/\n```\n\n----------------------------------------\n\nTITLE: Creating a Kanister Backup ActionSet\nDESCRIPTION: Command using kanctl to create an ActionSet that triggers a MySQL database backup. It references the blueprint, statefulset, profile, and necessary secrets.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset --action backup --namespace kanister --blueprint mysql-blueprint --statefulset my-production-app/mysql-store --profile my-production-app/s3-profile-dc5zm --secrets mysql=my-production-app/mysql-store\n```\n\n----------------------------------------\n\nTITLE: Mounting Snapshots from Google Cloud Storage\nDESCRIPTION: Command to mount all snapshots from the Google Cloud Storage repository to a local drive for browsing or restore.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day86.md#2025-04-17_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config mount all Z:\n```\n\n----------------------------------------\n\nTITLE: Setting up Minikube for AWX Deployment\nDESCRIPTION: Command to start a Minikube Kubernetes cluster with sufficient resources and the ingress addon enabled for AWX deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day69.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --cpus=4 --memory=6g --addons=ingress\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster for EFK Deployment\nDESCRIPTION: Starting a Minikube Kubernetes cluster where the EFK stack will be deployed. This is the foundation for the logging infrastructure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day82.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Advanced Git Pull Operations\nDESCRIPTION: Command for pulling changes from a remote repository while applying local changes on top using rebase instead of merge, resulting in a cleaner commit history.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                               |           Example                      |           Description                                                                                                                         | \n| ------------------------------------- |   ------------------------------------ |   ------------------------------------------------------------------------------------------------------------------------------------------- |\n| git pull --rebase <remote>            | `git pull --rebase <remote>`           | Fetch the remote's copy of current branch and rebases it into the local copy. Uses git rebase instead of the merge to integrate the branches.     |\n```\n\n----------------------------------------\n\nTITLE: Verifying Persistent Volumes and Claims\nDESCRIPTION: Commands to view persistent volumes (cluster-wide) and persistent volume claims (in the pacman namespace) created for the stateful MongoDB application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pv\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pvc -n pacman\n```\n\n----------------------------------------\n\nTITLE: Enabling Elasticsearch API Key Service\nDESCRIPTION: YAML configuration to enable the required API key service in Elasticsearch's configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nxpack.security.authc.api_key.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Starting Enterprise Search with Docker Compose\nDESCRIPTION: Command-line example for starting Enterprise Search using Docker Compose with the necessary configuration files. This command launches Enterprise Search alongside the other components in the Elastic Stack.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/enterprise-search/enterprise-search-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Testing Bidirectional Connectivity Between Namespaces\nDESCRIPTION: Command to test ping connectivity in the reverse direction (from blue to red namespace). This confirms bidirectional communication is working.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec blue ping 192.168.15.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk Space Usage\nDESCRIPTION: This command shows disk space usage in a human-readable format.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation in Bash Script\nDESCRIPTION: This snippet expands the script to create a user account using the useradd command with the name provided as a command-line argument.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1 user account being created.\"\n\n#A user is created with the name of command line argument\nsudo useradd -m \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Local Exec Provisioner Example\nDESCRIPTION: Example of using a local-exec provisioner in Terraform to execute commands on the local machine after resource creation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day60.md#2025-04-17_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"docker_container\" \"db\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo The server's IP address is ${self.private_ip}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Git Help in Terminal\nDESCRIPTION: Demonstrates how to access Git help documentation directly from the command line for the 'git add' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day37.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit add --help\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in Python\nDESCRIPTION: Demonstrates how to declare and assign values to variables in Python. The example shows assigning a numeric value, an expression result, and copying a variable value to another variable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day42.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\na = 7         # assign variable a the value 7\nb = x + 3     # assign variable b the value of a plus 3\nc = b         # assign variable c the value of b\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Dictionaries in Python\nDESCRIPTION: Demonstrates creating a dictionary with key-value pairs and accessing values using keys. Dictionaries store collections of key-value pairs where keys must be unique and immutable while values can be of any type.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day44.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmy_dict = {\"name\": \"Rishab\", \"project\": \"90DaysOfDevOps\", \"country\": \"Canada\"}\nprint(my_dict[\"name\"])   # OUTPUT \"Rishab\"\nprint(my_dict[\"project\"])   # OUTPUT \"90DaysOfDevOps\"\nprint(my_dict[\"country\"])  # OUTPUT \"Canada\"\n```\n\n----------------------------------------\n\nTITLE: String Declaration in Python\nDESCRIPTION: Shows how to create string variables in Python using both single and double quotation marks. Both methods are valid for string declaration in Python.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day42.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\na = 'My name is Rishab'\nb = \"This is also a string\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic HTML Template with Ansible Facts (Jinja2)\nDESCRIPTION: This HTML template uses Ansible facts to display a custom message including the server's node name, showcasing how to use variables and facts in web content.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_4\n\nLANGUAGE: jinja2\nCODE:\n```\n<html>\n\n<h1>{{ html_welcome_msg }}! I'm webserver {{ ansible_facts['nodename'] }} </h1>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Dockerfile and HTML Source Code Structure\nDESCRIPTION: Repository structure showing Dockerfile and index.html placement for the Jenkins pipeline build process\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day74.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nJenkins-HelloWorld/\n  |- Dockerfile\n  |- index.html\n```\n\n----------------------------------------\n\nTITLE: Formatting a New Disk in Linux\nDESCRIPTION: Command to format a newly added disk with the ext4 filesystem, making it ready for use in the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkfs -t ext4 /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Deptrac for PHP Dependency Analysis\nDESCRIPTION: This YAML configuration defines the structure and layers for the deptrac tool to analyze PHP code dependencies.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day15.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# deptrac.yaml\ndeptrac:\n  paths:\n    - src\n\n  layers:\n    - name: Analyser\n      collectors:\n        - type: directory\n          value: src/Analyser/.*\n    - name: Ast\n      collectors:\n        - type: directory\n          value: src/Ast/.*\n    - name: Layer\n      collectors:\n        - type: directory\n          value: src/Layer/.*\n    - name: References\n      collectors:\n        - type: directory\n          value: src/References/.*\n    - name: Contract\n      collectors:\n        - type: directory\n          value: src/Contract/.*\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Monitoring\nDESCRIPTION: Kubectl command to create a namespace for monitoring resources in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day83.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f manifests/setup\n```\n\n----------------------------------------\n\nTITLE: Suppressing All Output in Bash\nDESCRIPTION: Shows how to discard both standard output and standard error by redirecting them to /dev/null. This effectively runs the command silently without displaying any output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day44.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsome_command > /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Examining Persistent Volumes\nDESCRIPTION: Commands to list Persistent Volumes (cluster-wide) and Persistent Volume Claims (namespace-specific) after the Pacman application deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pv\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pvc -n pacman\n```\n\n----------------------------------------\n\nTITLE: Using the OpenShift Install CLI Tool Reference\nDESCRIPTION: The openshift-install CLI tool is used to generate necessary components for building a cluster, including Ignition files for bootstrap, master, and worker machines. This tool is available only for Linux and Mac operating systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day57.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenshift-install\n```\n\n----------------------------------------\n\nTITLE: Defining Security Context for Root User in Kubernetes YAML\nDESCRIPTION: This YAML snippet shows the security context configuration that attempts to run an initContainer as the root user, which conflicts with OpenShift's default security policies.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  runAsUser: 0\n```\n\n----------------------------------------\n\nTITLE: Separating Handlers in Ansible Playbook\nDESCRIPTION: This snippet demonstrates how to separate handlers into their own file in an Ansible playbook. It includes a handler for restarting the Apache service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day66.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart apache\n  service:\n    name: apache2\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Modifying File Permissions with chmod\nDESCRIPTION: Demonstrates changing file permissions using chmod command with numeric notation\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nchmod 750 Day15\n```\n\n----------------------------------------\n\nTITLE: Getting Changed Files with Git\nDESCRIPTION: This bash command retrieves the list of changed files in a Git repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day15.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit diff --name-only\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Ubuntu Docker Container\nDESCRIPTION: This command runs an Ubuntu Docker container in interactive mode with a bash shell, allowing you to explore and interact with a minimal Ubuntu environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day44.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Scale Deployment\nDESCRIPTION: Command to scale the Pacman deployment to 10 replicas in the pacman namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl scale deployment pacman --replicas=10 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands to configure global Git settings for user name and email which are required for commits.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_3\n\nLANGUAGE: git\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Git File Removal Commands\nDESCRIPTION: Commands demonstrating how to remove files from both the working directory and Git repository\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day38.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm oldcode.ps1\ngit status\ngit rm oldcode.ps1\n```\n\n----------------------------------------\n\nTITLE: Running Container with Non-Root User via Docker Run Command\nDESCRIPTION: This command demonstrates how to run a container with a specific non-root user (UID 1009) regardless of what user might be specified in the Dockerfile, providing an additional security measure to ensure least privilege access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day47.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --user 1009 ubuntu\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible on Ubuntu Linux\nDESCRIPTION: These commands install Ansible on an Ubuntu system by adding the Ansible repository and using apt package manager. This setup creates a control node from which you can manage other machines via SSH.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day64.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository --yes --update ppa:ansible/ansible\nsudo apt install ansible\n```\n\n----------------------------------------\n\nTITLE: Realizando un Commit en Git\nDESCRIPTION: Comando para realizar un commit en Git con un mensaje descriptivo.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Mi primer commit\"\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl using Arkade in Bash\nDESCRIPTION: Command to install kubectl, the Kubernetes command-line tool, using the Arkade package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narkade get kubectl\n```\n\n----------------------------------------\n\nTITLE: Retrieving ArgoCD Admin Password\nDESCRIPTION: Command to fetch the initial admin password for ArgoCD from a Kubernetes secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day76.md#2025-04-17_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d && echo\n```\n\n----------------------------------------\n\nTITLE: Changing to Istio Directory\nDESCRIPTION: Command to navigate into the extracted Istio directory to access the binaries and sample files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd istio-1.18.0-alpha.0/\n```\n\n----------------------------------------\n\nTITLE: Editing Apache Directory Configuration in Linux\nDESCRIPTION: Command to edit Apache's directory configuration file to prioritize PHP index files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /etc/apache2/mods-enabled/dir.conf\n```\n\n----------------------------------------\n\nTITLE: Setting Jenkins Volume Permissions\nDESCRIPTION: These commands SSH into the Minikube VM and change the ownership of the Jenkins volume to the Jenkins user (UID 1000). This ensures Jenkins has the necessary permissions to access its data.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nminikube ssh\nsudo chown -R 1000:1000 /data/jenkins-volume\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress Resource for Pacman Application\nDESCRIPTION: Command to create an Ingress resource using a YAML configuration file. This sets up routing rules for the Pacman application in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Kanister ActionSet Status\nDESCRIPTION: This command describes the status of a specific ActionSet in the kanister namespace, used to monitor the progress of backup operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kanister describe actionset backup-qpnqv\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Services\nDESCRIPTION: This command stops the running Docker Compose services without removing the volumes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day46.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Monitoring Pod Status in Kubernetes Namespace\nDESCRIPTION: Command to watch the status of pods in the kube-logging namespace with the -w flag for continuous monitoring until all components are ready.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day82.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging -w\n```\n\n----------------------------------------\n\nTITLE: Running Getting Started Docker Container\nDESCRIPTION: Command to run the Docker getting-started container in detached mode on port 80\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day44.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 docker/getting-started\n```\n\n----------------------------------------\n\nTITLE: Terraform Resource Definition for Azure Role Assignment in AVD\nDESCRIPTION: Terraform configuration that assigns the 'Desktop Virtualization User' role to the specified Azure AD group for the application group. This grants users in that group access to the AVD resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day05.md#2025-04-17_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azurerm_role_assignment\" \"role\" {\n  scope                = azurerm_virtual_desktop_application_group.dag.id\n  role_definition_name = \"Desktop Virtualization User\"\n  principal_id         = var.aad_group_id\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenShift Manifests\nDESCRIPTION: Command to create the manifests folder which contains YAML files controlling cluster provisioning. Typically used with UPI installations or when integrating with additional components like load balancers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day58.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenshift-install create manifests\n```\n\n----------------------------------------\n\nTITLE: Starting Enterprise Search with Docker Compose\nDESCRIPTION: Console command to start the stack including Enterprise Search using Docker Compose.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/enterprise-search/enterprise-search-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Azure PowerShell VM Creation Command\nDESCRIPTION: Example showing the PowerShell cmdlet for creating a virtual machine in Azure\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day33.md#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-AzVM\n```\n\n----------------------------------------\n\nTITLE: Running Ad Hoc Command to Get OS Information\nDESCRIPTION: This command demonstrates an ad hoc command that retrieves the operating system details from all systems in the 'linux' group. It shows how Ansible can execute shell commands across multiple systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day64.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nansible linux -a \"cat /etc/os-release\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Persistent Volumes and Claims in Kubernetes\nDESCRIPTION: Commands to list persistent volumes (cluster-wide) and persistent volume claims (in the Pacman namespace).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day55.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pv\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pvc -n pacman\n```\n\n----------------------------------------\n\nTITLE: Retrieving ArgoCD Initial Admin Password\nDESCRIPTION: This command retrieves and decodes the initial admin password for ArgoCD from a Kubernetes secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day76.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d && echo\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Storage Repository in Kopia\nDESCRIPTION: Command to create a new repository in Google Cloud Storage using a specific bucket name of '90daysofdevops'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day86.md#2025-04-17_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository create gcs --bucket 90daysofdevops\n```\n\n----------------------------------------\n\nTITLE: Viewing All Resources in kube-logging Namespace\nDESCRIPTION: Displaying all Kubernetes resources in the kube-logging namespace, including deployments, services, daemonsets, and statefulsets that make up the EFK stack.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day82.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Writing Secrets to KV Engine in HashiCorp Vault\nDESCRIPTION: These commands demonstrate how to write secrets to different paths in the KV secrets engine for various teams and applications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day37.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault kv put 90daysofdevops/cloud/aws secret_key=ABC123 access_key=987zyx\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault kv put 90daysofdevops/development/apps/customer-app user=db-admin password=P@ssw0rd1\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault kv put 90daysofdevops/development/apps/cache-app cert=\"----BEGIN CERTIFICATE----asdfwefsadfa23jjklnsdfkl2jns9n2a32sdaffgrsyhgsfwefdsan---END CERTIFICATE----\" private_key=\"---BEGIN PRIVATE KEY----nwljdwsxcvmnrejhq394hdsfjfgadjkhfajkl----END PRIVATE KEY---\"\n```\n\n----------------------------------------\n\nTITLE: Git Rewriting History Commands\nDESCRIPTION: Commands for rewriting Git history, including amending commits, rebasing, and viewing reflog, with their usage examples and descriptions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day37.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\ngit rebase <base>\ngit reflog\n```\n\n----------------------------------------\n\nTITLE: Installing Istio with Demo Profile\nDESCRIPTION: Command to install Istio using the demo profile, which provides a minimal configuration for demonstration purposes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nistioctl install --set profile=demo -y\n```\n\n----------------------------------------\n\nTITLE: Visualizing Ansible Inventory Graph\nDESCRIPTION: This command uses Ansible to generate a graphical representation of the inventory file, which helps in debugging and visualizing the host connections and variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day55.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nansible-inventory -g graph\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Root User Dockerfile\nDESCRIPTION: A Dockerfile example showing how to create a non-root user for running containers securely. Creates a basic user with specific user and group IDs to avoid running containers with root privileges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day47.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Ubuntu 18.04 as base\nFROM ubuntu:18.04\nRUN apt-get update && apt-get upgrade -y\nRUN groupadd -g 1000 basicuser && useradd -r -u 1000 -g basicuser basicuser\nUSER basicuser\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister S3 Profile\nDESCRIPTION: Command to create a Kanister profile for S3 storage configuration\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day88.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create profile s3compliant --access-key $ACCESS_KEY --secret-key $SECRET_KEY --bucket $BUCKET --region eu-west-2 --namespace my-production-app\n```\n\n----------------------------------------\n\nTITLE: Updated HTML Content\nDESCRIPTION: Sample HTML content update that triggers a new pipeline build.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day74.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>Version 2 - Welcome to 90DaysOfDevOps</h1>\n```\n\n----------------------------------------\n\nTITLE: Declaring and Displaying Variables in Python\nDESCRIPTION: Example of declaring string variables in Python and displaying them using the print function. Shows how to concatenate strings and use variables in output statements.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day47.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvar1 = \"90DaysOfDevOps\"\nvar2 = \"90 Days Of DevOps\"\n\nprint(var1)\nprint(var2)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Getting Started Container\nDESCRIPTION: This command runs the Docker getting started container in detached mode, mapping port 80 on the host to port 80 in the container.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day44.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 docker/getting-started\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu System using apt\nDESCRIPTION: This command updates the package lists for upgrades and new package installations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day16.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Deleting a namespace in Kubernetes\nDESCRIPTION: Command to remove the pacman namespace from a Kubernetes cluster, which is necessary to clean up the previous disaster recovery test before performing a new migration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day90.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete ns pacman\n```\n\n----------------------------------------\n\nTITLE: Unmounting a Disk\nDESCRIPTION: This command safely unmounts a disk from the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo umount /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository and Making Commits\nDESCRIPTION: Demonstrates how to initialize a Git repository, add files, make commits, and view the commit history.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day35.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit add .\ngit commit -m \"My First Commit\"\ngit log\n```\n\n----------------------------------------\n\nTITLE: Search and Replace in vim\nDESCRIPTION: This snippet demonstrates how to perform a search and replace operation in vim. It replaces all occurrences of the word 'Day' with '90DaysOfDevOps' in the current file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day17.md#2025-04-17_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:%s/Day/90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a List Using Python For Loop\nDESCRIPTION: This snippet demonstrates how to use a for loop to iterate through a list of programming languages and print each item. The for loop executes the code block once for each element in the sequence.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day43.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlanguages = ['Python', 'Go', 'JavaScript']\n\n# for loop\nfor language in languages:\n    print(language)\n```\n\n----------------------------------------\n\nTITLE: Staging and Committing Files in Git\nDESCRIPTION: Shows the process of staging files with 'git add' and committing changes with 'git commit'. The example includes adding a specific file and using a commit message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day38.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add README.md\ngit commit -m \"Meaningful message\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Git Editor to Visual Studio Code\nDESCRIPTION: Command to set Visual Studio Code as the default text editor for Git operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day36.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.editor \"code --wait\"\n```\n\n----------------------------------------\n\nTITLE: Enable Minikube Ingress\nDESCRIPTION: Command to enable the Ingress addon on a Minikube cluster with specific profile\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nminikube --profile='mc-demo' addons enable ingress\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Bash Scripts\nDESCRIPTION: Illustrates how to use file conditions in a bash script to check if a file exists and is a regular file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day19.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nFILE=\"90DaysOfDevOps.txt\"\nif [ -f \"$FILE\" ]\nthen \n  echo \"$FILE is a file\"\nelse \n  echo \"$FILE is not a file\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Nginx Pods in Kubernetes\nDESCRIPTION: Command to create three replicas of an nginx pod in Kubernetes using a deployment, with pods labeled as 'app=nginx'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create deployment nginx --image=nginx --replicas=3\n```\n\n----------------------------------------\n\nTITLE: Saving Command Output to a File in Bash\nDESCRIPTION: Demonstrates redirecting the standard output (stdout) of a command to a file. This command lists all files in the current directory using 'ls -la' and saves the output to 'output.txt' instead of displaying it on the terminal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day44.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nls -la > output.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Linux using apt-get\nDESCRIPTION: This command installs Git on a Linux system using the apt package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day36.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git\n```\n\n----------------------------------------\n\nTITLE: Creating Test Table and Data\nDESCRIPTION: Creates a test table and imports data to verify replication functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day66.md#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_table (\n  id smallint,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  dob DATE,\n  email VARCHAR(255),\n  CONSTRAINT test_table_pkey PRIMARY KEY (id)\n)\n\nCOPY test_table(id,first_name, last_name, dob, email)\nFROM '/dvdrental/test_data.csv'\nDELIMITER ','\nCSV HEADER;\n```\n\n----------------------------------------\n\nTITLE: Container Image Vulnerability Scanning with Grype\nDESCRIPTION: Example output from scanning the WebGoat Docker container with Grype. The scan identifies numerous vulnerabilities in the container, including critical issues like Remote Code Execution, SQL Injection, and XML External Entity vulnerabilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day20.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ grype contrast-java-webgoat-docker-webgoat\n ✔ Vulnerability DB        [no update available]\n ✔ Loaded image\n ✔ Parsed image\n ✔ Cataloged packages      [316 packages]\n ✔ Scanned image           [374 vulnerabilities]\nNAME                 INSTALLED               FIXED-IN                TYPE          VULNERABILITY        SEVERITY\napt                  1.8.2.3                                         deb           CVE-2011-3374        Negligible\naxis                 1.4                                             java-archive  GHSA-55w9-c3g2-4rrh  Medium\naxis                 1.4                                             java-archive  GHSA-96jq-75wh-2658  Medium\nbash                 5.0-4                                           deb           CVE-2019-18276       Negligible\nbash                 5.0-4                   (won't fix)             deb           CVE-2022-3715        High\nbsdutils             1:2.33.1-0.1                                    deb           CVE-2022-0563        Negligible\nbsdutils             1:2.33.1-0.1            (won't fix)             deb           CVE-2021-37600       Low\ncommons-beanutils    1.8.3                                           java-archive  CVE-2014-0114        High\ncommons-beanutils    1.8.3                                           java-archive  CVE-2019-10086       High\ncommons-beanutils    1.8.3                   1.9.2                   java-archive  GHSA-p66x-2cv9-qq3v  High\ncommons-beanutils    1.8.3                   1.9.4                   java-archive  GHSA-6phf-73q6-gh87  High\ncommons-collections  3.2.1                                           java-archive  CVE-2015-6420        High\ncommons-collections  3.2.1                   3.2.2                   java-archive  GHSA-6hgm-866r-3cjv  High\ncommons-collections  3.2.1                   3.2.2                   java-archive  GHSA-fjq5-5j5f-mvxh  Critical\ncommons-fileupload   1.3.1                                           java-archive  CVE-2016-1000031     Critical\ncommons-fileupload   1.3.1                                           java-archive  CVE-2016-3092        High\ncommons-fileupload   1.3.1                   1.3.2                   java-archive  GHSA-fvm3-cfvj-gxqq  High\ncommons-fileupload   1.3.1                   1.3.3                   java-archive  GHSA-7x9j-7223-rg5m  Critical\ncommons-io           2.4                                             java-archive  CVE-2021-29425       Medium\ncommons-io           2.4                     2.7                     java-archive  GHSA-gwrp-pvrq-jmwv  Medium\ncoreutils            8.30-3                                          deb           CVE-2017-18018       Negligible\ncoreutils            8.30-3                  (won't fix)             deb           CVE-2016-2781        Low\ncurl                 7.64.0-4+deb10u3                                deb           CVE-2021-22922       Negligible\ncurl                 7.64.0-4+deb10u3                                deb           CVE-2021-22923       Negligible\n<truncated>\n```\n\n----------------------------------------\n\nTITLE: Creating Minikube Tunnel for Ingress Access\nDESCRIPTION: This command creates a tunnel in Minikube for the 'mc-demo' profile. It's necessary to access services through ingress when using Minikube, especially in WSL2 environments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nminikube tunnel --profile=mc-demo\n```\n\n----------------------------------------\n\nTITLE: Encrypting Password Data\nDESCRIPTION: SQL commands to update the password column with encrypted values using pgp_sym_encrypt function.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE test_table\nSET passwd = (pgp_sym_encrypt('Testing1122', 'ENCRYPTIONPWD'))\nWHERE first_name = 'Andrew';\n\nUPDATE test_table\nSET passwd = (pgp_sym_encrypt('Testing3344', 'ENCRYPTIONPWD'))\nWHERE first_name = 'Taylor';\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Storage Repository in Kopia\nDESCRIPTION: Command to create a new Kopia repository in Google Cloud Storage using a specific bucket. This replaces the current repository configuration with one pointing to the cloud storage bucket.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day86.md#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository create gcs --bucket 90daysofdevops\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for ELK Stack\nDESCRIPTION: Docker Compose YAML configuration for setting up Elasticsearch, Logstash, and Kibana as services. The snippet shows the basic service structure with image versions specified.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  elasticsearch:\n    image: elasticsearch:7.8.0\n    ...\n  logstash:\n    image: logstash:7.8.0\n    ...\n  kibana:\n    image: kibana:7.8.0\n    ...\n```\n\n----------------------------------------\n\nTITLE: Deploying Synchronous Application Components\nDESCRIPTION: Command to deploy the synchronous communication pattern application components using a Kubernetes manifest file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day2-ops-code/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f synchronous/k8s.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Access Policy for Web Application\nDESCRIPTION: Command to create a policy named 'devwebapp' that allows read access to the specific secret path for the web application. This defines what the application is allowed to access in Vault.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nvault policy write devwebapp - <<EOF\npath \"secret/data/devwebapp/config\" {\n  capabilities = [\"read\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Git File Renaming Operations\nDESCRIPTION: Commands showing how to rename files and update Git tracking\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day38.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmv oldcode.ps1 newcode.ps1\ngit rm oldcode.ps1\ngit add newcode.ps1\n\n# Alternative single command:\ngit mv oldcode.ps1 newcode.ps1\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWX Admin Password from Kubernetes Secret\nDESCRIPTION: Command to extract and decode the admin password from the Kubernetes secret created during AWX deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day69.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret awx-demo-admin-password -o jsonpath=\"{.data.password}\" -n awx| base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Running an Ansible Ping Module Against Local System\nDESCRIPTION: This command demonstrates using Ansible's ping module to test connectivity against the local system. It's a simple way to verify that Ansible is working properly on the control node.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day64.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nansible localhost -m ping\n```\n\n----------------------------------------\n\nTITLE: Vagrant Configuration for Test Environment\nDESCRIPTION: A Vagrant configuration file to set up multiple Ubuntu VMs for testing Ansible playbooks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  servers=[\n    {\n      :hostname => \"db01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.130\",\n      :ssh_port => '2210'\n    },\n    {\n      :hostname => \"web01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.131\",\n      :ssh_port => '2211'\n    },\n    {\n      :hostname => \"web02\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.132\",\n      :ssh_port => '2212'\n    },\n    {\n      :hostname => \"loadbalancer\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.134\",\n      :ssh_port => '2213'\n    }\n\n  ]\n\nconfig.vm.base_address = 600\n\n  servers.each do |machine|\n\n    config.vm.define machine[:hostname] do |node|\n      node.vm.box = machine[:box]\n      node.vm.hostname = machine[:hostname]\n\n      node.vm.network :public_network, bridge: \"Intel(R) Ethernet Connection (7) I219-V\", ip: machine[:ip]\n      node.vm.network \"forwarded_port\", guest: 22, host: machine[:ssh_port], id: \"ssh\"\n\n      node.vm.provider :virtualbox do |v|\n        v.customize [\"modifyvm\", :id, \"--memory\", 2048]\n        v.customize [\"modifyvm\", :id, \"--name\", machine[:hostname]]\n      end\n    end\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Deploying Rancher Agent on Master Node\nDESCRIPTION: Docker command to deploy the Rancher agent on a master node with etcd and controlplane roles. This registers the node with the Rancher server using a specific token and CA checksum.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day53.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --etcd --controlplane\n```\n\n----------------------------------------\n\nTITLE: Creating Replication User\nDESCRIPTION: Creates a PostgreSQL user with replication privileges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day66.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD 'Testing1122';\n```\n\n----------------------------------------\n\nTITLE: Vagrant Environment Configuration\nDESCRIPTION: Vagrant configuration file that sets up multiple Ubuntu nodes for testing Ansible playbooks. Defines four servers with specific IP addresses and SSH ports.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  servers=[\n    {\n      :hostname => \"db01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.130\",\n      :ssh_port => '2210'\n    },\n    {\n      :hostname => \"web01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.131\",\n      :ssh_port => '2211'\n    },\n    {\n      :hostname => \"web02\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.132\",\n      :ssh_port => '2212'\n    },\n    {\n      :hostname => \"loadbalancer\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.134\",\n      :ssh_port => '2213'\n    }\n\n  ]\n\nconfig.vm.base_address = 600\n\n  servers.each do |machine|\n\n    config.vm.define machine[:hostname] do |node|\n      node.vm.box = machine[:box]\n      node.vm.hostname = machine[:hostname]\n\n      node.vm.network :public_network, bridge: \"Intel(R) Ethernet Connection (7) I219-V\", ip: machine[:ip]\n      node.vm.network \"forwarded_port\", guest: 22, host: machine[:ssh_port], id: \"ssh\"\n\n      node.vm.provider :virtualbox do |v|\n        v.customize [\"modifyvm\", :id, \"--memory\", 2048]\n        v.customize [\"modifyvm\", :id, \"--name\", machine[:hostname]]\n      end\n    end\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Grafana Access\nDESCRIPTION: Kubectl command to set up port forwarding for accessing Grafana on localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/grafana 3000\n```\n\n----------------------------------------\n\nTITLE: GitHub Super-Linter Implementation\nDESCRIPTION: Configuration for implementing the GitHub Super-Linter action to perform automated code linting across multiple languages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day75.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Super-Linter\n\non: push\n\njobs:\n  super-lint:\n    name: Lint code base\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run Super-Linter\n        uses: github/super-linter@v3\n        env:\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Pushing Changes\nDESCRIPTION: Series of Git commands to add changes, commit them, and push to the remote repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day41.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"added new YouTube presentations to list\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Viewing PostgreSQL Error Log\nDESCRIPTION: Command to display the contents of a PostgreSQL log file, showing the captured errors. The filename includes a timestamp based on the log_filename configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day69.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat postgresql-2023-02-24_110854.log\n```\n\n----------------------------------------\n\nTITLE: Deploying ArgoCD in Kubernetes\nDESCRIPTION: Commands to create a namespace for ArgoCD and deploy it in a Kubernetes cluster using the official manifest file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day76.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: User Creation with Password Script\nDESCRIPTION: Enhanced script that creates a user account and sets their password using command line arguments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day19.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1 user account being created.\"\n\n#A user is created with the name of the command line argument\nsudo useradd -m \"$1\"\n\n#A password can be parsed as a command line argument.\nsudo chpasswd <<< \"$1\":\"$2\"\n```\n\n----------------------------------------\n\nTITLE: Building Go Program Binary\nDESCRIPTION: Command to compile the Go program into an executable binary file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day08.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo build main.go\n```\n\n----------------------------------------\n\nTITLE: Checking Persistent Volumes and Claims\nDESCRIPTION: Commands to view persistent volumes (cluster-wide resource) and persistent volume claims (namespace-scoped) used by the Pacman application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pv\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pvc -n pacman\n```\n\n----------------------------------------\n\nTITLE: Comparing Commits and Time Traveling in Git\nDESCRIPTION: Demonstrates how to compare changes between commits and switch between different commit states in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day35.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit diff b8f8 709a\ngit checkout 709a\ngit switch -\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Encryption Keys in YAML\nDESCRIPTION: YAML configuration for specifying encryption keys required for Enterprise Search startup. Shows two different formats for defining multiple encryption keys.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys:\n  - my_first_encryption_key\n  - my_second_encryption_key\n  - ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys: [my_first_encryption_key, my_second_encryption_key, ...]\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Shell on Ubuntu\nDESCRIPTION: Command to install the ZSH shell using the apt package manager. ZSH offers improved features over bash including interactive Tab completion, automated file searching, and advanced shorthand for commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install zsh\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jenkins Admin Password\nDESCRIPTION: This snippet retrieves the initial admin password for Jenkins from the Kubernetes secret. It's necessary for the first-time login to the Jenkins UI.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/chart-admin-password && echo\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Volume Permissions\nDESCRIPTION: This snippet adjusts the permissions of the Jenkins volume within the Minikube VM. It ensures proper access rights for the Jenkins container.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nminikube ssh\nsudo chown -R 1000:1000 /data/jenkins-volume\n```\n\n----------------------------------------\n\nTITLE: Accessing ArgoCD Server Through Port Forwarding\nDESCRIPTION: Command to set up port forwarding to access the ArgoCD server UI through localhost on port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day76.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Package Manager\nDESCRIPTION: This shell script downloads and installs the latest version of Helm, a package manager for Kubernetes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day54.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n\nchmod 700 get_helm.sh\n\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Docker Registry\nDESCRIPTION: A shell command to create a Kubernetes secret for storing Docker registry credentials. This is used to authenticate with DockerHub when pushing images.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day73.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret docker-registry dockercred \\\n    --docker-server=https://index.docker.io/v1/ \\\n    --docker-username=<dockerhub-username> \\\n    --docker-password=<dockerhub-password>\\\n    --docker-email=<dockerhub-email>\n```\n\n----------------------------------------\n\nTITLE: Discarding Local Changes in Git\nDESCRIPTION: Use 'git restore' and 'git clean' commands to discard local changes and remove untracked files from the working directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit restore .\ngit clean -fd\n```\n\n----------------------------------------\n\nTITLE: Deploying a Sleep Pod for Testing in Istio\nDESCRIPTION: Deploys a sleep container from the Istio samples directory to test connectivity within the service mesh.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/sleep/sleep.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Apache2 Role with Ansible Galaxy\nDESCRIPTION: Shell command to create an Apache2 role using ansible-galaxy.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day66.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nansible-galaxy init roles/apache2\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Keys in Enterprise Search YAML (Format 2)\nDESCRIPTION: An alternative format for configuring encryption keys in the enterprise-search.yml configuration file using an array notation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys: [my_first_encryption_key, my_second_encryption_key, ...]\n```\n\n----------------------------------------\n\nTITLE: Setting up MySQL Connection Variables\nDESCRIPTION: Commands to retrieve MySQL root password and set up connection variables\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day88.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace ${APP_NAME} mysql-store -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode)\nMYSQL_HOST=mysql-store.${APP_NAME}.svc.cluster.local\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in Windows CMD\nDESCRIPTION: Command to activate the virtual environment in Windows Command Prompt.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nC:\\> <venv>\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Ubuntu Docker Container\nDESCRIPTION: This command runs an Ubuntu Docker container in interactive mode with a bash shell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day44.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Monitoring AWX Pod Deployment Status\nDESCRIPTION: Command to watch the progress of AWX pods being created and started in the AWX namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day69.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n awx -w\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Config File Path Reference\nDESCRIPTION: Default path location for the Kubernetes configuration file that stores cluster details and credentials.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day52.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Users\\username\\.kube\\config\n```\n\n----------------------------------------\n\nTITLE: Complete Hello World Program in Go\nDESCRIPTION: This is the complete 'Hello World' program in Go, showcasing the package declaration, import statement, main function, and console output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day09.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello #90DaysOfDevOps\")\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Block Devices in Linux\nDESCRIPTION: This command lists all block devices, showing physical disks and their partitions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlsblk\n```\n\n----------------------------------------\n\nTITLE: Viewing staged changes in Git\nDESCRIPTION: Shows how to view changes that have been staged for commit using the git diff command with the --staged flag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit diff --staged\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Bash Script\nDESCRIPTION: Demonstrates how to declare and use variables in a bash script\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchallenge=\"90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Adding All Changed Files to Staging Area\nDESCRIPTION: Command to add all modified and new files in the repository to the staging area at once. This is a shorthand for adding multiple files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Unit Test Output Example\nDESCRIPTION: Shows the expected terminal output when running the unittest example. The output indicates that the test was successful.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day45.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Differences Using Diff Commands\nDESCRIPTION: Commands for viewing staged and unstaged changes in Git repositories using git diff and related commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day39.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit diff --staged\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Opening Kiali Dashboard with Istioctl\nDESCRIPTION: Command to open the Kiali dashboard using the istioctl utility for service mesh visualization.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nistioctl dashboard kiali\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Previous Commit\nDESCRIPTION: The git checkout command with a commit hash allows you to go back to a specific point in the project's history. This demonstrates Git's time-travel capability, enabling examination of the code at any previous commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 709a\n```\n\n----------------------------------------\n\nTITLE: Basic File and Directory Operations in Linux\nDESCRIPTION: This snippet shows various commands for creating, navigating, and manipulating files and directories in Linux.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir Day15\ncd Day15\ncd ..\nrmdir Day15\npwd\ntouch Day15\nls\n```\n\n----------------------------------------\n\nTITLE: Starting NGINX Container with Port Mapping\nDESCRIPTION: This command starts an NGINX container and maps port 8080 on the host to port 80 in the container, allowing external access to the web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day47.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name web1 -d -p 8080:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Opening a File with vim in Linux\nDESCRIPTION: This snippet shows how to open a file named '90DaysOfDevOps.txt' using the vim text editor in Linux. It also mentions the command to exit vim without making changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day17.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvim 90DaysOfDevOps.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Helm using Shell Script\nDESCRIPTION: This snippet demonstrates how to download and install Helm using a shell script. It downloads the installation script, makes it executable, and then runs it to install the latest version of Helm.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day54.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n\nchmod 700 get_helm.sh\n\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources in kube-logging Namespace\nDESCRIPTION: Command to display all Kubernetes resources (pods, deployments, services, etc.) in the kube-logging namespace, showing the complete EFK stack implementation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day82.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Configuring Vagrant with Ansible for VM Provisioning\nDESCRIPTION: This Vagrantfile defines two virtual machines (Ubuntu and Centos) with specific configurations for each. It sets up networking, VM resources, and uses Ansible as the provisioner to configure the VMs after creation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day60.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n    config.vm.define \"ubuntu\" do |ubuntu|\n      ubuntu.vm.box = \"generic/ubuntu2004\"\n      ubuntu.vm.hostname = \"ubuntu\"\n      ubuntu.vm.network \"private_network\", ip: \"192.168.169.110\"\n      ubuntu.vm.provider :virtualbox do |vb|\n        vb.name = \"ubuntu\"\n        vb.memory = 1024\n        vb.cpus = 2\n      end\n    end\n  \n    config.vm.define \"centos\" do |centos|\n      centos.vm.box = \"generic/centos8\"\n      centos.vm.hostname = \"centos\"\n      centos.vm.network \"private_network\", ip: \"192.168.169.111\"\n      centos.vm.provider :virtualbox do |vb|\n        vb.name = \"centos\"\n        vb.memory = 1024\n        vb.cpus = 2\n      end\n    end\n  \n    # Ansible provision\n    config.vm.provision \"ansible\" do |ansible|\n      ansible.playbook = \"playbook.yml\"\n      ansible.groups = {\n        \"centos\" => [\"centos\"],\n        \"ubuntu\" => [\"ubuntu\"]\n      }\n    end  \n  end\n```\n\n----------------------------------------\n\nTITLE: Checking and Changing File Permissions\nDESCRIPTION: Commands to check file permissions and make a script executable using chmod.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nls -al\n```\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x 90DaysOfDevOps.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Disk PersistentVolumeClaim with YAML\nDESCRIPTION: This YAML manifest defines a PersistentVolumeClaim for Azure Disk with ReadWriteOnce access mode, requesting 5GB of storage with the standard storage class.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day22.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: azure-managed-disk\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: managed-premium\n  resources:\n    requests:\n      storage: 5Gi\n```\n\n----------------------------------------\n\nTITLE: Implementing Quantum Teleportation in Qiskit\nDESCRIPTION: A complete implementation of the quantum teleportation protocol using Qiskit. This code creates a circuit with three qubits, initializes a state to be teleported, and demonstrates the complete teleportation process with necessary quantum gates and measurements.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day12.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qiskit import QuantumCircuit, Aer, execute\nfrom qiskit.visualization import plot_histogram\nimport numpy as np\n\n# Create a quantum circuit with 3 qubits and 2 classical bits\nqc = QuantumCircuit(3, 2)\n\n# Prepare the state to teleport (on qubit 0)\nqc.x(0)  # Let's teleport |1⟩. You can change this to any state preparation.\n\n# Create entanglement between qubits 1 and 2\nqc.h(1)\nqc.cx(1, 2)\n\n# Bell measurement on qubits 0 and 1\nqc.cx(0, 1)\nqc.h(0)\nqc.measure([0, 1], [0, 1])\n\n# Apply corrections to qubit 2 based on measurement results\nqc.z(2).c_if(0, 1)  # Apply Z if qubit 0 was measured as 1\nqc.x(2).c_if(1, 1)  # Apply X if qubit 1 was measured as 1\n\n# Draw the circuit\nqc.draw()\n```\n\n----------------------------------------\n\nTITLE: Installing Kanister via Helm\nDESCRIPTION: Helm command to install Kanister operator in a Kubernetes cluster with specific version tag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kanister --namespace kanister kanister/kanister-operator --set image.tag=0.75.0 --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific OAuth Server Audit Log\nDESCRIPTION: Demonstrates how to view a specific OAuth server audit log using the 'oc adm node-logs' command with node name and log file path.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ oc adm node-logs <node_name> --path=oauth-server/<log_name>\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Shell\nDESCRIPTION: Command to install the ZSH shell using apt package manager\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day20.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install zsh\n```\n\n----------------------------------------\n\nTITLE: User Creation Bash Script\nDESCRIPTION: A bash script that creates a user account with the name provided as a command-line argument. It includes notification of creation and uses the 'useradd' command with the '-m' flag to create a home directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n# Bir kullanıcı komut satırı argümanı olarak iletilmiş olmalıdır\necho \"$1 user account being created.\"\n\n# Kullanıcı Olusturma\nsudo useradd -m \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Watching Jenkins Pod Status\nDESCRIPTION: Command to watch the status of Jenkins pods in the jenkins namespace. The -w flag enables continuous watching until interrupted.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n jenkins -w\n```\n\n----------------------------------------\n\nTITLE: Comparing Configuration Management Tools\nDESCRIPTION: A YAML-formatted table comparing features of Chef, Puppet, Ansible, and SaltStack for configuration management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day63.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- Chef:\n    language: Procedural\n    architecture: Server/Client\n    ease_of_setup: Moderate\n    pros:\n      - Large collection of recipes available\n      - Good integration with Git for version control\n    cons:\n      - Steep learning curve\n      - Limited control from main server\n\n- Puppet:\n    language: Declarative\n    architecture: Server/Client\n    ease_of_setup: Moderate\n    pros:\n      - Large community for support\n      - Well-developed reporting mechanism\n    cons:\n      - Requires Ruby knowledge for advanced tasks\n      - Limited control from main server\n\n- Ansible:\n    language: Procedural\n    architecture: Client-only\n    ease_of_setup: Very Easy\n    pros:\n      - Agentless on remote nodes\n      - YAML is easy to learn\n    cons:\n      - Often slower performance than other tools\n      - YAML less powerful than Ruby\n\n- SaltStack:\n    language: Declarative\n    architecture: Server/Client\n    ease_of_setup: Moderate\n    pros:\n      - Easy to use once set up\n      - Good reporting mechanism\n    cons:\n      - Setup process can be tricky\n      - Web UI less developed than other services\n```\n\n----------------------------------------\n\nTITLE: Exposing AWX Service via Minikube\nDESCRIPTION: Command to expose the AWX service through minikube ingress, creating an accessible URL endpoint for the AWX web interface.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day69.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nminikube service awx-demo-service --url -n $NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Deploying MySQL Database\nDESCRIPTION: Commands to deploy MySQL using Helm with specific storage configuration and namespace settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl create ns ${APP_NAME}\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mysql-store bitnami/mysql --set primary.persistence.size=1Gi,volumePermissions.enabled=true --namespace=${APP_NAME}\nkubectl get pods -n ${APP_NAME} -w\n```\n\n----------------------------------------\n\nTITLE: Installing Software with apt Package Manager\nDESCRIPTION: Command to install software packages from the official repositories, using figlet as an example application that generates text banners.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install figlet\n```\n\n----------------------------------------\n\nTITLE: Accessing Grafana Default Credentials\nDESCRIPTION: Default login credentials for accessing Grafana dashboard after initial deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day83.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsername: admin \nPassword: admin\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding ArgoCD Server\nDESCRIPTION: Command to set up port forwarding for accessing the ArgoCD web interface locally through port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day76.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Container with Docker\nDESCRIPTION: Docker command to run a PostgreSQL container with the required configuration for the demonstration, including setting the password and publishing the default PostgreSQL port.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n    --publish 5432:5432 \\\n    --env POSTGRES_PASSWORD=Testing1122 \\\n    --name demo-container \\\n    ghcr.io/dbafromthecold/demo-postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Python Modules for Network Automation\nDESCRIPTION: Commands for installing supplementary Python modules useful for network automation tasks: netaddr for IP address manipulation and xlrd for working with Excel spreadsheets of network configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day27.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install netaddr\npip install xlrd\n```\n\n----------------------------------------\n\nTITLE: Creating and Viewing Files with touch and cat Commands in Linux\nDESCRIPTION: Demonstrates creating empty files with touch and viewing file contents with cat. These commands are fundamental for file creation and inspection in Linux.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch new_file.txt\ncat existing_file.txt\n```\n\n----------------------------------------\n\nTITLE: File Existence Checking in Bash\nDESCRIPTION: A script that demonstrates file condition testing in bash, checking if a specified file exists and providing appropriate feedback.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day19.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nFILE=\"90DaysOfDevOps.txt\"\nif [ -f \"$FILE\" ]\nthen\n  echo \"$FILE is a file\"\nelse\n  echo \"$FILE is not a file\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version in PowerShell\nDESCRIPTION: This command is used to check the installed version of Git on a Windows system using PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day36.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in a Kubernetes Pod\nDESCRIPTION: Using kubectl exec to run shell commands inside a running container within a Kubernetes pod, specifically checking the IP address configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec nginx -- ip addr\n```\n\n----------------------------------------\n\nTITLE: Adding Third-Party Repository for Vagrant\nDESCRIPTION: These commands add the HashiCorp repository to install Vagrant, including adding the GPG key and repository URL.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Secure Enterprise Search Password in Docker Compose\nDESCRIPTION: YAML snippet for configuring a secure password for Enterprise Search in the Docker Compose file. This environment variable should be set before the first boot of Enterprise Search.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ENT_SEARCH_DEFAULT_PASSWORD: {{some strong password}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Encryption Keys in YAML\nDESCRIPTION: YAML configuration showing how to specify encryption keys for Enterprise Search. Keys can be specified either as a list or inline array format.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys:\n  - my_first_encryption_key\n  - my_second_encryption_key\n  - ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys: [my_first_encryption_key, my_second_encryption_key, ...]\n```\n\n----------------------------------------\n\nTITLE: Installing Git on macOS using Homebrew\nDESCRIPTION: Command to install Git on macOS using the Homebrew package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install git\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Docker Container\nDESCRIPTION: Command to run Prometheus as a Docker container with local port mapping\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day78.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding ArgoCD Server in Kubernetes\nDESCRIPTION: This command sets up port forwarding to access the ArgoCD server UI locally on port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day76.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n----------------------------------------\n\nTITLE: Setting Default StorageClass for Kubernetes Cluster\nDESCRIPTION: Commands to configure the csi-hostpath-sc as the default StorageClass and remove the default annotation from the standard StorageClass in a Minikube cluster for stateful applications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Jenkins Service\nDESCRIPTION: Forward Jenkins service port to local machine for access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace jenkins port-forward svc/jenkins 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Deploying Rancher as a Docker Container\nDESCRIPTION: Command to run Rancher server as a Docker container with ports 80 and 443 exposed. This sets up Rancher with automatic restart unless explicitly stopped and runs it in privileged mode.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day53.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher\n```\n\n----------------------------------------\n\nTITLE: Editing Kubernetes Resources with kubectl\nDESCRIPTION: Commands for editing existing Kubernetes resources like services.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit svc/servicename\n```\n\n----------------------------------------\n\nTITLE: Go Hello World Program Implementation\nDESCRIPTION: Basic Go program that prints 'Hello #90DaysOfDevOps' to the console. Demonstrates the main package, importing fmt package, and a simple print statement.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day08.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello #90DaysOfDevOps\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search via Environment Variables\nDESCRIPTION: Example showing how to override Enterprise Search configuration options by setting environment variables in the Docker Compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ent_search.auth.source: standard\n    worker.threads: '6'\n```\n\n----------------------------------------\n\nTITLE: Checking User Account Creation in Linux\nDESCRIPTION: A shell command using awk to filter and display all user accounts from the /etc/passwd file, which can be used to verify if a user account was successfully created.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nawk -F: '{ print $1}' /etc/passwd\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations in BASH Script\nDESCRIPTION: Script showing arithmetic operations in BASH including addition, multiplication, and modulus. It demonstrates using the let command and different operators for calculations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day48.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nlet a=5+4\necho $a\n\nlet \"a = 5 + 4\"\necho $a\n\nlet a++\necho $a\n\nlet \"a = 4 * 5\"\necho $a\n\nlet \"a = $1 + 30\"\necho $a\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Command\nDESCRIPTION: Command to deploy the ELK stack and its output showing creation of network and containers\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\nCreating network \"elasticsearch-logstash-kibana_elastic\" with driver \"bridge\"\nCreating es ... done\nCreating log ... done\nCreating kib ... done\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu System with apt Package Manager\nDESCRIPTION: Command to update the package list on an Ubuntu system, ensuring that the system has the latest information about available packages before installing software.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Terraform Testing Commands Table\nDESCRIPTION: A table showing the main Terraform testing commands including terraform fmt, validate, and plan with their descriptions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day62.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command               | Description                                                                                | \n| --------------------- | ------------------------------------------------------------------------------------------ |\n| `terraform fmt`       | Rewrite Terraform configuration files to a canonical format and style.                     | \n| `terraform validate`  | Validates the configuration files in a directory, referring only to the configuration      | \n| `terraform plan`      | Creates an execution plan, which lets you preview the changes that Terraform plans to make | \n| Custom validation     | Validation of your input variables to ensure they match what you would expect them to be   |\n```\n\n----------------------------------------\n\nTITLE: Git Clone Command for Downloading a Repository\nDESCRIPTION: A command that shows how to clone a repository URL to your local machine. This is mentioned in the context of bringing your forked repository to your local environment for making changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day41.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Datetime Output Example\nDESCRIPTION: Shows the expected terminal output from running the datetime examples, displaying the current datetime, a custom datetime, and the difference between them.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day45.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n2023-02-17 11:33:27.257712\n2023-02-01 12:00:00\n15 days, 23:33:27.257712\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Commands\nDESCRIPTION: Commands for managing Git branches, including creating, switching, and merging branches, with their usage examples and descriptions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day37.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\ngit checkout -b <branch>\ngit merge <branch>\n```\n\n----------------------------------------\n\nTITLE: Getting User Input in Go\nDESCRIPTION: This snippet demonstrates how to use fmt.Scan() to get user input for Twitter name and days completed variables in a Go program.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day12.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Scan(&TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Mounting Kopia Snapshots\nDESCRIPTION: Command to mount all snapshots from the repository to a specified drive letter.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day86.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config mount all Z:\n```\n\n----------------------------------------\n\nTITLE: Creating Linux Network Namespaces\nDESCRIPTION: Commands to create and verify Linux network namespaces called red and blue. This establishes isolated network environments that can be configured separately.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns add red\nsudo ip netns add blue\nip netns list\n```\n\n----------------------------------------\n\nTITLE: Verifying Paramiko Installation in Python Shell\nDESCRIPTION: Example showing how to verify the successful installation of the Paramiko module by importing it in the Python shell. This is a basic check to ensure the module is accessible.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day27.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport paramiko\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Dependencies on Linux\nDESCRIPTION: Command to install PHP and necessary dependencies for a LAMP stack on Linux.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install php libapache2-mod-php php-mysql\n```\n\n----------------------------------------\n\nTITLE: Deploying Sleep and NotSleep Test Pods\nDESCRIPTION: Commands to deploy the Sleep and NotSleep pods, which are utility pods used for testing connectivity to services within the mesh.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/sleep/sleep.yaml\nkubectl apply -f samples/sleep/notsleep.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Table After Restore\nDESCRIPTION: SQL command to select all records from the 'Accounts' table. This is used to verify that the data has been successfully restored after the backup operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nselect * from Accounts;\n```\n\n----------------------------------------\n\nTITLE: Creating a Kanister Restore ActionSet\nDESCRIPTION: Command to create a restore ActionSet referencing a previously created backup ActionSet to recover the deleted database.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset -n kanister --action restore --from \"backup-qpnqv\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Services in Istio System Namespace\nDESCRIPTION: Command to list all services in the istio-system namespace, including the observability services.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair on Windows\nDESCRIPTION: Command to generate an ED25519 SSH key pair on a Windows system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519\n```\n\n----------------------------------------\n\nTITLE: Verifying Terraform Installation\nDESCRIPTION: Command to verify that Terraform has been correctly installed by checking its version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nterraform --version\n```\n\n----------------------------------------\n\nTITLE: Running httpfuzz with Configuration Options\nDESCRIPTION: Command to run httpfuzz with various configuration options including wordlist, request template, target headers, parameters, delay, and proxy settings. This command generates and sends fuzzy HTTP requests to the target server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day17.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./httpfuzz \\\n   --wordlist data.txt \\\n   --seed-request request.txt \\\n   --target-header User-Agent \\\n   --target-param fuzz \\\n   --delay-ms 50 \\\n   --skip-cert-verify \\\n   --proxy-url http://localhost:8080 \\\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Python Modules\nDESCRIPTION: This example demonstrates importing the built-in math module and using its sqrt() function to calculate the square root of a number. Python's standard library provides numerous modules with useful functions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day43.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\nprint(math.sqrt(16)) # 4.0\n```\n\n----------------------------------------\n\nTITLE: Basic Kubectl Cluster Interaction\nDESCRIPTION: Command to verify cluster status by retrieving node information using kubectl\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day51.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: User Input in Bash Scripts\nDESCRIPTION: How to prompt for and capture user input in a bash script using echo and read commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho \"Enter your name\"\nread name\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access Jenkins UI\nDESCRIPTION: Command to set up port forwarding from localhost port 8080 to the Jenkins service in the Kubernetes cluster. This allows access to the Jenkins web interface from the local machine.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace jenkins port-forward svc/jenkins 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Comparison Table of Ansible vs Terraform in Markdown\nDESCRIPTION: This markdown table compares Ansible and Terraform across multiple dimensions including type, infrastructure approach, language style, provisioning capabilities, packaging support, and lifecycle management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day63.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|               |Ansible                                                        |Terraform                                                          |\n| ------------- | ------------------------------------------------------------- | ----------------------------------------------------------------- |\n|Type           |Ansible is a configuration management tool                     |Terraform is a an orchestration tool                               |\n|Infrastructure |Ansible provides support for mutable infrastructure            |Terraform provides support for immutable infrastructure            |\n|Language       |Ansible follows procedural language                            |Terraform follows a declartive language                            |\n|Provisioning   |Ansible provides partial provisioning (VM, Network, Storage)   |Terraform provides extensive provisioning (VM, Network, Storage)   |\n|Packaging      |Ansible provides complete support for packaging & templating   |Terraform provides partial support for packaging & templating      |\n|Lifecycle Mgmt |Ansible does not have lifecycle management                     |Terraform is heavily  dependant on lifecycle and state mgmt        |\n```\n\n----------------------------------------\n\nTITLE: Installing Minikube via Arkade\nDESCRIPTION: Command to install Minikube using the Arkade package manager\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day51.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narkade get minikube\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Client Pod\nDESCRIPTION: Command to create a MySQL client pod for database operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister Restore ActionSet\nDESCRIPTION: This command creates a restore ActionSet using kanctl, specifying the previous backup ActionSet to restore from.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset -n kanister --action restore --from \"backup-qpnqv\"\n```\n\n----------------------------------------\n\nTITLE: Counting with Python While Loop\nDESCRIPTION: This example shows how to implement a while loop that continues executing as long as a condition remains True. The loop prints numbers from 1 to 5 by incrementing a counter variable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day43.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ni = 1\nn = 5\n\n# while loop from i = 1 to 5\nwhile i <= n:\n    print(i)\n    i = i + 1\n```\n\n----------------------------------------\n\nTITLE: Building httpfuzz from Source\nDESCRIPTION: Command to build the httpfuzz binary from source code. This is necessary since the tool is not distributed as a pre-built binary.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day17.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o httpfuzz cmd/httpfuzz.go\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Docker Compose Applications with Volume Removal\nDESCRIPTION: Command to completely remove a Docker Compose application including containers and associated volumes, useful for complete cleanup when persistence is not needed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day46.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token\nDESCRIPTION: Commands to extract the authentication token required for accessing the Kasten K10 dashboard.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day87.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Dynamic HTML Template with Ansible Facts (Jinja2)\nDESCRIPTION: This Jinja2 template for an HTML file uses Ansible facts to display the server name, demonstrating how to incorporate dynamic information in static files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day68.md#2025-04-17_snippet_6\n\nLANGUAGE: Jinja2\nCODE:\n```\n<html>\n\n<h1>{{ html_welcome_msg }}! I'm webserver {{ ansible_facts['nodename'] }} </h1>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Getting User Input with fmt.Scan in Go\nDESCRIPTION: This snippet demonstrates how to use fmt.Scan to get user input and store it in a variable using a pointer.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day12.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Scan(&TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Bash Scripts\nDESCRIPTION: A bash script demonstrating how to define and use variables to store values that can be referenced throughout the script.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day19.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchallenge=\"90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Example GOPATH Output\nDESCRIPTION: Shows the example output of the GOPATH environment variable, displaying the default location of the Go workspace on a Linux system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day10.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/home/michael/projects/go\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Helm Chart\nDESCRIPTION: Commands to add Prometheus Helm repository and install Prometheus in Kubernetes\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day78.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Creating and Editing a File with nano in Linux\nDESCRIPTION: This snippet demonstrates how to create a new file named '90DaysOfDevOps.txt' using the nano text editor in Linux. It shows the basic command to open nano and mentions the control commands to save and exit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day17.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnano 90DaysOfDevOps.txt\n```\n\n----------------------------------------\n\nTITLE: Using Terraform Provisioners with Docker Container\nDESCRIPTION: Example of using local-exec provisioner with a Docker container to execute a command after resource creation. This demonstrates how to perform actions that cannot be handled declaratively in Terraform.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day60.md#2025-04-17_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"docker_container\" \"db\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo The server's IP address is ${self.private_ip}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exploring Default Namespace Configuration\nDESCRIPTION: Command to check the loopback interface in a newly created namespace. This shows that a new namespace has its own isolated network stack.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec red ip link list\n```\n\n----------------------------------------\n\nTITLE: Installing Oh My ZSH Framework\nDESCRIPTION: Command using curl to download and install Oh My ZSH, a framework for managing ZSH configuration. Oh My ZSH provides themes, plugins, and helpers to enhance the shell experience.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Testing Direct Service Connectivity from Sleep Pod\nDESCRIPTION: Command to test direct connectivity to the ProductPage service from the Sleep pod without going through the Ingress Gateway.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec deploy/sleep -- curl -s http://productpage:9080/ | grep -o \"<title>.*</title>\"\n```\n\n----------------------------------------\n\nTITLE: AWX Admin Password Retrieval Command\nDESCRIPTION: Bash command to retrieve and decode the AWX admin password from Kubernetes secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day69.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret awx-demo-admin-password -o jsonpath=\"{.data.password}\" -n awx| base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Delete MongoDB Pod\nDESCRIPTION: Command to delete the mongo-0 pod in the pacman namespace to test persistence\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod mongo-0 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Vulnerability Reports from Trivy\nDESCRIPTION: Command to fetch vulnerability reports generated by Trivy Operator across all namespaces in a Kubernetes cluster. These reports provide detailed information about vulnerabilities detected in container images running in the cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day32.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get vulnerabilityreports --all-namespaces -o wide\n```\n\n----------------------------------------\n\nTITLE: Finding Azure VM-related PowerShell Commands\nDESCRIPTION: This PowerShell command lists all available cmdlets related to Azure Virtual Machines, helping users discover relevant commands for VM management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day33.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command *AzVM*\n```\n\n----------------------------------------\n\nTITLE: Registering Worker Node in Rancher Cluster\nDESCRIPTION: This Docker command registers a worker node in a Rancher-managed Kubernetes cluster. It includes the necessary parameters for connecting to the Rancher server and configuring the node as a worker.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day53.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --worker\n```\n\n----------------------------------------\n\nTITLE: Creating ActionSet to Execute MySQL Backup\nDESCRIPTION: This command creates a Kanister ActionSet that triggers the backup action defined in the blueprint, targeting the MySQL StatefulSet and using the S3 profile for storage.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset --action backup --namespace kanister --blueprint mysql-blueprint --statefulset my-production-app/mysql-store --profile my-production-app/s3-profile-dc5zm --secrets mysql=my-production-app/mysql-store\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 via Helm\nDESCRIPTION: Commands to add the Kasten Helm repository and install Kasten K10 with token authentication and Kanister sidecar injection enabled in the kasten-io namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day87.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add kasten https://charts.kasten.io/\n\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Running a Shell in a Kubernetes Pod\nDESCRIPTION: Command to start an interactive bash shell inside a running Kubernetes pod, allowing direct interaction with the container environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it nginx -- /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Installing Jenkins with Helm Chart\nDESCRIPTION: Commands to install Jenkins using Helm with custom values defined in a configuration file. The chart variable is set to the Jenkins chart from the previously added repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nchart=jenkinsci/jenkins\nhelm install jenkins -n jenkins -f jenkins-values.yml $chart\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Types with fmt.Printf in Go\nDESCRIPTION: Demonstrates how to use fmt.Printf with the %T verb to print the type of variables. This is useful for debugging and understanding type inference in Go.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day11.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Printf(\"challenge is %T, daystotal is %T, dayscomplete is %T\\n\", conference, daystotal, dayscomplete)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Git Editor to Visual Studio Code\nDESCRIPTION: This command sets Visual Studio Code as the default text editor for Git operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day36.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.editor \"code --wait\"\n```\n\n----------------------------------------\n\nTITLE: Populating MySQL Database\nDESCRIPTION: SQL commands to create and populate a sample database with account information\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day88.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"create database myImportantData;\" | mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD}\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho \"drop table Accounts\" | ${MYSQL_EXEC}\necho \"create table if not exists Accounts(name text, balance integer); insert into Accounts values('nick', 0);\" |  ${MYSQL_EXEC}\necho \"insert into Accounts values('albert', 112);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('alfred', 358);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('beatrice', 1321);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('bartholomew', 34);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edward', 5589);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwin', 144);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwina', 233);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('rastapopoulos', 377);\" | ${MYSQL_EXEC}\necho \"select * from Accounts;\" |  ${MYSQL_EXEC}\nexit\n```\n\n----------------------------------------\n\nTITLE: Running Azure CLI Login Command\nDESCRIPTION: Command to log into Azure using the Azure CLI, which opens a browser for authentication to your Azure account.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day34.md#2025-04-17_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Creating and Editing Files with nano in Linux\nDESCRIPTION: Shows how to create a new text file using nano editor. This command opens a new file for editing with a simple interface that displays help shortcuts at the bottom of the screen.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day17.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnano 90DaysOfDevOps.txt\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Basic Command Example\nDESCRIPTION: Example showing the basic syntax for creating a VM using Azure CLI\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day33.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz VM create\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Python Modules for Network Automation\nDESCRIPTION: These commands install additional Python modules useful for network automation tasks, including IP address manipulation and Excel file handling.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day27.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install netaddr\npip install xlrd\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in Windows PowerShell\nDESCRIPTION: Command to activate the virtual environment in Windows PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n<venv>\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Discarding local changes in Git\nDESCRIPTION: Shows how to discard all local changes and restore the working directory to match the last commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit restore .\n```\n\n----------------------------------------\n\nTITLE: Unstaging Files in Git\nDESCRIPTION: Use the 'git restore --staged' command to unstage files that were previously added to the staging area but are not ready for commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --staged <filename>\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Deployment Status\nDESCRIPTION: Verifies that the sleep pod has been deployed to the default namespace and has the Istio sidecar injected, indicated by 2/2 containers running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Role in OpenShift\nDESCRIPTION: Command to apply the custom role definition from a YAML file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ oc apply -f app-mgr-role.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Netmiko Python Module\nDESCRIPTION: This command installs the Netmiko Python module, which is specifically designed for network device automation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day27.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install netmiko\n```\n\n----------------------------------------\n\nTITLE: Calculating Remaining Days Based on User Input in Go\nDESCRIPTION: This code snippet shows how to calculate the remaining days in a challenge by subtracting the user-input completed days from the total days.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day12.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nremainingDays = remainingDays - DaysCompleted\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing ELK Stack Containers\nDESCRIPTION: Command to stop and remove all ELK stack containers and associated networks using Docker Compose.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Prometheus Service\nDESCRIPTION: Kubectl command to forward the Prometheus service port for local access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day83.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/prometheus-k8s 9090\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform AWS Provider in HCL\nDESCRIPTION: This snippet demonstrates how to define the AWS provider in a Terraform configuration file. It specifies the required provider and its version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day58.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"ap-southeast-1\" //region where resources need to be deployed\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Pacman Service in Kubernetes\nDESCRIPTION: Command to forward the Pacman service port to access the application locally. This allows access to the Pacman game running in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/pacman 9090:80 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Editing SSH Configuration File in Linux\nDESCRIPTION: Command to open and edit the SSH daemon configuration file to disable password authentication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /etc/ssh/sshd_config\n```\n\n----------------------------------------\n\nTITLE: MySQL Database and User Creation for WordPress\nDESCRIPTION: MySQL commands to create a database and user for WordPress installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE wordpressdb;\nCREATE USER 'admin-user'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON wordpressdb.* TO 'admin-user'@'localhost';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Creating Standby MiniKube Cluster\nDESCRIPTION: Command to create a new MiniKube cluster for disaster recovery with specific add-ons and Kubernetes version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day89.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p standby --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Common Variables Configuration (YAML)\nDESCRIPTION: Variable definitions for MySQL configuration including ports, credentials and database names.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n\nmysql_user_name: root\nmysql_user_password: \"vagrant\"\ndb_user: devops\ndb_pass: DevOps90\ndb_name: 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Dynamic Azure AD Group Query\nDESCRIPTION: Example configuration showing a Dynamic User query rule in Azure AD to automatically add users based on their email domain. The rule identifies users with @90DaysOfDevOps.com domain suffix.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day30.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nuser.principalName -contains \"@90DaysOfDevOps.com\"\n```\n\n----------------------------------------\n\nTITLE: Basic User Creation Shell Script with Command-Line Arguments\nDESCRIPTION: A basic shell script that takes a username as a command-line argument and displays it. This demonstrates the first step in creating a user account automation script.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Pod Status in Kubernetes Namespace\nDESCRIPTION: This command watches the status of pods in the 'kube-logging' namespace, allowing you to monitor the deployment progress of the EFK stack components.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day82.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging -w\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure CLI in PowerShell\nDESCRIPTION: This command authenticates the user with Azure CLI, opening a browser for login.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day34.md#2025-04-17_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Rotating Vault's Root AWS Credentials\nDESCRIPTION: Command to rotate the credentials Vault uses to access AWS. This is a security best practice to ensure that even the credentials Vault uses are not static for long periods.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day38.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvault write -f aws/config/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Creating an Index on First Name in PostgreSQL\nDESCRIPTION: SQL command to create an index on the first_name column of the actor table. This index improves query performance when filtering by first_name.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day67.md#2025-04-17_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX idx_actor_first_name ON public.actor (first_name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Keys in Enterprise Search YAML Configuration\nDESCRIPTION: Example YAML configurations for adding encryption keys to Enterprise Search. Enterprise Search requires one or more encryption keys to be configured before initial startup to function properly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys:\n  - my_first_encryption_key\n  - my_second_encryption_key\n  - ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys: [my_first_encryption_key, my_second_encryption_key, ...]\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Go\nDESCRIPTION: Simple example of declaring and using a variable in Go to store the challenge name. This demonstrates basic variable declaration syntax and using the variable in string output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day11.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar challenge = \"#90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Adding Kasten K10 Helm Repository\nDESCRIPTION: Command to add the Kasten Helm repository which contains the K10 chart needed for deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add kasten https://charts.kasten.io/\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Non-Root User\nDESCRIPTION: Demonstrates how to run a Docker container with a specific non-root user. This provides an alternative to setting the user in the Dockerfile.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nginx --user=1000 nginx\n```\n\n----------------------------------------\n\nTITLE: Rancher Worker Node Registration\nDESCRIPTION: Docker command to register a worker node with Rancher, configuring it as a Kubernetes worker node.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day53.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --worker\n```\n\n----------------------------------------\n\nTITLE: Using chmod with Symbolic Notation in Linux\nDESCRIPTION: This command demonstrates how to change file permissions using symbolic notation with chmod. It grants execute permissions to the user while removing read permissions from others for 'script.sh'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day49.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchmod u+x,o-r script.sh\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding ArgoCD Server\nDESCRIPTION: Command to set up port forwarding to access the ArgoCD web interface locally on port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day76.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Command\nDESCRIPTION: Command to deploy the ELK stack and its output showing network creation and container startup\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\nCreating network \"elasticsearch-logstash-kibana_elastic\" with driver \"bridge\"\nCreating es ... done\nCreating log ... done\nCreating kib ... done\n```\n\n----------------------------------------\n\nTITLE: Listing All Dotfiles in Home Directory\nDESCRIPTION: Command to list all hidden configuration files (dotfiles) in the home directory that contain 'zshrc'. This helps verify that the ZSH configuration file has been created.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nls -al | grep .zshrc\n```\n\n----------------------------------------\n\nTITLE: Connecting to Linux Server via SSH\nDESCRIPTION: Command to connect to a Linux server using SSH with a username and IP address.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nssh vagrant@192.168.169.135\n```\n\n----------------------------------------\n\nTITLE: Running Ad-hoc Command to Get OS Information\nDESCRIPTION: Ansible ad-hoc command to retrieve operating system details from all systems in the 'linux' group.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day64.md#2025-04-17_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nansible linux -a \"cat /etc/os-release\"\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Jenkins Service\nDESCRIPTION: This command sets up port forwarding from the local machine to the Jenkins service in Kubernetes. It allows accessing the Jenkins UI through localhost:8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace jenkins port-forward svc/jenkins 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Opening Text Editor for Detailed Commit Message\nDESCRIPTION: Command to commit changes using the default text editor. This opens an editor where you can write a more detailed commit message with both a short summary and extended description.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Shell on Ubuntu\nDESCRIPTION: Command to install ZSH shell using apt package manager on Ubuntu. ZSH offers improved features over bash including interactive tab completion, automated file searching, and a rich theme engine.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install zsh\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for SonarCloud Scanning\nDESCRIPTION: This GitHub Actions workflow configuration runs SonarCloud analysis on code pushes to the main branch and pull requests. It uses the SonarSource/sonarcloud-github-action and requires GITHUB_TOKEN and SONAR_TOKEN secrets.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day09.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: SonarScan\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, synchronize, reopened]\njobs:\n  sonarcloud:\n    name: SonarCloud\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n      - name: SonarCloud Scan\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWX Admin Password\nDESCRIPTION: Kubernetes command to retrieve and decode the AWX admin password from a secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day69.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret awx-demo-admin-password -o jsonpath=\"{.data.password}\" -n awx| base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kubernetes Service\nDESCRIPTION: Command to forward local port 9090 to port 80 of the Pacman service in the pacman namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/pacman 9090:80 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Python Function\nDESCRIPTION: This snippet demonstrates how to define a function using the def keyword that accepts two parameters and performs addition. Functions allow for code reuse and encapsulation of logic.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day43.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# function has two arguments num1 and num2\ndef add_numbers(num1, num2):\n    sum = num1 + num2\n    print('The sum is: ',sum)\n```\n\n----------------------------------------\n\nTITLE: Git Reset Operations\nDESCRIPTION: Commands for resetting the staging area and working directory to specific states, including soft and hard resets to specific commits.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit reset\ngit reset --hard\ngit reset <commit>\ngit reset --hard <commit>\n```\n\n----------------------------------------\n\nTITLE: Installing Helm using Curl Script\nDESCRIPTION: This bash script downloads and installs the latest version of Helm, a package manager for Kubernetes. It uses curl to download the installer script, sets the appropriate permissions, and then runs the script to install Helm.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day54.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n\nchmod 700 get_helm.sh\n\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Applying MySQL Backup Blueprint to Kubernetes Cluster\nDESCRIPTION: This command applies the MySQL Blueprint YAML definition to the Kanister namespace in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f mysql-blueprint.yml -n kanister\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL for Recovery\nDESCRIPTION: Configuration settings to add to postgresql.conf that specify recovery parameters including the WAL archive location, target recovery time, and recovery behavior options.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrestore_command = 'cp /postgres/archive/wal/%f %p'\nrecovery_target_time = '2023-02-13 10:20:00'\nrecovery_target_inclusive = false\ndata_directory = '/postgres/archive/base'\n```\n\n----------------------------------------\n\nTITLE: Editing Kubernetes Resources\nDESCRIPTION: Commands for modifying existing Kubernetes resources, specifically focusing on editing services.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl edit svc/servicename\n```\n\n----------------------------------------\n\nTITLE: Checking Kopia Repository Status\nDESCRIPTION: Command to check the status of the current Kopia repository configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day86.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository status\n```\n\n----------------------------------------\n\nTITLE: Unmounting a Disk in Linux\nDESCRIPTION: This command safely unmounts a disk from the file system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day16.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo umount /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Running Compiled Go Binary\nDESCRIPTION: Commands to execute the compiled Go binary on different operating systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day08.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\n$ ./main.exe\nHello #90DaysOfDevOps\n\n# Mac - 올긴이\n$ ./main\nHello #90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests for Changed Components\nDESCRIPTION: This bash command chain retrieves changed files, analyzes dependencies, and runs PHPUnit tests for the affected components.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day15.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit diff --name-only |\\\nxargs php deptrac.php changed-files |\\\nsed 's/;/ --testsuite /g; s/^/--testsuite /g' |\\\nxargs ./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Resource Group Deletion Pattern\nDESCRIPTION: Pattern for deleting all resources in Azure with a specific prefix, useful for cleanup after lab exercises.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day34.md#2025-04-17_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n90Days*\n```\n\n----------------------------------------\n\nTITLE: Installing Software with apt\nDESCRIPTION: This command installs the 'figlet' program, which generates text banners.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install figlet\n```\n\n----------------------------------------\n\nTITLE: Compiling Go Applications for Multiple Operating Systems\nDESCRIPTION: A set of bash commands demonstrating how to compile a Go application for different operating systems and architectures including Darwin (macOS), Linux, and Windows for both AMD64 and ARM64 architectures.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day13.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo tool dist list\n```\n\nLANGUAGE: bash\nCODE:\n```\nGOARCH=amd64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin main.go\nGOARCH=amd64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux main.go\nGOARCH=amd64 GOOS=windows go build -o ${BINARY_NAME}_0.1_windows main.go\nGOARCH=arm64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux_arm64 main.go\nGOARCH=arm64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin_arm64 main.go\n```\n\n----------------------------------------\n\nTITLE: Using File Test Operators in BASH\nDESCRIPTION: Examples of various file test operators used in BASH scripting to check file properties such as existence, readable status, and whether a file is a directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day48.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-e: Returns true value if file exists\n-f: Return true value if file exists and regular file\n-r: Return true value if file exists and is readable\n-w: Return true value if file exists and is writable\n-x: Return true value if file exists and is executable\n-d: Return true value if exists and is a directory\n```\n\n----------------------------------------\n\nTITLE: Viewing All ArgoCD Resources\nDESCRIPTION: Command to display all resources deployed in the argocd namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day76.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl get all -n argocd\n```\n\n----------------------------------------\n\nTITLE: Querying User Permissions in OpenShift\nDESCRIPTION: Command to check who can perform specific actions on resources in a namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\noc adm policy who-can {verb} {resource}\n\n# for example\noc adm policy who-can create pods -n rbac-test-ns\n```\n\n----------------------------------------\n\nTITLE: User-Defined Variables in Ansible Playbook (YAML)\nDESCRIPTION: This snippet demonstrates how to define user variables in an Ansible playbook. These variables can be used throughout the playbook for configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day68.md#2025-04-17_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Application Security Groups Configuration\nDESCRIPTION: Sample configuration demonstrating Application Security Group rules for controlling communication between different application tiers in Azure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day33.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n| Action| Name               | Source     | Destination | Port         |  \n| ------| ------------------ | ---------- | ----------- | ------------ |\n| Allow | AllowInternettoWeb | Internet   | WebServers  | 443(HTTPS)   |\n| Allow | AllowWebToApp      | WebServers | AppServers  | 443(HTTPS)   |\n| Allow | AllowAppToDB       | AppServers | DbServers   | 1443 (MSSQL) |\n| Deny  | DenyAllinbound     | Any        | Any         | Any          |\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kasten K10 Dashboard in Kubernetes\nDESCRIPTION: Command to port forward the Kasten K10 gateway service to enable dashboard access on localhost port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day89.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository and Checking Status\nDESCRIPTION: Demonstrates how to initialize a Git repository and check its status. The 'git init' command creates a new repository, while 'git status' shows the current state of the working directory and staging area.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day38.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit status\n```\n\n----------------------------------------\n\nTITLE: Returning to the Latest Commit\nDESCRIPTION: The git switch - command returns the repository to the most recent commit after checking out a previous one. It's a quick way to undo a checkout operation and get back to the latest state of the code.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit switch -\n```\n\n----------------------------------------\n\nTITLE: Enabling Ingress Addon in Minikube\nDESCRIPTION: Command to enable the Ingress addon in Minikube. This sets up the necessary components for ingress functionality in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nminikube --profile='mc-demo' addons enable ingress\n```\n\n----------------------------------------\n\nTITLE: Printing Variable Types in Go\nDESCRIPTION: Code snippet showing how to use the fmt.Printf function to print the data types of variables using the %T format specifier. This is useful for debugging or understanding type inference.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day11.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"challenge is %T, daystotal is %T, dayscomplete is %T\\n\", conference, daystotal, dayscomplete)\n```\n\n----------------------------------------\n\nTITLE: HTML Content Update Example\nDESCRIPTION: Sample update to the index.html file demonstrating repository changes that trigger pipeline builds\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day74.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n<h1>Welcome to 90DaysOfDevOps - v2</h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Downloading and Importing vCenter Certificates on Linux\nDESCRIPTION: Commands to download vCenter trusted root certificates, unzip them, and import them to the trusted store on a Ubuntu system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day58.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://{vCenter_FQDN}/certs/download.zip\nunzip download.zip\ncp certs/win/* /usr/local/share/ca-certificates\nupdate-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Installing HashiCorp Vault CLI on macOS\nDESCRIPTION: Commands to install HashiCorp Vault CLI on a macOS system using Homebrew. This installs the vault binary which provides access to all vault subcommands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap hashicorp/tap\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install hashicorp/tap/vault\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kubernetes Service\nDESCRIPTION: Command to set up port forwarding from local port 9090 to port 80 of the Pacman service in the pacman namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/pacman 9090:80 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Node Environment with Vagrant\nDESCRIPTION: A Vagrant configuration file that sets up a testing environment with four nodes: two web servers, one database server, and one load balancer. Each machine is configured with specific IP addresses and SSH ports.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: Vagrant\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  servers=[\n    {\n      :hostname => \"db01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.130\",\n      :ssh_port => '2210'\n    },\n    {\n      :hostname => \"web01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.131\",\n      :ssh_port => '2211'\n    },\n    {\n      :hostname => \"web02\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.132\",\n      :ssh_port => '2212'\n    },\n    {\n      :hostname => \"loadbalancer\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.134\",\n      :ssh_port => '2213'\n    }\n\n  ]\n\nconfig.vm.base_address = 600\n\n  servers.each do |machine|\n\n    config.vm.define machine[:hostname] do |node|\n      node.vm.box = machine[:box]\n      node.vm.hostname = machine[:hostname]\n\n      node.vm.network :public_network, bridge: \"Intel(R) Ethernet Connection (7) I219-V\", ip: machine[:ip]\n      node.vm.network \"forwarded_port\", guest: 22, host: machine[:ssh_port], id: \"ssh\"\n\n      node.vm.provider :virtualbox do |v|\n        v.customize [\"modifyvm\", :id, \"--memory\", 2048]\n        v.customize [\"modifyvm\", :id, \"--name\", machine[:hostname]]\n      end\n    end\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Backup ActionSet Status\nDESCRIPTION: This command inspects the status of the backup ActionSet to confirm if the backup operation was successful or if there were any errors.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kanister describe actionset backup-qpnqv\n```\n\n----------------------------------------\n\nTITLE: Referencing PowerShell Scripts for Azure Configuration\nDESCRIPTION: References to PowerShell scripts used to provision and configure Azure resources for the various scenarios. These scripts automate the setup process for the labs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day34.md#2025-04-17_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nCloud/01VirtualNetworking/Module4_90DaysOfDevOps.ps1\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nCloud/02TrafficManagement/Mod06_90DaysOfDevOps.ps1\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nCloud/03Storage/Mod07_90DaysOfDeveOps.ps1\n```\n\n----------------------------------------\n\nTITLE: SSH Config File Content for GitHub\nDESCRIPTION: Configuration settings for SSH connections to GitHub, specifying the host, identity file location, and enabling automatic key adding.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nHost github.com\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Exposing AWX Service in Minikube\nDESCRIPTION: Command to expose the AWX service through Minikube's ingress and obtain the URL for accessing the AWX web interface.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day69.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nminikube service awx-demo-service --url -n $NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Setting Volume Permissions in Minikube\nDESCRIPTION: Commands to access the Minikube VM and set the proper ownership on the Jenkins data volume. This ensures Jenkins has the necessary permissions to read and write data.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nminikube ssh\nsudo chown -R 1000:1000 /data/jenkins-volume\n```\n\n----------------------------------------\n\nTITLE: Defining AWS EC2 Resource in Terraform\nDESCRIPTION: HCL code defining an AWS EC2 instance resource with configuration for AMI, instance type, availability zone, security groups, and user data to install a web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day58.md#2025-04-17_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami               = data.aws_ami.instance_id.id\n  instance_type     = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n  security_groups   = [aws_security_group.allow_web.name]\n  user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Istio Archive\nDESCRIPTION: Command to extract the downloaded Istio tarball to access the installation files and binary tools.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -xf istio-1.18.0-alpha.0-linux-amd64.tar.gz istio-1.18.0-alpha.0/\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Command to build a Docker image with a specific tag from the current directory\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day45.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 90daysofdevops:0.1 .\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Ansible Facts\nDESCRIPTION: A simple HTML template that uses Ansible facts and variables to display custom welcome messages and the server hostname, demonstrating template personalization.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_5\n\nLANGUAGE: jinja2\nCODE:\n```\n<html>\n\n<h1>{{ html_welcome_msg }}! I'm webserver {{ ansible_facts['nodename'] }} </h1>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Ansible vs Terraform Comparison Table\nDESCRIPTION: A markdown table comparing key features and characteristics of Ansible and Terraform, including their type, infrastructure approach, language style, provisioning capabilities, and lifecycle management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day63.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|               |Ansible                                                        |Terraform                                                          |\n| ------------- | ------------------------------------------------------------- | ----------------------------------------------------------------- |\n|Type           |Ansible is a configuration management tool                     |Terraform is a an orchestration tool                               |\n|Infrastructure |Ansible provides support for mutable infrastructure            |Terraform provides support for immutable infrastructure            |\n|Language       |Ansible follows procedural language                            |Terraform follows a declartive language                            |\n|Provisioning   |Ansible provides partial provisioning (VM, Network, Storage)   |Terraform provides extensive provisioning (VM, Network, Storage)   |\n|Packaging      |Ansible provides complete support for packaging & templating   |Terraform provides partial support for packaging & templating      |\n|Lifecycle Mgmt |Ansible does not have lifecycle management                     |Terraform is heavily  dependant on lifecycle and state mgmt        |\n```\n\n----------------------------------------\n\nTITLE: Defining a Foreign Key Constraint in PostgreSQL\nDESCRIPTION: Shows how to create a foreign key constraint in PostgreSQL with update and delete rules. This constraint links the address_id column in the staff table to the address table.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCONSTRAINT staff_address_id_fkey FOREIGN KEY (address_id)\n        \tREFERENCES public.address (address_id) MATCH SIMPLE\n        \tON UPDATE CASCADE\n        \tON DELETE RESTRICT\n```\n\n----------------------------------------\n\nTITLE: Running Repeated Curl Test to Generate Traffic\nDESCRIPTION: Loop command to repeatedly test connectivity to the ProductPage service from the NotSleep pod, generating traffic in the mesh for monitoring purposes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nfor i in {1..10}; do   kubectl exec deploy/notsleep -- curl -s http://productpage:9080/ | grep -o \"<title>.*</title>\";   sleep 1; done\n```\n\n----------------------------------------\n\nTITLE: Creating a Standby Minikube Cluster with Volume Snapshot Support\nDESCRIPTION: Command to create a second minikube cluster named 'standby' with the necessary add-ons for volume snapshots and CSI driver, which will serve as the disaster recovery target.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day89.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p standby --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Creating OpenShift Project and Context\nDESCRIPTION: Commands to create a new OpenShift project and switch to its context\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ oc new-project scc-ns-test\n\n$ oc project ssc-ns-test\n```\n\n----------------------------------------\n\nTITLE: Moving files in Linux\nDESCRIPTION: The 'mv' command moves files from one location to another. Here it moves 'Day15' to the '90DaysOfDevOps' directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmv Day15 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Example Playbook Usage for Ansible Role\nDESCRIPTION: Demonstrates how to include the role in an Ansible playbook. This example shows how to apply the role to servers and pass a variable to the role.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Configmgmt/ansible-scenario5/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Listing Block Devices in Linux\nDESCRIPTION: Command to display all block devices (like hard drives) connected to the system, showing physical disks and their partitions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlsblk\n```\n\n----------------------------------------\n\nTITLE: Applying Developer Role to OpenShift Project using CLI\nDESCRIPTION: This command applies the developer role defined in a YAML file to a specific OpenShift project using the 'oc apply' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ oc apply -f developer-role.yaml -n my-sample-project\n```\n\n----------------------------------------\n\nTITLE: Git Basic Commands\nDESCRIPTION: A collection of fundamental Git commands for repository initialization, cloning, configuration, staging, committing, and checking status.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init <directory>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repo>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit config user.name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add <directory>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"<message>\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Creating AWX Demo Deployment\nDESCRIPTION: Kubectl command to create the AWX demo deployment in the specified namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day69.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f awx-demo.yml -n awx\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Pacman Application\nDESCRIPTION: Command to set up port forwarding to access the Pacman application front-end on localhost port 9090.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/pacman 9090:80 -n pacman\n```\n\n----------------------------------------\n\nTITLE: MySQL Database and User Setup Tasks\nDESCRIPTION: Tasks for creating MySQL configuration, database user with privileges, and a new database.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create my.cnf configuration file\n  template: src=templates/my.cnf.j2 dest=/etc/mysql/conf.d/mysql.cnf\n  notify: restart mysql\n\n- name: Create database user with name 'devops' and password 'DevOps90' with all database privileges\n  community.mysql.mysql_user:\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n    login_user: \"{{ mysql_user_name }}\" \n    login_password: \"{{ mysql_user_password }}\" \n    name: \"{{db_user}}\"\n    password: \"{{db_pass}}\"\n    priv: '*.*:ALL'\n    host: '%'\n    state: present\n\n- name: Create a new database with name '90daysofdevops'\n  mysql_db:\n    login_user: \"{{ mysql_user_name }}\" \n    login_password: \"{{ mysql_user_password }}\"\n    name: \"{{ db_name }}\"\n    state: present\n```\n\n----------------------------------------\n\nTITLE: Rebasing in Git\nDESCRIPTION: Command for interactively rebasing the current branch onto another base commit, allowing control over how each commit is transferred to the new base.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                               |           Example                      |           Description                                                                                                                         | \n| ------------------------------------- |   ------------------------------------ |   ------------------------------------------------------------------------------------------------------------------------------------------- |\n| git rebase -i <base>                  | `git rebase -i <base>`                 | Interactively rebase current branch onto <base>. Launches editor to enter commands for how each commit will be transferred to the new base.   |\n```\n\n----------------------------------------\n\nTITLE: Setting Default StorageClass in Kubernetes\nDESCRIPTION: Commands to configure the csi-hostpath-sc as the default StorageClass and remove the default annotation from the standard StorageClass in a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Deploying MySQL Database using Helm\nDESCRIPTION: Commands to deploy MySQL using Bitnami Helm chart with specific persistence settings\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day88.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl create ns ${APP_NAME}\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mysql-store bitnami/mysql --set primary.persistence.size=1Gi,volumePermissions.enabled=true --namespace=${APP_NAME}\nkubectl get pods -n ${APP_NAME} -w\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Resource Limits in Docker Compose\nDESCRIPTION: Shows how to set memory and CPU limits for a Docker container using Docker Compose. This approach is useful for multi-container applications where consistent resource management is required.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  redis:\n    image: redis:alpine\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 500M\n```\n\n----------------------------------------\n\nTITLE: Accessing Prometheus Server UI\nDESCRIPTION: Commands to port-forward the Prometheus server pod for UI access\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day78.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=prometheus,component=server\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl --namespace default port-forward $POD_NAME 9090\n```\n\n----------------------------------------\n\nTITLE: Creating Kopia Snapshot\nDESCRIPTION: Command to create a new snapshot of a specified directory and send it to the configured repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day86.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config kopia snapshot create \"C:\\Users\\micha\\demo\\90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Example of Successful Response Code\nDESCRIPTION: Shows the expected successful response code (200) from the curl request to the productpage service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n200\n```\n\n----------------------------------------\n\nTITLE: Hosts File Configuration for Ansible Control Node\nDESCRIPTION: An example of how to configure the /etc/hosts file on the Ansible control node to map IP addresses to hostnames for the managed nodes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day65.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n192.168.169.140 ansible-control\n192.168.169.130 db01\n192.168.169.131 web01\n192.168.169.132 web02\n192.168.169.133 loadbalancer\n```\n\n----------------------------------------\n\nTITLE: Viewing PostgreSQL Container Logs\nDESCRIPTION: Docker command to view the logs of the PostgreSQL container, which shows the recovery process status and any errors that might occur.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker container logs demo-container\n```\n\n----------------------------------------\n\nTITLE: Getting system memory information in Linux\nDESCRIPTION: This command retrieves memory information using the 'cat /proc/meminfo' command, which shows details about the system's RAM usage, availability, and allocation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day02.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/meminfo\n```\n\n----------------------------------------\n\nTITLE: Displaying GOPATH Environment Variable\nDESCRIPTION: Command to display the Go workspace path environment variable\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day10.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $GOPATH\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Flask Application with Elastic APM\nDESCRIPTION: Example configuration for connecting a Python Flask application to the APM Server. It demonstrates setting up the ElasticAPM extension with required service name and server URL configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport elasticapm\nfrom elasticapm.contrib.flask import ElasticAPM\n\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['ELASTIC_APM'] = {\n    # Set required service name. Allowed characters:\n    # a-z, A-Z, 0-9, -, _, and space\n    'SERVICE_NAME': 'PYTHON_FLASK_TEST_APP',\n\n    # Set custom APM Server URL (default: http://localhost:8200)\n    'SERVER_URL': 'http://apm-server:8200',\n\n    'DEBUG': True,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Multipass with Homebrew\nDESCRIPTION: Command to install Multipass using Homebrew package manager on macOS systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask multipass\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Auto-suggestions Plugin\nDESCRIPTION: Command to install the ZSH auto-suggestions plugin which provides fish-like suggestions based on command history as you type in the terminal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Prometheus Access\nDESCRIPTION: Kubectl command to set up port forwarding for accessing Prometheus on localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/prometheus-k8s 9090\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Roles in PostgreSQL\nDESCRIPTION: This SQL query retrieves a list of default roles in PostgreSQL. It's used to examine the predefined roles available for assigning permissions to users.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT groname FROM pg_group;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kubernetes Pods in kube-logging Namespace\nDESCRIPTION: Command to watch the status of the pods in the kube-logging namespace as they start up. The -w flag enables watching for changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day82.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging -w\n```\n\n----------------------------------------\n\nTITLE: Git Config Commands\nDESCRIPTION: Commands for configuring Git settings, including user information, aliases, and editor preferences.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                                               |           Example                                      |           Description                                                                                                                         | \n| ----------------------------------------------------- |   ---------------------------------------------------- |   ------------------------------------------------------------------------------------------------------------------------------------------- |\n| git config --global user.name <name>                  | `git config --global user.name <name>`                 | Define the author name to be used for all commits by the current user.                                                                        |\n| git config --global user.email <email>                | `git config --global user.email <email>`               | Define author email to be used for all commits by the current user.                                                                           |\n| git config --global alias <alias-name> <git-command>  | `git config --global alias <alias-name> <git-command>` | Create shortcut for a git command .                                                                                                           |\n| git config --system core.editor <editor>              | `git config --system core.editor <editor>`             | Set the text editor to be used by commands for all users on the machine. <editor> arg should be the comamnd that launches the desired editor. |\n| git config --global --edit                            | `git config --global --edit `                          | Open the global configuration file in a text editor for manual editing.                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Jenkins Volume\nDESCRIPTION: These commands SSH into the Minikube container and set the correct permissions on the Jenkins data volume to allow the Jenkins pod to access it.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nminikube ssh\nsudo chown -R 1000:1000 /data/jenkins-volume\n```\n\n----------------------------------------\n\nTITLE: Setting up Minikube Cluster with Volume Snapshots\nDESCRIPTION: Command to start a minikube cluster with volumesnapshots and csi-hostpath-driver addons enabled, specifying Kubernetes version and container runtime.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day87.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p 90daysofdevops --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: Creating and Editing Files with nano\nDESCRIPTION: Demonstrates how to create and edit a new text file using the nano editor. The command creates a file named '90DaysOfDevOps.txt' and opens it for editing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day17.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnano 90DaysOfDevOps.txt\n```\n\n----------------------------------------\n\nTITLE: Git Basic File Operations\nDESCRIPTION: Common Git commands for initializing repository, staging files and making initial commits\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day38.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit status\ngit add README.md\ngit commit -m \"Meaningful message\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Connection Variables\nDESCRIPTION: These commands retrieve the MySQL root password from Kubernetes secrets and set up environment variables needed for connecting to the MySQL instance.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace ${APP_NAME} mysql-store -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode)\nMYSQL_HOST=mysql-store.${APP_NAME}.svc.cluster.local\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources with kubectl\nDESCRIPTION: Basic kubectl commands for listing various Kubernetes resources including nodes, namespaces, and pods across different namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\nkubectl get namespaces\nkubectl get pods\nkubectl get pods -n name\n```\n\n----------------------------------------\n\nTITLE: SSH Config File Path Error Resolution\nDESCRIPTION: Commands to resolve a common error where the SSH config directory or file doesn't exist, by creating the directory and setting proper permissions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/.ssh\nchmod 700 ~/.ssh\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Flask for APM Integration\nDESCRIPTION: Example configuration for integrating a Python Flask application with Elastic APM. This setup specifies the service name and APM server URL, which are essential for trace reporting.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport elasticapm\nfrom elasticapm.contrib.flask import ElasticAPM\n\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['ELASTIC_APM'] = {\n    # Set required service name. Allowed characters:\n    # a-z, A-Z, 0-9, -, _, and space\n    'SERVICE_NAME': 'PYTHON_FLASK_TEST_APP',\n\n    # Set custom APM Server URL (default: http://localhost:8200)\n    'SERVER_URL': 'http://apm-server:8200',\n\n    'DEBUG': True,\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Terratest Application in Go\nDESCRIPTION: A sequence of commands to clone, initialize, and run a Terratest application for testing Terraform infrastructure code. Includes steps to initialize Go modules and execute the test.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day62.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone #repo_url# \ncd test  \ngo mod init \"<MODULE_NAME>\"  \n**MODULE_NAME would be github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>**  \ngo mod init github.com/<FOLDER-PATH>  \ngo run\n```\n\n----------------------------------------\n\nTITLE: Getting VM Information with Multipass\nDESCRIPTION: Command to display detailed information about a specific virtual machine including state, IPv4 address, release version, and resource allocation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmultipass info 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Configuring kubectl with Stolen Service Account Token\nDESCRIPTION: A series of commands that configure kubectl to use a stolen service account token from kube-proxy, showing how credential theft can lead to unauthorized access in Kubernetes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBE_PROXY_POD_NAME=`kubectl get pods -n kube-system | grep kube-proxy | head -n 1 | awk '{print $1}'`\nexport TOKEN=`kubectl -n kube-system exec $KUBE_PROXY_POD_NAME -- cat /var/run/secrets/kubernetes.io/serviceaccount/token`\nexport API_SERVER_URL=`kubectl config view --minify --output jsonpath=\"{.clusters[*].cluster.server}\"`\nkubectl -n kube-system exec $KUBE_PROXY_POD_NAME -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt > /tmp/ca.crt\nkubectl config set-cluster access-test --server=$API_SERVER_URL --certificate-authority=/tmp/ca.crt\nkubectl config set-context access-test --cluster=access-test\nkubectl config set-credentials user --token=$TOKEN\nkubectl config set-context access-test --user=user\nkubectl config use-context access-test\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kanister Profiles in Kubernetes Namespace\nDESCRIPTION: Command to list Kanister profiles in the 'my-production-app' namespace. This is used to identify available profiles for configuring ActionSets.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get profiles.cr.kanister.io -n my-production-app\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Commands for Application Management\nDESCRIPTION: A collection of essential Docker Compose commands for starting, stopping, and managing multi-container applications. Includes commands for detached mode deployment, checking running containers, and proper cleanup with volume removal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day46.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Using curl to Test Web Server Configuration\nDESCRIPTION: Shell command to test the web server configuration using curl.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day66.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl web01:8000\n```\n\n----------------------------------------\n\nTITLE: Installing Paramiko SSH Module for Python\nDESCRIPTION: Commands for installing and verifying the Paramiko Python module, which is widely used for SSH connections. This module is a foundation for many network automation scripts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day27.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install paramiko\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes YAML Configuration\nDESCRIPTION: Command to create or update resources in a Kubernetes cluster using a YAML definition file, in this case applying a service configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f service.yaml\n```\n\n----------------------------------------\n\nTITLE: Running the Flask App\nDESCRIPTION: Command to run the Flask application using Python.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password in Kubernetes\nDESCRIPTION: Extracts the auto-generated admin password for Grafana from Kubernetes secrets. This command is necessary for initial login to the Grafana dashboard after installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day28.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret --namespace default grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n```\n\n----------------------------------------\n\nTITLE: Installing Netmiko Network Automation Module for Python\nDESCRIPTION: Command for installing the Netmiko Python module, which is specifically designed for network device automation. Netmiko simplifies SSH connections to network devices from various vendors.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day27.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install netmiko\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Route in Flask\nDESCRIPTION: Python code to define the route for individual blog posts, reading Markdown files and converting to HTML.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/posts/<path:path>')\ndef post(path):\n    with open(f'posts/{path}.md', 'r') as file:\n        content = file.read()\n        html = markdown.markdown(content)\n        return render_template('post.html', content=html)\n```\n\n----------------------------------------\n\nTITLE: Bash Commands for Creating Azure Service Principal\nDESCRIPTION: Commands for creating an Azure service principal with Contributor role access to a specific resource group. This service principal provides authentication for the CI/CD pipeline to access Azure resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day25.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp create-for-rbac --name \"api-name\" --role contributor --scopes /subscriptions/$(az account show --query id -o tsv)/resourceGroups/{ResourceGroupName} --sdk-auth\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables During Declaration in Go\nDESCRIPTION: Shows how to declare and initialize variables in one line in Go, with explicit type specification. The variables are initialized with specific values for each type.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day15.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvar i int = 10\nvar s string = \"Canada\"\nvar b bool = true\n```\n\n----------------------------------------\n\nTITLE: Viewing Staged Changes in Git\nDESCRIPTION: Use the 'git diff --staged' command to view changes that have been staged but not yet committed. This shows modifications, additions, and deletions in staged files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit diff --staged\n```\n\n----------------------------------------\n\nTITLE: Changing user password in Linux\nDESCRIPTION: The 'passwd' command allows users to change their password. When used directly, it doesn't show the password in command history for security.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\npasswd\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple Variables in Go\nDESCRIPTION: Shows how to track progress in the challenge by adding a variable for completed days. This example uses three different values (a string, a constant integer, and a variable integer) in the output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day11.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    const daystotal = 90\n    var dayscomplete = 11\n\n    fmt.Println(\"Welcome to\", challenge, \"\")\n    fmt.Println(\"This is a\", daystotal, \"challenge and you have completed\", dayscomplete, \"days\")\n    fmt.Println(\"Great work\")\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Population Script\nDESCRIPTION: Bash script to populate MySQL database with initial account data\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"create database myImportantData;\" | mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD}\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho \"drop table Accounts\" | ${MYSQL_EXEC}\necho \"create table if not exists Accounts(name text, balance integer); insert into Accounts values('nick', 0);\" |  ${MYSQL_EXEC}\necho \"insert into Accounts values('albert', 112);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('alfred', 358);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('beatrice', 1321);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('bartholomew', 34);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edward', 5589);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwin', 144);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwina', 233);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('rastapopoulos', 377);\" | ${MYSQL_EXEC}\necho \"select * from Accounts;\" |  ${MYSQL_EXEC}\n```\n\n----------------------------------------\n\nTITLE: Searching File Contents with grep Command in Linux\nDESCRIPTION: Demonstrates using grep to search for text patterns within files. Shows basic pattern matching as well as using the -r flag for recursive searching through directories.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngrep \"search_term\" file.txt\ngrep -r \"search_term\" directory/\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Monitoring\nDESCRIPTION: Kubectl command to create a namespace for the monitoring resources in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f manifests/setup\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User in PostgreSQL\nDESCRIPTION: This SQL command creates a new user named 'test_user' with a specified password in PostgreSQL. It demonstrates how to add a new user account to the database system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE USER test_user WITH PASSWORD 'Testing1122'\n```\n\n----------------------------------------\n\nTITLE: Verifying Istio Virtual Services and Destination Rules\nDESCRIPTION: This command checks the status of virtual services (vs) and destination rules (dr) in the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get vs && kubectl get dr\n```\n\n----------------------------------------\n\nTITLE: Checking Monitoring Pods Status in Kubernetes\nDESCRIPTION: Command to list all pods in the monitoring namespace to verify they are running properly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Removing directories with rmdir in Linux\nDESCRIPTION: The 'rmdir' command removes empty directories. It will only work if the directory contains no files or subdirectories.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrmdir Day15\n```\n\n----------------------------------------\n\nTITLE: Resetting Repository State in Git\nDESCRIPTION: Commands for resetting the repository to a previous state, with different options for handling the staging area and working directory changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                   |           Example           |           Description                                                                                                                           | \n| ------------------------- |   --------------------------|   --------------------------------------------------------------------------------------------------------------------------------------------- |\n| git reset                 | `git reset `                | Reset the staging area to match the most recent commit but leave the working directory unchanged.                                                      |\n| git reset --hard          | `git reset --hard`          | Reset staging area and working directory to match most recent commit and overwrites all changes in the working directory                        |\n| git reset <commit>        | `git reset <commit>`        | Move the current branch tip backwards to <commit>, reset the staging area to match, but leave the working directory alone                        |\n| git reset --hard <commit> | `git reset --hard <commit>` | Same as previous, but resets both the staging area & working directory to match. Deletes uncommitted changes, and all commits after <commit>.   |\n```\n\n----------------------------------------\n\nTITLE: Apache2 Tasks for Webserver Configuration in YAML\nDESCRIPTION: This code snippet contains the tasks for ensuring Apache2 is installed, configuring ports, creating an index.html file, and ensuring the service is running. These tasks were extracted from the main playbook to be organized in a separate file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day66.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: ensure apache is at the latest version\n  apt: name=apache2 state=latest\n\n- name: write the apache2 ports.conf config file\n  template: \n    src=templates/ports.conf.j2 \n    dest=/etc/apache2/ports.conf\n  notify: restart apache\n\n- name: write a basic index.html file\n  template:\n    src: templates/index.html.j2\n    dest: /var/www/html/index.html\n  notify:\n  - restart apache\n\n- name: ensure apache is running\n  service:\n    name: apache2\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Deploying MySQL Database with Helm\nDESCRIPTION: Commands to create a namespace and deploy a MySQL database using the Bitnami Helm chart with specified configuration for persistence and volume permissions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl create ns ${APP_NAME}\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mysql-store bitnami/mysql --set primary.persistence.size=1Gi,volumePermissions.enabled=true --namespace=${APP_NAME}\nkubectl get pods -n ${APP_NAME} -w\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Variables to Go Program\nDESCRIPTION: A Go program that tracks challenge progress by adding a variable for completed days alongside existing challenge name and total days variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day11.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    const daystotal = 90\n    var dayscomplete = 11\n\n    fmt.Println(\"Welcome to\", challenge, \"\")\n    fmt.Println(\"This is a\", daystotal, \"challenge and you have completed\", dayscomplete, \"days\")\n    fmt.Println(\"Great work\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Namespace Operations\nDESCRIPTION: Command to list all namespaces in the Kubernetes cluster, used to verify the absence of the pacman namespace before deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespace\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Restoration\nDESCRIPTION: Commands to verify that the database and its data have been successfully restored after the restore operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho \"SHOW DATABASES;\" |  ${MYSQL_EXEC}\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"select * from Accounts;\" |  ${MYSQL_EXEC}\n```\n\n----------------------------------------\n\nTITLE: Taking Base Backup\nDESCRIPTION: Creates a base backup for the secondary instance including WAL files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day66.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npg_basebackup -D /postgres/archive/base -S replication_slot_slave1 -X stream -U replicator -Fp -R\n```\n\n----------------------------------------\n\nTITLE: PHP Info Script\nDESCRIPTION: PHP script to display PHP configuration information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nphpinfo();\n?>\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Playbook Usage\nDESCRIPTION: Demonstrates how to include and use the role in an Ansible playbook with parameter passing. Shows basic role inclusion syntax with a variable assignment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Configmgmt/ansible-scenario4/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Vagrant Configuration for Kubernetes Cluster\nDESCRIPTION: Vagrant configuration file that defines a 3-node Kubernetes cluster setup with one master and two worker nodes. It includes network configuration, VM specifications, and provisioning scripts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day52.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nNUM_WORKER_NODES=2\nIP_NW=\"10.0.0.\"\nIP_START=10\n\nVagrant.configure(\"2\") do |config|\n    config.vm.provision \"shell\", inline: <<-SHELL\n        apt-get update -y\n        echo \"$IP_NW$((IP_START))  master-node\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+1))  worker-node01\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+2))  worker-node02\" >> /etc/hosts\n    SHELL\n    config.vm.box = \"bento/ubuntu-21.10\"\n    config.vm.box_check_update = true\n\n    config.vm.define \"master\" do |master|\n      master.vm.hostname = \"master-node\"\n      master.vm.network \"private_network\", ip: IP_NW + \"#{IP_START}\"\n      master.vm.provider \"virtualbox\" do |vb|\n          vb.memory = 4048\n          vb.cpus = 2\n          vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n      end\n      master.vm.provision \"shell\", path: \"scripts/common.sh\"\n      master.vm.provision \"shell\", path: \"scripts/master.sh\"\n    end\n\n    (1..NUM_WORKER_NODES).each do |i|\n      config.vm.define \"node0#{i}\" do |node|\n        node.vm.hostname = \"worker-node0#{i}\"\n        node.vm.network \"private_network\", ip: IP_NW + \"#{IP_START + i}\"\n        node.vm.provider \"virtualbox\" do |vb|\n            vb.memory = 2048\n            vb.cpus = 1\n            vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n        end\n        node.vm.provision \"shell\", path: \"scripts/common.sh\"\n        node.vm.provision \"shell\", path: \"scripts/node.sh\"\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Changing File Permissions in Linux\nDESCRIPTION: This command changes the permissions of the 'Day15' file to 750, giving the owner read, write, and execute permissions, the group read and execute permissions, and others no permissions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchmod 750 Day15\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Detailed Message\nDESCRIPTION: Opens the default text editor to write a detailed commit message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day38.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Testing Write Access in PostgreSQL\nDESCRIPTION: This SQL command attempts to update data in the 'actor' table. It's used to verify that the user does not have write access, demonstrating the effectiveness of the assigned read-only permissions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE actor SET last_name = 'TEST'\n```\n\n----------------------------------------\n\nTITLE: Checking ZTunnel Logs\nDESCRIPTION: Command to view the logs from ztunnel pods to observe the HBONE protocol traffic handling between services in the Ambient Mesh.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -n istio-system -l app=ztunnel\n```\n\n----------------------------------------\n\nTITLE: Viewing Git History and Commits\nDESCRIPTION: Commands for viewing Git commit history in different formats including oneline and reverse order.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day39.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log\ngit log --oneline\ngit log --oneline --reverse\n```\n\n----------------------------------------\n\nTITLE: Viewing Resources in Pacman Namespace\nDESCRIPTION: Command to list all resources (pods, services, deployments, StatefulSets) in the pacman namespace after deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n pacman\n```\n\n----------------------------------------\n\nTITLE: Terminating Database Connections\nDESCRIPTION: SQL query to terminate all active connections to the dvdrental database before dropping it.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pg_terminate_backend(pg_stat_activity.pid)\nFROM pg_stat_activity\nWHERE pg_stat_activity.datname = 'dvdrental'\n  AND pid <> pg_backend_pid();\n```\n\n----------------------------------------\n\nTITLE: Checking SSH Server Status in Linux\nDESCRIPTION: Command to verify if the SSH server is running on the Linux system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status ssh\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Output in Terraform HCL\nDESCRIPTION: A simple Terraform module that outputs a welcome message. This is the most basic Terraform configuration that demonstrates how to define an output variable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day58.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# website::tag::1:: The simplest possible Terraform module: it just outputs \"Hello, World!\"\noutput \"hello_world\" {\n  value = \"Hello, 90DaysOfDevOps from Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault Pod Shell for Configuration\nDESCRIPTION: Command to execute a shell in the vault-0 pod, which is needed to perform Vault configuration tasks like enabling secrets engines and creating policies.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec --stdin=true --tty=true vault-0 -n vault -- /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Staging Files in Git\nDESCRIPTION: Adds a specific file to the staging area in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day38.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add README.md\n```\n\n----------------------------------------\n\nTITLE: Accessing VM Shell with Multipass\nDESCRIPTION: Command to open a shell session in the '90DaysOfDevOps' virtual machine, providing direct terminal access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmultipass shell 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting WordPress\nDESCRIPTION: Commands to download and extract the latest WordPress package.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www\nsudo curl -O https://wordpress.org/latest.tar.gz\nsudo tar -xvf latest.tar.gz\nsudo rm latest.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Create Restore ActionSet\nDESCRIPTION: Command to create a restore ActionSet from a previous backup\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset -n kanister --action restore --from \"backup-qpnqv\"\n```\n\n----------------------------------------\n\nTITLE: Testing External Access to the Application\nDESCRIPTION: Uses curl to test external access to the product page through the Istio ingress gateway using the previously exported environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl INGRESS_HOST:INGRESS_PORT/productpage\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Cilium CNI\nDESCRIPTION: Initializes a Minikube cluster with Cilium as the Container Network Interface (CNI) to support network policies.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --cni cilium\n```\n\n----------------------------------------\n\nTITLE: Executing Git Help Commands in Terminal\nDESCRIPTION: Commands for accessing Git help documentation directly from the terminal. The examples show how to access detailed help for a specific command (git add --help) and a shorter summary of options (git add -h).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit add --help\ngit add -h\n```\n\n----------------------------------------\n\nTITLE: Date and Time Manipulation with datetime Module\nDESCRIPTION: Shows how to work with dates and times in Python using the datetime module. Examples include getting the current datetime, creating a specific datetime object, and calculating time differences.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day45.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\n\n# Get the current date and time\nnow = datetime.now()\nprint(now) # Output: 2023-02-17 11:33:27.257712\n\n# Create a datetime object for a specific date and time\ndate = datetime(2023, 2, 1, 12, 0)\nprint(date) # Output: 2023-02-01 12:00:00\n\n# Calculate the difference between two dates\ndelta = now - date\nprint(delta) # Output: 15 days, 23:33:27.257712\n```\n\n----------------------------------------\n\nTITLE: Creating Jenkins Service Account in Kubernetes\nDESCRIPTION: This command applies a YAML configuration to create a service account for Jenkins in Kubernetes, allowing Jenkins to interact with the cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-sa.yml\n```\n\n----------------------------------------\n\nTITLE: Backing Up Network Device Configurations with Python\nDESCRIPTION: References a Python script that automates the backup of network device configurations. The script uses a text file containing IP addresses to determine which devices to back up.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day27.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Reference to backup.py and backup.txt\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Plugins\nDESCRIPTION: Commands to install autosuggestions and syntax highlighting plugins for ZSH\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day20.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting\n```\n\n----------------------------------------\n\nTITLE: Configuring VolumeSnapshot Annotations for Kasten K10\nDESCRIPTION: Commands to annotate the volumesnapshotclass for Kasten K10 compatibility and modify the default storage class settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day87.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate volumesnapshotclass csi-hostpath-snapclass \\\n    k10.kasten.io/is-snapshot-class=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Restoring a Specific Kopia Snapshot\nDESCRIPTION: Command to restore a specific snapshot from the Kopia repository using its unique identifier. This command would restore the snapshot contents to their original location or a specified destination.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day86.md#2025-04-17_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nkopia snapshot restore kdbd9dff738996cfe7bcf99b45314e193\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repositories\nDESCRIPTION: This command updates all Helm repositories, ensuring the latest charts are available for installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Showing details of a specific commit\nDESCRIPTION: Displays detailed information about a specific commit, including the changes made in that commit, using its commit ID.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit show <commit ID>\n```\n\n----------------------------------------\n\nTITLE: Elevating Privileges with sudo in Linux\nDESCRIPTION: The 'sudo' command is used to execute commands with elevated privileges. This snippet demonstrates how to use 'sudo' and 'sudo su' for temporary and persistent elevation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo command\nsudo su\nexit\n```\n\n----------------------------------------\n\nTITLE: Adding Third-Party Repository for Software Installation\nDESCRIPTION: These commands add the HashiCorp repository to install Vagrant, including adding the GPG key and repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt update && sudo apt install vagrant\n```\n\n----------------------------------------\n\nTITLE: Restoring a File to an Earlier Version in Git\nDESCRIPTION: Use the 'git restore --source' command to restore a specific file to its state in a previous commit without undoing other changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --source=HEAD~1 <filename>\n```\n\n----------------------------------------\n\nTITLE: Adding GPG Key for Podman Repository\nDESCRIPTION: Command to download and add the GPG key for the Podman repository to ensure secure package verification during installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day48.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L \"https://download.opensuse.org/repositories/devel:/kubic:\\\n/libcontainers:/stable/xUbuntu_20.04/Release.key\" | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Installing Network Address Manipulation Module\nDESCRIPTION: Command to install the netaddr Python module, which is used for working with and manipulating IP addresses in network automation scripts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day27.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install netaddr\n```\n\n----------------------------------------\n\nTITLE: Populating MySQL Database\nDESCRIPTION: SQL commands to create and populate a sample database with account information\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho \"create database myImportantData;\" | mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD}\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho \"drop table Accounts\" | ${MYSQL_EXEC}\necho \"create table if not exists Accounts(name text, balance integer); insert into Accounts values('nick', 0);\" |  ${MYSQL_EXEC}\necho \"insert into Accounts values('albert', 112);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('alfred', 358);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('beatrice', 1321);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('bartholomew', 34);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edward', 5589);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwin', 144);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwina', 233);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('rastapopoulos', 377);\" | ${MYSQL_EXEC}\necho \"select * from Accounts;\" |  ${MYSQL_EXEC}\nexit\n```\n\n----------------------------------------\n\nTITLE: File Existence Check in Bash\nDESCRIPTION: A script demonstrating how to check if a file exists and taking different actions based on the result.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nFILE=\"90DaysOfDevOps.txt\"\nif [ -f \"$FILE\" ]\nthen\n  echo \"$FILE is a file\"\nelse\n  echo \"$FILE is not a file\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Verifying fstab Configuration for Persistent Mounts\nDESCRIPTION: Command to verify the /etc/fstab configuration file after editing it to add persistent mount points. This checks for syntax errors without requiring a system reboot.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo mount -a\n```\n\n----------------------------------------\n\nTITLE: Kanister MySQL Backup Blueprint\nDESCRIPTION: YAML configuration for Kanister blueprint defining backup, restore, and delete operations for MySQL database\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cr.kanister.io/v1alpha1\nkind: Blueprint\nmetadata:\n  name: mysql-blueprint\nactions:\n  backup:\n    outputArtifacts:\n      mysqlCloudDump:\n        keyValue:\n          s3path: \"{{ .Phases.dumpToObjectStore.Output.s3path }}\"\n    phases:\n    - func: KubeTask\n      name: dumpToObjectStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"/mysql-backups/{{ .StatefulSet.Namespace }}/{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}/{{ toDate \"2006-01-02T15:04:05.999999999Z07:00\" .Time  | date \"2006-01-02T15-04-05\" }}/dump.sql.gz\"\n          root_password=\"{{ index .Phases.dumpToObjectStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          mysqldump --column-statistics=0 -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }} --single-transaction --all-databases | gzip - | kando location push --profile '{{ toJson .Profile }}' --path ${s3_path} -\n          kando output s3path ${s3_path}\n```\n\n----------------------------------------\n\nTITLE: Apache Handler Configuration in YAML\nDESCRIPTION: Handler definition for Apache service restart operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day66.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart apache\n  service:\n    name: apache2\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Cloning the Prometheus Operator Repository in Bash\nDESCRIPTION: Command to clone the kube-prometheus repository which contains manifests to deploy Prometheus Operator and Grafana to a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/prometheus-operator/kube-prometheus.git\n```\n\n----------------------------------------\n\nTITLE: Examining a Basic Terraform State File in JSON\nDESCRIPTION: Example of a simple Terraform state file in JSON format that includes version information, outputs, and an empty resources array. State files contain the world representation according to Terraform and should be handled carefully as they may contain sensitive data.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day58.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 4,\n  \"terraform_version\": \"1.1.6\",\n  \"serial\": 1,\n  \"lineage\": \"a74296e7-670d-0cbb-a048-f332696ca850\",\n  \"outputs\": {\n    \"hello_world\": {\n      \"value\": \"Hello, 90DaysOfDevOps from Terraform\",\n      \"type\": \"string\"\n    }\n  },\n  \"resources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Git Undo Changes Commands\nDESCRIPTION: Commands for undoing changes in Git, including revert, reset, and clean, with their usage examples and descriptions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day37.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit revert <commit>\ngit reset <file>\ngit clean -n\n```\n\n----------------------------------------\n\nTITLE: Ansible OS Release Info Command\nDESCRIPTION: Ad-hoc command example showing how to retrieve OS release information from all Linux hosts in the inventory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day64.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nansible linux -a \"cat /etc/os-release\"\n```\n\n----------------------------------------\n\nTITLE: Deploying AWX Demo Configuration\nDESCRIPTION: Kubernetes command to create the AWX demo configuration in the AWX namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day69.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f awx-demo.yml -n awx\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Curator Extension\nDESCRIPTION: Command to start Docker Compose with the Elasticsearch Curator extension. This runs both the main docker-compose.yml and the curator extension configuration together.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/curator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/curator/curator-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Setting up MySQL Environment Variables\nDESCRIPTION: Commands to retrieve MySQL root password and set up connection variables\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace ${APP_NAME} mysql-store -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode)\nMYSQL_HOST=mysql-store.${APP_NAME}.svc.cluster.local\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n```\n\n----------------------------------------\n\nTITLE: MySQL Commands for Database Management\nDESCRIPTION: SQL commands to show databases and deliberately drop a database to simulate data loss before restoration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\necho \"SHOW DATABASES;\" |  ${MYSQL_EXEC}\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"DROP DATABASE myImportantData;\" |  ${MYSQL_EXEC}\n```\n\n----------------------------------------\n\nTITLE: Installing Falco and Falco Exporter with Helm\nDESCRIPTION: Adds the Falco Helm repository and installs Falco and Falco Exporter with custom certificates.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day29.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add falcosecurity https://falcosecurity.github.io/charts\nhelm repo update\nhelm install falco falcosecurity/falco --set driver.kind=ebpf --set-file certs.server.key=$PWD/server.key,certs.server.crt=$PWD/server.crt,certs.ca.crt=$PWD/ca.crt --set falco.grpc.enabled=true,falco.grpcOutput.enabled=true,falco.grpc_output.enabled=true\nhelm install falco-exporter  --set-file certs.ca.crt=$PWD/ca.crt,certs.client.key=$PWD/client.key,certs.client.crt=$PWD/client.crt falcosecurity/falco-exporter\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Public Key to Clipboard\nDESCRIPTION: Command to copy the public SSH key to clipboard for pasting into GitHub settings. This example is for macOS.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npbcopy < ~/.ssh/id_ed25519.pub\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Repository on Ubuntu 20.04\nDESCRIPTION: Commands to add the Podman repository to Ubuntu 20.04 package sources. This adds the OpenSUSE repository containing Podman packages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day48.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /\" |\nsudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 with Helm\nDESCRIPTION: Helm commands to add Kasten repository and install K10 in the kasten-io namespace with specific configuration options.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day87.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add kasten https://charts.kasten.io/\n\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Vagrant Configuration for Multi-Node Setup\nDESCRIPTION: A Vagrantfile that sets up multiple Ubuntu nodes for testing Ansible playbooks. It defines four nodes with specific IP addresses and SSH ports.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day65.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  servers=[\n    {\n      :hostname => \"db01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.130\",\n      :ssh_port => '2210'\n    },\n    {\n      :hostname => \"web01\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.131\",\n      :ssh_port => '2211'\n    },\n    {\n      :hostname => \"web02\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.132\",\n      :ssh_port => '2212'\n    },\n    {\n      :hostname => \"loadbalancer\",\n      :box => \"bento/ubuntu-21.10\",\n      :ip => \"192.168.169.134\",\n      :ssh_port => '2213'\n    }\n\n  ]\n\nconfig.vm.base_address = 600\n\n  servers.each do |machine|\n\n    config.vm.define machine[:hostname] do |node|\n      node.vm.box = machine[:box]\n      node.vm.hostname = machine[:hostname]\n\n      node.vm.network :public_network, bridge: \"Intel(R) Ethernet Connection (7) I219-V\", ip: machine[:ip]\n      node.vm.network \"forwarded_port\", guest: 22, host: machine[:ssh_port], id: \"ssh\"\n\n      node.vm.provider :virtualbox do |v|\n        v.customize [\"modifyvm\", :id, \"--memory\", 2048]\n        v.customize [\"modifyvm\", :id, \"--name\", machine[:hostname]]\n      end\n    end\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Using sudo for elevated privileges in Linux\nDESCRIPTION: The 'sudo' command allows you to run commands with superuser privileges. It requires your password to execute.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo [command]\n```\n\n----------------------------------------\n\nTITLE: Testing Event-Driven Ansible Webhook\nDESCRIPTION: Using curl to send a POST request to the EDA webhook endpoint to trigger an event and observe how the EDA controller processes the event.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"foo\": \"bar\"}' \\\n  http://localhost:5000/endpoint\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus Helm Repository\nDESCRIPTION: Command to add the Prometheus community helm repository for Kubernetes deployment\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day78.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Deploying Monitoring Resources in Kubernetes\nDESCRIPTION: Command to deploy all monitoring resources defined in the manifests directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day83.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f manifests/\n```\n\n----------------------------------------\n\nTITLE: Windows Commands for Enabling/Disabling Hypervisor for EVE-NG Compatibility\nDESCRIPTION: Command line instructions for Windows to toggle the hypervisor launch type between off and auto modes. These commands help resolve virtualization conflicts when running EVE-NG alongside WSL2.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day25.md#2025-04-17_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nbcdedit /set hypervisorlaunchtype off\n```\n\nLANGUAGE: batch\nCODE:\n```\nbcdedit /set hypervisorlaunchtype auto\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWX Admin Password from Kubernetes Secrets\nDESCRIPTION: Command to extract and decode the default admin password from the Kubernetes secret created during AWX deployment. This password is needed for the initial login to the AWX web interface.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day69.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret awx-demo-admin-password -o jsonpath=\"{.data.password}\" -n awx| base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Monitoring AWX Deployment Progress\nDESCRIPTION: Command to watch the progress of pod creation in the AWX namespace, allowing you to monitor the deployment status in real-time.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day69.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n awx -w\n```\n\n----------------------------------------\n\nTITLE: Running Metricbeat with Docker Compose\nDESCRIPTION: This command demonstrates how to include Metricbeat in the stack by running Docker Compose with an additional command line argument referencing the metricbeat-compose.yml file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Defining Main Package and Function in Go\nDESCRIPTION: This snippet shows the basic structure of a Go program, defining the main package and the main function, which serves as the entry point for the program execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day09.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {\n    // Code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform using arkade CLI\nDESCRIPTION: Demonstrates how to install or update Terraform using the arkade CLI tool. This command will either install Terraform if not present or update it to the latest version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day57.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get terraform\n```\n\n----------------------------------------\n\nTITLE: Running Elasticsearch Curator with Docker Compose\nDESCRIPTION: Command to launch Docker Compose with both the main docker-compose.yml and the curator extension compose file. This enables the Curator extension to run alongside the main Elasticsearch deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/curator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/curator/curator-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Working with man pages in Linux Terminal\nDESCRIPTION: The 'man' command provides documentation for other commands. You can exit man pages by pressing 'q'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nman man\n```\n\n----------------------------------------\n\nTITLE: Scanning Ubuntu Image with Grype and Viewing Results\nDESCRIPTION: Complete example of scanning the Ubuntu 20.04 image with Grype and the resulting vulnerability output. Shows the command execution and its output displaying discovered vulnerabilities with their severity levels.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day21.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ grype ubuntu:20.04\n\n ✔ Vulnerability DB        [no update available]\n ✔ Pulled image\n ✔ Loaded image\n ✔ Parsed image\n ✔ Cataloged packages      [92 packages]\n ✔ Scanned image           [19 vulnerabilities]\n\nNAME          INSTALLED                 FIXED-IN  TYPE  VULNERABILITY   SEVERITY\ncoreutils     8.30-3ubuntu2                       deb   CVE-2016-2781   Low\ngpgv          2.2.19-3ubuntu2.2                   deb   CVE-2022-3219   Low\nlibc-bin      2.31-0ubuntu9.9                     deb   CVE-2016-20013  Negligible\nlibc6         2.31-0ubuntu9.9                     deb   CVE-2016-20013  Negligible\nlibncurses6   6.2-0ubuntu2                        deb   CVE-2021-39537  Negligible\nlibncurses6   6.2-0ubuntu2                        deb   CVE-2022-29458  Negligible\nlibncursesw6  6.2-0ubuntu2                        deb   CVE-2021-39537  Negligible\nlibncursesw6  6.2-0ubuntu2                        deb   CVE-2022-29458  Negligible\nlibpcre3      2:8.39-12ubuntu0.1                  deb   CVE-2017-11164  Negligible\nlibsystemd0   245.4-4ubuntu3.19                   deb   CVE-2022-3821   Medium\nlibtinfo6     6.2-0ubuntu2                        deb   CVE-2021-39537  Negligible\nlibtinfo6     6.2-0ubuntu2                        deb   CVE-2022-29458  Negligible\nlibudev1      245.4-4ubuntu3.19                   deb   CVE-2022-3821   Medium\nlogin         1:4.8.1-1ubuntu5.20.04.4            deb   CVE-2013-4235   Low\nncurses-base  6.2-0ubuntu2                        deb   CVE-2021-39537  Negligible\nncurses-base  6.2-0ubuntu2                        deb   CVE-2022-29458  Negligible\nncurses-bin   6.2-0ubuntu2                        deb   CVE-2021-39537  Negligible\nncurses-bin   6.2-0ubuntu2                        deb   CVE-2022-29458  Negligible\npasswd        1:4.8.1-1ubuntu5.20.04.4            deb   CVE-2013-4235   Low\n```\n\n----------------------------------------\n\nTITLE: Renaming Files in Git\nDESCRIPTION: Demonstrates how to rename a file in Git using the 'git mv' command, which stages the change automatically.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit mv oldcode.ps1 newcode.ps1\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Docker Container\nDESCRIPTION: This command runs the Hello World Docker container, which prints a message and exits.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day44.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Interfaces on Cisco Devices with Command Line\nDESCRIPTION: A series of Cisco CLI commands used to enable and configure a network interface with DHCP, and display interface status. These commands are executed on network devices to establish connectivity to the management network.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day27.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenable\nconfig t\nint gi0/0\nIP add DHCP\nno sh\nexit\nexit\nsh ip int br\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Commands\nDESCRIPTION: Essential Git commands for working with branches, including creating, checking out, and merging branches.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <branch>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit merge <branch>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Output Example\nDESCRIPTION: Displays the expected terminal output from running the regular expression examples, showing the matched phone number and extracted email addresses.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day45.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n555-7777\n['example@devops.com,', 'other@cloud.com']\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSH Plugins\nDESCRIPTION: Configuration line to enable git, auto-suggestions, and syntax highlighting plugins in the ZSH environment. This should be added to the .zshrc file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n```\n\n----------------------------------------\n\nTITLE: SSH Key Distribution Command for Ansible\nDESCRIPTION: A command chain to distribute SSH keys from the Ansible control node to the managed web servers, enabling passwordless authentication for Ansible automation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day65.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nssh-copy-id web01 && ssh-copy-id web02\n```\n\n----------------------------------------\n\nTITLE: Adding Podman GPG Key\nDESCRIPTION: Command to download and add the GPG key for the Podman repository to ensure package authenticity.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day48.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L \"https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key\" | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Deploying Rancher Agent on Worker Nodes\nDESCRIPTION: Docker command to deploy the Rancher agent on worker nodes. This command is similar to the master node command but only includes the worker role parameter.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day53.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --worker\n```\n\n----------------------------------------\n\nTITLE: Extracting and Installing OpenShift Tools on Linux\nDESCRIPTION: Commands to extract OpenShift installation files and copy them to the local bin directory. This includes the OpenShift-Install tool, OC command line tool, and kubectl.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day58.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -zxvf openshift-client-linux.tar.gz\ntar -zxvf openshift-install-linux.tar.gz\n\nsudo cp openshift-install /usr/bin/local/openshift-install\nsudo cp oc /usr/bin/local/oc\nsudo cp kubectl /usr/bin/local/kubectl\n```\n\n----------------------------------------\n\nTITLE: Ansible MySQL Role Main Task File\nDESCRIPTION: A main task file for the MySQL role that imports other task files. It serves as a coordinator file to organize and execute installation and setup tasks in sequence.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks file for roles/mysql\n- import_tasks: install_mysql.yml\n- import_tasks: setup_mysql.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a BASH Script for File Existence Check\nDESCRIPTION: Script that checks if a file exists and prints appropriate messages. It demonstrates the use of the -f flag with the test command to verify file existence.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day48.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfile=~/randomfile\n\nif [ -f \"$file\" ]\nthen\n    echo \"$file exists\"\nelse \n    echo \"$file doesn't exist\"\n    touch ~/randomfile\nfi\n```\n\n----------------------------------------\n\nTITLE: Filtering Command Output with awk\nDESCRIPTION: Uses the awk command to extract only the first column from the output of the who command, showing just the usernames of logged-in users.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwho | awk '{print $1}'\n```\n\n----------------------------------------\n\nTITLE: Restoring a Snapshot from Kopia Repository\nDESCRIPTION: Command to restore the contents of a specific snapshot using its unique identifier.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day86.md#2025-04-17_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\nkopia snapshot restore kdbd9dff738996cfe7bcf99b45314e193\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository\nDESCRIPTION: Command to clone a forked repository to local machine using the repository URL\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day41.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Azure Cosmos DB Consistency Models\nDESCRIPTION: Illustration of various consistency models available in Azure Cosmos DB, based on CAP theorem for distributed database systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day32.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud8.png)\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Interfaces in Namespaces\nDESCRIPTION: Commands to bring up the virtual interfaces in each namespace. This activates the connection between the namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec red ip link set veth-red up\nsudo ip netns exec blue ip link set veth-blue up\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Syntax Highlighting Plugin\nDESCRIPTION: Command to install the ZSH syntax highlighting plugin which provides fish-like syntax highlighting for commands in the terminal, making it easier to spot errors before executing commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible Roles and Collections\nDESCRIPTION: Command to install required Ansible roles and collections specified in the requirements.yml file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nansible-galaxy install -r requirements.yml\n```\n\n----------------------------------------\n\nTITLE: Simple Directory and File Operations Script\nDESCRIPTION: A basic bash script that creates a directory, changes to that directory, creates a file, and lists contents.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir 90DaysOfDevOps\ncd 90DaysOfDevOps\ntouch Day19\nls\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to a Git Repository\nDESCRIPTION: Series of Git commands to add changes, commit them with a message, and push to the remote repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day41.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"added Kanister presentation YouTube links to presentations section\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Listing Snapshots in Kopia Repository\nDESCRIPTION: Command to list all snapshots currently stored in the configured Kopia repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day86.md#2025-04-17_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config snapshot list\n```\n\n----------------------------------------\n\nTITLE: Apache2 Handler for Service Restart in YAML\nDESCRIPTION: This code snippet defines a handler for restarting the Apache2 service. It was extracted from the main playbook to be organized in a separate file for better maintainability.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day66.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart apache\n  service:\n    name: apache2\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Cloning Kube-Prometheus Repository\nDESCRIPTION: Command to clone the kube-prometheus repository and change to the project directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day83.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/prometheus-operator/kube-prometheus.git\ncd kube-prometheus\n```\n\n----------------------------------------\n\nTITLE: Git Undoing Changes Commands\nDESCRIPTION: Commands for reverting changes, resetting files, and cleaning the working directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit revert <commit>\ngit reset <file>\ngit clean -n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository\nDESCRIPTION: The command to initialize a new Git repository in an existing directory. This creates a hidden .git folder that stores repository metadata.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Starting Webservers with Ansible Ad-hoc Command\nDESCRIPTION: Command to ensure webservers are running on all hosts in the webservers group using the Ansible service module.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nansible \\\n   webservers  \\\n  -m service   \\\n  -a 'name=\"{{ webserver }}\" state=started' \\\n  --one-line\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kubernetes Pod Status\nDESCRIPTION: Command to watch the status of pods in the monitoring namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day83.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n monitoring -w\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Container Shell\nDESCRIPTION: Docker exec command to access the bash shell of the running PostgreSQL container as the postgres user.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it -u postgres demo-container bash\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud SDK for Storage Access\nDESCRIPTION: Command to authenticate with Google Cloud Platform using the Google Cloud SDK to access storage services. This authentication is required before setting up Kopia to use Google Cloud Storage as a repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day86.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Deploying MySQL Database\nDESCRIPTION: Commands to deploy MySQL using Helm and setup initial environment variables\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl create ns ${APP_NAME}\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mysql-store bitnami/mysql --set primary.persistence.size=1Gi,volumePermissions.enabled=true --namespace=${APP_NAME}\nkubectl get pods -n ${APP_NAME} -w\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kasten K10 Pod Deployment\nDESCRIPTION: Watching the progress of Kasten K10 pods getting to the running status in the standby cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day89.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kasten-io -w\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 on Standby Cluster\nDESCRIPTION: Deploying Kasten K10 on the standby Minikube cluster using Helm.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day89.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Basic User Echo Script\nDESCRIPTION: Initial script that demonstrates handling command line arguments by echoing the first parameter.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day19.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Docker Compose Applications\nDESCRIPTION: Command to stop and remove containers defined in a docker-compose.yml file while preserving volumes for data persistence.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day46.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Configuring History Timestamp Format in Bash\nDESCRIPTION: Command to add timestamp format to bash history entries, enabling better tracking of when commands were executed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day15.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nHISTTIMEFORMAT=\"%d-%m-%Y %T \"\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Pod in Bash\nDESCRIPTION: This command deletes the 'mongo-0' pod in the 'pacman' namespace. It's used to demonstrate the persistence of data in a stateful application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod mongo-0 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Commit Snapshot\nDESCRIPTION: Use the 'git ls-tree' command to list all files and directories in a specific commit snapshot.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-tree HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Listing Monitoring Services in Kubernetes\nDESCRIPTION: Command to list all services created in the monitoring namespace, which includes Prometheus, Grafana, and other monitoring components.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the fmt Package in Go\nDESCRIPTION: This code demonstrates how to import the 'fmt' package and use its Println function to output text to the console in a Go program.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day09.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"fmt\"\n\nfmt.Println(\"Hello #90DaysOfDevOps\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Kasten K10 Dashboard in Kubernetes\nDESCRIPTION: Port forwarding to access the Kasten K10 dashboard and retrieving the authentication token.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day89.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token\nDESCRIPTION: Commands to extract and decode the authentication token required for accessing the Kasten K10 dashboard.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day89.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Execution Command\nDESCRIPTION: Command to start the ELK Stack containers in detached mode using Docker Compose\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day80.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Apache2 Handler Configuration in YAML\nDESCRIPTION: Handler definition for restarting the Apache2 service when configuration changes are made.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day66.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart apache\n  service:\n    name: apache2\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible on Ubuntu\nDESCRIPTION: A sequence of commands to install Ansible on an Ubuntu system that will serve as the control node. These commands add the Ansible repository and install the software.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day64.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository --yes --update ppa:ansible/ansible\nsudo apt install ansible\n```\n\n----------------------------------------\n\nTITLE: Generating Test Template with Hedra CLI in Bash\nDESCRIPTION: This bash command demonstrates how to use Hedra's CLI to generate a test template with specified protocols and tags. It showcases the code generation feature for rapid test prototyping.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhedra test generate my-test --using http,http2,playwright --tags service=myapi.com,environment=staging\n```\n\n----------------------------------------\n\nTITLE: Search and Replace in vim\nDESCRIPTION: Shows the vim command for global search and replace functionality. This command replaces all instances of 'Day' with '90DaysOfDevOps' throughout the file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day17.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n:%s/Day/90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Storage Repository with Kopia\nDESCRIPTION: Command to create a new Kopia repository in Google Cloud Storage using the Kopia CLI.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day86.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository create gcs --bucket 90daysofdevops\n```\n\n----------------------------------------\n\nTITLE: Enabling Ambient Mesh for Default Namespace\nDESCRIPTION: Command to enable Ambient Mesh for the default namespace by applying the 'istio.io/dataplane-mode=ambient' label, which instructs ztunnel to handle mTLS and traffic routing for workloads in the namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label namespace default istio.io/dataplane-mode=ambient\n```\n\n----------------------------------------\n\nTITLE: Shorthand Variable Declarations in Go\nDESCRIPTION: An alternative method for declaring variables in Go using the shorthand := syntax, which is more concise and allows Go to infer the variable type.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day11.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    challenge := \"#90DaysOfDevOps\"\n    const daystotal = 90\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Ping Module on Linux Group\nDESCRIPTION: Command to run the Ansible ping module against the 'Linux' group defined in the hosts file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day64.md#2025-04-17_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nansible Linux -m ping\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: Demonstrates how to commit staged changes with a message using the 'git commit' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Meaningful message\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Global Git Configuration\nDESCRIPTION: This command opens the global Git configuration file in the default text editor.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day36.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global -e\n```\n\n----------------------------------------\n\nTITLE: Installing Jenkins using Helm\nDESCRIPTION: Installs Jenkins in the jenkins namespace using Helm and a custom values file. This deploys the Jenkins application to the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchart=jenkinsci/jenkins\nhelm install jenkins -n jenkins -f jenkins-values.yml $chart\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Ansible Roles\nDESCRIPTION: Shell commands to create common and nginx roles using ansible-galaxy.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day66.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nansible-galaxy init roles/common\nansible-galaxy init roles/nginx\n```\n\n----------------------------------------\n\nTITLE: Allowing SSH Through Firewall in Linux\nDESCRIPTION: Command to allow SSH traffic through the UFW firewall on Linux.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow ssh\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline SCM Configuration\nDESCRIPTION: Jenkins pipeline configuration showing the repository URL and SCM polling setup\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day74.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRepository URL: https://github.com/MichaelCade/Jenkins-HelloWorld.git\nPoll SCM: * * * * *\n```\n\n----------------------------------------\n\nTITLE: Basic Container Image Scanning with Grype\nDESCRIPTION: Simple command to scan a container image for vulnerabilities using Grype. This example shows the basic syntax and demonstrates scanning the Ubuntu 20.04 image.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day21.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngrype <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Simple Python Flask Application\nDESCRIPTION: A basic Flask web application that displays 'Hello, Docker!' when accessed. It listens on all interfaces (0.0.0.0) on port 5000.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day38.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello, Docker!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n```\n\n----------------------------------------\n\nTITLE: Populating MySQL Database with Sample Data\nDESCRIPTION: This script creates a database, defines an Accounts table, and populates it with sample data to demonstrate backup and restore functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"create database myImportantData;\" | mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD}\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho \"drop table Accounts\" | ${MYSQL_EXEC}\necho \"create table if not exists Accounts(name text, balance integer); insert into Accounts values('nick', 0);\" |  ${MYSQL_EXEC}\necho \"insert into Accounts values('albert', 112);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('alfred', 358);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('beatrice', 1321);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('bartholomew', 34);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edward', 5589);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwin', 144);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('edwina', 233);\" | ${MYSQL_EXEC}\necho \"insert into Accounts values('rastapopoulos', 377);\" | ${MYSQL_EXEC}\necho \"select * from Accounts;\" |  ${MYSQL_EXEC}\nexit\n```\n\n----------------------------------------\n\nTITLE: Formatting a New Disk in Linux\nDESCRIPTION: This command formats a new disk (/dev/sdb) with the ext4 file system. Caution: This will erase all data on the specified disk.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day16.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkfs -t ext4 /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Opening Jaeger Dashboard with Istioctl\nDESCRIPTION: Command to open the Jaeger dashboard using the istioctl utility for distributed tracing visualization.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nistioctl dashboard jaeger\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status in Kubernetes Namespace\nDESCRIPTION: Command to check the status of all pods in the kube-logging namespace to ensure Elasticsearch, Fluentd, and Kibana are running properly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day82.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Restarting Metricbeat Container\nDESCRIPTION: Command to restart the Metricbeat container after configuration changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml restart metricbeat\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk Space Usage with Human-Readable Output\nDESCRIPTION: The df -h command shows disk space usage for all mounted filesystems in a human-readable format, displaying total, used, and available space in appropriate units (KB, MB, GB).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version in PowerShell\nDESCRIPTION: Command to check the installed version of Git in Windows PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day36.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Testing Connectivity Between Namespaces\nDESCRIPTION: Command to test ping connectivity from one namespace to another. This verifies that the network configuration allows communication between isolated namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec red ping 192.168.15.2\n```\n\n----------------------------------------\n\nTITLE: Adding users to groups in Linux\nDESCRIPTION: The 'usermod' command modifies user accounts. With -a (append) and -G (group) options, it adds a user to a specified group.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -a -G DevOps\n```\n\n----------------------------------------\n\nTITLE: Viewing differences between working directory and staging area\nDESCRIPTION: Demonstrates how to compare the working directory with the staging area to see changes that haven't been staged yet.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Implementing Ansible Role in Playbook (YAML)\nDESCRIPTION: This snippet demonstrates how to include an Ansible role in a playbook. It shows the basic structure of using a role with variables passed as parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Configmgmt/ansible-scenario7/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: MySQL Service Handler Configuration in Ansible\nDESCRIPTION: Handler definition for restarting the MySQL service when configuration changes occur.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart mysql\n  service:\n    name: mysql\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Cloning Prometheus Operator Repository\nDESCRIPTION: Command to clone the Prometheus Operator repository and change to the project directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day83.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/prometheus-operator/kube-prometheus.git\ncd kube-prometheus\n```\n\n----------------------------------------\n\nTITLE: Generating Scaffold for Bootcamp Model\nDESCRIPTION: Rails commands to generate a scaffold for the Bootcamp model and migrate the database.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day06.md#2025-04-17_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nbundle exec rails generate scaffold Bootcamp name:string description:text dates:string\nbundle exec rake db:migrate\n```\n\n----------------------------------------\n\nTITLE: Git Setup and Feature Branch Creation\nDESCRIPTION: Commands for adding upstream remote, creating a new feature branch, and pushing changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/vmware-samples/packer-examples-for-vsphere.git\ngit checkout -b my-new-feature main\ngit commit -s -a\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Istio Virtual Service Configuration for Reviews Service\nDESCRIPTION: This YAML configuration defines a virtual service for the reviews microservice, routing all traffic to the v1 subset.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Loki Logs in Grafana\nDESCRIPTION: Example Loki query to filter logs from the etcd container containing the word 'compaction'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day29.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{container=\"etcd\"} |= `compaction`\n```\n\n----------------------------------------\n\nTITLE: Renaming Files in Git Repository\nDESCRIPTION: Shows how to rename files in a Git repository using both manual and Git-specific methods. The 'git mv' command renames the file and stages the change in one step.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day38.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmv README.md README.txt\ngit add .\ngit commit -m \"Renamed README.md to README.txt\"\n\n# Alternative method\ngit mv README.md README.txt\n```\n\n----------------------------------------\n\nTITLE: Listing Kopia Snapshots\nDESCRIPTION: Command to list all snapshots in the currently configured Kopia repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day86.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config snapshot list\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Kasten K10 Dashboard\nDESCRIPTION: This command sets up port forwarding to access the Kasten K10 dashboard on localhost:8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\n----------------------------------------\n\nTITLE: Network Device Configuration Reference Table\nDESCRIPTION: A table linking to separate configuration files for each network device in the lab, including one router and four switches.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day26.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Node        | Configuration         |\n| ----------- | -----------           |\n| Router      | [R1](Networking/R1)   |\n| Switch1     | [SW1](Networking/SW1) |\n| Switch2     | [SW2](Networking/SW2) |\n| Switch3     | [SW3](Networking/SW3) |\n| Switch4     | [SW4](Networking/SW4) |\n```\n\n----------------------------------------\n\nTITLE: Creating PHP Info File in Linux\nDESCRIPTION: Commands to create a PHP file that displays PHP configuration information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /var/www/html/90Days.php\n```\n\n----------------------------------------\n\nTITLE: MySQL Service Handler Configuration (YAML)\nDESCRIPTION: Ansible handler definition for restarting MySQL service when configuration changes are made.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: restart mysql\n  service:\n    name: mysql\n    state: restarted\n```\n\n----------------------------------------\n\nTITLE: Checking Kopia Repository Status\nDESCRIPTION: Command to check the current status of a Kopia repository using the Kopia executable with a specific config file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day86.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository status\n```\n\n----------------------------------------\n\nTITLE: Project Structure for ELK Stack Docker Compose\nDESCRIPTION: Shows the file structure for the ELK Stack Docker Compose project, which consists of a single docker-compose.yml file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n└── docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Interface on Cisco Device\nDESCRIPTION: This snippet shows the commands to configure a network interface on a Cisco device to obtain an IP address via DHCP and display interface information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day27.md#2025-04-17_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nenable\nconfig t\nint gi0/0\nip add dhcp \nno sh \nexit \nexit\nsh ip int br\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository and Updating on Linux\nDESCRIPTION: A series of commands to add the Git repository, update the package list, and install Git on a Linux system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day36.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:git-core/ppa -y\nsudo apt-get update\nsudo apt-get install git -y\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Command History Management in Linux\nDESCRIPTION: Using the 'history' command to view and manage command history, including searching and executing previous commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhistory\nhistory -c\n!3\nhistory | grep \"Command\"\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot with Kopia\nDESCRIPTION: Command to create a snapshot of a specific directory and send it to the configured Kopia repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day86.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config kopia snapshot create \"C:\\Users\\micha\\demo\\90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Example Terraform State File\nDESCRIPTION: This JSON snippet shows an example of a Terraform state file, which represents the current state of the managed infrastructure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day58.md#2025-04-17_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": 4,\n  \"terraform_version\": \"1.1.6\",\n  \"serial\": 1,\n  \"lineage\": \"a74296e7-670d-0cbb-a048-f332696ca850\",\n  \"outputs\": {\n    \"hello_world\": {\n      \"value\": \"Hello, 90DaysOfDevOps from Terraform\",\n      \"type\": \"string\"\n    }\n  },\n  \"resources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring AWX Deployment Progress\nDESCRIPTION: Kubectl command to watch the progress of pod creation in the AWX namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day69.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n awx -w\n```\n\n----------------------------------------\n\nTITLE: Using Roles in Ansible Playbook\nDESCRIPTION: This snippet shows how to use roles in an Ansible playbook. It defines variables for HTTP and HTTPS ports, sets a welcome message, and includes the apache2 role for webservers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day66.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with APM Server Extension\nDESCRIPTION: Command to start Docker Compose with APM Server configuration by including the apm-server-compose.yml file alongside the main docker-compose.yml.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/apm-server/apm-server-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: File Content Manipulation in Linux\nDESCRIPTION: Commands for adding content to files, viewing file contents, and searching within files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"Hello #90DaysOfDevOps\" > Day15\necho \"Commands are fun!\" >> Day15\ncat Day15\ncat Day15 | grep \"#90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Installing Paramiko SSH Module in Python\nDESCRIPTION: Command to install the Paramiko Python module using pip. Paramiko is a widely used module for handling SSH connections in Python scripts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day27.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install paramiko\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot and Backing Up to Google Cloud Storage\nDESCRIPTION: Command to create a snapshot of a local directory and store it in the configured Google Cloud Storage repository. This initiates the backup process for the specified directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day86.md#2025-04-17_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config kopia snapshot create \"C:\\Users\\micha\\demo\\90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Exposing AWX Service in Minikube\nDESCRIPTION: Minikube command to expose the AWX demo service and obtain the URL.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day69.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nminikube service awx-demo-service --url -n $NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Managing Staged Changes\nDESCRIPTION: Commands for unstaging files and discarding local changes\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day39.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --staged newfile.txt\ngit restore .\ngit clean -fd\n```\n\n----------------------------------------\n\nTITLE: Checking Git global configuration\nDESCRIPTION: Shows how to view the global Git configuration file, which includes the diff tool settings and other preferences.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global -e\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Usage with df and du Commands in Linux\nDESCRIPTION: Shows how to monitor disk space with df (disk free) and du (disk usage). These commands help analyze storage consumption at system and directory levels.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\ndu -sh /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Adding Podman GPG Key\nDESCRIPTION: Command to add the GPG key for the Podman repository to ensure package authenticity.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day48.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L \"https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key\" | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Creating a Mount Point and Mounting a Disk\nDESCRIPTION: Commands to create a directory as a mount point and mount a formatted disk to that location for use.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir NewDisk\nsudo mount /dev/sdb newdisk\n```\n\n----------------------------------------\n\nTITLE: Sample OpenShift Audit Log Entry\nDESCRIPTION: This JSON object represents a typical audit log entry in OpenShift, showing details such as API version, user information, and request details.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Event\",\n  \"apiVersion\": \"audit.k8s.io/v1\",\n  \"level\": \"Metadata\",\n  \"auditID\": \"97ce5c38-4e0c-447b-8e9f-a2c8c84ebc19\",\n  \"stage\": \"ResponseComplete\",\n  \"requestURI\": \"/apis/project.openshift.io/v1/projectrequests\",\n  \"verb\": \"list\",\n  \"user\": {\n    \"username\": \"test\",\n    \"groups\": [\n      \"system:authenticated:oauth\",\n      \"system:authenticated\"\n    ],\n    \"extra\": {\n      \"scopes.authorization.openshift.io\": [\n        \"user:full\"\n      ]\n    }\n  },\n  \"sourceIPs\": [\n    \"10.129.0.35\",\n    \"10.129.0.2\"\n  ],\n  \"objectRef\": {\n    \"resource\": \"projectrequests\",\n    \"apiGroup\": \"project.openshift.io\",\n    \"apiVersion\": \"v1\"\n  },\n  \"responseStatus\": {\n    \"metadata\": {},\n    \"status\": \"Success\",\n    \"code\": 200\n  },\n  \"requestReceivedTimestamp\": \"2023-03-30T14:42:37.237408Z\",\n  \"stageTimestamp\": \"2023-03-30T14:42:37.250606Z\",\n  \"annotations\": {\n    \"authorization.k8s.io/decision\": \"allow\",\n    \"authorization.k8s.io/reason\": \"RBAC: allowed by ClusterRoleBinding \\\"basic-users\\\" of ClusterRole \\\"basic-user\\\" to Group \\\"system:authenticated\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Product Page Connection Test Output\nDESCRIPTION: Shows the output of the curl command, displaying the HTML response from the productpage service which confirms connectivity through the service mesh.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1683  100  1683    0     0  69202      0 --:--:-- --:--:-- --:--:-- 70125\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Simple Bookstore App</title>\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n<!-- Latest compiled and minified CSS -->\n<link rel=\"stylesheet\" href=\"static/bootstrap/css/bootstrap.min.css\">\n\n<!-- Optional theme -->\n<link rel=\"stylesheet\" href=\"static/bootstrap/css/bootstrap-theme.min.css\">\n\n</head>\n<body>\n    \n    \n<p>\n    <h3>Hello! This is a simple bookstore application consisting of three services as shown below</h3>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Accessing OpenShift Node Logs\nDESCRIPTION: This command demonstrates how to access the oauth-server audit log for a specific OpenShift node using the oc adm node-logs command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ oc adm node-logs 90days-ocp-72ptq-master-2 --path=oauth-server/audit.log\n```\n\n----------------------------------------\n\nTITLE: Basic Go Program with a Single Variable\nDESCRIPTION: A complete Go program that declares a variable to store the challenge name and prints a welcome message using that variable. Shows the basic structure of a Go program with imports and the main function.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day11.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    fmt.Println(\"Welcome to\", challenge, \"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Volume Permissions\nDESCRIPTION: Set correct ownership permissions for Jenkins persistent volume.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nminikube ssh\nsudo chown -R 1000:1000 /data/jenkins-volume\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Sensitive Data Column\nDESCRIPTION: SQL command to create a table structure with columns for storing personal information including an encrypted password field.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_table (\n  id smallint,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  dob DATE,\n  email VARCHAR(255),\n  passwd VARCHAR(255),\n  CONSTRAINT test_table_pkey PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Alertmanager Service\nDESCRIPTION: Kubectl command to forward the Alertmanager service port for local access and configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day83.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/alertmanager-main 9093\n```\n\n----------------------------------------\n\nTITLE: Setting Shebang Line in Bash Script\nDESCRIPTION: The first line of a bash script that specifies the path to the bash interpreter. This is also known as SHEBANG, HASHBANG, or SHARPBANG.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Generating Load with Multiple Requests to Bookinfo\nDESCRIPTION: Command to generate 100 sequential requests to the Bookinfo application to create measurable traffic.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfor i in $(seq 1 100); do curl -s -o /dev/null \"http://bookinfo.io/productpage\"; done\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Twitter API Credentials\nDESCRIPTION: This snippet shows how to set environment variables for Twitter API credentials on Windows and Linux/macOS systems. These credentials are required for authenticating with the Twitter API.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nset CONSUMER_KEY\nset CONSUMER_SECRET\nset ACCESS_TOKEN\nset ACCESS_TOKEN_SECRET\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport CONSUMER_KEY\nexport CONSUMER_SECRET\nexport ACCESS_TOKEN\nexport ACCESS_TOKEN_SECRET\n```\n\n----------------------------------------\n\nTITLE: Running httpfuzz with a Custom Plugin\nDESCRIPTION: Command to run httpfuzz with the custom logging plugin attached. The --post-request flag specifies the plugin to use for processing responses from the fuzzing requests.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day17.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./httpfuzz \\\n   --wordlist data.txt \\\n   --seed-request request.txt \\\n   --target-header User-Agent \\\n   --target-param fuzz \\\n   --delay-ms 50 \\\n   --skip-cert-verify \\\n   --proxy-url http://localhost:8080 \\\n   --post-request log\n```\n\n----------------------------------------\n\nTITLE: Searching file content with grep in Linux\nDESCRIPTION: The 'grep' command filters text to find specific patterns. When combined with 'cat' using a pipe, it searches for specific text within a file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncat Day15 | grep \"#90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible on Ubuntu\nDESCRIPTION: Commands for installing Ansible on an Ubuntu system by adding the Ansible repository and installing the package using apt.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day64.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository --yes --update ppa:ansible/ansible\nsudo apt install ansible\n```\n\n----------------------------------------\n\nTITLE: Enabling Minikube Ingress\nDESCRIPTION: Command to enable the ingress addon for a specific Minikube profile\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nminikube --profile='mc-demo' addons enable ingress\n```\n\n----------------------------------------\n\nTITLE: Inicializando un Repositorio Git\nDESCRIPTION: Comando para inicializar un nuevo repositorio Git en el directorio actual.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Gateway Deployment Confirmation\nDESCRIPTION: Shows the output confirming successful creation of both the gateway and virtual service objects needed for external access to the application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngateway.networking.istio.io/bookinfo-gateway created\nvirtualservice.networking.istio.io/bookinfo created\n```\n\n----------------------------------------\n\nTITLE: Running Shell Command on Linux Hosts with Ansible\nDESCRIPTION: Ad hoc command to execute a shell command on all Linux hosts to retrieve operating system details from the os-release file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day64.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nansible linux -a \"cat /etc/os-release\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Gateway Access\nDESCRIPTION: Exports environment variables with the Istio ingress gateway's external IP address and HTTP port for convenient access to the exposed application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexport INGRESS_HOST=[IP_from_Istio_ingress_gateway]\nexport INGRESS_PORT=80\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Docker Container\nDESCRIPTION: This command runs the hello-world Docker container, which prints a welcome message and some basic Docker information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day44.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Removing Files from Git Repository\nDESCRIPTION: Shows how to remove a file from both the working directory and the Git repository using the 'git rm' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit rm oldcode.ps1\n```\n\n----------------------------------------\n\nTITLE: Configuring Cisco Device Interfaces with DHCP\nDESCRIPTION: A series of Cisco IOS commands to configure a device interface with DHCP addressing, enable it, and display the interface status. This is used to set up connectivity from the EVE-NG environment to the home network.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day27.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenable\nconfig t\nint gi0/0\nIP add DHCP \nno sh \nexit \nexit\nsh ip int br\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Server on Linux\nDESCRIPTION: Command to install the MySQL database server on a Linux system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install mysql-server\n```\n\n----------------------------------------\n\nTITLE: SSH Private Key Permissions Error Resolution\nDESCRIPTION: Command to fix permissions on your SSH private key file, which needs to be readable only by your user account.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nchmod 600 ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Appending Command Output to a File in Bash\nDESCRIPTION: Shows how to append output to a file rather than overwriting it. This uses the '>>' operator to add the results of 'ls -la' to the end of an existing file named 'output.txt'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day44.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nls -la >> output.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Jenkinsfile Pipeline Structure\nDESCRIPTION: This Groovy script defines a basic Jenkins pipeline with Build, Test, and Deploy stages. Each stage simply echoes its name, serving as a template for more complex pipelines.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day72.md#2025-04-17_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building..'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing..'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                echo 'Deploying....'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token\nDESCRIPTION: Script to extract the authentication token from Kubernetes secrets for logging into the Kasten K10 dashboard.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Configuring Default StorageClass\nDESCRIPTION: Updates storage class configurations to set csi-hostpath-sc as default and remove default status from standard storage class.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day87.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Viewing file contents with cat in Linux\nDESCRIPTION: The 'cat' command (short for concatenate) displays the contents of a file directly in the terminal. It's useful for quick viewing of configuration files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncat Day15\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Prometheus Server\nDESCRIPTION: Commands to export pod name and setup port forwarding for accessing Prometheus server UI\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day78.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=prometheus,component=server\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl --namespace default port-forward $POD_NAME 9090\n```\n\n----------------------------------------\n\nTITLE: Removing Software with apt Package Manager\nDESCRIPTION: Command to remove the figlet application from the Ubuntu system using apt package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove figlet\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Ping Module Against Windows Group\nDESCRIPTION: Command to run the Ansible ping module against hosts in the Windows group defined in the inventory file, used to test connectivity.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day64.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nansible windows -m ping\n```\n\n----------------------------------------\n\nTITLE: Dropping MySQL Database\nDESCRIPTION: SQL command to drop the 'myImportantData' database. This is used to simulate data loss before performing a restore operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nDROP DATABASE myImportantData;\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Namespaces\nDESCRIPTION: This command lists all available namespaces in the Kubernetes cluster, allowing verification of the Jenkins namespace creation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespaces\n```\n\n----------------------------------------\n\nTITLE: Exposing AWX Service in Minikube\nDESCRIPTION: Command to expose the AWX service URL through Minikube ingress.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day69.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nminikube service awx-demo-service --url -n $NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Account for Kube-Proxy DaemonSet\nDESCRIPTION: Command to retrieve the service account associated with the kube-proxy DaemonSet using a jsonpath query. This helps identify which service account is used by the kube-proxy component.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kube-system get daemonset kube-proxy -o=jsonpath='{.spec.template.spec.serviceAccount}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash Pipeline for Logspout\nDESCRIPTION: Logstash pipeline configuration that enables the UDP input on port 5000 and sets the input codec to JSON for receiving logs from Logspout.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_1\n\nLANGUAGE: logstash\nCODE:\n```\ninput {\n  udp {\n    port  => 5000\n    codec => json\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kopia Snapshots\nDESCRIPTION: Command to list all snapshots in the currently configured Kopia repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day86.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config snapshot list\n```\n\n----------------------------------------\n\nTITLE: Scaling Kubernetes Deployment in Bash\nDESCRIPTION: This command scales the 'pacman' deployment to 10 replicas in the 'pacman' namespace. It demonstrates how to horizontally scale a deployment in Kubernetes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl scale deployment pacman --replicas=10 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Delete MongoDB Pod\nDESCRIPTION: Command to delete the mongo-0 pod in the pacman namespace to test persistence\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod mongo-0 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Checking Kopia Repository Status\nDESCRIPTION: Command to display the current status of a Kopia repository using the KopiaUI executable with a specific configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day86.md#2025-04-17_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository status\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository Using HTTPS URL\nDESCRIPTION: This command demonstrates how to clone a forked Git repository from GitHub to a local machine using the git clone command with an HTTPS URL.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day40.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Viewing a commit relative to HEAD\nDESCRIPTION: Shows the details of a commit specified by its position relative to the current HEAD (most recent commit).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit show HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Enabling Loopback Interface in Namespace\nDESCRIPTION: Commands to bring up the loopback interface in the red namespace. This is necessary for proper networking within the namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec red ip link set lo up\nsudo ip netns exec red ip link list\n```\n\n----------------------------------------\n\nTITLE: Restarting Enterprise Search Container after Configuration Changes\nDESCRIPTION: Command-line example for restarting the Enterprise Search container after making configuration changes. This ensures that the new configuration is applied to the running service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/enterprise-search/enterprise-search-compose.yml restart enterprise-search\n```\n\n----------------------------------------\n\nTITLE: Network Device IP Configuration Table\nDESCRIPTION: A table listing the IP addresses assigned to each network device in the lab setup, including a router and four switches.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day26.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Node        | IP Address  |\n| ----------- | -----------|\n| Router      | 10.10.88.110|\n| Switch1     | 10.10.88.111|\n| Switch2     | 10.10.88.112|\n| Switch3     | 10.10.88.113|\n| Switch4     | 10.10.88.114|\n```\n\n----------------------------------------\n\nTITLE: Applying BookInfo Gateway Configuration\nDESCRIPTION: Command to apply the Gateway and VirtualService configuration, exposing the BookInfo application through the Istio Ingress Gateway.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml\n```\n\n----------------------------------------\n\nTITLE: Prometheus Query for Istio Request Metrics\nDESCRIPTION: Example Prometheus query to display total requests processed by Istio. This query is entered in the Prometheus UI.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nistio_requests_total\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Function for Fuzzing Demonstration in Go\nDESCRIPTION: This Go function demonstrates a simple case where fuzzing can be effective. It panics when the input string is exactly 'fuzz', making it a good candidate for fuzz testing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day16.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc DontPanic(s string) {\n    if len(s) == 4 {\n        if s[0] == 'f' {\n            if s[1] == 'u' {\n                if s[2] == 'z' {\n                    if s[3] == 'z' {\n                        panic(\"error: wrong input\")\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Standard Error to a File in Bash\nDESCRIPTION: Demonstrates redirecting standard error (stderr) to a file. This command will send any error messages from 'some_command' to 'error.txt' while normal output still displays to the terminal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day44.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsome_command 2> error.txt\n```\n\n----------------------------------------\n\nTITLE: Viewing Global Git Configuration\nDESCRIPTION: Command to display the global Git configuration settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day36.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global -e\n```\n\n----------------------------------------\n\nTITLE: Prometheus Operator Deployment Commands\nDESCRIPTION: Series of kubectl commands to deploy Prometheus Operator and related components in Kubernetes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day83.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/prometheus-operator/kube-prometheus.git\ncd kube-prometheus\nkubectl create -f manifests/setup\nkubectl create -f manifests/\nkubectl get pods -n monitoring -w\nkubectl get pods -n monitoring\nkubectl get svc -n monitoring\nkubectl get all -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Setting Enterprise Search Configuration Options in Docker Compose\nDESCRIPTION: YAML snippet showing how to override Enterprise Search configuration options using environment variables in the Docker Compose file. This example sets the authentication source and number of worker threads.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ent_search.auth.source: standard\n    worker.threads: '6'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token in Kubernetes\nDESCRIPTION: These commands retrieve the authentication token for the Kasten K10 dashboard from a Kubernetes secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day87.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Building a Twitter Bot Client in Go\nDESCRIPTION: A complete Go implementation for authenticating with the Twitter API and posting tweets. This code defines a Credentials struct for storing API keys, creates an authentication client, and includes a function to post a tweet to Twitter.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    fmt.Println(\"Go-Twitter Bot v0.01\")\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n\n    client, err := getClient(&creds)\n    if err != nil {\n        log.Println(\"Error getting Twitter Client\")\n        log.Println(err)\n    }\n\n    tweet, resp, err := client.Statuses.Update(\"A Test Tweet from the future, testing a #90DaysOfDevOps Program that tweets, tweet tweet\", nil)\n    if err != nil {\n        log.Println(err)\n    }\n    log.Printf(\"%+v\\n\", resp)\n    log.Printf(\"%+v\\n\", tweet)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources with kubectl\nDESCRIPTION: Commands for creating new resources in Kubernetes, including namespaces and resources from YAML/JSON files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace name\nkubectl create -f [filename]\n```\n\n----------------------------------------\n\nTITLE: Appending to files with echo in Linux\nDESCRIPTION: Using echo with the '>>' operator adds content to the end of a file without overwriting existing content.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\necho \"Komutlar eglenceldir!\" >> Gun15\n```\n\n----------------------------------------\n\nTITLE: Setting up Port Forwarding for Kasten K10 Dashboard in Kubernetes\nDESCRIPTION: This command sets up port forwarding to access the Kasten K10 dashboard UI by forwarding local port 8080 to the Kasten gateway service port 8000.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day89.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster with Required Add-ons\nDESCRIPTION: Command to start a Minikube Kubernetes cluster with specific add-ons and configurations needed for the Vault deployment, including volume snapshots and CSI driver support.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p demo --kubernetes-version=1.26.0\n```\n\n----------------------------------------\n\nTITLE: Changing Default StorageClass in Kubernetes\nDESCRIPTION: Kubectl commands to change the default storageclass from standard to csi-hostpath-sc.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day87.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Redeploying MongoDB in OpenShift CLI\nDESCRIPTION: These shell commands demonstrate how to redeploy the MongoDB application by scaling the deployment to 0 and then back to 1 replica.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n# oc scale deploy mongo -n pacman --replicas=0\n\ndeployment.apps/mongo scaled\n\n# oc scale deploy mongo -n pacman --replicas=1\n\ndeployment.apps/mongo scaled\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Pod\nDESCRIPTION: Shell script to create a temporary MySQL client pod for database operations\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Complete User Input Program in Go\nDESCRIPTION: Full example of a Go program that takes user input for Twitter handle and days completed, then calculates remaining days\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day12.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar TwitterName string\nvar DaysCompleted int\nfmt.Println(\"Enter your Twitter Handle: \")\nfmt.Scan(&TwitterName)\nfmt.Println(\"Enter the number of days completed: \")\nfmt.Scan(&DaysCompleted)\nremainingDays = remainingDays - DaysCompleted\n```\n\n----------------------------------------\n\nTITLE: Monitoring Network Policy Generation\nDESCRIPTION: Commands to monitor network activity and generate network policies for a nginx pod.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl gadget advise network-policy monitor -p $(kubectl get pods | grep nginx | head -n 1 | awk '{print $1}') --output /tmp/network.log\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl gadget advise network-policy report --input /tmp/network.log\n```\n\n----------------------------------------\n\nTITLE: Staging All Files with git add\nDESCRIPTION: The git add . command stages all files in the current directory for the next commit. This prepares the snapshot of changes that will be committed to the repository history.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Variable in Go\nDESCRIPTION: Demonstrates how to declare a simple string variable in Go using the var keyword. This snippet shows the most basic form of variable declaration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day11.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nvar challenge = \"#90DaysOfDevOps\"\n```\n\n----------------------------------------\n\nTITLE: Setting ZSH as Default Shell\nDESCRIPTION: Command to change the default shell to ZSH. This ensures ZSH is launched every time a terminal is opened instead of the default bash shell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchsh -s $(which zsh)\n```\n\n----------------------------------------\n\nTITLE: Reloading SSH Service in Linux\nDESCRIPTION: Command to reload the SSH service after configuration changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload sshd\n```\n\n----------------------------------------\n\nTITLE: Enabling Elasticsearch API Key Service in YAML Configuration\nDESCRIPTION: YAML configuration snippet for enabling Elasticsearch's API key service, which is required by Enterprise Search to function. This setting must be added to the Elasticsearch configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nxpack.security.authc.api_key.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jenkins Admin Password\nDESCRIPTION: This command retrieves the initial admin password for Jenkins by executing a command inside the Jenkins container.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/chart-admin-password && echo\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Repositories\nDESCRIPTION: This command displays the list of currently added Helm repositories. It's useful for verifying the existing repositories before adding a new one.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo list\n```\n\n----------------------------------------\n\nTITLE: Creating New Database for Restore\nDESCRIPTION: SQL command to create a new database for restoring the backup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE dvdrental_restore\n```\n\n----------------------------------------\n\nTITLE: Creating URL for Minikube Service\nDESCRIPTION: This command generates a URL for accessing a service running in Minikube, creating a tunnel to the service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day54.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nminikube --profile='mc-demo' service nginx-service --url -n nginx\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple PHP Info Page in Apache\nDESCRIPTION: A minimal PHP script that displays the PHP configuration information on the server. This is commonly used to verify that PHP is correctly installed and configured on a web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day18.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nphpinfo();\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating File Shares in Azure Storage Account\nDESCRIPTION: Steps to create file shares within an Azure storage account, which provide SMB2.1 and 3.0 file sharing capabilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day32.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud6.png)\n\nThis will provide SMB2.1 and 3.0 file shares in Azure. \n\nUseable within the Azure and externally via SMB3 and port 445 open to the internet. \n\nProvides shared file storage in Azure. \n\nCan be mapped using standard SMB clients in addition to REST API.\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Keys in Enterprise Search YAML (Format 1)\nDESCRIPTION: Enterprise Search requires encryption keys to be configured before startup. This snippet shows the first format for configuring multiple encryption keys in the enterprise-search.yml file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys:\n  - my_first_encryption_key\n  - my_second_encryption_key\n  - ...\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repositories\nDESCRIPTION: Command to update all Helm repositories, including the newly added Jenkins repository, to ensure the latest charts are available for installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Installing Netmiko Network Automation Module\nDESCRIPTION: Command to install the Netmiko Python module, which extends Paramiko specifically for network devices. Netmiko simplifies connecting to network devices and executing commands.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day27.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install netmiko\n```\n\n----------------------------------------\n\nTITLE: Docker Repository Path\nDESCRIPTION: Public Docker repository path where the built images are pushed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day74.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmichaelcade1\\90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Generating Heavier Load with 300 Requests to Bookinfo\nDESCRIPTION: Command to generate 300 sequential requests to the Bookinfo application to create more significant traffic.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfor i in $(seq 1 300); do curl -s -o /dev/null \"http://bookinfo.io/productpage\"; done\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bash History Configuration\nDESCRIPTION: Commands to configure bash history settings including timestamp format and history size limits.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day15.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho 'export HISTTIMEFORMAT=\"%d-%m-%Y %T \"' >> ~/.bash_profile\necho 'export HISTSIZE=100000' >> ~/.bash_profile\necho 'export HISTFILESIZE=10000000' >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Azure Cache for Redis Overview\nDESCRIPTION: Introduction to Azure Cache for Redis, its features, and use cases as an in-memory data store.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day32.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud10.png)\n\nAzure Cache for Redis provides an in-memory data store based on the Redis software. \n\n- It is an implementation of the open-source Redis Cache. \n    - A hosted, secure Redis cache instance.\n    - Different tiers are available\n    - Application must be updated to leverage the cache. \n    - Aimed for an application that has high read requirements compared to writes. \n    - Key-Value store based.\n```\n\n----------------------------------------\n\nTITLE: Adding Podman GPG Key on Ubuntu 20.04 (WSL2)\nDESCRIPTION: This snippet adds the GPG key for the Podman repository to ensure package authenticity. It's a crucial step in the Podman installation process on Ubuntu 20.04 in WSL2.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day48.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L \"https://download.opensuse.org/repositories/devel:/kubic:\\\n/libcontainers:/stable/xUbuntu_20.04/Release.key\" | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Accessing Pacman Application via Port Forwarding\nDESCRIPTION: Command to set up port forwarding to access the deployed Pacman application frontend locally on port 9090.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day87.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/pacman 9090:80 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Simple Python Hello World Example for Network Automation\nDESCRIPTION: A minimal Python example demonstrating the language's simplicity compared to other languages like Go. This single line of code prints 'hello world' to the console, highlighting Python's efficiency and readability.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day25.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('hello world')\n```\n\n----------------------------------------\n\nTITLE: Git Diff Commands\nDESCRIPTION: Commands for viewing differences between Git states, including comparing working directory with HEAD and staged changes with the last commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day37.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit diff HEAD\ngit diff --cached\n```\n\n----------------------------------------\n\nTITLE: Opening Files with vim\nDESCRIPTION: Shows how to open a text file using the vim editor. The command opens '90DaysOfDevOps.txt' in vim's normal mode.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day17.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvim 90DaysOfDevOps.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository\nDESCRIPTION: Shows how to initialize a new Git repository in a directory using the 'git init' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Running Elasticsearch Curator with Docker Compose\nDESCRIPTION: Command to launch Docker Compose with Curator extension by combining the main docker-compose.yml with the curator-specific compose file. This enables automated index management that runs every minute via cron.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/curator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/curator/curator-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Amending Recent Commit\nDESCRIPTION: Commands for adding changes to the most recent commit and force pushing to update a pull request.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit --amend\ngit push --force-with-lease origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Registering a Worker Node in Rancher\nDESCRIPTION: Command to register a node with the worker role in a Rancher-managed Kubernetes cluster. This is used for nodes that will run application workloads rather than cluster management components.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day53.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --worker\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Prometheus Service in Kubernetes\nDESCRIPTION: Command to port-forward the Prometheus service to access it on localhost port 9090, allowing Grafana to connect to Prometheus as a data source.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/prometheus-k8s 9090\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Grafana Service\nDESCRIPTION: Kubectl command to forward the Grafana service port to access it locally.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day83.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/grafana 3000\n```\n\n----------------------------------------\n\nTITLE: Opening PostgreSQL Configuration File\nDESCRIPTION: Command to open the PostgreSQL configuration file (postgresql.conf) using vim editor. This file contains the database's settings including logging configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day69.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvim $PGDATA/postgresql.conf\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Container\nDESCRIPTION: Command to run the basic hello-world Docker container example\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day44.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Deleting MongoDB Pod in Kubernetes\nDESCRIPTION: Command to delete the MongoDB pod to test persistence. This simulates a failure scenario to verify data retention in the stateful application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod mongo-0 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Restoring Kopia Snapshot\nDESCRIPTION: Command to restore a specific snapshot using its unique identifier.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day86.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkopia snapshot restore kdbd9dff738996cfe7bcf99b45314e193\n```\n\n----------------------------------------\n\nTITLE: Deleting Previous Virtual Service Configuration\nDESCRIPTION: This command removes the previously applied virtual service configuration for the reviews service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration\nDESCRIPTION: Command to apply the Terraform configuration, creating the actual infrastructure resources defined in the configuration files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Copying files in Linux\nDESCRIPTION: The 'cp' command copies files from one location to another. This example copies 'Day15' to the 'Desktop' directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncp Day15 Desktop\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation on Windows\nDESCRIPTION: After installing Docker Desktop on Windows, this command can be used to verify that the installation was successful by checking if the Docker command is recognized in the terminal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day43.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Host in Kibana\nDESCRIPTION: Kibana needs to be configured to connect to Enterprise Search. This snippet shows the required setting for kibana.yml to enable the Enterprise Search management interface.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenterpriseSearch.host: http://enterprise-search:3002\n```\n\n----------------------------------------\n\nTITLE: Git History Modification Commands\nDESCRIPTION: Commands for modifying Git history, including amending commits, rebasing branches, and viewing reference logs. These commands help manage the commit history and track HEAD changes in a repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Command    | Example              | Description                                                                                                                                                              |\n| ---------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| git commit | `git commit --amend` | 마지막 commit을 단계적 변경 사항과 마지막 commit을 결합한 것으로 바꿉니다. 아무것도 준비하지 않은 상태에서 사용하면 마지막 commit의 메시지를 편집할 수 있습니다.         |\n| git rebase | `git rebase <base>`  | 현재 branch를 \\<base>로 rebase합니다. \\<base>는 commit ID, branch 이름, 태그 또는 HEAD에 대한 레퍼런스가 될 수 있습니다.                                                 |\n| git reflog | `git reflog`         | 로컬 리포지토리의 HEAD에 대한 변경 로그를 표시합니다. 날짜 정보를 표시하려면 --relative-date 플래그를 추가해야 하고, 모든 레퍼런스를 표시하려면 --all을 추가해야 합니다. |\n```\n\n----------------------------------------\n\nTITLE: Applying Jenkins Kubernetes Configurations\nDESCRIPTION: This snippet applies Kubernetes configurations for Jenkins, including volume and service account settings. It sets up the necessary Kubernetes resources for Jenkins.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-volume.yml \n\nkubectl apply -f jenkins-sa.yml\n```\n\n----------------------------------------\n\nTITLE: Using Short Status in Git\nDESCRIPTION: Demonstrates the use of 'git status -s' for a concise status output. This command provides a shortened version of the status, showing only the essential information about changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day38.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit status -s\n```\n\n----------------------------------------\n\nTITLE: Interactive User Creation Shell Script with Password Masking\nDESCRIPTION: The final version of the shell script that prompts for username and password interactively, masks the password input for security, and confirms successful account creation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\necho \"What is your intended username?\"\nread  username\necho \"What is your password\"\nread -s password\n\n#A user can be passed in as a command line argument\necho \"$username user account being created.\"\n\n#A user is created with the name of command line argument\nsudo useradd -m $username\n\n#A password can be parsed in as a command line argument.\nsudo chpasswd <<< $username:$password\n\necho \"$username user created successfully!\"\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Request Template for Fuzzing\nDESCRIPTION: A template for HTTP POST requests with a placeholder for fuzzy data in the JSON body. The placeholder is marked with backtick symbols (`) and will be substituted with values from the wordlist.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day17.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPOST / HTTP/1.1\nContent-Type: application/json\nUser-Agent: PostmanRuntime/7.26.3\nAccept: */*\nCache-Control: no-cache\nHost: localhost:8000\nAccept-Encoding: gzip, deflate\nConnection: close\nContent-Length: 35\n\n{\n    \"name\": \"`S9`\",\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Git Rebase to Incorporate Main Branch Changes\nDESCRIPTION: This code demonstrates how to rebase a feature branch onto the main branch. The commands first switch to the feature branch and then rebase it onto the main branch, which re-writes the commit history by creating new commits for each commit in the original branch instead of creating a merge commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feature\ngit rebase main\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash UDP Input for Logspout\nDESCRIPTION: Logstash pipeline configuration snippet that enables the UDP input on port 5000 with JSON codec to receive logs from Logspout. This must be added to your Logstash configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_1\n\nLANGUAGE: logstash\nCODE:\n```\ninput {\n  udp {\n    port  => 5000\n    codec => json\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Date and Time to Bash History\nDESCRIPTION: This snippet shows how to configure bash to include date and time for each command in the history file. It sets the HISTTIMEFORMAT variable and increases the history file size.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHISTTIMEFORMAT=\"%d-%m-%Y %T \"\n\necho 'export HISTTIMEFORMAT=\"%d-%m-%Y %T \"' >> ~/.bash_profile\n\necho 'export HISTSIZE=100000' >> ~/.bash_profile\necho 'export HISTFILESIZE=10000000' >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Prometheus Server in Kubernetes\nDESCRIPTION: Commands to export the Prometheus server pod name and set up port forwarding to access the Prometheus UI on localhost:9090.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day78.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=prometheus,component=server\" -o jsonpath=\"{.items[0].metadata.name}\")\n  kubectl --namespace default port-forward $POD_NAME 9090\n```\n\n----------------------------------------\n\nTITLE: Check Kanister Profile Status\nDESCRIPTION: Command to view configured Kanister profiles in the namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get profiles.cr.kanister.io -n my-production-app\n```\n\n----------------------------------------\n\nTITLE: Simple Variable Calculation in Go\nDESCRIPTION: Shows how to perform basic arithmetic with variables in Go to calculate remaining days\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day12.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nremainingDays = remainingDays - DaysCompleted\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Client Pod\nDESCRIPTION: Command to create a MySQL client pod for database operations\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day88.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Using visual diff tool for comparing changes\nDESCRIPTION: Launches the configured visual diff tool to compare changes between the working directory and staging area.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit difftool\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nginx Configuration with Variable Port (Jinja2)\nDESCRIPTION: This updated Nginx configuration template uses a variable for the HTTP port, demonstrating how to combine Ansible facts with user-defined variables in templates.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_3\n\nLANGUAGE: jinja2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n\t{% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:{{ http_port }};\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {   \n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Files from Git Repository\nDESCRIPTION: Demonstrates two methods for removing files from a Git repository: manually deleting and using 'git rm'. The 'git rm' command removes the file from both the working directory and the Git repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day38.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm oldcode.ps1\ngit add .\ngit commit -m \"Removed oldcode.ps1\"\n\n# Alternative method\ngit rm oldcode.ps1\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Filebeat Extension\nDESCRIPTION: Command to start Docker Compose with the Filebeat extension by referencing both the main docker-compose.yml and the Filebeat-specific configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth Server Audit Logs\nDESCRIPTION: Lists the available OAuth server audit logs on the control-plane nodes using the 'oc adm node-logs' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\noc adm node-logs --role=master --path=oauth-server/\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Addresses for Virtual Interfaces\nDESCRIPTION: Commands to assign IP addresses to the virtual interfaces in each namespace. This allows proper IP communication between the namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec red ip addr add 192.168.15.1/24 dev veth-red\nsudo ip netns exec blue ip addr add 192.168.15.2/24 dev veth-blue\n```\n\n----------------------------------------\n\nTITLE: Installing Kanister via Helm\nDESCRIPTION: Helm command to install Kanister operator into a Kubernetes cluster with version 0.75.0\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kanister --namespace kanister kanister/kanister-operator --set image.tag=0.75.0 --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account via Portal\nDESCRIPTION: Steps to create a storage account in Azure Portal, including naming conventions, redundancy options, and performance tiers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day32.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud1.png)\n\n![](Images/Day32_Cloud2.png)\n\n![](Images/Day32_Cloud3.png)\n\n![](Images/Day32_Cloud4.png)\n\n![](Images/Day32_Cloud5.png)\n```\n\n----------------------------------------\n\nTITLE: Setting History Timestamp Format in Linux\nDESCRIPTION: Commands to configure Linux history to include timestamps with each command entry. This helps with tracing when commands were executed, which is useful for system administration and troubleshooting.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHISTTIMEFORMAT=\"%d-%m-%Y %T \"\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in Linux/MacOS\nDESCRIPTION: Command to activate the virtual environment in Linux or MacOS bash shell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource <venv>/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command with Username\nDESCRIPTION: Command format for building a Docker image that can be pushed to Docker Hub, including username in the image name\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day45.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t {{username}}/{{imagename}}:{{version}}\n```\n\n----------------------------------------\n\nTITLE: Annotating VolumeSnapshotClass for Kasten K10 Integration\nDESCRIPTION: A command to annotate the CSI hostpath snapclass so that Kasten K10 can identify and use it for backup operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day87.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate volumesnapshotclass csi-hostpath-snapclass \\\n    k10.kasten.io/is-snapshot-class=true\n```\n\n----------------------------------------\n\nTITLE: Basic Python Hello World Example\nDESCRIPTION: Demonstrates Python's simplicity compared to other languages by showing a minimal hello world program.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day25.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('hello world')\n```\n\n----------------------------------------\n\nTITLE: Git Remote Repository Commands\nDESCRIPTION: Commands for managing remote repositories in Git, including adding remotes, fetching, pulling, and pushing changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Command           |           Example                       |           Description                                                                                                                 | \n| ---------------   |   ------------------------------------- |   ----------------------------------------------------------------------------------------------------------------------------------- |\n| git remote add    | `git remote add <name> <url>`           | Create a new connection to a remote repo. After adding a remote, you can use <name> as a shortcut for <url> in other commands.        |\n| git fetch         | `git fetch <remote> <branch>`           | Fetches a specific <branch>, from the repo. Leave off <branch> to fetch all remote refs.                                              |\n| git pull          | `git pull <remote>`                     | Fetch the specified remote's copy of current branch and immediately merge it into the local copy.                                     |\n| git push          | `git push <remote> <branch>`            | Push the branch to <remote>, along with necessary commits and objects. Creates named branch in the remote repo if it doesn't exist.   |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Cleanup Command\nDESCRIPTION: Command to stop and remove the ELK stack containers\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down\n```\n\n----------------------------------------\n\nTITLE: Rebasing Feature Branch onto Main Branch in Git\nDESCRIPTION: Commands to perform a rebase operation that moves a feature branch to incorporate all new commits from the main branch. This creates a linear project history by rewriting commits instead of creating merge commits.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day39.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feature\ngit rebase main\n```\n\n----------------------------------------\n\nTITLE: Listing All Monitoring Resources in Kubernetes\nDESCRIPTION: Command to list all resources (pods, services, deployments, etc.) that have been created in the monitoring namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Metricbeat Extension\nDESCRIPTION: Command to start Docker Compose with an additional Metricbeat configuration file. This includes Metricbeat in the stack by referencing both the main docker-compose.yml and the Metricbeat extension file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Setting ZSH as Default Shell\nDESCRIPTION: Command to change the default shell to ZSH\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day20.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchsh -s $(which zsh)\n```\n\n----------------------------------------\n\nTITLE: Example OpenShift API Server Audit Log Output\nDESCRIPTION: Shows an example of the JSON-formatted output from an OpenShift API server audit log, including event details and user information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\"kind\":\"Event\",\"apiVersion\":\"audit.k8s.io/v1\",\"level\":\"Metadata\",\"auditID\":\"5d08341a-8fa2-4fab-8e4a-4fb1c01d2d6e\",\"stage\":\"ResponseStarted\",\"requestURI\":\"/apis/template.openshift.io/v1/namespaces/openshift/templates?allowWatchBookmarks=true\\u0026resourceVersion=9537849\\u0026timeout=5m44s\\u0026timeoutSeconds=344\\u0026watch=true\",\"verb\":\"watch\",\"user\":{\"username\":\"system:serviceaccount:openshift-cluster-samples-operator:cluster-samples-operator\",\"groups\":[\"system:serviceaccounts\",\"system:serviceaccounts:openshift-cluster-samples-operator\",\"system:authenticated\"],\"extra\":{\"authentication.kubernetes.io/pod-name\":[\"cluster-samples-operator-7f8d575897-s7566\"],\"authentication.kubernetes.io/pod-uid\":[\"8a96caaf-1de9-4cef-915f-ace02c764e52\"]}},\"sourceIPs\":[\"192.168.200.181\",\"10.130.0.2\"],\"userAgent\":\"cluster-samples-operator/v0.0.0 (linux/amd64) kubernetes/$Format\",\"objectRef\":{\"resource\":\"templates\",\"namespace\":\"openshift\",\"apiGroup\":\"template.openshift.io\",\"apiVersion\":\"v1\"},\"responseStatus\":{\"metadata\":{},\"code\":200},\"requestReceivedTimestamp\":\"2023-03-27T09:44:50.239076Z\",\"stageTimestamp\":\"2023-03-27T09:44:50.242747Z\",\"annotations\":{\"authorization.k8s.io/decision\":\"allow\",\"authorization.k8s.io/reason\":\"RBAC: allowed by RoleBinding \\\"shared-resource-viewers/openshift\\\" of Role \\\"shared-resource-viewer\\\" to Group \\\"system:authenticated\\\"\"}}\n```\n\n----------------------------------------\n\nTITLE: Azure PowerShell Command Example\nDESCRIPTION: Example showing the Azure PowerShell cmdlet syntax for creating a virtual machine\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day33.md#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-AzVM\n```\n\n----------------------------------------\n\nTITLE: Verifying Restored MySQL Data\nDESCRIPTION: This SQL command selects all data from the 'Accounts' table, used to verify that the data has been successfully restored.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\necho \"select * from Accounts;\" |  ${MYSQL_EXEC}\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Service in Kubernetes\nDESCRIPTION: Command to verify the Prometheus service is correctly configured in the istio-system namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc prometheus -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Scaling Kubernetes Deployment\nDESCRIPTION: Command to scale the Pacman deployment to 10 replicas in the pacman namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl scale deployment pacman --replicas=10 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Running the Example Playbook\nDESCRIPTION: Command to execute the example playbook that demonstrates role execution and task sequencing in Ansible.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nansible-playbook \\\n    playbooks/example.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources with Terraform Workspace Names\nDESCRIPTION: Terraform configuration that uses the workspace name to create environment-specific resources. This example creates an EC2 instance with tags that include the workspace name, enabling clear resource identification across environments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day64.md#2025-04-17_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n\n  tags = {\n    Name        = \"example-instance-${terraform.workspace}\"\n    Environment = terraform.workspace\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Enterprise Search Container\nDESCRIPTION: Console command to restart the Enterprise Search container after configuration changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/enterprise-search/enterprise-search-compose.yml restart enterprise-search\n```\n\n----------------------------------------\n\nTITLE: Renaming files with mv in Linux\nDESCRIPTION: The 'mv' command can also rename files. This example changes 'Day15' to 'day15' (case change) and then to 'AnotherDay'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nmv Day15 day15\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kasten K10 Dashboard\nDESCRIPTION: Command to set up port forwarding for accessing the Kasten K10 dashboard locally through port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day89.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\n----------------------------------------\n\nTITLE: Create Minikube Tunnel\nDESCRIPTION: Command to create a tunnel for accessing Ingress endpoints in Minikube\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nminikube tunnel --profile=mc-demo\n```\n\n----------------------------------------\n\nTITLE: Comparing staged changes with visual diff tool\nDESCRIPTION: Opens the visual diff tool to view changes that have been staged for commit, providing a visual comparison with the previous committed version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit difftool --staged\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Table with Full Table Scan\nDESCRIPTION: SQL query to select all records from the actor table where the last_name is 'Cage'. This demonstrates a full table scan operation when executed in PostgreSQL.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day67.md#2025-04-17_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM actor WHERE last_name = 'Cage'\n```\n\n----------------------------------------\n\nTITLE: Deploying EFK Stack Configuration\nDESCRIPTION: Command to apply the EFK stack configuration to the Kubernetes cluster\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day82.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f efk-stack.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Quantum Circuit with Qiskit\nDESCRIPTION: Demonstrates how to create a basic quantum circuit with two qubits and two classical bits, apply Hadamard and CX gates, and measure the results. This example shows the fundamental building blocks of a quantum program.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day12.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qiskit import QuantumCircuit\n\n# Create a quantum circuit with 2 qubits and 2 classical bits\nqc = QuantumCircuit(2, 2)\n\n# Add a Hadamard gate to qubit 0\nqc.h(0)\n\n# Add a CX (CNOT) gate with control qubit 0 and target qubit 1\nqc.cx(0, 1)\n\n# Measure qubits 0 and 1 into classical bits 0 and 1\nqc.measure([0, 1], [0, 1])\n\n# Draw the circuit\nqc.draw()\n```\n\n----------------------------------------\n\nTITLE: Listing Kopia Snapshots\nDESCRIPTION: Command to list all available snapshots in the currently configured repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day86.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config snapshot list\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Diff Tool in Git\nDESCRIPTION: Commands to configure VSCode as the default diff tool for Git and checking the configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day39.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global diff.tool vscode\ngit config --global -e\n```\n\n----------------------------------------\n\nTITLE: Starting Metricbeat with Docker Compose\nDESCRIPTION: Command to start Metricbeat by running Docker Compose with both the main compose file and Metricbeat extension file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Connection to GitHub\nDESCRIPTION: Command to verify your SSH connection to GitHub is working properly. This will attempt to authenticate with GitHub using your SSH key.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nssh -T git@github.com\n```\n\n----------------------------------------\n\nTITLE: Using cut to Extract Specific Fields from Text\nDESCRIPTION: This command uses the 'cut' utility to extract the second field from each line in the 'list.txt' file, using space as the delimiter. It's useful for parsing structured text data.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncut -d \" \" -f 2 list.txt\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources in Kubernetes Namespace\nDESCRIPTION: This command displays all resources (pods, services, deployments, etc.) in the 'kube-logging' namespace, giving a comprehensive view of the EFK stack deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day82.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Creating Standby MiniKube Cluster\nDESCRIPTION: Command to create a new MiniKube cluster with required add-ons for disaster recovery setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day89.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p standby --kubernetes-version=1.21.2\n```\n\n----------------------------------------\n\nTITLE: WordPress Installation Commands\nDESCRIPTION: Bash commands for downloading and extracting WordPress files on an Ubuntu system with LAMP stack.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day18.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www\nsudo curl -O https://wordpress.org/latest.tar.gz\nsudo tar -xvf latest.tar.gz\nsudo rm latest.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Using Visual Diff Tool in Git\nDESCRIPTION: Open the configured visual diff tool to compare changes using the 'git difftool' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit difftool\n```\n\n----------------------------------------\n\nTITLE: Submitting Hedra Test to Project Repository in Bash\nDESCRIPTION: This bash command shows how to submit a Hedra test to a project repository using the CLI, demonstrating the project management features of Hedra for organizing and versioning tests.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhedra test submit my_test.py --project github.com/myorg/tests\n\nSubmitting my_test.py to github.com/myorg/tests...\nRepo updated!\n```\n\n----------------------------------------\n\nTITLE: Displaying Memory Address with Pointers in Go\nDESCRIPTION: This example demonstrates how to use the & operator to display the memory address of a variable in Go, introducing the concept of pointers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day12.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"Memory Address of remainingDays is\", &remainingDays)\n```\n\n----------------------------------------\n\nTITLE: GitHub Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a blog post about GitHub and social coding platforms, including metadata like title, description, and tags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day40.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: '#90DaysOfDevOps - Social Network for code - Day 40'\npublished: false\ndescription: 90DaysOfDevOps - Social Network for code\ntags: 'devops, 90daysofdevops, learning'\ncover_image: null\ncanonical_url: null\nid: 1049044\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Environment Variables\nDESCRIPTION: YAML configuration demonstrating how to override Enterprise Search settings using environment variables in Docker Compose.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ent_search.auth.source: standard\n    worker.threads: '6'\n```\n\n----------------------------------------\n\nTITLE: Project Configuration JSON\nDESCRIPTION: JSON output showing the project's configuration including security labels and annotations\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"apiVersion\": \"project.openshift.io/v1\",\n    \"kind\": \"Project\",\n    \"metadata\": {\n        \"annotations\": {\n            \"openshift.io/description\": \"\",\n            \"openshift.io/display-name\": \"\",\n            \"openshift.io/requester\": \"system:admin\",\n            \"openshift.io/sa.scc.mcs\": \"s0:c27,c4\",\n            \"openshift.io/sa.scc.supplemental-groups\": \"1000710000/10000\",\n            \"openshift.io/sa.scc.uid-range\": \"1000710000/10000\"\n        },\n        \"creationTimestamp\": \"2023-03-29T09:23:18Z\",\n        \"labels\": {\n            \"kubernetes.io/metadata.name\": \"scc-ns-test\",\n            \"pod-security.kubernetes.io/audit\": \"restricted\",\n            \"pod-security.kubernetes.io/audit-version\": \"v1.24\",\n            \"pod-security.kubernetes.io/warn\": \"restricted\",\n            \"pod-security.kubernetes.io/warn-version\": \"v1.24\"\n        },\n        \"name\": \"scc-ns-test\",\n        \"resourceVersion\": \"11247602\",\n        \"uid\": \"3f720113-1e30-4a3f-b97e-48f88735e510\"\n    },\n    \"spec\": {\n        \"finalizers\": [\n            \"kubernetes\"\n        ]\n    },\n    \"status\": {\n        \"phase\": \"Active\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Oh My ZSH Framework\nDESCRIPTION: Command to install Oh My ZSH framework using curl.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day20.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Lynis on Ubuntu/Debian for Host Vulnerability Scanning\nDESCRIPTION: Command to install the Lynis security scanner on Ubuntu or Debian-based systems using apt package manager. Lynis is used for auditing and security scanning of Linux systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day32.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install lynis\n```\n\n----------------------------------------\n\nTITLE: Moving Virtual Interfaces to Respective Namespaces\nDESCRIPTION: Commands to move the virtual ethernet interfaces to their respective network namespaces. This connects the namespaces together with the virtual cable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip link set veth-red netns red\nsudo ip link set veth-blue netns blue\n```\n\n----------------------------------------\n\nTITLE: Grafana Default Login Credentials\nDESCRIPTION: The default username and password required for first-time login to Grafana. After initial login, you will be prompted to change the password.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nUsername: admin \nPassword: admin\n```\n\n----------------------------------------\n\nTITLE: Example GOPATH Output\nDESCRIPTION: Sample output showing the default Go workspace path\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day10.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/home/michael/projects/go\n```\n\n----------------------------------------\n\nTITLE: Getting User Input for Twitter Name in Go\nDESCRIPTION: This snippet demonstrates how to use fmt.Scan() to get user input for a variable named TwitterName. It introduces the use of the & operator to create a pointer to the variable.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day12.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Scan(&TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Forwarding Kubernetes Port for Kasten K10 Dashboard Access\nDESCRIPTION: Command to port-forward the Kasten K10 dashboard service to localhost port 8080, making the web interface accessible at http://127.0.0.1:8080/k10/#/.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day89.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\n----------------------------------------\n\nTITLE: Building Go Program into Executable Binary\nDESCRIPTION: Command to compile a Go program into an executable binary. This creates a standalone executable that can be run on systems without Go installed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day08.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo build main.go\n```\n\n----------------------------------------\n\nTITLE: Renaming Files in Git\nDESCRIPTION: Renames a file in both the working directory and the Git repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day38.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit mv readme.md README.md\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Resources in Pacman Namespace\nDESCRIPTION: Command to list all resources in the Pacman namespace after deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day55.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n pacman\n```\n\n----------------------------------------\n\nTITLE: Setting ZSH as Default Shell\nDESCRIPTION: Command to change the default shell to ZSH for the current user.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day20.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchsh -s $(which zsh)\n```\n\n----------------------------------------\n\nTITLE: Azure Cosmos DB Features\nDESCRIPTION: Explanation of Azure Cosmos DB's key features, including global distribution, consistency models, and supported APIs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day32.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud9.png)\n\nAzure Cosmos DB is a scheme agnostic NoSQL implementation. \n\n99.99% SLA \n\nGlobally distributed database with single-digit latencies at the 99th percentile anywhere in the world with automatic homing. \n\nPartition key leveraged for the partitioning/sharding/distribution of data. \n\nSupports various data models (documents, key-value, graph, column-friendly)\n\nSupports various APIs (DocumentDB SQL, MongoDB, Azure Table Storage and Gremlin)\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Types in Go\nDESCRIPTION: Examples of explicitly declaring variable types in Go, specifying string for text data and uint for non-negative integers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day11.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar TwitterHandle string\nvar DaysCompleted uint\n```\n\n----------------------------------------\n\nTITLE: Viewing File Contents with head, tail, and more Commands in Linux\nDESCRIPTION: Shows commands for viewing partial file contents: head displays the beginning of a file, tail shows the end of a file, and more allows for paginated viewing of large files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhead file.txt\ntail file.txt\nmore large_file.txt\n```\n\n----------------------------------------\n\nTITLE: Testing Read Access in PostgreSQL\nDESCRIPTION: This SQL query selects all data from the 'actor' table. It's used to verify that the newly created user has read access to the database tables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM actor\n```\n\n----------------------------------------\n\nTITLE: Defining a Primary Key Constraint in PostgreSQL\nDESCRIPTION: Shows the syntax for defining a primary key constraint in PostgreSQL. This constraint ensures each row has a unique identifier using the staff_id column.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCONSTRAINT staff_pkey PRIMARY KEY (staff_id)\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Comparison Table\nDESCRIPTION: A comparison table showing cloud-specific and cloud-agnostic Infrastructure as Code solutions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day62.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Cloud Specific                  | Cloud Agnostic | \n| ------------------------------- | -------------- |\n| AWS CloudFormation              | Terraform      | \n| Azure Resource Manager          | Pulumi         | \n| Google Cloud Deployment Manager |                | \n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus Helm Repository\nDESCRIPTION: Command to add the Prometheus community Helm repository to the local Helm installation\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day78.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Listing Resources in Pacman Namespace\nDESCRIPTION: Command to list all Kubernetes resources (pods, services, deployments, statefulsets) in the pacman namespace to verify successful deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n pacman\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Alertmanager Service\nDESCRIPTION: Command to set up port forwarding for accessing Alertmanager service on localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day83.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/alertmanager-main 9093\n```\n\n----------------------------------------\n\nTITLE: Building Terraform Provider\nDESCRIPTION: Command to build the Terraform provider using Go, which creates a binary in the Go path's bin folder.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day64.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo build\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Container IP Address - Generic Command\nDESCRIPTION: Command to retrieve the IP address of a Docker container using docker inspect with network settings filtering\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day23.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect <container_id_or_name> -f '{{range .NetworkSettings.Networks}}{{.IPAddress}} {{end}}'\n```\n\n----------------------------------------\n\nTITLE: vim Search and Replace Command\nDESCRIPTION: Demonstrates the vim command for finding and replacing text throughout a file. This command replaces all instances of 'Day' with '90DaysOfDevOps'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day17.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n:%s/Day/90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Deleting Namespace in Kubernetes\nDESCRIPTION: This command deletes the 'pacman' namespace in the Kubernetes cluster, which is used to remove the previous restore operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day90.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete ns pacman\n```\n\n----------------------------------------\n\nTITLE: Ansible Playbook with Roles and Tags\nDESCRIPTION: This YAML snippet shows an Ansible playbook structure using roles and tags for webservers, proxy servers, and database servers. It demonstrates a clean separation of concerns.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day68.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: proxy\n\n- hosts: database\n  become: yes\n  roles:\n    - common\n    - mysql\n  tags: database\n```\n\n----------------------------------------\n\nTITLE: Displaying GOPATH Environment Variable\nDESCRIPTION: Command to display the current GOPATH environment variable setting in the terminal\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day10.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $GOPATH\n```\n\n----------------------------------------\n\nTITLE: Selecting All Data from a PostgreSQL Table\nDESCRIPTION: A simple SELECT statement to retrieve all columns and rows from a table in PostgreSQL. This query is used to verify that data was successfully imported into the table.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM test_table\n```\n\n----------------------------------------\n\nTITLE: Deploying Stateful Pacman Application in Kubernetes\nDESCRIPTION: Command to create the Pacman stateful application in Kubernetes using a YAML configuration file. This deploys multiple Kubernetes objects including a namespace, deployment, service, and StatefulSet.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-stateful-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Vagrant Configuration for Ubuntu Desktop with VirtualBox\nDESCRIPTION: This Vagrantfile defines an Ubuntu Desktop 20.04 virtual machine configuration with 8GB memory, 4 CPUs, and 128MB video memory. It uses the chenhan/ubuntu-desktop-20.04 box and VirtualBox as the provider.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day14.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n\n  config.vm.box = \"chenhan/ubuntu-desktop-20.04\"\n\n  config.vm.provider :virtualbox do |v|\n\n   v.memory  = 8096\n\n   v.cpus    = 4\n\n   v.customize [\"modifyvm\", :id, \"--vram\", \"128\"]\n\nend\n\nend\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Client Pod\nDESCRIPTION: Command to create a MySQL client pod for database operations\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Syncing with Upstream Repository\nDESCRIPTION: Commands for updating a feature branch with changes from the upstream main branch using rebase.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout my-new-feature\ngit fetch -a\ngit pull --rebase upstream main\ngit push --force-with-lease origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Basic Command\nDESCRIPTION: Basic Azure CLI command prefix used to interact with Azure resources\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day33.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk Space Usage in Linux\nDESCRIPTION: This command shows disk space usage in a human-readable format for all mounted filesystems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\n```\n\n----------------------------------------\n\nTITLE: Viewing File Permissions in Linux\nDESCRIPTION: This command lists all files in the 'Day15' directory with detailed information, including permissions, ownership, and timestamps.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls -al Day15\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access Kibana Dashboard\nDESCRIPTION: Setting up port forwarding from the local machine to the Kibana pod, allowing access to the Kibana web interface through localhost:5601. This creates a secure tunnel to the Kibana service.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day82.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward kibana-84cf7f59c-v2l8v 5601:5601 -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Command to build a Docker image with a specific tag from the current directory\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day45.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 90daysofdevops:0.1 .\n```\n\n----------------------------------------\n\nTITLE: Opening Grafana Dashboard with Istioctl\nDESCRIPTION: Command to open the Grafana dashboard using the istioctl utility, which launches a browser window.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nistioctl dashboard grafana\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Usage Playbook\nDESCRIPTION: Demonstrates how to include and use the role in an Ansible playbook with variable parameters. Shows basic role inclusion syntax with a parameter 'x' set to value 42.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Configmgmt/ansible-scenario7/roles/mysql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Executing Hedra Test on Remote Cluster in Bash\nDESCRIPTION: This bash command demonstrates how to execute a Hedra test on a remote cluster using the CLI, showcasing the RPC remote execution capability for distributed testing scenarios.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhedra cloud test my_test.py --send staging\n\nSending to - staging - cluster at 155.020.313.33:6883\n```\n\n----------------------------------------\n\nTITLE: Setting ZSH as Default Shell\nDESCRIPTION: Command to change the default shell to ZSH. After running this command, the user needs to log out and back in for the changes to take effect.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchsh -s $(which zsh)\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Machine using Azure CLI\nDESCRIPTION: This snippet illustrates the Azure CLI command for creating a new virtual machine in Azure. It showcases the syntax used in Azure CLI, which differs from the Azure PowerShell cmdlet for the same operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day33.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz VM create\n```\n\n----------------------------------------\n\nTITLE: Accessing Grafana UI in Minikube\nDESCRIPTION: Gets the URL to access the Grafana web interface from Minikube. This command creates a tunnel to the service and returns the accessible URL.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day28.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nminikube service grafana-np --url\n```\n\n----------------------------------------\n\nTITLE: Testing Network Policy with Labeled Pod\nDESCRIPTION: Shows that a pod with the correct label can access the Nginx service after applying the network policy.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run curl --rm -ti --labels=\"nginx=client\" --image=curlimages/curl:latest -- sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --connect-timeout 1 nginx\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Syntax Highlighting Plugin\nDESCRIPTION: Command to install the syntax highlighting plugin for ZSH. This plugin provides syntax highlighting for the shell, making commands, options, and arguments visually distinct.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting\n```\n\n----------------------------------------\n\nTITLE: Downloading Istio Ambient Mesh Binary\nDESCRIPTION: Command to download the Istio Alpha release that supports the Ambient Mesh profile. This uses wget to retrieve the Linux/AMD64 version of Istio 1.18.0-alpha.0.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/istio/istio/releases/download/1.18.0-alpha.0/istio-1.18.0-alpha.0-linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password and Service URL\nDESCRIPTION: Retrieves the Grafana admin password from a Kubernetes secret and gets the service URL for accessing the Grafana UI.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day29.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret --namespace default grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\nminikube service grafana-np --url\n```\n\n----------------------------------------\n\nTITLE: Verifying Inserted Data with SELECT\nDESCRIPTION: SQL query to verify that a new row has been inserted by selecting specific columns from the staff and address tables for a staff member named 'Andrew'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT s.first_name, s.last_name, a.address, a.district, a.phone\nFROM staff s\nINNER JOIN address a ON s.address_id = a.address_id\nWHERE first_name = 'Andrew'\n```\n\n----------------------------------------\n\nTITLE: Using Secrets as Environment Variables in Kubernetes Pod\nDESCRIPTION: This YAML configuration defines a Pod that sets environment variables for a MySQL container using values from the 'db-secret' secret.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day41.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: env-pod\nspec:\n  containers:\n  - name: mycontainer\n    image: mysql\n    env:\n    - name: DB_USERNAME\n      valueFrom:\n        secretKeyRef:\n          name: db-secret\n          key: db_username\n    - name: DB_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: db-secret\n          key: db_password\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Installing Software using apt in Ubuntu\nDESCRIPTION: This command installs the 'figlet' package, which is a program that generates text banners.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day16.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install figlet\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kasten K10 Pod Deployment Status\nDESCRIPTION: This command watches the deployment status of Kasten K10 pods in the kasten-io namespace, allowing you to monitor when all components are ready and running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day89.md#2025-04-17_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl get pods -n kasten-io -w\n```\n\n----------------------------------------\n\nTITLE: Running Go Program from Command Line\nDESCRIPTION: Command to run a Go program directly from the source file without compiling it first. This is useful for quick testing and development.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day08.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Comparando Diferencias entre Commits en Git\nDESCRIPTION: Comando para ver las diferencias entre dos commits específicos en Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit diff b8f8 709a\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Flask with Elastic APM Agent\nDESCRIPTION: Example configuration for connecting a Python Flask application to the APM Server. It sets the required service name and APM server URL to enable application performance monitoring.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport elasticapm\nfrom elasticapm.contrib.flask import ElasticAPM\n\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['ELASTIC_APM'] = {\n    # Set required service name. Allowed characters:\n    # a-z, A-Z, 0-9, -, _, and space\n    'SERVICE_NAME': 'PYTHON_FLASK_TEST_APP',\n\n    # Set custom APM Server URL (default: http://localhost:8200)\n    'SERVER_URL': 'http://apm-server:8200',\n\n    'DEBUG': True,\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Bash Scripts\nDESCRIPTION: Shows how to use file conditions in a bash script to check if a file exists and is a regular file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nFILE=\"90DaysOfDevOps.txt\"\nif [ -f \"$FILE\" ]\nthen \n  echo \"$FILE is a file\"\nelse \n  echo \"$FILE is not a file\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status in kube-logging Namespace\nDESCRIPTION: Command to verify that all EFK stack pods are running correctly in the kube-logging namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day82.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Linting Hedra Test in Bash\nDESCRIPTION: This bash command demonstrates how to use Hedra's CLI to lint a test file, showcasing the built-in linting feature for maintaining code quality in performance tests.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhedra test lint my_test.py\n\nLinting my_test.py...\nOK!\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Package Managers in Linux\nDESCRIPTION: Demonstrates package installation commands for different Linux distributions using apt (Debian/Ubuntu), yum (RHEL/CentOS), and dnf (Fedora). Shows both update and install operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Debian/Ubuntu\napt update\napt install package_name\n\n# RHEL/CentOS\nyum update\nyum install package_name\n\n# Fedora\ndnf update\ndnf install package_name\n```\n\n----------------------------------------\n\nTITLE: Running Go Program from Terminal\nDESCRIPTION: Command to execute the Go program directly without creating a binary.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day08.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Extracting Fields with cut Command\nDESCRIPTION: Demonstrates the cut command with space delimiter to extract the second field from each line of a text file, useful for data extraction.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncut -d \" \" -f 2 list.txt\n```\n\n----------------------------------------\n\nTITLE: Deploying Pacman Stateful Application\nDESCRIPTION: Command to create resources defined in the pacman-stateful-demo.yaml file, which includes deployments, services, and StatefulSets for the Pacman application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-stateful-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Generated Seccomp Profile Example\nDESCRIPTION: Example of a generated seccomp profile showing allowed system calls for a nginx pod.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"defaultAction\": \"SCMP_ACT_ERRNO\",\n  \"architectures\": [\n    \"SCMP_ARCH_X86_64\",\n    \"SCMP_ARCH_X86\",\n    \"SCMP_ARCH_X32\"\n  ],\n  \"syscalls\": [\n    {\n      \"names\": [\n        \"access\",\n        \"arch_prctl\",\n        \"brk\",\n        \"chown\",\n        \"clone\",\n        \"close\",\n        \"connect\",\n        \"dup\",\n        \"dup2\",\n        \"execve\",\n        \"exit_group\",\n        \"faccessat\",\n        \"fcntl\",\n        \"fstat\",\n        \"futex\",\n        \"getcwd\",\n        \"getdents64\",\n        \"getegid\",\n        \"geteuid\",\n        \"getgid\",\n        \"getpgrp\",\n        \"getpid\",\n        \"getppid\",\n        \"getuid\",\n        \"ioctl\",\n        \"lseek\",\n        \"mmap\",\n        \"mprotect\",\n        \"munmap\",\n        \"openat\",\n        \"pipe\",\n        \"prlimit64\",\n        \"pselect6\",\n        \"read\",\n        \"rt_sigaction\",\n        \"rt_sigprocmask\",\n        \"rt_sigreturn\",\n        \"select\",\n        \"set_robust_list\",\n        \"set_tid_address\",\n        \"setns\",\n        \"setpgid\",\n        \"socket\",\n        \"stat\",\n        \"statfs\",\n        \"sysinfo\",\n        \"uname\",\n        \"wait4\",\n        \"write\"\n      ],\n      \"action\": \"SCMP_ACT_ALLOW\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Software using apt Package Manager\nDESCRIPTION: This command removes the previously installed 'figlet' program from the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove figlet\n```\n\n----------------------------------------\n\nTITLE: Checking the GOPATH Environment Variable\nDESCRIPTION: Shows how to verify the current GOPATH setting which defines where your Go workspace is located. The command displays the path to your Go workspace which defaults to a 'go' directory in your user's projects folder.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day10.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $GOPATH\n```\n\n----------------------------------------\n\nTITLE: Main MySQL Tasks Import\nDESCRIPTION: Imports the installation and setup tasks for MySQL role configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks file for roles/mysql\n- import_tasks: install_mysql.yml\n- import_tasks: setup_mysql.yml\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Pacman Application\nDESCRIPTION: This command sets up port forwarding to access the Pacman application frontend on localhost:9090.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl port-forward svc/pacman 9090:80 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Ubuntu Linux\nDESCRIPTION: This command installs Git on an Ubuntu Linux system using the apt package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day36.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a New Rails Application\nDESCRIPTION: Commands to create a new Rails application, set up the database, and start the server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day06.md#2025-04-17_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nrails new myapp --skip-turbolinks --skip-spring --skip-test-unit -d mysql\ncd myapp\nbundle exec rake db:create\nbundle exec rake db:migrate\nbundle exec rails server -b 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Logspout Extension\nDESCRIPTION: Command to launch Docker Compose with the Logspout extension by referencing both the main docker-compose.yml and the logspout extension configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/logspout/logspout-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Creating pgcrypto Extension\nDESCRIPTION: SQL command to enable the pgcrypto extension for encryption capabilities in PostgreSQL.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION pgcrypto;\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Reverting Changes\nDESCRIPTION: A table of Git commands used to undo or revert changes, including revert (to create a new commit that undoes changes), reset (to unstage files), and clean (to remove untracked files).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day37.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Command    | Example               | Description                                                                                                                                                   |\n| ---------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| git revert | `git revert <commit>` | \\<commit>의 모든 변경 사항을 취소하는 새 commit을 만든 다음 현재 branch에 적용합니다.                                                                         |\n| git reset  | `git reset <file>`    | 스테이징 영역에서 \\<file>을 제거하지만 작업 디렉토리는 변경하지 않고 그대로 둡니다. 이렇게 하면 변경 내용을 덮어쓰지 않고 파일을 스테이징 해제할 수 있습니다. |\n| git clean  | `git clean -n`        | 작업 디렉토리에서 어떤 파일을 제거할지 표시합니다. clean을 실행하려면 `-n` 대신 `-f`를 사용해야 합니다.                                                       |\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Structure Example\nDESCRIPTION: Shows the basic structure of the GitHub repository containing Dockerfile and index.html files used in the Jenkins pipeline.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day74.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nJenkins-HelloWorld/\n  ├── Dockerfile\n  ├── index.html\n  └── Jenkinsfile\n```\n\n----------------------------------------\n\nTITLE: Annotating VolumeSnapshotClass for Kasten K10\nDESCRIPTION: Kubectl command to annotate the volumesnapshotclass for use with Kasten K10.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day87.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate volumesnapshotclass csi-hostpath-snapclass \\\n    k10.kasten.io/is-snapshot-class=true\n```\n\n----------------------------------------\n\nTITLE: Accessing NodePort Service Information\nDESCRIPTION: Command to get detailed information about a specific service in Kubernetes, including its type, IP addresses, endpoints, and port configurations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe svc nginx\n```\n\n----------------------------------------\n\nTITLE: Checking Application Logs for Asynchronous Components\nDESCRIPTION: Commands to check logs for the generator and requestor deployments to verify proper functioning of the asynchronous communication setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day2-ops-code/README.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs deploy/generator\n\nkubectl logs deploy/requestor\n```\n\n----------------------------------------\n\nTITLE: Installing Software using apt Package Manager\nDESCRIPTION: This command installs the 'figlet' program, which generates text banners.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install figlet\n```\n\n----------------------------------------\n\nTITLE: Changing File Ownership in Linux\nDESCRIPTION: This command changes the ownership of the 'Day15' file from the current user 'vagrant' to 'NewUser'. The sudo command is used to execute this operation with elevated privileges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown NewUser Day15\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Pod in Kubernetes\nDESCRIPTION: This bash script creates a temporary pod to connect to the MySQL database, setting environment variables for the connection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Starting a Minikube Cluster in Bash\nDESCRIPTION: Command to start a basic Minikube cluster. This creates a single-node Kubernetes cluster using the default Docker driver.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Monitoring\nDESCRIPTION: Command to create a new namespace in Kubernetes for monitoring resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day83.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f manifests/setup\n```\n\n----------------------------------------\n\nTITLE: Monitoring Seccomp Profile Generation\nDESCRIPTION: Commands to start and stop monitoring a nginx pod for generating seccomp profiles.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day33.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl gadget advise seccomp-profile start -n default -p $(kubectl get pods | grep nginx | head -n 1 | awk '{print $1}')\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl gadget advise seccomp-profile stop <traceid>\n```\n\n----------------------------------------\n\nTITLE: Listing Linux User Accounts\nDESCRIPTION: This command extracts the first field (username) from the /etc/passwd file, which contains user account information on Linux systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncut -d: -f1 < /etc/passwd\n```\n\n----------------------------------------\n\nTITLE: Checking Current Shell\nDESCRIPTION: Command to verify which shell is currently being used. This helps confirm if the shell has been successfully changed from bash to ZSH.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwhich $SHELL\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Azure CLI Service Principal Creation\nDESCRIPTION: Example of the JSON response containing the credentials returned by Azure when creating a Service Principal with the Azure CLI. Shows the appId, password, and tenant details needed for authentication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day45.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"appId\": \"<application-id>\",\n  \"displayName\": \"ServicePrincipalName\",\n  \"name\": \"http://ServicePrincipalName\",\n  \"password\": \"<client-secret>\",\n  \"tenant\": \"<tenant-id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World in Python\nDESCRIPTION: A minimal Python example demonstrating the language's simplicity compared to other languages like Go, requiring just a single line of code to print 'hello world'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day25.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('hello world')\n```\n\n----------------------------------------\n\nTITLE: Scanning Older Spring PetClinic Image with Grype\nDESCRIPTION: This snippet shows how to use Grype to scan an older version of the Spring PetClinic container image. It demonstrates that older images often contain more vulnerabilities, including some with higher severity levels.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day14.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ grype springio/petclinic:latest\n ✔ Vulnerability DB        [no update available]\n ✔ Pulled image\n ✔ Loaded image\n ✔ Parsed image\n ✔ Cataloged packages      [213 packages]\n ✔ Scanned image           [167 vulnerabilities]\nNAME              INSTALLED                 FIXED-IN                   TYPE          VULNERABILITY        SEVERITY\nbash              4.4.18-2ubuntu1.2                                    deb           CVE-2022-3715        Medium\nbash              4.4.18-2ubuntu1.2         4.4.18-2ubuntu1.3          deb           CVE-2019-18276       Low\ncoreutils         8.28-1ubuntu1                                        deb           CVE-2016-2781        Low\ndpkg              1.19.0.5ubuntu2.3         1.19.0.5ubuntu2.4          deb           CVE-2022-1664        Medium\ne2fsprogs         1.44.1-1ubuntu1.3         1.44.1-1ubuntu1.4          deb           CVE-2022-1304        Medium\ngcc-8-base        8.4.0-1ubuntu1~18.04                                 deb           CVE-2020-13844       Medium\ngpgv              2.2.4-1ubuntu1.4          2.2.4-1ubuntu1.6           deb           CVE-2022-34903       Medium\ngpgv              2.2.4-1ubuntu1.4          2.2.4-1ubuntu1.5           deb           CVE-2019-13050       Low\ngpgv              2.2.4-1ubuntu1.4                                     deb           CVE-2022-3219        Low\ngzip              1.6-5ubuntu1              1.6-5ubuntu1.2             deb           CVE-2022-1271        Medium\nh2                1.4.200                   2.0.202                    java-archive  GHSA-7rpj-hg47-cx62  High\nh2                1.4.200                   2.0.206                    java-archive  GHSA-h376-j262-vhq6  Critical\nh2                1.4.200                                              java-archive  CVE-2021-23463       Critical\nh2                1.4.200                                              java-archive  CVE-2021-42392       Critical\nh2                1.4.200                                              java-archive  CVE-2022-23221       Critical\nh2                1.4.200                   2.1.210                    java-archive  GHSA-45hx-wfhj-473x  Critical\njackson-databind  2.11.4                    2.12.7.1                   java-archive  GHSA-jjjh-jjxp-wpff  High\njackson-databind  2.11.4                    2.12.7.1                   java-archive  GHSA-rgv9-q543-rqg4  High\njackson-databind  2.11.4                                               java-archive  CVE-2022-42004       High\njackson-databind  2.11.4                                               java-archive  CVE-2020-36518       High\njackson-databind  2.11.4                                               java-archive  CVE-2022-42003       High\njackson-databind  2.11.4                    2.12.6.1                   java-archive  GHSA-57j2-w4cx-62h2  High\njquery            2.2.4                                                java-archive  CVE-2019-11358       Medium\njquery            2.2.4                                                java-archive  CVE-2020-11022       Medium\njquery            2.2.4                                                java-archive  CVE-2015-9251        Medium\njquery            2.2.4                                                java-archive  CVE-2020-11023       Medium\njquery            2.2.4                                                java-archive  CVE-2007-2379        Medium\njquery-ui         1.11.4                                               java-archive  CVE-2021-41184       Medium\njquery-ui         1.11.4                                               java-archive  CVE-2016-7103        Medium\njquery-ui         1.11.4                                               java-archive  CVE-2021-41182       Medium\njquery-ui         1.11.4                                               java-archive  CVE-2021-41183       Medium\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2020-29562       Low\nlibc-bin          2.27-3ubuntu1.4                                      deb           CVE-2016-20013       Negligible\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2020-6096        Low\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2020-27618       Low\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2022-23218       Low\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2016-10228       Negligible\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2019-25013       Low\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2021-3326        Low\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2021-3999        Medium\nlibc-bin          2.27-3ubuntu1.4           2.27-3ubuntu1.5            deb           CVE-2022-23219       Low\n```\n\n----------------------------------------\n\nTITLE: Installing SSH Server on Linux\nDESCRIPTION: Command to install the OpenSSH server on a Linux system if not already present.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install openssh-server\n```\n\n----------------------------------------\n\nTITLE: Initial Shebang Line for User Management Script\nDESCRIPTION: The beginning of the user creation script with the shebang line.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Rancher Master Node Registration\nDESCRIPTION: Docker command to register a master node with Rancher, enabling both etcd and controlplane components.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day53.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --etcd --controlplane\n```\n\n----------------------------------------\n\nTITLE: Basic SQL SELECT Statement Structure\nDESCRIPTION: The fundamental structure of a SELECT statement in SQL, showing the syntax for retrieving data with filtering conditions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT data_we_want_to_retrieve\nFROM table\nWHERE some_condition\n```\n\n----------------------------------------\n\nTITLE: Welcome Page Template with Ansible Facts\nDESCRIPTION: HTML template using Ansible variables and facts to display custom welcome message and server information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_3\n\nLANGUAGE: j2\nCODE:\n```\n<html>\n\n<h1>{{ html_welcome_msg }}! I'm webserver {{ ansible_facts['nodename'] }} </h1>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud Platform\nDESCRIPTION: Command to authenticate with Google Cloud Platform using the Google Cloud SDK before setting up cloud storage backups.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day86.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Alertmanager Service in Kubernetes\nDESCRIPTION: Command to port-forward the Alertmanager service to access it on localhost port 9093, enabling configuration of alerts that can be sent to integration platforms like Slack.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/alertmanager-main 9093\n```\n\n----------------------------------------\n\nTITLE: Using Constants and Variables in Go\nDESCRIPTION: An expanded Go program that incorporates both variables and constants to track challenge information, showing how to declare and use different types of values.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day11.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    const daystotal = 90\n\n    fmt.Println(\"Welcome to\", challenge, \"\")\n    fmt.Println(\"This is a\", daystotal, \"challenge\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Test Traffic to Bookinfo Application\nDESCRIPTION: Command to send HTTP requests to the Bookinfo application to generate traffic for observation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://bookinfo.io/productpage\"\n```\n\n----------------------------------------\n\nTITLE: Super-Linter Workflow Implementation\nDESCRIPTION: A GitHub Actions workflow that implements the github/super-linter to perform code linting across multiple languages. Includes automatic token authentication and runs on code push.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day75.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Super-Linter\n\non: push\n\njobs:\n  super-lint:\n    name: Lint code base\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run Super-Linter\n        uses: github/super-linter@v3\n        env:\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Removing Files in Git\nDESCRIPTION: Removes a file from both the working directory and the Git repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day38.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit rm oldcode.ps1\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access Kasten K10 Dashboard\nDESCRIPTION: Command to set up port forwarding to access the Kasten K10 dashboard through localhost on port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\n----------------------------------------\n\nTITLE: Viewing Audit Logs in OpenShift\nDESCRIPTION: Command to list available audit logs on the control-plane nodes in OpenShift.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ oc adm node-logs --role=master --path=openshift-apiserver/\n```\n\n----------------------------------------\n\nTITLE: Configuration File Reference for OpenShift Installation\nDESCRIPTION: The install-config.yaml file is a special configuration file that contains essential cluster settings including name, domain, registry details, SSH keys, and infrastructure platform details.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day57.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ninstall-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Usage Playbook\nDESCRIPTION: Demonstrates how to include and use the role in an Ansible playbook with parameter passing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Configmgmt/ansible-scenario6/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Diff Tool in Git\nDESCRIPTION: Set up a visual diff tool (e.g., VSCode) for easier comparison of changes using the 'git config' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global diff.tool vscode\n```\n\n----------------------------------------\n\nTITLE: Configuring Command History Format in Linux\nDESCRIPTION: Setting up command history to include timestamps and increasing history file size.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nHISTTIMEFORMAT=\"%d-%m-%Y %T \"\necho 'export HISTTIMEFORMAT=\"%d-%m-%Y %T \"' >> ~/.bash_profile\necho 'export HISTSIZE=100000' >> ~/.bash_profile\necho 'export HISTFILESIZE=10000000' >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Ubuntu Container\nDESCRIPTION: Command to run an Ubuntu container with interactive terminal and bash shell access\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day44.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Git User Settings\nDESCRIPTION: These commands set the global Git configuration for user name and email.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day36.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Michael Cade\"\ngit config --global user.email Michael.Cade@90DaysOfDevOPs.com\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status\nDESCRIPTION: Demonstrates how to check the status of files in a Git repository using the 'git status' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Tracking Progress with Variables in Go\nDESCRIPTION: This snippet expands on the previous examples by adding a variable to track the number of completed days in the challenge. It demonstrates using multiple variables and constants together.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day11.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    const daystotal = 90\n    var dayscomplete = 11\n\n    fmt.Println(\"Welcome to\", challenge, \"\")\n    fmt.Println(\"This is a\", daystotal, \"challenge and you have completed\", dayscomplete, \"days\")\n    fmt.Println(\"Great work\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using the figlet Text Banner Generator\nDESCRIPTION: Example of using the figlet command to generate a text banner after installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfiglet\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Unit Tests\nDESCRIPTION: Command to run Terraform unit tests for specific services and networks using the make utility.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day64.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake ACC tests service network test args run\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Dependencies and Downloading WordPress\nDESCRIPTION: Bash commands to install PHP extensions required by WordPress, restart the Apache server, and download and extract the latest WordPress package to the web directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day18.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\nsudo systemctl restart apache2\n\ncd /var/www\n\nsudo curl -O https://wordpress.org/latest.tar.gz\n\nsudo tar -xvf latest.tar.gz\n\nsudo rm latest.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Jenkins via Helm\nDESCRIPTION: Install Jenkins using Helm chart with custom values.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchart=jenkinsci/jenkins\nhelm install jenkins -n jenkins -f jenkins-values.yml $chart\n```\n\n----------------------------------------\n\nTITLE: Showing MySQL Databases\nDESCRIPTION: This SQL command lists all databases in the MySQL instance, used to verify the presence of the database before and after backup/restore operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\necho \"SHOW DATABASES;\" |  ${MYSQL_EXEC}\n```\n\n----------------------------------------\n\nTITLE: Checking AWX Deployment Status\nDESCRIPTION: Kubernetes command to check the status of pods in the AWX namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day69.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n awx\n```\n\n----------------------------------------\n\nTITLE: Compiling Go Programs for Multiple Operating Systems\nDESCRIPTION: This code snippet demonstrates how to compile Go programs for different operating systems and architectures using environment variables. It includes commands for building binaries for macOS, Linux, Windows, and ARM64 platforms.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day13.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nGOARCH=amd64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin main.go\nGOARCH=amd64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux main.go\nGOARCH=amd64 GOOS=windows go build -o ${BINARY_NAME}_0.1_windows main.go\nGOARCH=arm64 GOOS=linux go build -o ${BINARY_NAME}_0.1_linux_arm64 main.go\nGOARCH=arm64 GOOS=darwin go build -o ${BINARY_NAME}_0.1_darwin_arm64 main.go\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token\nDESCRIPTION: These commands retrieve the authentication token for accessing the Kasten K10 dashboard.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Deleting a Staff Member from PostgreSQL\nDESCRIPTION: SQL DELETE statement that removes a staff member named 'Andrew' from the staff table. This demonstrates how to delete data from a table.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM staff\nWHERE first_name = 'Andrew'\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Authentication Command\nDESCRIPTION: Basic command to authenticate with Azure CLI, which opens a browser for user authentication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day34.md#2025-04-17_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu System Packages with apt\nDESCRIPTION: Command to update the package lists from repositories to ensure you have information about the latest versions of packages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Using sudo for Administrative Commands in Linux\nDESCRIPTION: Demonstrates the sudo command which allows regular users to execute commands with superuser (root) privileges, essential for system administration tasks in Linux.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo command\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Implementing a Go Twitter Bot for the #90DaysOfDevOps Challenge\nDESCRIPTION: A complete Go program that combines Twitter API authentication with a progress tracking application for the #90DaysOfDevOps challenge. The code authenticates with Twitter using OAuth, collects user information, calculates challenge progress, and posts a status update to Twitter.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day13.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n    {\n        const DaysTotal int = 90\n        var remainingDays uint = 90\n        challenge := \"#90DaysOfDevOps\"\n\n        fmt.Printf(\"Welcome to the %v challenge.\\nThis challenge consists of %v days\\n\", challenge, DaysTotal)\n\n        var TwitterName string\n        var DaysCompleted uint\n\n        // asking for user input\n        fmt.Println(\"Enter Your Twitter Handle: \")\n        fmt.Scanln(&TwitterName)\n\n        fmt.Println(\"How many days have you completed?: \")\n        fmt.Scanln(&DaysCompleted)\n\n        // calculate remaining days\n        remainingDays = remainingDays - DaysCompleted\n\n        //fmt.Printf(\"Thank you %v for taking part and completing %v days.\\n\", TwitterName, DaysCompleted)\n        //fmt.Printf(\"You have %v days remaining for the %v challenge\\n\", remainingDays, challenge)\n        // fmt.Println(\"Good luck\")\n\n        client, err := getClient(&creds)\n        if err != nil {\n            log.Println(\"Error getting Twitter Client, this is expected if you did not supply your Twitter API tokens\")\n            log.Println(err)\n        }\n\n        message := fmt.Sprintf(\"Hey I am %v I have been doing the %v for %v days and I have %v Days left\", TwitterName, challenge, DaysCompleted, remainingDays)\n        tweet, resp, err := client.Statuses.Update(message, nil)\n        if err != nil {\n            log.Println(err)\n        }\n        log.Printf(\"%+v\\n\", resp)\n        log.Printf(\"%+v\\n\", tweet)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud SDK\nDESCRIPTION: Command to authenticate with Google Cloud Platform using the Google Cloud SDK.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day86.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kasten K10 Dashboard\nDESCRIPTION: Command to port forward the Kasten K10 dashboard service to access it locally on port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day89.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\n----------------------------------------\n\nTITLE: Deploying AWX Demo Instance with Kubernetes\nDESCRIPTION: Command to create the AWX demo instance in the AWX namespace using the configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day69.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f awx-demo.yml -n awx\n```\n\n----------------------------------------\n\nTITLE: Accessing Kasten K10 Dashboard via Port Forwarding\nDESCRIPTION: Command to set up port forwarding to access the Kasten K10 dashboard locally on port 8080.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day87.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kasten-io port-forward service/gateway 8080:8000\n```\n\n----------------------------------------\n\nTITLE: Installing falcoctl for Falco Certificate Management\nDESCRIPTION: Downloads and installs falcoctl, a tool for managing Falco certificates and keys.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day29.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nLATEST=$(curl -sI https://github.com/falcosecurity/falcoctl/releases/latest | awk '/location: /{gsub(\"\\r\",\"\",$2);split($2,v,\"/\");print substr(v[8],2)}')\ncurl --fail -LS \"https://github.com/falcosecurity/falcoctl/releases/download/v${LATEST}/falcoctl_${LATEST}_linux_amd64.tar.gz\" | tar -xz\nsudo install -o root -g root -m 0755 falcoctl /usr/local/bin/falcoctl\n```\n\n----------------------------------------\n\nTITLE: Changing File Ownership with chown\nDESCRIPTION: Shows how to change file ownership from one user to another using chown command\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown NewUser Day15\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with Specific Types in Go\nDESCRIPTION: This snippet demonstrates how to declare variables with specific types in Go. It shows declarations for a string and an unsigned integer.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day11.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nvar TwitterHandle string \nvar DaysCompleted uint\n```\n\n----------------------------------------\n\nTITLE: Nginx Deployment Configuration\nDESCRIPTION: YAML configuration for deploying an Nginx application with 2 replicas\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2 # tells deployment to run 2 pods matching the template\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Networking Code Reference\nDESCRIPTION: Reference to PowerShell script for Azure storage tasks including provisioning lab environment and configuring storage accounts\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day34.md#2025-04-17_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nCloud/03Storage/Mod07_90DaysOfDeveOps.ps1\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Region in Terraform\nDESCRIPTION: Provider block specifying the AWS region for resource deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day58.md#2025-04-17_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"ap-southeast-1\" //region where resources need to be deployed\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a New Disk in Linux\nDESCRIPTION: Command to format a newly added disk (sdb) with the ext4 filesystem. This prepares the disk for use in a Linux system by creating the necessary filesystem structures.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkfs -t ext4 /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Devices in EVE-NG Lab\nDESCRIPTION: Instructions for configuring router and switch devices in the EVE-NG lab environment. Includes links to configuration files for each device.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day26.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n| Node    | Configuration         |\n| ------- | --------------------- |\n| Router  | [R1](Networking/R1)   |\n| Switch1 | [SW1](Networking/SW1) |\n| Switch2 | [SW2](Networking/SW2) |\n| Switch3 | [SW3](Networking/SW3) |\n| Switch4 | [SW4](Networking/SW4) |\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kasten K10 Pod Deployment\nDESCRIPTION: This command watches the deployment of Kasten K10 pods in the kasten-io namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl get pods -n kasten-io -w\n```\n\n----------------------------------------\n\nTITLE: Simple Ansible Playbook in YAML\nDESCRIPTION: A basic Ansible playbook that pings the localhost and prints the OS family. It demonstrates the structure of a playbook with a single play containing multiple tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Simple Play\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Ping me\n      ping:\n    - name: print os\n      debug:\n        msg: \"{{ ansible_os_family }}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account via Portal\nDESCRIPTION: Instructions for creating a storage account using the Azure Portal, including naming conventions and redundancy options.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day32.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud1.png)\n\nWe can then run through the steps to create our storage account remembering that this name needs to be unique and it also needs to be all lower case, no spaces but can include numbers. \n\n![](Images/Day32_Cloud2.png)\n\nWe can also choose the level of redundancy we would like against our storage account and anything we store within here. The further down the list the more expensive option but also the spread of your data.\n```\n\n----------------------------------------\n\nTITLE: Listing MySQL Databases\nDESCRIPTION: SQL command to show all databases in the MySQL instance. This is used to verify the presence of the database before and after backup/restore operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSHOW DATABASES;\n```\n\n----------------------------------------\n\nTITLE: Create Minikube Tunnel\nDESCRIPTION: Command to create a network tunnel for accessing Ingress resources in Minikube\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nminikube tunnel --profile=mc-demo\n```\n\n----------------------------------------\n\nTITLE: Adding Third-Party Repositories and Installing Vagrant\nDESCRIPTION: Series of commands to add HashiCorp's repository key, add the repository to the system, and install Vagrant.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install vagrant\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt update\nsudo apt install vagrant\n```\n\n----------------------------------------\n\nTITLE: Navigating to PostgreSQL Log Directory\nDESCRIPTION: Command to change directory to the PostgreSQL log location, where the error logs are stored according to the configuration settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day69.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $PGDATA/log\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster\nDESCRIPTION: Basic command to start a Minikube cluster with default Docker driver configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Forcefully removing untracked files and directories\nDESCRIPTION: Shows how to force remove all untracked files and directories from the working directory without prompting.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -fd\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Application Secrets in Vault\nDESCRIPTION: Commands to create a username and password secret for a web application and verify the secret was created correctly. The secret is stored at a specific path for the application to access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nvault kv put secret/devwebapp/config username='90DaysOfDevOps' password='90DaysOfDevOps'\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault kv get secret/devwebapp/config\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Kubernetes Cluster\nDESCRIPTION: Command to start a local Kubernetes cluster using Minikube. This creates the foundation for deploying Jenkins.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Sample Kubernetes API Server Audit Log\nDESCRIPTION: Example of an audit log entry from the Kubernetes API Server, showing various fields such as user information, request details, and authorization decisions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"kind\":\"Event\",\"apiVersion\":\"audit.k8s.io/v1\",\"level\":\"Metadata\",\"auditID\":\"ad209ce1-fec7-4130-8192-c4cc63f1d8cd\",\"stage\":\"ResponseComplete\",\"requestURI\":\"/api/v1/namespaces/openshift-kube-controller-manager/configmaps/cert-recovery-controller-lock?timeout=35s\",\"verb\":\"update\",\"user\":{\"username\":\"system:serviceaccount:openshift-kube-controller-manager:localhost-recovery-client\",\"uid\":\"dd4997e3-d565-4e37-80f8-7fc122ccd785\",\"groups\":[\"system:serviceaccounts\",\"system:serviceaccounts:openshift-kube-controller-manager\",\"system:authenticated\"]},\"sourceIPs\":[\"::1\"],\"userAgent\":\"cluster-kube-controller-manager-operator/v0.0.0 (linux/amd64) kubernetes/$Format\",\"objectRef\":{\"resource\":\"configmaps\",\"namespace\":\"openshift-kube-controller-manager\",\"name\":\"cert-recovery-controller-lock\",\"uid\":\"5c57190b-6993-425d-8101-8337e48c7548\",\"apiVersion\":\"v1\",\"resourceVersion\":\"574307\"},\"responseStatus\":{\"metadata\":{},\"code\":200},\"requestReceivedTimestamp\":\"2020-04-02T08:27:20.200962Z\",\"stageTimestamp\":\"2020-04-02T08:27:20.206710Z\",\"annotations\":{\"authorization.k8s.io/decision\":\"allow\",\"authorization.k8s.io/reason\":\"RBAC: allowed by ClusterRoleBinding \\\"system:openshift:operator:kube-controller-manager-recovery\\\" of ClusterRole \\\"cluster-admin\\\" to ServiceAccount \\\"localhost-recovery-client/openshift-kube-controller-manager\\\"\"}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ansible Role in a Playbook (YAML)\nDESCRIPTION: This snippet demonstrates how to include and use an Ansible role within a playbook. It shows the basic structure for specifying hosts and applying a role with parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Configmgmt/ansible-scenario5/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Describing Kubernetes Resources with kubectl\nDESCRIPTION: Commands for getting detailed information about Kubernetes resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe nodes\n```\n\n----------------------------------------\n\nTITLE: Deploying Stateful Pacman Application in Kubernetes\nDESCRIPTION: Command to create the Pacman stateful application using a YAML configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day55.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-stateful-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook Implementation\nDESCRIPTION: Shows how to include a role in an Ansible playbook with parameters. This example demonstrates passing a variable 'x' with value 42 to the role.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Configmgmt/ansible-scenario3/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Deploying Prometheus with Docker\nDESCRIPTION: A simple Docker command to run Prometheus locally, exposing it on port 9090.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day78.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Adding users to sudo group in Linux\nDESCRIPTION: This command adds 'NewUser' to the sudo group, granting them administrative privileges to run commands with sudo.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nusermod -a -G sudo NewUser\n```\n\n----------------------------------------\n\nTITLE: Obtaining User Input for Twitter Name in Go\nDESCRIPTION: This snippet demonstrates how to use fmt.Scan() to get user input for a Twitter name variable. It introduces the concept of using & for pointers when scanning input.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day12.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Scan(&TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Stopping MySQL Service and Monitoring EDA Controller Logs\nDESCRIPTION: This console command snippet demonstrates how to stop the MySQL service and monitor the EDA controller logs to observe the automatic restart process triggered by the EDA ruleset.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nsystemctl stop mysql\njournalctl -fu edacontroller\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple PHP Info Script for Testing\nDESCRIPTION: A minimal PHP script that displays PHP configuration information. This script is used to verify that PHP is correctly installed and configured with Apache.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day18.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nphpinfo();\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding User to Role in OpenShift\nDESCRIPTION: Command to add a user to an existing role in a specific project namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ oc adm policy add-role-to-user <role> <user> -n <project>\n\n# For my example above, once I created the \"app-mgr\" role in the rbac-test-ns namespace I can run the following to create the roleBinding\noc adm policy add-role-to-user app-mgr test -n rbac-test-ns\n```\n\n----------------------------------------\n\nTITLE: Annotating VolumeSnapshotClass for Kasten K10\nDESCRIPTION: Adds annotation to the csi-hostpath-snapclass to enable it for use with Kasten K10 backup operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day87.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl annotate volumesnapshotclass csi-hostpath-snapclass \\\n    k10.kasten.io/is-snapshot-class=true\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Setup\nDESCRIPTION: Commands to set up MySQL connection parameters and environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace ${APP_NAME} mysql-store -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode)\nMYSQL_HOST=mysql-store.${APP_NAME}.svc.cluster.local\nMYSQL_EXEC=\"mysql -h ${MYSQL_HOST} -u root --password=${MYSQL_ROOT_PASSWORD} -DmyImportantData -t\"\necho MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Nginx Service in Minikube\nDESCRIPTION: This Bash command sets up port forwarding for the Nginx service deployed in the Kubernetes cluster, allowing access to the service through localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day61.md#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl port-forward -n nginx svc/nginx 30201:80\n```\n\n----------------------------------------\n\nTITLE: Formatting a New Disk in Linux\nDESCRIPTION: This command formats a new disk (/dev/sdb) with the ext4 filesystem.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkfs -t ext4 /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Grafana Default Login Credentials\nDESCRIPTION: Default username and password for initial Grafana login.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nUsername: admin \nPassword: admin\n```\n\n----------------------------------------\n\nTITLE: Creating Test Table in PostgreSQL\nDESCRIPTION: SQL commands to create a test table with a primary key constraint and several columns for demonstration purposes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_table (\n  id smallint,\n  first_name VARCHAR(50),\n  last_name VARCHAR(50),\n  dob DATE,\n  email VARCHAR(255),\n  CONSTRAINT test_table_pkey PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Repository on Ubuntu 20.04 (WSL2)\nDESCRIPTION: This snippet adds the Podman repository to the APT sources list on Ubuntu 20.04 running on WSL2. It's the first step in installing Podman as an alternative to Docker.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day48.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\necho \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /\" |\nsudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list\n```\n\n----------------------------------------\n\nTITLE: Creating Simple PHP Info Page\nDESCRIPTION: A basic PHP script to display PHP configuration information and verify PHP installation on the web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day18.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nphpinfo();\n?>\n```\n\n----------------------------------------\n\nTITLE: Safely Unmounting a Disk\nDESCRIPTION: Command to safely unmount a disk from the system before physically removing it, ensuring data integrity by completing all pending read/write operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo umount /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Docker Container\nDESCRIPTION: Docker command to start a custom PostgreSQL container with the dvdrental database pre-loaded.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n--publish 5432:5432 \\\n--env POSTGRES_PASSWORD=Testing1122 \\\n--name demo-container \\\nghcr.io/dbafromthecold/demo-postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Verifying fstab Configuration in Linux\nDESCRIPTION: This command checks if the changes made to the /etc/fstab file are correct by attempting to mount all entries.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo mount -a\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kasten K10 Pod Deployment\nDESCRIPTION: Command to watch Kasten K10 pods being created in the kasten-io namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day87.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kasten-io -w\n```\n\n----------------------------------------\n\nTITLE: Listing Resources in Pacman Namespace\nDESCRIPTION: Command to list all resources (pods, services, deployments, StatefulSets) in the pacman namespace after deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day55.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n pacman\n```\n\n----------------------------------------\n\nTITLE: Viewing Existing Users in PostgreSQL\nDESCRIPTION: This SQL query retrieves a list of existing users in the PostgreSQL database. It's used to check the current user accounts before creating a new one.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT usename FROM pg_user;\n```\n\n----------------------------------------\n\nTITLE: Compacting Output with xargs\nDESCRIPTION: Combines cut, sort, and xargs to extract usernames from /etc/passwd, sort them, and display them in a compact single-line format.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncut -d: -f1 < /etc/passwd | sort | xargs\n```\n\n----------------------------------------\n\nTITLE: Filtering Output with awk\nDESCRIPTION: Demonstrates using awk to filter specific columns from command output\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwho | awk '{print $1}'\n```\n\n----------------------------------------\n\nTITLE: Azure SQL Database Options\nDESCRIPTION: Overview of Azure SQL Database options, including single database and elastic pool configurations for relational database services.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day32.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud7.png)\n```\n\n----------------------------------------\n\nTITLE: Example Terraform State File in JSON\nDESCRIPTION: This is an example of a Terraform state file generated after applying the Hello World configuration. The state file is a JSON document that records the current state of all resources managed by Terraform.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/vi/Days/day58.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 4,\n  \"terraform_version\": \"1.1.6\",\n  \"serial\": 1,\n  \"lineage\": \"a74296e7-670d-0cbb-a048-f332696ca850\",\n  \"outputs\": {\n    \"hello_world\": {\n      \"value\": \"Hello, 90DaysOfDevOps from Terraform\",\n      \"type\": \"string\"\n    }\n  },\n  \"resources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VirtualBox Video Memory\nDESCRIPTION: This line can be added to the Vagrantfile to set the video memory for the virtual machine, which may help resolve display issues.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day14.md#2025-04-17_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nv.customize [\"modifyvm\", :id, \"--vram\", \"\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Jenkins Helm Repository\nDESCRIPTION: Add and update the official Jenkins Helm repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo list\nhelm repo add jenkinsci https://charts.jenkins.io\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Example GOPATH Output\nDESCRIPTION: Sample output showing the default GOPATH location on a Linux system\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day10.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/home/michael/projects/go\n```\n\n----------------------------------------\n\nTITLE: Connect to MySQL Pod\nDESCRIPTION: Script to create a temporary MySQL client pod for database operations\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Building a Twitter Client in Go with OAuth Authentication\nDESCRIPTION: This code creates a Twitter client using Go, implementing OAuth authentication with the Twitter API. It defines a Credentials struct to store API keys, implements a helper function to authenticate and create a Twitter client, and demonstrates posting a test tweet.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    fmt.Println(\"Go-Twitter Bot v0.01\")\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n\n    client, err := getClient(&creds)\n    if err != nil {\n        log.Println(\"Error getting Twitter Client\")\n        log.Println(err)\n    }\n\n    tweet, resp, err := client.Statuses.Update(\"A Test Tweet from the future, testing a #90DaysOfDevOps Program that tweets, tweet tweet\", nil)\n    if err != nil {\n        log.Println(err)\n    }\n    log.Printf(\"%+v\\n\", resp)\n    log.Printf(\"%+v\\n\", tweet)\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Kibana Service\nDESCRIPTION: Command to set up port forwarding for accessing the Kibana dashboard through localhost\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day82.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward kibana-84cf7f59c-v2l8v 5601:5601 -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Running the Hello World Docker Container\nDESCRIPTION: Command to run the hello-world container which tests the Docker installation and displays a welcome message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day44.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Space Usage with df\nDESCRIPTION: Command to display filesystem disk space usage in a human-readable format, showing total, used, and available space.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\n```\n\n----------------------------------------\n\nTITLE: Restarting PostgreSQL Container\nDESCRIPTION: Docker command to restart the PostgreSQL container after configuration changes to enable the WAL archiving functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker container restart demo-container\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code as the default diff tool\nDESCRIPTION: Sets Visual Studio Code as the default visual diff tool for Git to provide a more user-friendly way to view differences.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global diff.tool vscode\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository with git init\nDESCRIPTION: The git init command creates a new Git repository in the current directory. It sets up all the necessary Git metadata files in a .git directory, enabling version control for the project.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Scaling Pacman Deployment in Kubernetes\nDESCRIPTION: Command to scale up the Pacman deployment to 10 replicas. This demonstrates how to increase the number of game instances for higher capacity.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl scale deployment pacman --replicas=10 -n pacman\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Command to build a Docker image with a specific tag from a Dockerfile in the current directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day45.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 90daysofdevops:0.1 .\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific OAuth API Server Audit Log\nDESCRIPTION: Demonstrates how to view a specific OAuth API server audit log using the 'oc adm node-logs' command with node name and log file path.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ oc adm node-logs <node_name> --path=oauth-apiserver/<log_name>\n\n# Example command\n$ oc adm node-logs 90days-ocp-72ptq-master-2 --path=oauth-apiserver/audit-2023-03-29T08-10-51.942.log\n```\n\n----------------------------------------\n\nTITLE: Common Variables Definition\nDESCRIPTION: YAML configuration file defining common variables for HTTP ports and welcome message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kasten K10 Pod Deployment\nDESCRIPTION: Command to watch the status of Kasten K10 pods in the kasten-io namespace as they come online, using the -w flag to continuously watch the resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day89.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kasten-io -w\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Region in Terraform\nDESCRIPTION: This code snippet demonstrates how to specify the AWS region for resource deployment in a Terraform configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day58.md#2025-04-17_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nprovider \"aws\" {\n  region = \"ap-southeast-1\" //리소스를 배포해야 하는 지역\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster\nDESCRIPTION: Command to initialize a Minikube cluster for EFK stack deployment\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day82.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud SDK\nDESCRIPTION: Command to authenticate with Google Cloud Platform using the Google Cloud SDK.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day86.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Comparing Staging Area with Working Directory in Git\nDESCRIPTION: Use the 'git diff' command to compare the staging area with the working directory, showing unstaged changes in modified files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day39.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Repository\nDESCRIPTION: Commands to initialize a new Git repository in the current directory and make an initial commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_4\n\nLANGUAGE: git\nCODE:\n```\nmkdir Day11_Creating_a_repo\ncd Day11_Creating_a_repo\ngit init\ntouch README.md\ngit add README.md\ngit commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Listing Kanister ActionSets\nDESCRIPTION: Command to retrieve all ActionSets in the Kanister namespace to identify the backup ActionSet for restoration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day88.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get actionset -n kanister\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Variables in Go\nDESCRIPTION: This snippet demonstrates how to declare and use a variable in a Go program. It creates a variable for the challenge name and prints a welcome message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day11.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    fmt.Println(\"Welcome to\", challenge \"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Kopia Repository Status\nDESCRIPTION: Command to check the current status of a Kopia repository configuration using the Kopia executable with a specific config file path. This displays details about the currently configured repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day86.md#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository status\n```\n\n----------------------------------------\n\nTITLE: DNS Configuration in /etc/hosts\nDESCRIPTION: Sample entries for the /etc/hosts file that map IP addresses to hostnames for the Ansible control node and managed nodes. This enables name resolution within the test environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day65.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n192.168.169.140 ansible-control\n192.168.169.130 db01\n192.168.169.131 web01\n192.168.169.132 web02\n192.168.169.133 loadbalancer\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Machine with Multipass\nDESCRIPTION: Command to create a new virtual machine named 'demo' using the default Ubuntu LTS image in Multipass.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmultipass launch --name demo\n```\n\n----------------------------------------\n\nTITLE: Accessing ArgoCD Admin Password\nDESCRIPTION: Command to retrieve the initial admin password for ArgoCD by decoding the secret from Kubernetes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day76.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d && echo\n```\n\n----------------------------------------\n\nTITLE: Creating VM with Cloud-Init Configuration in Multipass\nDESCRIPTION: Command to create a virtual machine with cloud-init configuration specified in a YAML file, automating the initialization process.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmultipass launch --name 90DaysOfDevOps --cloud-init cloud-config.yml\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Authentication Command\nDESCRIPTION: Basic command to authenticate with Azure CLI which opens a browser for user authentication\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day34.md#2025-04-17_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Setup Commands\nDESCRIPTION: Series of MySQL commands to create a database, user, and set permissions for WordPress installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day18.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE wordpressdb;\nCREATE USER 'admin-user'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON wordpressdb.* TO 'admin-user'@'localhost';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Basic Ubuntu Nginx Dockerfile\nDESCRIPTION: A simple Dockerfile that creates an image based on Ubuntu 18.04 with nginx and curl installed. The image is optimized by cleaning up apt lists after installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day45.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# 공식 우분투 18.04를 기본으로 사용하세요.\nFROM ubuntu:18.04\n# nginx 및 curl 설치\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y nginx curl\nRUN rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Checking VM System Information\nDESCRIPTION: Commands executed inside a VM to check system details like the operating system version and hardware specifications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat /etc/os-release\nfree\ndisk\n```\n\n----------------------------------------\n\nTITLE: Changing File Group Ownership with chgrp in Linux\nDESCRIPTION: This command changes only the group ownership of a file. In this example, the group of 'project_file.txt' is changed to 'developers'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day49.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchgrp developers project_file.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Base Backup of PostgreSQL Cluster\nDESCRIPTION: Command to create a baseline backup of the entire PostgreSQL cluster using pg_basebackup. This backs up all files in the database cluster as a starting point for point-in-time recovery.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npg_basebackup -D  /postgres/archive/base\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Interfaces on Cisco Devices via CLI\nDESCRIPTION: Basic Cisco CLI commands to enable an interface, configure it with DHCP, and display interface status. These commands are used to set up connectivity between virtual devices and the home network.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day27.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenable\nconfig t\nint gi0/0\nIP add DHCP\nno sh\nexit\nexit\nsh ip int br\n```\n\n----------------------------------------\n\nTITLE: Complete AWS EC2 Deployment Configuration\nDESCRIPTION: Full Terraform configuration combining provider setup and EC2 instance deployment with web server installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day58.md#2025-04-17_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 0.14.9\"\n}\n\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-west-2\"\n}\n\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n    user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"\n<h1>Deployed via Terraform</h1>\n\n\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n\n\n  tags = {\n    Name = \"ExampleAppServerInstance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hello World in Python for Network Automation\nDESCRIPTION: A simple Python print statement demonstrating the language's simplicity compared to other programming languages like Go. This showcases Python's readability and conciseness, which makes it suitable for network automation tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day25.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('hello world')\n```\n\n----------------------------------------\n\nTITLE: Debugging in Python with pdb\nDESCRIPTION: Demonstrates how to use Python's built-in debugger (pdb) to pause execution at a specific point and inspect variables during runtime. The example shows a simple add_numbers function with a debugger breakpoint.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day45.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pdb\n\ndef add_numbers(x, y):\n    result = x + y\n    pdb.set_trace() # Start the debugger at this point in the code\n    return result\n\nresult = add_numbers(2, 3)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authentication Token for Kasten K10 Dashboard\nDESCRIPTION: Script to extract the authentication token from Kubernetes secrets. The token is required to log into the Kasten K10 dashboard.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day89.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Status with git status\nDESCRIPTION: The git status command shows the current state of the working directory and staging area. It displays which changes have been staged, which haven't, and which files are untracked by Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command with Username\nDESCRIPTION: Command format for building a Docker image that can be pushed to DockerHub, including username and version\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day45.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t {{username}}/{{imagename}}:{{version}}\n```\n\n----------------------------------------\n\nTITLE: Increasing command history size in Linux\nDESCRIPTION: These commands increase the number of commands stored in history and the size of the history file, allowing you to access more of your command history.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\necho 'export HISTSIZE=100000' >> ~/.bash_profile\necho 'export HISTFILESIZE=10000000' >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Installing Go in Markdown\nDESCRIPTION: Instructions for installing Go on different operating systems using package managers or official downloads.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day63.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```shell\nbrew install go\n```\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n```shell\nsudo apt-get install golang\n```\n```\n\n----------------------------------------\n\nTITLE: Finding Bash Interpreter Location\nDESCRIPTION: Commands to locate the bash binary on your system, useful for setting the correct shebang line.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwhich bash\n```\n\nLANGUAGE: shell\nCODE:\n```\nwhereis bash\n```\n\n----------------------------------------\n\nTITLE: Checking ArgoCD Pod Status\nDESCRIPTION: Command to verify if all ArgoCD pods are running in the argocd namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day76.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl get pods -n argocd\n```\n\n----------------------------------------\n\nTITLE: Basic Azure CLI Command Example\nDESCRIPTION: Example showing the basic Azure CLI command syntax for creating a virtual machine\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day33.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz VM create\n```\n\n----------------------------------------\n\nTITLE: Visualizing Git Commits in VS Code\nDESCRIPTION: Step showing how to view Git commit history in Visual Studio Code using GitLens extension.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nView -> Command Palette -> GitLens: Show Commit Search\n```\n\n----------------------------------------\n\nTITLE: Testing Traffic Shifting with Curl\nDESCRIPTION: This bash script uses a for loop to make 10 requests to the product page and grep for the reviews version to demonstrate the traffic split.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day80.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfor i in {1..10}; do curl -s http://bookinfo.io/productpage | grep \"reviews-v\"; done\n```\n\n----------------------------------------\n\nTITLE: Creating empty files with touch in Linux\nDESCRIPTION: The 'touch' command creates a new empty file with the specified name if it doesn't exist, or updates the timestamp if it does.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntouch Day15\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific OpenShift API Server Audit Log\nDESCRIPTION: Demonstrates how to view a specific OpenShift API server audit log using the 'oc adm node-logs' command with node name and log file path.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ oc adm node-logs <node_name> --path=openshift-apiserver/<log_name>\n\n# Example command\n$ oc adm node-logs 90days-ocp-72ptq-master-2 --path=openshift-apiserver/audit-2023-03-29T14-39-01.789.log\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX Container with Terraform\nDESCRIPTION: Basic Terraform configuration to deploy an NGINX container with port mapping from internal port 80 to external port 8000. Uses the kreuzwerker/docker provider.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day60.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nprovider \"docker\" {}\n\nresource \"docker_image\" \"nginx\" {\n  name         = \"nginx:latest\"\n  keep_locally = false\n}\n\nresource \"docker_container\" \"nginx\" {\n  image = docker_image.nginx.latest\n  name  = \"tutorial\"\n  ports {\n    internal = 80\n    external = 8000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Manual Pages in Linux\nDESCRIPTION: The 'man' command is used to display manual pages for Linux commands. This snippet shows how to view the manual for the 'man' command itself.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nman man\n```\n\n----------------------------------------\n\nTITLE: Listing Available Snapshots in Kopia Repository\nDESCRIPTION: Command to list all available snapshots in the currently configured Kopia repository (Google Cloud Storage). This helps identify snapshots available for restoration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day86.md#2025-04-17_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config snapshot list\n```\n\n----------------------------------------\n\nTITLE: Setting PATH Environment Variable for Istio CLI\nDESCRIPTION: Command to add the Istio binary directory to the PATH environment variable, making the istioctl command available without specifying the full path.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PWD/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Star History Chart Integration Markdown\nDESCRIPTION: Markdown code for embedding a star history chart using the star-history.com API\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![Star History Chart](https://api.star-history.com/svg?repos=MichaelCade/90DaysOfDevOps&type=Timeline)](https://star-history.com/#MichaelCade/90DaysOfDevOps&Timeline)\n```\n\n----------------------------------------\n\nTITLE: Python Network Configuration Validation with Netmiko\nDESCRIPTION: References a Python script (netmiko_con_multi_vlan.py) that extends the previous script by adding validation to confirm that configuration changes were successfully applied to the switches.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day27.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# File reference only - actual code not shown in the source\n# netmiko_con_multi_vlan.py\n```\n\n----------------------------------------\n\nTITLE: Listing OpenShift API Server Audit Logs\nDESCRIPTION: Lists the available OpenShift API server audit logs on the control-plane nodes using the 'oc adm node-logs' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\noc adm node-logs --role=master --path=openshift-apiserver/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kanister Profiles for Backup Configuration\nDESCRIPTION: This command retrieves the available Kanister profiles in the application namespace which will be used for defining where backups should be stored.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get profiles.cr.kanister.io -n my-production-app\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Pod Status\nDESCRIPTION: Commands to monitor and verify the status of EFK stack pods in the kube-logging namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day82.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-logging -w\nkubectl get pods -n kube-logging\nkubectl get all -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Restarting PostgreSQL Container\nDESCRIPTION: Docker command to restart the PostgreSQL container after configuration changes, allowing the new logging settings to take effect.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day69.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker restart container demo-container\n```\n\n----------------------------------------\n\nTITLE: Listing Default CRI-O Container Capabilities in OpenShift\nDESCRIPTION: This snippet shows the default list of capabilities allowed by CRI-O for each container in a pod. These capabilities control various security aspects of the container runtime.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day59.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_capabilities = [\n  \"CHOWN\",\n  \"DAC_OVERRIDE\",\n  \"FSETID\",\n  \"FOWNER\",\n  \"SETGID\",\n  \"SETUID\",\n  \"SETPCAP\",\n  \"NET_BIND_SERVICE\",\n  \"KILL\",\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Ubuntu Linux\nDESCRIPTION: Command to install Git on Ubuntu Linux using apt package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git\n```\n\n----------------------------------------\n\nTITLE: Common Variables File for Ansible (YAML)\nDESCRIPTION: This YAML file defines common variables that can be used across all host groups in an Ansible playbook. It's typically placed in the group_vars/all directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day68.md#2025-04-17_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Container as postgres User\nDESCRIPTION: Docker command to execute an interactive bash shell inside the PostgreSQL container as the postgres user, allowing for configuration changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day69.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it -u postgres demo-container bash\n```\n\n----------------------------------------\n\nTITLE: Setting Default StorageClass in Kubernetes\nDESCRIPTION: Commands to set the CSI-hostpath-sc as the default StorageClass and remove the default annotation from the standard StorageClass.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day55.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Minikube using arkade in bash\nDESCRIPTION: This command uses arkade to download and install the Minikube binary, making it ready for use in the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day51.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get minikube\n```\n\n----------------------------------------\n\nTITLE: Listing Running Virtual Machines in Multipass\nDESCRIPTION: Command to display all running virtual machines managed by Multipass, showing their names, states, IP addresses, and image information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmultipass list\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualBox VMs with Terraform\nDESCRIPTION: This Terraform configuration creates two Ubuntu VMs in VirtualBox with specified CPU, memory, and network settings. It also defines outputs for the IP addresses of the created VMs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day59.md#2025-04-17_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    virtualbox = {\n      source = \"terra-farm/virtualbox\"\n      version = \"0.2.2-alpha.1\"\n    }\n  }\n}\n\n# There are currently no configuration options for the provider itself.\n\nresource \"virtualbox_vm\" \"node\" {\n  count     = 2\n  name      = format(\"node-%02d\", count.index + 1)\n  image     = \"https://app.vagrantup.com/ubuntu/boxes/bionic64/versions/20180903.0.0/providers/virtualbox.box\"\n  cpus      = 2\n  memory    = \"512 mib\"\n\n  network_adapter {\n    type           = \"hostonly\"\n    host_interface = \"vboxnet1\"\n  }\n}\n\noutput \"IPAddr\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 1)\n}\n\noutput \"IPAddr_2\" {\n  value = element(virtualbox_vm.node.*.network_adapter.0.ipv4_address, 2)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Resource Group\nDESCRIPTION: Command to create a new resource group in Azure using the Azure CLI. The resource group is named 'myResourceGroup' and located in the 'eastus' region.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day35.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz group create --name myResourceGroup --location eastus\n```\n\n----------------------------------------\n\nTITLE: Azure SQL Database Options\nDESCRIPTION: Overview of Azure SQL Database configuration options, including single database and elastic pool setups.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day32.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud7.png)\n\nAzure SQL Database provides a relational database as a service based on Microsoft SQL Server. \n\nThis is SQL running the latest SQL branch with database compatibility level available where specific functionality version is required. \n\nThere are a few options on how this can be configured, we can provide a single database that provides one database in the instance, while an elastic pool enables multiple databases that share a pool of capacity and collectively scale.\n```\n\n----------------------------------------\n\nTITLE: Examining a Terraform State File in JSON Format\nDESCRIPTION: This snippet shows a basic example of a Terraform state file in JSON format. The state file represents the infrastructure managed by Terraform, including outputs and version information. This particular example shows a simple configuration with a 'hello_world' output but no resources defined yet.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day58.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 4,\n  \"terraform_version\": \"1.1.6\",\n  \"serial\": 1,\n  \"lineage\": \"a74296e7-670d-0cbb-a048-f332696ca850\",\n  \"outputs\": {\n    \"hello_world\": {\n      \"value\": \"Hello, 90DaysOfDevOps from Terraform\",\n      \"type\": \"string\"\n    }\n  },\n  \"resources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Ansible Setup Playbook\nDESCRIPTION: Command to execute the setup playbook that configures the lab environment for Event-Driven Ansible demonstrations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nansible-playbook playbooks/setup.yml\n```\n\n----------------------------------------\n\nTITLE: Comparing Changes with Git Diff\nDESCRIPTION: Commands for comparing different states of the repository, including comparing working directory with the last commit and staged changes with the last commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day37.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Command           |           Example                       |           Description                                                                                                                 | \n| ---------------   |   ------------------------------------- |   ----------------------------------------------------------------------------------------------------------------------------------- |\n| git diff HEAD     | `git diff HEAD`                         | Show the difference between the working directory and the last commit.                                                                            |\n| git diff --cached | `git diff --cached`                     | Show difference between staged changes and last commit                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Network Interfaces\nDESCRIPTION: Command to view all network interfaces in the default namespace. Shows the newly created virtual ethernet devices before they're moved to specific namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nip link list\n```\n\n----------------------------------------\n\nTITLE: Setting Enterprise Search Password in Docker Compose\nDESCRIPTION: YAML configuration showing how to set a custom password for Enterprise Search in the Docker Compose environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ENT_SEARCH_DEFAULT_PASSWORD: {{some strong password}}\n```\n\n----------------------------------------\n\nTITLE: Defining Sensitive Variables in Terraform\nDESCRIPTION: This snippet demonstrates how to define a sensitive variable in Terraform. Sensitive variables are useful for storing confidential information like API keys or passwords.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day59.md#2025-04-17_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"some resource\"  {\n    description = \"something important\"\n    type= string\n    sensitive = true\n\n}\n```\n\n----------------------------------------\n\nTITLE: File Search and Manipulation in Linux\nDESCRIPTION: Commands for locating, moving, and renaming files in Linux file system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlocate Day15\nsudo updatedb\nmv Day15 90DaysOfDevOps\nmv day15 AnotherDay\nrm AnotherDay\nrm -R\nrm -R -f\ncp Day15 Desktop\n```\n\n----------------------------------------\n\nTITLE: Displaying Terraform State File Structure in JSON\nDESCRIPTION: This snippet shows the structure of a Terraform state file in JSON format. It includes version information, outputs, and an empty resources array.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day58.md#2025-04-17_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": 4,\n  \"terraform_version\": \"1.1.6\",\n  \"serial\": 1,\n  \"lineage\": \"a74296e7-670d-0cbb-a048-f332696ca850\",\n  \"outputs\": {\n    \"hello_world\": {\n      \"value\": \"Hello, 90DaysOfDevOps from Terraform\",\n      \"type\": \"string\"\n    }\n  },\n  \"resources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pointer Usage in Go\nDESCRIPTION: This snippet shows how to print a variable's value and its memory address using pointers. It illustrates the difference between using a variable directly and using its pointer.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day12.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"Memory Address:\", &TwitterName)\nfmt.Println(\"Value:\", TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure CLI\nDESCRIPTION: Command to log in to an Azure account using the Azure CLI. This is a prerequisite for deploying resources to Azure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day35.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Managing Staged and Unstaged Files\nDESCRIPTION: Commands for unstaging files and discarding local changes in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day39.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --staged newfile.txt\ngit restore .\ngit clean -fd\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Linux using apt-get\nDESCRIPTION: Command to install Git on a Linux system using the apt-get package manager.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day36.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git\n```\n\n----------------------------------------\n\nTITLE: Cloud-Specific vs Cloud-Agnostic IaC Tools Comparison in Markdown\nDESCRIPTION: A markdown table comparing cloud-specific and cloud-agnostic Infrastructure as Code tools, including AWS CloudFormation, Azure Resource Manager, Google Cloud Deployment Manager, Terraform, and Pulumi.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day62.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Cloud Specific                  | Cloud Agnostic | \n| ------------------------------- | -------------- |\n| AWS CloudFormation              | Terraform      | \n| Azure Resource Manager          | Pulumi         | \n| Google Cloud Deployment Manager |                | \n```\n\n----------------------------------------\n\nTITLE: Creating user groups in Linux\nDESCRIPTION: The 'groupadd' command creates a new group in the system. This example creates a 'DevOps' group for organizing users.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nsudo groupadd DevOps\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Command Options Summary\nDESCRIPTION: Shows how to view a summary of available options for the 'git add' command using the -h flag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day37.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add -h\n```\n\n----------------------------------------\n\nTITLE: Defining AWX Operator Configuration in YAML\nDESCRIPTION: A YAML configuration file for AWX deployment that specifies the service type as ClusterIP for Kubernetes deployment. This configuration is used when deploying AWX with the operator.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day69.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx-demo\nspec:\n  service_type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Removing Software using apt in Ubuntu\nDESCRIPTION: These commands demonstrate how to remove installed software, with an option to purge all related files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day16.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt remove figlet\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt --purge remove figlet\n```\n\n----------------------------------------\n\nTITLE: Running Elasticsearch Curator with Docker Compose\nDESCRIPTION: This command demonstrates how to run Docker Compose with the Curator extension. It uses the main docker-compose.yml file along with the curator-specific compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/curator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/curator/curator-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Comparing Sequential vs Concurrent Workflow Models\nDESCRIPTION: This snippet presents a comparison between sequential and concurrent workflow approaches for testing. It illustrates how sequential steps oversimplify actual system behavior, while concurrent workflows better represent the complex, parallel operations that occur in modern applications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# As sequential steps\n[Authorized User Search] -> \n[Get API Token] -> \n[Search for Author] -> \n[Search for Book]\n\n# As a concurrent workflow\n\n[Authorized User Search] -> \n[Get API Token] -> \n[Search cache for popular authors, send search analytics, hit third party search API via fan out] -> \n[Search cache for matching popular books, send search analytics, hit third party search API via fan out]\n```\n\n----------------------------------------\n\nTITLE: Verifying ELK Stack Deployment with Docker PS\nDESCRIPTION: This bash command lists the running containers, showing the status of the ELK stack services, their container IDs, image versions, and port mappings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS                                                                                            NAMES\n173f0634ed33        logstash:7.8.0        \"/usr/local/bin/dock…\"   43 seconds ago      Up 41 seconds             0.0.0.0:5000->5000/tcp, 0.0.0.0:5044->5044/tcp, 0.0.0.0:9600->9600/tcp, 0.0.0.0:5000->5000/udp   log\nb448fd3e9b30        kibana:7.8.0          \"/usr/local/bin/dumb…\"   43 seconds ago      Up 42 seconds             0.0.0.0:5601->5601/tcp                                                                           kib\n366d358fb03d        elasticsearch:7.8.0   \"/tini -- /usr/local…\"   43 seconds ago      Up 42 seconds (healthy)   0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp                                                   es\n```\n\n----------------------------------------\n\nTITLE: Compacting User Account List with xargs\nDESCRIPTION: This command extracts usernames from /etc/passwd, sorts them, and uses xargs to compact the output into a single line, providing a concise list of all user accounts on the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day15.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncut -d: -f1 < /etc/passwd | sort | xargs\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenShift Audit Logs with jq\nDESCRIPTION: This command shows how to use jq to filter OpenShift audit logs, specifically selecting entries where the username is 'test'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ oc adm node-logs 90days-ocp-72ptq-master-2 --path=openshift-apiserver/audit.log | jq 'select(.user.username == \"test\")'\n```\n\n----------------------------------------\n\nTITLE: Retrieving ArgoCD Admin Password\nDESCRIPTION: Command to extract the initial admin password from the Kubernetes secret created during ArgoCD installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day76.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d && echo\n```\n\n----------------------------------------\n\nTITLE: Basic vim usage for viewing and editing text files in Linux\nDESCRIPTION: Shows how to open a file using the vim text editor. The command demonstrates opening an existing text file to view or edit its contents.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day17.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvim 90DaysOfDevOps.txt\n```\n\n----------------------------------------\n\nTITLE: Querying Test Table Data in PostgreSQL\nDESCRIPTION: SQL query to retrieve all data from the test_table, used to verify data was successfully imported.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM test_table\n```\n\n----------------------------------------\n\nTITLE: Calculating Remaining Days in Go Challenge\nDESCRIPTION: This code calculates the remaining days in a 90-day challenge based on user input. It demonstrates variable manipulation and basic arithmetic operations in Go.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day12.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nremainingDays = remainingDays - DaysCompleted\n```\n\n----------------------------------------\n\nTITLE: Azure Cosmos DB Interface\nDESCRIPTION: Screenshot of Azure Cosmos DB interface, showcasing its NoSQL database capabilities and global distribution features.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day32.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud9.png)\n```\n\n----------------------------------------\n\nTITLE: Python Network Configuration Backup with Netmiko\nDESCRIPTION: References a Python script (backup.py) that automates backing up configurations from multiple network devices listed in a text file (backup.txt), saving each device's configuration to a separate file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day27.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# File reference only - actual code not shown in the source\n# backup.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install Flask and Markdown packages using pip.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install flask markdown\n```\n\n----------------------------------------\n\nTITLE: Explicitly Declaring Variable Types in Go\nDESCRIPTION: Shows how to explicitly declare the type of variables in Go. This is useful when you need to specify the exact data type, particularly for user input or when a specific numeric type is required.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day11.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nvar TwitterHandle string \nvar DaysCompleted uint\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSH Plugins\nDESCRIPTION: Command to edit ZSH configuration file and enable plugins\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day20.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.zshrc\nplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash UDP Input\nDESCRIPTION: Logstash pipeline configuration to enable UDP input on port 5000 with JSON codec for receiving logs from Logspout.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_1\n\nLANGUAGE: logstash\nCODE:\n```\ninput {\n  udp {\n    port  => 5000\n    codec => json\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running ELK Stack with Docker Compose\nDESCRIPTION: Command to start the Elastic Stack using Docker Compose in detached mode. This will pull the necessary images and start the containers for Elasticsearch, Logstash, and Kibana as defined in the docker-compose.yml file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day80.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Checking Application Logs for Synchronous Components\nDESCRIPTION: Commands to check logs for the generator and requestor deployments to verify proper functioning of the synchronous communication setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day2-ops-code/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs deploy/generator\n\nkubectl logs deploy/requestor\n```\n\n----------------------------------------\n\nTITLE: Git Rebase Command\nDESCRIPTION: Command for interactively rebasing the current branch onto a specified base in Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day37.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                               |           Example                      |           Description                                                                                                                         | \n| ------------------------------------- |   ------------------------------------ |   ------------------------------------------------------------------------------------------------------------------------------------------- |\n| git rebase -i <base>                  | `git rebase -i <base>`                 | Interactively rebase current branch onto <base>. Launches editor to enter commands for how each commit will be transferred to the new base.   |\n```\n\n----------------------------------------\n\nTITLE: Installing Paramiko Python Module\nDESCRIPTION: This command installs the Paramiko Python module, which is used for SSH connections in network automation scripts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day27.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install paramiko\n```\n\n----------------------------------------\n\nTITLE: Registering a Master Node in Rancher\nDESCRIPTION: Command to register a node with both etcd and controlplane roles in a Rancher-managed Kubernetes cluster. This is used for the master node which manages the cluster control plane.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day53.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.6.3 --server https://10.0.0.1 --token mpq8cbjjwrj88z4xmf7blqxcfmwdsmq92bmwjpphdkklfckk5hfwc2 --ca-checksum a81944423cbfeeb92be0784edebba1af799735ebc30ba8cbe5cc5f996094f30b --etcd --controlplane\n```\n\n----------------------------------------\n\nTITLE: Deleting Pacman Namespace in Kubernetes\nDESCRIPTION: Removes the pacman namespace from the Kubernetes cluster to clean up previous restore operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day90.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete ns pacman\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx Pod with Azure Files Volume\nDESCRIPTION: This YAML manifest defines a Pod that uses the previously created Azure Files PersistentVolumeClaim to mount a volume at the /mnt/azure path.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day22.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\nspec:\n  containers:\n  - name: mypod\n    image: nginx\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n      limits:\n        cpu: 250m\n        memory: 256Mi\n    volumeMounts:\n    - mountPath: \"/mnt/azure\"\n      name: volume\n  volumes:\n  - name: volume\n    persistentVolumeClaim:\n      claimName: azurefile\n```\n\n----------------------------------------\n\nTITLE: Checking MySQL Service Status after Automatic Restart\nDESCRIPTION: This console command checks the status of the MySQL service after the automatic restart triggered by the EDA ruleset to confirm that it's running again.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nsystemctl status mysql\n```\n\n----------------------------------------\n\nTITLE: Go Program Execution Command\nDESCRIPTION: Command to run a Go program directly without creating a binary\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day08.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Network Device Configuration Reference Table in Markdown\nDESCRIPTION: A markdown table listing the configuration files for each network device in the lab, with links to the respective configuration files in the repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day26.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Node        | Configuration         |\n| ----------- | -----------           |\n| Router      | [R1](Networking/R1)   |\n| Switch1     | [SW1](Networking/SW1) |\n| Switch2     | [SW2](Networking/SW2) |\n| Switch3     | [SW3](Networking/SW3) |\n| Switch4     | [SW4](Networking/SW4) |\n```\n\n----------------------------------------\n\nTITLE: Hiding Password Input in Bash\nDESCRIPTION: A command that demonstrates how to hide password input in a bash script using the -s flag with the read command for enhanced security.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nread -s password\n```\n\n----------------------------------------\n\nTITLE: Viewing File Permissions with ls Command\nDESCRIPTION: Shows how to view detailed file permissions using the ls command with -al flag\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nls -al Day15\n```\n\n----------------------------------------\n\nTITLE: Unstaging a file in Git\nDESCRIPTION: Demonstrates how to remove a file from the staging area without discarding the changes in the working directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit restore --staged newfile.txt\n```\n\n----------------------------------------\n\nTITLE: Starting Metricbeat with Docker Compose\nDESCRIPTION: Command to start Metricbeat using Docker Compose with the main compose file and Metricbeat extension file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash UDP Input\nDESCRIPTION: Logstash pipeline configuration that enables UDP input on port 5000 and sets the input codec to JSON for processing incoming log data from Logspout.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_1\n\nLANGUAGE: logstash\nCODE:\n```\ninput {\n  udp {\n    port  => 5000\n    codec => json\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cambiando entre Commits en Git\nDESCRIPTION: Comando para cambiar a un commit específico en Git, permitiendo 'viajar en el tiempo' en el historial del proyecto.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 709a\n```\n\n----------------------------------------\n\nTITLE: Changing to Istio Installation Directory in Bash\nDESCRIPTION: Command to navigate to the Istio installation directory. This is a prerequisite step before deploying sample observability addons.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd istio-1.16.1\n```\n\n----------------------------------------\n\nTITLE: Using Variables in a Simple Go Program\nDESCRIPTION: Shows how to use a declared variable within a Go program. This example demonstrates importing the fmt package and using Println to display the variable value.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day11.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var challenge = \"#90DaysOfDevOps\"\n    fmt.Println(\"Welcome to\", challenge, \"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Añadiendo un Archivo Específico en Git\nDESCRIPTION: Comando para añadir un archivo específico al staging area en Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add samplecode.ps1\n```\n\n----------------------------------------\n\nTITLE: Checking Kanister Profiles\nDESCRIPTION: Command to list Kanister profiles in the my-production-app namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day88.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get profiles.cr.kanister.io -n my-production-app\n```\n\n----------------------------------------\n\nTITLE: Navigating directories with cd in Linux\nDESCRIPTION: The 'cd' command changes your current directory. 'cd ..' moves up one level to the parent directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd Day15\n```\n\n----------------------------------------\n\nTITLE: Deploying EFK Stack on Minikube using kubectl\nDESCRIPTION: Command to deploy the EFK stack YAML manifest file to the Kubernetes cluster. This creates all necessary resources including Elasticsearch StatefulSet, Fluentd DaemonSet, and Kibana Deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day82.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f efk-stack.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Ansible Playbook with Role in YAML\nDESCRIPTION: This snippet demonstrates how to include an Ansible role in a playbook. It shows the basic structure of defining hosts and applying a role with parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Configmgmt/ansible-scenario7/roles/mysql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Adding History Timestamp Format to Bash Profile\nDESCRIPTION: Command to add timestamp formatting to the bash profile, making the configuration persistent across sessions. This appends the export statement to the user's bash_profile file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho 'export HISTTIMEFORMAT=\"%d-%m-%Y %T \"' >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Mounting a Newly Formatted Disk in Linux\nDESCRIPTION: These commands create a mount point and mount the newly formatted disk.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /mnt/NewDisk\nsudo mount /dev/sdb /mnt/newdisk\n```\n\n----------------------------------------\n\nTITLE: Managing Git Configuration\nDESCRIPTION: Commands to view and edit Git configuration at different levels (local, global, system).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_8\n\nLANGUAGE: git\nCODE:\n```\ngit config --system --list\ngit config --global --list\ngit config --local --list\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu System with apt\nDESCRIPTION: This command updates the package lists for upgrades and new package installations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Creating a User Management Script\nDESCRIPTION: Starting a script for automating user creation according to specified requirements.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntouch create_user.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x create_user.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nnano create_user.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nvim create_user.sh\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Logspout Extension\nDESCRIPTION: Command to run Docker Compose with the Logspout extension, using an additional compose file for the extension configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/logspout/logspout-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Restarting Apache Service in Linux\nDESCRIPTION: Command to restart the Apache2 service after installation or configuration changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo service apache2 restart\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Integration Tests for Dependent Modules\nDESCRIPTION: This complex bash command chain analyzes changes, determines dependencies, and runs PHPUnit integration tests for affected and dependent modules.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day15.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit diff --name-only |\\\nxargs php deptrac.php changed-files --with-dependencies |\\\nsed '1s/;/ --testsuite /g; 2s/;/Integration --testsuite /g; /./ { s/^/--testsuite /; 2s/$/Integration/; }' |\\\nsed ':a;N;$!ba;s/\\n/ /g' |\\\nxargs ./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Installing Package During Container Runtime\nDESCRIPTION: Demonstrates installing curl package in a running container, which is an unusual activity that Falco should detect as suspicious behavior.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day30.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt update && apt install -y curl\n```\n\n----------------------------------------\n\nTITLE: Adding Kasten Helm Repository\nDESCRIPTION: This command adds the Kasten Helm repository to the local Helm installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nhelm repo add kasten https://charts.kasten.io/\n```\n\n----------------------------------------\n\nTITLE: Extracting User Accounts with cut and xargs\nDESCRIPTION: Shows how to extract and format user account information from /etc/passwd using cut, sort, and xargs\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncut -d: -f1 < /etc/passwd\n```\n\nLANGUAGE: bash\nCODE:\n```\ncut -d: -f1 < /etc/passwd | sort | xargs\n```\n\n----------------------------------------\n\nTITLE: Creating a Second Commit with Message\nDESCRIPTION: This command creates another commit with the staged changes and a descriptive message. It demonstrates the iterative nature of version control, where multiple commits build up the project history.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"My Second Commit\"\n```\n\n----------------------------------------\n\nTITLE: Testing Direct Service Connectivity from NotSleep Pod\nDESCRIPTION: Command to test direct connectivity to the ProductPage service from the NotSleep pod without going through the Ingress Gateway.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec deploy/notsleep -- curl -s http://productpage:9080/ | grep -o \"<title>.*</title>\"\n```\n\n----------------------------------------\n\nTITLE: Patch Command for Security Configuration\nDESCRIPTION: Command to modify project security settings using oc patch\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ oc patch namespace/scc-ns-test -p '{\"metadata\":{\"labels\":{\"pod-security.kubernetes.io/audit\":\"privileged\",\"pod-security.kubernetes.io/enforce\":\"privileged\",\"pod-security.kubernetes.io/warn\":\"privileged\",\"security.openshift.io/scc.podSecurityLabelSync\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Requirements File\nDESCRIPTION: A simple requirements.txt file that lists Flask as a dependency for the Python application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day38.md#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nflask==2.0.1\n```\n\n----------------------------------------\n\nTITLE: Implementing a Function Less Suitable for Fuzzing in Go\nDESCRIPTION: This Go function demonstrates a case where fuzzing might be less effective. It panics only when the input is exactly 'fuzz', without providing intermediate clues for the fuzzing library.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day16.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc DontPanic(s input) {\n    if (len(s) == 4) && s[0] == 'f' && s[1] == 'u' && s[2] == 'z' && s[3] == 'z' {\n        panic(\"error\")\n    }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc DontPanic(s input) {\n    if s == \"fuzz\" {\n        panic(\"error\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a File with vim in Linux\nDESCRIPTION: Demonstrates how to open a text file with vim editor. This command puts you in 'normal' mode by default, requiring you to press 'i' to enter 'insert' mode for editing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day17.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvim 90DaysOfDevOps.txt\n```\n\n----------------------------------------\n\nTITLE: Restarting Filebeat Container After Configuration Changes\nDESCRIPTION: Command to restart the Filebeat container after making configuration changes in the filebeat.yml file. This ensures the new configuration is applied.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml restart filebeat\n```\n\n----------------------------------------\n\nTITLE: Watching Monitoring Pods Deployment in Kubernetes\nDESCRIPTION: Command to watch the status of pods being deployed in the monitoring namespace, allowing you to monitor when they reach the running state.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day83.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n monitoring -w\n```\n\n----------------------------------------\n\nTITLE: Verificando el Estado del Repositorio Git\nDESCRIPTION: Comando para verificar el estado actual del repositorio Git, mostrando archivos modificados y no rastreados.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Displaying Command-Line Arguments in Bash\nDESCRIPTION: A simple bash script that demonstrates how to access and display the first command-line argument passed to the script using '$1'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Bir kullanıcı komut satırı argümanı olarak iletilmiş olmalıdır\necho \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Installing Paramiko SSH Module in Python\nDESCRIPTION: Command to install the Paramiko Python module, which is widely used for SSH connections. Paramiko provides SSH client functionality for Python applications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day27.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install paramiko\n```\n\n----------------------------------------\n\nTITLE: Deploying AWX Demo Instance to Kubernetes\nDESCRIPTION: Command to create the AWX demo instance in the specified namespace using the configuration file. This deploys the AWX application after the operator is running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day69.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f awx-demo.yml -n awx\n```\n\n----------------------------------------\n\nTITLE: Poll SCM Configuration\nDESCRIPTION: Jenkins SCM polling configuration to check for repository changes every minute using cron syntax.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day74.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* * * * *\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Command to build a Docker image with a specified tag from the current directory\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day45.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 90daysofdevops:0.1 .\n```\n\n----------------------------------------\n\nTITLE: MySQL Installation Tasks (YAML)\nDESCRIPTION: Ansible tasks for installing MySQL server, client, Python dependencies and ensuring the service is running.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - python3-pip\n   - mysql-client\n   - python3-mysqldb\n   - libmysqlclient-dev\n\n- name: Ensure mysql-server is installed latest version\n  apt: name=mysql-server state=latest\n\n- name: Installing python module MySQL-python\n  pip:\n    name: PyMySQL\n\n- name: Ensure mysql-server is running\n  service:\n    name: mysql\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubuntu Desktop VM with Vagrant\nDESCRIPTION: This Vagrantfile configures an Ubuntu Desktop 20.04 virtual machine using VirtualBox provider. It sets memory to 8GB, allocates 4 CPUs, and customizes video memory to 128MB.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day14.md#2025-04-17_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n\n  config.vm.box = \"chenhan/ubuntu-desktop-20.04\"\n\n  config.vm.provider :virtualbox do |v|\n\n   v.memory  = 8096\n\n   v.cpus    = 4\n\n   v.customize [\"modifyvm\", :id, \"--vram\", \"128\"]\n\nend\n\nend\n```\n\n----------------------------------------\n\nTITLE: Executing User Creation Script with Password Parameter\nDESCRIPTION: Example of running the user creation script with both username and password parameters, creating a user named '90DaysOfDevOps' with the password 'password'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n./create_user.sh 90DaysOfDevOps password\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Extended Message in Git\nDESCRIPTION: Illustrates how to commit changes using an extended commit message. The 'git commit' command without flags opens a text editor for a more detailed commit message.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day38.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Viewing Repository History\nDESCRIPTION: Command to display the commit history of a Git repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_9\n\nLANGUAGE: git\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Restarting Metricbeat Container After Configuration Changes\nDESCRIPTION: Command to restart the Metricbeat container after making changes to its configuration file. This is necessary for any modifications to the config/metricbeat.yml file to take effect.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml restart metricbeat\n```\n\n----------------------------------------\n\nTITLE: Renaming Files in Git Repository\nDESCRIPTION: Command to rename a file in both the working directory and Git repository in one step. This stages the rename operation for the next commit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day38.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit mv config.yaml config.yml\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Playbook Usage\nDESCRIPTION: Demonstrates how to include and use the role in a playbook with parameters. Shows basic role inclusion syntax with a variable being passed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Configmgmt/ansible-scenario3/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Client Container for Database Operations\nDESCRIPTION: This command creates a temporary MySQL client pod in the same namespace as the database, passing necessary environment variables for database operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Running a PostgreSQL Docker Container for Performance Testing\nDESCRIPTION: Command to run a PostgreSQL Docker container with the dvdrental sample database for performance testing and demonstration. The container is exposed on port 5432 with a specified password.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day67.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n    --publish 5432:5432 \\\n    --env POSTGRES_PASSWORD=Testing1122 \\\n    --name demo-container \\\n    ghcr.io/dbafromthecold/demo-postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Tunnel\nDESCRIPTION: Command to create a tunnel for ingress access in Minikube with a specific profile\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day55.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nminikube tunnel --profile=mc-demo\n```\n\n----------------------------------------\n\nTITLE: Conectando a una suscripción de Azure con PowerShell\nDESCRIPTION: Este comando de PowerShell se utiliza para conectarse a una suscripción de Azure. Es el primer paso para comenzar a administrar recursos de Azure mediante PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day33.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with APM Server Extension\nDESCRIPTION: Command to launch Docker Compose with both the main stack and the APM Server extension by referencing multiple compose files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/apm-server/apm-server-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Monitoring Pod Status in Kubernetes\nDESCRIPTION: Kubectl command to watch the status of pods in the monitoring namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day83.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n monitoring -w\n```\n\n----------------------------------------\n\nTITLE: Pod Deployment Status Output\nDESCRIPTION: Shows the output of the kubectl get pods command, confirming the sleep pod is running with the Istio sidecar injected (2/2 containers).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsleep-75bbc86479-xw5lw           2/2     Running   0          36s\n```\n\n----------------------------------------\n\nTITLE: Setting Enterprise Search Password in Docker Compose\nDESCRIPTION: YAML configuration showing how to set a custom password for Enterprise Search in the Docker Compose environment variables.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ENT_SEARCH_DEFAULT_PASSWORD: {{some strong password}}\n```\n\n----------------------------------------\n\nTITLE: Removing Software with apt\nDESCRIPTION: This command removes the previously installed 'figlet' program from the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove figlet\n```\n\n----------------------------------------\n\nTITLE: Adding new user accounts in Linux\nDESCRIPTION: The 'useradd' command creates new user accounts in the system. It requires sudo privileges to execute.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nsudo useradd NewUser\n```\n\n----------------------------------------\n\nTITLE: Accessing Kibana Web Interface\nDESCRIPTION: URL endpoint to access the Kibana dashboard after deployment with default authentication credentials.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day80.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://localhost:5601/\\nUsername: elastic\\nPassword: changeme or 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Commit History with git log\nDESCRIPTION: The git log command displays the commit history of a repository, showing commit hashes, authors, dates, and commit messages. This helps in tracking the project's history and understanding what changes have been made over time.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day35.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Common Variables Definition for MySQL Setup\nDESCRIPTION: Variable definitions for ports, messages, and MySQL credentials used across the playbook.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_port: 8000\nhttps_port: 4443\nhtml_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 68!\"\n\nmysql_user_name: root\nmysql_user_password: \"vagrant\"\ndb_user: devops\ndb_pass: DevOps90\ndb_name: 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Prometheus Service\nDESCRIPTION: Command to set up port forwarding for accessing Prometheus service on localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day83.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/prometheus-k8s 9090\n```\n\n----------------------------------------\n\nTITLE: Changing File Ownership with chown\nDESCRIPTION: Transfers ownership of a file from the current user to a new user using the chown command with sudo privileges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown NewUser Day15\n```\n\n----------------------------------------\n\nTITLE: Examining a PostgreSQL Column Definition with Constraints\nDESCRIPTION: Shows how a column is defined in PostgreSQL with name, data type and NOT NULL constraint. This example demonstrates the address_id column which is used as a foreign key.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\naddress_id smallint NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Configuring FluentBit ConfigMap for Kubernetes\nDESCRIPTION: A Kubernetes ConfigMap configuration for FluentBit that defines parsers, service settings, inputs, filters, and outputs for log collection and forwarding to Elasticsearch\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day81.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName:         fluent-bit\nNamespace:    default\nLabels:       app.kubernetes.io/instance=fluent-bit\n              app.kubernetes.io/managed-by=Helm\n              app.kubernetes.io/name=fluent-bit\n              app.kubernetes.io/version=1.8.14\n              helm.sh/chart=fluent-bit-0.19.21\nAnnotations:  meta.helm.sh/release-name: fluent-bit\n              meta.helm.sh/release-namespace: default\n\nData\n====\ncustom_parsers.conf:\n----\n[PARSER]\n    Name docker_no_time\n    Format json\n    Time_Keep Off\n    Time_Key time\n    Time_Format %Y-%m-%dT%H:%M:%S.%L\n\nfluent-bit.conf:\n----\n[SERVICE]\n    Daemon Off\n    Flush 1\n    Log_Level info\n    Parsers_File parsers.conf\n    Parsers_File custom_parsers.conf\n    HTTP_Server On\n    HTTP_Listen 0.0.0.0\n    HTTP_Port 2020\n    Health_Check On\n\n[INPUT]\n    Name tail\n    Path /var/log/containers/*.log\n    multiline.parser docker, cri\n    Tag kube.*\n    Mem_Buf_Limit 5MB\n    Skip_Long_Lines On\n\n[INPUT]\n    Name systemd\n    Tag host.*\n    Systemd_Filter _SYSTEMD_UNIT=kubelet.service\n    Read_From_Tail On\n\n[FILTER]\n    Name Kubernetes\n    Match kube.*\n    Merge_Log On\n    Keep_Log Off\n    K8S-Logging.Parser On\n    K8S-Logging.Exclude On\n\n[OUTPUT]\n    Name es\n    Match kube.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Retry_Limit False\n\n[OUTPUT]\n    Name es\n    Match host.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Logstash_Prefix node\n    Retry_Limit False\n```\n\n----------------------------------------\n\nTITLE: External Access Test Result\nDESCRIPTION: Shows the beginning of the HTML response from the external access test, confirming that the application is accessible through the Istio ingress gateway.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day78.md#2025-04-17_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n!DOCTYPE html>\n<html>\n<head>\n    <title>Simple Bookstore App</title>\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status Check\nDESCRIPTION: Command to list running containers showing the status of ELK stack components and their port mappings\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS                                                                                            NAMES\n173f0634ed33        logstash:7.8.0        \"/usr/local/bin/dock…\"   43 seconds ago      Up 41 seconds             0.0.0.0:5000->5000/tcp, 0.0.0.0:5044->5044/tcp, 0.0.0.0:9600->9600/tcp, 0.0.0.0:5000->5000/udp   log\nb448fd3e9b30        kibana:7.8.0          \"/usr/local/bin/dumb…\"   43 seconds ago      Up 42 seconds             0.0.0.0:5601->5601/tcp                                                                           kib\n366d358fb03d        elasticsearch:7.8.0   \"/tini -- /usr/local…\"   43 seconds ago      Up 42 seconds (healthy)   0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp                                                   es\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Logspout Extension\nDESCRIPTION: Command to start Docker Compose with the Logspout extension by referencing both the main docker-compose.yml and the logspout-compose.yml configuration files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/logspout/logspout-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Testing Connectivity via Ingress Gateway\nDESCRIPTION: Command to test connectivity to the BookInfo application through the Istio Ingress Gateway using the Sleep pod, verifying that the page title is returned correctly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec deploy/sleep -- curl -s http://istio-ingressgateway.istio-system/productpage | grep -o \"<title>.*</title>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bash Script\nDESCRIPTION: Demonstrates how to create a simple bash script that creates a directory, changes into it, and creates a file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/bash\n\nmkdir 90DaysOfDevOps\ncd 90DaysOfDevOps\ntouch Day19\nls\n```\n\n----------------------------------------\n\nTITLE: Finding Available VM Images in Multipass\nDESCRIPTION: Command to list all available images that can be used to create VMs in Multipass, showing available Ubuntu versions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmultipass find\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository URL Configuration\nDESCRIPTION: URL reference for the GitHub repository containing the Jenkins pipeline code and Dockerfile.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day74.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/MichaelCade/Jenkins-HelloWorld.git\n```\n\n----------------------------------------\n\nTITLE: Kanister MySQL Backup Blueprint\nDESCRIPTION: YAML configuration defining the Kanister blueprint for MySQL backup, restore, and delete operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cr.kanister.io/v1alpha1\nkind: Blueprint\nmetadata:\n  name: mysql-blueprint\nactions:\n  backup:\n    outputArtifacts:\n      mysqlCloudDump:\n        keyValue:\n          s3path: \"{{ .Phases.dumpToObjectStore.Output.s3path }}\"\n    phases:\n    - func: KubeTask\n      name: dumpToObjectStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"/mysql-backups/{{ .StatefulSet.Namespace }}/{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}/{{ toDate \"2006-01-02T15:04:05.999999999Z07:00\" .Time  | date \"2006-01-02T15-04-05\" }}/dump.sql.gz\"\n          root_password=\"{{ index .Phases.dumpToObjectStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          mysqldump --column-statistics=0 -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }} --single-transaction --all-databases | gzip - | kando location push --profile '{{ toJson .Profile }}' --path ${s3_path} -\n          kando output s3path ${s3_path}\n```\n\n----------------------------------------\n\nTITLE: Restarting Filebeat Container\nDESCRIPTION: This command restarts the Filebeat container after making changes to its configuration. It uses Docker Compose with both the main compose file and the Filebeat extension.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml restart filebeat\n```\n\n----------------------------------------\n\nTITLE: Viewing commit history in Git\nDESCRIPTION: Displays a detailed log of all commits in the repository, including commit hashes, authors, dates, and commit messages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Stopping and Starting VMs with Multipass\nDESCRIPTION: Commands to stop and restart a virtual machine in Multipass.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmultipass stop 90DaysOfDevOps\nmultipass start 90DaysOfDevOps\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Bot and Challenge Application in Go\nDESCRIPTION: This code combines a Twitter bot implementation with a custom application for the #90DaysOfDevOps challenge. It includes Twitter API authentication, user input handling, and tweet posting functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day13.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n    {\n        const DaysTotal int = 90\n        var remainingDays uint = 90\n        challenge := \"#90DaysOfDevOps\"\n\n        fmt.Printf(\"Welcome to the %v challenge.\\nThis challenge consists of %v days\\n\", challenge, DaysTotal)\n\n        var TwitterName string\n        var DaysCompleted uint\n\n        // asking for user input\n        fmt.Println(\"Enter Your Twitter Handle: \")\n        fmt.Scanln(&TwitterName)\n\n        fmt.Println(\"How many days have you completed?: \")\n        fmt.Scanln(&DaysCompleted)\n\n        // calculate remaining days\n        remainingDays = remainingDays - DaysCompleted\n\n        //fmt.Printf(\"Thank you %v for taking part and completing %v days.\\n\", TwitterName, DaysCompleted)\n        //fmt.Printf(\"You have %v days remaining for the %v challenge\\n\", remainingDays, challenge)\n        // fmt.Println(\"Good luck\")\n\n        client, err := getClient(&creds)\n        if err != nil {\n            log.Println(\"Error getting Twitter Client, this is expected if you did not supply your Twitter API tokens\")\n            log.Println(err)\n        }\n\n        message := fmt.Sprintf(\"Hey I am %v I have been doing the %v for %v days and I have %v Days left\", TwitterName, challenge, DaysCompleted, remainingDays)\n        tweet, resp, err := client.Statuses.Update(message, nil)\n        if err != nil {\n            log.Println(err)\n        }\n        log.Printf(\"%+v\\n\", resp)\n        log.Printf(\"%+v\\n\", tweet)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Buscando comandos de PowerShell relacionados con VMs de Azure\nDESCRIPTION: Este comando de PowerShell busca y muestra todos los comandos disponibles relacionados con las máquinas virtuales de Azure. Es útil para explorar las capacidades de administración de VMs a través de PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day33.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command *AzVM*\n```\n\n----------------------------------------\n\nTITLE: Installing Podman on Ubuntu 20.04 WSL2 - Adding GPG Key\nDESCRIPTION: Command to add the GPG key for the Podman repository, which is required to verify the authenticity of the packages being installed from the OpenSUSE repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day48.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L \"https://download.opensuse.org/repositories/devel:/kubic:\\\n/libcontainers:/stable/xUbuntu_20.04/Release.key\" | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Adding Third-Party Repository for HashiCorp Vagrant\nDESCRIPTION: Process for adding the HashiCorp repository to an Ubuntu system, which includes adding the trusted key and repository URL before installing Vagrant.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install vagrant\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Shell on Ubuntu\nDESCRIPTION: Command to install ZSH shell using apt package manager on Ubuntu Linux.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day20.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install zsh\n```\n\n----------------------------------------\n\nTITLE: Deploying Rancher Container\nDESCRIPTION: Command to deploy Rancher as a Docker container on the local workstation, exposing ports 80 and 443 for web access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day53.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher\n```\n\n----------------------------------------\n\nTITLE: Checking File Permissions in Linux\nDESCRIPTION: Uses the ls command with options -al to list detailed file information including permissions, ownership, and size for a specific file or directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nls -al Day15\n```\n\n----------------------------------------\n\nTITLE: IaC Alternatives Comparison Table\nDESCRIPTION: A markdown table comparing different Infrastructure as Code tools, categorized by cloud-specific and cloud-agnostic solutions. It shows options like AWS CloudFormation, Azure Resource Manager, Google Cloud Deployment Manager, Terraform, and Pulumi.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day62.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Cloud Specific                  | Cloud Agnostic | \n| ------------------------------- | -------------- |\n| AWS CloudFormation              | Terraform      | \n| Azure Resource Manager          | Pulumi         | \n| Google Cloud Deployment Manager |                | \n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Markdown Blog Post\nDESCRIPTION: Example of a Markdown file (hello.md) containing a sample blog post with various Markdown syntax elements.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello\n\nThis is my first blog post\n### Heading level 3\n#### Heading level 4\n##### Heading level 5\n###### Heading level 6\n\nI just love **bold text**.\n```\n\n----------------------------------------\n\nTITLE: Verifying ELK Stack Container Status\nDESCRIPTION: Shows how to list the running ELK containers with docker ps command, displaying container IDs, images, commands, status, and port mappings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS                                                                                            NAMES\n173f0634ed33        logstash:7.8.0        \"/usr/local/bin/dock…\"   43 seconds ago      Up 41 seconds             0.0.0.0:5000->5000/tcp, 0.0.0.0:5044->5044/tcp, 0.0.0.0:9600->9600/tcp, 0.0.0.0:5000->5000/udp   log\nb448fd3e9b30        kibana:7.8.0          \"/usr/local/bin/dumb…\"   43 seconds ago      Up 42 seconds             0.0.0.0:5601->5601/tcp                                                                           kib\n366d358fb03d        elasticsearch:7.8.0   \"/tini -- /usr/local…\"   43 seconds ago      Up 42 seconds (healthy)   0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp                                                   es\n```\n\n----------------------------------------\n\nTITLE: Running commands from history in Linux\nDESCRIPTION: You can execute a command from your history by using '!' followed by the history number of the command you want to run.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n!3\n```\n\n----------------------------------------\n\nTITLE: Generating AES-256 Encryption Key using OpenSSL\nDESCRIPTION: Console command for generating a strong encryption key using OpenSSL's AES-256 cipher. This key can be used for Enterprise Search encryption.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ openssl enc -aes-256 -P\n\nenter aes-256-cbc encryption password: <a strong password>\nVerifying - enter aes-256-cbc encryption password: <repeat your strong password>\n...\n\nkey=<generated AES key>\n```\n\n----------------------------------------\n\nTITLE: Configuring FluentBit in Kubernetes using ConfigMap\nDESCRIPTION: This YAML snippet shows the ConfigMap used to configure FluentBit in a Kubernetes deployment. It includes settings for the service, input sources, filters, and output destinations for log data.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day81.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName:         fluent-bit\nNamespace:    default\nLabels:       app.kubernetes.io/instance=fluent-bit\n              app.kubernetes.io/managed-by=Helm\n              app.kubernetes.io/name=fluent-bit\n              app.kubernetes.io/version=1.8.14\n              helm.sh/chart=fluent-bit-0.19.21\nAnnotations:  meta.helm.sh/release-name: fluent-bit\n              meta.helm.sh/release-namespace: default\n\nData\n====\ncustom_parsers.conf:\n----\n[PARSER]\n    Name docker_no_time\n    Format json\n    Time_Keep Off\n    Time_Key time\n    Time_Format %Y-%m-%dT%H:%M:%S.%L\n\nfluent-bit.conf:\n----\n[SERVICE]\n    Daemon Off\n    Flush 1\n    Log_Level info\n    Parsers_File parsers.conf\n    Parsers_File custom_parsers.conf\n    HTTP_Server On\n    HTTP_Listen 0.0.0.0\n    HTTP_Port 2020\n    Health_Check On\n\n[INPUT]\n    Name tail\n    Path /var/log/containers/*.log\n    multiline.parser docker, cri\n    Tag kube.*\n    Mem_Buf_Limit 5MB\n    Skip_Long_Lines On\n\n[INPUT]\n    Name systemd\n    Tag host.*\n    Systemd_Filter _SYSTEMD_UNIT=kubelet.service\n    Read_From_Tail On\n\n[FILTER]\n    Name kubernetes\n    Match kube.*\n    Merge_Log On\n    Keep_Log Off\n    K8S-Logging.Parser On\n    K8S-Logging.Exclude On\n\n[OUTPUT]\n    Name es\n    Match kube.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Retry_Limit False\n\n[OUTPUT]\n    Name es\n    Match host.*\n    Host elasticsearch-master\n    Logstash_Format On\n    Logstash_Prefix node\n    Retry_Limit False\n\nEvents:  <none>\n```\n\n----------------------------------------\n\nTITLE: Improved EDA Rulebook with Conditional Logic\nDESCRIPTION: Enhanced webhook rulebook that applies different actions based on the content of the incoming event. It checks for the presence of a specific key and responds accordingly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day27.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Listen to webhook events\n  hosts: all\n  sources:\n    - ansible.eda.webhook:\n        host: 0.0.0.0\n        port: 5000\n  rules:\n    - name: Foo\n      condition: event.payload.foo is defined\n      action:\n        debug:\n          msg: \"{{ event.payload.foo }}\"\n    - name: No foo\n      condition: 1 == 1\n      action:\n        debug:\n          msg: \"no foo :(\"\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Client Pod in Kubernetes\nDESCRIPTION: Command to run a temporary MySQL client pod in the same namespace as the MySQL database, passing necessary environment variables for database connection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Applying Jenkins Configuration Files\nDESCRIPTION: Applies Kubernetes configuration files for Jenkins volume and service account. These files set up the necessary storage and permissions for Jenkins.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f jenkins-volume.yml \n\nkubectl apply -f jenkins-sa.yml\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Key to SSH Agent\nDESCRIPTION: Command to add your private SSH key to the SSH agent, which allows you to use the key without entering a passphrase each time.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nssh-add -K ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Restarting Enterprise Search Container After Configuration Changes\nDESCRIPTION: Command to restart the Enterprise Search container after making configuration changes. This applies the changes without restarting the entire stack.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/enterprise-search/enterprise-search-compose.yml restart enterprise-search\n```\n\n----------------------------------------\n\nTITLE: Skipping Staging Area in Git\nDESCRIPTION: Commits changes directly, bypassing the staging area.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day38.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a -m \"<Mensaje significativo>\"\n```\n\n----------------------------------------\n\nTITLE: Reassigning Go Variables with Regular Assignment Operator\nDESCRIPTION: Shows how to reassign values to already declared variables in Go using the standard assignment operator (=). Variables must be declared before they can be reassigned.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day15.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nvar i int\ni = 10\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version\nDESCRIPTION: Command to verify Git installation by checking the installed version.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Running a Shell Script with Arguments\nDESCRIPTION: Example of how to execute a shell script with a command-line argument, passing 'Michael' as the first parameter to the script.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n./create_user.sh Michael\n```\n\n----------------------------------------\n\nTITLE: Listing Running Pods in Kubernetes\nDESCRIPTION: Command to list all running pods in the current namespace in a Kubernetes cluster, displaying their names, ready status, status, restarts, and age.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Adding Jenkins Helm Repository\nDESCRIPTION: These commands add the Jenkins Helm repository and update the local Helm chart cache. This is necessary for deploying Jenkins using Helm.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day72.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add jenkinsci https://charts.jenkins.io\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Listing Files and Directories with ls Command in Linux\nDESCRIPTION: Shows the basic usage of the ls command to list files and directories in the current location, and demonstrates how to use the -l flag for detailed listing format.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nls\nls -l\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nginx Template Configuration\nDESCRIPTION: J2 template for dynamic Nginx configuration using Ansible facts and variables to configure upstream web servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day68.md#2025-04-17_snippet_1\n\nLANGUAGE: j2\nCODE:\n```\n#Dynamic Config for server {{ ansible_facts['nodename'] }}\n    upstream webservers {\n  {% for host in groups['webservers'] %}\n        server {{ hostvars[host]['ansible_facts']['nodename'] }}:8000;\n    {% endfor %}\n    }\n\n    server {\n        listen 80;\n\n        location / {\n                proxy_pass http://webservers;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Kyverno Admission Controller with Helm\nDESCRIPTION: Helm commands to add the Kyverno repository and install both Kyverno and its default policies. This sets up Kyverno admission controller with a single replica in a dedicated namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day34.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add kyverno https://kyverno.github.io/kyverno/\nhelm repo update\nhelm install kyverno kyverno/kyverno -n kyverno --create-namespace --set replicaCount=1\nhelm install kyverno-policies kyverno/kyverno-policies -n kyverno\n```\n\n----------------------------------------\n\nTITLE: Increasing History Size in Bash Profile\nDESCRIPTION: Commands to increase the history file size and command count limits in bash. This allows for storing more commands in history, which is useful for referencing past operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho 'export HISTSIZE=100000' >> ~/.bash_profile\necho 'export HISTFILESIZE=10000000' >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Comparing Red Hat OpenShift Service on AWS/Azure with Red Hat OpenShift Dedicated\nDESCRIPTION: This snippet explains the difference between Red Hat OpenShift Service on AWS/Azure and Red Hat OpenShift Dedicated in terms of management and hosting responsibilities.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day56.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRed Hat OpenShift Service on AWS is a fully managed implementation of OpenShift Container Platform deployed and operated on AWS, jointly managed and supported by both Red Hat and AWS.\n\nRed Hat OpenShift Dedicated is a service hosted and fully-managed by Red Hat that offers clusters in a virtual private cloud on AWS or Google Cloud Platform.\n```\n\n----------------------------------------\n\nTITLE: Network Device Connection Path\nDESCRIPTION: Network device mapping with internal and external IP addresses\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day27.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Node        | IP Address  | Home Network IP  |\n| ----------- | ----------- | -----------      |\n| Router      | 10.10.88.110| 192.168.169.115  |\n| Switch1     | 10.10.88.111| 192.168.169.178  |\n| Switch2     | 10.10.88.112| 192.168.169.193  |\n| Switch3     | 10.10.88.113| 192.168.169.125  |\n| Switch4     | 10.10.88.114| 192.168.169.197  |\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSH Plugins\nDESCRIPTION: ZSH configuration line to enable git, autosuggestions, and syntax highlighting plugins.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day20.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Changed Components with Deptrac\nDESCRIPTION: These bash commands use deptrac to analyze changed files and determine affected components, with and without dependencies.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day15.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# to get the list of changed components\ngit diff --name-only | xargs php deptrac.php changed-files\n\n# to get the list of changed modules with the depending components\ngit diff --name-only | xargs php deptrac.php changed-files --with-dependencies\n```\n\n----------------------------------------\n\nTITLE: Stack Cleanup Command\nDESCRIPTION: Command to stop and remove the ELK stack containers\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources with kubectl\nDESCRIPTION: Basic kubectl commands for listing resources like nodes, namespaces, and pods in a Kubernetes cluster. These commands help in viewing cluster resources across different namespaces.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day51.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes\nkubectl get namespaces\nkubectl get pods\nkubectl get pods -n name\n```\n\n----------------------------------------\n\nTITLE: Using curl for basic file download in Linux\nDESCRIPTION: This snippet demonstrates how to use curl to download a file from a URL. The command downloads the file and outputs it to standard output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day02.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://directwebsiteurl.com\n```\n\n----------------------------------------\n\nTITLE: Unmounting a Disk in Linux\nDESCRIPTION: This command safely unmounts a disk from the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day16.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo umount /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Example Playbook Usage for Ansible Role\nDESCRIPTION: Demonstrates how to include and use the Ansible role in a playbook, with an example of passing a variable. This snippet shows the basic structure for incorporating the role into a larger Ansible project.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Configmgmt/ansible-scenario7/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Resuming WAL Replay for PostgreSQL Recovery\nDESCRIPTION: PostgreSQL command to resume the replay of WAL files after the recovery process has paused at the target recovery point.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npsql -c \"select pg_wal_replay_resume();\"\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Logspout Extension\nDESCRIPTION: Command to run Docker Compose with the logspout-compose.yml extension file alongside the main docker-compose.yml file. This enables the Logspout functionality for log collection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/logspout/logspout-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Visualizando el Historial de Commits en Git\nDESCRIPTION: Comando para ver el historial de commits en un repositorio Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Opening ZSH Configuration File\nDESCRIPTION: Command to open the ZSH configuration file (.zshrc) in the nano text editor. This file contains settings and configurations for the ZSH shell environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Bot and Custom App Integration in Go\nDESCRIPTION: This code snippet demonstrates how to integrate a Twitter bot with a custom application for the #90DaysOfDevOps challenge. It includes authentication with Twitter API, user input handling, and tweet posting functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day13.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n    {\n        const DaysTotal int = 90\n        var remainingDays uint = 90\n        challenge := \"#90DaysOfDevOps\"\n\n        fmt.Printf(\"Welcome to the %v challenge.\\nThis challenge consists of %v days\\n\", challenge, DaysTotal)\n\n        var TwitterName string\n        var DaysCompleted uint\n\n        // asking for user input\n        fmt.Println(\"Enter Your Twitter Handle: \")\n        fmt.Scanln(&TwitterName)\n\n        fmt.Println(\"How many days have you completed?: \")\n        fmt.Scanln(&DaysCompleted)\n\n        // calculate remaining days\n        remainingDays = remainingDays - DaysCompleted\n\n        client, err := getClient(&creds)\n        if err != nil {\n            log.Println(\"Error getting Twitter Client, this is expected if you did not supply your Twitter API tokens\")\n            log.Println(err)\n        }\n\n        message := fmt.Sprintf(\"Hey I am %v I have been doing the %v for %v days and I have %v Days left\", TwitterName, challenge, DaysCompleted, remainingDays)\n        tweet, resp, err := client.Statuses.Update(message, nil)\n        if err != nil {\n            log.Println(err)\n        }\n        log.Printf(\"%+v\\n\", resp)\n        log.Printf(\"%+v\\n\", tweet)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Logspout Extension\nDESCRIPTION: Command to run Docker Compose from the repository root with the Logspout extension enabled via an additional compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/logspout/logspout-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Node Kubernetes Cluster with Vagrant\nDESCRIPTION: Vagrant configuration file that defines a Kubernetes cluster with one master node and configurable worker nodes. Sets up networking, VM resources, and executes provisioning scripts for cluster deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day52.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nNUM_WORKER_NODES=2\nIP_NW=\"10.0.0.\"\nIP_START=10\n\nVagrant.configure(\"2\") do |config|\n    config.vm.provision \"shell\", inline: <<-SHELL\n        apt-get update -y\n        echo \"$IP_NW$((IP_START))  master-node\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+1))  worker-node01\" >> /etc/hosts\n        echo \"$IP_NW$((IP_START+2))  worker-node02\" >> /etc/hosts\n    SHELL\n    config.vm.box = \"bento/ubuntu-21.10\"\n    config.vm.box_check_update = true\n\n    config.vm.define \"master\" do |master|\n      master.vm.hostname = \"master-node\"\n      master.vm.network \"private_network\", ip: IP_NW + \"#{IP_START}\"\n      master.vm.provider \"virtualbox\" do |vb|\n          vb.memory = 4048\n          vb.cpus = 2\n          vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n      end\n      master.vm.provision \"shell\", path: \"scripts/common.sh\"\n      master.vm.provision \"shell\", path: \"scripts/master.sh\"\n    end\n\n    (1..NUM_WORKER_NODES).each do |i|\n      config.vm.define \"node0#{i}\" do |node|\n        node.vm.hostname = \"worker-node0#{i}\"\n        node.vm.network \"private_network\", ip: IP_NW + \"#{IP_START + i}\"\n        node.vm.provider \"virtualbox\" do |vb|\n            vb.memory = 2048\n            vb.cpus = 1\n            vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n        end\n        node.vm.provision \"shell\", path: \"scripts/common.sh\"\n        node.vm.provision \"shell\", path: \"scripts/node.sh\"\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Verifying fstab Configuration in Linux\nDESCRIPTION: This command checks the /etc/fstab file for errors after editing, ensuring persistent mounts across reboots.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day16.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo mount -a\n```\n\n----------------------------------------\n\nTITLE: Main Tasks Import (YAML)\nDESCRIPTION: Main task file that imports other MySQL configuration tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day68.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks file for roles/mysql\n- import_tasks: install_mysql.yml\n- import_tasks: setup_mysql.yml\n```\n\n----------------------------------------\n\nTITLE: Running Ping Module Against Linux Group\nDESCRIPTION: This command runs the ping module against systems defined in the 'linux' group in the hosts inventory file. It shows successful connectivity to properly configured Linux hosts with SSH access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day64.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nansible linux -m ping\n```\n\n----------------------------------------\n\nTITLE: Applying Nginx Deployment\nDESCRIPTION: Command to apply the Nginx deployment configuration with security warning output\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ oc apply -f ngnix.yaml\n\nWarning: would violate PodSecurity \"restricted:v1.24\": allowPrivilegeEscalation != false (container \"nginx\" must set securityContext.allowPrivilegeEscalation=false), unrestricted capabilities (container \"nginx\" must set securityContext.capabilities.drop=[\"ALL\"]), runAsNonRoot != true (pod or container \"nginx\" must set securityContext.runAsNonRoot=true), seccompProfile (pod or container \"nginx\" must set securityContext.seccompProfile.type to \"RuntimeDefault\" or \"Localhost\")\ndeployment.apps/nginx-deployment created\n```\n\n----------------------------------------\n\nTITLE: Downloading and saving files with curl in Linux\nDESCRIPTION: This example shows how to download a file with curl and save it to a specific location using the -o or -O flags. The -o flag allows naming the file while -O uses the original filename.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day02.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o downloadedFileName.txt https://directwebsiteurl.com\ncurl -O https://directwebsiteurl.com/downloadMe.txt\n```\n\n----------------------------------------\n\nTITLE: Example Service Module Command for Webservers\nDESCRIPTION: This example command would check if the httpd service is running on all systems in the 'webservers' group. It demonstrates how modules can be used to perform specific tasks across multiple systems.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day64.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nansible webservers --m service -a \"name=httpd state=started\"\n```\n\n----------------------------------------\n\nTITLE: Identifying Variable Types in Go\nDESCRIPTION: Using the fmt.Printf function with %T format specifier to display the data types of variables during program execution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day11.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"challenge is %T, daystotal is %T, dayscomplete is %T\\n\", conference, daystotal, dayscomplete)\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Host in Kibana\nDESCRIPTION: YAML configuration to set the Enterprise Search host URL in Kibana's configuration file for management interface integration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenterpriseSearch.host: http://enterprise-search:3002\n```\n\n----------------------------------------\n\nTITLE: Markdown Document Structure\nDESCRIPTION: Markdown formatted document containing resource links and information about GitHub's development practices. Includes links to documentation, tools, and learning resources for GitHub Projects, Issues, Codespaces, and Advanced Security.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day30.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Day 30 - How GitHub delivers GitHub using GitHub\n[![Watch the video](thumbnails/day30.png)](https://www.youtube.com/watch?v=wKC1hTE9G90)\n\nHello!👋\n\nI am April Edwards and I am senior developer advocate at GitHub...\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Bot and Custom App Integration in Go\nDESCRIPTION: This code snippet combines a Twitter bot with a custom application. It handles Twitter authentication, user input for the #90DaysOfDevOps challenge, and posts a tweet with the user's progress. The program uses environment variables for Twitter API credentials.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day13.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n    {\n        const DaysTotal int = 90\n        var remainingDays uint = 90\n        challenge := \"#90DaysOfDevOps\"\n\n        fmt.Printf(\"Welcome to the %v challenge.\\nThis challenge consists of %v days\\n\", challenge, DaysTotal)\n\n        var TwitterName string\n        var DaysCompleted uint\n\n        // asking for user input\n        fmt.Println(\"Enter Your Twitter Handle: \")\n        fmt.Scanln(&TwitterName)\n\n        fmt.Println(\"How many days have you completed?: \")\n        fmt.Scanln(&DaysCompleted)\n\n        // calculate remaining days\n        remainingDays = remainingDays - DaysCompleted\n\n        client, err := getClient(&creds)\n        if err != nil {\n            log.Println(\"Error getting Twitter Client, this is expected if you did not supply your Twitter API tokens\")\n            log.Println(err)\n        }\n\n        message := fmt.Sprintf(\"Hey I am %v I have been doing the %v for %v days and I have %v Days left\", TwitterName, challenge, DaysCompleted, remainingDays)\n        tweet, resp, err := client.Statuses.Update(message, nil)\n        if err != nil {\n            log.Println(err)\n        }\n        log.Printf(\"%+v\\n\", resp)\n        log.Printf(\"%+v\\n\", tweet)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Container IP Address - ES2 Container\nDESCRIPTION: Specific command to get the IP address of the es2 latest container\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day23.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect es2 latest -f '{{range .NetworkSettings.Networks}}{{.IPAddress}} {{end}}'\n```\n\n----------------------------------------\n\nTITLE: Calculating Remaining Days with User Input in Go\nDESCRIPTION: Shows how to perform a simple calculation using variables in Go. The code subtracts the user-provided number of completed days from the total days to determine how many days remain in the challenge.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day12.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nremainingDays = remainingDays - DaysCompleted\n```\n\n----------------------------------------\n\nTITLE: Starting the SSH Agent in Background\nDESCRIPTION: Command to start the SSH agent in the background, which will manage your SSH keys.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(ssh-agent -s)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Elasticsearch API Key Service\nDESCRIPTION: YAML configuration to enable the required API key service in Elasticsearch.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nxpack.security.authc.api_key.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Monitoring Jenkins Pod Status\nDESCRIPTION: This command watches the status of pods in the Jenkins namespace, allowing you to monitor the restart process and ensure the new pod comes up correctly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n jenkins -w\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment in Windows\nDESCRIPTION: Command to create a virtual environment in Windows using Python's venv module.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nc:\\>python -m venv c:\\path\\to\\myenv\n```\n\n----------------------------------------\n\nTITLE: Changing Directories with cd Command in Linux\nDESCRIPTION: Demonstrates the cd (change directory) command to navigate the filesystem, including moving into directories, going up one level, and returning to the home directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /home/user/Documents\ncd ..\ncd ~\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic User Creation Script in Bash\nDESCRIPTION: This snippet creates a basic shell script that echoes a command-line argument, representing the first step in creating a user account.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day19.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Volviendo al Commit Más Reciente en Git\nDESCRIPTION: Comando para volver al commit más reciente después de haber cambiado a un commit anterior en Git.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day35.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit switch -\n```\n\n----------------------------------------\n\nTITLE: Changing Default StorageClass in Kubernetes\nDESCRIPTION: These commands change the default StorageClass from 'standard' to 'csi-hostpath-sc' in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day87.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in VM from Host\nDESCRIPTION: Command to run a specific command inside a virtual machine without opening a shell session.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmultipass exec 90DaysOfDevOps -- lsb_release -a\n```\n\n----------------------------------------\n\nTITLE: MySQL Backup and Restore Blueprint for Kanister\nDESCRIPTION: This YAML defines a Kanister Blueprint that contains the actions for backing up, restoring, and deleting MySQL database backups using S3 storage, including commands for database dumps and restores.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cr.kanister.io/v1alpha1\nkind: Blueprint\nmetadata:\n  name: mysql-blueprint\nactions:\n  backup:\n    outputArtifacts:\n      mysqlCloudDump:\n        keyValue:\n          s3path: \"{{ .Phases.dumpToObjectStore.Output.s3path }}\"\n    phases:\n    - func: KubeTask\n      name: dumpToObjectStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"/mysql-backups/{{ .StatefulSet.Namespace }}/{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}/{{ toDate \"2006-01-02T15:04:05.999999999Z07:00\" .Time  | date \"2006-01-02T15-04-05\" }}/dump.sql.gz\"\n          root_password=\"{{ index .Phases.dumpToObjectStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          mysqldump --column-statistics=0 -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }} --single-transaction --all-databases | gzip - | kando location push --profile '{{ toJson .Profile }}' --path ${s3_path} -\n          kando output s3path ${s3_path}\n  restore:\n    inputArtifactNames:\n    - mysqlCloudDump\n    phases:\n    - func: KubeTask\n      name: restoreFromBlobStore\n      objects:\n        mysqlSecret:\n          kind: Secret\n          name: '{{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}'\n          namespace: '{{ .StatefulSet.Namespace }}'\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .StatefulSet.Namespace }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"{{ .ArtifactsIn.mysqlCloudDump.KeyValue.s3path }}\"\n          root_password=\"{{ index .Phases.restoreFromBlobStore.Secrets.mysqlSecret.Data \"mysql-root-password\" | toString }}\"\n          kando location pull --profile '{{ toJson .Profile }}' --path ${s3_path} - | gunzip | mysql -u root --password=${root_password} -h {{ index .Object.metadata.labels \"app.kubernetes.io/instance\" }}\n  delete:\n    inputArtifactNames:\n    - mysqlCloudDump\n    phases:\n    - func: KubeTask\n      name: deleteFromBlobStore\n      args:\n        image: ghcr.io/kanisterio/mysql-sidecar:0.75.0\n        namespace: \"{{ .Namespace.Name }}\"\n        command:\n        - bash\n        - -o\n        - errexit\n        - -o\n        - pipefail\n        - -c\n        - |\n          s3_path=\"{{ .ArtifactsIn.mysqlCloudDump.KeyValue.s3path }}\"\n          kando location delete --profile '{{ toJson .Profile }}' --path ${s3_path}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query to Generate Error\nDESCRIPTION: SQL query that deliberately causes a division by zero error, used to demonstrate how errors are captured in the PostgreSQL logs.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day69.md#2025-04-17_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1/0\n```\n\n----------------------------------------\n\nTITLE: Listing Hidden Files to Find Dotfiles\nDESCRIPTION: Command using ls with grep to find the .zshrc configuration file in the home directory. This demonstrates how to locate dotfiles on the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nls -al | grep .zshrc\n```\n\n----------------------------------------\n\nTITLE: Creating a Sleep Namespace in Kubernetes\nDESCRIPTION: Creates a new namespace called 'sleep' in the Kubernetes cluster to test authentication policies.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns sleep\n```\n\n----------------------------------------\n\nTITLE: Testing ClusterIP Service Communication\nDESCRIPTION: Using a temporary pod to test connectivity to an nginx service within the cluster via its ClusterIP address.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run busybox --rm -it --image=busybox -- sh\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository\nDESCRIPTION: Command to clone a Git repository to the local machine using the repository URL.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day41.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth API Server Audit Logs\nDESCRIPTION: Lists the available OAuth API server audit logs on the control-plane nodes using the 'oc adm node-logs' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\noc adm node-logs --role=master --path=oauth-apiserver/\n```\n\n----------------------------------------\n\nTITLE: Granting Read Permissions to a User in PostgreSQL\nDESCRIPTION: This SQL command grants the 'pg_read_all_data' role to the 'test_user', giving them read access to all data in the database. It demonstrates how to assign permissions using predefined roles.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nGRANT pg_read_all_data TO test_user;\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources\nDESCRIPTION: Commands for removing resources from a Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day51.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod\n```\n\n----------------------------------------\n\nTITLE: Pushing to Remote Repository\nDESCRIPTION: Command to push the committed changes from the local repository to the remote GitHub repository.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_6\n\nLANGUAGE: git\nCODE:\n```\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Squashing Changes into Earlier Commits\nDESCRIPTION: Commands for combining new changes with an earlier commit using fixup and interactive rebase.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit --fixup <commit>\ngit rebase -i --autosquash main\ngit push --force-with-lease origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Referenciando documentación de Azure sobre tamaños de máquinas virtuales\nDESCRIPTION: Enlace a la documentación oficial de Microsoft Azure que detalla los diferentes tamaños y series de máquinas virtuales disponibles en la plataforma.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day31.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Tamaños para máquinas virtuales en Azure](https://docs.microsoft.com/en-us/azure/virtual-machines/sizes)\n```\n\n----------------------------------------\n\nTITLE: Changing Default StorageClass in Kubernetes\nDESCRIPTION: These commands change the default StorageClass from 'standard' to 'csi-hostpath-sc' in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Insecure Search Functionality in Rails Controller\nDESCRIPTION: Adding a search feature to the Bootcamps controller that is vulnerable to SQL injection attacks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day06.md#2025-04-17_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ndef index\n  @bootcamps = Bootcamp.all\n  if params[:search].to_s != ''\n    @bootcamps = Bootcamp.where(\"name LIKE '%#{params[:search]}%'\")\n  else\n    @bootcamps = Bootcamp.all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Machine with Azure PowerShell\nDESCRIPTION: This snippet shows the PowerShell cmdlet for creating a new Azure virtual machine using Azure PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day33.md#2025-04-17_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-AzVM\n```\n\n----------------------------------------\n\nTITLE: Suppressing Error Messages in Bash\nDESCRIPTION: Demonstrates how to suppress error messages by redirecting stderr to /dev/null (the null device). This is useful when you want to hide expected errors or warnings from command output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day44.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsome_command 2> /dev/null\n```\n\n----------------------------------------\n\nTITLE: Go Import Statement\nDESCRIPTION: Demonstrates how to import the fmt package in Go, which provides formatting and printing functionality used for console output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day09.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"fmt\"\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data\nDESCRIPTION: SQL command to import data from a CSV file into the newly created table.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day68.md#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCOPY test_table(id,first_name, last_name, dob, email)\nFROM '/dvdrental/test_data.csv'\nDELIMITER ','\nCSV HEADER;\n```\n\n----------------------------------------\n\nTITLE: Direct Scanning with Installed Trivy\nDESCRIPTION: Demonstrates how to use Trivy directly from the command line to scan a Docker image. This approach is simpler than using the Docker container version once Trivy is installed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntrivy image nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Checking Kopia Repository Status\nDESCRIPTION: Command to check the status of the current Kopia repository using the Kopia CLI.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day86.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository status\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubuntu Desktop VM with Vagrant\nDESCRIPTION: This Vagrantfile defines a Ubuntu Desktop 20.04 virtual machine configuration. It specifies the base box, VM provider (VirtualBox), and hardware resources including memory, CPUs, and video memory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day14.md#2025-04-17_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n\n  config.vm.box = \"chenhan/ubuntu-desktop-20.04\"\n\n  config.vm.provider :virtualbox do |v|\n\n   v.memory  = 8096\n\n   v.cpus    = 4\n\n   v.customize [\"modifyvm\", :id, \"--vram\", \"128\"]\n\nend\n\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister S3 Profile\nDESCRIPTION: Command to create a Kanister profile that configures the AWS S3 bucket as the storage location for database backups using the kanctl CLI tool.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day88.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create profile s3compliant --access-key $ACCESS_KEY --secret-key $SECRET_KEY --bucket $BUCKET --region eu-west-2 --namespace my-production-app\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Example in DAST Testing\nDESCRIPTION: Demonstrates a basic SQL injection attack pattern that DAST tools might use to test application security. This example shows a simple SQL injection payload that attempts to bypass authentication.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day18.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n' OR 1=1 --\n```\n\n----------------------------------------\n\nTITLE: Updated Project Configuration JSON\nDESCRIPTION: JSON output showing the updated project configuration with privileged security settings\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"apiVersion\": \"project.openshift.io/v1\",\n    \"kind\": \"Project\",\n    \"metadata\": {\n        \"annotations\": {\n            \"openshift.io/description\": \"\",\n            \"openshift.io/display-name\": \"\",\n            \"openshift.io/requester\": \"system:admin\",\n            \"openshift.io/sa.scc.mcs\": \"s0:c27,c4\",\n            \"openshift.io/sa.scc.supplemental-groups\": \"1000710000/10000\",\n            \"openshift.io/sa.scc.uid-range\": \"1000710000/10000\"\n        },\n        \"creationTimestamp\": \"2023-03-29T09:23:18Z\",\n        \"labels\": {\n            \"kubernetes.io/metadata.name\": \"scc-ns-test\",\n            \"pod-security.kubernetes.io/audit\": \"privileged\",\n            \"pod-security.kubernetes.io/audit-version\": \"v1.24\",\n            \"pod-security.kubernetes.io/enforce\": \"privileged\",\n            \"pod-security.kubernetes.io/warn\": \"privileged\",\n            \"pod-security.kubernetes.io/warn-version\": \"v1.24\",\n            \"security.openshift.io/scc.podSecurityLabelSync\": \"false\"\n        },\n        \"name\": \"scc-ns-test\",\n        \"resourceVersion\": \"11479286\",\n        \"uid\": \"3f720113-1e30-4a3f-b97e-48f88735e510\"\n    },\n    \"spec\": {\n        \"finalizers\": [\n            \"kubernetes\"\n        ]\n    },\n    \"status\": {\n        \"phase\": \"Active\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating the file database in Linux\nDESCRIPTION: The 'updatedb' command refreshes the file location database used by the 'locate' command, ensuring newly created files can be found.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo updatedb\n```\n\n----------------------------------------\n\nTITLE: Listing Namespaces\nDESCRIPTION: View all available namespaces in the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespaces\n```\n\n----------------------------------------\n\nTITLE: Application Security Group Rule Configuration Example (Markdown Table)\nDESCRIPTION: Demonstrates how Application Security Groups can be used in rules to control communication flow between application tiers using named groups rather than IP addresses.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day33.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Action| Name               | Source     | Destination | Port         |  \n| ------| ------------------ | ---------- | ----------- | ------------ |\n| Allow | AllowInternettoWeb | Internet   | WebServers  | 443(HTTPS)   |\n| Allow | AllowWebToApp      | WebServers | AppServers  | 443(HTTPS)   |\n| Allow | AllowAppToDB       | AppServers | DbServers   | 1443 (MSSQL) |\n| Deny  | DenyAllinbound     | Any        | Any         | Any          |\n```\n\n----------------------------------------\n\nTITLE: Project Structure Definition\nDESCRIPTION: Shows the basic file structure of the project containing only the docker-compose.yml file\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n└── docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Terraform Testing Commands Comparison Table\nDESCRIPTION: A markdown table comparing different built-in Terraform commands used for testing and validating infrastructure code. It includes terraform fmt, terraform validate, terraform plan, and custom validation, along with their descriptions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day62.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command               | Description                                                                                | \n| --------------------- | ------------------------------------------------------------------------------------------ |\n| `terraform fmt`       | Rewrite Terraform configuration files to a canonical format and style.                     | \n| `terraform validate`  | Validates the configuration files in a directory, referring only to the configuration      | \n| `terraform plan`      | Creates an execution plan, which lets you preview the changes that Terraform plans to make | \n| Custom validation     | Validation of your input variables to ensure they match what you would expect them to be   |\n```\n\n----------------------------------------\n\nTITLE: Generating Strong Encryption Keys with OpenSSL\nDESCRIPTION: Command-line example using OpenSSL to generate a strong AES-256 encryption key for Enterprise Search. This generates a secure key that can be used in the Enterprise Search configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ openssl enc -aes-256 -P\n\nenter aes-256-cbc encryption password: <a strong password>\nVerifying - enter aes-256-cbc encryption password: <repeat your strong password>\n...\n\nkey=<generated AES key>\n```\n\n----------------------------------------\n\nTITLE: Dropping PostgreSQL Database\nDESCRIPTION: SQL command to drop the dvdrental database.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day65.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP DATABASE dvdrental\n```\n\n----------------------------------------\n\nTITLE: Verifying Pacman Application Deployment\nDESCRIPTION: This command checks the status of all resources in the pacman namespace to verify the deployment of the Pacman application.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl get all -n pacman\n```\n\n----------------------------------------\n\nTITLE: Installing Kubectl via Arkade\nDESCRIPTION: Command to install kubectl CLI tool using the Arkade package manager\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day51.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\narkade get kubectl\n```\n\n----------------------------------------\n\nTITLE: Setting Enterprise Search Password in Docker Compose\nDESCRIPTION: YAML configuration example for setting a custom password for Enterprise Search in the Docker Compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ENT_SEARCH_DEFAULT_PASSWORD: {{some strong password}}\n```\n\n----------------------------------------\n\nTITLE: Network Device IP Address Configuration Table in Markdown\nDESCRIPTION: A markdown table showing the IP address configuration for network devices in the lab, including a router and four switches.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day26.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Node        | IP Address  |\n| ----------- | ----------- |\n| Router      | 10.10.88.110|\n| Switch1     | 10.10.88.111|\n| Switch2     | 10.10.88.112|\n| Switch3     | 10.10.88.113|\n| Switch4     | 10.10.88.114|\n```\n\n----------------------------------------\n\nTITLE: Finding files with locate in Linux\nDESCRIPTION: The 'locate' command searches for files in the database. If the file isn't found, update the database with 'sudo updatedb' and try again.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nlocate Day15\n```\n\n----------------------------------------\n\nTITLE: Redirecting Output with > and >> Operators in Linux\nDESCRIPTION: Shows how to redirect command output to files using > (overwrite) and >> (append) operators. This is essential for capturing command results and creating logs in Linux.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncommand > output.txt\ncommand >> append_to_file.txt\n```\n\n----------------------------------------\n\nTITLE: Verifying an Unsigned Container Image with Cosign\nDESCRIPTION: Command demonstrating what happens when attempting to verify an unsigned image. The verification fails with an error message indicating no matching signatures were found.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day24.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cosign verify --key=cosign.pub asankov/not-signed\nError: no matching signatures:\n\nmain.go:62: error during command execution: no matching signatures:\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Shell Script File\nDESCRIPTION: Commands to create and open a new shell script file using touch and nano editor.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntouch 90DaysOfDevOps.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nnano 90DaysOfDevOps.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Logging\nDESCRIPTION: Configuration parameters to enable logging in PostgreSQL. These settings turn on the logging collector, specify the log directory, and define the log filename format with timestamps.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day69.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlogging_collector = on\nlog_directory = log\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\n```\n\n----------------------------------------\n\nTITLE: Listing directory contents with ls in Linux\nDESCRIPTION: The 'ls' command lists all files and directories in the current directory, providing a view of what's available in your current location.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Creating a Mount Point and Mounting a Disk\nDESCRIPTION: Commands to create a directory in the /mnt folder and mount a formatted disk to that location, making it accessible to the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir NewDisk\nsudo mount /dev/sdb newdisk\n```\n\n----------------------------------------\n\nTITLE: Referenciando documentación de Azure sobre kernels optimizados\nDESCRIPTION: Enlace a la documentación oficial de Microsoft Azure que describe los kernels de Linux optimizados para Azure, específicamente para ciertas distribuciones.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day31.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[Azure Tuned Kernals](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/endorsed-distros#azure-tuned-kernels)\n```\n\n----------------------------------------\n\nTITLE: Removing untracked files with warning\nDESCRIPTION: Demonstrates the git clean command which provides a warning before removing untracked files from the working directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day39.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit clean\n```\n\n----------------------------------------\n\nTITLE: Project Structure Using Markdown Table\nDESCRIPTION: A markdown table showing the curriculum structure with topics, authors, dates, and social media handles for the 90 Days of DevOps course.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Topic                                  | Author                              | Date                | Twitter Handle                                                                                  |\n| -------------------------------------- | ----------------------------------- | ------------------- | ----------------------------------------------------------------------------------------------- |\n| DevSecOps                              | Michael Cade                        | 1st Jan - 6th Jan   | [@MichaelCade1](https://twitter.com/MichaelCade1)                                               |\n| Secure Coding                          | Prateek Jain                        | 7th Jan - 13th Jan  | [@PrateekJainDev](https://twitter.com/PrateekJainDev)                                           |\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Keys in Enterprise Search YAML\nDESCRIPTION: YAML configuration showing two formats for specifying encryption keys in enterprise-search.yml. Keys are required for initial startup and can be specified either as a list or array.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys:\n  - my_first_encryption_key\n  - my_second_encryption_key\n  - ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_management.encryption_keys: [my_first_encryption_key, my_second_encryption_key, ...]\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS in Vault configuration\nDESCRIPTION: A configuration setting to disable TLS for testing environments. This should not be used in production as it creates an insecure environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day36.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntls_disable = true\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Role for Application Management in OpenShift\nDESCRIPTION: YAML definition for a custom role 'app-mgr' that grants permissions for deploying and managing applications in the 'rbac-test-ns' namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: app-mgr\n  namespace: rbac-test-ns\nrules:\n- apiGroups: [\"project.openshift.io\"]\n  resources: [\"projects\"]\n  verbs: [\"get\"]\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"endpoints\", \"persistentvolumeclaims\", \"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\", \"statefulsets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n```\n\n----------------------------------------\n\nTITLE: Saving changes and exiting vim using write and quit command\nDESCRIPTION: Shows the command sequence to save changes and exit vim. The user must press escape to enter command mode, then type :wq to write (save) and quit.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day17.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n:wq\n```\n\n----------------------------------------\n\nTITLE: Using Connect-AzAccount in PowerShell to Connect to Azure Subscription\nDESCRIPTION: The PowerShell command Connect-AzAccount is used to authenticate and connect to an Azure subscription, allowing administrators to manage Azure resources through PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day33.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount\n```\n\n----------------------------------------\n\nTITLE: User Creation with Password Setting\nDESCRIPTION: An expanded bash script that creates a user account and sets a password. It takes the username as the first argument and password as the second, using chpasswd to set the password.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n# Bir kullanıcı komut satırı argümanı olarak iletilmiş olmalıdır.\necho \"$1 user account being created.\"\n\n# Kullanıcı olusturma.\nsudo useradd -m \"$1\"\n\n# Şifre komut satırı argümanı olarak geçilebilir.\n# Kullanıcı için şifre ayarlanır.\nsudo chpasswd <<< \"$1\":\"$2\"\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version in PowerShell\nDESCRIPTION: Use this command in PowerShell to check the installed version of Git on a Windows machine.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day36.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Multi-Container Docker Compose Configuration\nDESCRIPTION: A more complex Docker Compose configuration defining multiple services including a Node.js application, MongoDB database, and Redis cache with interconnected dependencies.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day52.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  app:\n    build: ./app\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - mongo\n      - redis\n    environment:\n      - NODE_ENV=production\n      - MONGO_URL=mongodb://mongo:27017/myapp\n      - REDIS_URL=redis://redis:6379\n    volumes:\n      - ./app:/app\n    networks:\n      - webnet\n\n  mongo:\n    image: mongo:latest\n    volumes:\n      - mongodb_data:/data/db\n    networks:\n      - webnet\n\n  redis:\n    image: redis:alpine\n    volumes:\n      - redis_data:/data\n    networks:\n      - webnet\n\nvolumes:\n  mongodb_data:\n  redis_data:\n\nnetworks:\n  webnet:\n```\n\n----------------------------------------\n\nTITLE: Removing Files and Directories with rm Command in Linux\nDESCRIPTION: Demonstrates using the rm command to delete files and directories. Includes the -r flag for recursive deletion of directories and their contents, with a caution about its irreversible nature.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm file_to_delete.txt\nrm -r directory_to_delete\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pointer Usage in Go\nDESCRIPTION: This snippet demonstrates the difference between printing a variable with and without the & operator. It shows how using & returns the memory address of the variable instead of its value.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day12.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Println(TwitterName)\nfmt.Println(&TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Executing Azure CLI Login Command for Authentication\nDESCRIPTION: Command to log into Azure CLI which opens a browser for authentication. This is used to authenticate before running PowerShell scripts for resource provisioning.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day34.md#2025-04-17_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Using Here Documents in Bash\nDESCRIPTION: Shows using a here document ('heredoc') to provide input to a command. This example sends a multi-line text block directly to the 'cat' command, which then outputs it to the terminal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day44.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF\nThis is a multi-line\ntext block\nEOF\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Go Program\nDESCRIPTION: A basic Go program that prints 'Hello #90DaysOfDevOps' to the terminal. The code demonstrates the fundamental structure of a Go program including package declaration, imports, and the main function.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day09.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello #90DaysOfDevOps\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vagrant for CentOS 7 VM\nDESCRIPTION: Vagrant configuration file to set up a CentOS 7 virtual machine with 8GB RAM and 4 CPUs using VirtualBox provider.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day06.md#2025-04-17_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"centos/7\"\n  config.vm.provider :virtualbox do |v|\n   v.memory  = 8096\n   v.cpus    = 4\nend\nend\n```\n\n----------------------------------------\n\nTITLE: Deploying ELK Stack with Docker Compose\nDESCRIPTION: This bash command deploys the ELK stack using Docker Compose. It creates a network and starts the defined services in detached mode.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\nCreating network \"elasticsearch-logstash-kibana_elastic\" with driver \"bridge\"\nCreating es ... done\nCreating log ... done\nCreating kib ... done\n```\n\n----------------------------------------\n\nTITLE: Container Status Verification\nDESCRIPTION: Docker ps command output showing running containers with their port mappings and status\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS                                                                                            NAMES\n173f0634ed33        logstash:7.8.0        \"/usr/local/bin/dock…\"   43 seconds ago      Up 41 seconds             0.0.0.0:5000->5000/tcp, 0.0.0.0:5044->5044/tcp, 0.0.0.0:9600->9600/tcp, 0.0.0.0:5000->5000/udp   log\nb448fd3e9b30        kibana:7.8.0          \"/usr/local/bin/dumb…\"   43 seconds ago      Up 42 seconds             0.0.0.0:5601->5601/tcp                                                                           kib\n366d358fb03d        elasticsearch:7.8.0   \"/tini -- /usr/local…\"   43 seconds ago      Up 42 seconds (healthy)   0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp                                                   es\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair for GitHub Authentication\nDESCRIPTION: Commands to create a new SSH key pair, with an email address as an identifier, and then start the SSH agent to manage your keys.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Docker Container\nDESCRIPTION: Command to run the Hello World Docker container, which prints a message and exits.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day44.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Adding timestamp format to bash profile in Linux\nDESCRIPTION: This command adds the timestamp format setting to your bash profile, making it persistent across sessions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\necho 'export HISTTIMEFORMAT=\"%d-%m-%Y %T \"' >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL and Docker Setup Note\nDESCRIPTION: Note about using PostgreSQL with Docker for practical examples. Requires Docker Desktop installation and pgAdmin for database management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day63.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDocker Desktop required: https://www.docker.com/products/docker-desktop/\\npgAdmin required: https://www.pgadmin.org/\n```\n\n----------------------------------------\n\nTITLE: Installing Oh My ZSH\nDESCRIPTION: Command to install Oh My ZSH framework using curl\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day20.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to PDF using XeLaTeX\nDESCRIPTION: Pandoc command to convert multiple markdown files into a PDF document using XeLaTeX as the PDF engine and GitHub-flavored markdown as the source format.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/publishing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npandoc --output test.pdf --from gfm --pdf-engine=xelatex --to latex *.md\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into PostgreSQL Table\nDESCRIPTION: SQL INSERT statement that adds a new staff member to the staff table. The statement specifies values for all columns in the table, including a foreign key reference to the address table.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO staff(\nstaff_id, first_name, last_name, address_id, \nemail, store_id, active, username, password, last_update, picture)\nVALUES\n(999, 'Andrew', 'Pruski', 1, 'andrew.pruski@90daysofdevops.com', \n'2', 'T', 'apruski', 'Testing1122', CURRENT_DATE, '');\n```\n\n----------------------------------------\n\nTITLE: Project Structure Output\nDESCRIPTION: Shows the basic project structure with a single docker-compose.yml file\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n└── docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Package Vulnerability List - Java Dependencies\nDESCRIPTION: Security vulnerabilities in Java-based dependencies including Log4j and Logback libraries. Lists affected versions and associated CVE references.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day14.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nlog4j-api         2.13.3                                               java-archive  CVE-2021-45105       Medium\nlog4j-api         2.13.3                                               java-archive  CVE-2021-44832       Medium\nlog4j-to-slf4j    2.13.3                                               java-archive  CVE-2021-44832       Medium\nlogback-core      1.2.3                     1.2.9                      java-archive  GHSA-668q-qrv7-99fm  Medium\n```\n\n----------------------------------------\n\nTITLE: Restarting Filebeat Container\nDESCRIPTION: Command to restart the Filebeat container after making configuration changes to apply the modifications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml restart filebeat\n```\n\n----------------------------------------\n\nTITLE: Authenticating with MSAL in PowerShell for Azure\nDESCRIPTION: This PowerShell script authenticates using MSAL with the specified tenant and client ID. It acquires a token for the Management API and retrieves an access token to use in subsequent API calls.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day05.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Get Token for Subscription\n$MsalToken = Get-MsalToken -TenantId $TenantID -ClientId $ClientID\n$AccessToken = $MsalToken.AccessToken\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Address Before Update\nDESCRIPTION: SQL query to view a staff member's current email address before updating it, filtering for staff with first_name 'Andrew'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT s.first_name, s.last_name, s.email\nFROM staff s\nWHERE first_name = 'Andrew'\n```\n\n----------------------------------------\n\nTITLE: Checking KinD Cluster Nodes\nDESCRIPTION: Command to verify that the Kubernetes cluster was created successfully by displaying node information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day83.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -o wide\n```\n\n----------------------------------------\n\nTITLE: Restarting Filebeat Container After Configuration Changes\nDESCRIPTION: Command to restart the Filebeat container after making changes to its configuration. This ensures that the new configuration is applied.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml restart filebeat\n```\n\n----------------------------------------\n\nTITLE: IPv4 Address List - Network Configuration\nDESCRIPTION: A collection of five IPv4 addresses in the 192.168.169.x private network range. These addresses appear to be part of the same subnet and could be used for local network device configuration or documentation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Networking/backup.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n192.168.169.115\n192.168.169.178\n192.168.169.193\n192.168.169.125\n192.168.169.197\n```\n\n----------------------------------------\n\nTITLE: Project Structure for ELK Stack Docker Compose Setup\nDESCRIPTION: Shows the directory structure of the ELK stack Docker Compose project, containing only the docker-compose.yml file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n└── docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Creating arp Table Entry in Namespace\nDESCRIPTION: Command to check the ARP table in a namespace. This shows how each namespace maintains its own ARP cache for network address resolution.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day10.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec red arp\n```\n\n----------------------------------------\n\nTITLE: Generating AES-256 Encryption Key via OpenSSL\nDESCRIPTION: Console command to generate a strong encryption key using OpenSSL's AES-256 cipher. Requires user input of a strong password.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ openssl enc -aes-256 -P\n\nenter aes-256-cbc encryption password: <a strong password>\nVerifying - enter aes-256-cbc encryption password: <repeat your strong password>\n...\n\nkey=<generated AES key>\n```\n\n----------------------------------------\n\nTITLE: Azure Cache for Redis Interface\nDESCRIPTION: Screenshot of Azure Cache for Redis interface, demonstrating the in-memory data store service based on Redis software.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day32.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![](Images/Day32_Cloud10.png)\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Cluster Nodes with kubectl\nDESCRIPTION: This command displays all nodes in the Kubernetes cluster along with their status information, confirming the successful deployment of the 3-node cluster (1 control plane and 2 worker nodes).\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day52.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Making a Script Executable with chmod in Linux\nDESCRIPTION: This command adds execute permission for the user (owner) of the shell script 'hello.sh', making it possible to run the script directly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day49.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchmod u+x hello.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Integration Reporting in Python with Hedra\nDESCRIPTION: This code snippet demonstrates how to set up multiple reporting integrations (JSON, Datadog, Kafka) for performance test results using Hedra. It also includes a method to calculate and report the median API vs UI timing ratio.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day16.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport statistics\nfrom hedra import (\n    Workflow, \n    step\n    Metric\n)\nfrom hedra.core.engines import (\n    HTTPResult,\n    HTTP2Result,\n    PlaywrightResult\n)\nfrom hedra.reporting (\n    JSONResults,\n    DatadogResults,\n    KafkaResults\n)\nfrom typing import List\n\n\n@depends(Test)\nclass SubmitResults(Workflow):\n    reporters=[\n        JSONResults(\n            path='./events.json'\n        ),\n        DatadogResults(\n            api_key=os.getenv('DD_API_KEY'),\n            app_key=os.getenv('DD_APP_KEY')\n        ),\n        KafkaResults(\n            host=os.getenv('KAFKA_HOST'),\n            topic='myapi_testing_results'\n        )\n    ]\n\n    @step()\n    async def ui_vs_api_timing(\n        self,\n        results: List[\n            HTTPResult |\n            HTTP2Result |\n            PlaywrightResult\n        ]\n    ) -> Metric['median_api_vs_ui_time_ratio']:\n\n        avg_api_timing = statistics.median([\n            result.total_time for result in results if isinstance(\n                result,\n                (HTTPResult, HTTP2Result)\n            )\n        ])\n\n        ui_timings = statistics.median([\n            result.total_time for result in results if isinstance(\n                result,\n                PlaywrightResult\n            )\n        ])\n\n        return avg_api_timing/ui_timings\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform using arkade CLI\nDESCRIPTION: Demonstrates how to install Terraform using the arkade CLI tool, which simplifies the installation of various DevOps tools and applications.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day57.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narkade get terraform\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Base Command\nDESCRIPTION: The base command for Azure CLI that precedes all Azure CLI operations\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day33.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Ansible Role Example\nDESCRIPTION: Example playbook showing how to use the role with parameters. Demonstrates basic role inclusion with a variable parameter.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Configmgmt/ansible-scenario7/roles/mysql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: IPv4 Address List in 192.168.169.x Range\nDESCRIPTION: List of 5 IPv4 addresses from the private address space, specifically in the 192.168.169.x subnet. Each IP is on its own line.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Networking/backup.txt#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n192.168.169.115\n192.168.169.178\n192.168.169.193\n192.168.169.125\n192.168.169.197\n```\n\n----------------------------------------\n\nTITLE: Creative Commons License Declaration in Markdown\nDESCRIPTION: Markdown code block declaring the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License for the repository content\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nShield: [![CC BY-NC-SA 4.0][cc-by-nc-sa-shield]][cc-by-nc-sa]\n\nThis work is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License][cc-by-nc-sa].\n\n[![CC BY-NC-SA 4.0][cc-by-nc-sa-image]][cc-by-nc-sa]\n\n[cc-by-nc-sa]: http://creativecommons.org/licenses/by-nc-sa/4.0/\n[cc-by-nc-sa-image]: https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png\n[cc-by-nc-sa-shield]: https://img.shields.io/badge/License-CC%20BY--NC--SA%204.0-lightgrey.svg\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Limits with Docker CLI\nDESCRIPTION: Shows how to set CPU limits for a Docker container using the Docker CLI. This allocates a specific amount of CPU resources to the container, preventing CPU exhaustion on the host.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nginx --cpus=\"0.5\" nginx\n```\n\n----------------------------------------\n\nTITLE: Example OAuth API Server Audit Log Output\nDESCRIPTION: Shows an example of the JSON-formatted output from an OAuth API server audit log, including event details and user information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day61.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\"kind\":\"Event\",\"apiVersion\":\"audit.k8s.io/v1\",\"level\":\"Metadata\",\"auditID\":\"6472c130-436a-4454-9bf9-77b6066d8ce2\",\"stage\":\"ResponseComplete\",\"requestURI\":\"/apis/oauth.openshift.io/v1/oauthclients/console\",\"verb\":\"get\",\"user\":{\"username\":\"system:serviceaccount:openshift-console-operator:console-operator\",\"groups\":[\"system:serviceaccounts\",\"system:serviceaccounts:openshift-console-operator\",\"system:authenticated\"],\"extra\":{\"authentication.kubernetes.io/pod-name\":[\"console-operator-7cc8457b5b-rpz7f\"],\"authentication.kubernetes.io/pod-uid\":[\"4b73b593-9cde-4ae4-a8f7-00e7f7ee7902\"]}},\"sourceIPs\":[\"192.168.200.181\",\"10.129.0.2\"],\"userAgent\":\"console/v0.0.0 (linux/amd64) kubernetes/$Format\",\"objectRef\":{\"resource\":\"oauthclients\",\"name\":\"console\",\"apiGroup\":\"oauth.openshift.io\",\"apiVersion\":\"v1\"},\"responseStatus\":{\"metadata\":{},\"code\":200},\"requestReceivedTimestamp\":\"2023-03-22T23:35:00.970020Z\",\"stageTimestamp\":\"2023-03-22T23:35:00.972703Z\",\"annotations\":{\"authorization.k8s.io/decision\":\"allow\",\"authorization.k8s.io/reason\":\"RBAC: allowed by ClusterRoleBinding \\\"console-operator\\\" of ClusterRole \\\"console-operator\\\" to ServiceAccount \\\"console-operator/openshift-console-operator\\\"\"}}\n```\n\n----------------------------------------\n\nTITLE: Building a Go Plugin for httpfuzz\nDESCRIPTION: Command to build a Go plugin with the buildmode=plugin flag. This creates a shared object file that can be loaded by httpfuzz at runtime to extend its functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day17.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo build -buildmode=plugin -o log exampleplugins/log/log.go\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Detailed Message\nDESCRIPTION: Shows how to open a text editor for writing a detailed commit message using 'git commit' without the -m flag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Switching to root user in Linux\nDESCRIPTION: The 'sudo su' command gives you a shell with root user privileges. Use 'exit' to return to your normal user account.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo su\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Flask for APM Integration\nDESCRIPTION: Example configuration for integrating a Python Flask application with Elastic APM. This snippet sets up the ElasticAPM extension with basic service name and server URL configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport elasticapm\nfrom elasticapm.contrib.flask import ElasticAPM\n\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['ELASTIC_APM'] = {\n    # Set required service name. Allowed characters:\n    # a-z, A-Z, 0-9, -, _, and space\n    'SERVICE_NAME': 'PYTHON_FLASK_TEST_APP',\n\n    # Set custom APM Server URL (default: http://localhost:8200)\n    'SERVER_URL': 'http://apm-server:8200',\n\n    'DEBUG': True,\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing ELK Stack Containers\nDESCRIPTION: This bash command stops and removes the ELK stack containers that were deployed using Docker Compose.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down\n```\n\n----------------------------------------\n\nTITLE: BASH Script for File Comparison\nDESCRIPTION: Script comparing two files using the -ef operator. It demonstrates how to check if two file paths point to the same inode on the filesystem.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day48.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nif [ ~/randomfile -ef ~/randomfile2 ]\nthen\n    echo \"Same file\"\nelse\n    echo \"Different files\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Running Filebeat with Docker Compose\nDESCRIPTION: This command demonstrates how to include Filebeat in the stack by running Docker Compose with an additional file reference. It combines the main docker-compose.yml with the Filebeat-specific compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Creating a Script File in Linux\nDESCRIPTION: This command creates a shell script file named 'hello.sh' containing a simple command to print 'Hello, World!' to the console.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day49.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho '#!/bin/bash\\necho \"Hello, World!\"' > hello.sh\n```\n\n----------------------------------------\n\nTITLE: Go Program Build Command\nDESCRIPTION: Command to compile the Go program into an executable binary\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day08.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo build main.go\n```\n\n----------------------------------------\n\nTITLE: Extracting User Accounts from /etc/passwd\nDESCRIPTION: Uses the cut command to extract the first field (username) from each line of the /etc/passwd file, listing all system users.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day15.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncut -d: -f1 < /etc/passwd\n```\n\n----------------------------------------\n\nTITLE: Installing Helm on a Linux System\nDESCRIPTION: Shell commands for installing Helm, the package manager for Kubernetes. This script downloads the Helm installer, makes it executable, and runs it to install the latest version of Helm.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day54.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n\nchmod 700 get_helm.sh\n\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Removing Software Packages with apt\nDESCRIPTION: Command to uninstall and remove a software package from the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove figlet\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Config File\nDESCRIPTION: Command to create an SSH config file that configures connection settings for GitHub, including automatic key adding and server identification.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day09.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch ~/.ssh/config\n```\n\n----------------------------------------\n\nTITLE: Basic Pointer Usage in Go\nDESCRIPTION: Demonstrates how to use fmt.Scan to get user input with pointers in Go\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day12.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Scan(&TwitterName)\n```\n\n----------------------------------------\n\nTITLE: Setting timestamp format for command history in Linux\nDESCRIPTION: This variable sets the format for timestamps in command history, showing when each command was executed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nHISTTIMEFORMAT=\"%d-%m-%Y %T \"\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository\nDESCRIPTION: Command to push your changes and branch to your forked repository on GitHub. This uploads your local commits to your remote fork.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day29.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin {branch-name}\n```\n\n----------------------------------------\n\nTITLE: Azure Network Security Group Rules Table\nDESCRIPTION: Example configuration showing Network Security Group rules with priorities, source/destination addresses, ports and actions for controlling network traffic in Azure.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day33.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n| Description      | Priority |   Source Address   | Source Port | Destination Address | Destination Port | Action | \n| -----------      | ---------|   --------------   | ----------- | ------------------- | ---------------- | ------ |\n| Inbound 443      | 1005     | *                  | *           | *                   | 443              | Allow  |\n| ILB              | 1010     | Azure LoadBalancer | *           | *                   | 10000            | Allow  |\n| Deny All Inbound | 4000     | *                  | *           | *                   | *                | DENY   |\n```\n\n----------------------------------------\n\nTITLE: Accessing IBM Quantum Hardware with Qiskit\nDESCRIPTION: Demonstrates how to connect to IBM Quantum Experience, select a real quantum device, and execute a quantum circuit on actual quantum hardware. The snippet includes authentication, device selection, and job execution with result visualization.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day12.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qiskit import IBMQ, execute\nfrom qiskit.providers.ibmq import least_busy\nfrom qiskit.tools.monitor import job_monitor\n\n# Load your IBM Quantum account\nIBMQ.save_account('YOUR_API_TOKEN')\nIBMQ.load_account()\n\n# Get the provider and select a backend\nprovider = IBMQ.get_provider(hub='ibm-q')\n\n# Choose the least busy backend with at least 2 qubits\nbackends = provider.backends(filters=lambda x: x.configuration().n_qubits >= 2 and \n                              not x.configuration().simulator and x.status().operational==True)\nbackend = least_busy(backends)\nprint(f\"We'll use the {backend.name()} device\")\n\n# Run the circuit on the selected quantum computer\njob = execute(qc, backend=backend, shots=1024)\n\n# Monitor the job status\njob_monitor(job)\n\n# Get the results\nresult = job.result()\ncounts = result.get_counts(qc)\nprint(counts)\n\n# Plot the results\nplot_histogram(counts)\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Table by First Name\nDESCRIPTION: SQL query to select all records from the actor table where the first_name is 'Nick'. This demonstrates a query that may benefit from an index on the first_name column.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day67.md#2025-04-17_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM actor WHERE first_name = 'Nick'\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook Usage\nDESCRIPTION: Demonstrates how to include an Ansible role in a playbook with a variable being passed as a parameter. The example shows a basic playbook structure targeting 'servers' and incorporating a role with a parameter 'x' set to 42.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Configmgmt/ansible-scenario7/roles/mysql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Creating a Wordlist for Fuzzing\nDESCRIPTION: A sample wordlist containing data that will be substituted into the request template. Each line represents a different input value that will be used in the fuzzing process.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day17.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSOME_NAME\nMozilla/5.0 (Linux; Android 7.0; SM-G930VC Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.83 Mobile Safari/537.36\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Limits with Docker CLI\nDESCRIPTION: Demonstrates how to set memory limits for a Docker container using the Docker CLI. This helps prevent excessive memory consumption that could lead to denial of service on the host.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name nginx --memory=\"500m\" nginx\n```\n\n----------------------------------------\n\nTITLE: Installing Trivy Operator for Continuous Container Vulnerability Scanning\nDESCRIPTION: Helm commands to add the Aqua Security repository and install the Trivy Operator in a Kubernetes cluster. The operator continuously monitors container images for vulnerabilities and creates reports accessible via Kubernetes resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day32.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add aqua https://aquasecurity.github.io/helm-charts/\nhelm repo update\nhelm install trivy-operator aqua/trivy-operator \\\n  --namespace trivy-system \\\n  --create-namespace \\\n  --set=\"trivy.ignoreUnfixed=true\" \\\n  --version 0.11.1\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Module for PowerShell Authentication\nDESCRIPTION: This PowerShell command installs the Microsoft Authentication Library (MSAL) module required for authenticating with Azure services. The module allows secure authentication when working with Azure resources.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day05.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module MSAL.PS\n```\n\n----------------------------------------\n\nTITLE: Basic Cisco Device Configuration Commands\nDESCRIPTION: Essential Cisco IOS commands for configuring interface with DHCP and verifying status\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day27.md#2025-04-17_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nenable\nconfig t\nint gi0/0\nip add dhcp \nno sh \nexit \nexit\nsh ip int br\n```\n\n----------------------------------------\n\nTITLE: Prometheus Service Status Output\nDESCRIPTION: Example output showing the Prometheus service details including its ClusterIP and port.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nprometheus   ClusterIP   10.43.234.212   <none>        9090/TCP   25h\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remote Configuration\nDESCRIPTION: Command to verify the configured remote repositories for the current Git project.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_7\n\nLANGUAGE: git\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Creates a new Git repository in the current directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day38.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Example Playbook Usage for Ansible Role\nDESCRIPTION: Demonstrates how to include and use the Ansible role in a playbook. It shows passing variables as parameters to the role.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Configmgmt/ansible-scenario7/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Checking system CPU information in Linux\nDESCRIPTION: This command shows CPU information using the 'cat /proc/cpuinfo' command in Linux, which displays detailed information about the CPU cores on the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day02.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/cpuinfo\n```\n\n----------------------------------------\n\nTITLE: Viewing Container Memory Usage Statistics\nDESCRIPTION: Shows how to check memory usage statistics for Docker containers using the stats command. This provides real-time monitoring of container resource consumption.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day27.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker stats\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Filebeat\nDESCRIPTION: This command runs Docker Compose from the root of the repository, including Filebeat in the stack by referencing the filebeat-compose.yml file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Column Definition with Default Value\nDESCRIPTION: Shows how to define a timestamp column with a default value in PostgreSQL. The last_update column will automatically use the current time if no value is provided during insertion.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nlast_update timestamp without time zone NOT NULL DEFAULT 'now()'\n```\n\n----------------------------------------\n\nTITLE: Executing a Shell Script in Linux\nDESCRIPTION: This command executes the shell script 'hello.sh' from the current directory. The script must have executable permissions for this to work.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day49.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./hello.sh\n```\n\n----------------------------------------\n\nTITLE: File Existence Check in Bash\nDESCRIPTION: A script that checks if a specific file exists in the directory using bash file condition tests.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day19.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nFILE=\"90DaysOfDevOps.txt\"\nif [ -f \"$FILE\" ]\nthen\n  echo \"$FILE is a file\"\nelse\n  echo \"$FILE is not a file\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Istio System Services Status Output\nDESCRIPTION: Example output showing all services in the istio-system namespace with their types, IPs, and ports.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nNAME                   TYPE           CLUSTER-IP      EXTERNAL-IP    PORT(S)                                                                      AGE\nistiod                 ClusterIP      10.43.249.242   <none>         15010/TCP,15012/TCP,443/TCP,15014/TCP                                        7d\nistio-egressgateway    ClusterIP      10.43.75.47     <none>         80/TCP,443/TCP                                                               7d\nistio-ingressgateway   LoadBalancer   10.43.51.40     [HAHA.NO.NICE.TRY]   15021:31000/TCP,80:32697/TCP,443:30834/TCP,31400:30953/TCP,15443:30733/TCP   7d\ngrafana                ClusterIP      10.43.115.239   <none>         3000/TCP                                                                     32h\ntracing                ClusterIP      10.43.237.214   <none>         80/TCP,16685/TCP                                                             32h\nzipkin                 ClusterIP      10.43.241.104   <none>         9411/TCP                                                                     32h\njaeger-collector       ClusterIP      10.43.43.212    <none>         14268/TCP,14250/TCP,9411/TCP                                                 32h\nkiali                  ClusterIP      10.43.51.161    <none>         20001/TCP,9090/TCP                                                           32h\nprometheus             ClusterIP      10.43.234.212   <none>         9090/TCP                                                                     32h\n```\n\n----------------------------------------\n\nTITLE: Creating AWS EC2 Instance Resource\nDESCRIPTION: Resource block defining an AWS EC2 instance with user data for installing and configuring a web server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day58.md#2025-04-17_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"90daysofdevops\" {\n  ami               = data.aws_ami.instance_id.id\n  instance_type     = \"t2.micro\"\n  availability_zone = \"us-west-2a\"\n  security_groups   = [aws_security_group.allow_web.name]\n  user_data         = <<-EOF\n                #! /bin/bash\n                sudo yum update\n                sudo yum install -y httpd\n                sudo systemctl start httpd\n                sudo systemctl enable httpd\n                echo \"\n<h1>Deployed via Terraform</h1>\n\n\" | sudo tee /var/www/html/index.html\n        EOF\n  tags = {\n    Name = \"Created by Terraform\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash Pipeline for Logspout\nDESCRIPTION: Logstash pipeline configuration to enable UDP input and set the input codec to JSON for receiving logs from Logspout.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/logspout/README.md#2025-04-17_snippet_1\n\nLANGUAGE: logstash\nCODE:\n```\ninput {\n  udp {\n    port  => 5000\n    codec => json\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Unmounting a Disk\nDESCRIPTION: Command to safely unmount a disk from the system before physically removing it.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day16.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo umount /dev/sdb\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook Usage\nDESCRIPTION: Demonstrates how to include the role in an Ansible playbook with variables passed as parameters. The example shows a basic pattern for incorporating the role into a playbook that targets servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Configmgmt/ansible-scenario7/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Terminal keyboard shortcut for moving cursor to start of line\nDESCRIPTION: This keyboard shortcut demonstrates how to move the cursor to the beginning of the command line using Ctrl+a in a Linux terminal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day02.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCtrl+a\n```\n\n----------------------------------------\n\nTITLE: Viewing Global Git Configuration\nDESCRIPTION: This command displays the current global Git configuration settings.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day36.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global -e\n```\n\n----------------------------------------\n\nTITLE: Editing ZSH Configuration\nDESCRIPTION: Command to open the ZSH configuration file for editing.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day20.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Restarting Metricbeat Container After Configuration Changes\nDESCRIPTION: Command to restart the Metricbeat container after making changes to its configuration. This is necessary for any modifications to the metricbeat.yml file to take effect.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml restart metricbeat\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Repository in Ubuntu 20.04 WSL\nDESCRIPTION: Command to add the Podman repository to Ubuntu 20.04's apt sources list in WSL2. This first step allows the system to locate and download Podman packages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day48.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\necho \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /\" |\nsudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list\n```\n\n----------------------------------------\n\nTITLE: Listing Block Devices on Linux System\nDESCRIPTION: The lsblk command lists all block devices on a Linux system, showing disk drives and their partitions. In this example, sda is the physical disk with sda1, sda2, and sda3 representing its partitions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlsblk\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository Using Git\nDESCRIPTION: This command demonstrates how to clone a GitHub repository to your local machine using the HTTPS URL. After forking a repository on GitHub, this is typically the next step to get a local copy for making changes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day40.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Terminal keyboard shortcut for moving cursor to end of line\nDESCRIPTION: This keyboard shortcut shows how to move the cursor to the end of the command line using Ctrl+e in a Linux terminal.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day02.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCtrl+e\n```\n\n----------------------------------------\n\nTITLE: Checking system uptime in Linux\nDESCRIPTION: This command displays system uptime information using the 'uptime' utility, showing how long the system has been running, number of users, and system load averages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day02.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuptime\n```\n\n----------------------------------------\n\nTITLE: Adding Search Form to Bootcamps Index View\nDESCRIPTION: Implementing a search form in the Bootcamps index view that submits to the insecure search action.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day06.md#2025-04-17_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Search</h1>\n<%= form_tag(bootcamps_path, method: \"get\", id: \"search-form\") do %>\n  <%= text_field_tag :search, params[:search], placeholder: \"Search Bootcamps\" %>\n  <%= submit_tag \"Search Bootcamps\"%>\n<% end %>\n\n<h1>Listing Bootcamps</h1>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Sleep Command\nDESCRIPTION: This command creates and runs a new Ubuntu container in detached mode with a sleep infinity command to keep the container running in the background for testing and inspection purposes.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day47.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dt ubuntu sleep infinity\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Home Page\nDESCRIPTION: HTML template for the blog's home page, displaying a list of blog post titles.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day48.md#2025-04-17_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Blog</title>\n</head>\n<body>\n    <h1>My Blog</h1>\n    {% for post in posts %}\n    <h2><a href=\"/posts/{{ post }}\">{{ post }}</a></h2>\n    {% endfor %}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Switching Between OpenShift Projects using CLI\nDESCRIPTION: This command switches the active project to the specified project name using the 'oc project' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ oc project my-sample-project\n```\n\n----------------------------------------\n\nTITLE: Viewing Brief Git Status\nDESCRIPTION: Displays a condensed status of the working directory and staging area.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day38.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit status -s\n```\n\n----------------------------------------\n\nTITLE: BASH Script with Multiple Arithmetic Comparisons\nDESCRIPTION: An expanded script showing multiple arithmetic comparison operations in BASH including -eq, -ne, -gt, -ge, -lt, and -le to check various numeric relationships.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day48.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nA=4\n\nif [ $A -eq 4 ]\nthen\n    echo \"$A is equal to 4\"\nfi\n\nif [ $A -ne 3 ]\nthen\n    echo \"$A is not equal to 3\"\nfi\n\nif [ $A -gt 3 ]\nthen\n    echo \"$A is greater than 3\"\nfi\n\nif [ $A -ge 4 ]\nthen\n    echo \"$A is greater than or equal to 4\"\nfi\n\nif [ $A -lt 5 ]\nthen\n    echo \"$A is less than 5\"\nfi\n\nif [ $A -le 4 ]\nthen\n    echo \"$A is less than or equal to 4\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Viewing Detailed Resource Information with kubectl in Kubernetes\nDESCRIPTION: Command for obtaining detailed information about resources in a Kubernetes cluster. This provides more comprehensive information than the 'get' command, showing the state of resources in detail.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day51.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe nodes\n```\n\n----------------------------------------\n\nTITLE: Azure Application Security Group Rule Configuration\nDESCRIPTION: Example configuration showing ASG-based rules for controlling application-level network access between web servers, application servers, and database servers.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day33.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Action| Name               | Source     | Destination | Port         |  \n| ------| ------------------ | ---------- | ----------- | ------------ |\n| Allow | AllowInternettoWeb | Internet   | WebServers  | 443(HTTPS)   |\n| Allow | AllowWebToApp      | WebServers | AppServers  | 443(HTTPS)   |\n| Allow | AllowAppToDB       | AppServers | DbServers   | 1443 (MSSQL) |\n| Deny  | DenyAllinbound     | Any        | Any         | Any          |\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container with Terraform\nDESCRIPTION: Terraform resource configuration that creates a Docker container from the previously defined Nginx image. It specifies the container name, exposed ports, and restart policy.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day13.md#2025-04-17_snippet_4\n\nLANGUAGE: HCL (Terraform)\nCODE:\n```\nresource \"docker_container\" \"nginx\" {\n  image = docker_image.nginx.latest\n  name  = \"tutorial\"\n  ports {\n    internal = 80\n    external = 8000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sequential Scan in PostgreSQL\nDESCRIPTION: SQL command to disable sequential scans in PostgreSQL, forcing the query optimizer to use indexes instead. This setting is useful for testing index usage but should not be used in production.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day67.md#2025-04-17_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET enable_seqscan='false'\n```\n\n----------------------------------------\n\nTITLE: Managing Jenkins Pod\nDESCRIPTION: Delete and monitor Jenkins pod status.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod jenkins-0 -n jenkins\nkubectl get pods -n jenkins -w\n```\n\n----------------------------------------\n\nTITLE: Creating a VM with Custom Resources in Multipass\nDESCRIPTION: Command to create a virtual machine with specific CPU, memory, and disk allocations using Multipass.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmultipass launch --name 90DaysOfDevOps --cpus 1 --memory 1G --disk 5G\n```\n\n----------------------------------------\n\nTITLE: Creating Kopia Repository in Google Cloud Storage\nDESCRIPTION: Command to create a new Kopia repository in a Google Cloud Storage bucket.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day86.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config repository create gcs --bucket 90daysofdevops\n```\n\n----------------------------------------\n\nTITLE: Installing Pandoc and LaTeX Dependencies on Linux/WSL2\nDESCRIPTION: Commands to install Pandoc and required LaTeX packages for PDF conversion on Ubuntu/Debian based systems. These tools are necessary for converting markdown to various document formats.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/publishing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update \nsudo apt-get install pandoc\nsudo apt-get install texlive-xetex\nsudo apt-get install texlive-latex-base\nsudo apt-get install texlive-fonts-recommended\nsudo apt-get install texlive-fonts-extra\nsudo apt-get install texlive-latex-extra\n```\n\n----------------------------------------\n\nTITLE: Creating Kanister Restore ActionSet\nDESCRIPTION: Command to create a restore ActionSet using kanctl. It references the previous backup ActionSet to restore data from.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkanctl create actionset -n kanister --action restore --from \"backup-qpnqv\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Secret from Azure Service Principal in PowerShell\nDESCRIPTION: Code to extract and display the client secret from a newly created Service Principal in PowerShell. This secret is only visible at creation time.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day45.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($sp.Secret)\n$UnsecureSecret = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Command to list all running Docker containers, used to verify that the PostgreSQL container is running properly.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker container ls\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Cluster Management Commands\nDESCRIPTION: Various kubectl commands for managing and inspecting resources in a Kubernetes cluster, including namespace creation and resource inspection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day55.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons volumesnapshots,csi-hostpath-driver --apiserver-port=6443 --container-runtime=containerd -p mc-demo --kubernetes-version=1.21.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespace\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pacman-stateful-demo.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n pacman\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pv\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pvc -n pacman\n```\n\n----------------------------------------\n\nTITLE: Listing Block Devices\nDESCRIPTION: This command lists all block devices, showing disk and partition information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlsblk\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with APM Server Extension\nDESCRIPTION: Command to start Docker Compose with the APM Server extension included in the stack. This combines the main docker-compose.yml file with the APM Server specific compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/apm-server/apm-server-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Using Ansible Role in Playbook Example\nDESCRIPTION: Example playbook configuration showing how to include a role with parameters, where x is set to 42 and username.rolename represents the role identifier.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Configmgmt/ansible-scenario4/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: AWX Password Retrieval Command\nDESCRIPTION: Bash command to retrieve the admin password from Kubernetes secrets for AWX deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day69.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret awx-demo-admin-password -o jsonpath=\"{.data.password}\" -n awx| base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Installing Apache Web Server on Linux\nDESCRIPTION: Command to install the Apache2 web server on a Linux system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day18.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install apache2\n```\n\n----------------------------------------\n\nTITLE: Introducing XSS Vulnerability in View Template\nDESCRIPTION: Modifying the Bootcamp show view to use the raw method, which introduces a potential XSS vulnerability.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day06.md#2025-04-17_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<p>\n  <strong>Description:</strong>\n  <%=raw @bootcamp.description %>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Microsoft Word Document\nDESCRIPTION: Pandoc command to convert multiple markdown files into a single Word document using GitHub-flavored markdown as the source format.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/publishing.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npandoc --output test.docx --from gfm -t docx *.md\n```\n\n----------------------------------------\n\nTITLE: Deleting Pacman Namespace in Kubernetes\nDESCRIPTION: Command used to remove the restore operation by deleting the pacman namespace on the standby minikube cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day90.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete ns pacman\n```\n\n----------------------------------------\n\nTITLE: Installing ZSH Auto-suggestions Plugin\nDESCRIPTION: Command to install the auto-suggestions plugin for ZSH. This plugin provides fish-like autosuggestions for ZSH, suggesting commands as you type based on command history.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day20.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n----------------------------------------\n\nTITLE: Deleting and Purging VMs with Multipass\nDESCRIPTION: Commands to delete a virtual machine and permanently remove it from the system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day21.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmultipass delete 90DaysOfDevOps\nmultipass purge\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Program in Python\nDESCRIPTION: A minimal Python script that demonstrates the language's simplicity by printing 'hello world' to the console, illustrating how Python requires less code compared to other languages like Go.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day25.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('hello world')\n```\n\n----------------------------------------\n\nTITLE: Starting Enterprise Search with Docker Compose\nDESCRIPTION: Command to launch Enterprise Search as part of the Elastic Stack using Docker Compose. This combines the base docker-compose.yml with the enterprise-search extension compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/enterprise-search/enterprise-search-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Installing Software with apt Package Manager\nDESCRIPTION: Command to install the figlet program, which generates text banners, using the apt package manager on Ubuntu.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day16.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install figlet\n```\n\n----------------------------------------\n\nTITLE: View Ingress Resources\nDESCRIPTION: Command to list Ingress resources in the pacman namespace\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day55.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get ingress -n pacman\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Alertmanager Access\nDESCRIPTION: Kubectl command to set up port forwarding for accessing Alertmanager on localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/alertmanager-main 9093\n```\n\n----------------------------------------\n\nTITLE: Running Compiled Go Executable\nDESCRIPTION: Command to run the compiled Go executable on a Windows system. This demonstrates how to execute the binary created by the 'go build' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day08.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./main.exe\n```\n\n----------------------------------------\n\nTITLE: Dropping MySQL Database\nDESCRIPTION: This SQL command drops the 'myImportantData' database, simulating data loss to test the restore process.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day88.md#2025-04-17_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\necho \"DROP DATABASE myImportantData;\" |  ${MYSQL_EXEC}\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter API Authentication and Tweeting in Go\nDESCRIPTION: This code snippet demonstrates how to authenticate with the Twitter API using OAuth1 and post a tweet. It defines a Credentials struct for API keys and tokens, creates a helper function to authenticate and initialize the Twitter client, and sends a test tweet with the #90DaysOfDevOps hashtag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day13.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    // other imports\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/dghubble/go-twitter/twitter\"\n    \"github.com/dghubble/oauth1\"\n)\n\n// Credentials stores all of our access/consumer tokens\n// and secret keys needed for authentication against\n// the twitter REST API.\ntype Credentials struct {\n    ConsumerKey       string\n    ConsumerSecret    string\n    AccessToken       string\n    AccessTokenSecret string\n}\n\n// getClient is a helper function that will return a twitter client\n// that we can subsequently use to send tweets, or to stream new tweets\n// this will take in a pointer to a Credential struct which will contain\n// everything needed to authenticate and return a pointer to a twitter Client\n// or an error\nfunc getClient(creds *Credentials) (*twitter.Client, error) {\n    // Pass in your consumer key (API Key) and your Consumer Secret (API Secret)\n    config := oauth1.NewConfig(creds.ConsumerKey, creds.ConsumerSecret)\n    // Pass in your Access Token and your Access Token Secret\n    token := oauth1.NewToken(creds.AccessToken, creds.AccessTokenSecret)\n\n    httpClient := config.Client(oauth1.NoContext, token)\n    client := twitter.NewClient(httpClient)\n\n    // Verify Credentials\n    verifyParams := &twitter.AccountVerifyParams{\n        SkipStatus:   twitter.Bool(true),\n        IncludeEmail: twitter.Bool(true),\n    }\n\n    // we can retrieve the user and verify if the credentials\n    // we have used successfully allow us to log in!\n    user, _, err := client.Accounts.VerifyCredentials(verifyParams)\n    if err != nil {\n        return nil, err\n    }\n\n    log.Printf(\"User's ACCOUNT:\\n%+v\\n\", user)\n    return client, nil\n}\nfunc main() {\n    fmt.Println(\"Go-Twitter Bot v0.01\")\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n\n    client, err := getClient(&creds)\n    if err != nil {\n        log.Println(\"Error getting Twitter Client\")\n        log.Println(err)\n    }\n\n    tweet, resp, err := client.Statuses.Update(\"A Test Tweet from the future, testing a #90DaysOfDevOps Program that tweets, tweet tweet\", nil)\n    if err != nil {\n        log.Println(err)\n    }\n    log.Printf(\"%+v\\n\", resp)\n    log.Printf(\"%+v\\n\", tweet)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Node Status\nDESCRIPTION: Basic kubectl command to verify cluster node status and connectivity.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day51.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Azure Network Security Group Rule Configuration Table\nDESCRIPTION: Example configuration table showing priority-based NSG rules for controlling network traffic in Azure, including inbound HTTPS access and load balancer rules.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day33.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Description      | Priority |   Source Address   | Source Port | Destination Address | Destination Port | Action | \n| -----------      | ---------|   --------------   | ----------- | ------------------- | ---------------- | ------ |\n| Inbound 443      | 1005     | *                  | *           | *                   | 443              | Allow  |\n| ILB              | 1010     | Azure LoadBalancer | *           | *                   | 10000            | Allow  |\n| Deny All Inbound | 4000     | *                  | *           | *                   | *                | DENY   |\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Comparisons in BASH\nDESCRIPTION: Script demonstrating arithmetic comparisons in BASH using operators like -eq, -ne, -gt, and others to compare numeric values and output appropriate messages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day48.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nA=4\n\nif [ $A -gt 3 ]\nthen\n    echo \"$A is greater than 3\"\nelse\n    echo \"$A is less than or equal to 3\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal Using PowerShell\nDESCRIPTION: This command creates a new Azure Service Principal with the Contributor role scoped to a specific subscription using PowerShell.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day45.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$sp = New-AzADServicePrincipal -DisplayName ServicePrincipalName -Role Contributor -Scope \"/subscriptions/<Subscription-Id>\"\n```\n\n----------------------------------------\n\nTITLE: Using Command Piping in Bash\nDESCRIPTION: Demonstrates piping output from one command to another. This example uses 'grep' to filter the output of the 'ls -la' command, showing only lines containing the pattern 'example'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day44.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nls -la | grep \"example\"\n```\n\n----------------------------------------\n\nTITLE: Clearing command history in Linux\nDESCRIPTION: The 'history -c' command clears your command history, removing all previously executed commands from the history list.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nhistory -c\n```\n\n----------------------------------------\n\nTITLE: Removing Existing MySQL Client Pod\nDESCRIPTION: This command deletes an existing MySQL client pod if one is already running in the namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day88.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod -n ${APP_NAME} mysql-client\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Usage Playbook\nDESCRIPTION: Demonstrates how to include and use the role in an Ansible playbook with variable parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Configmgmt/ansible-scenario7/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl using arkade in bash\nDESCRIPTION: This command uses arkade to download and install the kubectl binary, which is necessary for interacting with the Kubernetes cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day51.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narkade get kubectl\n```\n\n----------------------------------------\n\nTITLE: Verifying ELK Stack Container Status\nDESCRIPTION: Docker command to list running containers, showing the three ELK stack containers with their port mappings, container IDs, and status information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Containers/elasticsearch-logstash-kibana/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS                                                                                            NAMES\n173f0634ed33        logstash:7.8.0        \"/usr/local/bin/dock…\"   43 seconds ago      Up 41 seconds             0.0.0.0:5000->5000/tcp, 0.0.0.0:5044->5044/tcp, 0.0.0.0:9600->9600/tcp, 0.0.0.0:5000->5000/udp   log\nb448fd3e9b30        kibana:7.8.0          \"/usr/local/bin/dumb…\"   43 seconds ago      Up 42 seconds             0.0.0.0:5601->5601/tcp                                                                           kib\n366d358fb03d        elasticsearch:7.8.0   \"/tini -- /usr/local…\"   43 seconds ago      Up 42 seconds (healthy)   0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp                                                   es\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent Volume Claim in Kubernetes\nDESCRIPTION: This YAML configuration defines a Persistent Volume Claim (PVC) in Kubernetes. It requests a 3Gi volume with ReadWriteOnce access mode from the manual storage class. This claim can be used by pods to request persistent storage.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day18.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: task-pv-claim\nspec:\n  storageClassName: manual\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 3Gi\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL Client Pod in Kubernetes\nDESCRIPTION: This command runs a temporary MySQL client pod in the application namespace with environment variables set for connecting to the MySQL server.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day88.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=my-production-app\nkubectl run mysql-client --rm --env APP_NS=${APP_NAME} --env MYSQL_EXEC=\"${MYSQL_EXEC}\" --env MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --env MYSQL_HOST=${MYSQL_HOST} --namespace ${APP_NAME} --tty -i --restart='Never' --image  docker.io/bitnami/mysql:latest --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Base Command\nDESCRIPTION: The base command for Azure CLI that precedes all other Azure CLI commands\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day33.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Account in Linux\nDESCRIPTION: A shell command that demonstrates how to delete a user account using the 'userdel' command with sudo privileges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day19.md#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo userdel test_user\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository\nDESCRIPTION: Command to clone a Git repository to the local machine using the repository URL.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day41.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with if-elif-else in Python\nDESCRIPTION: Example of conditional logic using if, elif, and else statements to create a simple decision tree based on the day of the week. Demonstrates string comparison in conditionals.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day47.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDay = input(\"What day is it? \")\n\nif Day == \"Monday\":\n    print(\"It is Monday, a brand new week\")\nelif Day == \"Friday\":\n    print(\"It is Friday, almost the weekend\")\nelse:\n    print(f\"It is {Day}, a normal day\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Route in Rails\nDESCRIPTION: Adding a default route to the Rails application's routes configuration file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day06.md#2025-04-17_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nroot bootcamps#index\n```\n\n----------------------------------------\n\nTITLE: Cutting Text with Field Delimiter\nDESCRIPTION: Demonstrates using cut command with delimiter to extract specific fields from a file\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day15.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncut -d \" \" -f 2 list.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio System Pods Status Output\nDESCRIPTION: Example output showing the status of all pods in the istio-system namespace, including the observability components.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day81.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNAME                                    READY   STATUS    RESTARTS   AGE\nistio-egressgateway-7475c75b68-mpxf7    1/1     Running   0          5d15h\nistiod-885df7bc9-f9k7c                  1/1     Running   0          5d15h\nistio-ingressgateway-6688c7f65d-szxf9   1/1     Running   0          5d15h\njaeger-54b7b57547-vsnhl                 1/1     Running   0          34s\nprometheus-7b8b9dd44c-kd77d             2/2     Running   0          32s\ngrafana-b854c6c8-fhjlh                  1/1     Running   0          35s\nkiali-5ff88f8595-fnk8t                  1/1     Running   0          33s\n```\n\n----------------------------------------\n\nTITLE: Cloning Prometheus Operator Repository\nDESCRIPTION: Commands to clone the Prometheus Operator repository and navigate to the project directory.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day83.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/prometheus-operator/kube-prometheus.git\ncd kube-prometheus\n```\n\n----------------------------------------\n\nTITLE: Combined Progress Tracker and Twitter Integration\nDESCRIPTION: Main application combining progress tracking functionality with Twitter integration for posting updates.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day13.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    creds := Credentials{\n        AccessToken:       os.Getenv(\"ACCESS_TOKEN\"),\n        AccessTokenSecret: os.Getenv(\"ACCESS_TOKEN_SECRET\"),\n        ConsumerKey:       os.Getenv(\"CONSUMER_KEY\"),\n        ConsumerSecret:    os.Getenv(\"CONSUMER_SECRET\"),\n    }\n    {\n        const DaysTotal int = 90\n        var remainingDays uint = 90\n        challenge := \"#90DaysOfDevOps\"\n\n        fmt.Printf(\"Welcome to the %v challenge.\\nThis challenge consists of %v days\\n\", challenge, DaysTotal)\n\n        var TwitterName string\n        var DaysCompleted uint\n\n        fmt.Println(\"Enter Your Twitter Handle: \")\n        fmt.Scanln(&TwitterName)\n\n        fmt.Println(\"How many days have you completed?: \")\n        fmt.Scanln(&DaysCompleted)\n\n        remainingDays = remainingDays - DaysCompleted\n\n        client, err := getClient(&creds)\n        if err != nil {\n            log.Println(\"Error getting Twitter Client\")\n            log.Println(err)\n        }\n\n        message := fmt.Sprintf(\"Hey I am %v I have been doing the %v for %v days and I have %v Days left\", TwitterName, challenge, DaysCompleted, remainingDays)\n        tweet, resp, err := client.Statuses.Update(message, nil)\n        if err != nil {\n            log.Println(err)\n        }\n        log.Printf(\"%+v\\n\", resp)\n        log.Printf(\"%+v\\n\", tweet)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image\nDESCRIPTION: Command to build a Docker image from a Dockerfile, tagging it as 'my-python-app'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day38.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-python-app .\n```\n\n----------------------------------------\n\nTITLE: Changing File Ownership with chown in Linux\nDESCRIPTION: This command changes both the owner and group of a file. Here, 'file.txt' ownership is transferred to user 'michael' and group 'devops'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day49.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchown michael:devops file.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Document Structure\nDESCRIPTION: Markdown formatting for an article about DevOps and cloud computing, including metadata and main content sections with image references.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day28.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '#90DaysOfDevOps - The Big Picture: DevOps & The Cloud - Day 28'\npublished: false\ndescription: 90DaysOfDevOps - The Big Picture DevOps & The Cloud\ntags: \"devops, 90daysofdevops, learning\"\ncover_image: null\ncanonical_url: null\nid: 1048737\n---\n## The Big Picture: DevOps & The Cloud\n\nWhen it comes to cloud computing and what is offered, it goes very nicely with the DevOps ethos and processes...\n```\n\n----------------------------------------\n\nTITLE: IP Address List in 192.168.169.x Subnet\nDESCRIPTION: A list of 5 private IP addresses in the 192.168.169.x subnet range. These appear to be local network addresses, possibly for internal network configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Networking/backup.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n192.168.169.115\\n192.168.169.178\\n192.168.169.193\\n192.168.169.125\\n192.168.169.197\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline for Building and Pushing Docker Image with Kaniko\nDESCRIPTION: A Jenkins Pipeline script that clones a GitHub repository, builds a Docker image using Kaniko, and pushes it to DockerHub. It uses a Kubernetes Pod template with Maven and Kaniko containers to execute the pipeline stages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day73.md#2025-04-17_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\npodTemplate(yaml: '''\n    apiVersion: v1\n    kind: Pod\n    spec:\n      containers:\n      - name: maven\n        image: maven:3.8.1-jdk-8\n        command:\n        - sleep\n        args:\n        - 99d\n      - name: kaniko\n        image: gcr.io/kaniko-project/executor:debug\n        command:\n        - sleep\n        args:\n        - 9999999\n        volumeMounts:\n        - name: kaniko-secret\n          mountPath: /kaniko/.docker\n      restartPolicy: Never\n      volumes:\n      - name: kaniko-secret\n        secret:\n            secretName: dockercred\n            items:\n            - key: .dockerconfigjson\n              path: config.json\n''') {\n  node(POD_LABEL) {\n    stage('Get the project') {\n      git url: 'https://github.com/scriptcamp/kubernetes-kaniko.git', branch: 'main'\n      container('maven') {\n        stage('Test the project') {\n          sh '''\n          echo pwd\n          '''\n        }\n      }\n    }\n\n    stage('Build & Test the Docker Image') {\n      container('kaniko') {\n        stage('Deploy to DockerHub') {\n          sh '''\n            /kaniko/executor --context `pwd` --destination michaelcade1/helloworld:latest\n          '''\n        }\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Container IP Address - S Container\nDESCRIPTION: Specific command to get the IP address of the s latest container\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day23.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect s latest -f '{{range .NetworkSettings.Networks}}{{.IPAddress}} {{end}}'\n```\n\n----------------------------------------\n\nTITLE: Creating Jenkins Namespace in Kubernetes\nDESCRIPTION: This snippet shows two alternative methods to create a namespace for Jenkins in Kubernetes. The namespace isolates Jenkins resources within the cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace jenkins or kubectl create -f jenkins-namespace.yml\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook Implementation\nDESCRIPTION: Demonstrates how to include and use a role within an Ansible playbook, showing how to pass parameters to the role.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Configmgmt/ansible-scenario6/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Cleaned Ansible Playbook After Variable Extraction\nDESCRIPTION: This shows a clean Ansible playbook after variables have been moved to a separate file, demonstrating better organization of configuration elements.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day68.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy \n  become: yes\n  roles: \n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authentication Token for Kasten K10 Dashboard\nDESCRIPTION: This Shell script extracts the authentication token from Kubernetes secrets to access the Kasten K10 dashboard. It identifies the token secret, decodes it from base64, and outputs the value.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day89.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Git Pull Operations\nDESCRIPTION: Commands for fetching and integrating changes from remote repositories using rebase strategy instead of merge.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day37.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit pull --rebase <remote>\n```\n\n----------------------------------------\n\nTITLE: Finding Files with find Command in Linux\nDESCRIPTION: Demonstrates the find command which allows searching for files based on various criteria such as name, type, and modification time across the filesystem hierarchy.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfind /path/to/search -name \"filename\"\nfind /path/to/search -type f -name \"*.txt\"\n```\n\n----------------------------------------\n\nTITLE: Showing current working directory in Linux\nDESCRIPTION: The 'pwd' command displays the absolute path of your current directory, helping you identify where you are in the file system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npwd\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Environment Variables\nDESCRIPTION: YAML configuration demonstrating how to override Enterprise Search configuration options using environment variables in Docker Compose.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ent_search.auth.source: standard\n    worker.threads: '6'\n```\n\n----------------------------------------\n\nTITLE: Verifying fstab Configuration\nDESCRIPTION: This command checks if the /etc/fstab file is configured correctly for persistent mounts.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day16.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo mount -a\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Namespaces\nDESCRIPTION: Lists all available namespaces in the Kubernetes cluster to verify the creation of the sleep namespace.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day82.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get ns\n```\n\n----------------------------------------\n\nTITLE: Simple Ansible Playbook Example\nDESCRIPTION: A basic Ansible playbook that demonstrates pinging the localhost and printing the OS family.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Simple Play\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Ping me\n      ping:\n    - name: print os\n      debug:\n        msg: \"{{ ansible_os_family }}\"\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook Usage\nDESCRIPTION: Demonstrates how to include the role in an Ansible playbook with variables passed as parameters.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Configmgmt/ansible-scenario4/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Executing Azure CLI Command in PowerShell\nDESCRIPTION: This snippet demonstrates how to run an Azure CLI command within PowerShell to list Azure CLI version information.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day33.md#2025-04-17_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\naz\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Program in Go\nDESCRIPTION: A simple Go program that prints 'Hello #90DaysOfDevOps' to the console. It demonstrates the basic structure of a Go program, including package declaration, importing the fmt package, and defining the main function.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day08.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello #90DaysOfDevOps\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ansible Role Example Playbook\nDESCRIPTION: Example playbook showing how to use the role with parameters. Demonstrates passing a variable 'x' with value 42 to the role.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Configmgmt/ansible-scenario5/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Metricbeat Extension\nDESCRIPTION: Command to start Docker Compose with an additional Metricbeat configuration file. This combines the base docker-compose.yml with the Metricbeat-specific compose file to include Metricbeat in the stack.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx Pod with Azure Disk Volume\nDESCRIPTION: This YAML manifest defines a Pod that uses the previously created PersistentVolumeClaim to mount an Azure Disk as a volume at the /mnt/azure path.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day22.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\nspec:\n  containers:\n  - name: mypod\n    image: nginx\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n      limits:\n        cpu: 250m\n        memory: 256Mi\n    volumeMounts:\n    - mountPath: \"/mnt/azure\"\n      name: volume\n  volumes:\n  - name: volume\n    persistentVolumeClaim:\n      claimName: azure-managed-disk\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Host in Kibana\nDESCRIPTION: YAML configuration to specify the Enterprise Search host URL in Kibana configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenterpriseSearch.host: http://enterprise-search:3002\n```\n\n----------------------------------------\n\nTITLE: Generating AES-256 Encryption Key Using OpenSSL\nDESCRIPTION: A command-line example showing how to generate a strong encryption key using OpenSSL with the AES-256 cipher. The generated key can be used for Enterprise Search encryption.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ openssl enc -aes-256 -P\n\nenter aes-256-cbc encryption password: <a strong password>\nVerifying - enter aes-256-cbc encryption password: <repeat your strong password>\n...\n\nkey=<generated AES key>\n```\n\n----------------------------------------\n\nTITLE: Enabling Elasticsearch API Key Service in Configuration\nDESCRIPTION: Enterprise Search requires Elasticsearch's API key service to be enabled. This YAML configuration snippet enables the service in the elasticsearch.yml file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nxpack.security.authc.api_key.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Go Package Declaration\nDESCRIPTION: Example of package declaration in Go, showing how files must belong to a package. The main package is special as it marks the starting point of the program.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day09.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Example Playbook Usage for Ansible Role\nDESCRIPTION: Demonstrates how to include the role in an Ansible playbook, including passing parameters. This example shows a simple implementation where the role is applied to the 'servers' host group with a variable 'x' set to 42.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Configmgmt/ansible-scenario3/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Curator Extension\nDESCRIPTION: Command to start Docker Compose with the Curator extension by combining the main docker-compose.yml with the curator-specific compose file. This enables automated index management through Curator running as a cron job every minute.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/curator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/curator/curator-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Markdown Checklist Entry for Final Day\nDESCRIPTION: A markdown checklist item linking to the final day's content of the 90DaysOfDevOps challenge\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/ko/2023.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [✔️] 🏁 90 > [Wrapping up the 2023 edition](2023/day90.md)\n```\n\n----------------------------------------\n\nTITLE: Terraform Testing Commands Table in Markdown\nDESCRIPTION: A markdown table listing key Terraform commands for testing and validating infrastructure code, including terraform fmt, validate, plan, and custom validation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day62.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Command               | Description                                                                                | \n| --------------------- | ------------------------------------------------------------------------------------------ |\n| `terraform fmt`       | Rewrite Terraform configuration files to a canonical format and style.                     | \n| `terraform validate`  | Validates the configuration files in a directory, referring only to the configuration      | \n| `terraform plan`      | Creates an execution plan, which lets you preview the changes that Terraform plans to make | \n| Custom validation     | Validation of your input variables to ensure they match what you would expect them to be   |\n```\n\n----------------------------------------\n\nTITLE: Comparing Software Management Challenges that Containers Help Solve\nDESCRIPTION: A markdown table showing the three areas of software complexity (Distribution, Installation, and Operation) and how containers and images help address these challenges.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day42.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Distribution | Installation  | Operation          |\n| ------------ | ------------- | ------------------ |\n| Find         | Install       | Start              |\n| Download     | Configuration | Security           |\n| License      | Uninstall     | Ports              |\n| Package      | Dependencies  | Resource Conflicts |\n| Trust        | Platform      | Auto-Restart       |\n| Find         | Libraries     | Updates            |\n```\n\n----------------------------------------\n\nTITLE: Markdown Article Structure\nDESCRIPTION: Article header metadata in markdown format defining title, publication status, description, and tags for the #90DaysOfDevOps series.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day28.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '#90DaysOfDevOps - The Big Picture: DevOps & The Cloud - Day 28'\npublished: false\ndescription: 90DaysOfDevOps - The Big Picture DevOps & The Cloud\ntags: \"devops, 90daysofdevops, learning\"\ncover_image: null\ncanonical_url: null\nid: 1048737\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying DevOps Lifecycle Image in Markdown\nDESCRIPTION: This code snippet shows how to embed an image of the DevOps lifecycle using Markdown syntax. The image illustrates the various stages of the DevOps process.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day05.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![DevOps](Images/Day5_DevOps8.png)\n```\n\n----------------------------------------\n\nTITLE: Installing Qiskit and Required Packages in Python\nDESCRIPTION: Instructions for installing Qiskit, IBM's quantum computing framework, along with necessary visualization tools. This snippet shows the pip commands needed to set up the quantum computing environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day12.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install qiskit\npip install qiskit-aer\npip install matplotlib\npip install pylatexenc\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Menu for Engineering Operations Topics\nDESCRIPTION: A markdown-formatted navigation menu listing engineering operations topics with completion status indicators and links to daily content.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/vi/2023.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Engineering for Day 2 Ops\n\n- [✔️] 👷🏻‍♀️ 84 > [Writing an API - What is an API?](2023/day84.md)\n- [✔️] 👷🏻‍♀️ 85 > [Queues, Queue workers and Tasks (Asynchronous architecture)](2023/day85.md)\n- [✔️] 👷🏻‍♀️ 86 > [Designing for Resilience, Redundancy and Reliability](2023/day86.md)\n- [✔️] 👷🏻‍♀️ 87 > [Zero Downtime Deployments](2023/day87.md)\n- [✔️] 👷🏻‍♀️ 88 > [Monitoring, Alerting and On-Call](2023/day88.md)\n- [✔️] 👷🏻‍♀️ 89 > [Oops: When something goes wrong - Post Mortems](2023/day89.md)\n\n### 2023 wrap up\n\n- [✔️] 🏁 90 > [Wrapping up the 2023 edition](2023/day90.md)\n```\n\n----------------------------------------\n\nTITLE: Azure PowerShell VM Creation Command\nDESCRIPTION: Example showing the PowerShell cmdlet syntax for creating a new Azure VM\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day33.md#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-AzVM\n```\n\n----------------------------------------\n\nTITLE: Verifying Current Shell\nDESCRIPTION: Command to check which shell is currently active in the terminal session. This confirms the shell change has taken effect after logging out and back in.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day20.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwhich $SHELL\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Front Matter for Blog Post\nDESCRIPTION: YAML configuration block defining metadata for the blog post including title, publication status, description, and tags.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day86.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: '#90DaysOfDevOps - Backup all the platforms - Day 86'\npublished: false\ndescription: 90DaysOfDevOps - Backup all the platforms\ntags: 'devops, 90daysofdevops, learning'\ncover_image: null\ncanonical_url: null\nid: 1049058\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Stateless Nginx Application with YAML\nDESCRIPTION: A YAML configuration file that creates a namespace, deployment, and service for a stateless nginx application in Kubernetes. It defines a single replica of nginx with exposed port 80.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day54.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: nginx\n  \"labels\": {\n    \"name\": \"nginx\"\n  }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: nginx\nspec:\n  selector:\n    app: nginx-deployment\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Resources with YAML\nDESCRIPTION: This YAML file defines a namespace, deployment, and service for an nginx application in Kubernetes. It specifies the container image, port, and replica count.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day54.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: nginx\n  \"labels\": {\n    \"name\": \"nginx\"\n  }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: nginx\nspec:\n  selector:\n    app: nginx-deployment\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Jenkins Pipeline with Declarative Syntax\nDESCRIPTION: This Jenkinsfile defines a basic pipeline with three stages: Build, Test, and Deploy. Each stage simply echoes a message indicating what would happen in a real pipeline. This demonstrates the structure of a declarative pipeline in Jenkins.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day72.md#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nJenkinsfile (Declarative Pipeline)\n\npipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building..'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing..'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                echo 'Deploying....'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apache2 Tasks Configuration in YAML\nDESCRIPTION: Task definitions for installing and configuring Apache2 web server, including version management, ports configuration, and index file setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day66.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: ensure apache is at the latest version\n  apt: name=apache2 state=latest\n\n- name: write the apache2 ports.conf config file\n  template: \n    src=templates/ports.conf.j2 \n    dest=/etc/apache2/ports.conf\n  notify: restart apache\n\n- name: write a basic index.html file\n  template:\n    src: templates/index.html.j2\n    dest: /var/www/html/index.html\n  notify:\n  - restart apache\n\n- name: ensure apache is running\n  service:\n    name: apache2\n    state: started\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Flask APM Agent\nDESCRIPTION: Example configuration for connecting a Python Flask application to APM Server. Shows setup of essential parameters like SERVICE_NAME and SERVER_URL with ElasticAPM integration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/apm-server/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport elasticapm\nfrom elasticapm.contrib.flask import ElasticAPM\n\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['ELASTIC_APM'] = {\n    # Set required service name. Allowed characters:\n    # a-z, A-Z, 0-9, -, _, and space\n    'SERVICE_NAME': 'PYTHON_FLASK_TEST_APP',\n\n    # Set custom APM Server URL (default: http://localhost:8200)\n    'SERVER_URL': 'http://apm-server:8200',\n\n    'DEBUG': True,\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Kubernetes Pipeline Example\nDESCRIPTION: A basic Jenkins Pipeline script using Declarative syntax to run commands inside a Kubernetes container. It defines a Pod with an Ubuntu container and executes a simple hostname command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day73.md#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n// Uses Declarative syntax to run commands inside a container.\npipeline {\n    agent {\n        kubernetes {\n            yaml '''\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: shell\n    image: ubuntu\n    command:\n    - sleep\n    args:\n    - infinity\n'''\n            defaultContainer 'shell'\n        }\n    }\n    stages {\n        stage('Main') {\n            steps {\n                sh 'hostname'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Setup Commands for WordPress\nDESCRIPTION: A series of MySQL commands to create a new database for WordPress, create a user with appropriate permissions, and configure access control. These commands prepare the database environment needed for WordPress installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day18.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p\n\nCREATE DATABASE wordpressdb;\n\nCREATE USER 'admin-user'@'localhost' IDENTIFIED BY 'password';\n\nGRANT ALL PRIVILEGES ON wordpressdb.* TO 'admin-user'@'localhost';\n\nFLUSH PRIVILEGES;\n\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation of OSI Model Networking\nDESCRIPTION: Markdown documentation explaining the OSI Model's 7 layers, including diagrams, explanations of data encapsulation, and comparisons between different addressing schemes like MAC and IP addresses.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day22.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '#90DaysOfDevOps - The OSI Model - The 7 Layers - Day 22'\npublished: false\ndescription: 90DaysOfDevOps - The OSI Model - The 7 Layers\ntags: 'devops, 90daysofdevops, learning'\ncover_image: null\ncanonical_url: null\nid: 1049037\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Default StorageClass in Kubernetes\nDESCRIPTION: Commands to configure the CSI-Hostpath storage class as the default in a minikube cluster. The first command sets csi-hostpath-sc as the default storage class, while the second removes the default annotation from the standard storage class.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day55.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass csi-hostpath-sc -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass standard -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Setting VirtualBox Video Memory in Vagrant\nDESCRIPTION: This command customizes the VirtualBox virtual machine by setting the video memory. It's an optional addition to the Vagrantfile that helps prevent display issues with the Ubuntu Desktop environment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day14.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nv.customize [\"modifyvm\", :id, \"--vram\", \"\"]\n```\n\n----------------------------------------\n\nTITLE: Commands for Installing az cli and kubectl\nDESCRIPTION: Basic shell commands for installing the Azure CLI and Kubernetes command-line tool (kubectl). These tools are prerequisites for interacting with Azure resources and Kubernetes clusters from command line.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day25.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\nsudo az aks install-cli\n```\n\n----------------------------------------\n\nTITLE: User Creation Shell Script with Account Setup\nDESCRIPTION: An expanded shell script that takes a username as a command-line argument, displays a message, and creates a user account with a home directory using the useradd command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day19.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/bash\n\n#A user can be passed in as a command line argument\necho \"$1 user account being created.\"\n\n#A user is created with the name of command line argument\nsudo useradd -m \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache2 Welcome Page with Ansible Facts\nDESCRIPTION: This Jinja2 template creates a simple HTML welcome page for Apache2, using a variable for the welcome message and an Ansible fact for the server name.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day68.md#2025-04-17_snippet_5\n\nLANGUAGE: jinja2\nCODE:\n```\n<html>\n\n<h1>{{ html_welcome_msg }}! I'm webserver {{ ansible_facts['nodename'] }} </h1>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Sensitive Variables in Terraform\nDESCRIPTION: This snippet demonstrates how to define a sensitive variable in Terraform. The configuration includes a description, type specification, and the sensitive flag to prevent the value from being displayed in logs or console output.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day59.md#2025-04-17_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nvariable \"some resource\"  {\n    description = \"something important\"\n    type: string\n    sensitive = true\n\n}\n```\n\n----------------------------------------\n\nTITLE: IP Address List in 192.168.169.x Subnet\nDESCRIPTION: A simple list of 5 IPv4 addresses from the 192.168.169.x subnet range. These appear to be private network addresses that could be used for local network configuration, testing, or as part of a DevOps infrastructure setup.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Networking/backup.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n192.168.169.115\n192.168.169.178\n192.168.169.193\n192.168.169.125\n192.168.169.197\n```\n\n----------------------------------------\n\nTITLE: Simulating Malicious Behavior with Curl\nDESCRIPTION: Executes curl command inside the container to trigger the custom Falco rule. This simulates how an attacker might attempt to exfiltrate data from a compromised container.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day30.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://google.com\n```\n\n----------------------------------------\n\nTITLE: Viewing File Permissions with ls -l Command in Linux\nDESCRIPTION: This command shows detailed file information including permissions, ownership, size, and modification date. The '-l' flag enables the long listing format that reveals the permission string and other metadata.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day49.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nls -l\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Ansible Playbook (YAML)\nDESCRIPTION: This snippet shows how to define tags for different host groups in an Ansible playbook. Tags allow selective execution of playbook tasks.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day68.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - common\n    - apache2\n  tags: web\n\n- hosts: proxy\n  become: yes\n  roles:\n    - common\n    - nginx\n  tags: proxy\n```\n\n----------------------------------------\n\nTITLE: Installing Common Packages with Ansible\nDESCRIPTION: This YAML snippet defines a task to install common packages on all servers using Ansible's apt module. It installs neofetch, tree, and figlet packages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day67.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - neofetch\n   - tree\n   - figlet\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 via Helm\nDESCRIPTION: Helm command to install Kasten K10 in the standby cluster with specific configuration options for authentication and Kanister sidecar injection.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/day89.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Basic Ansible Playbook Example in YAML\nDESCRIPTION: A simple Ansible playbook that demonstrates ping functionality and OS detection. It includes two tasks: a ping check and printing the OS family of the target system.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day65.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Simple Play\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Ping me\n      ping:\n    - name: print os\n      debug:\n        msg: \"{{ ansible_os_family }}\"\n```\n\n----------------------------------------\n\nTITLE: Common Role Tasks Configuration - YAML\nDESCRIPTION: Ansible task configuration for installing common packages across all servers using apt package manager. Installs neofetch, tree, and figlet packages.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day67.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Install Common packages\"\n  apt: name={{ item }} state=latest\n  with_items:\n   - neofetch\n   - tree\n   - figlet\n```\n\n----------------------------------------\n\nTITLE: Using RIGHT OUTER JOIN in SQL\nDESCRIPTION: SQL query demonstrating a RIGHT OUTER JOIN which retrieves all rows from the address table even if there is no matching row in the staff table.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM staff s\nRIGHT OUTER JOIN address a ON s.address_id = a.address_id\n```\n\n----------------------------------------\n\nTITLE: Markdown Document Structure\nDESCRIPTION: Markdown formatted document explaining data protection concepts and Kopia backup tool implementation. Includes headers, emphasis, and image references.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day86.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '#90DaysOfDevOps - Backup all the platforms - Day 86'\npublished: false\ndescription: 90DaysOfDevOps - Backup all the platforms\ntags: 'devops, 90daysofdevops, learning'\ncover_image: null\ncanonical_url: null\nid: 1049058\n---\n## Backup all the platforms\n\nDuring this whole challenge we have discussed many different platforms and environments...\n```\n\n----------------------------------------\n\nTITLE: Redirecting Both Standard Output and Error to a File in Bash\nDESCRIPTION: Shows how to redirect both standard output and standard error to the same file. This command captures all output types from 'some_command' and saves them to 'output.txt'.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day44.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsome_command > output.txt 2>&1\n```\n\n----------------------------------------\n\nTITLE: Accessing OpenShift Cluster with Kubeconfig\nDESCRIPTION: Export command provided after successful installation to configure the 'oc' CLI with the necessary authentication details for accessing the OpenShift cluster as system:admin user.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day58.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBECONFIG=/home/dean/90days-ocp412/auth/kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Restarting Filebeat Container\nDESCRIPTION: This command shows how to restart the Filebeat container after making changes to its configuration. It uses Docker Compose with both the main and Filebeat-specific compose files.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/filebeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/filebeat/filebeat-compose.yml restart filebeat\n```\n\n----------------------------------------\n\nTITLE: Creating file content with echo in Linux\nDESCRIPTION: The 'echo' command with redirection operators can add content to files. The '>' operator overwrites file content, while '>>' appends to existing content.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\necho \"Hello #90DaysOfDevOps\" > Day15\n```\n\n----------------------------------------\n\nTITLE: Installing Kasten K10 using Helm\nDESCRIPTION: This Helm command installs Kasten K10 in the kasten-io namespace with specific configuration options.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/day87.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nhelm install k10 kasten/k10 --namespace=kasten-io --set auth.tokenAuth.enabled=true --set injectKanisterSidecar.enabled=true --set-string injectKanisterSidecar.namespaceSelector.matchLabels.k10/injectKanisterSidecar=true --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Reading Manual Pages with man Command in Linux\nDESCRIPTION: Shows how to use the man command to access system manual pages which provide detailed documentation for Linux commands, their options, and usage examples.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day14.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nman command_name\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access Kibana Dashboard\nDESCRIPTION: Command to set up port forwarding from the Kibana pod to localhost port 5601, enabling access to the Kibana web interface for log visualization.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day82.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward kibana-84cf7f59c-v2l8v 5601:5601 -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jenkins Admin Password and Port Forwarding\nDESCRIPTION: Retrieves the Jenkins admin password and sets up port forwarding to access the Jenkins web interface. This allows initial access to the Jenkins instance.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/chart-admin-password && echo\n\nkubectl --namespace jenkins port-forward svc/jenkins 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access Kibana Dashboard\nDESCRIPTION: Command to set up port forwarding from local port 5601 to the Kibana pod's port 5601, enabling access to the Kibana dashboard through localhost.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day82.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward kibana-84cf7f59c-v2l8v 5601:5601 -n kube-logging\n```\n\n----------------------------------------\n\nTITLE: Generating AES-256 Encryption Key Using OpenSSL\nDESCRIPTION: Command line example showing how to generate a strong encryption key using OpenSSL's AES-256 cipher.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ openssl enc -aes-256 -P\n\nenter aes-256-cbc encryption password: <a strong password>\nVerifying - enter aes-256-cbc encryption password: <repeat your strong password>\n...\n\nkey=<generated AES key>\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Usage Playbook\nDESCRIPTION: Demonstrates how to include and use the role in an Ansible playbook with parameters. Shows basic role inclusion syntax with a variable being passed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Configmgmt/ansible-scenario6/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Creating a NodePort Service in Kubernetes\nDESCRIPTION: Command to create a NodePort service that exposes the nginx deployment externally on a port in the 30000-32767 range while targeting port 80 internally.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day31.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort\n```\n\n----------------------------------------\n\nTITLE: Role-Based Playbook Configuration in YAML\nDESCRIPTION: Playbook definition using roles for webservers, including variable definitions and role assignments.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day66.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: webservers\n  become: yes\n  vars:\n    http_port: 8000\n    https_port: 4443\n    html_welcome_msg: \"Hello 90DaysOfDevOps - Welcome to Day 66!\"\n  roles:\n    - apache2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jenkins Admin Password\nDESCRIPTION: Command to extract the generated admin password from the Jenkins container. This is required for the initial login to the Jenkins web interface.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/chart-admin-password && echo\n```\n\n----------------------------------------\n\nTITLE: Installing Helm and Adding HashiCorp Repository\nDESCRIPTION: Commands to install Helm package manager on macOS and add the HashiCorp helm repository, which contains the Vault chart used for deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day39.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install helm\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add hashicorp https://helm.releases.hashicorp.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kasten K10 Authentication Token\nDESCRIPTION: Bash commands to retrieve the authentication token for accessing the Kasten K10 dashboard.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day87.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN_NAME=$(kubectl get secret --namespace kasten-io|grep k10-k10-token | cut -d \" \" -f 1)\nTOKEN=$(kubectl get secret --namespace kasten-io $TOKEN_NAME -o jsonpath=\"{.data.token}\" | base64 --decode)\n\necho \"Token value: \"\necho $TOKEN\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Jenkins Helm Repository\nDESCRIPTION: Adds the official Jenkins Helm repository and updates the local Helm repository cache. This ensures access to the latest Jenkins chart for deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo list\n\nhelm repo add jenkinsci https://charts.jenkins.io\n\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Applying Resource Quota to OpenShift Project using CLI\nDESCRIPTION: This command applies the resource quota defined in a YAML file to a specific OpenShift project using the 'oc apply' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ oc apply -f resource-quota.yaml -n my-sample-project\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Usage Playbook\nDESCRIPTION: Demonstrates how to include and use the role in an Ansible playbook with parameters. Shows basic role implementation with a variable being passed.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Configmgmt/ansible-scenario4/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Mounting Kopia Snapshots\nDESCRIPTION: Command to mount all snapshots from the configured repository to a specified drive letter.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day86.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config mount all Z:\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Jenkins Service\nDESCRIPTION: This snippet sets up port forwarding to access the Jenkins web interface from the local machine. It maps the service port to a local port for access.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace jenkins port-forward svc/jenkins 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Setting Enterprise Search Password in Docker Compose\nDESCRIPTION: Example of how to set a stronger password for Enterprise Search by changing the ENT_SEARCH_DEFAULT_PASSWORD environment variable in the Docker Compose file.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ENT_SEARCH_DEFAULT_PASSWORD: {{some strong password}}\n```\n\n----------------------------------------\n\nTITLE: Mounting Kopia Snapshots\nDESCRIPTION: Command to mount all snapshots from the configured Kopia repository to a specified drive letter.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day86.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\KopiaUI\\resources\\server\\kopia.exe\" --config-file=C:\\Users\\micha\\AppData\\Roaming\\kopia\\repository.config mount all Z:\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Usage Playbook\nDESCRIPTION: Demonstrates how to incorporate a role into an Ansible playbook with variables. Shows basic role usage with a parameter being passed to the role.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Configmgmt/ansible-scenario6/roles/apache2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git\nDESCRIPTION: Command to commit staged changes with a descriptive message. This creates a snapshot of your changes with an explanation of what was modified.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day29.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Your detailed commit message\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Host in Kibana YAML\nDESCRIPTION: YAML configuration snippet for Kibana to enable the management interface for Enterprise Search. This setting specifies the Enterprise Search host URL for Kibana to connect to.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenterpriseSearch.host: http://enterprise-search:3002\n```\n\n----------------------------------------\n\nTITLE: Deleting Pac-Man Namespace in Kubernetes\nDESCRIPTION: Command to remove the existing Pac-Man namespace from the standby Kubernetes cluster before performing a new restore operation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day90.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete ns pacman\n```\n\n----------------------------------------\n\nTITLE: Basic UPDATE Statement Structure in SQL\nDESCRIPTION: The fundamental structure of an UPDATE statement in SQL, showing the syntax for modifying data with filtering conditions.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day64.md#2025-04-17_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE table\nSET column = new_value\nWHERE some_condition\n```\n\n----------------------------------------\n\nTITLE: Restarting Metricbeat Container\nDESCRIPTION: Command to restart the Metricbeat container after configuration changes, using Docker Compose with both the main compose file and Metricbeat extension.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/es/Days/Monitoring/Elastic Stack/extensions/metricbeat/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose -f docker-compose.yml -f extensions/metricbeat/metricbeat-compose.yml restart metricbeat\n```\n\n----------------------------------------\n\nTITLE: Annotating VolumeSnapshotClass for Kasten K10 in Kubernetes\nDESCRIPTION: This command annotates the csi-hostpath-snapclass VolumeSnapshotClass to be used by Kasten K10 for snapshot operations.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day87.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl annotate volumesnapshotclass csi-hostpath-snapclass \\\n    k10.kasten.io/is-snapshot-class=true\n```\n\n----------------------------------------\n\nTITLE: Adding Jenkins Helm Repository\nDESCRIPTION: This command adds the official Jenkins Helm repository to the local Helm installation. This repository contains the Jenkins chart needed for deployment.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add jenkinsci https://charts.jenkins.io\n```\n\n----------------------------------------\n\nTITLE: ELK Stack Configuration\nDESCRIPTION: YAML front matter configuration for the blog post about ELK Stack\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day80.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: '#90DaysOfDevOps - ELK Stack - Day 80'\npublished: false\ndescription: 90DaysOfDevOps - ELK Stack\ntags: \"devops, 90daysofdevops, learning\"\ncover_image: null\ncanonical_url: null\nid: 1048746\n---\n```\n\n----------------------------------------\n\nTITLE: Watching Kasten K10 Pods Initialize\nDESCRIPTION: Command to monitor the initialization of Kasten K10 pods in the kasten-io namespace with the watch flag.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_cn/Days/day87.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kasten-io -w\n```\n\n----------------------------------------\n\nTITLE: Main Tasks Import Configuration\nDESCRIPTION: Main task file that imports other MySQL-related tasks in sequence.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day68.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks file for roles/mysql\n- import_tasks: install_mysql.yml\n- import_tasks: setup_mysql.yml\n```\n\n----------------------------------------\n\nTITLE: Installing locate on Linux\nDESCRIPTION: If the locate command is not available, you can install it using apt package manager with the mlocate package.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/tr/Days/day15.md#2025-04-17_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install mlocate\n```\n\n----------------------------------------\n\nTITLE: Staging Files in Git\nDESCRIPTION: Shows how to stage a specific file (README.md) for commit using the 'git add' command.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/day38.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add README.md\n```\n\n----------------------------------------\n\nTITLE: Exposing Kubernetes Deployment as NodePort Service\nDESCRIPTION: This command exposes a Kubernetes deployment as a NodePort service, making it accessible from outside the cluster.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ko/Days/day54.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl expose deployment nginx-deployment --name nginx-service --namespace nginx --port=80 --type=NodePort\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus Helm Repository\nDESCRIPTION: Command to add the Prometheus community Helm chart repository to your local Helm configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/pl/day78.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Security Configuration YAML Patch\nDESCRIPTION: YAML configuration for modifying project security labels\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2023/day60.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  labels:\n    pod-security.kubernetes.io/audit: privileged\n    pod-security.kubernetes.io/enforce: privileged\n    pod-security.kubernetes.io/warn: privileged\n    security.openshift.io/scc.podSecurityLabelSync: false\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Repository on GitHub\nDESCRIPTION: Command to connect a local Git repository to a remote repository on GitHub.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/template_repository/day42.md#2025-04-17_snippet_5\n\nLANGUAGE: git\nCODE:\n```\ngit remote add origin https://github.com/MichaelCade/Day11_Creating_a_repo.git\n```\n\n----------------------------------------\n\nTITLE: Repository URL Configuration\nDESCRIPTION: Git repository URL used in the Jenkins pipeline configuration for source code management.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/day74.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/MichaelCade/Jenkins-HelloWorld.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Environment Variables\nDESCRIPTION: YAML configuration showing how to override Enterprise Search settings using environment variables in Docker Compose.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise-search:\n\n  environment:\n    ent_search.auth.source: standard\n    worker.threads: '6'\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Plan\nDESCRIPTION: Command to execute Terraform plan and verify the custom data source functionality.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2024/day64.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Enabling Elasticsearch API Key Service\nDESCRIPTION: YAML configuration to enable the required API key service in Elasticsearch.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nxpack.security.authc.api_key.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jenkins Admin Password\nDESCRIPTION: Get the initial admin password for Jenkins installation.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/ja/Days/CICD/Jenkins/steps.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/chart-admin-password && echo\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Search Host in Kibana\nDESCRIPTION: YAML configuration to set the Enterprise Search host URL in Kibana configuration.\nSOURCE: https://github.com/MichaelCade/90DaysOfDevOps/blob/main/2022/zh_tw/Days/Monitoring/Elastic Stack/extensions/enterprise-search/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenterpriseSearch.host: http://enterprise-search:3002\n```"
  }
]