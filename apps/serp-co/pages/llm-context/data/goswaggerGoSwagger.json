[
  {
    "owner": "go-swagger",
    "repo": "go-swagger",
    "content": "TITLE: Generating Swagger Spec to JSON\nDESCRIPTION: This command generates a Swagger specification file named `swagger.json` in the current directory. It parses the main package and all reachable files to produce the specification.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate-spec/spec.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswagger generate spec -o ./swagger.json\n```\n\n----------------------------------------\n\nTITLE: Generating an API Client\nDESCRIPTION: This command generates a Go API client from a Swagger specification file. The generated client provides functions to interact with the API, handling request construction and response parsing.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate client [-f ./swagger.json] -A [application-name [--principal [principal-name]]\n```\n\n----------------------------------------\n\nTITLE: Swagger Generate Command Usage\nDESCRIPTION: This snippet displays the usage instructions for the 'swagger generate' command, including available subcommands and options. The options include silencing logs and redirecting logs to a file. The subcommands include generating CLI clients, client libraries, markdown, models, operations, servers, specs, and support files.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/generate.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nUsage:\n  swagger [OPTIONS] generate <command>\n\ngenerate go code for the swagger spec file\n\nApplication Options:\n  -q, --quiet                  silence logs\n      --log-output=LOG-FILE    redirect logs to file\n\nHelp Options:\n  -h, --help                   Show this help message\n\nAvailable commands:\n  cli        generate a command line client tool from the swagger spec\n  client     generate all the files for a client library\n  markdown   generate a markdown representation from the swagger spec\n  model      generate one or more models from the swagger spec\n  operation  generate one or more server operations from the swagger spec\n  server     generate all the files for a server application\n  spec       generate a swagger spec document from a go application\n  support    generate supporting files like the main function and the api builder\n```\n\n----------------------------------------\n\nTITLE: Generating API Server from Swagger Spec\nDESCRIPTION: This command generates the server code based on the provided swagger specification file (swagger.yml). It uses the 'go-swagger' tool to create the necessary files and directories, including models, operations, and server configuration files. The '-A TodoList' flag specifies the name of the API.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nswagger generate server -A TodoList -f ./swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Request Handling Middleware in Go\nDESCRIPTION: This Go code defines a middleware function `newCompleteMiddleware` that handles incoming HTTP requests. It performs routing, authentication, input validation, content negotiation, and parameter/body binding.  It requires the `go-openapi` libraries and `gorilla/context` for request context management.  It utilizes a `middleware.Context` to perform actions such as authorization, binding/validation, and responding to requests.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n  \"net/http\"\n\n  \"github.com/go-openapi/errors\"\n  \"github.com/go-openapi/runtime/middleware\"\n  \"github.com/gorilla/context\"\n)\n\nfunc newCompleteMiddleware(ctx *middleware.Context) http.Handler {\n  return http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n    defer context.Clear(r)\n\n    // use context to lookup routes\n    if matched, ok := ctx.RouteInfo(r); ok {\n\n      if len(matched.Authenticators) > 0 {\n        if _, err := ctx.Authorize(r, matched); err != nil {\n          ctx.Respond(rw, r, matched.Produces, matched, err)\n          return\n        }\n      }\n\n      bound, validation := ctx.BindAndValidate(r, matched)\n      if validation != nil {\n        ctx.Respond(rw, r, matched.Produces, matched, validation)\n        return\n      }\n\n      result, err := matched.Handler.Handle(bound)\n      if err != nil {\n        ctx.Respond(rw, r, matched.Produces, matched, err)\n        return\n      }\n\n      ctx.Respond(rw, r, matched.Produces, matched, result)\n      return\n    }\n\n    // Not found, check if it exists in the other methods first\n    if others := ctx.AllowedMethods(r); len(others) > 0 {\n      ctx.Respond(rw, r, ctx.spec.RequiredProduces(), nil, errors.MethodNotAllowed(r.Method, others))\n      return\n    }\n    ctx.Respond(rw, r, ctx.spec.RequiredProduces(), nil, errors.NotFound(\"path %s was not found\", r.URL.Path))\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Data Model\nDESCRIPTION: This command generates Go data model structures and validators based on the schemas defined in the Swagger specification.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate model --spec={spec}\n```\n\n----------------------------------------\n\nTITLE: Swagger Generate Spec Usage\nDESCRIPTION: This snippet details the usage of the `swagger generate spec` command, including the available command-line options for customizing the generation of a Swagger/OpenAPI specification from a Go application. The options cover areas such as setting the working directory, including/excluding packages and tags, compacting the JSON output, and specifying input and output files.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate-spec/_index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n  swagger [OPTIONS] generate spec [spec-OPTIONS]\n\ngenerate a swagger spec document from a go application\n\nApplication Options:\n  -q, --quiet                  silence logs\n      --log-output=LOG-FILE    redirect logs to file\n\nHelp Options:\n  -h, --help                   Show this help message\n\n[spec command options]\n      -w, --work-dir=          the base path to use (default: .)\n      -t, --tags=              build tags\n      -m, --scan-models        includes models that were annotated with 'swagger:model'\n          --compact            when present, doesn't prettify the json\n      -o, --output=            the file to write to\n      -i, --input=             an input swagger file with which to merge\n      -c, --include=           include packages matching pattern\n      -x, --exclude=           exclude packages matching pattern\n          --include-tag=       include routes having specified tags (can be specified many times)\n          --exclude-tag=       exclude routes having specified tags (can be specified many times)\n          --exclude-deps       exclude all dependencies of project\n      -n, --nullable-pointers  set x-nullable extension to true automatically for fields of pointer types without 'omitempty'\n```\n\n----------------------------------------\n\nTITLE: Implement Login Redirection (Go)\nDESCRIPTION: Implements the login functionality by redirecting the user to the Google OAuth2 authorization URL. The `AuthCodeURL` function generates the URL with the configured state and redirects the user to the specified Google login page.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc login(r *http.Request) middleware.Responder {\n\t// implements the login with a redirection\n\treturn middleware.ResponderFunc(\n\t\tfunc(w http.ResponseWriter, pr runtime.Producer) {\n\t\t\thttp.Redirect(w, r, config.AuthCodeURL(state), http.StatusFound)\n\t\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticator Interface (Golang)\nDESCRIPTION: Defines the `Authenticator` interface in Go. This interface is used for implementing authentication strategies.  Implementations should authenticate the request data and return a principal object or an error.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_server.md#_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// Authenticator represents an authentication strategy\n// implementations of Authenticator know how to authenticate the\n// request data and translate that into a valid principal object or an error\ntype Authenticator interface {\n    Authenticate(interface{}) (bool, interface{}, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Server Generation Usage - go-swagger\nDESCRIPTION: This snippet shows the usage of the 'swagger generate server' command and its options. It allows configuring the server package, main package, security principal, default scheme, and other settings. It lists all the available options for the command.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n  swagger [OPTIONS] generate server [server-OPTIONS]\n\ngenerate all the files for a server application\n\nApplication Options:\n  -q, --quiet                                                                     silence logs\n      --log-output=LOG-FILE                                                       redirect logs to file\n\nHelp Options:\n  -h, --help                                                                      Show this help message\n\n[server command options]\n      -s, --server-package=                                                       the package to save the server specific code (default: restapi)\n          --main-package=                                                         the location of the generated main. Defaults to cmd/{name}-server\n      -P, --principal=                                                            the model to use for the security principal\n          --default-scheme=                                                       the default scheme for this API (default: http)\n          --principal-is-interface                                                the security principal provided is an interface, not a struct\n          --default-produces=                                                     the default mime type that API operations produce (default: application/json)\n          --default-consumes=                                                     the default mime type that API operations consume (default: application/json)\n          --skip-models                                                           no models will be generated when this flag is specified\n          --skip-operations                                                       no operations will be generated when this flag is specified\n          --skip-support                                                          no supporting files will be generated when this flag is specified\n          --exclude-main                                                          exclude main function, so just generate the library\n          --exclude-spec                                                          don't embed the swagger specification\n          --flag-strategy=[go-flags|pflag|flag]                                   the strategy to provide flags for the server (default: go-flags)\n          --compatibility-mode=[modern|intermediate]                              the compatibility mode for the tls server (default: modern)\n          --regenerate-configureapi                                               Force regeneration of configureapi.go\n      -A, --name=                                                                 the name of the application, defaults to a mangled value of info.title\n          --with-context                                                          handlers get a context as first arg (deprecated)\n\n    Options common to all code generation commands:\n      -f, --spec=                                                                 the spec file to use (default swagger.{json,yml,yaml})\n      -t, --target=                                                               the base directory for generating the files (default: ./)\n          --template=[stratoscale]                                                load contributed templates\n      -T, --template-dir=                                                         alternative template override directory\n      -C, --config-file=                                                          configuration file to use for overriding template options\n      -r, --copyright-file=                                                       copyright file used to add copyright header\n          --additional-initialism=                                                consecutive capitals that should be considered intialisms\n          --allow-template-override                                               allows overriding protected templates\n          --skip-validation                                                       skips validation of spec prior to generation\n          --dump-data                                                             when present dumps the json for the template generator instead of generating files\n          --with-expand                                                           expands all $ref's in spec prior to generation (shorthand to --with-flatten=expand)\n          --with-flatten=[minimal|full|expand|verbose|noverbose|remove-unused]    flattens all $ref's in spec prior to generation (default: minimal, verbose)\n\n    Options for model generation:\n      -m, --model-package=                                                        the package to save the models (default: models)\n      -M, --model=                                                                specify a model to include in generation, repeat for multiple (defaults to all)\n          --existing-models=                                                      use pre-generated models e.g. github.com/foobar/model\n          --strict-additional-properties                                          disallow extra properties when additionalProperties is set to false\n          --keep-spec-order                                                       keep schema properties order identical to spec file\n          --struct-tags                                                           specify custom struct tags for third-party libraries, repeat for multiple (defaults to json)\n\n    Options for operation generation:\n      -O, --operation=                                                            specify an operation to include, repeat for multiple (defaults to all)\n          --tags=                                                                 the tags to include, if not specified defaults to all\n      -a, --api-package=                                                          the package to save the operations (default: operations)\n          --with-enum-ci                                                          set all enumerations case-insensitive by default\n          --skip-tag-packages                                                     skips the generation of tag-based operation packages, resulting in a flat generation\n```\n\n----------------------------------------\n\nTITLE: Add Rate Limiting in go-swagger (Go)\nDESCRIPTION: This snippet demonstrates adding rate limiting using the `tollbooth` middleware. It initializes a limiter with a rate of 1 request per second and applies it within the `setupMiddlewares` function. It also configures IP lookups for the limiter, and relies on the `github.com/didip/tollbooth` package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/middleware.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc setupMiddlewares(handler http.Handler) http.Handler {\n  limiter := tollbooth.NewLimiter(1, time.Second)\n  limiter.IPLookups = []string{\"RemoteAddr\", \"X-Forwarded-For\", \"X-Real-IP\"}\n\treturn tollbooth.LimitFuncHandler(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Security Requirements in swagger.yml (YAML)\nDESCRIPTION: Specifies the security requirements for the API endpoints in the swagger configuration. It defines the default security requirement, requiring users to be authenticated with the 'user' scope using an OAuth token, while explicitly excluding authentication for the /login and /auth/callback endpoints.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - OauthSecurity:\n    - user\n```\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /login:\n    get:\n      summary: login through oauth2 server\n      security: []\n\n...\n\n  /auth/callback:\n    get:\n      summary: return access_token\n      security: []\n```\n\n----------------------------------------\n\nTITLE: Operation Annotation Syntax - Go\nDESCRIPTION: This snippet shows the basic syntax of the `swagger:operation` annotation. It includes the method, path pattern, optional tags, and operation ID. This annotation links a path to a method, providing a unique ID for client generation and other uses.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/operation.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nswagger:operation [method] [path pattern] [?tag1 tag2 tag3] [operation id]\n```\n\n----------------------------------------\n\nTITLE: API Configuration in Go\nDESCRIPTION: This Go code shows how to configure the API with actual implementations. It sets up consumers, producers, and authentication handlers within the `configureAPI` function. It uses the `go-openapi` libraries for handling API operations, runtime, and middleware.  It sets up handler functions for various API operations (addOne, destroyOne, find, updateOne) to return 'NotImplemented' initially.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/go-openapi/errors\"\n\t\"github.com/go-openapi/runtime\"\n\t\"github.com/go-openapi/runtime/middleware\"\n\n\t\"github.com/go-openapi/examples/todo-list/restapi/operations\"\n\t\"github.com/go-openapi/examples/todo-list/restapi/operations/todos\"\n)\n\n// This file is safe to edit. Once it exists it will not be overwritten\n\nfunc configureAPI(api *operations.ToDoListAPI) http.Handler {\n\t// configure the api here\n\tapi.JSONConsumer = runtime.JSONConsumer()\n\n\tapi.JSONProducer = runtime.JSONProducer()\n\n\tapi.KeyAuth = func(token string) (interface{}, error) {\n\t\treturn nil, errors.NotImplemented(\"api key auth (key) x-petstore-token from header has not yet been implemented\")\n\t}\n\n\tapi.AddOneHandler = todos.AddOneHandlerFunc(func(params todos.AddOneParams, principal interface{}) middleware.Responder {\n\t\treturn middleware.NotImplemented(\"operation addOne has not yet been implemented\")\n\t})\n\tapi.DestroyOneHandler = todos.DestroyOneHandlerFunc(func(params todos.DestroyOneParams, principal interface{}) middleware.Responder {\n\t\treturn middleware.NotImplemented(\"operation destroyOne has not yet been implemented\")\n\t})\n\tapi.FindHandler = todos.FindHandlerFunc(func(params todos.FindParams, principal interface{}) middleware.Responder {\n\t\treturn middleware.NotImplemented(\"operation find has not yet been implemented\")\n\t})\n\tapi.UpdateOneHandler = todos.UpdateOneHandlerFunc(func(params todos.UpdateOneParams, principal interface{}) middleware.Responder {\n\t\treturn middleware.NotImplemented(\"operation updateOne has not yet been implemented\")\n\t})\n\n\treturn setupGlobalMiddleware(api.Serve(setupMiddlewares))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet specifies security requirements for API endpoints. It defines a default requirement of OAuth2 authentication with the 'user' scope and overrides this requirement with an empty array for the '/login' and '/auth/callback' paths, making them publicly accessible.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - OauthSecurity:\n    - user\n```\n\n----------------------------------------\n\nTITLE: Authenticating API client requests in Go\nDESCRIPTION: This code snippet demonstrates how to authenticate API client requests using different authentication schemes: Bearer token, Basic Auth and API Key. The code creates an API client and then sets authentication parameters using `httptransport`. It makes an authenticated request to retrieve all items, handling potential errors and printing the payload.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/client.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"os\"\n  \"log\"\n\n  \"github.com/myproject/client/operations\"\n  \"github.com/go-openapi/strfmt\"\n  \"github.com/go-openapi/spec\"\n\n  apiclient \"github.com/myproject/client\"\n  httptransport \"github.com/go-openapi/runtime/client\"\n)\n\nfunc main() {\n\n  // create the API client\n  client := apiclient.New(httptransport.New(\"\", \"\", nil), strfmt.Default)\n\n  // make the authenticated request to get all items\n  bearerTokenAuth := httptransport.BearerToken(os.Getenv(\"API_ACCESS_TOKEN\"))\n  // basicAuth := httptransport.BasicAuth(os.Getenv(\"API_USER\"), os.Getenv(\"API_PASSWORD\"))\n  // apiKeyQueryAuth := httptransport.APIKeyAuth(\"apiKey\", \"query\", os.Getenv(\"API_KEY\"))\n  // apiKeyHeaderAuth := httptransport.APIKeyAuth(\"X-API-TOKEN\", \"header\", os.Getenv(\"API_KEY\"))\n  resp, err := client.Operations.All(operations.AllParams{}, bearerTokenAuth)\n  // resp, err := client.Operations.All(operations.AllParams{}, basicAuth)\n  // resp, err := client.Operations.All(operations.AllParams{}, apiKeyQueryAuth)\n  // resp, err := client.Operations.All(operations.AllParams{}, apiKeyHeaderAuth)\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Printf(\"%#v\\n\", resp.Payload)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Interface in Go\nDESCRIPTION: The `Authenticator` interface defines a method for authenticating requests. It takes an interface{} as input, which represents request data, and returns a boolean indicating successful authentication, an interface{} representing the principal, and an error if authentication fails.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// request data and translate that into a valid principal object or an error\ntype Authenticator interface {\n\tAuthenticate(interface{}) (bool, interface{}, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Route-Specific Middleware in go-swagger (Go)\nDESCRIPTION: This snippet illustrates how to set middleware for a specific route and HTTP method using the `api.AddMiddlewareFor` method within the `configureAPI` function. This allows applying custom logic to certain endpoints. It requires the `operations` package and defines a custom middleware function.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/middleware.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc configureAPI(api *operations.SomeAPI) http.Handler {\n    api.AddMiddlewareFor('GET', '/', customMiddlewareFunc)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger Spec to YAML\nDESCRIPTION: This command generates a Swagger specification in YAML format and saves it to `./swagger.yml`. The tool infers the output format based on the file extension.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate-spec/spec.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswagger generate spec -o ./swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Middleware with rs/cors in Go\nDESCRIPTION: This snippet showcases how to integrate CORS (Cross-Origin Resource Sharing) middleware using the `rs/cors` library in a Go-Swagger application. The `setupGlobalMiddleware` function wraps the handler with `cors.Default().Handler`, enabling default CORS configurations. Ensure the `github.com/rs/cors` package is imported. This snippet requires the `net/http` package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_documenting.md#_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nimport \"github.com/rs/cors\"\n\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    handleCORS := cors.Default().Handler\n    return handleCORS(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Go-Swagger API Handlers\nDESCRIPTION: This snippet demonstrates setting up `go-swagger` API handlers to expose the Todo list backend functionality. It loads the Swagger specification, registers custom media types, and associates operations (GET, POST, PUT, DELETE) with handler functions. It validates the API descriptor and creates a middleware context to serve the API.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/dynamic.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tif len(os.Args) == 1 {\n\t\tlog.Fatalln(\"this command requires the swagger spec as argument\")\n\t}\n\tlog.Printf(\"loading %q as contract for the server\", os.Args[1])\n\n\tspecDoc, err := loads.Spec(os.Args[1])\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\t// our spec doesn't have application/json in the consumes or produces\n\t// so we need to clear those settings out\n\tapi := untyped.NewAPI(specDoc).WithoutJSONDefaults()\n\n\t// register serializers\n\tmediaType := \"application/io.goswagger.examples.todo-list.v1+json\"\n\tapi.DefaultConsumes = mediaType\n\tapi.DefaultProduces = mediaType\n\tapi.RegisterConsumer(mediaType, runtime.JSONConsumer())\n\tapi.RegisterProducer(mediaType, runtime.JSONProducer())\n\n\t// register the operation handlers\n\tapi.RegisterOperation(\"GET\", \"/\", findTodos)\n\tapi.RegisterOperation(\"POST\", \"/\", addOne)\n\tapi.RegisterOperation(\"PUT\", \"/{id}\", updateOne)\n\tapi.RegisterOperation(\"DELETE\", \"/{id}\", destroyOne)\n\n\t// validate the API descriptor, to ensure we don't have any unhandled operations\n\tif err := api.Validate(); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\t// construct the application context for this server\n\t// use the loaded spec document and the api descriptor with the default router\n\tapp := middleware.NewContext(specDoc, api, nil)\n\n\tlog.Println(\"serving\", specDoc.Spec().Info.Title, \"at http://localhost:8000\")\n\n\t// serve the api with spec and UI\n\tif err := http.ListenAndServe(\":8000\", app.APIHandler(nil)); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests\nDESCRIPTION: This snippet illustrates how to run standard unit tests for the go-swagger project. It utilizes the `go test ./...` command to execute all tests within the current directory and its subdirectories. The `./...` pattern is crucial for testing all packages within the project.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/contributing/getting-started.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for a Route with Swagger Annotations (Go)\nDESCRIPTION: This snippet demonstrates how to define parameters for a route using Swagger annotations.  The `swagger:params` annotation is used to specify which struct contains the parameters.  Annotations within the struct define parameter properties, such as name, location (in: path), whether it is required and a description.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n// swagger:params listOneService\ntype ListOneParams struct {\n    // ServiceName description goes here\n    //\n    // in: path\n    // required: true\n    ServiceName string `json:\"serviceName\"`\n\n    // Version description goes here\n    //\n    // in: path\n    // required: true\n    Version string `json:\"version\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Swagger UI with Custom Middleware in Go\nDESCRIPTION: This code snippet demonstrates how to create custom middleware to serve Swagger UI from a Go-Swagger generated API server. It defines a `uiMiddleware` function that redirects requests to `/swagger-ui` or `/api/help` to `/swagger-ui/` and serves files from the `swagger-ui` directory. The middleware is applied globally using `setupGlobalMiddleware`. Dependencies include `net/http` and `strings`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_documenting.md#_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    return uiMiddleware(handler)\n}\n\nfunc uiMiddleware(handler http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Shortcut helpers for swagger-ui\n        if r.URL.Path == \"/swagger-ui\" || r.URL.Path == \"/api/help\" {\n            http.Redirect(w, r, \"/swagger-ui/\", http.StatusFound)\n            return\n        }\n        // Serving ./swagger-ui/\n        if strings.Index(r.URL.Path, \"/swagger-ui/\") == 0 {\n            http.StripPrefix(\"/swagger-ui/\", http.FileServer(http.Dir(\"swagger-ui\"))).ServeHTTP(w, r)\n            return\n        }\n        handler.ServeHTTP(w, r)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting for Login in Go\nDESCRIPTION: This Go code implements the `login` function, which redirects the user to the OAuth2 authorization server's login page. It uses the `config.AuthCodeURL` method to generate the authorization URL with the defined state and then uses `http.Redirect` to redirect the user to that URL.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc login(r *http.Request) string {\n\t// implements the login with a redirection and an access token\n\tvar accessToken string\n\twG := r.Context().Value(ctxResponseWriter).(http.ResponseWriter)\n\thttp.Redirect(wG, r, config.AuthCodeURL(state), http.StatusFound)\n\treturn accessToken\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for go-swagger Generation\nDESCRIPTION: This YAML configuration file demonstrates how to customize the layout of the generated server application. It specifies the source templates, target directories, and file names for various components like the configure API, main file, embedded spec, server, builder, and documentation. It also defines the layout for models, operations (parameters, responses, and handlers).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_server.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nlayout:\n  application:\n    - name: configure\n      source: asset:serverConfigureapi\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"{{ .Name }}_client.go\"\n      skip_exists: true\n    - name: main\n      source: asset:serverMain\n      target: \"{{ joinFilePath .Target \\\"cmd\\\" (dasherize (pascalize .Name)) }}-server\"\n      file_name: \"main.go\"\n    - name: embedded_spec\n      source: asset:swaggerJsonEmbed\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"embedded_spec.go\"\n    - name: server\n      source: asset:serverServer\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"server.go\"\n    - name: builder\n      source: asset:serverBuilder\n      target: \"{{ joinFilePath .Target .ServerPackage .Package }}\"\n      file_name: \"{{ snakize (pascalize .Name) }}_api.go\"\n    - name: doc\n      source: asset:serverDoc\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"doc.go\"\n  models:\n   - name: definition\n     source: asset:model\n     target: \"{{ joinFilePath .Target .ModelPackage }}\"\n     file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n  operations:\n   - name: parameters\n     source: asset:serverParameter\n     target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package }}\"\n     file_name: \"{{ (snakize (pascalize .Name)) }}_parameters.go\"\n   - name: responses\n     source: asset:serverResponses\n     target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package }}\"\n     file_name: \"{{ (snakize (pascalize .Name)) }}_responses.go\"\n   - name: handler\n     source: asset:serverOperation\n     target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package }}\"\n     file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n```\n\n----------------------------------------\n\nTITLE: Custom Route Middleware in go-swagger (Go)\nDESCRIPTION: This snippet shows how to define a custom `net/http` middleware and apply it to a specific route using `api.AddMiddlewareFor`. It defines a middleware function `myMiddleware` and applies it to the `/example` route for the `POST` method.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/middleware.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc myMiddleware(handler http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){\n    \t\t// do some middleware logic here\n    \t\thandler.ServeHTTP(w, r)\n    \t})\n}\n\n...\napi.AddMiddlewareFor(\"POST\", \"/example\", myMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger Type using swagger:type - Go\nDESCRIPTION: This example demonstrates how to use the `swagger:type` annotation to explicitly define the Swagger type of a `NullString` struct as `string`. This overrides the default type inference for the struct's underlying type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/type.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// swagger:type string\ntype NullString struct {\n     sql.NullString\n}\n\n// swagger:model myString\ntype MyString struct {\n     NS NullString\n}\n```\n\n----------------------------------------\n\nTITLE: User Model Definition with Swagger Annotations - Go\nDESCRIPTION: This snippet demonstrates the definition of a `User` struct annotated with `swagger:model`. It includes annotations for defining required fields, minimum values, string lengths, and examples. It showcases how to define properties and their validation rules within a Go struct that will be reflected in the generated Swagger specification.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/model.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// User represents the user for this application\n//\n// A user is the security principal for this application.\n// It's also used as one of main axes for reporting.\n//\n// A user can have friends with whom they can share what they like.\n//\n// swagger:model\ntype User struct {\n\t// the id for this user\n\t//\n\t// required: true\n\t// min: 1\n\tID int64 `json:\"id\"`\n\n\t// the name for this user\n\t// required: true\n\t// min length: 3\n\tName string `json:\"name\"`\n\n\t// the email address for this user\n\t//\n\t// required: true\n\t// example: user@provider.net\n\tEmail strfmt.Email `json:\"login\"`\n\n\t// the friends for this user\n\t//\n\t// Extensions:\n\t// ---\n\t// x-property-value: value\n\t// x-property-array:\n\t//   - value1\n\t//   - value2\n\t// x-property-array-obj:\n\t//   - name: obj\n\t//     value: field\n\t// ---\n\tFriends []User `json:\"friends\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the AddOneHandlerFunc in Go\nDESCRIPTION: The `AddOneHandlerFunc` provides a concrete implementation for handling the `addOne` operation. It receives request parameters and a security principal, saves the request body to a database, and returns either a success (201 Created) or error (500) response. The params.Body contains the parsed and validated body.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ntodos.AddOneHandlerFunc(func(params todos.AddOneParams, principal interface{}) middleware.Responder {\n  created, err := database.Save(params.Body)\n  if err != nil {\n    return AddOneDefault{models.Error{500, err.Error()}}\n  }\n  return AddOneCreated{created}\n})\n```\n\n----------------------------------------\n\nTITLE: Generating API Client via Swagger CLI\nDESCRIPTION: This command generates an API client based on a provided Swagger/OpenAPI specification file. The `--spec` flag specifies the path to the swagger.yaml file, which defines the API contract. It's a core operation for design-first workflows.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/about.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswagger generate client --spec swagger.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating a client with go-swagger\nDESCRIPTION: This command generates the necessary files for a client library based on a swagger specification. It requires the swagger tool and a valid swagger specification file. The application name and principal can also be specified.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/client.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswagger generate client -f [http-url|filepath] -A [application-name] [--principal [principal-name]]\n```\n\n----------------------------------------\n\nTITLE: Define Security Schemes in Swagger YAML\nDESCRIPTION: This YAML snippet defines several security schemes, including basic authentication (`isRegistered`), API key authentication via header (`isReseller`) and query parameter (`isResellerQuery`), and OAuth2 with JWT (`hasRole`). It specifies the types, locations, names, flows, authorization URLs, token URLs, and scopes for each scheme.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityDefinitions:\n  isRegistered:\n    # This scheme uses the header: \"Authorization: Basic {base64 encoded string defined by username:password}\"\n    # Scopes are not supported with this type of authorization.\n    type: basic\n  isReseller:\n    # This scheme uses the header: \"X-Custom-Key: {base64 encoded string}\"\n    # Scopes are not supported with this type of authorization.\n    type: apiKey\n    in: header\n    name: X-Custom-Key\n  isResellerQuery:\n    # This scheme uses the query parameter \"CustomKeyAsQuery\"\n    # Scopes are not supported with this type of authorization.\n    type: apiKey\n    in: query\n    name: CustomKeyAsQuery\n  hasRole:\n    # This scheme uses the header: \"Authorization: Bearer {base64 encoded string representing a JWT}\"\n    # Alternatively, the query param: \"access_token\" may be used.\n    #\n    # In our scenario, we must use the query param version in order to avoid \n    # passing several headers with key 'Authorization'\n    type: oauth2\n    # The flow and URLs in spec are for documentary purpose: go-swagger does not implement OAuth workflows\n    flow: accessCode\n    authorizationUrl: 'https://dummy.oauth.net/auth'\n    tokenUrl: 'https://dumy.oauth.net/token'\n    # Required scopes are passed by the runtime to the authorizer\n    scopes:\n      customer: scope of registered customers\n      inventoryManager: scope of resellers acting as inventory managers\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Description using Swagger Annotations (Go)\nDESCRIPTION: This snippet shows how to define a route with a description using swagger annotations. It includes the route path, HTTP method, and a description of the endpoint's functionality.  It demonstrates how to specify input/output content types and response codes. The struct used as a parameter needs to be defined and linked via annotations as described in the documentation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n// v2PutXXX disable/enable a compute node EC2 machine with a given IP address\n//\n// swagger:route PUT /compute/nodes/{nodeIPAddress} v2PutXXX\n//\n// Disable/enable a compute node machine with a given IP address\n//\n// Produces:\n// - application/json\n//\n// Consumes:\n// - application/json\n//\n// Schemes: http\n//\n// Responses:\n// default: errorResp\n// 200: okResp\n//\nfunc v2PutXXX(....)\n```\n\n----------------------------------------\n\nTITLE: Defining Item Model in YAML\nDESCRIPTION: This YAML snippet defines the 'item' model for the todo list application. It specifies the structure of a todo item, including its properties (id, description, completed), their data types, and constraints (e.g., description must be at least 1 character long).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  item:\n    type: object\n    required:\n      - description\n    properties:\n      id:\n        type: integer\n        format: int64\n        readOnly: true\n      description:\n        type: string\n        minLength: 1\n      completed:\n        type: boolean\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Swagger from Local Clone\nDESCRIPTION: This snippet details how to build and install the go-swagger tool from a local clone of the repository. It first navigates to the repository directory and then uses `go install ./cmd/swagger` to build and install the tool.  The `swagger version` command is then used to verify the installed version.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/contributing/getting-started.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd $GOPATH/src/github.com/go-swagger\ngo install ./cmd/swagger\n\nswagger version\ndev\n```\n\n----------------------------------------\n\nTITLE: AllOfModel with swagger:allOf and Composition\nDESCRIPTION: Defines the `AllOfModel` struct, demonstrating the use of `swagger:allOf` to compose SimpleOne and Notable structs, and a non-annotated Something struct. The `CreatedAt` field uses `strfmt.DateTime` for a specific format.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/allOf.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// An AllOfModel is composed out of embedded structs but it should build\n// an allOf property\ntype AllOfModel struct {\n\t// swagger:allOf\n\tSimpleOne\n\t// swagger:allOf\n\tmods.Notable\n\n\tSomething // not annotated with anything, so should be included\n\n\tCreatedAt strfmt.DateTime `json:\"createdAt\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Security in Swagger YAML\nDESCRIPTION: This YAML snippet defines the OAuth2 security scheme in the Swagger specification file (swagger.yml). It specifies the 'accessCode' flow, authorization URL, token URL, and available scopes (admin, user).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityDefinitions:\n  OauthSecurity:\n    type: oauth2\n    flow: accessCode\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth'\n    tokenUrl: 'https://www.googleapis.com/oauth2/v4/token'\n    scopes:\n      admin: Admin scope\n      user: User scope\n```\n\n----------------------------------------\n\nTITLE: External Type Definition - YAML\nDESCRIPTION: This YAML defines an external type `myType` using the `x-go-type` extension. The `type` property specifies the Go type name, and the `import` property specifies the fully qualified package name where the type is defined. This allows using a custom type instead of generating a new one.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  myType:\n    type: object\n    x-go-type:\n      type: MyExternalType                          # <- abide by go conventions! The type must be exported\n      import:\n        package: github.com/example/models/custom     # <- use fully qualified package names\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Example in Go\nDESCRIPTION: This code snippet demonstrates a custom validation function for a book's price based on the author. It checks if the book's price exceeds a certain limit for a specific author.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif book.author == \"Some author\" {\n    if book.price > 1000 {\n       return false\n   }\n    else return true\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Model Result Example - YAML\nDESCRIPTION: This snippet represents the expected result in YAML format after processing the swagger annotations. In this specific example, it is an empty YAML block indicating that the full result will be generated by the swagger tool based on the model definition, encompassing properties, types, and validation constraints.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/model.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes with Swagger Annotations (Go)\nDESCRIPTION: This snippet shows how to define API routes using swagger annotations.  Empty lines are required between `swagger:route` annotations. This approach allows the go-swagger tool to correctly generate the specification for the proposed routes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// ServeAPI serves the API for this record store\nfunc ServeAPI(host, basePath string, schemes []string) error {\n    // swagger:route GET /pets pets users listPets\n\n    // swagger:route GET /orders orders listOrders\n\n    // swagger:route POST /orders orders createOrder\n\n    // swagger:route GET /orders/{id} orders orderDetails\n\n    // swagger:route PUT /orders/{id} orders updateOrder\n\n    // swagger:route DELETE /orders/{id} orders deleteOrder\nreturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Parameters Syntax\nDESCRIPTION: Illustrates the basic syntax for applying the `swagger:parameters` annotation to a struct, linking it to specific operation IDs in a Swagger/OpenAPI specification. This annotation allows you to define the parameters for those operations using the fields within the struct.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/params.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nswagger:parameters [operationid1 operationid2]\n```\n\n----------------------------------------\n\nTITLE: Swagger Model Generation Usage\nDESCRIPTION: This snippet shows the usage and options for the `swagger generate model` command, allowing you to create data models from a Swagger specification. It details options for specifying the spec file, target directory, model package, and more.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/model.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nUsage:\n  swagger [OPTIONS] generate model [model-OPTIONS]\n\ngenerate one or more models from the swagger spec\n\nApplication Options:\n  -q, --quiet                                                                     silence logs\n      --log-output=LOG-FILE                                                       redirect logs to file\n\nHelp Options:\n  -h, --help                                                                      Show this help message\n\n[model command options]\n      -n, --name=                                                                 the model to generate, repeat for multiple (defaults to all). Same as --models\n          --accept-definitions-only                                               accepts a partial swagger spec wih only the definitions key\n\n    Options common to all code generation commands:\n      -f, --spec=                                                                 the spec file to use (default swagger.{json,yml,yaml})\n      -t, --target=                                                               the base directory for generating the files (default: ./)\n          --template=[stratoscale]                                                load contributed templates\n      -T, --template-dir=                                                         alternative template override directory\n      -C, --config-file=                                                          configuration file to use for overriding template options\n      -r, --copyright-file=                                                       copyright file used to add copyright header\n          --additional-initialism=                                                consecutive capitals that should be considered intialisms\n          --allow-template-override                                               allows overriding protected templates\n          --skip-validation                                                       skips validation of spec prior to generation\n          --dump-data                                                             when present dumps the json for the template generator instead of generating files\n          --strict-responders                                                     Use strict type for the handler return value\n          --with-expand                                                           expands all $ref's in spec prior to generation (shorthand to --with-flatten=expand)\n          --with-flatten=[minimal|full|expand|verbose|noverbose|remove-unused]    flattens all $ref's in spec prior to generation (default: minimal, verbose)\n\n    Options for model generation:\n      -m, --model-package=                                                        the package to save the models (default: models)\n      -M, --model=                                                                specify a model to include in generation, repeat for multiple (defaults to all)\n          --existing-models=                                                      use pre-generated models e.g. github.com/foobar/model\n          --strict-additional-properties                                          disallow extra properties when additionalProperties is set to false\n          --keep-spec-order                                                       keep schema properties order identical to spec file\n          --struct-tags=                                                          the struct tags to generate, repeat for multiple (defaults to json)\n          --rooted-error-path                                                     extends validation errors with the type name instead of an empty path, in the case of arrays and maps\n```\n\n----------------------------------------\n\nTITLE: Define AND Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet illustrates how to define an AND security requirement, where both `isRegistered` and `hasRole[customer]` are required to access the `/order/{orderID}` endpoint.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  /order/{orderID}:\n    get:\n      summary: retrieves an order\n      operationId: GetOrder\n      description: |\n        Only registered customers should be able to retrieve orders\n      security: \n        - isRegistered: []\n          hasRole: [ customer ]  \n...\n```\n\n----------------------------------------\n\nTITLE: Swagger YAML with Default and Required Properties\nDESCRIPTION: This YAML snippet demonstrates a swagger specification where a default object is defined with missing required properties. The example shows that go-swagger validation will reject this specification, as the default object must validate against the object schema.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_swagger.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  /person/{id}:\n    put:\n      summary: Put a person\n      description: Put a person.\n      consumes:\n        - application/json\n      parameters:\n        - name: id\n          in: path\n          description: ID of person\n          required: true\n          type: integer\n        - in: body\n          name: body\n          description: Person\n          schema:\n            type: object\n            required:\n              - username\n            default:\n              firstName: John\n              lastName: Smith\n            properties:\n              firstName:\n                type: string\n              lastName:\n                type: string\n              username:\n                type: string\n      responses:\n        200:\n          description: successful\n```\n\n----------------------------------------\n\nTITLE: Defining Security Schemes in Swagger YAML\nDESCRIPTION: This YAML snippet defines several security schemes including basic authentication (isRegistered), API key authentication via header (isReseller), API key authentication via query parameter (isResellerQuery), and OAuth2 with JWT (hasRole). These schemes are then used to configure security requirements for different API operations.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityDefinitions:\n  isRegistered:\n    # This scheme uses the header: \"Authorization: Basic {base64 encoded string defined by username:password}\"\n    # Scopes are not supported with this type of authorization.\n    type: basic\n  isReseller:\n    # This scheme uses the header: \"X-Custom-Key: {base64 encoded string}\"\n    # Scopes are not supported with this type of authorization.\n    type: apiKey\n    in: header\n    name: X-Custom-Key\n  isResellerQuery:\n    # This scheme uses the query parameter \"CustomKeyAsQuery\"\n    # Scopes are not supported with this type of authorization.\n    type: apiKey\n    in: query\n    name: CustomKeyAsQuery\n  hasRole:\n    # This scheme uses the header: \"Authorization: Bearer {base64 encoded string representing a JWT}\"\n    # Alternatively, the query param: \"access_token\" may be used.\n    #\n    # In our scenario, we must use the query param version in order to avoid \n    # passing several headers with key 'Authorization'\n    type: oauth2\n    # The flow and URLs in spec are for documentary purpose: go-swagger does not implement OAuth workflows\n    flow: accessCode\n    authorizationUrl: 'https://dummy.oauth.net/auth'\n    tokenUrl: 'https://dumy.oauth.net/token'\n    # Required scopes are passed by the runtime to the authorizer\n    scopes:\n      customer: scope of registered customers\n      inventoryManager: scope of resellers acting as inventory managers\n```\n\n----------------------------------------\n\nTITLE: Server Command Line Parameters\nDESCRIPTION: This code snippet lists the command-line parameters available for customizing the generated server. These parameters allow configuration of various aspects of the server, such as timeouts, listening addresses, and TLS settings.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n      --cleanup-timeout duration     grace period for which to wait before killing idle connections (default 10s)\n      --graceful-timeout duration    grace period for which to wait before shutting down the server (default 15s)\n      --host string                  the IP to listen on (default \"localhost\")\n      --keep-alive duration          sets the TCP keep-alive timeouts on accepted connections. It prunes dead TCP connections ( e.g. closing laptop mid-download) (default 3m0s)\n      --listen-limit int             limit the number of outstanding requests\n      --max-header-size byte-size    controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. It does not limit the size of the request body (default 1MB)\n      --port int                     the port to listen on for insecure connections, defaults to a random value\n      --read-timeout duration        maximum duration before timing out read of the request (default 30s)\n      --scheme strings               the listeners to enable, this can be repeated and defaults to the schemes in the swagger spec (default [http,https,unix])\n      --socket-path string           the unix socket to listen on (default \"/var/run/todo-list.sock\")\n      --tls-ca string                the certificate authority certificate file to be used with mutual tls auth\n      --tls-certificate string       the certificate file to use for secure connections\n      --tls-host string              the IP to listen on (default \"localhost\")\n      --tls-keep-alive duration      sets the TCP keep-alive timeouts on accepted connections. It prunes dead TCP connections ( e.g. closing laptop mid-download) (default 3m0s)\n      --tls-key string               the private key file to use for secure connections (without passphrase)\n      --tls-listen-limit int         limit the number of outstanding requests\n      --tls-port int                 the port to listen on for secure connections, defaults to a random value\n      --tls-read-timeout duration    maximum duration before timing out read of the request (default 30s)\n      --tls-write-timeout duration   maximum duration before timing out write of the response (default 30s)\n      --write-timeout duration       maximum duration before timing out write of the response (default 30s)\n```\n\n----------------------------------------\n\nTITLE: Define Security Definitions in swagger.yml (YAML)\nDESCRIPTION: Defines the security scheme for OAuth2 using the accessCode flow in the swagger specification. It specifies the authorization and token URLs, as well as the scopes required for authentication (admin, user).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityDefinitions:\n  OauthSecurity:\n    type: oauth2\n    flow: accessCode\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth'\n    tokenUrl: 'https://www.googleapis.com/oauth2/v4/token'\n    scopes:\n      admin: Admin scope\n      user: User scope\n```\n\n----------------------------------------\n\nTITLE: Return a 'Not Implemented' responder in Go-Swagger\nDESCRIPTION: This Go code demonstrates how to return a `NotImplemented` responder from a handler. This responder will return a 501 status code to the client, indicating that the requested operation has not been implemented.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/server.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmiddleware.NotImplemented(\"operation todos.AddOne has not yet been implemented\")\n```\n\n----------------------------------------\n\nTITLE: Overriding host with HTTP transport in Go\nDESCRIPTION: This code snippet demonstrates how to override the host for the default client by creating a custom HTTP transport. It retrieves the host from an environment variable, creates a new transport with the specified host, and then creates a new API client with this transport. The example assumes that the client package is located at `github.com/myproject/client`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/client.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"os\"\n  \"log\"\n\n  \"github.com/myproject/client/operations\"\n  \"github.com/go-openapi/strfmt\"\n  \"github.com/go-openapi/spec\"\n\n  apiclient \"github.com/myproject/client\"\n  httptransport \"github.com/go-openapi/runtime/client\"\n)\n\nfunc main() {\n\n  // create the transport\n  transport := httptransport.New(os.Getenv(\"TODOLIST_HOST\"), \"\", nil)\n\n  // create the API client, with the transport\n  client := apiclient.New(transport, strfmt.Default)\n\n  // to override the host for the default client\n  // apiclient.Default.SetTransport(transport)\n\n  // make the request to get all items\n  resp, err := client.Operations.All(operations.AllParams{})\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Printf(\"%#v\\n\", resp.Payload)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger Specification via Swagger CLI\nDESCRIPTION: This command generates a Swagger/OpenAPI specification from Go code, using annotations within the code to define the API structure and behavior. The `./...` argument tells swagger to recursively scan the current directory for Go files. This is a key operation for code-first workflows.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/about.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswagger generate spec ./...\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of Unrestricted Extensible Object\nDESCRIPTION: This YAML snippet defines an extensible object with no restrictions on the type of additional properties.  `additionalProperties: true` indicates that any type is allowed for the additional properties.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  extensibleObject:\n    type: object\n    properties:\n      prop1:\n        type: integer\n    additionalProperties: true\n```\n\n----------------------------------------\n\nTITLE: Swagger Route Annotation Syntax (Go)\nDESCRIPTION: Defines the syntax for the `swagger:route` annotation used to link a path to an HTTP method in Go code for generating Swagger documentation. The annotation specifies the method, path pattern, tags, and operation ID.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/route.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nswagger:route [method] [path pattern] [?tag1 tag2 tag3] [operation id]\n```\n\n----------------------------------------\n\nTITLE: Custom Email String Format Implementation in Go\nDESCRIPTION: Demonstrates how to create a custom string format named 'email' using the `swagger:strfmt` annotation. This involves defining a custom type `Email` and implementing the `MarshalText`, `UnmarshalText`, `sql.Scanner`, and `driver.Valuer` interfaces to handle serialization, deserialization, and database interaction.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/strfmt.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n  eml := Email(\"\")\n  Default.Add(\"email\", &eml, govalidator.IsEmail)\n}\n\n// Email represents the email string format as specified by the json schema spec\n//\n// swagger:strfmt email\ntype Email string\n\n// MarshalText turns this instance into text\nfunc (e Email) MarshalText() ([]byte, error) {\n\treturn []byte(string(e)), nil\n}\n\n// UnmarshalText hydrates this instance from text\nfunc (e *Email) UnmarshalText(data []byte) error { // validation is performed later on\n\t*e = Email(string(data))\n\treturn nil\n}\n\nfunc (b *Email) Scan(raw interface{}) error {\n\tswitch v := raw.(type) {\n\tcase []byte:\n\t\t*b = Email(string(v))\n\tcase string:\n\t\t*b = Email(v)\n\tdefault:\n\t\treturn fmt.Errorf(\"cannot sql.Scan() strfmt.Email from: %#v\", v)\n\t}\n\n\treturn nil\n}\n\nfunc (b Email) Value() (driver.Value, error) {\n\treturn driver.Value(string(b)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth2 Packages in Go\nDESCRIPTION: This Go code imports necessary packages for OAuth2 and OpenID Connect (OIDC) functionality. The `go-oidc` package is used for interacting with Google's OpenID Connect provider, and `golang.org/x/oauth2` is used for handling OAuth2 flows.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\toidc \"github.com/coreos/go-oidc\"            // Google OpenID client\n\t\"context\"\n\t\"golang.org/x/oauth2\"                       // OAuth2 client\n)\n```\n\n----------------------------------------\n\nTITLE: Serving Static HTML File with HTTP Handler in Go\nDESCRIPTION: This code snippet shows a simple HTTP handler in Go that serves a static HTML file. The `pastaWorkspacePage` function uses `http.ServeFile` to serve the `./static/workspace.html` file. This is a basic example of how to serve static content in a Go web application. Requires the `net/http` package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_documenting.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Handler example which I want to add to swagger server\nfunc pastaWorkspacePage(w http.ResponseWriter, r *http.Request) {\n\thttp.ServeFile(w, r, \"./static/workspace.html\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the ServeHTTP Method for AddOne in Go\nDESCRIPTION: The `ServeHTTP` method is the implementation of the `http.Handler` interface for the `AddOne` struct.  It handles authentication, request binding, and calling the handler.  It returns the response based on the responder provided by the handler.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *AddOne) ServeHTTP(rw http.ResponseWriter, r *http.Request) {\n\troute, _ := o.Context.RouteInfo(r)\n\n\tuprinc, err := o.Context.Authorize(r, route)\n\tif err != nil {\n\t\to.Context.Respond(rw, r, route.Produces, route, err)\n\t\treturn\n\t}\n\tvar principal interface{}\n\tif uprinc != nil {\n\t\tprincipal = uprinc\n\t}\n\n\tif err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params\n\t\to.Context.Respond(rw, r, route.Produces, route, err)\n\t\treturn\n\t}\n\n\tres := o.Handler.Handle(o.Params, principal) // actually handle the request\n\n\to.Context.Respond(rw, r, route.Produces, route, res)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP RoundTripper for Custom User-Agent in Go\nDESCRIPTION: This code snippet demonstrates how to configure a custom HTTP RoundTripper to set a custom User-Agent header using go-swagger. It involves creating a custom RoundTripper, configuring the HTTP transport, and then setting the custom RoundTripper on the transport before creating the client.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_client.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar myRoundTripper http.RoundTripper = createRoundTripper()\ntransport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)\ntransport.Transport = myRoundTripper\ntodoListClient := New(transport, nil)\n```\n\n----------------------------------------\n\nTITLE: Client Config Struct Definition in Go\nDESCRIPTION: Defines the Config struct for creating a new client, allowing for a custom server endpoint (URL) and custom client middleware (Transport). The Transport field is an http.RoundTripper.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\t// URL is the base URL of the upstream server\n\tURL *url.URL\n\t// Transport is an inner transport for the client\n\tTransport http.RoundTripper\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Field with swagger:ignore in Go\nDESCRIPTION: This snippet demonstrates how to use the `swagger:ignore` directive to exclude a specific field from a struct from the Swagger specification. This is useful when a field represents internal data or sensitive information that shouldn't be exposed in the API documentation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/ignore.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//swagger: model Person\ntype Person struct {\n    // example: John Doe\n    name        string  `json:\"name\"`\n    // example: 27\n    age         int     `json:\"age\\\"\"`\n    // example: New York\n    city        string  `json:\"city\"`\n    // example: 1234567890\n    phone       string  `json:\"phone\"`\n    // example: 1A2B3C\n    // swagger: ignore\n    uniqueId    string  `json:\"unique_id\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger Parameters with Struct\nDESCRIPTION: This example demonstrates how to define Swagger parameters using a struct and the `swagger:parameters` annotation. It showcases the usage of various annotations to specify constraints and metadata for the parameters, including minimum/maximum items, unique values, and regular expression patterns.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/params.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// swagger:parameters listBars addBars\ntype BarSliceParam struct {\n\t// a BarSlice has bars which are strings\n\t//\n\t// min items: 3\n\t// max items: 10\n\t// unique: true\n\t// items.minItems: 4\n\t// items.maxItems: 9\n\t// items.items.minItems: 5\n\t// items.items.maxItems: 8\n\t// items.items.items.minLength: 3\n\t// items.items.items.maxLength: 10\n\t// items.items.items.pattern: \\w+\n\t// collection format: pipe\n\t// in: query\n\t// example: [[[\"bar_000\"]]]\n  // Extensions:\n  //   x-example-flag: true\n  //   x-some-list:\n  //     - dog\n  //     - cat\n  //     - bird\n\tBarSlice [][][]string `json:\"bar_slice\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Define roleClaims struct in Go\nDESCRIPTION: This Go code defines a `roleClaims` struct that represents the structure of custom claims in a JWT token. It includes a `Roles` field (an array of strings) and embeds the standard JWT claims from `jwt.StandardClaims`. This struct is used to extract roles from the JWT.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// roleClaims describes the format of our JWT token's claims\ntype roleClaims struct {\n\tRoles []string `json:\"roles\"`\n\tjwt.StandardClaims\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the RequestBinder Interface in Go\nDESCRIPTION: The `RequestBinder` interface defines a contract for types that can bind data from an HTTP request. Implementations must provide a `BindRequest` method that populates the type's fields from the request data, handling parsing and validation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// RequestBinder is an interface for types to implement\n// when they want to be able to bind from a request\ntype RequestBinder interface {\n\tBindRequest(*http.Request, *MatchedRoute) error\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Types in Go\nDESCRIPTION: This Go code defines authentication function types for user/password and token-based authentication. It also defines an `AuthenticatorFunc` which adapts a function into an `Authenticator` interface implementation. The `Authenticator` interface represents an authentication strategy with an `Authenticate` method.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n// UserPassAuthentication authentication function\ntype UserPassAuthentication func(string, string) (interface{}, error)\n\n// TokenAuthentication authentication function\ntype TokenAuthentication func(string) (interface{}, error)\n\n// AuthenticatorFunc turns a function into an authenticator\ntype AuthenticatorFunc func(interface{}) (bool, interface{}, error)\n\n// Authenticate authenticates the request with the provided data\nfunc (f AuthenticatorFunc) Authenticate(params interface{}) (bool, interface{}, error) {\n\treturn f(params)\n}\n\n// Authenticator represents an authentication strategy\n// implementations of Authenticator know how to authenticate the\n```\n\n----------------------------------------\n\nTITLE: Defining a Swagger Response\nDESCRIPTION: This example demonstrates how to define a Swagger response using the `swagger:response` annotation in a Go struct. The struct `ValidationError` is decorated with the annotation, indicating that it represents a response named `validationError`. The `Body` field is specified as the response body.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/response.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A ValidationError is an error that is used when the required input fails validation.\n// swagger:response validationError\ntype ValidationError struct {\n\t// The error message\n\t// in: body\n\tBody struct {\n\t\t// The validation message\n\t\t//\n\t\t// Required: true\n\t\t// Example: Expected type int\n\t\tMessage string\n\t\t// An optional field name to which this validation applies\n\t\tFieldName string\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configure API Authorizers in Go\nDESCRIPTION: This snippet demonstrates how to configure different types of authorizers for a Go-Swagger API. It shows how to define handlers for Basic Auth (IsRegisteredAuth), Bearer Token Auth (HasRoleAuth), Query Parameter Auth (IsResellerQueryAuth), and Header Auth (IsResellerAuth). The handlers are assigned to the corresponding API authentication schemes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc configureAPI(api *operations.MultiAuthExampleAPI) http.Handler {\n\t// configure the api here\n\tapi.ServeError = errors.ServeError\n\n    ...\n\tlogger := logging.MustGetLogger(\"api\")\n\n\tapi.Logger = logger.Infof\n\n\tapi.JSONConsumer = runtime.JSONConsumer()\n\n\tapi.JSONProducer = runtime.JSONProducer()\n\n\t// Applies when the \"Authorization: Basic\" header is set with the Basic scheme\n\tapi.IsRegisteredAuth = func(user string, pass string) (*models.Principal, error) {\n\t\t// The header: Authorization: Basic {base64 string} has already been decoded by the runtime as a username:password pair\n\t\tapi.Logger(\"IsRegisteredAuth handler called\")\n\t\treturn auth.IsRegistered(user, pass)\n\t}\n\n\t// Applies when the \"Authorization: Bearer\" header or the \"access_token\" query is set\n\tapi.HasRoleAuth = func(token string, scopes []string) (*models.Principal, error) {\n\t\t// The header: Authorization: Bearer {base64 string} (or ?access_token={base 64 string} param) has already\n\t\t// been decoded by the runtime as a token\n\t\tapi.Logger(\"HasRoleAuth handler called\")\n\t\treturn auth.HasRole(token, scopes)\n\t}\n\n\t// Applies when the \"CustomKeyAsQuery\" query is set\n\tapi.IsResellerQueryAuth = func(token string) (*models.Principal, error) {\n\t\tapi.Logger(\"ResellerQueryAuth handler called\")\n\t\treturn auth.IsReseller(token)\n\t}\n\n\t// Applies when the \"X-Custom-Key\" header is set\n\tapi.IsResellerAuth = func(token string) (*models.Principal, error) {\n\t\tapi.Logger(\"IsResellerAuth handler called\")\n\t\treturn auth.IsReseller(token)\n\t}\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Go\nDESCRIPTION: This code implements a basic authentication function that checks if a user is registered. It retrieves the password for the given username from a user database (userDb). If the provided password matches the stored password, it returns a principal; otherwise, it returns an error indicating unauthorized access.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// IsRegistered determines if the user is properly registered,\n// i.e if a valid username:password pair has been provided\nfunc IsRegistered(user, pass string) (*models.Principal, error) {\n\tlogger.Debugf(\"Credentials: %q:%q\", user, pass)\n\tif password, ok := userDb[user]; ok {\n\t\tif pass == password {\n\t\t\treturn &models.Principal{\n\t\t\t\tName: user,\n\t\t\t}, nil\n\t\t}\n\t}\n\tlogger.Debug(\"Bad credentials\")\n\treturn nil, errors.New(401, \"Unauthorized: not a registered user\")\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Example: Complex Array Flattening\nDESCRIPTION: This YAML example demonstrates how a complex array structure is factorized using full flattening in the swagger toolkit.  The inline schema for the `items` property is extracted into a separate named definition `complexArrayItems`. This simplifies the original structure. The transformation is enabled with the `--with-flatten=full` option.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  complexArray:\n    schema:\n      type: array\n      items:\n        type: object        # <- inline schema for items\n        properties:\n          prop1:\n            type: integer\n```\n\n----------------------------------------\n\nTITLE: Generating Client for XML API with go-swagger\nDESCRIPTION: This command generates a client for an XML API using go-swagger. It sets the default `consumes` type to `application/xml`, which is crucial for handling XML responses. Replace `[http-url|filepath]` with the location of your Swagger specification and `[application-name]` with the name for your application.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/client.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate client -f [http-url|filepath] -A [application-name] --default-consumes application/xml\n```\n\n----------------------------------------\n\nTITLE: Config File Example\nDESCRIPTION: This JSON code represents an example configuration file for the CLI tool. It stores values for hostname, scheme, base path, and authentication tokens. The CLI tool will look for a config file in `~/.config/<program name>/config.json` by default.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hostname\":\"localhost:12345\",\n    \"scheme\":\"http\",\n    \"base_path\":\"/base-path/\",\n    \"x-todolist-token\":\"example token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Access Token in Go\nDESCRIPTION: This Go code implements the `authenticated` function, which validates the access token by sending a request to the user info endpoint (`userInfoURL`). It adds the token to the `Authorization` header and checks the response status code. If the status code is 200, it considers the token valid.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc authenticated(token string) (bool, error) {\n\t// validates the token by sending a request at userInfoURL\n\tbearToken := \"Bearer \" + token\n\treq, err := http.NewRequest(\"GET\", userInfoURL, nil)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"http request: %v\", err)\n\t}\n\n\treq.Header.Add(\"Authorization\", bearToken)\n    \n\tcli := &http.Client{}\n\tresp, err := cli.Do(req)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"http request: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\t_, err = io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"fail to get response: %v\", err)\n\t}\n\tif resp.StatusCode != 200 {\n\t\treturn false, nil\n\t}\n\treturn true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Callback for Access Token Retrieval (Go)\nDESCRIPTION: Implements the callback functionality to retrieve the access token from the Google OAuth2 server. It validates the state parameter, exchanges the authorization code for an access token using the `config.Exchange` method, and returns the access token.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc callback(r *http.Request) (string, error) {\n    // we expect the redirected client to call us back \n    // with 2 query params: state and code.\n    // We use directly the Request params here, since we did not \n    // bother to document these parameters in the spec.\n\n\tif r.URL.Query().Get(\"state\") != state {\n\t\tlog.Println(\"state did not match\")\n\t\treturn \"\", fmt.Errorf(\"state did not match\")\n\t}\n\n\tmyClient := &http.Client{}\n\n\tparentContext := context.Background()\n\tctx := oidc.ClientContext(parentContext, myClient)\n\n\tauthCode := r.URL.Query().Get(\"code\")\n\tlog.Printf(\"Authorization code: %v\\n\", authCode)\n\n    // Exchange converts an authorization code into a token.\n    // Under the hood, the oauth2 client POST a request to do so\n    // at tokenURL, then redirects...\n\toauth2Token, err := config.Exchange(ctx, authCode)\n\tif err != nil {\n\t\tlog.Println(\"failed to exchange token\", err.Error())\n\t\treturn \"\", fmt.Errorf(\"failed to exchange token\")\n\t}\n\n    // the authorization server's returned token\n\tlog.Println(\"Raw token data:\", oauth2Token)\n\treturn oauth2Token.AccessToken, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Setup (Golang)\nDESCRIPTION: Shows how to set up middleware in a go-swagger generated server. This middleware executes after routing but before authentication, binding, and validation.  The example function takes an `http.Handler` and returns an `http.Handler`, allowing for wrapping the handler with middleware logic.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_server.md#_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.\n// The middleware executes after routing but before authentication, binding and validation.\nfunc setupMiddlewares(handler http.Handler) http.Handler {\n    return handler\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Expand Command\nDESCRIPTION: The `swagger expand` command expands all `$ref`s in a Swagger specification. This is useful for validating a schema, producing documentation, or generating test cases. The command can be invoked directly or through the flatten command with the `--with-expand` flag. It resolves local and remote `$ref`s (except circular remote ones, which require `flatten`).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nswagger expand {spec}\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with Valid Token (curl)\nDESCRIPTION: This snippet demonstrates how to access an API endpoint using curl with a valid bearer token. It sends an HTTP request with the 'Authorization' header set to 'Bearer TOKEN', where TOKEN should be replaced with a previously obtained token.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_11\n\nLANGUAGE: shellsession\nCODE:\n```\n± ivan@avalon:~  \n »  curl -i  -H 'Authorization: Bearer TOKEN' http://127.0.0.1:12345/api/customers\n```\n\n----------------------------------------\n\nTITLE: Generating an API Server\nDESCRIPTION: This command generates a Go API server from a Swagger specification file. The generated server includes handlers, models, and other necessary components to run the API.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate server [-f ./swagger.json] -A [application-name [--principal [principal-name]]\n```\n\n----------------------------------------\n\nTITLE: Integrating pflag with goflag in main.go (Golang)\nDESCRIPTION: Demonstrates how to integrate pflag with goflag using the github.com/spf13/pflag package. This allows combining command-line flags from both libraries.  It shows how to add Go flags to the pflag command line and then parse the flags. This is useful when integrating with libraries that use goflag, such as glog.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_server.md#_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n    goflag \"flag\"\n    flag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n    flag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n    flag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger File Upload Specification in YAML\nDESCRIPTION: This YAML snippet defines the file upload endpoint in the Swagger specification.  It specifies that the endpoint accepts multipart/form-data and includes a parameter named 'file' of type 'file' in the formData.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/file-server/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /upload:\n    post:\n      consumes:\n      - multipart/form-data\n      parameters:\n      - name: file\n        in: formData\n        type: file\n```\n\n----------------------------------------\n\nTITLE: Swagger Route Properties Example (YAML)\nDESCRIPTION: Illustrates how to define route properties such as `operationId`, `deprecated`, `summary`, `description`, `tags`, `consumes`, `produces`, `schemes`, `security`, `parameters`, `responses`, and `extensions` within a Swagger/OpenAPI specification using YAML.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/route.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  \"/pets\":\n    get:\n      operationId: listPets\n      deprecated: true\n      summary: Lists pets filtered by some parameters.\n      description: \"This will show all available pets by default.\\nYou can get the pets that are out of stock\"\n      tags:\n      - pets\n      - users\n      consumes:\n      - application/json\n      - application/x-protobuf\n      produces:\n      - application/json\n      - application/x-protobuf\n      schemes:\n      - http\n      - https\n      - ws\n      - wss\n      security:\n        api_key: []\n        oauth:\n        - read\n        - write\n      parameters:\n        description: maximum number of results to return\n        format: int43\n        in: query\n        name: limit\n        type: integer\n      responses:\n        default:\n          $ref: \"#/responses/genericError\"\n        200:\n          $ref: \"#/responses/someResponse\"\n        422:\n          $ref: \"#/responses/validationError\"\n      extensions:\n        x-example-flag: true\n        x-some-list:\n        - dog\n        - cat\n        - bird\n```\n\n----------------------------------------\n\nTITLE: External Package Aliasing with Alias - YAML Definition\nDESCRIPTION: This YAML snippet illustrates how to import an external package with an alias using the `x-go-type` extension.  It defines a schema using the external type `MyExternalStruct` from `github.com/example/models/custom` and assigns the alias `fred` to the imported package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    in: body\n    schema:\n      type: object\n      x-go-type:\n        type: MyExternalStruct\n        import:\n          package: github.com/example/models/custom\n          alias: fred\n```\n\n----------------------------------------\n\nTITLE: Swagger Flatten Command with Minimal Option\nDESCRIPTION: The `swagger flatten --with-flatten=minimal` command explicitly specifies minimal flattening.  It bundles all external `$ref`s into the local document and resolves JSON pointers to anonymous places. It resolves `$ref`s in swagger-specific sections like `parameters` and `responses`, leaving only schema `$ref`s with the canonical form `\"$ref\": \"#/definitions/modelName\"`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nswagger flatten --with-flatten=minimal {spec}\n```\n\n----------------------------------------\n\nTITLE: Using the default API client with HTTP transport in Go\nDESCRIPTION: This code snippet demonstrates how to use the default API client generated by go-swagger, which includes an HTTP transport. It imports necessary packages, makes a request to retrieve all items, and handles potential errors. It assumes that the client package is located at `github.com/myproject/client`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/client.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"log\"\n\n  \"github.com/myproject/client/operations\"\n  \"github.com/go-openapi/strfmt\"\n  \"github.com/go-openapi/spec\"\n\n  apiclient \"github.com/myproject/client\"\n  httptransport \"github.com/go-openapi/runtime/client\"\n)\n\nfunc main() {\n\n  // make the request to get all items\n  resp, err := apiclient.Default.Operations.All(operations.AllParams{})\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Printf(\"%#v\\n\", resp.Payload)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Struct with Description Tag Generated from Swagger\nDESCRIPTION: This Go code shows the resulting struct definition with the description struct tag generated by go-swagger from the above swagger definition. Note the escaping of the double quotes around the description value: `description:\"\\\"some description\\\"\"`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_54\n\nLANGUAGE: go\nCODE:\n```\ntype ObjectWithDescription struct {\n    Field string `json:\"field,omitempty\" description:\"\\\"some description\\\"\"`\n}\n```\n\n----------------------------------------\n\nTITLE: External Type Definition in Object Properties - YAML\nDESCRIPTION: This YAML demonstrates using an external type within an object property.  The `x-go-type` extension is used to specify the external type for the property, along with hints regarding its kind.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n  MyObject:\n    type: object\n    properties:\n      p1:\n        x-go-type:\n          type: RawMessage\n          import:\n            package: encoding/json\n          hints:\n            kind: interface\n```\n\n----------------------------------------\n\nTITLE: String Parameter in Body (Working YAML)\nDESCRIPTION: This YAML snippet correctly defines a string parameter in the request body by including a schema definition with `type: string`. It also marks the parameter as required.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npost:\n  description: post func\n  operationId: postfunc\n  parameters:\n    - name: myparam\n      in: body\n      required: true\n      schema:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: OpenAPI 2.0 Specification for Greeting Server\nDESCRIPTION: This OpenAPI 2.0 specification defines a simple greeting server with a single endpoint, /hello. The endpoint accepts an optional 'name' parameter in the query string. If the name parameter is not provided, the server defaults to greeting 'World'. The response is a plain text greeting.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/custom-server.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: Greeting Server\npaths:\n  /hello:\n    get:\n      produces:\n        - text/plain\n      parameters:\n        - name: name\n          required: false\n          type: string\n          in: query\n          description: defaults to World if not given\n      operationId: getGreeting\n      responses:\n        200:\n          description: returns a greeting\n          schema:\n              type: string\n              description: contains the actual greeting as plain text\n```\n\n----------------------------------------\n\nTITLE: Swagger Mixin Command\nDESCRIPTION: The `swagger mixin` command merges one or more Swagger specifications into a primary specification. This is useful for combining different API definitions or components into a single cohesive specification. It facilitates modularity and reuse in API design and documentation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nswagger mixin {primary spec} [{spec to merge}...]\n```\n\n----------------------------------------\n\nTITLE: Configure API and Authentication Logic (Go)\nDESCRIPTION: Configures the go-swagger API, setting up the authentication handler (`OauthSecurityAuth`), callback handler (`GetAuthCallbackHandler`), and login handler (`GetLoginHandler`). The `OauthSecurityAuth` function validates the token and returns the authenticated principal. The callback handler retrieves the access token from the OAuth2 server. Other API endpoints are also defined.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc configureAPI(api *operations.OauthSampleAPI) http.Handler {\n\t// configure the api here\n\tapi.ServeError = errors.ServeError\n\n\t// Set your custom logger if needed. Default one is log.Printf\n\t// Expected interface func(string, ...interface{})\n\t//\n\t// Example:\n\tapi.Logger = log.Printf\n\n\tapi.JSONConsumer = runtime.JSONConsumer()\n\n\tapi.JSONProducer = runtime.JSONProducer()\n\n\tapi.OauthSecurityAuth = func(token string, scopes []string) (*models.Principal, error) {\n        // This handler is called by the runtime whenever a route needs authentication \n        // against the 'OAuthSecurity' scheme.\n        // It is passed a token extracted from the Authentication Bearer header, and \n        // the list of scopes mentioned by the spec for this route.\n\n        // NOTE: in this simple implementation, we do not check scopes against  \n        // the signed claims in the JWT token.\n        // So whatever the required scope (passed a parameter by the runtime), \n        // this will succeed provided we get a valid token.\n\n        // authenticated validates a JWT token at userInfoURL\n\t\tok, err := authenticated(token)\n\t\tif err != nil {\n\t\t\treturn nil, errors.New(401, \"error authenticate\")\n\t\t}\n\t\tif !ok {\n\t\t\treturn nil, errors.New(401, \"invalid token\")\n\t\t}\n\n        // returns the authenticated principal (here just filled in with its token)\n\t\tprin := models.Principal(token)\n\t\treturn &prin, nil\n\t}\n\n\tapi.GetAuthCallbackHandler = operations.GetAuthCallbackHandlerFunc(func(params operations.GetAuthCallbackParams) middleware.Responder {\n        // implements the callback operation\n\t\ttoken, err := callback(params.HTTPRequest)\n\t\tif err != nil {\n\t\t\treturn middleware.NotImplemented(\"operation .GetAuthCallback error\")\n\t\t}\n\t\tlog.Println(\"Token\", token)\n\t\treturn operations.NewGetAuthCallbackDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(token)})\n\t})\n\n\tapi.GetLoginHandler = operations.GetLoginHandlerFunc(func(params operations.GetLoginParams) middleware.Responder {\n\t\treturn  login(params.HTTPRequest)\n\t})\n\n\tapi.CustomersCreateHandler = customers.CreateHandlerFunc(func(params customers.CreateParams, principal *models.Principal) middleware.Responder {\n        // other API endpoint ...\n\t\tlog.Println(\"hit customer API\")\n\t\treturn middleware.NotImplemented(\"operation customers.Create has not yet been implemented\")\n\t})\n\n\tapi.CustomersGetIDHandler = customers.GetIDHandlerFunc(func(params customers.GetIDParams, principal *models.Principal) middleware.Responder {\n        // other API endpoint ...\n\t\tlog.Println(\"hit customer API\")\n\t\treturn middleware.NotImplemented(\"operation customers.GetID has not yet been implemented\")\n\t})\n\n\tapi.ServerShutdown = func() {}\n\n\treturn setupGlobalMiddleware(api.Serve(setupMiddlewares))\n}\n```\n\n----------------------------------------\n\nTITLE: Generating XML Struct Tags with Go-Swagger\nDESCRIPTION: This example demonstrates how to define XML attributes in a Swagger definition and generate corresponding XML struct tags in Go using go-swagger. The `xml.name` property specifies the XML tag name, and `xml.attribute: true` indicates that it should be an attribute.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n objectWithXML:\n   type: object\n   properties:\n     field:\n       type: string\n       xml:\n         name: xmlObject\n         attribute: true\n```\n\n----------------------------------------\n\nTITLE: Add Logging and Panic Handling in go-swagger (Go)\nDESCRIPTION: This snippet demonstrates adding logging and panic handling using the `recover` middleware. It initializes the middleware with logging options and applies it within the `setupGlobalMiddleware` function. It relies on the `github.com/dre1080/recover` package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/middleware.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n  recovery := recover.New(&recover.Options{\n    Log: log.Print,\n  })\n  return recovery(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Structs for Swagger Responses\nDESCRIPTION: These Go structs define the structure of various response types for the Swagger API.  The `swagger:response` annotation marks these structs as response definitions for go-swagger. The `json` tags specify how the struct fields should be serialized into JSON.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_8\n\nLANGUAGE: Golang\nCODE:\n```\n// swagger:response errorResponse\ntype ErrorResponse struct {\n    // in: body\n    Body struct {\n        Message string `json:\"error,omitempty\"`\n    }\n}\n\n// swagger:response validationError\ntype ValidationError struct {\n    // in: body\n    Body struct {\n        // required: true\n        Message string `json:\"error,omitempty\"`\n\n        Field string `json:\"fieldName,omitempty\"`\n    }\n}\n\n// swagger:response someResponse\ntype SomeResponse struct {\n    // in: body\n    Body *User `json:\"body,omitempty\"`\n    }\n```\n\n----------------------------------------\n\nTITLE: Import OAuth2 and OpenID Packages (Go)\nDESCRIPTION: Imports necessary Go packages for working with OAuth2 and OpenID Connect, including `go-oidc` for interacting with Google's OpenID client, `context` for managing request contexts, and `oauth2` for handling OAuth2 flows.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\toidc \"github.com/coreos/go-oidc\"            // Google OpenID client\n\t\"context\"\n\t\"golang.org/x/oauth2\"                       // OAuth2 client\n)\n```\n\n----------------------------------------\n\nTITLE: Composing AND Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet illustrates the use of AND constraints. It shows that the `/order/{orderID}` endpoint requires both Basic Authentication (isRegistered) and a JWT with the customer role (hasRole).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  /order/{orderID}:\n    get:\n      summary: retrieves an order\n      operationId: GetOrder\n      description: |\n        Only registered customers should be able to retrieve orders\n      security: \n        - isRegistered: []\n          hasRole: [ customer ]  \n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Response (Correct Go)\nDESCRIPTION: This Go code correctly retrieves the default response from a go-swagger generated client by using a type assertion on the error. It checks if the error is of type `operations.GetDeployDefault`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ncasted, ok := err.(*operations.GetDeployDefault)\n```\n\n----------------------------------------\n\nTITLE: Accessing File Header Information in Go (Server Side)\nDESCRIPTION: This Go snippet shows how to access the file name and size from the `runtime.File` object received by the server handler. It requires the `runtime` package from go-swagger.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/file-server/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\t\tif namedFile, ok := params.File.(*runtime.File); ok {\n\t\t\tlog.Printf(\"received file name: %s\", namedFile.Header.Filename)\n\t\t\tlog.Printf(\"received file size: %d\", namedFile.Header.Size)\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: PetAPI Interface Definition in Go\nDESCRIPTION: Defines the PetAPI interface with methods for creating, deleting, getting, listing, and updating pets. Each method takes a context and parameters, returning a middleware responder. This interface is auto-generated and part of the restapi package, allowing for custom implementations of the pet-related API endpoints.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// PetAPI\ntype PetAPI interface {\n\tPetCreate(ctx context.Context, params pet.PetCreateParams) middleware.Responder\n\tPetDelete(ctx context.Context, params pet.PetDeleteParams) middleware.Responder\n\tPetGet(ctx context.Context, params pet.PetGetParams) middleware.Responder\n\tPetList(ctx context.Context, params pet.PetListParams) middleware.Responder\n\tPetUpdate(ctx context.Context, params pet.PetUpdateParams) middleware.Responder\n}\n```\n\n----------------------------------------\n\nTITLE: Generating the Server using go-swagger CLI\nDESCRIPTION: This shell command generates the server-side code for the API using the go-swagger CLI. The -A flag specifies the application name, -P flag specifies the principal model, and -f flag specifies the swagger definition file.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate server -A multi-auth-example -P models.Principal -f ./swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Default Server Configuration YAML\nDESCRIPTION: This YAML configuration file defines the layout for the default server generator in go-swagger. It specifies the source template (either built-in or custom), target directory, and filename for various components of the server application, such as configure, main, embedded spec, server, builder, and doc files, as well as models and operations.  It leverages sprig template functions for value manipulation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/templates/template_layout.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nlayout:\n  application:\n    - name: configure\n      source: asset:serverConfigureapi\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"configure_{{ .Name }}.go\"\n      skip_exists: true\n    - name: main\n      source: asset:serverMain\n      target: \"{{ joinFilePath .Target \\\"cmd\\\" (dasherize (pascalize .Name)) }}-server\"\n      file_name: \"main.go\"\n    - name: embedded_spec\n      source: asset:swaggerJsonEmbed\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"embedded_spec.go\"\n    - name: server\n      source: asset:serverServer\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"server.go\"\n    - name: builder\n      source: asset:serverBuilder\n      target: \"{{ joinFilePath .Target .ServerPackage .Package }}\"\n      file_name: \"{{ snakize (pascalize .Name) }}_api.go\"\n    - name: doc\n      source: asset:serverDoc\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"doc.go\"\n  models:\n    - name: definition\n      source: asset:model\n      target: \"{{ joinFilePath .Target .ModelPackage }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n  operations:\n    - name: parameters\n      source: asset:serverParameter\n      target: \"{{ if gt (len .Tags) 0 }}{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}{{ else }}{{ joinFilePath .Target .ServerPackage .Package  }}{{ end }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_parameters.go\"\n    - name: responses\n      source: asset:serverResponses\n      target: \"{{ if gt (len .Tags) 0 }}{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}{{ else }}{{ joinFilePath .Target .ServerPackage .Package  }}{{ end }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_responses.go\"\n    - name: handler\n      source: asset:serverOperation\n      target: \"{{ if gt (len .Tags) 0 }}{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}{{ else }}{{ joinFilePath .Target .ServerPackage .Package  }}{{ end }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n  operation_groups:\n```\n\n----------------------------------------\n\nTITLE: Building and Running Full Server\nDESCRIPTION: These commands build the ToDo List server binary and then run it with sudo privileges to enable HTTPS. The `--tls-certificate` and `--tls-key` flags specify the paths to the TLS certificate and key files, respectively.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/README.md#_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\ngo build ./cmd/todo-list-server\nsudo ./todo-list-server --tls-certificate mycert1.crt --tls-key mycert1.key\n```\n\n----------------------------------------\n\nTITLE: Generating Example Struct Tags with Go-Swagger\nDESCRIPTION: This example shows how to define an example value in a Swagger definition and generate a corresponding `example` struct tag in Go using go-swagger.  This requires the `--struct-tags example` flag to be passed to the `swagger generate` command.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  objectWithExample:\n   properties:\n     field:\n       type: string\n       example: \"sample\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Operation Handler in Go\nDESCRIPTION: This snippet shows how to define a handler for an API operation in Go-Swagger. It takes parameters for the operation and a principal object representing the authenticated user. It logs the parameters and principal, then returns a 'NotImplemented' response.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\napi.AddOrderHandler = operations.AddOrderHandlerFunc(func(params operations.AddOrderParams, principal *models.Principal) middleware.Responder {\n\t\tlogger.Warningf(\"AddOrder called with params: %s, and principal: %s\", spew.Sdump(params.Order), spew.Sdump(principal))\n\t\treturn middleware.NotImplemented(\"operation .AddOrder has not yet been implemented\")\n\t})\n```\n\n----------------------------------------\n\nTITLE: Go Interface for HTTP Response Handling in go-swagger\nDESCRIPTION: This Go interface defines the `Responder` interface, which is used in go-swagger generated servers to handle HTTP responses.  Implementing this interface allows custom logic to be used for writing HTTP responses. The `WriteResponse` method takes an `http.ResponseWriter` and an `httpkit.Producer` as arguments.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_server.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n// Responder is an interface for types to implement\n// when they want to be considered for writing HTTP responses\ntype Responder interface {\n    WriteResponse(http.ResponseWriter, httpkit.Producer)\n}\n```\n\n----------------------------------------\n\nTITLE: Implement a handler for listing travels in Go-Swagger\nDESCRIPTION: This Go code provides an example implementation of the `ListTravelsHandler` interface. It defines custom responder types for success and error cases, an interface for fetching travels from a database, and the `Handle` method that fetches travels and returns the appropriate responder.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/server.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype PublicListTravelsOK struct {\n  Body []models.Travel\n}\nfunc (m *PublicListTravelsOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer){\n  // generated code here\n}\n\ntype PublicListTravelsError struct {\n  Body models.Error\n}\nfunc (m *PublicListTravelsOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer){\n  // generated code here\n}\n\ntype PublicListTravelsHandler struct {\n  db interface {\n    FetchTravels(*PublicListTravelsParams) ([]models.Travel, error)\n  }\n}\n\nfunc (m *PublicListTravelsHandler) Handle(params ListTravelsParams) middleware.Responder {\n  travels, err := m.db.FetchTravels(&params)\n  if err != nil {\n    return &PublicListTravelsError{Body: models.Error{Message: err.Error()}}\n  }\n  return &PublicListTravelsOK{Body: travels}\n}\n```\n\n----------------------------------------\n\nTITLE: Route Security Override in YAML\nDESCRIPTION: Example of how to override the default security definition for a specific route (POST /pets) in the swagger.yaml file. This example demonstrates restricting access to the POST /pets endpoint to users with the 'admin' scope.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /pets:\n    post:\n      [...]\n      security:\n        - token: [admin]\n```\n\n----------------------------------------\n\nTITLE: Defining the AddOneParams Struct in Go\nDESCRIPTION: The `AddOneParams` struct contains all the bound parameters for the `addOne` operation.  It implements the `RequestBinder` interface and is typically populated from an HTTP request. The swagger parameters annotation indicates that the body is an input parameter.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// AddOneParams contains all the bound params for the add one operation\n// typically these are obtained from a http.Request\n//\n// swagger:parameters addOne\ntype AddOneParams struct {\n\t/*\n\t  In: body\n\t*/\n\tBody *models.Item\n}\n```\n\n----------------------------------------\n\nTITLE: External Package Aliasing - YAML Definition\nDESCRIPTION: This YAML snippet demonstrates how to replace references to a model with an external Go type using `x-go-type`. It specifies the external type `MyCustomModel` from the `github.com/example/models` package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  myModel:\n    type: object\n    x-go-type:\n      type: MyCustomModel\n      import:\n        package: github.com/example/models\n```\n\n----------------------------------------\n\nTITLE: New Client Creation in Go\nDESCRIPTION: Defines the New function which creates a new SwaggerPetstore HTTP client from the provided configuration. This configuration allows customization of the server endpoint and client middleware.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// New creates a new swagger petstore HTTP client.\nfunc New(c Config) *SwaggerPetstore { ... }\n```\n\n----------------------------------------\n\nTITLE: Uploading File Using Go Client\nDESCRIPTION: This Go snippet demonstrates how to create upload file parameters with the file reader and call upload API. It requires `uploads` to be imported.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/file-server/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\tparams := uploads.NewUploadFileParams().WithFile(reader)\n\n\t_, err := uploader.Uploads.UploadFile(params)\n```\n\n----------------------------------------\n\nTITLE: Response Wrapper Definition (YAML)\nDESCRIPTION: This YAML snippet defines a `ResponseWrapper` object that can contain different response types, allowing a single endpoint to return multiple possible responses.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nResponseWrapper:\n  type: object\n  properties:\n    response1:\n      $ref: '#/definitions/response1'\n    response2:\n      $ref: '#/definitions/response2'\n```\n\n----------------------------------------\n\nTITLE: Security Definitions in YAML\nDESCRIPTION: Defines security definitions in the swagger.yaml file, specifying an apiKey named 'token' that is passed through the Cookie header. It also demonstrates how to define default security enforcement for the application and override it for specific routes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityDefinitions:\n  token:\n    type: apiKey\n    in: header\n    name: Cookie\n\nsecurity:\n  - token: []\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Swagger via RPM Packages\nDESCRIPTION: These commands install go-swagger on RPM-based systems like CentOS and Fedora. It installs yum-utils, imports the GPG key, adds the repository configuration, and finally installs the swagger tool.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-binary.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndnf install -y yum-utils\n```\n\nLANGUAGE: sh\nCODE:\n```\nrpm --import 'https://dl.cloudsmith.io/public/go-swagger/go-swagger/gpg.2F8CB673971B5C9E.key'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -1sLf 'https://dl.cloudsmith.io/public/go-swagger/go-swagger/config.rpm.txt?distro=fedora&codename=any-version' > /tmp/go-swagger-go-swagger.repo\ndnf config-manager --add-repo '/tmp/go-swagger-go-swagger.repo'\ndnf -q makecache -y --disablerepo='*' --enablerepo='go-swagger-go-swagger' --enablerepo='go-swagger-go-swagger-source'\ndnf install -y swagger\n```\n\n----------------------------------------\n\nTITLE: Request Binder Interface - Go\nDESCRIPTION: This interface defines the contract for binding data from an HTTP request to a parameter struct. It takes an `http.Request`, a `router.MatchedRoute`, and a `swagger.Consumer` as input and returns an error if binding fails.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/design.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype RequestBinder interface {\n  BindRequest(*http.Request, *router.MatchedRoute, swagger.Consumer) error\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Token Authentication (Go)\nDESCRIPTION: Implements the authentication logic to validate the token against the userInfoURL endpoint. It sends a GET request to the userInfoURL with the Bearer token and checks the response status code. A status code of 200 indicates a valid token.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc authenticated(token string) (bool, error) {\n\t// validates the token by sending a request at userInfoURL\n\tbearToken := \"Bearer \" + token\n\treq, err := http.NewRequest(\"GET\", userInfoURL, nil)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"http request: %v\", err)\n\t}\n\n\treq.Header.Add(\"Authorization\", bearToken)\n    \n\tcli := &http.Client{}\n\tresp, err := cli.Do(req)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"http request: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\t_, err = io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"fail to get response: %v\", err)\n\t}\n\tif resp.StatusCode != 200 {\n\t\treturn false, nil\n\t}\n\treturn true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint in YAML\nDESCRIPTION: This YAML configuration adds a POST endpoint (/) for creating a new todo item. The request body expects an 'item' model, and a 201 Created response is specified for successful creation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nswagger: \"2.0\"\ninfo:\n  description: From the todo list tutorial on goswagger.io\n  title: A Todo list application\n  version: 1.0.0\nconsumes:\n- application/io.goswagger.examples.todo-list.v1+json\nproduces:\n- application/io.goswagger.examples-todo-list.v1+json\nschemes:\n- http\n- https\npaths:\n  /:\n    get:\n      tags:\n        - todos\n      operationId: findTodos\n      parameters:\n        - name: since\n          in: query\n          type: integer\n          format: int64\n        - name: limit\n          in: query\n          type: integer\n          format: int32\n          default: 20\n      responses:\n        200:\n          description: list the todo operations\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/item\"\n        default:\n          description: generic error response\n          schema:\n            $ref: \"#/definitions/error\"\n    post:\n      tags:\n        - todos\n      operationId: addOne\n      parameters:\n        - name: body\n          in: body\n          schema:\n            $ref: \"#/definitions/item\"\n      responses:\n        201:\n```\n\n----------------------------------------\n\nTITLE: Merging Swagger Specs\nDESCRIPTION: This command merges two Swagger specifications into a single specification. It allows combining multiple API definitions into a single document.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nswagger mixin {spec1} {spec2}\n```\n\n----------------------------------------\n\nTITLE: Consumer Interface Definition in Go\nDESCRIPTION: This Go code defines the `Consumer` interface and a function type `ConsumerFunc` for handling request body consumption. The `Consumer` interface requires a `Consume` method which reads data from an `io.Reader` and binds it to a specified interface.  `ConsumerFunc` allows functions to be used as consumers.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// ConsumerFunc represents a function that can be used as a consumer\ntype ConsumerFunc func(io.Reader, interface{}) error\n\n// Consume consumes the reader into the data parameter\nfunc (fn ConsumerFunc) Consume(reader io.Reader, data interface{}) error {\n\treturn fn(reader, data)\n}\n\n// Consumer implementations know how to bind the values on the provided interface to\n// data provided by the request body\ntype Consumer interface {\n\t// Consume performs the binding of request values\n\tConsume(io.Reader, interface{}) error\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Generated CLI - go\nDESCRIPTION: Installs the generated CLI application into the go/bin directory, making it accessible from the command line.  Assumes the code has been generated in the 'cmd/<app-name>/main.go' directory. Requires go to be properly configured.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/cli.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo install cmd/<app-name>/main.go\n```\n\n----------------------------------------\n\nTITLE: Go Generated Type for Array of Dates\nDESCRIPTION: This Go code snippet displays the generated type for the array of dates, `AnArrayOfDates`. The elements of the array are pointers to the `MyDate` type.  This allows for nullable date values within the array, controlled by the `x-nullable` extension on the `myDate` definition.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype MyDate strfmt.Date\n...\ntype AnArrayOfDates []*MyDate\n```\n\n----------------------------------------\n\nTITLE: Serving Custom UI Files with Middleware in Go\nDESCRIPTION: This code demonstrates how to serve custom UI files using middleware in a Go-Swagger application. The `FileServerMiddleware` checks if the request path starts with `/api`. If it does, it passes the request to the next handler. Otherwise, it serves files from the `./static` directory. This approach allows for serving custom UI files alongside the generated API endpoints, relying on `net/http` and `strings`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_documenting.md#_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nfunc FileServerMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif strings.HasPrefix(r.URL.Path, \"/api\") {\n\t\t\tnext.ServeHTTP(w, r)\n\t\t} else {\n\t\t\thttp.FileServer(http.Dir(\"./static\")).ServeHTTP(w, r)\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Swagger from Source (latest)\nDESCRIPTION: This snippet shows how to build and install the go-swagger tool from source using the `go install` command. The `@latest` specifier ensures that the latest version is installed. After installation, the `swagger version` command is executed to verify the installation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/contributing/getting-started.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/go-swagger/go-swagger/cmd/swagger@latest\n\nswagger version\ndev\n```\n\n----------------------------------------\n\nTITLE: Displaying Swagger JSON Spec\nDESCRIPTION: This JSON snippet represents a Swagger 2.0 specification generated by `go-swagger`. It defines API metadata, including consumes, produces, schemes, info, host, basePath, and paths. However, the `definitions` section is empty, indicating a potential issue with model generation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"consumes\": [\"application/json\", \"application/xml\"],\n  \"produces\": [\"application/json\", \"application/xml\"],\n  \"schemes\": [\"http\", \"https\"],\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\\n\\nThis should demonstrate all the possible comment annotations\\nthat are available to turn go code into a fully compliant swagger 2.0 spec\",\n    \"title\": \"User API.\",\n    \"termsOfService\": \"there are no TOS at this moment, use at your own risk we take no responsibility\",\n    \"contact\": {\n      \"name\": \"John Doe\",\n      \"url\": \"http://john.doe.com\",\n      \"email\": \"john.doe@example.com\"\n    },\n    \"license\": {\n      \"name\": \"MIT\",\n      \"url\": \"http://opensource.org/licenses/MIT\"\n    },\n    \"version\": \"0.0.1\"\n  },\n  \"host\": \"localhost\",\n  \"basePath\": \"/v2\",\n  \"paths\": {\n    \"/user\": {\n      \"get\": {\n        \"description\": \"This will show all available pets by default.\\nYou can get the pets that are out of stock\",\n        \"consumes\": [\"application/json\", \"application/x-protobuf\"],\n        \"produces\": [\"application/json\", \"application/x-protobuf\"],\n        \"schemes\": [\"http\", \"https\", \"ws\", \"wss\"],\n        \"tags\": [\"listPets\", \"pets\"],\n        \"summary\": \"Lists pets filtered by some parameters.\",\n        \"operationId\": \"users\",\n        \"security\": [{\n          \"api_key\": null\n         },{\n          \"oauth\": [\"read\", \"write\"]\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/someResponse\"\n          },\n          \"422\": {\n            \"$ref\": \"#/responses/validationError\"\n          },\n          \"default\": {\n            \"$ref\": \"#/responses/genericError\"\n          }\n       }\n    }\n  }\n},\n\"definitions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet demonstrates how to override the default security requirement by setting an empty security array.  This specifies that the `/items` endpoint is publicly accessible and does not require any authentication.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /items:\n    get:\n      summary: items on sale\n      operationId: GetItems\n      description: |\n        Everybody should be able to access this operation\n      security: []\n...\n```\n\n----------------------------------------\n\nTITLE: API DELETE Request\nDESCRIPTION: A curl command to delete a todo item using the DELETE method, specifying the item's ID in the URL. The API should return a 204 No Content response after successfully deleting the item.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i localhost:8765/1 -X DELETE -H 'Content-Type: application/io.goswagger.examples.todo-list.v1+json'\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of Date Type\nDESCRIPTION: This YAML snippet defines a `myDate` type as a string with a `date` format.  It illustrates how to create an alias for a specific string format in Swagger/OpenAPI. The Go type created will use the `strfmt.Date` type from the `go-openapi/strfmt` package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  myDate:\n    type: string\n    format: date\n```\n\n----------------------------------------\n\nTITLE: Defining the AddOneCreated Struct in Go\nDESCRIPTION: The `AddOneCreated` struct represents a successful (201 Created) response for the `addOne` operation. It contains a payload of type `models.Item`, which is serialized as the response body. The swagger response annotation defines the response type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n/*AddOneCreated Created\n\nswagger:response addOneCreated\n*/\ntype AddOneCreated struct {\n\n\t// In: body\n\tPayload *models.Item `json:\"body,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Setup in go-swagger (Go)\nDESCRIPTION: This snippet demonstrates how to set up global middleware that applies to every request handled by the go-swagger managed API. This is done by modifying the `setupGlobalMiddleware` function in the `configure_xxx_api.go` file. The input is an `http.Handler`, and the expected output is a modified `http.Handler` with the added middleware.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/middleware.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n\treturn handler\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming asynchronously with io.Pipe in Go\nDESCRIPTION: This snippet demonstrates how to use an `io.Pipe` to consume the response body asynchronously. The `reader` side of the pipe is used by another goroutine to process the stream, while the `writer` is passed to the `Elapse` operation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n\treader, writer := io.Pipe()\n  ...\n\t_, err := countdowns.Operations.Elapse(elapsed, writer)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Todo Item via HTTP\nDESCRIPTION: This command deletes a Todo item using `curl` with the DELETE method. It sends a request to the specific ID endpoint, and the API returns a 204 No Content status, indicating successful deletion.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/dynamic.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i -XDELETE localhost:8000/3\n```\n\n----------------------------------------\n\nTITLE: Setting the ByteStreamConsumer in Go\nDESCRIPTION: This code snippet configures the HTTP transport to use a `ByteStreamConsumer` for the `application/json` MIME type. This is crucial for handling the server's streaming JSON responses, which are chunks of individual JSON objects rather than a single complete JSON document.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  ...\n\t\"github.com/go-openapi/runtime\"\n\thttrtransport \"github.com/go-openapi/runtime/client\"\n\t\"github.com/go-swagger/go-swagger/examples/stream-server/client\"\n  ...\n)\n\n\tcustomized := httrtransport.New(\"localhost:8000\", \"/\", []string{\"http\"})\n\tcustomized.Consumers[runtime.JSONMime] = runtime.ByteStreamConsumer()\n\tcountdowns := client.New(customized, nil)\n```\n\n----------------------------------------\n\nTITLE: Go Generated Type for Unrestricted Extensible Object\nDESCRIPTION: This Go code snippet illustrates the generated struct for the extensible object with unrestricted additional properties. The `ExtensibleObjectProperties` field is a map of string keys to `interface{}` values, allowing any type to be stored as an additional property.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_13\n\nLANGUAGE: golang\nCODE:\n```\ntype ExtensibleObject struct {\n    Prop1 int64\n    ExtensibleObjectProperties map[string]interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Help - Bash\nDESCRIPTION: Displays the help message for the generated CLI application. Provides information about available commands and options.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n<app name> help\n```\n\n----------------------------------------\n\nTITLE: Defining AddOneHandler Interface in Go\nDESCRIPTION: The `AddOneHandler` interface defines the contract for handling valid add one requests within the Go-Swagger framework. It requires an implementation to provide a `Handle` method that accepts request parameters (`AddOneParams`) and a security principal (interface{}) and returns a middleware.Responder representing the API response.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// AddOneHandler interface for that can handle valid add one params\ntype AddOneHandler interface {\n\tHandle(AddOneParams, interface{}) middleware.Responder\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Item - Go\nDESCRIPTION: This snippet defines a function `addItem` that adds a new item to a store. It takes a pointer to a `models.Item` as input, generates a new ID for the item, and then adds the item to a map.  It uses a mutex to ensure thread safety when accessing the shared data. It returns an error if the input item is nil.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_testing.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc addItem(item *models.Item) error {\n    if item == nil {\n        return errors.New(500, \"item must be present\")\n    }\n\n    itemsLock.Lock()\n    defer itemsLock.Unlock()\n\n    newID := newItemID()\n    item.ID = newID\n    items[newID] = item\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Handler Directly - Go\nDESCRIPTION: This snippet shows an example of an API handler function that receives a request and either adds an item or returns an error. It tests the handler's logic directly by invoking `addItem` and checking the returned values, bypassing the need for `httptest`. This method facilitates focused unit testing of handler functions.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_testing.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntodos.AddOneHandlerFunc(func(params todos.AddOneParams) middleware.Responder {\n    if err := addItem(params.Body); err != nil {\n        return todos.NewAddOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})\n    }\n    return todos.NewAddOneCreated().WithPayload(params.Body)\n})\n```\n\n----------------------------------------\n\nTITLE: External Type Usage - Go\nDESCRIPTION: This code shows how an external type is used in generated code. The `GeneratedType` is a slice of `MyExternalType`, which is an external type defined in the `github.com/example/models/custom` package.  No model is generated for `MyExternalType` because it is declared as an external type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_28\n\nLANGUAGE: go\nCODE:\n```\npackage custom\n\ntype GeneratedType []MyType\n```\n\n----------------------------------------\n\nTITLE: Building and Running Executable\nDESCRIPTION: These commands build the CLI executable using `go build` and then run the generated executable. The `-o` flag specifies the output file name.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ go build -o examples/cli/cmd/todoctl/todoctl examples/cli/cmd/todoctl/main.go\n$ ./examples/cli/cmd/todoctl/todoctl\n```\n\n----------------------------------------\n\nTITLE: Go Build Tag Example\nDESCRIPTION: This code snippet demonstrates how to use build tags in Go to conditionally compile code based on the Go version. The `//go:build !go1.8` tag ensures that the following code is only included in builds for Go versions *before* 1.8. It includes a function `pathUnescape` that uses `url.QueryUnescape` for URL unescaping.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/contributing/getting-started.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n//go:build !go1.8\n\npackage swag\n\nimport \"net/url\"\n\nfunc pathUnescape(path string) (string, error) {\n\treturn url.QueryUnescape(path)\n}\n```\n\n----------------------------------------\n\nTITLE: Define Type Composition with Base Type - YAML\nDESCRIPTION: This YAML defines a `Kennel` type that contains a list of `Pet` objects in its `pets` property. This demonstrates type composition where a property is a reference to a base type, allowing it to contain subtypes of `Pet` (Cats and Dogs).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nKennel:\n  type: object\n  required:\n    - pets\n  properties:\n    id:\n      type: integer\n      format: int64\n    pets:          # <-- this may contain Cats and Dogs\n      type: array\n      items:\n        $ref: \"#/definitions/Pet\"\n```\n\n----------------------------------------\n\nTITLE: Request Middleware Setup in go-swagger (Go)\nDESCRIPTION: This snippet shows how to inject middleware that applies to requests after routing but before authentication, binding, and validation. This excludes the `/swagger.json` document from being affected. This is achieved by editing the `setupMiddlewares` method in the `configure_xxx_api.go` file. The input is an `http.Handler`, and the expected output is a modified `http.Handler` with the added middleware.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/middleware.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc setupMiddlewares(handler http.Handler) http.Handler {\n\treturn handler\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding External Type as Pointer - Go Code\nDESCRIPTION: This Go snippet shows the generated `Time` struct, which embeds `*time.Time`, representing a pointer to the external time type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_42\n\nLANGUAGE: go\nCODE:\n```\ntype Time struct {\n\t*time.Time\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Struct for Subtype - Go\nDESCRIPTION: This Go code represents the struct generated for the subtype `Dog`. It includes the `PackSize` property and getter/setter methods for the inherited `Name` property. The `PetType` method returns the discriminator value for this subtype.  Unexported fields are used for properties inherited from the base type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// Dog A representation of a dog\n// swagger:model Dog\ntype Dog struct {\n\tnameField *string\n\n\t// the size of the pack the dog is from\n\t// Required: true\n\t// Minimum: 0\n\tPackSize *int32 `json:\"packSize\"`\n}\n\n// Name gets the name of this subtype\nfunc (m *Dog) Name() *string {\n\treturn m.nameField\n}\n\n// SetName sets the name of this subtype\nfunc (m *Dog) SetName(val *string) {\n\tm.nameField = val\n}\n\n// PetType gets the pet type of this subtype\nfunc (m *Dog) PetType() string {\n\treturn \"Dog\"\n}\n\n// SetPetType sets the pet type of this subtype\nfunc (m *Dog) SetPetType(val string) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: File System Structure Example\nDESCRIPTION: This represents the expected file system structure, illustrating the desired organization of the generated code.  The operations directory should contain subdirectories for each endpoint (users and pets) if the operationIds were unique.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_swagger.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n└── restapi\n    ...\n    ├── operations\n    │   ├── pets\n    │   │   ├── ...\n    │   ├── users\n    │   │   ├── ...\n    │   └── ...\n```\n\n----------------------------------------\n\nTITLE: Testing API with Header Authentication using Curl\nDESCRIPTION: This curl command demonstrates how to test an API endpoint that requires custom header authentication (X-Custom-Key). It retrieves the token from a file and passes it in the header. The command also specifies the endpoint and HTTP method.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  --verbose \\\n  --get \\\n  --header \"X-Custom-Key: `cat tokens/token-apikey-reseller.jwt`\" \\\n  \"http://localhost:43016/api/orders/myItem\"\n```\n\n----------------------------------------\n\nTITLE: Generate Type Composition with Base Type - Go\nDESCRIPTION: This Go code represents the struct generated for the `Kennel` type. The `petsField` is a slice of the `Pet` interface, allowing it to hold instances of any type that implements the `Pet` interface. It also includes getter/setter methods for the `petsField`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n// Kennel kennel\n// swagger:model Kennel\ntype Kennel struct {\n\n\t// id\n\tID int64 `json:\"id,omitempty\"`\n\n\tpetsField []Pet\n}\n\n// Pets gets the pets of this base type\nfunc (m *Kennel) Pets() []Pet {\n\treturn m.petsField\n}\n\n// SetPets sets the pets of this base type\nfunc (m *Kennel) SetPets(val []Pet) {\n\tm.petsField = val\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Flatten Command\nDESCRIPTION: The `swagger flatten` command performs minimal flattening on a Swagger specification, resolving JSON pointers and bundling external `$ref`s into the local document. The default flattening strategy can be explicitly enabled with the `--with-flatten=minimal` option. This ensures that all remaining `$ref`s are located in schemas and follow the canonical form `\"$ref\": \"#/definitions/modelName\"`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nswagger flatten {spec}\n```\n\n----------------------------------------\n\nTITLE: Embedding External Type as Pointer - YAML Definition\nDESCRIPTION: This YAML snippet illustrates how to embed an external type `Time` as a pointer using the `nullable: true` hint, combined with `embedded: true`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  Time:\n    type: string\n    x-go-type:\n      type: Time\n      import:\n        package: time\n      hints:\n        nullable: true  # <- nullable here refers to the nullability of the embedded external type\n      embedded: true\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Swagger via LinuxBrew\nDESCRIPTION: This snippet shows how to install go-swagger using LinuxBrew, which is a package manager for Linux similar to Homebrew. It taps the go-swagger repository and installs the go-swagger package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-binary.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew tap go-swagger/go-swagger\nbrew install go-swagger\n```\n\n----------------------------------------\n\nTITLE: Generate Server Code using Swagger CLI\nDESCRIPTION: This command removes the existing 'gen' directory (if it exists), recreates it, and then uses the swagger CLI to generate server code based on the swagger.yml file. The generated code is placed in the 'gen' directory, excluding the main package. The API name is 'greeter'.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/tutorials/custom-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf gen && mkdir gen && swagger generate server --exclude-main -A greeter -t gen -f ./swagger/swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Todo Server\nDESCRIPTION: These commands install the todo list server binary using `go install` and then run the server.  The `--help` flag shows available command-line options.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n± ~/go/src/.../examples/tutorials/todo-list/server-1\n» go install ./cmd/todo-list-server/\n± ~/go/src/.../examples/tutorials/todo-list/server-1\n» todo-list-server --help\nUsage:\n  todo-list-server [OPTIONS]\n\nFrom the todo list tutorial on goswagger.io\n\nApplication Options:\n      --scheme=            the listeners to enable, this can be repeated and defaults to the schemes in the swagger spec\n      --cleanup-timeout=   grace period for which to wait before shutting down the server (default: 10s)\n      --max-header-size=   controls the maximum number of bytes the server will read parsing the request header's keys and values, including the\n                           request line. It does not limit the size of the request body. (default: 1MiB)\n      --socket-path=       the unix socket to listen on (default: /var/run/todo-list.sock)\n      --host=              the IP to listen on (default: localhost) [$HOST]\n      --port=              the port to listen on for insecure connections, defaults to a random value [$PORT]\n      --listen-limit=      limit the number of outstanding requests\n      --keep-alive=        sets the TCP keep-alive timeouts on accepted connections. It prunes dead TCP connections ( e.g. closing laptop mid-download)\n                           (default: 3m)\n      --read-timeout=      maximum duration before timing out read of the request (default: 30s)\n      --write-timeout=     maximum duration before timing out write of the response (default: 60s)\n      --tls-host=          the IP to listen on for tls, when not specified it's the same as --host [$TLS_HOST]\n      --tls-port=          the port to listen on for secure connections, defaults to a random value [$TLS_PORT]\n      --tls-certificate=   the certificate to use for secure connections [$TLS_CERTIFICATE]\n      --tls-key=           the private key to use for secure connections [$TLS_PRIVATE_KEY]\n      --tls-ca=            the certificate authority file to be used with mutual tls auth [$TLS_CA_CERTIFICATE]\n      --tls-listen-limit=  limit the number of outstanding requests\n      --tls-keep-alive=    sets the TCP keep-alive timeouts on accepted connections. It prunes dead TCP connections ( e.g. closing laptop mid-download)\n      --tls-read-timeout=  maximum duration before timing out read of the request\n      --tls-write-timeout= maximum duration before timing out write of the response\n\nHelp Options:\n  -h, --help               Show this help message\n```\n\n----------------------------------------\n\nTITLE: Pet Client API Interface Definition in Go\nDESCRIPTION: Defines the API interface for the pet client.  It contains methods for creating, deleting, getting, listing and updating pets. This is intended to be used for dependency injection and testing purposes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// API is the interface of the pet client\ntype API interface {\n\t// PetCreate adds a new pet to the store\n\tPetCreate(ctx context.Context, params *PetCreateParams) (*PetCreateCreated, error)\n\t// PetDelete deletes a pet\n\tPetDelete(ctx context.Context, params *PetDeleteParams) (*PetDeleteNoContent, error)\n\t// PetGet gets pet by it s ID\n\tPetGet(ctx context.Context, params *PetGetParams) (*PetGetOK, error)\n\t// PetList lists pets\n\tPetList(ctx context.Context, params *PetListParams) (*PetListOK, error)\n\t// PetUpdate updates an existing pet\n\tPetUpdate(ctx context.Context, params *PetUpdateParams) (*PetUpdateCreated, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Request with Basic Auth, Token, and Key (Shell)\nDESCRIPTION: This curl command demonstrates an example API request with basic authentication, an access token via query parameter, and a custom header for API key authentication. It performs a POST request to the /api/order/add endpoint with a JSON payload. It includes the Authorization header with base64 encoded credentials, the access_token query parameter, and the X-Custom-Key header with a JWT token.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nbasic=`echo \"ivan:terrible\"|tr -d '\\n'|base64 -i`\ncurl \\\n  --verbose \\\n  -i \\\n  -X POST \\\n  --data '{\"orderID\": \"myorder\", \"orderLines\": [{\"quantity\": 10, \"purchasedItem\": \"myItem\"}]}' \\\n  --header \"Content-Type: application/json\" \\\n  --header \"Authorization: Basic ${basic}\" \\\n  --header \"X-Custom-Key: `cat tokens/token-apikey-reseller.jwt`\" \\\n  \"http://localhost:43016/api/order/add?access_token=`cat tokens/token-bearer-inventory-manager.jwt`\"\n```\n\n----------------------------------------\n\nTITLE: Blocking Client Buffer Implementation in Go\nDESCRIPTION: This code snippet demonstrates how to implement a custom buffer with an `UnmarshalText()` method in Go.  It allows the go-swagger runtime to unmarshal `text/plain` responses directly into a `bytes.Buffer`. This approach is used for blocking clients when dealing with streaming responses.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-client/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Buffer struct {\n\t*bytes.Buffer\n}\n\n// UnmarshalText handles text/plain\nfunc (b *Buffer) UnmarshalText(text []byte) error {\n\t_, err := b.Write(text)\n\treturn err\n}\n\nbuf := NewBuffer()\n_, err := c.Chunked(operations.NewChunkedParams(), buf)\n```\n\n----------------------------------------\n\nTITLE: Swagger Meta Properties in YAML\nDESCRIPTION: Defines the properties that can be specified within the swagger:meta annotation, including swagger version, consumes, produces, schemes, info, host, basePath, and custom metadata using x-meta-*.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/meta.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswagger: '2.0'\nconsumes:\n  - application/json\n  - application/xml\nproduces:\n  - application/json\n  - application/xml\nschemes:\n  - http\n  - https\ninfo:\n  description: \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\\n\\nThis should demonstrate all the possible comment annotations\\nthat are available to turn go code into a fully compliant swagger 2.0 spec\"\n  title: 'Petstore API.'\n  termsOfService: 'there are no TOS at this moment, use at your own risk we take no responsibility'\n  contact: {name: 'John Doe', url: 'http://john.doe.com', email: john.doe@example.com}\n  license: {name: MIT, url: 'http://opensource.org/licenses/MIT'}\n  version: 0.0.1\nhost: localhost\nbasePath: /v2\nx-meta-value: value\nx-meta-array:\n  - value1\n  - value2\nx-meta-array-obj:\n  - name: obj\n    value: field\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint in YAML\nDESCRIPTION: This YAML code configures a GET endpoint (/) for retrieving todo items. It includes query parameters for filtering the list ('since' and 'limit') and defines the response schema as an array of 'item' models.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /:\n    get:\n      tags:\n        - todos\n      parameters:\n        - name: since\n          in: query\n          type: integer\n          format: int64\n        - name: limit\n          in: query\n          type: integer\n          format: int32\n          default: 20\n      responses:\n        200:\n          description: list the todo operations\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/item\"\n```\n\n----------------------------------------\n\nTITLE: Running CLI with Go Run\nDESCRIPTION: This command runs the CLI program using `go run`. It includes flags for debugging, hostname, authentication token, and specific operation details such as item description and body content.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go run examples/cli/cmd/todoctl/main.go --debug --hostname localhost:12345 --x-todolist-token \"example token\" todos addOne --item.description \"hi\" --body \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Security for Specific Paths in Swagger YAML\nDESCRIPTION: This YAML snippet configures specific paths, /login and /auth/callback, to have no security requirements, overriding the default security configuration.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /login:\n    get:\n      summary: login through oauth2 server\n      security: []\n\n...\n\n  /auth/callback:\n    get:\n      summary: return access_token\n      security: []\n```\n\n----------------------------------------\n\nTITLE: Embedding RawMessage - Go Code\nDESCRIPTION: This Go snippet shows the generated `Raw` struct, which embeds `jsonext.RawMessage`, and its `Validate` method. The `Validate` method checks if the embedded type implements `runtime.Validatable`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nimport (\n ...\n jsonext \"encoding/json\"\n ...\n)\n\ntype Raw struct {\n\tjsonext.RawMessage\n}\n\nfunc (m Raw) Validate(formats strfmt.Registry) error {\n\tvar f interface{} = m.RawMessage\n\tif v, ok := f.(runtime.Validatable); ok {\n\t\treturn v.Validate(formats)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Swagger via Debian Packages\nDESCRIPTION: This set of commands installs go-swagger on Debian-based systems like Ubuntu. It updates packages, installs prerequisites, registers a GPG key, adds the repository and finally installs the swagger tool.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-binary.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install -y apt-transport-https gnupg curl debian-keyring debian-archive-keyring\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -1sLf 'https://dl.cloudsmith.io/public/go-swagger/go-swagger/gpg.2F8CB673971B5C9E.key' | sudo gpg --dearmor -o /usr/share/keyrings/go-swagger-go-swagger-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/go-swagger/go-swagger/config.deb.txt?distro=debian&codename=any-version' | sudo tee /etc/apt/sources.list.d/go-swagger-go-swagger.list\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update \nsudo apt install swagger\n```\n\n----------------------------------------\n\nTITLE: Go Generated Type for Date\nDESCRIPTION: This Go code snippet shows the generated type for the `myDate` definition, which is an alias for `strfmt.Date`. This means `MyDate` becomes a distinct type for date values. Note that even if x-nullable is set to true, the type itself is not rendered into a pointer, but instead the containers that contain that type will become pointers.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype MyDate strfmt.Date\n```\n\n----------------------------------------\n\nTITLE: Swagger Response Structure - Example\nDESCRIPTION: This code defines a response structure using swagger annotations. It demonstrates how to embed another struct in the response. In order to get the expected output, add the `swagger:model` doc tag on the embedded `ResponseData` struct.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\n// swagger:response SuccessResponse\ntype SuccessResponse struct {\n    // In: body\n    Data ResponseData `json:\"data\"`\n}\n\n// swagger:model SuccessResponse\ntype ResponseData struct {\n    Field1 string `json:\"field1\"`\n    Field2 string `json:\"field2\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Validate Command Usage\nDESCRIPTION: This snippet shows the usage of the `swagger validate` command from the go-swagger toolkit. It includes options for quieting logs, redirecting logs to a file, skipping warnings, and stopping on errors.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/validate.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n  swagger [OPTIONS] validate [validate-OPTIONS]\n\nvalidate the provided swagger document against a swagger spec\n\nApplication Options:\n  -q, --quiet                 silence logs\n      --output=LOG-FILE       redirect logs to file\n\nHelp Options:\n  -h, --help                  Show this help message\n\n[validate command options]\n          --skip-warnings     when present will not show up warnings upon validation\n          --stop-on-error     when present will not continue validation after critical errors are found\n```\n\n----------------------------------------\n\nTITLE: Generating a CLI\nDESCRIPTION: This command generates a command-line interface (CLI) tool from a Swagger specification file. The generated CLI allows users to interact with the API from the command line.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate cli [-f ./swagger.json] -A [application-name [--principal [principal-name]]\n```\n\n----------------------------------------\n\nTITLE: Running go-swagger code generation\nDESCRIPTION: This command generates the server code from the swagger.yml file. It's a prerequisite for building the streaming server application.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ swagger generate server -f swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Using httptest with API Handler - Go\nDESCRIPTION: This code snippet illustrates how to integrate the API handler obtained from `restapi.GetAPIHandler()` with `httptest` for integration testing.  It creates a new HTTP test server with the API handler and then makes a GET request to a specific endpoint to verify the API's behavior. It requires the `net/http/httptest` package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_testing.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhandler, err := restapi.GetAPIHandler()\nif err != nil {\n    t.Fatal(\"get api handler\", err)\n}\nts := httptest.NewServer(handler)\ndefer ts.Close()\nres, err := http.Get(ts.URL + \"/api/v1/boxes\")\n```\n\n----------------------------------------\n\nTITLE: Define Another Subtype - YAML\nDESCRIPTION: This YAML defines a subtype `cat` that also extends the base type `Pet`. It includes the `huntingSkill` property specific to the `cat` type.  The `enum` field provides a list of acceptable values.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncat:\n  type: object\n  description: A representation of a cat\n  allOf:\n  - $ref: '#/definitions/Pet'\n  - properties:\n      huntingSkill:\n        type: string\n        description: The measured skill for hunting\n        default: lazy\n        enum:\n        - clueless\n        - lazy\n        - adventurous\n        - aggressive\n    required:\n    - huntingSkill\n```\n\n----------------------------------------\n\nTITLE: Creating AddOneHandlerFunc Type in Go\nDESCRIPTION: The `AddOneHandlerFunc` type is a function type that adapts a function with a specific signature (AddOneParams, interface{}) to a middleware.Responder. This enables functions to act as handlers for the addOne operation within the Go-Swagger framework.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// AddOneHandlerFunc turns a function with the right signature into a add one handler\ntype AddOneHandlerFunc func(AddOneParams, interface{}) middleware.Responder\n```\n\n----------------------------------------\n\nTITLE: Generating CLI Code with Go-Swagger\nDESCRIPTION: This command generates the go-swagger CLI client code. It specifies the target directory, the swagger specification file, and the name of the CLI application.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ swagger generate cli --target=examples/cli --spec=examples/cli/swagger.yml --cli-app-name todoctl\n```\n\n----------------------------------------\n\nTITLE: Swagger Generate Markdown Usage\nDESCRIPTION: This snippet shows the basic usage of the `swagger generate markdown` command along with its available options. It lists global application options, markdown-specific options, and options common to all code generation commands, including model and operation generation options.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/markdown.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n  swagger [OPTIONS] generate markdown [markdown-OPTIONS]\n\ngenerate a markdown representation from the swagger spec\n\nApplication Options:\n  -q, --quiet                                                                     silence logs\n      --log-output=LOG-FILE                                                       redirect logs to file\n\nHelp Options:\n  -h, --help                                                                      Show this help message\n\n[markdown command options]\n          --output=                                                               the file to write the generated markdown. (default: markdown.md)\n\n    Options common to all code generation commands:\n      -f, --spec=                                                                 the spec file to use (default swagger.{json,yml,yaml})\n      -t, --target=                                                               the base directory for generating the files (default: ./)\n          --template=[stratoscale]                                                load contributed templates\n      -T, --template-dir=                                                         alternative template override directory\n      -C, --config-file=                                                          configuration file to use for overriding template options\n      -r, --copyright-file=                                                       copyright file used to add copyright header\n          --additional-initialism=                                                consecutive capitals that should be considered intialisms\n          --allow-template-override                                               allows overriding protected templates\n          --skip-validation                                                       skips validation of spec prior to generation\n          --dump-data                                                             when present dumps the json for the template generator instead of generating\n                                                                                  files\n          --strict-responders                                                     Use strict type for the handler return value\n          --with-expand                                                           expands all $ref's in spec prior to generation (shorthand to\n                                                                                  --with-flatten=expand)\n          --with-flatten=[minimal|full|expand|verbose|noverbose|remove-unused]    flattens all $ref's in spec prior to generation (default: minimal, verbose)\n\n    Options for model generation:\n      -m, --model-package=                                                        the package to save the models (default: models)\n      -M, --model=                                                                specify a model to include in generation, repeat for multiple (defaults to\n                                                                                  all)\n          --existing-models=                                                      use pre-generated models e.g. github.com/foobar/model\n          --strict-additional-properties                                          disallow extra properties when additionalProperties is set to false\n          --keep-spec-order                                                       keep schema properties order identical to spec file\n          --struct-tags=                                                          the struct tags to generate, repeat for multiple (defaults to json)\n\n    Options for operation generation:\n      -O, --operation=                                                            specify an operation to include, repeat for multiple (defaults to all)\n          --tags=                                                                 the tags to include, if not specified defaults to all\n      -a, --api-package=                                                          the package to save the operations (default: operations)\n          --with-enum-ci                                                          allow case-insensitive enumerations\n          --skip-tag-packages                                                     skips the generation of tag-based operation packages, resulting in a flat generation\n\n```\n\n----------------------------------------\n\nTITLE: Go Generated Types for Integer and String\nDESCRIPTION: This Go code snippet demonstrates the generated types based on the YAML definition of `myInteger` and `myString`. The types are represented as pointers to `int64` and `string` respectively. The pointer type is used so that zero values can be validated. This is important because it allows the program to determine whether a value has been explicitly set to zero or has not been set at all.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype MyInteger *int64\n...\ntype MyString *string\n```\n\n----------------------------------------\n\nTITLE: Defining AuthToken in restapi.Config struct in Go\nDESCRIPTION: The AuthToken function is defined in the restapi.Config struct. It retrieves the token from the 'Cookie' header, authenticates it, and returns an interface{} representing the user and an error if authentication fails. The interface{} is stored in the request context under the restapi.AuthKey.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    ...\n\t// AuthToken Applies when the \"Cookie\" header is set\n\tAuthToken func(token string) (interface{}, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Example: Enum Value Addition\nDESCRIPTION: Demonstrates a scenario where adding a new enum value is flagged as a breaking change by swagger diff.  This snippet displays the tool's output indicating that the addition of \"FRIED\" to the cooked_egg enum is considered a breaking change.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/diff.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBREAKING CHANGES:\n  =================\n  /a/:get->200 - Response Body: Added possible enumeration(s) <FRIED>  - array[BreakfastOrder].cooked_egg : string\n```\n\n----------------------------------------\n\nTITLE: Defining Security Principal in Swagger YAML\nDESCRIPTION: This YAML snippet defines the structure of the security principal, containing the user's name and roles, which will be passed to the operations after successful authentication.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  ...\n  principal:\n    type: object \n    properties: \n      name: \n        type: string\n      roles:\n        type: array \n        items: \n          type: string\n```\n\n----------------------------------------\n\nTITLE: Building the Generated CLI - go\nDESCRIPTION: Builds the generated CLI application. Assumes the code has been generated in the 'cmd/<app-name>/main.go' directory. This command compiles the go code into an executable.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/cli.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo build cmd/<app-name>/main.go\n```\n\n----------------------------------------\n\nTITLE: Serving Swagger UI\nDESCRIPTION: This command serves the Swagger UI for a given Swagger specification file. It allows users to interact with and explore the API defined in the specification.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nswagger serve https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\n```\n\n----------------------------------------\n\nTITLE: Configuring ByteStreamConsumer for Non-blocking Clients in Go\nDESCRIPTION: This code snippet shows how to instruct the go-swagger runtime client to use a `ByteStreamConsumer` when the response is `text/plain`. This configuration is essential for handling streaming responses in a non-blocking manner, allowing the client to process chunks as they arrive.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-client/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\ttransport.Consumers[runtime.TextMime] = runtime.ByteStreamConsumer()\n```\n\n----------------------------------------\n\nTITLE: In-Memory Todo List Backend\nDESCRIPTION: This snippet implements an in-memory backend for a Todo list, using a slice of maps to store the items and a mutex to handle concurrent access. It includes functions for adding, updating, removing, and retrieving items by ID. The `newItemID` function generates unique IDs using atomic operations.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/dynamic.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar items = []map[string]interface{}{ \n\tmap[string]interface{}{ \"id\": int64(1), \"description\": \"feed dog\", \"completed\": true },\n\tmap[string]interface{}{ \"id\": int64(2), \"description\": \"feed cat\" },\n}\n\nvar itemsLock = &sync.Mutex{}\nvar lastItemID int64 = 2\n\nfunc newItemID() int64 {\n\treturn atomic.AddInt64(&lastItemID, 1)\n}\n\nfunc addItem(item map[string]interface{}) {\n\titemsLock.Lock()\n\tdefer itemsLock.Unlock()\n\titem[\"id\"] = newItemID()\n\titems = append(items, item)\n}\n\nfunc updateItem(id int64, body map[string]interface{}) (map[string]interface{}, error) {\n\titemsLock.Lock()\n\tdefer itemsLock.Unlock()\n\n\titem, err := itemByID(id)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdelete(body, \"id\")\n\tfor k, v := range body {\n\t\titem[k] = v\n\t}\n\treturn item, nil\n}\n\nfunc removeItem(id int64) {\n\titemsLock.Lock()\n\tdefer itemsLock.Unlock()\n\n\tvar newItems []map[string]interface{}\n\tfor _, item := range items {\n\t\tif item[\"id\"].(int64) != id {\n\t\t\tnewItems = append(newItems, item)\n\t\t}\n\t}\n\titems = newItems\n}\n\nfunc itemByID(id int64) (map[string]interface{}, error) {\n\tfor _, item := range items {\n\t\tif item[\"id\"].(int64) == id {\n\t\t\treturn item, nil\n\t\t}\n\t}\n\treturn nil, errors.NotFound(\"not found: item %d\", id)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Struct Definition in Go\nDESCRIPTION: Defines the Config struct for the HTTP handler, including PetAPI and StoreAPI interfaces, a logger function, and an inner middleware function. This configuration struct is auto-generated and used to initialize the HTTP handler with the necessary business logic implementations and middleware.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Config is configuration for Handler\ntype Config struct {\n\tPetAPI\n\tStoreAPI\n\tLogger func(string, ...interface{})\n\t// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.\n\t// The middleware executes after routing but before authentication, binding and validation\n\tInnerMiddleware func(http.Handler) http.Handler\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Server Code with Swagger\nDESCRIPTION: This command generates server-side code using the `swagger generate server` command. It specifies the input specification file (`fixture-1683.yaml`) and various options, including the model package (`mabc`), server package (`sabc/sub1/ssub2`), API package (`aabc/asubdir`), target directory (`codegen2/target-withDash264`), and the name (`nrcodegen`). The `--skip-validation` flag is used to bypass validation during the generation process.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1683/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc --server-package=sabc/sub1/ssub2 --api-package=aabc/asubdir --target=codegen2/target-withDash264 --name=nrcodegen\n```\n\n----------------------------------------\n\nTITLE: API GET Request\nDESCRIPTION: A curl command is issued to the API endpoint, intended to fetch the existing todo items. It utilizes the default HTTP GET method to retrieve data.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i localhost:8765\n```\n\n----------------------------------------\n\nTITLE: Listing Todo Items via HTTP\nDESCRIPTION: This command demonstrates how to retrieve all Todo items from the API using `curl`. It sends a GET request to the root endpoint and expects a JSON response containing the list of items.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/dynamic.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Configure OAuth2 Client Credentials (Go)\nDESCRIPTION: Defines global variables for configuring the OAuth2 client, including the client ID, client secret, issuer URL, authentication URL, token URL, user info URL, callback URL, and OAuth2 endpoint. The `config` variable is an `oauth2.Config` struct that holds all the necessary configuration for the OAuth2 flow.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    // state carries an internal token during the oauth2 workflow\n    // we just need a non empty initial value\n\tstate = \"foobar\" // Don't make this a global in production.\n\n    // the credentials for this API (adapt values when registering API)\n\tclientID     = \"\" // <= enter registered API client ID here\n\tclientSecret = \"\" // <= enter registered API client secret here\n\n    //  unused in this example: the signer of the delivered token\n\tissuer       = \"https://accounts.google.com\"\n\n    // the Google login URL\n\tauthURL      = \"https://accounts.google.com/o/oauth2/v2/auth\"\n\n    // the Google OAuth2 resource provider which delivers access tokens\n\ttokenURL     = \"https://www.googleapis.com/oauth2/v4/token\"\n\tuserInfoURL  = \"https://www.googleapis.com/oauth2/v3/userinfo\"\n\n    // our endpoint to be called back by the redirected client\n\tcallbackURL  = \"http://127.0.0.1:12345/api/auth/callback\"\n\n    // the description of the OAuth2 flow\n\tendpoint = oauth2.Endpoint{\n\t\tAuthURL:  authURL,\n\t\tTokenURL: tokenURL,\n\t}\n\n\tconfig = oauth2.Config{\n\t\tClientID:     clientID,\n\t\tClientSecret: clientSecret,\n\t\tEndpoint:     endpoint,\n\t\tRedirectURL:  callbackURL,\n\t\tScopes:       []string{oidc.ScopeOpenID, \"profile\", \"email\"},\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Another Simple Struct Definition in Go\nDESCRIPTION: Defines a simple Go struct `Something` with integer and string fields, which will also be used as a component in a larger model.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/allOf.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// A Something struct is used by other structs\ntype Something struct {\n\tDID int64  `json:\"did\"`\n\tCat string `json:\"cat\"`\n}\n```\n\n----------------------------------------\n\nTITLE: ServeAPI Function with Operation Annotation - Go\nDESCRIPTION: This code snippet demonstrates how to use the `swagger:operation` annotation within a Go function. It includes parameters, descriptions, and response definitions, which are specified using YAML within the annotation block. The function serves the API for a record store and uses the annotation to define the GET /pets endpoint.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/operation.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// ServeAPI serves the API for this record store\nfunc ServeAPI(host, basePath string, schemes []string) (err error) {\n\t// swagger:operation GET /pets getPet\n\t//\n\t// Returns all pets from the system that the user has access to\n\t//\n\t// Could be any pet\n\t//\n\t// ---\n\t// produces:\n\t// - application/json\n\t// - application/xml\n\t// - text/xml\n\t// - text/html\n\t// parameters:\n\t// - name: tags\n\t//   in: query\n\t//   description: tags to filter by\n\t//   required: false\n\t//   type: array\n\t//   items:\n\t//     type: string\n\t//   collectionFormat: csv\n\t// - name: limit\n\t//   in: query\n\t//   description: maximum number of results to return\n\t//   required: false\n\t//   type: integer\n\t//   format: int32\n\t// responses:\n\t//   '200':\n\t//     description: pet response\n\t//     schema:\n\t//       type: array\n\t//       items:\n\t//         \"$ref\": \"#/definitions/pet\"\n\t//   default:\n\t//     description: unexpected error\n\t//     schema:\n\t//       \"$ref\": \"#/definitions/errorModel\"\n\tmountItem(\"GET\", basePath+\"/pets\", nil)\n\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticator Function Definition - Go\nDESCRIPTION: This snippet defines the `Authenticator` type, which is a function responsible for authenticating a request. It takes an interface as input, attempts authentication, and returns a boolean indicating a successful match, a principal (user identity), and an error if authentication fails.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/design.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Authenticator func(interface{}) (matched bool, principal interface{}, err error)\n```\n\n----------------------------------------\n\nTITLE: Running Todo Server\nDESCRIPTION: This command runs the todo list server.  By default, it serves the API on a random port.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit:(master) ✗ !? » todo-list-server\nserving todo list at http://127.0.0.1:64637\n```\n\n----------------------------------------\n\nTITLE: Composing OR Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet illustrates the use of OR constraints.  The `/orders/{itemID}` endpoint requires either API key authentication via header (isReseller) OR API key authentication via query parameter (isResellerQuery).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  /orders/{itemID}:\n    get:\n      summary: retrieves all orders for an item\n      operationId: GetOrdersForItem\n      description: |\n        Only registered resellers should be able to search orders for an item\n      security:\n        - isReseller: []\n        - isResellerQuery: []\n...\n```\n\n----------------------------------------\n\nTITLE: Operation Handler Definition - Go\nDESCRIPTION: This code snippet defines the `OperationHandler` type, which is a function that takes an interface as input and returns an interface and an error. This function type is used to handle operations registered in the untyped API.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/design.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype OperationHandler func(interface{}) (interface{}, error)\n```\n\n----------------------------------------\n\nTITLE: External Type Definition in Inline Array - YAML\nDESCRIPTION: This YAML demonstrates using an external type within an inline array definition.  The `x-go-type` extension is used to specify the external type for the array items.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  MyType:\n    type: array\n    items:\n      type: string\n      x-go-type:\n        type: MyExternalString\n        import:\n          package: github.com/example/models/custom\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code with Swagger\nDESCRIPTION: This command generates client-side code using the `swagger generate client` command. The command utilizes flags to define the specification file (`fixture-1683.yaml`), model package (`models`), client package (`cabc/csubdir`), target directory (`codegen2/target-withDash151`), and the base name for generated files (`nrcodegen_underscored`). It also includes `--skip-validation` to bypass the validation step.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1683/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate client --skip-validation --spec=fixture-1683.yaml --model-package=models --client-package=cabc/csubdir --target=codegen2/target-withDash151 --name=nrcodegen_underscored\n```\n\n----------------------------------------\n\nTITLE: Running CLI with Config File\nDESCRIPTION: This command demonstrates how to invoke the CLI tool with the configuration file. When the configuration file is properly setup, common flags like `hostname` and `authentication` tokens do not need to be explicitly passed on the command line.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./examples/cli/cmd/cli/todo-cli todos findTodos\n```\n\n----------------------------------------\n\nTITLE: Generating Bash Completion Script\nDESCRIPTION: This command generates a bash completion script for the CLI tool, allowing for tab completion of commands and flags.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./examples/cli/cmd/todoctl/todo-cli completion bash\n```\n\n----------------------------------------\n\nTITLE: Generating Server Code with Underscored Name\nDESCRIPTION: This command generates server code and uses an underscored name. It uses the `swagger generate server` command with options for specifying the model package (`mabc/sub1/msub2`), server package (`sabc`), API package (`aabc/asubdir`), target directory (`codegen2/target-withDash814`), and the name (`nrcodegen_underscored`). The `--skip-validation` flag is included to skip the validation step during code generation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1683/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=sabc --api-package=aabc/asubdir --target=codegen2/target-withDash814 --name=nrcodegen_underscored\n```\n\n----------------------------------------\n\nTITLE: Configuring API Authorizers in Go\nDESCRIPTION: This code configures the API with custom authorizers, handling different authentication schemes. It sets up handlers for Basic authentication (IsRegisteredAuth), Bearer token authentication (HasRoleAuth), and API Key authentication via query parameter (IsResellerQueryAuth) and header (IsResellerAuth). Each handler calls an authentication function and logs the call.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc configureAPI(api *operations.MultiAuthExampleAPI) http.Handler {\n\t// configure the api here\n\tapi.ServeError = errors.ServeError\n\n    ...\n\tlogger := logging.MustGetLogger(\"api\")\n\n\tapi.Logger = logger.Infof\n\n\tapi.JSONConsumer = runtime.JSONConsumer()\n\n\tapi.JSONProducer = runtime.JSONProducer()\n\n\t// Applies when the \"Authorization: Basic\" header is set with the Basic scheme\n\tapi.IsRegisteredAuth = func(user string, pass string) (*models.Principal, error) {\n\t\t// The header: Authorization: Basic {base64 string} has already been decoded by the runtime as a username:password pair\n\t\tapi.Logger(\"IsRegisteredAuth handler called\")\n\t\treturn auth.IsRegistered(user, pass)\n\t}\n\n\t// Applies when the \"Authorization: Bearer\" header or the \"access_token\" query is set\n\tapi.HasRoleAuth = func(token string, scopes []string) (*models.Principal, error) {\n\t\t// The header: Authorization: Bearer {base64 string} (or ?access_token={base 64 string} param) has already\n\t\t// been decoded by the runtime as a token\n\t\tapi.Logger(\"HasRoleAuth handler called\")\n\t\treturn auth.HasRole(token, scopes)\n\t}\n\n\t// Applies when the \"CustomKeyAsQuery\" query is set\n\tapi.IsResellerQueryAuth = func(token string) (*models.Principal, error) {\n\t\tapi.Logger(\"ResellerQueryAuth handler called\")\n\t\treturn auth.IsReseller(token)\n\t}\n\n\t// Applies when the \"X-Custom-Key\" header is set\n\tapi.IsResellerAuth = func(token string) (*models.Principal, error) {\n\t\tapi.Logger(\"IsResellerAuth handler called\")\n\t\treturn auth.IsReseller(token)\n\t}\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Struct Definition in Go\nDESCRIPTION: Defines a simple Go struct `SimpleOne` with integer, string, and int32 fields, which will be used as a component in a larger model.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/allOf.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A SimpleOne is a model with a few simple fields\ntype SimpleOne struct {\n\tID   int64  `json:\"id\"`\n\tName string `json:\"name\"`\n\tAge  int32  `json:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Empty YAML Result Placeholder\nDESCRIPTION: This snippet represents an empty YAML code block, indicating where the resulting Swagger/OpenAPI specification in YAML format would be displayed based on the annotations and code provided. It serves as a placeholder for the generated schema.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/params.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Generate Struct for Another Subtype - Go\nDESCRIPTION: This Go code represents the struct generated for the subtype `Cat`. It includes the `HuntingSkill` property and getter/setter methods for the inherited `Name` property. The `PetType` method returns the discriminator value for this subtype. The `enum` values are included as comments.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n// Cat A representation of a cat\n// swagger:model cat\ntype Cat struct {\n\tnameField *string\n\n\t// The measured skill for hunting\n\t// Required: true\n\t// Enum: [clueless lazy adventurous aggressive]\n\tHuntingSkill *string `json:\"huntingSkill\"`\n}\n\n// Name gets the name of this subtype\nfunc (m *Cat) Name() *string {\n\treturn m.nameField\n}\n\n// SetName sets the name of this subtype\nfunc (m *Cat) SetName(val *string) {\n\tm.nameField = val\n}\n\n// PetType gets the pet type of this subtype\nfunc (m *Cat) PetType() string {\n\treturn \"cat\"\n}\n\n// SetPetType sets the pet type of this subtype\nfunc (m *Cat) SetPetType(val string) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Flatten Command with Expand Option\nDESCRIPTION: The `swagger flatten --with-expand` command combines the flatten operation with expansion, resolving `$ref`s and bundling external references into a single document. This is useful for preparing a specification for use with other tools, such as code generators. It builds upon the core flattening functionalities to enhance pre-processing capabilities.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nswagger flatten --with-expand {spec}\n```\n\n----------------------------------------\n\nTITLE: Create go-swagger alias for MacOS/Linux\nDESCRIPTION: This snippet defines an alias `swagger` for MacOS and Linux users to run go-swagger commands inside a Docker container. It mounts the home directory and current working directory to allow access to local files.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-docker.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nREPO=\"quay.io\"    #<- or \"ghcr.io\"\nalias swagger='docker run --rm -it  --user $(id -u):$(id -g) -v $HOME:$HOME -w $PWD $REPO/goswagger/swagger'\nswagger version\n```\n\n----------------------------------------\n\nTITLE: Define a handler interface without authentication in Go-Swagger\nDESCRIPTION: This Go code defines an interface for a handler that does not require authentication. It takes input parameters of type `ListTravelsParams` and returns a `middleware.Responder`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/server.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ListTravelsHandler interface {\n\tHandle(ListTravelsParams) middleware.Responder\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Operation in Go\nDESCRIPTION: This Go code implements the login operation (`api.GetLoginHandler`). It calls the `login` function to initiate the OAuth2 login flow by redirecting the user to the authorization server. The function returns a `middleware.NotImplemented` response because the complete flow is not completely implemented.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\napi.GetLoginHandler = operations.GetLoginHandlerFunc(func(params operations.GetLoginParams) middleware.Responder {\n        // implements the login operation\n\t\tlogin(params.HTTPRequest)\n\t\treturn middleware.NotImplemented(\"operation .GetLogin has not yet been implemented\")\n\t})\n```\n\n----------------------------------------\n\nTITLE: Zsh Completion Setup: Add Completion Directory\nDESCRIPTION: This snippet adds a custom completion directory to Zsh's `fpath`.  It's a step in configuring Zsh to recognize the swagger autocompletion script. The `$HOME/.zshrc` file needs to be modified.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/cli_helpers.md#_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n# add auto-completion directory to zsh's fpath\nfpath=($HOME/.zsh/completion $fpath)\n```\n\n----------------------------------------\n\nTITLE: Installing go-swagger using a released source tarball\nDESCRIPTION: This snippet downloads the latest released source tarball of go-swagger, extracts it, and installs the swagger command.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-source.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndir=$(mktemp -d) \ndownload_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | \\\n  jq -r '.tarball_url')\n\ncurl -o $dir/swagger -L'#' \"$download_url\"\ncd \"$dir\"\ntar xf swagger\ncd go-swagger*\ngo install ./cmd/swagger\n```\n\n----------------------------------------\n\nTITLE: Running the streaming server\nDESCRIPTION: This command executes the countdown server, making it listen on port 8000.  This is the server that streams the JSON data.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ $GOPATH/bin/countdown-server --port=8000\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling the JSON stream with bufio.Scanner in Go\nDESCRIPTION: This code snippet shows how to read and unmarshal the stream of JSON objects using `bufio.Scanner`.  It iterates line by line, unmarshals each line into a `models.Mark` struct, and processes the data. The `cancel()` function is used to interrupt the request if an error occurs.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n    ...\n\t\t// read response items line by line\n\t\tfor scanner.Scan() {\n\t\t\t// each response item is JSON\n\t\t\ttxt := scanner.Text()\n\t\t\tlog.Printf(\"received countdown mark - raw: %s\", txt)\n\n\t\t\tvar mark models.Mark\n\n\t\t\terr := json.Unmarshal([]byte(txt), &mark)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"unmarshal error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlog.Printf(\"received countdown mark - remaining: %d\", swag.Int64Value(mark.Remains))\n\t\t}\n    ...\n```\n\n----------------------------------------\n\nTITLE: Iterating through scopes in Go-Swagger Route\nDESCRIPTION: This code iterates through the scopes defined for a specific route in the swagger.yaml file. It retrieves the route using middleware.MatchedRouteFrom(*http.Request) and then iterates through the Authenticators and Scopes to access scope names and values associated with the route. This enables fine-grained authorization based on defined scopes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfor _, auth := range route.Authenticators {\n    for scopeName, scopeValues := range auth.Scopes {\n        for _, scopeValue := range scopeValues {\n            ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Client Configuration YAML\nDESCRIPTION: This YAML configuration file defines the layout for the default client generator in go-swagger.  It configures the source, target directory, and filename of key client components like facade, models, and operation clients using templating.  It relies on sprig template functions to manipulate strings during template execution.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/templates/template_layout.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nlayout:\n  application:\n    - name: facade\n      source: asset:clientFacade\n      target: \"{{ joinFilePath .Target .ClientPackage }}\"\n      file_name: \"{{ .Name }}_client.go\"\n  models:\n    - name: definition\n      source: asset:model\n      target: \"{{ joinFilePath .Target .ModelPackage }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n  operations:\n    - name: parameters\n      source: asset:clientParameter\n      target: \"{{ joinFilePath .Target .ClientPackage .Package }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_parameters.go\"\n    - name: responses\n      source: asset:clientResponse\n      target: \"{{ joinFilePath .Target .ClientPackage .Package }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_responses.go\"\n  operation_groups:\n    - name: client\n      source: asset:clientClient\n      target: \"{{ joinFilePath .Target .ClientPackage .Name }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_client.go\"\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code with Varying Package and Target Options\nDESCRIPTION: This command generates client code, showcasing the usage of dashed model packages and subdirectories with the swagger generate client command. The swagger generate client command is utilized, with specific configurations for the model package (`mabc-dashed/msubdir`), client package (`cabc`), target directory (`codegen3/target/subDir770`), and name (`nrcodegen_underscored`). The `--skip-validation` flag is included to bypass the validation step during the generation process.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1683/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate client --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed/msubdir --client-package=cabc --target=codegen3/target/subDir770 --name=nrcodegen_underscored\n```\n\n----------------------------------------\n\nTITLE: Sourcing and Adding Completion Permanently\nDESCRIPTION: These commands show how to temporarily source the completion script in the current shell and how to add the completion script permanently to the system.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# temporary completion in current shell\n$ source <(./examples/cli/cmd/todoctl/todoctl completion bash)\n# add completion permanently to your system\n$ ./examples/cli/cmd/todoctl/todoctl completion bash > /etc/bash_completion.d/todoctl\n```\n\n----------------------------------------\n\nTITLE: Installing the go-swagger project\nDESCRIPTION: This command installs the generated server project and its dependencies, making it executable.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go install ./...\n```\n\n----------------------------------------\n\nTITLE: Omit Empty Extension - Go Code\nDESCRIPTION: This Go snippet shows the generated struct without the `omitempty` modifier on the `field` tag, due to the `x-omitempty: false` setting in the YAML.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_47\n\nLANGUAGE: go\nCODE:\n```\ntype ObjectWithTag struct {\n    Field string `json:\"field\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteResponse for AddOneCreated in Go\nDESCRIPTION: The `WriteResponse` method for `AddOneCreated` writes a 201 Created response to the client. It sets the status code to 201 and serializes the `Payload` (an instance of `models.Item`) using the provided `runtime.Producer`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n// WriteResponse to the client\nfunc (o *AddOneCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {\n\n\trw.WriteHeader(201)\n\tif o.Payload != nil {\n\t\tif err := producer.Produce(rw, o.Payload); err != nil {\n\t\t\tpanic(err) // let the recovery middleware deal with this\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go-Swagger API Operation Handlers\nDESCRIPTION: This code defines the handler functions for the `go-swagger` API operations. Each handler function receives parameters, interacts with the backend (adding, updating, deleting, or retrieving Todo items), and returns a response. Type assertions are used to extract data from the generic `params` interface.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/dynamic.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar findTodos = runtime.OperationHandlerFunc(func(params interface{}) (interface{}, error) {\n\tlog.Println(\"received 'findTodos'\")\n\tlog.Printf(\"%#v\\n\", params)\n\n\treturn items, nil\n})\n\nvar addOne = runtime.OperationHandlerFunc(func(params interface{}) (interface{}, error) {\n\tlog.Println(\"received 'addOne'\")\n\tlog.Printf(\"%#v\\n\", params)\n\n\tbody := params.(map[string]interface{})[\"body\"].(map[string]interface{}) \n\taddItem(body)\n\treturn body, nil\n})\n\nvar updateOne = runtime.OperationHandlerFunc(func(params interface{}) (interface{}, error) {\n\tlog.Println(\"received 'updateOne'\")\n\tlog.Printf(\"%#v\\n\", params)\n\n\tdata := params.(map[string]interface{})\n\tid := data[\"id\"].(int64)\n\tbody := data[\"body\"].(map[string]interface{}) \n\treturn updateItem(id, body)\n})\n\nvar destroyOne = runtime.OperationHandlerFunc(func(params interface{}) (interface{}, error) {\n\tlog.Println(\"received 'destroyOne'\")\n\tlog.Printf(\"%#v\\n\", params)\n\n\tremoveItem(params.(map[string]interface{})[\"id\"].(int64))\n\treturn nil, nil\n})\n```\n\n----------------------------------------\n\nTITLE: Consuming XML API with Generated go-swagger Client\nDESCRIPTION: This Go code demonstrates how to consume an XML API using a go-swagger generated client. It sets up the HTTP transport, configures default Bearer authentication, and makes a request to an endpoint. It includes commented-out code illustrating how to manually set the `DefaultMediaType`, `Consumers`, and `Producers` for special MIME types like `application/xhtml+xml`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/client.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"os\"\n\n  \"github.com/go-openapi/strfmt\"\n  \"github.com/go-openapi/runtime\"\n\n  apiclient \"github.com/myproject/client\"\n  httptransport \"github.com/go-openapi/runtime/client\"\n)\n\nfunc main() {\n  r := httptransport.New(apiclient.DefaultHost, apiclient.DefaultBasePath, apiclient.DefaultSchemes)\n  r.DefaultAuthentication = httptransport.BearerToken(os.Getenv(\"API_ACCESS_TOKEN\"))\n  /*\n  r.DefaultMediaType = runtime.XMLMime\n  r.Consumers = map[string]runtime.Consumer{\n    runtime.XMLMime: runtime.XMLConsumer(),\n  }\n  r.Producers = map[string]runtime.Producer{\n    \"application/xhtml+xml\": runtime.XMLProducer(),\n  }\n  */\n  client := apiclient.New(r, strfmt.Default)\n\n  resp, err := client.Operations.MyGreatEndpoint()\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Printf(\"%#v\\n\", resp.Payload)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Callback for Access Token in Go\nDESCRIPTION: This Go code implements the `callback` function, which handles the OAuth2 callback from the authorization server. It retrieves the authorization code from the query parameters, exchanges it for an access token using `config.Exchange`, and returns the access token. It also verifies the state parameter to prevent CSRF attacks.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc callback(r *http.Request) (string, error) {\n    // we expect the redirected client to call us back \n    // with 2 query params: state and code.\n    // We use directly the Request params here, since we did not \n    // bother to document these parameters in the spec.\n\n\tif r.URL.Query().Get(\"state\") != state {\n\t\tlog.Println(\"state did not match\")\n\t\treturn \"\", fmt.Errorf(\"state did not match\")\n\t}\n\n\tmyClient := &http.Client{}\n\n\tparentContext := context.Background()\n\tctx := oidc.ClientContext(parentContext, myClient)\n\n\tauthCode := r.URL.Query().Get(\"code\")\n\tlog.Printf(\"Authorization code: %v\\n\", authCode)\n\n    // Exchange converts an authorization code into a token.\n    // Under the hood, the oauth2 client POST a request to do so\n    // at tokenURL, then redirects...\n\toauth2Token, err := config.Exchange(ctx, authCode)\n\tif err != nil {\n\t\tlog.Println(\"failed to exchange token\", err.Error())\n\t\treturn \"\", fmt.Errorf(\"failed to exchange token\")\n\t}\n\n    // the authorization server's returned token\n\tlog.Println(\"Raw token data:\", oauth2Token)\n\treturn oauth2Token.AccessToken, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorizer in restapi.Config struct in Go\nDESCRIPTION: The Authorizer function is defined in the restapi.Config struct. It receives an HTTP request, authorizes the request based on the user information stored in the request context (using restapi.AuthKey), and returns an error if authorization fails. This function is used to enforce policies and return a 403 HTTP error if the client is not authorized.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\t...\n\t// Authorizer is used to authorize a request after the Auth function was called using the \"Auth*\" functions\n\t// and the principal was stored in the context in the \"AuthKey\" context value.\n\tAuthorizer func(*http.Request) error\n}\n```\n\n----------------------------------------\n\nTITLE: Run the OAuth2 Sample Server (Shell)\nDESCRIPTION: Runs the go-swagger server with OAuth2 authentication enabled. The `--port` flag specifies the port number the server listens on.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./cmd/oauth-sample-server/main.go --port 12345\n```\n\n----------------------------------------\n\nTITLE: Running the streaming client\nDESCRIPTION: This command executes the elapsed_client.go program, which consumes the stream of JSON data from the server. The argument specifies the starting countdown value.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo run elapsed_client.go 5\n```\n\n----------------------------------------\n\nTITLE: Initializing In-Memory Store\nDESCRIPTION: This code snippet initializes an in-memory data store using a Go map to store todo items.  It also declares a variable to keep track of the last assigned ID.  This allows for simple CRUD operations without needing a database.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// the variables we need throughout our implementation\nvar items = make(map[int64]*models.Item)\nvar lastID int64\n```\n\n----------------------------------------\n\nTITLE: Implementing BindRequest for AddOneParams in Go\nDESCRIPTION: The `BindRequest` method for `AddOneParams` binds and validates the request.  It consumes the request body, converts it to an instance of `models.Item` and performs validation using `route.Consumer.Consume`.  Any errors encountered during parsing or validation are returned.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface\n// for simple values it will use straight method calls\nfunc (o *AddOneParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {\n\tvar res []error\n\n\tvar body models.Item\n\tif err := route.Consumer.Consume(r.Body, &body); err != nil {\n\t\tres = append(res, errors.NewParseError(\"body\", \"body\", \"\", err))\n\t} else {\n\t\tif err := body.Validate(route.Formats); err != nil {\n\t\t\tres = append(res, err)\n\t\t}\n\n\t\tif len(res) == 0 {\n\t\t\to.Body = &body\n\t\t}\n\t}\n\n\tif len(res) > 0 {\n\t\treturn errors.CompositeValidationError(res...)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteResponse for AddOneDefault in Go\nDESCRIPTION: The `WriteResponse` method for `AddOneDefault` writes a 500 error response to the client. It sets the status code to 500 and serializes the `Payload` (an instance of `models.Error`) using the provided `runtime.Producer`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// WriteResponse to the client\nfunc (o *AddOneDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {\n\n\trw.WriteHeader(500)\n\tif o.Payload != nil {\n\t\tif err := producer.Produce(rw, o.Payload); err != nil {\n\t\t\tpanic(err) // let the recovery middleware deal with this\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Create go-swagger alias for Windows (batch file)\nDESCRIPTION: This snippet defines a batch file to act as an alias `swagger` for Windows users to run go-swagger commands inside a Docker container. It mounts the current directory to /app inside the container and forwards any arguments to the container.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-docker.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n@echo off\nREM <- or \"ghcr.io\"\nset REPO=quay.io\necho.\ndocker run --rm -it -v %CD%:/app -w /app %REPO%/goswagger/swagger %*\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Listener\nDESCRIPTION: This command runs the ToDo List server with only the HTTP scheme enabled. It's useful for quick testing without the need for TLS certificates.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/README.md#_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\ngo run ./cmd/todo-list-server/main.go --scheme http\n```\n\n----------------------------------------\n\nTITLE: Generating Server Code with Varying Package and Target Options\nDESCRIPTION: This command showcases the flexibility of the `swagger generate server` command by varying package and target options. It uses options for model package, server package, API package and target directory with different naming conventions and directory structures to test the code generation process. The command skips validation and specifies a name for the generated files.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1683/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir507 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=restapi --api-package=aabc-dashed/asubdir --target=codegen3/target/subDir795 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/msubdir --server-package=sabc/sub1/ssub2 --api-package=aabc-test --target=codegen3/target/subDir430 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=sabc-dashed --api-package=aabc-test --target=codegen3/target/subDir853 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=models --server-package=sabc/sub1/ssub2 --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir112 --name=nrcodegen\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=models --server-package=sabc-dashed/ssubdir --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir91 --name=nrcodegen\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc-test --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir612 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/msubdir --server-package=sabc-dashed/ssubdir --api-package=aabc/asubdir --target=codegen3/target/subDir405 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=sabc --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir810 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir500 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=sabc/sub1/ssub2 --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir901 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-test --server-package=restapi --api-package=aabc --target=codegen3/target/subDir947 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc --api-package=aabc-test --target=codegen3/target/subDir501 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-test --server-package=sabc/ssubdir --api-package=aabc-dashed/asubdir --target=codegen3/target/subDir992 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=models --server-package=sabc-test --api-package=operations --target=codegen3/target/subDir135 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/msubdir --server-package=restapi --api-package=aabc-dashed/asubdir --target=codegen3/target/subDir330 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed/msubdir --server-package=restapi --api-package=aabc-dashed/asubdir --target=codegen3/target/subDir640 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc/ssubdir --api-package=aabc-dashed --target=codegen3/target/subDir512 --name=nrcodegen\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed/msubdir --server-package=sabc-dashed/ssubdir --api-package=aabc/asubdir --target=codegen3/target/subDir722 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed/msubdir --server-package=sabc/sub1/ssub2 --api-package=aabc-test --target=codegen3/target/subDir740 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-test --server-package=sabc/ssubdir --api-package=aabc-test --target=codegen3/target/subDir987 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc-test --api-package=operations --target=codegen3/target/subDir600 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=sabc-dashed --api-package=aabc-dashed/asubdir --target=codegen3/target/subDir844 --name=nrcodegen\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc-dashed/ssubdir --api-package=aabc --target=codegen3/target/subDir559 --name=nrcodegen-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=sabc-test --api-package=operations --target=codegen3/target/subDir903 --name=nrcodegen\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc-test --api-package=aabc-test --target=codegen3/target/subDir613 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=models --server-package=sabc --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir42 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=sabc/ssubdir --api-package=aabc/sub1/asub2 --target=codegen3/target/subDir824 --name=nrcodegen\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/msubdir --server-package=sabc-test --api-package=aabc-test --target=codegen3/target/subDir458 --name=nrcodegen_underscored\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc --server-package=sabc-dashed/ssubdir --api-package=aabc --target=codegen3/target/subDir256 --name=nrcodegen_underscored\n```\n\n----------------------------------------\n\nTITLE: Defining Security Principal in Swagger YAML\nDESCRIPTION: This YAML snippet defines the 'principal' model as a string type in the Swagger definitions. This principal represents the identity of the authenticated user and is passed to the API operations after successful authentication.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  ...\n  principal:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: Path Definition with Query Parameters (YAML)\nDESCRIPTION: This YAML snippet shows how to define different paths with query parameters to handle different object types. This approach allows you to return different models based on the query parameters in the URL.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  \"/something?objectType=thisThing\":\n      get:\n...\n  \"/something?objectType=otherThing\":\n      get:\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Swagger Annotations (Go)\nDESCRIPTION: This snippet demonstrates how to define a model (data structure) with Swagger annotations. The `swagger:model` annotation is used to mark the struct as a model.  Fields within the struct are annotated to define properties like required fields, data types, minimum/maximum values, and descriptions.  Models are discovered when they are used in parameters or response objects.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n// User represents the user for this application\n//\n// A user is the security principal for this application.\n// It's also used as one of main axis for reporting.\n//\n// A user can have friends with whom they can share what they like.\n//\n// swagger:model\ntype User struct {\n    // the id for this user\n    //\n    // required: true\n    // min: 1\n    ID int64 `json:\"id\"`\n\n    // the name for this user\n    // required: true\n    // min length: 3\n    Name string `json:\"name\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Parameters in Go\nDESCRIPTION: This Go code configures OAuth2 parameters, including client ID, client secret, issuer, authentication URL, token URL, callback URL, and scopes. The `oauth2.Config` struct is initialized with these parameters to define the OAuth2 flow.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    // state carries an internal token during the oauth2 workflow\n    // we just need a non empty initial value\n\tstate = \"foobar\" // Don't make this a global in production.\n\n    // the credentials for this API (adapt values when registering API)\n\tclientID     = \"\" // <= enter registered API client ID here\n\tclientSecret = \"\" // <= enter registered API client secret here\n\n    //  unused in this example: the signer of the delivered token\n\tissuer       = \"https://accounts.google.com\"\n\n    // the Google login URL\n\tauthURL      = \"https://accounts.google.com/o/oauth2/v2/auth\"\n\n    // the Google OAuth2 resource provider which delivers access tokens\n\ttokenURL     = \"https://www.googleapis.com/oauth2/v4/token\"\n\tuserInfoURL  = \"https://www.googleapis.com/oauth2/v3/userinfo\"\n\n    // our endpoint to be called back by the redirected client\n\tcallbackURL  = \"http://127.0.0.1:12345/api/auth/callback\"\n\n    // the description of the OAuth2 flow\n\tendpoint = oauth2.Endpoint{\n\t\tAuthURL:  authURL,\n\t\tTokenURL: tokenURL,\n\t}\n\n\tconfig = oauth2.Config{\n\t\tClientID:     clientID,\n\t\tClientSecret: clientSecret,\n\t\tEndpoint:     endpoint,\n\t\tRedirectURL:  callbackURL,\n\t\tScopes:       []string{oidc.ScopeOpenID, \"profile\", \"email\"},\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: External Package Alias Deconfliction - Go Import\nDESCRIPTION: This Go snippet demonstrates how go-swagger deconflicts the `encoding/json` import by creating an alias `jsonext`. This prevents conflicts with other potential uses of the `json` package name.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  jsonext \"encoding/json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Define Default Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet defines a default security requirement for all endpoints, specifying that by default, all endpoints use the `isRegistered` (Basic Auth) security scheme.  This can be overridden on a per-endpoint basis.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - isRegistered: []\n```\n\n----------------------------------------\n\nTITLE: Swagger Meta Annotation Syntax in Go\nDESCRIPTION: Shows the basic syntax of the swagger:meta annotation in Go. This annotation is used to flag a file as a source for API metadata.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/meta.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nswagger:meta\n```\n\n----------------------------------------\n\nTITLE: Running the File Upload Client in Go\nDESCRIPTION: This command shows how to run the client, which uploads a file to the server using the provided Swagger specification.  It requires Go to be installed and configured. The `swagger.yml` file is passed as an argument.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/file-server/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo run upload_file.go swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Go-Swagger from Github Releases\nDESCRIPTION: This snippet downloads the latest go-swagger binary from GitHub releases for the detected OS architecture, and installs it into /usr/local/bin. It uses `curl`, `jq`, and `install` commands.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-binary.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndir=$(mktemp -d) \ndownload_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | \\\n  jq -r '.assets[] | select(.name | contains(\"'\"$(uname | tr '[:upper:]' '[:lower:]')\"'_amd64\")) | .browser_download_url')\n\ncurl -o $dir/swagger -L'#' \"$download_url\"\nsudo install $dir/swagger /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Numerical Values as String - Go Code\nDESCRIPTION: This Go snippet shows the generated struct with the `string` modifier added to the `json` tag for the `NumericField`, due to the `x-go-json-string: true` extension.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_48\n\nLANGUAGE: go\nCODE:\n```\ntype ObjectWithTag struct {\n    NumericField int `json:\"field,omitempty,string\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Run go-swagger in Docker on Windows (inline)\nDESCRIPTION: This command runs go-swagger inside a Docker container on Windows. It mounts the current directory to /app inside the container. Note: This is an inline example without alias creation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-docker.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nREM <- or \"ghcr.io\"\nset REPO=quay.io\ndocker run --rm -it  -v %CD%:/app -w /app %REPO%/goswagger/swagger\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code with Dashed Client Package and Subdirectory\nDESCRIPTION: This command generates client code, showcasing the usage of dashed client packages and subdirectories. The `swagger generate client` command is utilized, with specific configurations for the model package (`mabc-dashed/msubdir`), client package (`cabc-dashed`), target directory (`codegen2/target-withDash772`), and name (`nrcodegen_underscored`). The `--skip-validation` flag is included to bypass the validation step during the generation process.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1683/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate client --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed/msubdir --client-package=cabc-dashed --target=codegen2/target-withDash772 --name=nrcodegen_underscored\n```\n\n----------------------------------------\n\nTITLE: Run the Greeter Server\nDESCRIPTION: This command executes the main.go file located in the ./cmd/greeter/ directory using the go run command. The --port flag specifies that the server should listen on port 3000.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/tutorials/custom-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go run ./cmd/greeter/main.go --port 3000\n```\n\n----------------------------------------\n\nTITLE: Installing go-swagger using git clone\nDESCRIPTION: This snippet clones the go-swagger repository, navigates into the created directory, and installs the swagger command from the current source master.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-source.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndir=$(mktemp -d) \ngit clone https://github.com/go-swagger/go-swagger \"$dir\" \ncd \"$dir\"\ngo install ./cmd/swagger\n```\n\n----------------------------------------\n\nTITLE: Swagger Response Result (YAML)\nDESCRIPTION: This is a placeholder for the expected YAML output that would be generated from the Go code using swagger. This section should contain the resulting YAML structure representing the 'validationError' response, but is currently empty in the original documentation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/response.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Testing API with Basic Authentication, Header and Query Parameters using Curl\nDESCRIPTION: This curl command demonstrates how to test an API endpoint that requires Basic authentication (Authorization: Basic), a custom header (X-Custom-Key), and a query parameter (access_token). It retrieves tokens from files and sets the necessary headers and query parameters. It sends a POST request with JSON data.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nbasic=`echo \"ivan:terrible\"|tr -d '\\n'|base64 -i`\ncurl \\\n  --verbose \\\n  -i \\\n  -X POST \\\n  --data '{\"orderID\": \"myorder\", \"orderLines\": [{\"quantity\": 10, \"purchasedItem\": \"myItem\"}]}' \\\n  --header \"Content-Type: application/json\" \\\n  --header \"Authorization: Basic ${basic}\" \\\n  --header \"X-Custom-Key: `cat tokens/token-apikey-reseller.jwt`\" \\\n  \"http://localhost:43016/api/order/add?access_token=`cat tokens/token-bearer-inventory-manager.jwt`\"\n```\n\n----------------------------------------\n\nTITLE: Expanding Swagger Spec\nDESCRIPTION: This command resolves and expands all $ref references in the Swagger specification, replacing them with inline definitions. This creates a single, self-contained specification file.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nswagger expand {spec}\n```\n\n----------------------------------------\n\nTITLE: YAML Definition for Date Realiasing\nDESCRIPTION: This YAML snippet shows how types can be realiased in go-swagger. The definitions show a chain of type alias; herDate -> myDate, and hisDate -> herDate\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  herDate:\n    $ref: #/definitions/myDate\n  hisDate:\n    $ref: #/definitions/herDate\n```\n\n----------------------------------------\n\nTITLE: API Response (HTTP 401) to Request with Invalid Token\nDESCRIPTION: This HTTP snippet represents the response received from the API when a request with an invalid OAuth2 token is made. It indicates that the request is unauthorized due to invalid credentials, resulting in a 401 error.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 401 Unauthorized\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 25 Nov 2016 19:16:49 GMT\nContent-Length: 47\n\n{\"code\":401,\"message\":\"unauthenticated for invalid credentials\"}\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of Integer with Format\nDESCRIPTION: This YAML snippet defines an integer type with a specific format, `uint64`. Note that this definition will not result in the generation of a pointer type.  This contrasts with the previous example, showing that `format` can affect the generated Go type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  myInteger:\n    type: integer\n    format: uint64\n```\n\n----------------------------------------\n\nTITLE: Swagger Model Annotation Syntax - Go\nDESCRIPTION: This snippet demonstrates the syntax for using the `swagger:model` annotation in Go. It shows how to annotate a struct to define it as a schema in the Swagger specification. An optional model name can be specified after the annotation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/model.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nswagger:model [?model name]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Schema for File Response\nDESCRIPTION: This JSON schema represents the structure for a file response in a Swagger/OpenAPI specification.  The `type` is set to `file`, indicating that the response contains a binary file (application/octet-stream).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"description\": \"OK\",\n  \"schema\": {\n    \"type\": \"file\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Serve Usage\nDESCRIPTION: Displays the usage information for the `swagger serve` command, including available options and arguments.  It allows serving a swagger specification along with a UI (Redoc or Swagger UI) for rendering the specification.  The command also supports options for configuring the server, UI flavor, and CORS.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/serve_ui.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n  swagger [OPTIONS] serve [serve-OPTIONS] {specification file}\n\nserve a spec and swagger or redoc documentation ui\n\nApplication Options:\n  -q, --quiet                         silence logs\n      --log-output=LOG-FILE           redirect logs to file\n\nHelp Options:\n  -h, --help                          Show this help message\n\n[serve command options]\n          --base-path=                the base path to serve the spec and UI at\n      -F, --flavor=[redoc|swagger]    the flavor of docs, can be swagger or redoc (default: redoc)\n          --doc-url=                  override the url which takes a url query param to render the doc ui\n          --no-open                   when present won't open the browser to show the url\n          --no-ui                     when present, only the swagger spec will be served\n      -p, --port=                     the port to serve this site [$PORT]\n          --host=                     the interface to serve this site, defaults to 0.0.0.0 [$HOST]\n```\n\n----------------------------------------\n\nTITLE: Validatable Interface and Error Struct - Go\nDESCRIPTION: This snippet defines the `Validatable` interface, which allows custom validation logic to be implemented for types. It also defines an `Error` struct which contains the code, path, location, value and message for a validation error.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/design.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Validatable interface {\n  Validate(strfmt.Registry) error\n}\n\ntype Error struct {\n  Code     int32\n  Path     string\n  In       string\n  Value    interface{}\n  Message  string\n}\n```\n\n----------------------------------------\n\nTITLE: API POST Request - Incorrect Content Type\nDESCRIPTION: A curl command to create a new todo item with an incorrect content type (application/x-www-form-urlencoded). It expects the API to return a 415 Unsupported Media Type error.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i localhost:8765 -d \"{\\\"description\\\":\\\"message $RANDOM\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of Array of Dates\nDESCRIPTION: This YAML snippet defines an array of dates, referencing the previously defined `myDate` type.  It uses the `$ref` keyword to reuse the definition of `myDate`. x-nullable must be set to true for myDate to work as intended.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  myDate:\n    type: string\n    format: date\n    x-nullable: true\n  anArrayOfDates:\n    type: array\n    items:\n      $ref: '#/definitions/myDate'\n```\n\n----------------------------------------\n\nTITLE: SwaggerPetstore Type Definition in Go\nDESCRIPTION: Defines the SwaggerPetstore type, containing Pet and Store clients, which implement interfaces declared in the pet and store packages respectively. These interfaces allow for mocking and easier testing.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype SwaggerPetstore {\n\t...\n\tPet       *pet.Client\n\tStore     *store.Client\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Request (Shell)\nDESCRIPTION: This curl command demonstrates an example API request with a custom header for API key authentication. It performs a GET request to the /api/orders/myItem endpoint, including the X-Custom-Key header with a JWT token.  The --verbose flag provides detailed information about the request and response.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  --verbose \\\n  --get \\\n  --header \"X-Custom-Key: `cat tokens/token-apikey-reseller.jwt`\" \\\n  \"http://localhost:43016/api/orders/myItem\"\n```\n\n----------------------------------------\n\nTITLE: Installing go-swagger using go install with CGO disabled\nDESCRIPTION: This snippet installs go-swagger using the `go install` command with CGO disabled. This might be necessary in certain environments.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-source.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=0 go install github.com/go-swagger/go-swagger/cmd/swagger@latest\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of Integer and String Types\nDESCRIPTION: This YAML snippet defines two types, `myInteger` and `myString`, with constraints on their values using `minimum` and `minLength` respectively.  This example shows how basic validation rules are specified in the Swagger/OpenAPI definition file. It results in the generation of Go pointer types to differentiate between zero values and unset values.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  myInteger:\n    type: integer\n    minimum: 0\n  myString:\n    type: string\n    minLength: 0\n```\n\n----------------------------------------\n\nTITLE: Running Full Server with TLS\nDESCRIPTION: These commands build the todo-list-server binary and then run it with TLS enabled. The server listens on HTTPS and requires a TLS certificate and key. It must be run with sudo privileges. The certificate and key are provided as command-line arguments.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list-strict/README.md#_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\ngo build ./cmd/todo-list-server\nsudo ./todo-list-server --tls-certificate mycert1.crt --tls-key mycert1.key\n```\n\n----------------------------------------\n\nTITLE: Generating Server Code with Subdirectories in Model Package\nDESCRIPTION: This command generates server code and uses subdirectories in the model package. It uses the `swagger generate server` command with options for specifying the model package (`mabc/sub1/msub2`), server package (`sabc-dashed/ssubdir`), API package (`aabc-dashed`), target directory (`codegen2/target-withDash871`), and the name (`nrcodegen-test`). The `--skip-validation` flag is included to skip the validation step during code generation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1683/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc/sub1/msub2 --server-package=sabc-dashed/ssubdir --api-package=aabc-dashed --target=codegen2/target-withDash871 --name=nrcodegen-test\n```\n\n----------------------------------------\n\nTITLE: Swagger CLI Usage\nDESCRIPTION: This snippet displays the usage information for the swagger CLI tool. It showcases the command structure, available options (like quiet mode and log output redirection), and lists the available commands such as 'diff', 'expand', 'flatten', 'generate', 'init', 'mixin', 'serve', 'validate', and 'version'.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/swagger.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nUsage:\n  swagger [OPTIONS] <command>\n\nSwagger tries to support you as best as possible when building APIs.\n\nIt aims to represent the contract of your API with a language agnostic description of your application in json or yaml.\n\nApplication Options:\n  -q, --quiet                  silence logs\n      --log-output=LOG-FILE    redirect logs to file\n\nHelp Options:\n  -h, --help                   Show this help message\n\nAvailable commands:\n  diff      diff swagger documents\n  expand    expand $ref fields in a swagger spec\n  flatten   flattens a swagger document\n  generate  generate go code\n  init      initialize a spec document\n  mixin     merge swagger documents\n  serve     serve spec and docs\n  validate  validate the swagger document\n  version   print the version\n```\n\n----------------------------------------\n\nTITLE: Creating a Todo Item via HTTP (Correct Content-Type)\nDESCRIPTION: This command creates a new Todo item using `curl` with the correct Content-Type (`application/io.goswagger.examples.todo-list.v1+json`). The API creates the item and returns a 201 Created status along with the new item's details, including the generated ID.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/dynamic.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i -H 'Content-Type: application/io.goswagger.examples.todo-list.v1+json' localhost:8000 -d '{\"description\":\"a new item\"}'\n```\n\n----------------------------------------\n\nTITLE: Embedding RawMessage - YAML Definition\nDESCRIPTION: This YAML snippet defines a `Raw` schema that embeds the `RawMessage` type from the `encoding/json` package, using the `embedded: true` and `kind: primitive` hints.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nRaw:\n    x-go-type:\n      type: RawMessage\n      import:\n        package: encoding/json\n      hints:\n        kind: primitive\n      embedded: true\n```\n\n----------------------------------------\n\nTITLE: Example Result (Empty YAML) - YAML\nDESCRIPTION: This snippet represents the expected output in YAML format after processing the Go code with the `swagger:type` annotation. In this particular example, the YAML output is empty, implying further processing or configuration is required to generate a complete Swagger specification.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/type.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Swagger YAML with Duplicate operationId\nDESCRIPTION: This YAML snippet demonstrates a swagger specification with duplicate operationIds across different paths.  The operationId must be globally unique across the entire API, regardless of the path.  The example includes the getById operationId defined for both /users/{id} and /pets/{id}.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_swagger.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  '/users/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        type: string\n    get:\n      operationId: getById\n      summary: Get User By ID\n      tags:\n        - Users\n      responses:\n        '200':\n          description: ''\n          schema:\n            $ref: '#/definitions/user-output'\n  '/pets/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        type: string\n    get:\n      operationId: getById\n      summary: Get Pet By ID\n      tags:\n        - Pets\n      responses:\n        '200':\n          description: ''\n          schema:\n            $ref: '#/definitions/pet-output'\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of Extensible Tuple\nDESCRIPTION: This YAML snippet defines an extensible tuple, which is a tuple with additional items allowed. `additionalItems` specifies the type of the additional items.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  extensibleTuple:\n    type: array\n    items:\n    - type: integer\n    - type: string\n    - type: string\n      format: uuid\n    additionalItems:\n    - type: number\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Struct with swagger:ignore in Go\nDESCRIPTION: This snippet demonstrates how to use the `swagger:ignore` directive to exclude an entire struct from the Swagger specification. This is useful when the struct represents an internal data structure that shouldn't be exposed in the API documentation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/ignore.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//swagger: ignore\ntype Patient struct {\n    // example: John Doe\n    name        string  `json:\"name\"`\n    // example: 27\n    age         int     `json:\"age\\\"\"`\n    // example: New York\n    city        string  `json:\"city\"`\n    // example: 1234567890\n    phone       string  `json:\"phone\"`\n    // example: 1A2B3C\n    uniqueId    string  `json:\"unique_id\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Remove github.com/tylerb/graceful import\nDESCRIPTION: This snippet describes the removal of the `github.com/tylerb/graceful` package import in generated servers, replaced by Go 1.8 native functionality. This change occurred during the migration from version 0.14 to 0.15.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Resulting YAML\nDESCRIPTION: Indicates an empty YAML result, likely because the input Go code doesn't generate any YAML directly but influences Swagger/OpenAPI generation based on the annotations.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/strfmt.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of Tuple\nDESCRIPTION: This YAML snippet defines a tuple, which is an array with a fixed number of elements, each with a specific type. Tuples can contain a mixture of datatypes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  tuple:\n    type: array\n    items:\n    - type: integer\n    - type: string\n    - type: string\n      format: uuid\n```\n\n----------------------------------------\n\nTITLE: Client Generation Command\nDESCRIPTION: This command generates a client application using go-swagger. It specifies the API name, the swagger definition file, and the configuration file for customizing the templates.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/templates/template_layout.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nswagger generate client -A TodoList -f ./swagger.json -C default-client.yml\n```\n\n----------------------------------------\n\nTITLE: Defining a File Response with Swagger Annotations (Go)\nDESCRIPTION: This snippet demonstrates how to define a file response (application/octet-stream) in a Swagger specification using go-swagger annotations. It uses `runtime.File` or `os.File` in the response struct to indicate a file type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md#_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\ntype fileResponse struct {\n    // In: body\n    File runtime.File\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Go-Swagger Repository\nDESCRIPTION: This shell script command clones the go-swagger repository from GitHub, allowing contributors to work on the project locally. It downloads the entire project history and current state of the codebase. The command requires Git to be installed.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/contributing/_index.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\ngit clone https://github.com/go-swagger/go-swagger\n```\n\n----------------------------------------\n\nTITLE: Generating Server Code with Dashed Package Names\nDESCRIPTION: This command generates server code, demonstrating the use of dashed package names. It utilizes the `swagger generate server` command with options for specifying the model package (`mabc-dashed`), server package (`sabc-dashed`), API package (`aabc-dashed`), target directory (`codegen2/target-withDash540`), and name (`nrcodegen-test`). The `--skip-validation` flag is included to skip the validation step during code generation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1683/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate server --skip-validation --spec=fixture-1683.yaml --model-package=mabc-dashed --server-package=sabc-dashed --api-package=aabc-dashed --target=codegen2/target-withDash540 --name=nrcodegen-test\n```\n\n----------------------------------------\n\nTITLE: Simulating an error condition with curl\nDESCRIPTION: This command uses curl to trigger an error condition on the server, which responds with a 403 Forbidden error.  Note that this is not a streaming response.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v http://127.0.0.1:8000/elapse/11\n* About to connect() to 127.0.0.1 port 8000 (#0)\n*   Trying 127.0.0.1...\n* Adding handle: conn: 0x7f8582004000\n* Adding handle: send: 0\n* Adding handle: recv: 0\n* Curl_addHandleToPipeline: length: 1\n* - Conn 0 (0x7f8582004000) send_pipe: 1, recv_pipe: 0\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\n> GET /elapse/11 HTTP/1.1\n> User-Agent: curl/7.30.0\n> Host: 127.0.0.1:8000\n> Accept: */*\n>\n< HTTP/1.1 403 Forbidden\n< Content-Type: application/json\n< Date: Sun, 11 Sep 2016 00:54:48 GMT\n< Content-Length: 0\n<\n* Connection #0 to host 127.0.0.1 left intact\n$\n```\n\n----------------------------------------\n\nTITLE: No Validation Hint - YAML Definition\nDESCRIPTION: This YAML snippet demonstrates using the `noValidation: true` hint to prevent the generator from generating code that calls the Validate method of the external type RawMessage.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nMyObject:\n    type: object\n    properties:\n      p1:\n        x-go-type:\n          type: RawMessage\n          import:\n            package: encoding/json\n          hints:\n            noValidation: true\n```\n\n----------------------------------------\n\nTITLE: String Parameter in Body (Failing YAML)\nDESCRIPTION: This YAML snippet attempts to define a string parameter in the request body.  The snippet fails because the schema is not defined for body parameters.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\npost:\n  description: post func\n  operationId: postfunc\n  parameters:\n    - name: myparam\n      in: body\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Zsh Completion: Locate Completion Script\nDESCRIPTION: This snippet provides the path to the Zsh completion script for the Go-Swagger CLI.  The user must copy or symlink the script into a designated completion directory and named `_swagger` to activate autocompletion.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/cli_helpers.md#_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n./cmd/swagger/completion/swagger.zsh-completion\n```\n\n----------------------------------------\n\nTITLE: Go Generated Type for Extensible Tuple\nDESCRIPTION: This Go code snippet shows the generated struct for the extensible tuple.  The additional items are represented as a slice of the type specified in `additionalItems` field. The names of the elements for the tuple is P0, P1... and it's not customizable\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_17\n\nLANGUAGE: golang\nCODE:\n```\ntype ExtensibleTuple struct {\n    P0 *int64\n    P1 *string\n    P2 *strfmt.UUID\n    ExtensibleTupleItems []float64\n}\n```\n\n----------------------------------------\n\nTITLE: Define Discriminated Interface in Go\nDESCRIPTION: This code defines a `TeslaCar` interface with a discriminator field `Model()` and another field `AutoPilot()`. The `swagger:name` annotation specifies the JSON field name for each method.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/discriminated.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// TeslaCar is a tesla car\n//\n// swagger:model\ntype TeslaCar interface {\n\t// The model of tesla car\n\t//\n\t// discriminator: true\n\t// swagger:name model\n\tModel() string\n\n\t// AutoPilot returns true when it supports autopilot\n\t// swagger:name autoPilot\n\tAutoPilot() bool\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Server with Swagger CLI\nDESCRIPTION: This shell command uses the Swagger CLI to generate a server from the swagger.yml specification file. The -A flag sets the API name, -P specifies the model for the principal, and -f points to the swagger specification file.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate server -A oauthSample -P models.Principal -f ./swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of go-swagger from git\nDESCRIPTION: This snippet clones the go-swagger repository, checks out a specific tag, and installs the swagger command with ldflags to set version information.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-source.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndir=$(mktemp -d)\ngit clone https://github.com/go-swagger/go-swagger \"$dir\" \ncd \"$dir\"\ngit checkout {{< param goswagger.latestRelease >}}\ngo install -ldflags \"-X github.com/go-swagger/go-swagger/cmd/swagger/commands.Version=$(git describe --tags) -X github.com/go-swagger/go-swagger/cmd/swagger/commands.Commit=$(git rev-parse HEAD)\" ./cmd/swagger\n```\n\n----------------------------------------\n\nTITLE: Replacing fmt.Errorf with errors.New in Go\nDESCRIPTION: This code snippet demonstrates replacing `fmt.Errorf` with `errors.New` when no parameters are needed. This simplifies error creation and can improve code readability.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/notes/v0.31.0.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nerrors.New(\"error message\")\n```\n\n----------------------------------------\n\nTITLE: Handling API Operations in Go\nDESCRIPTION: This code snippet defines a handler function for the AddOrder operation. It logs the parameters and the principal associated with the request. The handler currently returns a 'NotImplemented' error, indicating that the operation is not yet implemented. It showcases how to access the request parameters and the authenticated principal.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\napi.AddOrderHandler = operations.AddOrderHandlerFunc(func(params operations.AddOrderParams, principal *models.Principal) middleware.Responder {\n\t\tlogger.Warningf(\"AddOrder called with params: %s, and principal: %s\", spew.Sdump(params.Order), spew.Sdump(principal))\n\t\treturn middleware.NotImplemented(\"operation .AddOrder has not yet been implemented\")\n\t})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Go\nDESCRIPTION: This snippet demonstrates how to implement a basic authentication authorizer in Go. It checks if a provided username and password pair exists in a user database (userDb). If the credentials are valid, it returns a Principal; otherwise, it returns an error indicating unauthorized access.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// IsRegistered determines if the user is properly registered,\n// i.e if a valid username:password pair has been provided\nfunc IsRegistered(user, pass string) (*models.Principal, error) {\n\tlogger.Debugf(\"Credentials: %q:%q\", user, pass)\n\tif password, ok := userDb[user]; ok {\n\t\tif pass == password {\n\t\t\treturn &models.Principal{\n\t\t\t\tName: user,\n\t\t\t}, nil\n\t\t}\n\t}\n\tlogger.Debug(\"Bad credentials\")\n\treturn nil, errors.New(401, \"Unauthorized: not a registered user\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Swagger via Homebrew on MacOS\nDESCRIPTION: This snippet shows how to install go-swagger on MacOS using Homebrew. It first taps the go-swagger repository and then installs the go-swagger package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-binary.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew tap go-swagger/go-swagger\nbrew install go-swagger\n```\n\n----------------------------------------\n\nTITLE: Getting API Handler - Go\nDESCRIPTION: This snippet demonstrates how to retrieve the API handler in a go-swagger project for testing purposes. It involves loading the swagger specification, creating the API, and configuring it to obtain the handler. This code is typically used within a test file to set up the API for testing.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_testing.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage restapi\n\nimport (\n    loads \"github.com/go-openapi/loads\"\n    \"github.com/pim/pam/poum/restapi/operations\"\n    \"net/http\"\n)\n\nfunc getAPI() (*operations.ThefactoryAPI, error) {\n    swaggerSpec, err := loads.Analyzed(SwaggerJSON, \"\")\n    if err != nil{\n        return nil, err\n    }\n    api := operations.NewThefactoryAPI(swaggerSpec)\n    return api, nil\n}\n\nfunc GetAPIHandler() (http.Handler, error) {\n    api, err := getAPI()\n    if err != nil {\n        return nil, err\n    }\n    h := configureAPI(api)\n    err = api.Validate()\n    if err != nil {\n        return nil, err\n    }\n    return h, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Diff Command Usage\nDESCRIPTION: Shows the usage of the swagger diff command with its options to compare two swagger specifications.  It includes options for filtering incompatible changes, specifying output format, ignoring diffs, and defining the destination of the output.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/diff.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n  swagger [OPTIONS] diff [diff-OPTIONS] {original spec} {spec}\n\ndiff specs showing which changes will break existing clients\n\nApplication Options:\n  -q, --quiet                    silence logs\n      --log-output=LOG-FILE      redirect logs to file\n\nHelp Options:\n  -h, --help                     Show this help message\n\n[diff command options]\n      -b, --break                When present, only shows incompatible changes\n      -f, --format=[txt|json]    When present, writes output as json (default: txt)\n      -i, --ignore=              Exception file of diffs to ignore (copy output from json diff format) (default: none specified)\n      -d, --dest=                Output destination file or stdout (default: stdout)\n```\n\n----------------------------------------\n\nTITLE: Swagger Generate Command with Full Flatten Option\nDESCRIPTION: The `swagger generate [model|server|client|operation|...] --spec={spec} --with-flatten=full` command combines code generation with full flattening.  Full flattening factorizes data model objects into simpler structures. This was default behavior for code generation in releases 0.13 and 0.14, but has been reverted since release 0.15.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate [model|server|client|operation|...] --spec={spec} --with-flatten=full\n```\n\n----------------------------------------\n\nTITLE: YAML Example: Factorized Complex Array\nDESCRIPTION: This YAML example shows the result of applying full flattening to the previous complex array definition.  The inline schema for the array items has been extracted into a new definition called `complexArrayItems`, and the original definition now references it. This is achieved with `swagger flatten --with-flatten=full {spec}`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  complexArray:\n    schema:\n      type: array\n      items:\n        $ref: '#/definitions/complexArrayItems'\n  complexArrayItems:\n    type: object\n    properties:\n      prop1:\n        type: integer\n```\n\n----------------------------------------\n\nTITLE: Swagger Generate Command with Expand Option\nDESCRIPTION: The `swagger generate` command uses code generation features (model, server, client, etc.) combined with spec expansion (using the `--with-expand` flag). It prepares the specification with fully expanded references before code generation. Expansion can lead to issues like polymorphism, duplicate names, and excessive file generation in some cases.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate [model|server|client|operation|...] --spec={spec} --with-expand\n```\n\n----------------------------------------\n\nTITLE: Define Base Type with Discriminator - YAML\nDESCRIPTION: This YAML defines a base type `Pet` with a discriminator `petType`. The discriminator indicates the specific subtype used in an instance of the `Pet` type. The `petType` property is required and of type string.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  type: object\n  discriminator: petType\n  properties:\n    name:\n      type: string\n    petType:\n      type: string\n  required:\n  - name\n  - petType\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Operation in Go\nDESCRIPTION: This Go code implements the callback operation (`api.GetAuthCallbackHandler`). It calls the `callback` function to retrieve the access token and returns the token in a default 500 response. The implementation of how a proper successful response is generated is missing, so it currently returns a 500 error.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\napi.GetAuthCallbackHandler = operations.GetAuthCallbackHandlerFunc(func(params operations.GetAuthCallbackParams) middleware.Responder {\n        // implements the callback operation\n\t\ttoken, err := callback(params.HTTPRequest)\n\t\tif err != nil {\n\t\t\treturn middleware.NotImplemented(\"operation .GetAuthCallback error\")\n\t\t}\n\t\tlog.Println(\"Token\", token)\n\t\treturn operations.NewGetAuthCallbackDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(token)})\n\t})\n```\n\n----------------------------------------\n\nTITLE: Swagger Diff Command Usage\nDESCRIPTION: This snippet shows the usage instructions for the swagger diff command, including options to filter breaking changes, format the output, specify an ignore file, and set the destination.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/diff.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nUsage:\n  swagger [OPTIONS] diff [diff-OPTIONS] {original spec} {spec}\n\ndiff specs showing which changes will break existing clients\n\nApplication Options:\n  -q, --quiet                    silence logs\n      --log-output=LOG-FILE      redirect logs to file\n\nHelp Options:\n  -h, --help                     Show this help message\n\n[diff command options]\n      -b, --break                When present, only shows incompatible changes\n      -f, --format=[txt|json]    When present, writes output as json (default: txt)\n      -i, --ignore=              Exception file of diffs to ignore (copy output from json diff format) (default: none specified)\n      -d, --dest=                Output destination file or stdout (default: stdout)\n```\n\n----------------------------------------\n\nTITLE: Composing AND/OR Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet demonstrates the use of both AND and OR constraints. The `/order/add` endpoint requires either Basic Authentication with the customer role, API Key Authentication via header with the inventoryManager role, or API Key Authentication via query parameter with the inventoryManager role.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  /order/add:\n    post:\n      summary: post a new order\n      operationId: AddOrder\n      description: |\n        Registered customers should be able to add purchase orders.\n        Registered inventory managers should be able to add replenishment orders.\n\n      security:\n        - isRegistered: []\n          hasRole: [ customer ]  \n        - isReseller: []\n          hasRole: [ inventoryManager ]  \n        - isResellerQuery: []\n          hasRole: [ inventoryManager ]  \n...\n```\n\n----------------------------------------\n\nTITLE: Response from API Endpoint (401 Unauthorized)\nDESCRIPTION: This snippet shows the HTTP response received when an invalid authorization token is used to access the API endpoint. The response indicates a '401 Unauthorized' error along with a JSON message explaining that the request is unauthenticated due to invalid credentials.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 401 Unauthorized\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 25 Nov 2016 19:16:49 GMT\nContent-Length: 47\n\n{\"code\":401,\"message\":\"unauthenticated for invalid credentials\"}\n```\n\n----------------------------------------\n\nTITLE: Producer Interface Definition in Go\nDESCRIPTION: This Go code defines the `Producer` interface and a function type `ProducerFunc` for writing HTTP responses.  The `Producer` interface requires a `Produce` method which writes data to an `io.Writer`. `ProducerFunc` allows functions to be used as producers.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n// ProducerFunc represents a function that can be used as a producer\ntype ProducerFunc func(io.Writer, interface{}) error\n\n// Produce produces the response for the provided data\nfunc (f ProducerFunc) Produce(writer io.Writer, data interface{}) error {\n\treturn f(writer, data)\n}\n\n// Producer implementations know how to turn the provided interface into a valid\n// HTTP response\ntype Producer interface {\n\t// Produce writes to the http response\n\tProduce(io.Writer, interface{}) error\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Flatten Usage\nDESCRIPTION: Shows the command-line usage for the swagger flatten command, including options for output file, format, compact JSON, and flattening modes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/flatten.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n  swagger [OPTIONS] flatten [flatten-OPTIONS]\n\nexpand the remote references in a spec and move inline schemas to definitions, after flattening there are no complex inlined anymore\n\nApplication Options:\n  -q, --quiet                                                                                silence logs\n      --log-output=LOG-FILE                                                                  redirect logs to file\n\nHelp Options:\n  -h, --help                                                                                 Show this help message\n\n[flatten command options]\n          --compact                                                                          applies to JSON formatted specs. When present, doesn't prettify the json\n      -o, --output=                                                                          the file to write to\n          --format=[yaml|json]                                                               the format for the spec document (default: json)\n          --with-expand                                                                      expands all $ref's in spec prior to generation (shorthand to --with-flatten=expand)\n          --with-flatten=[minimal|full|expand|verbose|noverbose|remove-unused|keep-names]    flattens all $ref's in spec prior to generation (default: minimal, verbose)\n```\n\n----------------------------------------\n\nTITLE: Test the Server with HTTPie\nDESCRIPTION: These commands use httpie to send HTTP GET requests to the running greeter server on port 3000. The first command retrieves the default greeting, and the second command specifies a 'name' parameter to personalize the greeting.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/tutorials/custom-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ http get :3000/hello                  # returns 'Hello, World!'\n$ http get :3000/hello name==Swagger    # returns 'Hello, Swagger!'\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Handler\nDESCRIPTION: This code snippet implements the delete handler for the API endpoint. It defines a handler function that receives the ID of the item to delete from the request parameters and removes the item from the in-memory store (items map). It uses the generated responder (NewDestroyOneNoContent) to send a 204 No Content response.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\napi.TodosDestroyOneHandler = todos.DestroyOneHandlerFunc(func(params todos.DestroyOneParams) middleware.Responder {\n  delete(items, params.ID)\n  return todos.NewDestroyOneNoContent()\n})\n```\n\n----------------------------------------\n\nTITLE: Making Requests using the CLI Tool\nDESCRIPTION: These commands demonstrate making requests to the auto-configured server using the CLI tool. The requests include adding a todo item, finding todo items, and updating a todo item.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ go run examples/cli/cmd/todoctl/main.go --hostname localhost:12345 --x-todolist-token \"example token\" todos addOne --item.description \"hi\" --body \"{}\"\n{\"description\":\"hi\"}\n\n$ go run examples/cli/cmd/todoctl/main.go --hostname localhost:12345 --x-todolist-token \"example token\" todos findTodos\n[{\"description\":\"hi\"}]\n\n$ go run examples/cli/cmd/todoctl/main.go --hostname localhost:12345 --x-todolist-token \"example token\" todos updateOne --id 1 --item.completed true --item.description \"done\"\n{\"code\":404,\"message\":\"Item with id 1 is not found\"}\n```\n\n----------------------------------------\n\nTITLE: Define OR Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet shows how to define an OR security requirement.  The `/order/add` endpoint can be accessed if either `isRegistered AND hasRole[customer]`, `isReseller AND hasRole[inventoryManager]`, or `isResellerQuery AND hasRole[inventoryManager]` are satisfied.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  /order/add:\n    post:\n      summary: post a new order\n      operationId: AddOrder\n      description: |\n        Registered customers should be able to add purchase orders.\n        Registered inventory managers should be able to add replenishment orders.\n\n      security:\n        - isRegistered: []\n          hasRole: [ customer ]  \n        - isReseller: []\n          hasRole: [ inventoryManager ]  \n        - isResellerQuery: []\n          hasRole: [ inventoryManager ]  \n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Swagger Specification\nDESCRIPTION: This command initializes a swagger specification file (swagger.yml) with a specified title, description, version, scheme, and MIME types for consuming and producing data. This is the first step in defining the API using the go-swagger tool.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswagger init spec \\\n  --title \"A Todo list application\" \\\n  --description \"From the todo list tutorial on goswagger.io\" \\\n  --version 1.0.0 \\\n  --scheme http \\\n  --consumes application/io.goswagger.examples.todo-list.v1+json \\\n  --produces application/io.goswagger.examples.todo-list.v1+json\n```\n\n----------------------------------------\n\nTITLE: Implementing Handle Method for AddOneHandlerFunc in Go\nDESCRIPTION: The `Handle` method allows the `AddOneHandlerFunc` type to implement the `AddOneHandler` interface. It takes request parameters (`AddOneParams`) and a security principal (interface{}) as input, and executes the underlying function, returning a middleware.Responder that represents the API response.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Handle executing the request and returning a response\nfunc (fn AddOneHandlerFunc) Handle(params AddOneParams, principal interface{}) middleware.Responder {\n\treturn fn(params, principal)\n}\n```\n\n----------------------------------------\n\nTITLE: Base Object Definition (YAML)\nDESCRIPTION: This YAML snippet defines a `BaseObject` and two response objects, `Response1` and `Response2`, that inherit from it. This approach enables returning different responses with shared properties.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nBaseObject:\n  type: object\n  properties:\n    id:\n      type: string\n      format: uuid\n\nResponse1:\n  allOf:\n    - $ref: '#/definitions/BaseObject'\n    - type: object\n      properties:\n        extendedAttributeForResponse1\n\nResponse2:\n  allOf:\n    - $ref: '#/definitions/BaseObject'\n    - type: object\n       properties:\n         extendedAttribForResponse2\n```\n\n----------------------------------------\n\nTITLE: Handler Function Definition in Go\nDESCRIPTION: Defines the Handler function, which takes a Config struct and returns an http.Handler. This function mounts all business logic implementers into the correct routes. The resulting handler is a standard Go http.Handler, allowing for integration with other middleware, libraries, or frameworks.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Handler returns an http.Handler given the handler configuration\n// It mounts all the business logic implementers in the right routing.\nfunc Handler(c Config) (http.Handler, error) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Flatten Command with Verbose Options\nDESCRIPTION: The `--with-flatten` option for the `swagger flatten` command can accept `verbose` and `noverbose` to control the verbosity of warnings. These options can be used in combination with other flattening options, like `remove-unused` and `full`. The command can be used to mute or allow warnings about the transformation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nswagger flatten {spec} --with-flatten=remove-unused --with-flatten=full\n```\n\n----------------------------------------\n\nTITLE: Generate Interface for Base Type - Go\nDESCRIPTION: This Go code represents the interface generated for the base type `Pet`. It includes getter and setter methods for the `name` and `petType` properties. It also implements the `runtime.Validatable` interface. The `swagger:discriminator` comment indicates the discriminator property.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// Pet pet\n// swagger:discriminator Pet petType\ntype Pet interface {\n\truntime.Validatable\n\n\t// name\n\t// Required: true\n\tName() *string\n\tSetName(*string)\n\n\t// pet type\n\t// Required: true\n\tPetType() string\n\tSetPetType(string)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Consumers and Producers in Go\nDESCRIPTION: This Go code shows how to register custom consumers and producers for specific media types within the `configureAPI` function.  The `RegisterConsumer` and `RegisterProducer` methods of the API object are used to map a media type to a custom consumer or producer implementation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc configureAPI(api *operations.ToDoListAPI) http.Handler {\n\t// other setup code here...\n\n\tapi.RegisterConsumer(\"application/pkcs10\", myCustomConsumer)\n\tapi.RegisterProducer(\"application/pkcs10\", myCustomProducer)\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding External Type - Go Code\nDESCRIPTION: This Go snippet demonstrates the generated wrapper type `Time` with a `Validate` method. The `Time` struct embeds the `timeext.Time` and implements a `Validate` method that checks if the embedded type implements `runtime.Validatable`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\ttimeext \"time\"\n\n\t\"github.com/go-openapi/runtime\"\n\t\"github.com/go-openapi/strfmt\"\n\t\"github.com/go-openapi/swag\"\n)\n\n// Time time\n//\n// swagger:model Time\ntype Time struct {\n\ttimeext.Time\n}\n\nfunc (m Time) Validate(formats strfmt.Registry) error {\n\tvar f interface{} = m.Time\n\tif v, ok := f.(runtime.Validatable); ok {\n\t\treturn v.Validate(formats)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Checking API with Curl\nDESCRIPTION: This command uses `curl` to check if the API is running.  The `-i` flag shows the HTTP headers.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit:(master) ✗ !? » curl -i http://127.0.0.1:64637/\n```\n\n----------------------------------------\n\nTITLE: Define Subtype extending Base Type - YAML\nDESCRIPTION: This YAML defines a subtype `Dog` that extends the base type `Pet` using the `allOf` construct.  It includes additional properties specific to the `Dog` type, such as `packSize`.  The reference to `#/definitions/Pet` indicates the base type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nDog:\n  type: object\n  description: A representation of a dog\n  allOf:\n  - $ref: '#/definitions/Pet'\n  - properties:\n      packSize:\n        type: integer\n        format: int32\n        description: the size of the pack the dog is from\n        default: 0\n        minimum: 0\n    required:\n    - packSize\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with Invalid Token (curl)\nDESCRIPTION: This snippet demonstrates how to access an API endpoint using curl with an invalid bearer token. It sends an HTTP request with the 'Authorization' header set to 'Bearer RANDOM_TOKEN', where RANDOM_TOKEN represents an arbitrary invalid token.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_13\n\nLANGUAGE: shellsession\nCODE:\n```\n± ivan@avalon:~  \n » curl -i  -H 'Authorization: Bearer RAMDOM_TOKEN' http://127.0.0.1:12345/api/customers\n```\n\n----------------------------------------\n\nTITLE: API Request with OAuth2 Token using curl (shellsession)\nDESCRIPTION: This snippet demonstrates how to make an API request using curl, including the 'Authorization' header with the 'Bearer' scheme and the OAuth2 access token. It shows a successful call (though returning a 501 Not Implemented) using a valid token.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_14\n\nLANGUAGE: shellsession\nCODE:\n```\n± ivan@avalon:~  \n »  curl -i  -H 'Authorization: Bearer TOKEN' http://127.0.0.1:12345/api/customers\n```\n\n----------------------------------------\n\nTITLE: Interpose Middleware Example with Logrus (Go)\nDESCRIPTION: This snippet shows how to use `interpose` to integrate with `logrus` for logging. It uses the `NegroniLogrus` middleware from `interpose` and applies it within the `setupGlobalMiddleware` function. This enables logging via `logrus` for all requests.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/middleware.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  interpose \"github.com/carbocation/interpose/middleware\"\n)\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n  logViaLogrus := interpose.NegroniLogrus()\n  return logViaLogrus(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Server Code with Swagger\nDESCRIPTION: This command generates the server code for the todo-list application using the Swagger CLI. It uses the swagger.yml file as input and generates the server with strict responders and regenerates the configureapi. The `-A` flag specifies the application name, and `-f` specifies the Swagger specification file.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list-strict/README.md#_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\nswagger generate server -A todo-list -f ./swagger.yml --strict-responders --regenerate-configureapi\n```\n\n----------------------------------------\n\nTITLE: Creating a Todo Item via HTTP (Incorrect Content-Type)\nDESCRIPTION: This command attempts to create a new Todo item using `curl` with the incorrect Content-Type. The API expects `application/io.goswagger.examples.todo-list.v1+json`, but the request does not specify it, resulting in a 415 Unsupported Media Type error.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/dynamic.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i localhost:8000 -d '{\"description\":\"item for the list\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Error Response in YAML\nDESCRIPTION: This YAML configuration adds a default error response to the GET endpoint. The 'default' response specifies a generic error schema, referencing a separate 'error' definition (not shown in this snippet).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /:\n    get:\n      tags:\n        - todos\n      parameters:\n        - name: since\n          in: query\n          type: integer\n          format: int64\n        - name: limit\n          in: query\n          type: integer\n          format: int32\n          default: 20\n      responses:\n        200:\n          description: list the todo operations\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/item\"\n        default:\n          description: generic error response\n          schema:\n            $ref: \"#/definitions/error\"\n```\n\n----------------------------------------\n\nTITLE: Define Alternative Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet demonstrates the use of alternative security requirements, where either `isReseller` OR `isResellerQuery` is sufficient to access the `/orders/{itemID}` endpoint, allowing API key authentication via either header or query parameter.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  /orders/{itemID}:\n    get:\n      summary: retrieves all orders for an item\n      operationId: GetOrdersForItem\n      description: |\n        Only registered resellers should be able to search orders for an item\n      security:\n        - isReseller: []\n        - isResellerQuery: []\n...\n```\n\n----------------------------------------\n\nTITLE: Define Security Principal in Swagger YAML\nDESCRIPTION: This YAML snippet defines the security principal as an object with `name` (string) and `roles` (array of strings) properties. This principal is passed to the operations upon successful authentication, especially when using scoped authentication such as OAuth2.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  ...\n  principal:\n    type: object \n    properties: \n      name: \n        type: string\n      roles:\n        type: array \n        items: \n          type: string\n```\n\n----------------------------------------\n\nTITLE: Composing Middlewares in go-swagger (Go)\nDESCRIPTION: This snippet illustrates composing multiple middlewares (panic handling and logrus logging) into a stack using function composition within the `setupGlobalMiddleware` function. This allows for applying multiple layers of processing to each request.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/middleware.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n  handlePanic := recover.New(&recover.Options{\n    Log: log.Print,\n  })\n\n  logViaLogrus := interpose.NegroniLogrus()\n\n  return handlePanic(\n    logViaLogrus(\n      handler\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Define ModelX Struct with allOf\nDESCRIPTION: This code defines the `ModelX` struct which embeds the `TeslaCar` interface. The `swagger:allOf` annotation sets the `x-class` vendor extension to `com.tesla.models.ModelX`. The `Doors` field is annotated with a `json` tag.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/discriminated.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// The ModelX version of the tesla car\n//\n// swagger:model modelX\ntype ModelX struct {\n\t// swagger:allOf com.tesla.models.ModelX\n\tTeslaCar\n\t// The number of doors on this Model X\n\tDoors int32 `json:\"doors\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Go Struct with XML Tags Generated from Swagger\nDESCRIPTION: This Go code shows the resulting struct definition with the XML struct tag generated by go-swagger from the above swagger definition.  The `xml:\"xmlObject,attr,omitempty\"` tag includes the desired XML name, indicates that it's an attribute, and specifies that the field should be omitted if empty.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_50\n\nLANGUAGE: go\nCODE:\n```\ntype ObjectWithXML struct {\n    Field string `json:\"field,omitempty\" xml:\"xmlObject,attr,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Flatten Command with Full Option\nDESCRIPTION: The `swagger flatten --with-flatten=full` command performs full flattening on a Swagger specification. Complex structures (objects with properties or schemas with an `allOf` composition) are moved to standalone definitions. Arrays and map constructs are not considered complex and are thus excluded from transformation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nswagger flatten --with-flatten=full {spec}\n```\n\n----------------------------------------\n\nTITLE: Swagger Mixin Usage\nDESCRIPTION: Displays the usage information for the `swagger mixin` command.  It shows the available options for the command and their descriptions.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/mixin.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n  swagger [OPTIONS] mixin [mixin-OPTIONS]\n\nmerge additional specs into first/primary spec by copying their paths and definitions\n\nApplication Options:\n  -q, --quiet                     silence logs\n      --log-output=LOG-FILE       redirect logs to file\n\nHelp Options:\n  -h, --help                      Show this help message\n\n[mixin command options]\n      -c=                         expected # of rejected mixin paths, defs, etc due to existing key. Non-zero exit if does not match actual.\n          --compact               applies to JSON formatted specs. When present, doesn't prettify the json\n      -o, --output=               the file to write to\n          --format=[yaml|json]    the format for the spec document (default: json)\n```\n\n----------------------------------------\n\nTITLE: Rename imports for go-swagger update\nDESCRIPTION: This code snippet illustrates the import renaming required when migrating from go-swagger version 0.5.0 to 0.6.0. It specifies the necessary changes for updating import paths to reflect the new package structure.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/go-swagger/go-swagger/httpkit/validate to github.com/go-openapi/validate\ngithub.com/go-swagger/go-swagger/httpkit to github.com/go-openapi/runtime\ngithub.com/naoina/denco to github.com/go-openapi/runtime/middleware/denco\ngithub.com/go-swagger/go-swagger to github.com/go-openapi\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown from Swagger Spec\nDESCRIPTION: This command generates a Markdown document from a Swagger specification. This is useful for creating human-readable documentation of the API.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate markdown -f {spec} --output swagger.mode\n```\n\n----------------------------------------\n\nTITLE: Updating a Todo Item via HTTP\nDESCRIPTION: This command updates an existing Todo item using `curl` with the PUT method and the correct Content-Type. It sends the updated item details to the specific ID endpoint, and the API returns a 200 OK status along with the updated item.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/dynamic.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i -XPUT -H 'Content-Type: application/io.goswagger.examples.todo-list.v1+json' localhost:8000/3 -d '{\"description\":\"an updated item\"}'\n```\n\n----------------------------------------\n\nTITLE: Swagger Generate Command\nDESCRIPTION: The `swagger generate` command is used with minimal flattening by default. It's similar to `swagger generate [model|server|client|operation|...] --spec={spec} --with-flatten=minimal`, but the flattening strategy is implicitly minimal. This command makes complex JSON `$ref` amenable to analysis and code generation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/_index.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate [model|server|client|operation|...] --spec={spec}\n```\n\n----------------------------------------\n\nTITLE: Creating a New AddOne HTTP Handler in Go\nDESCRIPTION: The `NewAddOne` function creates a new HTTP handler for the `addOne` operation. It takes a middleware context and an `AddOneHandler` instance as input and returns a pointer to an `AddOne` struct, which implements the `http.Handler` interface.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// NewAddOne creates a new http.Handler for the add one operation\nfunc NewAddOne(ctx *middleware.Context, handler AddOneHandler) *AddOne {\n\treturn &AddOne{Context: ctx, Handler: handler}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Generated Type for Tuple\nDESCRIPTION: This Go code snippet shows the generated struct for the tuple.  Each element of the tuple becomes a field in the struct, named `P0`, `P1`, etc. The types of the fields correspond to the types defined in the `items` array of the YAML definition.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_15\n\nLANGUAGE: golang\nCODE:\n```\ntype Tuple struct {\n    P0 *int64\n    P1 *string\n    P2 *strfmt.UUID\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Responder Interface in Go\nDESCRIPTION: The `Responder` interface defines a contract for types that can write HTTP responses. Implementations must provide a `WriteResponse` method that accepts an `http.ResponseWriter` and a `runtime.Producer`, allowing them to serialize the response data.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// Responder is an interface for types to implement\n// when they want to be considered for writing HTTP responses\ntype Responder interface {\n\tWriteResponse(http.ResponseWriter, runtime.Producer)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Description Struct Tags with Go-Swagger\nDESCRIPTION: This example shows how to define a description value in a Swagger definition and generate a corresponding `description` struct tag in Go using go-swagger. This requires the `--struct-tags description` flag to be passed to the `swagger generate` command.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  objectWithDescription:\n   properties:\n     field:\n       type: string\n       description: \"some description\"\n```\n\n----------------------------------------\n\nTITLE: Swagger Generate Model Command\nDESCRIPTION: This command is used to generate a model from a swagger specification file.  The `-f` flag specifies the input swagger file.  The `--skip-validation` flag can be used to bypass validation errors, but it should be used with caution, as it can lead to unexpected behavior during code generation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_swagger.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nswagger generate model -f person.yaml\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Listener for Quick Testing\nDESCRIPTION: This command starts the todo-list-server with only the HTTP scheme enabled. This is useful for quick testing without the need for TLS configuration. It uses the `go run` command to execute the main.go file in the cmd/todo-list-server directory.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list-strict/README.md#_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\ngo run ./cmd/todo-list-server/main.go --scheme http\n```\n\n----------------------------------------\n\nTITLE: Swagger JSON with Invalid Type and Format\nDESCRIPTION: This JSON snippet demonstrates an invalid swagger specification where the type is set to \"string\" but the format is set to \"int64\". According to the OpenAPI 2.0 specification, the type should be \"integer\" when the format is \"int64\".\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_swagger.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"consumes\": [\n        \"application/json\"\n    ],\n    \"definitions\": {\n        \"Test\": {\n            \"properties\": {\n                \"id\": {\n                    \"format\": \"int64\",\n                    \"type\": \"string\"\n                }\n            },\n            \"type\": \"object\"\n        }\n    },\n...\n```\n\n----------------------------------------\n\nTITLE: Swagger Spec for Default Response (YAML)\nDESCRIPTION: This YAML snippet shows a swagger specification where the `/deploys/{deploy_id}` endpoint has a default response schema defined along with a 200 OK response.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n/deploys/{deploy_id}:\n  get:\n    operationId: getDeploy\n    parameters:\n      - name: deploy_id\n        type: string\n        in: path\n        required: true\n    responses:\n      '200':\n        description: OK\n        schema:\n          $ref: \"#/definitions/deploy\"\n      default:\n        description: error\n        schema:\n          $ref: \"#/definitions/error\"\n```\n\n----------------------------------------\n\nTITLE: Defining the AddOne Struct in Go\nDESCRIPTION: The `AddOne` struct represents the HTTP handler for the `addOne` operation. It contains a middleware context, request parameters (`AddOneParams`), and an `AddOneHandler` instance. The swagger route annotation provides metadata for documentation and routing.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n/*AddOne swagger:route POST / todos addOne\n\nAddOne add one API\n\n*/\ntype AddOne struct {\n\tContext *middleware.Context\n\tParams  AddOneParams\n\tHandler AddOneHandler\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Diff Output Example\nDESCRIPTION: Illustrates the output format of the swagger diff command, showcasing both non-breaking and breaking changes detected between two API specifications. It highlights added and deleted endpoints as examples of these changes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/transform/diff.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNON-BREAKING CHANGES:\n=====================\n/a/:put -  Added endpoint  \n/a/{id}:post -  Deleted a deprecated endpoint  \n/newpath/:post -  Added endpoint  \n\nBREAKING CHANGES:\n=================\n/a/:post -  Deleted endpoint  \n/b/:post -  Deleted endpoint\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint in YAML\nDESCRIPTION: This YAML configures a DELETE endpoint (/{id}) for deleting a todo item. It defines the 'id' parameter as part of the path and specifies a 204 No Content response for successful deletion.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /{id}:\n    delete:\n      tags:\n        - todos\n      operationId: destroyOne\n      parameters:\n        - type: integer\n          format: int64\n          name: id\n          in: path\n          required: true\n      responses:\n        204:\n          description: Deleted\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n```\n\n----------------------------------------\n\nTITLE: Generate go-swagger Server\nDESCRIPTION: This shell command generates a go-swagger server from the `swagger.yml` specification file.  It specifies the application name (`multi-auth-example`) and the principal model (`models.Principal`). The `restapi/configure_multi_auth_example.go` and `auth/authorizers.go` files are noted as not being generated.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate server -A multi-auth-example -P models.Principal -f ./swagger.yml\n```\n\n----------------------------------------\n\nTITLE: API PUT Request\nDESCRIPTION: A curl command to update a todo item using the PUT method, specifying the item's ID in the URL. It sends the updated data in JSON format with the correct content type. The API should return a 200 OK response with the updated item's data.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i localhost:8765/3 -X PUT -H 'Content-Type: application/io.goswagger.examples.todo-list.v1+json' -d '{\\\"description\\\":\\\"go shopping\\\"}'\n```\n\n----------------------------------------\n\nTITLE: Running the Go Server (Shell)\nDESCRIPTION: This command starts the Go server for the multi-auth example, listening on port 43016. It uses the go run command to execute the main.go file located in the cmd/multi-auth-example-server directory. The --port flag specifies the port number for the server to listen on.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./cmd/multi-auth-example-server/main.go --port 43016\n```\n\n----------------------------------------\n\nTITLE: Define an authenticated handler interface in Go-Swagger\nDESCRIPTION: This Go code defines an interface for a handler that requires authentication. It takes input parameters of type `AddOneParams`, a security principal (`interface{}`), and returns a `middleware.Responder`. The principal type can be specified during code generation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/server.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AddOneAuthenticatedHandler interface {\n\tHandle(AddOneParams, interface{}) middleware.Responder\n}\n```\n\n----------------------------------------\n\nTITLE: External Type Hint - YAML Definition\nDESCRIPTION: This YAML snippet demonstrates using the `kind: object` hint to instruct the generator to expect an object for the `Hotspot` schema, even though the specification is empty.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  Error:\n    type: object\n\n  Hotspot:\n    x-go-type:\n      type: Hotspot\n      import:\n        package: github.com/go-swagger/go-swagger/fixtures/enhancements/2224/external\n      hints:\n        kind: object\n    x-nullable: true\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Response (Incorrect Go)\nDESCRIPTION: This Go code attempts to access the default response from a go-swagger generated client by type asserting the error. However, it incorrectly uses `models.GetDeployDefault` instead of the `operations` package.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nresp, err := c.Operations.GetDeploy(&params, authInfo)\nif err != nil {\n    if casted, ok := err.(models.GetDeployDefault); ok {\n        // do something here....\n    } else {\n        false, err\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Pets Endpoint using curl\nDESCRIPTION: This snippet demonstrates how to query the '/api/pets/' endpoint using curl. The expected output is a JSON array of pet objects, each containing 'id', 'name', and 'status' fields.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/2.0/petstore/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:8344/api/pets/\n[{\"id\":1,\"name\":\"Dog\",\"status\":\"available\"},{\"id\":2,\"name\":\"Cat\",\"status\":\"pending\"}]\n```\n\n----------------------------------------\n\nTITLE: Generate Server using Swagger CLI (Shell)\nDESCRIPTION: Generates the go-swagger server code using the swagger specification file (swagger.yml).  The `-A` flag specifies the API name, the `-P` flag specifies the principal type, and the `-f` flag specifies the swagger file.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate server -A oauthSample -P models.Principal -f ./swagger.yml\n```\n\n----------------------------------------\n\nTITLE: API Request with Invalid Token using curl (shellsession)\nDESCRIPTION: This snippet demonstrates how to make an API request with an invalid OAuth2 token using curl, showing an unauthorized attempt. It includes the 'Authorization' header with the 'Bearer' scheme and a 'RAMDOM_TOKEN'.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_16\n\nLANGUAGE: shellsession\nCODE:\n```\n± ivan@avalon:~  \n » curl -i  -H 'Authorization: Bearer RAMDOM_TOKEN' http://127.0.0.1:12345/api/customers\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Claims struct in Go\nDESCRIPTION: This Go code defines a struct `roleClaims` to represent the claims within a JWT. It includes an array of roles and standard JWT claims, which will be used to authorize access based on the user's roles.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// roleClaims describes the format of our JWT token's claims\ntype roleClaims struct {\n\tRoles []string `json:\"roles\"`\n\tjwt.StandardClaims\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a generated structure in Go\nDESCRIPTION: This is an example of a generated Go structure from a Swagger schema. It shows how fields are mapped and how JSON tags are used for serialization/deserialization. The `swagger:model` annotation indicates that this struct represents a Swagger model.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Principal principal\n// swagger:model principal\ntype Principal struct {\n\n\t// name\n\tName string `json:\"name,omitempty\"`\n\n\t// roles\n\tRoles []string `json:\"roles\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Define Security Principal in swagger.yml (YAML)\nDESCRIPTION: Defines the 'principal' model in the swagger definitions as a string, which will be used to represent the authenticated user's identity. Operations will receive this principal as a parameter upon successful authentication.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  ...\n  principal:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: API POST Request - Correct Content Type\nDESCRIPTION: A curl command to create a new todo item with the correct content type (application/io.goswagger.examples.todo-list.v1+json). This request is expected to be successful, creating a new item and returning a 201 Created response with the new item's data.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i localhost:8765 -d \"{\\\"description\\\":\\\"message $RANDOM\\\"}\" -H 'Content-Type: application/io.goswagger.examples.todo-list.v1+json'\n```\n\n----------------------------------------\n\nTITLE: Merging with a Pre-Existing Spec\nDESCRIPTION: This command generates a Swagger specification, merging any definitions and metadata found in an existing Swagger YAML file (./swagger.yml) into the generated output (./swagger.json).  This allows supplementing the code-generated spec with manually defined elements.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate-spec/spec.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nswagger generate spec -i ./swagger.yml -o ./swagger.json\n```\n\n----------------------------------------\n\nTITLE: Embedding External Type - YAML Definition\nDESCRIPTION: This YAML snippet shows how to embed an external type `Time` from the `time` package. The `embedded: true` option tells go-swagger to create a wrapper type around the external type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  Time:\n    type: string\n    format: date-time         # <- documentary only (external types takes over). This has no impact on generation.\n    x-go-type:\n      type: Time\n      import:\n        package: time\n      embedded: true\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of Extensible Object\nDESCRIPTION: This YAML snippet defines an extensible object with a fixed property and additional properties of a specific type (string with date format).  This demonstrates how to define objects with dynamic properties in addition to predefined ones.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  extensibleObject:\n    properties:\n      prop1:\n        type:  integer\n    additionalProperties:\n      type: string\n      format: date\n```\n\n----------------------------------------\n\nTITLE: Define an authenticated handler interface with a specific principal type in Go-Swagger\nDESCRIPTION: This Go code shows how an authenticated handler interface looks when the security principal type is specified as `models.User` during code generation. The handler now receives a pointer to a `models.User` as the second argument.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/server.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype AddOneAuthenticatedHandler interface {\n\tHandle(AddOneParams, *models.User) middleware.Responder\n}\n```\n\n----------------------------------------\n\nTITLE: API Context Accessor Function (Golang)\nDESCRIPTION: Illustrates adding a `Context` accessor method to a generated API struct.  This allows access to the `middleware.Context`, which provides information about the request and route.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_server.md#_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\nfunc (o *LifecycleManagerAPI) Context() *middleware.Context {\n    if o.context == nil {\n        o.context = middleware.NewRoutableContext(o.spec, o, nil)\n    }\n    return o.context\n}\n```\n\n----------------------------------------\n\nTITLE: Go Generated Type for Extensible Object\nDESCRIPTION: This Go code snippet shows the generated struct for the extensible object. The `ExtensibleObjectProperties` field is a map that allows storing string keys with `strfmt.Date` values for the additional properties.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_11\n\nLANGUAGE: golang\nCODE:\n```\ntype ExtensibleObject struct {\n    Prop1 int64\n    ExtensibleObjectProperties map[string]strfmt.Date\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the AddOneDefault Struct in Go\nDESCRIPTION: The `AddOneDefault` struct represents an error (default) response for the `addOne` operation. It contains a payload of type `models.Error`, which is serialized as the response body. The swagger response annotation defines the response type.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/server.md#_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n/*AddOneDefault error\n\nswagger:response addOneDefault\n*/\ntype AddOneDefault struct {\n\n\t// In: body\n\tPayload *models.Error `json:\"body,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Go-Swagger Repository\nDESCRIPTION: This snippet demonstrates how to clone the go-swagger repository into the appropriate directory within your GOPATH.  It ensures the directory structure exists and then uses git to clone the repository from GitHub.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/contributing/getting-started.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p $GOPATH/src/github.com/go-swagger\ncd $GOPATH/src/github.com/go-swagger\ngit clone https://github.com/go-swagger/go-swagger\n```\n\n----------------------------------------\n\nTITLE: Generating a CLI Application - go-swagger\nDESCRIPTION: Generates a CLI application based on a Swagger/OpenAPI specification. Requires the go-swagger tool to be installed.  The -f flag specifies the location of the spec file, which can be a URL or a file path. --cli-app-name sets the name of the CLI application.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate/cli.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nswagger generate cli -f [http-url|filepath] --cli-app-name [app-name]\n```\n\n----------------------------------------\n\nTITLE: Generating go-swagger client code\nDESCRIPTION: This command generates the client code from the swagger.yml file, skipping the model generation. It relies on the models built in the server generation step.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ swagger generate client -f swagger.yml --skip-models\n```\n\n----------------------------------------\n\nTITLE: Override Security Requirements in Swagger YAML\nDESCRIPTION: This YAML snippet demonstrates how to override the default security requirement by providing an empty array, indicating that the `/items` endpoint is not restricted and can be accessed by everyone.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /items:\n    get:\n      summary: items on sale\n      operationId: GetItems\n      description: |\n        Everybody should be able to access this operation\n      security: []\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Matched Route in Middleware (Golang)\nDESCRIPTION: Demonstrates how to access the matched route within a middleware function using the `github.com/gorilla/context` package.  This allows middleware to access information about the route that was matched for the current request.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_server.md#_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\nimport \"github.com/gorilla/context\"\ncontext.Get(3, request)\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Petstore Server\nDESCRIPTION: This snippet shows how to build and run the petstore server. First, it changes the current directory to the 'server' directory. Then, it builds the server using 'go build'. Finally, it runs the server in the background.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/2.0/petstore/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd server\ngo build\n\n./server &\n```\n\n----------------------------------------\n\nTITLE: External Package Aliasing with Alias - Go Import\nDESCRIPTION: This Go snippet demonstrates the resulting import statement generated when using the alias `fred` for the `github.com/example/models/custom` package in the YAML definition. It shows how the alias is used in the `import` statement.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  fred \"github.com/example/models/custom\"\n)\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response\nDESCRIPTION: This is an example HTTP response returned by the server, indicating that the `FindTodos` operation has not been implemented yet.  It returns a 501 Not Implemented status code.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 501 Not Implemented\nContent-Type: application/io.goswagger.examples.todo-list.v1+json\nDate: Thu, 31 Dec 2015 22:42:10 GMT\nContent-Length: 57\n\n\"operation todos.FindTodos has not yet been implemented\"\n```\n\n----------------------------------------\n\nTITLE: Installing go-swagger using go install\nDESCRIPTION: This command installs the `swagger` command-line tool from the go-swagger repository using `go install`. This allows the user to leverage go modules for dependency management and get the latest version.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo install github.com/go-swagger/go-swagger/cmd/swagger@latest\n```\n\n----------------------------------------\n\nTITLE: Go Struct with Example Tag Generated from Swagger\nDESCRIPTION: This Go code shows the resulting struct definition with the example struct tag generated by go-swagger from the above Swagger definition.  Note the escaping of the double quotes around the example value: `example:\"\\\"sample\\\"\"`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_52\n\nLANGUAGE: go\nCODE:\n```\ntype ObjectWithExample struct {\n    Field string `json:\"field,omitempty\" example:\"\\\"sample\\\"\"`\n}\n```\n\n----------------------------------------\n\nTITLE: String Parameter in Query (YAML)\nDESCRIPTION: This YAML snippet defines a string parameter passed in the query string of a POST request. It specifies the parameter's name, location (`in: query`), and type (`string`).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\npost:\n  description: post func\n  operationId: postfunc\n  parameters:\n    - name: myparam\n      in: query\n      type: string\n```\n\n----------------------------------------\n\nTITLE: swagger:allOf Syntax\nDESCRIPTION: Shows the syntax of the `swagger:allOf` annotation. It is used as a comment directly above the embedded struct.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/allOf.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nswagger:allOf\n```\n\n----------------------------------------\n\nTITLE: Example Swagger Serve Command\nDESCRIPTION: An example showing how to use the swagger serve command with a swagger.yml file.  It navigates to the examples/cli directory and then uses the swagger serve command to start the server. Assumes swagger tool is already installed and accessible from the command line.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/serve_ui.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd examples/cli\nswagger serve swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Omit Empty Extension - YAML Definition\nDESCRIPTION: This YAML snippet demonstrates how to prevent a field from being omitted when it holds the zero value using the `x-omitempty: false` extension.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nobjectWithTag:\n  type: object\n  properties:\n    field:\n      type: string\n      x-omitempty: false\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger Spec with Go Generate\nDESCRIPTION: This example demonstrates how to add a `go:generate` comment to your main file. This command will run the swagger generate spec command to produce `swagger.json` when you run `go generate`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate-spec/spec.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n//go:generate swagger generate spec -o swagger.json\n```\n\n----------------------------------------\n\nTITLE: Swagger Spec Validation\nDESCRIPTION: This command validates the swagger specification file (swagger.yml) against the swagger specification 2.0. It ensures that the specification is syntactically correct and adheres to the swagger 2.0 standard before generating the server code.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nswagger validate ./swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Running the Server with Go\nDESCRIPTION: This shell command runs the Go server application using the `go run` command. It specifies the main package and sets the port number to 12345 using the `--port` flag.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./cmd/oauth-sample-server/main.go --port 12345\n```\n\n----------------------------------------\n\nTITLE: Zsh Completion Setup: Compinit Initialization\nDESCRIPTION: This snippet initializes the Zsh completion system using `autoload` and `compinit`.  It is required for Zsh to properly load and use the completion scripts, including the swagger completion script.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/cli_helpers.md#_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n# compsys initialization\nautoload -U compinit\ncompinit\n```\n\n----------------------------------------\n\nTITLE: Date and Time Format Definition (JSON)\nDESCRIPTION: This JSON snippet defines a property with the format `date-time`, instructing go-swagger to validate the string against the ISO-8601 date and time format.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_model.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"description\": \"The date and time that the device was registered.\",\n  \"type\":\"string\",\n  \"format\": \"date-time\"\n}\n```\n\n----------------------------------------\n\nTITLE: Notable Struct with Swagger Model Annotation\nDESCRIPTION: Defines a `Notable` struct with string fields and a `swagger:model withNotes` annotation, marking it as a Swagger model named `withNotes`.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/allOf.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Notable is a model in a transitive package.\n// it's used for embedding in another model\n//\n// swagger:model withNotes\ntype Notable struct {\n\tNotes string `json:\"notes\"`\n\n\tExtra string `json:\"extra\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Server Generation Command\nDESCRIPTION: This command generates a server application using go-swagger. It specifies the API name, the swagger definition file, and the configuration file for customizing the templates.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/templates/template_layout.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nswagger generate server -A TodoList -f ./swagger.json -C default-server.yml\n```\n\n----------------------------------------\n\nTITLE: Applying Default Security Requirement in Swagger YAML\nDESCRIPTION: This YAML snippet sets a default security requirement for all endpoints, specifying that all endpoints require Basic Authentication (isRegistered).  This can be overridden on a per-endpoint basis.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - isRegistered: []\n```\n\n----------------------------------------\n\nTITLE: Building and Running the File Upload Server in Go\nDESCRIPTION: These commands demonstrate how to build and start the file upload server. It requires Go to be installed and configured. The server listens on port 8000 by default.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/file-server/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncd restapi/cmd/file-upload-server\ngo build\n\n./file-upload-server --port 8000\n```\n\n----------------------------------------\n\nTITLE: External Package Alias Deconfliction - YAML Definition\nDESCRIPTION: This YAML snippet defines a schema with a property `p1` that uses the external type `RawMessage` from the `encoding/json` package. It showcases how go-swagger handles potential naming conflicts with standard library imports.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nMyObject:\n    type: object\n    properties:\n      p1:\n        x-go-type:\n          type: RawMessage\n          import:\n            package: encoding/json\n          hints:\n            kind: interface\n```\n\n----------------------------------------\n\nTITLE: Running Go Swagger Server\nDESCRIPTION: This command demonstrates how to run the Go-Swagger server using the go run command. It specifies the main package and sets the port using the --port flag.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/composed-auth.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./cmd/multi-auth-example-server/main.go --port 43016\n```\n\n----------------------------------------\n\nTITLE: Enable Bash Completion for Swagger CLI\nDESCRIPTION: This snippet shows how to activate Bash completion for the Go-Swagger CLI by sourcing the completion script. It requires `bash-completion` to be installed and sourced in your Bash environment.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/cli_helpers.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource ./cmd/swagger/completion/swagger.bash-completion\n```\n\n----------------------------------------\n\nTITLE: Swagger Serve Help Command\nDESCRIPTION: Command to display help information about the swagger serve command. Provides a list of available options and their descriptions. It helps users understand the configuration options for serving swagger specifications.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/serve_ui.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nswagger serve --help\n```\n\n----------------------------------------\n\nTITLE: Displaying File Tree\nDESCRIPTION: This command displays the directory tree structure of the generated server code. It helps in understanding the organization of files and directories created by the 'go-swagger generate' command.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ntree\n```\n\n----------------------------------------\n\nTITLE: Starting the Auto-Configure Server\nDESCRIPTION: This command starts the auto-configure server on port 12345, which will be used as the target for the CLI tool.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ go run examples/auto-configure/cmd/a-to-do-list-application-server/main.go --port=12345\n```\n\n----------------------------------------\n\nTITLE: Go Generated Type for Date Realiasing\nDESCRIPTION: This Go code snippet displays the generated type aliases for the herDate and hisDate based on the YAML definitions. This feature requires go1.9+.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype HerDate = MyDate\n```\n\nLANGUAGE: go\nCODE:\n```\ntype HisDate = HerDate\n```\n\n----------------------------------------\n\nTITLE: Generating a Model from Swagger Spec using go-swagger\nDESCRIPTION: This command generates a Go data model from a Swagger specification file. The generated models can then be used for serialization and validation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/_index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngenerate model -f {spec}\n```\n\n----------------------------------------\n\nTITLE: Generating a Spec from Source\nDESCRIPTION: This command generates a Swagger specification file from annotated Go source code. It parses the code and extracts API definitions based on annotations.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nswagger generate spec -o ./swagger.json\n```\n\n----------------------------------------\n\nTITLE: Flattening Swagger Spec\nDESCRIPTION: This command flattens the Swagger specification by importing all external $ref references into the main document and reorganizing inline schemas as definitions.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nswagger flatten {spec}\n```\n\n----------------------------------------\n\nTITLE: External Type Definition in Operation Parameter - YAML\nDESCRIPTION: This YAML shows how to use an external type for an operation parameter's schema using the `x-go-type` extension. This allows passing custom data structures directly without needing to generate a corresponding model.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  - in: body\n    name: corpus\n    schema:\n      type: object\n      x-go-type:\n        type: MyExternalStruct\n        import:\n          package: github.com/example/models/custom\n```\n\n----------------------------------------\n\nTITLE: Validating a Swagger Specification\nDESCRIPTION: This command validates a Swagger specification file against the Swagger 2.0 schema. It checks for syntax and semantic errors in the specification.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nswagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\n```\n\n----------------------------------------\n\nTITLE: Comparing Swagger Specs\nDESCRIPTION: This command compares two Swagger specifications to check for backwards compatibility. It identifies changes that might break existing API clients.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/_index.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nswagger diff {spec1} {spec2}\n```\n\n----------------------------------------\n\nTITLE: Pull go-swagger Docker image from quay.io\nDESCRIPTION: This command pulls the latest go-swagger Docker image from the quay.io registry. It's the first step in using go-swagger within a containerized environment.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-docker.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull quay.io/goswagger/swagger\n```\n\n----------------------------------------\n\nTITLE: Installing go-swagger using go install\nDESCRIPTION: This snippet installs go-swagger using the `go install` command. It retrieves the latest version of the swagger command from the go-swagger repository.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-source.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/go-swagger/go-swagger/cmd/swagger@latest\n```\n\n----------------------------------------\n\nTITLE: Requesting streaming output with curl\nDESCRIPTION: This command uses curl to send a GET request to the server, which returns a stream of newline-delimited JSON objects representing the countdown.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/stream-server/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v http://127.0.0.1:8000/elapse/5\n* About to connect() to 127.0.0.1 port 8000 (#0)\n*   Trying 127.0.0.1...\n* Adding handle: conn: 0x7fdd8400a600\n* Adding handle: send: 0\n* Adding handle: recv: 0\n* Curl_addHandleToPipeline: length: 1\n* - Conn 0 (0x7fdd8400a600) send_pipe: 1, recv_pipe: 0\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\n> GET /elapse/5 HTTP/1.1\n> User-Agent: curl/7.30.0\n> Host: 127.0.0.1:8000\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n< Date: Sun, 11 Sep 2016 00:54:34 GMT\n< Transfer-Encoding: chunked\n<\n{\"remains\":5}\n{\"remains\":4}\n{\"remains\":3}\n{\"remains\":2}\n{\"remains\":1}\n{\"remains\":0}\n* Connection #0 to host 127.0.0.1 left intact\n$\n```\n\n----------------------------------------\n\nTITLE: String Format Annotation Syntax\nDESCRIPTION: Defines the syntax for using the `swagger:strfmt` annotation. It specifies that the annotation requires a name.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/strfmt.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nswagger:strfmt [name]\n```\n\n----------------------------------------\n\nTITLE: Help Message Usage\nDESCRIPTION: These commands demonstrate how to obtain help messages for the CLI tool and its subcommands using the `--help` flag.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/cli/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./examples/cli/cmd/todoctl/todoctl --help\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./examples/cli/cmd/todoctl/todoctl todos updateOne --help\n```\n\n----------------------------------------\n\nTITLE: Response from API Endpoint (501 Not Implemented)\nDESCRIPTION: This snippet shows the HTTP response received when the requested API endpoint is not implemented. The response indicates a '501 Not Implemented' error along with a message specifying that the requested operation has not yet been implemented.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/examples/oauth2/README.md#_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 501 Not Implemented\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 25 Nov 2016 19:14:14 GMT\nContent-Length: 57\n\n\"operation customers.GetID has not yet been implemented\"\n```\n\n----------------------------------------\n\nTITLE: API Response (HTTP 501) to Request with OAuth2 Token\nDESCRIPTION: This HTTP snippet shows the response received from the API when a request with a valid OAuth2 token is made.  It indicates that the requested operation ('customers.GetID') has not yet been implemented, resulting in a 501 error.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 501 Not Implemented\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 25 Nov 2016 19:14:14 GMT\nContent-Length: 57\n\n\"operation customers.GetID has not yet been implemented\"\n```\n\n----------------------------------------\n\nTITLE: StoreAPI Interface Definition in Go\nDESCRIPTION: Defines the StoreAPI interface with methods for getting inventory, creating orders, and deleting/getting orders.  Each method takes a context and parameters, returning a middleware responder.  The interface is used for dependency injection and testing purposes.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:generate mockery --name StoreAPI --inpackage\n\n// StoreAPI\ntype StoreAPI interface {\n\tInventoryGet(ctx context.Context, params store.InventoryGetParams) middleware.Responder\n\tOrderCreate(ctx context.Context, params store.OrderCreateParams) middleware.Responder\n\t// OrderDelete is For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n\tOrderDelete(ctx context.Context, params store.OrderDeleteParams) middleware.Responder\n\t// OrderGet is For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n\tOrderGet(ctx context.Context, params store.OrderGetParams) middleware.Responder\n}\n```\n\n----------------------------------------\n\nTITLE: Main Function Example in Go\nDESCRIPTION: Example of a main function that initiates business logic implementers, creates a configuration for the REST API, and runs the standard HTTP server.  It demonstrates dependency injection by passing in implementations of the PetAPI and StoreAPI interfaces.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// Initiate business logic implementers.\n\t// This is the main function, so here the implementers' dependencies can be\n\t// injected, such as database, parameters from environment variables, or different\n\t// clients for different APIs.\n\tp := internal.Pet{}\n\ts := internal.Store{}\n\n\t// Initiate the http handler, with the objects that are implementing the business logic.\n\th, err := restapi.Handler(restapi.Config{\n\t\tPetAPI:   &p,\n\t\tStoreAPI: &s,\n\t\tLogger:   log.Printf,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Run the standard http server\n\tlog.Fatal(http.ListenAndServe(\":8080\", h))\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Expand Usage\nDESCRIPTION: Displays the usage instructions for the `swagger expand` command, including available options for compacting JSON output, specifying the output file, and setting the output format (YAML or JSON).\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/usage/expand.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n  swagger [OPTIONS] expand [expand-OPTIONS]\n\nexpands the $refs in a swagger document to inline schemas\n\nApplication Options:\n  -q, --quiet                     silence logs\n      --log-output=LOG-FILE       redirect logs to file\n\nHelp Options:\n  -h, --help                      Show this help message\n\n[expand command options]\n          --compact               applies to JSON formatted specs. When present, doesn't prettify the json\n      -o, --output=               the file to write to\n          --format=[yaml|json]    the format for the spec document (default: json)\n```\n\n----------------------------------------\n\nTITLE: Disabling Go Language Specific Extensions\nDESCRIPTION: This command generates a Swagger specification without Go language-specific extensions. The environment variable `SWAGGER_GENERATE_EXTENSION` is set to `false` before running the `swagger generate spec` command.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/generate-spec/spec.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nSWAGGER_GENERATE_EXTENSION=false && swagger generate spec -o ./swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Custom Struct Tags - Go Code\nDESCRIPTION: This Go snippet demonstrates the generated struct with custom tags specified via the command line option `--struct-tags yaml,db` during go-swagger model generation.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_45\n\nLANGUAGE: go\nCODE:\n```\ntype ObjectWithTag struct {\n    StandardTag string `json:\"standardTag,omitempty\" yaml:\"standardTag,omitempty\" db:\"standardTag,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Pull go-swagger Docker image from Github registry\nDESCRIPTION: This command retrieves the latest go-swagger Docker image from the Github Container Registry (ghcr.io). It provides an alternative source for the image.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/install/install-docker.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull ghcr.io/go-swagger/go-swagger\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Unmarshalling Functions - Go\nDESCRIPTION: This Go code demonstrates the functions generated for unmarshalling the polymorphic `Pet` type.  `UnmarshalPet` unmarshalls a single `Pet` object, while `UnmarshalPetSlice` unmarshalls a slice of `Pet` objects. These functions handle the logic of determining the correct subtype based on the discriminator value in the input JSON.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/models/schemas.md#_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n// UnmarshalPet unmarshals polymorphic Pet\nfunc UnmarshalPet(reader io.Reader, consumer runtime.Consumer) (Pet, error)\n\n// UnmarshalPetSlice unmarshals polymorphic slices of Pet\nfunc UnmarshalPetSlice(reader io.Reader, consumer runtime.Consumer) ([]Pet, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Authentication in Go\nDESCRIPTION: This Go code configures the API by setting up the OAuth2 authentication handler (`api.OauthSecurityAuth`). This handler is called by the runtime to authenticate requests against the 'OAuthSecurity' scheme. It validates the token using the `authenticated` function and returns the authenticated principal.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/oauth2.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\napi.OauthSecurityAuth = func(token string, scopes []string) (*models.Principal, error) {\n        // This handler is called by the runtime whenever a route needs authentication \n        // against the 'OAuthSecurity' scheme.\n        // It is passed a token extracted from the Authentication Bearer header, and \n        // the list of scopes mentioned by the spec for this route.\n\n        // NOTE: in this simple implementation, we do not check scopes against  \n        // the signed claims in the JWT token.\n        // So whatever the required scope (passed a parameter by the runtime), \n        // this will succeed provided we get a valid token.\n\n        // authenticated validates a JWT token at userInfoURL\n\t\tok, err := authenticated(token)\n\t\tif err != nil {\n\t\t\treturn nil, errors.New(401, \"error authenticate\")\n\t\t}\n\t\tif !ok {\n\t\t\treturn nil, errors.New(401, \"invalid token\")\n\t\t}\n\n        // returns the authenticated principal (here just filled in with its token)\n\t\tprin := models.Principal(token)\n\t\treturn &prin, nil\n\t}\n```\n\n----------------------------------------\n\nTITLE: Define ModelS Struct with allOf\nDESCRIPTION: This code defines the `ModelS` struct which embeds the `TeslaCar` interface. The `swagger:allOf` annotation sets the `x-class` vendor extension to `com.tesla.models.ModelS`. The `Edition` field is annotated with a `json` tag.\nSOURCE: https://github.com/go-swagger/go-swagger/blob/master/docs/reference/annotations/discriminated.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// The ModelS version of the tesla car\n//\n// swagger:model modelS\ntype ModelS struct {\n\t// swagger:allOf com.tesla.models.ModelS\n\tTeslaCar\n\t// The edition of this Model S\n\tEdition string `json:\"edition\"`\n}\n```"
  }
]