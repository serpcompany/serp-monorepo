[
  {
    "owner": "react-native-elements",
    "repo": "react-native-elements",
    "content": "TITLE: Implementing Diverse React Native ListItems with RNEUI/themed (SnackPlayer Example)\nDESCRIPTION: This comprehensive React Native example (intended for SnackPlayer) demonstrates various implementations of the `ListItem` component from `@rneui/themed`. It showcases features like swipeable items (`ListItem.Swipeable`) with actions, gradient backgrounds, accordions (`ListItem.Accordion`), integration with form elements (Input, Switch, ButtonGroup, CheckBox), badges, custom layouts, and rendering within a `FlatList`. State management using `useState` is employed for interactive elements like the switch, checkbox, button group, and accordion.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\nText,\nListItem,\nAvatar,\nIcon,\nBadge,\nListItemProps,\nButton,\nSwitch,\ncolors\n} from '@rneui/themed';\n\nconst log = () => console.log('this is an example method');\n\ntype List1Data = {\ntitle: string;\nicon: string;\n};\nconst list1: List1Data[] = [\n{\n  title: 'Appointments',\n  icon: 'av-timer',\n},\n{\n  title: 'Trips',\n  icon: 'flight-takeoff',\n},\n{\n  title: 'Passwords',\n  icon: 'fingerprint',\n},\n{\n  title: 'Pitches',\n  icon: 'lightbulb-outline',\n},\n{\n  title: 'Updates',\n  icon: 'track-changes',\n},\n];\n\ntype List2Data = {\nname: string;\navatar_url: string;\nsubtitle: string;\nlinearGradientColors: string[];\n};\n\nconst list2: Partial<List2Data>[] = [\n{\n  name: 'Amy Farha',\n  avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n  subtitle: 'Vice President',\n  linearGradientColors: ['#FF9800', '#F44336'],\n},\n{\n  name: 'Chris Jackson',\n  avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n  subtitle: 'Vice Chairman',\n  linearGradientColors: ['#3F51B5', '#2196F3'],\n},\n{\n  name: 'Amanda Martin',\n  avatar_url:\n    'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n  subtitle: 'CEO',\n  linearGradientColors: ['#FFD600', '#FF9800'],\n},\n{\n  name: 'Christy Thomas',\n  avatar_url: 'https://randomuser.me/api/portraits/women/48.jpg',\n  subtitle: 'Lead Developer',\n  linearGradientColors: ['#4CAF50', '#8BC34A'],\n},\n{\n  name: 'Melissa Jones',\n  avatar_url:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMDQ0NDk1OV5BMl5BanBnXkFtZTcwNDcxOTExNg@@._V1_UY256_CR2,0,172,256_AL_.jpg',\n  subtitle: 'CTO',\n  linearGradientColors: ['#F44336', '#E91E63'],\n},\n];\n\ntype ListComponentProps = ListItemProps;\n\nconst Lists2: React.FunctionComponent<ListComponentProps> = () => {\nconst [expanded, setExpanded] = React.useState(false);\n\nconst listItemProps = {};\nconst renderRow = ({ item }: { item: List1Data }) => {\n  return (\n    <ListItem.Swipeable\n      onPress={log}\n      bottomDivider\n      leftContent={\n        <Button\n          title=\"Info\"\n          icon={{ name: 'info', color: 'white' }}\n          buttonStyle={{ minHeight: '100%' }}\n        />\n      }\n      rightContent={\n        <Button\n          title=\"Delete\"\n          icon={{ name: 'delete', color: 'white' }}\n          buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n        />\n      }\n    >\n      <Icon name={item.icon} />\n      <ListItem.Content>\n        <ListItem.Title>{item.title}</ListItem.Title>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem.Swipeable>\n  );\n};\nconst [switch1, setSwitch1] = useState(true);\nconst [checkbox1, setCheckbox1] = useState(true);\nconst [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\n\nreturn (\n  <>\n    <FlatList\n      ListHeaderComponent={\n        <>\n          <View style={{ paddingVertical: 8 }}>\n            {list2.map((l, i) => (\n              <ListItem\n                key={i}\n                linearGradientProps={{\n                  colors: l.linearGradientColors,\n                  start: [1, 0],\n                  end: [0.2, 0],\n                }}\n                containerStyle={{\n                  marginHorizontal: 16,\n                  marginVertical: 8,\n                  borderRadius: 8,\n                }}\n              >\n                <Avatar rounded source={{ uri: l.avatar_url }} />\n                <ListItem.Content>\n                  <ListItem.Title\n                    style={{ color: 'white', fontWeight: 'bold' }}\n                  >\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle style={[{ color: 'white' }]}>\n                    {l.subtitle}\n                  </ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Chevron color=\"white\" />\n              </ListItem>\n            ))}\n          </View>\n\n          <View style={styles.list}>\n            <ListItem.Accordion\n              content={\n                <>\n                  <Icon name=\"place\" size={30} />\n                  <ListItem.Content>\n                    <ListItem.Title>List Accordion</ListItem.Title>\n                  </ListItem.Content>\n                </>\n              }\n              isExpanded={expanded}\n              onPress={() => {\n                setExpanded(!expanded);\n              }}\n            >\n              {list2.map((l: Partial<List2Data>, i: React.Key) => (\n                <ListItem key={i} onPress={log} bottomDivider>\n                  <Avatar title={l.name} source={{ uri: l.avatar_url }} />\n                  <ListItem.Content>\n                    <ListItem.Title>{l.name}</ListItem.Title>\n                    <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Chevron />\n                </ListItem>\n              ))}\n            </ListItem.Accordion>\n          </View>\n          <View style={styles.list}>\n            {list2.map((l, i) => (\n              <ListItem key={i} bottomDivider>\n                <Icon name=\"user-circle-o\" type=\"font-awesome\" color=\"red\" />\n                <ListItem.Content>\n                  <ListItem.Title style={{ color: 'red' }}>\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Content right>\n                  <ListItem.Title right style={{ color: 'green' }}>\n                    11:00 am\n                  </ListItem.Title>\n                  <ListItem.Subtitle right>12:00 am</ListItem.Subtitle>\n                </ListItem.Content>\n              </ListItem>\n            ))}\n          </View>\n          <View style={styles.list}>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Name</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.Input placeholder=\"Type your name\" />\n              <ListItem.Chevron />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Switch that please ðŸ˜²</ListItem.Title>\n              </ListItem.Content>\n              <Switch\n                value={switch1}\n                onValueChange={(value) => setSwitch1(value)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Choose ðŸ¤¯</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.ButtonGroup\n                buttons={['Flower', 'Coco']}\n                selectedIndex={selectedButtonIndex}\n                onPress={(index) => setSelectedButtonIndex(index)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.CheckBox\n                checked={checkbox1}\n                onPress={() => setCheckbox1(!checkbox1)}\n              />\n              <ListItem.Content>\n                <ListItem.Title>Check that please ðŸ˜¢</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Badge value=\"12\" />\n              <ListItem.Content>\n                <ListItem.Title>With a Badge ! ðŸ˜»</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Icon name=\"check\" size={20} />\n              <ListItem.Content>\n                <ListItem.Title>This thing is checked ðŸ˜Ž</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n          <View style={styles.list}>\n            <ListItem>\n              <Avatar source={'https://randomuser.me/api/portraits/women/57.jpg'} />\n              <ListItem.Content>\n                <ListItem.Title>\n                  Limited supply! Its like digital gold!\n                </ListItem.Title>\n                <View style={styles.subtitleView}>\n                  <Image\n                    source={\"https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg\"}\n                    style={styles.ratingImage}\n                  />\n                  <Text style={styles.ratingText}>5 months ago</Text>\n                </View>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n        </>\n      }\n      data={list1}\n      keyExtractor={(a: List1Data, index: number) => index.toString()}\n      renderItem={renderRow}\n    />\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nlist: {\n  marginTop: 20,\n  borderTopWidth: 1,\n  borderColor: colors.greyOutline,\n},\nsubtitleView: {\n  flexDirection: 'row',\n  paddingLeft: 10,\n  paddingTop: 5,\n},\nratingImage: {\n  height: 19.21,\n  width: 100,\n},\nratingText: {\n  paddingLeft: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering an Accordion using React Native Elements (JavaScript)\nDESCRIPTION: This snippet creates an interactive accordion UI with React Native Elements in a React Native context. It leverages ListItem.Accordion for expandable sections, Icon to display a leading icon, and maps through a list to generate nested ListItem components with Avatar, Title, and Subtitle. Key dependencies include '@react-native-elements/base', '@react-native-elements/icons', and the presence of 'list2', 'expanded', 'setExpanded', and 'log' in component state or props. The main props determine expansion state, content display, and event handling. Inputs are the 'list2' data array and current expansion state; outputs are rendered UI components in the app. Limitations include the assumption that the required state variables and list data exist in scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<ListItem.Accordion\n  content={\n    <>\n      <Icon name=\"place\" size={30} />\n      <ListItem.Content>\n        <ListItem.Title>List Accordion</ListItem.Title>\n      </ListItem.Content>\n    </>\n  }\n  isExpanded={expanded}\n  onPress={() => {\n    setExpanded(!expanded);\n  }}\n>\n  {list2.map((l, i) => (\n    <ListItem key={i} onPress={log} bottomDivider>\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\n      <ListItem.Content>\n        <ListItem.Title>{l.name}</ListItem.Title>\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  ))}\n</ListItem.Accordion>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme for React Native Elements\nDESCRIPTION: This snippet demonstrates how to create a custom theme using createTheme and apply it using ThemeProvider. It shows how to set custom colors for light and dark modes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/0.index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n  mode: 'light',\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Dialog Variants with react-native-elements Dialog Component (JSX)\nDESCRIPTION: This comprehensive example implements six dialog variants using React hooks and the Dialog, Button, CheckBox, Avatar, and ListItem components from @rneui/themed within a function component. It includes simple informational dialogs, dialogs with multiple actions, loading dialogs, dialogs without buttons, and dialogs with dynamic custom content such as selectable checkboxes and account lists. The code manages local state for dialog visibility and selected options, and applies consistent styling with StyleSheet. To function as intended, dependencies include @rneui/themed, react-native, and associated assets or images. Input parameters are button presses that trigger dialogs; outputs are user interactions and visual dialog updates. Limitations include a reliance on Modal implementations for correct rendering on web platforms.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport {\nButton,\nDialog,\nCheckBox,\nListItem,\nAvatar,\n} from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype DialogComponentProps = {};\n\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\nconst [visible1, setVisible1] = useState(false);\nconst [visible2, setVisible2] = useState(false);\nconst [visible3, setVisible3] = useState(false);\nconst [visible4, setVisible4] = useState(false);\nconst [visible5, setVisible5] = useState(false);\nconst [visible6, setVisible6] = useState(false);\nconst [checked, setChecked] = useState(1);\n\nconst toggleDialog1 = () => {\n  setVisible1(!visible1);\n};\nconst toggleDialog2 = () => {\n  setVisible2(!visible2);\n};\nconst toggleDialog3 = () => {\n  setVisible3(!visible3);\n};\nconst toggleDialog4 = () => {\n  setVisible4(!visible4);\n};\nconst toggleDialog5 = () => {\n  setVisible5(!visible5);\n};\nconst toggleDialog6 = () => {\n  setVisible6(!visible6);\n};\n\nconst userlist = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'amy.farha@gmail.com',\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'cjackson@gmail.com',\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'amandam@gmail.com',\n  },\n];\n\nreturn (\n  <View>\n    <View style={styles.buttonContainer}>\n      <Button\n        title=\"Open Simple Dialog\"\n        onPress={toggleDialog1}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Buttonless Dialog\"\n        onPress={toggleDialog4}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 1\"\n        onPress={toggleDialog5}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 2\"\n        onPress={toggleDialog6}\n        buttonStyle={styles.button}\n      />\n    </View>\n    <Dialog\n      isVisible={visible1}\n      onBackdropPress={toggleDialog1}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible2}\n      onBackdropPress={toggleDialog2}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n      <Dialog.Actions>\n        <Dialog.Button title=\"ACTION 1\" onPress={() => console.log('Primary Action Clicked!')}/>\n        <Dialog.Button title=\"ACTION 2\" onPress={() => console.log('Secondary Action Clicked!')}/>\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n      <Dialog.Loading />\n    </Dialog>\n    <Dialog\n      isVisible={visible4}\n      onBackdropPress={toggleDialog4}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible5}\n      onBackdropPress={toggleDialog5}\n    >\n      <Dialog.Title title=\"Select Preference\"/>\n      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\n        <CheckBox\n          key={i}\n          title={l}\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\n          checkedIcon=\"dot-circle-o\"\n          uncheckedIcon=\"circle-o\"\n          checked={checked === i + 1}\n          onPress={() => setChecked(i + 1)}\n        />\n      ))}\n\n      <Dialog.Actions>\n        <Dialog.Button\n          title=\"CONFIRM\"\n          onPress={() => {\n            console.log(`Option ${checked} was selected!`);\n            toggleDialog5();\n          }}\n        />\n        <Dialog.Button title=\"CANCEL\" onPress={toggleDialog5} />\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog\n      isVisible={visible6}\n      onBackdropPress={toggleDialog6}\n    >\n      <Dialog.Title title=\"Choose Account\"/>\n      {userlist.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={{\n            marginHorizontal: -10,\n            borderRadius: 8,\n          }}\n          onPress={toggleDialog6}\n        >\n          <Avatar rounded source={{ uri: l.avatar_url }} />\n          <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '700' }}>\n              {l.name}\n            </ListItem.Title>\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </Dialog>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  borderRadius: 6,\n  width: 220,\n  margin: 20,\n},\nbuttonContainer: {\n  margin: 20,\n  justifyContent: 'center',\n  alignItems: 'center',\n},\n});\n\nexport default Dialogs;\n\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App with Stable RNE Template (Bash)\nDESCRIPTION: Uses `npx create-expo-app` with the official React Native Elements stable template (`@rneui/template`) to bootstrap a new Expo project pre-configured with RNE.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app --template @rneui/template\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Rating Component Demo - React Native Elements - JavaScript/JSX\nDESCRIPTION: Defines a functional Ratings component showcasing multiple configurations of the Rating component in a scrollable layout. Demonstrates usage of standard, star, custom, and heart type ratings with various props, including interactive 'onFinishRating', custom colors, fractional handling, and readonly state. Dependencies: React, @rneui/themed, and react-native. Expects no inputs; outputs an interactive scrollable ratings demo. Styles adapt to platform, emphasizing best practice UI patterns.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dialog Component Usage in React Native Elements (JSX/TypeScript)\nDESCRIPTION: This example provides a comprehensive demonstration of how to implement multiple dialog patterns using the Dialog component from React Native Elements in a React Native app. It initializes dialog state via React hooks, manages open/close behavior for each dialog, and showcases variant subcomponents (actions, loading, custom content, checkbox selection, and listing with avatars). Dependencies include @rneui/themed for UI components and react-native for primitives. Dialogs are triggered by buttons with handlers, input data via checkboxes or list items, and output through user interface responses. All key props, such as isVisible and onBackdropPress, are highlighted. The snippet is suitable for both JavaScript and TypeScript projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport {\nButton,\nDialog,\nCheckBox,\nListItem,\nAvatar,\n} from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype DialogComponentProps = {};\n\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\nconst [visible1, setVisible1] = useState(false);\nconst [visible2, setVisible2] = useState(false);\nconst [visible3, setVisible3] = useState(false);\nconst [visible4, setVisible4] = useState(false);\nconst [visible5, setVisible5] = useState(false);\nconst [visible6, setVisible6] = useState(false);\nconst [checked, setChecked] = useState(1);\n\nconst toggleDialog1 = () => {\n  setVisible1(!visible1);\n};\nconst toggleDialog2 = () => {\n  setVisible2(!visible2);\n};\nconst toggleDialog3 = () => {\n  setVisible3(!visible3);\n};\nconst toggleDialog4 = () => {\n  setVisible4(!visible4);\n};\nconst toggleDialog5 = () => {\n  setVisible5(!visible5);\n};\nconst toggleDialog6 = () => {\n  setVisible6(!visible6);\n};\n\nconst userlist = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'amy.farha@gmail.com',\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'cjackson@gmail.com',\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'amandam@gmail.com',\n  },\n];\n\nreturn (\n  <View>\n    <View style={styles.buttonContainer}>\n      <Button\n        title=\"Open Simple Dialog\"\n        onPress={toggleDialog1}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Buttonless Dialog\"\n        onPress={toggleDialog4}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 1\"\n        onPress={toggleDialog5}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 2\"\n        onPress={toggleDialog6}\n        buttonStyle={styles.button}\n      />\n    </View>\n    <Dialog\n      isVisible={visible1}\n      onBackdropPress={toggleDialog1}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible2}\n      onBackdropPress={toggleDialog2}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n      <Dialog.Actions>\n        <Dialog.Button title=\"ACTION 1\" onPress={() => console.log('Primary Action Clicked!')}/>\n        <Dialog.Button title=\"ACTION 2\" onPress={() => console.log('Secondary Action Clicked!')}/>\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n      <Dialog.Loading />\n    </Dialog>\n    <Dialog\n      isVisible={visible4}\n      onBackdropPress={toggleDialog4}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible5}\n      onBackdropPress={toggleDialog5}\n    >\n      <Dialog.Title title=\"Select Preference\"/>\n      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\n        <CheckBox\n          key={i}\n          title={l}\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\n          checkedIcon=\"dot-circle-o\"\n          uncheckedIcon=\"circle-o\"\n          checked={checked === i + 1}\n          onPress={() => setChecked(i + 1)}\n        />\n      ))}\n\n      <Dialog.Actions>\n        <Dialog.Button\n          title=\"CONFIRM\"\n          onPress={() => {\n            console.log(`Option ${checked} was selected!`);\n            toggleDialog5();\n          }}\n        />\n        <Dialog.Button title=\"CANCEL\" onPress={toggleDialog5} />\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog\n      isVisible={visible6}\n      onBackdropPress={toggleDialog6}\n    >\n      <Dialog.Title title=\"Choose Account\"/>\n      {userlist.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={{\n            marginHorizontal: -10,\n            borderRadius: 8,\n          }}\n          onPress={toggleDialog6}\n        >\n          <Avatar rounded source={{ uri: l.avatar_url }} />\n          <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '700' }}>\n              {l.name}\n            </ListItem.Title>\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </Dialog>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  borderRadius: 6,\n  width: 220,\n  margin: 20,\n},\nbuttonContainer: {\n  margin: 20,\n  justifyContent: 'center',\n  alignItems: 'center',\n},\n});\n\nexport default Dialogs;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic BottomSheet with React Native Elements in JavaScript\nDESCRIPTION: This React Native functional component demonstrates the usage of the `@rneui/themed` `BottomSheet` component. It utilizes the `useState` hook to control the visibility state (`isVisible`) of the bottom sheet, which is toggled by pressing a `Button`. The `BottomSheet` itself renders a list of `ListItem` components based on the `list` array data, including a 'Cancel' item with custom styling and an `onPress` handler to hide the sheet. The entire component is wrapped in `SafeAreaProvider` as required by the underlying implementation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\nimport { StyleSheet } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype BottomSheetComponentProps = {};\n\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\nreturn (\n  <SafeAreaProvider>\n    <Button\n      title=\"Open Bottom Sheet\"\n      onPress={() => setIsVisible(true)}\n      buttonStyle={styles.button}\n    />\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\n      {list.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={l.containerStyle}\n          onPress={l.onPress}\n        >\n          <ListItem.Content>\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </BottomSheet>\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\n});\n\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package for use in a React Native project. The import is essential for leveraging the ListItem.Swipeable functionality, and requires the '@rneui/themed' dependency to be installed. Use the ListItem component to implement or extend swipeable and themable list items.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Grid of @rneui/themed SocialIcon Components in TypeScript\nDESCRIPTION: This React Native functional component, `SocialIcons`, renders a grid of social media icons using the `SocialIcon` component from `@rneui/themed`. It defines an array `dataList` containing configurations for various social media types. The component maps over this data, using `_.chunk` (implicitly, assuming `_` refers to Lodash or a similar utility available in the SnackPlayer environment) to group icons into rows of three within a `ScrollView`. It conditionally sets the `iconType` based on the data, defaulting to 'font-awesome'. Dependencies include React, React Native components (`View`, `ScrollView`), and `@rneui/themed` (`SocialIcon`, `SocialIconProps`). Note: The `SocialMediaType` type used in `IconData` is not defined within this specific snippet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Social Icon\nimport React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\n\ntype IconData = {\ntype: SocialMediaType;\niconType: string;\n};\n\nconst dataList: Partial<IconData>[] = [\n{\n  type: 'facebook',\n},\n{\n  type: 'twitter',\n},\n{\n  type: 'google-plus-official',\n},\n{\n  type: 'google',\n},\n{\n  type: 'pinterest',\n},\n{\n  type: 'linkedin',\n},\n{\n  type: 'youtube',\n},\n{\n  type: 'vimeo',\n},\n{\n  type: 'tumblr',\n},\n{\n  type: 'instagram',\n},\n{\n  type: 'quora',\n},\n{\n  type: 'flickr',\n},\n{\n  type: 'foursquare',\n},\n{\n  type: 'wordpress',\n},\n{\n  type: 'stumbleupon',\n},\n{\n  type: 'github',\n},\n{\n  type: 'github-alt',\n},\n{\n  type: 'twitch',\n},\n{\n  type: 'medium',\n},\n{\n  type: 'soundcloud',\n},\n{\n  type: 'stack-overflow',\n},\n{\n  type: 'gitlab',\n},\n{\n  type: 'angellist',\n},\n{\n  type: 'codepen',\n},\n{\n  type: 'weibo',\n},\n{\n  type: 'vk',\n},\n{\n  type: 'facebook-messenger',\n  iconType: 'material-community',\n},\n{\n  type: 'whatsapp',\n},\n];\n\ntype SocialIconsComponentProps = {};\n\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\nconst socialProps = {};\nreturn (\n  <>\n    <ScrollView>\n      {_.chunk(dataList, 3).map(\n        (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n              marginTop: 10,\n              backgroundColor: '#4c4c4c',\n            }}\n            key={chunkIndex}\n          >\n            {chunk.map((l: Partial<IconData>, i: React.Key) => (\n              <SocialIcon\n                type={l.type}\n                iconType={l.iconType ? l.iconType : 'font-awesome'}\n                key={`${chunkIndex}-${i}`}\n              />\n            ))}\n          </View>\n        )\n      )}\n    </ScrollView>\n  </>\n);\n};\n\nexport default SocialIcons;\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various @rneui/themed Button Components in React Native (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Native functional component `Buttons` that displays a collection of different Button components from the `@rneui/themed` library. It showcases various styles such as basic buttons with different colors, rounded buttons with optional icons, outline, clear, raised, light, disabled, loading buttons, and buttons with linear gradients. The component uses `useState` to manage the selected index for ButtonGroup components (although the ButtonGroup usage itself is not shown in the final rendered output of this specific snippet). It relies on `react`, `react-native`, and `@rneui/themed` dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\n\ntype ButtonsComponentProps = {};\n\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <Text style={styles.subHeader}>Basic Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title={'React Native Elements'}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Basic Button\"\n              buttonStyle={{\n                backgroundColor: 'rgba(78, 116, 289, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Dark\"\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n\n            <Button\n              title=\"Log in\"\n              loading={false}\n              loadingProps={{ size: 'small', color: 'white' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderRadius: 5,\n              }}\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n              containerStyle={{\n                marginHorizontal: 50,\n                height: 50,\n                width: 200,\n                marginVertical: 10,\n              }}\n              onPress={() => console.log('aye')}\n            />\n            <Button\n              title=\"Secondary\"\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Warning\"\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Danger\"\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n            <Button\n              title=\"Request an agent\"\n              titleStyle={{ fontWeight: '500' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"LOG IN\"\n              buttonStyle={{\n                backgroundColor: 'black',\n                borderWidth: 2,\n                borderColor: 'white',\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ fontWeight: 'bold' }}\n            />\n            <Button\n              title=\"HOME\"\n              icon={{\n                name: 'home',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconContainerStyle={{ marginRight: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(90, 154, 230, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"PROFILE\"\n              icon={{\n                name: 'user',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title={<CustomTitle />}\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\n              linearGradientProps={{\n                colors: ['#FF9800', '#F44336'],\n                start: [1, 0],\n                end: [0.2, 0],\n              }}\n              buttonStyle={{\n                borderWidth: 0,\n                borderColor: 'transparent',\n                borderRadius: 20,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              icon={{\n                name: 'arrow-right',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Light Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"SIGN UP\"\n              disabled={true}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Outline Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Raised Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              raised\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              title=\"Clear Button\"\n              type=\"clear\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n            />\n            <Button\n              title=\"Light\"\n              buttonStyle={{\n                backgroundColor: 'rgba(244, 244, 244, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\n            />\n          </View>\n          <Text style={styles.subHeader}>Loading Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"HOME\"\n              loading\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 40,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"SIGN UP\"\n              loading={true}\n              loadingProps={{\n                size: 'small',\n                color: 'rgba(111, 202, 186, 1)',\n              }}\n              titleStyle={{ fontWeight: '700' }}\n            />\n          </View>\n        </View>\n      </ScrollView>\n    </>\n  );\n};\n\nconst CustomTitle = () => {\n  return (\n    <View style={{ flexDirection: 'column' }}>\n      <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n      <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n        Minister of Magic\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  contentView: {\n    flex: 1,\n  },\n  buttonsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    marginVertical: 20,\n  },\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  }\n});\n\nexport default withTheme(Buttons, '');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button Component in React Native Elements\nDESCRIPTION: This example demonstrates how to create a custom button component by composing the existing Button component with predefined props. This approach allows for easy reuse of styled components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/0.index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider in React Native Elements\nDESCRIPTION: Example showing how to set up ThemeProvider with a custom theme to apply consistent styling across multiple Button components. Uses createTheme utility to define theme properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/1.themprovider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    raised: true,\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n      <Button title=\"My 2nd Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Rating Component Implementation in React Native Elements\nDESCRIPTION: Comprehensive example showing multiple rating implementations including star, custom, and heart ratings with various configurations like fractions, readonly mode, and different styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RNE Button Usage - React Native - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Button component from @rneui/themed within a React Native functional component using TypeScript. It sets up a range of examples including various styles (basic, dark, rounded, linear gradients), loading states, and icon integration. Required dependencies include React, React Native, and @rneui/themed. Parameters customized include buttonStyle, title, containerStyle, loading/loadingProps, and event handlers, with different Button themes illustrated for presentation in a ScrollView collection. Inputs are user interactions (taps), and outputs are visual button elements; constraints include requiring @rneui/themed, React Native, and TypeScript environment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { View, ScrollView, StyleSheet } from 'react-native';\\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\\n\\ntype ButtonsComponentProps = {};\\n\\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\\nconst [selectedIndex, setSelectedIndex] = useState(0);\\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\\n\\nreturn (\\n  <>\\n    <ScrollView>\\n      <View style={styles.contentView}>\\n        <Text style={styles.subHeader}>Basic Buttons</Text>\\n          <View style={styles.buttonsContainer}>\\n            <Button\\n              title={'React Native Elements'}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"Basic Button\"\\n              buttonStyle={{\\n                backgroundColor: 'rgba(78, 116, 289, 1)',\\n                borderRadius: 3,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"Dark\"\\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\\n            />\\n\\n            <Button\\n              title=\"Log in\"\\n              loading={false}\\n              loadingProps={{ size: 'small', color: 'white' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(111, 202, 186, 1)',\\n                borderRadius: 5,\\n              }}\\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\\n              containerStyle={{\\n                marginHorizontal: 50,\\n                height: 50,\\n                width: 200,\\n                marginVertical: 10,\\n              }}\\n              onPress={() => console.log('aye')}\\n            />\\n            <Button\\n              title=\"Secondary\"\\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\\n              containerStyle={{\\n                height: 40,\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{\\n                color: 'white',\\n                marginHorizontal: 20,\\n              }}\\n            />\\n            <Button\\n              title=\"Warning\"\\n              containerStyle={{\\n                height: 40,\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\\n              titleStyle={{\\n                color: 'white',\\n                marginHorizontal: 20,\\n              }}\\n            />\\n            <Button\\n              title=\"Danger\"\\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\\n              containerStyle={{\\n                height: 40,\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\\n            />\\n            <Button\\n              title=\"Request an agent\"\\n              titleStyle={{ fontWeight: '500' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(199, 43, 98, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                height: 45,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n          </View>\\n\\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\\n          <View style={styles.buttonsContainer}>\\n            <Button\\n              title=\"LOG IN\"\\n              buttonStyle={{\\n                backgroundColor: 'black',\\n                borderWidth: 2,\\n                borderColor: 'white',\\n                borderRadius: 30,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{ fontWeight: 'bold' }}\\n            />\\n            <Button\\n              title=\"HOME\"\\n              icon={{\\n                name: 'home',\\n                type: 'font-awesome',\\n                size: 15,\\n                color: 'white',\\n              }}\\n              iconContainerStyle={{ marginRight: 10 }}\\n              titleStyle={{ fontWeight: '700' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(90, 154, 230, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n                borderRadius: 30,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"PROFILE\"\\n              icon={{\\n                name: 'user',\\n                type: 'font-awesome',\\n                size: 15,\\n                color: 'white',\\n              }}\\n              iconRight\\n              iconContainerStyle={{ marginLeft: 10 }}\\n              titleStyle={{ fontWeight: '700' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(199, 43, 98, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n                borderRadius: 30,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title={<CustomTitle />}\\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\\n              linearGradientProps={{\\n                colors: ['#FF9800', '#F44336'],\\n                start: [1, 0],\\n                end: [0.2, 0],\\n              }}\\n              buttonStyle={{\\n                borderWidth: 0,\\n                borderColor: 'transparent',\\n                borderRadius: 20,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              icon={{\\n                name: 'arrow-right',\\n                type: 'font-awesome',\\n                size: 15,\\n                color: 'white',\\n              }}\\n              iconRight\\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\\n            />\\n          </View>\\n\\n          <Text style={styles.subHeader}>Light Buttons</Text>\\n          <View style={styles.buttonsContainer}>\\n            <Button\\n              title=\"SIGN UP\"\\n              disabled={true}\\n              titleStyle={{ fontWeight: '700' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(92, 99,216, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n                borderRadius: 5,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                height: 45,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"Outline Button\"\\n              buttonStyle={{\\n                borderColor: 'rgba(78, 116, 289, 1)',\\n              }}\\n              type=\"outline\"\\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"Raised Button\"\\n              buttonStyle={{\\n                borderColor: 'rgba(78, 116, 289, 1)',\\n              }}\\n              type=\"outline\"\\n              raised\\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              title=\"Clear Button\"\\n              type=\"clear\"\\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\\n            />\\n            <Button\\n              title=\"Light\"\\n              buttonStyle={{\\n                backgroundColor: 'rgba(244, 244, 244, 1)',\\n                borderRadius: 3,\\n              }}\\n              containerStyle={{\\n                height: 40,\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\\n            />\\n          </View>\\n          <Text style={styles.subHeader}>Loading Buttons</Text>\\n          <View style={styles.buttonsContainer}>\\n            <Button\\n              title=\"HOME\"\\n              loading\\n              titleStyle={{ fontWeight: '700' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(111, 202, 186, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n                borderRadius: 5,\\n                paddingVertical: 5,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                height: 40,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"SIGN UP\"\\n              loading={true}\\n              loadingProps={{\\n                size: 'small',\\n                color: 'rgba(111, 202, 186, 1)',\\n              }}\\n              titleStyle={{ fontWeight: '700' }}\n```\n\n----------------------------------------\n\nTITLE: Implementing RNE LinearProgress Component in React Native\nDESCRIPTION: This TypeScript code defines a React Native functional component (`LinearProgressAPI`) using hooks (`useState`, `useEffect`) to demonstrate the `LinearProgress` component from `@rneui/themed`. It showcases indeterminate progress bars (default and with a custom color) and a determinate progress bar whose value (`progress` state) increases incrementally over time when started. Buttons are included to initiate and reset the progress simulation. Dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Linear Progress\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from '@rneui/themed';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\nconst [progress, setProgress] = React.useState(0);\n\nReact.useEffect(() => {\n  let subs = true;\n  if (progress < 1 && progress !== 0) {\n    setTimeout(() => {\n      if (subs) {\n        setProgress(progress + 0.1);\n      }\n    }, 100);\n  }\n  return () => {\n    subs = false;\n  };\n}, [progress]);\n\nreturn (\n  <View>\n    <View\n      style={{\n        margin: 10,\n      }}\n    >\n      <Text>Indeterminate Variant </Text>\n      <LinearProgress style={{ marginVertical: 10 }} />\n      <Text>Indeterminate Variant with color</Text>\n      <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n      <Text>Determinate Variant</Text>\n      <LinearProgress\n        style={{ marginVertical: 10 }}\n        value={progress}\n        variant=\"determinate\"\n      />\n\n      <Button\n        disabled={progress > 0}\n        onPress={() => {\n          setProgress(0.00001);\n        }}\n        title={'Start Progress'}\n        containerStyle={{ margin: 10 }}\n      />\n      <Button\n        disabled={progress === 0}\n        onPress={() => {\n          setProgress(0);\n        }}\n        title={'Restart'}\n        containerStyle={{ margin: 10 }}\n      />\n    </View>\n  </View>\n);\n};\n\nexport default LinearProgressAPI;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Various @rneui/themed Buttons in React Native\nDESCRIPTION: This TypeScript/JSX code defines a React Native functional component (`Buttons`) that renders a comprehensive set of examples for the `@rneui/themed` Button component. It demonstrates basic styling, rounded corners, icons (left/right), linear gradient backgrounds, different button types (outline, clear, raised), loading states, and disabled states, all within a ScrollView. It utilizes `useState` for potential ButtonGroup interaction (though ButtonGroup is not explicitly used in the rendering part of this snippet) and relies on `@rneui/themed` and `react-native` components. Note: The `CustomTitle` component and `styles` object are used but not defined within this specific snippet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Button\nimport React, { useState } from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\n\ntype ButtonsComponentProps = {};\n\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <Text style={styles.subHeader}>Basic Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title={'React Native Elements'}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Basic Button\"\n              buttonStyle={{\n                backgroundColor: 'rgba(78, 116, 289, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Dark\"\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n\n            <Button\n              title=\"Log in\"\n              loading={false}\n              loadingProps={{ size: 'small', color: 'white' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderRadius: 5,\n              }}\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n              containerStyle={{\n                marginHorizontal: 50,\n                height: 50,\n                width: 200,\n                marginVertical: 10,\n              }}\n              onPress={() => console.log('aye')}\n            />\n            <Button\n              title=\"Secondary\"\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Warning\"\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Danger\"\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n            <Button\n              title=\"Request an agent\"\n              titleStyle={{ fontWeight: '500' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"LOG IN\"\n              buttonStyle={{\n                backgroundColor: 'black',\n                borderWidth: 2,\n                borderColor: 'white',\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ fontWeight: 'bold' }}\n            />\n            <Button\n              title=\"HOME\"\n              icon={{\n                name: 'home',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconContainerStyle={{ marginRight: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(90, 154, 230, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"PROFILE\"\n              icon={{\n                name: 'user',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title={<CustomTitle />}\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\n              linearGradientProps={{\n                colors: ['#FF9800', '#F44336'],\n                start: [1, 0],\n                end: [0.2, 0],\n              }}\n              buttonStyle={{\n                borderWidth: 0,\n                borderColor: 'transparent',\n                borderRadius: 20,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              icon={{\n                name: 'arrow-right',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Light Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"SIGN UP\"\n              disabled={true}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Outline Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Raised Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              raised\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              title=\"Clear Button\"\n              type=\"clear\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n            />\n            <Button\n              title=\"Light\"\n              buttonStyle={{\n                backgroundColor: 'rgba(244, 244, 244, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\n            />\n          </View>\n          <Text style={styles.subHeader}>Loading Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"HOME\"\n              loading\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 40,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"SIGN UP\"\n              loading={true}\n              loadingProps={{\n                size: 'small',\n                color: 'rgba(111, 202, 186, 1)',\n              }}\n              titleStyle={{ fontWeight: '700' }}\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Floating Action Button Usage with React Native Elements (JavaScript)\nDESCRIPTION: This React Native functional component demonstrates the use of the Floating Action Button (FAB) from @rneui/themed, displaying several buttons with different props for size, color, icon, and state management. It requires dependencies on React, React Native, and @rneui/themed (specifically the FAB component). Key parameters include the \"visible\", \"loading\", \"icon\", \"size\", \"color\", \"title\", \"disabled\", \"upperCase\", and \"placement\" props, each applied to different FAB variants. Inputs are user interactions (button presses) that control the visibility of FABs; outputs are the rendered FABs with interactive and visual feedback. The component assumes a React Native environment and @rneui/themed >=4.0 installed, and demonstrates limitations such as hardcoded props and absence of external state/context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { FAB } from '@rneui/themed';\\n\\nexport default () => {\\nconst [visible, setVisible] = React.useState(true);\\n\\nreturn (\\n  <>\\n    <View\\n      style={{\\n        alignItems: 'center',\\n        paddingVertical: 5,\\n        flexGrow: 1,\\n      }}\\n    >\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Small Size\\n      </Text>\\n      <FAB\\n        loading\\n        visible={visible}\\n        icon={{ name: 'add', color: 'white' }}\\n        size=\"small\"\\n      />\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Large Size\\n      </Text>\\n      <FAB\\n        visible={visible}\\n        icon={{ name: 'add', color: 'white' }}\\n        color=\"green\"\\n      />\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Primary Color\\n      </Text>\\n      <FAB\\n        visible={visible}\\n        title=\"Navigate\"\\n        upperCase\\n        icon={{ name: 'place', color: 'white' }}\\n      />\\n\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\\n\\n      <FAB\\n        visible={visible}\\n        disabled\\n        title=\"Extended\"\\n        icon={{\\n          name: 'place',\\n          color: 'white',\\n        }}\\n      />\\n      <FAB\\n        visible={visible}\\n        onPress={() => setVisible(!visible)}\\n        placement=\"right\"\\n        title=\"Hide\"\\n        icon={{ name: 'delete', color: 'white' }}\\n        color=\"red\"\\n      />\\n      <FAB\\n        visible={!visible}\\n        onPress={() => setVisible(!visible)}\\n        placement=\"left\"\\n        title=\"Show\"\\n        icon={{ name: 'edit', color: 'white' }}\\n        color=\"green\"\\n      />\\n    </View>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing AirbnbRating Examples in a React Native Component (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Native functional component named `Ratings`. It imports `AirbnbRating` from `@rneui/themed` and renders three instances: one with default settings, one disabled (`isDisabled={true}`), and one with custom `count`, `reviews`, `defaultRating`, and `size`. The component uses `ScrollView` for layout and includes basic styling via `StyleSheet.create`. A placeholder function `ratingCompleted` is defined but not actively used in the rendered output.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE AirbnbRating\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews={[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]}\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Button Styles with React Native Elements in TypeScript\nDESCRIPTION: This TypeScript code defines a React Native functional component `Buttons` that displays a collection of Button components from the `@rneui/themed` library. It demonstrates various configurations including basic styling, rounded corners, icons (left and right), loading indicators, different button types (outline, clear, raised), gradient backgrounds, and integration with ButtonGroup for selection state management using `useState`. Dependencies include React, React Native, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\n\ntype ButtonsComponentProps = {};\n\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <Text style={styles.subHeader}>Basic Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title={'React Native Elements'}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Basic Button\"\n              buttonStyle={{\n                backgroundColor: 'rgba(78, 116, 289, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Dark\"\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n\n            <Button\n              title=\"Log in\"\n              loading={false}\n              loadingProps={{ size: 'small', color: 'white' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderRadius: 5,\n              }}\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n              containerStyle={{\n                marginHorizontal: 50,\n                height: 50,\n                width: 200,\n                marginVertical: 10,\n              }}\n              onPress={() => console.log('aye')}\n            />\n            <Button\n              title=\"Secondary\"\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Warning\"\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Danger\"\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n            <Button\n              title=\"Request an agent\"\n              titleStyle={{ fontWeight: '500' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"LOG IN\"\n              buttonStyle={{\n                backgroundColor: 'black',\n                borderWidth: 2,\n                borderColor: 'white',\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ fontWeight: 'bold' }}\n            />\n            <Button\n              title=\"HOME\"\n              icon={{\n                name: 'home',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconContainerStyle={{ marginRight: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(90, 154, 230, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"PROFILE\"\n              icon={{\n                name: 'user',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title={<CustomTitle />}\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\n              linearGradientProps={{\n                colors: ['#FF9800', '#F44336'],\n                start: [1, 0],\n                end: [0.2, 0],\n              }}\n              buttonStyle={{\n                borderWidth: 0,\n                borderColor: 'transparent',\n                borderRadius: 20,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              icon={{\n                name: 'arrow-right',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Light Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"SIGN UP\"\n              disabled={true}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Outline Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Raised Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              raised\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              title=\"Clear Button\"\n              type=\"clear\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n            />\n            <Button\n              title=\"Light\"\n              buttonStyle={{\n                backgroundColor: 'rgba(244, 244, 244, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\n            />\n          </View>\n          <Text style={styles.subHeader}>Loading Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"HOME\"\n              loading\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 40,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"SIGN UP\"\n              loading={true}\n              loadingProps={{\n                size: 'small',\n                color: 'rgba(111, 202, 186, 1)',\n              }}\n              titleStyle={{ fontWeight: '700' }}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Various RNE CheckBox Styles in React Native\nDESCRIPTION: This TypeScript code defines a React functional component (`CheckboxComponent`) that showcases different ways to use the `CheckBox` component from `@rneui/themed`. It demonstrates basic usage, customizing icons using `checkedIcon` and `uncheckedIcon` props with predefined names ('dot-circle-o', 'circle-o') and material icons ('clear', 'add'), positioning the icon to the right (`iconRight`), changing the checked color (`checkedColor`), dynamically updating the title based on state, and using custom `Icon` components as checked/unchecked icons. The state for each checkbox is managed independently using the `useState` hook.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE CheckBox\nimport React, { useState } from 'react';\nimport { CheckBox, Icon } from '@rneui/themed';\n\ntype CheckboxComponentProps = {};\n\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\nconst [check1, setCheck1] = useState(false);\nconst [check2, setCheck2] = useState(false);\nconst [check3, setCheck3] = useState(false);\nconst [check4, setCheck4] = useState(false);\n\nreturn (\n  <>\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checked={check1}\n      onPress={() => setCheck1(!check1)}\n    />\n\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checkedIcon=\"dot-circle-o\"\n      uncheckedIcon=\"circle-o\"\n      checked={check2}\n      onPress={() => setCheck2(!check2)}\n    />\n\n    <CheckBox\n      center\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\n      iconRight\n      iconType=\"material\"\n      checkedIcon=\"clear\"\n      uncheckedIcon=\"add\"\n      checkedColor=\"red\"\n      checked={check3}\n      onPress={() => setCheck3(!check3)}\n    />\n\n    <CheckBox\n      center\n      checkedIcon={\n        <Icon\n          name=\"radio-button-checked\"\n          type=\"material\"\n          color=\"green\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      uncheckedIcon={\n        <Icon\n          name=\"radio-button-unchecked\"\n          type=\"material\"\n          color=\"grey\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      checked={check4}\n      onPress={() => setCheck4(!check4)}\n    />\n  </>\n);\n};\n\nexport default CheckboxComponent;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation with React Native Elements in JavaScript\nDESCRIPTION: This code demonstrates how to create a tabbed navigation layout in a React Native application using React Native Elements (@rneui/themed). It imports and renders Tab and TabView components, manages the selected tab state with a React hook, and provides three tabs with different icons and titles. Dependencies include @rneui/themed, React, and React Native; users should ensure these packages are installed. The main input is user interaction (tab selection), and the output is a corresponding change in displayed content with pre-set colors and views.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Tab, Text, TabView } from '@rneui/themed';\\n\\nexport default () => {\\nconst [index, setIndex] = React.useState(0);\\n\\nreturn (\\n  <>\\n    <Tab\\n      value={index}\\n      onChange={(e) => setIndex(e)}\\n      indicatorStyle={{\\n        backgroundColor: 'white',\\n        height: 3,\\n      }}\\n      variant=\"primary\"\\n    >\\n      <Tab.Item\\n        title=\"Recent\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"favorite\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"cart\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\\n      />\\n    </Tab>\\n\\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\\n        <Text h1>Recent</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\\n        <Text h1>Favorite</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\\n        <Text h1>Cart</Text>\\n      </TabView.Item>\\n    </TabView>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Providing Theme with Custom Colors in React Native\nDESCRIPTION: Demonstrates creating a theme using `createTheme` from `@rneui/themed` in an `App.tsx` file. It defines values for the custom colors (`tertiary`, `accent`, `surface`) declared previously, provides them for both light and dark modes, and configures a `Button` component to use a custom theme color. The application's root component is wrapped with `ThemeProvider` to make the defined theme accessible to child components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nconst theme = createTheme({\n  lightColors: {\n    tertiary: '#124789',\n    accent: '#f98652',\n    surface: '#0990763',\n  },\n  darkColors: {\n    tertiary: '#124789',\n    accent: '#908652',\n    surface: '#0990763',\n  },\n  components:{\n    Button:(props,theme)=>({ // Note: Corrected typo from original text (components not component)\n      containerStyle:{\n        backgroundColor:theme.colors.tertiary\n      }\n    })\n  },\n  mode: 'light', // or 'dark'\n});\n\n// Wrap with ThemeProvider\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Component />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Grid of Social Icons with React Native Elements - TypeScript\nDESCRIPTION: This snippet defines a functional React component in TypeScript that displays a grid of various social media icons using the SocialIcon component from @rneui/themed. Icons are grouped into rows of three using lodash's chunk method (requires lodash as a dependency), and presented within a vertically scrollable container. Key properties like the social media type and optional icon type are supplied from a TypeScript-typed array, and each row is styled for separation. Inputs are fixed within the dataList; output is a rendered UI component. Requires React Native, react-native-elements (@rneui/themed), and lodash.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\\nimport { View, ScrollView } from 'react-native';\\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\\n\\ntype IconData = {\\ntype: SocialMediaType;\\niconType: string;\\n};\\n\\nconst dataList: Partial<IconData>[] = [\\n{\\n  type: 'facebook',\\n},\\n{\\n  type: 'twitter',\\n},\\n{\\n  type: 'google-plus-official',\\n},\\n{\\n  type: 'google',\\n},\\n{\\n  type: 'pinterest',\\n},\\n{\\n  type: 'linkedin',\\n},\\n{\\n  type: 'youtube',\\n},\\n{\\n  type: 'vimeo',\\n},\\n{\\n  type: 'tumblr',\\n},\\n{\\n  type: 'instagram',\\n},\\n{\\n  type: 'quora',\\n},\\n{\\n  type: 'flickr',\\n},\\n{\\n  type: 'foursquare',\\n},\\n{\\n  type: 'wordpress',\\n},\\n{\\n  type: 'stumbleupon',\\n},\\n{\\n  type: 'github',\\n},\\n{\\n  type: 'github-alt',\\n},\\n{\\n  type: 'twitch',\\n},\\n{\\n  type: 'medium',\\n},\\n{\\n  type: 'soundcloud',\\n},\\n{\\n  type: 'stack-overflow',\\n},\\n{\\n  type: 'gitlab',\\n},\\n{\\n  type: 'angellist',\\n},\\n{\\n  type: 'codepen',\\n},\\n{\\n  type: 'weibo',\\n},\\n{\\n  type: 'vk',\\n},\\n{\\n  type: 'facebook-messenger',\\n  iconType: 'material-community',\\n},\\n{\\n  type: 'whatsapp',\\n},\\n];\\n\\ntype SocialIconsComponentProps = {};\\n\\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\\nconst socialProps = {};\\nreturn (\\n  <>\\n    <ScrollView>\\n      {_.chunk(dataList, 3).map(\\n        (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\\n          <View\\n            style={{\\n              flexDirection: 'row',\\n              justifyContent: 'space-around',\\n              marginTop: 10,\\n              backgroundColor: '#4c4c4c',\\n            }}\\n            key={chunkIndex}\\n          >\\n            {chunk.map((l: Partial<IconData>, i: React.Key) => (\\n              <SocialIcon\\n                type={l.type}\\n                iconType={l.iconType ? l.iconType : 'font-awesome'}\\n                key={`${chunkIndex}-${i}`}\\n              />\\n            ))}\\n          </View>\\n        )\\n      )}\\n    </ScrollView>\\n  </>\\n);\\n};\\n\\nexport default SocialIcons;\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme to User Components with ThemeProvider - TypeScript\nDESCRIPTION: This snippet outlines the process of providing a custom theme to user components, such as MyCustomComponent, via the ThemeProvider context in RNE. It involves defining a theme with custom component configurations and wrapping the app/component tree in ThemeProvider. Dependencies: ThemeProvider, createTheme from '@rneui/themed'. Expected input: custom theme and components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  components: {\n    MyCustomComponent: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <MyCustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Dialog Types in React Native Elements\nDESCRIPTION: This comprehensive example showcases different types of Dialog components including simple, multi-action, loading, buttonless, and custom dialogs. It demonstrates state management, event handling, and styling for Dialog components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport {\nButton,\nDialog,\nCheckBox,\nListItem,\nAvatar,\n} from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype DialogComponentProps = {};\n\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\nconst [visible1, setVisible1] = useState(false);\nconst [visible2, setVisible2] = useState(false);\nconst [visible3, setVisible3] = useState(false);\nconst [visible4, setVisible4] = useState(false);\nconst [visible5, setVisible5] = useState(false);\nconst [visible6, setVisible6] = useState(false);\nconst [checked, setChecked] = useState(1);\n\nconst toggleDialog1 = () => {\n  setVisible1(!visible1);\n};\nconst toggleDialog2 = () => {\n  setVisible2(!visible2);\n};\nconst toggleDialog3 = () => {\n  setVisible3(!visible3);\n};\nconst toggleDialog4 = () => {\n  setVisible4(!visible4);\n};\nconst toggleDialog5 = () => {\n  setVisible5(!visible5);\n};\nconst toggleDialog6 = () => {\n  setVisible6(!visible6);\n};\n\nconst userlist = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'amy.farha@gmail.com',\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'cjackson@gmail.com',\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'amandam@gmail.com',\n  },\n];\n\nreturn (\n  <View>\n    <View style={styles.buttonContainer}>\n      <Button\n        title=\"Open Simple Dialog\"\n        onPress={toggleDialog1}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Buttonless Dialog\"\n        onPress={toggleDialog4}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 1\"\n        onPress={toggleDialog5}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 2\"\n        onPress={toggleDialog6}\n        buttonStyle={styles.button}\n      />\n    </View>\n    <Dialog\n      isVisible={visible1}\n      onBackdropPress={toggleDialog1}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible2}\n      onBackdropPress={toggleDialog2}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n      <Dialog.Actions>\n        <Dialog.Button title=\"ACTION 1\" onPress={() => console.log('Primary Action Clicked!')}/>\n        <Dialog.Button title=\"ACTION 2\" onPress={() => console.log('Secondary Action Clicked!')}/>\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n      <Dialog.Loading />\n    </Dialog>\n    <Dialog\n      isVisible={visible4}\n      onBackdropPress={toggleDialog4}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible5}\n      onBackdropPress={toggleDialog5}\n    >\n      <Dialog.Title title=\"Select Preference\"/>\n      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\n        <CheckBox\n          key={i}\n          title={l}\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\n          checkedIcon=\"dot-circle-o\"\n          uncheckedIcon=\"circle-o\"\n          checked={checked === i + 1}\n          onPress={() => setChecked(i + 1)}\n        />\n      ))}\n\n      <Dialog.Actions>\n        <Dialog.Button\n          title=\"CONFIRM\"\n          onPress={() => {\n            console.log(`Option ${checked} was selected!`);\n            toggleDialog5();\n          }}\n        />\n        <Dialog.Button title=\"CANCEL\" onPress={toggleDialog5} />\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog\n      isVisible={visible6}\n      onBackdropPress={toggleDialog6}\n    >\n      <Dialog.Title title=\"Choose Account\"/>\n      {userlist.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={{\n            marginHorizontal: -10,\n            borderRadius: 8,\n          }}\n          onPress={toggleDialog6}\n        >\n          <Avatar rounded source={{ uri: l.avatar_url }} />\n          <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '700' }}>\n              {l.name}\n            </ListItem.Title>\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </Dialog>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  borderRadius: 6,\n  width: 220,\n  margin: 20,\n},\nbuttonContainer: {\n  margin: 20,\n  justifyContent: 'center',\n  alignItems: 'center',\n},\n});\n\nexport default Dialogs;\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckBox Components with React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a functional component using React hooks to manage the state of multiple CheckBox components from React Native Elements. It showcases various configurations including custom icons, positioning, and color customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { CheckBox, Icon } from '@rneui/themed';\n\ntype CheckboxComponentProps = {};\n\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\nconst [check1, setCheck1] = useState(false);\nconst [check2, setCheck2] = useState(false);\nconst [check3, setCheck3] = useState(false);\nconst [check4, setCheck4] = useState(false);\n\nreturn (\n  <>\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checked={check1}\n      onPress={() => setCheck1(!check1)}\n    />\n\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checkedIcon=\"dot-circle-o\"\n      uncheckedIcon=\"circle-o\"\n      checked={check2}\n      onPress={() => setCheck2(!check2)}\n    />\n\n    <CheckBox\n      center\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\n      iconRight\n      iconType=\"material\"\n      checkedIcon=\"clear\"\n      uncheckedIcon=\"add\"\n      checkedColor=\"red\"\n      checked={check3}\n      onPress={() => setCheck3(!check3)}\n    />\n\n    <CheckBox\n      center\n      checkedIcon={\n        <Icon\n          name=\"radio-button-checked\"\n          type=\"material\"\n          color=\"green\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      uncheckedIcon={\n        <Icon\n          name=\"radio-button-unchecked\"\n          type=\"material\"\n          color=\"grey\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      checked={check4}\n      onPress={() => setCheck4(!check4)}\n    />\n  </>\n);\n};\n\nexport default CheckboxComponent;\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Components with Avatars and Content Using React Native Elements in TypeScript\nDESCRIPTION: This snippet defines a functional React component that displays multiple Card samples using the @rneui/themed library in a React Native environment with TypeScript. It demonstrates how to render a scrollable list of cards containing user avatar images, headings of varying font sizes, an image, descriptive text, and an interactive button. Key dependencies include React, React Native components (View, ScrollView, StyleSheet, Image), and elements from @rneui/themed. Input is the users array with name and avatar fields, and style objects for layout; outputs are UI cards. There are no major constraints, but it assumes @rneui/themed is installed and that images and network access are available at runtime.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n{\n  name: 'brynn',\n  avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n},\n{\n  name: 'thot leader',\n  avatar:\n    'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n},\n{\n  name: 'jsa',\n  avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n},\n{\n  name: 'talhaconcepts',\n  avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n},\n{\n  name: 'andy vitale',\n  avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n},\n{\n  name: 'katy friedson',\n  avatar:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n},\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.container}>\n        <Card>\n          <Card.Title>CARD WITH DIVIDER</Card.Title>\n          <Card.Divider />\n          {users.map((u, i) => {\n            return (\n              <View key={i} style={styles.user}>\n                <Image\n                  style={styles.image}\n                  resizeMode=\"cover\"\n                  source={{ uri: u.avatar }}\n                />\n                <Text style={styles.name}>{u.name}</Text>\n              </View>\n            );\n          })}\n        </Card>\n        <Card containerStyle={{ marginTop: 15 }}>\n          <Card.Title>FONTS</Card.Title>\n          <Card.Divider />\n          <Text style={styles.fonts} h1>\n            h1 Heading\n          </Text>\n          <Text style={styles.fonts} h2>\n            h2 Heading\n          </Text>\n          <Text style={styles.fonts} h3>\n            h3 Heading\n          </Text>\n          <Text style={styles.fonts} h4>\n            h4 Heading\n          </Text>\n          <Text style={styles.fonts}>Normal Text</Text>\n        </Card>\n        <Card>\n          <Card.Title>HELLO WORLD</Card.Title>\n          <Card.Divider />\n          <Card.Image\n            style={{ padding: 0 }}\n            source={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n          />\n          <Text style={{ marginBottom: 10 }}>\n            The idea with React Native Elements is more about component\n            structure than actual design.\n          </Text>\n          <Button\n            icon={\n              <Icon\n                name=\"code\"\n                color=\"#ffffff\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              borderRadius: 0,\n              marginLeft: 0,\n              marginRight: 0,\n              marginBottom: 0,\n            }}\n            title=\"VIEW NOW\"\n          />\n        </Card>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nfonts: {\n  marginBottom: 8,\n},\nuser: {\n  flexDirection: 'row',\n  marginBottom: 6,\n},\nimage: {\n  width: 30,\n  height: 30,\n  marginRight: 10,\n},\nname: {\n  fontSize: 16,\n  marginTop: 5,\n},\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Native Elements Avatar Components with TypeScript\nDESCRIPTION: This code demonstrates the usage of Avatar components from React Native Elements with various styles including image avatars, icon avatars, letter avatars, and badged avatars. It includes data handling with TypeScript interfaces and array chunking for layout organization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Embedding CheckBoxes in ListItems with React Native Elements (TypeScript/React Native)\nDESCRIPTION: This snippet shows how to add checkboxes to ListItems and manage their state with React hooks. It demonstrates using ListItem.CheckBox inside ListItem, customizing icons, and handling toggle events for multiple list rows. Dependencies: '@rneui/themed', React. Inputs: checked state array, icon types/names, onPress handlers. Outputs: interactive list items with selectable checkboxes, useful for multi-select lists. State management is internal to the functional component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [checked, setChecked] = React.useState([false, false]);\n     return (\n       <>\n         <ListItem bottomDivider>\n           <ListItem.CheckBox\n             // Use ThemeProvider to change the defaults of the checkbox\n             iconType=\"material-community\"\n             checkedIcon=\"checkbox-marked\"\n             uncheckedIcon=\"checkbox-blank-outline\"\n             checked={checked[0]}\n             onPress={() => setChecked([!checked[0], checked[1]])}\n           />\n           <ListItem.Content>\n             <ListItem.Title>User 1</ListItem.Title>\n             <ListItem.Subtitle>CA, US</ListItem.Subtitle>\n           </ListItem.Content>\n           <ListItem.Chevron />\n         </ListItem>\n         <ListItem bottomDivider>\n           <ListItem.CheckBox\n             // Use ThemeProvider to change the defaults of the checkbox\n             iconType=\"material-community\"\n             checkedIcon=\"checkbox-marked\"\n             uncheckedIcon=\"checkbox-blank-outline\"\n             checked={checked[1]}\n             onPress={() => setChecked([checked[0], !checked[1]])}\n           />\n           <ListItem.Content>\n             <ListItem.Title>User 2</ListItem.Title>\n             <ListItem.Subtitle>HR, India</ListItem.Subtitle>\n           </ListItem.Content>\n           <ListItem.Chevron />\n         </ListItem>\n       </>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Dialog Types with RNEUI in React Native (JSX)\nDESCRIPTION: This React Native functional component demonstrates various implementations of the `Dialog` component from `@rneui/themed`. It uses `useState` hooks to manage the visibility of six different dialog instances triggered by buttons. The examples showcase simple dialogs with titles and text, dialogs with actions (`Dialog.Actions`, `Dialog.Button`), loading dialogs (`Dialog.Loading`), buttonless dialogs, and custom dialogs containing interactive elements like `CheckBox` and `ListItem` with `Avatar`. Dependencies include `react`, `react-native`, and `@rneui/themed` components (`Button`, `Dialog`, `CheckBox`, `ListItem`, `Avatar`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport {\nButton,\nDialog,\nCheckBox,\nListItem,\nAvatar,\n} from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype DialogComponentProps = {};\n\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\nconst [visible1, setVisible1] = useState(false);\nconst [visible2, setVisible2] = useState(false);\nconst [visible3, setVisible3] = useState(false);\nconst [visible4, setVisible4] = useState(false);\nconst [visible5, setVisible5] = useState(false);\nconst [visible6, setVisible6] = useState(false);\nconst [checked, setChecked] = useState(1);\n\nconst toggleDialog1 = () => {\n  setVisible1(!visible1);\n};\nconst toggleDialog2 = () => {\n  setVisible2(!visible2);\n};\nconst toggleDialog3 = () => {\n  setVisible3(!visible3);\n};\nconst toggleDialog4 = () => {\n  setVisible4(!visible4);\n};\nconst toggleDialog5 = () => {\n  setVisible5(!visible5);\n};\nconst toggleDialog6 = () => {\n  setVisible6(!visible6);\n};\n\nconst userlist = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'amy.farha@gmail.com',\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'cjackson@gmail.com',\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'amandam@gmail.com',\n  },\n];\n\nreturn (\n  <View>\n    <View style={styles.buttonContainer}>\n      <Button\n        title=\"Open Simple Dialog\"\n        onPress={toggleDialog1}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Buttonless Dialog\"\n        onPress={toggleDialog4}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 1\"\n        onPress={toggleDialog5}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 2\"\n        onPress={toggleDialog6}\n        buttonStyle={styles.button}\n      />\n    </View>\n    <Dialog\n      isVisible={visible1}\n      onBackdropPress={toggleDialog1}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible2}\n      onBackdropPress={toggleDialog2}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n      <Dialog.Actions>\n        <Dialog.Button title=\"ACTION 1\" onPress={() => console.log('Primary Action Clicked!')}/>\n        <Dialog.Button title=\"ACTION 2\" onPress={() => console.log('Secondary Action Clicked!')}/>\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n      <Dialog.Loading />\n    </Dialog>\n    <Dialog\n      isVisible={visible4}\n      onBackdropPress={toggleDialog4}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible5}\n      onBackdropPress={toggleDialog5}\n    >\n      <Dialog.Title title=\"Select Preference\"/>\n      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\n        <CheckBox\n          key={i}\n          title={l}\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\n          checkedIcon=\"dot-circle-o\"\n          uncheckedIcon=\"circle-o\"\n          checked={checked === i + 1}\n          onPress={() => setChecked(i + 1)}\n        />\n      ))}\n\n      <Dialog.Actions>\n        <Dialog.Button\n          title=\"CONFIRM\"\n          onPress={() => {\n            console.log(`Option ${checked} was selected!`);\n            toggleDialog5();\n          }}\n        />\n        <Dialog.Button title=\"CANCEL\" onPress={toggleDialog5} />\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog\n      isVisible={visible6}\n      onBackdropPress={toggleDialog6}\n    >\n      <Dialog.Title title=\"Choose Account\"/>\n      {userlist.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={{\n            marginHorizontal: -10,\n            borderRadius: 8,\n          }}\n          onPress={toggleDialog6}\n        >\n          <Avatar rounded source={{ uri: l.avatar_url }} />\n          <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '700' }}>\n              {l.name}\n            </ListItem.Title>\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </Dialog>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  borderRadius: 6,\n  width: 220,\n  margin: 20,\n},\nbuttonContainer: {\n  margin: 20,\n  justifyContent: 'center',\n  alignItems: 'center',\n},\n});\n\nexport default Dialogs;\n```\n\n----------------------------------------\n\nTITLE: Implementing Various CheckBox Styles with @rneui/themed in React Native (TypeScript)\nDESCRIPTION: This TypeScript code defines a React functional component `CheckboxComponent` that renders four instances of the `@rneui/themed` `CheckBox`. It utilizes the `useState` hook to manage the checked state for each checkbox independently. The examples illustrate various props like `title`, `checkedIcon` (using FontAwesome and Material icons), `uncheckedIcon`, `iconRight`, `checkedColor`, and the use of custom `Icon` components for check states. Dependencies include `react` and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { CheckBox, Icon } from '@rneui/themed';\n\ntype CheckboxComponentProps = {};\n\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\nconst [check1, setCheck1] = useState(false);\nconst [check2, setCheck2] = useState(false);\nconst [check3, setCheck3] = useState(false);\nconst [check4, setCheck4] = useState(false);\n\nreturn (\n  <>\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checked={check1}\n      onPress={() => setCheck1(!check1)}\n    />\n\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checkedIcon=\"dot-circle-o\"\n      uncheckedIcon=\"circle-o\"\n      checked={check2}\n      onPress={() => setCheck2(!check2)}\n    />\n\n    <CheckBox\n      center\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\n      iconRight\n      iconType=\"material\"\n      checkedIcon=\"clear\"\n      uncheckedIcon=\"add\"\n      checkedColor=\"red\"\n      checked={check3}\n      onPress={() => setCheck3(!check3)}\n    />\n\n    <CheckBox\n      center\n      checkedIcon={\n        <Icon\n          name=\"radio-button-checked\"\n          type=\"material\"\n          color=\"green\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      uncheckedIcon={\n        <Icon\n          name=\"radio-button-unchecked\"\n          type=\"material\"\n          color=\"grey\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      checked={check4}\n      onPress={() => setCheck4(!check4)}\n    />\n  </>\n);\n};\n\nexport default CheckboxComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Native Elements Card Component\nDESCRIPTION: This code snippet demonstrates how to create a React Native component using the Card component from React Native Elements. It showcases different card layouts including user lists, font styles, and image cards with buttons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n  {\n    name: 'brynn',\n    avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n  },\n  {\n    name: 'thot leader',\n    avatar:\n      'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n  },\n  {\n    name: 'jsa',\n    avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n  },\n  {\n    name: 'talhaconcepts',\n    avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n  },\n  {\n    name: 'andy vitale',\n    avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n  },\n  {\n    name: 'katy friedson',\n    avatar:\n      'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n  },\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\n  return (\n    <>\n      <ScrollView>\n        <View style={styles.container}>\n          <Card>\n            <Card.Title>CARD WITH DIVIDER</Card.Title>\n            <Card.Divider />\n            {users.map((u, i) => {\n              return (\n                <View key={i} style={styles.user}>\n                  <Image\n                    style={styles.image}\n                    resizeMode=\"cover\"\n                    source={{ uri: u.avatar }}\n                  />\n                  <Text style={styles.name}>{u.name}</Text>\n                </View>\n              );\n            })}\n          </Card>\n          <Card containerStyle={{ marginTop: 15 }}>\n            <Card.Title>FONTS</Card.Title>\n            <Card.Divider />\n            <Text style={styles.fonts} h1>\n              h1 Heading\n            </Text>\n            <Text style={styles.fonts} h2>\n              h2 Heading\n            </Text>\n            <Text style={styles.fonts} h3>\n              h3 Heading\n            </Text>\n            <Text style={styles.fonts} h4>\n              h4 Heading\n            </Text>\n            <Text style={styles.fonts}>Normal Text</Text>\n          </Card>\n          <Card>\n            <Card.Title>HELLO WORLD</Card.Title>\n            <Card.Divider />\n            <Card.Image\n              style={{ padding: 0 }}\n              source={{\n                uri:\n                  'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n              }}\n            />\n            <Text style={{ marginBottom: 10 }}>\n              The idea with React Native Elements is more about component\n              structure than actual design.\n            </Text>\n            <Button\n              icon={\n                <Icon\n                  name=\"code\"\n                  color=\"#ffffff\"\n                  iconStyle={{ marginRight: 10 }}\n                />\n              }\n              buttonStyle={{\n                borderRadius: 0,\n                marginLeft: 0,\n                marginRight: 0,\n                marginBottom: 0,\n              }}\n              title=\"VIEW NOW\"\n            />\n          </Card>\n        </View>\n      </ScrollView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  fonts: {\n    marginBottom: 8,\n  },\n  user: {\n    flexDirection: 'row',\n    marginBottom: 6,\n  },\n  image: {\n    width: 30,\n    height: 30,\n    marginRight: 10,\n  },\n  name: {\n    fontSize: 16,\n    marginTop: 5,\n  },\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Overlay with Visibility Toggle in React Native\nDESCRIPTION: This React Native functional component provides a complete example of using the `Overlay` component from `@rneui/themed`. It utilizes the `useState` hook to manage the overlay's visibility state (`visible`). A button triggers the `toggleOverlay` function to show/hide the overlay, and the `onBackdropPress` prop allows closing the overlay by clicking outside it. Basic styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\nconst [visible, setVisible] = useState(false);\n\nconst toggleOverlay = () => {\n  setVisible(!visible);\n};\n\nreturn (\n  <View>\n    <Button\n      title=\"Open Overlay\"\n      onPress={toggleOverlay}\n      buttonStyle={styles.button}\n    />\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n      <Text style={styles.textPrimary}>Hello!</Text>\n      <Text style={styles.textSecondary}>\n        Welcome to React Native Elements\n      </Text>\n      <Button\n        icon={\n          <Icon\n            name=\"wrench\"\n            type=\"font-awesome\"\n            color=\"white\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        title=\"Start Building\"\n        onPress={toggleOverlay}\n      />\n    </Overlay>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\ntextPrimary: {\n  marginVertical: 20,\n  textAlign: 'center',\n  fontSize: 20,\n},\ntextSecondary: {\n  marginBottom: 10,\n  textAlign: 'center',\n  fontSize: 17,\n},\n});\n\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Linear Progress Bar with React Native Elements - TypeScript\nDESCRIPTION: This snippet implements a React functional component, LinearProgressAPI, showcasing usage of the LinearProgress component from the @rneui/themed library in a React Native context. It provides both indeterminate (with and without color) and determinate progress bars, leveraging React state and useEffect to animate the determinate variant. The component also includes Start Progress and Restart buttons, with logic to control progress advancement. Required dependencies are React, react-native, and @rneui/themed. Inputs include button presses, and outputs are visually updated progress bars; progress is simulated in increments until completion. All code is written in TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from '@rneui/themed';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\nconst [progress, setProgress] = React.useState(0);\n\nReact.useEffect(() => {\n  let subs = true;\n  if (progress < 1 && progress !== 0) {\n    setTimeout(() => {\n      if (subs) {\n        setProgress(progress + 0.1);\n      }\n    }, 100);\n  }\n  return () => {\n    subs = false;\n  };\n}, [progress]);\n\nreturn (\n  <View>\n    <View\n      style={{\n        margin: 10,\n      }}\n    >\n      <Text>Indeterminate Variant </Text>\n      <LinearProgress style={{ marginVertical: 10 }} />\n      <Text>Indeterminate Variant with color</Text>\n      <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n      <Text>Determinate Variant</Text>\n      <LinearProgress\n        style={{ marginVertical: 10 }}\n        value={progress}\n        variant=\"determinate\"\n      />\n\n      <Button\n        disabled={progress > 0}\n        onPress={() => {\n          setProgress(0.00001);\n        }}\n        title={'Start Progress'}\n        containerStyle={{ margin: 10 }}\n      />\n      <Button\n        disabled={progress === 0}\n        onPress={() => {\n          setProgress(0);\n        }}\n        title={'Restart'}\n        containerStyle={{ margin: 10 }}\n      />\n    </View>\n  </View>\n);\n};\n\nexport default LinearProgressAPI;\n```\n\n----------------------------------------\n\nTITLE: Implementing Various RNE CheckBox Styles in React Native (TypeScript)\nDESCRIPTION: This React functional component demonstrates four different implementations of the `@rneui/themed` CheckBox component. It utilizes the `useState` hook to manage the checked state for each box. Examples include a basic checkbox, one using FontAwesome icons (`dot-circle-o`, `circle-o`), another using Material icons (`clear`, `add`) with a dynamic title and custom color, and a final one using custom `Icon` components for checked and unchecked states. Dependencies include `react`, `useState`, `@rneui/themed` (`CheckBox`, `Icon`). Each `CheckBox` toggles its state via the `onPress` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE CheckBox\nimport React, { useState } from 'react';\nimport { CheckBox, Icon } from '@rneui/themed';\n\ntype CheckboxComponentProps = {};\n\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\nconst [check1, setCheck1] = useState(false);\nconst [check2, setCheck2] = useState(false);\nconst [check3, setCheck3] = useState(false);\nconst [check4, setCheck4] = useState(false);\n\nreturn (\n  <>\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checked={check1}\n      onPress={() => setCheck1(!check1)}\n    />\n\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checkedIcon=\"dot-circle-o\"\n      uncheckedIcon=\"circle-o\"\n      checked={check2}\n      onPress={() => setCheck2(!check2)}\n    />\n\n    <CheckBox\n      center\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\n      iconRight\n      iconType=\"material\"\n      checkedIcon=\"clear\"\n      uncheckedIcon=\"add\"\n      checkedColor=\"red\"\n      checked={check3}\n      onPress={() => setCheck3(!check3)}\n    />\n\n    <CheckBox\n      center\n      checkedIcon={\n        <Icon\n          name=\"radio-button-checked\"\n          type=\"material\"\n          color=\"green\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      uncheckedIcon={\n        <Icon\n          name=\"radio-button-unchecked\"\n          type=\"material\"\n          color=\"grey\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      checked={check4}\n      onPress={() => setCheck4(!check4)}\n    />\n  </>\n);\n};\n\nexport default CheckboxComponent;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Component in React Native with react-native-elements\nDESCRIPTION: This code snippet demonstrates the implementation of a BadgeComponent using react-native-elements. It showcases various badge types including standard badges, mini badges, and badges as indicators. The component uses ScrollView for layout and includes examples of badges with different statuses, values, and positioning.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Badge/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\nimport { Avatar, Badge, Icon, withBadge } from 'react-native-elements';\n\nconst BadgedIcon = withBadge(15)(Icon);\n\nconst BadgeComponent = () => {\n  return (\n    <>\n      <ScrollView>\n        <Text style={styles.subHeader}>Standard Badge</Text>\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginTop: 20,\n            marginBottom: 40,\n          }}\n        >\n          <Badge value=\"3\" status=\"success\" />\n          <Badge value=\"99+\" status=\"error\" />\n          <Badge value=\"500\" status=\"primary\" />\n          <Badge value=\"10\" status=\"warning\" />\n        </View>\n        <Text style={styles.subHeader}>Mini Badge</Text>\n        <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginTop: 20,\n            marginBottom: 20,\n          }}\n        >\n          <Badge status=\"success\" />\n          <Badge status=\"error\" />\n          <Badge status=\"primary\" />\n          <Badge status=\"warning\" />\n        </View>\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 20,\n          }}\n        >\n          <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\n          <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\n          <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\n          <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\n        </View>\n\n        <Text style={styles.subHeader}>Badge as Indicator</Text>\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginTop: 20,\n            marginBottom: 40,\n          }}\n        >\n          <View>\n            <Avatar\n              rounded\n              source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\n              size=\"medium\"\n            />\n            <Badge\n              status=\"success\"\n              containerStyle={{ position: 'absolute', top: 5, left: 40 }}\n            />\n          </View>\n          <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n          <View>\n            <Avatar\n              rounded\n              source={{\n                uri: 'https://randomuser.me/api/portraits/women/40.jpg',\n              }}\n              size=\"large\"\n            />\n            <Badge\n              status=\"primary\"\n              value={10}\n              containerStyle={{ position: 'absolute', top: 5, left: 60 }}\n            />\n          </View>\n        </View>\n      </ScrollView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  }\n})\n\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Switching Theme Modes with useThemeMode Hook - React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript example outlines the use of the useThemeMode hook from @rneui/themed to get and set the current theme mode (e.g., light or dark). It provides a Button that, when pressed, changes the theme mode to 'dark' and displays the current mode as its title. Dependencies include React Native and @rneui/themed, requiring ThemeProvider to be set up for context. The key parameter is setMode; input is button press events, output is dynamic theme mode switching.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/1.themprovider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThemeMode } from '@rneui/themed';\\n\\nfunction Demo() {\\n  const { mode, setMode } = useThemeMode();\\n\\n  return <Button onPress={() => setMode('dark')} title={mode} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functional Header Component with Icons and Actions in React Native Elements (JSX)\nDESCRIPTION: This example presents a complete functional `Header` component using `HeaderRNE` from `@rneui/themed`. It demonstrates setting `leftComponent` (menu icon), `centerComponent` (title text), and `rightComponent` (containing multiple touchable icons for navigation using `react-native-gesture-handler` and `Linking`). The entire component is wrapped in `SafeAreaProvider` from `react-native-safe-area-context` to handle safe areas correctly, and styled using `StyleSheet`. This example is suitable for use in a SnackPlayer environment or a standard React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Component in React Native\nDESCRIPTION: Demonstrates how to use the Tooltip component in a React Native application. It includes state management for tooltip visibility and showcases various props like visible, onOpen, onClose, and popover.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RNETooltip() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Stack row align=\"center\">\n      <Tooltip\n        visible={open}\n        onOpen={() => setOpen(true)}\n        onClose={() => setOpen(false)}\n        popover={<Text style={{ color: \"#fff\" }}>Tooltip text</Text>}\n      >\n        Click me\n      </Tooltip>\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Custom Subtitle View\nDESCRIPTION: Demonstrates how to create a ListItem with a custom styled subtitle view containing an image and text. Includes custom styling for the subtitle container and its components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with FlatList, Avatars, and Chevrons in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Implements a list using React Native's `FlatList` component and `ListItem` from `@rneui/themed`. Each item includes an `Avatar`, title, subtitle, and a `ListItem.Chevron`. Demonstrates using `keyExtractor` and `renderItem` props of `FlatList`. Requires `@rneui/themed` (`ListItem`, `Avatar`) and React Native's `FlatList`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cards Component with React Native Elements\nDESCRIPTION: This snippet demonstrates a complete implementation of a Cards component using React Native Elements. It showcases three different card styles: a card with a list of users and avatars, a card displaying different heading styles, and a card with an image and button. The component uses TypeScript for type definitions and includes custom styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n{\n  name: 'brynn',\n  avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n},\n{\n  name: 'thot leader',\n  avatar:\n    'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n},\n{\n  name: 'jsa',\n  avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n},\n{\n  name: 'talhaconcepts',\n  avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n},\n{\n  name: 'andy vitale',\n  avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n},\n{\n  name: 'katy friedson',\n  avatar:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n},\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.container}>\n        <Card>\n          <Card.Title>CARD WITH DIVIDER</Card.Title>\n          <Card.Divider />\n          {users.map((u, i) => {\n            return (\n              <View key={i} style={styles.user}>\n                <Image\n                  style={styles.image}\n                  resizeMode=\"cover\"\n                  source={{ uri: u.avatar }}\n                />\n                <Text style={styles.name}>{u.name}</Text>\n              </View>\n            );\n          })}\n        </Card>\n        <Card containerStyle={{ marginTop: 15 }}>\n          <Card.Title>FONTS</Card.Title>\n          <Card.Divider />\n          <Text style={styles.fonts} h1>\n            h1 Heading\n          </Text>\n          <Text style={styles.fonts} h2>\n            h2 Heading\n          </Text>\n          <Text style={styles.fonts} h3>\n            h3 Heading\n          </Text>\n          <Text style={styles.fonts} h4>\n            h4 Heading\n          </Text>\n          <Text style={styles.fonts}>Normal Text</Text>\n        </Card>\n        <Card>\n          <Card.Title>HELLO WORLD</Card.Title>\n          <Card.Divider />\n          <Card.Image\n            style={{ padding: 0 }}\n            source={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n          />\n          <Text style={{ marginBottom: 10 }}>\n            The idea with React Native Elements is more about component\n            structure than actual design.\n          </Text>\n          <Button\n            icon={\n              <Icon\n                name=\"code\"\n                color=\"#ffffff\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              borderRadius: 0,\n              marginLeft: 0,\n              marginRight: 0,\n              marginBottom: 0,\n            }}\n            title=\"VIEW NOW\"\n          />\n        </Card>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nfonts: {\n  marginBottom: 8,\n},\nuser: {\n  flexDirection: 'row',\n  marginBottom: 6,\n},\nimage: {\n  width: 30,\n  height: 30,\n  marginRight: 10,\n},\nname: {\n  fontSize: 16,\n  marginTop: 5,\n},\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Basic SpeedDial Implementation in React Native (JavaScript/React)\nDESCRIPTION: This React functional component demonstrates the basic usage of the SpeedDial component from '@rneui/themed'. It utilizes the 'useState' hook to manage the 'isOpen' state, toggling it via 'onOpen' and 'onClose' props. Two SpeedDial.Action components are defined for 'Add' and 'Delete' operations, each configured with an icon and a title, and logging messages to the console via their 'onPress' handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE SpeedDial\nimport React from 'react';\nimport { SpeedDial } from '@rneui/themed';\n\nexport default () => {\nconst [open, setOpen] = React.useState(false);\nreturn (\n  <SpeedDial\n    isOpen={open}\n    icon={{ name: 'edit', color: '#fff' }}\n    openIcon={{ name: 'close', color: '#fff' }}\n    onOpen={() => setOpen(!open)}\n    onClose={() => setOpen(!open)}\n  >\n    <SpeedDial.Action\n      icon={{ name: 'add', color: '#fff' }}\n      title=\"Add\"\n      onPress={() => console.log('Add Something')}\n    />\n    <SpeedDial.Action\n      icon={{ name: 'delete', color: '#fff' }}\n      title=\"Delete\"\n      onPress={() => console.log('Delete Something')}\n    />\n  </SpeedDial>\n);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a List with Avatars using FlatList in React Native Elements (JavaScript)\nDESCRIPTION: This snippet illustrates using React Native's `FlatList` component for efficiently rendering a list of items, suitable for large datasets. The `renderItem` function defines the structure of each list row, using `ListItem`, `Avatar`, `ListItem.Content` (with Title and Subtitle), and `ListItem.Chevron`. A `keyExtractor` function is required by `FlatList` for unique item identification. Dependencies include `ListItem` and `Avatar` from `@rneui/themed` and a data array (`list`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Merging Updates into the Current Theme using updateTheme (TypeScript)\nDESCRIPTION: Provides an example of using the `updateTheme` function to merge new theme properties (like changing `lightColors.primary` to 'purple') into the existing theme provided by `ThemeProvider`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/0.index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nupdateTheme({\n  lightColors: {\n    primary: 'purple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying ThemeProvider with Button Component (React Native Elements, JSX)\nDESCRIPTION: This snippet illustrates usage of the ThemeProvider wrapper from @rneui/themed to supply theme context to all nested components, specifically wrapping a Button. It requires installation of @rneui/themed and can be used in any React (Native) or React Web project. The example shows a functional component MyApp returning a ThemeProvider that wraps a Button, thus enabling centralized theme customization throughout the app. Input is none; output is a themed button labeled 'Hey!'; limitations include reliance on default theming unless customization is added elsewhere.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from '@rneui/themed';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Social Media Icons Grid with React Native Elements - TypeScript\nDESCRIPTION: This snippet defines a React functional component that displays social media icons in a grid layout within a scrollable view using the SocialIcon component from @rneui/themed. It creates an array of social media data, chunks the list into groups of three, and uses a ScrollView to enable vertical scrolling of the icon rows. The component relies on React, React Native core modules (View, ScrollView), and lodash's chunk function for splitting the data, and expects @rneui/themed to be installed in the project. The input is a predefined static set of icon types, and the output is a user interface displaying grouped clickable or static social media icons. Note: lodash (_) must be imported and available in the scope; SocialMediaType type should be defined elsewhere if not provided by RNE UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\\nimport { View, ScrollView } from 'react-native';\\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\\n\\ntype IconData = {\\ntype: SocialMediaType;\\niconType: string;\\n};\\n\\nconst dataList: Partial<IconData>[] = [\\n{\\n  type: 'facebook',\\n},\\n{\\n  type: 'twitter',\\n},\\n{\\n  type: 'google-plus-official',\\n},\\n{\\n  type: 'google',\\n},\\n{\\n  type: 'pinterest',\\n},\\n{\\n  type: 'linkedin',\\n},\\n{\\n  type: 'youtube',\\n},\\n{\\n  type: 'vimeo',\\n},\\n{\\n  type: 'tumblr',\\n},\\n{\\n  type: 'instagram',\\n},\\n{\\n  type: 'quora',\\n},\\n{\\n  type: 'flickr',\\n},\\n{\\n  type: 'foursquare',\\n},\\n{\\n  type: 'wordpress',\\n},\\n{\\n  type: 'stumbleupon',\\n},\\n{\\n  type: 'github',\\n},\\n{\\n  type: 'github-alt',\\n},\\n{\\n  type: 'twitch',\\n},\\n{\\n  type: 'medium',\\n},\\n{\\n  type: 'soundcloud',\\n},\\n{\\n  type: 'stack-overflow',\\n},\\n{\\n  type: 'gitlab',\\n},\\n{\\n  type: 'angellist',\\n},\\n{\\n  type: 'codepen',\\n},\\n{\\n  type: 'weibo',\\n},\\n{\\n  type: 'vk',\\n},\\n{\\n  type: 'facebook-messenger',\\n  iconType: 'material-community',\\n},\\n{\\n  type: 'whatsapp',\\n},\\n];\\n\\ntype SocialIconsComponentProps = {};\\n\\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\\nconst socialProps = {};\\nreturn (\\n  <>\\n    <ScrollView>\\n      {_.chunk(dataList, 3).map(\\n        (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\\n          <View\\n            style={{\\n              flexDirection: 'row',\\n              justifyContent: 'space-around',\\n              marginTop: 10,\\n              backgroundColor: '#4c4c4c',\\n            }}\\n            key={chunkIndex}\\n          >\\n            {chunk.map((l: Partial<IconData>, i: React.Key) => (\\n              <SocialIcon\\n                type={l.type}\\n                iconType={l.iconType ? l.iconType : 'font-awesome'}\\n                key={`${chunkIndex}-${i}`}\\n              />\\n            ))}\\n          </View>\\n        )\\n      )}\\n    </ScrollView>\\n  </>\\n);\\n};\\n\\nexport default SocialIcons;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive List Item Examples with FlatList and Accordion - React Native Elements (TypeScript/JavaScript)\nDESCRIPTION: This full-featured example demonstrates advanced usage of React Native Elements ListItem components within a functional component, integrating FlatList rendering, swipeable actions, accordion toggling, gradient backgrounds, avatars, icons, switches, buttons, checkboxes, badges, and custom content. Dependencies include '@rneui/themed', 'react-native', and optionally TypeScript types. The component manages multiple interactive UI elements through useState and maps over data arrays for dynamic rendering. Expected inputs are list arrays (list1, list2), and the output is a rich, scrollable UI with interactive list behaviors, modifiable through the component's internal state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\nText,\nListItem,\nAvatar,\nIcon,\nBadge,\nListItemProps,\nButton,\nSwitch,\nlightColors\n} from '@rneui/themed';\n\nconst log = () => console.log('this is an example method');\n\ntype List1Data = {\ntitle: string;\nicon: string;\n};\nconst list1: List1Data[] = [\n{\n  title: 'Appointments',\n  icon: 'av-timer',\n},\n{\n  title: 'Trips',\n  icon: 'flight-takeoff',\n},\n{\n  title: 'Passwords',\n  icon: 'fingerprint',\n},\n{\n  title: 'Pitches',\n  icon: 'lightbulb-outline',\n},\n{\n  title: 'Updates',\n  icon: 'track-changes',\n},\n];\n\ntype List2Data = {\nname: string;\navatar_url: string;\nsubtitle: string;\nlinearGradientColors: string[];\n};\n\nconst list2: Partial<List2Data>[] = [\n{\n  name: 'Amy Farha',\n  avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n  subtitle: 'Vice President',\n  linearGradientColors: ['#FF9800', '#F44336'],\n},\n{\n  name: 'Chris Jackson',\n  avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n  subtitle: 'Vice Chairman',\n  linearGradientColors: ['#3F51B5', '#2196F3'],\n},\n{\n  name: 'Amanda Martin',\n  avatar_url:\n    'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n  subtitle: 'CEO',\n  linearGradientColors: ['#FFD600', '#FF9800'],\n},\n{\n  name: 'Christy Thomas',\n  avatar_url: 'https://randomuser.me/api/portraits/women/48.jpg',\n  subtitle: 'Lead Developer',\n  linearGradientColors: ['#4CAF50', '#8BC34A'],\n},\n{\n  name: 'Melissa Jones',\n  avatar_url:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMDQ0NDk1OV5BMl5BanBnXkFtZTcwNDcxOTExNg@@._V1_UY256_CR2,0,172,256_AL_.jpg',\n  subtitle: 'CTO',\n  linearGradientColors: ['#F44336', '#E91E63'],\n},\n];\n\ntype ListComponentProps = ListItemProps;\n\nconst Lists2: React.FunctionComponent<ListComponentProps> = () => {\nconst [expanded, setExpanded] = React.useState(false);\n\nconst listItemProps = {};\nconst renderRow = ({ item }: { item: List1Data }) => {\n  return (\n    <ListItem.Swipeable\n      onPress={log}\n      bottomDivider\n      leftContent={\n        <Button\n          title=\"Info\"\n          icon={{ name: 'info', color: 'white' }}\n          buttonStyle={{ minHeight: '100%' }}\n        />\n      }\n      rightContent={\n        <Button\n          title=\"Delete\"\n          icon={{ name: 'delete', color: 'white' }}\n          buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n        />\n      }\n    >\n      <Icon name={item.icon} />\n      <ListItem.Content>\n        <ListItem.Title>{item.title}</ListItem.Title>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem.Swipeable>\n  );\n};\nconst [switch1, setSwitch1] = useState(true);\nconst [checkbox1, setCheckbox1] = useState(true);\nconst [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\n\nreturn (\n  <>\n    <FlatList\n      ListHeaderComponent={\n        <>\n          <View style={{ paddingVertical: 8 }}>\n            {list2.map((l, i) => (\n              <ListItem\n                key={i}\n                linearGradientProps={{\n                  colors: l.linearGradientColors,\n                  start: [1, 0],\n                  end: [0.2, 0],\n                }}\n                containerStyle={{\n                  marginHorizontal: 16,\n                  marginVertical: 8,\n                  borderRadius: 8,\n                }}\n              >\n                <Avatar rounded source={{ uri: l.avatar_url }} />\n                <ListItem.Content>\n                  <ListItem.Title\n                    style={{ color: 'white', fontWeight: 'bold' }}\n                  >\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle style={[{ color: 'white' }]}>\\n                    {l.subtitle}\\n                  </ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Chevron color=\"white\" />\n              </ListItem>\n            ))}\n          </View>\n\n          <View style={styles.list}>\n            <ListItem.Accordion\n              content={\n                <>\n                  <Icon name=\"place\" size={30} />\n                  <ListItem.Content>\n                    <ListItem.Title>List Accordion</ListItem.Title>\n                  </ListItem.Content>\n                </>\n              }\n              isExpanded={expanded}\n              onPress={() => {\n                setExpanded(!expanded);\n              }}\n            >\n              {list2.map((l: Partial<List2Data>, i: React.Key) => (\n                <ListItem key={i} onPress={log} bottomDivider>\n                  <Avatar title={l.name} source={{ uri: l.avatar_url }} />\n                  <ListItem.Content>\n                    <ListItem.Title>{l.name}</ListItem.Title>\n                    <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Chevron />\n                </ListItem>\n              ))}\n            </ListItem.Accordion>\n          </View>\n          <View style={styles.list}>\n            {list2.map((l, i) => (\n              <ListItem key={i} bottomDivider>\n                <Icon name=\"user-circle-o\" type=\"font-awesome\" color=\"red\" />\n                <ListItem.Content>\n                  <ListItem.Title style={{ color: 'red' }}>\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Content right>\n                  <ListItem.Title right style={{ color: 'green' }}>\n                    11:00 am\n                  </ListItem.Title>\n                  <ListItem.Subtitle right>12:00 am</ListItem.Subtitle>\n                </ListItem.Content>\n              </ListItem>\n            ))}\n          </View>\n          <View style={styles.list}>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Name</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.Input placeholder=\"Type your name\" />\n              <ListItem.Chevron />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Switch that please ðŸ˜²</ListItem.Title>\n              </ListItem.Content>\n              <Switch\n                value={switch1}\n                onValueChange={(value) => setSwitch1(value)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Choose ðŸ¤¯</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.ButtonGroup\n                buttons={['Flower', 'Coco']}\n                selectedIndex={selectedButtonIndex}\n                onPress={(index) => setSelectedButtonIndex(index)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.CheckBox\n                checked={checkbox1}\n                onPress={() => setCheckbox1(!checkbox1)}\n              />\n              <ListItem.Content>\n                <ListItem.Title>Check that please ðŸ˜¢</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Badge value=\"12\" />\n              <ListItem.Content>\n                <ListItem.Title>With a Badge ! ðŸ˜»</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Icon name=\"check\" size={20} />\n              <ListItem.Content>\n                <ListItem.Title>This thing is checked ðŸ˜Ž</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n          <View style={styles.list}>\n            <ListItem>\n              <Avatar source={'https://randomuser.me/api/portraits/women/57.jpg'} />\n              <ListItem.Content>\n                <ListItem.Title>\n                  Limited supply! Its like digital gold!\n                </ListItem.Title>\n                <View style={styles.subtitleView}>\n                  <Image\n                    source={\"https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg\"}\n                    style={styles.ratingImage}\n                  />\n                  <Text style={styles.ratingText}>5 months ago</Text>\n                </View>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n        </>\n      }\n      data={list1}\n      keyExtractor={(a: List1Data, index: number) => index.toString()}\n      renderItem={renderRow}\n    />\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nlist: {\n  marginTop: 20,\n  borderTopWidth: 1,\n  borderColor: lightColors.greyOutline,\n},\nsubtitleView: {\n  flexDirection: 'row',\n  paddingLeft: 10,\n  paddingTop: 5,\n},\nratingImage: {\n  height: 19.21,\n  width: 100,\n},\nratingText: {\n```\n\n----------------------------------------\n\nTITLE: Importing TabView from React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import the TabView component from the \"@rneui/themed\" package, which is required to use the swipeable tabs functionality in React Native Elements. Ensure the \"@rneui/themed\" dependency is installed in your project before importing. The statement prepares the TabView component for use in JSX code, enabling further configuration via props such as animation, style, and event handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TabView } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Tile Styles with @rneui/themed in React Native\nDESCRIPTION: This React Native component demonstrates the usage of the `Tile` component from `@rneui/themed`. It displays three different `Tile` examples: a featured tile with a title and caption, a featured tile with an icon and an `onPress` handler, and a standard tile with custom content passed as children. Dependencies include `react`, `react-native`, and `@rneui/themed`. Key props shown are `imageSrc`, `title`, `featured`, `icon`, `caption`, `onPress`, `width`, `activeOpacity`, and `contentContainerStyle`. Styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Tile\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from '@rneui/themed';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\nreturn (\n  <>\n    <View style={{ alignItems: 'center' }}>\n      <ScrollView style={{ paddingVertical: 10 }}>\n      <Text style={styles.subHeader}>Featured Tile</Text>\n        <Tile\n          imageSrc={{\n            uri:\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n          }}\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n          titleStyle={{ fontSize: 15 }}\n          featured\n          caption=\"Mahatma Gandhi\"\n          activeOpacity={1}\n          width={310}\n        />\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n        <View style={{ paddingTop: 20 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n            icon={{\n              name: 'heart',\n              type: 'font-awesome',\n              size: 60,\n              color: 'red',\n            }}\n            featured\n            activeOpacity={0.8}\n            onPress={() => {\n              'Tile pressed';\n            }}\n            width={310}\n          />\n        </View>\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n            }}\n            title=\"Half Dome, Yosemite\"\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n            activeOpacity={1}\n            width={310}\n            contentContainerStyle={{ height: 70 }}\n            style={{ paddingBottom: 20 }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text style={{ color: 'green' }}>Visit</Text>\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\n            </View>\n          </Tile>\n        </View>\n      </ScrollView>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Tiles;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled SearchBar with State in React Native Elements (TypeScript)\nDESCRIPTION: This snippet presents a functional React component using TypeScript that incorporates a SearchBar from '@rneui/themed'. It demonstrates managing state for the search input, updating the value via the onChangeText handler, and applying custom styling. Dependencies include React, React Native, and @rneui/themed. Key parameters involve the controlled value and onChangeText function. Inputs consist of user-typed text, and the output is a responsive input field reflecting the state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n```SnackPlayer name=RNE SearchBar\\nimport React, { useState } from 'react';\\nimport { SearchBar } from '@rneui/themed';\\nimport { View, Text, StyleSheet } from 'react-native';\\n\\ntype SearchBarComponentProps = {};\\n\\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\\nconst [search, setSearch] = useState(\\\"\\\");\\n\\nconst updateSearch = (search) => {\\n  setSearch(search);\\n};\\n\\nreturn (\\n  <View style={styles.view}>\\n    <SearchBar\\n      placeholder=\\\"Type Here...\\\"\\n      onChangeText={updateSearch}\\n      value={search}\\n    />\\n  </View>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nview: {\\n  margin: 10,\\n},\\n});\\n\\nexport default SwitchComponent;\\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with Component Props in React Native Elements (TSX)\nDESCRIPTION: Shows the style precedence where external styles (component props) override theme styles. A `ThemeProvider` sets the default button title color to red, but an individual `Button`'s `titleStyle` prop overrides it to pink.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Complex ListItem Examples with TypeScript\nDESCRIPTION: Comprehensive example showing multiple ListItem variations including swipeable items, accordions, input fields, switches, and custom styling. Implements TypeScript interfaces and various interactive components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\nText,\nListItem,\nAvatar,\nIcon,\nBadge,\nListItemProps,\nButton,\nSwitch,\nlightColors\n} from '@rneui/themed';\n\n// ... [rest of the lengthy TypeScript code]\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Components with React Native Elements\nDESCRIPTION: A complete implementation of various avatar types using React Native Elements. The component demonstrates image avatars with remote URLs, icon avatars with different icon sets, letter avatars with custom styling, and badged avatars with accessories. Includes a custom array chunking method for layout organization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic SearchBar with State in React Native\nDESCRIPTION: This React Native code (using TypeScript syntax within a JavaScript block) defines a functional component `SwitchComponent` that renders a basic `SearchBar` from `@rneui/themed`. It utilizes the `useState` hook to manage the search input's value and updates the state via the `onChangeText` prop. It requires React, React Native (`View`, `Text`, `StyleSheet`), and `@rneui/themed` (`SearchBar`). The component displays a search bar with a placeholder and updates its value as the user types.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/SearchBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SearchBar } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SearchBarComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\nconst [search, setSearch] = useState(\"\");\n\nconst updateSearch = (search) => {\n  setSearch(search);\n};\n\nreturn (\n  <View style={styles.view}>\n    <SearchBar\n      placeholder=\"Type Here...\"\n      onChangeText={updateSearch}\n      value={search}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Applying Theming with ThemeProvider in JSX\nDESCRIPTION: This snippet illustrates how to apply the theming capabilities of React Native Elements. It imports `Button` and `ThemeProvider` from `@rneui/themed`. The `Button` component is wrapped within the `ThemeProvider`, allowing it to inherit theme properties. This setup enables centralized theme customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { Button, ThemeProvider } from '@rneui/themed';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem.Accordion in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to use the ListItem.Accordion component from React Native Elements. It creates an expandable accordion with a custom header and a list of items rendered when expanded. The component uses state to manage expansion and includes icons, avatars, and nested ListItem components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem.Accordion\n  content={\n    <>\n      <Icon name=\"place\" size={30} />\n      <ListItem.Content>\n        <ListItem.Title>List Accordion</ListItem.Title>\n      </ListItem.Content>\n    </>\n  }\n  isExpanded={expanded}\n  onPress={() => {\n    setExpanded(!expanded);\n  }}\n>\n  {list2.map((l, i) => (\n    <ListItem key={i} onPress={log} bottomDivider>\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\n      <ListItem.Content>\n        <ListItem.Title>{l.name}</ListItem.Title>\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  ))}\n</ListItem.Accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Icon Types in React Native Elements\nDESCRIPTION: This example demonstrates different ways to use the Icon component from React Native Elements, including basic icons, colored icons, icons with specific types (evilicon, ionicon, font-awesome), and special styling options like reverse and raised. The snippet also shows how to handle icon press events.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Icon } from '@rneui/themed';\n\nexport default () => {\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Icon\n        name='rowing' />\n\n      <Icon\n        name='g-translate'\n        color='#00aced' />\n\n      <Icon\n        name='sc-telegram'\n        type='evilicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        reverse\n        name='ios-american-football'\n        type='ionicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        raised\n        name='heartbeat'\n        type='font-awesome'\n        color='#f50'\n        onPress={() => console.log('hello')} />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on React Native Elements Input via Ref in JavaScript\nDESCRIPTION: Shows examples of calling various interaction methods (`focus`, `blur`, `clear`, `isFocused`, `setNativeProps`, `shake`) on an `Input` component using a previously created ref (`input.current`). These methods allow direct manipulation and querying of the Input state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Button Styles with @rneui/themed in React Native (TypeScript)\nDESCRIPTION: This React Native functional component ('Buttons') demonstrates the usage and styling capabilities of the Button component from the '@rneui/themed' library. It showcases various button types (basic, outline, clear), styles (rounded, light, dark, warning, danger), states (loading, disabled), features (icons, linear gradients, custom titles), and layout configurations using containerStyle and buttonStyle props. State variables using 'useState' are initialized for managing selected indices, likely intended for a ButtonGroup component which might be used elsewhere or was omitted. Dependencies include 'react', 'react-native', and '@rneui/themed'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\n\ntype ButtonsComponentProps = {};\n\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <Text style={styles.subHeader}>Basic Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title={'React Native Elements'}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Basic Button\"\n              buttonStyle={{\n                backgroundColor: 'rgba(78, 116, 289, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Dark\"\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n\n            <Button\n              title=\"Log in\"\n              loading={false}\n              loadingProps={{ size: 'small', color: 'white' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderRadius: 5,\n              }}\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n              containerStyle={{\n                marginHorizontal: 50,\n                height: 50,\n                width: 200,\n                marginVertical: 10,\n              }}\n              onPress={() => console.log('aye')}\n            />\n            <Button\n              title=\"Secondary\"\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Warning\"\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Danger\"\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n            <Button\n              title=\"Request an agent\"\n              titleStyle={{ fontWeight: '500' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"LOG IN\"\n              buttonStyle={{\n                backgroundColor: 'black',\n                borderWidth: 2,\n                borderColor: 'white',\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ fontWeight: 'bold' }}\n            />\n            <Button\n              title=\"HOME\"\n              icon={{\n                name: 'home',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconContainerStyle={{ marginRight: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(90, 154, 230, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"PROFILE\"\n              icon={{\n                name: 'user',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title={<CustomTitle />}\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\n              linearGradientProps={{\n                colors: ['#FF9800', '#F44336'],\n                start: [1, 0],\n                end: [0.2, 0],\n              }}\n              buttonStyle={{\n                borderWidth: 0,\n                borderColor: 'transparent',\n                borderRadius: 20,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              icon={{\n                name: 'arrow-right',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Light Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"SIGN UP\"\n              disabled={true}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Outline Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Raised Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              raised\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              title=\"Clear Button\"\n              type=\"clear\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n            />\n            <Button\n              title=\"Light\"\n              buttonStyle={{\n                backgroundColor: 'rgba(244, 244, 244, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\n            />\n          </View>\n          <Text style={styles.subHeader}>Loading Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"HOME\"\n              loading\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 40,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"SIGN UP\"\n              loading={true}\n              loadingProps={{\n                size: 'small',\n                color: 'rgba(111, 202, 186, 1)',\n              }}\n              titleStyle={{ fontWeight: '700' }}\n              \n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements via NPM\nDESCRIPTION: Command to install the stable version of React Native Elements using NPM package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Button Component with React Native Elements in TypeScript\nDESCRIPTION: Demonstrates the simplest usage of the Button component from the React Native Elements base package in a functional React Native app component. This code requires the @rneui/base package as a dependency and expects a React Native project set up for TypeScript. The App component renders a Button with the label \\\"Hello World\\\", taking no external parameters except standard functional component props; it outputs a UI button. Useful as a starting point for integrating React Native Elements UI components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Button } from '@rneui/base';\\n\\nconst App = () => {\\n  return <Button title=\\\"Hello World\\\" />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon and Link List Items with React Native Elements in JavaScript\nDESCRIPTION: This snippet shows how to render a list of items with icons using React Native Elements and JavaScript's map function. Each item in the input array contains 'title' and 'icon' fields, which are rendered inside a ListItem with an Icon, Title, and a Chevron indicator. The snippet depends on '@rneui/themed' for ListItem and Icon and expects the data list to have valid icon names. The output is a set of interactive list items suitable for navigation or dashboard-style interfaces.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Icon } from '@rneui/themed'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Creating Themed Styles with makeStyles Hook Generator - TypeScript\nDESCRIPTION: Defines a makeStyles hook to generate styles based on theme and props (optional). The example shows typed parameters, creates the useStyles hook, and applies generated styles in a functional component. The styles object utilizes theme colors and dynamic widths. Dependencies are '@rneui/themed' and 'react-native'; inputs are theme and props, outputs are memoized style objects for use in components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/0.index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from '@rneui/themed';\n\ntype Params = {\n  fullWidth?: boolean;\n};\n\nconst MyComponent = (props: Params) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Params) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RNE Avatar Component Usage in React Native\nDESCRIPTION: This React Native component demonstrates the usage of the `Avatar` component from `@rneui/themed`. It showcases rendering avatars with images from URLs, icons from FontAwesome and Material icon sets, initial letters with custom backgrounds, and avatars with accessory badges using `Avatar.Accessory`. The component uses a `ScrollView` for layout and defines a helper `chunk` method on the Array prototype to group image avatars for display. Dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive React Native Elements ListItem Demo with Multiple Variants\nDESCRIPTION: This snippet provides a complete example of various ListItem implementations including swipeable items, accordions, gradient backgrounds, badges, inputs, switches, and more. It also demonstrates type definitions and data structures for the lists.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\nText,\nListItem,\nAvatar,\nIcon,\nBadge,\nListItemProps,\nButton,\nSwitch,\ncolors\n} from '@rneui/themed';\n\nconst log = () => console.log('this is an example method');\n\ntype List1Data = {\ntitle: string;\nicon: string;\n};\nconst list1: List1Data[] = [\n{\n  title: 'Appointments',\n  icon: 'av-timer',\n},\n{\n  title: 'Trips',\n  icon: 'flight-takeoff',\n},\n{\n  title: 'Passwords',\n  icon: 'fingerprint',\n},\n{\n  title: 'Pitches',\n  icon: 'lightbulb-outline',\n},\n{\n  title: 'Updates',\n  icon: 'track-changes',\n},\n];\n\ntype List2Data = {\nname: string;\navatar_url: string;\nsubtitle: string;\nlinearGradientColors: string[];\n};\n\nconst list2: Partial<List2Data>[] = [\n{\n  name: 'Amy Farha',\n  avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n  subtitle: 'Vice President',\n  linearGradientColors: ['#FF9800', '#F44336'],\n},\n{\n  name: 'Chris Jackson',\n  avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n  subtitle: 'Vice Chairman',\n  linearGradientColors: ['#3F51B5', '#2196F3'],\n},\n{\n  name: 'Amanda Martin',\n  avatar_url:\n    'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n  subtitle: 'CEO',\n  linearGradientColors: ['#FFD600', '#FF9800'],\n},\n{\n  name: 'Christy Thomas',\n  avatar_url: 'https://randomuser.me/api/portraits/women/48.jpg',\n  subtitle: 'Lead Developer',\n  linearGradientColors: ['#4CAF50', '#8BC34A'],\n},\n{\n  name: 'Melissa Jones',\n  avatar_url:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMDQ0NDk1OV5BMl5BanBnXkFtZTcwNDcxOTExNg@@._V1_UY256_CR2,0,172,256_AL_.jpg',\n  subtitle: 'CTO',\n  linearGradientColors: ['#F44336', '#E91E63'],\n},\n];\n\ntype ListComponentProps = ListItemProps;\n\nconst Lists2: React.FunctionComponent<ListComponentProps> = () => {\nconst [expanded, setExpanded] = React.useState(false);\n\nconst listItemProps = {};\nconst renderRow = ({ item }: { item: List1Data }) => {\n  return (\n    <ListItem.Swipeable\n      onPress={log}\n      bottomDivider\n      leftContent={\n        <Button\n          title=\"Info\"\n          icon={{ name: 'info', color: 'white' }}\n          buttonStyle={{ minHeight: '100%' }}\n        />\n      }\n      rightContent={\n        <Button\n          title=\"Delete\"\n          icon={{ name: 'delete', color: 'white' }}\n          buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n        />\n      }\n    >\n      <Icon name={item.icon} />\n      <ListItem.Content>\n        <ListItem.Title>{item.title}</ListItem.Title>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem.Swipeable>\n  );\n};\nconst [switch1, setSwitch1] = useState(true);\nconst [checkbox1, setCheckbox1] = useState(true);\nconst [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\n\nreturn (\n  <>\n    <FlatList\n      ListHeaderComponent={\n        <>\n          <View style={{ paddingVertical: 8 }}>\n            {list2.map((l, i) => (\n              <ListItem\n                key={i}\n                linearGradientProps={{\n                  colors: l.linearGradientColors,\n                  start: [1, 0],\n                  end: [0.2, 0],\n                }}\n                containerStyle={{\n                  marginHorizontal: 16,\n                  marginVertical: 8,\n                  borderRadius: 8,\n                }}\n              >\n                <Avatar rounded source={{ uri: l.avatar_url }} />\n                <ListItem.Content>\n                  <ListItem.Title\n                    style={{ color: 'white', fontWeight: 'bold' }}\n                  >\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle style={[{ color: 'white' }]}>\n                    {l.subtitle}\n                  </ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Chevron color=\"white\" />\n              </ListItem>\n            ))}\n          </View>\n\n          <View style={styles.list}>\n            <ListItem.Accordion\n              content={\n                <>\n                  <Icon name=\"place\" size={30} />\n                  <ListItem.Content>\n                    <ListItem.Title>List Accordion</ListItem.Title>\n                  </ListItem.Content>\n                </>\n              }\n              isExpanded={expanded}\n              onPress={() => {\n                setExpanded(!expanded);\n              }}\n            >\n              {list2.map((l: Partial<List2Data>, i: React.Key) => (\n                <ListItem key={i} onPress={log} bottomDivider>\n                  <Avatar title={l.name} source={{ uri: l.avatar_url }} />\n                  <ListItem.Content>\n                    <ListItem.Title>{l.name}</ListItem.Title>\n                    <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Chevron />\n                </ListItem>\n              ))}\n            </ListItem.Accordion>\n          </View>\n          <View style={styles.list}>\n            {list2.map((l, i) => (\n              <ListItem key={i} bottomDivider>\n                <Icon name=\"user-circle-o\" type=\"font-awesome\" color=\"red\" />\n                <ListItem.Content>\n                  <ListItem.Title style={{ color: 'red' }}>\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Content right>\n                  <ListItem.Title right style={{ color: 'green' }}>\n                    11:00 am\n                  </ListItem.Title>\n                  <ListItem.Subtitle right>12:00 am</ListItem.Subtitle>\n                </ListItem.Content>\n              </ListItem>\n            ))}\n          </View>\n          <View style={styles.list}>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Name</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.Input placeholder=\"Type your name\" />\n              <ListItem.Chevron />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Switch that please ðŸ˜²</ListItem.Title>\n              </ListItem.Content>\n              <Switch\n                value={switch1}\n                onValueChange={(value) => setSwitch1(value)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Choose ðŸ¤¯</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.ButtonGroup\n                buttons={['Flower', 'Coco']}\n                selectedIndex={selectedButtonIndex}\n                onPress={(index) => setSelectedButtonIndex(index)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.CheckBox\n                checked={checkbox1}\n                onPress={() => setCheckbox1(!checkbox1)}\n              />\n              <ListItem.Content>\n                <ListItem.Title>Check that please ðŸ˜¢</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Badge value=\"12\" />\n              <ListItem.Content>\n                <ListItem.Title>With a Badge ! ðŸ˜»</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Icon name=\"check\" size={20} />\n              <ListItem.Content>\n                <ListItem.Title>This thing is checked ðŸ˜Ž</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n          <View style={styles.list}>\n            <ListItem>\n              <Avatar source={'https://randomuser.me/api/portraits/women/57.jpg'} />\n              <ListItem.Content>\n                <ListItem.Title>\n                  Limited supply! Its like digital gold!\n                </ListItem.Title>\n                <View style={styles.subtitleView}>\n                  <Image\n                    source={\"https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg\"}\n                    style={styles.ratingImage}\n                  />\n                  <Text style={styles.ratingText}>5 months ago</Text>\n                </View>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n        </>\n      }\n      data={list1}\n      keyExtractor={(a: List1Data, index: number) => index.toString()}\n      renderItem={renderRow}\n    />\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nlist: {\n  marginTop: 20,\n  borderTopWidth: 1,\n  borderColor: colors.greyOutline,\n},\nsubtitleView: {\n  flexDirection: 'row',\n  paddingLeft: 10,\n  paddingTop: 5,\n},\nratingImage: {\n  height: 19.21,\n  width: 100,\n},\nratingText: {\n  paddingLeft: 10,\n\n```\n\n----------------------------------------\n\nTITLE: Applying Global Theme Styles with ThemeProvider in React Native Elements (TypeScript)\nDESCRIPTION: This example demonstrates how to define a global theme using `createTheme` and apply it to components within a `ThemeProvider`. The theme specifies styles for specific components (e.g., `Button.titleStyle`), overriding the component's internal default styles. It requires `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various RNE Themed Buttons in React Native\nDESCRIPTION: This TypeScript snippet defines a React Native functional component demonstrating the usage of the Button component from '@rneui/themed'. It showcases multiple button styles like basic, rounded, outline, clear, loading, disabled, and buttons with icons or gradients. It utilizes `useState` for managing ButtonGroup state and renders the buttons within a ScrollView. Note: The definitions for `styles` and `CustomTitle` are referenced but not provided within this specific snippet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Button\nimport React, { useState } from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\n\ntype ButtonsComponentProps = {};\n\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <Text style={styles.subHeader}>Basic Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title={'React Native Elements'}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Basic Button\"\n              buttonStyle={{\n                backgroundColor: 'rgba(78, 116, 289, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Dark\"\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n\n            <Button\n              title=\"Log in\"\n              loading={false}\n              loadingProps={{ size: 'small', color: 'white' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderRadius: 5,\n              }}\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n              containerStyle={{\n                marginHorizontal: 50,\n                height: 50,\n                width: 200,\n                marginVertical: 10,\n              }}\n              onPress={() => console.log('aye')}\n            />\n            <Button\n              title=\"Secondary\"\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Warning\"\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Danger\"\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n            <Button\n              title=\"Request an agent\"\n              titleStyle={{ fontWeight: '500' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"LOG IN\"\n              buttonStyle={{\n                backgroundColor: 'black',\n                borderWidth: 2,\n                borderColor: 'white',\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ fontWeight: 'bold' }}\n            />\n            <Button\n              title=\"HOME\"\n              icon={{\n                name: 'home',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconContainerStyle={{ marginRight: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(90, 154, 230, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"PROFILE\"\n              icon={{\n                name: 'user',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title={<CustomTitle />}\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\n              linearGradientProps={{\n                colors: ['#FF9800', '#F44336'],\n                start: [1, 0],\n                end: [0.2, 0],\n              }}\n              buttonStyle={{\n                borderWidth: 0,\n                borderColor: 'transparent',\n                borderRadius: 20,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              icon={{\n                name: 'arrow-right',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Light Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"SIGN UP\"\n              disabled={true}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Outline Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Raised Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              raised\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              title=\"Clear Button\"\n              type=\"clear\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n            />\n            <Button\n              title=\"Light\"\n              buttonStyle={{\n                backgroundColor: 'rgba(244, 244, 244, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\n            />\n          </View>\n          <Text style={styles.subHeader}>Loading Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"HOME\"\n              loading\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 40,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"SIGN UP\"\n              loading={true}\n              loadingProps={{\n                size: 'small',\n                color: 'rgba(111, 202, 186, 1)',\n              }}\n              titleStyle={{ fontWeight: '700' }}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Cards Component with React Native Elements\nDESCRIPTION: A comprehensive example showing three different Card implementations in React Native Elements. The component displays a card with user avatars and names, a card demonstrating different heading styles, and a card with an image and a button. It uses TypeScript for type definitions and StyleSheet for styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n{\n  name: 'brynn',\n  avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n},\n{\n  name: 'thot leader',\n  avatar:\n    'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n},\n{\n  name: 'jsa',\n  avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n},\n{\n  name: 'talhaconcepts',\n  avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n},\n{\n  name: 'andy vitale',\n  avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n},\n{\n  name: 'katy friedson',\n  avatar:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n},\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.container}>\n        <Card>\n          <Card.Title>CARD WITH DIVIDER</Card.Title>\n          <Card.Divider />\n          {users.map((u, i) => {\n            return (\n              <View key={i} style={styles.user}>\n                <Image\n                  style={styles.image}\n                  resizeMode=\"cover\"\n                  source={{ uri: u.avatar }}\n                />\n                <Text style={styles.name}>{u.name}</Text>\n              </View>\n            );\n          })}\n        </Card>\n        <Card containerStyle={{ marginTop: 15 }}>\n          <Card.Title>FONTS</Card.Title>\n          <Card.Divider />\n          <Text style={styles.fonts} h1>\n            h1 Heading\n          </Text>\n          <Text style={styles.fonts} h2>\n            h2 Heading\n          </Text>\n          <Text style={styles.fonts} h3>\n            h3 Heading\n          </Text>\n          <Text style={styles.fonts} h4>\n            h4 Heading\n          </Text>\n          <Text style={styles.fonts}>Normal Text</Text>\n        </Card>\n        <Card>\n          <Card.Title>HELLO WORLD</Card.Title>\n          <Card.Divider />\n          <Card.Image\n            style={{ padding: 0 }}\n            source={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n          />\n          <Text style={{ marginBottom: 10 }}>\n            The idea with React Native Elements is more about component\n            structure than actual design.\n          </Text>\n          <Button\n            icon={\n              <Icon\n                name=\"code\"\n                color=\"#ffffff\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              borderRadius: 0,\n              marginLeft: 0,\n              marginRight: 0,\n              marginBottom: 0,\n            }}\n            title=\"VIEW NOW\"\n          />\n        </Card>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nfonts: {\n  marginBottom: 8,\n},\nuser: {\n  flexDirection: 'row',\n  marginBottom: 6,\n},\nimage: {\n  width: 30,\n  height: 30,\n  marginRight: 10,\n},\nname: {\n  fontSize: 16,\n  marginTop: 5,\n},\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Rendering and Styling Card Components with React Native Elements in TypeScript\nDESCRIPTION: This snippet defines a functional component that renders multiple React Native Elements Card components in a scrollable view. Each card demonstrates different layouts: a list of users with avatars, font style variations, and a media-focused card with an image and button. The component relies on @rneui/themed for UI components, uses local styles defined via StyleSheet, and imports images and icon assets from external URLs. Key props include user avatars (passed as image uris), card titles, and Button/Icon component props for interaction. Outputs are styled views of cards as part of a React Native application; requires installation of react-native, @rneui/themed, and all peer dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n{\n  name: 'brynn',\n  avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n},\n{\n  name: 'thot leader',\n  avatar:\n    'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n},\n{\n  name: 'jsa',\n  avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n},\n{\n  name: 'talhaconcepts',\n  avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n},\n{\n  name: 'andy vitale',\n  avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n},\n{\n  name: 'katy friedson',\n  avatar:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n},\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.container}>\n        <Card>\n          <Card.Title>CARD WITH DIVIDER</Card.Title>\n          <Card.Divider />\n          {users.map((u, i) => {\n            return (\n              <View key={i} style={styles.user}>\n                <Image\n                  style={styles.image}\n                  resizeMode=\"cover\"\n                  source={{ uri: u.avatar }}\n                />\n                <Text style={styles.name}>{u.name}</Text>\n              </View>\n            );\n          })}\n        </Card>\n        <Card containerStyle={{ marginTop: 15 }}>\n          <Card.Title>FONTS</Card.Title>\n          <Card.Divider />\n          <Text style={styles.fonts} h1>\n            h1 Heading\n          </Text>\n          <Text style={styles.fonts} h2>\n            h2 Heading\n          </Text>\n          <Text style={styles.fonts} h3>\n            h3 Heading\n          </Text>\n          <Text style={styles.fonts} h4>\n            h4 Heading\n          </Text>\n          <Text style={styles.fonts}>Normal Text</Text>\n        </Card>\n        <Card>\n          <Card.Title>HELLO WORLD</Card.Title>\n          <Card.Divider />\n          <Card.Image\n            style={{ padding: 0 }}\n            source={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n          />\n          <Text style={{ marginBottom: 10 }}>\n            The idea with React Native Elements is more about component\n            structure than actual design.\n          </Text>\n          <Button\n            icon={\n              <Icon\n                name=\"code\"\n                color=\"#ffffff\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              borderRadius: 0,\n              marginLeft: 0,\n              marginRight: 0,\n              marginBottom: 0,\n            }}\n            title=\"VIEW NOW\"\n          />\n        </Card>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nfonts: {\n  marginBottom: 8,\n},\nuser: {\n  flexDirection: 'row',\n  marginBottom: 6,\n},\nimage: {\n  width: 30,\n  height: 30,\n  marginRight: 10,\n},\nname: {\n  fontSize: 16,\n  marginTop: 5,\n},\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme and Internal Styles with External Props in React Native Elements (TSX)\nDESCRIPTION: Illustrates the highest level of style precedence, where styles passed directly as props to a component (`titleStyle={{ color: 'pink' }}`) override both the component's internal styles and any styles defined for that component type within the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Button Component with React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and render the Button component from '@rneui/base' in a functional React Native component using TypeScript. Required dependencies include React, React Native, and the '@rneui/base' package. The Button accepts a 'title' prop, which determines the label shown on the button, and renders it as part of the component tree. Input: no parameters. Output: Button UI element rendered with the title 'Hello World'. This setup serves as a minimal, working example for getting started with React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from '@rneui/base';\\n\\nconst App = () => {\\n  return <Button title=\\\"Hello World\\\" />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Interactive Overlay Usage Example - React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates a complete example of using the Overlay component with React Native Elements in a functional React component. It defines a button to open/close the Overlay, passing props such as isVisible and onBackdropPress, and customizes contents with text and a themed button using the Icon component. Dependencies are '@rneui/themed' and 'react-native'. The visible state toggles Overlay visibility, and styled text/buttons provide a user-friendly UI. The expected input is user interaction triggering overlay display; the output is a modal overlay with customized children.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\nconst [visible, setVisible] = useState(false);\n\nconst toggleOverlay = () => {\n  setVisible(!visible);\n};\n\nreturn (\n  <View>\n    <Button\n      title=\"Open Overlay\"\n      onPress={toggleOverlay}\n      buttonStyle={styles.button}\n    />\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n      <Text style={styles.textPrimary}>Hello!</Text>\n      <Text style={styles.textSecondary}>\n        Welcome to React Native Elements\n      </Text>\n      <Button\n        icon={\n          <Icon\n            name=\"wrench\"\n            type=\"font-awesome\"\n            color=\"white\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        title=\"Start Building\"\n        onPress={toggleOverlay}\n      />\n    </Overlay>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\ntextPrimary: {\n  marginVertical: 20,\n  textAlign: 'center',\n  fontSize: 20,\n},\ntextSecondary: {\n  marginBottom: 10,\n  textAlign: 'center',\n  fontSize: 17,\n},\n});\n\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing PricingCard Component with React Native Elements\nDESCRIPTION: This code demonstrates how to use the PricingCard component from React Native Elements to create a pricing page with multiple subscription tiers. Each card displays a title, price, feature list, and a call-to-action button with an icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, lightColors } from '@rneui/themed';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <PricingCard\n        color={lightColors.primary}\n        title=\"Free\"\n        price=\"$0\"\n        info={['1 User', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={lightColors.secondary}\n        title=\"Starter\"\n        price=\"$19\"\n        info={['10 Users', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={lightColors.secondary2}\n        title=\"Enterprise\"\n        price=\"$49\"\n        info={['100 Users', 'One on One Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n    </ScrollView>\n  </>\n);\n};\n\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Components in React Native Elements ButtonGroup (Class)\nDESCRIPTION: This snippet demonstrates initializing and using the ButtonGroup component within a React class component. It defines state to track the selected index, an update function triggered on press, and uses custom functional components (component1, component2, component3) rendered as Text elements for the buttons. The `buttons` prop accepts an array of objects, each with an `element` key pointing to the component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme in React Native Elements App\nDESCRIPTION: This snippet demonstrates how to create a custom theme and apply it to the entire app using ThemeProvider. It shows the setup in the main App component, including the creation of a custom theme for the MyCustomComponent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  MyCustomComponent: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <MyCustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering and Managing RNE CheckBox Components in React Native (TypeScript)\nDESCRIPTION: This snippet demonstrates how to render multiple @rneui/themed CheckBox components inside a functional React Native component using TypeScript. It utilizes the React useState hook to manage individual checkbox states and showcases various customization options, including custom icons, color variations, and placement. Dependencies include React, @rneui/themed, and optional @rneui/base or @rneui/icons if using custom icons. Key parameters managed are 'checked', 'onPress', icon options, and 'title'. Inputs are user press events, and outputs are UI state changes representing the checked or unchecked states. Ensure @rneui/themed and @rneui/icons are installed in your project to use these features.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { CheckBox, Icon } from '@rneui/themed';\\n\\ntype CheckboxComponentProps = {};\\n\\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\\nconst [check1, setCheck1] = useState(false);\\nconst [check2, setCheck2] = useState(false);\\nconst [check3, setCheck3] = useState(false);\\nconst [check4, setCheck4] = useState(false);\\n\\nreturn (\\n  <>\\n    <CheckBox\\n      center\\n      title=\\\"Click Here\\\"\\n      checked={check1}\\n      onPress={() => setCheck1(!check1)}\\n    />\\n\\n    <CheckBox\\n      center\\n      title=\\\"Click Here\\\"\\n      checkedIcon=\\\"dot-circle-o\\\"\\n      uncheckedIcon=\\\"circle-o\\\"\\n      checked={check2}\\n      onPress={() => setCheck2(!check2)}\\n    />\\n\\n    <CheckBox\\n      center\\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\\n      iconRight\\n      iconType=\\\"material\\\"\\n      checkedIcon=\\\"clear\\\"\\n      uncheckedIcon=\\\"add\\\"\\n      checkedColor=\\\"red\\\"\\n      checked={check3}\\n      onPress={() => setCheck3(!check3)}\\n    />\\n\\n    <CheckBox\\n      center\\n      checkedIcon={\\n        <Icon\\n          name=\\\"radio-button-checked\\\"\\n          type=\\\"material\\\"\\n          color=\\\"green\\\"\\n          size={25}\\n          iconStyle={{ marginRight: 10 }}\\n        />\\n      }\\n      uncheckedIcon={\\n        <Icon\\n          name=\\\"radio-button-unchecked\\\"\\n          type=\\\"material\\\"\\n          color=\\\"grey\\\"\\n          size={25}\\n          iconStyle={{ marginRight: 10 }}\\n        />\\n      }\\n      checked={check4}\\n      onPress={() => setCheck4(!check4)}\\n    />\\n  </>\\n);\\n};\\n\\nexport default CheckboxComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing AirbnbRating in a React Native Component (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Native functional component named 'Ratings'. It imports and utilizes the 'AirbnbRating' component from '@rneui/themed' to display star ratings. The example shows rendering the rating component with default props, in a disabled state, and with custom 'count', 'reviews', 'defaultRating', and 'size' properties. It also defines a placeholder callback function 'ratingCompleted' and includes styles defined using 'StyleSheet' for layout and appearance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews={[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]}\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Implementing @rneui/themed Sliders in a React Native Component (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Native functional component named `Sliders`. It utilizes the `Slider`, `Text`, and `Icon` components from `@rneui/themed` to display both a horizontal and a vertical slider. The `useState` hook manages the state for both slider values. The horizontal slider features a dynamically changing thumb color calculated by an `interpolate` function, while the vertical slider demonstrates orientation and basic thumb customization. Styling is applied using `StyleSheet.create`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from '@rneui/themed';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\nconst [value, setValue] = useState(0);\nconst [vertValue, setVertValue] = useState(0);\n\nconst interpolate = (start: number, end: number) => {\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n  return Math.ceil((1 - k) * start + k * end) % 256;\n};\n\nconst color = () => {\n  let r = interpolate(255, 0);\n  let g = interpolate(0, 255);\n  let b = interpolate(0, 0);\n  return `rgb(${r},${g},${b})`;\n};\n\nreturn (\n  <>\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n    <View style={[styles.contentView]}>\n      <Slider\n        value={value}\n        onValueChange={setValue}\n        maximumValue={10}\n        minimumValue={0}\n        step={1}\n        allowTouchTrack\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color={color()}\n            />\n          ),\n        }}\n      />\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n    </View>\n    <Text style={styles.subHeader}>Vertical Slider</Text>\n    <View style={styles.verticalContent}>\n      <Slider\n        value={vertValue}\n        onValueChange={setVertValue}\n        maximumValue={50}\n        minimumValue={20}\n        step={1}\n        orientation=\"vertical\"\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color=\"#f50\"\n            />\n          ),\n        }}\n      />\n    </View>\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  padding: 20,\n  width: '100%',\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nverticalContent: {\n  padding: 20,\n  flex: 1,\n  flexDirection: 'row',\n  height: 500,\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Components with withBadge HOC in React Native Elements\nDESCRIPTION: A comprehensive example demonstrating various Badge component implementations in React Native Elements, including standard badges with values, mini badges for status indicators, and badges as indicators on avatars and icons. The example shows how to use the withBadge Higher-Order Component to add badges to icons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\n\nconst BadgedIcon = withBadge(15)(Icon);\n\nconst BadgeComponent = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Standard Badge</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <Badge value=\"3\" status=\"success\" />\n        <Badge value=\"99+\" status=\"error\" />\n        <Badge value=\"500\" status=\"primary\" />\n        <Badge value=\"10\" status=\"warning\" />\n      </View>\n      <Text style={styles.subHeader}>Mini Badge</Text>\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 20,\n        }}\n      >\n        <Badge status=\"success\" />\n        <Badge status=\"error\" />\n        <Badge status=\"primary\" />\n        <Badge status=\"warning\" />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 20,\n        }}\n      >\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\n      </View>\n\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <View>\n          <Avatar\n            rounded\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\n            size=\"medium\"\n          />\n          <Badge\n            status=\"success\"\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\n          />\n        </View>\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n        <View>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\n            }}\n            size=\"large\"\n          />\n          <Badge\n            status=\"primary\"\n            value={10}\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Linear Progress Component in React Native Elements - JavaScript\nDESCRIPTION: This code snippet showcases the usage of the LinearProgress component from the @rneui/themed library in a React Native application. It includes both indeterminate and determinate progress bar variants, allows color customization, and provides buttons for users to start or reset the progress. The dependencies required are React Native, @rneui/themed, and core React hooks such as useState and useEffect. The component expects no external parameters, manages progress state internally, and displays the progress bar based on user interaction; initial progress is set to 0, and clicking 'Start Progress' animates the determinate bar to completion.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { Button, LinearProgress } from '@rneui/themed';\\n\\nconst LinearProgressAPI: React.FunctionComponent = () => {\\nconst [progress, setProgress] = React.useState(0);\\n\\nReact.useEffect(() => {\\n  let subs = true;\\n  if (progress < 1 && progress !== 0) {\\n    setTimeout(() => {\\n      if (subs) {\\n        setProgress(progress + 0.1);\\n      }\\n    }, 100);\\n  }\\n  return () => {\\n    subs = false;\\n  };\\n}, [progress]);\\n\\nreturn (\\n  <View>\\n    <View\\n      style={{\\n        margin: 10,\\n      }}\\n    >\\n      <Text>Indeterminate Variant </Text>\\n      <LinearProgress style={{ marginVertical: 10 }} />\\n      <Text>Indeterminate Variant with color</Text>\\n      <LinearProgress style={{ marginVertical: 10 }} color=\\\"red\\\" />\\n      <Text>Determinate Variant</Text>\\n      <LinearProgress\\n        style={{ marginVertical: 10 }}\\n        value={progress}\\n        variant=\\\"determinate\\\"\\n      />\\n\\n      <Button\\n        disabled={progress > 0}\\n        onPress={() => {\\n          setProgress(0.00001);\\n        }}\\n        title={'Start Progress'}\\n        containerStyle={{ margin: 10 }}\\n      />\\n      <Button\\n        disabled={progress === 0}\\n        onPress={() => {\\n          setProgress(0);\\n        }}\\n        title={'Restart'}\\n        containerStyle={{ margin: 10 }}\\n      />\\n    </View>\\n  </View>\\n);\\n};\\n\\nexport default LinearProgressAPI;\n```\n\n----------------------------------------\n\nTITLE: Rendering Pricing Cards with React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript code defines a functional React component that displays three pricing tiers using the PricingCard component from react-native-elements. Dependencies include react, react-native, and react-native-elements. The component wraps PricingCard elements in a ScrollView for vertical scrolling, and each card displays a price, list of included features, and a button configuration. Expected inputs: none (static data). Outputs: A scrollable UI with styled pricing cards. The code requires TypeScript, React Native, and react-native-elements to be installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/PricingCard/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, colors } from 'react-native-elements';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\n  return (\n    <>\n      <ScrollView>\n        <PricingCard\n          color={colors.primary}\n          title=\"Free\"\n          price=\"$0\"\n          info={['1 User', 'Basic Support', 'All Core Features']}\n          button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n        />\n        <PricingCard\n          color={colors.secondary}\n          title=\"Starter\"\n          price=\"$19\"\n          info={['10 Users', 'Basic Support', 'All Core Features']}\n          button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n        />\n        <PricingCard\n          color={colors.secondary2}\n          title=\"Enterprise\"\n          price=\"$49\"\n          info={['100 Users', 'One on One Support', 'All Core Features']}\n          button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n        />\n      </ScrollView>\n    </>\n  );\n};\n\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Using Rating and AirbnbRating Components in React Native Elements\nDESCRIPTION: Imports and demonstrates various usage patterns for the `Rating` and `AirbnbRating` components from `react-native-elements`. Examples cover default rendering, customizing props like `count`, `reviews`, `defaultRating`, `size`, `type`, `ratingImage`, `ratingColor`, `ratingBackgroundColor`, and handling the `onFinishRating` event with a callback function `ratingCompleted`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/rating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rating, AirbnbRating } from 'react-native-elements';\n\nratingCompleted(rating) {\n  console.log(\"Rating is: \" + rating)\n}\n\n<AirbnbRating />\n\n<AirbnbRating\n  count={11}\n  reviews={[\"Terrible\", \"Bad\", \"Meh\", \"OK\", \"Good\", \"Hmm...\", \"Very Good\", \"Wow\", \"Amazing\", \"Unbelievable\", \"Jesus\"]}\n  defaultRating={11}\n  size={20}\n/>\n\n<Rating\n  showRating\n  onFinishRating={this.ratingCompleted}\n  style={{ paddingVertical: 10 }}\n/>\n\n<Rating\n  type='heart'\n  ratingCount={3}\n  imageSize={60}\n  showRating\n  onFinishRating={this.ratingCompleted}\n/>\n\nconst WATER_IMAGE = require('./water.png')\n\n<Rating\n  type='custom'\n  ratingImage={WATER_IMAGE}\n  ratingColor='#3498db'\n  ratingBackgroundColor='#c8c7c8'\n  ratingCount={10}\n  imageSize={30}\n  onFinishRating={this.ratingCompleted}\n  style={{ paddingVertical: 10 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a List with Custom Avatar Logic using FlatList in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates using `FlatList` with conditional logic for the `Avatar` component within each `ListItem`. The `Avatar` either displays an image if `item.avatar_url` is provided or shows the first letter of `item.name` as a fallback title. It uses `ListItem`, `Avatar`, `ListItem.Content`, and `ListItem.Chevron`. Requires `ListItem` and `Avatar` from `@rneui/themed`, a data array (`list`), and `keyExtractor` and `renderItem` functions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Tile Styles with @rneui/themed in React Native\nDESCRIPTION: This TypeScript code defines a React functional component named `Tiles`. It demonstrates how to use the `Tile` component from `@rneui/themed` by rendering three distinct examples: a featured tile with text, a featured tile with an icon, and a tile with custom content elements. The component utilizes `ScrollView` for layout and applies styles using `StyleSheet`. Dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Tile\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from '@rneui/themed';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\nreturn (\n  <>\n    <View style={{ alignItems: 'center' }}>\n      <ScrollView style={{ paddingVertical: 10 }}>\n      <Text style={styles.subHeader}>Featured Tile</Text>\n        <Tile\n          imageSrc={{\n            uri:\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n          }}\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n          titleStyle={{ fontSize: 15 }}\n          featured\n          caption=\"Mahatma Gandhi\"\n          activeOpacity={1}\n          width={310}\n        />\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n        <View style={{ paddingTop: 20 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n            icon={{\n              name: 'heart',\n              type: 'font-awesome',\n              size: 60,\n              color: 'red',\n            }}\n            featured\n            activeOpacity={0.8}\n            onPress={() => {\n              'Tile pressed';\n            }}\n            width={310}\n          />\n        </View>\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n            }}\n            title=\"Half Dome, Yosemite\"\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n            activeOpacity={1}\n            width={310}\n            contentContainerStyle={{ height: 70 }}\n            style={{ paddingBottom: 20 }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text style={{ color: 'green' }}>Visit</Text>\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\n            </View>\n          </Tile>\n        </View>\n      </ScrollView>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Tiles;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonGroup with React Components in React Native\nDESCRIPTION: This snippet shows how to create a ButtonGroup using React components as button elements. It demonstrates state management for selected index and updating the state on button press.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Styled Buttons with Loading and Custom Styles - React Native Elements - JavaScript\nDESCRIPTION: This snippet renders a <Button> component from React Native Elements with customized styles, including background color, border radius, and padding. The button also displays a loading spinner with specified size and color using the loadingProps property. Key parameters customized include title, loading, titleStyle, buttonStyle, and containerStyle. The expected input is button-related props, and output is a styled button with a loading indicator. Dependencies: React Native, react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Button/snack/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  title=\"SIGN UP\"\n  loading={true}\n  loadingProps={{\n    size: 'small',\n    color: 'rgba(111, 202, 186, 1)',\n  }}\n  titleStyle={{ fontWeight: '700' }}\n  buttonStyle={{\n    backgroundColor: 'rgba(92, 99,216, 1)',\n    borderColor: 'transparent',\n    borderWidth: 0,\n    borderRadius: 5,\n    paddingVertical: 10,\n  }}\n  containerStyle={{\n    width: 200,\n    marginHorizontal: 50,\n    marginVertical: 10,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Merging New Theme Colors with updateTheme - TypeScript\nDESCRIPTION: Shows how to update the theme by merging new color values into the current theme using updateTheme. The example demonstrates changing the light mode primary color to 'purple' in a React Native Elements context provided by ThemeProvider. Requires '@rneui/themed' for access to updateTheme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nupdateTheme({\n  lightColors: {\n    primary: 'purple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating String and Component-Based ButtonGroups with State Management in React Native\nDESCRIPTION: This example shows both string-based and multi-select ButtonGroups using React Hooks for state management. It demonstrates how to handle button selections, set up multi-select functionality, and apply custom styling to the component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, {useState} from 'react'\nimport { ButtonGroup } from '@rneui/themed'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\nreturn (\n  <>\n    <Text style={styles.subHeader}>Using Strings</Text>\n    <ButtonGroup\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n      selectedIndex={selectedIndex}\n      onPress={(value) => {\n        setSelectedIndex(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <ButtonGroup\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\n      selectMultiple\n      selectedIndexes={selectedIndexes}\n      onPress={(value) => {\n        setSelectedIndexes(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <Text style={styles.subHeader}>Using Components</Text>\n  </>\n)\n}\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Button with Loading Spinner - React Native Elements - JSX\nDESCRIPTION: This snippet shows a Button displaying a loading spinner by setting the 'loading' prop to true. This disables user input and indicates a loading state. The button is styled as 'solid' with 'Solid' as the label. The 'loading' feature may require the ActivityIndicator component, which is bundled with React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\\\"Solid\\\" type=\\\"solid\\\" loading />\n```\n\n----------------------------------------\n\nTITLE: Using Badge and withBadge HOC in React Native Elements (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to import and use Badge, Avatar, Icon, and withBadge from React Native Elements within a React Native project. It covers creating standard and mini badges using different props, overlaying a mini badge on an Avatar, and enhancing an Icon with the withBadge higher-order component. The snippet also shows the use of decorator syntax to combine withBadge and connect for more advanced integrations. Dependencies include 'react-native' for core components and 'react-native-elements' for UI primitives. Key parameters such as 'value' and 'status' determine the badge content and color, while 'containerStyle' positions composite elements. Inputs and outputs include badge values (number, string, or component), and the decorated or original React components as rendered output.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Text, View } from 'react-native'\nimport { Avatar, Badge, Icon, withBadge } from 'react-native-elements'\n\n// Standard badge\n<Badge value=\"99+\" status=\"error\" />\n<Badge value={<Text>My Custom Badge</Text>} />\n\n// Mini badge\n<Badge status=\"success\" />\n<Badge status=\"error\" />\n<Badge status=\"primary\" />\n<Badge status=\"warning\" />\n\n// Avatar with mini badge\n<View>\n  <Avatar\n    rounded\n    source={{\n      uri: 'https://randomuser.me/api/portraits/men/41.jpg',\n    }}\n    size=\"large\"\n  />\n\n  <Badge\n    status=\"success\"\n    containerStyle={{ position: 'absolute', top: -4, right: -4 }}\n  />\n</View>\n\n// withBadge HOC\n\nconst BadgedIcon = withBadge(1)(Icon)\n<BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n\n// Using the decorator proposal\n@connect(state => ({\n  notifications: state.notifications,\n}))\n@withBadge(props => props.notifications.length)\nexport default class MyDecoratedIcon extends React.Component {\n  render() {\n    return (\n      <Icon type=\"ionicon\" name=\"md-cart\" />\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Interface Structure - TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure for a theme object, detailing color properties and platform-specific color groupings for iOS, Android, and web. It is meant as a type/interface reference for theme implementations and should be extended with actual color values. Key sections include nested structures for various color roles (primary, secondary, error, etc.) and a platform key for differentiated styles. Output is strictly for structure/type enforcement and not executable at runtime.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/2.theme object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    background;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dialog ModalComponent for React Native Web (JSX)\nDESCRIPTION: This snippet demonstrates how to configure the `Dialog` component for use with `react-native-web`. Since `react-native-web` does not have a built-in `Modal` implementation, a compatible one (like `modal-react-native-web`) must be imported and passed to the `ModalComponent` prop of the `Dialog`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Dialog ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Comprehensive React Native Elements Input Component Examples\nDESCRIPTION: A SnackPlayer example demonstrating various Input component configurations, including basic input, inputs with icons, custom icons, error messages, and password input with secure text entry.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Variants in React Native\nDESCRIPTION: Demonstrates how to render solid, outline, and clear button types using the Button component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button title=\"Solid\" />\n  <Button title=\"Outline\" type=\"outline\" />\n  <Button title=\"Clear\" type=\"clear\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering Various Input Component Variations (React Native Elements, JavaScript)\nDESCRIPTION: Provides a comprehensive example of how to render multiple Input components with diverse configurations: basic placeholder, icon integration (both by object and as a component), error message styling, and secure text entry behavior. Requires the React, React Native, @rneui/themed modules, and optionally a state management mechanism for onChangeText handlers. Parameters such as placeholder, leftIcon, errorStyle, and secureTextEntry are showcased. Outputs a fragment containing six styled Input components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Button Behavior with CheckBox in TypeScript\nDESCRIPTION: Illustrates how to use CheckBox components to mimic radio button behavior. It uses state to track the selected index and updates it via the onPress handler. Custom icons ('dot-circle-o' and 'circle-o') are used for the checked and unchecked states.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/CheckBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [selectedIndex, setIndex] = React.useState(0);\n\n     return (\n       <Stack row align=\"center\" spacing={4}>\n         <CheckBox\n           checked={selectedIndex === 0}\n           onPress={() => setIndex(0)}\n           checkedIcon=\"dot-circle-o\"\n           uncheckedIcon=\"circle-o\"\n         />\n         <CheckBox\n           checked={selectedIndex === 1}\n           onPress={() => setIndex(1)}\n           checkedIcon=\"dot-circle-o\"\n           uncheckedIcon=\"circle-o\"\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Initializing a Button with React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates a minimal application in TypeScript which renders a Button component using the React Native Elements library. It imports the Button from '@rneui/base' and returns it with a title prop. Ensure '@rneui/base' is installed as a dependency, and use this in a functional React Native or Expo app. The Button has one key parameter, 'title', which determines the displayed label. Input is not required from users, and the output is a UI Button rendered on the screen. No customization or theming is present, making this snippet suitable as a basic integration starter.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Button } from '@rneui/base';\\n\\nconst App = () => {\\n  return <Button title=\\\"Hello World\\\" />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Swipeable List Item with React Native Elements in JavaScript\nDESCRIPTION: This code demonstrates how to use the <ListItem.Swipeable> component from React Native Elements to provide swipeable list functionality. It defines left and right swipe actions: swiping right displays an 'Info' button and swiping left displays a 'Delete' button, both using the Button component and resetting the swipe state upon press. The snippet requires React Native and React Native Elements dependencies. Key props include leftContent and rightContent, each defined as a function returning a Button with onPress handlers. The ListItem contains a custom Icon, Title, and Chevron, and is designed for use within a FlatList or similar React Native list rendering context. Inputs are gestures on the ListItem; outputs are actions triggered by button presses. This approach allows for enhanced interactivity in mobile UIs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\n<ListItem.Swipeable\\n  leftContent={(reset) => (\\n    <Button\\n      title=\\\"Info\\\"\\n      onPress={() => reset()}\\n      icon={{ name: 'info', color: 'white' }}\\n      buttonStyle={{ minHeight: '100%' }}\\n    />\\n  )}\\n  rightContent={(reset) => (\\n    <Button\\n      title=\\\"Delete\\\"\\n      onPress={() => reset()}\\n      icon={{ name: 'delete', color: 'white' }}\\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\\n    />\\n  )}\\n>\\n  <Icon name=\\\"My Icon\\\" />\\n  <ListItem.Content>\\n    <ListItem.Title>Hello Swiper</ListItem.Title>\\n  </ListItem.Content>\\n  <ListItem.Chevron />\\n</ListItem.Swipeable>\\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Theme Mode with useColorScheme - TypeScript\nDESCRIPTION: Illustrates how to use the useColorScheme hook from React Native to automatically detect the user's preferred color scheme and set the theme mode accordingly. The snippet creates a theme and applies the current color scheme to it before passing to ThemeProvider. Dependencies: 'react-native', '@rneui/themed'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useColorScheme } from 'react-native';\n\nconst theme = createTheme({\n  // ...\n});\n\nexport const App = () => {\n  theme.mode = useColorScheme();\n\n  return (\n    <ThemeProvider theme={theme}>\n      {/*...*/}\n      {/*...*/}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Elements component usage\nDESCRIPTION: Simple example showing how to import and use a Button component from React Native Elements. This demonstrates the basic implementation pattern for using components from the library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@rneui/base';\n\nconst App = () => <Button title=\"Hello World!\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal and Vertical Sliders in React Native with RNE\nDESCRIPTION: This snippet demonstrates the creation of horizontal and vertical sliders using the Slider component from React Native Elements. It includes custom styling, dynamic color interpolation for the horizontal slider, and icon integration for both sliders.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from '@rneui/themed';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\nconst [value, setValue] = useState(0);\nconst [vertValue, setVertValue] = useState(0);\n\nconst interpolate = (start: number, end: number) => {\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n  return Math.ceil((1 - k) * start + k * end) % 256;\n};\n\nconst color = () => {\n  let r = interpolate(255, 0);\n  let g = interpolate(0, 255);\n  let b = interpolate(0, 0);\n  return `rgb(${r},${g},${b})`;\n};\n\nreturn (\n  <>\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n    <View style={[styles.contentView]}>\n      <Slider\n        value={value}\n        onValueChange={setValue}\n        maximumValue={10}\n        minimumValue={0}\n        step={1}\n        allowTouchTrack\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color={color()}\n            />\n          ),\n        }}\n      />\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n    </View>\n    <Text style={styles.subHeader}>Vertical Slider</Text>\n    <View style={styles.verticalContent}>\n      <Slider\n        value={vertValue}\n        onValueChange={setVertValue}\n        maximumValue={50}\n        minimumValue={20}\n        step={1}\n        orientation=\"vertical\"\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color=\"#f50\"\n            />\n          ),\n        }}\n      />\n    </View>\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  padding: 20,\n  width: '100%',\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nverticalContent: {\n  padding: 20,\n  flex: 1,\n  flexDirection: 'row',\n  height: 500,\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Implementing Single and Multiple Selection ButtonGroups in React Native\nDESCRIPTION: This React Native functional component demonstrates the usage of the `ButtonGroup` component from `react-native-elements`. It initializes state using `useState` to manage the selected index for a single-select `ButtonGroup` and an array of selected indices for a multi-select `ButtonGroup`. The `onPress` prop handles updates to the selection state. Basic styling is applied using `StyleSheet` and `containerStyle`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ButtonGroup/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE ButtonGroup\nimport React, {useState} from 'react'\nimport { ButtonGroup } from 'react-native-elements'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n  return (\n    <>\n      <Text style={styles.subHeader}>Using Strings</Text>\n      <ButtonGroup\n        buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n        selectedIndex={selectedIndex}\n        onPress={(value) => {\n          setSelectedIndex(value);\n        }}\n        containerStyle={{ marginBottom: 20 }}\n      />\n      <ButtonGroup\n        buttons={['Multiple', 'Select', 'Button', 'Group']}\n        selectMultiple\n        selectedIndexes={selectedIndexes}\n        onPress={(value) => {\n          setSelectedIndexes(value);\n        }}\n        containerStyle={{ marginBottom: 20 }}\n      />\n      <Text style={styles.subHeader}>Using Components</Text>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  }\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay Component with React Native Elements in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an Overlay component using React Native Elements. It includes a toggle button to show/hide the overlay, and showcases the use of Button and Icon components within the overlay. The component uses React hooks for state management.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Overlay/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from 'react-native-elements';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleOverlay = () => {\n    setVisible(!visible);\n  };\n\n  return (\n    <View>\n      <Button\n        title=\"Open Overlay\"\n        onPress={toggleOverlay}\n        buttonStyle={styles.button}\n      />\n      <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n        <Text style={styles.textPrimary}>Hello!</Text>\n        <Text style={styles.textSecondary}>\n          Welcome to React Native Elements\n        </Text>\n        <Button\n          icon={\n            <Icon\n              name=\"wrench\"\n              type=\"font-awesome\"\n              color=\"white\"\n              size={25}\n              iconStyle={{ marginRight: 10 }}\n            />\n          }\n          title=\"Start Building\"\n          onPress={toggleOverlay}\n        />\n      </Overlay>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    margin: 10,\n  },\n  textPrimary: {\n    marginVertical: 20,\n    textAlign: 'center',\n    fontSize: 20,\n  },\n  textSecondary: {\n    marginBottom: 10,\n    textAlign: 'center',\n    fontSize: 17,\n  },\n});\n\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Rendering List with Avatars Using FlatList in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates leveraging React Native's FlatList to efficiently render a list of profiles with avatars, names, and subtitles, using ListItem components. Dependencies include '@rneui/themed' and React Native's FlatList. It expects an array of objects, provides keyExtractor and renderItem functions, and outputs an interactive, performant list suitable for handling large datasets.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Featured Tile in React Native Elements\nDESCRIPTION: Demonstrates how to create a featured tile with an image, title, and caption. The featured prop enables a larger, more prominent display style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/tile.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  title=\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores dolore exercitationem\"\n  featured\n  caption=\"Some Caption Text\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Rendering a List with FlatList and Avatar using @rneui/themed in JavaScript\nDESCRIPTION: Implements a list using React Native's `FlatList` component for optimized rendering of potentially long lists. The `renderItem` function defines how each item is displayed using `ListItem` and `Avatar` from `@rneui/themed`, including a chevron. Requires `@rneui/themed` library and React Native's `FlatList`. Essential `FlatList` props `keyExtractor` and `renderItem` are defined to handle data iteration and item rendering.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Grid with React Native Elements\nDESCRIPTION: This snippet creates a component that renders a grid of images using FlatList and the Image component from React Native Elements. It fetches random images from Unsplash, displays them in a two-column layout, and shows an ActivityIndicator as a placeholder while images are loading.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Image } from '@rneui/themed';\n\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\n\nconst ImageAPI = () => {\nreturn (\n  <>\n    <SafeAreaView>\n      <FlatList\n        data={[...new Array(10)].map((_, i) => i.toString())}\n        style={styles.list}\n        numColumns={2}\n        keyExtractor={(e) => e}\n        renderItem={({ item }) => (\n          <Image\n            source={{ uri: BASE_URI + item }}\n            containerStyle={styles.item}\n            PlaceholderContent={<ActivityIndicator />}\n          />\n        )}\n      />\n    </SafeAreaView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nlist: {\n  width: '100%',\n  backgroundColor: '#000',\n},\nitem: {\n  aspectRatio: 1,\n  width: '100%',\n  flex: 1,\n},\n});\n\nexport default ImageAPI;\n```\n\n----------------------------------------\n\nTITLE: Basic Button Implementation in React Native Elements\nDESCRIPTION: A simple implementation of a solid button using the Button component from react-native-elements. This creates a standard button with a title.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid Button\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Global Button Styles with ThemeProvider in JSX\nDESCRIPTION: Illustrates how to use the `ThemeProvider` from `react-native-elements` to apply consistent styling across multiple `Button` components. A theme object is defined to set the `raised` prop to `true` for all `Button` instances within the `ThemeProvider`'s scope, leveraging React's Context API.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    raised: true,\n  },\n};\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n      <Button title=\"My 2nd Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with useTheme Hook - React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates the use of the useTheme hook from @rneui/themed to access the current theme within a functional component. It retrieves the theme context and applies theme-based styling to a View component. This approach assumes the app is wrapped in a ThemeProvider but will fallback to a default theme if not. Inputs required are none; outputs a themed component based on the global or default theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/1.themprovider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\\n\\nfunction Demo() {\\n  const { theme } = useTheme();\\n  return <View style={{ background: theme.colors.primary }} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating withBadge HOC and Badge Variants in React Native Elements (JavaScript)\nDESCRIPTION: This React Native code snippet showcases how to utilize the withBadge HOC and the Badge component from @rneui/themed to add numerical and status badges to icons, avatars, and as standalone indicators. It requires dependencies: react, react-native, and @rneui/themed. The BadgeComponent component illustrates different badge use cases: standard badges with values and status, mini badges for status-only display, and indicator badges over avatars and icons. Key parameters include 'value' for badge number/text and 'status' for color/state. The component expects no props and renders various badge configurations within styled containers. Limitations include dependency on React Native and @rneui/themed. Outputs are rendered badge elements as part of the UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\\n\\nconst BadgedIcon = withBadge(15)(Icon);\\n\\nconst BadgeComponent = () => {\\nreturn (\\n  <>\\n    <ScrollView>\\n      <Text style={styles.subHeader}>Standard Badge</Text>\\n      <View\\n        style={{\\n          flexDirection: 'row',\\n          justifyContent: 'space-around',\\n          marginTop: 20,\\n          marginBottom: 40,\\n        }}\\n      >\\n        <Badge value=\"3\" status=\"success\" />\\n        <Badge value=\"99+\" status=\"error\" />\\n        <Badge value=\"500\" status=\"primary\" />\\n        <Badge value=\"10\" status=\"warning\" />\\n      </View>\\n      <Text style={styles.subHeader}>Mini Badge</Text>\\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\\n      <View\\n        style={{\\n          flexDirection: 'row',\\n          justifyContent: 'space-around',\\n          marginTop: 20,\\n          marginBottom: 20,\\n        }}\\n      >\\n        <Badge status=\"success\" />\\n        <Badge status=\"error\" />\\n        <Badge status=\"primary\" />\\n        <Badge status=\"warning\" />\\n      </View>\\n      <View\\n        style={{\\n          flexDirection: 'row',\\n          justifyContent: 'space-around',\\n          marginBottom: 20,\\n        }}\\n      >\\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\\n      </View>\\n\\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\\n      <View\\n        style={{\\n          flexDirection: 'row',\\n          justifyContent: 'space-around',\\n          marginTop: 20,\\n          marginBottom: 40,\\n        }}\\n      >\\n        <View>\\n          <Avatar\\n            rounded\\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\\n            size=\"medium\"\\n          />\\n          <Badge\\n            status=\"success\"\\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\\n          />\\n        </View>\\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\\n        <View>\\n          <Avatar\\n            rounded\\n            source={{\\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\\n            }}\\n            size=\"large\"\\n          />\\n          <Badge\\n            status=\"primary\"\\n            value={10}\\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\\n          />\\n        </View>\\n      </View>\\n    </ScrollView>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nsubHeader: {\\n  backgroundColor : \"#2089dc\",\\n  color : \"white\",\\n  textAlign : \"center\",\\n  paddingVertical : 5,\\n  marginBottom : 10\\n}\\n})\\n\\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic and Styled Buttons with React Native Elements\nDESCRIPTION: A comprehensive demonstration of React Native Elements Button component with various styling options and configurations. The code showcases multiple button variants including basic, rounded, light, and loading buttons with different colors, shapes, and states.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\n\ntype ButtonsComponentProps = {};\n\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <Text style={styles.subHeader}>Basic Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title={'React Native Elements'}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Basic Button\"\n              buttonStyle={{\n                backgroundColor: 'rgba(78, 116, 289, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Dark\"\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n\n            <Button\n              title=\"Log in\"\n              loading={false}\n              loadingProps={{ size: 'small', color: 'white' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderRadius: 5,\n              }}\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n              containerStyle={{\n                marginHorizontal: 50,\n                height: 50,\n                width: 200,\n                marginVertical: 10,\n              }}\n              onPress={() => console.log('aye')}\n            />\n            <Button\n              title=\"Secondary\"\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Warning\"\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Danger\"\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n            <Button\n              title=\"Request an agent\"\n              titleStyle={{ fontWeight: '500' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"LOG IN\"\n              buttonStyle={{\n                backgroundColor: 'black',\n                borderWidth: 2,\n                borderColor: 'white',\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ fontWeight: 'bold' }}\n            />\n            <Button\n              title=\"HOME\"\n              icon={{\n                name: 'home',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconContainerStyle={{ marginRight: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(90, 154, 230, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"PROFILE\"\n              icon={{\n                name: 'user',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title={<CustomTitle />}\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\n              linearGradientProps={{\n                colors: ['#FF9800', '#F44336'],\n                start: [1, 0],\n                end: [0.2, 0],\n              }}\n              buttonStyle={{\n                borderWidth: 0,\n                borderColor: 'transparent',\n                borderRadius: 20,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              icon={{\n                name: 'arrow-right',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Light Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"SIGN UP\"\n              disabled={true}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Outline Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Raised Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              raised\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              title=\"Clear Button\"\n              type=\"clear\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n            />\n            <Button\n              title=\"Light\"\n              buttonStyle={{\n                backgroundColor: 'rgba(244, 244, 244, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\n            />\n          </View>\n          <Text style={styles.subHeader}>Loading Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"HOME\"\n              loading\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 40,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"SIGN UP\"\n              loading={true}\n              loadingProps={{\n                size: 'small',\n                color: 'rgba(111, 202, 186, 1)',\n              }}\n              titleStyle={{ fontWeight: '700' }}\n```\n\n----------------------------------------\n\nTITLE: Implementing withBadge Higher-Order Component in React Native Elements with JavaScript\nDESCRIPTION: This snippet demonstrates the usage of the withBadge HOC from @rneui/themed to decorate icons and avatars with badges in a React Native application. Dependencies include React, React Native core components, @rneui/themed (providing Avatar, Badge, Icon, and withBadge), and a StyleSheet for basic styling. The BadgeComponent showcases standard badges with value and status props, mini badges (no value prop), and badges as overlay indicators on avatars and icons. Key parameters include badge values, statuses, avatar image URIs, and customized container styles for positioning. The component expects to run within a React Native app with @rneui/themed installed, and outputs a scrollable view of badges with various configurations. There are no major functional limitations, but appearance relies on the theming and platform support for React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\n\nconst BadgedIcon = withBadge(15)(Icon);\n\nconst BadgeComponent = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Standard Badge</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <Badge value=\"3\" status=\"success\" />\n        <Badge value=\"99+\" status=\"error\" />\n        <Badge value=\"500\" status=\"primary\" />\n        <Badge value=\"10\" status=\"warning\" />\n      </View>\n      <Text style={styles.subHeader}>Mini Badge</Text>\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 20,\n        }}\n      >\n        <Badge status=\"success\" />\n        <Badge status=\"error\" />\n        <Badge status=\"primary\" />\n        <Badge status=\"warning\" />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 20,\n        }}\n      >\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\n      </View>\n\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <View>\n          <Avatar\n            rounded\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\n            size=\"medium\"\n          />\n          <Badge\n            status=\"success\"\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\n          />\n        </View>\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n        <View>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\n            }}\n            size=\"large\"\n          />\n          <Badge\n            status=\"primary\"\n            value={10}\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Various FAB Configurations in React Native using RNEUI/Themed\nDESCRIPTION: This React Native code snippet demonstrates the usage of the `FAB` (Floating Action Button) component from the `@rneui/themed` library. It initializes state using `React.useState` to control visibility and renders several FAB instances, showcasing different sizes (`small`, default/large), colors (default, `green`, `red`), icons (`add`, `place`, `delete`, `edit`), titles (`Navigate`, `Extended`, `Hide`, `Show`), a loading state, a disabled state, and placement (`right`, `left`). An `onPress` handler toggles the visibility state for the \"Hide\" and \"Show\" buttons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE FAB\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { FAB } from '@rneui/themed';\n\nexport default () => {\nconst [visible, setVisible] = React.useState(true);\n\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Small Size\n      </Text>\n      <FAB\n        loading\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        size=\"small\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Large Size\n      </Text>\n      <FAB\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        color=\"green\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Primary Color\n      </Text>\n      <FAB\n        visible={visible}\n        title=\"Navigate\"\n        upperCase\n        icon={{ name: 'place', color: 'white' }}\n      />\n\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\n\n      <FAB\n        visible={visible}\n        disabled\n        title=\"Extended\"\n        icon={{\n          name: 'place',\n          color: 'white',\n        }}\n      />\n      <FAB\n        visible={visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"right\"\n        title=\"Hide\"\n        icon={{ name: 'delete', color: 'white' }}\n        color=\"red\"\n      />\n      <FAB\n        visible={!visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"left\"\n        title=\"Show\"\n        icon={{ name: 'edit', color: 'white' }}\n        color=\"green\"\n      />\n    </View>\n  </>\n);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs in React Native Elements (TypeScript)\nDESCRIPTION: Demonstrates the fundamental usage of the `Tab` component. It includes two `Tab.Item` children, sets the initially active tab using the `value` prop (index 0), and applies the `primary` visual variant. This example renders a static set of tabs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Tab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx live\n<Tab value={0} variant=\"primary\">\n  <Tab.Item>Tab</Tab.Item>\n  <Tab.Item>Tab</Tab.Item>\n</Tab>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Tooltip Variations Using React Native Elements (TypeScript)\nDESCRIPTION: This self-contained React functional component showcases multiple Tooltip variations using the @rneui/themed library, with different props such as backgroundColor, width, withPointer, and custom popover content. It demonstrates layout using ScrollView and View, and uses a custom StyleSheet for styling. Dependencies include '@rneui/themed' for Tooltips and colors, and 'react-native' core components. Expected input is no props, while output is a rendered ScrollView containing several styled Tooltip examples, each with different appearances and behaviors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, colors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\n\nconst { height } = Dimensions.get('window');\n\ntype ToolTipComponentProps = {};\n\nconst TooltipComponent: React.FunctionComponent<ToolTipComponentProps> = () => {\nconst toolProps = {};\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <Tooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </Tooltip>\n          <Tooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={colors.primary}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            backgroundColor={colors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n          <Tooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </Tooltip>\n          <Tooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Custom Header Component Implementation in React Native\nDESCRIPTION: This snippet showcases a complete implementation of a custom Header component using React Native Elements. It includes navigation buttons, styling, and integration with SafeAreaProvider. The component uses TypeScript for type definitions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient and Scale Feedback to ListItem - React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to render a ListItem from React Native Elements with a touchable scaling effect and a linear gradient background. It requires the '@rneui/themed', 'react-native-touchable-scale', and 'react-native-linear-gradient' packages. Key parameters include linearGradientProps (to set gradient colors and direction), Component (set to TouchableScale for feedback), and ViewComponent (set to LinearGradient for the background). The list item includes an avatar, title, subtitle, and a chevron, all styled for light text on a colored background. The input expects avatar_url and displays hard-coded user content for illustration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchBar Component in React Native\nDESCRIPTION: Demonstrates a complete example of implementing a SearchBar component with state management and styling in React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SearchBar } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SearchBarComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\nconst [search, setSearch] = useState(\"\");\n\nconst updateSearch = (search) => {\n  setSearch(search);\n};\n\nreturn (\n  <View style={styles.view}>\n    <SearchBar\n      placeholder=\"Type Here...\"\n      onChangeText={updateSearch}\n      value={search}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Rendering Varied Avatars in React Native Elements - TypeScript\nDESCRIPTION: This code defines a React functional component that renders a scrollable view containing different sections of avatar displays, including image avatars, icon avatars, letter avatars, and badged avatars, using the Avatar component from @rneui/themed. It organizes the avatar data through a chunking utility, layouts avatars in rows, and customizes their appearance through props such as size, icon, title, and containerStyle. The component requires @rneui/themed, react, and react-native as dependencies, with optional images loaded via network URLs. It expects no special input parameters, rendering its avatars based on internally defined lists; output is a visually styled and scrollable set of avatar examples useful as UI demonstrations or for onboarding developers to the Avatar component's capabilities.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Using ButtonGroup with Strings and Multiple Selection in React Native (Hooks)\nDESCRIPTION: This SnackPlayer example shows how to use the `ButtonGroup` component from `@rneui/themed` within a functional React Native component using Hooks (`useState`). It demonstrates creating button groups with simple string arrays, handling single selection (`selectedIndex`), and enabling multiple selections (`selectMultiple` prop with `selectedIndexes`). Basic styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, {useState} from 'react'\nimport { ButtonGroup } from '@rneui/themed'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\nreturn (\n  <>\n    <Text style={styles.subHeader}>Using Strings</Text>\n    <ButtonGroup\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n      selectedIndex={selectedIndex}\n      onPress={(value) => {\n        setSelectedIndex(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <ButtonGroup\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\n      selectMultiple\n      selectedIndexes={selectedIndexes}\n      onPress={(value) => {\n        setSelectedIndexes(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <Text style={styles.subHeader}>Using Components</Text>\n  </>\n)\n}\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Progress Component with React Native Elements\nDESCRIPTION: A functional component that demonstrates different variants of LinearProgress component including indeterminate and determinate progress bars. The component uses React hooks (useState and useEffect) to manage progress state and includes buttons to control the progress animation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from '@rneui/themed';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\nconst [progress, setProgress] = React.useState(0);\n\nReact.useEffect(() => {\n  let subs = true;\n  if (progress < 1 && progress !== 0) {\n    setTimeout(() => {\n      if (subs) {\n        setProgress(progress + 0.1);\n      }\n    }, 100);\n  }\n  return () => {\n    subs = false;\n  };\n}, [progress]);\n\nreturn (\n  <View>\n    <View\n      style={{\n        margin: 10,\n      }}\n    >\n      <Text>Indeterminate Variant </Text>\n      <LinearProgress style={{ marginVertical: 10 }} />\n      <Text>Indeterminate Variant with color</Text>\n      <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n      <Text>Determinate Variant</Text>\n      <LinearProgress\n        style={{ marginVertical: 10 }}\n        value={progress}\n        variant=\"determinate\"\n      />\n\n      <Button\n        disabled={progress > 0}\n        onPress={() => {\n          setProgress(0.00001);\n        }}\n        title={'Start Progress'}\n        containerStyle={{ margin: 10 }}\n      />\n      <Button\n        disabled={progress === 0}\n        onPress={() => {\n          setProgress(0);\n        }}\n        title={'Restart'}\n        containerStyle={{ margin: 10 }}\n      />\n    </View>\n  </View>\n);\n};\n\nexport default LinearProgressAPI;\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Components with React Native Elements in TypeScript\nDESCRIPTION: This snippet defines a TypeScript React functional component (â€˜Cardsâ€™) which renders multiple Card UI elements using the â€˜@rneui/themedâ€™ library. It displays a scrollable list of user avatars/names, stylized text headers, and an image card with a button. The component utilizes React Native primitives (View, ScrollView, StyleSheet, Image) and expects no props. Dependencies include â€˜reactâ€™, â€˜react-nativeâ€™, and â€˜@rneui/themedâ€™.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n{\n  name: 'brynn',\n  avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n},\n{\n  name: 'thot leader',\n  avatar:\n    'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n},\n{\n  name: 'jsa',\n  avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n},\n{\n  name: 'talhaconcepts',\n  avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n},\n{\n  name: 'andy vitale',\n  avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n},\n{\n  name: 'katy friedson',\n  avatar:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n},\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.container}>\n        <Card>\n          <Card.Title>CARD WITH DIVIDER</Card.Title>\n          <Card.Divider />\n          {users.map((u, i) => {\n            return (\n              <View key={i} style={styles.user}>\n                <Image\n                  style={styles.image}\n                  resizeMode=\"cover\"\n                  source={{ uri: u.avatar }}\n                />\n                <Text style={styles.name}>{u.name}</Text>\n              </View>\n            );\n          })}\n        </Card>\n        <Card containerStyle={{ marginTop: 15 }}>\n          <Card.Title>FONTS</Card.Title>\n          <Card.Divider />\n          <Text style={styles.fonts} h1>\n            h1 Heading\n          </Text>\n          <Text style={styles.fonts} h2>\n            h2 Heading\n          </Text>\n          <Text style={styles.fonts} h3>\n            h3 Heading\n          </Text>\n          <Text style={styles.fonts} h4>\n            h4 Heading\n          </Text>\n          <Text style={styles.fonts}>Normal Text</Text>\n        </Card>\n        <Card>\n          <Card.Title>HELLO WORLD</Card.Title>\n          <Card.Divider />\n          <Card.Image\n            style={{ padding: 0 }}\n            source={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n          />\n          <Text style={{ marginBottom: 10 }}>\n            The idea with React Native Elements is more about component\n            structure than actual design.\n          </Text>\n          <Button\n            icon={\n              <Icon\n                name=\"code\"\n                color=\"#ffffff\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              borderRadius: 0,\n              marginLeft: 0,\n              marginRight: 0,\n              marginBottom: 0,\n            }}\n            title=\"VIEW NOW\"\n          />\n        </Card>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nfonts: {\n  marginBottom: 8,\n},\nuser: {\n  flexDirection: 'row',\n  marginBottom: 6,\n},\nimage: {\n  width: 30,\n  height: 30,\n  marginRight: 10,\n},\nname: {\n  fontSize: 16,\n  marginTop: 5,\n},\n});\n\nexport default Cards;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Linear Gradient and TouchableScale in React Native Elements\nDESCRIPTION: This snippet demonstrates how to create a ListItem with a linear gradient background and scale animation feedback. It uses TouchableScale for the touch animation and LinearGradient for the background effect.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n\n----------------------------------------\n\nTITLE: Showcasing FAB Variants with React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Floating Action Button (FAB) component from the @rneui/themed package within a React Native functional component. It features multiple FABs with various properties including loading indication, visibility, size (small/large), color customization, primary/extended mode, and enabled/disabled states. State management using React hooks enables toggling the visibility of some FABs. Dependencies include React, React Native (View, Text), and the @rneui/themed package. Input and output are user interactions triggering FAB visibility changes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { FAB } from '@rneui/themed';\\n\\nexport default () => {\\nconst [visible, setVisible] = React.useState(true);\\n\\nreturn (\\n  <>\\n    <View\\n      style={{\\n        alignItems: 'center',\\n        paddingVertical: 5,\\n        flexGrow: 1,\\n      }}\\n    >\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Small Size\\n      </Text>\\n      <FAB\\n        loading\\n        visible={visible}\\n        icon={{ name: 'add', color: 'white' }}\\n        size=\"small\"\\n      />\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Large Size\\n      </Text>\\n      <FAB\\n        visible={visible}\\n        icon={{ name: 'add', color: 'white' }}\\n        color=\"green\"\\n      />\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Primary Color\\n      </Text>\\n      <FAB\\n        visible={visible}\\n        title=\"Navigate\"\\n        upperCase\\n        icon={{ name: 'place', color: 'white' }}\\n      />\\n\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\\n\\n      <FAB\\n        visible={visible}\\n        disabled\\n        title=\"Extended\"\\n        icon={{\\n          name: 'place',\\n          color: 'white',\\n        }}\\n      />\\n      <FAB\\n        visible={visible}\\n        onPress={() => setVisible(!visible)}\\n        placement=\"right\"\\n        title=\"Hide\"\\n        icon={{ name: 'delete', color: 'white' }}\\n        color=\"red\"\\n      />\\n      <FAB\\n        visible={!visible}\\n        onPress={() => setVisible(!visible)}\\n        placement=\"left\"\\n        title=\"Show\"\\n        icon={{ name: 'edit', color: 'white' }}\\n        color=\"green\"\\n      />\\n    </View>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Component Variants in TypeScript\nDESCRIPTION: Demonstrates how to render different shapes of the Skeleton component. The first example shows the default rectangular shape, while the second uses the `circle` prop to create a circular skeleton placeholder. `width` and `height` props control the dimensions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <Skeleton width={120} height={40} />\n  <Skeleton circle width={40} height={40} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying LinearGradient to ListItem with React Native Elements (TypeScript/React Native)\nDESCRIPTION: This snippet illustrates how to apply a linear gradient background to a ListItem by passing linearGradientProps and specifying ViewComponent as LinearGradient. The example includes an Avatar and stylized text, with a white chevron for contrast. Dependencies: '@rneui/themed', 'react-native-linear-gradient' or equivalent. Inputs: linear gradient properties (colors, start, end), avatar URI, styled title/subtitle. Outputs: visually rich list item with gradient effect. Limitation: external LinearGradient component needed if not using Expo.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<ListItem\n  linearGradientProps={{\n    colors: [\"#FF9800\", \"#F44336\"],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar\n    rounded\n    source={{ uri: \"https://randomuser.me/api/portraits/men/33.jpg\" }}\n  />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: \"white\", fontWeight: \"bold\" }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: \"white\" }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Custom Theme - React Native Elements (JSX/JavaScript)\nDESCRIPTION: This React/JSX snippet shows how to create a custom theme using createTheme, specifying light and dark primary colors, and applying it app-wide with ThemeProvider. It imports ThemeProvider and createTheme from @rneui/themed, then demonstrates passing the customized theme object via the theme prop. Inputs are color overrides for lightColors and darkColors; output is a themed component tree. Requires @rneui/themed installed and used within a React Native/React app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/2.theme object.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Checkbox in TSX\nDESCRIPTION: An example function demonstrating how to include a `ListItem.CheckBox` within ListItems. It uses `React.useState` to manage the checked state of multiple checkboxes and shows customization options like `iconType`, `checkedIcon`, and `uncheckedIcon`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction () {\n     const [checked, setChecked] = React.useState([false, false]);\n     return (\n       <>\n         <ListItem bottomDivider>\n           <ListItem.CheckBox\n             // Use ThemeProvider to change the defaults of the checkbox\n             iconType=\"material-community\"\n             checkedIcon=\"checkbox-marked\"\n             uncheckedIcon=\"checkbox-blank-outline\"\n             checked={checked[0]}\n             onPress={() => setChecked([!checked[0], checked[1]])}\n           />\n           <ListItem.Content>\n             <ListItem.Title>User 1</ListItem.Title>\n             <ListItem.Subtitle>CA, US</ListItem.Subtitle>\n           </ListItem.Content>\n           <ListItem.Chevron />\n         </ListItem>\n         <ListItem bottomDivider>\n           <ListItem.CheckBox\n             // Use ThemeProvider to change the defaults of the checkbox\n             iconType=\"material-community\"\n             checkedIcon=\"checkbox-marked\"\n             uncheckedIcon=\"checkbox-blank-outline\"\n             checked={checked[1]}\n             onPress={() => setChecked([checked[0], !checked[1]])}\n           />\n           <ListItem.Content>\n             <ListItem.Title>User 2</ListItem.Title>\n             <ListItem.Subtitle>HR, India</ListItem.Subtitle>\n           </ListItem.Content>\n           <ListItem.Chevron />\n         </ListItem>\n       </>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient with Header in React Native Elements\nDESCRIPTION: Example of using LinearGradient with the Header component in React Native Elements. This snippet demonstrates how to configure gradient colors, start and end points while properly setting up the ViewComponent prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Image Grid with RNE Image and FlatList in React Native\nDESCRIPTION: This React Native functional component (`ImageAPI`) displays a 2-column grid of 10 images using `FlatList`. It leverages the `Image` component from `@rneui/themed` to render images fetched from `https://source.unsplash.com/random`. An `ActivityIndicator` is shown as a placeholder while each image loads. Key dependencies include `react`, `react-native` components (`FlatList`, `SafeAreaView`, `StyleSheet`, `ActivityIndicator`), and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE Image\nimport React from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Image } from '@rneui/themed';\n\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\n\nconst ImageAPI = () => {\nreturn (\n  <>\n    <SafeAreaView>\n      <FlatList\n        data={[...new Array(10)].map((_, i) => i.toString())}\n        style={styles.list}\n        numColumns={2}\n        keyExtractor={(e) => e}\n        renderItem={({ item }) => (\n          <Image\n            source={{ uri: BASE_URI + item }}\n            containerStyle={styles.item}\n            PlaceholderContent={<ActivityIndicator />}\n          />\n        )}\n      />\n    </SafeAreaView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nlist: {\n  width: '100%',\n  backgroundColor: '#000',\n},\nitem: {\n  aspectRatio: 1,\n  width: '100%',\n  flex: 1,\n},\n});\n\nexport default ImageAPI;\n```\n```\n\n----------------------------------------\n\nTITLE: Applying LinearGradient to Chip Component in React Native (JSX)\nDESCRIPTION: Demonstrates how to use the `react-native-linear-gradient` package as the `ViewComponent` for an `@rneui/themed` Chip component. It passes gradient configuration (colors, start/end points) via the `linearGradientProps` prop. This requires installing `react-native-linear-gradient` separately for react-native-cli projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Styles with StyleSheet - React Native - JavaScript\nDESCRIPTION: This snippet defines a StyleSheet object that centralizes various reusable style rules for layout, button arrangement, and subheaders. It uses the StyleSheet.create API from React Native, providing named keys for flex layout, button containers, and a colored subheader. Dependencies are React Native, and the object is intended to be shared across components for consistent styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = StyleSheet.create({\n  contentView: {\n    flex: 1,\n  },\n  buttonsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    marginVertical: 20,\n  },\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Rating Component Example in React Native Elements\nDESCRIPTION: This snippet provides a full example of using various Rating components with different configurations. It includes star ratings, custom ratings, and heart ratings with different sizes, colors, and functionalities.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Applying Component-Specific Styles in React Native Elements Theme\nDESCRIPTION: This snippet shows how to apply component-specific styles using the ThemeProvider. It demonstrates setting a custom style for the Button component within the theme object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/0.index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Showcasing Multiple Chip Variants in React Native Elements - TypeScript (React Native)\nDESCRIPTION: This comprehensive React functional component demonstrates numerous use cases of the Chip component, including different variants (solid, outlined), disabled state, left/right icons, and pressable actions. It shows how to arrange Chips in a ScrollView, how to style containers, and integration of themed styles and icon configuration. Requires @rneui/themed, react-native, and TypeScript support. Inputs include optional icon props, disabled state, outline types, and event handlers for onPress; outputs are displayed Chip UI elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, colors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Custom Avatars using FlatList in React Native\nDESCRIPTION: This example shows how to use React Native's FlatList to render a list of items with custom avatars using the ListItem and Avatar components from React Native Elements. It demonstrates how to handle cases where an avatar URL may or may not be provided, falling back to a title-based avatar.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a List with FlatList and Conditional Avatar using @rneui/themed in JavaScript\nDESCRIPTION: Demonstrates using `FlatList` to render a list where the `Avatar` component from `@rneui/themed` displays an image if `avatar_url` exists in the item data, otherwise it falls back to showing the first letter of the `name` property as the avatar title. Requires `@rneui/themed` library and React Native's `FlatList`. Uses `keyExtractor` and `renderItem` for `FlatList` configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay Component in React Native Elements\nDESCRIPTION: This comprehensive example demonstrates the implementation of an Overlay component in React Native Elements. It includes state management for visibility, a toggle function, and styled components within the overlay. The example also showcases the use of Icons and Buttons from React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\nconst [visible, setVisible] = useState(false);\n\nconst toggleOverlay = () => {\n  setVisible(!visible);\n};\n\nreturn (\n  <View>\n    <Button\n      title=\"Open Overlay\"\n      onPress={toggleOverlay}\n      buttonStyle={styles.button}\n    />\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n      <Text style={styles.textPrimary}>Hello!</Text>\n      <Text style={styles.textSecondary}>\n        Welcome to React Native Elements\n      </Text>\n      <Button\n        icon={\n          <Icon\n            name=\"wrench\"\n            type=\"font-awesome\"\n            color=\"white\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        title=\"Start Building\"\n        onPress={toggleOverlay}\n      />\n    </Overlay>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\ntextPrimary: {\n  marginVertical: 20,\n  textAlign: 'center',\n  fontSize: 20,\n},\ntextSecondary: {\n  marginBottom: 10,\n  textAlign: 'center',\n  fontSize: 17,\n},\n});\n\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Avatar and FlatList in React Native Elements\nDESCRIPTION: This example demonstrates how to use React Native's FlatList component with ListItem to render a list of users with avatars. The implementation includes a keyExtractor and renderItem function to properly display user information with avatars and chevrons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AirbnbRating Component in React Native\nDESCRIPTION: This React Native functional component (`Ratings`) demonstrates how to use the `AirbnbRating` component from `@rneui/themed`. It renders three rating instances: a default one, a disabled one (`isDisabled={true}`), and a customized one specifying the number of stars (`count`), custom review labels (`reviews`), the initial rating (`defaultRating`), and the size of the stars (`size`). Basic styling is applied using `StyleSheet`. The component depends on `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE AirbnbRating\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews={[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]}\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Input Styles with React Native Elements\nDESCRIPTION: This code snippet demonstrates multiple implementations of the Input component from React Native Elements. It includes examples of basic input, input with built-in icons, custom icons, error messages, and password input. The snippet uses React hooks and JSX syntax.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Input/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from 'react-native-elements';\n\nexport default () => {\n\n  return (\n    <>\n      <Input\n        placeholder='BASIC INPUT'\n      />\n\n      <Input\n        placeholder='INPUT WITH ICON'\n        leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n      />\n\n      <Input\n        placeholder='INPUT WITH CUSTOM ICON'\n        leftIcon={\n          <Icon\n            name='user'\n            size={24}\n            color='black'\n          />\n        }\n      />\n\n\n      <Input\n        placeholder=\"Comment\"\n        leftIcon={{ type: 'font-awesome', name: 'comment' }}\n        onChangeText={value => this.setState({ comment: value })}\n        />\n\n\n      <Input\n        placeholder='INPUT WITH ERROR MESSAGE'\n        errorStyle={{ color: 'red' }}\n        errorMessage='ENTER A VALID ERROR HERE'\n      />\n\n      <Input placeholder=\"Password\" secureTextEntry={true} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Single and Multiple Selection ButtonGroup in a Functional Component (JavaScript/React Native)\nDESCRIPTION: This SnackPlayer example shows how to use the `ButtonGroup` component within a React Native functional component. It utilizes the `useState` hook to manage the selected index (`selectedIndex`) for a single-selection group and selected indices (`selectedIndexes`) for a multiple-selection group. The first `ButtonGroup` uses an array of strings for its buttons, while the second uses strings and enables multiple selections via the `selectMultiple` prop. State updates are handled directly within the `onPress` callback using the state setter functions. Basic styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, {useState} from 'react'\nimport { ButtonGroup } from '@rneui/themed'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\nreturn (\n  <>\n    <Text style={styles.subHeader}>Using Strings</Text>\n    <ButtonGroup\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n      selectedIndex={selectedIndex}\n      onPress={(value) => {\n        setSelectedIndex(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <ButtonGroup\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\n      selectMultiple\n      selectedIndexes={selectedIndexes}\n      onPress={(value) => {\n        setSelectedIndexes(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <Text style={styles.subHeader}>Using Components</Text>\n  </>\n)\n}\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a React Native ListItem with Linear Gradient and Scale Feedback\nDESCRIPTION: This snippet demonstrates how to create a visually enhanced ListItem using `@rneui/themed`. It incorporates `react-native-touchable-scale` for a scaling effect on touch and `react-native-linear-gradient` to apply a gradient background. The example shows setting up the `ListItem` with these components, passing necessary props (`friction`, `tension`, `activeScale` to `TouchableScale` and `colors`, `start`, `end` to `LinearGradient`), and structuring content with `Avatar`, `ListItem.Content`, `ListItem.Title`, `ListItem.Subtitle`, and `ListItem.Chevron`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ListItem, Avatar } from '@rneui/themed';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Custom Theme in React Native Elements\nDESCRIPTION: This snippet shows how to create a custom theme and apply it to your application using ThemeProvider. It defines a custom primary color for light mode.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/0.index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#a4e2f5',\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      {/* ... */}\n      {/* ... */}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal and Vertical Sliders with Custom Thumbs in React Native (TypeScript)\nDESCRIPTION: This TypeScript code defines a React functional component `Sliders` that utilizes the `Slider`, `Text`, and `Icon` components from `@rneui/themed`. It demonstrates creating both a horizontal and a vertical slider, managing their state with `useState`, and customizing the slider thumbs with `Icon` components. The horizontal slider features a dynamically changing thumb color based on its value, calculated using an interpolation function. Styles are defined using `react-native`'s `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from '@rneui/themed';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\nconst [value, setValue] = useState(0);\nconst [vertValue, setVertValue] = useState(0);\n\nconst interpolate = (start: number, end: number) => {\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n  return Math.ceil((1 - k) * start + k * end) % 256;\n};\n\nconst color = () => {\n  let r = interpolate(255, 0);\n  let g = interpolate(0, 255);\n  let b = interpolate(0, 0);\n  return `rgb(${r},${g},${b})`;\n};\n\nreturn (\n  <>\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n    <View style={[styles.contentView]}>\n      <Slider\n        value={value}\n        onValueChange={setValue}\n        maximumValue={10}\n        minimumValue={0}\n        step={1}\n        allowTouchTrack\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color={color()}\n            />\n          ),\n        }}\n      />\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n    </View>\n    <Text style={styles.subHeader}>Vertical Slider</Text>\n    <View style={styles.verticalContent}>\n      <Slider\n        value={vertValue}\n        onValueChange={setVertValue}\n        maximumValue={50}\n        minimumValue={20}\n        step={1}\n        orientation=\"vertical\"\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color=\"#f50\"\n            />\n          ),\n        }}\n      />\n    </View>\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  padding: 20,\n  width: '100%',\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nverticalContent: {\n  padding: 20,\n  flex: 1,\n  flexDirection: 'row',\n  height: 500,\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Divider Configuration with React Native Elements - TypeScript\nDESCRIPTION: This TypeScript code defines a React Native functional component 'DividerView' that demonstrates a variety of usages of the Divider component from @rneui/themed. It shows how to render horizontal and vertical dividers, apply custom widths and theme-based colors, and utilize insets and subheaders. Dependencies include React, @rneui/themed, and React Native core components. Props such as 'width', 'color', 'orientation', 'inset', 'insetType', 'subHeader', and 'subHeaderStyle' are showcased, with expected input as configuration options and output as styled divider elements within a ScrollView.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useContext } from 'react';\\nimport { Text, Divider, useTheme } from '@rneui/themed';\\nimport { ScrollView, StyleSheet, View } from 'react-native';\\n\\ntype DividerViewTypes = {};\\n\\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\\nconst { theme } = useTheme();\\nreturn (\\n  <>\\n    <ScrollView>\\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\\n        <Divider />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with width and color\\n        </Text>\\n        <Divider width={5} color={theme?.colors?.primary} />\\n      </View>\\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with left inset\\n        </Text>\\n        <Divider inset={true} />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with right inset\\n        </Text>\\n        <Divider inset={true} insetType=\"right\" />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with middle inset\\n        </Text>\\n        <Divider inset={true} insetType=\"middle\" />\\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\\n      </View>\\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\\n      <View style={styles.vertical}>\\n        <Text>Left text</Text>\\n        <Divider orientation=\"vertical\" />\\n        <Text>Right text</Text>\\n      </View>\\n      <View style={styles.vertical}>\\n        <Text>Left text</Text>\\n        <Divider orientation=\"vertical\" width={5} />\\n        <Text>Right text</Text>\\n      </View>\\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>Left text</Text>\\n        <Divider\\n          subHeader=\"Divider\"\\n          inset={true}\\n          subHeaderStyle={{ color: theme?.colors?.primary }}\\n        />\\n        <Text style={styles.horizontalText}>Right text</Text>\\n      </View>\\n    </ScrollView>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nsubHeader: {\\n  backgroundColor : \"#2089dc\",\\n  color : \"white\",\\n  textAlign : \"center\",\\n  paddingVertical : 5,\\n  marginBottom : 10\\n},\\nhorizontal: {\\n  marginBottom: 10,\\n},\\nhorizontalText: {\\n  textAlign: 'center',\\n  fontSize: 16,\\n  marginVertical: 10,\\n},\\nvertical: {\\n  marginBottom: 10,\\n  display: 'flex',\\n  flexDirection: 'row',\\n  justifyContent: 'space-evenly',\\n},\\n});\\n\\nexport default DividerView;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Badge Usage with withBadge HOC in React Native Elements (JavaScript)\nDESCRIPTION: This JavaScript snippet implements a comprehensive example component in React Native using React Native Elements and its withBadge higher-order component. It imports and utilizes Avatar, Badge, Icon, and withBadge from @rneui/themed to render a variety of badges: standard numerical badges, mini status badges (which omit the 'value' prop), and badge indicators attached to avatars and icons. The implementation requires React, React Native core components, and @rneui/themed. Parameters such as 'value', 'status', and 'containerStyle' are used to configure badge content and appearance. The output is a scrollable view with explanatory headers and a styled visual demonstration. Limitations include the need for all listed package dependencies and React Native compatibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\n\nconst BadgedIcon = withBadge(15)(Icon);\n\nconst BadgeComponent = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Standard Badge</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <Badge value=\"3\" status=\"success\" />\n        <Badge value=\"99+\" status=\"error\" />\n        <Badge value=\"500\" status=\"primary\" />\n        <Badge value=\"10\" status=\"warning\" />\n      </View>\n      <Text style={styles.subHeader}>Mini Badge</Text>\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 20,\n        }}\n      >\n        <Badge status=\"success\" />\n        <Badge status=\"error\" />\n        <Badge status=\"primary\" />\n        <Badge status=\"warning\" />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 20,\n        }}\n      >\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\n      </View>\n\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <View>\n          <Avatar\n            rounded\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\n            size=\"medium\"\n          />\n          <Badge\n            status=\"success\"\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\n          />\n        </View>\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n        <View>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\n            }}\n            size=\"large\"\n          />\n          <Badge\n            status=\"primary\"\n            value={10}\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Demo of Rating Component Features in React Native\nDESCRIPTION: This React Native functional component provides a comprehensive demonstration of the `@rneui/themed` Rating component. It showcases various configurations including default ratings, fractional ratings (`fractions={1}`), custom types (`type=\"star\"`, `type=\"custom\"`, `type=\"heart\"`), custom colors (`ratingColor`), different rating counts (`ratingCount`), image sizes (`imageSize`), read-only state (`readonly`), setting an initial value (`startingValue`), and handling the rating completion event (`onFinishRating`). The component uses `ScrollView` for layout and `StyleSheet` for styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE Rating\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Interface with Custom Properties - TypeScript\nDESCRIPTION: This snippet details how to add entirely new custom properties and functions to the RNE theme object using TypeScript module declaration. By extending the Theme interface, developers can provide extra fields like 'myCustomProperty' and methods like 'myCustomFunction'. It depends on module augmentation for '@rneui/themed' and ensures these fields are available throughout the app's theme context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Theme {\n    myCustomProperty: string;\n    myCustomFunction: () => void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Styles to React Native Elements Components\nDESCRIPTION: This code shows how to use ThemeProvider to apply global styles to components. In this example, the button title color is set to red through the theme configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/0.index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ButtonGroup with Custom React Components in React Native\nDESCRIPTION: This snippet demonstrates initializing and managing a `ButtonGroup` component using custom React components as button elements within a class-based React Native component. It sets up state for the selected index, defines an update handler (`updateIndex`), creates functional components (`component1`, `component2`, `component3`) for button content, and renders the `ButtonGroup` with necessary props like `onPress`, `selectedIndex`, `buttons`, and `containerStyle`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Swipeable List Item with Custom Left and Right Actions in React Native Elements\nDESCRIPTION: Example of ListItem.Swipeable component implementation with customizable left and right swipe actions. The component accepts leftContent and rightContent props that render buttons when the user swipes in either direction. Each content area contains a Button component with reset functionality to return to the original state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem.Swipeable\n  leftContent={(reset) => (\n    <Button\n      title=\"Info\"\n      onPress={() => reset()}\n      icon={{ name: 'info', color: 'white' }}\n      buttonStyle={{ minHeight: '100%' }}\n    />\n  )}\n  rightContent={(reset) => (\n    <Button\n      title=\"Delete\"\n      onPress={() => reset()}\n      icon={{ name: 'delete', color: 'white' }}\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n    />\n  )}\n>\n  <Icon name=\"My Icon\" />\n  <ListItem.Content>\n    <ListItem.Title>Hello Swiper</ListItem.Title>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Rendering FlatList Items with Custom Avatars in React Native Elements (JavaScript)\nDESCRIPTION: This code renders a FlatList of ListItem components, each featuring a custom Avatar that shows the initial letter of the user's name as a fallback to an image URL. Requires '@rneui/themed' and React Native FlatList. It expects items to have 'name', optional 'avatar_url', and 'subtitle', adapting to missing avatar URLs and providing a better visual default while keeping the interactive list performant.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Variants with React Native Elements in TypeScript\nDESCRIPTION: This TypeScript/React Native code defines and renders a collection of differently styled buttons (basic, rounded, light, loading, outline, disabled) using the Button component from @rneui/themed. It manages local state for selected indices and arranges button sections within styled containers and scroll views. Core dependencies include React, React Native, and @rneui/themed; key parameters involve button and container styling props, icon configuration, loading and disabled flags, and handler functions for button presses. Expected inputs are style and configuration props; outputs are rendered interactive button UI elements. The code is modular and assumes an outer React Native app context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { View, ScrollView, StyleSheet } from 'react-native';\\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\\n\\ntype ButtonsComponentProps = {};\\n\\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\\nconst [selectedIndex, setSelectedIndex] = useState(0);\\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\\n\\nreturn (\\n  <>\\n    <ScrollView>\\n      <View style={styles.contentView}>\\n        <Text style={styles.subHeader}>Basic Buttons</Text>\\n          <View style={styles.buttonsContainer}>\\n            <Button\\n              title={'React Native Elements'}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"Basic Button\"\\n              buttonStyle={{\\n                backgroundColor: 'rgba(78, 116, 289, 1)',\\n                borderRadius: 3,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"Dark\"\\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\\n            />\\n\\n            <Button\\n              title=\"Log in\"\\n              loading={false}\\n              loadingProps={{ size: 'small', color: 'white' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(111, 202, 186, 1)',\\n                borderRadius: 5,\\n              }}\\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\\n              containerStyle={{\\n                marginHorizontal: 50,\\n                height: 50,\\n                width: 200,\\n                marginVertical: 10,\\n              }}\\n              onPress={() => console.log('aye')}\\n            />\\n            <Button\\n              title=\"Secondary\"\\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\\n              containerStyle={{\\n                height: 40,\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{\\n                color: 'white',\\n                marginHorizontal: 20,\\n              }}\\n            />\\n            <Button\\n              title=\"Warning\"\\n              containerStyle={{\\n                height: 40,\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\\n              titleStyle={{\\n                color: 'white',\\n                marginHorizontal: 20,\\n              }}\\n            />\\n            <Button\\n              title=\"Danger\"\\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\\n              containerStyle={{\\n                height: 40,\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\\n            />\\n            <Button\\n              title=\"Request an agent\"\\n              titleStyle={{ fontWeight: '500' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(199, 43, 98, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                height: 45,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n          </View>\\n\\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\\n          <View style={styles.buttonsContainer}>\\n            <Button\\n              title=\"LOG IN\"\\n              buttonStyle={{\\n                backgroundColor: 'black',\\n                borderWidth: 2,\\n                borderColor: 'white',\\n                borderRadius: 30,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{ fontWeight: 'bold' }}\\n            />\\n            <Button\\n              title=\"HOME\"\\n              icon={{\\n                name: 'home',\\n                type: 'font-awesome',\\n                size: 15,\\n                color: 'white',\\n              }}\\n              iconContainerStyle={{ marginRight: 10 }}\\n              titleStyle={{ fontWeight: '700' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(90, 154, 230, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n                borderRadius: 30,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"PROFILE\"\\n              icon={{\\n                name: 'user',\\n                type: 'font-awesome',\\n                size: 15,\\n                color: 'white',\\n              }}\\n              iconRight\\n              iconContainerStyle={{ marginLeft: 10 }}\\n              titleStyle={{ fontWeight: '700' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(199, 43, 98, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n                borderRadius: 30,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title={<CustomTitle />}\\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\\n              linearGradientProps={{\\n                colors: ['#FF9800', '#F44336'],\\n                start: [1, 0],\\n                end: [0.2, 0],\\n              }}\\n              buttonStyle={{\\n                borderWidth: 0,\\n                borderColor: 'transparent',\\n                borderRadius: 20,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              icon={{\\n                name: 'arrow-right',\\n                type: 'font-awesome',\\n                size: 15,\\n                color: 'white',\\n              }}\\n              iconRight\\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\\n            />\\n          </View>\\n\\n          <Text style={styles.subHeader}>Light Buttons</Text>\\n          <View style={styles.buttonsContainer}>\\n            <Button\\n              title=\"SIGN UP\"\\n              disabled={true}\\n              titleStyle={{ fontWeight: '700' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(92, 99,216, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n                borderRadius: 5,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                height: 45,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"Outline Button\"\\n              buttonStyle={{\\n                borderColor: 'rgba(78, 116, 289, 1)',\\n              }}\\n              type=\"outline\"\\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"Raised Button\"\\n              buttonStyle={{\\n                borderColor: 'rgba(78, 116, 289, 1)',\\n              }}\\n              type=\"outline\"\\n              raised\\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              containerStyle={{\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              title=\"Clear Button\"\\n              type=\"clear\"\\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\\n            />\\n            <Button\\n              title=\"Light\"\\n              buttonStyle={{\\n                backgroundColor: 'rgba(244, 244, 244, 1)',\\n                borderRadius: 3,\\n              }}\\n              containerStyle={{\\n                height: 40,\\n                width: 200,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\\n            />\\n          </View>\\n          <Text style={styles.subHeader}>Loading Buttons</Text>\\n          <View style={styles.buttonsContainer}>\\n            <Button\\n              title=\"HOME\"\\n              loading\\n              titleStyle={{ fontWeight: '700' }}\\n              buttonStyle={{\\n                backgroundColor: 'rgba(111, 202, 186, 1)',\\n                borderColor: 'transparent',\\n                borderWidth: 0,\\n                borderRadius: 5,\\n                paddingVertical: 5,\\n              }}\\n              containerStyle={{\\n                width: 200,\\n                height: 40,\\n                marginHorizontal: 50,\\n                marginVertical: 10,\\n              }}\\n            />\\n            <Button\\n              title=\"SIGN UP\"\\n              loading={true}\\n              loadingProps={{\\n                size: 'small',\\n                color: 'rgba(111, 202, 186, 1)',\\n              }}\\n              titleStyle={{ fontWeight: '700' }}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functional SearchBar Component in React Native (JavaScript/TypeScript)\nDESCRIPTION: This is a complete React Native functional component demonstrating the usage of the `SearchBar` from `@rneui/themed`. It utilizes the `useState` hook to manage the search input value, updating it via the `onChangeText` prop and reflecting it through the `value` prop. Basic styling for the container view is included using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/SearchBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SearchBar } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SearchBarComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\nconst [search, setSearch] = useState(\"\");\n\nconst updateSearch = (search) => {\n  setSearch(search);\n};\n\nreturn (\n  <View style={styles.view}>\n    <SearchBar\n      placeholder=\"Type Here...\"\n      onChangeText={updateSearch}\n      value={search}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Grid with React Native Elements\nDESCRIPTION: Creates a responsive grid of images using React Native Elements' Image component and FlatList. Features include placeholder loading states, aspect ratio maintenance, and dynamic image loading from Unsplash API. The component implements a two-column layout with ActivityIndicator as loading placeholder.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Image } from '@rneui/themed';\n\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\n\nconst ImageAPI = () => {\nreturn (\n  <>\n    <SafeAreaView>\n      <FlatList\n        data={[...new Array(10)].map((_, i) => i.toString())}\n        style={styles.list}\n        numColumns={2}\n        keyExtractor={(e) => e}\n        renderItem={({ item }) => (\n          <Image\n            source={{ uri: BASE_URI + item }}\n            containerStyle={styles.item}\n            PlaceholderContent={<ActivityIndicator />}\n          />\n        )}\n      />\n    </SafeAreaView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nlist: {\n  width: '100%',\n  backgroundColor: '#000',\n},\nitem: {\n  aspectRatio: 1,\n  width: '100%',\n  flex: 1,\n},\n});\n\nexport default ImageAPI;\n```\n\n----------------------------------------\n\nTITLE: Initializing ThemeProvider with Default Styles in React (JSX)\nDESCRIPTION: This snippet demonstrates wrapping application components with ThemeProvider and providing a theme object created with createTheme. The theme applies a default `raised: true` prop to all Button components within the provider's scope, ensuring consistent styling. Requires the `@rneui/themed` library and React.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/theming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    raised: true,\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n      <Button title=\"My 2nd Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Card Layouts with @rneui/themed in React Native\nDESCRIPTION: This React Native functional component (`Cards`) demonstrates the usage of the `@rneui/themed` `Card` component. It renders multiple card examples within a `ScrollView`, including a card displaying a list of users with avatars, a card showcasing different text heading styles, and a card featuring an image, descriptive text, and a button with an icon. The component relies on `react`, `react-native`, and `@rneui/themed` libraries. Styling is applied using `StyleSheet.create`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n{\n  name: 'brynn',\n  avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n},\n{\n  name: 'thot leader',\n  avatar:\n    'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n},\n{\n  name: 'jsa',\n  avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n},\n{\n  name: 'talhaconcepts',\n  avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n},\n{\n  name: 'andy vitale',\n  avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n},\n{\n  name: 'katy friedson',\n  avatar:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n},\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.container}>\n        <Card>\n          <Card.Title>CARD WITH DIVIDER</Card.Title>\n          <Card.Divider />\n          {users.map((u, i) => {\n            return (\n              <View key={i} style={styles.user}>\n                <Image\n                  style={styles.image}\n                  resizeMode=\"cover\"\n                  source={{ uri: u.avatar }}\n                />\n                <Text style={styles.name}>{u.name}</Text>\n              </View>\n            );\n          })}\n        </Card>\n        <Card containerStyle={{ marginTop: 15 }}>\n          <Card.Title>FONTS</Card.Title>\n          <Card.Divider />\n          <Text style={styles.fonts} h1>\n            h1 Heading\n          </Text>\n          <Text style={styles.fonts} h2>\n            h2 Heading\n          </Text>\n          <Text style={styles.fonts} h3>\n            h3 Heading\n          </Text>\n          <Text style={styles.fonts} h4>\n            h4 Heading\n          </Text>\n          <Text style={styles.fonts}>Normal Text</Text>\n        </Card>\n        <Card>\n          <Card.Title>HELLO WORLD</Card.Title>\n          <Card.Divider />\n          <Card.Image\n            style={{ padding: 0 }}\n            source={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n          />\n          <Text style={{ marginBottom: 10 }}>\n            The idea with React Native Elements is more about component\n            structure than actual design.\n          </Text>\n          <Button\n            icon={\n              <Icon\n                name=\"code\"\n                color=\"#ffffff\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              borderRadius: 0,\n              marginLeft: 0,\n              marginRight: 0,\n              marginBottom: 0,\n            }}\n            title=\"VIEW NOW\"\n          />\n        </Card>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nfonts: {\n  marginBottom: 8,\n},\nuser: {\n  flexDirection: 'row',\n  marginBottom: 6,\n},\nimage: {\n  width: 30,\n  height: 30,\n  marginRight: 10,\n},\nname: {\n  fontSize: 16,\n  marginTop: 5,\n},\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Creating a Swipeable ListItem with Actions in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to implement a swipeable list item using the `ListItem.Swipeable` component from `react-native-elements`. It defines custom components (`Button`) for the content revealed on left swipe (`leftContent`) and right swipe (`rightContent`). The `reset` function provided to these content props allows programmatically closing the swipe view, typically after an action is performed. The main content of the list item includes an Icon, Title, and Chevron.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem.Swipeable\n  leftContent={(reset) => (\n    <Button\n      title=\"Info\"\n      onPress={() => reset()}\n      icon={{ name: 'info', color: 'white' }}\n      buttonStyle={{ minHeight: '100%' }}\n    />\n  )}\n  rightContent={(reset) => (\n    <Button\n      title=\"Delete\"\n      onPress={() => reset()}\n      icon={{ name: 'delete', color: 'white' }}\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n    />\n  )}\n>\n  <Icon name=\"My Icon\" />\n  <ListItem.Content>\n    <ListItem.Title>Hello Swiper</ListItem.Title>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Custom Avatar Component in FlatList\nDESCRIPTION: This example shows how to use a custom Avatar component that displays either the first letter of a name or an avatar image if available. It integrates with FlatList for rendering a list of users with conditional avatar display logic.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Images, Icons, Letters, and Badges using React Native Elements in TypeScript\nDESCRIPTION: Defines a TypeScript React Native functional component that demonstrates several usages of the Avatar component from React Native Elements. It includes rendering Avatars with image sources, icons of various types, letter initials, and with badge accessory overlays. The data for image Avatars is organized and chunked to display multiple rows, and the component includes custom styling for each Avatar type. Prerequisites include the React Native Elements library with theme support and proper image URIs. Key props for each Avatar include size, type (image, icon, letter), styling, and optional accessories. Limitations include assumed online access for remote images and customization bounded by the props supported by the Avatar component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Displaying a BottomSheet Modal with React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to integrate and display a BottomSheet modal using the React Native Elements library in a TypeScript React Native project. Dependencies include @rneui/themed for UI components and react-native-safe-area-context for safe area handling; Step 3 of the setup guide must be followed to ensure correct SafeArea handling. The BottomSheet displays a list of action buttons, each configured with styles and behavior, and uses a button to open the modal (setting isVisible state); it encapsulates all UI components within a SafeAreaProvider for device compatibility. Inputs: none besides user interaction. Outputs: Interactive overlay modal at the bottom of the screen, dismissable by tapping 'Cancel'. Limitations: Requires proper installation and wrapping of app with SafeAreaProvider and suitable setup as per documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\\nimport { StyleSheet } from 'react-native';\\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\\n\\ntype BottomSheetComponentProps = {};\\n\\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\\nconst [isVisible, setIsVisible] = useState(false);\\nconst list = [\\n  { title: 'List Item 1' },\\n  { title: 'List Item 2' },\\n  {\\n    title: 'Cancel',\\n    containerStyle: { backgroundColor: 'red' },\\n    titleStyle: { color: 'white' },\\n    onPress: () => setIsVisible(false),\\n  },\\n];\\n\\nreturn (\\n  <SafeAreaProvider>\\n    <Button\\n      title=\"Open Bottom Sheet\"\\n      onPress={() => setIsVisible(true)}\\n      buttonStyle={styles.button}\\n    />\\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\\n      {list.map((l, i) => (\\n        <ListItem\\n          key={i}\\n          containerStyle={l.containerStyle}\\n          onPress={l.onPress}\\n        >\\n          <ListItem.Content>\\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\\n          </ListItem.Content>\\n        </ListItem>\\n      ))}\\n    </BottomSheet>\\n  </SafeAreaProvider>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nbutton: {\\n  margin: 10,\\n},\\n});\\n\\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Input Component Usage in React Native\nDESCRIPTION: A SnackPlayer example demonstrating various configurations of the Input component from React Native Elements. It includes basic input, input with icons, custom icons, error messages, and password input.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Displaying React Native Elements Input Variants (JavaScript)\nDESCRIPTION: This complete example showcases several Input component variants, each illustrating a different set of props and features (placeholder text, leftIcon as prop or custom component, error feedback, secure entry, and handling input changes). It requires dependencies on React, react-native, @rneui/themed, and optionally react-native-vector-icons for custom icons. Each Input demonstrates a different customization, such as adding error messages or secure text entry, and can be embedded in a functional component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Read-only Rating with React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows how to display a read-only rating using the Rating component from React Native Elements in a React Native project. The 'readonly' prop prevents user interaction, while 'startingValue' sets the initial displayed rating based on an external value. Dependencies: React, react-native, react-native-elements, and relevant style objects. Inputs include the current rating (numeric) and style definitions; output is a non-interactive rating display.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic BottomSheet in React Native Elements (JavaScript/React Native)\nDESCRIPTION: This React Native code snippet demonstrates how to use the `BottomSheet` component from `@rneui/themed`. It utilizes the `useState` hook to manage the visibility state (`isVisible`) of the bottom sheet, which is toggled by pressing a `Button`. The `BottomSheet` itself renders a list of `ListItem` components based on a predefined `list` array. One list item is configured as a 'Cancel' button to close the sheet. The component requires the parent application to be wrapped in `SafeAreaProvider` from `react-native-safe-area-context` as shown.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\nimport { StyleSheet } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype BottomSheetComponentProps = {};\n\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\nreturn (\n  <SafeAreaProvider>\n    <Button\n      title=\"Open Bottom Sheet\"\n      onPress={() => setIsVisible(true)}\n      buttonStyle={styles.button}\n    />\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\n      {list.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={l.containerStyle}\n          onPress={l.onPress}\n        >\n          <ListItem.Content>\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </BottomSheet>\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\n});\n\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Components with React Native Elements\nDESCRIPTION: This component demonstrates four different checkbox implementations using React Native Elements. It uses useState hooks for state management and shows various customization options including custom icons, positioning, colors, and dynamic titles. Each checkbox demonstrates different styling possibilities and interaction patterns.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { CheckBox, Icon } from '@rneui/themed';\n\ntype CheckboxComponentProps = {};\n\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\nconst [check1, setCheck1] = useState(false);\nconst [check2, setCheck2] = useState(false);\nconst [check3, setCheck3] = useState(false);\nconst [check4, setCheck4] = useState(false);\n\nreturn (\n  <>\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checked={check1}\n      onPress={() => setCheck1(!check1)}\n    />\n\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checkedIcon=\"dot-circle-o\"\n      uncheckedIcon=\"circle-o\"\n      checked={check2}\n      onPress={() => setCheck2(!check2)}\n    />\n\n    <CheckBox\n      center\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\n      iconRight\n      iconType=\"material\"\n      checkedIcon=\"clear\"\n      uncheckedIcon=\"add\"\n      checkedColor=\"red\"\n      checked={check3}\n      onPress={() => setCheck3(!check3)}\n    />\n\n    <CheckBox\n      center\n      checkedIcon={\n        <Icon\n          name=\"radio-button-checked\"\n          type=\"material\"\n          color=\"green\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      uncheckedIcon={\n        <Icon\n          name=\"radio-button-unchecked\"\n          type=\"material\"\n          color=\"grey\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      checked={check4}\n      onPress={() => setCheck4(!check4)}\n    />\n  </>\n);\n};\n\nexport default CheckboxComponent;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Rating Component Demo in React Native (Expo Snack)\nDESCRIPTION: This is a complete React Native functional component (`Ratings`) demonstrating various configurations of the `@rneui/themed` `Rating` component within an Expo Snack environment. It showcases standard star ratings, fractional ratings (`fractions={1}`), read-only mode (`readonly`), custom types (`type=\"heart\"`, `type=\"custom\"`), custom colors (`ratingColor`), different icon counts (`ratingCount`), size adjustments (`imageSize`), and handling the rating completion event with `onFinishRating`. The component uses `ScrollView` and `StyleSheet` for layout and styling. Dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: SnackPlayer\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Button with Loading Spinner - React Native Elements - JSX\nDESCRIPTION: Illustrates usage of the 'loading' prop to show a spinner animation in a solid Button. The prop is a boolean, which when true, presents a loading indicator (ActivityIndicator) inside the button. Expected inputs are the title and loading flag; output is a loading-enabled button. This snippet also demonstrates use of the 'type' prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\\\"Solid\\\" type=\\\"solid\\\" loading />\n```\n\n----------------------------------------\n\nTITLE: Using @rneui/themed FAB Component in React Native\nDESCRIPTION: This React Native component demonstrates various configurations of the Floating Action Button (FAB) from '@rneui/themed'. It imports React, useState, View, Text, and the FAB component. The component uses the useState hook to manage the visibility state of the FABs. It displays FABs with different sizes ('small', default/large), colors ('primary', 'green', 'red'), icons, titles, a loading state, a disabled state, and different placements ('right', 'left'). Two specific FABs ('Hide' and 'Show') are used to toggle the visibility state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { FAB } from '@rneui/themed';\n\nexport default () => {\nconst [visible, setVisible] = React.useState(true);\n\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Small Size\n      </Text>\n      <FAB\n        loading\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        size=\"small\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Large Size\n      </Text>\n      <FAB\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        color=\"green\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Primary Color\n      </Text>\n      <FAB\n        visible={visible}\n        title=\"Navigate\"\n        upperCase\n        icon={{ name: 'place', color: 'white' }}\n      />\n\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\n\n      <FAB\n        visible={visible}\n        disabled\n        title=\"Extended\"\n        icon={{\n          name: 'place',\n          color: 'white',\n        }}\n      />\n      <FAB\n        visible={visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"right\"\n        title=\"Hide\"\n        icon={{ name: 'delete', color: 'white' }}\n        color=\"red\"\n      />\n      <FAB\n        visible={!visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"left\"\n        title=\"Show\"\n        icon={{ name: 'edit', color: 'white' }}\n        color=\"green\"\n      />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Button Styles in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Demonstrates basic usage of the Button component from 'react-native-elements'. Shows how to create solid (default), outline, and clear buttons using the 'type' prop. Also illustrates adding icons using either a component (<Icon>) or an object configuration, positioning icons to the right with 'iconRight', and displaying a loading indicator with the 'loading' prop. Requires importing 'Button' from 'react-native-elements' and potentially 'Icon' from 'react-native-vector-icons/FontAwesome'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/button.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from 'react-native-elements';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\n<Button\n  title=\"Solid Button\"\n/>\n\n<Button\n  title=\"Outline button\"\n  type=\"outline\"\n/>\n\n<Button\n  title=\"Clear button\"\n  type=\"clear\"\n/>\n\n<Button\n  icon={\n    <Icon\n      name=\"arrow-right\"\n      size={15}\n      color=\"white\"\n    />\n  }\n  title=\"Button with icon component\"\n/>\n\n<Button\n  icon={{\n    name: \"arrow-right\",\n    size: 15,\n    color: \"white\"\n  }}\n  title=\"Button with icon object\"\n/>\n\n<Button\n  icon={\n    <Icon\n      name=\"arrow-right\"\n      size={15}\n      color=\"white\"\n    />\n  }\n  iconRight\n  title=\"Button with right icon\"\n/>\n\n<Button\n  title=\"Loading button\"\n  loading\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Media Icons in React Native using React Native Elements\nDESCRIPTION: This snippet defines a React component that renders a grid of social media icons using the SocialIcon component from React Native Elements. It uses a predefined list of social media types and organizes them into rows of three icons each.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\n\ntype IconData = {\n  type: SocialMediaType;\n  iconType: string;\n};\n\nconst dataList: Partial<IconData>[] = [\n  {\n    type: 'facebook',\n  },\n  {\n    type: 'twitter',\n  },\n  // ... (other social media types)\n  {\n    type: 'whatsapp',\n  },\n];\n\ntype SocialIconsComponentProps = {};\n\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\n  const socialProps = {};\n  return (\n    <>\n      <ScrollView>\n        {_.chunk(dataList, 3).map(\n          (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\n            <View\n              style={{\n                flexDirection: 'row',\n                justifyContent: 'space-around',\n                marginTop: 10,\n                backgroundColor: '#4c4c4c',\n              }}\n              key={chunkIndex}\n            >\n              {chunk.map((l: Partial<IconData>, i: React.Key) => (\n                <SocialIcon\n                  type={l.type}\n                  iconType={l.iconType ? l.iconType : 'font-awesome'}\n                  key={`${chunkIndex}-${i}`}\n                />\n              ))}\n            </View>\n          )\n        )}\n      </ScrollView>\n    </>\n  );\n};\n\nexport default SocialIcons;\n```\n\n----------------------------------------\n\nTITLE: Displaying Different FAB Variants in React Native\nDESCRIPTION: Provides a live code example demonstrating how to render different variants of the FAB component using the `size`, `icon`, and `title` props. It shows small FABs: one with just an icon, one with just a title, and one extended version with both an icon and a title, arranged horizontally using a `Stack` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/FAB.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <FAB\n    size=\"small\"\n    icon={{\n      name: \"place\",\n      color: \"white\",\n    }}\n  />\n  <FAB size=\"small\" title=\"Solid\" />\n  <FAB\n    size=\"small\"\n    title=\"Extended\"\n    icon={{\n      name: \"place\",\n      color: \"white\",\n    }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Button Style and Container Configuration in React Native Elements\nDESCRIPTION: Defines inline styling for button appearance and container layout. The buttonStyle configures the visual aspects of the button itself while containerStyle defines how the button is positioned within its parent container.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nbuttonStyle={{\n  backgroundColor: 'rgba(92, 99,216, 1)',\n  borderColor: 'transparent',\n  borderWidth: 0,\n  borderRadius: 5,\n  paddingVertical: 10,\n}}\ncontainerStyle={{\n  width: 200,\n  marginHorizontal: 50,\n  marginVertical: 10,\n}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dividers in React Native Elements\nDESCRIPTION: This snippet demonstrates importing the Divider component from 'react-native-elements' and showcases several usage examples. It shows how to create horizontal and vertical dividers, apply specific widths, use insets (like 'middle'), and add a subHeader with custom styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/divider.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Divider } from 'react-native-elements';\n\n<Divider orientation=\"horizontal\" />;\n\n<Divider orientation=\"vertical\" width={5} />;\n\n<Divider inset={true} insetType=\"middle\" />;\n\n<Divider\n  orientation=\"horizontal\"\n  subHeader=\"Test\"\n  subHeaderStyle={{ color: 'blue' }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal and Vertical Sliders with React Native Elements in TypeScript\nDESCRIPTION: This TypeScript code defines a React functional component named `Sliders` for a React Native application. It utilizes the `Slider`, `Text`, and `Icon` components from `@rneui/themed`. The component demonstrates both a horizontal slider with a dynamically changing thumb color based on its value (using an interpolation function) and a vertical slider with a fixed thumb color. State for slider values is managed using `useState`. Styles are defined using `StyleSheet` from `react-native`. Dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Slider\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from '@rneui/themed';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\nconst [value, setValue] = useState(0);\nconst [vertValue, setVertValue] = useState(0);\n\nconst interpolate = (start: number, end: number) => {\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n  return Math.ceil((1 - k) * start + k * end) % 256;\n};\n\nconst color = () => {\n  let r = interpolate(255, 0);\n  let g = interpolate(0, 255);\n  let b = interpolate(0, 0);\n  return `rgb(${r},${g},${b})`;\n};\n\nreturn (\n  <>\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n    <View style={[styles.contentView]}>\n      <Slider\n        value={value}\n        onValueChange={setValue}\n        maximumValue={10}\n        minimumValue={0}\n        step={1}\n        allowTouchTrack\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color={color()}\n            />\n          ),\n        }}\n      />\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n    </View>\n    <Text style={styles.subHeader}>Vertical Slider</Text>\n    <View style={styles.verticalContent}>\n      <Slider\n        value={vertValue}\n        onValueChange={setVertValue}\n        maximumValue={50}\n        minimumValue={20}\n        step={1}\n        orientation=\"vertical\"\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color=\"#f50\"\n            />\n          ),\n        }}\n      />\n    </View>\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  padding: 20,\n  width: '100%',\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nverticalContent: {\n  padding: 20,\n  flex: 1,\n  flexDirection: 'row',\n  height: 500,\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Sliders;\n```\n```\n\n----------------------------------------\n\nTITLE: Example Usage of React Native Elements Input Component\nDESCRIPTION: This React Native component demonstrates various ways to configure and use the `<Input>` component from `@rneui/themed`. Examples include basic input, input with standard and custom icons, handling text changes, displaying error messages, and creating a password input.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Input.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Button Sizes (Small, Medium, Large) using TypeScript\nDESCRIPTION: Shows how to control the size of the Button component using the `size` prop. It demonstrates small (`size=\"sm\"`), medium (`size=\"md\"`), and large (`size=\"lg\"`) buttons arranged horizontally using the `Stack` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button size=\"sm\">Small</Button>\n  <Button size=\"md\">Medium</Button>\n  <Button size=\"lg\">Large</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchBar Component in React Native\nDESCRIPTION: This snippet provides a complete example of implementing a SearchBar component in a React Native application using React Native Elements. It demonstrates state management, updating search value, and styling the component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/SearchBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SearchBar } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SearchBarComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\nconst [search, setSearch] = useState(\"\");\n\nconst updateSearch = (search) => {\n  setSearch(search);\n};\n\nreturn (\n  <View style={styles.view}>\n    <SearchBar\n      placeholder=\"Type Here...\"\n      onChangeText={updateSearch}\n      value={search}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal and Vertical Sliders with React Native Elements\nDESCRIPTION: A complete example showing how to create horizontal and vertical sliders with custom styling and icon-based thumbs. The horizontal slider dynamically changes the icon color based on the current value using RGB interpolation. Both sliders display their current values as text elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from '@rneui/themed';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\nconst [value, setValue] = useState(0);\nconst [vertValue, setVertValue] = useState(0);\n\nconst interpolate = (start: number, end: number) => {\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n  return Math.ceil((1 - k) * start + k * end) % 256;\n};\n\nconst color = () => {\n  let r = interpolate(255, 0);\n  let g = interpolate(0, 255);\n  let b = interpolate(0, 0);\n  return `rgb(${r},${g},${b})`;\n};\n\nreturn (\n  <>\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n    <View style={[styles.contentView]}>\n      <Slider\n        value={value}\n        onValueChange={setValue}\n        maximumValue={10}\n        minimumValue={0}\n        step={1}\n        allowTouchTrack\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color={color()}\n            />\n          ),\n        }}\n      />\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n    </View>\n    <Text style={styles.subHeader}>Vertical Slider</Text>\n    <View style={styles.verticalContent}>\n      <Slider\n        value={vertValue}\n        onValueChange={setVertValue}\n        maximumValue={50}\n        minimumValue={20}\n        step={1}\n        orientation=\"vertical\"\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color=\"#f50\"\n            />\n          ),\n        }}\n      />\n    </View>\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  padding: 20,\n  width: '100%',\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nverticalContent: {\n  padding: 20,\n  flex: 1,\n  flexDirection: 'row',\n  height: 500,\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Rendering List Items with Custom Avatar in FlatList using React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates using FlatList to render list items with dynamic or custom avatar content in React Native Elements. The Avatar shows either the first letter of the name or a remote image if 'avatar_url' exists. Dependencies are '@rneui/themed' and React Native's FlatList, with a sample data list containing 'name', 'avatar_url', and 'subtitle'. Outputs a list of ListItems, handling missing avatar images by falling back to an initial. This implementation is robust for heterogeneous data.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Icons with React Native Elements in React Native\nDESCRIPTION: Demonstrates how to use the Icon component from '@rneui/themed' (React Native Elements) to display various icons. It shows usage of different props like 'name', 'type' (specifying the icon set like 'evilicon' or 'ionicon'), 'color', 'reverse' (for a button-like appearance), 'raised' (for a raised effect with shadow), and 'onPress' for handling interactions. The example requires 'react', 'react-native', and '@rneui/themed' dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Icon } from '@rneui/themed';\n\nexport default () => {\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Icon\n        name='rowing' />\n\n      <Icon\n        name='g-translate'\n        color='#00aced' />\n\n      <Icon\n        name='sc-telegram'\n        type='evilicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        reverse\n        name='ios-american-football'\n        type='ionicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        raised\n        name='heartbeat'\n        type='font-awesome'\n        color='#f50'\n        onPress={() => console.log('hello')} />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Imperative Input Methods via Ref - React Native Elements - JavaScript\nDESCRIPTION: This code snippet demonstrates using a ref to directly invoke methods such as focus, blur, clear, isFocused, setNativeProps, and shake on an Input component from react-native-elements. The code assumes a ref has been created and assigned to the Input. These methods enable programmatic interaction, such as focusing the input or providing error feedback (shake). The snippet requires React and react-native-elements, with expected input as a ref object and no direct output except respective effects on the UI input element.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/input.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Interface in TypeScript for React Native Elements\nDESCRIPTION: This TypeScript interface defines the structure of the theme object in React Native Elements. It includes color definitions for general use and platform-specific colors for iOS, Android, and web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/2.theme_object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    background;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Header Component Implementation with React Native Elements\nDESCRIPTION: A full example of a custom Header component built with React Native Elements. This implementation includes left/right navigation icons, a center title, and functions to open documentation and playground URLs. It demonstrates the usage of HeaderRNE component with proper TypeScript typing and styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Using ButtonGroup with Icons for Multiple Selection in React Native (TSX)\nDESCRIPTION: Shows how to configure a `ButtonGroup` for multiple selections using the `selectMultiple` prop in a React Native TSX function component. It utilizes `Icon` components for buttons and manages an array of selected indices (`selectedIndexes`) with `React.useState`, updating them via the `onPress` prop. Custom styles are applied similarly to the single-select example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ButtonGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [selectedIndex, setSelectedIndex] = React.useState([]);\n     return (\n       <ButtonGroup\n         selectMultiple\n         buttonStyle={{ padding: 10 }}\n         selectedButtonStyle={{ backgroundColor: '#e2e2e2' }}\n         buttons={[\n           <Icon name=\"format-bold\" />,\n           <Icon name=\"format-italic\" />,\n           <Icon name=\"format-underline\" />,\n         ]}\n         selectedIndexes={selectedIndex}\n         onPress={setSelectedIndex}\n       />\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed Dividers with Various Configurations in React Native Elements - TypeScript\nDESCRIPTION: This snippet defines a functional React component that renders a ScrollView containing multiple examples of the Divider component from @rneui/themed. It utilizes the useTheme hook for dynamic color theming and includes several divider variants: horizontal, vertical, with varying width, color, left/right/middle insets, and subHeaders. Styling is managed via StyleSheet, and the component is exportable for use in documentation demos or playgrounds. Dependencies include React, React Native, and @rneui/themed, with the expectation that a theme context is available. Key parameters highlighted are Divider's 'width', 'color', 'orientation', 'inset', 'insetType', and 'subHeader', demonstrating their usage and visual impact. Inputs are component props (none are required), and the outputs are styled React Native UI elements with dividers in various layouts.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useContext } from 'react';\\nimport { Text, Divider, useTheme } from '@rneui/themed';\\nimport { ScrollView, StyleSheet, View } from 'react-native';\\n\\ntype DividerViewTypes = {};\\n\\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\\nconst { theme } = useTheme();\\nreturn (\\n  <>\\n    <ScrollView>\\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\\n        <Divider />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with width and color\\n        </Text>\\n        <Divider width={5} color={theme?.colors?.primary} />\\n      </View>\\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with left inset\\n        </Text>\\n        <Divider inset={true} />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with right inset\\n        </Text>\\n        <Divider inset={true} insetType=\"right\" />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with middle inset\\n        </Text>\\n        <Divider inset={true} insetType=\"middle\" />\\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\\n      </View>\\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\\n      <View style={styles.vertical}>\\n        <Text>Left text</Text>\\n        <Divider orientation=\"vertical\" />\\n        <Text>Right text</Text>\\n      </View>\\n      <View style={styles.vertical}>\\n        <Text>Left text</Text>\\n        <Divider orientation=\"vertical\" width={5} />\\n        <Text>Right text</Text>\\n      </View>\\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>Left text</Text>\\n        <Divider\\n          subHeader=\"Divider\"\\n          inset={true}\\n          subHeaderStyle={{ color: theme?.colors?.primary }}\\n        />\\n        <Text style={styles.horizontalText}>Right text</Text>\\n      </View>\\n    </ScrollView>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nsubHeader: {\\n  backgroundColor : \"#2089dc\",\\n  color : \"white\",\\n  textAlign : \"center\",\\n  paddingVertical : 5,\\n  marginBottom : 10\\n},\\nhorizontal: {\\n  marginBottom: 10,\\n},\\nhorizontalText: {\\n  textAlign: 'center',\\n  fontSize: 16,\\n  marginVertical: 10,\\n},\\nvertical: {\\n  marginBottom: 10,\\n  display: 'flex',\\n  flexDirection: 'row',\\n  justifyContent: 'space-evenly',\\n},\\n});\\n\\nexport default DividerView;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Grid with React Native Elements\nDESCRIPTION: Creates a responsive grid of random images using FlatList and RNE Image component. Features loading indicators, aspect ratio maintenance, and dynamic image loading from Unsplash API. Uses SafeAreaView for proper iOS display.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Image } from '@rneui/themed';\n\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\n\nconst ImageAPI = () => {\nreturn (\n  <>\n    <SafeAreaView>\n      <FlatList\n        data={[...new Array(10)].map((_, i) => i.toString())}\n        style={styles.list}\n        numColumns={2}\n        keyExtractor={(e) => e}\n        renderItem={({ item }) => (\n          <Image\n            source={{ uri: BASE_URI + item }}\n            containerStyle={styles.item}\n            PlaceholderContent={<ActivityIndicator />}\n          />\n        )}\n      />\n    </SafeAreaView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nlist: {\n  width: '100%',\n  backgroundColor: '#000',\n},\nitem: {\n  aspectRatio: 1,\n  width: '100%',\n  flex: 1,\n},\n});\n\nexport default ImageAPI;\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Initials and Interaction - React Native Elements - JavaScript\nDESCRIPTION: Shows rendering of Avatar components with title initials of varying sizes and interactivity. Utilizes props like size, rounded, title, onPress, and activeOpacity to customize avatar display and press behavior. Dependencies include react-native-elements and a functional React Native context. Inputs include size, title and event handlers; outputs are UI avatars responding to touch. Ensure proper binding and context for event handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/avatar.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Avatar } from \"react-native-elements\";\n\n<Avatar\n  size=\"small\"\n  rounded\n  title=\"MT\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"medium\"\n  title=\"BP\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"large\"\n  title=\"LW\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"xlarge\"\n  rounded\n  title=\"CR\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Tab Item Styles in React Native Elements (TypeScript)\nDESCRIPTION: Demonstrates customizing both the containerStyle and buttonStyle of Tab.Item elements based on their active state using functional style props in a TypeScript environment. The Tab component uses the 'value' and 'scrollable' props. Each Tab.Item receives a callback function that applies a red background if active. Inputs include the active state, and outputs are visually differentiated tabs. Requires react, react-native, and @rneui/themed. Especially useful for those wanting to override default styles depending on the active tab state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tab.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Tab value={0} scrollable>\n  <Tab.Item\n    containerStyle={(active) => ({\n      backgroundColor: active ? \"red\" : undefined,\n    })}\n  >\n    Tab\n  </Tab.Item>\n  <Tab.Item\n    buttonStyle={(active) => ({\n      backgroundColor: active ? \"red\" : undefined,\n    })}\n  >\n    Tab\n  </Tab.Item>\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Theme with ThemeProvider in TypeScript\nDESCRIPTION: This snippet illustrates how to create a custom theme object using `createTheme` from `@rneui/themed`, defining specific styles for `MyCustomComponent`. It then wraps the application's root or relevant part with `ThemeProvider`, passing the custom theme, making it available to child components like `MyCustomComponent`. Requires `@rneui/themed` and the previously defined `MyCustomComponent`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title='App.tsx'\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  MyCustomComponent: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <MyCustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating List Items with Icons using Map Function in React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows how to render a list using the `map` function where each `ListItem` represents an item with a title and an associated icon. It utilizes the `Icon` component for displaying the icon specified in the data array (`list`) and includes a `ListItem.Chevron` for indicating navigation or further action. Requires importing `ListItem` and `Icon` from `@rneui/themed` and a data array.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ListItem, Icon } from '@rneui/themed'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n```\n\n----------------------------------------\n\nTITLE: Using `styled` with Custom Props for Conditional Styling (TypeScript/TSX)\nDESCRIPTION: Illustrates creating a styled `Text` component using `styled` with custom props (`MyCompProps`). The style function receives both the `theme` and the component's `props` (destructured as `{ bold }`), allowing conditional styling (like setting `fontWeight`) based on the `bold` prop's value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntype MyCompProps = { bold?: boolean };\n\nconst Component = styled(Text)<MyCompProps>((theme, { bold }) => ({\n  root: {\n    fontWeight: bold ? 'bold' : 'normal',\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Using makeStyles to Generate Themed Styles - React Native Elements (TypeScript)\nDESCRIPTION: This advanced snippet demonstrates using the makeStyles hook generator to create theme-aware and prop-aware styles in a functional component. It defines a type for props, applies makeStyles to generate a custom useStyles hook that reads both theme and component props, and shows how to consume those styles in the component. Required dependencies are React, react-native, @rneui/themed, and TypeScript. Inputs are the props object and theme; outputs are robust, dynamic styles attached to component trees. Keep in mind that theme and prop structure must match useStyles expectations.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/0.index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from '@rneui/themed';\n\ntype Params = {\n  fullWidth?: boolean;\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Disabling Buttons of Different Types using TypeScript\nDESCRIPTION: Demonstrates how to disable user interaction for solid, outline, and clear Button components by setting the `disabled` prop to `true`. The `Stack` component provides horizontal layout.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button title=\"Solid\" disabled />\n  <Button title=\"Outline\" type=\"outline\" disabled />\n  <Button title=\"Clear\" type=\"clear\" disabled />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal and Vertical Sliders in React Native with RNE\nDESCRIPTION: This code snippet demonstrates how to create horizontal and vertical sliders using React Native Elements. It includes custom styling, dynamic color interpolation, and icon integration for the slider thumbs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from '@rneui/themed';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\nconst [value, setValue] = useState(0);\nconst [vertValue, setVertValue] = useState(0);\n\nconst interpolate = (start: number, end: number) => {\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n  return Math.ceil((1 - k) * start + k * end) % 256;\n};\n\nconst color = () => {\n  let r = interpolate(255, 0);\n  let g = interpolate(0, 255);\n  let b = interpolate(0, 0);\n  return `rgb(${r},${g},${b})`;\n};\n\nreturn (\n  <>\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n    <View style={[styles.contentView]}>\n      <Slider\n        value={value}\n        onValueChange={setValue}\n        maximumValue={10}\n        minimumValue={0}\n        step={1}\n        allowTouchTrack\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color={color()}\n            />\n          ),\n        }}\n      />\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n    </View>\n    <Text style={styles.subHeader}>Vertical Slider</Text>\n    <View style={styles.verticalContent}>\n      <Slider\n        value={vertValue}\n        onValueChange={setVertValue}\n        maximumValue={50}\n        minimumValue={20}\n        step={1}\n        orientation=\"vertical\"\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color=\"#f50\"\n            />\n          ),\n        }}\n      />\n    </View>\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  padding: 20,\n  width: '100%',\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nverticalContent: {\n  padding: 20,\n  flex: 1,\n  flexDirection: 'row',\n  height: 500,\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Integrating ThemeProvider and Button in React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to wrap a Button component within a ThemeProvider from React Native Elements using JavaScript/JSX. The ThemeProvider propagates theme values to nested UI components, enabling consistent styling throughout the app. The Button receives a title prop, and the ThemeProvider acts as a context provider for theming. Dependencies include the 'react-native-elements' library. Inputs are React components; outputs are styled UI elements reflecting the global theme. This pattern enables central theme customization for multiple components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from 'react-native-elements';\\n\\nconst MyApp = () => {\\n  return (\\n    <ThemeProvider>\\n      <Button title=\\\"Hey!\\\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Button with Right-Aligned Icon - React Native Elements - TSX\nDESCRIPTION: Demonstrates a Button where an icon is placed to the right of the label by putting the Icon component after the text. Requires the Icon component alongside Button. The arrangement of children determines the icon position. Inputs include button text and Icon as children; output is a button with right-side icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type=\\\"solid\\\">\\n  Icon\\n  <Icon name=\\\"home\\\" color=\\\"white\\\" />\\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem.Accordion in React Native Elements\nDESCRIPTION: This code snippet demonstrates the implementation of an accordion list using the ListItem.Accordion component from React Native Elements. It includes a custom header with an icon and title, and a collapsible list of items rendered using map function. The accordion's expanded state is controlled via the isExpanded prop and a state variable.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem.Accordion\n  content={\n    <>\n      <Icon name=\"place\" size={30} />\n      <ListItem.Content>\n        <ListItem.Title>List Accordion</ListItem.Title>\n      </ListItem.Content>\n    </>\n  }\n  isExpanded={expanded}\n  onPress={() => {\n    setExpanded(!expanded);\n  }}\n>\n  {list2.map((l, i) => (\n    <ListItem key={i} onPress={log} bottomDivider>\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\n      <ListItem.Content>\n        <ListItem.Title>{l.name}</ListItem.Title>\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  ))}\n</ListItem.Accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet Component in React Native\nDESCRIPTION: This snippet demonstrates how to create a BottomSheet component in a React Native application using React Native Elements. It includes state management for visibility, a button to trigger the BottomSheet, and a list of items within the sheet. The component is wrapped in a SafeAreaProvider for proper layout handling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\nimport { StyleSheet } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype BottomSheetComponentProps = {};\n\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\nreturn (\n  <SafeAreaProvider>\n    <Button\n      title=\"Open Bottom Sheet\"\n      onPress={() => setIsVisible(true)}\n      buttonStyle={styles.button}\n    />\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\n      {list.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={l.containerStyle}\n          onPress={l.onPress}\n        >\n          <ListItem.Content>\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </BottomSheet>\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\n});\n\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Initializing ButtonGroup with Custom Components in a Class Component (JavaScript/React Native)\nDESCRIPTION: This snippet demonstrates setting up a `ButtonGroup` within a React Native class component. It defines custom functional components (`component1`, `component2`, `component3`) which render simple `<Text>` elements. These components are then passed to the `ButtonGroup` via the `buttons` prop, where each button is an object with an `element` key. The component's state manages the `selectedIndex`, and the `updateIndex` method handles selection changes triggered by the `onPress` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ThemeProvider in React Native Elements using JSX\nDESCRIPTION: This snippet demonstrates initializing and applying a custom theme to multiple Button components using ThemeProvider from React Native Elements. It uses the createTheme utility to define a default style (raised button) and wraps the component tree in a ThemeProvider to propagate these theme values. Dependencies include @rneui/themed and React; expected input is a React application structure. All buttons under ThemeProvider automatically receive themed props, and additional customization is possible by editing the theme object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/1.themprovider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\\n\\nconst theme = createTheme({\\n  Button: {\\n    raised: true,\\n  },\\n});\\n\\n// Your App\\nconst App = () => {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button title=\\\"My Button\\\" />\\n      <Button title=\\\"My 2nd Button\\\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Button - React Native Elements - JSX\nDESCRIPTION: This snippet shows how to render a basic Button component with a solid style and a title. The component is imported from React Native Elements and displays a touchable button labeled 'Solid Button'. No additional dependencies are required other than the main React Native Elements library. The title prop determines the button text, and this button does not use custom styles, icons, or advanced configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\\\"Solid Button\\\" />\n```\n\n----------------------------------------\n\nTITLE: Creating and Toggling an Overlay with Buttons in React Native Elements (TypeScript/JSX)\nDESCRIPTION: This snippet provides a complete functional example of using the Overlay component with React Native Elements in a TypeScript + JSX context. The component shows how to toggle the visibility of the Overlay using useState and a button, and presents styled texts and an action button with an icon inside the Overlay. Dependencies include @rneui/themed and react-native. Inputs include user button presses, and the Overlay's visibility is toggled. The example covers styling, state management, and custom icons, targeting mobile and ensuring best practices for React Native elements usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { Button, Overlay, Icon } from '@rneui/themed';\\nimport { View, Text, StyleSheet } from 'react-native';\\n\\ntype OverlayComponentProps = {};\\n\\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\\nconst [visible, setVisible] = useState(false);\\n\\nconst toggleOverlay = () => {\\n  setVisible(!visible);\\n};\\n\\nreturn (\\n  <View>\\n    <Button\\n      title=\\\"Open Overlay\\\"\\n      onPress={toggleOverlay}\\n      buttonStyle={styles.button}\\n    />\\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\\n      <Text style={styles.textPrimary}>Hello!</Text>\\n      <Text style={styles.textSecondary}>\\n        Welcome to React Native Elements\\n      </Text>\\n      <Button\\n        icon={\\n          <Icon\\n            name=\\\"wrench\\\"\\n            type=\\\"font-awesome\\\"\\n            color=\\\"white\\\"\\n            size={25}\\n            iconStyle={{ marginRight: 10 }}\\n          />\\n        }\\n        title=\\\"Start Building\\\"\\n        onPress={toggleOverlay}\\n      />\\n    </Overlay>\\n  </View>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nbutton: {\\n  margin: 10,\\n},\\ntextPrimary: {\\n  marginVertical: 20,\\n  textAlign: 'center',\\n  fontSize: 20,\\n},\\ntextSecondary: {\\n  marginBottom: 10,\\n  textAlign: 'center',\\n  fontSize: 17,\\n},\\n});\\n\\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Custom Header Component with Navigation and Icons\nDESCRIPTION: Full implementation of a custom Header component with left menu icon, center title, and right navigation buttons. Includes TypeScript types, styling, and integration with SafeAreaProvider. Features external link navigation to documentation and playground.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Rendering AirbnbRating Component in React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates how to integrate and display the AirbnbRating component from @rneui/themed in a TypeScript-based React Native app component. It creates a Ratings functional component that invokes the rating UI in three forms: default, disabled, and customized (with 11 steps and custom review texts). The code defines styles for consistent layout and ensures cross-platform fonts and coloring. Dependencies include react-native, react, and @rneui/themed, with configuration options for rating count, labels, and presentation states.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews={[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]}\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic BottomSheet in React Native\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the `BottomSheet` component from `react-native-elements`. It uses the `useState` hook to manage the visibility (`isVisible`) of the BottomSheet. An array `list` defines the items to be displayed within the sheet, using `ListItem` components. One list item is configured as a 'Cancel' button that hides the BottomSheet by calling `setIsVisible(false)` on press.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/bottomsheet.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\n<BottomSheet isVisible={isVisible}>\n  {list.map((l, i) => (\n    <ListItem key={i} containerStyle={l.containerStyle} onPress={l.onPress}>\n      <ListItem.Content>\n        <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n      </ListItem.Content>\n    </ListItem>\n  ))}\n</BottomSheet>;\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Button Style Selection with CheckBox\nDESCRIPTION: Shows how to simulate radio button behavior using `CheckBox` components. It uses `React.useState` to manage the selected index (`selectedIndex`) and custom icons (`checkedIcon=\"dot-circle-o\"`, `uncheckedIcon=\"circle-o\"`) to mimic radio buttons. Only one CheckBox can be checked at a time.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/CheckBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [selectedIndex, setIndex] = React.useState(0);\n\n     return (\n       <Stack row align=\"center\" spacing={4}>\n         <CheckBox\n           checked={selectedIndex === 0}\n           onPress={() => setIndex(0)}\n           checkedIcon=\"dot-circle-o\"\n           uncheckedIcon=\"circle-o\"\n         />\n         <CheckBox\n           checked={selectedIndex === 1}\n           onPress={() => setIndex(1)}\n           checkedIcon=\"dot-circle-o\"\n           uncheckedIcon=\"circle-o\"\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Dialog Types in React Native Elements\nDESCRIPTION: A complete React Native functional component example showcasing different uses of the `@rneui/themed` Dialog component. It demonstrates how to toggle visibility using state, and implement simple dialogs, dialogs with actions, loading indicators, buttonless dialogs, and custom dialogs containing checkboxes or list items. Dependencies include `react`, `react-native`, and `@rneui/themed` components (Button, Dialog, CheckBox, ListItem, Avatar).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport {\nButton,\nDialog,\nCheckBox,\nListItem,\nAvatar,\n} from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype DialogComponentProps = {};\n\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\nconst [visible1, setVisible1] = useState(false);\nconst [visible2, setVisible2] = useState(false);\nconst [visible3, setVisible3] = useState(false);\nconst [visible4, setVisible4] = useState(false);\nconst [visible5, setVisible5] = useState(false);\nconst [visible6, setVisible6] = useState(false);\nconst [checked, setChecked] = useState(1);\n\nconst toggleDialog1 = () => {\n  setVisible1(!visible1);\n};\nconst toggleDialog2 = () => {\n  setVisible2(!visible2);\n};\nconst toggleDialog3 = () => {\n  setVisible3(!visible3);\n};\nconst toggleDialog4 = () => {\n  setVisible4(!visible4);\n};\nconst toggleDialog5 = () => {\n  setVisible5(!visible5);\n};\nconst toggleDialog6 = () => {\n  setVisible6(!visible6);\n};\n\nconst userlist = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'amy.farha@gmail.com',\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'cjackson@gmail.com',\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'amandam@gmail.com',\n  },\n];\n\nreturn (\n  <View>\n    <View style={styles.buttonContainer}>\n      <Button\n        title=\"Open Simple Dialog\"\n        onPress={toggleDialog1}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Buttonless Dialog\"\n        onPress={toggleDialog4}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 1\"\n        onPress={toggleDialog5}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 2\"\n        onPress={toggleDialog6}\n        buttonStyle={styles.button}\n      />\n    </View>\n    <Dialog\n      isVisible={visible1}\n      onBackdropPress={toggleDialog1}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible2}\n      onBackdropPress={toggleDialog2}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n      <Dialog.Actions>\n        <Dialog.Button title=\"ACTION 1\" onPress={() => console.log('Primary Action Clicked!')}/>\n        <Dialog.Button title=\"ACTION 2\" onPress={() => console.log('Secondary Action Clicked!')}/>\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n      <Dialog.Loading />\n    </Dialog>\n    <Dialog\n      isVisible={visible4}\n      onBackdropPress={toggleDialog4}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible5}\n      onBackdropPress={toggleDialog5}\n    >\n      <Dialog.Title title=\"Select Preference\"/>\n      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\n        <CheckBox\n          key={i}\n          title={l}\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\n          checkedIcon=\"dot-circle-o\"\n          uncheckedIcon=\"circle-o\"\n          checked={checked === i + 1}\n          onPress={() => setChecked(i + 1)}\n        />\n      ))}\n\n      <Dialog.Actions>\n        <Dialog.Button\n          title=\"CONFIRM\"\n          onPress={() => {\n            console.log(`Option ${checked} was selected!`);\n            toggleDialog5();\n          }}\n        />\n        <Dialog.Button title=\"CANCEL\" onPress={toggleDialog5} />\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog\n      isVisible={visible6}\n      onBackdropPress={toggleDialog6}\n    >\n      <Dialog.Title title=\"Choose Account\"/>\n      {userlist.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={{\n            marginHorizontal: -10,\n            borderRadius: 8,\n          }}\n          onPress={toggleDialog6}\n        >\n          <Avatar rounded source={{ uri: l.avatar_url }} />\n          <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '700' }}>\n              {l.name}\n            </ListItem.Title>\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </Dialog>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  borderRadius: 6,\n  width: 220,\n  margin: 20,\n},\nbuttonContainer: {\n  margin: 20,\n  justifyContent: 'center',\n  alignItems: 'center',\n},\n});\n\nexport default Dialogs;\n```\n\n----------------------------------------\n\nTITLE: Configuring and Displaying BottomSheet using React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to integrate and display a BottomSheet modal using React Native Elements in a React Native project written in TypeScript. It shows proper setup with SafeAreaProvider, styled Button to trigger the modal, and rendering a dynamic list inside the BottomSheet. Dependencies include '@rneui/themed', 'react-native-safe-area-context', and 'react-native'. Key parameters are the 'isVisible' state to control modal visibility, styled list items, and custom actions such as closing the BottomSheet. The main input is user interaction with the button and BottomSheet options; output is a modal appearing from the screen bottom presenting selectable actions. Requires that react-native-safe-area-context be installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\\nimport { StyleSheet } from 'react-native';\\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\\n\\ntype BottomSheetComponentProps = {};\\n\\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\\nconst [isVisible, setIsVisible] = useState(false);\\nconst list = [\\n  { title: 'List Item 1' },\\n  { title: 'List Item 2' },\\n  {\\n    title: 'Cancel',\\n    containerStyle: { backgroundColor: 'red' },\\n    titleStyle: { color: 'white' },\\n    onPress: () => setIsVisible(false),\\n  },\\n];\\n\\nreturn (\\n  <SafeAreaProvider>\\n    <Button\\n      title=\\\"Open Bottom Sheet\\\"\\n      onPress={() => setIsVisible(true)}\\n      buttonStyle={styles.button}\\n    />\\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\\n      {list.map((l, i) => (\\n        <ListItem\\n          key={i}\\n          containerStyle={l.containerStyle}\\n          onPress={l.onPress}\\n        >\\n          <ListItem.Content>\\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\\n          </ListItem.Content>\\n        </ListItem>\\n      ))}\\n    </BottomSheet>\\n  </SafeAreaProvider>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nbutton: {\\n  margin: 10,\\n},\\n});\\n\\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Toggle Switch using @rneui/themed in React Native\nDESCRIPTION: This React Native functional component demonstrates the usage of the `Switch` component from the `@rneui/themed` library. It utilizes the `useState` hook to manage the switch's on/off state (`checked`). The `Switch` component's `value` is bound to the state, and the `onValueChange` handler updates the state when the user interacts with the switch. Basic styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Switch\nimport React, { useState } from 'react';\nimport { Switch } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\nconst [checked, setChecked] = useState(false);\n\nconst toggleSwitch = () => {\n  setChecked(!checked);\n};\n\nreturn (\n  <View style={styles.view}>\n   <Switch\n      value={checked}\n      onValueChange={(value) => setChecked(value)}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation with React Native Elements in JavaScript\nDESCRIPTION: This snippet creates a functional React component that utilizes the Tab and TabView components from the @rneui/themed library to build a three-tab navigation interface. It uses React's useState hook to manage the current tab index, customizes tab indicators and titles, and displays corresponding content areas for each tab. Dependencies include React, @rneui/themed, and necessary assets for icon rendering; the expected input is user interaction to switch tabs, and the output is a responsive tabbed UI with customized styling. The implementation assumes a React Native environment with the appropriate dependencies installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Tab, Text, TabView } from '@rneui/themed';\\n\\nexport default () => {\\nconst [index, setIndex] = React.useState(0);\\n\\nreturn (\\n  <>\\n    <Tab\\n      value={index}\\n      onChange={(e) => setIndex(e)}\\n      indicatorStyle={{\\n        backgroundColor: 'white',\\n        height: 3,\\n      }}\\n      variant=\"primary\"\\n    >\\n      <Tab.Item\\n        title=\"Recent\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"favorite\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"cart\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\\n      />\\n    </Tab>\\n\\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\\n        <Text h1>Recent</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\\n        <Text h1>Favorite</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\\n        <Text h1>Cart</Text>\\n      </TabView.Item>\\n    </TabView>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Themed Styles with makeStyles Hook Generator (TypeScript)\nDESCRIPTION: Illustrates using the `makeStyles` hook generator from `@rneui/themed` to define styles outside the component. The `useStyles` hook, generated by `makeStyles`, takes the theme and optional component props as arguments, allowing for dynamic, themed styling based on props (like `fullWidth`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/0.index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from '@rneui/themed';\n\ntype Params = {\n  fullWidth?: boolean;\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Comprehensive ListItem Examples in React Native using @rneui/themed (Expo Snack)\nDESCRIPTION: This Expo Snack demonstrates various implementations of the `@rneui/themed` ListItem component within a `FlatList`. It showcases features like linear gradient backgrounds, accordion lists, swipeable items with actions, integration of inputs, switches, button groups, checkboxes, badges, icons, and custom content layouts. The code defines data structures, manages state with `useState`, and uses `FlatList` for rendering lists efficiently.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE ListItem\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\nText,\nListItem,\nAvatar,\nIcon,\nBadge,\nListItemProps,\nButton,\nSwitch,\nlightColors\n} from '@rneui/themed';\n\nconst log = () => console.log('this is an example method');\n\ntype List1Data = {\ntitle: string;\nicon: string;\n};\nconst list1: List1Data[] = [\n{\n  title: 'Appointments',\n  icon: 'av-timer',\n},\n{\n  title: 'Trips',\n  icon: 'flight-takeoff',\n},\n{\n  title: 'Passwords',\n  icon: 'fingerprint',\n},\n{\n  title: 'Pitches',\n  icon: 'lightbulb-outline',\n},\n{\n  title: 'Updates',\n  icon: 'track-changes',\n},\n];\n\ntype List2Data = {\nname: string;\navatar_url: string;\nsubtitle: string;\nlinearGradientColors: string[];\n};\n\nconst list2: Partial<List2Data>[] = [\n{\n  name: 'Amy Farha',\n  avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n  subtitle: 'Vice President',\n  linearGradientColors: ['#FF9800', '#F44336'],\n},\n{\n  name: 'Chris Jackson',\n  avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n  subtitle: 'Vice Chairman',\n  linearGradientColors: ['#3F51B5', '#2196F3'],\n},\n{\n  name: 'Amanda Martin',\n  avatar_url:\n    'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n  subtitle: 'CEO',\n  linearGradientColors: ['#FFD600', '#FF9800'],\n},\n{\n  name: 'Christy Thomas',\n  avatar_url: 'https://randomuser.me/api/portraits/women/48.jpg',\n  subtitle: 'Lead Developer',\n  linearGradientColors: ['#4CAF50', '#8BC34A'],\n},\n{\n  name: 'Melissa Jones',\n  avatar_url:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMDQ0NDk1OV5BMl5BanBnXkFtZTcwNDcxOTExNg@@._V1_UY256_CR2,0,172,256_AL_.jpg',\n  subtitle: 'CTO',\n  linearGradientColors: ['#F44336', '#E91E63'],\n},\n];\n\ntype ListComponentProps = ListItemProps;\n\nconst Lists2: React.FunctionComponent<ListComponentProps> = () => {\nconst [expanded, setExpanded] = React.useState(false);\n\nconst listItemProps = {};\nconst renderRow = ({ item }: { item: List1Data }) => {\n  return (\n    <ListItem.Swipeable\n      onPress={log}\n      bottomDivider\n      leftContent={\n        <Button\n          title=\"Info\"\n          icon={{ name: 'info', color: 'white' }}\n          buttonStyle={{ minHeight: '100%' }}\n        />\n      }\n      rightContent={\n        <Button\n          title=\"Delete\"\n          icon={{ name: 'delete', color: 'white' }}\n          buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n        />\n      }\n    >\n      <Icon name={item.icon} />\n      <ListItem.Content>\n        <ListItem.Title>{item.title}</ListItem.Title>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem.Swipeable>\n  );\n};\nconst [switch1, setSwitch1] = useState(true);\nconst [checkbox1, setCheckbox1] = useState(true);\nconst [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\n\nreturn (\n  <>\n    <FlatList\n      ListHeaderComponent={\n        <>\n          <View style={{ paddingVertical: 8 }}>\n            {list2.map((l, i) => (\n              <ListItem\n                key={i}\n                linearGradientProps={{\n                  colors: l.linearGradientColors,\n                  start: [1, 0],\n                  end: [0.2, 0],\n                }}\n                containerStyle={{\n                  marginHorizontal: 16,\n                  marginVertical: 8,\n                  borderRadius: 8,\n                }}\n              >\n                <Avatar rounded source={{ uri: l.avatar_url }} />\n                <ListItem.Content>\n                  <ListItem.Title\n                    style={{ color: 'white', fontWeight: 'bold' }}\n                  >\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle style={[{ color: 'white' }]}>\n                    {l.subtitle}\n                  </ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Chevron color=\"white\" />\n              </ListItem>\n            ))}\n          </View>\n\n          <View style={styles.list}>\n            <ListItem.Accordion\n              content={\n                <>\n                  <Icon name=\"place\" size={30} />\n                  <ListItem.Content>\n                    <ListItem.Title>List Accordion</ListItem.Title>\n                  </ListItem.Content>\n                </>\n              }\n              isExpanded={expanded}\n              onPress={() => {\n                setExpanded(!expanded);\n              }}\n            >\n              {list2.map((l: Partial<List2Data>, i: React.Key) => (\n                <ListItem key={i} onPress={log} bottomDivider>\n                  <Avatar title={l.name} source={{ uri: l.avatar_url }} />\n                  <ListItem.Content>\n                    <ListItem.Title>{l.name}</ListItem.Title>\n                    <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Chevron />\n                </ListItem>\n              ))}\n            </ListItem.Accordion>\n          </View>\n          <View style={styles.list}>\n            {list2.map((l, i) => (\n              <ListItem key={i} bottomDivider>\n                <Icon name=\"user-circle-o\" type=\"font-awesome\" color=\"red\" />\n                <ListItem.Content>\n                  <ListItem.Title style={{ color: 'red' }}>\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Content right>\n                  <ListItem.Title right style={{ color: 'green' }}>\n                    11:00 am\n                  </ListItem.Title>\n                  <ListItem.Subtitle right>12:00 am</ListItem.Subtitle>\n                </ListItem.Content>\n              </ListItem>\n            ))}\n          </View>\n          <View style={styles.list}>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Name</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.Input placeholder=\"Type your name\" />\n              <ListItem.Chevron />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Switch that please ðŸ˜²</ListItem.Title>\n              </ListItem.Content>\n              <Switch\n                value={switch1}\n                onValueChange={(value) => setSwitch1(value)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Choose ðŸ¤¯</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.ButtonGroup\n                buttons={['Flower', 'Coco']}\n                selectedIndex={selectedButtonIndex}\n                onPress={(index) => setSelectedButtonIndex(index)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.CheckBox\n                checked={checkbox1}\n                onPress={() => setCheckbox1(!checkbox1)}\n              />\n              <ListItem.Content>\n                <ListItem.Title>Check that please ðŸ˜¢</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Badge value=\"12\" />\n              <ListItem.Content>\n                <ListItem.Title>With a Badge ! ðŸ˜»</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Icon name=\"check\" size={20} />\n              <ListItem.Content>\n                <ListItem.Title>This thing is checked ðŸ˜Ž</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n          <View style={styles.list}>\n            <ListItem>\n              <Avatar source={'https://randomuser.me/api/portraits/women/57.jpg'} />\n              <ListItem.Content>\n                <ListItem.Title>\n                  Limited supply! Its like digital gold!\n                </ListItem.Title>\n                <View style={styles.subtitleView}>\n                  <Image\n                    source={\"https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg\"}\n                    style={styles.ratingImage}\n                  />\n                  <Text style={styles.ratingText}>5 months ago</Text>\n                </View>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n        </>\n      }\n      data={list1}\n      keyExtractor={(a: List1Data, index: number) => index.toString()}\n      renderItem={renderRow}\n    />\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nlist: {\n  marginTop: 20,\n  borderTopWidth: 1,\n  borderColor: lightColors.greyOutline,\n},\nsubtitleView: {\n  flexDirection: 'row',\n  paddingLeft: 10,\n  paddingTop: 5,\n},\nratingImage: {\n  height: 19.21,\n  width: 100,\n},\nratingText: {\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Class-based ButtonGroup with Custom Components in React Native Elements (JavaScript)\nDESCRIPTION: This snippet implements a class-based approach to using the ButtonGroup component, with the 'buttons' prop accepting an array of objects where each object has an 'element' property referencing a custom React component. The code uses local state to manage the selected index and binds the update method, allowing for both single-selection logic and the rendering of custom button content. Requires React Native, React Native Elements, and standard React component conventions. Inputs are not directly parameterized, but the 'selectedIndex' and callback support dynamic interaction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstructor () {\\n  super()\\n  this.state = {\\n    selectedIndex: 2\\n  }\\n  this.updateIndex = this.updateIndex.bind(this)\\n}\\nupdateIndex (selectedIndex) {\\n  this.setState({selectedIndex})\\n}\\n\\nconst component1 = () => <Text>Hello</Text>\\nconst component2 = () => <Text>World</Text>\\nconst component3 = () => <Text>ButtonGroup</Text>\\n\\nrender () {\\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\\n  const { selectedIndex } = this.state\\n  return (\\n    <ButtonGroup\\n      onPress={this.updateIndex}\\n      selectedIndex={selectedIndex}\\n      buttons={buttons}\\n      containerStyle={{height: 100}} />\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Showcasing Various RNE Avatar Types in a React Native Component (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Native functional component named `Avatars` that demonstrates the usage of the `Avatar` component from '@rneui/themed'. It displays image avatars fetched from a predefined data list, icon avatars with different icons and background colors, letter avatars with specified titles, and badged avatars combining icons/images with an accessory badge. The component utilizes `ScrollView` for vertical scrolling and arranges avatars in rows using `View` components and basic styling defined via `StyleSheet`. It also includes a prototype extension for `Array` to add a `chunk` method used for grouping image avatars.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tooltip Usage with react-native-elements in TypeScript\nDESCRIPTION: This React Native functional component, TooltipComponent, showcases various Tooltip configurations using the react-native-elements library. Required dependencies include react, react-native, and react-native-elements for access to Tooltip, Text, colors, and styling props. The component arranges several Tooltip examples inside Views, customizing aspects like colors, widths, popover content, and pointer visibility. Each Tooltip is rendered with a corresponding label and style, and layout is managed with a StyleSheet and ScrollView. Inputs include no explicit user props; outputs are interactive UI features rendered onscreen. Limitations involve dependency on react-native-elements and intended use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Tooltip/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\\nimport { Tooltip, Text, colors } from 'react-native-elements';\\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\\n\\nconst { height } = Dimensions.get('window');\\n\\ntype ToolTipComponentProps = {};\\n\\nconst TooltipComponent: React.FunctionComponent<ToolTipComponentProps> = () => {\\n  const toolProps = {};\\n  return (\\n    <>\\n      <ScrollView>\\n        <View style={{ marginVertical: height / 8 }}>\\n          <View style={styles.view}>\\n            <Tooltip\\n              popover={<Text>no caret!</Text>}\\n              withPointer={false}\\n            >\\n              <Text>without caret</Text>\\n            </Tooltip>\\n            <Tooltip\\n              popover={<Text>Tooltip info goes here</Text>}\\n              width={200}\\n              backgroundColor={colors.primary}\\n            >\\n              <Text>Press me</Text>\\n            </Tooltip>\\n          </View>\\n          <View style={styles.view}>\\n            <Tooltip\\n              backgroundColor={colors.secondary}\\n              popover={\\n                <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\\n              }\\n              containerStyle={{ width: 200, height: 60 }}\\n            >\\n              <Text>Press me</Text>\\n            </Tooltip>\\n            <Tooltip\\n              containerStyle={{ width: 145, height: 130 }}\\n              popover={\\n                <Text>\\n                  {\\'Some big text full of important stuff for the super duper user that our design has been created for\\'}\\n                </Text>\\n              }\\n            >\\n              <Text>HUGE</Text>\\n            </Tooltip>\\n          </View>\\n          <View style={styles.view}>\\n            <Tooltip\\n              width={200}\\n              backgroundColor={colors.primary1}\\n              popover={<Text>Tooltip info goes here</Text>}\\n            >\\n              <Text>More attention</Text>\\n            </Tooltip>\\n          </View>\\n          <View style={styles.view}>\\n            <Tooltip\\n              width={200}\\n              backgroundColor={colors.primary2}\\n              popover={<Text>Tooltip info goes here</Text>}\\n            >\\n              <Text>I\\'m different</Text>\\n            </Tooltip>\\n            <Tooltip\\n              width={200}\\n              popover={<Text>Tooltip info goes here</Text>}\\n            >\\n              <Text>Press me</Text>\\n            </Tooltip>\\n          </View>\\n        </View>\\n      </ScrollView>\\n    </>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  view: {\\n    display: 'flex',\\n    flexDirection: 'row',\\n    justifyContent: 'space-evenly',\\n    marginVertical: 50,\\n  },\\n});\\n\\nexport default TooltipComponent;\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Navigation with React Native Elements in JavaScript\nDESCRIPTION: This snippet creates a functional component in JavaScript that implements tab navigation using React Native Elements' Tab and TabView components. It uses React state to track the active tab and renders content accordingly. Dependencies include @rneui/themed and React. Parameters such as the selected tab index, icon configuration, tab titles, and TabView styling are demonstrated. The expected input is user interaction with the tab interface, which updates the UI to show relevant content. Suitable for React Native projects aiming for customizable, dynamic tab navigation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Tab, Text, TabView } from '@rneui/themed';\\n\\nexport default () => {\\nconst [index, setIndex] = React.useState(0);\\n\\nreturn (\\n  <>\\n    <Tab\\n      value={index}\\n      onChange={(e) => setIndex(e)}\\n      indicatorStyle={{\\n        backgroundColor: 'white',\\n        height: 3,\\n      }}\\n      variant=\"primary\"\\n    >\\n      <Tab.Item\\n        title=\"Recent\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"favorite\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"cart\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\\n      />\\n    </Tab>\\n\\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\\n        <Text h1>Recent</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\\n        <Text h1>Favorite</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\\n        <Text h1>Cart</Text>\\n      </TabView.Item>\\n    </TabView>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabbed Interface with React Native Elements\nDESCRIPTION: This code demonstrates creating a tabbed interface with synchronized content using the Tab and TabView components from React Native Elements. It maintains tab state with useState, customizes tab appearance with icons and styling, and changes content views based on tab selection. The TabView uses spring animation for smooth transitions between different content sections.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Tab, Text, TabView } from '@rneui/themed';\n\nexport default () => {\nconst [index, setIndex] = React.useState(0);\n\nreturn (\n  <>\n    <Tab\n      value={index}\n      onChange={(e) => setIndex(e)}\n      indicatorStyle={{\n        backgroundColor: 'white',\n        height: 3,\n      }}\n      variant=\"primary\"\n    >\n      <Tab.Item\n        title=\"Recent\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\n      />\n      <Tab.Item\n        title=\"favorite\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\n      />\n      <Tab.Item\n        title=\"cart\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\n      />\n    </Tab>\n\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\n        <Text h1>Recent</Text>\n      </TabView.Item>\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\n        <Text h1>Favorite</Text>\n      </TabView.Item>\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\n        <Text h1>Cart</Text>\n      </TabView.Item>\n    </TabView>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ButtonGroup with Strings and Multiple Selection in React Native Elements (JavaScript)\nDESCRIPTION: This function-based React Native example provides interactive ButtonGroup components configured for both single and multiple selection. Utilizing React hooks for state management, it demonstrates how to bind callbacks for onPress events, pass either an array of strings or enable 'selectMultiple' mode with an array of selected indexes. The example also details custom styling via the StyleSheet API. Prerequisites are React, React Native, and @rneui/themed; inputs include arrays for button labels and handler functions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, {useState} from 'react'\\nimport { ButtonGroup } from '@rneui/themed'\\nimport { Text, StyleSheet } from 'react-native';\\n\\nexport default() => {\\nconst [selectedIndex, setSelectedIndex] = useState(0);\\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\\nreturn (\\n  <>\\n    <Text style={styles.subHeader}>Using Strings</Text>\\n    <ButtonGroup\\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\\n      selectedIndex={selectedIndex}\\n      onPress={(value) => {\\n        setSelectedIndex(value);\\n      }}\\n      containerStyle={{ marginBottom: 20 }}\\n    />\\n    <ButtonGroup\\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\\n      selectMultiple\\n      selectedIndexes={selectedIndexes}\\n      onPress={(value) => {\\n        setSelectedIndexes(value);\\n      }}\\n      containerStyle={{ marginBottom: 20 }}\\n    />\\n    <Text style={styles.subHeader}>Using Components</Text>\\n  </>\\n)\\n}\\n\\nconst styles = StyleSheet.create({\\nsubHeader: {\\n  backgroundColor : \"#2089dc\",\\n  color : \"white\",\\n  textAlign : \"center\",\\n  paddingVertical : 5,\\n  marginBottom : 10\\n}\\n})\n```\n\n----------------------------------------\n\nTITLE: Mapping Data to ListItem with Icon and Link - React Native Elements JavaScript\nDESCRIPTION: This snippet maps a data array and generates ListItems, each featuring an Icon, Title, and Chevron using the React Native Elements library. Icons are drawn from the given icon property in each array element, and pressing a ListItem can be further customized. Requires 'react-native-elements' and appropriate vector icon fonts; data should contain at least a 'title' and 'icon' field.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/listitem.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Icon } from 'react-native-elements'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Rendering Pricing Cards using React Native Elements in TypeScript\nDESCRIPTION: This snippet defines a React functional component, Pricing, which renders three PricingCard components from the @rneui/themed package inside a ScrollView. Each card presents distinct pricing tiers (Free, Starter, Enterprise), with configurable titles, prices, features, button props, and accent colors. Dependencies: React, react-native, @rneui/themed. The component expects no props and exports itself as default. Inputs are hardcoded pricing data; outputs are UI elements rendered in the app. Limited to three preset pricing tiers and assumes color constants and PricingCard are available from @rneui/themed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, colors } from '@rneui/themed';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <PricingCard\n        color={colors.primary}\n        title=\"Free\"\n        price=\"$0\"\n        info={['1 User', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary}\n        title=\"Starter\"\n        price=\"$19\"\n        info={['10 Users', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary2}\n        title=\"Enterprise\"\n        price=\"$49\"\n        info={['100 Users', 'One on One Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n    </ScrollView>\n  </>\n);\n};\n\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Rendering an Expandable Accordion List with React Native Elements - JavaScript\nDESCRIPTION: This JavaScript snippet creates an expandable accordion list using the ListItem.Accordion component from React Native Elements. It features an icon and title in the header, manages expansion state with the isExpanded prop and a local state setter, and dynamically generates list items from the list2 array containing objects with name, subtitle, and avatar_url. Each list item includes an avatar, title, subtitle, and chevron, and invokes a log handler on press. Dependencies include React Native, React Native Elements, and relevant icon libraries. Inputs include the expanded state, setExpanded function, the list2 array, and a log function; outputs are interactive, styled list UI components. The snippet assumes the surrounding component manages the state and data mappings.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\n<ListItem.Accordion\\n  content={\\n    <>\\n      <Icon name=\\\"place\\\" size={30} />\\n      <ListItem.Content>\\n        <ListItem.Title>List Accordion</ListItem.Title>\\n      </ListItem.Content>\\n    </>\\n  }\\n  isExpanded={expanded}\\n  onPress={() => {\\n    setExpanded(!expanded);\\n  }}\\n>\\n  {list2.map((l, i) => (\\n    <ListItem key={i} onPress={log} bottomDivider>\\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\\n      <ListItem.Content>\\n        <ListItem.Title>{l.name}</ListItem.Title>\\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\\n      </ListItem.Content>\\n      <ListItem.Chevron />\\n    </ListItem>\\n  ))}\\n</ListItem.Accordion>\\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Tiles with Images and Custom Content in React Native Elements (TypeScript)\nDESCRIPTION: This snippet defines a functional component in TypeScript that renders three distinct Tile components (from '@rneui/themed') inside a vertically scrollable view. Each tile showcases a different configuration: with overlay text, with a heart icon and an onPress handler, and with embedded custom content using child components. Usage of React Native's View, ScrollView, and StyleSheet is shown for layout, with styling and image URIs provided inline. This example depends on 'react-native', '@rneui/themed', and TypeScript setup. Expected inputs are static, with output rendered as styled UI elements. Limitations include hardcoded image URLs and some dummy handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from '@rneui/themed';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\nreturn (\n  <>\n    <View style={{ alignItems: 'center' }}>\n      <ScrollView style={{ paddingVertical: 10 }}>\n      <Text style={styles.subHeader}>Featured Tile</Text>\n        <Tile\n          imageSrc={{\n            uri:\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n          }}\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n          titleStyle={{ fontSize: 15 }}\n          featured\n          caption=\"Mahatma Gandhi\"\n          activeOpacity={1}\n          width={310}\n        />\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n        <View style={{ paddingTop: 20 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n            icon={{\n              name: 'heart',\n              type: 'font-awesome',\n              size: 60,\n              color: 'red',\n            }}\n            featured\n            activeOpacity={0.8}\n            onPress={() => {\n              'Tile pressed';\n            }}\n            width={310}\n          />\n        </View>\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n            }}\n            title=\"Half Dome, Yosemite\"\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n            activeOpacity={1}\n            width={310}\n            contentContainerStyle={{ height: 70 }}\n            style={{ paddingBottom: 20 }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text style={{ color: 'green' }}>Visit</Text>\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\n            </View>\n          </Tile>\n        </View>\n      </ScrollView>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Tiles;\n```\n\n----------------------------------------\n\nTITLE: Implementing RNE Card Component Examples in React Native\nDESCRIPTION: This React Native functional component (`Cards`) demonstrates the usage of the `@rneui/themed` Card component. It displays several cards within a `ScrollView`: one listing users with avatars, another showcasing different text font sizes (h1-h4), and a third featuring an image, descriptive text, and a button with an icon. The component utilizes `react`, `react-native` components (`View`, `ScrollView`, `StyleSheet`, `Image`), and `@rneui/themed` components (`Text`, `Card`, `Button`, `Icon`). Styling is defined using `StyleSheet.create`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n{\n  name: 'brynn',\n  avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n},\n{\n  name: 'thot leader',\n  avatar:\n    'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n},\n{\n  name: 'jsa',\n  avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n},\n{\n  name: 'talhaconcepts',\n  avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n},\n{\n  name: 'andy vitale',\n  avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n},\n{\n  name: 'katy friedson',\n  avatar:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n},\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.container}>\n        <Card>\n          <Card.Title>CARD WITH DIVIDER</Card.Title>\n          <Card.Divider />\n          {users.map((u, i) => {\n            return (\n              <View key={i} style={styles.user}>\n                <Image\n                  style={styles.image}\n                  resizeMode=\"cover\"\n                  source={{ uri: u.avatar }}\n                />\n                <Text style={styles.name}>{u.name}</Text>\n              </View>\n            );\n          })}\n        </Card>\n        <Card containerStyle={{ marginTop: 15 }}>\n          <Card.Title>FONTS</Card.Title>\n          <Card.Divider />\n          <Text style={styles.fonts} h1>\n            h1 Heading\n          </Text>\n          <Text style={styles.fonts} h2>\n            h2 Heading\n          </Text>\n          <Text style={styles.fonts} h3>\n            h3 Heading\n          </Text>\n          <Text style={styles.fonts} h4>\n            h4 Heading\n          </Text>\n          <Text style={styles.fonts}>Normal Text</Text>\n        </Card>\n        <Card>\n          <Card.Title>HELLO WORLD</Card.Title>\n          <Card.Divider />\n          <Card.Image\n            style={{ padding: 0 }}\n            source={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n          />\n          <Text style={{ marginBottom: 10 }}>\n            The idea with React Native Elements is more about component\n            structure than actual design.\n          </Text>\n          <Button\n            icon={\n              <Icon\n                name=\"code\"\n                color=\"#ffffff\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              borderRadius: 0,\n              marginLeft: 0,\n              marginRight: 0,\n              marginBottom: 0,\n            }}\n            title=\"VIEW NOW\"\n          />\n        </Card>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nfonts: {\n  marginBottom: 8,\n},\nuser: {\n  flexDirection: 'row',\n  marginBottom: 6,\n},\nimage: {\n  width: 30,\n  height: 30,\n  marginRight: 10,\n},\nname: {\n  fontSize: 16,\n  marginTop: 5,\n},\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Grid of Social Icons using RNE in React Native\nDESCRIPTION: This React Native functional component (`SocialIcons`) demonstrates how to display multiple `SocialIcon` components from `@rneui/themed`. It imports `SocialIcon`, defines an array (`dataList`) of social media types with optional `iconType`, and then uses `_.chunk` (implicitly from lodash) and `map` to render these icons in a 3-column grid within a `ScrollView`. Each `SocialIcon` is configured with its `type` and defaults `iconType` to 'font-awesome' if not specified. Dependencies include React, React Native components (`View`, `ScrollView`), `@rneui/themed` (`SocialIcon`), and potentially lodash (`_`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Social Icon\nimport React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\n\ntype IconData = {\ntype: SocialMediaType;\niconType: string;\n};\n\nconst dataList: Partial<IconData>[] = [\n{\n  type: 'facebook',\n},\n{\n  type: 'twitter',\n},\n{\n  type: 'google-plus-official',\n},\n{\n  type: 'google',\n},\n{\n  type: 'pinterest',\n},\n{\n  type: 'linkedin',\n},\n{\n  type: 'youtube',\n},\n{\n  type: 'vimeo',\n},\n{\n  type: 'tumblr',\n},\n{\n  type: 'instagram',\n},\n{\n  type: 'quora',\n},\n{\n  type: 'flickr',\n},\n{\n  type: 'foursquare',\n},\n{\n  type: 'wordpress',\n},\n{\n  type: 'stumbleupon',\n},\n{\n  type: 'github',\n},\n{\n  type: 'github-alt',\n},\n{\n  type: 'twitch',\n},\n{\n  type: 'medium',\n},\n{\n  type: 'soundcloud',\n},\n{\n  type: 'stack-overflow',\n},\n{\n  type: 'gitlab',\n},\n{\n  type: 'angellist',\n},\n{\n  type: 'codepen',\n},\n{\n  type: 'weibo',\n},\n{\n  type: 'vk',\n},\n{\n  type: 'facebook-messenger',\n  iconType: 'material-community',\n},\n{\n  type: 'whatsapp',\n},\n];\n\ntype SocialIconsComponentProps = {};\n\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\nconst socialProps = {};\nreturn (\n  <>\n    <ScrollView>\n      {_.chunk(dataList, 3).map(\n        (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n              marginTop: 10,\n              backgroundColor: '#4c4c4c',\n            }}\n            key={chunkIndex}\n          >\n            {chunk.map((l: Partial<IconData>, i: React.Key) => (\n              <SocialIcon\n                type={l.type}\n                iconType={l.iconType ? l.iconType : 'font-awesome'}\n                key={`${chunkIndex}-${i}`}\n              />\n            ))}\n          </View>\n        )\n      )}\n    </ScrollView>\n  </>\n);\n};\n\nexport default SocialIcons;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Component with React Native Elements\nDESCRIPTION: This snippet demonstrates how to create a functional component that uses the Switch component from React Native Elements. It includes state management with useState hook, a toggle function, and basic styling. The component renders a switch that can be toggled on and off.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\nconst [checked, setChecked] = useState(false);\n\nconst toggleSwitch = () => {\n  setChecked(!checked);\n};\n\nreturn (\n  <View style={styles.view}>\n   <Switch\n      value={checked}\n      onValueChange={(value) => setChecked(value)}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Styling Active Tab Items Conditionally in TypeScript\nDESCRIPTION: Illustrates how to apply conditional styling to `Tab.Item` components based on whether they are active. The `containerStyle` and `buttonStyle` props accept a function that receives the `active` boolean status, allowing dynamic style changes (e.g., changing the background color). The `scrollable` prop is also demonstrated.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tab.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab value={0} scrollable>\n  <Tab.Item\n    containerStyle={(active) => ({\n      backgroundColor: active ? \"red\" : undefined,\n    })}\n  >\n    Tab\n  </Tab.Item>\n  <Tab.Item\n    buttonStyle={(active) => ({\n      backgroundColor: active ? \"red\" : undefined,\n    })}\n  >\n    Tab\n  </Tab.Item>\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled View with Static Styles using styled in TypeScript\nDESCRIPTION: Demonstrates the basic usage of `styled` to wrap a standard React Native `View` component. It applies static styles (paddingHorizontal: 16) defined within an object to create a new `Container` component with default styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst Conatiner = styled(View)({\n  // default style of component\n  root: {\n    paddingHorizontal: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Button Sizes in React Native Elements\nDESCRIPTION: Shows how to create small, medium, and large buttons using the size prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button size=\"sm\">Small</Button>\n  <Button size=\"md\">Medium</Button>\n  <Button size=\"lg\">Large</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Component in React Native Elements\nDESCRIPTION: A TypeScript React component that demonstrates different uses of the Divider component including horizontal, vertical, and inset dividers. The component uses theme-based styling and includes examples with varying widths, colors, and inset types.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { Text, Divider, useTheme } from '@rneui/themed';\nimport { ScrollView, StyleSheet, View } from 'react-native';\n\ntype DividerViewTypes = {};\n\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\nconst { theme } = useTheme();\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\n        <Divider />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with width and color\n        </Text>\n        <Divider width={5} color={theme?.colors?.primary} />\n      </View>\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with left inset\n        </Text>\n        <Divider inset={true} />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with right inset\n        </Text>\n        <Divider inset={true} insetType=\"right\" />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with middle inset\n        </Text>\n        <Divider inset={true} insetType=\"middle\" />\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\n      </View>\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" />\n        <Text>Right text</Text>\n      </View>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" width={5} />\n        <Text>Right text</Text>\n      </View>\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Left text</Text>\n        <Divider\n          subHeader=\"Divider\"\n          inset={true}\n          subHeaderStyle={{ color: theme?.colors?.primary }}\n        />\n        <Text style={styles.horizontalText}>Right text</Text>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n},\nhorizontal: {\n  marginBottom: 10,\n},\nhorizontalText: {\n  textAlign: 'center',\n  fontSize: 16,\n  marginVertical: 10,\n},\nvertical: {\n  marginBottom: 10,\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n},\n});\n\nexport default DividerView;\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckBox Components in React Native Elements\nDESCRIPTION: This snippet demonstrates various ways to use the CheckBox component from React Native Elements. It includes examples of basic checkbox, custom icons, right-aligned icons, and icon customization using the Icon component. The component uses React hooks for state management.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { CheckBox, Icon } from '@rneui/themed';\n\ntype CheckboxComponentProps = {};\n\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\nconst [check1, setCheck1] = useState(false);\nconst [check2, setCheck2] = useState(false);\nconst [check3, setCheck3] = useState(false);\nconst [check4, setCheck4] = useState(false);\n\nreturn (\n  <>\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checked={check1}\n      onPress={() => setCheck1(!check1)}\n    />\n\n    <CheckBox\n      center\n      title=\"Click Here\"\n      checkedIcon=\"dot-circle-o\"\n      uncheckedIcon=\"circle-o\"\n      checked={check2}\n      onPress={() => setCheck2(!check2)}\n    />\n\n    <CheckBox\n      center\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\n      iconRight\n      iconType=\"material\"\n      checkedIcon=\"clear\"\n      uncheckedIcon=\"add\"\n      checkedColor=\"red\"\n      checked={check3}\n      onPress={() => setCheck3(!check3)}\n    />\n\n    <CheckBox\n      center\n      checkedIcon={\n        <Icon\n          name=\"radio-button-checked\"\n          type=\"material\"\n          color=\"green\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      uncheckedIcon={\n        <Icon\n          name=\"radio-button-unchecked\"\n          type=\"material\"\n          color=\"grey\"\n          size={25}\n          iconStyle={{ marginRight: 10 }}\n        />\n      }\n      checked={check4}\n      onPress={() => setCheck4(!check4)}\n    />\n  </>\n);\n};\n\nexport default CheckboxComponent;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to Theme Interface in TypeScript\nDESCRIPTION: Extends the main `Theme` interface from `@rneui/themed` using TypeScript declaration merging in a `themed.d.ts` file. This adds custom properties (`myCustomProperty` of type string, `myCustomFunction` of type function returning void) to the theme object type, enabling type safety and autocompletion for these custom values.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// themed.d.ts\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Theme {\n    myCustomProperty: string;\n    myCustomFunction: () => void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Tooltip Examples in React Native using @rneui/themed\nDESCRIPTION: Provides a runnable React Native functional component demonstrating various configurations of the Tooltip component from '@rneui/themed'. It showcases different props like `popover` content, `withPointer`, `width`, `backgroundColor`, and `containerStyle` to customize the tooltip's appearance and behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, colors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\n\nconst { height } = Dimensions.get('window');\n\ntype ToolTipComponentProps = {};\n\nconst TooltipComponent: React.FunctionComponent<ToolTipComponentProps> = () => {\nconst toolProps = {};\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <Tooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </Tooltip>\n          <Tooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={colors.primary}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            backgroundColor={colors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n          <Tooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </Tooltip>\n          <Tooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet Component in React Native with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a BottomSheet component using React Native Elements. It includes a button to trigger the BottomSheet, which contains a list of items. The component uses React hooks for state management and is wrapped in a SafeAreaProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\nimport { StyleSheet } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype BottomSheetComponentProps = {};\n\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\nreturn (\n  <SafeAreaProvider>\n    <Button\n      title=\"Open Bottom Sheet\"\n      onPress={() => setIsVisible(true)}\n      buttonStyle={styles.button}\n    />\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\n      {list.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={l.containerStyle}\n          onPress={l.onPress}\n        >\n          <ListItem.Content>\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </BottomSheet>\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\n});\n\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar List Items with FlatList and React Native Elements in JavaScript\nDESCRIPTION: This example uses React Native's FlatList to efficiently render a scrollable list of items with avatars and subtitles using React Native Elements. It defines a keyExtractor and a custom renderItem that includes an Avatar, Title, Subtitle, and a Chevron icon within a ListItem. Dependencies include '@rneui/themed' and the FlatList component, and the input is an array of user profiles. Outputs a performant, scrollable list. The component assumes 'list', 'keyExtractor', and 'renderItem' are defined in the same scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Toggleable Overlay in React Native Elements (JSX)\nDESCRIPTION: This is a functional React Native component example demonstrating the basic usage of the Overlay component from @rneui/themed. It uses the useState hook to control the overlay's visibility (isVisible prop) via a button press (onPress). The overlay also closes when the backdrop is pressed (onBackdropPress). Includes basic styling using StyleSheet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\nconst [visible, setVisible] = useState(false);\n\nconst toggleOverlay = () => {\n  setVisible(!visible);\n};\n\nreturn (\n  <View>\n    <Button\n      title=\"Open Overlay\"\n      onPress={toggleOverlay}\n      buttonStyle={styles.button}\n    />\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n      <Text style={styles.textPrimary}>Hello!</Text>\n      <Text style={styles.textSecondary}>\n        Welcome to React Native Elements\n      </Text>\n      <Button\n        icon={\n          <Icon\n            name=\"wrench\"\n            type=\"font-awesome\"\n            color=\"white\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        title=\"Start Building\"\n        onPress={toggleOverlay}\n      />\n    </Overlay>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\ntextPrimary: {\n  marginVertical: 20,\n  textAlign: 'center',\n  fontSize: 20,\n},\ntextSecondary: {\n  marginBottom: 10,\n  textAlign: 'center',\n  fontSize: 17,\n},\n});\n\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Families and Weights in React Native Elements Styles - TypeScript\nDESCRIPTION: This snippet defines style objects for various heading levels (h1Style, h2Style, h3Style) in React Native Elements, specifying both fontFamily and fontWeight properties. It demonstrates how to assign custom fonts (e.g., Nunito-SemiBold, Nunito-Regular, Nunito-Bold) and explicitly set font weights for each style. Developers should ensure that the specified fontWeight values correspond to weights available in the chosen font family on Android, as mismatched weights may not render as expected. Inputs are style objects for headings; outputs are styled text components with the defined typography.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n    h1Style: {\n      fontFamily: 'Nunito-SemiBold',\n      fontWeight: '300',\n    },\n    h2Style: {\n      fontFamily: 'Nunito-Regular',\n      fontWeight: '100',\n    },\n    h3Style: {\n      fontFamily: 'Nunito-Bold',\n      fontWeight: '500',\n    },\n\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Usage in React Native Elements\nDESCRIPTION: Demonstrates the basic implementation of a Tooltip component with a text element inside the popover. The tooltip is triggered by a pressable text element.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tooltip, Text } from 'react-native-elements';\n\n...\n\n<Tooltip popover={<Text>Info here</Text>}>\n  <Text>Press me</Text>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Configuring Skeleton Animations in React Native Elements (TypeScript/TSX)\nDESCRIPTION: Demonstrates the different animation options for the `Skeleton` component: `pulse` (default), `wave`, and `none`. The `wave` animation requires passing a `LinearGradientComponent` prop (e.g., from `expo-linear-gradient` or `react-native-linear-gradient`). Assumes usage of a `Stack` component for layout.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Skeleton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Skeleton animation=\"pulse\" width={80} height={40} />\n  <Skeleton\n    LinearGradientComponent={LinearGradient}\n    animation=\"wave\"\n    width={80}\n    height={40}\n  />\n  <Skeleton animation=\"none\" width={80} height={40} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Dialog Variations with State Control - React Native Elements - TypeScript/JSX\nDESCRIPTION: This code snippet demonstrates a React functional component that showcases various Dialog usages in React Native Elements, including simple dialogs, multi-action dialogs, loading indicators, checkbox preference dialogs, and user selection dialogs. It manages visibility state for each dialog using the useState hook, defines utility functions for toggling dialogs, and renders components from '@rneui/themed'. Dependencies include React, React Native, and '@rneui/themed'. The component expects no props and manages all interactions internally, with dialogs responding to button presses or backdrop closures. The output is a highly interactive UI with multiple dialog patterns for demonstration and reuse.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\\nimport {\\nButton,\\nDialog,\\nCheckBox,\\nListItem,\\nAvatar,\\n} from '@rneui/themed';\\nimport { View, Text, StyleSheet } from 'react-native';\\n\\ntype DialogComponentProps = {};\\n\\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\\nconst [visible1, setVisible1] = useState(false);\\nconst [visible2, setVisible2] = useState(false);\\nconst [visible3, setVisible3] = useState(false);\\nconst [visible4, setVisible4] = useState(false);\\nconst [visible5, setVisible5] = useState(false);\\nconst [visible6, setVisible6] = useState(false);\\nconst [checked, setChecked] = useState(1);\\n\\nconst toggleDialog1 = () => {\\n  setVisible1(!visible1);\\n};\\nconst toggleDialog2 = () => {\\n  setVisible2(!visible2);\\n};\\nconst toggleDialog3 = () => {\\n  setVisible3(!visible3);\\n};\\nconst toggleDialog4 = () => {\\n  setVisible4(!visible4);\\n};\\nconst toggleDialog5 = () => {\\n  setVisible5(!visible5);\\n};\\nconst toggleDialog6 = () => {\\n  setVisible6(!visible6);\\n};\\n\\nconst userlist = [\\n  {\\n    name: 'Amy Farha',\\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\\n    subtitle: 'amy.farha@gmail.com',\\n  },\\n  {\\n    name: 'Chris Jackson',\\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\\n    subtitle: 'cjackson@gmail.com',\\n  },\\n  {\\n    name: 'Amanda Martin',\\n    avatar_url:\\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\\n    subtitle: 'amandam@gmail.com',\\n  },\\n];\\n\\nreturn (\\n  <View>\\n    <View style={styles.buttonContainer}>\\n      <Button\\n        title=\\\"Open Simple Dialog\\\"\\n        onPress={toggleDialog1}\\n        buttonStyle={styles.button}\\n      />\\n      <Button\\n        title=\\\"Open Mutli Action Dialog\\\"\\n        onPress={toggleDialog2}\\n        buttonStyle={styles.button}\\n      />\\n      <Button\\n        title=\\\"Open Loading Dialog\\\"\\n        onPress={toggleDialog3}\\n        buttonStyle={styles.button}\\n      />\\n      <Button\\n        title=\\\"Open Buttonless Dialog\\\"\\n        onPress={toggleDialog4}\\n        buttonStyle={styles.button}\\n      />\\n      <Button\\n        title=\\\"Open Custom Dialog 1\\\"\\n        onPress={toggleDialog5}\\n        buttonStyle={styles.button}\\n      />\\n      <Button\\n        title=\\\"Open Custom Dialog 2\\\"\\n        onPress={toggleDialog6}\\n        buttonStyle={styles.button}\\n      />\\n    </View>\\n    <Dialog\\n      isVisible={visible1}\\n      onBackdropPress={toggleDialog1}\\n    >\\n      <Dialog.Title title=\\\"Dialog Title\\\"/>\\n      <Text>Dialog body text. Add relevant information here.</Text>\\n    </Dialog>\\n    <Dialog\\n      isVisible={visible2}\\n      onBackdropPress={toggleDialog2}\\n    >\\n      <Dialog.Title title=\\\"Dialog Title\\\"/>\\n      <Text>Dialog body text. Add relevant information here.</Text>\\n      <Dialog.Actions>\\n        <Dialog.Button title=\\\"ACTION 1\\\" onPress={() => console.log('Primary Action Clicked!')}/>\\n        <Dialog.Button title=\\\"ACTION 2\\\" onPress={() => console.log('Secondary Action Clicked!')}/>\\n      </Dialog.Actions>\\n    </Dialog>\\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\\n      <Dialog.Loading />\\n    </Dialog>\\n    <Dialog\\n      isVisible={visible4}\\n      onBackdropPress={toggleDialog4}\\n    >\\n      <Dialog.Title title=\\\"Dialog Title\\\"/>\\n      <Text>Dialog body text. Add relevant information here.</Text>\\n    </Dialog>\\n    <Dialog\\n      isVisible={visible5}\\n      onBackdropPress={toggleDialog5}\\n    >\\n      <Dialog.Title title=\\\"Select Preference\\\"/>\\n      {[\\'Option 1\\', \\'Option 2\\', \\'Option 3\\'].map((l, i) => (\\n        <CheckBox\\n          key={i}\\n          title={l}\\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\\n          checkedIcon=\\\"dot-circle-o\\\"\\n          uncheckedIcon=\\\"circle-o\\\"\\n          checked={checked === i + 1}\\n          onPress={() => setChecked(i + 1)}\\n        />\\n      ))}\\n\\n      <Dialog.Actions>\\n        <Dialog.Button\\n          title=\\\"CONFIRM\\\"\\n          onPress={() => {\\n            console.log(`Option ${checked} was selected!`);\\n            toggleDialog5();\\n          }}\\n        />\\n        <Dialog.Button title=\\\"CANCEL\\\" onPress={toggleDialog5} />\\n      </Dialog.Actions>\\n    </Dialog>\\n    <Dialog\\n      isVisible={visible6}\\n      onBackdropPress={toggleDialog6}\\n    >\\n      <Dialog.Title title=\\\"Choose Account\\\"/>\\n      {userlist.map((l, i) => (\\n        <ListItem\\n          key={i}\\n          containerStyle={{\\n            marginHorizontal: -10,\\n            borderRadius: 8,\\n          }}\\n          onPress={toggleDialog6}\\n        >\\n          <Avatar rounded source={{ uri: l.avatar_url }} />\\n          <ListItem.Content>\\n            <ListItem.Title style={{ fontWeight: '700' }}>\\n              {l.name}\\n            </ListItem.Title>\\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\\n          </ListItem.Content>\\n        </ListItem>\\n      ))}\\n    </Dialog>\\n  </View>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nbutton: {\\n  borderRadius: 6,\\n  width: 220,\\n  margin: 20,\\n},\\nbuttonContainer: {\\n  margin: 20,\\n  justifyContent: 'center',\\n  alignItems: 'center',\\n},\\n});\\n\\nexport default Dialogs;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Theme Colors in React Native Elements using JSX\nDESCRIPTION: Demonstrates how to define custom primary colors for both light and dark modes using `createTheme` and apply the theme globally using `ThemeProvider` from `@rneui/themed`. The `mode` property sets the initial theme mode.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n  mode: 'light',\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Theme Mode with useThemeMode Hook in React Native Elements (TSX)\nDESCRIPTION: This snippet shows how to use the `useThemeMode` hook from `@rneui/themed` to get the current theme mode (e.g., 'light' or 'dark') and a function (`setMode`) to change it. The example renders a button that displays the current mode and updates it to 'dark' when pressed. Requires `@rneui/themed`, React, and a `ThemeProvider` configured for theme modes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/1.themprovider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThemeMode } from '@rneui/themed';\n\nfunction Demo() {\n  const { mode, setMode } = useThemeMode();\n\n  return <Button onPress={() => setMode('dark')} title={mode} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Native Colors with ThemeProvider - React Native (JSX/JavaScript)\nDESCRIPTION: This JSX/JavaScript snippet demonstrates platform-specific theming by leveraging React Native's Platform API with React Native Elements. It conditionally selects the light color palette for Android or iOS using Platform.select, and applies the resulting theme globally with ThemeProvider. The included Button component then adopts the appropriate native blue color per platform. Requires react-native, @rneui/themed, and their peer dependencies; key parameters include the lightColors.platform namespace and Platform API.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/2.theme object.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying and Customizing Images - React Native Elements Image - JavaScript\nDESCRIPTION: Demonstrates how to import and use the Image component from react-native-elements as a drop-in replacement for React Native's standard Image. The first snippet renders a standard image, while the second adds a custom ActivityIndicator as placeholder content during loading. Requires dependencies: react-native, react-native-elements. Key parameters: source (image URL), style (dimensions), PlaceholderContent (custom loading indicator). Inputs: props to Image component. Output: rendered image with optional placeholder. No additional configuration needed, but usage presumes knowledge of React Native components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/image.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ActivityIndicator } from 'react-native';\\nimport { Image } from 'react-native-elements';\\n\\n// Standard Image\\n<Image\\n  source={{ uri: image }}\\n  style={{ width: 200, height: 200 }}\\n/>\\n\\n\\n// Image with custom placeholder content\\n<Image\\n  source={{ uri: image }}\\n  style={{ width: 200, height: 200 }}\\n  PlaceholderContent={<ActivityIndicator />}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering FAB Variations with React Native Elements - JavaScript\nDESCRIPTION: This code snippet exports a React Native functional component that demonstrates multiple uses of the FAB (Floating Action Button) component from the @rneui/themed package. It requires React, React Native's View and Text, and FAB from @rneui/themed as dependencies. The component manages FAB visibility state and renders FABs of different sizes, colors, icons, titles, loading states, and disabled states, as well as buttons for hiding/showing the FAB dynamically. Expected input is via user interaction with the FABs; visible state is toggled via onPress events, and no external data or props are required. All UI styles and behaviors are included inline, suitable for demos and testing.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { FAB } from '@rneui/themed';\\n\\nexport default () => {\\nconst [visible, setVisible] = React.useState(true);\\n\\nreturn (\\n  <>\\n    <View\\n      style={{\\n        alignItems: 'center',\\n        paddingVertical: 5,\\n        flexGrow: 1,\\n      }}\\n    >\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Small Size\\n      </Text>\\n      <FAB\\n        loading\\n        visible={visible}\\n        icon={{ name: 'add', color: 'white' }}\\n        size=\"small\"\\n      />\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Large Size\\n      </Text>\\n      <FAB\\n        visible={visible}\\n        icon={{ name: 'add', color: 'white' }}\\n        color=\"green\"\\n      />\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Primary Color\\n      </Text>\\n      <FAB\\n        visible={visible}\\n        title=\"Navigate\"\\n        upperCase\\n        icon={{ name: 'place', color: 'white' }}\\n      />\\n\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\\n\\n      <FAB\\n        visible={visible}\\n        disabled\\n        title=\"Extended\"\\n        icon={{\\n          name: 'place',\\n          color: 'white',\\n        }}\\n      />\\n      <FAB\\n        visible={visible}\\n        onPress={() => setVisible(!visible)}\\n        placement=\"right\"\\n        title=\"Hide\"\\n        icon={{ name: 'delete', color: 'white' }}\\n        color=\"red\"\\n      />\\n      <FAB\\n        visible={!visible}\\n        onPress={() => setVisible(!visible)}\\n        placement=\"left\"\\n        title=\"Show\"\\n        icon={{ name: 'edit', color: 'white' }}\\n        color=\"green\"\\n      />\\n    </View>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying and Customizing Image Loading in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to utilize the Image component from react-native-elements as a replacement for React Native's built-in Image component. It shows two variants: one using the default image loader and another specifying a custom loading placeholder with an ActivityIndicator. Dependencies include react-native-elements and react-native. The 'source' prop takes an image URI, 'style' sets width and height, and 'PlaceholderContent' can render any React Native element while the image is loading. The Image component outputs the desired image, enhancing it with a smoother load and placeholder capability. Compatibility with React Native is required.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/image.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ActivityIndicator } from 'react-native';\nimport { Image } from 'react-native-elements';\n\n// Standard Image\n<Image\n  source={{ uri: image }}\n  style={{ width: 200, height: 200 }}\n/>\n\n\n// Image with custom placeholder content\n<Image\n  source={{ uri: image }}\n  style={{ width: 200, height: 200 }}\n  PlaceholderContent={<ActivityIndicator />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Avatars in ListItems with React Native Elements (TypeScript/React Native)\nDESCRIPTION: This example demonstrates adding avatars to ListItems, using either images, outlined icons, or initials. The code composes <Avatar>, <ListItem.Content>, <ListItem.Title>, and <ListItem.Subtitle> within each list item, optionally with a bottom divider. Dependencies: '@rneui/themed'. Inputs: avatar props (image URI, icon configuration, title), text content. Outputs: stylized list rows with avatars. Suitable for contact or user lists, supports multiple avatar formats.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<>\n  <ListItem bottomDivider>\n    <Avatar\n      rounded\n      source={{ uri: \"https://randomuser.me/api/portraits/men/36.jpg\" }}\n    />\n    <ListItem.Content>\n      <ListItem.Title>John Doe</ListItem.Title>\n      <ListItem.Subtitle>President</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n  <ListItem bottomDivider>\n    <Avatar\n      rounded\n      icon={{\n        name: \"person-outline\",\n        type: \"material\",\n        size: 26,\n      }}\n      containerStyle={{ backgroundColor: \"#c2c2c2\" }}\n    />\n    <ListItem.Content>\n      <ListItem.Title>Alba King</ListItem.Title>\n      <ListItem.Subtitle>Vice President</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n  <ListItem>\n    <Avatar rounded title=\"A\" containerStyle={{ backgroundColor: \"grey\" }} />\n    <ListItem.Content>\n      <ListItem.Title>Adam Eva</ListItem.Title>\n      <ListItem.Subtitle>Vice Chairman</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n</>\n```\n\n----------------------------------------\n\nTITLE: Switching Theme Mode Based on useColorScheme Hook (TypeScript)\nDESCRIPTION: This code demonstrates leveraging the useColorScheme hook from react-native to switch the application's theme mode automatically, adapting the theme definition according to system preference. The theme object's mode is synchronized with the device color scheme before being passed to ThemeProvider. Dependencies are react-native and @rneui/themed, and it enables a responsive and user-centric theming solution.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useColorScheme } from 'react-native';\n\nconst theme = createTheme({\n  // ...\n});\n\nexport const App = () => {\n  theme.mode = useColorScheme();\n\n  return (\n    <ThemeProvider theme={theme}>\n      {/*...*/}\n      {/*...*/}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Icons Grid in React Native Elements\nDESCRIPTION: Creates a scrollable grid of social media icons using React Native Elements' SocialIcon component. The implementation includes TypeScript types, a data structure for icon configurations, and renders icons in rows of three using the ScrollView and View components. Each icon is configured with its platform type and optional custom icon type.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\n\ntype IconData = {\ntype: SocialMediaType;\niconType: string;\n};\n\nconst dataList: Partial<IconData>[] = [\n{\n  type: 'facebook',\n},\n{\n  type: 'twitter',\n},\n{\n  type: 'google-plus-official',\n},\n{\n  type: 'google',\n},\n{\n  type: 'pinterest',\n},\n{\n  type: 'linkedin',\n},\n{\n  type: 'youtube',\n},\n{\n  type: 'vimeo',\n},\n{\n  type: 'tumblr',\n},\n{\n  type: 'instagram',\n},\n{\n  type: 'quora',\n},\n{\n  type: 'flickr',\n},\n{\n  type: 'foursquare',\n},\n{\n  type: 'wordpress',\n},\n{\n  type: 'stumbleupon',\n},\n{\n  type: 'github',\n},\n{\n  type: 'github-alt',\n},\n{\n  type: 'twitch',\n},\n{\n  type: 'medium',\n},\n{\n  type: 'soundcloud',\n},\n{\n  type: 'stack-overflow',\n},\n{\n  type: 'gitlab',\n},\n{\n  type: 'angellist',\n},\n{\n  type: 'codepen',\n},\n{\n  type: 'weibo',\n},\n{\n  type: 'vk',\n},\n{\n  type: 'facebook-messenger',\n  iconType: 'material-community',\n},\n{\n  type: 'whatsapp',\n},\n];\n\ntype SocialIconsComponentProps = {};\n\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\nconst socialProps = {};\nreturn (\n  <>\n    <ScrollView>\n      {_.chunk(dataList, 3).map(\n        (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n              marginTop: 10,\n              backgroundColor: '#4c4c4c',\n            }}\n            key={chunkIndex}\n          >\n            {chunk.map((l: Partial<IconData>, i: React.Key) => (\n              <SocialIcon\n                type={l.type}\n                iconType={l.iconType ? l.iconType : 'font-awesome'}\n                key={`${chunkIndex}-${i}`}\n              />\n            ))}\n          </View>\n        )\n      )}\n    </ScrollView>\n  </>\n);\n};\n\nexport default SocialIcons;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RNE Tooltip Usage in React Native\nDESCRIPTION: This is a complete React Native functional component example showcasing various uses of the `Tooltip` component from `@rneui/themed`. It demonstrates configuring tooltips with and without pointers (`withPointer`), setting custom widths, background colors (`backgroundColor`), container styles (`containerStyle`), and different popover content using the `popover` prop. The example uses `ScrollView` and `StyleSheet` for layout.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, lightColors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\n\nconst { height } = Dimensions.get('window');\n\ntype ToolTipComponentProps = {};\n\nconst TooltipComponent: React.FunctionComponent<ToolTipComponentProps> = () => {\nconst toolProps = {};\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <Tooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </Tooltip>\n          <Tooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={lightColors.primary}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            backgroundColor={lightColors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n          <Tooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={lightColors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={lightColors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </Tooltip>\n          <Tooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient with Chip Component\nDESCRIPTION: Example showing how to use LinearGradient with a Chip component in React Native Elements. Uses react-native-linear-gradient package to create a gradient effect with red and pink colors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Native Colors in React Native Elements Theme (JSX)\nDESCRIPTION: Shows how to configure the theme to use the native color palette of the respective platform (iOS or Android) by utilizing the `Platform` API from `react-native` and the predefined platform colors (`lightColors.platform.android`, `lightColors.platform.ios`) within `createTheme`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Rating Component Example in React Native Elements\nDESCRIPTION: This snippet provides a full implementation of various Rating component configurations. It includes different rating types (star, custom, heart), read-only ratings, fractional ratings, and custom styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Styles with ThemeProvider in React Native Elements (TSX)\nDESCRIPTION: Illustrates how to apply global styles to components using `ThemeProvider` and `createTheme` from `@rneui/themed`. This example defines a theme that sets the default `titleStyle` color for all `Button` components within the provider to red, overriding internal component styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dialog Modals with React Native Elements in TypeScript\nDESCRIPTION: This React functional component, written in TypeScript, presents a collection of buttons that trigger various dialog modal types using the react-native-elements library in a React Native context. It leverages state hooks to toggle visibility and manage user selections for each dialog type, demonstrating features such as multi-action dialogs, loading indicators, custom content with checkboxes, and user account selection with avatars. Dependencies include react, react-native, react-native-elements, and their respective peer components; key props involve dialog visibility booleans, event handlers for toggling, and user/option lists. The component expects to run within a properly configured React Native project and produces visual modal dialogs as output; it requires no direct user input beyond button presses. Some dialogs demonstrate advanced usage like dynamic list and checkbox rendering, while all components are styled via StyleSheet for layout and appearance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Dialog/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport {\\n  Button,\\n  Dialog,\\n  CheckBox,\\n  ListItem,\\n  Avatar,\\n} from 'react-native-elements';\\nimport { View, Text, StyleSheet } from 'react-native';\\n\\ntype DialogComponentProps = {};\\n\\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\\n  const [visible1, setVisible1] = useState(false);\\n  const [visible2, setVisible2] = useState(false);\\n  const [visible3, setVisible3] = useState(false);\\n  const [visible4, setVisible4] = useState(false);\\n  const [visible5, setVisible5] = useState(false);\\n  const [visible6, setVisible6] = useState(false);\\n  const [checked, setChecked] = useState(1);\\n\\n  const toggleDialog1 = () => {\\n    setVisible1(!visible1);\\n  };\\n  const toggleDialog2 = () => {\\n    setVisible2(!visible2);\\n  };\\n  const toggleDialog3 = () => {\\n    setVisible3(!visible3);\\n  };\\n  const toggleDialog4 = () => {\\n    setVisible4(!visible4);\\n  };\\n  const toggleDialog5 = () => {\\n    setVisible5(!visible5);\\n  };\\n  const toggleDialog6 = () => {\\n    setVisible6(!visible6);\\n  };\\n\\n  const userlist = [\\n    {\\n      name: 'Amy Farha',\\n      avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\\n      subtitle: 'amy.farha@gmail.com',\\n    },\\n    {\\n      name: 'Chris Jackson',\\n      avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\\n      subtitle: 'cjackson@gmail.com',\\n    },\\n    {\\n      name: 'Amanda Martin',\\n      avatar_url:\\n        'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\\n      subtitle: 'amandam@gmail.com',\\n    },\\n  ];\\n\\n  return (\\n    <View>\\n      <View style={styles.buttonContainer}>\\n        <Button\\n          title=\\\"Open Simple Dialog\\\"\\n          onPress={toggleDialog1}\\n          buttonStyle={styles.button}\\n        />\\n        <Button\\n          title=\\\"Open Mutli Action Dialog\\\"\\n          onPress={toggleDialog2}\\n          buttonStyle={styles.button}\\n        />\\n        <Button\\n          title=\\\"Open Loading Dialog\\\"\\n          onPress={toggleDialog3}\\n          buttonStyle={styles.button}\\n        />\\n        <Button\\n          title=\\\"Open Buttonless Dialog\\\"\\n          onPress={toggleDialog4}\\n          buttonStyle={styles.button}\\n        />\\n        <Button\\n          title=\\\"Open Custom Dialog 1\\\"\\n          onPress={toggleDialog5}\\n          buttonStyle={styles.button}\\n        />\\n        <Button\\n          title=\\\"Open Custom Dialog 2\\\"\\n          onPress={toggleDialog6}\\n          buttonStyle={styles.button}\\n        />\\n      </View>\\n      <Dialog\\n        isVisible={visible1}\\n        onBackdropPress={toggleDialog1}\\n      >\\n        <Dialog.Title title=\\\"Dialog Title\\\"/>\\n        <Text>Dialog body text. Add relevant information here.</Text>\\n      </Dialog>\\n      <Dialog\\n        isVisible={visible2}\\n        onBackdropPress={toggleDialog2}\\n      >\\n        <Dialog.Title title=\\\"Dialog Title\\\"/>\\n        <Text>Dialog body text. Add relevant information here.</Text>\\n        <Dialog.Actions>\\n          <Dialog.Button title=\\\"ACTION 1\\\" onPress={() => console.log('Primary Action Clicked!')}/>\\n          <Dialog.Button title=\\\"ACTION 2\\\" onPress={() => console.log('Secondary Action Clicked!')}/>\\n        </Dialog.Actions>\\n      </Dialog>\\n      <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\\n        <Dialog.Loading />\\n      </Dialog>\\n      <Dialog\\n        isVisible={visible4}\\n        onBackdropPress={toggleDialog4}\\n      >\\n        <Dialog.Title title=\\\"Dialog Title\\\"/>\\n        <Text>Dialog body text. Add relevant information here.</Text>\\n      </Dialog>\\n      <Dialog\\n        isVisible={visible5}\\n        onBackdropPress={toggleDialog5}\\n      >\\n        <Dialog.Title title=\\\"Select Preference\\\"/>\\n        {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\\n          <CheckBox\\n            key={i}\\n            title={l}\\n            containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\\n            checkedIcon=\\\"dot-circle-o\\\"\\n            uncheckedIcon=\\\"circle-o\\\"\\n            checked={checked === i + 1}\\n            onPress={() => setChecked(i + 1)}\\n          />\\n        ))}\\n\\n        <Dialog.Actions>\\n          <Dialog.Button\\n            title=\\\"CONFIRM\\\"\\n            onPress={() => {\\n              console.log(`Option ${checked} was selected!`);\\n              toggleDialog5();\\n            }}\\n          />\\n          <Dialog.Button title=\\\"CANCEL\\\" onPress={toggleDialog5} />\\n        </Dialog.Actions>\\n      </Dialog>\\n      <Dialog\\n        isVisible={visible6}\\n        onBackdropPress={toggleDialog6}\\n      >\\n        <Dialog.Title title=\\\"Choose Account\\\"/>\\n        {userlist.map((l, i) => (\\n          <ListItem\\n            key={i}\\n            containerStyle={{\\n              marginHorizontal: -10,\\n              borderRadius: 8,\\n            }}\\n            onPress={toggleDialog6}\\n          >\\n            <Avatar rounded source={{ uri: l.avatar_url }} />\\n            <ListItem.Content>\\n              <ListItem.Title style={{ fontWeight: '700' }}>\\n                {l.name}\\n              </ListItem.Title>\\n              <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\\n            </ListItem.Content>\\n          </ListItem>\\n        ))}\\n      </Dialog>\\n    </View>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  button: {\\n    borderRadius: 6,\\n    width: 220,\\n    margin: 20,\\n  },\\n  buttonContainer: {\\n    margin: 20,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n  },\\n});\\n\\nexport default Dialogs;\n```\n\n----------------------------------------\n\nTITLE: Using CheckBox with Labels in React Native\nDESCRIPTION: Illustrates how to add a text label to a `CheckBox` component using the `title` prop. It also shows a disabled checkbox with a label by setting the `disabled` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/CheckBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <CheckBox checked title=\"Label\" />\n  <CheckBox checked disabled title=\"Label\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Basic BottomSheet Implementation with React Native Elements (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates a functional React component using the `BottomSheet` from `@rneui/themed`. It uses the `useState` hook to manage the visibility state of the bottom sheet. The sheet displays a list of items defined in the `list` array, rendered using `ListItem`. One item includes specific styling and an `onPress` handler to close the sheet. The component is wrapped in `SafeAreaProvider` as required.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\nimport { StyleSheet } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype BottomSheetComponentProps = {};\n\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\nreturn (\n  <SafeAreaProvider>\n    <Button\n      title=\"Open Bottom Sheet\"\n      onPress={() => setIsVisible(true)}\n      buttonStyle={styles.button}\n    />\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\n      {list.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={l.containerStyle}\n          onPress={l.onPress}\n        >\n          <ListItem.Content>\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </BottomSheet>\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\n});\n\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Using Custom React Components as ButtonGroup Buttons - React Native Elements (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to provide custom React components as button elements for a ButtonGroup in React Native Elements. It uses class-based state to manage the selected index, binding the update function and initializing components as button elements. The render method defines how the ButtonGroup and its buttons are displayed, accepts onPress and selectedIndex handlers, and supports custom container styles. Dependencies include React, React Native, and the react-native-elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PricingCard Component in React Native\nDESCRIPTION: Creates a scrollable pricing page with three tiers (Free, Starter, and Enterprise) using React Native Elements' PricingCard component. Each card displays a price, features list, and action button with customized colors from the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, lightColors } from '@rneui/themed';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <PricingCard\n        color={lightColors.primary}\n        title=\"Free\"\n        price=\"$0\"\n        info={['1 User', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={lightColors.secondary}\n        title=\"Starter\"\n        price=\"$19\"\n        info={['10 Users', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={lightColors.secondary2}\n        title=\"Enterprise\"\n        price=\"$49\"\n        info={['100 Users', 'One on One Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n    </ScrollView>\n  </>\n);\n};\n\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AirbnbRating Usage in React Native Elements with TypeScript\nDESCRIPTION: This snippet defines a Ratings component that showcases three configurations of the AirbnbRating component from @rneui/themed: a default instance, a disabled instance, and a customized instance with 11 rating levels and custom review labels. It demonstrates handling of rating completion via a callback, layout customization using React Native StyleSheet, and usage of Platform-specific font settings. Required dependencies include React, React Native, and @rneui/themed. Inputs are handled via props (though empty here), and outputs include rendered UI elements for ratings with support for both interaction and display-only modes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews=[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Divider Usage with React Native Elements - TypeScript\nDESCRIPTION: This TypeScript snippet defines a React FunctionComponent, DividerView, to illustrate multiple usages of the Divider component from the @rneui/themed package within a ScrollView. It demonstrates horizontal and vertical dividers with customizable properties such as color, width, subHeader text, and insets, leveraging theming and StyleSheet for consistent styling. Dependencies include React, @rneui/themed, and react-native, with required props specified for Divider as needed; inputs are none (UI preview), and outputs are visual representations of different divider configurations. The code is designed as a UI sample for documentation or interactive demonstrations in React Native environments; it does not accept user input or perform business logic.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useContext } from 'react';\\nimport { Text, Divider, useTheme } from '@rneui/themed';\\nimport { ScrollView, StyleSheet, View } from 'react-native';\\n\\ntype DividerViewTypes = {};\\n\\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\\nconst { theme } = useTheme();\\nreturn (\\n  <>\\n    <ScrollView>\\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\\n        <Divider />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with width and color\\n        </Text>\\n        <Divider width={5} color={theme?.colors?.primary} />\\n      </View>\\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with left inset\\n        </Text>\\n        <Divider inset={true} />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with right inset\\n        </Text>\\n        <Divider inset={true} insetType=\"right\" />\\n        <Text style={styles.horizontalText}>\\n          Horizontal Divider with middle inset\\n        </Text>\\n        <Divider inset={true} insetType=\"middle\" />\\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\\n      </View>\\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\\n      <View style={styles.vertical}>\\n        <Text>Left text</Text>\\n        <Divider orientation=\"vertical\" />\\n        <Text>Right text</Text>\\n      </View>\\n      <View style={styles.vertical}>\\n        <Text>Left text</Text>\\n        <Divider orientation=\"vertical\" width={5} />\\n        <Text>Right text</Text>\\n      </View>\\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\\n      <View style={styles.horizontal}>\\n        <Text style={styles.horizontalText}>Left text</Text>\\n        <Divider\\n          subHeader=\"Divider\"\\n          inset={true}\\n          subHeaderStyle={{ color: theme?.colors?.primary }}\\n        />\\n        <Text style={styles.horizontalText}>Right text</Text>\\n      </View>\\n    </ScrollView>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nsubHeader: {\\n  backgroundColor : \"#2089dc\",\\n  color : \"white\",\\n  textAlign : \"center\",\\n  paddingVertical : 5,\\n  marginBottom : 10\\n},\\nhorizontal: {\\n  marginBottom: 10,\\n},\\nhorizontalText: {\\n  textAlign: 'center',\\n  fontSize: 16,\\n  marginVertical: 10,\\n},\\nvertical: {\\n  marginBottom: 10,\\n  display: 'flex',\\n  flexDirection: 'row',\\n  justifyContent: 'space-evenly',\\n},\\n});\\n\\nexport default DividerView;\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying a Custom Theme in React Native Elements (TypeScript)\nDESCRIPTION: This code demonstrates the basic setup for using a custom theme in a React Native Elements application. It defines a theme object using `createTheme`, specifying custom color values (e.g., `lightColors.primary`), and then wraps the application components with `ThemeProvider` to make the theme accessible. It depends on `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/overview.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#a4e2f5',\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      {/* ... */}\n      {/* ... */}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation with React Native Elements in JavaScript\nDESCRIPTION: This code defines a functional React Native component that utilizes the Tab and TabView components from the @rneui/themed package. It manages the selected tab state using useState and dynamically displays different content and icons for each tab. Dependencies include React and @rneui/themed; ensure these libraries are installed in your project. The key parameters are the index state for active tab, titles and icons for each Tab.Item, and dynamic style settings. The component expects no props and outputs a full tabbed view; its usage is limited to projects already set up with React Native and the necessary themed components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Tab, Text, TabView } from '@rneui/themed';\\n\\nexport default () => {\\nconst [index, setIndex] = React.useState(0);\\n\\nreturn (\\n  <>\\n    <Tab\\n      value={index}\\n      onChange={(e) => setIndex(e)}\\n      indicatorStyle={{\\n        backgroundColor: 'white',\\n        height: 3,\\n      }}\\n      variant=\"primary\"\\n    >\\n      <Tab.Item\\n        title=\"Recent\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"favorite\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"cart\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\\n      />\\n    </Tab>\\n\\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\\n        <Text h1>Recent</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\\n        <Text h1>Favorite</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\\n        <Text h1>Cart</Text>\\n      </TabView.Item>\\n    </TabView>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various RNE Dialog Types in React Native (JSX)\nDESCRIPTION: This is a functional React Native component demonstrating multiple use cases for the React Native Elements Dialog component. It uses the `useState` hook to control the visibility of different dialog types triggered by buttons, including simple content, actions, loading indicators, buttonless modals, and custom content like checkboxes and lists. It relies on components from `@rneui/themed` and core `react-native` APIs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```SnackPlayer name=RNE Dialog\nimport React, { useState } from 'react';\nimport {\nButton,\nDialog,\nCheckBox,\nListItem,\nAvatar,\n} from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype DialogComponentProps = {};\n\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\nconst [visible1, setVisible1] = useState(false);\nconst [visible2, setVisible2] = useState(false);\nconst [visible3, setVisible3] = useState(false);\nconst [visible4, setVisible4] = useState(false);\nconst [visible5, setVisible5] = useState(false);\nconst [visible6, setVisible6] = useState(false);\nconst [checked, setChecked] = useState(1);\n\nconst toggleDialog1 = () => {\n  setVisible1(!visible1);\n};\nconst toggleDialog2 = () => {\n  setVisible2(!visible2);\n};\nconst toggleDialog3 = () => {\n  setVisible3(!visible3);\n};\nconst toggleDialog4 = () => {\n  setVisible4(!visible4);\n};\nconst toggleDialog5 = () => {\n  setVisible5(!visible5);\n};\nconst toggleDialog6 = () => {\n  setVisible6(!visible6);\n};\n\nconst userlist = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'amy.farha@gmail.com',\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'cjackson@gmail.com',\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'amandam@gmail.com',\n  },\n];\n\nreturn (\n  <View>\n    <View style={styles.buttonContainer}>\n      <Button\n        title=\"Open Simple Dialog\"\n        onPress={toggleDialog1}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Buttonless Dialog\"\n        onPress={toggleDialog4}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 1\"\n        onPress={toggleDialog5}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 2\"\n        onPress={toggleDialog6}\n        buttonStyle={styles.button}\n      />\n    </View>\n    <Dialog\n      isVisible={visible1}\n      onBackdropPress={toggleDialog1}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible2}\n      onBackdropPress={toggleDialog2}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n      <Dialog.Actions>\n        <Dialog.Button title=\"ACTION 1\" onPress={() => console.log('Primary Action Clicked!')}/>\n        <Dialog.Button title=\"ACTION 2\" onPress={() => console.log('Secondary Action Clicked!')}/>\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n      <Dialog.Loading />\n    </Dialog>\n    <Dialog\n      isVisible={visible4}\n      onBackdropPress={toggleDialog4}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible5}\n      onBackdropPress={toggleDialog5}\n    >\n      <Dialog.Title title=\"Select Preference\"/>\n      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\n        <CheckBox\n          key={i}\n          title={l}\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\n          checkedIcon=\"dot-circle-o\"\n          uncheckedIcon=\"circle-o\"\n          checked={checked === i + 1}\n          onPress={() => setChecked(i + 1)}\n        />\n      ))}\n\n      <Dialog.Actions>\n        <Dialog.Button\n          title=\"CONFIRM\"\n          onPress={() => {\n            console.log(`Option ${checked} was selected!`);\n            toggleDialog5();\n          }}\n        />\n        <Dialog.Button title=\"CANCEL\" onPress={toggleDialog5} />\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog\n      isVisible={visible6}\n      onBackdropPress={toggleDialog6}\n    >\n      <Dialog.Title title=\"Choose Account\"/>\n      {userlist.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={{\n            marginHorizontal: -10,\n            borderRadius: 8,\n          }}\n          onPress={toggleDialog6}\n        >\n          <Avatar rounded source={{ uri: l.avatar_url }} />\n          <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '700' }}>\n              {l.name}\n            </ListItem.Title>\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </Dialog>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  borderRadius: 6,\n  width: 220,\n  margin: 20,\n},\nbuttonContainer: {\n  margin: 20,\n  justifyContent: 'center',\n  alignItems: 'center',\n},\n});\n\nexport default Dialogs;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Badge Styles with React Native Elements (React Native)\nDESCRIPTION: This React Native component demonstrates the usage of the `Badge` component and the `withBadge` Higher-Order Component from `@rneui/themed`. It showcases standard badges with values and statuses, mini badges (status indicators without values), and badges positioned absolutely on `Avatar` components and applied to an `Icon` using `withBadge`. The component utilizes `ScrollView`, `View`, `Text`, and `StyleSheet` from React Native for layout and styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\n\nconst BadgedIcon = withBadge(15)(Icon);\n\nconst BadgeComponent = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Standard Badge</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <Badge value=\"3\" status=\"success\" />\n        <Badge value=\"99+\" status=\"error\" />\n        <Badge value=\"500\" status=\"primary\" />\n        <Badge value=\"10\" status=\"warning\" />\n      </View>\n      <Text style={styles.subHeader}>Mini Badge</Text>\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 20,\n        }}\n      >\n        <Badge status=\"success\" />\n        <Badge status=\"error\" />\n        <Badge status=\"primary\" />\n        <Badge status=\"warning\" />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 20,\n        }}\n      >\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\n      </View>\n\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <View>\n          <Avatar\n            rounded\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\n            size=\"medium\"\n          />\n          <Badge\n            status=\"success\"\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\n          />\n        </View>\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n        <View>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\n            }}\n            size=\"large\"\n          />\n          <Badge\n            status=\"primary\"\n            value={10}\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Creating and Referencing an Input Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows how to create a React reference object using React.createRef() and assign it to an Input component's ref prop. This allows direct manipulation of the Input instance using its provided methods. Dependencies include React and the Input component from React Native Elements. The input reference enables calling focus, blur, clear, and other instance methods for imperative control.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Tab Appearance in React Native Elements\nDESCRIPTION: Shows how to customize the appearance of active tab items using containerStyle and buttonStyle props with conditional styling based on the active state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tab.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab value={0} scrollable>\n  <Tab.Item\n    containerStyle={(active) => ({\n      backgroundColor: active ? \"red\" : undefined,\n    })}\n  >\n    Tab\n  </Tab.Item>\n  <Tab.Item\n    buttonStyle={(active) => ({\n      backgroundColor: active ? \"red\" : undefined,\n    })}\n  >\n    Tab\n  </Tab.Item>\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Interactive Example of RNE Tooltip Component in React Native (SnackPlayer)\nDESCRIPTION: A complete SnackPlayer example showcasing the React Native Elements `Tooltip` component. It includes a controlled tooltip implementation (`ControlledTooltip`), demonstrates various props like `popover`, `withPointer`, `backgroundColor`, `width`, and `containerStyle`. Critically, it shows how to pass a web-compatible `Modal` component (`modal-react-native-web`) via `ModalComponent` for web platform compatibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, lightColors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\nimport Modal from 'modal-react-native-web';\n\nconst { height } = Dimensions.get('window');\n\nconst ControlledTooltip: React.FC<TooltipProps> = (props) => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Tooltip\n      visible={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      {...props}\n    />\n  );\n};\nconst TooltipComponent = () => {\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <ControlledTooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={lightColors.primary}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            ModalComponent={Modal}\n            backgroundColor={lightColors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            width={200}\n            backgroundColor={lightColors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            width={200}\n            backgroundColor={lightColors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Extending RNE Theme Definitions with TypeScript Declaration Merging\nDESCRIPTION: Explains how to extend the default React Native Elements theme types using TypeScript's declaration merging. This example adds a custom `p1Style` to `TextProps` and defines additional color names in the `Colors` interface within a `react-native-elements.d.ts` file, enabling type safety for custom theme properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\ndeclare module 'react-native-elements' {\n  export interface TextProps {\n    p1Style: StyleProp<TextStyle>;\n  }\n\n  export interface Colors {\n    background: string;\n    border: string;\n    text: string;\n    altText: string;\n    danger: string;\n  }\n\n  export interface FullTheme {\n    colors: RecursivePartial<Colors>;\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Progress Bars with React Native Elements in TypeScript\nDESCRIPTION: This TypeScript code defines a functional React component that demonstrates usage of the LinearProgress bar and Button components from the @rneui/themed package. It illustrates both indeterminate and determinate progress bars, manages progress state with useState and useEffect, and includes buttons to start and restart the progress animation. Dependencies include React, React Native, and @rneui/themed, and key props such as 'value', 'variant', and 'color' define the progress bar's behavior. Inputs are user interaction with the buttons, and outputs are visual progress bars responding to state changes; expected behaviour is limited to UI demonstration without backend integration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from '@rneui/themed';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\nconst [progress, setProgress] = React.useState(0);\n\nReact.useEffect(() => {\n  let subs = true;\n  if (progress < 1 && progress !== 0) {\n    setTimeout(() => {\n      if (subs) {\n        setProgress(progress + 0.1);\n      }\n    }, 100);\n  }\n  return () => {\n    subs = false;\n  };\n}, [progress]);\n\nreturn (\n  <View>\n    <View\n      style={{\n        margin: 10,\n      }}\n    >\n      <Text>Indeterminate Variant </Text>\n      <LinearProgress style={{ marginVertical: 10 }} />\n      <Text>Indeterminate Variant with color</Text>\n      <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n      <Text>Determinate Variant</Text>\n      <LinearProgress\n        style={{ marginVertical: 10 }}\n        value={progress}\n        variant=\"determinate\"\n      />\n\n      <Button\n        disabled={progress > 0}\n        onPress={() => {\n          setProgress(0.00001);\n        }}\n        title={'Start Progress'}\n        containerStyle={{ margin: 10 }}\n      />\n      <Button\n        disabled={progress === 0}\n        onPress={() => {\n          setProgress(0);\n        }}\n        title={'Restart'}\n        containerStyle={{ margin: 10 }}\n      />\n    </View>\n  </View>\n);\n};\n\nexport default LinearProgressAPI;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering CheckBox in React Native Elements (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates importing and rendering the CheckBox component from react-native-elements within a React Native application. Several CheckBox configurations are shown: basic checked state, centering, using different checked and unchecked icons, customizing icons with material types and colors, and supplying custom checked/unchecked icons as React Native Image elements. The snippets depend on react-native-elements and React Native, require appropriate state management (e.g., this.state.checked), and optionally local assets for custom icons. Main inputs involve properties like title, checked, iconType, and onPress handlers; outputs are rendered CheckBox components in the UI. Limitations include assuming a class component with this.state and the presence of required image files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { CheckBox } from 'react-native-elements'\n\n<CheckBox\n  title='Click Here'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here'\n  checkedIcon='dot-circle-o'\n  uncheckedIcon='circle-o'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here to Remove This Item'\n  iconRight\n  iconType='material'\n  checkedIcon='clear'\n  uncheckedIcon='add'\n  checkedColor='red'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  checkedIcon={<Image source={require('../checked.png')} />}\n  uncheckedIcon={<Image source={require('../unchecked.png')} />}\n  checked={this.state.checked}\n  onPress={() => this.setState({checked: !this.state.checked})}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Avatar using Map Function in React Native Elements\nDESCRIPTION: This example demonstrates how to render a list of items with avatars using the map function. Each list item displays a user's name, avatar, and subtitle position using the ListItem and Avatar components from React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Icon Sets with React Native Elements Icon Component in JavaScript\nDESCRIPTION: This snippet illustrates how to display a variety of icons using the Icon component from @rneui/themed within a React Native application. The sample demonstrates different customizations including setting icon names, specifying icon sets via the 'type' prop, changing icon color, using 'reverse' and 'raised' prop for style variations, and attaching press handlers. Dependencies include @rneui/themed, react-native, and react-native-vector-icons, and input parameters for each icon include name, type, color, and optional interaction handlers. The output renders several icons with different styles in a vertically-stacked, centered container. The code also serves as a template for integrating custom or stock icon fonts, with limitations based on the icon set coverage and dependencies installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { Icon } from '@rneui/themed';\\n\\nexport default () => {\\nreturn (\\n  <>\\n    <View\\n      style={{\\n        alignItems: 'center',\\n        paddingVertical: 5,\\n        flexGrow: 1,\\n      }}\\n    >\\n      <Icon\\n        name='rowing' />\\n\\n      <Icon\\n        name='g-translate'\\n        color='#00aced' />\\n\\n      <Icon\\n        name='sc-telegram'\\n        type='evilicon'\\n        color='#517fa4'\\n      />\\n\\n      <Icon\\n        reverse\\n        name='ios-american-football'\\n        type='ionicon'\\n        color='#517fa4'\\n      />\\n\\n      <Icon\\n        raised\\n        name='heartbeat'\\n        type='font-awesome'\\n        color='#f50'\\n        onPress={() => console.log('hello')} />\\n    </View>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping List Items with Icons and Links in React Native Elements (JavaScript)\nDESCRIPTION: This code loops through a list of items and for each, renders a ListItem featuring an Icon and a title, with an optional chevron indicating navigability. Dependencies include '@rneui/themed'. It requires an array with 'title' and 'icon' fields and is well-suited for navigation menus within a mobile UI, producing visually distinct interactive rows.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Icon } from '@rneui/themed'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Dialog Component Examples in React Native Elements\nDESCRIPTION: A complete example showcasing various Dialog implementations including simple dialogs, multi-action dialogs, loading dialogs, and custom dialogs with checkboxes and user lists. Demonstrates dialog visibility handling and different styling options.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport {\nButton,\nDialog,\nCheckBox,\nListItem,\nAvatar,\n} from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype DialogComponentProps = {};\n\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\nconst [visible1, setVisible1] = useState(false);\nconst [visible2, setVisible2] = useState(false);\nconst [visible3, setVisible3] = useState(false);\nconst [visible4, setVisible4] = useState(false);\nconst [visible5, setVisible5] = useState(false);\nconst [visible6, setVisible6] = useState(false);\nconst [checked, setChecked] = useState(1);\n\nconst toggleDialog1 = () => {\n  setVisible1(!visible1);\n};\nconst toggleDialog2 = () => {\n  setVisible2(!visible2);\n};\nconst toggleDialog3 = () => {\n  setVisible3(!visible3);\n};\nconst toggleDialog4 = () => {\n  setVisible4(!visible4);\n};\nconst toggleDialog5 = () => {\n  setVisible5(!visible5);\n};\nconst toggleDialog6 = () => {\n  setVisible6(!visible6);\n};\n\nconst userlist = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'amy.farha@gmail.com',\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'cjackson@gmail.com',\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'amandam@gmail.com',\n  },\n];\n\nreturn (\n  <View>\n    <View style={styles.buttonContainer}>\n      <Button\n        title=\"Open Simple Dialog\"\n        onPress={toggleDialog1}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Buttonless Dialog\"\n        onPress={toggleDialog4}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 1\"\n        onPress={toggleDialog5}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 2\"\n        onPress={toggleDialog6}\n        buttonStyle={styles.button}\n      />\n    </View>\n    <Dialog\n      isVisible={visible1}\n      onBackdropPress={toggleDialog1}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible2}\n      onBackdropPress={toggleDialog2}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n      <Dialog.Actions>\n        <Dialog.Button title=\"ACTION 1\" onPress={() => console.log('Primary Action Clicked!')}/>\n        <Dialog.Button title=\"ACTION 2\" onPress={() => console.log('Secondary Action Clicked!')}/>\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n      <Dialog.Loading />\n    </Dialog>\n    <Dialog\n      isVisible={visible4}\n      onBackdropPress={toggleDialog4}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible5}\n      onBackdropPress={toggleDialog5}\n    >\n      <Dialog.Title title=\"Select Preference\"/>\n      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\n        <CheckBox\n          key={i}\n          title={l}\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\n          checkedIcon=\"dot-circle-o\"\n          uncheckedIcon=\"circle-o\"\n          checked={checked === i + 1}\n          onPress={() => setChecked(i + 1)}\n        />\n      ))}\n\n      <Dialog.Actions>\n        <Dialog.Button\n          title=\"CONFIRM\"\n          onPress={() => {\n            console.log(`Option ${checked} was selected!`);\n            toggleDialog5();\n          }}\n        />\n        <Dialog.Button title=\"CANCEL\" onPress={toggleDialog5} />\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog\n      isVisible={visible6}\n      onBackdropPress={toggleDialog6}\n    >\n      <Dialog.Title title=\"Choose Account\"/>\n      {userlist.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={{\n            marginHorizontal: -10,\n            borderRadius: 8,\n          }}\n          onPress={toggleDialog6}\n        >\n          <Avatar rounded source={{ uri: l.avatar_url }} />\n          <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '700' }}>\n              {l.name}\n            </ListItem.Title>\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </Dialog>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  borderRadius: 6,\n  width: 220,\n  margin: 20,\n},\nbuttonContainer: {\n  margin: 20,\n  justifyContent: 'center',\n  alignItems: 'center',\n},\n});\n\nexport default Dialogs;\n```\n\n----------------------------------------\n\nTITLE: Rendering an Expandable List Accordion with React Native Elements (JavaScript)\nDESCRIPTION: This code demonstrates the implementation of an expandable accordion list using the React Native Elements library in a React Native application. It uses the ListItem.Accordion component to encapsulate list content that can be expanded or collapsed, with a header containing an Icon and a ListItem.Title. The expansion state is managed by a boolean (expanded) and the associated setExpanded setter. When expanded, it dynamically maps through an array (list2) rendering ListItem components with Avatars, Titles, Subtitles, and Chevrons. Prerequisites include installing react-native-elements and its peer dependencies, and passing suitable props such as expanded and setExpanded from the parent component. The component requires an array of list items where each item has 'name', 'subtitle', and 'avatar_url' fields. Outputs a set of styled, interactive list items that respond visually to presses, though the actual 'log' function handling item presses should be defined elsewhere.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\\n<ListItem.Accordion\\n  content={\\n    <>\\n      <Icon name=\\\"place\\\" size={30} />\\n      <ListItem.Content>\\n        <ListItem.Title>List Accordion</ListItem.Title>\\n      </ListItem.Content>\\n    </>\\n  }\\n  isExpanded={expanded}\\n  onPress={() => {\\n    setExpanded(!expanded);\\n  }}\\n>\\n  {list2.map((l, i) => (\\n    <ListItem key={i} onPress={log} bottomDivider>\\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\\n      <ListItem.Content>\\n        <ListItem.Title>{l.name}</ListItem.Title>\\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\\n      </ListItem.Content>\\n      <ListItem.Chevron />\\n    </ListItem>\\n  ))}\\n</ListItem.Accordion>\\n```\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup Implementation with Strings and Multiple Selection in React Native\nDESCRIPTION: This snippet demonstrates the use of ButtonGroup with string buttons, including both single and multiple selection functionality. It uses React hooks for state management and shows how to style the component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState} from 'react'\nimport { ButtonGroup } from '@rneui/themed'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\nreturn (\n  <>\n    <Text style={styles.subHeader}>Using Strings</Text>\n    <ButtonGroup\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n      selectedIndex={selectedIndex}\n      onPress={(value) => {\n        setSelectedIndex(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <ButtonGroup\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\n      selectMultiple\n      selectedIndexes={selectedIndexes}\n      onPress={(value) => {\n        setSelectedIndexes(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <Text style={styles.subHeader}>Using Components</Text>\n  </>\n)\n}\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating List Items with Avatars using Map Function in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates rendering a list of items using the JavaScript `map` function iterating over a data array (`list`). Each `ListItem` displays user information, including an `Avatar` based on `avatar_url`, a `ListItem.Title` for the name, and a `ListItem.Subtitle` for the subtitle. It requires importing `ListItem` and `Avatar` from `@rneui/themed` and providing a data array.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing React Native Elements Tile Components in TypeScript\nDESCRIPTION: A comprehensive example showing different variations of the Tile component including featured tiles with images, icons, and custom content. The component demonstrates responsive image tiles with various styling options, captions, and interactive elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from '@rneui/themed';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\nreturn (\n  <>\n    <View style={{ alignItems: 'center' }}>\n      <ScrollView style={{ paddingVertical: 10 }}>\n      <Text style={styles.subHeader}>Featured Tile</Text>\n        <Tile\n          imageSrc={{\n            uri:\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n          }}\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n          titleStyle={{ fontSize: 15 }}\n          featured\n          caption=\"Mahatma Gandhi\"\n          activeOpacity={1}\n          width={310}\n        />\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n        <View style={{ paddingTop: 20 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n            icon={{\n              name: 'heart',\n              type: 'font-awesome',\n              size: 60,\n              color: 'red',\n            }}\n            featured\n            activeOpacity={0.8}\n            onPress={() => {\n              'Tile pressed';\n            }}\n            width={310}\n          />\n        </View>\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n            }}\n            title=\"Half Dome, Yosemite\"\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n            activeOpacity={1}\n            width={310}\n            contentContainerStyle={{ height: 70 }}\n            style={{ paddingBottom: 20 }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text style={{ color: 'green' }}>Visit</Text>\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\n            </View>\n          </Tile>\n        </View>\n      </ScrollView>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Tiles;\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering Input Components with Icons and Error States - React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates various ways to use the Input component from React Native Elements in a React Native JavaScript project, including input placeholders, left and custom icons, error messages, controlled inputs, and secure (password) modes. It requires both 'react-native-elements' (for Input) and 'react-native-vector-icons/FontAwesome' (for Icon) as dependencies. The main parameters highlighted here are 'placeholder', 'leftIcon', 'errorMessage', and handlers like 'onChangeText', which allow customization of the input behavior and UI. The outputs are visually rich input fields within React Native, with support for error feedback, icons, and security; implementation constraints include the need for the imported dependencies and suitable styles/context for full functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/input.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Icon from 'react-native-vector-icons/FontAwesome';\\nimport { Input } from 'react-native-elements';\\n\\n<Input\\n  placeholder='BASIC INPUT'\\n/>\\n\\n<Input\\n  placeholder='INPUT WITH ICON'\\n  leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\\n/>\\n\\n<Input\\n  placeholder='INPUT WITH CUSTOM ICON'\\n  leftIcon={\\n    <Icon\\n      name='user'\\n      size={24}\\n      color='black'\\n    />\\n  }\\n/>\\n\\n\\n <Input\\n   placeholder=\"Comment\"\\n   leftIcon={{ type: 'font-awesome', name: 'comment' }}\\n   style={styles}\\n   onChangeText={value => this.setState({ comment: value })}\\n  />\\n\\n\\n<Input\\n  placeholder='INPUT WITH ERROR MESSAGE'\\n  errorStyle={{ color: 'red' }}\\n  errorMessage='ENTER A VALID ERROR HERE'\\n/>\\n\\n<Input placeholder=\"Password\" secureTextEntry={true} />\n```\n\n----------------------------------------\n\nTITLE: CircularSlider Without Thumb - JSX\nDESCRIPTION: This snippet demonstrates rendering the CircularSlider with the noThumb prop, causing the slider to display without the draggable thumb. Useful for display-only sliders or special UI requirements. The value prop sets the slider, while noThumb disables the thumb display. Input is the numeric value, and output is a circular UI track without a thumb.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/universe/CircularSlider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<CircularSlider value={value} noThumb />\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Customizable CheckBoxes with React Native Elements in TypeScript\nDESCRIPTION: This snippet illustrates a React Native functional component in TypeScript that renders four CheckBox variants using the @rneui/themed package. It uses React hooks (useState) to manage checked states individually and demonstrates usage of default title/checked icons, custom icon names/types, color customization, and embedding Icon components for unchecked/checked states. Inputs are user taps on checkboxes; outputs are toggling visual states. Dependencies are React, @rneui/themed, and @rneui/base Icon. It expects a React Native environment with TypeScript support.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { CheckBox, Icon } from '@rneui/themed';\\n\\ntype CheckboxComponentProps = {};\\n\\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\\nconst [check1, setCheck1] = useState(false);\\nconst [check2, setCheck2] = useState(false);\\nconst [check3, setCheck3] = useState(false);\\nconst [check4, setCheck4] = useState(false);\\n\\nreturn (\\n  <>\\n    <CheckBox\\n      center\\n      title=\"Click Here\"\\n      checked={check1}\\n      onPress={() => setCheck1(!check1)}\\n    />\\n\\n    <CheckBox\\n      center\\n      title=\"Click Here\"\\n      checkedIcon=\"dot-circle-o\"\\n      uncheckedIcon=\"circle-o\"\\n      checked={check2}\\n      onPress={() => setCheck2(!check2)}\\n    />\\n\\n    <CheckBox\\n      center\\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\\n      iconRight\\n      iconType=\"material\"\\n      checkedIcon=\"clear\"\\n      uncheckedIcon=\"add\"\\n      checkedColor=\"red\"\\n      checked={check3}\\n      onPress={() => setCheck3(!check3)}\\n    />\\n\\n    <CheckBox\\n      center\\n      checkedIcon={\\n        <Icon\\n          name=\"radio-button-checked\"\\n          type=\"material\"\\n          color=\"green\"\\n          size={25}\\n          iconStyle={{ marginRight: 10 }}\\n        />\\n      }\\n      uncheckedIcon={\\n        <Icon\\n          name=\"radio-button-unchecked\"\\n          type=\"material\"\\n          color=\"grey\"\\n          size={25}\\n          iconStyle={{ marginRight: 10 }}\\n        />\\n      }\\n      checked={check4}\\n      onPress={() => setCheck4(!check4)}\\n    />\\n  </>\\n);\\n};\\n\\nexport default CheckboxComponent;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Chip Configurations in React Native (TSX)\nDESCRIPTION: Provides a runnable SnackPlayer example showcasing different styles and functionalities of the `@rneui/themed` Chip component. It includes solid, disabled, outlined, and icon chips, demonstrating props like `title`, `disabled`, `type`, `icon`, `iconRight`, and `onPress`. This example focuses on the Chip component itself within a typical React Native screen structure using functional components and StyleSheet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, colors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Image Gallery with React Native Elements\nDESCRIPTION: Creates a responsive grid layout of images using React Native Elements' Image component and FlatList. Features include placeholder loading indicators, aspect ratio maintenance, and fetching random images from Unsplash API.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Image } from '@rneui/themed';\n\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\n\nconst ImageAPI = () => {\nreturn (\n  <>\n    <SafeAreaView>\n      <FlatList\n        data={[...new Array(10)].map((_, i) => i.toString())}\n        style={styles.list}\n        numColumns={2}\n        keyExtractor={(e) => e}\n        renderItem={({ item }) => (\n          <Image\n            source={{ uri: BASE_URI + item }}\n            containerStyle={styles.item}\n            PlaceholderContent={<ActivityIndicator />}\n          />\n        )}\n      />\n    </SafeAreaView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nlist: {\n  width: '100%',\n  backgroundColor: '#000',\n},\nitem: {\n  aspectRatio: 1,\n  width: '100%',\n  flex: 1,\n},\n});\n\nexport default ImageAPI;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom RNE Components via Composition in JSX\nDESCRIPTION: Demonstrates how to create a reusable custom component (`RaisedButton`) by wrapping a standard React Native Elements `Button`. This approach sets default props (like `raised`) while still accepting all other `Button` props, promoting code reuse.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native-elements';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ButtonGroup with Component Buttons in React Native\nDESCRIPTION: This snippet illustrates how to use custom React components as buttons within the ButtonGroup component inside a React class component. It defines simple functional components (`component1`, `component2`, `component3`), structures the `buttons` prop as an array of objects `{ element: componentName }`, manages the selected state (`selectedIndex`) and update logic (`updateIndex`) similarly to the string button example, and renders the ButtonGroup.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/button_group.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Themed Components with ThemeProvider in React Native Elements\nDESCRIPTION: This example shows how to use themed components in React Native Elements. It wraps the application with a ThemeProvider component, which allows for centralized theming and customization of all child components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from '@rneui/themed';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Tabbed Interface with RNE Tab and TabView in React Native\nDESCRIPTION: This React Native functional component demonstrates the implementation of a tabbed navigation using the `Tab` and `TabView` components from `@rneui/themed`. It utilizes the `useState` hook to track the active tab index, updating the view displayed within the `TabView` based on the selected `Tab.Item`. Each tab item includes a title and an icon, and the corresponding `TabView.Item` displays placeholder text. Dependencies include `react` and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE Tab\nimport React from 'react';\nimport { Tab, Text, TabView } from '@rneui/themed';\n\nexport default () => {\nconst [index, setIndex] = React.useState(0);\n\nreturn (\n  <>\n    <Tab\n      value={index}\n      onChange={(e) => setIndex(e)}\n      indicatorStyle={{\n        backgroundColor: 'white',\n        height: 3,\n      }}\n      variant=\"primary\"\n    >\n      <Tab.Item\n        title=\"Recent\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\n      />\n      <Tab.Item\n        title=\"favorite\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\n      />\n      <Tab.Item\n        title=\"cart\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\n      />\n    </Tab>\n\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\n        <Text h1>Recent</Text>\n      </TabView.Item>\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\n        <Text h1>Favorite</Text>\n      </TabView.Item>\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\n        <Text h1>Cart</Text>\n      </TabView.Item>\n    </TabView>\n  </>\n);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Themed Switch Interaction in React Native Elements - TypeScript\nDESCRIPTION: This snippet defines a functional React Native component that utilizes the @rneui/themed Switch. It manages internal state using the useState hook from React, toggles the switch on user interaction, and applies custom styling with StyleSheet. Dependencies include React, React Native, and @rneui/themed. Inputs include user tap gestures on the Switch; the output is the visual toggle of the switch state. The component expects to be rendered within a React Native application. No advanced constraints exist, but @rneui/themed must be installed as a peer dependency.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\nconst [checked, setChecked] = useState(false);\n\nconst toggleSwitch = () => {\n  setChecked(!checked);\n};\n\nreturn (\n  <View style={styles.view}>\n   <Switch\n      value={checked}\n      onValueChange={(value) => setChecked(value)}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Rendering an Expandable Accordion List with React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how to render an expandable accordion list using the ListItem.Accordion component from the React Native Elements library within a React Native application. It leverages state management (with setExpanded and expanded), uses various UI components (Icon, ListItem, Avatar), and maps over an array (list2) to dynamically generate a list of selectable items. The code expects variables such as expanded (boolean state), setExpanded (function to toggle expansion), list2 (array of data items), and log (function to handle onPress events) to be defined in the component scope. It requires react-native-elements and react-native-vector-icons as dependencies. Input is a data array of user objects, and output is an interactive UI where the accordion expands or collapses and each item in the list can be pressed. The snippet is limited to UI logic and does not handle data fetching or external side effects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\n<ListItem.Accordion\\n  content={\\n    <>\\n      <Icon name=\\\"place\\\" size={30} />\\n      <ListItem.Content>\\n        <ListItem.Title>List Accordion</ListItem.Title>\\n      </ListItem.Content>\\n    </>\\n  }\\n  isExpanded={expanded}\\n  onPress={() => {\\n    setExpanded(!expanded);\\n  }}\\n>\\n  {list2.map((l, i) => (\\n    <ListItem key={i} onPress={log} bottomDivider>\\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\\n      <ListItem.Content>\\n        <ListItem.Title>{l.name}</ListItem.Title>\\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\\n      </ListItem.Content>\\n      <ListItem.Chevron />\\n    </ListItem>\\n  ))}\\n</ListItem.Accordion>\\n```\n```\n\n----------------------------------------\n\nTITLE: Adjusting CheckBox Size in React Native\nDESCRIPTION: Demonstrates how to control the visual size of the `CheckBox` component using the `size` prop with different numerical values (18, 24, 32).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/CheckBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <CheckBox checked size={18} />\n  <CheckBox checked size={24} />\n  <CheckBox checked size={32} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ThemeProvider in React Native Elements (JSX)\nDESCRIPTION: This JSX snippet demonstrates the fundamental setup for using React Native Elements components with theming. It imports `Button` and `ThemeProvider` from `react-native-elements` and wraps a `Button` component within the `ThemeProvider`. This setup enables the application of a consistent theme across all nested RNE components, allowing for centralized customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from 'react-native-elements';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Icons Grid with React Native Elements\nDESCRIPTION: This snippet creates a component that renders a grid of social media icons using the SocialIcon component from React Native Elements. It uses a predefined list of social media types and renders them in a scrollable view with three icons per row.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\n\ntype IconData = {\ntype: SocialMediaType;\niconType: string;\n};\n\nconst dataList: Partial<IconData>[] = [\n{\n  type: 'facebook',\n},\n{\n  type: 'twitter',\n},\n{\n  type: 'google-plus-official',\n},\n{\n  type: 'google',\n},\n{\n  type: 'pinterest',\n},\n{\n  type: 'linkedin',\n},\n{\n  type: 'youtube',\n},\n{\n  type: 'vimeo',\n},\n{\n  type: 'tumblr',\n},\n{\n  type: 'instagram',\n},\n{\n  type: 'quora',\n},\n{\n  type: 'flickr',\n},\n{\n  type: 'foursquare',\n},\n{\n  type: 'wordpress',\n},\n{\n  type: 'stumbleupon',\n},\n{\n  type: 'github',\n},\n{\n  type: 'github-alt',\n},\n{\n  type: 'twitch',\n},\n{\n  type: 'medium',\n},\n{\n  type: 'soundcloud',\n},\n{\n  type: 'stack-overflow',\n},\n{\n  type: 'gitlab',\n},\n{\n  type: 'angellist',\n},\n{\n  type: 'codepen',\n},\n{\n  type: 'weibo',\n},\n{\n  type: 'vk',\n},\n{\n  type: 'facebook-messenger',\n  iconType: 'material-community',\n},\n{\n  type: 'whatsapp',\n},\n];\n\ntype SocialIconsComponentProps = {};\n\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\nconst socialProps = {};\nreturn (\n  <>\n    <ScrollView>\n      {_.chunk(dataList, 3).map(\n        (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n              marginTop: 10,\n              backgroundColor: '#4c4c4c',\n            }}\n            key={chunkIndex}\n          >\n            {chunk.map((l: Partial<IconData>, i: React.Key) => (\n              <SocialIcon\n                type={l.type}\n                iconType={l.iconType ? l.iconType : 'font-awesome'}\n                key={`${chunkIndex}-${i}`}\n              />\n            ))}\n          </View>\n        )\n      )}\n    </ScrollView>\n  </>\n);\n};\n\nexport default SocialIcons;\n```\n\n----------------------------------------\n\nTITLE: Implementing AirbnbRating Component in React Native with TypeScript\nDESCRIPTION: This snippet demonstrates a full React Native component that showcases the AirbnbRating component from React Native Elements. It includes three examples: a basic rating, a disabled rating, and a customized rating with 11 options and custom review texts. The component also defines a callback function and styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews={[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]}\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Using String Buttons in React Native Elements ButtonGroup (Functional)\nDESCRIPTION: This functional component example, suitable for SnackPlayer, demonstrates using the ButtonGroup component with simple string arrays for button labels. It utilizes the `useState` hook to manage state for both a single-select ButtonGroup (`selectedIndex`) and a multi-select ButtonGroup (`selectedIndexes`, enabled via the `selectMultiple` prop). Basic styling for subheaders is included using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, {useState} from 'react'\nimport { ButtonGroup } from '@rneui/themed'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\nreturn (\n  <>\n    <Text style={styles.subHeader}>Using Strings</Text>\n    <ButtonGroup\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n      selectedIndex={selectedIndex}\n      onPress={(value) => {\n        setSelectedIndex(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <ButtonGroup\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\n      selectMultiple\n      selectedIndexes={selectedIndexes}\n      onPress={(value) => {\n        setSelectedIndexes(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <Text style={styles.subHeader}>Using Components</Text>\n  </>\n)\n}\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Applying ThemeProvider to Button Components - JSX\nDESCRIPTION: This snippet illustrates usage of the ThemeProvider from '@rneui/themed' to wrap a Button component, enabling app-wide theming in a React environment. Dependencies include '@rneui/themed' installed in your project. The ThemeProvider serves as a context provider, allowing all descendant components to receive and utilize theme settings. The Button's 'title' prop sets its visible text. To further customize the theme, developers should refer to the library's customization guide. This setup is ideal for scalable theming and centralized appearance management.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Button, ThemeProvider } from '@rneui/themed';\\n\\nconst MyApp = () => {\\n  return (\\n    <ThemeProvider>\\n      <Button title=\\\"Hey!\\\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Avatar Types with React Native Elements\nDESCRIPTION: This TypeScript/JSX code defines a React Native component demonstrating the `Avatar` component from `@rneui/themed`. It includes data setup for image avatars, extends the Array prototype with a `chunk` method for layout, and showcases rendering avatars with images, icons (from FontAwesome and Material Icons), initial letters, and accessory badges. It utilizes `ScrollView`, `View`, `Text`, and `StyleSheet` from React Native for layout and styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Rendering Switch Toggles with React Native Elements - TypeScript\nDESCRIPTION: This snippet defines a functional React Native component that displays a toggle switch using the @rneui/themed Switch component. It utilizes React's useState hook to manage the switch state and applies minimal styling with StyleSheet. Dependencies include react, react-native, @rneui/themed, and proper TypeScript configuration. The component maintains its own boolean state, updates it via onValueChange, and outputs a Switch embedded in a styled View.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { Switch } from '@rneui/themed';\\nimport { View, Text, StyleSheet } from 'react-native';\\n\\ntype SwitchComponentProps = {};\\n\\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\\nconst [checked, setChecked] = useState(false);\\n\\nconst toggleSwitch = () => {\\n  setChecked(!checked);\\n};\\n\\nreturn (\\n  <View style={styles.view}>\\n   <Switch\\n      value={checked}\\n      onValueChange={(value) => setChecked(value)}\\n    />\\n  </View>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nview: {\\n  margin: 10,\\n},\\n});\\n\\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Consuming Theme Hook (useTheme) (JavaScript/React Native)\nDESCRIPTION: Shows how to use the useTheme hook from react-native-elements to access the current theme within a function component. The component reads the theme values and renders UI accordingly. Requires react-native and react-native-elements, and outputs themed UI elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from 'react-native-elements';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Toggle Switch with React Native Elements in TypeScript\nDESCRIPTION: Implements a functional React Native component that renders a Switch from @rneui/themed, with its on/off state managed via the useState hook. Requires React, React Native, and @rneui/themed as dependencies. The switch toggles a boolean state which reflects the current value of the control; changes in value update the state and UI accordingly. The style for the container view is defined using StyleSheet. This snippet is TypeScript-typed and designed for modular reuse.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\nconst [checked, setChecked] = useState(false);\n\nconst toggleSwitch = () => {\n  setChecked(!checked);\n};\n\nreturn (\n  <View style={styles.view}>\n   <Switch\n      value={checked}\n      onValueChange={(value) => setChecked(value)}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Tooltip Example (TSX)\nDESCRIPTION: Demonstrates a functional React Native component (RNETooltip) using the Tooltip component. It utilizes React's useState hook to manage the tooltip's visibility state ('open'), toggling it via the 'onOpen' and 'onClose' props. The content of the tooltip is defined using the 'popover' prop, displaying simple text.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx live\nfunction RNETooltip() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Stack row align=\"center\">\n      <Tooltip\n        visible={open}\n        onOpen={() => setOpen(true)}\n        onClose={() => setOpen(false)}\n        popover={<Text style={{ color: \"#fff\" }}>Tooltip text</Text>}\n      >\n        Click me\n      </Tooltip>\n    </Stack>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic SearchBar in React Native (JSX)\nDESCRIPTION: This snippet demonstrates the basic usage of the SearchBar component from 'react-native-elements'. It shows how to import the component and render it within a React class component, managing the search input's value using component state and the 'onChangeText' prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/searchbar.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { SearchBar } from 'react-native-elements';\n\nexport default class App extends React.Component {\n  state = {\n    search: '',\n  };\n\n  updateSearch = (search) => {\n    this.setState({ search });\n  };\n\n  render() {\n    const { search } = this.state;\n\n    return (\n      <SearchBar\n        placeholder=\"Type Here...\"\n        onChangeText={this.updateSearch}\n        value={search}\n      />\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode in React Native Elements\nDESCRIPTION: This example demonstrates how to implement dark mode using ThemeProvider, useColorScheme, and useThemeMode hooks. It automatically switches between light and dark modes based on the device settings.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/1.themeprovider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useColorScheme } from 'react-native-appearance';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#899656',\n  },\n  darkColors: {\n    primary: '#344512',\n  },\n  mode: 'light',\n});\n\nconst ColorScheme = ({ children }) => {\n  const colorMode = useColorScheme();\n  const { theme } = useTheme();\n  const { setMode } = useThemeMode();\n\n  React.useEffect(() => {\n    setMode(colorMode);\n  }, [colorMode]);\n\n  return (\n    <View style={{ backgroundColor: theme.colors.background }}>{children}</View>\n  );\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <ColorScheme>{/*  */}</ColorScheme>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Text Component with Heading Styles in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the Text component from React Native Elements and use it with different heading styles (h1-h4). The component allows for displaying text content at various predefined sizes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/text.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Text } from 'react-native-elements';\n\n<Text h1>Heading 1</Text>\n<Text h2>Heading 2</Text>\n<Text h3>Heading 3</Text>\n<Text h4>Heading 4</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Rating Configurations in a React Native Component (JavaScript/JSX)\nDESCRIPTION: This code defines a complete React Native functional component (`Ratings`) that showcases multiple instances of the `@rneui/themed` Rating component. It demonstrates various configurations including default stars, fractional ratings, read-only display, custom types ('heart', 'custom'), different colors and counts, and handling the `onFinishRating` event to log the selected rating. Basic styling using `StyleSheet` is also included.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE Rating\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB Components in React Native Elements\nDESCRIPTION: A comprehensive example showing different variations of FAB component implementation including small/large sizes, custom colors, loading states, disabled states, and placement options. The component uses React useState hook to manage visibility state and demonstrates various FAB properties like icon customization, title display, and event handling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { FAB } from '@rneui/themed';\n\nexport default () => {\nconst [visible, setVisible] = React.useState(true);\n\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Small Size\n      </Text>\n      <FAB\n        loading\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        size=\"small\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Large Size\n      </Text>\n      <FAB\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        color=\"green\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Primary Color\n      </Text>\n      <FAB\n        visible={visible}\n        title=\"Navigate\"\n        upperCase\n        icon={{ name: 'place', color: 'white' }}\n      />\n\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\n\n      <FAB\n        visible={visible}\n        disabled\n        title=\"Extended\"\n        icon={{\n          name: 'place',\n          color: 'white',\n        }}\n      />\n      <FAB\n        visible={visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"right\"\n        title=\"Hide\"\n        icon={{ name: 'delete', color: 'white' }}\n        color=\"red\"\n      />\n      <FAB\n        visible={!visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"left\"\n        title=\"Show\"\n        icon={{ name: 'edit', color: 'white' }}\n        color=\"green\"\n      />\n    </View>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Icons in React Native Elements using JavaScript/JSX\nDESCRIPTION: This snippet demonstrates importing and utilizing the `Icon` component from `react-native-elements`. It showcases several usage examples with different props: specifying the icon `name` and `color`, selecting an `icon set` using `type`, applying `reverse` and `raised` styles for button-like appearances, and handling user interaction with `onPress`. The component relies on `react-native-vector-icons` for the underlying icon sets.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/icon.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Icon } from 'react-native-elements'\n\n<Icon\n  name='rowing' />\n\n<Icon\n  name='g-translate'\n  color='#00aced' />\n\n<Icon\n  name='sc-telegram'\n  type='evilicon'\n  color='#517fa4'\n/>\n\n<Icon\n  reverse\n  name='ios-american-football'\n  type='ionicon'\n  color='#517fa4'\n/>\n\n<Icon\n  raised\n  name='heartbeat'\n  type='font-awesome'\n  color='#f50'\n  onPress={() => console.log('hello')} />\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Mode Default for Themed Backgrounds (TypeScript)\nDESCRIPTION: This example shows how to instantiate ThemeProvider with a theme configured to default to 'dark' mode and use the custom Background component for themed backgrounds in the application. All child components inherit the dark mode styling and background logic. Requires Background component, a theme object with mode set to 'dark', and ThemeProvider from @rneui/themed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = createTheme({\n  // default mode\n  mode: 'dark',\n});\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Background>\n        {/*...*/}\n        {/*...*/}\n      </Background>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Slider in React Native Elements\nDESCRIPTION: This snippet demonstrates the basic usage of the Slider component from 'react-native-elements'. It shows how to import the Slider and render it within a View. The Slider's value is controlled by the component's state (`this.state.value`), and the `onValueChange` prop updates the state whenever the slider's value changes. A Text component displays the current value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/slider.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider } from 'react-native-elements';\n\n<View style={{ flex: 1, alignItems: 'stretch', justifyContent: 'center' }}>\n  <Slider\n    value={this.state.value}\n    onValueChange={(value) => this.setState({ value })}\n  />\n  <Text>Value: {this.state.value}</Text>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tile Components in React Native with React Native Elements\nDESCRIPTION: This code snippet demonstrates the implementation of various Tile components using React Native Elements. It includes examples of featured tiles, tiles with icons, and tiles with custom content. The component uses ScrollView for layout and applies custom styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from '@rneui/themed';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\nreturn (\n  <>\n    <View style={{ alignItems: 'center' }}>\n      <ScrollView style={{ paddingVertical: 10 }}>\n      <Text style={styles.subHeader}>Featured Tile</Text>\n        <Tile\n          imageSrc={{\n            uri:\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n          }}\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n          titleStyle={{ fontSize: 15 }}\n          featured\n          caption=\"Mahatma Gandhi\"\n          activeOpacity={1}\n          width={310}\n        />\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n        <View style={{ paddingTop: 20 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n            icon={{\n              name: 'heart',\n              type: 'font-awesome',\n              size: 60,\n              color: 'red',\n            }}\n            featured\n            activeOpacity={0.8}\n            onPress={() => {\n              'Tile pressed';\n            }}\n            width={310}\n          />\n        </View>\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n            }}\n            title=\"Half Dome, Yosemite\"\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n            activeOpacity={1}\n            width={310}\n            contentContainerStyle={{ height: 70 }}\n            style={{ paddingBottom: 20 }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text style={{ color: 'green' }}>Visit</Text>\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\n            </View>\n          </Tile>\n        </View>\n      </ScrollView>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Tiles;\n```\n\n----------------------------------------\n\nTITLE: Referencing and Accessing SearchBar Methods in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to store a reference to a SearchBar using the ref prop in a React component, allowing direct access to instance methods such as focus, blur, clear, and (for iOS/Android SearchBars) cancel. It relies on React's ref API and assumes usage within a class component or compatible function component. The example highlights how to programmatically interact with the SearchBar after storing the ref.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\n<SearchBar\\n  ref={search => this.search = search}\\n  ...\\n/>\\n```\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\\nthis.search.focus();\\nthis.search.blur();\\nthis.search.clear();\\nthis.search.cancel(); // Only available if `platform` props is \\\"ios\\\"\\u00a0| \\\"android\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable ListItem in TSX\nDESCRIPTION: Shows how to create a swipeable ListItem using `ListItem.Swipeable`. It defines custom Button components rendered via the `leftContent` and `rightContent` props, which are revealed on swipe gestures. The `action` function passed to these content props typically closes the swipe menu.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem.Swipeable\n  leftWidth={80}\n  rightWidth={90}\n  minSlideWidth={40}\n  leftContent={(action) => (\n    <Button\n      containerStyle={{\n        flex: 1,\n        justifyContent: 'center',\n        backgroundColor: '#f4f4f4',\n      }}\n      type=\"clear\"\n      icon={{\n        name: 'archive-outline',\n        type: 'material-community',\n      }}\n      onPress={action}\n    />\n  )}\n  rightContent={(action) => (\n    <Button\n      containerStyle={{\n        flex: 1,\n        justifyContent: 'center',\n        backgroundColor: '#f4f4f4',\n      }}\n      type=\"clear\"\n      icon={{ name: 'delete-outline' }}\n      onPress={action}\n    />\n  )}\n>\n  <Icon name=\"label-important-outline\" type=\"material\" />\n  <ListItem.Content>\n    <ListItem.Title>Email from John Doe</ListItem.Title>\n    <ListItem.Subtitle>Hey, I'm John Doe</ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Displaying Read-Only Rating - React Native Elements - JavaScript/JSX\nDESCRIPTION: Shows how to render a read-only Rating component in a React Native Elements app. The 'readonly' prop disables user interaction, while 'imageSize', 'startingValue', and 'style' define the appearance and initial score. Requires react-native-elements and react-native for integration. Input: rating prop; Output: static rating as stars or other icons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient Header in React Native Elements\nDESCRIPTION: Example showing how to implement a Header component with LinearGradient in React Native Elements. Uses react-native-linear-gradient package to create a gradient background in the header.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pricing Tiers with RNEUI PricingCard in React Native (TypeScript/JSX)\nDESCRIPTION: This React Native functional component `Pricing` renders three `PricingCard` components from `@rneui/themed` within a `ScrollView`. Each card displays details for a specific pricing plan (Free, Starter, Enterprise), including title, price, a list of features (`info`), and a call-to-action button. It utilizes predefined theme colors (`lightColors.primary`, `lightColors.secondary`, `lightColors.secondary2`) for visual distinction. Key dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Pricing\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, lightColors } from '@rneui/themed';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <PricingCard\n        color={lightColors.primary}\n        title=\"Free\"\n        price=\"$0\"\n        info={['1 User', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={lightColors.secondary}\n        title=\"Starter\"\n        price=\"$19\"\n        info={['10 Users', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={lightColors.secondary2}\n        title=\"Enterprise\"\n        price=\"$49\"\n        info={['100 Users', 'One on One Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n    </ScrollView>\n  </>\n);\n};\n\nexport default Pricing;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toggleable @rneui/themed Overlay (React Native/JSX)\nDESCRIPTION: This React Native functional component provides a complete example of using the `@rneui/themed` `Overlay`. It utilizes the `useState` hook to control the `isVisible` prop, toggling the overlay's display with a `Button`. The example includes content within the overlay (Text, Button with Icon) and uses the `onBackdropPress` prop for dismissal by clicking the background.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```SnackPlayer name=RNE Overlay\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\nconst [visible, setVisible] = useState(false);\n\nconst toggleOverlay = () => {\n  setVisible(!visible);\n};\n\nreturn (\n  <View>\n    <Button\n      title=\"Open Overlay\"\n      onPress={toggleOverlay}\n      buttonStyle={styles.button}\n    />\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n      <Text style={styles.textPrimary}>Hello!</Text>\n      <Text style={styles.textSecondary}>\n        Welcome to React Native Elements\n      </Text>\n      <Button\n        icon={\n          <Icon\n            name=\"wrench\"\n            type=\"font-awesome\"\n            color=\"white\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        title=\"Start Building\"\n        onPress={toggleOverlay}\n      />\n    </Overlay>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\ntextPrimary: {\n  marginVertical: 20,\n  textAlign: 'center',\n  fontSize: 20,\n},\ntextSecondary: {\n  marginBottom: 10,\n  textAlign: 'center',\n  fontSize: 17,\n},\n});\n\nexport default OverlayComponent;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Title Component - React Native - JavaScript\nDESCRIPTION: This functional component 'CustomTitle' renders a user's name and subtitle with customized styles using React Native's View and Text components. It employs flex layout and text styling to display a bold headline and italic sub-caption. It requires React and React Native dependencies and is intended for use as a reusable header/title in the UI, with static text values provided as props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst CustomTitle = () => {\n  return (\n    <View style={{ flexDirection: 'column' }}>\n      <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n      <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n        Minister of Magic\n      </Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing AirbnbRating Component in React Native\nDESCRIPTION: A comprehensive example showing how to implement the AirbnbRating component from React Native Elements. The component is displayed in various configurations including default, disabled, and custom configurations with different counts, review texts, and sizes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews={[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]}\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Rendering Image FlatList with React Native Elements - JavaScript\nDESCRIPTION: This React Native code snippet defines a functional component that fetches and displays 10 random images from Unsplash in a FlatList, using the @rneui/themed Image component for image rendering and handling loading states with ActivityIndicator. Styling is managed via StyleSheet for both the list and image containers. Dependencies required include React Native, @rneui/themed, and access to an internet connection for image fetching. The component expects no external inputs and outputs a styled grid of images, with two columns and loading placeholders, and should be used within a React Native application context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\\nimport { Image } from '@rneui/themed';\\n\\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\\n\\nconst ImageAPI = () => {\\nreturn (\\n  <>\\n    <SafeAreaView>\\n      <FlatList\\n        data={[...new Array(10)].map((_, i) => i.toString())}\\n        style={styles.list}\\n        numColumns={2}\\n        keyExtractor={(e) => e}\\n        renderItem={({ item }) => (\\n          <Image\\n            source={{ uri: BASE_URI + item }}\\n            containerStyle={styles.item}\\n            PlaceholderContent={<ActivityIndicator />}\\n          />\\n        )}\\n      />\\n    </SafeAreaView>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nlist: {\\n  width: '100%',\\n  backgroundColor: '#000',\\n},\\nitem: {\\n  aspectRatio: 1,\\n  width: '100%',\\n  flex: 1,\\n},\\n});\\n\\nexport default ImageAPI;\n```\n\n----------------------------------------\n\nTITLE: Rendering and Managing SpeedDial UI with React Native Elements in JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement a floating SpeedDial component in React Native using the React Native Elements library (@rneui/themed). The component maintains internal state for open/close functionality via React.useState and toggles the SpeedDial when the main button is pressed. Dependencies include React and the 'SpeedDial' components from '@rneui/themed'. Key parameters are the 'icon', 'openIcon', and the 'onPress' handlers for each action. The main component returns a SpeedDial with two actions: 'Add' and 'Delete', each logging output on press. Inputs are user presses; outputs are console log statements. This snippet is suitable for mobile applications requiring floating action buttons with multiple actions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { SpeedDial } from '@rneui/themed';\\n\\nexport default () => {\\nconst [open, setOpen] = React.useState(false);\\nreturn (\\n  <SpeedDial\\n    isOpen={open}\\n    icon={{ name: 'edit', color: '#fff' }}\\n    openIcon={{ name: 'close', color: '#fff' }}\\n    onOpen={() => setOpen(!open)}\\n    onClose={() => setOpen(!open)}\\n  >\\n    <SpeedDial.Action\\n      icon={{ name: 'add', color: '#fff' }}\\n      title=\"Add\"\\n      onPress={() => console.log('Add Something')}\\n    />\\n    <SpeedDial.Action\\n      icon={{ name: 'delete', color: '#fff' }}\\n      title=\"Delete\"\\n      onPress={() => console.log('Delete Something')}\\n    />\\n  </SpeedDial>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Complete SearchBar Implementation Example with React Hooks in TypeScript\nDESCRIPTION: A complete example of implementing a SearchBar component using React hooks to manage the search state. This example uses the @rneui/themed package and demonstrates proper state management with the onChangeText handler.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/SearchBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SearchBar } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SearchBarComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\nconst [search, setSearch] = useState(\"\");\n\nconst updateSearch = (search) => {\n  setSearch(search);\n};\n\nreturn (\n  <View style={styles.view}>\n    <SearchBar\n      placeholder=\"Type Here...\"\n      onChangeText={updateSearch}\n      value={search}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Progress with React Native Elements\nDESCRIPTION: A complete example of implementing the LinearProgress component from React Native Elements. The example demonstrates indeterminate and determinate variants, color customization, and controlling progress state with buttons. It uses React hooks to manage progress state and create animation effects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from '@rneui/themed';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\nconst [progress, setProgress] = React.useState(0);\n\nReact.useEffect(() => {\n  let subs = true;\n  if (progress < 1 && progress !== 0) {\n    setTimeout(() => {\n      if (subs) {\n        setProgress(progress + 0.1);\n      }\n    }, 100);\n  }\n  return () => {\n    subs = false;\n  };\n}, [progress]);\n\nreturn (\n  <View>\n    <View\n      style={{\n        margin: 10,\n      }}\n    >\n      <Text>Indeterminate Variant </Text>\n      <LinearProgress style={{ marginVertical: 10 }} />\n      <Text>Indeterminate Variant with color</Text>\n      <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n      <Text>Determinate Variant</Text>\n      <LinearProgress\n        style={{ marginVertical: 10 }}\n        value={progress}\n        variant=\"determinate\"\n      />\n\n      <Button\n        disabled={progress > 0}\n        onPress={() => {\n          setProgress(0.00001);\n        }}\n        title={'Start Progress'}\n        containerStyle={{ margin: 10 }}\n      />\n      <Button\n        disabled={progress === 0}\n        onPress={() => {\n          setProgress(0);\n        }}\n        title={'Restart'}\n        containerStyle={{ margin: 10 }}\n      />\n    </View>\n  </View>\n);\n};\n\nexport default LinearProgressAPI;\n```\n\n----------------------------------------\n\nTITLE: Implementing Various React Native Elements ListItems in a FlatList (SnackPlayer)\nDESCRIPTION: This React Native snippet, designed for SnackPlayer, demonstrates a comprehensive usage of `@rneui/themed` components within a `FlatList`. It showcases various `ListItem` configurations including items with linear gradients, swipeable actions (using `ListItem.Swipeable` and `Button`), an expandable accordion (`ListItem.Accordion`), and items containing interactive elements like `ListItem.Input`, `Switch`, `ListItem.ButtonGroup`, `ListItem.CheckBox`, and `Badge`. State management using `useState` is employed for the accordion, switch, checkbox, and button group selections. It defines data structures and uses mapping to render different list sections.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE ListItem\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\nText,\nListItem,\nAvatar,\nIcon,\nBadge,\nListItemProps,\nButton,\nSwitch,\ncolors\n} from '@rneui/themed';\n\nconst log = () => console.log('this is an example method');\n\ntype List1Data = {\ntitle: string;\nicon: string;\n};\nconst list1: List1Data[] = [\n{\n  title: 'Appointments',\n  icon: 'av-timer',\n},\n{\n  title: 'Trips',\n  icon: 'flight-takeoff',\n},\n{\n  title: 'Passwords',\n  icon: 'fingerprint',\n},\n{\n  title: 'Pitches',\n  icon: 'lightbulb-outline',\n},\n{\n  title: 'Updates',\n  icon: 'track-changes',\n},\n];\n\ntype List2Data = {\nname: string;\navatar_url: string;\nsubtitle: string;\nlinearGradientColors: string[];\n};\n\nconst list2: Partial<List2Data>[] = [\n{\n  name: 'Amy Farha',\n  avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n  subtitle: 'Vice President',\n  linearGradientColors: ['#FF9800', '#F44336'],\n},\n{\n  name: 'Chris Jackson',\n  avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n  subtitle: 'Vice Chairman',\n  linearGradientColors: ['#3F51B5', '#2196F3'],\n},\n{\n  name: 'Amanda Martin',\n  avatar_url:\n    'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n  subtitle: 'CEO',\n  linearGradientColors: ['#FFD600', '#FF9800'],\n},\n{\n  name: 'Christy Thomas',\n  avatar_url: 'https://randomuser.me/api/portraits/women/48.jpg',\n  subtitle: 'Lead Developer',\n  linearGradientColors: ['#4CAF50', '#8BC34A'],\n},\n{\n  name: 'Melissa Jones',\n  avatar_url:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMDQ0NDk1OV5BMl5BanBnXkFtZTcwNDcxOTExNg@@._V1_UY256_CR2,0,172,256_AL_.jpg',\n  subtitle: 'CTO',\n  linearGradientColors: ['#F44336', '#E91E63'],\n},\n];\n\ntype ListComponentProps = ListItemProps;\n\nconst Lists2: React.FunctionComponent<ListComponentProps> = () => {\nconst [expanded, setExpanded] = React.useState(false);\n\nconst listItemProps = {};\nconst renderRow = ({ item }: { item: List1Data }) => {\n  return (\n    <ListItem.Swipeable\n      onPress={log}\n      bottomDivider\n      leftContent={\n        <Button\n          title=\"Info\"\n          icon={{ name: 'info', color: 'white' }}\n          buttonStyle={{ minHeight: '100%' }}\n        />\n      }\n      rightContent={\n        <Button\n          title=\"Delete\"\n          icon={{ name: 'delete', color: 'white' }}\n          buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n        />\n      }\n    >\n      <Icon name={item.icon} />\n      <ListItem.Content>\n        <ListItem.Title>{item.title}</ListItem.Title>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem.Swipeable>\n  );\n};\nconst [switch1, setSwitch1] = useState(true);\nconst [checkbox1, setCheckbox1] = useState(true);\nconst [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\n\nreturn (\n  <>\n    <FlatList\n      ListHeaderComponent={\n        <>\n          <View style={{ paddingVertical: 8 }}>\n            {list2.map((l, i) => (\n              <ListItem\n                key={i}\n                linearGradientProps={{\n                  colors: l.linearGradientColors,\n                  start: [1, 0],\n                  end: [0.2, 0],\n                }}\n                containerStyle={{\n                  marginHorizontal: 16,\n                  marginVertical: 8,\n                  borderRadius: 8,\n                }}\n              >\n                <Avatar rounded source={{ uri: l.avatar_url }} />\n                <ListItem.Content>\n                  <ListItem.Title\n                    style={{ color: 'white', fontWeight: 'bold' }}\n                  >\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle style={[{ color: 'white' }]}>\n                    {l.subtitle}\n                  </ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Chevron color=\"white\" />\n              </ListItem>\n            ))}\n          </View>\n\n          <View style={styles.list}>\n            <ListItem.Accordion\n              content={\n                <>\n                  <Icon name=\"place\" size={30} />\n                  <ListItem.Content>\n                    <ListItem.Title>List Accordion</ListItem.Title>\n                  </ListItem.Content>\n                </>\n              }\n              isExpanded={expanded}\n              onPress={() => {\n                setExpanded(!expanded);\n              }}\n            >\n              {list2.map((l: Partial<List2Data>, i: React.Key) => (\n                <ListItem key={i} onPress={log} bottomDivider>\n                  <Avatar title={l.name} source={{ uri: l.avatar_url }} />\n                  <ListItem.Content>\n                    <ListItem.Title>{l.name}</ListItem.Title>\n                    <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Chevron />\n                </ListItem>\n              ))}\n            </ListItem.Accordion>\n          </View>\n          <View style={styles.list}>\n            {list2.map((l, i) => (\n              <ListItem key={i} bottomDivider>\n                <Icon name=\"user-circle-o\" type=\"font-awesome\" color=\"red\" />\n                <ListItem.Content>\n                  <ListItem.Title style={{ color: 'red' }}>\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Content right>\n                  <ListItem.Title right style={{ color: 'green' }}>\n                    11:00 am\n                  </ListItem.Title>\n                  <ListItem.Subtitle right>12:00 am</ListItem.Subtitle>\n                </ListItem.Content>\n              </ListItem>\n            ))}\n          </View>\n          <View style={styles.list}>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Name</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.Input placeholder=\"Type your name\" />\n              <ListItem.Chevron />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Switch that please ðŸ˜²</ListItem.Title>\n              </ListItem.Content>\n              <Switch\n                value={switch1}\n                onValueChange={(value) => setSwitch1(value)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Choose ðŸ¤¯</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.ButtonGroup\n                buttons={['Flower', 'Coco']}\n                selectedIndex={selectedButtonIndex}\n                onPress={(index) => setSelectedButtonIndex(index)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.CheckBox\n                checked={checkbox1}\n                onPress={() => setCheckbox1(!checkbox1)}\n              />\n              <ListItem.Content>\n                <ListItem.Title>Check that please ðŸ˜¢</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Badge value=\"12\" />\n              <ListItem.Content>\n                <ListItem.Title>With a Badge ! ðŸ˜»</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Icon name=\"check\" size={20} />\n              <ListItem.Content>\n                <ListItem.Title>This thing is checked ðŸ˜Ž</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n          <View style={styles.list}>\n            <ListItem>\n              <Avatar source={'https://randomuser.me/api/portraits/women/57.jpg'} />\n              <ListItem.Content>\n                <ListItem.Title>\n                  Limited supply! Its like digital gold!\n                </ListItem.Title>\n                <View style={styles.subtitleView}>\n                  <Image\n                    source={\"https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg\"}\n                    style={styles.ratingImage}\n                  />\n                  <Text style={styles.ratingText}>5 months ago</Text>\n                </View>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n        </>\n      }\n      data={list1}\n      keyExtractor={(a: List1Data, index: number) => index.toString()}\n      renderItem={renderRow}\n    />\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nlist: {\n  marginTop: 20,\n  borderTopWidth: 1,\n  borderColor: colors.greyOutline,\n},\nsubtitleView: {\n  flexDirection: 'row',\n  paddingLeft: 10,\n  paddingTop: 5,\n},\nratingImage: {\n  height: 19.21,\n  width: 100,\n},\nratingText: {\n  paddingLeft: 10,\n}\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing RNE LinearProgress Component in React Native\nDESCRIPTION: This React functional component (`LinearProgressAPI`) demonstrates various usages of the `LinearProgress` component from `@rneui/themed`. It includes examples of indeterminate progress bars (default and with a custom color) and a determinate progress bar. The progress state for the determinate bar is managed using `useState` and animated using `useEffect`. Two buttons allow users to start and restart the progress animation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: react\nCODE:\n```\n```SnackPlayer name=RNE Linear Progress\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from '@rneui/themed';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\nconst [progress, setProgress] = React.useState(0);\n\nReact.useEffect(() => {\n  let subs = true;\n  if (progress < 1 && progress !== 0) {\n    setTimeout(() => {\n      if (subs) {\n        setProgress(progress + 0.1);\n      }\n    }, 100);\n  }\n  return () => {\n    subs = false;\n  };\n}, [progress]);\n\nreturn (\n  <View>\n    <View\n      style={{\n        margin: 10,\n      }}\n    >\n      <Text>Indeterminate Variant </Text>\n      <LinearProgress style={{ marginVertical: 10 }} />\n      <Text>Indeterminate Variant with color</Text>\n      <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n      <Text>Determinate Variant</Text>\n      <LinearProgress\n        style={{ marginVertical: 10 }}\n        value={progress}\n        variant=\"determinate\"\n      />\n\n      <Button\n        disabled={progress > 0}\n        onPress={() => {\n          setProgress(0.00001);\n        }}\n        title={'Start Progress'}\n        containerStyle={{ margin: 10 }}\n      />\n      <Button\n        disabled={progress === 0}\n        onPress={() => {\n          setProgress(0);\n        }}\n        title={'Restart'}\n        containerStyle={{ margin: 10 }}\n      />\n    </View>\n  </View>\n);\n};\n\nexport default LinearProgressAPI;\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ThemeProvider in React Native Elements\nDESCRIPTION: This snippet demonstrates how to implement the ThemeProvider component to enable theming in a React Native Elements application. The ThemeProvider wraps the application components to provide consistent styling throughout the app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from 'react-native-elements';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Switch from React Native Elements in a Functional Component (TypeScript)\nDESCRIPTION: This code defines a functional React Native component named SwitchComponent that renders a Switch from react-native-elements. It utilizes the useState hook to manage the switch's checked state and updates the value using the onValueChange prop. Required dependencies include react-native, react, react-native-elements, and TypeScript enabled in the environment. The component's only prop is value, which tracks the on/off state, and it outputs the controlled Switch UI with a basic margin applied to the containing View. There are no advanced constraints, and the component is suitable for demonstration or embedding in apps as-is.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Switch/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch } from 'react-native-elements';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\n  const [checked, setChecked] = useState(false);\n\n  const toggleSwitch = () => {\n    setChecked(!checked);\n  };\n\n  return (\n    <View style={styles.view}>\n     <Switch\n        value={checked}\n        onValueChange={(value) => setChecked(value)}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    margin: 10,\n  },\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Showcasing Various Chip Configurations - React Native Elements - TypeScript\nDESCRIPTION: This extended example provides a functional component using various configurations of the Chip component, such as solid, outlined, icon-based, and interactive chips for demonstration purposes or in-app use. Dependencies include React, react-native core libraries, @rneui/themed, and TypeScript types. The Chips component showcases usage of props like title, type, icon, containerStyle, disabled, onPress, and highlights both appearance and interactive features. The example is suitable for documentation, prototyping, or as a reusable design reference, and expects the consumer to wrap it appropriately as per their React Native project setup.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, lightColors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: lightColors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: lightColors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem.Accordion with React Native Elements\nDESCRIPTION: Example of creating an expandable accordion component with nested list items. The component includes an icon, title, and expandable content that maps through an array of items to display avatars, titles, and subtitles. Uses state management for expansion control.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem.Accordion\n  content={\n    <>\n      <Icon name=\"place\" size={30} />\n      <ListItem.Content>\n        <ListItem.Title>List Accordion</ListItem.Title>\n      </ListItem.Content>\n    </>\n  }\n  isExpanded={expanded}\n  onPress={() => {\n    setExpanded(!expanded);\n  }}\n>\n  {list2.map((l, i) => (\n    <ListItem key={i} onPress={log} bottomDivider>\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\n      <ListItem.Content>\n        <ListItem.Title>{l.name}</ListItem.Title>\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  ))}\n</ListItem.Accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Components with React Native Elements\nDESCRIPTION: This example demonstrates various implementations of the Badge component from React Native Elements, including standard badges with values, mini badges for status indication, and badges used as indicators with other components. It also showcases the withBadge Higher-Order Component to create a badged Icon component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\n\nconst BadgedIcon = withBadge(15)(Icon);\n\nconst BadgeComponent = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Standard Badge</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <Badge value=\"3\" status=\"success\" />\n        <Badge value=\"99+\" status=\"error\" />\n        <Badge value=\"500\" status=\"primary\" />\n        <Badge value=\"10\" status=\"warning\" />\n      </View>\n      <Text style={styles.subHeader}>Mini Badge</Text>\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 20,\n        }}\n      >\n        <Badge status=\"success\" />\n        <Badge status=\"error\" />\n        <Badge status=\"primary\" />\n        <Badge status=\"warning\" />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 20,\n        }}\n      >\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\n      </View>\n\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <View>\n          <Avatar\n            rounded\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\n            size=\"medium\"\n          />\n          <Badge\n            status=\"success\"\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\n          />\n        </View>\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n        <View>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\n            }}\n            size=\"large\"\n          />\n          <Badge\n            status=\"primary\"\n            value={10}\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Custom Avatar Icons with Styles and Actions - react-native-elements - JavaScript\nDESCRIPTION: This snippet elaborates on creating Avatars with customized icons, dynamic sizes, overlays, and clickable interactivity. It leverages 'icon', 'size', 'rounded', 'overlayContainerStyle', 'containerStyle', 'onPress', and 'activeOpacity' props. The icons follow the FontAwesome set, and distinctive styles and actions are demonstrated. Dependencies include 'react-native-elements' and compatible vector icon fonts. Expected inputs are icon names/types and style objects; outputs are visually rich, interactive avatars for dynamic lists or headers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/avatar.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar } from \"react-native-elements\";\n\n<Avatar\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n<Avatar\n  size=\"small\"\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n<Avatar\n  size=\"medium\"\n  overlayContainerStyle={{backgroundColor: 'blue'}}\n  icon={{name: 'meetup', color: 'red', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 3, marginTop: 100}}\n/>\n<Avatar\n  size=\"large\"\n  icon={{name: 'rocket', color: 'orange', type: 'font-awesome'}}\n  overlayContainerStyle={{backgroundColor: 'white'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 4, marginTop: 75}}\n/>\n<Avatar\n  size=\"xlarge\"\n  rounded\n  icon={{name: 'home', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 5, marginRight: 60}}\n/>\n<Avatar\n  size={200}\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Chip Component with Various States - React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and use the Chip component from React Native Elements in different configurations: solid, disabled, outlined, outlined+disabled, left icon, and right icon chips. It shows usage of the 'title', 'type', 'disabled', and 'icon' props, including icon object properties for integrating react-native-vector-icons/FontAwesome. There are no external setup requirements besides the listed dependencies, and inputs include prop objects as per component documentation. Expected outputs are visually distinct chip UIs representing different states and use cases.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/chip.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Chip } from 'react-native-elements';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\n<Chip\n\ttitle=\"Solid Chip\"\n/>\n\n<Chip\n\ttitle=\"Disabled Chip\"\n\tdisabled\n/>\n\n<Chip\n\ttitle=\"Outlined Chip\"\n\ttype=\"outline\"\n/>\n\n<Chip\n\ttitle=\"Outlined & Disabled\"\n\ttype=\"outline\"\n\tdisabled\n/>\n\n<Chip\n\ttitle=\"Left Icon Chip\"\n\ticon={{\n\tname: \"bluetooth\",\n\ttype: \"font-awesome\",\n\tsize: 20,\n\tcolor: 'white',\n\t}}\n/>\n\n<Chip\n\ttitle=\"Right Icon Chip\"\n\ticon={{\n\tname: \"close\",\n\ttype: \"font-awesome\",\n\tsize: 20,\n\tcolor: \"white\",\n\t}}\n\ticonRight\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Images Grid with React Native Elements - JavaScript\nDESCRIPTION: This snippet defines a React Native component that fetches ten random images from Unsplash using dynamic URIs and displays them in a two-column grid using FlatList. It utilizes the Image component from @rneui/themed with placeholder loading indicators and custom styles for both the image grid and individual items. Dependencies required include React Native, @rneui/themed, and a network connection for image retrieval. The 'data' prop of FlatList generates an array of ten keys, with each key mapping uniquely to an image URL. The expected output is a responsive image grid; any image-loading failures will result in the ActivityIndicator placeholder displaying indefinitely.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\\nimport { Image } from '@rneui/themed';\\n\\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\\n\\nconst ImageAPI = () => {\\nreturn (\\n  <>\\n    <SafeAreaView>\\n      <FlatList\\n        data={[...new Array(10)].map((_, i) => i.toString())}\\n        style={styles.list}\\n        numColumns={2}\\n        keyExtractor={(e) => e}\\n        renderItem={({ item }) => (\\n          <Image\\n            source={{ uri: BASE_URI + item }}\\n            containerStyle={styles.item}\\n            PlaceholderContent={<ActivityIndicator />}\\n          />\\n        )}\\n      />\\n    </SafeAreaView>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nlist: {\\n  width: '100%',\\n  backgroundColor: '#000',\\n},\\nitem: {\\n  aspectRatio: 1,\\n  width: '100%',\\n  flex: 1,\\n},\\n});\\n\\nexport default ImageAPI;\n```\n\n----------------------------------------\n\nTITLE: Implementing Customizable Sliders with React Native Elements in TypeScript\nDESCRIPTION: This snippet defines a TypeScript functional component demonstrating RNE Sliders with both horizontal and vertical orientations, customized thumb icons, and live value/color feedback. Dependencies include react, react-native, @rneui/themed, and appropriate type definitions. Key parameters include value, vertValue, and various Slider props affecting appearance and behavior. Inputs are user-driven slider changes; outputs are updated values and dynamically styled slider thumbs. The component is suitable for demos or as a starting point for UI elements requiring real-time feedback.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from '@rneui/themed';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\nconst [value, setValue] = useState(0);\nconst [vertValue, setVertValue] = useState(0);\n\nconst interpolate = (start: number, end: number) => {\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n  return Math.ceil((1 - k) * start + k * end) % 256;\n};\n\nconst color = () => {\n  let r = interpolate(255, 0);\n  let g = interpolate(0, 255);\n  let b = interpolate(0, 0);\n  return `rgb(${r},${g},${b})`;\n};\n\nreturn (\n  <>\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n    <View style={[styles.contentView]}>\n      <Slider\n        value={value}\n        onValueChange={setValue}\n        maximumValue={10}\n        minimumValue={0}\n        step={1}\n        allowTouchTrack\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color={color()}\n            />\n          ),\n        }}\n      />\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n    </View>\n    <Text style={styles.subHeader}>Vertical Slider</Text>\n    <View style={styles.verticalContent}>\n      <Slider\n        value={vertValue}\n        onValueChange={setVertValue}\n        maximumValue={50}\n        minimumValue={20}\n        step={1}\n        orientation=\"vertical\"\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color=\"#f50\"\n            />\n          ),\n        }}\n      />\n    </View>\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  padding: 20,\n  width: '100%',\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nverticalContent: {\n  padding: 20,\n  flex: 1,\n  flexDirection: 'row',\n  height: 500,\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Implementing Light and Dark Mode with ThemeProvider in React Native Elements\nDESCRIPTION: This code shows how to create a theme with light and dark color modes using createTheme. It sets up a ThemeProvider with a custom theme that includes both light and dark color palettes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/theming.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#f2f2f2',\n  },\n  darkColors: {\n    primary: '#121212',\n  },\n  mode: 'dark',\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons with CheckBox in React Native\nDESCRIPTION: Illustrates how to use custom icons (e.g., 'heart', 'bookmark') for the checked and unchecked states of a `CheckBox` using the `checkedIcon` and `uncheckedIcon` props. It also shows setting a custom `checkedColor`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/CheckBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [checked, setState] = React.useState(true);\n     const toggleCheckbox = () => setState(!checked);\n     return (\n       <Stack row align=\"center\">\n         <CheckBox\n           checked={checked}\n           checkedIcon=\"heart\"\n           uncheckedIcon=\"heart-o\"\n           checkedColor=\"red\"\n           onPress={toggleCheckbox}\n         />\n         <CheckBox\n           checked={checked}\n           checkedIcon=\"bookmark\"\n           uncheckedIcon=\"bookmark-o\"\n           checkedColor=\"heart\"\n           onPress={toggleCheckbox}\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Using Various Input Configurations in React Native Elements with JavaScript\nDESCRIPTION: Provides a practical React Native component example (SnackPlayer) showcasing different configurations of the `@rneui/themed` `Input` component. Demonstrates basic usage, inputs with standard and custom icons, handling change events (`onChangeText`), displaying error messages (`errorMessage`, `errorStyle`), and secure text entry (`secureTextEntry`). Imports necessary components from `react-native` and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Pricing Cards with @rneui/themed PricingCard in React Native (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Native functional component named 'Pricing'. It imports necessary components like ScrollView from 'react-native', and PricingCard and colors from '@rneui/themed'. The component renders three PricingCard instances within a ScrollView, each representing a different pricing plan ('Free', 'Starter', 'Enterprise'). Props like 'color', 'title', 'price', 'info' (an array of features), and 'button' (with title and icon) are used to customize each card. The component is intended to be used within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Pricing\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, colors } from '@rneui/themed';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <PricingCard\n        color={colors.primary}\n        title=\"Free\"\n        price=\"$0\"\n        info={['1 User', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary}\n        title=\"Starter\"\n        price=\"$19\"\n        info={['10 Users', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary2}\n        title=\"Enterprise\"\n        price=\"$49\"\n        info={['100 Users', 'One on One Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n    </ScrollView>\n  </>\n);\n};\n\nexport default Pricing;\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering and Controlling Switch State with React Native Elements - TypeScript\nDESCRIPTION: This example demonstrates a functional React component that manages a boolean state named 'open' using React.useState, and binds it to the 'value' prop of the Switch component. The Switch calls setOpen when toggled to update the state. Dependencies include React, React Native, '@rneui/themed' for the Switch, and a Layout component named Stack. The component expects no parameters and renders a row with a toggleable Switch, outputting the updated state on each change. This snippet serves as a live example for integrating and controlling the Switch in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Switch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction RNESwitch() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Stack row align=\"center\">\n      <Switch value={open} onValueChange={setOpen} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates the minimal setup required to use a React Native Elements component. It imports the `Button` component from `@rneui/base` and renders it with a simple title prop within a functional component `App`. This serves as a quick start example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Button } from '@rneui/base';\n\nconst App = () => {\n  return <Button title=\"Hello World\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Custom View for Subtitle\nDESCRIPTION: This example demonstrates how to create a custom subtitle view for a ListItem. It includes custom styling to display a rating image and timestamp text in a row layout, showcasing how to extend ListItem with custom components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Themed Heading Texts using RNE Text Component\nDESCRIPTION: This React Native functional component (`TextComponent`) demonstrates rendering stylized headings using the `Text` component from `@rneui/themed`. It leverages the `useTheme` hook to fetch theme colors (secondary, success, warning, primary) and applies them to different heading levels (h1-h4) via specific style props (`h1Style`, `h2Style`, etc.). Dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Text, useTheme } from '@rneui/themed';\n\ntype TextComponentProps = {};\nconst TextComponent: React.FunctionComponent<TextComponentProps> = () => {\nconst { theme } = useTheme();\n\nreturn (\n  <>\n    <View style={styles.view}>\n      <Text\n        style={styles.text}\n        h1\n        h1Style={{ color: theme?.colors?.secondary }}\n      >\n        Heading 1\n      </Text>\n      <Text\n        style={styles.text}\n        h2\n        h2Style={{ color: theme?.colors?.success }}\n      >\n        Heading 2\n      </Text>\n      <Text\n        style={styles.text}\n        h3\n        h3Style={{ color: theme?.colors?.warning }}\n      >\n        Heading 3\n      </Text>\n      <Text\n        style={styles.text}\n        h4\n        h4Style={{ color: theme?.colors?.primary }}\n      >\n        Heading 4\n      </Text>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\ntext: {\n  textAlign: 'center',\n  padding: 5,\n},\nmore: {\n  marginVertical: 20,\n},\nbutton: {\n  width: 120,\n  marginLeft: 'auto',\n  marginRight: 'auto',\n},\n});\n\nexport default TextComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabbed Interface with React Native Elements in JavaScript/JSX\nDESCRIPTION: This code creates a tabbed interface using the Tab and TabView components from React Native Elements. It demonstrates state management for tab selection, custom styling for the tab indicator, and content rendering for each tab view.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Tab, Text, TabView } from '@rneui/themed';\n\nexport default () => {\nconst [index, setIndex] = React.useState(0);\n\nreturn (\n  <>\n    <Tab\n      value={index}\n      onChange={(e) => setIndex(e)}\n      indicatorStyle={{\n        backgroundColor: 'white',\n        height: 3,\n      }}\n      variant=\"primary\"\n    >\n      <Tab.Item\n        title=\"Recent\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\n      />\n      <Tab.Item\n        title=\"favorite\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\n      />\n      <Tab.Item\n        title=\"cart\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\n      />\n    </Tab>\n\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\n        <Text h1>Recent</Text>\n      </TabView.Item>\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\n        <Text h1>Favorite</Text>\n      </TabView.Item>\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\n        <Text h1>Cart</Text>\n      </TabView.Item>\n    </TabView>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Various Input Components with Custom Props and Icons in React Native Elements (JavaScript)\nDESCRIPTION: This snippet provides a functional React component that renders multiple Input components, each configured with different props: basic usage, adding left icons (preset and custom), handling text input via onChangeText, displaying error messages, and using secure text entry for passwords. Dependencies are React, React Native, and @rneui/themed (Input and Icon). Key props include placeholder, leftIcon, errorStyle, errorMessage, secureTextEntry, and onChangeText, demonstrating Input's customizability for forms or adaptable user interfaces.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Centralized Theming with ThemeProvider in React Native Elements (JSX/JavaScript)\nDESCRIPTION: Shows how to wrap the main application component inside ThemeProvider from @rneui/themed, allowing consistent theming across all child React Native Elements components. Requires the @rneui/themed package and assumes a React project (TypeScript or JavaScript with JSX support). The MyApp component renders a Button within ThemeProvider for centralized theme management; props and styling for all descendants can be centrally controlled. Inputs are standard functional React component props; output is a themed UI layout. This demonstrates a key advantage of the library: convenient, flexible global theming.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript (JSX)\nCODE:\n```\nimport { Button, ThemeProvider } from '@rneui/themed';\\n\\nconst MyApp = () => {\\n  return (\\n    <ThemeProvider>\\n      <Button title=\\\"Hey!\\\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Heading Text with React Native Elements (TypeScript)\nDESCRIPTION: Demonstrates rendering text using the `<Text>` component from `react-native-elements` with the `h2` prop for predefined heading styling. This is a simple example showing basic usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Text h2>Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Integrating RNE Theme with React Navigation (TypeScript)\nDESCRIPTION: This snippet demonstrates how to integrate the theme object from React Native Elements with React Navigation by supplying customized theme props to NavigationContainer. It maps RNEUI theme colors to React Navigation's expected color keys and determines mode (dark/light) dynamically. Prerequisites are useTheme hook and both navigation and theming library setups. The result is a themed navigation UI matching application-wide theme colors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst Navigation = () => {\n  const { theme } = useTheme();\n\n  return (\n    <NavigationContainer\n      theme={{\n        colors: {\n          primary: theme.colors.primary,\n          background: theme.colors.background,\n          card: theme.colors.white,\n          text: theme.colors.black,\n        },\n        dark: theme.mode === 'dark',\n      }}\n    >\n      {/*  Navigators */}\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Badge Component and withBadge HOC in React Native\nDESCRIPTION: This React Native functional component demonstrates various implementations of the Badge component from '@rneui/themed'. It showcases standard badges with different statuses and values, mini badges (used when no 'value' prop is provided, often for status indication), and using badges as indicators on Avatar and Icon components. The 'withBadge' HOC is used to create a BadgedIcon component, wrapping a standard Icon with a badge displaying the value 15. Dependencies include 'react', 'react-native', and '@rneui/themed'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\n\nconst BadgedIcon = withBadge(15)(Icon);\n\nconst BadgeComponent = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Standard Badge</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <Badge value=\"3\" status=\"success\" />\n        <Badge value=\"99+\" status=\"error\" />\n        <Badge value=\"500\" status=\"primary\" />\n        <Badge value=\"10\" status=\"warning\" />\n      </View>\n      <Text style={styles.subHeader}>Mini Badge</Text>\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 20,\n        }}\n      >\n        <Badge status=\"success\" />\n        <Badge status=\"error\" />\n        <Badge status=\"primary\" />\n        <Badge status=\"warning\" />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 20,\n        }}\n      >\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\n      </View>\n\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <View>\n          <Avatar\n            rounded\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\n            size=\"medium\"\n          />\n          <Badge\n            status=\"success\"\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\n          />\n        </View>\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n        <View>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\n            }}\n            size=\"large\"\n          />\n          <Badge\n            status=\"primary\"\n            value={10}\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Tooltip Component Example in React Native\nDESCRIPTION: A comprehensive example demonstrating various Tooltip configurations including controlled tooltips, custom styling, and different content displays. The example showcases tooltips with and without carets, different background colors, and varying content sizes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, lightColors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\nimport Modal from 'modal-react-native-web';\n\nconst { height } = Dimensions.get('window');\n\nconst ControlledTooltip: React.FC<TooltipProps> = (props) => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Tooltip\n      visible={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      {...props}\n    />\n  );\n};\nconst TooltipComponent = () => {\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <ControlledTooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={lightColors.primary}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            ModalComponent={Modal}\n            backgroundColor={lightColors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            width={200}\n            backgroundColor={lightColors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            width={200}\n            backgroundColor={lightColors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Component in React Native Elements (JavaScript)\nDESCRIPTION: Demonstrates how to import and use the Tooltip component from react-native-elements, displaying informative text when pressing an element. Requires react-native-elements as dependency, and assumes basic React Native environment. The key prop 'popover' determines the content shown in the tooltip; expected input is a valid React element. Output is a rendered tooltip that appears on press by default.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tooltip, Text } from 'react-native-elements';\n\n...\n\n<Tooltip popover={<Text>Info here</Text>}>\n  <Text>Press me</Text>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Divider Usage with React Native Elements - TypeScript\nDESCRIPTION: This React functional component demonstrates multiple usage patterns of the Divider component from the @rneui/themed package within a ScrollView. It imports Text, Divider, and useTheme for theming, and applies different divider properties, such as orientation, width, color, inset, and subHeader styling. Required dependencies include React, @rneui/themed, and react-native. The component takes no props, and the rendered UI illustrates Divider variants for both horizontal and vertical layouts, with customizations and section organization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { Text, Divider, useTheme } from '@rneui/themed';\nimport { ScrollView, StyleSheet, View } from 'react-native';\n\ntype DividerViewTypes = {};\n\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\nconst { theme } = useTheme();\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\n        <Divider />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with width and color\n        </Text>\n        <Divider width={5} color={theme?.colors?.primary} />\n      </View>\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with left inset\n        </Text>\n        <Divider inset={true} />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with right inset\n        </Text>\n        <Divider inset={true} insetType=\"right\" />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with middle inset\n        </Text>\n        <Divider inset={true} insetType=\"middle\" />\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\n      </View>\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" />\n        <Text>Right text</Text>\n      </View>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" width={5} />\n        <Text>Right text</Text>\n      </View>\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Left text</Text>\n        <Divider\n          subHeader=\"Divider\"\n          inset={true}\n          subHeaderStyle={{ color: theme?.colors?.primary }}\n        />\n        <Text style={styles.horizontalText}>Right text</Text>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n},\nhorizontal: {\n  marginBottom: 10,\n},\nhorizontalText: {\n  textAlign: 'center',\n  fontSize: 16,\n  marginVertical: 10,\n},\nvertical: {\n  marginBottom: 10,\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n},\n});\n\nexport default DividerView;\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Components in React Native Elements\nDESCRIPTION: Demonstrates various implementations of the `Card` component from `react-native-elements`. Examples include a card with a title, divider, and custom user list rendering using standard React Native components; a card without padding using `ListItem` components for user display; and a card containing an image, descriptive text, and a button. It requires importing `Card`, `ListItem`, `Button`, `Icon` from `react-native-elements` and standard React Native components like `View`, `Text`, `Image`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/card.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = [\n {\n    name: 'brynn',\n    avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg'\n },\n ... // more users here\n]\n\nimport { View, Text, Image } from 'react-native'\nimport { Card, ListItem, Button, Icon } from 'react-native-elements'\n\n// implemented without image with header\n<Card>\n  <Card.Title>CARD WITH DIVIDER</Card.Title>\n  <Card.Divider/>\n  {\n    users.map((u, i) => {\n      return (\n        <View key={i} style={styles.user}>\n          <Image\n            style={styles.image}\n            resizeMode=\"cover\"\n            source={{ uri: u.avatar }}\n          />\n          <Text style={styles.name}>{u.name}</Text>\n        </View>\n      );\n    })\n  }\n</Card>\n\n// implemented without image without header, using ListItem component\n <Card containerStyle={{padding: 0}} >\n  {\n    users.map((u, i) => {\n      return (\n        <ListItem\n          key={i}\n          roundAvatar\n          title={u.name}\n          leftAvatar={{ source: { uri: u.avatar } }}\n        />\n      );\n    })\n  }\n</Card>\n\n\n// implemented with Text and Button as children\n<Card>\n  <Card.Title>HELLO WORLD</Card.Title>\n  <Card.Divider/>\n  <Card.Image source={require('../images/pic2.jpg')} />\n  <Text style={{marginBottom: 10}}>\n      The idea with React Native Elements is more about component structure than actual design.\n  </Text>\n  <Button\n    icon={<Icon name='code' color='#ffffff' />}\n    buttonStyle={{borderRadius: 0, marginLeft: 0, marginRight: 0, marginBottom: 0}}\n    title='VIEW NOW' />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tabbed Interface with @rneui/themed Tab and TabView in React Native\nDESCRIPTION: This React Native functional component demonstrates how to build a tab navigation system using `Tab` and `TabView` from `@rneui/themed`. It utilizes the `useState` hook to manage the selected tab index (`index`), linking the `Tab` component's selection (`onChange`) to the displayed content within the `TabView`. Each `Tab.Item` defines the appearance (title, icon) of a tab button, and each `TabView.Item` defines the content (a `Text` component with a distinct background) for a specific tab.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE Tab\nimport React from 'react';\nimport { Tab, Text, TabView } from '@rneui/themed';\n\nexport default () => {\nconst [index, setIndex] = React.useState(0);\n\nreturn (\n  <>\n    <Tab\n      value={index}\n      onChange={(e) => setIndex(e)}\n      indicatorStyle={{\n        backgroundColor: 'white',\n        height: 3,\n      }}\n      variant=\"primary\"\n    >\n      <Tab.Item\n        title=\"Recent\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\n      />\n      <Tab.Item\n        title=\"favorite\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\n      />\n      <Tab.Item\n        title=\"cart\"\n        titleStyle={{ fontSize: 12 }}\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\n      />\n    </Tab>\n\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\n        <Text h1>Recent</Text>\n      </TabView.Item>\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\n        <Text h1>Favorite</Text>\n      </TabView.Item>\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\n        <Text h1>Cart</Text>\n      </TabView.Item>\n    </TabView>\n  </>\n);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Functional Switch Component in React Native with @rneui/themed\nDESCRIPTION: This TypeScript code defines a React Native functional component `SwitchComponent`. It imports `Switch` from `@rneui/themed` and uses the `useState` hook to manage the `checked` state. The `Switch` component's `value` is bound to the state, and `onValueChange` updates the state when the switch is toggled. Basic styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\nconst [checked, setChecked] = useState(false);\n\nconst toggleSwitch = () => {\n  setChecked(!checked);\n};\n\nreturn (\n  <View style={styles.view}>\n   <Switch\n      value={checked}\n      onValueChange={(value) => setChecked(value)}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Displaying Badges on List Items using React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows how to render a Badge component inside a ListItem, customizing the value and text color, and adding margin adjustments for positioning. Requires the ListItem and Badge components from '@rneui/themed'. Useful for displaying counts or statuses within a list context, the snippet illustrates placement and style customization options.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme in React Native Elements v4\nDESCRIPTION: This code block shows how to create a custom theme using the createTheme helper function in React Native Elements v4. It includes separate configurations for light and dark modes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- const myTheme: FullTheme = {\n+ const myTheme = createTheme({\n-  colors: {\n+  lightColors:{\n     primary: '#f2f2f2',\n   },\n+  darkColors: {\n+   primary: '#121212',\n+  },\n+  mode: 'dark',\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with Component Props in React Native Elements\nDESCRIPTION: This example illustrates how to override theme styles using component props. It shows the precedence of styles, where prop styles take priority over theme styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/0.index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Tooltip Reference with useRef in React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows how to use React's useRef hook to create a reference object for a Tooltip component, enabling programmatic control of the component. It requires React and its hooks as dependencies, particularly 'useRef' from 'react'. The ref is attached to the Tooltip, allowing you to call instance methods later. The reference object should be passed to the Tooltip via its 'ref' property.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst tooltipRef = useRef(null);\n\n...\n\n<Tooltip\n  ref={tooltipRef}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal and Vertical Sliders in React Native with RNE\nDESCRIPTION: This code creates a component with horizontal and vertical sliders using React Native Elements. It demonstrates state management, custom styling, and dynamic color interpolation for the horizontal slider's icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from '@rneui/themed';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\nconst [value, setValue] = useState(0);\nconst [vertValue, setVertValue] = useState(0);\n\nconst interpolate = (start: number, end: number) => {\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n  return Math.ceil((1 - k) * start + k * end) % 256;\n};\n\nconst color = () => {\n  let r = interpolate(255, 0);\n  let g = interpolate(0, 255);\n  let b = interpolate(0, 0);\n  return `rgb(${r},${g},${b})`;\n};\n\nreturn (\n  <>\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n    <View style={[styles.contentView]}>\n      <Slider\n        value={value}\n        onValueChange={setValue}\n        maximumValue={10}\n        minimumValue={0}\n        step={1}\n        allowTouchTrack\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color={color()}\n            />\n          ),\n        }}\n      />\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n    </View>\n    <Text style={styles.subHeader}>Vertical Slider</Text>\n    <View style={styles.verticalContent}>\n      <Slider\n        value={vertValue}\n        onValueChange={setVertValue}\n        maximumValue={50}\n        minimumValue={20}\n        step={1}\n        orientation=\"vertical\"\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n        thumbProps={{\n          children: (\n            <Icon\n              name=\"heartbeat\"\n              type=\"font-awesome\"\n              size={20}\n              reverse\n              containerStyle={{ bottom: 20, right: 20 }}\n              color=\"#f50\"\n            />\n          ),\n        }}\n      />\n    </View>\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  padding: 20,\n  width: '100%',\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nverticalContent: {\n  padding: 20,\n  flex: 1,\n  flexDirection: 'row',\n  height: 500,\n  justifyContent: 'center',\n  alignItems: 'stretch',\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Component in React Native Elements\nDESCRIPTION: This snippet demonstrates the implementation of the Divider component from React Native Elements. It showcases horizontal and vertical dividers with various customization options such as width, color, inset, and subheader. The component uses the useTheme hook for dynamic theming.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Divider/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { Text, Divider, useTheme } from 'react-native-elements';\nimport { ScrollView, StyleSheet, View } from 'react-native';\n\ntype DividerViewTypes = {};\n\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\n  const { theme } = useTheme();\n  return (\n    <>\n      <ScrollView>\n        <Text style={styles.subHeader}>Horizontal Dividers</Text>\n        <View style={styles.horizontal}>\n          <Text style={styles.horizontalText}>Horizontal Divider</Text>\n          <Divider />\n          <Text style={styles.horizontalText}>\n            Horizontal Divider with width and color\n          </Text>\n          <Divider width={5} color={theme?.colors?.primary} />\n        </View>\n        <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\n        <View style={styles.horizontal}>\n          <Text style={styles.horizontalText}>\n            Horizontal Divider with left inset\n          </Text>\n          <Divider inset={true} />\n          <Text style={styles.horizontalText}>\n            Horizontal Divider with right inset\n          </Text>\n          <Divider inset={true} insetType=\"right\" />\n          <Text style={styles.horizontalText}>\n            Horizontal Divider with middle inset\n          </Text>\n          <Divider inset={true} insetType=\"middle\" />\n          <Text style={styles.horizontalText}>Welcome to RNE App</Text>\n        </View>\n        <Text style={styles.subHeader}>Vertical Dividers</Text>\n        <View style={styles.vertical}>\n          <Text>Left text</Text>\n          <Divider orientation=\"vertical\" />\n          <Text>Right text</Text>\n        </View>\n        <View style={styles.vertical}>\n          <Text>Left text</Text>\n          <Divider orientation=\"vertical\" width={5} />\n          <Text>Right text</Text>\n        </View>\n        <Text style={styles.subHeader}>Dividers with SubHeader</Text>\n        <View style={styles.horizontal}>\n          <Text style={styles.horizontalText}>Left text</Text>\n          <Divider\n            subHeader=\"Divider\"\n            inset={true}\n            subHeaderStyle={{ color: theme?.colors?.primary }}\n          />\n          <Text style={styles.horizontalText}>Right text</Text>\n        </View>\n      </ScrollView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  },\n  horizontal: {\n    marginBottom: 10,\n  },\n  horizontalText: {\n    textAlign: 'center',\n    fontSize: 16,\n    marginVertical: 10,\n  },\n  vertical: {\n    marginBottom: 10,\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n  },\n});\n\nexport default DividerView;\n```\n\n----------------------------------------\n\nTITLE: Configuring Component-Specific Styles in ThemeProvider Theme Object (JSX)\nDESCRIPTION: Shows how to configure default props for specific components within the `theme` object passed to `ThemeProvider`. This example sets `rounded: true` for all `Avatar` components and applies a custom `textStyle` to all `Badge` components within the provider's scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  Avatar: {\n    rounded: true,\n  },\n  Badge: {\n    textStyle: { fontSize: 30 },\n  },\n};\n\n...\n\n<ThemeProvider theme={theme}>\n```\n\n----------------------------------------\n\nTITLE: Applying Platform-Specific Native Colors to Theme using Platform API (JavaScript)\nDESCRIPTION: This snippet shows how to configure a React Native Elements theme to use platform-native default colors via the Platform.select API. It programmatically selects color tokens based on the detected platform (iOS, Android, or default), merging them into the lightColors theme key. Dependencies include 'react-native' for platform detection and '@rneui/themed' for theming; the resulting theme is propagated using ThemeProvider and used to style components (e.g., Button) accordingly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/2.theme object.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Custom Styled Divider in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the `Divider` component from `react-native-elements` and render it within a React Native application. It also shows how to customize the divider's appearance, specifically setting its background color to blue, using the inline `style` prop. The `Divider` component visually separates content sections.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/divider.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Divider } from 'react-native-elements';\n\n<Divider style={{ backgroundColor: 'blue' }} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Swipeable ListItem in React Native Elements\nDESCRIPTION: This example shows how to implement a swipeable list item with custom content on both left and right sides. It displays info button on left swipe and delete button on right swipe, with appropriate styling for each action.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem.Swipeable\n  leftContent={\n    <Button\n      title=\"Info\"\n      icon={{ name: 'info', color: 'white' }}\n      buttonStyle={{ minHeight: '100%' }}\n    />\n  }\n  rightContent={\n    <Button\n      title=\"Delete\"\n      icon={{ name: 'delete', color: 'white' }}\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n    />\n  }\n>\n  <Icon name=\"My Icon\" />\n  <ListItem.Content>\n    <ListItem.Title>Hello Swiper</ListItem.Title>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient to RNE Chip using JSX\nDESCRIPTION: Demonstrates integrating `react-native-linear-gradient` with the `@rneui/themed` Chip component in React Native. It shows how to import `LinearGradient` and pass it to the `ViewComponent` prop of the Chip, configuring the gradient via `linearGradientProps`. This requires `react-native-linear-gradient` to be installed and linked for `react-native-cli` projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Reusable Button Component using Composition (TypeScript)\nDESCRIPTION: Demonstrates creating a custom `RaisedButton` component by wrapping the standard `@rneui/themed` Button component and applying a default `raised` prop. This allows reusing the styled button throughout the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/0.index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ButtonGroup with String Buttons - React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the ButtonGroup component with a simple array of strings as buttons inside a class-based React Native component. It initializes component state, binds the updateIndex handler, and renders ButtonGroup with selection logic controlled through state updates onPress. Dependencies include React, react-native-elements, and usage of the ButtonGroup and ButtonGroup props. The 'buttons' parameter is an array of strings, while 'selectedIndex' maintains the currently active button. Expected input: user taps a button, triggering an update in selectedIndex and re-rendering the group with new selection. Output: visually highlighted selected button. Limitations: button labels are plain strings, not custom components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/button_group.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\n\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nrender () {\n  const buttons = ['Hello', 'World', 'Buttons']\n  const { selectedIndex } = this.state\n\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering and Customizing Icons with React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the React Native Elements Icon component to render various icons from different icon sets, apply custom colors, and enable icon interactivity. It requires react-native-elements (or @rneui/themed) and react-native-vector-icons as dependencies. Key parameters include 'name', 'type', 'color', 'reverse', and 'onPress'; the component outputs visually customized icons, some with interactive behavior. Limitations: icons must be chosen from supported sets, and custom icons require prior registration using registerCustomIconType.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { Icon } from '@rneui/themed';\\n\\nexport default () => {\\nreturn (\\n  <>\\n    <View\\n      style={{\\n        alignItems: 'center',\\n        paddingVertical: 5,\\n        flexGrow: 1,\\n      }}\\n    >\\n      <Icon\\n        name='rowing' />\\n\\n      <Icon\\n        name='g-translate'\\n        color='#00aced' />\\n\\n      <Icon\\n        name='sc-telegram'\\n        type='evilicon'\\n        color='#517fa4'\\n      />\\n\\n      <Icon\\n        reverse\\n        name='ios-american-football'\\n        type='ionicon'\\n        color='#517fa4'\\n      />\\n\\n      <Icon\\n        raised\\n        name='heartbeat'\\n        type='font-awesome'\\n        color='#f50'\\n        onPress={() => console.log('hello')} />\\n    </View>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial.Action Component\nDESCRIPTION: Example of importing components from react-native-elements package\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Showcasing RNE Tile Component Usage - React Native - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Tile component from the @rneui/themed package with various properties, including custom images, captions, icons, interactive onPress handlers, and nested content. It shows multiple variants inside a ScrollView, wrapped in a functional component, and styled using StyleSheet and inline styles. Dependencies include react, react-native, and @rneui/themed; inputs are component props and outputs are rendered UI elements. Usage assumes familiarity with React Native component structure and styling, and all code must run inside a React Native app environment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from '@rneui/themed';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\nreturn (\n  <>\n    <View style={{ alignItems: 'center' }}>\n      <ScrollView style={{ paddingVertical: 10 }}>\n      <Text style={styles.subHeader}>Featured Tile</Text>\n        <Tile\n          imageSrc={{\n            uri:\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n          }}\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n          titleStyle={{ fontSize: 15 }}\n          featured\n          caption=\"Mahatma Gandhi\"\n          activeOpacity={1}\n          width={310}\n        />\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n        <View style={{ paddingTop: 20 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n            icon={{\n              name: 'heart',\n              type: 'font-awesome',\n              size: 60,\n              color: 'red',\n            }}\n            featured\n            activeOpacity={0.8}\n            onPress={() => {\n              'Tile pressed';\n            }}\n            width={310}\n          />\n        </View>\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n            }}\n            title=\"Half Dome, Yosemite\"\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n            activeOpacity={1}\n            width={310}\n            contentContainerStyle={{ height: 70 }}\n            style={{ paddingBottom: 20 }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text style={{ color: 'green' }}>Visit</Text>\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\n            </View>\n          </Tile>\n        </View>\n      </ScrollView>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Tiles;\n```\n\n----------------------------------------\n\nTITLE: Button with Icon - React Native Elements - TSX\nDESCRIPTION: Renders a solid Button containing an Icon component and a text label as its children. Assumes Icon is imported from a compatible icon library. The Button can display icons on the left by default. Inputs include children (Icon and string); output is a button with an icon and label.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type=\\\"solid\\\">\\n  <Icon name=\\\"home\\\" color=\\\"white\\\" />\\n  Icon\\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using the Icon Component in React Native Elements\nDESCRIPTION: Demonstrates importing and using the Icon component from 'react-native-elements'. It shows various configurations including setting the icon name, type (from different icon sets like material, evilicon, ionicon, font-awesome), color, applying reverse and raised styles, and handling onPress events.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/icon.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Icon } from 'react-native-elements'\n\n<Icon\n  name='rowing' />\n\n<Icon\n  name='g-translate'\n  color='#00aced' />\n\n<Icon\n  name='sc-telegram'\n  type='evilicon'\n  color='#517fa4'\n/>\n\n<Icon\n  reverse\n  name='ios-american-football'\n  type='ionicon'\n  color='#517fa4'\n/>\n\n<Icon\n  raised\n  name='heartbeat'\n  type='font-awesome'\n  color='#f50'\n  onPress={() => console.log('hello')} />\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles Using ThemeProvider in React Native Elements (JavaScript/React Native)\nDESCRIPTION: This code shows how to use ThemeProvider from react-native-elements to apply a custom theme and default styles (e.g., raised) to all Button components inside it. The theme object specifies default props for component types. Dependencies are react-native-elements, and the ThemeProvider makes props available to all nested components. The expected input is the theme configuration, and output is buttons rendered with shared styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    raised: true,\n  },\n};\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n      <Button title=\"My 2nd Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable List Item with Custom Actions\nDESCRIPTION: Creates a swipeable list item with Info and Delete actions on left and right swipes respectively. The component includes custom button styling, icons, and reset functionality for both swipe directions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem.Swipeable\n  leftContent={(reset) => (\n    <Button\n      title=\"Info\"\n      onPress={() => reset()}\n      icon={{ name: 'info', color: 'white' }}\n      buttonStyle={{ minHeight: '100%' }}\n    />\n  )}\n  rightContent={(reset) => (\n    <Button\n      title=\"Delete\"\n      onPress={() => reset()}\n      icon={{ name: 'delete', color: 'white' }}\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n    />\n  )}\n>\n  <Icon name=\"My Icon\" />\n  <ListItem.Content>\n    <ListItem.Title>Hello Swiper</ListItem.Title>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Avatars - react-native-elements - JavaScript\nDESCRIPTION: This snippet demonstrates several usages of the Avatar component from react-native-elements in JavaScript, including displaying user photos, initials as titles, and icons. It covers setting properties such as 'rounded', 'source', 'title', and 'icon' and shows how to integrate Avatar.Accessory for additional functionality. Dependencies include 'react-native-elements' and a valid image URI or icon information. These avatars can be used in profile pictures, lists, and other UI components, and support different visual and interactive options.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar } from 'react-native-elements';\n\n// Standard Avatar\n<Avatar\n  rounded\n  source={{\n    uri:\n      'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n  }}\n/>\n\n// Avatar with Title\n<Avatar rounded title=\"MD\" />\n\n// Avatar with Icon\n<Avatar rounded icon={{ name: 'home' }} />\n\n// Standard Avatar with accessory\n<Avatar\n  source={{\n    uri:\n      'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n  }}\n  >\n  <Avatar.Accessory {...accessoryProps} />\n</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Overriding Internal Styles with Theme Styles in React Native Elements (TSX)\nDESCRIPTION: Demonstrates how styles defined within the `theme` object (using `createTheme` and `ThemeProvider`) override the default internal styles of a component. Here, the Button's default title color is overridden by the 'red' color defined in the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the Button Component - React Native Elements - TSX\nDESCRIPTION: This snippet demonstrates the TypeScript import statement needed to use the Button component from the '@rneui/themed' package. This is required before using the Button in any JSX/TSX file. Ensure the '@rneui/themed' dependency is installed in your project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Customizing ListItem Subtitle with a View in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom layout within a `ListItem` by replacing the standard `ListItem.Subtitle` with a custom React Native `View`. This custom view contains an `Image` and `Text` component, styled using `StyleSheet` to achieve a specific layout for the subtitle area. It requires importing `ListItem` from `@rneui/themed` and standard React Native components (`View`, `Image`, `Text`, `StyleSheet`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ListItem, Avatar } from '@rneui/themed'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Simple CheckBox Implementation\nDESCRIPTION: Demonstrates basic checkbox implementation with state management and different styling options including custom icons and disabled state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/CheckBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction () {\n     const [checked, setChecked] = React.useState(true);\n     const toggleCheckbox = () => setChecked(!checked);\n     return (\n       <Stack row align=\"center\" spacing={1}>\n         <CheckBox\n           checked={checked}\n           onPress={toggleCheckbox}\n           // Use ThemeProvider to make change for all checkbox\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-marked\"\n           uncheckedIcon=\"checkbox-blank-outline\"\n           checkedColor=\"red\"\n         />\n         <CheckBox\n           checked={checked}\n           onPress={toggleCheckbox}\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-outline\"\n           uncheckedIcon={'checkbox-blank-outline'}\n         />\n         <CheckBox\n           checked={false}\n           disabled\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-outline\"\n           uncheckedIcon={'checkbox-blank-outline'}\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem.Accordion in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This React Native code snippet demonstrates the use of the `ListItem.Accordion` component from `react-native-elements`. It defines an accordion with an icon and title in its header (`content` prop). The `isExpanded` prop controls its visibility, toggled by the `onPress` handler using a state variable (`expanded` and `setExpanded`). When expanded, it dynamically maps over an array (`list2`) to render nested `ListItem` components, each displaying an avatar, name, subtitle, and a chevron.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem.Accordion\n  content={\n    <>\n      <Icon name=\"place\" size={30} />\n      <ListItem.Content>\n        <ListItem.Title>List Accordion</ListItem.Title>\n      </ListItem.Content>\n    </>\n  }\n  isExpanded={expanded}\n  onPress={() => {\n    setExpanded(!expanded);\n  }}\n>\n  {list2.map((l, i) => (\n    <ListItem key={i} onPress={log} bottomDivider>\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\n      <ListItem.Content>\n        <ListItem.Title>{l.name}</ListItem.Title>\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  ))}\n</ListItem.Accordion>\n```\n\n----------------------------------------\n\nTITLE: Using the Card Component in React Native Elements (JavaScript/React Native)\nDESCRIPTION: Demonstrates various ways to implement the `Card` component from `react-native-elements`. It includes defining sample user data (`users`), importing required components from `react-native` and `react-native-elements`, and showcasing different Card layouts: one displaying a list of users with a title and divider, another using `ListItem` components, and a third featuring an image (`Card.Image`), text, and a button.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/card.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = [\n {\n    name: 'brynn',\n    avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg'\n },\n ... // more users here\n]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View, Text, Image } from 'react-native'\nimport { Card, ListItem, Button, Icon } from 'react-native-elements'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// implemented without image with header\n<Card>\n  <Card.Title>CARD WITH DIVIDER</Card.Title>\n  <Card.Divider/>\n  {\n    users.map((u, i) => {\n      return (\n        <View key={i} style={styles.user}>\n          <Image\n            style={styles.image}\n            resizeMode=\"cover\"\n            source={{ uri: u.avatar }}\n          />\n          <Text style={styles.name}>{u.name}</Text>\n        </View>\n      );\n    })\n  }\n</Card>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// implemented without image without header, using ListItem component\n <Card containerStyle={{padding: 0}} >\n  {\n    users.map((u, i) => <ListItem key={i} />)\n  }\n</Card>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// implemented with Text and Button as children\n<Card>\n  <Card.Title>HELLO WORLD</Card.Title>\n  <Card.Divider/>\n  <Card.Image source={require('../images/pic2.jpg')}>\n    <Text style={{marginBottom: 10}}>\n      The idea with React Native Elements is more about component structure than actual design.\n    </Text>\n    <Button\n      icon={<Icon name='code' color='#ffffff' />}\n      buttonStyle={{borderRadius: 0, marginLeft: 0, marginRight: 0, marginBottom: 0}}\n      title='VIEW NOW' />\n  </Card.Image>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with Component Props - TypeScript\nDESCRIPTION: Shows how to override both internal and theme-based styles by passing external props directly to the Button component ('titleStyle'). This ensures the inline style takes precedence. The example is similar to the previous snippet, with 'titleStyle' set to pink, demonstrating style hierarchies in React Native Elements. Dependencies and usage remain the same; key parameter is the external style prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/0.index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete React Native Elements Tooltip Component with Web Support\nDESCRIPTION: This comprehensive example demonstrates creating a Tooltip component with React Native Elements that works on web platforms. It includes a custom controlled tooltip implementation, various styling options, and proper Modal handling for web compatibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, lightColors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\nimport Modal from 'modal-react-native-web';\n\nconst { height } = Dimensions.get('window');\n\nconst ControlledTooltip: React.FC<TooltipProps> = (props) => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Tooltip\n      visible={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      {...props}\n    />\n  );\n};\nconst TooltipComponent = () => {\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <ControlledTooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={lightColors.primary}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            ModalComponent={Modal}\n            backgroundColor={lightColors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            width={200}\n            backgroundColor={lightColors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </ControlledTooltip>\n        </View>\n        <View style={styles.view}>\n          <ControlledTooltip\n            width={200}\n            backgroundColor={lightColors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </ControlledTooltip>\n          <ControlledTooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </ControlledTooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CheckBox Configurations with React Native Elements - TypeScript\nDESCRIPTION: This snippet defines a functional React component in TypeScript that demonstrates four different configurations of the CheckBox component from the @rneui/themed package. Dependencies include React, @rneui/themed, and @rneui/base for the CheckBox and Icon components; TypeScript must be enabled. Each CheckBox uses independent useState hooks for controlling checked state, and showcases features such as custom checked/unchecked icons, dynamic titles, right-aligned icons, custom icon types, and color customization. Inputs include user interaction (press events), and outputs are state changes and visual updates; integration assumes usage within a React Native application context that supports these libraries.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { CheckBox, Icon } from '@rneui/themed';\\n\\ntype CheckboxComponentProps = {};\\n\\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\\nconst [check1, setCheck1] = useState(false);\\nconst [check2, setCheck2] = useState(false);\\nconst [check3, setCheck3] = useState(false);\\nconst [check4, setCheck4] = useState(false);\\n\\nreturn (\\n  <>\\n    <CheckBox\\n      center\\n      title=\"Click Here\"\\n      checked={check1}\\n      onPress={() => setCheck1(!check1)}\\n    />\\n\\n    <CheckBox\\n      center\\n      title=\"Click Here\"\\n      checkedIcon=\"dot-circle-o\"\\n      uncheckedIcon=\"circle-o\"\\n      checked={check2}\\n      onPress={() => setCheck2(!check2)}\\n    />\\n\\n    <CheckBox\\n      center\\n      title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\\n      iconRight\\n      iconType=\"material\"\\n      checkedIcon=\"clear\"\\n      uncheckedIcon=\"add\"\\n      checkedColor=\"red\"\\n      checked={check3}\\n      onPress={() => setCheck3(!check3)}\\n    />\\n\\n    <CheckBox\\n      center\\n      checkedIcon={\\n        <Icon\\n          name=\"radio-button-checked\"\\n          type=\"material\"\\n          color=\"green\"\\n          size={25}\\n          iconStyle={{ marginRight: 10 }}\\n        />\\n      }\\n      uncheckedIcon={\\n        <Icon\\n          name=\"radio-button-unchecked\"\\n          type=\"material\"\\n          color=\"grey\"\\n          size={25}\\n          iconStyle={{ marginRight: 10 }}\\n        />\\n      }\\n      checked={check4}\\n      onPress={() => setCheck4(!check4)}\\n    />\\n  </>\\n);\\n};\\n\\nexport default CheckboxComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Divider Styles in React Native using @rneui/themed\nDESCRIPTION: This React Native functional component (`DividerView`) demonstrates how to use the `Divider` component from `@rneui/themed`. It showcases horizontal dividers (default, custom width/color), inset dividers (`inset`, `insetType`), vertical dividers (`orientation`), and dividers with subheaders (`subHeader`, `subHeaderStyle`). The component uses `ScrollView` for layout, `useTheme` for accessing theme colors, and `StyleSheet` for custom styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Divider\nimport React, { useContext } from 'react';\nimport { Text, Divider, useTheme } from '@rneui/themed';\nimport { ScrollView, StyleSheet, View } from 'react-native';\n\ntype DividerViewTypes = {};\n\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\nconst { theme } = useTheme();\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\n        <Divider />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with width and color\n        </Text>\n        <Divider width={5} color={theme?.colors?.primary} />\n      </View>\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with left inset\n        </Text>\n        <Divider inset={true} />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with right inset\n        </Text>\n        <Divider inset={true} insetType=\"right\" />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with middle inset\n        </Text>\n        <Divider inset={true} insetType=\"middle\" />\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\n      </View>\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" />\n        <Text>Right text</Text>\n      </View>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" width={5} />\n        <Text>Right text</Text>\n      </View>\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Left text</Text>\n        <Divider\n          subHeader=\"Divider\"\n          inset={true}\n          subHeaderStyle={{ color: theme?.colors?.primary }}\n        />\n        <Text style={styles.horizontalText}>Right text</Text>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n},\nhorizontal: {\n  marginBottom: 10,\n},\nhorizontalText: {\n  textAlign: 'center',\n  fontSize: 16,\n  marginVertical: 10,\n},\nvertical: {\n  marginBottom: 10,\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n},\n});\n\nexport default DividerView;\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Fractional Ratings in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This JSX snippet shows how to configure the Rating component from React Native Elements to support fractional values. The `fractions` prop enables this feature (value `{1}` likely means precision to one decimal place), and `startingValue` sets the initial fractional rating. The `showRating` prop displays the numeric rating value alongside the visual representation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n```html\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Interaction Methods on React Native Elements Input via Ref\nDESCRIPTION: This snippet illustrates how to call the built-in interaction methods (`focus`, `blur`, `clear`, `isFocused`, `setNativeProps`, `shake`) on the Input component instance using the `current` property of the ref object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Icon Styles in React Native Elements\nDESCRIPTION: This code snippet demonstrates different ways to use the Icon component from React Native Elements. It shows how to create basic icons, colored icons, icons from different sets, and icons with reverse and raised styles. The example also includes an onPress event handler for interactive icons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Icon } from '@rneui/themed';\n\nexport default () => {\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Icon\n        name='rowing' />\n\n      <Icon\n        name='g-translate'\n        color='#00aced' />\n\n      <Icon\n        name='sc-telegram'\n        type='evilicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        reverse\n        name='ios-american-football'\n        type='ionicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        raised\n        name='heartbeat'\n        type='font-awesome'\n        color='#f50'\n        onPress={() => console.log('hello')} />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchBar with State and Hooks - React Native Elements - TypeScript\nDESCRIPTION: This snippet provides a full function component example utilizing React hooks and TypeScript to manage the state of a SearchBar input. It showcases how to bind the SearchBar value to component state, update it via the onChangeText callback, and apply styling using StyleSheet. Dependencies include React, React Native Elements (themed SearchBar), and react-native. The component takes no props and demonstrates local state handling for the search string. Inputs are handled as controlled components; outputs consist of the SearchBar being rendered within a styled View container.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n```SnackPlayer name=RNE SearchBar\\nimport React, { useState } from 'react';\\nimport { SearchBar } from '@rneui/themed';\\nimport { View, Text, StyleSheet } from 'react-native';\\n\\ntype SearchBarComponentProps = {};\\n\\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\\nconst [search, setSearch] = useState(\"\");\\n\\nconst updateSearch = (search) => {\\n  setSearch(search);\\n};\\n\\nreturn (\\n  <View style={styles.view}>\\n    <SearchBar\\n      placeholder=\\\"Type Here...\\\"\\n      onChangeText={updateSearch}\\n      value={search}\\n    />\\n  </View>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nview: {\\n  margin: 10,\\n},\\n});\\n\\nexport default SwitchComponent;\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Usage Examples in React Native Elements (JSX)\nDESCRIPTION: This snippet demonstrates how to implement three types of Dialogs ('Simple', 'Multi-Action', and 'Loading') using React Native Elements within a React component. It relies on the react-native-elements library for Dialog and Button components and uses hooks from React for state management. The code expects Button and Dialog to be correctly imported and assumes a valid 'styles.button' style is defined elsewhere; it outputs modal dialogs based on user button presses and handles visibility using hooks.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, Text } from 'react-native';\nimport { Dialog, Button } from 'react-native-elements';\n\nconst DialogExample = () => {\n  const [visible1, setVisible1] = useState(false);\n  const [visible2, setVisible2] = useState(false);\n  const [visible3, setVisible3] = useState(false);\n\n  const toggleDialog1 = () => {\n    setVisible1(!visible1);\n  };\n  const toggleDialog2 = () => {\n    setVisible2(!visible2);\n  };\n  const toggleDialog3 = () => {\n    setVisible3(!visible3);\n  };\n\n  return (\n    <View>\n      <Button title=\"Open Simple Dialog\" onPress={toggleDialog1} />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      // Simple Dialog\n      <Dialog isVisible={visible1} onBackdropPress={toggleDialog1}>\n        <Dialog.Title title=\"Dialog Title\" />\n        <Text>Dialog body text. Add relevant information here.</Text>\n      </Dialog>\n      // Multi-Action Dialog\n      <Dialog isVisible={visible2} onBackdropPress={toggleDialog2}>\n        <Dialog.Title title=\"Dialog Title\" />\n        <Text>Dialog body text. Add relevant information here.</Text>\n        <Dialog.Actions>\n          <Dialog.Button\n            title=\"ACTION 1\"\n            onPress={() => console.log('Primary Action Clicked!')}\n          />\n          <Dialog.Button\n            title=\"ACTION 2\"\n            onPress={() => console.log('Secondary Action Clicked!')}\n          />\n        </Dialog.Actions>\n      </Dialog>\n      // Loading Dialog\n      <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n        <Dialog.Loading />\n      </Dialog>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Tile Styles in React Native using @rneui/themed (TypeScript)\nDESCRIPTION: This React Native functional component (`Tiles`) demonstrates the usage of the `Tile` component from `@rneui/themed`. It showcases how to display featured tiles with titles and captions, featured tiles with icons and press handlers, and tiles with custom content containers. Dependencies include `react`, `react-native`, and `@rneui/themed`. The component renders these tiles within a `ScrollView` and uses `StyleSheet` for basic styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from '@rneui/themed';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\nreturn (\n  <>\n    <View style={{ alignItems: 'center' }}>\n      <ScrollView style={{ paddingVertical: 10 }}>\n      <Text style={styles.subHeader}>Featured Tile</Text>\n        <Tile\n          imageSrc={{\n            uri:\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n          }}\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n          titleStyle={{ fontSize: 15 }}\n          featured\n          caption=\"Mahatma Gandhi\"\n          activeOpacity={1}\n          width={310}\n        />\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n        <View style={{ paddingTop: 20 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n            icon={{\n              name: 'heart',\n              type: 'font-awesome',\n              size: 60,\n              color: 'red',\n            }}\n            featured\n            activeOpacity={0.8}\n            onPress={() => {\n              'Tile pressed';\n            }}\n            width={310}\n          />\n        </View>\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n            }}\n            title=\"Half Dome, Yosemite\"\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n            activeOpacity={1}\n            width={310}\n            contentContainerStyle={{ height: 70 }}\n            style={{ paddingBottom: 20 }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text style={{ color: 'green' }}>Visit</Text>\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\n            </View>\n          </Tile>\n        </View>\n      </ScrollView>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Tiles;\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Elements Button with Various Props - JavaScript/JSX\nDESCRIPTION: This snippet showcases multiple configurations of the Button component from react-native-elements, displaying solid, outline, and clear styles, usage with both icon components (from react-native-vector-icons/FontAwesome) and icon objects, right-icon placement, and the loading spinner. It requires react-native-elements and react-native-vector-icons dependencies. Each button demonstrates different key props: title (button label), type (style variant), icon (icon component or object), iconRight (icon alignment), and loading (spinner). Expected input is a set of JSX elements specifying prop values; outputs are styled, interactive mobile UI buttons. Limitations: Assumes an initialized React/React Native environment with dependencies installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/button.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from 'react-native-elements';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\n<Button\n  title=\"Solid Button\"\n/>\n\n<Button\n  title=\"Outline button\"\n  type=\"outline\"\n/>\n\n<Button\n  title=\"Clear button\"\n  type=\"clear\"\n/>\n\n<Button\n  icon={\n    <Icon\n      name=\"arrow-right\"\n      size={15}\n      color=\"white\"\n    />\n  }\n  title=\"Button with icon component\"\n/>\n\n<Button\n  icon={{\n    name: \"arrow-right\",\n    size: 15,\n    color: \"white\"\n  }}\n  title=\"Button with icon object\"\n/>\n\n<Button\n  icon={\n    <Icon\n      name=\"arrow-right\"\n      size={15}\n      color=\"white\"\n    />\n  }\n  iconRight\n  title=\"Button with right icon\"\n/>\n\n<Button\n  title=\"Loading button\"\n  loading\n/>\n```\n\n----------------------------------------\n\nTITLE: Mixing Object Theme and Array Local Styles with ThemeProvider - React Native Elements - JavaScript/JSX\nDESCRIPTION: This example shows how the ThemeProvider can correctly merge a theme providing an object-style 'containerStyle' with a local prop passing styles as an array. The pattern demonstrates ThemeProvider's handling of object-to-array coercion, ensuring style application remains consistent. Requires React Native and react-native-elements; the Button's container style combines a margin from the theme and a blue background from local styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Variants - React Native Elements - TSX\nDESCRIPTION: This snippet illustrates rendering multiple Button components with different variant styles (solid, outline, clear) inside a horizontal Stack container. The 'type' prop changes the visual style of the button, while the 'title' prop sets the button label. The Stack component arranges the buttons in a row with center alignment and specified spacing. Requires React Native Elements, and assumes Stack is defined or imported elsewhere.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack dir=\\\"row\\\" align=\\\"center\\\" spacing={4}>\n  <Button title=\\\"Solid\\\" />\n  <Button title=\\\"Outline\\\" type=\\\"outline\\\" />\n  <Button title=\\\"Clear\\\" type=\\\"clear\\\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Header with @rneui/themed in React Native (TypeScript)\nDESCRIPTION: This runnable SnackPlayer example showcases a functional React Native component (`Header`) built using `HeaderRNE` from `@rneui/themed`. It demonstrates setting left, center, and right components within the header, incorporating icons, handling touch events with `TouchableOpacity` for navigation, and applying styles using `StyleSheet`. The entire component is wrapped in `SafeAreaProvider` for proper layout on devices with notches or other intrusions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckBox Components in React Native Elements\nDESCRIPTION: This code snippet demonstrates the usage of CheckBox components from React Native Elements. It includes examples of basic checkboxes, custom icons, right-aligned icons, and complex custom icons using the Icon component. The component uses React hooks to manage the state of each checkbox.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/CheckBox/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { CheckBox, Icon } from 'react-native-elements';\n\ntype CheckboxComponentProps = {};\n\nconst CheckboxComponent: React.FunctionComponent<CheckboxComponentProps> = () => {\n  const [check1, setCheck1] = useState(false);\n  const [check2, setCheck2] = useState(false);\n  const [check3, setCheck3] = useState(false);\n  const [check4, setCheck4] = useState(false);\n\n  return (\n    <>\n      <CheckBox\n        center\n        title=\"Click Here\"\n        checked={check1}\n        onPress={() => setCheck1(!check1)}\n      />\n\n      <CheckBox\n        center\n        title=\"Click Here\"\n        checkedIcon=\"dot-circle-o\"\n        uncheckedIcon=\"circle-o\"\n        checked={check2}\n        onPress={() => setCheck2(!check2)}\n      />\n\n      <CheckBox\n        center\n        title={`Click Here to ${check3 ? 'Remove' : 'Add'} This Item`}\n        iconRight\n        iconType=\"material\"\n        checkedIcon=\"clear\"\n        uncheckedIcon=\"add\"\n        checkedColor=\"red\"\n        checked={check3}\n        onPress={() => setCheck3(!check3)}\n      />\n\n      <CheckBox\n        center\n        checkedIcon={\n          <Icon\n            name=\"radio-button-checked\"\n            type=\"material\"\n            color=\"green\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        uncheckedIcon={\n          <Icon\n            name=\"radio-button-unchecked\"\n            type=\"material\"\n            color=\"grey\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        checked={check4}\n        onPress={() => setCheck4(!check4)}\n      />\n    </>\n  );\n};\n\nexport default CheckboxComponent;\n```\n\n----------------------------------------\n\nTITLE: Initializing ButtonGroup with String Buttons in React Native\nDESCRIPTION: This snippet demonstrates initializing and using the ButtonGroup component with simple string labels for buttons within a React class component. It includes setting up component state to track the `selectedIndex`, defining an `updateIndex` method to handle button presses, creating an array of string buttons, and rendering the `ButtonGroup` component with essential props like `onPress`, `selectedIndex`, and `buttons`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/button_group.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\n\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nrender () {\n  const buttons = ['Hello', 'World', 'Buttons']\n  const { selectedIndex } = this.state\n\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header with Linear Gradient - React Native Elements - JSX\nDESCRIPTION: This snippet demonstrates how to configure the React Native Elements Header component to use linear gradient backgrounds by integrating the react-native-linear-gradient package. The Header receives a LinearGradient as its ViewComponent and custom gradient properties using the linearGradientProps prop. Dependencies include @rneui/themed and react-native-linear-gradient, with required configuration for bare React Native projects per the linked setup guide. The key input is the gradient color array as well as the start and end points, and the output is a visually enhanced Header UI component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functional Header with Icons and Actions in React Native Elements (JSX)\nDESCRIPTION: This runnable SnackPlayer example shows a complete implementation of the `@rneui/themed` Header component within a `SafeAreaProvider`. It defines a functional component featuring left (menu icon), center (title text), and right (icons with navigation actions using `Linking` and `TouchableOpacity`) components. It also includes basic styling using `StyleSheet`. Dependencies include `react`, `react-native`, `@rneui/themed`, `react-native-gesture-handler`, and `react-native-safe-area-context`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pricing Cards in React Native using @rneui/themed (TypeScript)\nDESCRIPTION: This TypeScript React functional component (`Pricing`) showcases the use of the `PricingCard` from `@rneui/themed`. It renders three pricing cards within a `ScrollView`. Each card is configured with distinct properties: `color` (using predefined theme colors), `title`, `price`, `info` (an array of feature strings), and a `button` object defining the call-to-action. Dependencies include `React`, `ScrollView` from `react-native`, and `PricingCard`, `colors` from `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, colors } from '@rneui/themed';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <PricingCard\n        color={colors.primary}\n        title=\"Free\"\n        price=\"$0\"\n        info={['1 User', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary}\n        title=\"Starter\"\n        price=\"$19\"\n        info={['10 Users', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary2}\n        title=\"Enterprise\"\n        price=\"$49\"\n        info={['100 Users', 'One on One Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n    </ScrollView>\n  </>\n);\n};\n\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark Mode Based on System Scheme in JSX\nDESCRIPTION: Shows how to conditionally enable the React Native Elements dark mode theme using the `ThemeProvider`. It utilizes the `useColorScheme` hook (potentially from `react-native-appearance` or a similar library) to detect the user's system preference and passes the result to the `useDark` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useColorScheme } from 'react-native-appearance';\n\n...\n  let colorScheme = useColorScheme();\n...\n  <ThemeProvider useDark={colorScheme === 'dark'}>\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Component in React Native Elements\nDESCRIPTION: Provides a complete React Native functional component example showcasing various configurations of the `@rneui/themed` Tooltip component. It demonstrates customization options like disabling the pointer (`withPointer={false}`), setting custom background colors (`backgroundColor`), defining width (`width`), and providing complex content via the `popover` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, colors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\n\nconst { height } = Dimensions.get('window');\n\ntype ToolTipComponentProps = {};\n\nconst TooltipComponent: React.FunctionComponent<ToolTipComponentProps> = () => {\nconst toolProps = {};\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <Tooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </Tooltip>\n          <Tooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={colors.primary}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            backgroundColor={colors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n          <Tooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </Tooltip>\n          <Tooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable ListItems with React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use React Native Elements' ListItem.Swipeable component to create a list item with customizable left and right swipe actions. The left swipe reveals an \"Info\" button and the right swipe reveals a \"Delete\" button, both of which call the reset callback when pressed. Required dependencies include react-native-elements, and it is intended for use in a React Native JavaScript project. The ListItem includes an icon, content, and a chevron indicator; swipe actions use Button components with tailored styling and icons. Expected input is user swipe gestures, and the output is the rendering of the swipeable list item with respective actions triggered.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\n<ListItem.Swipeable\\n  leftContent={(reset) => (\\n    <Button\\n      title=\\\"Info\\\"\\n      onPress={() => reset()}\\n      icon={{ name: 'info', color: 'white' }}\\n      buttonStyle={{ minHeight: '100%' }}\\n    />\\n  )}\\n  rightContent={(reset) => (\\n    <Button\\n      title=\\\"Delete\\\"\\n      onPress={() => reset()}\\n      icon={{ name: 'delete', color: 'white' }}\\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\\n    />\\n  )}\\n>\\n  <Icon name=\\\"My Icon\\\" />\\n  <ListItem.Content>\\n    <ListItem.Title>Hello Swiper</ListItem.Title>\\n  </ListItem.Content>\\n  <ListItem.Chevron />\\n</ListItem.Swipeable>\\n```\n```\n\n----------------------------------------\n\nTITLE: Merging Array Styles with React Native Elements Theme (JSX)\nDESCRIPTION: Illustrates a successful style merging case where both the theme configuration for `Button.containerStyle` and the local `containerStyle` prop on the `Button` component are defined using arrays. Consistent types allow the `ThemeProvider` to merge the styles correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing SocialIcon Component with various configurations in React Native Elements\nDESCRIPTION: This code demonstrates different ways to use the SocialIcon component from React Native Elements. It shows how to create simple icons for various social networks with different styling options (raised, light) and also how to create social media buttons with optional titles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/social_icons.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SocialIcon } from 'react-native-elements'\n\n// Icon\n<SocialIcon\n  type='twitter'\n/>\n\n<SocialIcon\n  raised={false}\n  type='gitlab'\n/>\n\n<SocialIcon\n  light\n  type='medium'\n/>\n\n<SocialIcon\n  light\n  raised={false}\n  type='medium'\n/>\n\n\n// Button\n<SocialIcon\n  title='Sign In With Facebook'\n  button\n  type='facebook'\n/>\n\n<SocialIcon\n  title='Some Twitter Message'\n  button\n  type='twitter'\n/>\n\n<SocialIcon\n  button\n  type='medium'\n/>\n\n<SocialIcon\n  button\n  light\n  type='instagram'\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Bottom Sheet Modal using React Native Elements in TypeScript\nDESCRIPTION: This TypeScript snippet defines a functional React Native component that renders a button to open a BottomSheet modal from the React Native Elements library. The component manages sheet visibility using React's useState hook, dynamically renders a list of items (including a cancel option with custom styles), and uses the SafeAreaProvider for proper rendering on all devices. Required dependencies include 'react-native-elements', 'react-native-safe-area-context', and 'react-native'. Inputs involve user actions (button presses), and outputs are rendered UI components. Limitations include reliance on specific external libraries and expected proper linking for safe area context support.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/BottomSheet/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { BottomSheet, Button, ListItem } from 'react-native-elements';\\nimport { StyleSheet } from 'react-native';\\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\\n\\ntype BottomSheetComponentProps = {};\\n\\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\\n  const [isVisible, setIsVisible] = useState(false);\\n  const list = [\\n    { title: 'List Item 1' },\\n    { title: 'List Item 2' },\\n    {\\n      title: 'Cancel',\\n      containerStyle: { backgroundColor: 'red' },\\n      titleStyle: { color: 'white' },\\n      onPress: () => setIsVisible(false),\\n    },\\n  ];\\n\\n  return (\\n    <SafeAreaProvider>\\n      <Button\\n        title=\\\"Open Bottom Sheet\\\"\\n        onPress={() => setIsVisible(true)}\\n        buttonStyle={styles.button}\\n      />\\n      <BottomSheet modalProps={{}} isVisible={isVisible}>\\n        {list.map((l, i) => (\\n          <ListItem\\n            key={i}\\n            containerStyle={l.containerStyle}\\n            onPress={l.onPress}\\n          >\\n            <ListItem.Content>\\n              <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\\n            </ListItem.Content>\\n          </ListItem>\\n        ))}\\n      </BottomSheet>\\n    </SafeAreaProvider>\\n  );\\n};\\n\\nconst styles = StyleSheet.create({\\n  button: {\\n    margin: 10,\\n  },\\n});\\n\\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Using FlatList with ListItem and Avatar in React Native Elements\nDESCRIPTION: This example demonstrates integrating ListItem with React Native's FlatList component. It displays items with avatars, titles, subtitles, and a chevron icon for navigation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple FAB Variants with React Native Elements in JavaScript\nDESCRIPTION: This JavaScript snippet defines a React functional component that renders multiple Floating Action Buttons (FABs) using the @rneui/themed library. The example demonstrates dynamic visibility, handling click events to toggle FAB display, and configuring properties such as size, color, and icon. Dependencies include React, react-native, and @rneui/themed; the component expects to run in a React Native context and leverages React state to control FAB visibility. Key props include 'visible', 'loading', 'size', 'color', 'title', and 'icon', with handler functions to respond to user actions. Outputs are interactive FAB UIs, with toggling between visible and hidden FABs based on user interaction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { View, Text } from 'react-native';\\nimport { FAB } from '@rneui/themed';\\n\\nexport default () => {\\nconst [visible, setVisible] = React.useState(true);\\n\\nreturn (\\n  <>\\n    <View\\n      style={{\\n        alignItems: 'center',\\n        paddingVertical: 5,\\n        flexGrow: 1,\\n      }}\\n    >\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Small Size\\n      </Text>\\n      <FAB\\n        loading\\n        visible={visible}\\n        icon={{ name: 'add', color: 'white' }}\\n        size=\"small\"\\n      />\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Large Size\\n      </Text>\\n      <FAB\\n        visible={visible}\\n        icon={{ name: 'add', color: 'white' }}\\n        color=\"green\"\\n      />\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\\n        Primary Color\\n      </Text>\\n      <FAB\\n        visible={visible}\\n        title=\"Navigate\"\\n        upperCase\\n        icon={{ name: 'place', color: 'white' }}\\n      />\\n\\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\\n\\n      <FAB\\n        visible={visible}\\n        disabled\\n        title=\"Extended\"\\n        icon={{\\n          name: 'place',\\n          color: 'white',\\n        }}\\n      />\\n      <FAB\\n        visible={visible}\\n        onPress={() => setVisible(!visible)}\\n        placement=\"right\"\\n        title=\"Hide\"\\n        icon={{ name: 'delete', color: 'white' }}\\n        color=\"red\"\\n      />\\n      <FAB\\n        visible={!visible}\\n        onPress={() => setVisible(!visible)}\\n        placement=\"left\"\\n        title=\"Show\"\\n        icon={{ name: 'edit', color: 'white' }}\\n        color=\"green\"\\n      />\\n    </View>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark Mode Dynamically with ThemeProvider and useColorScheme in JSX\nDESCRIPTION: Demonstrates how to enable the React Native Elements dark mode theme dynamically based on the device's color scheme. It uses the `useColorScheme` hook (e.g., from `react-native-appearance`) to get the current scheme ('light' or 'dark') and sets the boolean `useDark` prop on the `ThemeProvider` accordingly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useColorScheme } from 'react-native-appearance';\n\n...\n  let colorScheme = useColorScheme();\n...\n  <ThemeProvider useDark={colorScheme === 'dark'}>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Title Component with React Native in JavaScript\nDESCRIPTION: This snippet defines a functional React Native component, 'CustomTitle', that arranges textual user information with distinct font weights and styles using 'View' and 'Text' components. It requires only 'react-native' as a dependency. The component outputs a vertically-oriented title with a bold name and an italic subtitle, and does not accept parameters.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst CustomTitle = () => {\nreturn (\n  <View style={{ flexDirection: 'column' }}>\n    <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n    <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n      Minister of Magic\n    </Text>\n  </View>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Swipeable ListItem with Actions using react-native-elements (JavaScript/JSX)\nDESCRIPTION: This React Native snippet demonstrates the use of the `ListItem.Swipeable` component from the `react-native-elements` library. It defines `leftContent` and `rightContent` props, which are functions returning `Button` components. These buttons are revealed when the list item is swiped left or right, providing 'Info' and 'Delete' actions respectively. The `reset` function passed to these content props can be called (e.g., `onPress`) to close the swipe view. The main content of the list item includes an `Icon`, `ListItem.Content` with a `ListItem.Title`, and a `ListItem.Chevron`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<ListItem.Swipeable\n  leftContent={(reset) => (\n    <Button\n      title=\"Info\"\n      onPress={() => reset()}\n      icon={{ name: 'info', color: 'white' }}\n      buttonStyle={{ minHeight: '100%' }}\n    />\n  )}\n  rightContent={(reset) => (\n    <Button\n      title=\"Delete\"\n      onPress={() => reset()}\n      icon={{ name: 'delete', color: 'white' }}\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n    />\n  )}\n>\n  <Icon name=\"My Icon\" />\n  <ListItem.Content>\n    <ListItem.Title>Hello Swiper</ListItem.Title>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Providing Modal Component for React Native Web Tooltip in JavaScript\nDESCRIPTION: This snippet shows how to import a compatible Modal component (like `modal-react-native-web`) and pass it to the `Tooltip` component's `ModalComponent` prop. This is necessary because `react-native-web` does not have a built-in `Modal` implementation, which the `@rneui/themed` Tooltip relies on for web platforms.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Tooltip ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Reusable Button with Composition in JSX\nDESCRIPTION: Demonstrates creating a reusable `RaisedButton` component by wrapping the standard `Button` component from `react-native-elements`. This approach uses composition to set the `raised` prop by default while still accepting all other `Button` props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native-elements';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SpeedDial Component with Actions - React Native Elements - JavaScript\nDESCRIPTION: This code snippet creates a functional React component that renders a SpeedDial with two actions ('Add' and 'Delete') using the '@rneui/themed' package. It manages visibility state using the useState hook, toggles SpeedDial open/close on user interaction, and logs messages when the 'Add' or 'Delete' actions are pressed. Requires the 'react' library and the '@rneui/themed' package; expects to be used within a React Native environment. The main input is user interaction with the SpeedDial trigger or the action buttons, and output is UI changes and log statements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { SpeedDial } from '@rneui/themed';\n\nexport default () => {\nconst [open, setOpen] = React.useState(false);\nreturn (\n  <SpeedDial\n    isOpen={open}\n    icon={{ name: 'edit', color: '#fff' }}\n    openIcon={{ name: 'close', color: '#fff' }}\n    onOpen={() => setOpen(!open)}\n    onClose={() => setOpen(!open)}\n  >\n    <SpeedDial.Action\n      icon={{ name: 'add', color: '#fff' }}\n      title=\"Add\"\n      onPress={() => console.log('Add Something')}\n    />\n    <SpeedDial.Action\n      icon={{ name: 'delete', color: '#fff' }}\n      title=\"Delete\"\n      onPress={() => console.log('Delete Something')}\n    />\n  </SpeedDial>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in React Native Elements\nDESCRIPTION: Shows how to import the Button component from the React Native Elements themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with useTheme Hook - TypeScript\nDESCRIPTION: Illustrates the useTheme hook to retrieve the current theme in a function component. The retrieved theme is then used to style a Text element. This method is suitable for functional components and requires '@rneui/themed' as a dependency. Outputs theme-driven styling and expects the parent to provide the theme context. The code assumes 'View' and 'styles' are properly imported or defined elsewhere.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/0.index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from '@rneui/themed';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Theme Properties in React Native Elements Components\nDESCRIPTION: Demonstrates how to use custom theme properties in a React Native Elements component after extending the theme. This example shows accessing a custom property 'myCustomProperty'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text>{theme.myCustomProperty}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a ListItem with a Custom Subtitle View using @rneui/themed in JavaScript\nDESCRIPTION: Shows how to customize the content area of a `ListItem` from `@rneui/themed` by replacing the standard subtitle with a custom `View`. This custom view (`subtitleView`) uses `flexDirection: 'row'` to layout an `Image` and `Text` component horizontally, demonstrating complex subtitle structures. Includes example `StyleSheet` definitions for the custom view and its children. Depends on `@rneui/themed`'s `ListItem`, and React Native's `View`, `Image`, `Text`, and `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with ThemeConsumer Component (JSX)\nDESCRIPTION: Shows an alternative to `withTheme` using the `ThemeConsumer` component and the render prop pattern. It allows accessing the theme object within a component's render method without wrapping the component definition.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from 'react-native-elements';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Styles as Objects and Overriding Locally - React Native Elements - JavaScript\nDESCRIPTION: Demonstrates a working example of providing a style as an object both in the theme and as a local prop to a Button component. This practice ensures successful style merging by maintaining matching types. Dependencies: react-native-elements. Input: theme with object-based containerStyle and a Button with an object-based containerStyle. Output: Styles are properly merged and applied.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using LinearGradient with Header Component in React Native (JSX)\nDESCRIPTION: This snippet demonstrates how to apply a linear gradient background to the `@rneui/themed` `Header` component by using the `react-native-linear-gradient` package. It involves importing both `Header` and `LinearGradient`, assigning `LinearGradient` to the `ViewComponent` prop, and configuring the gradient's colors and direction via the `linearGradientProps` prop. This requires installing `react-native-linear-gradient` for non-Expo/CRNA projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Assigning a Ref to React Native Elements SearchBar (JavaScript)\nDESCRIPTION: This snippet demonstrates how to get a reference to a `SearchBar` instance using the `ref` prop in a React component. The reference is stored in `this.search`, allowing direct access to the component's methods.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SearchBar/SearchBar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Dialog Types with @rneui/themed (JSX)\nDESCRIPTION: This React functional component demonstrates various implementations of the `Dialog` component from `@rneui/themed`. It uses `useState` hooks to manage the visibility of different dialogs triggered by buttons. Examples include a simple dialog, a dialog with multiple actions, a loading dialog, a buttonless dialog, and custom dialogs containing `CheckBox` and `ListItem` components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport {\nButton,\nDialog,\nCheckBox,\nListItem,\nAvatar,\n} from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype DialogComponentProps = {};\n\nconst Dialogs: React.FunctionComponent<DialogComponentProps> = () => {\nconst [visible1, setVisible1] = useState(false);\nconst [visible2, setVisible2] = useState(false);\nconst [visible3, setVisible3] = useState(false);\nconst [visible4, setVisible4] = useState(false);\nconst [visible5, setVisible5] = useState(false);\nconst [visible6, setVisible6] = useState(false);\nconst [checked, setChecked] = useState(1);\n\nconst toggleDialog1 = () => {\n  setVisible1(!visible1);\n};\nconst toggleDialog2 = () => {\n  setVisible2(!visible2);\n};\nconst toggleDialog3 = () => {\n  setVisible3(!visible3);\n};\nconst toggleDialog4 = () => {\n  setVisible4(!visible4);\n};\nconst toggleDialog5 = () => {\n  setVisible5(!visible5);\n};\nconst toggleDialog6 = () => {\n  setVisible6(!visible6);\n};\n\nconst userlist = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'amy.farha@gmail.com',\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'cjackson@gmail.com',\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'amandam@gmail.com',\n  },\n];\n\nreturn (\n  <View>\n    <View style={styles.buttonContainer}>\n      <Button\n        title=\"Open Simple Dialog\"\n        onPress={toggleDialog1}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Mutli Action Dialog\"\n        onPress={toggleDialog2}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Loading Dialog\"\n        onPress={toggleDialog3}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Buttonless Dialog\"\n        onPress={toggleDialog4}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 1\"\n        onPress={toggleDialog5}\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Custom Dialog 2\"\n        onPress={toggleDialog6}\n        buttonStyle={styles.button}\n      />\n    </View>\n    <Dialog\n      isVisible={visible1}\n      onBackdropPress={toggleDialog1}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible2}\n      onBackdropPress={toggleDialog2}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n      <Dialog.Actions>\n        <Dialog.Button title=\"ACTION 1\" onPress={() => console.log('Primary Action Clicked!')}/>\n        <Dialog.Button title=\"ACTION 2\" onPress={() => console.log('Secondary Action Clicked!')}/>\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog isVisible={visible3} onBackdropPress={toggleDialog3}>\n      <Dialog.Loading />\n    </Dialog>\n    <Dialog\n      isVisible={visible4}\n      onBackdropPress={toggleDialog4}\n    >\n      <Dialog.Title title=\"Dialog Title\"/>\n      <Text>Dialog body text. Add relevant information here.</Text>\n    </Dialog>\n    <Dialog\n      isVisible={visible5}\n      onBackdropPress={toggleDialog5}\n    >\n      <Dialog.Title title=\"Select Preference\"/>\n      {['Option 1', 'Option 2', 'Option 3'].map((l, i) => (\n        <CheckBox\n          key={i}\n          title={l}\n          containerStyle={{ backgroundColor: 'white', borderWidth: 0 }}\n          checkedIcon=\"dot-circle-o\"\n          uncheckedIcon=\"circle-o\"\n          checked={checked === i + 1}\n          onPress={() => setChecked(i + 1)}\n        />\n      ))}\n\n      <Dialog.Actions>\n        <Dialog.Button\n          title=\"CONFIRM\"\n          onPress={() => {\n            console.log(`Option ${checked} was selected!`);\n            toggleDialog5();\n          }}\n        />\n        <Dialog.Button title=\"CANCEL\" onPress={toggleDialog5} />\n      </Dialog.Actions>\n    </Dialog>\n    <Dialog\n      isVisible={visible6}\n      onBackdropPress={toggleDialog6}\n    >\n      <Dialog.Title title=\"Choose Account\"/>\n      {userlist.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={{\n            marginHorizontal: -10,\n            borderRadius: 8,\n          }}\n          onPress={toggleDialog6}\n        >\n          <Avatar rounded source={{ uri: l.avatar_url }} />\n          <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '700' }}>\n              {l.name}\n            </ListItem.Title>\n            <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </Dialog>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  borderRadius: 6,\n  width: 220,\n  margin: 20,\n},\nbuttonContainer: {\n  margin: 20,\n  justifyContent: 'center',\n  alignItems: 'center',\n},\n});\n\nexport default Dialogs;\n```\n\n----------------------------------------\n\nTITLE: Implementing Themed Components using ThemeProvider in JSX\nDESCRIPTION: This example illustrates how to use themed components in React Native Elements. It imports `Button` and `ThemeProvider` from `@rneui/themed`. By wrapping the `Button` within the `ThemeProvider`, components can utilize a central theme for consistent styling across the application. This snippet sets up the structure for applying custom themes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from '@rneui/themed';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Icon Types in React Native Elements\nDESCRIPTION: Example showing different ways to implement icons using the Icon component from React Native Elements. Demonstrates basic icons, colored icons, reverse icons, raised icons, and icons with click handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Icon } from '@rneui/themed';\n\nexport default () => {\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Icon\n        name='rowing' />\n\n      <Icon\n        name='g-translate'\n        color='#00aced' />\n\n      <Icon\n        name='sc-telegram'\n        type='evilicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        reverse\n        name='ios-american-football'\n        type='ionicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        raised\n        name='heartbeat'\n        type='font-awesome'\n        color='#f50'\n        onPress={() => console.log('hello')} />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RNE Button Component Usage in React Native\nDESCRIPTION: This React Native functional component, written in TypeScript/JSX, demonstrates various implementations of the `Button` component from the `react-native-elements` library. It showcases basic buttons, rounded buttons with icons, buttons with linear gradients, light/outline/clear/raised button types, disabled states, and loading indicators. The component uses `useState` to manage state for button groups (though the implementation details are partially shown in the snippet). It requires `react`, `react-native`, and `react-native-elements` as dependencies. The code renders a scrollable view containing categorized sections of different button styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Button/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE Button\nimport React, { useState } from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Button, ButtonGroup, withTheme, Text } from 'react-native-elements';\n\ntype ButtonsComponentProps = {};\n\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n\n  return (\n    <>\n      <ScrollView>\n        <View style={styles.contentView}>\n          <Text style={styles.subHeader}>Basic Buttons</Text>\n            <View style={styles.buttonsContainer}>\n              <Button\n                title={'React Native Elements'}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n              />\n              <Button\n                title=\"Basic Button\"\n                buttonStyle={{\n                  backgroundColor: 'rgba(78, 116, 289, 1)',\n                  borderRadius: 3,\n                }}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n              />\n              <Button\n                title=\"Dark\"\n                buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n                titleStyle={{ color: 'white', marginHorizontal: 20 }}\n              />\n\n              <Button\n                title=\"Log in\"\n                loading={false}\n                loadingProps={{ size: 'small', color: 'white' }}\n                buttonStyle={{\n                  backgroundColor: 'rgba(111, 202, 186, 1)',\n                  borderRadius: 5,\n                }}\n                titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n                containerStyle={{\n                  marginHorizontal: 50,\n                  height: 50,\n                  width: 200,\n                  marginVertical: 10,\n                }}\n                onPress={() => console.log('aye')}\n              />\n              <Button\n                title=\"Secondary\"\n                buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\n                containerStyle={{\n                  height: 40,\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n                titleStyle={{\n                  color: 'white',\n                  marginHorizontal: 20,\n                }}\n              />\n              <Button\n                title=\"Warning\"\n                containerStyle={{\n                  height: 40,\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n                buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\n                titleStyle={{\n                  color: 'white',\n                  marginHorizontal: 20,\n                }}\n              />\n              <Button\n                title=\"Danger\"\n                buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\n                containerStyle={{\n                  height: 40,\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n                titleStyle={{ color: 'white', marginHorizontal: 20 }}\n              />\n              <Button\n                title=\"Request an agent\"\n                titleStyle={{ fontWeight: '500' }}\n                buttonStyle={{\n                  backgroundColor: 'rgba(199, 43, 98, 1)',\n                  borderColor: 'transparent',\n                  borderWidth: 0,\n                }}\n                containerStyle={{\n                  width: 200,\n                  height: 45,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n              />\n            </View>\n\n            <Text style={styles.subHeader}>Rounded Buttons</Text>\n            <View style={styles.buttonsContainer}>\n              <Button\n                title=\"LOG IN\"\n                buttonStyle={{\n                  backgroundColor: 'black',\n                  borderWidth: 2,\n                  borderColor: 'white',\n                  borderRadius: 30,\n                }}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n                titleStyle={{ fontWeight: 'bold' }}\n              />\n              <Button\n                title=\"HOME\"\n                icon={{\n                  name: 'home',\n                  type: 'font-awesome',\n                  size: 15,\n                  color: 'white',\n                }}\n                iconContainerStyle={{ marginRight: 10 }}\n                titleStyle={{ fontWeight: '700' }}\n                buttonStyle={{\n                  backgroundColor: 'rgba(90, 154, 230, 1)',\n                  borderColor: 'transparent',\n                  borderWidth: 0,\n                  borderRadius: 30,\n                }}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n              />\n              <Button\n                title=\"PROFILE\"\n                icon={{\n                  name: 'user',\n                  type: 'font-awesome',\n                  size: 15,\n                  color: 'white',\n                }}\n                iconRight\n                iconContainerStyle={{ marginLeft: 10 }}\n                titleStyle={{ fontWeight: '700' }}\n                buttonStyle={{\n                  backgroundColor: 'rgba(199, 43, 98, 1)',\n                  borderColor: 'transparent',\n                  borderWidth: 0,\n                  borderRadius: 30,\n                }}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n              />\n              <Button\n                title={<CustomTitle />}\n                titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\n                linearGradientProps={{\n                  colors: ['#FF9800', '#F44336'],\n                  start: [1, 0],\n                  end: [0.2, 0],\n                }}\n                buttonStyle={{\n                  borderWidth: 0,\n                  borderColor: 'transparent',\n                  borderRadius: 20,\n                }}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n                icon={{\n                  name: 'arrow-right',\n                  type: 'font-awesome',\n                  size: 15,\n                  color: 'white',\n                }}\n                iconRight\n                iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\n              />\n            </View>\n\n            <Text style={styles.subHeader}>Light Buttons</Text>\n            <View style={styles.buttonsContainer}>\n              <Button\n                title=\"SIGN UP\"\n                disabled={true}\n                titleStyle={{ fontWeight: '700' }}\n                buttonStyle={{\n                  backgroundColor: 'rgba(92, 99,216, 1)',\n                  borderColor: 'transparent',\n                  borderWidth: 0,\n                  borderRadius: 5,\n                }}\n                containerStyle={{\n                  width: 200,\n                  height: 45,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n              />\n              <Button\n                title=\"Outline Button\"\n                buttonStyle={{\n                  borderColor: 'rgba(78, 116, 289, 1)',\n                }}\n                type=\"outline\"\n                titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n              />\n              <Button\n                title=\"Raised Button\"\n                buttonStyle={{\n                  borderColor: 'rgba(78, 116, 289, 1)',\n                }}\n                type=\"outline\"\n                raised\n                titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n              />\n              <Button\n                containerStyle={{\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n                title=\"Clear Button\"\n                type=\"clear\"\n                titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              />\n              <Button\n                title=\"Light\"\n                buttonStyle={{\n                  backgroundColor: 'rgba(244, 244, 244, 1)',\n                  borderRadius: 3,\n                }}\n                containerStyle={{\n                  height: 40,\n                  width: 200,\n                  marginHorizontal: 50,\n                  marginVertical: 10,\n                }}\n                titleStyle={{ marginHorizontal: 20, color: 'black' }}\n              />\n            </View>\n            <Text style={styles.subHeader}>Loading Buttons</Text>\n            <View style={styles.buttonsContainer}>\n              <Button\n                title=\"HOME\"\n                loading\n                titleStyle={{ fontWeight: '700' }}\n                buttonStyle={{\n                  backgroundColor: 'rgba(111, 202, 186, 1)',\n                  borderColor: 'transparent',\n```\n\n----------------------------------------\n\nTITLE: Rendering Pricing Cards with React Native Elements - TypeScript\nDESCRIPTION: This snippet constructs a functional React component (Pricing) that renders three themed PricingCard components within a ScrollView. It requires @rneui/themed for PricingCard and lightColors, and react-native for ScrollView. Each PricingCard is configured with title, price, info, and button props to visually differentiate pricing tiers. The component expects no additional props and outputs a scrollable view displaying the cards. Suitable for showcasing SaaS or app pricing tiers inside a React Native project using TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\\nimport { ScrollView } from 'react-native';\\nimport { PricingCard, lightColors } from '@rneui/themed';\\n\\ntype PricingCardComponentProps = {};\\n\\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\\nreturn (\\n  <>\\n    <ScrollView>\\n      <PricingCard\\n        color={lightColors.primary}\\n        title=\"Free\"\\n        price=\"$0\"\\n        info={['1 User', 'Basic Support', 'All Core Features']}\\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\\n      />\\n      <PricingCard\\n        color={lightColors.secondary}\\n        title=\"Starter\"\\n        price=\"$19\"\\n        info={['10 Users', 'Basic Support', 'All Core Features']}\\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\\n      />\\n      <PricingCard\\n        color={lightColors.secondary2}\\n        title=\"Enterprise\"\\n        price=\"$49\"\\n        info={['100 Users', 'One on One Support', 'All Core Features']}\\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\\n      />\\n    </ScrollView>\\n  </>\\n);\\n};\\n\\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Example Functional Test Scenario\nDESCRIPTION: A markdown example describing a functional test case for a button group component, demonstrating how component behavior should be tested.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient Background to Header in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates integrating `react-native-linear-gradient` with the Header component. It requires importing `LinearGradient` and passing it to the `ViewComponent` prop. Gradient properties (colors, start/end points) are configured via the `linearGradientProps` prop. Note: `react-native-linear-gradient` must be installed and linked for non-Expo projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/header.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Theme Properties in a Component\nDESCRIPTION: Illustrates accessing a custom property (`myCustomProperty`) added to the theme object within a React component. It uses the `useTheme` hook from `@rneui/themed` to retrieve the theme and displays the custom property's value within a `Text` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text>{theme.myCustomProperty}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Typing a Themed Custom Component using withTheme HOC - TypeScript\nDESCRIPTION: This code demonstrates creating a custom component that is theme-aware using the withTheme higher-order component (HOC) from '@rneui/themed'. It defines prop types, uses the withTheme HOC to access theme props, and augments types for theming integration. Dependencies: withTheme, TypeScript typings, ComponentTheme interface augmentation. Inputs: custom props; Outputs: a theme-aware component with injected theme functions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { withTheme } from '@rneui/themed';\n\ntype MyCustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nexport const MyCustomComponent = withTheme<MyCustomComponentProps>((props) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n});\n\ndeclare module '@rneui/themed' {\n  export interface ComponentTheme {\n    MyCustomComponent: Partial<MyCustomComponentProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Button Sizes in React Native Elements\nDESCRIPTION: Demonstrates different button sizes (small, medium, large) using the size prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button size=\"sm\">Small</Button>\n  <Button size=\"md\">Medium</Button>\n  <Button size=\"lg\">Large</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Calling Input Component Methods via React Ref (JavaScript)\nDESCRIPTION: This snippet lists the imperative Input methods accessible via the input ref: focus, blur, clear, isFocused, setNativeProps, and shake. Each method provides control over the Input element, such as focusing, clearing text, checking focus state, setting native props, or triggering a shake animation for feedback. Requires the Input ref to be initialized as shown previously. All methods are synchronous except setNativeProps, which applies directly to the native component instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to Override Component Styles with ThemeProvider - TypeScript\nDESCRIPTION: Demonstrates how to define a theme that customizes the Button title style using the createTheme function and ThemeProvider from '@rneui/themed'. The theme object sets a red color for Button titles, which overrides the internal Button style. The App component wraps its children with ThemeProvider, applying the theme globally. Inputs involve the theme definition; output is Button styling affected by the theme. Dependencies include '@rneui/themed'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/0.index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing AirbnbRating Component in React Native Elements\nDESCRIPTION: Code snippet showing how to import the AirbnbRating component from the @rneui/themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AirbnbRating } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating Swipeable ListItems in React Native Elements (tsx)\nDESCRIPTION: Illustrates how to use `ListItem.Swipeable` to add swipe actions (left and right) to a list item. It defines `leftContent` (archive action) and `rightContent` (delete action) using `Button` components with icons, triggered by swipe gestures via the `action` callback provided to the content render props. Requires props for `ListItem.Swipeable`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem.Swipeable\n  leftWidth={80}\n  rightWidth={90}\n  minSlideWidth={40}\n  leftContent={(action) => (\n    <Button\n      containerStyle={{\n        flex: 1,\n        justifyContent: \"center\",\n        backgroundColor: \"#f4f4f4\",\n      }}\n      type=\"clear\"\n      icon={{\n        name: \"archive-outline\",\n        type: \"material-community\",\n      }}\n      onPress={action}\n    />\n  )}\n  rightContent={(action) => (\n    <Button\n      containerStyle={{\n        flex: 1,\n        justifyContent: \"center\",\n        backgroundColor: \"#f4f4f4\",\n      }}\n      type=\"clear\"\n      icon={{ name: \"delete-outline\" }}\n      onPress={action}\n    />\n  )}\n>\n  <Icon name=\"label-important-outline\" type=\"material\" />\n  <ListItem.Content>\n    <ListItem.Title>Email from John Doe</ListItem.Title>\n    <ListItem.Subtitle>Hey, I'm John Doe</ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Using SocialIcon Component in React Native\nDESCRIPTION: Demonstrates how to import and use the SocialIcon component from 'react-native-elements'. It showcases various configurations for displaying social media icons, including different types (twitter, gitlab, medium), styles (default, raised=false, light), and usage as buttons with titles (facebook, twitter, medium, instagram).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/social_icons.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { SocialIcon } from 'react-native-elements'\n\n// Icon\n<SocialIcon\n  type='twitter'\n/>\n\n<SocialIcon\n  raised={false}\n  type='gitlab'\n/>\n\n<SocialIcon\n  light\n  type='medium'\n/>\n\n<SocialIcon\n  light\n  raised={false}\n  type='medium'\n/>\n\n\n// Button\n<SocialIcon\n  title='Sign In With Facebook'\n  button\n  type='facebook'\n/>\n\n<SocialIcon\n  title='Some Twitter Message'\n  button\n  type='twitter'\n/>\n\n<SocialIcon\n  button\n  type='medium'\n/>\n\n<SocialIcon\n  button\n  light\n  type='instagram'\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Input Component with Placeholders, Icons, and Error Messages - React Native Elements - JavaScript\nDESCRIPTION: This code demonstrates various usage patterns for the Input component from React Native Elements, including basic use with a placeholder, inclusion of a left icon via props or custom component, and displaying an error message. It requires 'react-native-elements' and 'react-native-vector-icons/FontAwesome' as dependencies. The Input component accepts props such as placeholder, leftIcon, errorStyle, and errorMessage to customize its appearance and behavior. Inputs and outputs are provided via props; outputs are rendered UI elements and possible error messages. Ensure 'react-native-vector-icons' is linked/installed for custom icons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/input.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Icon from 'react-native-vector-icons/FontAwesome';\\nimport { Input } from 'react-native-elements';\\n\\n<Input\\n  placeholder='BASIC INPUT'\\n/>\\n\\n<Input\\n  placeholder='INPUT WITH ICON'\\n  leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\\n/>\\n\\n<Input\\n  placeholder='INPUT WITH CUSTOM ICON'\\n  leftIcon={\\n    <Icon\\n      name='user'\\n      size={24}\\n      color='black'\\n    />\\n  }\\n/>\\n\\n<Input\\n  placeholder='INPUT WITH ERROR MESSAGE'\\n  errorStyle={{ color: 'red' }}\\n  errorMessage='ENTER A VALID ERROR HERE'\\n/>\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient ListItem with TouchableScale\nDESCRIPTION: Implementation of a ListItem component with linear gradient background and scale animation on touch. Uses TouchableScale for interaction feedback and LinearGradient for background styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed';\nimport TouchableScale from 'react-native-touchable-scale';\nimport LinearGradient from 'react-native-linear-gradient';\n\n<ListItem\n  Component={TouchableScale}\n  friction={90}\n  tension={100}\n  activeScale={0.95}\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient}\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay Component with Button and Icon in React Native Elements\nDESCRIPTION: This comprehensive example shows how to create an Overlay component with a toggle button, custom styles, and an icon. It demonstrates state management, event handling, and styling in a React Native application using React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\nconst [visible, setVisible] = useState(false);\n\nconst toggleOverlay = () => {\n  setVisible(!visible);\n};\n\nreturn (\n  <View>\n    <Button\n      title=\"Open Overlay\"\n      onPress={toggleOverlay}\n      buttonStyle={styles.button}\n    />\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n      <Text style={styles.textPrimary}>Hello!</Text>\n      <Text style={styles.textSecondary}>\n        Welcome to React Native Elements\n      </Text>\n      <Button\n        icon={\n          <Icon\n            name=\"wrench\"\n            type=\"font-awesome\"\n            color=\"white\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        title=\"Start Building\"\n        onPress={toggleOverlay}\n      />\n    </Overlay>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\ntextPrimary: {\n  marginVertical: 20,\n  textAlign: 'center',\n  fontSize: 20,\n},\ntextSecondary: {\n  marginBottom: 10,\n  textAlign: 'center',\n  fontSize: 17,\n},\n});\n\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Tooltip Component - js\nDESCRIPTION: Provides a React function component example ('ControlledTooltip') that manages the open state of Tooltip and passes control handlers. Depends on '@rneui/themed', TooltipProps, and React. Input is parent props; output is a controlled Tooltip. This pattern is required for stateless Tooltip usage post-migration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst ControlledTooltip: React.FC<TooltipProps> = (props) => {\\n  const [open, setOpen] = React.useState(false);\\n  return (\\n    <Tooltip\\n      visible={open}\\n      onOpen={() => {\\n        setOpen(true);\\n      }}\\n      onClose={() => {\\n        setOpen(false);\\n      }}\\n      {...props}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: React Native Component Showcasing @rneui/themed Buttons (TypeScript)\nDESCRIPTION: This TypeScript code defines a React functional component named `Buttons`. It renders a `ScrollView` containing categorized examples of the `Button` component from `@rneui/themed`. The examples cover Basic, Rounded, Light, and Loading button styles, showcasing customization options like background color, border radius, icons (left/right), loading states, disabled states, button types (outline, clear), and linear gradients. It imports necessary components from `react`, `react-native`, and `@rneui/themed`, and uses `useState` to manage state variables (`selectedIndex`, `selectedIndexes`) potentially intended for `ButtonGroup` components (which are imported but not rendered in this specific JSX). A reference to an undefined `CustomTitle` component is also present.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Button\nimport React, { useState } from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Button, ButtonGroup, withTheme, Text } from '@rneui/themed';\n\ntype ButtonsComponentProps = {};\n\nconst Buttons: React.FunctionComponent<ButtonsComponentProps> = () => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\n\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <Text style={styles.subHeader}>Basic Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title={'React Native Elements'}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Basic Button\"\n              buttonStyle={{\n                backgroundColor: 'rgba(78, 116, 289, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Dark\"\n              buttonStyle={{ backgroundColor: 'rgba(39, 39, 39, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n\n            <Button\n              title=\"Log in\"\n              loading={false}\n              loadingProps={{ size: 'small', color: 'white' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderRadius: 5,\n              }}\n              titleStyle={{ fontWeight: 'bold', fontSize: 23 }}\n              containerStyle={{\n                marginHorizontal: 50,\n                height: 50,\n                width: 200,\n                marginVertical: 10,\n              }}\n              onPress={() => console.log('aye')}\n            />\n            <Button\n              title=\"Secondary\"\n              buttonStyle={{ backgroundColor: 'rgba(127, 220, 103, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Warning\"\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              buttonStyle={{ backgroundColor: 'rgba(255, 193, 7, 1)' }}\n              titleStyle={{\n                color: 'white',\n                marginHorizontal: 20,\n              }}\n            />\n            <Button\n              title=\"Danger\"\n              buttonStyle={{ backgroundColor: 'rgba(214, 61, 57, 1)' }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ color: 'white', marginHorizontal: 20 }}\n            />\n            <Button\n              title=\"Request an agent\"\n              titleStyle={{ fontWeight: '500' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Rounded Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"LOG IN\"\n              buttonStyle={{\n                backgroundColor: 'black',\n                borderWidth: 2,\n                borderColor: 'white',\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ fontWeight: 'bold' }}\n            />\n            <Button\n              title=\"HOME\"\n              icon={{\n                name: 'home',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconContainerStyle={{ marginRight: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(90, 154, 230, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"PROFILE\"\n              icon={{\n                name: 'user',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10 }}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(199, 43, 98, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 30,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title={<CustomTitle />}\n              titleStyle={{ fontWeight: 'bold', fontSize: 18 }}\n              linearGradientProps={{\n                colors: ['#FF9800', '#F44336'],\n                start: [1, 0],\n                end: [0.2, 0],\n              }}\n              buttonStyle={{\n                borderWidth: 0,\n                borderColor: 'transparent',\n                borderRadius: 20,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              icon={{\n                name: 'arrow-right',\n                type: 'font-awesome',\n                size: 15,\n                color: 'white',\n              }}\n              iconRight\n              iconContainerStyle={{ marginLeft: 10, marginRight: -10 }}\n            />\n          </View>\n\n          <Text style={styles.subHeader}>Light Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"SIGN UP\"\n              disabled={true}\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 45,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Outline Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"Raised Button\"\n              buttonStyle={{\n                borderColor: 'rgba(78, 116, 289, 1)',\n              }}\n              type=\"outline\"\n              raised\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              title=\"Clear Button\"\n              type=\"clear\"\n              titleStyle={{ color: 'rgba(78, 116, 289, 1)' }}\n            />\n            <Button\n              title=\"Light\"\n              buttonStyle={{\n                backgroundColor: 'rgba(244, 244, 244, 1)',\n                borderRadius: 3,\n              }}\n              containerStyle={{\n                height: 40,\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n              titleStyle={{ marginHorizontal: 20, color: 'black' }}\n            />\n          </View>\n          <Text style={styles.subHeader}>Loading Buttons</Text>\n          <View style={styles.buttonsContainer}>\n            <Button\n              title=\"HOME\"\n              loading\n              titleStyle={{ fontWeight: '700' }}\n              buttonStyle={{\n                backgroundColor: 'rgba(111, 202, 186, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 5,\n              }}\n              containerStyle={{\n                width: 200,\n                height: 40,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n            <Button\n              title=\"SIGN UP\"\n              loading={true}\n              loadingProps={{\n                size: 'small',\n                color: 'rgba(111, 202, 186, 1)',\n              }}\n              titleStyle={{ fontWeight: '700' }}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Default Card with Text and Button in React Native Elements\nDESCRIPTION: Shows a basic implementation of the `Card` component containing `Text` components for displaying information (word of the day, definition) and a `Button` component for user interaction ('Learn More'). This example demonstrates a typical layout for a simple information card.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Card>\n  <Text>Word of the Day</Text>\n  <Text h4>be-nev-o=lent</Text>\n  <Text>adjective</Text>\n  <Text>\n    well meaning and kindly.\n    <br />\n    {'\"a benevolent smile\"'}\n  </Text>\n  <Button size=\"sm\" type=\"clear\">\n    Learn More\n  </Button>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Correcting Misspelled Component Imports in JSX\nDESCRIPTION: Demonstrates the common error of misspelling a component name during import ('Listitem' instead of 'ListItem') and provides the correct syntax. This addresses the 'Invariant Violation: Element type is invalid' error.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\nimport { Listitem } from '@rneui/themed';\n\n// Correct\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItem with Custom Subtitle View in React Native Elements in JavaScript\nDESCRIPTION: This code demonstrates how to render a ListItem with a custom subtitle using a View that includes both an image and text, suitable for highlighting status or metadata. StyleSheet is used for consistent layout and appearance. Dependencies include '@rneui/themed', React Native's StyleSheet, Image, and Text. Inputs are hard-coded content and imported images. This approach is ideal for custom UI branding and makes subtitles more visually expressive.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckBoxes with React Native Elements in JavaScript\nDESCRIPTION: This snippet showcases various implementations of the CheckBox component from `react-native-elements`. It covers basic usage with a title, centering the checkbox, using different built-in icons (`dot-circle-o`, `circle-o`, `clear`, `add`), specifying icon type (`material`), positioning the icon to the right, setting a custom checked color, and using custom image components for checked/unchecked states. It relies on component state (`this.state.checked`) to manage the checked status and uses the `onPress` handler to toggle the state. Requires `react-native-elements`, React, and potentially local image assets.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { CheckBox } from 'react-native-elements'\n\n<CheckBox\n  title='Click Here'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here'\n  checkedIcon='dot-circle-o'\n  uncheckedIcon='circle-o'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here to Remove This Item'\n  iconRight\n  iconType='material'\n  checkedIcon='clear'\n  uncheckedIcon='add'\n  checkedColor='red'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  checkedIcon={<Image source={require('../checked.png')} />}\n  uncheckedIcon={<Image source={require('../unchecked.png')} />}\n  checked={this.state.checked}\n  onPress={() => this.setState({checked: !this.state.checked})}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Components in React Native (JavaScript)\nDESCRIPTION: Demonstrates how to import and use both `AirbnbRating` and `Rating` components from `react-native-elements`. Examples include default usage, setting custom review texts, counts, sizes, using different built-in types ('heart'), providing custom images and colors ('custom' type with `ratingImage`, `ratingColor`, `ratingBackgroundColor`), and defining a callback function (`ratingCompleted`) executed via `onFinishRating` when the user completes the rating.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/rating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rating, AirbnbRating } from 'react-native-elements';\n\nratingCompleted(rating) {\n  console.log(\"Rating is: \" + rating)\n}\n\n<AirbnbRating />\n\n<AirbnbRating\n  count={11}\n  reviews={[\"Terrible\", \"Bad\", \"Meh\", \"OK\", \"Good\", \"Hmm...\", \"Very Good\", \"Wow\", \"Amazing\", \"Unbelievable\", \"Jesus\"]}\n  defaultRating={11}\n  size={20}\n/>\n\n<Rating\n  showRating\n  onFinishRating={this.ratingCompleted}\n  style={{ paddingVertical: 10 }}\n/>\n\n<Rating\n  type='heart'\n  ratingCount={3}\n  imageSize={60}\n  showRating\n  onFinishRating={this.ratingCompleted}\n/>\n\nconst WATER_IMAGE = require('./water.png')\n\n<Rating\n  type='custom'\n  ratingImage={WATER_IMAGE}\n  ratingColor='#3498db'\n  ratingBackgroundColor='#c8c7c8'\n  ratingCount={10}\n  imageSize={30}\n  onFinishRating={this.ratingCompleted}\n  style={{ paddingVertical: 10 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying LinearGradient to Chip Component - React Native Elements (JSX)\nDESCRIPTION: This snippet illustrates how to apply a linear gradient background to the Chip component using the react-native-linear-gradient package with React Native Elements. It requires the LinearGradient component and uses the 'ViewComponent' and 'linearGradientProps' props. Key configurable parameters include the gradient colors and direction vectors for 'start' and 'end'. The output is a Chip rendered with a red to pink left-to-right background gradient. For react-native-cli projects, ensure react-native-linear-gradient is installed; Expo users can use it out of the box.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/chip.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Chip } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing SpeedDial Actions - React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates the integration of the SpeedDial component from @rneui/themed in a React Native project using JavaScript. It features a floating action button with two actions: Add and Delete, each triggering a console log on press. Prerequisites include installing the @rneui/themed package. The component manages its open state using React hooks, and the SpeedDial icon toggles between 'edit' and 'close'. Inputs are user interactions; outputs are logged messages. This implementation is suitable for mobile UIs that require contextual floating action menus.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { SpeedDial } from '@rneui/themed';\\n\\nexport default () => {\\nconst [open, setOpen] = React.useState(false);\\nreturn (\\n  <SpeedDial\\n    isOpen={open}\\n    icon={{ name: 'edit', color: '#fff' }}\\n    openIcon={{ name: 'close', color: '#fff' }}\\n    onOpen={() => setOpen(!open)}\\n    onClose={() => setOpen(!open)}\\n  >\\n    <SpeedDial.Action\\n      icon={{ name: 'add', color: '#fff' }}\\n      title=\"Add\"\\n      onPress={() => console.log('Add Something')}\\n    />\\n    <SpeedDial.Action\\n      icon={{ name: 'delete', color: '#fff' }}\\n      title=\"Delete\"\\n      onPress={() => console.log('Delete Something')}\\n    />\\n  </SpeedDial>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Themed Component within ThemeProvider (@rneui/themed)\nDESCRIPTION: Demonstrates rendering a custom component (`CustomComponent`), previously wrapped with `withTheme` and assigned a `ComponentKey`, inside a `ThemeProvider`. The `ThemeProvider` is configured with `myTheme`, which includes default styles for `ComponentKey`. The `CustomComponent` will receive theme properties via props and apply the default `titleStyle` defined in the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <CustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the withBadge HOC and Badge Component in React Native\nDESCRIPTION: This React Native code defines a functional component `BadgeComponent` that demonstrates various uses of the `Badge` component and the `withBadge` HOC from `@rneui/themed`. It creates a `BadgedIcon` by wrapping the `Icon` component with `withBadge(15)`. The component renders standard badges with different values and statuses, mini badges (without values) for status indication, and badges used as indicators positioned absolutely on `Avatar` components. Dependencies include `react`, `react-native`, and `@rneui/themed`. The component uses `ScrollView` for layout and `StyleSheet` for basic styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\n\nconst BadgedIcon = withBadge(15)(Icon);\n\nconst BadgeComponent = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Standard Badge</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <Badge value=\"3\" status=\"success\" />\n        <Badge value=\"99+\" status=\"error\" />\n        <Badge value=\"500\" status=\"primary\" />\n        <Badge value=\"10\" status=\"warning\" />\n      </View>\n      <Text style={styles.subHeader}>Mini Badge</Text>\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 20,\n        }}\n      >\n        <Badge status=\"success\" />\n        <Badge status=\"error\" />\n        <Badge status=\"primary\" />\n        <Badge status=\"warning\" />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 20,\n        }}\n      >\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\n      </View>\n\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 20,\n          marginBottom: 40,\n        }}\n      >\n        <View>\n          <Avatar\n            rounded\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\n            size=\"medium\"\n          />\n          <Badge\n            status=\"success\"\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\n          />\n        </View>\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n        <View>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\n            }}\n            size=\"large\"\n          />\n          <Badge\n            status=\"primary\"\n            value={10}\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tile Component Examples with React Native Elements in TypeScript\nDESCRIPTION: This TypeScript code defines a React Native functional component `Tiles`. It imports `React`, necessary components from `react-native` (View, ScrollView, StyleSheet, Text), and the `Tile` component from `react-native-elements`. The component renders a `ScrollView` containing multiple `Tile` instances to demonstrate various configurations like featured tiles, tiles with icons, custom titles, captions, and custom child content. Basic styling for subheaders is defined using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Tile/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Tile\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from 'react-native-elements';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\n  return (\n    <>\n      <View style={{ alignItems: 'center' }}>\n        <ScrollView style={{ paddingVertical: 10 }}>\n        <Text style={styles.subHeader}>Featured Tile</Text>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n            }}\n            title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n            titleStyle={{ fontSize: 15 }}\n            featured\n            caption=\"Mahatma Gandhi\"\n            activeOpacity={1}\n            width={310}\n          />\n          <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n          <View style={{ paddingTop: 20 }}>\n            <Tile\n              imageSrc={{\n                uri:\n                  'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n              }}\n              icon={{\n                name: 'heart',\n                type: 'font-awesome',\n                size: 60,\n                color: 'red',\n              }}\n              featured\n              activeOpacity={0.8}\n              onPress={() => {\n                'Tile pressed';\n              }}\n              width={310}\n            />\n          </View>\n          <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n            <Tile\n              imageSrc={{\n                uri:\n                  'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n              }}\n              title=\"Half Dome, Yosemite\"\n              titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n              activeOpacity={1}\n              width={310}\n              contentContainerStyle={{ height: 70 }}\n              style={{ paddingBottom: 20 }}\n            >\n              <View\n                style={{\n                  flex: 1,\n                  flexDirection: 'row',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <Text style={{ color: 'green' }}>Visit</Text>\n                <Text style={{ color: '#397af8' }}>Find out More</Text>\n              </View>\n            </Tile>\n          </View>\n        </ScrollView>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  }\n});\n\nexport default Tiles;\n```\n```\n\n----------------------------------------\n\nTITLE: Mapping List Data to ListItem with Icon and Link â€“ React Native Elements â€“ JavaScript\nDESCRIPTION: This snippet creates a list of ListItem components with leading icons and chevrons by mapping over an array, ideal for navigation menus or quick-entry lists. It relies on react-native-elements and React Native, and expects the input list to include a title and icon for each item. The output is a View containing ListItems with left-side icons, titles, dividers, and chevrons for navigation cues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/listitem.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem } from 'react-native-elements'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem\n        key={i}\n        title={item.title}\n        leftIcon={{ name: item.icon }}\n        bottomDivider\n        chevron\n      />\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Linear Gradient and TouchableScale in React Native Elements\nDESCRIPTION: This snippet demonstrates how to create a ListItem component with linear gradient background and scale feedback animation. It requires both react-native-touchable-scale for the animation effect and react-native-linear-gradient for the background gradient.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n\n----------------------------------------\n\nTITLE: Displaying Button Variants (Solid, Outline, Clear) using TypeScript\nDESCRIPTION: Demonstrates creating different visual styles of the Button component using the `type` prop. It shows a solid button (default), an outline button (`type=\"outline\"`), and a clear button (`type=\"clear\"`). The `Stack` component is used for horizontal layout with spacing.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button title=\"Solid\" />\n  <Button title=\"Outline\" type=\"outline\" />\n  <Button title=\"Clear\" type=\"clear\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB Component in React Native with React Native Elements\nDESCRIPTION: This snippet demonstrates how to use the FAB component from React Native Elements in a React Native application. It showcases various FAB configurations including different sizes, colors, icons, and states like loading and disabled. The component also includes visibility toggling functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { FAB } from '@rneui/themed';\n\nexport default () => {\nconst [visible, setVisible] = React.useState(true);\n\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Small Size\n      </Text>\n      <FAB\n        loading\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        size=\"small\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Large Size\n      </Text>\n      <FAB\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        color=\"green\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Primary Color\n      </Text>\n      <FAB\n        visible={visible}\n        title=\"Navigate\"\n        upperCase\n        icon={{ name: 'place', color: 'white' }}\n      />\n\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\n\n      <FAB\n        visible={visible}\n        disabled\n        title=\"Extended\"\n        icon={{\n          name: 'place',\n          color: 'white',\n        }}\n      />\n      <FAB\n        visible={visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"right\"\n        title=\"Hide\"\n        icon={{ name: 'delete', color: 'white' }}\n        color=\"red\"\n      />\n      <FAB\n        visible={!visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"left\"\n        title=\"Show\"\n        icon={{ name: 'edit', color: 'white' }}\n        color=\"green\"\n      />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Merging Object Styles with React Native Elements Theme (JSX)\nDESCRIPTION: Demonstrates a working scenario where both the theme definition for `Button.containerStyle` and the local override in the `Button` component use an object for styling. The `ThemeProvider` successfully merges these styles because their types match.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing the FAB Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `FAB` component from the `@rneui/themed` package in a TypeScript React Native project. This import is necessary to use the Floating Action Button component in your application screens.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FAB } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Implementation for Dialogs in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import a compatible Modal implementation for use with React Native Elements' Dialog on web environments. It ensures that the Dialog component functions properly on react-native-web by passing a custom ModalComponent, as the default Modal is not implemented on the web. The required dependency is 'modal-react-native-web', and the Dialog is configured to use it via the ModalComponent prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n<Dialog ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Swipeable List Item with React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement a swipeable ListItem using React Native Elements in JavaScript. It integrates customizable left (Info) and right (Delete) swipe actions, each resetting the swipe state when pressed. Dependencies include the React Native Elements library, and components such as ListItem, Button, and Icon. The ListItem displays a title and supports swipe gestures, with each swipe action executing a callback function and styled for clarity; main parameters involve leftContent, rightContent, and the action callbacks. The expected input is user swipe gestures, and the output is an interactive list item responding accordingly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\\n<ListItem.Swipeable\\n  leftContent={(reset) => (\\n    <Button\\n      title=\\\"Info\\\"\\n      onPress={() => reset()}\\n      icon={{ name: 'info', color: 'white' }}\\n      buttonStyle={{ minHeight: '100%' }}\\n    />\\n  )}\\n  rightContent={(reset) => (\\n    <Button\\n      title=\\\"Delete\\\"\\n      onPress={() => reset()}\\n      icon={{ name: 'delete', color: 'white' }}\\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\\n    />\\n  )}\\n>\\n  <Icon name=\\\"My Icon\\\" />\\n  <ListItem.Content>\\n    <ListItem.Title>Hello Swiper</ListItem.Title>\\n  </ListItem.Content>\\n  <ListItem.Chevron />\\n</ListItem.Swipeable>\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Chip Components in React Native Elements\nDESCRIPTION: This snippet demonstrates the usage of the Chip component from React Native Elements with various configurations. It includes examples of solid, outlined, disabled, and icon-based chips, as well as handling chip presses.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Chip/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, colors } from 'react-native-elements';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\n  return (\n    <>\n      <ScrollView>\n        <View style={styles.contentView}>\n          <View style={{ alignItems: 'center' }}>\n            <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n            <Chip\n              title=\"Disabled Chip\"\n              disabled\n              containerStyle={{ marginVertical: 15 }}\n            />\n            <Chip\n              title=\"Outlined Chip\"\n              type=\"outline\"\n              containerStyle={{ marginVertical: 15 }}\n            />\n            <Chip\n              title=\"Outlined & Disabled\"\n              type=\"outline\"\n              disabled\n              containerStyle={{ marginVertical: 15 }}\n            />\n            <Chip\n              title=\"Left Icon Chip\"\n              icon={{\n                name: 'bluetooth',\n                type: 'font-awesome',\n                size: 20,\n                color: 'white',\n              }}\n              containerStyle={{ marginVertical: 15 }}\n            />\n            <Chip\n              title=\"Right Icon Chip\"\n              icon={{\n                name: 'close',\n                type: 'font-awesome',\n                size: 20,\n                color: 'white',\n              }}\n              iconRight\n              containerStyle={{ marginVertical: 15 }}\n            />\n            <Chip\n              title=\"Pressable Icon Chip\"\n              icon={{\n                name: 'bluetooth',\n                type: 'font-awesome',\n                size: 20,\n                color: colors.primary2,\n              }}\n              onPress={() => console.log('Icon chip was pressed!')}\n              type=\"outline\"\n              containerStyle={{ marginVertical: 15 }}\n            />\n            <Chip\n              title=\"Pressable Icon Chip\"\n              icon={{\n                name: 'close',\n                type: 'font-awesome',\n                size: 20,\n                color: colors.primary2,\n              }}\n              onPress={() => console.log('Icon chip was pressed!')}\n              iconRight\n              type=\"outline\"\n              containerStyle={{ marginVertical: 15 }}\n            />\n          </View>\n        </View>\n      </ScrollView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  contentView: {\n    flex: 1,\n    marginTop: 20,\n  },\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Creating Image Gallery with React Native Elements and Unsplash API\nDESCRIPTION: This snippet defines a React component that renders a grid of random images from Unsplash using React Native Elements' Image component. It utilizes FlatList for efficient rendering and includes a loading indicator while images are being fetched.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Image/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Image } from 'react-native-elements';\n\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\n\nconst ImageAPI = () => {\n  return (\n    <>\n      <SafeAreaView>\n        <FlatList\n          data={[...new Array(10)].map((_, i) => i.toString())}\n          style={styles.list}\n          numColumns={2}\n          keyExtractor={(e) => e}\n          renderItem={({ item }) => (\n            <Image\n              source={{ uri: BASE_URI + item }}\n              containerStyle={styles.item}\n              PlaceholderContent={<ActivityIndicator />}\n            />\n          )}\n        />\n      </SafeAreaView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  list: {\n    width: '100%',\n    backgroundColor: '#000',\n  },\n  item: {\n    aspectRatio: 1,\n    width: '100%',\n    flex: 1,\n  },\n});\n\nexport default ImageAPI;\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay Component for Web Platform in React Native\nDESCRIPTION: This snippet demonstrates how to use a custom Modal component for web compatibility with the Overlay component from React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Overlay ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Theme with Custom Colors using createTheme\nDESCRIPTION: Demonstrates how to use the `createTheme` function from `@rneui/themed` to instantiate a theme. It shows where to place the custom color values (represented by `yourCustomColorShape`) within the `lightColors` and `darkColors` objects, corresponding to the extended `Colors` interface defined previously. The `mode` property determines whether light or dark colors are active.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = createTheme({\n  lightColors: {\n    ...yourCustomColorShape\n  },\n  darkColors: {\n    ...yourCustomColorShape\n  },\n  mode: // your light or dark mode value\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering a List with Map, Icon, and Chevron using @rneui/themed in JavaScript\nDESCRIPTION: Shows how to generate a list using the JavaScript `map` function. Each `ListItem` from `@rneui/themed` displays a title, an `Icon` based on the `item.icon` property, and a `ListItem.Chevron` for navigation indication. Depends on `@rneui/themed` library. Takes an array of objects (`list`) with `title` and `icon` properties as input and renders a list within a `<View>`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Icon } from '@rneui/themed'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting StyleSheet for Lists2 Component in React Native\nDESCRIPTION: This JavaScript code snippet concludes the definition of a style rule within a React Native StyleSheet, setting the color property to 'grey'. It then closes the StyleSheet.create call and exports the Lists2 component as the default module export. This pattern is standard for creating and exporting styled components in React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  color: 'grey',\n},\n});\n\nexport default Lists2;\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Default RNE Theme Object Structure in TSX\nDESCRIPTION: Presents the default structure of the React Native Elements theme object as a TypeScript interface. It includes nested `colors` with standard and platform-specific (iOS, Android, Web) color definitions, serving as a reference for theme customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing and Invoking Methods on Input Components - React Native Elements - JavaScript\nDESCRIPTION: This snippet shows how to create and use a ref with the Input component in React using React.createRef(), which enables imperative access to component methods like focus(), blur(), clear(), isFocused(), setNativeProps(), and shake(). It depends on 'react' and 'react-native-elements'. The Input component must have a ref passed for these methods to be called. Methods allow for direct manipulation and state queries; inputs are method calls, and outputs are UI side-effects or boolean values.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/input.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst input = React.createRef();\\n\\n<Input\\n  ref={input}\\n  ...\\n/>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ninput.current.focus();\\ninput.current.blur();\\ninput.current.clear();\\ninput.current.isFocused();\\ninput.current.setNativeProps({ value: 'hello' });\\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements - JavaScript\nDESCRIPTION: Demonstrates how to import the Card component from the '@rneui/themed' package for use in a React Native project. This is a prerequisite step before utilizing subcomponents such as Card.FeaturedSubtitle. Users must install the '@rneui/themed' dependency. The import statement is necessary for accessing cards and related UI functionality; no input or output is involved, as it is solely an import declaration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme for Extended Component in React Native Elements\nDESCRIPTION: This code demonstrates how to create a custom theme for an extended Text component in React Native Elements, adding a 'bold' property.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components in MDX (JavaScript)\nDESCRIPTION: This JavaScript code within an MDX file imports React components commonly used in Docusaurus themes. `Tabs` and `TabItem` are used to create tabbed content sections, and `useBaseUrl` is a Docusaurus utility hook to correctly resolve URLs relative to the site's base URL.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/universe/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Select ButtonGroup in React Native Elements\nDESCRIPTION: Example of a ButtonGroup that allows multiple selections using the selectMultiple prop. The component manages selectedIndexes as an array and uses custom styling for the buttons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ButtonGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction () {\n     const [selectedIndex, setSelectedIndex] = React.useState([]);\n     return (\n       <ButtonGroup\n         selectMultiple\n         buttonStyle={{ padding: 10 }}\n         selectedButtonStyle={{ backgroundColor: '#e2e2e2' }}\n         buttons={[\n           <Icon name=\"format-bold\" />,\n           <Icon name=\"format-italic\" />,\n           <Icon name=\"format-underline\" />,\n         ]}\n         selectedIndexes={selectedIndex}\n         onPress={setSelectedIndex}\n       />\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Applying Mixed Object (Theme) and Array (Local) Styles with ThemeProvider\nDESCRIPTION: This example presents a scenario where the theme defines `containerStyle` as an object, while the local component prop uses an array. Despite the introductory text stating types must match, the accompanying text explicitly marks this specific combination as working (\"âœ… Works\"). This might indicate a nuance or potential inconsistency in the documentation's explanation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Configuration with Light and Dark Colors\nDESCRIPTION: Example of creating and applying a theme with custom light and dark color modes using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/2.theme object.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing PricingCard Component in React Native\nDESCRIPTION: This snippet showcases the implementation of a Pricing component using React Native Elements' PricingCard. It creates three pricing tiers (Free, Starter, and Enterprise) with different colors, prices, and features. The component is wrapped in a ScrollView for scrollable content.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, colors } from '@rneui/themed';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <PricingCard\n        color={colors.primary}\n        title=\"Free\"\n        price=\"$0\"\n        info={['1 User', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary}\n        title=\"Starter\"\n        price=\"$19\"\n        info={['10 Users', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary2}\n        title=\"Enterprise\"\n        price=\"$49\"\n        info={['100 Users', 'One on One Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n    </ScrollView>\n  </>\n);\n};\n\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only Rating in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use the Rating component in read-only mode. It sets the rating value from props and disables user interaction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Wrapping App Component with ThemeProvider in React Native\nDESCRIPTION: This snippet demonstrates how to use the ThemeProvider component to wrap the main App component. By doing this, the custom theme will be applied to all child components that use React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/TabView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <YourApp />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for Text Component Customization\nDESCRIPTION: Specifies the theme key (`Text`) used within the `ThemeProvider` configuration to apply custom styles globally to all `Text` components in the application. This allows for consistent styling across the app when using the theming capabilities of `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nText\n```\n\n----------------------------------------\n\nTITLE: Creating React Native Elements ListItem with Gradient and Scale Feedback (JavaScript)\nDESCRIPTION: This snippet shows how to customize a `@rneui/themed` ListItem to include a linear gradient background and touchable scale animation on press. It utilizes `react-native-touchable-scale` for the scaling effect by passing it to the `Component` prop, and `react-native-linear-gradient` for the background via the `ViewComponent` and `linearGradientProps` properties. Note that `react-native-linear-gradient` is typically needed if not using Expo.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ListItem, Avatar } from '@rneui/themed';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Button in React Native Elements\nDESCRIPTION: Shows how to create a button with a linear gradient background by using the ViewComponent and linearGradientProps. Requires LinearGradient component to be available.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: [\"#FF9800\", \"#F44336\"],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n>\n  Linear Gradient\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SearchBar in React Native Elements\nDESCRIPTION: Example showing how to implement a basic SearchBar component with state management for the search input value. The component includes placeholder text and handles text changes through the onChangeText prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/searchbar.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SearchBar } from 'react-native-elements';\n\nexport default class App extends React.Component {\n  state = {\n    search: '',\n  };\n\n  updateSearch = (search) => {\n    this.setState({ search });\n  };\n\n  render() {\n    const { search } = this.state;\n\n    return (\n      <SearchBar\n        placeholder=\"Type Here...\"\n        onChangeText={this.updateSearch}\n        value={search}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Featured Tile with Image and Caption - React Native Elements - JavaScript\nDESCRIPTION: Demonstrates creation of a featured Tile using the Tile component from react-native-elements. The example requires 'react-native-elements' as a dependency and expects an image asset at './img/path'. Key parameters include 'imageSrc' (the source of the displayed image), 'title' (the main text), 'featured' (enables featured styling), and 'caption' (additional descriptive text). The snippet renders a standalone Tile with required and optional props and outputs a tile UI block as part of a React Native render tree.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/tile.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  title=\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores dolore exercitationem\"\n  featured\n  caption=\"Some Caption Text\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sliders with Custom Icons in React Native Elements (TypeScript)\nDESCRIPTION: This snippet defines a React functional component that showcases horizontal and vertical sliders, utilizing the Slider and Icon components from @rneui/themed. It manages two independent slider states with useState, dynamically adjusts icon color based on the slider value for the horizontal slider, and applies themed styling for visual separation. Dependencies include react-native, @rneui/themed, and react. Key parameters include minimum and maximum slider values, step increment, slider orientation, and styling for both the track and the thumb, including custom icon rendering in the thumb. Inputs are slider interactions; outputs are visual changes and text updates reflecting the current slider values. Limitations include its dependence on React Native Elements' theming and React Native's layout system.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\\nimport { View, StyleSheet } from 'react-native';\\nimport { Slider, Text, Icon } from '@rneui/themed';\\n\\ntype SlidersComponentProps = {};\\n\\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\\nconst [value, setValue] = useState(0);\\nconst [vertValue, setVertValue] = useState(0);\\n\\nconst interpolate = (start: number, end: number) => {\\n  let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\\n  return Math.ceil((1 - k) * start + k * end) % 256;\\n};\\n\\nconst color = () => {\\n  let r = interpolate(255, 0);\\n  let g = interpolate(0, 255);\\n  let b = interpolate(0, 0);\\n  return `rgb(${r},${g},${b})`;\\n};\\n\\nreturn (\\n  <>\\n    <Text style={styles.subHeader}>Horizontal Slider</Text>\\n\\n    <View style={[styles.contentView]}>\\n      <Slider\\n        value={value}\\n        onValueChange={setValue}\\n        maximumValue={10}\\n        minimumValue={0}\\n        step={1}\\n        allowTouchTrack\\n        trackStyle={{ height: 5, backgroundColor: 'transparent' }}\\n        thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\\n        thumbProps={{\\n          children: (\\n            <Icon\\n              name=\"heartbeat\"\\n              type=\"font-awesome\"\\n              size={20}\\n              reverse\\n              containerStyle={{ bottom: 20, right: 20 }}\\n              color={color()}\\n            />\\n          ),\\n        }}\\n      />\\n      <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\\n    </View>\\n    <Text style={styles.subHeader}>Vertical Slider</Text>\\n    <View style={styles.verticalContent}>\\n      <Slider\\n        value={vertValue}\\n        onValueChange={setVertValue}\\n        maximumValue={50}\\n        minimumValue={20}\\n        step={1}\\n        orientation=\"vertical\"\\n        thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\\n        thumbProps={{\\n          children: (\\n            <Icon\\n              name=\"heartbeat\"\\n              type=\"font-awesome\"\\n              size={20}\\n              reverse\\n              containerStyle={{ bottom: 20, right: 20 }}\\n              color=\"#f50\"\\n            />\\n          ),\\n        }}\\n      />\\n    </View>\\n    <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\ncontentView: {\\n  padding: 20,\\n  width: '100%',\\n  justifyContent: 'center',\\n  alignItems: 'stretch',\\n},\\nverticalContent: {\\n  padding: 20,\\n  flex: 1,\\n  flexDirection: 'row',\\n  height: 500,\\n  justifyContent: 'center',\\n  alignItems: 'stretch',\\n},\\nsubHeader: {\\n  backgroundColor : \"#2089dc\",\\n  color : \"white\",\\n  textAlign : \"center\",\\n  paddingVertical : 5,\\n  marginBottom : 10\\n}\\n});\\n\\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Passing pressableProps to Components - diff\nDESCRIPTION: Illustrates use of the 'pressableProps' API to provide additional Pressable-specific configuration (e.g., Android ripple effect) to ButtonGroup. Shows how to add the prop to your component for fine-tuned press interaction. Parameters are component props; output is the modified component with enhanced Pressable support.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  <ButtonGroup\\n+   pressableProps={{android_ripple:{radius:2}}}\\n  />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Tab Component in React Native Elements\nDESCRIPTION: Demonstrates a simple implementation of the Tab component with two tab items. The 'value' prop is set to 0 to select the first tab, and the variant is set to 'primary'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Tab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab value={0} variant=\"primary\">\n  <Tab.Item>Tab 1</Tab.Item>\n  <Tab.Item>Tab 2</Tab.Item>\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook in React Native Elements\nDESCRIPTION: Demonstrates how to use the useTheme hook to access theme values within components. Returns theme object containing colors and other theme properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/1.themprovider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\n\nfunction Demo() {\n  const { theme } = useTheme();\n  return <View style={{ background: theme.colors.primary }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in React Native Elements\nDESCRIPTION: Demonstrates the simplest way to use a Button component with a title prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid Button\" />\n```\n\n----------------------------------------\n\nTITLE: Comprehensive React Native Elements Chip Component Demo\nDESCRIPTION: A complete example of various Chip component configurations in React Native Elements, including solid, disabled, outlined, and chips with icons. This demonstrates the versatility of the Chip component with different styling options.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, lightColors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: lightColors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: lightColors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Configuring CRA Build with customize-cra (JavaScript)\nDESCRIPTION: Creates a `config-overrides.js` file to customize the Create React App build process using `react-app-rewired` and `customize-cra`. This configuration adds the `@babel/plugin-proposal-class-properties` Babel plugin and explicitly tells Babel to transpile code within specific `node_modules` directories (`react-native-elements`, `react-native-vector-icons`, `react-native-ratings`), which is necessary because these packages ship untranspiled JSX and advanced JavaScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/web_usage.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/react-native-elements'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatars with Font-Awesome Icons and Custom Styles - React Native Elements - JavaScript\nDESCRIPTION: Illustrates advanced usage of Avatar with font-awesome icons, dynamic sizing, custom overlay styles, and interactive touch events. Shows multiple avatars configured with rounded or specific sizes, color overlays, and individual icons. Requires react-native-elements and font-awesome icon sources to be available, and proper styling support. Props include icon, overlayContainerStyle, size, containerStyle, and touch handlers; outputs custom-styled interactive avatars. Some features require additional icon set dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/avatar.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Avatar } from \"react-native-elements\";\n\n<Avatar\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n<Avatar\n  size=\"small\"\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n<Avatar\n  size=\"medium\"\n  overlayContainerStyle={{backgroundColor: 'blue'}}\n  icon={{name: 'meetup', color: 'red', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 3, marginTop: 100}}\n/>\n<Avatar\n  size=\"large\"\n  icon={{name: 'rocket', color: 'orange', type: 'font-awesome'}}\n  overlayContainerStyle={{backgroundColor: 'white'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 4, marginTop: 75}}\n/>\n<Avatar\n  size=\"xlarge\"\n  rounded\n  icon={{name: 'home', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 5, marginRight: 60}}\n/>\n<Avatar\n  size={200}\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying LinearGradient to React Native Elements Button - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to customize the Button component with a linear gradient background by specifying the ViewComponent as LinearGradient and providing linearGradientProps. react-native-elements and react-native-linear-gradient are required dependencies. The Button receives the ViewComponent prop for custom rendering and linearGradientProps for gradient properties (color array, gradient direction). Inputs are gradient configuration objects, outputs are visually customized buttons with linear backgrounds. Constraint: react-native-linear-gradient must be installed and linked or available out of the box for expo/cra.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/button.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Button\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to a Custom Component via ThemeProvider\nDESCRIPTION: Shows how to provide theme configuration for a custom component (`MyCustomComponent`) that has been wrapped with `withTheme`. A theme is created using `createTheme` specifying styles (e.g., `titleStyle`) under the `MyCustomComponent` key. The `ThemeProvider` then makes this theme available to the enclosed `MyCustomComponent` instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  MyCustomComponent: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <MyCustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component from @rneui/themed in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Skeleton component from the @rneui/themed package for use within a React Native project. It is required to have @rneui/themed installed and properly set up in your project. The import line is typically added at the top of your source file to make the Skeleton component available for rendering placeholder content.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Skeleton } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Chip Component Examples in React Native\nDESCRIPTION: This snippet demonstrates various implementations of the Chip component from React Native Elements, including solid, disabled, outlined, and icon chips. It also shows how to handle onPress events for interactive chips.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, colors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Theme Colors in App Component - TypeScript\nDESCRIPTION: This snippet illustrates how to consume the custom theme colors in a React component using the useTheme hook. The custom color, such as 'primaryLight', is accessed from the current theme and applied to a Text component's color style. It depends on 'useTheme' from '@rneui/themed' and the custom color type definitions. Required input: a theme with the specified color keys. Output: a styled Text component using theme-based colors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text style={{ color: theme.colors.primaryLight }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Various Avatars - React Native Elements - JavaScript\nDESCRIPTION: Demonstrates how to use the Avatar component from react-native-elements to display user avatars with different content. Shows variations including avatars rendered as rounded images, with title text, with an icon, and with an edit button. Requires the react-native-elements library installed and proper React Native project setup. Inputs include props such as source (for images), title, icon, rounded, and showEditButton, producing rendered avatar UI elements. Constraints: title and icon cannot be used together.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Avatar } from 'react-native-elements';\n\n// Standard Avatar\n<Avatar\n  rounded\n  source={{\n    uri:\n      'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n  }}\n/>\n\n// Avatar with Title\n<Avatar rounded title=\"MD\" />\n\n// Avatar with Icon\n<Avatar rounded icon={{ name: 'home' }} />\n\n// Standard Avatar with edit button\n<Avatar\n  source={{\n    uri:\n      'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n  }}\n  showEditButton\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable List Item with Action Buttons in React Native Elements\nDESCRIPTION: Creates a swipeable list item component with Info and Delete buttons that appear when swiping left or right. The component includes custom button styling, icons, and reset functionality to return to the default state after interaction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem.Swipeable\n  leftContent={(reset) => (\n    <Button\n      title=\"Info\"\n      onPress={() => reset()}\n      icon={{ name: 'info', color: 'white' }}\n      buttonStyle={{ minHeight: '100%' }}\n    />\n  )}\n  rightContent={(reset) => (\n    <Button\n      title=\"Delete\"\n      onPress={() => reset()}\n      icon={{ name: 'delete', color: 'white' }}\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n    />\n  )}\n>\n  <Icon name=\"My Icon\" />\n  <ListItem.Content>\n    <ListItem.Title>Hello Swiper</ListItem.Title>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with useTheme Hook in React Native Elements\nDESCRIPTION: This snippet shows how to access theme values using the useTheme hook, which is a simpler approach for functional components that support hooks.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/0.index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from '@rneui/themed';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem Components in React Native\nDESCRIPTION: This code snippet demonstrates the implementation of various ListItem components from React Native Elements. It includes swipeable list items, accordions, custom styling, and integration with other UI elements like switches, buttons, and badges. The component uses TypeScript for type definitions and React hooks for state management.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\n  Text,\n  ListItem,\n  Avatar,\n  Icon,\n  Badge,\n  ListItemProps,\n  Button,\n  Switch,\n  colors\n} from 'react-native-elements';\n\nconst log = () => console.log('this is an example method');\n\ntype List1Data = {\n  title: string;\n  icon: string;\n};\nconst list1: List1Data[] = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer',\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff',\n  },\n  {\n    title: 'Passwords',\n    icon: 'fingerprint',\n  },\n  {\n    title: 'Pitches',\n    icon: 'lightbulb-outline',\n  },\n  {\n    title: 'Updates',\n    icon: 'track-changes',\n  },\n];\n\ntype List2Data = {\n  name: string;\n  avatar_url: string;\n  subtitle: string;\n  linearGradientColors: string[];\n};\n\nconst list2: Partial<List2Data>[] = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n    subtitle: 'Vice President',\n    linearGradientColors: ['#FF9800', '#F44336'],\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n    subtitle: 'Vice Chairman',\n    linearGradientColors: ['#3F51B5', '#2196F3'],\n  },\n  {\n    name: 'Amanda Martin',\n    avatar_url:\n      'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n    subtitle: 'CEO',\n    linearGradientColors: ['#FFD600', '#FF9800'],\n  },\n  {\n    name: 'Christy Thomas',\n    avatar_url: 'https://randomuser.me/api/portraits/women/48.jpg',\n    subtitle: 'Lead Developer',\n    linearGradientColors: ['#4CAF50', '#8BC34A'],\n  },\n  {\n    name: 'Melissa Jones',\n    avatar_url:\n      'https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMDQ0NDk1OV5BMl5BanBnXkFtZTcwNDcxOTExNg@@._V1_UY256_CR2,0,172,256_AL_.jpg',\n    subtitle: 'CTO',\n    linearGradientColors: ['#F44336', '#E91E63'],\n  },\n];\n\ntype ListComponentProps = ListItemProps;\n\nconst Lists2: React.FunctionComponent<ListComponentProps> = () => {\n  const [expanded, setExpanded] = React.useState(false);\n\n  const listItemProps = {};\n  const renderRow = ({ item }: { item: List1Data }) => {\n    return (\n      <ListItem.Swipeable\n        onPress={log}\n        bottomDivider\n        leftContent={\n          <Button\n            title=\"Info\"\n            icon={{ name: 'info', color: 'white' }}\n            buttonStyle={{ minHeight: '100%' }}\n          />\n        }\n        rightContent={\n          <Button\n            title=\"Delete\"\n            icon={{ name: 'delete', color: 'white' }}\n            buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n          />\n        }\n      >\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem.Swipeable>\n    );\n  };\n  const [switch1, setSwitch1] = useState(true);\n  const [checkbox1, setCheckbox1] = useState(true);\n  const [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\n\n  return (\n    <>\n      <FlatList\n        ListHeaderComponent={\n          <>\n            <View style={{ paddingVertical: 8 }}>\n              {list2.map((l, i) => (\n                <ListItem\n                  key={i}\n                  linearGradientProps={{\n                    colors: l.linearGradientColors,\n                    start: [1, 0],\n                    end: [0.2, 0],\n                  }}\n                  containerStyle={{\n                    marginHorizontal: 16,\n                    marginVertical: 8,\n                    borderRadius: 8,\n                  }}\n                >\n                  <Avatar rounded source={{ uri: l.avatar_url }} />\n                  <ListItem.Content>\n                    <ListItem.Title\n                      style={{ color: 'white', fontWeight: 'bold' }}\n                    >\n                      {l.name}\n                    </ListItem.Title>\n                    <ListItem.Subtitle style={[{ color: 'white' }]}>\n                      {l.subtitle}\n                    </ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Chevron color=\"white\" />\n                </ListItem>\n              ))}\n            </View>\n\n            <View style={styles.list}>\n              <ListItem.Accordion\n                content={\n                  <>\n                    <Icon name=\"place\" size={30} />\n                    <ListItem.Content>\n                      <ListItem.Title>List Accordion</ListItem.Title>\n                    </ListItem.Content>\n                  </>\n                }\n                isExpanded={expanded}\n                onPress={() => {\n                  setExpanded(!expanded);\n                }}\n              >\n                {list2.map((l: Partial<List2Data>, i: React.Key) => (\n                  <ListItem key={i} onPress={log} bottomDivider>\n                    <Avatar title={l.name} source={{ uri: l.avatar_url }} />\n                    <ListItem.Content>\n                      <ListItem.Title>{l.name}</ListItem.Title>\n                      <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                    </ListItem.Content>\n                    <ListItem.Chevron />\n                  </ListItem>\n                ))}\n              </ListItem.Accordion>\n            </View>\n            <View style={styles.list}>\n              {list2.map((l, i) => (\n                <ListItem key={i} bottomDivider>\n                  <Icon name=\"user-circle-o\" type=\"font-awesome\" color=\"red\" />\n                  <ListItem.Content>\n                    <ListItem.Title style={{ color: 'red' }}>\n                      {l.name}\n                    </ListItem.Title>\n                    <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Content right>\n                    <ListItem.Title right style={{ color: 'green' }}>\n                      11:00 am\n                    </ListItem.Title>\n                    <ListItem.Subtitle right>12:00 am</ListItem.Subtitle>\n                  </ListItem.Content>\n                </ListItem>\n              ))}\n            </View>\n            <View style={styles.list}>\n              <ListItem bottomDivider>\n                <ListItem.Content>\n                  <ListItem.Title>Name</ListItem.Title>\n                </ListItem.Content>\n                <ListItem.Input placeholder=\"Type your name\" />\n                <ListItem.Chevron />\n              </ListItem>\n              <ListItem bottomDivider>\n                <ListItem.Content>\n                  <ListItem.Title>Switch that please ðŸ˜²</ListItem.Title>\n                </ListItem.Content>\n                <Switch\n                  value={switch1}\n                  onValueChange={(value) => setSwitch1(value)}\n                />\n              </ListItem>\n              <ListItem bottomDivider>\n                <ListItem.Content>\n                  <ListItem.Title>Choose ðŸ¤¯</ListItem.Title>\n                </ListItem.Content>\n                <ListItem.ButtonGroup\n                  buttons={['Flower', 'Coco']}\n                  selectedIndex={selectedButtonIndex}\n                  onPress={(index) => setSelectedButtonIndex(index)}\n                />\n              </ListItem>\n              <ListItem bottomDivider>\n                <ListItem.CheckBox\n                  checked={checkbox1}\n                  onPress={() => setCheckbox1(!checkbox1)}\n                />\n                <ListItem.Content>\n                  <ListItem.Title>Check that please ðŸ˜¢</ListItem.Title>\n                </ListItem.Content>\n              </ListItem>\n              <ListItem bottomDivider>\n                <Badge value=\"12\" />\n                <ListItem.Content>\n                  <ListItem.Title>With a Badge ! ðŸ˜»</ListItem.Title>\n                </ListItem.Content>\n              </ListItem>\n              <ListItem bottomDivider>\n                <Icon name=\"check\" size={20} />\n                <ListItem.Content>\n                  <ListItem.Title>This thing is checked ðŸ˜Ž</ListItem.Title>\n                </ListItem.Content>\n              </ListItem>\n            </View>\n            <View style={styles.list}>\n              <ListItem>\n                <Avatar source={'https://randomuser.me/api/portraits/women/57.jpg'} />\n                <ListItem.Content>\n                  <ListItem.Title>\n                    Limited supply! Its like digital gold!\n                  </ListItem.Title>\n                  <View style={styles.subtitleView}>\n                    <Image\n                      source={\"https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg\"}\n                      style={styles.ratingImage}\n                    />\n                    <Text style={styles.ratingText}>5 months ago</Text>\n                  </View>\n                </ListItem.Content>\n              </ListItem>\n            </View>\n          </>\n        }\n        data={list1}\n        keyExtractor={(a: List1Data, index: number) => index.toString()}\n        renderItem={renderRow}\n      />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  list: {\n    marginTop: 20,\n    borderTopWidth: 1,\n    borderColor: colors.greyOutline,\n  },\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5,\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100,\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey',\n  },\n});\n\nexport default Lists2;\n```\n\n----------------------------------------\n\nTITLE: Implementing Single and Multi-Select ButtonGroups in React Native\nDESCRIPTION: This React Native functional component demonstrates the `ButtonGroup` component from `@rneui/themed`. It initializes state using `useState` for both single (`selectedIndex`) and multiple (`selectedIndexes`) selection modes. The component renders two `ButtonGroup` instances: the first allows single selection from a string array, and the second allows multiple selections using the `selectMultiple` prop. The `onPress` handlers update the respective state variables. Basic styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, {useState} from 'react'\nimport { ButtonGroup } from '@rneui/themed'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\nreturn (\n  <>\n    <Text style={styles.subHeader}>Using Strings</Text>\n    <ButtonGroup\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n      selectedIndex={selectedIndex}\n      onPress={(value) => {\n        setSelectedIndex(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <ButtonGroup\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\n      selectMultiple\n      selectedIndexes={selectedIndexes}\n      onPress={(value) => {\n        setSelectedIndexes(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <Text style={styles.subHeader}>Using Components</Text>\n  </>\n)\n}\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Various Chip Configurations - React Native Elements - JavaScript/TypeScript\nDESCRIPTION: This snippet provides a functional React component demonstrating different usages of the Chip component from @rneui/themed. It includes solid, disabled, outlined, icon-left, icon-right, and pressable Chips, with layout managed by ScrollView and StyleSheet. Dependencies are React, React Native, and @rneui/themed. Key props include title, type, icon, iconRight, disabled, onPress, and containerStyle. Exports a themed Chips component with several interactive and styled chips, useful for UI prototyping and documentation; requires TypeScript for types or can also be used as standard JSX.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, colors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for React Native Elements Web - Bash\nDESCRIPTION: Installs the core libraries required for using React Native Elements and supporting functionality (react-native-web, react-native-vector-icons) in a project created via Create React App. This command should be run after initializing the project. No special environment variables needed; runs with yarn package manager. Output is an updated node_modules/ with the specified packages installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/web_usage.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-elements react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Using Image Source for Avatars with TypeScript\nDESCRIPTION: Shows how to display images within rounded Avatars by providing a URI via the `source` prop. Two avatars with different image sources are rendered side-by-side using a Stack.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Avatar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    source={{ uri: \"https://randomuser.me/api/portraits/men/36.jpg\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    source={{ uri: \"https://randomuser.me/api/portraits/men/35.jpg\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient Header in React Native Elements\nDESCRIPTION: Demonstrates how to use LinearGradient with the Header component. Requires react-native-linear-gradient package for react-native-cli users. Shows gradient configuration with color transitions and directional properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: React Native Elements Tooltip Component Implementation\nDESCRIPTION: Comprehensive example of implementing various Tooltip configurations in React Native Elements, demonstrating different styles, sizes, and content options. Includes examples of tooltips with and without carets, custom backgrounds, and different container sizes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, colors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\n\nconst { height } = Dimensions.get('window');\n\ntype ToolTipComponentProps = {};\n\nconst TooltipComponent: React.FunctionComponent<ToolTipComponentProps> = () => {\nconst toolProps = {};\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <Tooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </Tooltip>\n          <Tooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={colors.primary}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            backgroundColor={colors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n          <Tooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </Tooltip>\n          <Tooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ButtonGroup with Strings and Multi-Select - React Native Elements (JavaScript)\nDESCRIPTION: This code sample displays the usage of ButtonGroup with string values as buttons and multi-select support using React and React Native Elements. Functional components and hooks (useState) manage selected indices for both single and multiple selection. Two ButtonGroups are shown, one simple and one with selectMultiple enabled, and custom styles are applied to subheaders. Requires @rneui/themed, react-native, React, and appropriate theme providers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, {useState} from 'react'\nimport { ButtonGroup } from '@rneui/themed'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\nreturn (\n  <>\n    <Text style={styles.subHeader}>Using Strings</Text>\n    <ButtonGroup\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n      selectedIndex={selectedIndex}\n      onPress={(value) => {\n        setSelectedIndex(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <ButtonGroup\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\n      selectMultiple\n      selectedIndexes={selectedIndexes}\n      onPress={(value) => {\n        setSelectedIndexes(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <Text style={styles.subHeader}>Using Components</Text>\n  </>\n)\n}\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various RNE Chip Configurations in TSX (SnackPlayer)\nDESCRIPTION: Provides a React Native functional component example (intended for SnackPlayer) showcasing different configurations of the `@rneui/themed` Chip component using TypeScript syntax. It includes examples of solid, disabled, outlined chips, chips with left/right icons, and pressable chips, arranged within a ScrollView. Dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, colors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: colors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Creating a ListItem with Linear Gradient and Touchable Scale in React Native\nDESCRIPTION: This snippet demonstrates how to create a `@rneui/themed` ListItem component with a linear gradient background and a scaling effect on touch. It utilizes `react-native-touchable-scale` for the touch effect and `react-native-linear-gradient` for the background gradient (required if not using Expo). Key props like `friction`, `tension`, and `activeScale` control the touch animation, while `linearGradientProps` configure the gradient's colors and direction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { ListItem, Avatar } from '@rneui/themed';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Social Icons with React Native Elements in TypeScript\nDESCRIPTION: This React Native component (`SocialIcons`) demonstrates displaying various social media icons using the `SocialIcon` component from `@rneui/themed`. It imports required components from `react`, `react-native`, and `@rneui/themed`. An array `dataList` holds configurations for different social icons. The component iterates over `dataList`, grouping icons into rows of three using `_.chunk` (assuming lodash is available) and renders each icon using `<SocialIcon>`. The icons are displayed within a `ScrollView` for scrollability.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Social Icon\nimport React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\n\ntype IconData = {\ntype: SocialMediaType;\niconType: string;\n};\n\nconst dataList: Partial<IconData>[] = [\n{\n  type: 'facebook',\n},\n{\n  type: 'twitter',\n},\n{\n  type: 'google-plus-official',\n},\n{\n  type: 'google',\n},\n{\n  type: 'pinterest',\n},\n{\n  type: 'linkedin',\n},\n{\n  type: 'youtube',\n},\n{\n  type: 'vimeo',\n},\n{\n  type: 'tumblr',\n},\n{\n  type: 'instagram',\n},\n{\n  type: 'quora',\n},\n{\n  type: 'flickr',\n},\n{\n  type: 'foursquare',\n},\n{\n  type: 'wordpress',\n},\n{\n  type: 'stumbleupon',\n},\n{\n  type: 'github',\n},\n{\n  type: 'github-alt',\n},\n{\n  type: 'twitch',\n},\n{\n  type: 'medium',\n},\n{\n  type: 'soundcloud',\n},\n{\n  type: 'stack-overflow',\n},\n{\n  type: 'gitlab',\n},\n{\n  type: 'angellist',\n},\n{\n  type: 'codepen',\n},\n{\n  type: 'weibo',\n},\n{\n  type: 'vk',\n},\n{\n  type: 'facebook-messenger',\n  iconType: 'material-community',\n},\n{\n  type: 'whatsapp',\n},\n];\n\ntype SocialIconsComponentProps = {};\n\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\nconst socialProps = {};\nreturn (\n  <>\n    <ScrollView>\n      {_.chunk(dataList, 3).map(\n        (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n              marginTop: 10,\n              backgroundColor: '#4c4c4c',\n            }}\n            key={chunkIndex}\n          >\n            {chunk.map((l: Partial<IconData>, i: React.Key) => (\n              <SocialIcon\n                type={l.type}\n                iconType={l.iconType ? l.iconType : 'font-awesome'}\n                key={`${chunkIndex}-${i}`}\n              />\n            ))}\n          </View>\n        )\n      )}\n    </ScrollView>\n  </>\n);\n};\n\nexport default SocialIcons;\n```\n```\n\n----------------------------------------\n\nTITLE: Showcasing Multiple Rating Types in React Native Elements (JavaScript, SnackPlayer)\nDESCRIPTION: This React Native code provides a live demonstration for the Rating component, using various configurations: standard, fractional, custom ratings, and 'heart'-type. The 'ratingCompleted' callback logs final ratings. The component supports styling via StyleSheet and demonstrates scroll integration for large content. Dependencies: React, react-native, @rneui/themed. Inputs: None for static examples; outputs: UI display and console logs. Limitations: Assumes the presence of styles and dependencies; not standalone unless all requirements are met.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Displaying a Bottom Sheet Modal with React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the BottomSheet component from React Native Elements to present a modal overlay from the bottom of the screen. It relies on React state to manage visibility and dynamically generates a list of action items, including a 'Cancel' action, using array mapping. Dependencies include React (useState), React Native Elements (BottomSheet, ListItem), and prerequisite safe-area context setup. Inputs are the modal visibility state, list data, and styles; the output is a rendered modal containing customizable list items. Ensure you complete safe area context setup as referenced in the documentation before use.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/bottomsheet.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\n<BottomSheet\n  isVisible={isVisible}\n  containerStyle={{ backgroundColor: 'rgba(0.5, 0.25, 0, 0.2)' }}\n>\n  {list.map((l, i) => (\n    <ListItem key={i} containerStyle={l.containerStyle} onPress={l.onPress}>\n      <ListItem.Content>\n        <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n      </ListItem.Content>\n    </ListItem>\n  ))}\n</BottomSheet>;\n```\n\n----------------------------------------\n\nTITLE: Rendering a List with Map and Avatar using @rneui/themed in JavaScript\nDESCRIPTION: Demonstrates creating a list of items using the JavaScript `map` function. Each item uses the `ListItem` and `Avatar` components from `@rneui/themed` to display a name, subtitle, and avatar image sourced from a URL. Requires `@rneui/themed` library. Input is an array of objects (`list`), output is a rendered `<View>` containing `ListItem` components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Configuring Skeleton Animations in React Native Elements (TypeScript)\nDESCRIPTION: This set of code snippets demonstrates different animation options available for the Skeleton component. The first uses the default pulse animation, the second shows a wave animation with a custom linear gradient component, and the third disables animation. The animation prop accepts 'pulse', 'wave', or 'none', and the LinearGradientComponent prop allows customization of the gradient effect, requiring a compatible linear gradient implementation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Skeleton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Skeleton animation=\"pulse\" width={80} height={40} />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Skeleton LinearGradientComponent={LinearGradient} animation=\"wave\" width={80} height={40} />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Skeleton animation=\"none\" width={80} height={40} />\n```\n\n----------------------------------------\n\nTITLE: Referencing and Using SearchBar Methods with React Refs - React Native - JavaScript\nDESCRIPTION: Demonstrates how to store a reference to the SearchBar instance using the ref prop and React's ref callback. Once stored, component methods like focus, blur, clear, and cancel can be called on the referenced SearchBar. No additional dependencies are required beyond React Native and React Native Elements. 'cancel' is only available when the platform prop is set to 'ios' or 'android'. This pattern enables imperative interaction with the SearchBar component in class or function-based components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\n<SearchBar\\n  ref={search => this.search = search}\\n  ...\\n/>\\n```\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\\nthis.search.focus();\\nthis.search.blur();\\nthis.search.clear();\\nthis.search.cancel(); // Only available if `platform` props is \"ios\"\\u00a0| \"android\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Raised Button - React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use composition in React (with TypeScript) to create a custom button that is always rendered with the 'raised' prop set by default. It defines a 'RaisedButton' component that spreads incoming props to the native Button, supporting all props from the standard Button. Dependencies include React, @rneui/themed, and expected use within a React Native environment. The main input is props spread into Button, with the expected output being a visually raised button. The snippet also shows how to use the new button within an App component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/0.index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SpeedDial Component in React Native Elements\nDESCRIPTION: Creates a SpeedDial component with two action buttons (Add and Delete) using React Native Elements. The component uses React's useState hook to manage the open/close state and includes click handlers for both the main dial and individual actions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SpeedDial } from '@rneui/themed';\n\nexport default () => {\nconst [open, setOpen] = React.useState(false);\nreturn (\n  <SpeedDial\n    isOpen={open}\n    icon={{ name: 'edit', color: '#fff' }}\n    openIcon={{ name: 'close', color: '#fff' }}\n    onOpen={() => setOpen(!open)}\n    onClose={() => setOpen(!open)}\n  >\n    <SpeedDial.Action\n      icon={{ name: 'add', color: '#fff' }}\n      title=\"Add\"\n      onPress={() => console.log('Add Something')}\n    />\n    <SpeedDial.Action\n      icon={{ name: 'delete', color: '#fff' }}\n      title=\"Delete\"\n      onPress={() => console.log('Delete Something')}\n    />\n  </SpeedDial>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating RNE Text Component to Variant Prop (Diff)\nDESCRIPTION: Shows the change in applying header styles (like h1, h2, etc.) to the RNE `Text` component in v4. Instead of dedicated props like `h1` and `h1Style`, styling is now applied using the `variant` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/migration-v4.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  <Text\n-  h1\n-  h1style={{}}\n+  variant=\"h1\"\n   style={{}}\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing SocialIcon from React Native Elements (JavaScript)\nDESCRIPTION: Demonstrates how to import the SocialIcon component from '@rneui/themed' for use in a React Native project. This is required to use the SocialIcon UI element, and the package '@rneui/themed' must be installed as a prerequisite dependency. No parameters are needed for the import statement; it simply enables access to the SocialIcon component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SocialIcon } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using Input Component Methods via Reference\nDESCRIPTION: Example showing how to call methods on an Input component using a reference. Methods include focus, blur, clear, isFocused, setNativeProps, and shake.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon-Based Interactive Avatars with Styles in React Native Elements (JavaScript)\nDESCRIPTION: This series of examples highlight rendering avatars using custom icons with the Avatar component in React Native Elements, incorporating 'font-awesome' icon types, custom styles, and interactive 'onPress' handlers. Avatars are configured with different sizes, overlay container styles, icon names, and colors. Requirements include 'react-native-elements' and relevant font/icon libraries. These snippets return avatar components varying in size and style, responding visually and functionally to user input.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/avatar.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar } from \"react-native-elements\";\n\n<Avatar\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n<Avatar\n  size=\"small\"\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n<Avatar\n  size=\"medium\"\n  overlayContainerStyle={{backgroundColor: 'blue'}}\n  icon={{name: 'meetup', color: 'red', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 3, marginTop: 100}}\n/>\n<Avatar\n  size=\"large\"\n  icon={{name: 'rocket', color: 'orange', type: 'font-awesome'}}\n  overlayContainerStyle={{backgroundColor: 'white'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 4, marginTop: 75}}\n/>\n<Avatar\n  size=\"xlarge\"\n  rounded\n  icon={{name: 'home', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 5, marginRight: 60}}\n/>\n<Avatar\n  size={200}\n  rounded\n  icon={{name: 'user', type: 'font-awesome'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Card from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Card component from the '@rneui/themed' package for usage within a React Native Elements project. No additional dependencies are required beyond a properly installed '@rneui/themed' library. This import is a prerequisite for rendering Card components in a TypeScript/React Native environment and should be placed at the top of your file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: ListItem with Linear Gradient and TouchableScale Animation â€“ React Native Elements â€“ JavaScript\nDESCRIPTION: Shows advanced customization by combining ListItem with TouchableScale for animated press feedback and LinearGradient for a background gradient. Requires react-native-elements, react-native-touchable-scale, and react-native-linear-gradient, with dependencies installed and linked. Key parameters include gradient colors, TouchableScale settings, and avatar/title customization; output is a visually enhanced, animated ListItem.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/listitem.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: [1, 0],\n    end: [0.2, 0],\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n  leftAvatar={{ rounded: true, source: { uri: avatar_url } }}\n  title=\"Chris Jackson\"\n  titleStyle={{ color: 'white', fontWeight: 'bold' }}\n  subtitleStyle={{ color: 'white' }}\n  subtitle=\"Vice Chairman\"\n  chevron={{ color: 'white' }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Tile Components in React Native Elements\nDESCRIPTION: This code demonstrates three different implementations of the Tile component from React Native Elements: a featured tile with caption, a featured tile with an icon, and a tile with custom child content. It includes styling, image sources, and interactive elements like onPress handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Text, Tile } from '@rneui/themed';\n\ntype TilesComponentProps = {};\n\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\nreturn (\n  <>\n    <View style={{ alignItems: 'center' }}>\n      <ScrollView style={{ paddingVertical: 10 }}>\n      <Text style={styles.subHeader}>Featured Tile</Text>\n        <Tile\n          imageSrc={{\n            uri:\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\n          }}\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\n          titleStyle={{ fontSize: 15 }}\n          featured\n          caption=\"Mahatma Gandhi\"\n          activeOpacity={1}\n          width={310}\n        />\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\n        <View style={{ paddingTop: 20 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n            icon={{\n              name: 'heart',\n              type: 'font-awesome',\n              size: 60,\n              color: 'red',\n            }}\n            featured\n            activeOpacity={0.8}\n            onPress={() => {\n              'Tile pressed';\n            }}\n            width={310}\n          />\n        </View>\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\n          <Tile\n            imageSrc={{\n              uri:\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\n            }}\n            title=\"Half Dome, Yosemite\"\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\n            activeOpacity={1}\n            width={310}\n            contentContainerStyle={{ height: 70 }}\n            style={{ paddingBottom: 20 }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text style={{ color: 'green' }}>Visit</Text>\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\n            </View>\n          </Tile>\n        </View>\n      </ScrollView>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n\nexport default Tiles;\n```\n\n----------------------------------------\n\nTITLE: Configuring RNE Dialog for Web Platform in JSX\nDESCRIPTION: This snippet demonstrates the required configuration for using the React Native Elements Dialog component on the web. Since `react-native-web` does not yet implement the `Modal` component, a compatible implementation like `modal-react-native-web` must be explicitly imported and passed via the `ModalComponent` prop. This ensures proper modal behavior in web environments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Dialog ModalComponent={Modal} ... />\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Fractional Rating - React Native Elements - HTML/JSX\nDESCRIPTION: Illustrates enabling fractional ratings on the Rating component in React Native Elements. The 'fractions' prop specifies the granularity, and 'startingValue' initializes the rating. Expects that fractions and startingValue accept numeric values, though this snippet is in HTML-style JSX for illustrative documentation purposes. Outputs a rating widget with fractional value selection or display.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Colors to Buttons in React Native\nDESCRIPTION: Illustrates how to apply different colors to buttons using the color prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button>Primary</Button>\n  <Button color=\"secondary\">Secondary</Button>\n  <Button color=\"warning\">Warning</Button>\n  <Button color=\"error\">Error</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Chunking Arrays in JavaScript for Grouped Rendering\nDESCRIPTION: A polyfill method is added to Array.prototype to chunk arrays into smaller arrays of a specified size, which facilitates grouping data for UI rendering. The chunk function recursively divides the array, aiding in organizing Avatars into rows. This method has a dependency on native JavaScript and should be used with caution in environments where extending built-in prototypes is discouraged. The first argument is the chunk size (number), and the method returns an array of arrays.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Avatar/snack/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nArray.prototype.chunk = function ( n ) {\n    if ( !this.length ) {\n        return [];\n    }\n    return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient with Chip Component in React Native\nDESCRIPTION: This snippet shows how to use LinearGradient with the Chip component from React Native Elements. It includes importing necessary components and setting up the Chip with LinearGradient properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Avatars using Map Function in React Native\nDESCRIPTION: This snippet demonstrates how to use the map function to render a list of items with avatars using the ListItem and Avatar components from React Native Elements. It creates a list of user information and displays each item with an avatar, name, and subtitle.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Importing the Header Component using @rneui/themed (TypeScript)\nDESCRIPTION: This snippet shows how to import the `Header` component from the `@rneui/themed` package in a TypeScript React Native project. This import makes the Header component available for use within your application's screens or components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Header } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Button with Right-aligned Icon in React Native Elements\nDESCRIPTION: Implementation of a button with an icon positioned to the right of the text using the 'iconRight' prop along with the 'icon' prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" icon=\"home\" iconRight />\n```\n\n----------------------------------------\n\nTITLE: Implementing AirbnbRating Component in React Native (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Native functional component called `Ratings`. It imports necessary modules like React, StyleSheet, View, ScrollView from 'react-native', and `AirbnbRating` from '@rneui/themed'. The component renders three instances of `AirbnbRating`: a default one, a disabled one (`isDisabled={true}`), and a customized one with specific `count`, `reviews`, `defaultRating`, and `size` props. It includes basic styling defined using `StyleSheet.create` for layout and presentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE AirbnbRating\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews={[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]}\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n```\n\n----------------------------------------\n\nTITLE: CheckBox with Labels\nDESCRIPTION: Shows how to implement checkboxes with labels, including enabled and disabled states.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/CheckBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <CheckBox checked title=\"Label\" />\n  <CheckBox checked disabled title=\"Label\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems using FlatList with Custom Avatar Component - React Native Elements JavaScript\nDESCRIPTION: This snippet demonstrates dynamic FlatList rendering with a custom Avatar configuration: if avatar_url is specified, an Avatar image is displayed; otherwise, initials are shown using the name property. The component expects each item to include 'name' (string), optional 'avatar_url', and 'subtitle'. Dependencies include 'react-native', 'react-native-elements', and a valid list array.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/listitem.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Accordion in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the @rneui/themed package for accordion functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems using FlatList with Avatar - React Native Elements JavaScript\nDESCRIPTION: Illustrates creating a performant, scrollable list using React Native's FlatList combined with ListItem and Avatar components from React Native Elements. A keyExtractor is defined for unique keys, and renderItem leverages ListItem to display avatar, title, subtitle, and a chevron for each entry. Requires 'react-native', 'react-native-elements', and a data array with 'name', 'avatar_url', and 'subtitle'. Outputs a FlatList view.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/listitem.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Build Scripts for React App Rewired in package.json - Diff\nDESCRIPTION: Shows the required changes to package.json scripts to swap Create React App's default commands for react-app-rewired equivalents. This is necessary for the custom build configuration to be respected. The diff format highlights the necessary substitutions; after applying, starting, building, or testing the app will use react-app-rewired.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/web_usage.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test\",\n+   \"test\": \"react-app-rewired test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extended Component with Custom Props in React Native\nDESCRIPTION: Demonstrates using the RNE `Text` component with the custom `bold` prop that was added via theme extension and type definition. The component conditionally renders bold text based on the presence and value of the `bold` prop, leveraging the theme configuration defined via `createTheme`. Assumes this component is rendered within a `ThemeProvider` using `myTheme`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme(); // theme might not be strictly needed here unless used elsewhere\n  return (\n    <View>\n      <Text>Normal Text</Text>\n      <Text bold>Bold Text</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Storing Input Reference in React\nDESCRIPTION: This snippet demonstrates how to create a reference to an Input component using React's ref prop. This allows for calling methods on the Input instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Rating Component in React Native\nDESCRIPTION: Shows how to configure the `Rating` component for display-only purposes using the `readonly` prop. It also sets the `imageSize` and initializes the value using `startingValue`, typically passed via component props. Requires `react-native-elements`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/rating.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating\n  imageSize={20}\n  readonly\n  startingValue={rating}\n  style={{ styles.rating }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Tab.Item with Dynamic Button Style in React Native Elements (JSX)\nDESCRIPTION: This JSX snippet demonstrates rendering a Tab.Item with a dynamic buttonStyle based on its active state, allowing the background color to switch between red and blue. It requires React Native Elements and should be used inside a Tab component context. The title prop sets the tab label, and buttonStyle receives a function parameter 'active' for custom styling. The snippet expects no external data and renders a styled tab UI element.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<Tab.Item\\n  title=\\\"Tab 1\\\"\\n  buttonStyle={(active) => {\\n    backgroundColor: active ? \\\"red\\\" : \\\"blue\\\";\\n  }}\\n/>\\n```\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' library for use within a React Native application. This import makes the ListItem component available for rendering customizable rows of information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable ListItems with React Native Elements (TypeScript/React Native)\nDESCRIPTION: This snippet demonstrates how to use ListItem.Swipeable with left and right swipe actions using custom Button components for actions like archiving or deleting. The snippet showcases configuration of leftWidth, rightWidth, minSlideWidth, and custom content renderers for swipe gestures. Dependencies: '@rneui/themed'. Inputs: icon names/types, event handlers, swipe dimensions. Outputs: interactive swipeable row with archive/delete functionality. Requires handling swipe actions for desired behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<ListItem.Swipeable\n  leftWidth={80}\n  rightWidth={90}\n  minSlideWidth={40}\n  leftContent={(action) => (\n    <Button\n      containerStyle={{\n        flex: 1,\n        justifyContent: \"center\",\n        backgroundColor: \"#f4f4f4\",\n      }}\n      type=\"clear\"\n      icon={{\n        name: \"archive-outline\",\n        type: \"material-community\",\n      }}\n      onPress={action}\n    />\n  )}\n  rightContent={(action) => (\n    <Button\n      containerStyle={{\n        flex: 1,\n        justifyContent: \"center\",\n        backgroundColor: \"#f4f4f4\",\n      }}\n      type=\"clear\"\n      icon={{ name: \"delete-outline\" }}\n      onPress={action}\n    />\n  )}\n>\n  <Icon name=\"label-important-outline\" type=\"material\" />\n  <ListItem.Content>\n    <ListItem.Title>Email from John Doe</ListItem.Title>\n    <ListItem.Subtitle>Hey, I'm John Doe</ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with FlatList and Conditional Avatars in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Uses `FlatList` and `ListItem` to render a list where the `Avatar` component displays either an image (if `avatar_url` exists) or the first letter of the name as a title. This snippet showcases conditional rendering within the `renderItem` function. Depends on `@rneui/themed` (`ListItem`, `Avatar`) and React Native's `FlatList`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Input Component Props Structure\nDESCRIPTION: Comprehensive list of props available for the Input component, inheriting from React Native's TextInput with additional customization options.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/input.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- containerStyle: View style object for container\n- disabled: boolean to disable input\n- disabledInputStyle: Text style object for disabled state\n- errorMessage: string for error message\n- errorProps: Text component props for error message\n- errorStyle: style object for error message\n- InputComponent: custom React Native component\n- inputContainerStyle: View style object for input container\n- inputStyle: style object for input\n- label: string or React component for label\n- labelProps: Text component props for label\n- labelStyle: style object for label\n- leftIcon: Icon props or component\n- leftIconContainerStyle: View style object for left icon\n- rightIcon: Icon props or component\n- rightIconContainerStyle: View style object for right icon\n- renderErrorMessage: boolean for error message display\n- placeholder: string for input placeholder\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Components with React Native Elements\nDESCRIPTION: This snippet demonstrates the creation of various Card components using React Native Elements. It includes a user list card, a fonts demonstration card, and an image card with a button. The code also defines styles for layout and typography.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Card/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from 'react-native-elements';\n\nconst users = [\n  {\n    name: 'brynn',\n    avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n  },\n  {\n    name: 'thot leader',\n    avatar:\n      'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n  },\n  {\n    name: 'jsa',\n    avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n  },\n  {\n    name: 'talhaconcepts',\n    avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n  },\n  {\n    name: 'andy vitale',\n    avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n  },\n  {\n    name: 'katy friedson',\n    avatar:\n      'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n  },\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\n  return (\n    <>\n      <ScrollView>\n        <View style={styles.container}>\n          <Card>\n            <Card.Title>CARD WITH DIVIDER</Card.Title>\n            <Card.Divider />\n            {users.map((u, i) => {\n              return (\n                <View key={i} style={styles.user}>\n                  <Image\n                    style={styles.image}\n                    resizeMode=\"cover\"\n                    source={{ uri: u.avatar }}\n                  />\n                  <Text style={styles.name}>{u.name}</Text>\n                </View>\n              );\n            })}\n          </Card>\n          <Card containerStyle={{ marginTop: 15 }}>\n            <Card.Title>FONTS</Card.Title>\n            <Card.Divider />\n            <Text style={styles.fonts} h1>\n              h1 Heading\n            </Text>\n            <Text style={styles.fonts} h2>\n              h2 Heading\n            </Text>\n            <Text style={styles.fonts} h3>\n              h3 Heading\n            </Text>\n            <Text style={styles.fonts} h4>\n              h4 Heading\n            </Text>\n            <Text style={styles.fonts}>Normal Text</Text>\n          </Card>\n          <Card>\n            <Card.Title>HELLO WORLD</Card.Title>\n            <Card.Divider />\n            <Card.Image\n              style={{ padding: 0 }}\n              source={{\n                uri:\n                  'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n              }}\n            />\n            <Text style={{ marginBottom: 10 }}>\n              The idea with React Native Elements is more about component\n              structure than actual design.\n            </Text>\n            <Button\n              icon={\n                <Icon\n                  name=\"code\"\n                  color=\"#ffffff\"\n                  iconStyle={{ marginRight: 10 }}\n                />\n              }\n              buttonStyle={{\n                borderRadius: 0,\n                marginLeft: 0,\n                marginRight: 0,\n                marginBottom: 0,\n              }}\n              title=\"VIEW NOW\"\n            />\n          </Card>\n        </View>\n      </ScrollView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  fonts: {\n    marginBottom: 8,\n  },\n  user: {\n    flexDirection: 'row',\n    marginBottom: 6,\n  },\n  image: {\n    width: 30,\n    height: 30,\n    marginRight: 10,\n  },\n  name: {\n    fontSize: 16,\n    marginTop: 5,\n  },\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Theme Key for PricingCard Customization\nDESCRIPTION: Specifies the theme key 'PricingCard' used to customize the component's default styles when using the ThemeProvider from React Native Elements. Refer to the customization documentation for details on applying themes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/PricingCard.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPricingCard\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Toggle Switch with RNE Switch in React Native (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Native functional component named `SwitchComponent`. It utilizes the `Switch` component from `@rneui/themed` and the `useState` hook from React to manage the toggle state (`checked`). The component renders a `Switch` whose value is bound to the `checked` state, and the state is updated via the `onValueChange` callback. Basic styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Switch\nimport React, { useState } from 'react';\nimport { Switch } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\nconst [checked, setChecked] = useState(false);\n\nconst toggleSwitch = () => {\n  setChecked(!checked);\n};\n\nreturn (\n  <View style={styles.view}>\n   <Switch\n      value={checked}\n      onValueChange={(value) => setChecked(value)}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Styles for Extended Component Props using createTheme (@rneui/themed)\nDESCRIPTION: Shows how to define theme-level styles or behavior for an extended component using `createTheme`. This example targets the `Text` component (using its key 'Text') and provides a function that receives the component props. Based on the value of the custom `bold` prop, it conditionally sets the `fontWeight` style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Social Icons with React Native Elements in TypeScript\nDESCRIPTION: This TypeScript/React Native code defines a SocialIcons functional component that renders a scrollable list of social media icons in rows of three using react-native-elements' SocialIcon. The list of social icons is defined in the dataList array, each specifying the type (e.g., 'facebook', 'twitter') and optionally the iconType. The component uses the lodash chunk utility to group icons into rows, lays them out with the View component, and supports vertical scrolling with ScrollView. Dependencies include React, react-native, react-native-elements, lodash (for _.chunk), and TypeScript types. Inputs are fixed in the dataList; no additional parameters are required. Output is a scrollable, visually grouped display of social media icons with consistent layout, intended for UI integration in a React Native app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SocialIcon/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\\nimport { View, ScrollView } from 'react-native';\\nimport { SocialIcon, SocialIconProps } from 'react-native-elements';\\n\\ntype IconData = {\\n  type: SocialMediaType;\\n  iconType: string;\\n};\\n\\nconst dataList: Partial<IconData>[] = [\\n  {\\n    type: 'facebook',\\n  },\\n  {\\n    type: 'twitter',\\n  },\\n  {\\n    type: 'google-plus-official',\\n  },\\n  {\\n    type: 'google',\\n  },\\n  {\\n    type: 'pinterest',\\n  },\\n  {\\n    type: 'linkedin',\\n  },\\n  {\\n    type: 'youtube',\\n  },\\n  {\\n    type: 'vimeo',\\n  },\\n  {\\n    type: 'tumblr',\\n  },\\n  {\\n    type: 'instagram',\\n  },\\n  {\\n    type: 'quora',\\n  },\\n  {\\n    type: 'flickr',\\n  },\\n  {\\n    type: 'foursquare',\\n  },\\n  {\\n    type: 'wordpress',\\n  },\\n  {\\n    type: 'stumbleupon',\\n  },\\n  {\\n    type: 'github',\\n  },\\n  {\\n    type: 'github-alt',\\n  },\\n  {\\n    type: 'twitch',\\n  },\\n  {\\n    type: 'medium',\\n  },\\n  {\\n    type: 'soundcloud',\\n  },\\n  {\\n    type: 'stack-overflow',\\n  },\\n  {\\n    type: 'gitlab',\\n  },\\n  {\\n    type: 'angellist',\\n  },\\n  {\\n    type: 'codepen',\\n  },\\n  {\\n    type: 'weibo',\\n  },\\n  {\\n    type: 'vk',\\n  },\\n  {\\n    type: 'facebook-messenger',\\n    iconType: 'material-community',\\n  },\\n  {\\n    type: 'whatsapp',\\n  },\\n];\\n\\ntype SocialIconsComponentProps = {};\\n\\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\\n  const socialProps = {};\\n  return (\\n    <>\\n      <ScrollView>\\n        {_.chunk(dataList, 3).map(\\n          (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\\n            <View\\n              style={{\\n                flexDirection: 'row',\\n                justifyContent: 'space-around',\\n                marginTop: 10,\\n                backgroundColor: '#4c4c4c',\\n              }}\\n              key={chunkIndex}\\n            >\\n              {chunk.map((l: Partial<IconData>, i: React.Key) => (\\n                <SocialIcon\\n                  type={l.type}\\n                  iconType={l.iconType ? l.iconType : 'font-awesome'}\\n                  key={`${chunkIndex}-${i}`}\\n                />\\n              ))}\\n            </View>\\n          )\\n        )}\\n      </ScrollView>\\n    </>\\n  );\\n};\\n\\nexport default SocialIcons;\n```\n\n----------------------------------------\n\nTITLE: Creating an Outline Button in React Native Elements\nDESCRIPTION: This snippet demonstrates creating an 'outline' style `Button` by setting the `type` prop to `outline`. Outline buttons usually have a transparent background with a visible border.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Outline Button\" type=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Image-based Avatars in React Native Elements\nDESCRIPTION: Shows how to create avatars using image sources from external URLs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Avatar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    source={{ uri: \"https://randomuser.me/api/portraits/men/36.jpg\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    source={{ uri: \"https://randomuser.me/api/portraits/men/35.jpg\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying a Custom Theme using createTheme in React Native Elements (TSX)\nDESCRIPTION: Demonstrates creating a custom theme object using `createTheme` from `@rneui/themed`, specifically defining a custom primary color under `lightColors`. The `ThemeProvider` component is then used to apply this custom theme (`myTheme`) to the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#a4e2f5',\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      {/* ... */}\n      {/* ... */}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements Themed Package (TypeScript)\nDESCRIPTION: This snippet shows how to import the ListItem component from the @rneui/themed package for use in React Native projects with TypeScript support. No additional dependencies beyond the @rneui/themed package are needed. The import statement enables use of the ListItem and its subcomponents, such as ListItem.CheckBox, within your project. Ensure that @rneui/themed is installed in your project before use.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing SearchBar Component in React Native\nDESCRIPTION: This snippet shows how to import the SearchBar component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SearchBar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with useTheme Hook - React Native Elements (TypeScript)\nDESCRIPTION: This code shows the use of the useTheme hook from @rneui/themed to obtain the active theme object within a React Native component. The theme is destructured and applied to style a Text component, demonstrating functional component best practices. Dependencies are React, react-native, and @rneui/themed. Inputs are none; the output is UI that stays up-to-date with theme changes. Example assumes styles are externally defined.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/0.index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from '@rneui/themed';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Grid of Images with Placeholders using RNE Image in React Native\nDESCRIPTION: This React Native functional component (`ImageAPI`) uses the `Image` component from `@rneui/themed` within a `FlatList` to display a 2-column grid of 10 random images fetched from Unsplash. It demonstrates using `PlaceholderContent` with an `ActivityIndicator` to show a loading state for each image. The component relies on React, React Native core components (`FlatList`, `SafeAreaView`, `StyleSheet`, `ActivityIndicator`), and the `@rneui/themed` library. Styles for the list and items are defined using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE Image\nimport React from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Image } from '@rneui/themed';\n\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\n\nconst ImageAPI = () => {\nreturn (\n  <>\n    <SafeAreaView>\n      <FlatList\n        data={[...new Array(10)].map((_, i) => i.toString())}\n        style={styles.list}\n        numColumns={2}\n        keyExtractor={(e) => e}\n        renderItem={({ item }) => (\n          <Image\n            source={{ uri: BASE_URI + item }}\n            containerStyle={styles.item}\n            PlaceholderContent={<ActivityIndicator />}\n          />\n        )}\n      />\n    </SafeAreaView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nlist: {\n  width: '100%',\n  backgroundColor: '#000',\n},\nitem: {\n  aspectRatio: 1,\n  width: '100%',\n  flex: 1,\n},\n});\n\nexport default ImageAPI;\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Badge and withBadge Usage with React Native Elements in JavaScript\nDESCRIPTION: This code snippet defines a functional React Native component that demonstrates several ways to use the Badge component and the withBadge HOC from the @rneui/themed library. Dependencies include React Native (for UI primitives) and @rneui/themed (for Badge, Avatar, Icon, and withBadge). The example covers standard badges with count/status, mini badges without value props, badges as notification indicators on avatars and icons, and custom styling through the StyleSheet API. Key inputs include props such as value, status, and containerStyle, with expected visual outputs being various badges rendered alongside other components. The code is intended for use within a React Native project and requires the appropriate setup for @rneui/themed components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Text, View, ScrollView, StyleSheet } from 'react-native';\\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\\n\\nconst BadgedIcon = withBadge(15)(Icon);\\n\\nconst BadgeComponent = () => {\\nreturn (\\n  <>\\n    <ScrollView>\\n      <Text style={styles.subHeader}>Standard Badge</Text>\\n      <View\\n        style={{\\n          flexDirection: 'row',\\n          justifyContent: 'space-around',\\n          marginTop: 20,\\n          marginBottom: 40,\\n        }}\\n      >\\n        <Badge value=\"3\" status=\"success\" />\\n        <Badge value=\"99+\" status=\"error\" />\\n        <Badge value=\"500\" status=\"primary\" />\\n        <Badge value=\"10\" status=\"warning\" />\\n      </View>\\n      <Text style={styles.subHeader}>Mini Badge</Text>\\n      <Text style={{textAlign: \"center\"}}>This type of badge shows when no value prop is provided. This form is effective for showing statuses.</Text>\\n      <View\\n        style={{\\n          flexDirection: 'row',\\n          justifyContent: 'space-around',\\n          marginTop: 20,\\n          marginBottom: 20,\\n        }}\\n      >\\n        <Badge status=\"success\" />\\n        <Badge status=\"error\" />\\n        <Badge status=\"primary\" />\\n        <Badge status=\"warning\" />\\n      </View>\\n      <View\\n        style={{\\n          flexDirection: 'row',\\n          justifyContent: 'space-around',\\n          marginBottom: 20,\\n        }}\\n      >\\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Success</Text>\\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Error</Text>\\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Primary</Text>\\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Warning</Text>\\n      </View>\\n\\n      <Text style={styles.subHeader}>Badge as Indicator</Text>\\n      <View\\n        style={{\\n          flexDirection: 'row',\\n          justifyContent: 'space-around',\\n          marginTop: 20,\\n          marginBottom: 40,\\n        }}\\n      >\\n        <View>\\n          <Avatar\\n            rounded\\n            source={{ uri: 'https://randomuser.me/api/portraits/men/41.jpg' }}\\n            size=\"medium\"\\n          />\\n          <Badge\\n            status=\"success\"\\n            containerStyle={{ position: 'absolute', top: 5, left: 40 }}\\n          />\\n        </View>\\n        <BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\\n        <View>\\n          <Avatar\\n            rounded\\n            source={{\\n              uri: 'https://randomuser.me/api/portraits/women/40.jpg',\\n            }}\\n            size=\"large\"\\n          />\\n          <Badge\\n            status=\"primary\"\\n            value={10}\\n            containerStyle={{ position: 'absolute', top: 5, left: 60 }}\\n          />\\n        </View>\\n      </View>\\n    </ScrollView>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nsubHeader: {\\n  backgroundColor : \"#2089dc\",\\n  color : \"white\",\\n  textAlign : \"center\",\\n  paddingVertical : 5,\\n  marginBottom : 10\\n}\\n})\\n\\nexport default BadgeComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functional RNE Header Example in JSX (SnackPlayer)\nDESCRIPTION: Provides a runnable SnackPlayer example showcasing a complete implementation of a custom Header component using `HeaderRNE` from `@rneui/themed`. The example includes setting up left (menu icon), center (text title), and right (custom view with clickable icons for navigation) components. It utilizes `TouchableOpacity` for interactions, `Linking` for opening URLs, `StyleSheet` for styling, and wraps the component in `SafeAreaProvider` for correct rendering on devices with notches or status bars. Dependencies include `react`, `react-native`, `@rneui/themed`, `react-native-gesture-handler`, and `react-native-safe-area-context`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with React Native Elements - TypeScript\nDESCRIPTION: This snippet implements a React Functional Component showing diverse usages of the Avatar component from the '@rneui/themed' package. It displays image avatars sourced from URLs, icon avatars using FontAwesome and Material icons, letter avatars with background colors, and avatars with accessory badges. The 'chunk' utility function groups image avatars in rows, while 'styles' is defined for formatting section headers. Dependencies include React Native, React Native Elements, and TypeScript. Key parameters are avatar size, shape, data source, and styling; expected output is a scrollable UI with avatar grids in various formats.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context with NPM (Bash)\nDESCRIPTION: Installs the `react-native-safe-area-context` package using npm. This is a required peer dependency for React Native Elements to handle safe areas correctly on different devices.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Colors in React Native Elements\nDESCRIPTION: This code snippet shows how to use platform-specific colors in your theme. It utilizes the Platform API to select the appropriate color palette based on the operating system.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/0.index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay Component in React Native Elements\nDESCRIPTION: This comprehensive example shows how to create an Overlay component with a toggle button, custom styling, and icon integration using React Native Elements and React hooks.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\nconst [visible, setVisible] = useState(false);\n\nconst toggleOverlay = () => {\n  setVisible(!visible);\n};\n\nreturn (\n  <View>\n    <Button\n      title=\"Open Overlay\"\n      onPress={toggleOverlay}\n      buttonStyle={styles.button}\n    />\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n      <Text style={styles.textPrimary}>Hello!</Text>\n      <Text style={styles.textSecondary}>\n        Welcome to React Native Elements\n      </Text>\n      <Button\n        icon={\n          <Icon\n            name=\"wrench\"\n            type=\"font-awesome\"\n            color=\"white\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        title=\"Start Building\"\n        onPress={toggleOverlay}\n      />\n    </Overlay>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\ntextPrimary: {\n  marginVertical: 20,\n  textAlign: 'center',\n  fontSize: 20,\n},\ntextSecondary: {\n  marginBottom: 10,\n  textAlign: 'center',\n  fontSize: 17,\n},\n});\n\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Interface with Custom Properties using TypeScript\nDESCRIPTION: Uses TypeScript declaration merging to add custom properties (like `myCustomProperty` of type string and `myCustomFunction` of type function) directly to the main `Theme` interface within the `@rneui/themed` module. This allows adding arbitrary data or utility functions to the theme object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Theme {\n    myCustomProperty: string;\n    myCustomFunction: () => void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Default Card Component in React Native Elements (TypeScript/TSX)\nDESCRIPTION: This TypeScript/TSX code snippet demonstrates usage of the Card component from React Native Elements, containing various Text components and a Button. It requires '@rneui/themed' to be installed and imported, and expects React Native's environment to handle Card, Text, and Button components. The snippet shows how to wrap content (strings, headings, descriptions, and a clear-type button) within a Card, suitable for informative UI sections. The Card receives nested components as children, and this structure determines the layout and displayed information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Card>\\n  <Text>Word of the Day</Text>\\n  <Text h4>be-nev-o=lent</Text>\\n  <Text>adjective</Text>\\n  <Text>\\n    well meaning and kindly.\\n    <br />\\n    {'\\\"a benevolent smile\\\"'}\\n  </Text>\\n  <Button size=\\\"sm\\\" type=\\\"clear\\\">\\n    Learn More\\n  </Button>\\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Custom Theme with ThemeProvider (JSX)\nDESCRIPTION: This snippet shows the process of creating a theme object using createTheme and applying it via ThemeProvider to wrap an application. The custom theme defines separate lightColors and darkColors along with component prop customizations (e.g., Button with raised property). Dependencies include @rneui/themed, and the ThemeProvider must wrap target components to apply the theme. The theme object should be passed as the theme prop, enabling consistent theming for child components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  lightColors: {\n    primary: 'red',\n  },\n  darkColors: {\n    primary: 'blue',\n  },\n  components: {\n    Button: {\n      raised: true,\n    },\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>My Button</Button>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Icon Styles in React Native Elements\nDESCRIPTION: This code snippet demonstrates different ways to use the Icon component from React Native Elements. It shows how to set icon names, colors, types, and special properties like 'reverse' and 'raised'. It also includes an example of adding an onPress event to an icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Icon } from '@rneui/themed';\n\nexport default () => {\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Icon\n        name='rowing' />\n\n      <Icon\n        name='g-translate'\n        color='#00aced' />\n\n      <Icon\n        name='sc-telegram'\n        type='evilicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        reverse\n        name='ios-american-football'\n        type='ionicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        raised\n        name='heartbeat'\n        type='font-awesome'\n        color='#f50'\n        onPress={() => console.log('hello')} />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar Component Variants with React Native Elements in TypeScript\nDESCRIPTION: This snippet implements a TypeScript React Native functional component that demonstrates the use of the Avatar component from React Native Elements. It displays image avatars grouped in rows, icon avatars with color customization, letter avatars with custom backgrounds, and avatars with accessory badges. Dependencies include React Native, React Native Elements, and TypeScript type definitions. The code expects a list of image URLs for image avatars and utilizes an Array chunking method for grouping. The component leverages inline styling and shows how to compose and extend Avatar functionality for various UI needs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Avatar/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from 'react-native-elements';\n\ntype AvatarData = {\n  image_url: string;\n};\n\nconst dataList: AvatarData[] = [\n  {\n    image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n  },\n  {\n    image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n  },\n  {\n    image_url:\n      'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n  },\n  {\n    image_url:\n      'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n  },\n  {\n    image_url:\n      'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n  },\n  {\n    image_url:\n      'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n  },\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n    if ( !this.length ) {\n        return [];\n    }\n    return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\n  return (\n    <>\n      <ScrollView>\n        <Text style={styles.subHeader}>Image Avatars</Text>\n        {dataList.chunk(3).map((chunk, chunkIndex) => (\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n              marginBottom: 30,\n            }}\n            key={chunkIndex}\n          >\n            {chunk.map((l, i) => (\n              <Avatar\n                size={64}\n                rounded\n                source={l.image_url ? { uri: l.image_url } : {}}\n                key={`${chunkIndex}-${i}`}\n              />\n            ))}\n          </View>\n        ))}\n        <Text style={styles.subHeader}>Icon Avatars</Text>\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n        >\n          <Avatar\n            size={64}\n            rounded\n            icon={{ name: 'pencil', type: 'font-awesome' }}\n            containerStyle={{ backgroundColor: '#6733b9' }}\n          />\n          <Avatar\n            size={64}\n            rounded\n            icon={{ name: 'rowing' }}\n            containerStyle={{ backgroundColor: '#00a7f7' }}\n          />\n          <Avatar\n            size={64}\n            rounded\n            icon={{ name: 'heartbeat', type: 'font-awesome' }}\n            containerStyle={{ backgroundColor: '#eb1561' }}\n          />\n        </View>\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n        >\n          <Avatar\n            size={64}\n            rounded\n            icon={{\n              name: 'extension',\n              type: 'material',\n              color: '#cdde20',\n            }}\n            containerStyle={{\n              borderColor: 'grey',\n              borderStyle: 'solid',\n              borderWidth: 1,\n            }}\n          />\n          <Avatar\n            size={64}\n            rounded\n            icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n            containerStyle={{\n              borderColor: 'grey',\n              borderStyle: 'solid',\n              borderWidth: 1,\n            }}\n          />\n          <Avatar\n            size={64}\n            rounded\n            icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n            containerStyle={{\n              borderColor: 'grey',\n              borderStyle: 'solid',\n              borderWidth: 1,\n            }}\n          />\n        </View>\n\n        <Text style={styles.subHeader}>Letter Avatars</Text>\n\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n        >\n          <Avatar\n            size={64}\n            rounded\n            title=\"Fc\"\n            containerStyle={{ backgroundColor: '#3d4db7' }}\n          />\n          <Avatar\n            size={64}\n            rounded\n            title=\"P\"\n            containerStyle={{ backgroundColor: 'coral' }}\n          />\n          <Avatar\n            size={64}\n            rounded\n            title=\"Rd\"\n            containerStyle={{ backgroundColor: 'purple' }}\n          />\n        </View>\n\n        <Text style={styles.subHeader}>Badged Avatars</Text>\n\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 40,\n          }}\n        >\n          <Avatar\n            size={64}\n            rounded\n            icon={{ name: 'adb', type: 'material' }}\n            containerStyle={{ backgroundColor: 'orange' }}\n          >\n            <Avatar.Accessory size={24} />\n          </Avatar>\n          <Avatar\n            size={64}\n            rounded\n            source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n            title=\"Bj\"\n            containerStyle={{ backgroundColor: 'grey' }}\n          >\n            <Avatar.Accessory size={23} />\n          </Avatar>\n        </View>\n      </ScrollView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  }\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Providing Theme Configuration for Custom Components in React Native\nDESCRIPTION: Demonstrates how to configure the theme for a custom component (identified by `ComponentKey`) using `createTheme` and provide it using `ThemeProvider`. The `components` object within the theme definition includes an entry for `ComponentKey`, allowing default styles or props (like `titleStyle`) to be set specifically for instances of `CustomComponent` when wrapped with `withTheme`. The `CustomComponent` instance here will receive the red color for its `titleStyle` from the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n// Assume CustomComponent is imported from its file\n// Assume App component uses ThemeProvider\n\nconst myTheme = createTheme({\n  components: {\n    ComponentKey: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <CustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SpeedDial Component in React Native Elements\nDESCRIPTION: This code snippet shows how to implement a SpeedDial component from React Native Elements. It demonstrates state management for open/close functionality and configuring the main icon, open icon, and action buttons with their respective handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { SpeedDial } from '@rneui/themed';\n\nexport default () => {\nconst [open, setOpen] = React.useState(false);\nreturn (\n  <SpeedDial\n    isOpen={open}\n    icon={{ name: 'edit', color: '#fff' }}\n    openIcon={{ name: 'close', color: '#fff' }}\n    onOpen={() => setOpen(!open)}\n    onClose={() => setOpen(!open)}\n  >\n    <SpeedDial.Action\n      icon={{ name: 'add', color: '#fff' }}\n      title=\"Add\"\n      onPress={() => console.log('Add Something')}\n    />\n    <SpeedDial.Action\n      icon={{ name: 'delete', color: '#fff' }}\n      title=\"Delete\"\n      onPress={() => console.log('Delete Something')}\n    />\n  </SpeedDial>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Native Colors in Theme (JSX)\nDESCRIPTION: Demonstrates how to configure the `ThemeProvider` to use native platform colors (iOS or Android defaults) from the `colors.platform` object. It uses `Platform.select` from `react-native` to merge the appropriate platform-specific color palette into the theme's main `colors` object, ensuring components like `Button` use native blue.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, colors, ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  colors: {\n    ...Platform.select({\n      default: colors.platform.android,\n      ios: colors.platform.ios,\n    }),\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      // This button's color will now be the default iOS / Android blue.\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Components in React Native\nDESCRIPTION: Demonstrates how to import and use the `Rating` and `AirbnbRating` components from `react-native-elements`. Includes examples of basic usage, setting custom counts and reviews for `AirbnbRating`, handling the `onFinishRating` callback, and customizing the `Rating` component with different types (heart, custom image), sizes, and colors. Requires `react-native-elements`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/rating.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Rating, AirbnbRating } from 'react-native-elements';\n\nratingCompleted(rating) {\n  console.log(\"Rating is: \" + rating)\n}\n\n<AirbnbRating />\n\n<AirbnbRating\n  count={11}\n  reviews={[\"Terrible\", \"Bad\", \"Meh\", \"OK\", \"Good\", \"Hmm...\", \"Very Good\", \"Wow\", \"Amazing\", \"Unbelievable\", \"Jesus\"]}\n  defaultRating={11}\n  size={20}\n/>\n\n<Rating\n  showRating\n  onFinishRating={this.ratingCompleted}\n  style={{ paddingVertical: 10 }}\n/>\n\n<Rating\n  type='heart'\n  ratingCount={3}\n  imageSize={60}\n  showRating\n  onFinishRating={this.ratingCompleted}\n/>\n\nconst WATER_IMAGE = require('./water.png')\n\n<Rating\n  type='custom'\n  ratingImage={WATER_IMAGE}\n  ratingColor='#3498db'\n  ratingBackgroundColor='#c8c7c8'\n  ratingCount={10}\n  imageSize={30}\n  onFinishRating={this.ratingCompleted}\n  style={{ paddingVertical: 10 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Mapping Data to ListItem with Avatar - React Native Elements JavaScript\nDESCRIPTION: This snippet demonstrates how to use the JavaScript Array map function to dynamically render ListItems with avatars and subtitles using React Native Elements. It imports Avatar and ListItem components, and leverages them to show a styled list based on a user-defined data array. The code expects that each object has keys for name, avatar_url, and subtitle; missing these will cause incomplete renders. Dependencies: 'react-native-elements', React Native core, and suitable images; inputs are the 'list' array and outputs are a rendered collection of views.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/listitem.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Basic Tab Usage in React Native Elements\nDESCRIPTION: Demonstrates the basic usage of the Tab component with two tab items and state management for the active tab index.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RneTab() {\n  const [index, setIndex] = React.useState(0);\n  return (\n    <>\n      <Tab value={index} onChange={setIndex} dense>\n        <Tab.Item>Tab</Tab.Item>\n        <Tab.Item>Tab</Tab.Item>\n      </Tab>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Input Methods using Refs\nDESCRIPTION: Demonstrates how to call various Input component methods using the created ref.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs with State Management in TypeScript\nDESCRIPTION: Demonstrates a basic implementation of the Tab component using React state (`useState`) to manage the active tab index. It utilizes the `value` prop to set the current index and the `onChange` prop to update the state when a different tab is selected. `Tab.Item` is used to define individual tabs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tab.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RneTab() {\n  const [index, setIndex] = React.useState(0);\n  return (\n    <>\n      <Tab value={index} onChange={setIndex} dense>\n        <Tab.Item>Tab</Tab.Item>\n        <Tab.Item>Tab</Tab.Item>\n      </Tab>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Button Using React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Button component from the @rneui/base package and render it inside a functional React component using TypeScript. The example requires installation of @rneui/base and a TypeScript-enabled React Native project. The functional component App returns a simple Button with a title prop set to 'Hello World'; no additional props or theme customization are shown. Input is none; output is a single rendered button; limitations include lack of state, event handling, or custom styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from '@rneui/base';\n\nconst App = () => {\n  return <Button title=\"Hello World\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using makeStyles for external styling in React Native Elements\nDESCRIPTION: This example shows how to use makeStyles to create styles outside of a component, referencing the theme and component props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/1.themeprovider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from '@rneui/themed';\n\ntype Props = {\n  fullWidth?: boolean;\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Using ListItem with Icon and Chevron in React Native Elements (tsx)\nDESCRIPTION: Illustrates how to include an `Icon` component and a `ListItem.Chevron` within a `ListItem`. This example shows two list items, one for 'Inbox' and one for 'Trash', each featuring an icon from `material-community` type.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <ListItem>\n    <Icon name=\"inbox\" type=\"material-community\" color=\"grey\" />\n    <ListItem.Content>\n      <ListItem.Title>Inbox</ListItem.Title>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n  <ListItem>\n    <Icon name=\"trash-can-outline\" type=\"material-community\" color=\"grey\" />\n    <ListItem.Content>\n      <ListItem.Title>Trash</ListItem.Title>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n</>\n```\n\n----------------------------------------\n\nTITLE: Integrating RNE UI Theme with React Navigation - TypeScript\nDESCRIPTION: Shows how to use the current theme from useTheme and apply it to React Navigation's NavigationContainer, allowing for seamless synchronization of the color scheme and theme mode across navigation and app UI. Dependencies: '@rneui/themed', React Navigation, and React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst Navigation = () => {\n  const { theme } = useTheme();\n\n  return (\n    <NavigationContainer\n      theme={{\n        colors: {\n          primary: theme.colors.primary,\n          background: theme.colors.background,\n          card: theme.colors.white,\n          text: theme.colors.black,\n        },\n        dark: theme.mode === 'dark',\n      }}\n    >\n      {/*  Navigators */}\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Mixing Default and Custom Header Components in JavaScript/JSX\nDESCRIPTION: Demonstrates mixing different component types within the Header props. It uses a custom React component for `leftComponent`, a render function (`this.renderCenterComponent()`) for `centerComponent`, and a default configuration object for `rightComponent`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/header.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={this.renderCenterComponent()}\n  rightComponent={{ icon: 'home', style: { color: '#fff' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting a Themed Component in React Native\nDESCRIPTION: This snippet exports the `Buttons` component as the default export of the module. It uses the `withTheme` higher-order component (likely from react-native-elements or a similar theming library) to inject theme props into the `Buttons` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default withTheme(Buttons, '');\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package using TypeScript. It is necessary for integrating the ListItem.Accordion component into your project. No additional configuration is required beyond installing the React Native Elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Applying Object Styles to Button Container via Theme and Props (JSX)\nDESCRIPTION: This snippet shows how to define a `containerStyle` as an object within a theme for the `Button` component and also apply an object style directly via the `containerStyle` prop. This combination is indicated to work, suggesting that object-based styles from theme and props merge correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip with Popover in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and use the Tooltip component from React Native Elements with a custom popover. The Tooltip displays extra information when users tap on its child element. It depends on the 'react-native-elements' package and expects child components for display. The main parameters are the 'popover' (displayed on tooltip open) and children components. The rendered Tooltip wraps a Text element, and shows another Text as its popover.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Tooltip, Text } from 'react-native-elements';\n\n...\n\n<Tooltip popover={<Text>Info here</Text>}>\n  <Text>Press me</Text>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Area Provider\nDESCRIPTION: Example of how to wrap your React Native app with the SafeAreaProvider component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Spinner to Button in React Native\nDESCRIPTION: Shows how to add a loading spinner to a button using the loading prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" loading />\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to Custom Component using withTheme HOC (@rneui/themed)\nDESCRIPTION: Illustrates wrapping a custom React Native component (`CustomComponent`) with the `withTheme` higher-order component from `@rneui/themed`. This HOC injects `theme`, `updateTheme`, and `replaceTheme` props into the wrapped component, allowing it to access and interact with the theme. It also requires extending the `ComponentTheme` interface in `themed.d.ts` with a unique key (`ComponentKey`) and the component's props type for theme configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme } from '@rneui/themed';\n\ntype CustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>; // Note: StyleProps<TextStyle> might need adjustment based on actual/imported types\n};\n\nconst CustomComponent = (props: CustomComponentProps & { theme: any, updateTheme: any, replaceTheme: any }) => { // Added theme props type hint\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n};\n\nexport default withTheme<CustomComponentProps>(CustomComponent, 'ComponentKey');\n\ndeclare module '@rneui/themed' {\n  export interface ComponentTheme {\n    ComponentKey: Partial<CustomComponentProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component from React Native Elements\nDESCRIPTION: Shows how to import the Tooltip component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Heading Styles with Font Weights for Android (TSX)\nDESCRIPTION: This snippet provides an example configuration object for custom heading styles (`h1Style`, `h2Style`, `h3Style`). It assigns specific `fontFamily` ('Nunito') and `fontWeight` values. The associated note emphasizes that on Android, the specified `fontWeight` must correspond to an actual weight available in the loaded font file for it to render correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n\n    h1Style: {\n      fontFamily: 'Nunito-SemiBold',\n      fontWeight: '300',\n    },\n    h2Style: {\n      fontFamily: 'Nunito-Regular',\n      fontWeight: '100',\n    },\n    h3Style: {\n      fontFamily: 'Nunito-Bold',\n      fontWeight: '500',\n    },\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing SearchBar Methods Using Refs in React Native\nDESCRIPTION: Example showing how to create and use a reference to the SearchBar component to access its methods like focus(), blur(), clear(), and cancel(). This pattern enables programmatic control of the SearchBar.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/searchbar.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n\nLANGUAGE: js\nCODE:\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context with Yarn (Bash)\nDESCRIPTION: Installs the `react-native-safe-area-context` package using Yarn. This is a required peer dependency for React Native Elements to handle safe areas correctly on different devices.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Dialog.Actions Customization\nDESCRIPTION: This identifies `DialogActions` as the theme key used for customizing the appearance of the `Dialog.Actions` component via the `ThemeProvider` in `@rneui/themed`. This allows for consistent styling across the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.Actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDialogActions\n```\n\n----------------------------------------\n\nTITLE: Installing Stable RNEUI with NPM\nDESCRIPTION: Installs the stable versions of the core React Native Elements packages (@rneui/themed and @rneui/base) using the npm package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradients to Buttons in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Shows how to apply a linear gradient background to a Button component using the 'react-native-linear-gradient' package. It requires importing 'LinearGradient' and passing it as the 'ViewComponent' prop to the Button. The gradient's appearance (colors, start/end points) is configured via the 'linearGradientProps' object. This setup is necessary for react-native-cli projects after installing the gradient package; Expo/CRNA users might have built-in support.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/button.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Button\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Colored Buttons in React Native Elements\nDESCRIPTION: Demonstrates how to apply different colors to buttons using the color prop. Available colors include primary (default), secondary, warning, and error.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button>Primary</Button>\n  <Button color=\"secondary\">Secondary</Button>\n  <Button color=\"warning\">Warning</Button>\n  <Button color=\"error\">Error</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the ListItem component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Subtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Button Variants in React Native Elements\nDESCRIPTION: Demonstrates the three button variants: solid (default), outline, and clear. Each type has a different visual style while maintaining the same functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button title=\"Solid\" />\n  <Button title=\"Outline\" type=\"outline\" />\n  <Button title=\"Clear\" type=\"clear\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing Header from React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Header component from the '@rneui/themed' package in a React Native project. It has no dependencies outside of the core React Native Environment and the '@rneui/themed' package. The Header component serves as a navigation UI element, supporting further customization through its rich set of props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Header } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using useThemeMode Hook in React Native Elements\nDESCRIPTION: Shows how to implement theme mode switching using the useThemeMode hook. Provides access to current theme mode and setMode function for toggling between light and dark themes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/1.themprovider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThemeMode } from '@rneui/themed';\n\nfunction Demo() {\n  const { mode, setMode } = useThemeMode();\n\n  return <Button onPress={() => setMode('dark')} title={mode} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Light/Dark Themes in React Native Elements (JSX)\nDESCRIPTION: Demonstrates how to create a custom theme using `createTheme` from `@rneui/themed`. It overrides the default `primary` color for both `lightColors` and `darkColors`. The custom theme is then applied globally to the application components using the `ThemeProvider` component, wrapping the application's root.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/2.theme object.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab and TabView Navigation with React Native Elements (JavaScript)\nDESCRIPTION: This snippet defines a React functional component that renders a set of tabs using the Tab and TabView components from react-native-elements. It maintains tab state with React.useState, setting the currently selected tab and updating the displayed content accordingly. The implementation requires the react-native-elements package and React Native environment; the Tab items each display a unique icon and title, and the corresponding TabView displays a stylized content screen for each selected tab. Parameters include the initial tab index and custom styles for the tab indicator and tab items. The output is a fully interactive tabbed UI with animated transitions, intended as a pattern for organizing multi-section app screens.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Tab/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Tab, Text, TabView } from 'react-native-elements';\\n\\nexport default () => {\\n  const [index, setIndex] = React.useState(0);\\n\\n  return (\\n    <>\\n      <Tab\\n        value={index}\\n        onChange={(e) => setIndex(e)}\\n        indicatorStyle={{\\n          backgroundColor: 'white',\\n          height: 3,\\n        }}\\n        variant=\"primary\"\\n      >\\n        <Tab.Item\\n          title=\"Recent\"\\n          titleStyle={{ fontSize: 12 }}\\n          icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\\n        />\\n        <Tab.Item\\n          title=\"favorite\"\\n          titleStyle={{ fontSize: 12 }}\\n          icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\\n        />\\n        <Tab.Item\\n          title=\"cart\"\\n          titleStyle={{ fontSize: 12 }}\\n          icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\\n        />\\n      </Tab>\\n\\n      <TabView value={index} onChange={setIndex} animationType=\"spring\">\\n        <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\\n          <Text h1>Recent</Text>\\n        </TabView.Item>\\n        <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\\n          <Text h1>Favorite</Text>\\n        </TabView.Item>\\n        <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\\n          <Text h1>Cart</Text>\\n        </TabView.Item>\\n      </TabView>\\n    </>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing ListItem Checkmark with Icon in React Native Elements\nDESCRIPTION: This code shows how to replace the deprecated checkmark prop with an Icon component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2020-08-10-2.3-upgrade-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Icon name=\"check\" size={20} />\n```\n\n----------------------------------------\n\nTITLE: Importing CheckBox Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the CheckBox component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CheckBox } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Theme Colors in a Component using useTheme (@rneui/themed)\nDESCRIPTION: Shows how to access the theme object, including custom defined colors like 'accent', within a React functional component using the `useTheme` hook provided by `@rneui/themed`. The retrieved custom color is then used to style a standard React Native `Text` component. This component must be rendered within a `ThemeProvider` hierarchy.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Component.tsx\nexport const Component = () => {\n  const { theme } = useTheme();\n  return <Text style={{ color: theme.colors.accent }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the Text Component in React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import the `Text` component from the `@rneui/themed` package. This import is the first step required to utilize the themed `Text` component in a React Native application using React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Colors to Buttons using TypeScript\nDESCRIPTION: Illustrates setting predefined theme colors for the Button component using the `color` prop. It shows buttons with primary (default), secondary, warning, and error colors, laid out horizontally using the `Stack` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button>Primary</Button>\n  <Button color=\"secondary\">Secondary</Button>\n  <Button color=\"warning\">Warning</Button>\n  <Button color=\"error\">Error</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons using Yarn for React Native Init\nDESCRIPTION: Installs the `react-native-vector-icons` library using yarn. This library is a common dependency for React Native Elements and often the source of font-related errors if not correctly installed and linked in `react-native-init` projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Accessing the Accordion Theme Key (JavaScript)\nDESCRIPTION: This snippet displays the theme key identifier \"ListItemAccordion\", which is used in React Native Elements ThemeProvider customization. This key allows users to override default accordion styles and behavior. Include this string as a reference when theming components to ensure consistent styling for all accordion list items.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Accordion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemAccordion\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient to Button in React Native\nDESCRIPTION: Shows how to apply a linear gradient background to a button using the ViewComponent and linearGradientProps.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n>\n  Linear Gradient\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Applying Theming with ThemeProvider in React Native Elements (JSX/JavaScript)\nDESCRIPTION: This snippet illustrates how to wrap your application in a ThemeProvider from '@rneui/themed' and utilize themed components such as Button. It requires the '@rneui/themed' package and React. ThemeProvider ensures a consistent theme (like colors and styles) throughout all child components. Input: no parameters. Output: Button UI element rendered with inherited theme properties. This approach enables centralized control of component props and visual appearance in your React Native app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from '@rneui/themed';\\n\\nconst MyApp = () => {\\n  return (\\n    <ThemeProvider>\\n      <Button title=\\\"Hey!\\\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Text Component with Custom Props using styled in TypeScript\nDESCRIPTION: Example of using `styled` with custom props defined via a TypeScript type (`MyCompProps`). It creates a styled `Component` (wrapping `Text`) where the `fontWeight` style is conditionally set based on the `bold` prop passed to the component. It also demonstrates accessing the theme (`theme.colors.primary`) within the style function alongside props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntype MyCompProps = { bold?: boolean };\n\nconst Component = styled(Text)<MyCompProps>((theme, { bold }) => ({\n  root: {\n    fontWeight: bold ? 'bold' : 'normal',\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs and TabItem from @theme for Documentation (JavaScript)\nDESCRIPTION: Demonstrates importing documentation-specific components (Tabs and TabItem) from the @theme package, which are used for organizing tabbed sections in the documentation site. No props or further contextual functionality are shown for these imports. No operational code is executed, as these are solely for content structure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Image Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Image` component from the `@rneui/themed` library in a TypeScript React Native project. This import is necessary to use the enhanced image features provided by React Native Elements, such as placeholder content and smooth transitions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using LinearGradient Background in Header with JSX\nDESCRIPTION: Shows how to apply a linear gradient background to the React Native Elements Header. It requires importing `LinearGradient` from `react-native-linear-gradient`, setting it as the `ViewComponent` prop, and configuring the gradient properties via the `linearGradientProps` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/header.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchBar Component with State Management\nDESCRIPTION: Complete example of a SearchBar implementation using React hooks for state management. Shows how to handle search input changes and style the component using StyleSheet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/SearchBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SearchBar } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SearchBarComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\nconst [search, setSearch] = useState(\"\");\n\nconst updateSearch = (search) => {\n  setSearch(search);\n};\n\nreturn (\n  <View style={styles.view}>\n    <SearchBar\n      placeholder=\"Type Here...\"\n      onChangeText={updateSearch}\n      value={search}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Using Extended Component Props in a React Native Component\nDESCRIPTION: Shows the usage of a default RNE component (`Text`) with the newly added custom prop (`bold`) within an application component (`App.tsx`). The `Text` component with the `bold` prop will automatically receive the `fontWeight: 'bold'` style defined in the theme configuration, while the standard `Text` component retains its default weight.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme(); // Assumes theme is provided via ThemeProvider higher up\n  return (\n    <View>\n      <Text>Normal Text</Text>\n      <Text bold>Bold Text</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating LinearGradient with RNE Header in JSX\nDESCRIPTION: Demonstrates how to apply a linear gradient background to the React Native Elements Header component. It requires importing `Header` from `@rneui/themed` and `LinearGradient` from `react-native-linear-gradient`. The `LinearGradient` component is passed to the `ViewComponent` prop, and its properties (like `colors`, `start`, `end`) are configured through the `linearGradientProps` prop. Note that `react-native-cli` users need to follow separate installation instructions for `react-native-linear-gradient`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic CheckBox Components in React Native\nDESCRIPTION: Demonstrates basic usage of the `CheckBox` component with state management using `React.useState`. It shows toggling the checked state (`onPress`), using different `iconType`, `checkedIcon`, `uncheckedIcon`, `checkedColor`, and displaying a disabled checkbox.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/CheckBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [checked, setChecked] = React.useState(true);\n     const toggleCheckbox = () => setChecked(!checked);\n     return (\n       <Stack row align=\"center\" spacing={1}>\n         <CheckBox\n           checked={checked}\n           onPress={toggleCheckbox}\n           // Use ThemeProvider to make change for all checkbox\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-marked\"\n           uncheckedIcon=\"checkbox-blank-outline\"\n           checkedColor=\"red\"\n         />\n         <CheckBox\n           checked={checked}\n           onPress={toggleCheckbox}\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-outline\"\n           uncheckedIcon={'checkbox-blank-outline'}\n         />\n         <CheckBox\n           checked={false}\n           disabled\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-outline\"\n           uncheckedIcon={'checkbox-blank-outline'}\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Tooltip with State Control (TSX)\nDESCRIPTION: Demonstrates a functional React component (`RNETooltip`) using the `Tooltip` component from React Native Elements. It utilizes the `useState` hook to manage the tooltip's visibility state (`open`). The `popover` prop defines the content displayed within the tooltip (a Text component), and the `onOpen`/`onClose` props are used to toggle the visibility state when the tooltip is interacted with. The tooltip wraps the text 'Click me'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RNETooltip() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Stack row align=\"center\">\n      <Tooltip\n        visible={open}\n        onOpen={() => setOpen(true)}\n        onClose={() => setOpen(false)}\n        popover={<Text style={{ color: \"#fff\" }}>Tooltip text</Text>}\n      >\n        Click me\n      </Tooltip>\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable List Items with React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how to use ListItem.Swipeable from the React Native Elements library to create list items that support swipe gestures for left and right actions. Dependencies include React Native, react-native-elements, and associated Button and Icon components. The component accepts leftContent and rightContent functions, each receiving a reset callback, and renders custom Button components with icons for actions like 'Info' and 'Delete'. Inputs are swipe gestures; outputs are UI responses and any executed onPress logic. Limitations include requiring proper imports and usage within a React Native environment, as well as managing swipe state through provided handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<ListItem.Swipeable\n  leftContent={(reset) => (\n    <Button\n      title=\"Info\"\n      onPress={() => reset()}\n      icon={{ name: 'info', color: 'white' }}\n      buttonStyle={{ minHeight: '100%' }}\n    />\n  )}\n  rightContent={(reset) => (\n    <Button\n      title=\"Delete\"\n      onPress={() => reset()}\n      icon={{ name: 'delete', color: 'white' }}\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n    />\n  )}\n>\n  <Icon name=\"My Icon\" />\n  <ListItem.Content>\n    <ListItem.Title>Hello Swiper</ListItem.Title>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Values in Functional Components using the useTheme Hook (TypeScript)\nDESCRIPTION: Demonstrates using the `useTheme` hook from `@rneui/themed` within a functional component to access the current theme object. The theme's primary color is then applied to a `Text` component's style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/0.index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from '@rneui/themed';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Edge RNEui Packages from GitHub with NPM (Bash)\nDESCRIPTION: Provides commands to install the bleeding-edge versions of `@rneui/base` and `@rneui/themed` directly from their respective GitHub branches (`base` and `themed`) using npm. This is an alternative if the `@edge` tag causes issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nnpm install react-native-elements/react-native-elements#base\n\n# @rneui/themed\nnpm install react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Utilizing Custom Theme Properties in App Component - TypeScript\nDESCRIPTION: This code shows how to access and display a custom property added to the theme object from within a React component using the useTheme hook. It expects prior augmentation of the theme interface and provides a Text component that derives its value from the custom property. Dependencies: useTheme hook, a theme with custom properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text>{theme.myCustomProperty}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SpeedDial with Actions in React Native (JSX)\nDESCRIPTION: This JSX snippet demonstrates the implementation of the `SpeedDial` component. It uses a state variable `open` to manage its visibility, defines icons for both closed (`icon`) and open (`openIcon`) states, and sets up event handlers (`onOpen`, `onClose`) to toggle the state. Nested `SpeedDial.Action` components define individual actions ('Add', 'Delete') with their respective icons, titles, and press handlers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/speeddial.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<SpeedDial\n  isOpen={open}\n  icon={{ name: 'edit', color: '#fff' }}\n  openIcon={{ name: 'close', color: '#fff' }}\n  onOpen={() => setOpen(!open)}\n  onClose={() => setOpen(!open)}\n>\n  <SpeedDial.Action\n    icon={{ name: 'add', color: '#fff' }}\n    title=\"Add\"\n    onPress={() => console.log('Add Something')}\n  />\n  <SpeedDial.Action\n    icon={{ name: 'delete', color: '#fff' }}\n    title=\"Delete\"\n    onPress={() => console.log('Delete Something')}\n  />\n</SpeedDial>\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Avatars using FlatList in React Native\nDESCRIPTION: This snippet demonstrates how to use React Native's FlatList component to render a list of items with avatars using the ListItem and Avatar components from React Native Elements. It defines a keyExtractor and renderItem function to handle list rendering efficiently.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accordion ListItems with React Native Elements (TypeScript/React Native)\nDESCRIPTION: This code snippet implements a collapsible list (Accordion) using ListItem.Accordion from RNE and React state hooks for toggling expansion. It shows how to nest regular ListItems within the expanded section and how to set custom content using ListItem.Content. Dependencies: '@rneui/themed', React. Inputs: content components, isExpanded prop, onPress event handler. Outputs: user-interactive expandable/collapsible section. Requires managing local expanded state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction RNEListItemAccordion() {\n  const [expanded, setExpanded] = React.useState(false);\n  return (\n    <>\n      <ListItem.Accordion\n        content={\n          <ListItem.Content>\n            <ListItem.Title>Top Users</ListItem.Title>\n            <ListItem.Subtitle>Tap to expand</ListItem.Subtitle>\n          </ListItem.Content>\n        }\n        isExpanded={expanded}\n        onPress={() => {\n          setExpanded(!expanded);\n        }}\n      >\n        <ListItem>\n          <Avatar\n            rounded\n            source={{\n              uri: \"https://randomuser.me/api/portraits/men/32.jpg\",\n            }}\n          />\n          <ListItem.Content>\n            <ListItem.Title>John Doe</ListItem.Title>\n            <ListItem.Subtitle>Principle Engineer</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n        <ListItem>\n          <Avatar\n            rounded\n            source={{\n              uri: \"https://randomuser.me/api/portraits/men/36.jpg\",\n            }}\n          />\n          <ListItem.Content>\n            <ListItem.Title>Albert</ListItem.Title>\n            <ListItem.Subtitle>Staff Engineer</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      </ListItem.Accordion>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending RNE Colors Typings using TypeScript Declaration Merging - TypeScript\nDESCRIPTION: This snippet shows how to augment RNE's Colors type by declaring additional custom colors through TypeScript module augmentation. It imports '@rneui/themed' to ensure proper typing and extends the Colors interface. Required dependency: '@rneui/themed'. Key properties include 'primaryLight', 'primaryDark', 'secondaryLight', and 'secondaryDark', all of which are strings. This enables autocompletion and type safety for custom color values used in RNE's theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Colors {\n    primaryLight: string;\n    primaryDark: string;\n    secondaryLight: string;\n    secondaryDark: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Input Methods in React Native\nDESCRIPTION: This code shows how to call various methods on an Input component using the stored reference. Methods include focus, blur, clear, isFocused, setNativeProps, and shake.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple CheckBoxes in TypeScript\nDESCRIPTION: Demonstrates basic CheckBox usage with state management using React.useState. It shows how to toggle the checked state via onPress, customize icons (using iconType, checkedIcon, uncheckedIcon), set checkedColor, and display a disabled checkbox.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/CheckBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [checked, setChecked] = React.useState(true);\n     const toggleCheckbox = () => setChecked(!checked);\n     return (\n       <Stack row align=\"center\" spacing={1}>\n         <CheckBox\n           checked={checked}\n           onPress={toggleCheckbox}\n           // Use ThemeProvider to make change for all checkbox\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-marked\"\n           uncheckedIcon=\"checkbox-blank-outline\"\n           checkedColor=\"red\"\n         />\n         <CheckBox\n           checked={checked}\n           onPress={toggleCheckbox}\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-outline\"\n           uncheckedIcon={'checkbox-blank-outline'}\n         />\n         <CheckBox\n           checked={false}\n           disabled\n           iconType=\"material-community\"\n           checkedIcon=\"checkbox-outline\"\n           uncheckedIcon={'checkbox-blank-outline'}\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Colors - React Native Elements - TSX\nDESCRIPTION: Demonstrates how to apply different color schemes to Button components by setting the 'color' prop. The Stack layout is used for horizontal alignment, and colors include primary, secondary, warning, and error. Inputs include the 'color' attribute, and outputs are visually distinct colored buttons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\\\"center\\\" spacing={4}>\n  <Button>Primary</Button>\n  <Button color=\\\"secondary\\\">Secondary</Button>\n  <Button color=\\\"warning\\\">Warning</Button>\n  <Button color=\\\"error\\\">Error</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Composing Styled Button Components with React Native Elements (JavaScript/React Native)\nDESCRIPTION: This snippet demonstrates how to compose a custom button component by wrapping the React Native Elements Button with preset styles and props (e.g., raised). The custom RaisedButton component can be reused throughout the app and still receives additional props as needed. Required dependencies include the react-native-elements library, and the custom component supports all Button props. The expected input is button props, and output is a styled button component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native-elements';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Themed Custom Component with withTheme HOC in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom React Native component (`MyCustomComponent`) that receives theme properties (`theme`, `updateTheme`, `replaceTheme`) by wrapping it with the `withTheme` HOC from `@rneui/themed`. It also shows how to extend the `FullTheme` interface to include type definitions for the custom component's theme properties, enhancing type safety. Requires `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title='MyComponent.tsx'\nimport { Button, createTheme, withTheme } from '@rneui/themed';\n\ntype MyCustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nexport const MyCustomComponent = withTheme<MyCustomComponentProps>((props) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n});\n\ndeclare module '@rneui/themed' {\n  export interface FullTheme {\n    MyCustomComponent: Partial<MyCustomComponentProps>;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Component in React Native Elements\nDESCRIPTION: A TypeScript React Native component that showcases different implementations of the Divider component from React Native Elements. Demonstrates horizontal dividers, vertical dividers, dividers with insets, and dividers with subheaders. Uses themed colors and custom styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { Text, Divider, useTheme } from '@rneui/themed';\nimport { ScrollView, StyleSheet, View } from 'react-native';\n\ntype DividerViewTypes = {};\n\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\nconst { theme } = useTheme();\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\n        <Divider />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with width and color\n        </Text>\n        <Divider width={5} color={theme?.colors?.primary} />\n      </View>\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with left inset\n        </Text>\n        <Divider inset={true} />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with right inset\n        </Text>\n        <Divider inset={true} insetType=\"right\" />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with middle inset\n        </Text>\n        <Divider inset={true} insetType=\"middle\" />\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\n      </View>\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" />\n        <Text>Right text</Text>\n      </View>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" width={5} />\n        <Text>Right text</Text>\n      </View>\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Left text</Text>\n        <Divider\n          subHeader=\"Divider\"\n          inset={true}\n          subHeaderStyle={{ color: theme?.colors?.primary }}\n        />\n        <Text style={styles.horizontalText}>Right text</Text>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n},\nhorizontal: {\n  marginBottom: 10,\n},\nhorizontalText: {\n  textAlign: 'center',\n  fontSize: 16,\n  marginVertical: 10,\n},\nvertical: {\n  marginBottom: 10,\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n},\n});\n\nexport default DividerView;\n```\n\n----------------------------------------\n\nTITLE: Implementing SocialIcon in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the `SocialIcon` component from `react-native-elements`. It shows examples of rendering the component both as a simple icon (with variations like `raised` and `light` props) and as a button (using the `button` prop and optionally a `title`) for different social media types like 'twitter', 'gitlab', 'medium', 'facebook', and 'instagram'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/social_icons.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { SocialIcon } from 'react-native-elements'\n\n// Icon\n<SocialIcon\n  type='twitter'\n/>\n\n<SocialIcon\n  raised={false}\n  type='gitlab'\n/>\n\n<SocialIcon\n  light\n  type='medium'\n/>\n\n<SocialIcon\n  light\n  raised={false}\n  type='medium'\n/>\n\n\n// Button\n<SocialIcon\n  title='Sign In With Facebook'\n  button\n  type='facebook'\n/>\n\n<SocialIcon\n  title='Some Twitter Message'\n  button\n  type='twitter'\n/>\n\n<SocialIcon\n  button\n  type='medium'\n/>\n\n<SocialIcon\n  button\n  light\n  type='instagram'\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Clear Button in React Native Elements\nDESCRIPTION: This snippet shows how to create a 'clear' style `Button` by setting the `type` prop to `clear`. Clear buttons typically have no background or border, appearing as plain text or an icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Clear Button\" type=\"clear\" />\n```\n\n----------------------------------------\n\nTITLE: ListItem with Custom Subtitle View for Ratings - React Native Elements JavaScript\nDESCRIPTION: This snippet shows a ListItem with a customized subtitle area, combining text and images in a horizontal layout by embedding a View inside ListItem.Content. StyleSheet is used to define custom styles for subtitle arrangement. Dependencies: 'react-native', 'react-native-elements', and locally available images. Inputs include assets for avatars and ratings.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/listitem.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nrender () {\n  return (\n    <ListItem>\n      <Avatar source={require('../images/avatar1.jpg')} />\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion ListItem in TSX\nDESCRIPTION: Provides a functional component example demonstrating the `ListItem.Accordion` variant for creating collapsible list items. It uses `React.useState` to manage the expanded/collapsed state and renders nested `ListItem` components when expanded.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RNEListItemAccordion() {\n  const [expanded, setExpanded] = React.useState(false);\n  return (\n    <>\n      <ListItem.Accordion\n        content={\n          <ListItem.Content>\n            <ListItem.Title>Top Users</ListItem.Title>\n            <ListItem.Subtitle>Tap to expand</ListItem.Subtitle>\n          </ListItem.Content>\n        }\n        isExpanded={expanded}\n        onPress={() => {\n          setExpanded(!expanded);\n        }}\n      >\n        <ListItem>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/men/32.jpg',\n            }}\n          />\n          <ListItem.Content>\n            <ListItem.Title>John Doe</ListItem.Title>\n            <ListItem.Subtitle>Principle Engineer</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n        <ListItem>\n          <Avatar\n            rounded\n            source={{\n              uri: 'https://randomuser.me/api/portraits/men/36.jpg',\n            }}\n          />\n          <ListItem.Content>\n            <ListItem.Title>Albert</ListItem.Title>\n            <ListItem.Subtitle>Staff Engineer</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      </ListItem.Accordion>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar from React Native Elements - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct import statement for including the Avatar component from the @rneui/themed package in a TypeScript (TSX) React Native project. To use Avatar.Accessory, developers should ensure @rneui/themed is installed as a dependency. The import brings the entire Avatar object, which includes the Accessory subcomponent for extending avatar UI elements with additional icons or images.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from \"@rneui/themed\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing CheckBox Component in React Native\nDESCRIPTION: Shows how to import the `CheckBox` component from the `@rneui/themed` package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckBox } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using withTheme HOC for Custom Component Theming in React Native\nDESCRIPTION: Illustrates wrapping a custom React Native component (`CustomComponent`) with the `withTheme` Higher-Order Component (HOC) from `@rneui/themed`. This HOC injects `theme`, `updateTheme`, and `replaceTheme` props into the wrapped component, allowing it to access and potentially modify the theme. The example also includes the necessary TypeScript declaration merging in `themed.d.ts` to add the custom component's theme configuration key (`ComponentKey`) and its props (`CustomComponentProps`) to the `ComponentTheme` interface. The `ComponentKey` provided to `withTheme` must be unique and match the key used in the theme configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withTheme, StyleProps, ThemeProps } from '@rneui/themed'; // Note: Added missing imports for clarity\nimport { TextStyle } from 'react-native'; // Note: Added missing import for clarity\n\ntype CustomComponentProps = {\n  title: string;\n  titleStyle?: StyleProps<TextStyle>; // Optional for theme override\n} & Partial<ThemeProps<CustomComponentProps>>; // Include theme props injected by HOC\n\nconst CustomComponent = (props: CustomComponentProps) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme, title, titleStyle } = props;\n  // ... component logic using title, titleStyle, and potentially theme\n  return <></>; // Placeholder return\n};\n\nexport default withTheme<CustomComponentProps>(CustomComponent, 'ComponentKey');\n\ndeclare module '@rneui/themed' {\n  export interface ComponentTheme {\n    ComponentKey: Partial<CustomComponentProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic SearchBar in React Native (JSX)\nDESCRIPTION: Demonstrates the basic usage of the SearchBar component within a React class component. It imports the component, manages the search input's value using component state, updates the state via the `onChangeText` prop, and renders the SearchBar with a placeholder.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/searchbar.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { SearchBar } from 'react-native-elements';\n\nexport default class App extends React.Component {\n  state = {\n    search: '',\n  };\n\n  updateSearch = (search) => {\n    this.setState({ search });\n  };\n\n  render() {\n    const { search } = this.state;\n\n    return (\n      <SearchBar\n        placeholder=\"Type Here...\"\n        onChangeText={this.updateSearch}\n        value={search}\n      />\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing the Tab Component in JavaScript/TypeScript\nDESCRIPTION: Imports the `Tab` component from the `@rneui/themed` library, making it available for use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tab } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Button Variants Example in React Native Elements\nDESCRIPTION: Demonstrates the three button variants: solid (default), outline, and clear, arranged in a Stack component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button title=\"Solid\" />\n  <Button title=\"Outline\" type=\"outline\" />\n  <Button title=\"Clear\" type=\"clear\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Applying Platform-Specific Native Colors in React Native Elements (JSX)\nDESCRIPTION: Shows how to configure the theme to use native platform colors. It utilizes `createTheme` from `@rneui/themed` and `Platform.select` from `react-native` to merge the appropriate platform-specific colors (`lightColors.platform.android` or `lightColors.platform.ios`) into the theme's `lightColors` configuration based on the current operating system. This allows components like `Button` to adopt the native look and feel automatically when wrapped in the `ThemeProvider`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/2.theme object.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay for Web with a Custom Modal in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet shows how to override the default Modal component of the Overlay to enable compatibility with the web via modal-react-native-web. Users must import a compatible Modal and supply it to the ModalComponent prop. Dependencies: modal-react-native-web, react-native-elements; input is an Overlay component with ModalComponent set; output is a working overlay for web environments where the native Modal is unavailable. Limitation: The ModalComponent prop is required only for web-platform usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/overlay.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Overlay ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Creating an Icon ButtonGroup in React Native Elements\nDESCRIPTION: Example of a ButtonGroup with icon buttons and customized styling. This component tracks the selected index state and updates it when buttons are pressed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ButtonGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction () {\n     const [selectedIndex, setSelectedIndex] = React.useState(0);\n     return (\n       <ButtonGroup\n         buttonStyle={{ padding: 10 }}\n         selectedButtonStyle={{ backgroundColor: '#e2e2e2' }}\n         buttons={[\n           <Icon name=\"format-align-left\" />,\n           <Icon name=\"format-align-center\" />,\n           <Icon name=\"format-align-right\" />,\n         ]}\n         selectedIndex={selectedIndex}\n         onPress={setSelectedIndex}\n       />\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Clearing iOS Build Cache (Bash)\nDESCRIPTION: Command to remove the iOS build directory (`ios/build`). This can resolve 'Unrecognized font' errors on iOS that sometimes occur after linking or installing font-related dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ios/build\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Component\nDESCRIPTION: Shows how to import the Rating component from react-native-elements along with required theme components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Rating.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing SocialIcon Component in React Native Elements - TypeScript\nDESCRIPTION: This code snippet shows how to import the SocialIcon component from the '@rneui/themed' package into a TypeScript-based React Native project. It requires that '@rneui/themed' be installed as a project dependency. The imported SocialIcon component can then be used to display or interact with social media icons throughout the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SocialIcon } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Displaying a Loading Spinner in a Button using TypeScript\nDESCRIPTION: Demonstrates how to show an activity indicator (loading spinner) within a Button by setting the `loading` prop to `true`. This visually indicates that an operation is in progress, and typically disables the button.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" loading />\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component with React Native Elements (TypeScript)\nDESCRIPTION: Demonstrates how to import the Dialog component from the @rneui/themed package using TypeScript syntax. This import is a prerequisite for utilizing the Dialog UI element, which can receive both its own and Overlay props. No additional dependencies are required beyond the @rneui/themed library. The imported Dialog is typically rendered within a React component to present modal dialogs or overlays to users.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FAB Variants with Icons and Titles in React Native Elements (TypeScript/JSX)\nDESCRIPTION: This JSX code demonstrates how to render different FAB variantsâ€”small FAB with an icon, small FAB with a title, and extended FAB with both title and iconâ€”using the React Native Elements library. It utilizes Stack for horizontal alignment and spacing, and each FAB component uses available props such as size, title, and icon with color customization. Dependencies include @rneui/themed, and the Stack and FAB components. Inputs are component props; outputs are rendered FAB UI elements in the app. The code is intended for use in TypeScript/React Native environments, with the limitation that live preview or playground support is implied.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/FAB.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <FAB\n    size=\"small\"\n    icon={{\n      name: \"place\",\n      color: \"white\",\n    }}\n  />\n  <FAB size=\"small\" title=\"Solid\" />\n  <FAB\n    size=\"small\"\n    title=\"Extended\"\n    icon={{\n      name: \"place\",\n      color: \"white\",\n    }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Custom Controlled Tooltip Component - js\nDESCRIPTION: Demonstrates creating a controlled Tooltip component using React state to manage visibility, with appropriate handling for 'onOpen' and 'onClose' events. Requires React, Tooltip and related Props. The 'props' spread ensures further configurability.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst ControlledTooltip: React.FC<TooltipProps> = (props) => {\\n  const [open, setOpen] = React.useState(false);\\n  return (\\n    <Tooltip\\n      visible={open}\\n      onOpen={() => {\\n        setOpen(true);\\n      }}\\n      onClose={() => {\\n        setOpen(false);\\n      }}\\n      {...props}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Icon Component\nDESCRIPTION: Demonstrates how to specify the theme key for the Icon component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Icon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nIcon\n```\n\n----------------------------------------\n\nTITLE: Displaying Headings with Text Component in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Demonstrates using the Text component from react-native-elements with the h1, h2, h3, and h4 boolean props to render text as headings of different predefined sizes (40, 34, 28, and 22 respectively). This requires the Text component from the react-native-elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/text.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Text h1>Heading 1</Text>\n<Text h2>Heading 2</Text>\n<Text h3>Heading 3</Text>\n<Text h4>Heading 4</Text>\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component in React Native\nDESCRIPTION: This code demonstrates how to use the Switch component in a React Native application. It includes state management for the switch value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RNESwitch() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Stack row align=\"center\">\n      <Switch value={open} onValueChange={setOpen} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo Project with Bleeding Edge RNE Template\nDESCRIPTION: Uses the Expo CLI to initialize a new React Native project named 'app' using the official bleeding-edge React Native Elements template (`@rneui/template@edge`). This sets up a project with the latest, potentially unstable, version of RNE pre-configured.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Importing Card With Image Support in React Native Elements (TypeScript)\nDESCRIPTION: This snippet shows how to import the Card component from the \"@rneui/themed\" package, which provides support for Card.Image to display images in card layouts. No additional dependencies other than react-native-elements (@rneui/themed) are required. The import is necessary for enabling extended Card capabilities, including image display and enriched gesture handling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Card.Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Component Availability Based on Package Version - Markdown Note\nDESCRIPTION: This Markdown code snippet notes version-specific component availability within the React Native Elements package. It indicates that 'FormInput' is only present in v0.19.1 and below, while 'Input' is only available from v1.0.0-beta1 upwards. This serves to guide developers in choosing the appropriate components corresponding to their installed package version. It relies on accurate awareness of project dependency versions specified in 'package.json'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nExample:\\n\\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Creating Themed Styles with makeStyles Hook Generator in React Native Elements (TypeScript)\nDESCRIPTION: This example showcases the `makeStyles` hook generator for creating style objects that depend on the theme and component props. It defines a `useStyles` hook which takes the theme and optional props to generate styles (`container`, `text`), promoting style encapsulation and reusability outside the component definition. It depends on `@rneui/themed`, `react-native`, and assumes `Props` type is defined elsewhere. Note the direct use of `theme.colors.primary` in the `Text` component might be an illustrative simplification, as typically `styles.text` would be used.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/overview.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from '@rneui/themed';\n\ntype Params = {\n  fullWidth?: boolean;\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Badge Component Import Declaration\nDESCRIPTION: Import statement for Badge component usage in React Native Elements\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Updating the Theme Dynamically with updateTheme (TypeScript)\nDESCRIPTION: This concise snippet demonstrates how to update the existing theme using the updateTheme function, replacing only the specified theme keys (here, setting lightColors.primary to 'purple'). Requires a context with updateTheme function available (typically from useTheme). Modifies the color palette at runtime.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nupdateTheme({\n  lightColors: {\n    primary: 'purple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Function Signature of `makeStyles` in `@rneui/themed` (TypeScript/TSX)\nDESCRIPTION: Displays the function signature for the `makeStyles` hook generator. It accepts either a static style object (`Styles`) or a function that receives the theme object and optional component props, returning a `Styles` object. This allows for dynamic, theme-aware, and prop-dependent styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmakeStyles(styles: Styles | ((theme, props) => Styles))\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref for Programmatic Tooltip Control (JavaScript)\nDESCRIPTION: Illustrates how to create a React ref for Tooltip using useRef, enabling imperative control. Requires understanding of React refs and functional components. The code creates a ref object to be attached to Tooltip via its 'ref' prop, allowing functions (like toggleTooltip) to be called externally.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/tooltip.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tooltipRef = useRef(null);\n\n...\n\n<Tooltip\n  ref={tooltipRef}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing SpeedDial Actions with React Native Elements - JavaScript\nDESCRIPTION: This snippet showcases a functional React component utilizing the SpeedDial and SpeedDial.Action components from the @rneui/themed library. It demonstrates the useState hook to manage state, props for customizing icons and action titles, and onPress event handlers for logging. Dependencies include React, React Native, and @rneui/themed. Inputs include interactions with the SpeedDial; outputs are console logs when actions are pressed. The component expects a React Native context and is suitable for scenarios needing a floating, multi-action button.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { SpeedDial } from '@rneui/themed';\n\nexport default () => {\nconst [open, setOpen] = React.useState(false);\nreturn (\n  <SpeedDial\n    isOpen={open}\n    icon={{ name: 'edit', color: '#fff' }}\n    openIcon={{ name: 'close', color: '#fff' }}\n    onOpen={() => setOpen(!open)}\n    onClose={() => setOpen(!open)}\n  >\n    <SpeedDial.Action\n      icon={{ name: 'add', color: '#fff' }}\n      title=\"Add\"\n      onPress={() => console.log('Add Something')}\n    />\n    <SpeedDial.Action\n      icon={{ name: 'delete', color: '#fff' }}\n      title=\"Delete\"\n      onPress={() => console.log('Delete Something')}\n    />\n  </SpeedDial>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Lists2 Component in React Native\nDESCRIPTION: Code that exports the Lists2 component after defining stylesheet properties. Shows the end of style definitions for what appears to be text styling with padding and color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n  paddingLeft: 10,\n  color: 'grey',\n},\n});\n\nexport default Lists2;\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in TypeScript/React Native\nDESCRIPTION: This code snippet demonstrates how to import the `Avatar` component from the `@rneui/themed` package. This import is necessary to use the Avatar component within your React Native application built with TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Colors Interface in TypeScript (@rneui/themed)\nDESCRIPTION: Defines custom color names ('tertiary', 'accent', 'surface') by extending the `Colors` interface within the `@rneui/themed` module using TypeScript declaration merging in a `themed.d.ts` file. This allows TypeScript to recognize and provide autocompletion for these custom colors when accessing the theme object. Requires `@rneui/themed` to be installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// themed.d.ts\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Colors {\n    tertiary: string;\n    accent: string;\n    surface: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the PricingCard component from the @rneui/themed package in a TypeScript React Native project. There are no external dependencies needed beyond @rneui/themed, but the parent project should be configured for React Native with TypeScript enabled. The imported PricingCard will be used to display styled pricing tables or cards within your application. The code provides a foundational step before using the component in UI markup. No parameters are required for this import, and the output is the availability of the PricingCard symbol.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PricingCard } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Controlled Tooltip Component Example - React Native Elements (js)\nDESCRIPTION: Demonstrates implementation of a controlled Tooltip component using functional React, managing the open/closed state with useState and passing the required stateless props. Must have @rneui/themed and TooltipProps available. Encourages modular and composable component patterns.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst ControlledTooltip: React.FC<TooltipProps> = (props) => {\\n  const [open, setOpen] = React.useState(false);\\n  return (\\n    <Tooltip\\n      visible={open}\\n      onOpen={() => {\\n        setOpen(true);\\n      }}\\n      onClose={() => {\\n        setOpen(false);\\n      }}\\n      {...props}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to ListItems in React Native Elements\nDESCRIPTION: This example shows how to add a Badge component to a ListItem in React Native Elements. It demonstrates customizing the badge's value, text style, and container style within a ListItem.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for ListItemInput in React Native Elements\nDESCRIPTION: This code snippet shows the theme key used for customizing the ListItemInput component in React Native Elements using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemInput\n```\n\n----------------------------------------\n\nTITLE: Importing AirbnbRating Component in React Native\nDESCRIPTION: This code snippet shows how to import the AirbnbRating component from the @rneui/themed package. The AirbnbRating component is used to collect measurable feedback from users through a visual rating system.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AirbnbRating } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Heading Styles for Android Font Weight Alignment - TypeScript\nDESCRIPTION: This snippet defines custom styles for headings (h1, h2, h3) using specific font families and font weights optimized for Android. It is recommended to align the fontWeight values with the actual weights available in the specified font files (e.g., 'Nunito-SemiBold', 'Nunito-Regular', etc.) to avoid runtime mismatches on Android devices. Inputs are style objects for text components, and the output is consistent cross-platform text styling, provided that the fonts are correctly added to the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx\\n\\n    h1Style: {\\n      fontFamily: 'Nunito-SemiBold',\\n      fontWeight: '300',\\n    },\\n    h2Style: {\\n      fontFamily: 'Nunito-Regular',\\n      fontWeight: '100',\\n    },\\n    h3Style: {\\n      fontFamily: 'Nunito-Bold',\\n      fontWeight: '500',\\n    },\\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatars within ListItems in React Native Elements (tsx)\nDESCRIPTION: Shows different ways to incorporate the `Avatar` component into `ListItem`. Examples include using an image source from 'randomuser.me', an icon placeholder, and a title initial fallback within the Avatar, alongside `ListItem.Content` for text.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <ListItem bottomDivider>\n    <Avatar\n      rounded\n      source={{ uri: \"https://randomuser.me/api/portraits/men/36.jpg\" }}\n    />\n    <ListItem.Content>\n      <ListItem.Title>John Doe</ListItem.Title>\n      <ListItem.Subtitle>President</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n  <ListItem bottomDivider>\n    <Avatar\n      rounded\n      icon={{\n        name: \"person-outline\",\n        type: \"material\",\n        size: 26,\n      }}\n      containerStyle={{ backgroundColor: \"#c2c2c2\" }}\n    />\n    <ListItem.Content>\n      <ListItem.Title>Alba King</ListItem.Title>\n      <ListItem.Subtitle>Vice President</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n  <ListItem>\n    <Avatar rounded title=\"A\" containerStyle={{ backgroundColor: \"grey\" }} />\n    <ListItem.Content>\n      <ListItem.Title>Adam Eva</ListItem.Title>\n      <ListItem.Subtitle>Vice Chairman</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing PricingCard Components in React Native Elements\nDESCRIPTION: Creates a scrollable pricing page with three pricing tiers (Free, Starter, and Enterprise) using PricingCard components from React Native Elements. Each card displays a price, features list, and a call-to-action button with an icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { PricingCard, colors } from '@rneui/themed';\n\ntype PricingCardComponentProps = {};\n\nconst Pricing: React.FunctionComponent<PricingCardComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <PricingCard\n        color={colors.primary}\n        title=\"Free\"\n        price=\"$0\"\n        info={['1 User', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary}\n        title=\"Starter\"\n        price=\"$19\"\n        info={['10 Users', 'Basic Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n      <PricingCard\n        color={colors.secondary2}\n        title=\"Enterprise\"\n        price=\"$49\"\n        info={['100 Users', 'One on One Support', 'All Core Features']}\n        button={{ title: ' GET STARTED', icon: 'flight-takeoff' }}\n      />\n    </ScrollView>\n  </>\n);\n};\n\nexport default Pricing;\n```\n\n----------------------------------------\n\nTITLE: Customizing Skeleton Animations in React Native Elements (TypeScript)\nDESCRIPTION: This snippet illustrates how to set different animation types for the Skeleton component. The first line sets the default pulse animation, the second uses a LinearGradient component and the 'wave' animation, and the third disables animation. The 'LinearGradientComponent' prop requires an imported LinearGradient component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Skeleton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Skeleton animation=\"pulse\" width={80} height={40} />\n<Skeleton LinearGradientComponent={LinearGradient} animation=\"wave\" width={80} height={40} />\n<Skeleton animation=\"none\" width={80} height={40} />\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements (Shell/Bash)\nDESCRIPTION: Shows how to install react-native-elements using either npm or yarn package managers. This snippet ensures that the package and its dependencies are properly added to the project. Developers should run only one of the provided sets of commands based on their preferred package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install && npm install react-native-elements --save\n\n# yarn\nyarn && yarn add react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Implementing Fractional Rating in React Native Elements\nDESCRIPTION: Example of creating a rating component that supports fractional values with a starting value of 3.3.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Components in React Native Elements (JavaScript)\nDESCRIPTION: Demonstrates various ways to implement the Card component from react-native-elements. Examples include creating a card with a title and custom content (mapping over user data), using ListItems within a card without default padding, and implementing a card with a title, an image, text content, and a Button. It requires importing necessary components like `View`, `Text`, `Image` from `react-native` and `Card`, `ListItem`, `Button`, `Icon` from `react-native-elements`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/card.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = [\n {\n    name: 'brynn',\n    avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg'\n },\n ... // more users here\n]\n\nimport { View, Text, Image } from 'react-native'\nimport { Card, ListItem, Button, Icon } from 'react-native-elements'\n\n// implemented without image with header\n<Card title=\"CARD WITH DIVIDER\">\n  {\n    users.map((u, i) => {\n      return (\n        <View key={i} style={styles.user}>\n          <Image\n            style={styles.image}\n            resizeMode=\"cover\"\n            source={{ uri: u.avatar }}\n          />\n          <Text style={styles.name}>{u.name}</Text>\n        </View>\n      );\n    })\n  }\n</Card>\n\n// implemented without image without header, using ListItem component\n <Card containerStyle={{padding: 0}} >\n  {\n    users.map((u, i) => {\n      return (\n        <ListItem\n          key={i}\n          roundAvatar\n          title={u.name}\n          avatar={{uri:u.avatar}}\n        />\n      );\n    })\n  }\n</Card>\n\n\n// implemented with Text and Button as children\n<Card\n  title='HELLO WORLD'\n  image={require('../images/pic2.jpg')}>\n  <Text style={{marginBottom: 10}}>\n    The idea with React Native Elements is more about component structure than actual design.\n  </Text>\n  <Button\n    icon={<Icon name='code' color='#ffffff' />}\n    buttonStyle={{borderRadius: 0, marginLeft: 0, marginRight: 0, marginBottom: 0}}\n    title='VIEW NOW' />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Tile Variants with react-native-elements in TypeScript\nDESCRIPTION: This code defines a Tiles React functional component that renders several Tile components using @rneui/themed. Each Tile instance demonstrates usage of images, captions, icons, custom title styles, and child components. Dependencies include react, react-native, and @rneui/themed. 'Tiles' expects no props (accepts TilesComponentProps, which is empty) and manages layout with ScrollView and View. Inputs are hardcoded image sources and textual props, and the output is a visually rich, scrollable tile list suited for mobile usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\\nimport { View, ScrollView, StyleSheet } from 'react-native';\\nimport { Text, Tile } from '@rneui/themed';\\n\\ntype TilesComponentProps = {};\\n\\nconst Tiles: React.FunctionComponent<TilesComponentProps> = () => {\\nreturn (\\n  <>\\n    <View style={{ alignItems: 'center' }}>\\n      <ScrollView style={{ paddingVertical: 10 }}>\\n      <Text style={styles.subHeader}>Featured Tile</Text>\\n        <Tile\\n          imageSrc={{\\n            uri:\\n              'https://www.mediastorehouse.com/p/191/sunset-porthmeor-beach-st-ives-cornwall-11702500.jpg.webp',\\n          }}\\n          title=\"When I admire the wonders of a sunset or the beauty of the moon, my soul expands in the worship of the creator.\"\\n          titleStyle={{ fontSize: 15 }}\\n          featured\\n          caption=\"Mahatma Gandhi\"\\n          activeOpacity={1}\\n          width={310}\\n        />\\n        <Text style={styles.subHeader}>Featured Tile with Icon</Text>\\n        <View style={{ paddingTop: 20 }}>\\n          <Tile\\n            imageSrc={{\\n              uri:\\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\\n            }}\\n            icon={{\\n              name: 'heart',\\n              type: 'font-awesome',\\n              size: 60,\\n              color: 'red',\\n            }}\\n            featured\\n            activeOpacity={0.8}\\n            onPress={() => {\\n              'Tile pressed';\\n            }}\\n            width={310}\\n          />\\n        </View>\\n        <View style={{ paddingTop: 20, paddingBottom: 100 }}>\\n          <Tile\\n            imageSrc={{\\n              uri:\\n                'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg/320px-Half_Dome_from_Glacier_Point%2C_Yosemite_NP_-_Diliff.jpg',\\n            }}\\n            title=\"Half Dome, Yosemite\"\\n            titleStyle={{ fontSize: 20, textAlign: 'center', paddingBottom: 5 }}\\n            activeOpacity={1}\\n            width={310}\\n            contentContainerStyle={{ height: 70 }}\\n            style={{ paddingBottom: 20 }}\\n          >\\n            <View\\n              style={{\\n                flex: 1,\\n                flexDirection: 'row',\\n                justifyContent: 'space-between',\\n              }}\\n            >\\n              <Text style={{ color: 'green' }}>Visit</Text>\\n              <Text style={{ color: '#397af8' }}>Find out More</Text>\\n            </View>\\n          </Tile>\\n        </View>\\n      </ScrollView>\\n    </View>\\n  </>\\n);\\n};\\n\\nconst styles = StyleSheet.create({\\nsubHeader: {\\n  backgroundColor : \"#2089dc\",\\n  color : \"white\",\\n  textAlign : \"center\",\\n  paddingVertical : 5,\\n  marginBottom : 10\\n}\\n});\\n\\nexport default Tiles;\n```\n\n----------------------------------------\n\nTITLE: Defining the Theme Colors Interface in TypeScript\nDESCRIPTION: This TypeScript interface outlines the structure of the `theme` object's `colors` property in React Native Elements. It details the available color keys like `primary`, `secondary`, `background`, etc., and includes nested `platform` specific colors for iOS, Android, and web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/color.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    background;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Badge to a ListItem in React Native Elements (JavaScript)\nDESCRIPTION: This snippet provides a basic example of incorporating a `Badge` component within a `ListItem` from `@rneui/themed`. It shows how to set the badge's numerical `value` and apply custom styles to the text (`textStyle`) and the badge container (`containerStyle`). This is useful for displaying counts or status indicators alongside list items.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Context with useTheme Hook in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates using the `useTheme` hook within a functional component to access the current theme object provided by `ThemeProvider`. This allows easy consumption of theme values (e.g., `theme.colors.primary`) for styling elements like `Text`. It relies on `@rneui/themed`, `react-native`, and assumes the existence of a `styles.container` definition.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/overview.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from '@rneui/themed';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SpeedDial Usage with React Native Elements in JavaScript\nDESCRIPTION: This code snippet provides a functional React Native component that demonstrates the usage of the SpeedDial component from the @rneui/themed package. It manages its open state using the useState hook and defines two actions: Add and Delete, each triggering a console log when pressed. Required dependencies are React, React Native Elements, and the @rneui/themed package; inputs include user interaction with the floating button, while outputs are log statements on action press. The snippet is designed for embedding in a project using RNE and assumes that relevant packages are already installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { SpeedDial } from '@rneui/themed';\n\nexport default () => {\nconst [open, setOpen] = React.useState(false);\nreturn (\n  <SpeedDial\n    isOpen={open}\n    icon={{ name: 'edit', color: '#fff' }}\n    openIcon={{ name: 'close', color: '#fff' }}\n    onOpen={() => setOpen(!open)}\n    onClose={() => setOpen(!open)}\n  >\n    <SpeedDial.Action\n      icon={{ name: 'add', color: '#fff' }}\n      title=\"Add\"\n      onPress={() => console.log('Add Something')}\n    />\n    <SpeedDial.Action\n      icon={{ name: 'delete', color: '#fff' }}\n      title=\"Delete\"\n      onPress={() => console.log('Delete Something')}\n    />\n  </SpeedDial>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing RNE Dependencies for Create React App with Yarn\nDESCRIPTION: Installs React Native Elements core packages (`@rneui/base`, `@rneui/themed`), `react-native-web` for web compatibility, and `react-native-vector-icons` using Yarn. This is part of the setup for using RNE in a Create React App project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn add  @rneui/base @rneui/themed react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Using Basic Button Component in TypeScript\nDESCRIPTION: This snippet demonstrates the fundamental usage of a React Native Elements component. It imports the `Button` component from `@rneui/base` and renders it within a simple functional component `App`, passing a `title` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nimport { Button } from '@rneui/base';\n\nconst App = () => {\n  return <Button title=\"Hello World\" />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: withTheme Higher-Order Component Usage - TypeScript\nDESCRIPTION: Shows how to use the withTheme higher-order component (HOC) to inject theme props into a custom component. The example defines a CustomComponent that accesses theme from props and then exports it with themed support. Useful for class-based or functional components needing theme context. Depends on '@rneui/themed' and React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme, ThemeProps } from '@rneui/themed';\n\ntype CustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nconst CustomComponent = (props: ThemeProps<CustomComponentProps>) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n};\n\nexport default withTheme<CustomComponentProps>(CustomComponent, 'ComponentKey');\n```\n\n----------------------------------------\n\nTITLE: Displaying a Featured Tile with Icon in React Native Elements Using JavaScript\nDESCRIPTION: This example illustrates creating a featured tile with an overlay icon. The Tile uses the imageSrc and icon props, where icon specifies the FontAwesome icon name and type. The tile is set as featured for different styling. Requires react-native-elements and an accessible image asset. The output is a visually highlighted tile with an icon overlay; input is a JSX component using proper icon and image props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/tile.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  icon={{ name: 'play-circle', type: 'font-awesome' }}\n  featured\n/>;\n```\n\n----------------------------------------\n\nTITLE: Adding a Right Icon to a Button in React Native Elements\nDESCRIPTION: Demonstrates positioning an icon to the right of the button's title using the `icon` prop combined with the `iconRight` boolean prop (set to true). Alternatively, `iconPosition='right'` could be used.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" icon=\"home\" iconRight />\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Custom Subtitle View in React Native\nDESCRIPTION: This snippet demonstrates how to create a ListItem with a custom subtitle view in React Native Elements. It includes a custom-styled subtitle with an image and text.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Icon from React Native Elements (TypeScript)\nDESCRIPTION: Demonstrates how to import the Icon component from the @rneui/themed package for use in a React Native TypeScript project. Requires the @rneui/themed dependency to be installed and properly configured in the project. This import provides access to the Icon component for displaying icons in the UI; no parameters are needed in this import and the output is a usable Icon JSX component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Icon } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in RNEUI with TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `Card` component from the `@rneui/themed` library in a TypeScript React Native project. This import is necessary to utilize the `Card` component and its subcomponents like `Card.FeaturedSubtitle`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Context with useTheme Hook in React Native Elements (TSX)\nDESCRIPTION: This example demonstrates using the `useTheme` hook from `@rneui/themed` within a React functional component to access the theme object provided by a parent `ThemeProvider`. It retrieves the theme and uses its `colors.primary` property to style a `View`. Requires `@rneui/themed`, React, and being within a `ThemeProvider` context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/1.themprovider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\n\nfunction Demo() {\n  const { theme } = useTheme();\n  return <View style={{ background: theme.colors.primary }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ButtonGroup with Component Buttons - React Native Elements - JavaScript\nDESCRIPTION: This snippet showcases the use of the ButtonGroup component where each button is defined as a custom React component, enhancing display possibilities (such as rendering <Text>). The code sets up state management, a button selection handler, and creates button entries as objects with an 'element' property linking to custom component functions. When rendered, ButtonGroup displays these components as choices. Dependencies include React, react-native-elements, and ButtonGroup, with custom elements provided in the 'buttons' array. The expected behavior is user selection of a button (shown via selectedIndex), triggering re-render with the new selection. Inputs: custom button React components; Outputs: custom-styled button options. Limitation: requires care to supply properly formed button objects (with element), not just simple strings.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/button_group.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Button in React Native Elements\nDESCRIPTION: Demonstrates how to create a button with an icon next to the text. The icon can be added directly within the button component, and styles can be applied with radius prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Button radius={\"sm\"} type=\"solid\">\n  Save\n  <Icon name=\"save\" color=\"white\" />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Initializing ThemeProvider with createTheme in React Native Elements (JSX)\nDESCRIPTION: This snippet shows how to define a custom theme using `createTheme` from `@rneui/themed` and apply it globally using `ThemeProvider`. The theme object specifies default props for components, like setting `raised: true` for all `Button` components within the provider's scope. It requires `@rneui/themed` and React.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/1.themprovider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      raised: true,\n    },\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n      <Button title=\"My 2nd Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tile with Icon and Content in React Native Elements\nDESCRIPTION: Demonstrates a more complex tile implementation with custom content, icon, and styling. Includes a flex container with custom layout for caption text.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/tile.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  title=\"Lorem ipsum dolor sit amet, consectetur\"\n  icon={{ name: 'play-circle', type: 'font-awesome' }} // optional\n  contentContainerStyle={{ height: 70 }}\n>\n  <View\n    style={{ flex: 1, flexDirection: 'row', justifyContent: 'space-between' }}\n  >\n    <Text>Caption</Text>\n    <Text>Caption</Text>\n  </View>\n</Tile>;\n```\n\n----------------------------------------\n\nTITLE: Importing the Tab Component in React Native (JavaScript/TypeScript)\nDESCRIPTION: Shows how to import the Tab component from the '@rneui/themed' library. The Tab.Item component is accessed as a nested component (Tab.Item).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tab.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tab } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component from React Native Elements in TypeScript\nDESCRIPTION: This snippet shows how to import the Text component from the @rneui/themed package for use in a TypeScript React Native project. The import provides access to the themed Text component, which can then be styled and configured with various props for displaying formatted text. Make sure that @rneui/themed is installed as a dependency in your project before using this import.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Tile with Icon and Custom Content - React Native Elements - JavaScript\nDESCRIPTION: Illustrates usage of the Tile component with an icon, custom title, and custom child content using react-native-elements. Besides specifying 'imageSrc' and 'title', the 'icon' and 'contentContainerStyle' props are used for further customization. Two nested Text components are rendered inside a styled View for captions. Dependencies include 'react-native-elements' and React Native core components (View, Text). Inputs include style objects and child components; output is a tile with icon and flexible content area. The structure supports both visual and layout customizations, making it suitable for highly customized tile UIs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/tile.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  title=\"Lorem ipsum dolor sit amet, consectetur\"\n  icon={{ name: 'play-circle', type: 'font-awesome' }} // optional\n  contentContainerStyle={{ height: 70 }}\n>\n  <View\n    style={{ flex: 1, flexDirection: 'row', justifyContent: 'space-between' }}\n  >\n    <Text>Caption</Text>\n    <Text>Caption</Text>\n  </View>\n</Tile>;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating the Theme with useTheme Hook - TypeScript\nDESCRIPTION: Illustrates how to consume the theme and update it using the useTheme hook from '@rneui/themed'. The hook returns an object with current theme and an updateTheme function that merges new values. The snippet demonstrates updating the primary color and using the theme in component styling. Dependencies: '@rneui/themed', and React Native components such as View and Button.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\n\nfunction Demo() {\n  const { theme, updateTheme } = useTheme();\n  return (\n    <View style={{ background: theme.colors.primary }}>\n      <Button onPress={() => updateTheme({ colors: { primary: 'red' } })} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for ButtonGroup Documentation Page\nDESCRIPTION: Imports necessary components for the documentation page structure (Tabs, TabItem from Docusaurus theme), the React Native Elements library itself, and a separate MDX file containing usage examples (`ButtonGroup.mdx`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/ButtonGroup.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native Elements (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the Tab component from the @rneui/themed package in a TypeScript/React Native project. This import is required before using the Tab component in your JSX layouts. The Tab component is part of the React Native Elements library and does not require any other imports for basic usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tab } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using Title Placeholder in List Avatars - React Native Elements - JavaScript\nDESCRIPTION: Demonstrates integrating Avatar as a leftAvatar in the ListItem component, leveraging the title placeholder and image source with an optional edit button. Use of ListItem and Avatar together requires react-native-elements, with props such as leftAvatar, title, subtitle, and chevron. Inputs include user data (name, avatar_url, role); outputs complex list items with avatar visuals and interactivity. Suitable for profile or contact lists where fallback initials are needed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/avatar.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem } from 'react-native-elements';\n\n<ListItem\n  leftAvatar={{\n    title: name[0],\n    source: { uri: avatar_url },\n    showEditButton: true,\n  }}\n  title={name}\n  subtitle={role}\n  chevron\n/>;\n```\n\n----------------------------------------\n\nTITLE: Initializing ThemeProvider with Custom Theme - React Native Elements (JavaScript)\nDESCRIPTION: This snippet sets up a ThemeProvider at the top level of a React Native application, creating a custom theme using createTheme and passing it into ThemeProvider. It demonstrates how all Button components below the provider will have the \\'raised\\' prop set to true by default. Dependencies include @rneui/themed, and the pattern requires React Context API familiarity. Inputs are the React Node tree and a theme object; output is a themed app UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/1.themprovider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\\n\\nconst theme = createTheme({\\n  Button: {\\n    raised: true,\\n  },\\n});\\n\\n// Your App\\nconst App = () => {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button title=\\\"My Button\\\" />\\n      <Button title=\\\"My 2nd Button\\\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Storing Input Reference in React Native\nDESCRIPTION: Demonstrates how to create and store a reference to an Input component in React Native using the ref prop. This allows for calling methods on the Input instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Specifying TabView Theme Key in React Native Elements\nDESCRIPTION: This code block demonstrates the theme key to use when customizing the TabView component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/TabView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nTabView\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Rating in React Native Elements\nDESCRIPTION: This snippet demonstrates how to render a read-only `Rating` component in React Native Elements. It uses the `readonly` prop to disable user interaction and `startingValue` to set the displayed rating, which is assumed to be passed via component props (`this.props.rating`). The `imageSize` and `style` props are used for visual customization. Requires the `@rneui/themed` package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Importing the Image Component from React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Image component from the '@rneui/themed' package for use in a React Native project. The import allows developers to access the enhanced Image component, which supports advanced loading and transition features. No dependencies are required aside from the '@rneui/themed' package, and the import path must be correct for successful usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Context with ThemeConsumer in React Native Elements (TypeScript)\nDESCRIPTION: This example illustrates how to access the theme object within a functional component using the `ThemeConsumer` component and the render props pattern. It allows components to use theme values (like `theme.colors.primary`) for styling without needing to be explicitly wrapped by `withTheme`. It requires `@rneui/themed` and `react-native`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/overview.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing the Rating Component from React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Rating component from the @rneui/themed package for use in a React Native project. The Rating component is used to capture user feedback via swipe gestures, displaying a customizable sequence of icons (such as stars). Ensure that the @rneui/themed library is installed as a dependency. This import is required prior to rendering or configuring the Rating component within your TypeScript-based React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Rating } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Tab` component, which includes `Tab.Item`, from the `@rneui/themed` package in a TypeScript/React Native project. This import is necessary to use the Tab and Tab.Item components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Tab.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Theme Key Configuration for Chip\nDESCRIPTION: Demonstrates the theme key used for styling Chip components in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nChip\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component - React Native Elements - TypeScript\nDESCRIPTION: This snippet shows how to import the ListItem component from the @rneui/themed package, which is necessary to use ListItem.Chevron in your React Native project. Ensure that @rneui/themed is installed in your dependencies before using this import. The import provides access to ListItem and all its subcomponents, including Chevron, enabling the addition of chevron icons and handling custom props. Inputs and outputs depend on downstream usage in your JSX code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.Chevron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Displaying a Tile with Icon and Custom Content in React Native Elements Using JavaScript\nDESCRIPTION: This snippet shows usage of the Tile component with a custom icon and child content. The Tile is given an imageSrc, title, icon, and contentContainerStyle, with a child View containing two Text elements arranged via flex styling. Dependencies include react-native-elements and React Native primitives (View, Text). The input is JSX with both props and children; output is a tile showing an image, icon, title, and a layout-customized caption area. Child components must be valid React nodes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/tile.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  title=\"Lorem ipsum dolor sit amet, consectetur\"\n  icon={{ name: 'play-circle', type: 'font-awesome' }} // optional\n  contentContainerStyle={{ height: 70 }}\n>\n  <View\n    style={{ flex: 1, flexDirection: 'row', justifyContent: 'space-between' }}\n  >\n    <Text>Caption</Text>\n    <Text>Caption</Text>\n  </View>\n</Tile>;\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme with createTheme - TypeScript\nDESCRIPTION: Exemplifies the usage of createTheme to generate a customizable theme object. You pass color objects for light and dark modes, select the mode, and specify component customizations via functional props. The result is an object suitable for passing to ThemeProvider. prereqs: '@rneui/themed' for usage, and a color palette named Colors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ncreateTheme({\n  lightColors: Colors,\n  darkColors: Colors,\n  mode: 'light' | 'dark',\n  components: {\n    componentName: (props, theme) => ({\n      // Props\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Colors Using ThemeProvider in React Native Elements (JavaScript)\nDESCRIPTION: This JavaScript/JSX snippet demonstrates how to create and apply a custom theme in a React Native Elements application, specifying both light and dark color tokens. ThemeProvider wraps the app, injecting the overridden theme configuration (colors in this case) for all descendant components. Requires '@rneui/themed' as a dependency and expects color values in the format supported by React Native; customizable via props in the createTheme function.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/2.theme object.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Styled Components with Composition in React Native Elements (TSX)\nDESCRIPTION: Illustrates the composition pattern where a new component (`RaisedButton`) is created by wrapping a base React Native Elements component (`Button`) and applying default props (`raised`). This allows for easy reuse of styled components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaProvider in App Root (JavaScript)\nDESCRIPTION: Demonstrates how to wrap the main application component with `SafeAreaProvider` from `react-native-safe-area-context`. This is required to make safe area insets available throughout the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Expandable List Accordion with React Native Elements (JavaScript)\nDESCRIPTION: This JavaScript (JSX) snippet illustrates how to build an expandable ListItem.Accordion using React Native Elements. It uses React state (expanded) to toggle the visibility of child items, utilizes a custom accordion header with an Icon and title, and maps through a list array (list2) to render ListItem rows with avatars and subtitles. Dependencies are React, react-native-elements components (ListItem, Icon, Avatar), and an accessible list2 data array; parameters include expanded (boolean), setExpanded (function), log (function), and list2 (array of objects containing 'name', 'subtitle', and 'avatar_url'). Input expects React component context and proper state management; outputs an interactive accordion UI element.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\n<ListItem.Accordion\\n  content={\\n    <>\\n      <Icon name=\\\"place\\\" size={30} />\\n      <ListItem.Content>\\n        <ListItem.Title>List Accordion</ListItem.Title>\\n      </ListItem.Content>\\n    </>\\n  }\\n  isExpanded={expanded}\\n  onPress={() => {\\n    setExpanded(!expanded);\\n  }}\\n>\\n  {list2.map((l, i) => (\\n    <ListItem key={i} onPress={log} bottomDivider>\\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\\n      <ListItem.Content>\\n        <ListItem.Title>{l.name}</ListItem.Title>\\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\\n      </ListItem.Content>\\n      <ListItem.Chevron />\\n    </ListItem>\\n  ))}\\n</ListItem.Accordion>\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Default Component Styles via ThemeProvider in React Native Elements (JSX)\nDESCRIPTION: Explains how to define default styles for specific component types (e.g., all Buttons) globally using the `components` key within the `createTheme` configuration. This theme is then applied using `ThemeProvider`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    [themeKey]: { // Replace themeKey with actual component key e.g., 'Button'\n      // ... props\n    },\n  },\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component from React Native Elements\nDESCRIPTION: Shows how to import the Image component from the @rneui/themed package. This component extends the standard React Native Image component with additional functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating ThemeProvider with Custom Colors in React Native Elements\nDESCRIPTION: This code shows how to create a ThemeProvider instance with custom colors for both light and dark modes in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = createTheme({\n  lightColors: {\n    ...yourCustomColorShape\n  },\n  darkColors: {\n    ...yourCustomColorShape\n  },\n  mode: // your light or dark mode value\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Tile Component in React Native Elements\nDESCRIPTION: Shows how to import the Tile component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tile } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using Default ListItem in TSX\nDESCRIPTION: Demonstrates the basic usage of the ListItem component to display simple text content. It utilizes the `ListItem.Content`, `ListItem.Title`, and `ListItem.Subtitle` sub-components to structure the row's information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem>\n  <ListItem.Content>\n    <ListItem.Title>John Doe</ListItem.Title>\n    <ListItem.Subtitle>CEO, Example.com</ListItem.Subtitle>\n  </ListItem.Content>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Dialog component from the @rneui/themed package in a React Native TypeScript project. It is required to use subcomponents like Dialog.Title for displaying titles in modal dialogs. Ensure that @rneui/themed is installed in your project for this import to work correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Styled Components with Composition in React Native Elements (TypeScript)\nDESCRIPTION: This snippet shows how to create a custom, reusable component (`RaisedButton`) by wrapping a standard React Native Elements `Button`. It applies a default style (`raised`) while passing through any additional props, allowing for consistent styling across the application. It depends on `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Left Icon to a Button in React Native Elements\nDESCRIPTION: This snippet illustrates how to add an icon to a `Button` using the `icon` prop. By default, or when `iconPosition` is 'left', the icon appears to the left of the title text. Requires the `icon` prop to be set.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" icon=\"home\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Fractional Ratings with React Native Elements (HTML)\nDESCRIPTION: This HTML JSX snippet demonstrates how to configure the Rating component to display fractional ratings using the 'fractions' and 'startingValue' props. By setting 'fractions' to 1 and 'startingValue' to a decimal value, the component shows partial stars/units. This is intended for use in React-based UIs. Key parameters: 'showRating', 'fractions', 'startingValue'. Inputs are fraction count (numeric/1) and starting value (numeric/3.3); output is a rating display supporting 0.1 increments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Key for Badge Component\nDESCRIPTION: Demonstrates the theme key to use when customizing the Badge component through ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Badge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nBadge\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in React Native Elements\nDESCRIPTION: Shows how to import the Icon component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Icon } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip for Web Platform with Custom ModalComponent (JavaScript)\nDESCRIPTION: Shows how to import and provide a custom Modal implementation (modal-react-native-web) for Tooltip's ModalComponent prop, required for react-native-web compatibility as the default Modal is not implemented. Dependency: modal-react-native-web package. The key parameter is ModalComponent, which should be passed a valid Modal implementation. Output ensures the Tooltip can work on web platforms.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n<Tooltip ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Themed Component in React Native Elements\nDESCRIPTION: This snippet shows how to create a custom component that uses the React Native Elements theming system. It uses the withTheme HOC to access theme props and extends the FullTheme interface to include the custom component's props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, createTheme, withTheme } from '@rneui/themed';\n\ntype MyCustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nexport const MyCustomComponent = withTheme<MyCustomComponentProps>((props) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n});\n\ndeclare module '@rneui/themed' {\n  export interface FullTheme {\n    MyCustomComponent: Partial<MyCustomComponentProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar Shape Variations with React Native Elements in TypeScript\nDESCRIPTION: This TypeScript code example demonstrates how to display two Avatar components within a Stack layout, highlighting the difference between a rounded (circular) avatar and the default shape. It uses the 'size', 'rounded', 'icon', and 'containerStyle' props. Inputs include the icon object and shape parameters; outputs are rendered avatar icons with specified styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Avatar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={32}\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing the Snack Component in JavaScript\nDESCRIPTION: This JavaScript import statement brings the 'Snack' component into the current scope. The component is imported from the relative path './snack/index.md', suggesting it might be defined within or exported from a Markdown file (potentially MDX), commonly used for documentation examples.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SpeedDial/SpeedDial.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\n----------------------------------------\n\nTITLE: Implementing a SpeedDial Component in React Native\nDESCRIPTION: This React functional component demonstrates the use of the SpeedDial component from 'react-native-elements'. It utilizes the useState hook to manage the open/closed state. The SpeedDial displays an edit icon when closed and a close icon when open. It includes two actions, 'Add' and 'Delete', each with an icon and an onPress handler that logs a message to the console.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SpeedDial/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE SpeedDial\nimport React from 'react';\nimport { SpeedDial } from 'react-native-elements';\n\nexport default () => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <SpeedDial\n      isOpen={open}\n      icon={{ name: 'edit', color: '#fff' }}\n      openIcon={{ name: 'close', color: '#fff' }}\n      onOpen={() => setOpen(!open)}\n      onClose={() => setOpen(!open)}\n    >\n      <SpeedDial.Action\n        icon={{ name: 'add', color: '#fff' }}\n        title=\"Add\"\n        onPress={() => console.log('Add Something')}\n      />\n      <SpeedDial.Action\n        icon={{ name: 'delete', color: '#fff' }}\n        title=\"Delete\"\n        onPress={() => console.log('Delete Something')}\n      />\n    </SpeedDial>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with React Native Elements Template\nDESCRIPTION: Commands to create a new Expo project using the React Native Elements template, for both stable and bleeding edge versions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Stable\nnpx create-expo-app --template @rneui/template\n\n# Bleeding Edge\nnpx create-expo-app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Using the CircularSlider Component in React Native (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to import and use the `CircularSlider` component from `react-native-elements-universe`. It shows basic usage by passing `value` and an `onChange` handler, how to render it without a thumb (useful as a progress indicator) using the `noThumb` prop, and how to create an arc slider (e.g., 90 degrees) using the `maxAngle` prop. Note that the `value` prop should either be a percentage (0-100) or used in conjunction with `maximumValue` and `minimumValue` props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/universe/circularSlider.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { CircularSlider } from 'react-native-elements-universe';\n\n<CircularSlider value={value} onChange={setValue} />;\n\n<CircularSlider value={value} noThumb />;\n\n// 90 deg Arc\n<CircularSlider maxAngle={90} />;\n```\n\n----------------------------------------\n\nTITLE: Theming Key Reference for BottomSheet in React Native Elements (JavaScript)\nDESCRIPTION: This snippet specifies the theme key ('BottomSheet') for referencing and customizing the BottomSheet component through a theme provider in React Native Elements. The theme key should be used within theming or customization contexts, such as when overriding default styles system-wide using a ThemeProvider. No dependencies are required besides the Elements library, and this code acts as a reference identifier rather than executable code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/BottomSheet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBottomSheet\n```\n\n----------------------------------------\n\nTITLE: Merging Mixed Object/Array Styles in React Native Elements Theme (JSX)\nDESCRIPTION: Illustrates a scenario flagged as working where the theme defines `Button.containerStyle` as a style object, while the local `Button` component uses an array for its `containerStyle`. According to the documentation, this combination still results in a successful style merge with `ThemeProvider`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/4.pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Buttons with Color Variants - React Native Elements - TSX\nDESCRIPTION: This snippet shows multiple Button components each with different predefined color props (primary, secondary, warning, error). The color prop affects the background or border color of each button. All buttons are arranged horizontally using the Stack component. Prerequisites include the @rneui/themed dependency and the presence of Stack.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack dir=\\\"row\\\" align=\\\"center\\\" spacing={4}>\n  <Button>Primary</Button>\n  <Button color=\\\"secondary\\\">Secondary</Button>\n  <Button color=\\\"warning\\\">Warning</Button>\n  <Button color=\\\"error\\\">Error</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Component in React Native with React Native Elements\nDESCRIPTION: This code snippet demonstrates the usage of the Divider component from React Native Elements. It showcases horizontal and vertical dividers with various customizations such as width, color, inset, and subheader. The component uses React hooks and themed styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { Text, Divider, useTheme } from '@rneui/themed';\nimport { ScrollView, StyleSheet, View } from 'react-native';\n\ntype DividerViewTypes = {};\n\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\nconst { theme } = useTheme();\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\n        <Divider />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with width and color\n        </Text>\n        <Divider width={5} color={theme?.colors?.primary} />\n      </View>\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with left inset\n        </Text>\n        <Divider inset={true} />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with right inset\n        </Text>\n        <Divider inset={true} insetType=\"right\" />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with middle inset\n        </Text>\n        <Divider inset={true} insetType=\"middle\" />\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\n      </View>\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" />\n        <Text>Right text</Text>\n      </View>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" width={5} />\n        <Text>Right text</Text>\n      </View>\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Left text</Text>\n        <Divider\n          subHeader=\"Divider\"\n          inset={true}\n          subHeaderStyle={{ color: theme?.colors?.primary }}\n        />\n        <Text style={styles.horizontalText}>Right text</Text>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n},\nhorizontal: {\n  marginBottom: 10,\n},\nhorizontalText: {\n  textAlign: 'center',\n  fontSize: 16,\n  marginVertical: 10,\n},\nvertical: {\n  marginBottom: 10,\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n},\n});\n\nexport default DividerView;\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Mode to Background Color with makeStyles - TypeScript\nDESCRIPTION: This snippet shows how to use a makeStyles utility to define theme-aware styles for component backgrounds. The Background component applies the themed background color, and useStyles dynamically derives styles from the theme. Useful for theming entire screen backgrounds based on the current mode. Depends on makeStyles, '@rneui/themed', and React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst Background = ({ children }) => {\n  const styles = useStyles();\n  return <View style={styles.container}>{children}</View>;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    backgroundColor: theme.colors.background,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Header Component with Navigation Buttons - React Native Elements - TypeScript/JSX\nDESCRIPTION: This full-featured example creates a custom Header React component using React Native Elements and supporting libraries. It includes styled header text, left and right icon buttons that trigger navigation actions such as opening documentation or a playground via Linking, and layout management using the SafeAreaProvider. Required dependencies are @rneui/themed, react-native-safe-area-context, react-native-gesture-handler, and React Native core modules. The component expects a title and an optional view prop, generating a header with accessible action buttons. The implementation provides flexibility and customization for screen headers in React Native projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Configuring Skeleton Component Animations in TypeScript\nDESCRIPTION: Illustrates how to control the animation effect of the Skeleton component using the `animation` prop. It shows the default 'pulse' animation, the 'wave' animation (which requires providing a `LinearGradientComponent`), and how to disable animations using 'none'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Skeleton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <Skeleton animation=\"pulse\" width={80} height={40} />\n  <Skeleton LinearGradientComponent={LinearGradient} animation=\"wave\" width={80} height={40} />\n  <Skeleton animation=\"none\" width={80} height={40} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining the Colors Interface in TypeScript for React Native Elements Theme\nDESCRIPTION: This TypeScript interface specifies the properties available within the `colors` object of the React Native Elements theme. It includes standard theme colors, various grey shades, status colors (success, warning, error), and a nested `platform` object containing platform-specific color definitions (`PlatformColors`) for iOS, Android, web, and default.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/theme_object.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Colors {\n  primary: string;\n  secondary: string;\n  background: string;\n  white: string;\n  black: string;\n  grey0: string;\n  grey1: string;\n  grey2: string;\n  grey3: string;\n  grey4: string;\n  grey5: string;\n  greyOutline: string;\n  searchBg: string;\n  success: string;\n  warning: string;\n  error: string;\n  disabled: string;\n  divider: string;\n  platform: {\n    ios: PlatformColors;\n    android: PlatformColors;\n    web: PlatformColors;\n    default: PlatformColors;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RNE Divider Examples in React Native (TypeScript)\nDESCRIPTION: This React Native functional component (`DividerView`) uses the `Divider` component from `@rneui/themed` to display different divider styles. It shows horizontal dividers with varying widths and colors, inset dividers (left, right, middle), vertical dividers, and dividers with subheaders. The component utilizes `useTheme` to access theme colors and `StyleSheet` for styling. Dependencies include `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Divider\nimport React, { useContext } from 'react';\nimport { Text, Divider, useTheme } from '@rneui/themed';\nimport { ScrollView, StyleSheet, View } from 'react-native';\n\ntype DividerViewTypes = {};\n\nconst DividerView: React.FunctionComponent<DividerViewTypes> = (props) => {\nconst { theme } = useTheme();\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Horizontal Dividers</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Horizontal Divider</Text>\n        <Divider />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with width and color\n        </Text>\n        <Divider width={5} color={theme?.colors?.primary} />\n      </View>\n      <Text style={styles.subHeader}>Horizontal Divider with Inset</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with left inset\n        </Text>\n        <Divider inset={true} />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with right inset\n        </Text>\n        <Divider inset={true} insetType=\"right\" />\n        <Text style={styles.horizontalText}>\n          Horizontal Divider with middle inset\n        </Text>\n        <Divider inset={true} insetType=\"middle\" />\n        <Text style={styles.horizontalText}>Welcome to RNE App</Text>\n      </View>\n      <Text style={styles.subHeader}>Vertical Dividers</Text>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" />\n        <Text>Right text</Text>\n      </View>\n      <View style={styles.vertical}>\n        <Text>Left text</Text>\n        <Divider orientation=\"vertical\" width={5} />\n        <Text>Right text</Text>\n      </View>\n      <Text style={styles.subHeader}>Dividers with SubHeader</Text>\n      <View style={styles.horizontal}>\n        <Text style={styles.horizontalText}>Left text</Text>\n        <Divider\n          subHeader=\"Divider\"\n          inset={true}\n          subHeaderStyle={{ color: theme?.colors?.primary }}\n        />\n        <Text style={styles.horizontalText}>Right text</Text>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n},\nhorizontal: {\n  marginBottom: 10,\n},\nhorizontalText: {\n  textAlign: 'center',\n  fontSize: 16,\n  marginVertical: 10,\n},\nvertical: {\n  marginBottom: 10,\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n},\n});\n\nexport default DividerView;\n```\n```\n\n----------------------------------------\n\nTITLE: Using makeStyles for Theme and Prop-Aware Styles in TypeScript\nDESCRIPTION: Provides a complete example of using `makeStyles`. It defines a `useStyles` hook using `makeStyles` that accesses both the theme (`theme.colors.white`, `theme.colors.primary`) and component props (`props.fullWidth`) to create dynamic styles for a `View` and `Text`. The hook is then invoked within the `MyComponent` functional component to apply the generated styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  fullWidth?: boolean;\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing AirbnbRating Component in React Native\nDESCRIPTION: This React Native functional component (`Ratings`) demonstrates the usage of the `AirbnbRating` component from `react-native-elements`. It renders three instances: a default rating, a disabled rating, and a custom rating with 11 stars, specific review labels, a pre-set default rating, and adjusted size. It relies on `react`, `react-native` (components like `View`, `ScrollView`, `StyleSheet`), and `react-native-elements`. Basic styling is applied using `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/AirbnbRating/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE AirbnbRating\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from 'react-native-elements';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\n  const ratingCompleted = (rating: number) => {\n    console.log('Rating is: ' + rating);\n  };\n\n  const ratingProps = {};\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.viewContainer}>\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginBottom: 30,\n          }}\n        >\n          <AirbnbRating />\n          <AirbnbRating isDisabled={true}/>\n          <AirbnbRating\n            count={11}\n            reviews={[\n              'Terrible',\n              'Bad',\n              'Meh',\n              'OK',\n              'Good',\n              'Hmm...',\n              'Very Good',\n              'Wow',\n              'Amazing',\n              'Unbelievable',\n              'Jesus',\n            ]}\n            defaultRating={11}\n            size={20}\n          />\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  headingContainer: {\n    paddingTop: 50,\n  },\n  titleText: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    paddingVertical: 5,\n    fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n    color: '#27ae60',\n  },\n  subtitleText: {\n    fontSize: 18,\n    fontWeight: '400',\n    textAlign: 'center',\n    fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n    color: '#34495e',\n  },\n  viewContainer: {\n    flex: 1,\n  },\n  rating: {\n    paddingVertical: 10,\n  },\n});\n\nexport default Ratings;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the Theme Interface in TypeScript for React Native Elements\nDESCRIPTION: This TypeScript interface defines the shape of the main `Theme` object used in React Native Elements. It includes a `colors` object (defined by the `Colors` interface), a `mode` property ('light' or 'dark'), and a `spacing` object with predefined size keys (xs, sm, md, lg, xl).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/theme_object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Theme {\n  colors: Colors;\n  mode: 'light' | 'dark';\n  spacing: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Maintaining ButtonGroup Selection with Custom Components - React Native Elements (JavaScript)\nDESCRIPTION: Demonstrates how to use custom React component elements as button segments in a ButtonGroup. The code defines three components returning Text, manages selection via local state, and binds update handlers. Suitable when buttons require custom rendering logic or content beyond simple strings. Inputs are an array of objects each specifying an 'element' property; outputs are a styled ButtonGroup with functional onPress logic. Dependencies: React, React Native Elements, and correctly defined custom components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/button_group.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstructor () {\\n  super()\\n  this.state = {\\n    selectedIndex: 2\\n  }\\n  this.updateIndex = this.updateIndex.bind(this)\\n}\\nupdateIndex (selectedIndex) {\\n  this.setState({selectedIndex})\\n}\\n\\nconst component1 = () => <Text>Hello</Text>\\nconst component2 = () => <Text>World</Text>\\nconst component3 = () => <Text>ButtonGroup</Text>\\n\\nrender () {\\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\\n  const { selectedIndex } = this.state\\n  return (\\n    <ButtonGroup\\n      onPress={this.updateIndex}\\n      selectedIndex={selectedIndex}\\n      buttons={buttons}\\n      containerStyle={{height: 100}} />\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Style and Status Bar in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet shows how to customize the Header's appearance. It sets status bar properties using `statusBarProps` (or `barStyle` directly) and modifies the main header container's style (background color, layout) using the `containerStyle` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/header.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  statusBarProps={{ barStyle: 'light-content' }}\n  barStyle=\"light-content\" // or directly\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  containerStyle={{\n    backgroundColor: '#3D6DCC',\n    justifyContent: 'space-around',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Various Rating Components using react-native-elements in React Native\nDESCRIPTION: This React Native functional component (`Ratings`) utilizes the `Rating` component from `react-native-elements` to display several rating examples. It includes default star ratings, a read-only fractional star rating, a custom-colored rating with a different count, and a heart-type rating with fractions. An `onFinishRating` callback logs the selected rating, and `StyleSheet` is used for basic layout and styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Rating/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE Rating\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from 'react-native-elements';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\n  const ratingCompleted = (rating: number) => {\n    console.log('Rating is: ' + rating);\n  };\n\n  const ratingProps = {};\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.viewContainer}>\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginBottom: 30,\n          }}\n        >\n          <Rating\n            showRating\n            imageSize={40}\n            onFinishRating={ratingCompleted}\n            style={{ paddingVertical: 10 }}\n          />\n          <Rating\n            showRating\n            type=\"star\"\n            fractions={1}\n            startingValue={3.6}\n            readonly\n            imageSize={40}\n            onFinishRating={ratingCompleted}\n            style={{ paddingVertical: 10 }}\n          />\n          <Rating\n            type=\"custom\"\n            ratingColor=\"#3498db\"\n            ratingCount={10}\n            imageSize={30}\n            onFinishRating={ratingCompleted}\n            showRating\n            style={{ paddingVertical: 10 }}\n          />\n          <Rating\n            type=\"heart\"\n            ratingCount={3}\n            fractions={2}\n            startingValue={1.57}\n            imageSize={40}\n            onFinishRating={ratingCompleted}\n            showRating\n            style={styles.rating}\n          />\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  headingContainer: {\n    paddingTop: 50,\n  },\n  titleText: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    paddingVertical: 5,\n    fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n    color: '#27ae60',\n  },\n  subtitleText: {\n    fontSize: 18,\n    fontWeight: '400',\n    textAlign: 'center',\n    fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n    color: '#34495e',\n  },\n  viewContainer: {\n    flex: 1,\n  },\n  rating: {\n    paddingVertical: 10,\n  },\n});\n\nexport default Ratings;\n```\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Native Colors in React Native Elements Theme (JSX)\nDESCRIPTION: This JSX code illustrates how to configure a React Native Elements theme to utilize native platform colors. It uses `Platform.select` from `react-native` to spread the appropriate platform-specific colors (`lightColors.platform.android` or `lightColors.platform.ios`) into the `lightColors` object during theme creation with `createTheme`. The `ThemeProvider` then applies this platform-aware theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/color.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the Rating Component in React Native Elements (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates the necessary import statement to use the `Rating` component from the `@rneui/themed` library within a React Native project. It makes the `Rating` component available for rendering in your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rating } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements (JavaScript/TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the Card component from the '@rneui/themed' package. This import is necessary to use the Card component and its subcomponents like Card.Title in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating Letter-Based Avatars with React Native Elements in TypeScript\nDESCRIPTION: This code illustrates usage of Avatars that display initials or letters using the 'title' prop with specified background colors. Useful when no image is available, the avatar presents a text placeholder for the user. Inputs are 'title' strings and 'containerStyle'; outputs are text-based avatars rendered in a row.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Avatar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    title=\"Rd\"\n    containerStyle={{ backgroundColor: \"blue\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    title=\"AB\"\n    containerStyle={{ backgroundColor: \"purple\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Typings with Declaration Merging in React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates how to use TypeScript's declaration merging to extend the typings of the `@rneui/themed` module for custom theme properties, such as adding a `bold` property to `TextProps` and custom color definitions. Dependencies include TypeScript, the `@rneui/themed` package, and an understanding of module augmentation. The snippet should be placed in a `react-native-elements.d.ts` declaration file. It expects TypeScript projects configured for declaration merging, and the output is extended type safety for customized themes. It is limited to type-level changes and does not affect runtime behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport * from '@rneui/themed';\n\ntype RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface Colors {\n    background: string;\n    border: string;\n    text: string;\n    altText: string;\n    danger: string;\n  }\n\n  export interface FullTheme {\n    colors: RecursivePartial<Colors>;\n    Text: Partial<TextProps>;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying the Theme Key for Dialog.Button Customization\nDESCRIPTION: This snippet indicates the theme key 'DialogButton' used within the ThemeProvider for customizing the styles of the `Dialog.Button` component in react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDialogButton\n```\n\n----------------------------------------\n\nTITLE: Configuring LinearGradient with Chip - React Native Elements - JSX\nDESCRIPTION: Demonstrates how to use the LinearGradient component from react-native-linear-gradient as the background for a Chip from React Native Elements. Dependencies required include @rneui/themed and react-native-linear-gradient. The Chip is customized via the ViewComponent prop for the gradient and linearGradientProps for gradient configuration; key parameters include colors, start, and end. The snippet expects proper project setup per react-native-linear-gradient's installation instructions and is intended for use inside a functional or class React component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Light and Dark Mode Themes in React (JSX)\nDESCRIPTION: This example shows how to use `createTheme` to define specific color palettes for light (`lightColors`) and dark (`darkColors`) modes. It also sets the initial theme mode to 'dark' using the `mode` property. The resulting theme object is passed to `ThemeProvider` to apply the specified dark theme by default. Requires the `@rneui/themed` library and React.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/theming.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#f2f2f2',\n  },\n  darkColors: {\n    primary: '#121212',\n  },\n  mode: 'dark',\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Input Reference in React Native\nDESCRIPTION: Example showing how to create and assign a ref to an Input component for method access.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for Dialog.Title Customization\nDESCRIPTION: This snippet shows the theme key `DialogTitle` used for customizing the `Dialog.Title` component via the `ThemeProvider` in React Native Elements. Referencing this key in the theme configuration allows for applying global styles or themes to all `Dialog.Title` instances.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDialogTitle\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Avatar` component from the `@rneui/themed` library in a React Native project using TypeScript. This import is necessary to use the `Avatar` component and its associated `Accessory` sub-component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme for Extended Component in React Native Elements\nDESCRIPTION: Demonstrates how to create a custom theme for an extended component (Text) in React Native Elements. This example adds a 'bold' prop to the Text component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing ListItem Subtitle with View and StyleSheet in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Illustrates how to create a custom layout within a `ListItem` by replacing the standard `ListItem.Subtitle` with a custom `View` containing an `Image` and `Text`. It uses React Native's `StyleSheet` for styling the custom subtitle area. Depends on `@rneui/themed` (`ListItem`), React Native's `View`, `Image`, `Text`, and `StyleSheet`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing LinearProgress via Theme Key\nDESCRIPTION: Demonstrates the theme key for the LinearProgress component used for customization with ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/LinearProgress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nLinearProgress\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component from React Native Elements - JavaScript\nDESCRIPTION: This snippet shows how to import the ListItem component from the '@rneui/themed' package, which is necessary for working with ListItem and its Input subcomponent. Ensure '@rneui/themed' is installed as a dependency in your project before using this import. The ListItem provides an enhanced list UI element with support for embedding text inputs and other interactive children.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Displaying a Featured Tile in React Native Elements Using JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Tile component from react-native-elements to display a featured tile with an image, title, and caption. The Tile is configured via the imageSrc (required), title, caption, and featured properties. Dependencies include react-native-elements, and the local image asset must be provided. The input is the JSX component with props; output is a styled Tile rendered in the UI. Requires React Native environment with proper asset resolution.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/tile.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  title=\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores dolore exercitationem\"\n  featured\n  caption=\"Some Caption Text\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Using withTheme HOC for Custom Component Theming\nDESCRIPTION: Demonstrates wrapping a custom component (`MyCustomComponent`) with the `withTheme` higher-order component from `@rneui/themed`. This injects `theme`, `updateTheme`, and `replaceTheme` props into the component. Additionally, it shows extending the `ComponentTheme` interface via declaration merging to allow theme configuration specifically for `MyCustomComponent`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme } from '@rneui/themed';\n\ntype MyCustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nexport const MyCustomComponent = withTheme<MyCustomComponentProps>((props) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n});\n\ndeclare module '@rneui/themed' {\n  export interface ComponentTheme {\n    MyCustomComponent: Partial<MyCustomComponentProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TabView Component in React Native Elements\nDESCRIPTION: Shows how to import the TabView component from the @rneui/themed package for use in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TabView } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Button with Right Icon Example in React Native Elements\nDESCRIPTION: Demonstrates how to position an icon to the right of the text in a button.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type=\"solid\">\n  Icon\n  <Icon name=\"home\" color=\"white\" />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay from React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Overlay component from the '@rneui/themed' package in a React Native JavaScript project. The import statement is essential to access or render the Overlay component in your application. No additional dependencies are required beyond the base package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Overlay } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Applying Native Platform Colors via ThemeProvider in React Native Elements (JSX)\nDESCRIPTION: This snippet demonstrates setting up a theme for React Native Elements that utilizes the platform's native default colors. It uses `Platform.select` to conditionally apply either `colors.platform.android` or `colors.platform.ios` based on the operating system. The `ThemeProvider` wraps the application components, ensuring that components like `Button` inherit these platform-specific colors by default.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, colors, ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  colors: {\n    ...Platform.select({\n      default: colors.platform.android,\n      ios: colors.platform.ios,\n    }),\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      // This button's color will now be the default iOS / Android blue.\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the Skeleton Component in TypeScript\nDESCRIPTION: This snippet shows the necessary import statement to bring the Skeleton component into your React Native project from the @rneui/themed library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skeleton } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Avatar Component in TypeScript\nDESCRIPTION: Imports the Avatar component from the '@rneui/themed' package, making it available for use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Avatar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage Examples for Input Component\nDESCRIPTION: This snippet shows how to include usage examples for the Input component in the documentation. It uses a custom Usage component imported from a separate file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Headings with React Native Elements in TypeScript\nDESCRIPTION: This JSX/TypeScript snippet demonstrates how to render multiple heading styles (h1 to h4) using the Text component within a Stack layout. The Text component receives boolean props (h1, h2, h3, h4) to apply corresponding font sizes and styles. The snippet assumes React and React Native Elements are installed, and Stack component is available for layout. Key inputs are the heading props; output is a visually organized set of heading texts.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Text.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Stack>\n  <Text h1>Heading 1</Text>\n  <Text h2>Heading 2</Text>\n  <Text h3>Heading 3</Text>\n  <Text h4>Heading 4</Text>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Custom Theme with ThemeProvider - React/JSX\nDESCRIPTION: This code demonstrates the creation of a theme object using the createTheme utility, defining separate color schemes for light and dark modes and setting default component props. The theme is provided to the application via ThemeProvider, making the custom styles accessible to all nested components, such as Button. Requires dependency on '@rneui/themed' and proper setup in a React Native app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  lightColors: {\n    primary: 'red',\n  },\n  darkColors: {\n    primary: 'blue',\n  },\n  components: {\n    Button: {\n      raised: true,\n    },\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>My Button</Button>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: ListItem with Custom View for Subtitle in React Native Elements\nDESCRIPTION: This example demonstrates implementing a ListItem with a custom View for the subtitle section that contains an image and text. Custom styles are applied to format the subtitle section appropriately.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nrender () {\n  return (\n    <ListItem>\n      <Avatar source={require('../images/avatar1.jpg')} />\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dialog ModalComponent for Web in React Native\nDESCRIPTION: Demonstrates how to import and pass a web-compatible Modal component (like `modal-react-native-web`) to the `ModalComponent` prop of the React Native Elements `Dialog`. This is required for web platforms as `react-native-web` lacks a built-in Modal implementation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Dialog ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Icons using Map Function in React Native\nDESCRIPTION: This example shows how to use the map function to render a list of items with icons using the ListItem and Icon components from React Native Elements. It creates a list of items with titles and icon names, and displays each item with an icon, title, and chevron.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Icon } from '@rneui/themed'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Cleaning iOS and Android Build Folders (Shell/Bash)\nDESCRIPTION: Removes build artifacts for iOS and Android to troubleshoot issues like unrecognized fonts. These bash commands delete build directories, forcing React Native to regenerate native builds, which can resolve runtime asset problems. Use with caution, as this removes all cache and compiled binaries.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ios/build\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Rendering a Themed Switch Component Using React Native Elements (TypeScript)\nDESCRIPTION: This snippet defines a functional React component that renders a Switch from @rneui/themed with internal state managed by the useState hook. It demonstrates controlled component patterns by updating the checked value via the onValueChange prop, and includes modular styling through React Native's StyleSheet API. Dependencies include React, React Native, @rneui/themed, and TypeScript for type definitions. The component takes no props and is exported as default, expecting to be imported and used within a React Native application that is set up to use the @rneui/themed library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\nconst [checked, setChecked] = useState(false);\n\nconst toggleSwitch = () => {\n  setChecked(!checked);\n};\n\nreturn (\n  <View style={styles.view}>\n   <Switch\n      value={checked}\n      onValueChange={(value) => setChecked(value)}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Themed Component with React Native Elements\nDESCRIPTION: This snippet demonstrates how to create a custom component that uses the React Native Elements theming system, including type definitions and the withTheme HOC.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme } from '@rneui/themed';\n\ntype MyCustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nexport const MyCustomComponent = withTheme<MyCustomComponentProps>((props) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n});\n\ndeclare module '@rneui/themed' {\n  export interface ComponentTheme {\n    MyCustomComponent: Partial<MyCustomComponentProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the ListItem component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component from React Native Elements\nDESCRIPTION: Shows how to import the Dialog component from the themed React Native Elements package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Active Tab.Item Usage with Container Styling (TypeScript)\nDESCRIPTION: Shows how to conditionally style a Tab.Item component based on its active state using a function for the containerStyle prop. The function receives an 'active' boolean and returns a style object, here setting backgroundColor to 'red' when active. Requires React and @rneui/themed's Tab.Item. Input: active state (implicit); Output: Tab.Item component styled per active status.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tab.Item.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Tab.Item\n  containerStyle={(active) => ({\n    backgroundColor: active ? \"red\" : undefined,\n  })}\n>\n  Tab\n</Tab.Item>\n```\n\n----------------------------------------\n\nTITLE: Exporting a Themed React Native Component (JavaScript)\nDESCRIPTION: Exports the `Buttons` component, wrapping it with the `withTheme` higher-order component (likely from 'react-native-elements'). This injects the application's theme properties as props into the `Buttons` component, allowing it to access and use theme-defined styles and values.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default withTheme(Buttons, '');\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Tab Components and Hooks in JavaScript\nDESCRIPTION: This snippet imports the Tabs and TabItem components, as well as the useBaseUrl hook, from the Docusaurus theme package. These imports are required to render navigation tabs and handle base URL computations within documentation pages. To function, the Docusaurus environment and its relevant theme packages must be installed. Dependencies: '@theme/Tabs', '@theme/TabItem', and '@docusaurus/useBaseUrl'. The snippet does not perform any tab logic directly; it simply makes the components available for use in the page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/universe/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Referencing the SearchBar Component in React Native\nDESCRIPTION: This JavaScript snippet demonstrates how to obtain a reference to a `SearchBar` component instance using the `ref` prop in a React Native application. Storing the reference (e.g., in `this.search`) allows programmatic access to the component's methods. It requires React and the `SearchBar` component from React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Theme Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of the theme object with color properties for different platforms and UI states.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/2.theme object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    background;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Themes in Your Own Components - React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates initializing and supplying a custom color theme in a React Native app via the ThemeProvider from @rneui/themed, using createTheme to define primary colors. The code emphasizes context-wide theme application, requiring React, @rneui/themed, and a valid theme structure. It is typically placed at the root of your component tree. Inputs are the theme object; outputs are updated color usage in child components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/0.index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#a4e2f5',\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      {/* ... */}\n      {/* ... */}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Array Styles in React Native Elements Theme and Component (JSX)\nDESCRIPTION: This example illustrates another correct usage pattern. Here, both the theme's `containerStyle` and the Button's local `containerStyle` are defined as arrays of style objects. The styles merge correctly due to the matching array types.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Using ThemeProvider and Custom Themes - jsx\nDESCRIPTION: Demonstrates complete usage of ThemeProvider and createTheme to establish a custom theme at the app root. Requires @rneui/themed and dependencies. The 'myTheme' object defines both light and dark color palettes and sets initial mode to dark. Expects components wrapped in ThemeProvider to access theme settings.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\\n\\nconst myTheme = createTheme({\\n  lightColors: {\\n    primary: '#f2f2f2',\\n  },\\n  darkColors: {\\n    primary: '#121212',\\n  },\\n  mode: 'dark',\\n});\\n\\nconst App = () => {\\n  return (\\n    <ThemeProvider theme={myTheme}>\\n      <Button title=\"My Button\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Context with useTheme Hook in React Native Elements (TSX)\nDESCRIPTION: This snippet illustrates retrieving and utilizing the current theme with the useTheme hook in a function component. It accesses the colors from the theme for dynamic styling purposes. Requires the @rneui/themed package and React Native view rendering capabilities. The hook gives access to theme properties and allows styling components according to global or context theme values; if no ThemeProvider is present, defaults are used.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/1.themprovider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\\n\\nfunction Demo() {\\n  const { theme } = useTheme();\\n  return <View style={{ background: theme.colors.primary }} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Composing a Raised Button with React Native Elements - TypeScript\nDESCRIPTION: Defines a functional component 'RaisedButton' that wraps the React Native Elements Button component, setting the 'raised' prop by default. This snippet demonstrates how to create a styled variation of a standard component for reuse, where the new component accepts all props of the base Button. Dependencies include React and '@rneui/themed'; props can be customized as needed and all normal Button props are supported as inputs and outputs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/0.index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Tab Initialization in React Native Elements (TypeScript)\nDESCRIPTION: Illustrates initializing and rendering two tab items using the Tab component in a TypeScript React function component. React's useState manages the active tab index. The key props are 'value' for current index, 'onChange' for callback, and 'dense' for styling. The component renders two Tab.Item child elements, each representing a tab. Inputs include no external state; outputs are the rendered tab interface with selection management. Requires react, react-native, and @rneui/themed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction RneTab() {\n  const [index, setIndex] = React.useState(0);\n  return (\n    <>\n      <Tab value={index} onChange={setIndex} dense>\n        <Tab.Item>Tab</Tab.Item>\n        <Tab.Item>Tab</Tab.Item>\n      </Tab>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FAB Component in React Native Elements\nDESCRIPTION: Shows how to import the FAB component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FAB } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Skeleton Component Variants (TSX)\nDESCRIPTION: Demonstrates the usage of the Skeleton component's shape variants. It shows a default rectangular skeleton and a circular skeleton using the 'circle' prop. The 'Stack' component is used for layout.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Skeleton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Skeleton width={120} height={40} />\n  <Skeleton circle width={40} height={40} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Avatar Sizes with React Native Elements in TypeScript\nDESCRIPTION: This code snippet displays three Avatars of varying sizes (24, 32, 48), all with circular shapes and pencil icons, laid out in a row using the Stack component. It demonstrates the impact of the 'size' prop on the Avatar's appearance. Expected inputs are props for size, shape, and icon definition; outputs are Avatars rendered with the designated sizes and style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Avatar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={24}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={48}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Initializing Header with Mixed Components and Render Functions - React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet illustrates combining default and custom content, such as providing a React element for the left, a render function for the center, and a configuration object for the right component. The centerComponent prop is set to a function (this.renderCenterComponent), supporting advanced dynamic rendering. All types of accepted values for the props are exemplified here. The main dependency is react-native-elements; the implied custom components and functions must be defined in the scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/header.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={this.renderCenterComponent()}\n  rightComponent={{ icon: 'home', style: { color: '#fff' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic BottomSheet in React Native Elements (TypeScript)\nDESCRIPTION: This React Native functional component demonstrates the usage of the `BottomSheet` component from `@rneui/themed`. It utilizes the `useState` hook to control the visibility of the bottom sheet, which is toggled by a `Button`. The `BottomSheet` displays a list of items defined in an array, mapping them to `ListItem` components. One list item is configured as a 'Cancel' button to close the sheet. The example requires the parent application to be wrapped in `SafeAreaProvider` from `react-native-safe-area-context`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\nimport { StyleSheet } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype BottomSheetComponentProps = {};\n\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\nreturn (\n  <SafeAreaProvider>\n    <Button\n      title=\"Open Bottom Sheet\"\n      onPress={() => setIsVisible(true)}\n      buttonStyle={styles.button}\n    />\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\n      {list.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={l.containerStyle}\n          onPress={l.onPress}\n        >\n          <ListItem.Content>\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </BottomSheet>\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\n});\n\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Usage in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Demonstrates various ways to use the Button component from react-native-elements. Includes examples for solid, outline, and clear button types, adding icons as components or objects, positioning icons to the right, and displaying a loading indicator. Requires importing `Button` from `react-native-elements` and optionally `Icon` from `react-native-vector-icons/FontAwesome`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/button.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from 'react-native-elements';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\n<Button\n  title=\"Solid Button\"\n/>\n\n<Button\n  title=\"Outline button\"\n  type=\"outline\"\n/>\n\n<Button\n  title=\"Clear button\"\n  type=\"clear\"\n/>\n\n<Button\n  icon={\n    <Icon\n      name=\"arrow-right\"\n      size={15}\n      color=\"white\"\n    />\n  }\n  title=\"Button with icon component\"\n/>\n\n<Button\n  icon={{\n    name: \"arrow-right\",\n    size: 15,\n    color: \"white\"\n  }}\n  title=\"Button with icon object\"\n/>\n\n<Button\n  icon={\n    <Icon\n      name=\"arrow-right\"\n      size={15}\n      color=\"white\"\n    />\n  }\n  iconRight\n  title=\"Button with right icon\"\n/>\n\n<Button\n  title=\"Loading button\"\n  loading\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Components with React Native Elements\nDESCRIPTION: A React Native component that demonstrates three different card layouts: a user list card with avatars, a typography demonstration card, and an image card with a button. The component uses TypeScript and includes custom styling through StyleSheet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet, Image } from 'react-native';\nimport { Text, Card, Button, Icon } from '@rneui/themed';\n\nconst users = [\n{\n  name: 'brynn',\n  avatar: 'https://uifaces.co/our-content/donated/1H_7AxP0.jpg',\n},\n{\n  name: 'thot leader',\n  avatar:\n    'https://images.pexels.com/photos/598745/pexels-photo-598745.jpeg?crop=faces&fit=crop&h=200&w=200&auto=compress&cs=tinysrgb',\n},\n{\n  name: 'jsa',\n  avatar: 'https://uifaces.co/our-content/donated/bUkmHPKs.jpg',\n},\n{\n  name: 'talhaconcepts',\n  avatar: 'https://randomuser.me/api/portraits/men/4.jpg',\n},\n{\n  name: 'andy vitale',\n  avatar: 'https://uifaces.co/our-content/donated/NY9hnAbp.jpg',\n},\n{\n  name: 'katy friedson',\n  avatar:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxMTc1MTYzM15BMl5BanBnXkFtZTgwNzI5NjMwOTE@._V1_UY256_CR16,0,172,256_AL_.jpg',\n},\n];\n\ntype CardsComponentsProps = {};\n\nconst Cards: React.FunctionComponent<CardsComponentsProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.container}>\n        <Card>\n          <Card.Title>CARD WITH DIVIDER</Card.Title>\n          <Card.Divider />\n          {users.map((u, i) => {\n            return (\n              <View key={i} style={styles.user}>\n                <Image\n                  style={styles.image}\n                  resizeMode=\"cover\"\n                  source={{ uri: u.avatar }}\n                />\n                <Text style={styles.name}>{u.name}</Text>\n              </View>\n            );\n          })}\n        </Card>\n        <Card containerStyle={{ marginTop: 15 }}>\n          <Card.Title>FONTS</Card.Title>\n          <Card.Divider />\n          <Text style={styles.fonts} h1>\n            h1 Heading\n          </Text>\n          <Text style={styles.fonts} h2>\n            h2 Heading\n          </Text>\n          <Text style={styles.fonts} h3>\n            h3 Heading\n          </Text>\n          <Text style={styles.fonts} h4>\n            h4 Heading\n          </Text>\n          <Text style={styles.fonts}>Normal Text</Text>\n        </Card>\n        <Card>\n          <Card.Title>HELLO WORLD</Card.Title>\n          <Card.Divider />\n          <Card.Image\n            style={{ padding: 0 }}\n            source={{\n              uri:\n                'https://awildgeographer.files.wordpress.com/2015/02/john_muir_glacier.jpg',\n            }}\n          />\n          <Text style={{ marginBottom: 10 }}>\n            The idea with React Native Elements is more about component\n            structure than actual design.\n          </Text>\n          <Button\n            icon={\n              <Icon\n                name=\"code\"\n                color=\"#ffffff\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              borderRadius: 0,\n              marginLeft: 0,\n              marginRight: 0,\n              marginBottom: 0,\n            }}\n            title=\"VIEW NOW\"\n          />\n        </Card>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nfonts: {\n  marginBottom: 8,\n},\nuser: {\n  flexDirection: 'row',\n  marginBottom: 6,\n},\nimage: {\n  width: 30,\n  height: 30,\n  marginRight: 10,\n},\nname: {\n  fontSize: 16,\n  marginTop: 5,\n},\n});\n\nexport default Cards;\n```\n\n----------------------------------------\n\nTITLE: Implementing SpeedDial Actions in React Native Elements - JavaScript\nDESCRIPTION: Demonstrates the use of React Native Elements' SpeedDial component in a functional React Native component. Requires @rneui/themed and React as dependencies. The snippet sets up local state to handle open/close logic and configures the action buttons with icons, titles, and press handlers. Inputs include user taps on the floating action button or its actions, and outputs are side effects like logging to the console. Customizing the icon, colors, and action callbacks are supported, but additional configuration may be needed for advanced usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { SpeedDial } from '@rneui/themed';\\n\\nexport default () => {\\nconst [open, setOpen] = React.useState(false);\\nreturn (\\n  <SpeedDial\\n    isOpen={open}\\n    icon={{ name: 'edit', color: '#fff' }}\\n    openIcon={{ name: 'close', color: '#fff' }}\\n    onOpen={() => setOpen(!open)}\\n    onClose={() => setOpen(!open)}\\n  >\\n    <SpeedDial.Action\\n      icon={{ name: 'add', color: '#fff' }}\\n      title=\"Add\"\\n      onPress={() => console.log('Add Something')}\\n    />\\n    <SpeedDial.Action\\n      icon={{ name: 'delete', color: '#fff' }}\\n      title=\"Delete\"\\n      onPress={() => console.log('Delete Something')}\\n    />\\n  </SpeedDial>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Input Component Examples\nDESCRIPTION: Comprehensive example showing various Input component implementations including basic input, inputs with icons, custom icons, error messages, and secure text entry.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding SafeAreaProvider Component Wrapper - JavaScript\nDESCRIPTION: Shows how to wrap your app with the SafeAreaProvider component from react-native-safe-area-context to ensure proper handling of safe areas on modern devices. Place SafeAreaProvider at the top level of your component hierarchy. Prerequisite: install react-native-safe-area-context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\\n\\nfunction App() {\\n  return <SafeAreaProvider>...</SafeAreaProvider>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Progress Component in React Native\nDESCRIPTION: This snippet demonstrates how to use the LinearProgress component from React Native Elements. It shows both indeterminate and determinate progress bars, and includes interactive buttons to control the progress state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/LinearProgress/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from 'react-native-elements';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    let subs = true;\n    if (progress < 1 && progress !== 0) {\n      setTimeout(() => {\n        if (subs) {\n          setProgress(progress + 0.1);\n        }\n      }, 100);\n    }\n    return () => {\n      subs = false;\n    };\n  }, [progress]);\n\n  return (\n    <View>\n      <View\n        style={{\n          margin: 10,\n        }}\n      >\n        <Text>Indeterminate Variant </Text>\n        <LinearProgress style={{ marginVertical: 10 }} />\n        <Text>Indeterminate Variant with color</Text>\n        <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n        <Text>Determinate Variant</Text>\n        <LinearProgress\n          style={{ marginVertical: 10 }}\n          value={progress}\n          variant=\"determinate\"\n        />\n\n        <Button\n          disabled={progress > 0}\n          onPress={() => {\n            setProgress(0.00001);\n          }}\n          title={'Start Progress'}\n          containerStyle={{ margin: 10 }}\n        />\n        <Button\n          disabled={progress === 0}\n          onPress={() => {\n            setProgress(0);\n          }}\n          title={'Restart'}\n          containerStyle={{ margin: 10 }}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default LinearProgressAPI;\n```\n\n----------------------------------------\n\nTITLE: Programmatically Toggling Tooltip with useEffect in React Native Elements (JavaScript)\nDESCRIPTION: This snippet illustrates triggering the tooltip display by calling its toggleTooltip method inside a React useEffect hook. Dependencies include React and the useRef/useEffect hooks. The effect runs once on component mount (empty dependency array), calling 'toggleTooltip' on the tooltipRef's current instance. This allows programmatic display or hiding of the Tooltip component outside standard user interaction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/tooltip.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nuseEffect(() => {\n  tooltipRef.current.toggleTooltip();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible ListItems with ListItem.Accordion in React Native Elements (tsx)\nDESCRIPTION: Provides an example of a functional component `RNEListItemAccordion` that uses `ListItem.Accordion` to create a collapsible section. It manages the expanded/collapsed state using `React.useState` and `onPress`, displaying nested `ListItem` components with Avatars when expanded.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RNEListItemAccordion() {\n  const [expanded, setExpanded] = React.useState(false);\n  return (\n    <>\n      <ListItem.Accordion\n        content={\n          <ListItem.Content>\n            <ListItem.Title>Top Users</ListItem.Title>\n            <ListItem.Subtitle>Tap to expand</ListItem.Subtitle>\n          </ListItem.Content>\n        }\n        isExpanded={expanded}\n        onPress={() => {\n          setExpanded(!expanded);\n        }}\n      >\n        <ListItem>\n          <Avatar\n            rounded\n            source={{\n              uri: \"https://randomuser.me/api/portraits/men/32.jpg\",\n            }}\n          />\n          <ListItem.Content>\n            <ListItem.Title>John Doe</ListItem.Title>\n            <ListItem.Subtitle>Principle Engineer</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n        <ListItem>\n          <Avatar\n            rounded\n            source={{\n              uri: \"https://randomuser.me/api/portraits/men/36.jpg\",\n            }}\n          />\n          <ListItem.Content>\n            <ListItem.Title>Albert</ListItem.Title>\n            <ListItem.Subtitle>Staff Engineer</ListItem.Subtitle>\n          </ListItem.Content>\n        </ListItem>\n      </ListItem.Accordion>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image-Based Avatars with React Native Elements in TypeScript\nDESCRIPTION: This example demonstrates rendering Avatar components that use images loaded from remote URLs using the 'source' prop, with rounded shapes. It is useful for displaying profile pictures in a list or profile screen. Requires image URIs as input and outputs avatars with those images displayed; dependencies include a valid image source.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Avatar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    source={{ uri: \"https://randomuser.me/api/portraits/men/36.jpg\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    source={{ uri: \"https://randomuser.me/api/portraits/men/35.jpg\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing the Chip Component in React Native (JavaScript)\nDESCRIPTION: Shows how to import the Chip component from the '@rneui/themed' package to use it within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chip } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing the Dialog Component in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the 'Dialog' component from the '@rneui/themed' library. This import is necessary to use the 'Dialog.Button' sub-component within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Dialog.Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Skeleton Component Animations (TSX)\nDESCRIPTION: Illustrates how to set different animation types for the Skeleton component using the 'animation' prop. It shows the default 'pulse' animation, the 'wave' animation (which requires passing a 'LinearGradientComponent'), and disabling animation with 'none'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Skeleton.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Skeleton animation=\"pulse\" width={80} height={40} />\n  <Skeleton\n    LinearGradientComponent={LinearGradient}\n    animation=\"wave\"\n    width={80}\n    height={40}\n  />\n  <Skeleton animation=\"none\" width={80} height={40} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Native Colors in React Native Elements Theme (JSX)\nDESCRIPTION: Demonstrates configuring the theme to use the respective native color palettes for Android and iOS. It utilizes `Platform.select` from `react-native` and predefined platform colors from `@rneui/themed` within `createTheme`. Components wrapped in `ThemeProvider`, like the `Button`, will then use the appropriate platform's default color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Theming with ThemeProvider and Button - React Native Elements - JSX\nDESCRIPTION: This snippet showcases the usage of the ThemeProvider from '@rneui/themed' to wrap a Button component. This allows for consistent theming across the application. Both Button and ThemeProvider are imported from the library, and the Button receives a 'title' prop. Inputs: None; Output: A button labeled 'Hey!' styled according to the current theme context. Developers can extend this setup by customizing the theme or creating themed components, but this example covers the basic provider structure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from '@rneui/themed';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Extending React Native Elements Theme with TypeScript\nDESCRIPTION: Shows how to extend the default React Native Elements theme definition using TypeScript's declaration merging. This example adds a custom `p1Style` to the `Text` component's theme interface and defines additional custom colors within the `Colors` interface, making them available in the `FullTheme` type.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\ndeclare module 'react-native-elements' {\n  export interface TextProps {\n    p1Style: StyleProp<TextStyle>;\n  }\n\n  export interface Colors {\n    background: string;\n    border: string;\n    text: string;\n    altText: string;\n    danger: string;\n  }\n\n  export interface FullTheme {\n    colors: RecursivePartial<Colors>;\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Theme Style as Object and Local Style as Array - React Native Elements - JSX\nDESCRIPTION: Illustrates that it is also valid to define the theme style as an object and the component style as an array, as React Native Elements handles this gracefully. The ThemeProvider will convert the object into an array where needed, ensuring both theme and local styles merge correctly. Inputs are mixed (object in theme, array in prop), and the result is consistent style application without runtime issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/4.pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package within a TypeScript/TSX file. This import is necessary to use the `ListItem` and its subcomponents like `ListItem.Content` in a React Native application built with React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Styles with ThemeProvider (JavaScript/React Native)\nDESCRIPTION: This snippet shows how to use ThemeProvider to apply theme-level styles to component props. The theme object sets a title color, which overrides the component's internal style. The ThemeProvider ensures theme values are merged with internal props for all nested components. Dependencies are react-native-elements, input is a theme object, and the result is a component with themed colors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Components (Placeholder)\nDESCRIPTION: This line imports components from the `react-native-elements` library. The empty curly braces `{}` indicate that specific components intended for use (like FAB itself or supporting components for examples) should be listed here, but are currently omitted or implied by the context of the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/FAB.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Module (Placeholder)\nDESCRIPTION: An empty import statement for the 'react-native-elements' library. This syntax is valid but imports nothing specific; it might serve as a placeholder or ensure the module's side effects are executed if any.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using PricingCard - React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates how to import and utilize the PricingCard component from the react-native-elements library in a React Native app. It shows how to configure the card with color, title, price, info, and button options, all using props. Required dependencies: the react-native-elements library. Key parameters include 'color' for theming, 'title' and 'price' for display, 'info' for feature details, and 'button' for actionable CTA. The component outputs a formatted pricing card UI and should be used within a React Native render context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/pricing.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PricingCard } from 'react-native-elements';\n\n<PricingCard\n  color=\"#4f9deb\"\n  title=\"Free\"\n  price=\"$0\"\n  info={['1 User', 'Basic Support', 'All Core Features']}\n  button={{ title: 'GET STARTED', icon: 'flight-takeoff' }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonGroup in React Native with React Native Elements\nDESCRIPTION: This snippet demonstrates the use of ButtonGroup component from React Native Elements. It shows how to create ButtonGroups with string inputs for both single and multiple selections, and mentions the use of component inputs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState} from 'react'\nimport { ButtonGroup } from '@rneui/themed'\nimport { Text, StyleSheet } from 'react-native';\n\nexport default() => {\nconst [selectedIndex, setSelectedIndex] = useState(0);\nconst [selectedIndexes, setSelectedIndexes] = useState([0, 2, 3]);\nreturn (\n  <>\n    <Text style={styles.subHeader}>Using Strings</Text>\n    <ButtonGroup\n      buttons={['SIMPLE', 'BUTTON', 'GROUP']}\n      selectedIndex={selectedIndex}\n      onPress={(value) => {\n        setSelectedIndex(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <ButtonGroup\n      buttons={['Multiple', 'Select', 'Button', 'Group']}\n      selectMultiple\n      selectedIndexes={selectedIndexes}\n      onPress={(value) => {\n        setSelectedIndexes(value);\n      }}\n      containerStyle={{ marginBottom: 20 }}\n    />\n    <Text style={styles.subHeader}>Using Components</Text>\n  </>\n)\n}\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Theme Components and Hooks in JavaScript/MDX\nDESCRIPTION: This snippet imports the `Tabs`, `TabItem` components from the Docusaurus theme (`@theme`) and the `useBaseUrl` hook from Docusaurus core (`@docusaurus/useBaseUrl`). These imports are necessary to enable interactive tabbed content and correctly reference site assets within the MDX documentation file. Requires a Docusaurus project setup.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/universe/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Button with Icon Implementation in React Native Elements\nDESCRIPTION: Creating a button with a home icon positioned to the left of the text. This example uses the 'icon' prop to specify which icon to display.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" icon=\"home\" />\n```\n\n----------------------------------------\n\nTITLE: Importing the Skeleton Component in TypeScript\nDESCRIPTION: Imports the Skeleton component from the '@rneui/themed' package for use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Skeleton } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing the BottomSheet Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `BottomSheet` component from the `@rneui/themed` package for use within a React Native application using TypeScript. This is the necessary first step before utilizing the component in your code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BottomSheet } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet shows how to import the necessary `ListItem` component from the `@rneui/themed` package to utilize the `ListItem.Accordion` functionality within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React Native Elements\nDESCRIPTION: Shows how to import the Slider component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Merging Object Theme Style with Array Component Style (JSX)\nDESCRIPTION: Presents a scenario where the theme defines `Button.containerStyle` as an object, while the `Button` component receives `containerStyle` as an array. According to the accompanying text, this configuration works, implying successful merging despite the type mismatch shown in the code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Header with Custom Components as Children - React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet shows the use of Header's children prop to provide custom React components for the left, center, and right sections. When JSX elements are nested as children, these override components passed in as props, thus allowing explicit control of rendered content and order. No configuration via props is done in this scenario. All custom components used must exist in the local scope; the dependency is still react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/header.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<Header>\n  <MyCustomLeftComponent />\n  <MyCustomCenterComponent />\n  <MyCustomRightComponent />\n</Header>\n```\n\n----------------------------------------\n\nTITLE: Importing Component and Markdown in React Native Elements - JavaScript\nDESCRIPTION: This snippet imports the Snack markdown file ('./snack/index.md') and the Snack React component from the relative path. It is designed for use in a React Native Elements documentation or demo interface. There are no additional dependencies required beyond standard ES module import semantics, and this pattern assumes support for importing markdown files as modules, which may require custom tooling or webpack loaders.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SocialIcon/SocialIcon.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n```\n\n----------------------------------------\n\nTITLE: Adding Component-Specific Theme Properties (JavaScript/React Native)\nDESCRIPTION: This snippet shows how to add component-specific theme keys and default props to the theme object in react-native-elements. Components like Avatar and Badge receive their own style defaults, which are propagated via ThemeProvider. Accepts any component props as theme keys.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  Avatar: {\n    rounded: true,\n  },\n  Badge: {\n    textStyle: { fontSize: 30 },\n  },\n};\n\n...\n\n<ThemeProvider theme={theme}>\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo Project with Stable RNE Template\nDESCRIPTION: Uses the Expo CLI to initialize a new React Native project named 'app' using the official stable React Native Elements template (`@rneui/template`). This sets up a project with RNE pre-configured.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Custom Theme with ThemeProvider - TypeScript\nDESCRIPTION: Defines a custom theme using createTheme with a new primary color, then applies it application-wide via ThemeProvider. This method is suitable for setting up base colors or other global tokens. The App component can now access the customized theme values; dependencies are '@rneui/themed'. No UI components are shown, but the layout demonstrates theme structure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/0.index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#a4e2f5',\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      {/* ... */}\n      {/* ... */}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Featured Tile with Icon - React Native Elements - JavaScript\nDESCRIPTION: Shows how to add an icon to a featured Tile using the Tile component from react-native-elements. It requires the 'react-native-elements' package and sets the 'imageSrc' for the main image, while the 'icon' prop specifies an icon object with at least a name and type. The 'featured' prop applies a visual emphasis. This renders a tile with a play-circle icon overlaid, typically used for items like videos.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/tile.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  icon={{ name: 'play-circle', type: 'font-awesome' }}\n  featured\n/>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Theme Colors in a React Native Component\nDESCRIPTION: Shows how to access the theme, including custom defined colors, within a functional React Native component (`Component.tsx`). It utilizes the `useTheme` hook from `@rneui/themed` to retrieve the theme object and applies the custom `accent` color to a `Text` component's style. This component must be rendered within a `ThemeProvider` context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Component.tsx\nexport const Component = () => {\n  const { theme } = useTheme();\n  return <Text style={{ color: theme.colors.accent }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using ButtonGroup with Icons for Single Selection in React Native (TSX)\nDESCRIPTION: Demonstrates implementing a `ButtonGroup` with `Icon` components as buttons in a React Native TSX function component. It uses `React.useState` to manage the currently selected button index (`selectedIndex`) and updates it via the `onPress` prop. Custom styles are applied to the buttons (`buttonStyle`) and the selected button (`selectedButtonStyle`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ButtonGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [selectedIndex, setSelectedIndex] = React.useState(0);\n     return (\n       <ButtonGroup\n         buttonStyle={{ padding: 10 }}\n         selectedButtonStyle={{ backgroundColor: '#e2e2e2' }}\n         buttons={[\n           <Icon name=\"format-align-left\" />,\n           <Icon name=\"format-align-center\" />,\n           <Icon name=\"format-align-right\" />,\n         ]}\n         selectedIndex={selectedIndex}\n         onPress={setSelectedIndex}\n       />\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Styles with React Native StyleSheet in JavaScript\nDESCRIPTION: This snippet sets up shared style rules using the React Native StyleSheet API, organizing reusable styling objects for various elements including containers, buttons, and headers. Requires the 'react-native' module. Inputs are named style rules referenced by components, outputs are consistent styling throughout the UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n},\nbuttonsContainer: {\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '100%',\n  marginVertical: 20,\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates the correct way to import the Switch component from the '@rneui/themed' package for use in a React Native TypeScript project. The import assumes that '@rneui/themed' is installed as a dependency. Use this import at the top of your file to access the fully themed Switch component compatible with React Native's controlled component patterns.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Switch } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Project with Bleeding Edge RNE Template using NPX\nDESCRIPTION: Uses npx (Node Package Execute) and Expo CLI to create a new Expo project pre-configured with the bleeding-edge version of React Native Elements using the official template specified with the '@edge' tag (`@rneui/template@edge`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Installing Stable React Native Elements Packages - Bash\nDESCRIPTION: Demonstrates using npm or yarn to install stable versions of @rneui/themed and @rneui/base from npm. Assumes a React Native or compatible environment. Output is the updated project dependencies; no parameters required except a working package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Theme using updateTheme in React Native Elements (TSX)\nDESCRIPTION: Shows how to dynamically update the current theme using the `updateTheme` function. This example merges a new primary color ('purple') into the `lightColors` object of the existing theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nupdateTheme({\n  lightColors: {\n    primary: 'purple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.Input Customization\nDESCRIPTION: This identifies the theme key `ListItemInput` used for customizing the appearance of the ListItem.Input component via the ThemeProvider in React Native Elements. This key allows applying specific styles to all ListItem.Input instances within the themed context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nListItemInput\n```\n\n----------------------------------------\n\nTITLE: Stateless Tooltip API Migration - React Native Elements (diff)\nDESCRIPTION: Details code changes to migrate Tooltips to the new stateless API using 'visible', 'onOpen', and 'onClose' props. Assumes Tooltip is from @rneui/themed and controlled via state for open/close. Ensures compatibility with v4 Tooltip behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  <Tooltip\\n+   visible={open}\\n+   onOpen={() => {\\n+      setOpen(true);\\n+   }}\\n+   onClose={() => {\\n+      setOpen(false);\\n+   }}\\n    popover=\"Hey All\"\\n  />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Rectangular Skeleton Placeholder (JSX)\nDESCRIPTION: This JSX snippet shows how to render a rectangular `Skeleton` component using `react-native-elements`. The `variant` prop is set to `\"rectangular\"`, and the `width` and `height` props define the dimensions of the placeholder, suitable for content blocks like images or text areas while data is being fetched.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Skeleton variant=\"rectangular\" width={210} height={118} />\n```\n\n----------------------------------------\n\nTITLE: Using LinearGradient with React Native Elements Chip Component\nDESCRIPTION: Basic example showing how to use LinearGradient with a Chip component from React Native Elements. This demonstrates setting up the ViewComponent and linearGradientProps to create a gradient background.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Snack Component in JavaScript\nDESCRIPTION: This snippet imports the Snack component from a local file. The Snack component is likely used to provide an interactive example of the withBadge HOC.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Badge/Badge.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay Component\nDESCRIPTION: Shows how to import the Overlay component and related dependencies from React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Conditionally Styling an Active Tab.Item in React Native (TSX)\nDESCRIPTION: Demonstrates using the Tab.Item component in TSX. It utilizes a function passed to the 'containerStyle' prop to conditionally apply a red background color only when the component's implicit 'active' prop is true.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tab.Item.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab.Item\n  containerStyle={(active) => ({\n    backgroundColor: active ? \"red\" : undefined,\n  })}\n>\n  Tab\n</Tab.Item>\n```\n\n----------------------------------------\n\nTITLE: Using ThemeProvider and createTheme in Application Root - jsx\nDESCRIPTION: Provides a complete example of defining a custom theme using 'createTheme' and applying it via ThemeProvider at the root of a React Native Elements-powered app. Dependencies include '@rneui/themed' and React. Key parameters: theme object, ThemeProvider context, Button usage. Input is the sample application, and output is a themed button. Ensure the ThemeProvider appears at the top level for all components to receive context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\\n\\nconst myTheme = createTheme({\\n  lightColors: {\\n    primary: '#f2f2f2',\\n  },\\n  darkColors: {\\n    primary: '#121212',\\n  },\\n  mode: 'dark',\\n});\\n\\nconst App = () => {\\n  return (\\n    <ThemeProvider theme={myTheme}>\\n      <Button title=\"My Button\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonGroup with React Components as Buttons in React Native\nDESCRIPTION: This snippet demonstrates how to create a ButtonGroup using React Components as button elements. It includes state management for the selected index and a method to update the selected index when a button is pressed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Modal Component for Web Tooltip in React Native\nDESCRIPTION: Demonstrates how to pass a specific Modal implementation (from 'modal-react-native-web') to the Tooltip component's `ModalComponent` prop. This is necessary for web platforms because the standard React Native Modal component is not implemented in 'react-native-web'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Tooltip ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Custom Theme in React Native Elements (JSX)\nDESCRIPTION: This JSX snippet demonstrates creating a custom theme using `createTheme` from `@rneui/themed`. It defines different `primary` colors for `lightColors` and `darkColors` modes. The created `theme` is then applied to the application using the `ThemeProvider` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/color.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* ... */}\n      {/* ... */}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping List Items with Avatars in React Native Elements (JavaScript)\nDESCRIPTION: This snippet maps through a list of user profiles and displays each as a ListItem component, including an avatar, title, and subtitle, using React Native Elements in JavaScript. It requires the '@rneui/themed' package and expects a list of objects containing 'name', 'avatar_url', and 'subtitle' keys. The input is an array of profiles and outputs corresponding list items with avatars and supplementary information displayed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Creating React Native ListItem with Linear Gradient and Touchable Scale\nDESCRIPTION: This snippet demonstrates how to create a visually enhanced `ListItem` from `@rneui/themed` in React Native. It integrates `react-native-touchable-scale` for interactive scaling feedback on touch and `react-native-linear-gradient` to apply a gradient background. Key props like `friction`, `tension`, `activeScale`, `linearGradientProps`, `Component`, and `ViewComponent` are used for customization. Note: `react-native-linear-gradient` is marked as optional if using Expo.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n\n----------------------------------------\n\nTITLE: Importing the Slider Component in React Native Elements (TypeScript)\nDESCRIPTION: This code snippet illustrates how to import the Slider component from the @rneui/themed package for use in a React Native application. Ensure that the @rneui/themed package is installed as a dependency in your project. The import provides access to the Slider UI input component, enabling the rendering and management of slider-based inputs in your app. No parameters are required for import; the resulting Slider component can be used in JSX/TSX files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Slider } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Merging Object Styles in React Native Elements Theme (JSX)\nDESCRIPTION: Demonstrates a successful style merge using React Native Elements `ThemeProvider` where both the theme's `Button.containerStyle` and the local `Button` component's `containerStyle` are defined as style objects. This consistency ensures styles are merged correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/4.pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Theme with Custom Colors using createTheme (@rneui/themed)\nDESCRIPTION: Demonstrates creating a theme instance using `createTheme` from `@rneui/themed`. It defines values for the previously declared custom colors ('tertiary', 'accent', 'surface') in both `lightColors` and `darkColors` objects, sets up a component-specific style (`Button`) using a custom color, and specifies the initial `mode`. This theme is then passed as a prop to the `ThemeProvider` component, making it available to descendant components via context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nconst theme = createTheme({\n  lightColors: {\n    tertiary: '#124789',\n    accent: '#f98652',\n    surface: '#0990763',\n  },\n  darkColors: {\n    tertiary: '#124789',\n    accent: '#908652',\n    surface: '#0990763',\n  },\n  components:{\n    Button:(props,theme)=>({ // Note: Example shows Button, ensure props type matches ButtonProps if available\n      containerStyle:{\n        backgroundColor:theme.colors.tertiary\n      }\n    })\n  }\n  mode: 'light', // or 'dark'\n});\n\n// Wrap with ThemeProvider\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Component />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Subtitle View in ListItem with Image and Text (React Native Elements, JavaScript)\nDESCRIPTION: This snippet renders a ListItem in React Native Elements where the subtitle is replaced by a custom View containing an image and a styled text, useful for showing ratings or similar compound metadata. Dependencies include '@rneui/themed', React Native 'Image', 'View', 'Text', and 'StyleSheet'. Expects defined stylesheet and image asset, displaying a composite subtitle for enriched UX.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Active Tab Items in React Native Elements (TypeScript)\nDESCRIPTION: Illustrates how to apply conditional styling to `Tab.Item` components based on their active state. It uses functions passed to `containerStyle` and `buttonStyle` props, which receive an `active` boolean parameter. In this example, the background color changes to red when a tab item is active. The `scrollable` prop is also enabled to allow horizontal scrolling if the items exceed the container width.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Tab.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx live\n<Tab value={0} variant=\"primary\" scrollable>\n  <Tab.Item\n    containerStyle={(active) => ({\n      backgroundColor: active ? \"red\" : undefined,\n    })}\n  >\n    Tab\n  </Tab.Item>\n  <Tab.Item\n    buttonStyle={(active) => ({\n      backgroundColor: active ? \"red\" : undefined,\n    })}\n  >\n    Tab\n  </Tab.Item>\n</Tab>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a SearchBar Component with React Native Elements in TypeScript\nDESCRIPTION: This snippet defines a functional component named SwitchComponent that incorporates a SearchBar from react-native-elements for user input. Dependencies include react, react-native, and react-native-elements. The main parameter is search, whose state is managed with useState; the updateSearch handler updates this state when the user types. The View container applies a margin style. Input strings are passed as the search query, and the component renders both the SearchBar and its associated behavior. The code requires TypeScript, and the SearchBar must be accessible from react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SearchBar/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SearchBar } from 'react-native-elements';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SearchBarComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\n  const [search, setSearch] = useState(\"\");\n\n  const updateSearch = (search) => {\n    setSearch(search);\n  };\n\n  return (\n    <View style={styles.view}>\n      <SearchBar\n        placeholder=\"Type Here...\"\n        onChangeText={updateSearch}\n        value={search}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    margin: 10,\n  },\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Custom Subtitle View in React Native\nDESCRIPTION: This snippet demonstrates how to create a ListItem with a custom subtitle view using React Native Elements. It includes a custom styled subtitle with an image and text, showcasing how to extend the ListItem component with additional UI elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nrender () {\n  return (\n    <ListItem>\n      <ListItem.Content>\n        <ListItem.Title>Limited supply! Its like digital gold!</ListItem.Title>\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      </ListItem.Content>\n    </ListItem>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Utilizing Input Interaction Methods via Ref (React Native Elements, JavaScript)\nDESCRIPTION: Demonstrates how to call various Input component methods through the ref, such as focus, blur, clear, isFocused, setNativeProps, and shake. Each line invokes a distinct action, enabling programmatic control over the Input's behavior and appearance. Dependencies include the Input component and a created ref instance as shown previously. Returns varying outputs depending on the method; isFocused returns a boolean, others perform actions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar List Items with React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how to render a list with avatars using React Native Elements in JavaScript. It uses JavaScript's map function to iterate through an array of data, displaying each item as a ListItem with an Avatar, Title, and Subtitle inside a parent View. Dependencies include '@rneui/themed' for ListItem and Avatar components. Input data is an array of objects with 'name', 'avatar_url', and 'subtitle' properties; output is a set of ListItem elements rendered in the UI. The list must provide an 'avatar_url' for each item, and the approach is suitable for static or dynamic lists.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Implementing SafeAreaProvider in React Native\nDESCRIPTION: Example of how to implement the SafeAreaProvider in a React Native app to ensure proper rendering on devices with notches or rounded corners.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Web Modal with RNE Tooltip in JavaScript\nDESCRIPTION: Demonstrates importing a web-compatible Modal component (`modal-react-native-web`) and passing it to the React Native Elements `Tooltip` component using the `ModalComponent` prop. This is necessary for web usage as `react-native-web` does not provide a default Modal implementation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Modal from 'modal-react-native-web';\n\n\n<Tooltip ModalComponent={Modal} ... />\n```\n\n----------------------------------------\n\nTITLE: Using LinearGradient with the Chip Component - React Native Elements - JSX\nDESCRIPTION: This snippet demonstrates how to use the react-native-linear-gradient package in conjunction with the Chip component from @rneui/themed. The LinearGradient is supplied to the Chip using the ViewComponent prop, and gradient parameters such as colors, start, and end are passed via linearGradientProps. Dependencies include @rneui/themed and react-native-linear-gradient, and this requires proper setup if not using Expo or create-react-native-app. The expected output is a Chip component styled with a red-pink linear gradient.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: CircularSlider with Custom maxAngle - JSX\nDESCRIPTION: This snippet showcases using the CircularSlider component with a custom maxAngle prop. Setting maxAngle to 90 restricts the interaction range to 90 degrees, useful for semi-circular or quadrant-based sliders. The maxAngle prop determines the sweep angle, and can customize user interaction. Input is optional configuration, output is a partial circular slider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/universe/CircularSlider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<CircularSlider maxAngle={90} />\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatars With Initials and Actions - react-native-elements - JavaScript\nDESCRIPTION: This snippet shows multiple Avatar usages with initials as titles, various sizes, and interaction via the onPress event. It demonstrates how to configure the 'size', 'rounded', 'title', 'onPress', and 'activeOpacity' props to build interactive avatar components. Dependencies include 'react-native-elements'. Intended input includes initial letters (title) and tap actions. Outputs are visually distinct avatar variants, suitable as user representations across different list or detail views.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/avatar.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar } from \"react-native-elements\";\n\n<Avatar\n  size=\"small\"\n  rounded\n  title=\"MT\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"medium\"\n  title=\"BP\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"large\"\n  title=\"LW\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"xlarge\"\n  rounded\n  title=\"CR\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing the SearchBar Component (TypeScript)\nDESCRIPTION: This snippet shows how to import the SearchBar component from the '@rneui/themed' package in a TypeScript-based React Native project. This import makes the SearchBar component available for use within your application's code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchBar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard Component in React Native\nDESCRIPTION: Demonstrates the ES6 import statement required to use the `PricingCard` component from the `@rneui/themed` library within a React Native project. This component is used to display pricing information and features.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PricingCard } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Children in Thumb using React Native Elements\nDESCRIPTION: Advanced Slider implementation with custom children inside the thumb. The example shows how to add an Icon component as a child to the thumb, along with custom track properties, value range and step configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/slider.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<View style={{ flex: 1, alignItems: 'stretch', justifyContent: 'center' }}>\n  <Slider\n    value={value}\n    onValueChange={setValue}\n    maximumValue={50}\n    minimumValue={20}\n    step={1}\n    trackStyle={{ height: 10, backgroundColor: 'transparent' }}\n    thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n    thumbProps={{\n      children: (\n        <Icon\n          name=\"heartbeat\"\n          type=\"font-awesome\"\n          size={20}\n          reverse\n          containerStyle={{ bottom: 20, right: 20 }}\n          color=\"#f50\"\n        />\n      ),\n    }}\n  />\n  <Text>Value: {this.state.value}</Text>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Background Color Theming with makeStyles (TypeScript)\nDESCRIPTION: This snippet defines a Background component that uses a hook (useStyles) created by makeStyles to set background color from the active theme. makeStyles receives the theme and returns a style object; the component applies these dynamically styled containers based on the current theme. Requires that ThemeProvider context is present higher up and react-native/styles util. Children components inherit the styled background.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst Background = ({ children }) => {\n  const styles = useStyles();\n  return <View style={styles.container}>{children}</View>;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    backgroundColor: theme.colors.background,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Linking React Native Vector Icons - Bash\nDESCRIPTION: Provides the bash command to link react-native-vector-icons using the react-native CLI. Required for proper functioning of custom fonts/icons on platforms not using auto-linking. Inputs: CLI command; outputs: linked native dependencies. Only required for versions of React Native prior to 0.60 or when auto-linking is not available.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaProvider in React Native App - JavaScript\nDESCRIPTION: Imports SafeAreaProvider from react-native-safe-area-context and wraps the application with SafeAreaProvider. Ensures proper safe area handling on mobile devices using React Native. App function should be the root component; replace ... with app content.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Badge\nDESCRIPTION: Shows how to add a badge to a ListItem with custom text styling and container positioning. The badge displays a numeric value with orange text color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Matching Object Styles for Theme and Component in React Native Elements\nDESCRIPTION: This example demonstrates a working scenario where both the theme's `Button.containerStyle` and the inline `containerStyle` prop passed to the Button component are defined as style objects. Because the types match, the ThemeProvider successfully merges them.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/4.pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component from React Native Elements\nDESCRIPTION: Shows how to import the Text component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Dynamically using updateTheme Function (JSX Example)\nDESCRIPTION: Provides an example conceptualizing the use of the `updateTheme` function (obtained via `withTheme` or `useTheme`). It shows how calling `updateTheme` with a partial theme object merges the provided changes (e.g., updating `colors.primary` to 'red') into the existing theme context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  colors: {\n    primary: 'pink',\n  },\n};\n\n// We can update the primary color\nupdateTheme({ colors: { primary: 'red' } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Avatar Shape with TypeScript\nDESCRIPTION: Demonstrates rendering Avatars with different shapes using the `rounded` prop. It shows a rounded avatar and a default square avatar, both configured with an icon and background color, arranged horizontally using a Stack component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Avatar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={32}\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component in React Native Elements\nDESCRIPTION: Shows how to import the ButtonGroup component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ButtonGroup } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Properties in Functional Components using useTheme Hook (JSX)\nDESCRIPTION: Shows how to access the theme object in a functional component using the `useTheme` hook provided by React Native Elements. The hook returns an object containing the current `theme`, which can then be used for styling elements like setting text color based on `theme.colors.primary`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from 'react-native-elements';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Base and Themed Packages - Bash\nDESCRIPTION: Shows how to install @rneui/base and @rneui/themed packages using yarn after initializing the project. Ensures React Native Elements is set up for the application. Requires yarn and a React Native project. Inputs: bash shell; outputs: both packages added to dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge Version (NPM)\nDESCRIPTION: Installs the bleeding edge version of React Native Elements using NPM. This command installs the latest development versions of both packages.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Theme Colors in a Component\nDESCRIPTION: Shows how to access the custom theme colors (e.g., `primaryLight`) within a React functional component. It utilizes the `useTheme` hook from `@rneui/themed` to get the current theme object and applies the custom color to a `Text` component's style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text style={{ color: theme.colors.primaryLight }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Extended Component Props in React Native Elements\nDESCRIPTION: Shows how to use the extended component props in a React Native Elements application. This example demonstrates using the custom 'bold' prop on the Text component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return (\n    <View>\n      <Text>Normal Text</Text>\n      <Text bold>Bold Text</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Usage Example (JavaScript/JSX)\nDESCRIPTION: Imports the content of the `Tile.mdx` file, located in a relative parent directory (`../component_usage/`), as a component named `Usage`. This allows embedding the usage examples defined in the external MDX file directly into the current documentation page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Tile.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from \"../component_usage/Tile.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Usage Examples from MDX File\nDESCRIPTION: Imports the content of the 'Card.mdx' file, located in a relative '../component_usage/' directory, as a React component named 'Usage'. This allows the usage examples defined in 'Card.mdx' to be embedded and rendered within this documentation file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Card.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from \"../component_usage/Card.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing AirbnbRating from @rneui/themed (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `AirbnbRating` component from the `@rneui/themed` library. This is the necessary step to use the component within a React Native project utilizing React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AirbnbRating } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing LinearProgress Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `LinearProgress` component from the `@rneui/themed` library in a TypeScript/React Native project. This import is necessary to use the component in your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinearProgress } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements (Empty)\nDESCRIPTION: This snippet shows an empty import statement for the 'react-native-elements' library. This indicates that while the library is acknowledged, no specific components or functions are being explicitly imported in this particular line within the documentation file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component in React Native\nDESCRIPTION: Shows how to import the SpeedDial component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SpeedDial } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Components with Correct Spelling - React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates both incorrect and correct ways of importing the ListItem component from the @rneui/themed package. The incorrect `Listitem` import leads to an 'Element type is invalid' error, while the correct `ListItem` import resolves the problem. Key dependencies include @rneui/themed being present in your package.json. This illustrates the importance of precise component names when using named imports in React/JSX modules.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\\nimport { Listitem } from '@rneui/themed';\\n\\n// Correct\\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using ThemeConsumer Component with Render Props in React Native Elements\nDESCRIPTION: This code demonstrates how to access theme values using the ThemeConsumer component with render props pattern, allowing components to use theme colors without being wrapped with withTheme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/0.index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Vector Icons\nDESCRIPTION: Command to link the react-native-vector-icons package with the native modules.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only Rating in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use the Rating component in read-only mode. It sets the initial value based on a prop and disables user interaction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Calling Input Methods in React Native\nDESCRIPTION: Shows how to call various methods on the Input component using the stored reference. Methods include focus, blur, clear, isFocused, setNativeProps, and shake.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme Styles to Multiple Components in JSX\nDESCRIPTION: Provides an example of defining a theme object to apply specific styles to multiple React Native Elements components. It sets the `rounded` prop for all `Avatar` components and a custom `fontSize` in `textStyle` for all `Badge` components within the `ThemeProvider` context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  Avatar: {\n    rounded: true,\n  },\n  Badge: {\n    textStyle: { fontSize: 30 },\n  },\n};\n\n...\n\n<ThemeProvider theme={theme}>\n```\n\n----------------------------------------\n\nTITLE: Importing and Injecting Custom Modal for Web Compatibility - React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet shows how to import a custom Modal component from 'modal-react-native-web' and inject it into the Dialog component's ModalComponent prop to ensure proper Dialog functionality on web platforms, as 'react-native-web' does not implement the core 'Modal' component by default. No additional dependencies beyond 'modal-react-native-web' and React Native Elements are required. The expected input is a valid Modal implementation, and the output is a Dialog that functions correctly in both native and web environments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Dialog ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Diverse React Native Elements ListItems in a FlatList (TypeScript/JavaScript)\nDESCRIPTION: This React Native component demonstrates various advanced usages of the `@rneui/themed` ListItem component within a `FlatList`. It includes examples of swipeable list items (`ListItem.Swipeable`), accordion lists (`ListItem.Accordion`), items with inputs (`ListItem.Input`), switches (`Switch`), button groups (`ListItem.ButtonGroup`), checkboxes (`ListItem.CheckBox`), badges (`Badge`), linear gradients, and custom content layouts, managed using React hooks (`useState`). It utilizes TypeScript for type definitions (`List1Data`, `List2Data`, `ListComponentProps`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE ListItem\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\nText,\nListItem,\nAvatar,\nIcon,\nBadge,\nListItemProps,\nButton,\nSwitch,\ncolors\n} from '@rneui/themed';\n\nconst log = () => console.log('this is an example method');\n\ntype List1Data = {\ntitle: string;\nicon: string;\n};\nconst list1: List1Data[] = [\n{\n  title: 'Appointments',\n  icon: 'av-timer',\n},\n{\n  title: 'Trips',\n  icon: 'flight-takeoff',\n},\n{\n  title: 'Passwords',\n  icon: 'fingerprint',\n},\n{\n  title: 'Pitches',\n  icon: 'lightbulb-outline',\n},\n{\n  title: 'Updates',\n  icon: 'track-changes',\n},\n];\n\ntype List2Data = {\nname: string;\navatar_url: string;\nsubtitle: string;\nlinearGradientColors: string[];\n};\n\nconst list2: Partial<List2Data>[] = [\n{\n  name: 'Amy Farha',\n  avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n  subtitle: 'Vice President',\n  linearGradientColors: ['#FF9800', '#F44336'],\n},\n{\n  name: 'Chris Jackson',\n  avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n  subtitle: 'Vice Chairman',\n  linearGradientColors: ['#3F51B5', '#2196F3'],\n},\n{\n  name: 'Amanda Martin',\n  avatar_url:\n    'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n  subtitle: 'CEO',\n  linearGradientColors: ['#FFD600', '#FF9800'],\n},\n{\n  name: 'Christy Thomas',\n  avatar_url: 'https://randomuser.me/api/portraits/women/48.jpg',\n  subtitle: 'Lead Developer',\n  linearGradientColors: ['#4CAF50', '#8BC34A'],\n},\n{\n  name: 'Melissa Jones',\n  avatar_url:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMDQ0NDk1OV5BMl5BanBnXkFtZTcwNDcxOTExNg@@._V1_UY256_CR2,0,172,256_AL_.jpg',\n  subtitle: 'CTO',\n  linearGradientColors: ['#F44336', '#E91E63'],\n},\n];\n\ntype ListComponentProps = ListItemProps;\n\nconst Lists2: React.FunctionComponent<ListComponentProps> = () => {\nconst [expanded, setExpanded] = React.useState(false);\n\nconst listItemProps = {};\nconst renderRow = ({ item }: { item: List1Data }) => {\n  return (\n    <ListItem.Swipeable\n      onPress={log}\n      bottomDivider\n      leftContent={\n        <Button\n          title=\"Info\"\n          icon={{ name: 'info', color: 'white' }}\n          buttonStyle={{ minHeight: '100%' }}\n        />\n      }\n      rightContent={\n        <Button\n          title=\"Delete\"\n          icon={{ name: 'delete', color: 'white' }}\n          buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n        />\n      }\n    >\n      <Icon name={item.icon} />\n      <ListItem.Content>\n        <ListItem.Title>{item.title}</ListItem.Title>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem.Swipeable>\n  );\n};\nconst [switch1, setSwitch1] = useState(true);\nconst [checkbox1, setCheckbox1] = useState(true);\nconst [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\n\nreturn (\n  <>\n    <FlatList\n      ListHeaderComponent={\n        <>\n          <View style={{ paddingVertical: 8 }}>\n            {list2.map((l, i) => (\n              <ListItem\n                key={i}\n                linearGradientProps={{\n                  colors: l.linearGradientColors,\n                  start: [1, 0],\n                  end: [0.2, 0],\n                }}\n                containerStyle={{\n                  marginHorizontal: 16,\n                  marginVertical: 8,\n                  borderRadius: 8,\n                }}\n              >\n                <Avatar rounded source={{ uri: l.avatar_url }} />\n                <ListItem.Content>\n                  <ListItem.Title\n                    style={{ color: 'white', fontWeight: 'bold' }}\n                  >\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle style={[{ color: 'white' }]}>\n                    {l.subtitle}\n                  </ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Chevron color=\"white\" />\n              </ListItem>\n            ))}\n          </View>\n\n          <View style={styles.list}>\n            <ListItem.Accordion\n              content={\n                <>\n                  <Icon name=\"place\" size={30} />\n                  <ListItem.Content>\n                    <ListItem.Title>List Accordion</ListItem.Title>\n                  </ListItem.Content>\n                </>\n              }\n              isExpanded={expanded}\n              onPress={() => {\n                setExpanded(!expanded);\n              }}\n            >\n              {list2.map((l: Partial<List2Data>, i: React.Key) => (\n                <ListItem key={i} onPress={log} bottomDivider>\n                  <Avatar title={l.name} source={{ uri: l.avatar_url }} />\n                  <ListItem.Content>\n                    <ListItem.Title>{l.name}</ListItem.Title>\n                    <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Chevron />\n                </ListItem>\n              ))}\n            </ListItem.Accordion>\n          </View>\n          <View style={styles.list}>\n            {list2.map((l, i) => (\n              <ListItem key={i} bottomDivider>\n                <Icon name=\"user-circle-o\" type=\"font-awesome\" color=\"red\" />\n                <ListItem.Content>\n                  <ListItem.Title style={{ color: 'red' }}>\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Content right>\n                  <ListItem.Title right style={{ color: 'green' }}>\n                    11:00 am\n                  </ListItem.Title>\n                  <ListItem.Subtitle right>12:00 am</ListItem.Subtitle>\n                </ListItem.Content>\n              </ListItem>\n            ))}\n          </View>\n          <View style={styles.list}>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Name</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.Input placeholder=\"Type your name\" />\n              <ListItem.Chevron />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Switch that please ðŸ˜²</ListItem.Title>\n              </ListItem.Content>\n              <Switch\n                value={switch1}\n                onValueChange={(value) => setSwitch1(value)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Choose ðŸ¤¯</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.ButtonGroup\n                buttons={['Flower', 'Coco']}\n                selectedIndex={selectedButtonIndex}\n                onPress={(index) => setSelectedButtonIndex(index)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.CheckBox\n                checked={checkbox1}\n                onPress={() => setCheckbox1(!checkbox1)}\n              />\n              <ListItem.Content>\n                <ListItem.Title>Check that please ðŸ˜¢</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Badge value=\"12\" />\n              <ListItem.Content>\n                <ListItem.Title>With a Badge ! ðŸ˜»</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Icon name=\"check\" size={20} />\n              <ListItem.Content>\n                <ListItem.Title>This thing is checked ðŸ˜Ž</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n          <View style={styles.list}>\n            <ListItem>\n              <Avatar source={'https://randomuser.me/api/portraits/women/57.jpg'} />\n              <ListItem.Content>\n                <ListItem.Title>\n                  Limited supply! Its like digital gold!\n                </ListItem.Title>\n                <View style={styles.subtitleView}>\n                  <Image\n                    source={\"https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg\"}\n                    style={styles.ratingImage}\n                  />\n                  <Text style={styles.ratingText}>5 months ago</Text>\n                </View>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n        </>\n      }\n      data={list1}\n      keyExtractor={(a: List1Data, index: number) => index.toString()}\n      renderItem={renderRow}\n    />\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nlist: {\n  marginTop: 20,\n  borderTopWidth: 1,\n  borderColor: colors.greyOutline,\n},\nsubtitleView: {\n  flexDirection: 'row',\n  paddingLeft: 10,\n  paddingTop: 5,\n},\nratingImage: {\n  height: 19.21,\n  width: 100,\n},\nratingText: {\n  paddingLeft: 10,\n```\n```\n\n----------------------------------------\n\nTITLE: Importing SearchBar Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the SearchBar component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SearchBar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing RNE and Web Dependencies for CRA with Yarn\nDESCRIPTION: Installs React Native Elements packages (`@rneui/base`, `@rneui/themed`) along with necessary web compatibility layers (`react-native-web`, `react-native-vector-icons`) using Yarn for a Create React App project aiming to use RNE on the web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn add  @rneui/base @rneui/themed react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-safe-area-context Dependency (Bash)\nDESCRIPTION: Uses the `react-native link` command (via `npx`) to link the native parts of the `react-native-safe-area-context` library. This step is usually automatic for React Native 0.60+ but might be needed for older versions or troubleshooting, or might need to be undone using `unlink` if autolinking causes issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incorrect Component Import due to Typo in JSX\nDESCRIPTION: Shows an incorrect import statement for the `ListItem` component from `@rneui/themed` where the component name 'Listitem' is misspelled (incorrect capitalization). This typo can lead to an \"Invariant Violation: Element type is invalid\" error in React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\nimport { Listitem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Providing ModalComponent to Tooltip for React Native Web (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates importing a web-compatible Modal component (e.g., from 'modal-react-native-web') and passing it to the Tooltip component's 'ModalComponent' prop. This workaround is necessary because the standard React Native Modal component is not implemented in react-native-web. Requires 'modal-react-native-web' or a similar compatible library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Tooltip/Tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Tooltip ModalComponent={Modal} ... />\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Babel and Build Customization - Bash\nDESCRIPTION: Installs development dependencies necessary for transpilation (e.g., supporting class properties in Babel), and for overriding and customizing the default Create React App configuration via react-app-rewired and customize-cra. This is executed with yarn after installing main dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/web_usage.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Swipeable Component\nDESCRIPTION: Example of importing the required components from react-native-elements and documentation-related imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/ListItem.Swipeable.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Component with Theme Support - React Native Elements withTheme HOC - JavaScript\nDESCRIPTION: This statement exports the Buttons component wrapped with the withTheme higher-order component from React Native Elements, enabling theme context to be injected as props. This approach facilitates dynamic styling based on the active theme. The empty string as the second argument implies default theme settings. Required dependencies: React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default withTheme(Buttons, '');\n```\n\n----------------------------------------\n\nTITLE: Applying ThemeProvider and Custom Theme - React Native Elements (TypeScript)\nDESCRIPTION: This code snippet illustrates how to use ThemeProvider with a custom theme using @rneui/themed in a React Native application written in TypeScript. It shows how to define a custom theme via 'createTheme' and supply it using ThemeProvider, enabling the customization of Button component styles app-wide. Dependencies are React, @rneui/themed, and valid theme objects as per the library's API. The key parameters are the theme (with a Button titleStyle override), and expected output is a Button with the theme-applied text color. This approach enables global visual configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/0.index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying a Loading Spinner in a Button (React Native Elements)\nDESCRIPTION: This snippet shows how to indicate a loading state on a `Button` by setting the `loading` prop to `true`. This typically replaces the title and/or icon with an activity indicator, visually disabling the button during an operation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" loading />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various RNE Chip Configurations in React Native (SnackPlayer)\nDESCRIPTION: Presents a comprehensive SnackPlayer example illustrating different usages of the `@rneui/themed` `Chip` component within a React Native application. It showcases solid, disabled, and outlined variants, demonstrates adding icons to the left or right, and includes examples of handling press events on chips. The example utilizes basic React Native layout components (`View`, `ScrollView`) and styling (`StyleSheet`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, lightColors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: lightColors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: lightColors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Rendering and Customizing Avatars with React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates several approaches to rendering avatars using React Native Elements in JavaScript. It includes avatars with a remote photo as source, avatars showing user initials with the 'title' prop, avatars using icons, and the addition of an accessory overlay. Dependencies include the 'react-native-elements' library, and properties such as 'rounded', 'source', 'title', and 'icon' are showcased. Inputs cover avatar image URLs, titles, and icon props, with expected outputs being visually styled avatar components on a UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar, Accessory } from 'react-native-elements';\n\n// Standard Avatar\n<Avatar\n  rounded\n  source={{\n    uri:\n      'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n  }}\n/>\n\n// Avatar with Title\n<Avatar rounded title=\"MD\" />\n\n// Avatar with Icon\n<Avatar rounded icon={{ name: 'home' }} />\n\n// Standard Avatar with accessory\n<Avatar\n  source={{\n    uri:\n      'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n  }}\n  >\n  <Accessory />\n</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Initializing ThemeProvider with Custom Theme in React Native Elements\nDESCRIPTION: This snippet demonstrates how to set up a ThemeProvider with a custom theme using createTheme. It applies a 'raised' prop to all Button components within the ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/theming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    raised: true,\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n      <Button title=\"My 2nd Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Toggling Tooltip on Component Mount Using useEffect Hook (JavaScript)\nDESCRIPTION: Demonstrates using the useEffect hook to call the toggleTooltip method on the Tooltip ref when the component mounts. This pattern requires the tooltipRef to reference a Tooltip instance. No additional dependencies are needed apart from React. The function triggers the tooltip to open automatically on load; input is the tooltip ref, output is visual tooltip activation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/tooltip.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseEffect(() => {\n  tooltipRef.current.toggleTooltip();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Styled Buttons with React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates rendering a customizable button by leveraging React Native Elements Button, using both inline 'buttonStyle' and 'containerStyle' props to define appearance and layout. Dependencies include 'react-native-elements', 'react-native', and optionally a theme provider. Key parameters are 'buttonStyle' for the button appearance and 'containerStyle' for layout. Inputs are React Native views and support for theming, outputs are visually styled UI components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbuttonStyle={{\n  backgroundColor: 'rgba(92, 99,216, 1)',\n  borderColor: 'transparent',\n  borderWidth: 0,\n  borderRadius: 5,\n  paddingVertical: 10,\n}}\ncontainerStyle={{\n  width: 200,\n  marginHorizontal: 50,\n  marginVertical: 10,\n}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Media Icons Grid with React Native Elements\nDESCRIPTION: This code demonstrates how to create a scrollable grid of social media icons using the SocialIcon component from React Native Elements. It defines a data structure for various social media platforms and renders them in rows of three icons each. The implementation uses TypeScript for type safety and React functional components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SocialIcon, SocialIconProps } from '@rneui/themed';\n\ntype IconData = {\ntype: SocialMediaType;\niconType: string;\n};\n\nconst dataList: Partial<IconData>[] = [\n{\n  type: 'facebook',\n},\n{\n  type: 'twitter',\n},\n{\n  type: 'google-plus-official',\n},\n{\n  type: 'google',\n},\n{\n  type: 'pinterest',\n},\n{\n  type: 'linkedin',\n},\n{\n  type: 'youtube',\n},\n{\n  type: 'vimeo',\n},\n{\n  type: 'tumblr',\n},\n{\n  type: 'instagram',\n},\n{\n  type: 'quora',\n},\n{\n  type: 'flickr',\n},\n{\n  type: 'foursquare',\n},\n{\n  type: 'wordpress',\n},\n{\n  type: 'stumbleupon',\n},\n{\n  type: 'github',\n},\n{\n  type: 'github-alt',\n},\n{\n  type: 'twitch',\n},\n{\n  type: 'medium',\n},\n{\n  type: 'soundcloud',\n},\n{\n  type: 'stack-overflow',\n},\n{\n  type: 'gitlab',\n},\n{\n  type: 'angellist',\n},\n{\n  type: 'codepen',\n},\n{\n  type: 'weibo',\n},\n{\n  type: 'vk',\n},\n{\n  type: 'facebook-messenger',\n  iconType: 'material-community',\n},\n{\n  type: 'whatsapp',\n},\n];\n\ntype SocialIconsComponentProps = {};\n\nconst SocialIcons: React.FunctionComponent<SocialIconsComponentProps> = () => {\nconst socialProps = {};\nreturn (\n  <>\n    <ScrollView>\n      {_.chunk(dataList, 3).map(\n        (chunk: Partial<IconData>[], chunkIndex: React.Key) => (\n          <View\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n              marginTop: 10,\n              backgroundColor: '#4c4c4c',\n            }}\n            key={chunkIndex}\n          >\n            {chunk.map((l: Partial<IconData>, i: React.Key) => (\n              <SocialIcon\n                type={l.type}\n                iconType={l.iconType ? l.iconType : 'font-awesome'}\n                key={`${chunkIndex}-${i}`}\n              />\n            ))}\n          </View>\n        )\n      )}\n    </ScrollView>\n  </>\n);\n};\n\nexport default SocialIcons;\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Text component from the '@rneui/themed' package in a TypeScript React Native project. Including this import allows developers to use the customizable Text component within their applications. No additional dependencies are required beyond react-native-elements and its themed package. This import line forms the basis for adding styled text to a React Native screen.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with Component Props - React Native Elements (TypeScript)\nDESCRIPTION: This snippet builds upon the previous example, highlighting how external style props on React Native Elements components take precedence over theme and internal styles. A Button with a theme-applied title color is further overridden with the 'titleStyle' prop. Inputs include a theme object and prop, with outputs reflecting the highest-precedence style. Dependencies include React and @rneui/themed. Use this to fine-tune component styling without impacting global theming.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/0.index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: FlatList with ListItem and Custom Avatar Component in React Native\nDESCRIPTION: This example shows how to use FlatList with ListItem and a custom Avatar component that displays either an initial letter or an image depending on availability of avatar_url.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient with Button in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use LinearGradient with a Button component from React Native Elements. It shows the import statements and the Button component with LinearGradient applied as the ViewComponent. The linearGradientProps are used to define the gradient colors and direction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Button/Button.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Button\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Create React App with Babel and Module Overrides - JavaScript\nDESCRIPTION: Configures create-react-app to support React Native Elements by overriding default webpack and Babel settings. Adds Babel plugin for class properties and updates include paths for specific node_modules and src. Save this as config-overrides.js in your project root, and be sure to have customize-cra and react-app-rewired installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\\n\\nmodule.exports = override(\\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\\n  babelInclude([\\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\\n    path.resolve(__dirname, 'src'),\\n  ])\\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Platform Native Colors to ThemeProvider - React Native Elements - JavaScript\nDESCRIPTION: This snippet shows how to use React Native's Platform API in conjunction with the colors object from react-native-elements to apply native color palettes based on the current platform (iOS or Android). The ThemeProvider receives a theme object with colors selected dynamically using Platform.select. Dependencies: react-native, react-native-elements. Input: none. Output: Themed components adopting platform-specific blue (iOS/Android). Constraint: Assumes Button component supports the resolved theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, colors, ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  colors: {\n    ...Platform.select({\n      default: colors.platform.android,\n      ios: colors.platform.ios,\n    }),\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      // This button's color will now be the default iOS / Android blue.\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Size Variants of CheckBox\nDESCRIPTION: Shows different size variations of checkboxes using the size prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/CheckBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <CheckBox checked size={18} />\n  <CheckBox checked size={24} />\n  <CheckBox checked size={32} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Buttons in React Native\nDESCRIPTION: Demonstrates how to create disabled buttons of different types using the disabled prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button title=\"Solid\" disabled />\n  <Button title=\"Outline\" type=\"outline\" disabled />\n  <Button title=\"Clear\" type=\"clear\" disabled />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Rendering Buttons of Different Sizes - React Native Elements - TSX\nDESCRIPTION: This snippet demonstrates Button components in three different sizes (small, medium, large) using the 'size' prop. Each button is placed inside a Stack container for consistent layout. The button labels are provided as children, not as the 'title' prop. Dependencies include React Native Elements, and Stack must be available in scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack dir=\\\"row\\\" align=\\\"center\\\" spacing={4}>\n  <Button size=\\\"sm\\\">Small</Button>\n  <Button size=\\\"md\\\">Medium</Button>\n  <Button size=\\\"lg\\\">Large</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Type Definitions Using Declaration Merging (TypeScript/React Native Elements)\nDESCRIPTION: This snippet demonstrates how to extend the TypeScript type definitions for the theme object in react-native-elements using declaration merging. The code creates new theme properties and colors, enhancing the available typings for custom project requirements. Dependencies are TypeScript and the react-native-elements library. The expected input is a TypeScript declaration file, and the output is additional type safety and IntelliSense support for custom theme keys.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-native-elements'\ntype RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\ndeclare module 'react-native-elements' {\n  export interface TextProps {\n    p1Style: StyleProp<TextStyle>;\n  }\n\n  export interface Colors {\n    background: string;\n    border: string;\n    text: string;\n    altText: string;\n    danger: string;\n  }\n\n  export interface FullTheme {\n    colors: RecursivePartial<Colors>;\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SocialIcon Component in React Native\nDESCRIPTION: This snippet shows how to import the SocialIcon component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SocialIcon } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Input Component\nDESCRIPTION: Demonstrates the theme key used for customizing the Input component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nInput\n```\n\n----------------------------------------\n\nTITLE: Upgrading Imports to @rneui/themed - React Native Elements - diff\nDESCRIPTION: Shows how to change imports from 'react-native-elements' to '@rneui/themed' for v4 migration. No dependencies other than installing the new packages as shown below are required. Input is existing code using the old import, and output is the updated import for RNE v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import {} from 'react-native-elements'\\n+ import {} from '@rneui/themed'\n```\n\n----------------------------------------\n\nTITLE: Theme Application Pattern in App with Navigation (TypeScript)\nDESCRIPTION: This snippet displays exporting a React component using ThemeProvider with a theme object, wrapping a Navigation component. Used in conjunction with React Navigation, it ensures navigation elements inherit and respond to the application theme. Assumes prior definition of theme via createTheme and dependencies on @rneui/themed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme=createTheme({\n  // ...\n})\n\nexport const App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Navigation>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming Theme with ThemeConsumer Render Prop - TypeScript\nDESCRIPTION: Demonstrates usage of ThemeConsumer, a render prop component that provides theme context to its children. The sample component applies themed color to React Native Text, allowing theme consumption without using HOCs. Dependencies: '@rneui/themed', React, and React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Button Size Examples in React Native Elements\nDESCRIPTION: Shows how to use different button sizes (small, medium, large) using the size prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button size=\"sm\">Small</Button>\n  <Button size=\"md\">Medium</Button>\n  <Button size=\"lg\">Large</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Creating Component-Specific Themes in React Native Elements v4\nDESCRIPTION: This code snippet shows how to create component-specific themes using the createTheme function in React Native Elements v4. It demonstrates conditional styling based on component props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  Button: (buttonProps) => ({\n    titleStyle: {\n      color: buttonProps.type === 'solid' ? 'blue' : 'red',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Documentation in Markdown (JavaScript)\nDESCRIPTION: This snippet demonstrates importing a usage guide written in Markdown for integration within a React Native Elements documentation page. The import statement allows embedding external Markdown content, typically handled by a documentation-generation framework that supports MDX or similar file formats. There are no explicit dependencies other than the appropriate loader and correct path resolution in the build system.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Image.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/Image/Image.md'\n```\n\n----------------------------------------\n\nTITLE: Understanding React Native Elements Component Version Differences (Markdown)\nDESCRIPTION: Explains that components like `<FormInput />` (v0.19.1 and below) and `<Input />` (v1.0.0-beta1 and higher) exist in different versions of React Native Elements. Using a component not available in the installed version causes errors. Check `package.json` and versioned documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nExample:\n\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge React Native Elements from GitHub - Bash\nDESCRIPTION: These commands fetch and install the latest distribution branch of React Native Elements directly from the GitHub repository using npm or yarn. This approach is suitable for those who need access to unreleased features or fixes. Requires git, and will add a GitHub URL reference to your package.json.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install https://github.com/react-native-elements/react-native-elements#dist\n\n# or with yarn\nyarn add  https://github.com/react-native-elements/react-native-elements#dist\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Header Components as Children in JavaScript/JSX\nDESCRIPTION: Shows an alternative way to define header sections by passing custom React components (`MyCustomLeftComponent`, `MyCustomCenterComponent`, `MyCustomRightComponent`) as direct children of the React Native Elements Header component, rather than using props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/header.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<Header>\n  <MyCustomLeftComponent />\n  <MyCustomCenterComponent />\n  <MyCustomRightComponent />\n</Header>\n```\n\n----------------------------------------\n\nTITLE: Importing FAB Component from React Native Elements in JavaScript\nDESCRIPTION: Demonstrates how to import the FAB component from the react-native-elements library for use in a React Native project. Requires the react-native-elements dependency to be installed. This allows developers to utilize the Floating Action Button in their React Native application by referencing the FAB component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/fab.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FAB } from 'react-native-elements';\n```\n\n----------------------------------------\n\nTITLE: Referencing Card Theme Key in React Native Elements with TypeScript\nDESCRIPTION: This snippet shows the string key 'Card' used within theme configuration or when customizing the UI with ThemeProvider in React Native Elements. The key is necessary when applying global theme changes to Card components. It is expected by theming APIs and does not represent executable code but is important for documentation and customization workflows.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCard\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge React Native Elements via Yarn\nDESCRIPTION: Commands to install the bleeding edge version of React Native Elements using Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nyarn add @rneui/base@github:react-native-elements/react-native-elements#base\n\n# @rneui/themed\nyarn add @rneui/themed@github:react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Extending Color Object - Adding Background (diff)\nDESCRIPTION: Illustrates the addition of a 'background' color property to the existing colors object. Assumes the object is used for theming within React Native Elements. Ensures that UI elements can utilize this new background field.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst colors={\\n  primary: '#2e7d32',\\n  secondary: '#757575',\\n+ background: '#ffffff',\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard Component in JavaScript\nDESCRIPTION: Shows how to import the PricingCard component from the '@rneui/themed' library for use in a React Native application. This is the standard way to make the component available in your code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PricingCard } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` library in a TypeScript/React Native project. This import is required to utilize the `ListItem.ButtonGroup` subcomponent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using Heading Props with Text Component in React Native Elements (TSX)\nDESCRIPTION: Example code showcasing the usage of the `h1`, `h2`, `h3`, and `h4` boolean props on the `Text` component to apply predefined heading font sizes (40, 34, 28, and 22 respectively). The components are wrapped within a `Stack` component (assumed available in the context) for layout purposes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Text.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack>\n  <Text h1>Heading 1</Text>\n  <Text h2>Heading 2</Text>\n  <Text h3>Heading 3</Text>\n  <Text h4>Heading 4</Text>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements in JavaScript\nDESCRIPTION: Shows how to import the ListItem component from the '@rneui/themed' package for use in a React Native Elements project. This import is necessary to utilize ListItem and its associated subcomponents such as ButtonGroup. Ensure '@rneui/themed' is installed as a dependency in your project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Documentation - Markdown/MDX - JavaScript\nDESCRIPTION: This snippet imports a Markdown file containing usage documentation for the TabView component using JavaScript ES6 import syntax, common in MDX-based documentation sites. The imported Markdown provides example code, guidance, or live demos when rendered as part of the documentation page. There are no required runtime dependencies other than MDX support.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/TabView.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/TabView/TabView.md'\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with react-native-elements in TypeScript\nDESCRIPTION: This snippet defines a React Native functional component using TypeScript and demonstrates the diverse ways to display avatars using the Avatar component from @rneui/themed. It includes sections for image avatars (taking URLs from a typed array), icon avatars with different icon sets and colors, letter avatars using text initials, and avatars adorned with accessory badges. The code assumes that react-native, @rneui/themed, and react are installed, and that TypeScript is configured. The Array prototype is augmented to provide chunking for organizing avatar rows. Inputs involve avatar properties (URLs, icons, titles); outputs are visual avatar components rendered in a scrollable layout.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\nimport { Avatar } from '@rneui/themed';\n\ntype AvatarData = {\nimage_url: string;\n};\n\nconst dataList: AvatarData[] = [\n{\n  image_url: 'https://uifaces.co/our-content/donated/6MWH9Xi_.jpg',\n},\n{\n  image_url: 'https://randomuser.me/api/portraits/men/36.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2014/09/17/20/03/profile-449912__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2020/09/18/05/58/lights-5580916__340.jpg',\n},\n{\n  image_url:\n    'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',\n},\n];\n\ntype AvatarComponentProps = {};\n\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n\nconst Avatars: React.FunctionComponent<AvatarComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <Text style={styles.subHeader}>Image Avatars</Text>\n      {dataList.chunk(3).map((chunk, chunkIndex) => (\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 30,\n          }}\n          key={chunkIndex}\n        >\n          {chunk.map((l, i) => (\n            <Avatar\n              size={64}\n              rounded\n              source={l.image_url ? { uri: l.image_url } : {}}\n              key={`${chunkIndex}-${i}`}\n            />\n          ))}\n        </View>\n      ))}\n      <Text style={styles.subHeader}>Icon Avatars</Text>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'pencil', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#6733b9' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'rowing' }}\n          containerStyle={{ backgroundColor: '#00a7f7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'heartbeat', type: 'font-awesome' }}\n          containerStyle={{ backgroundColor: '#eb1561' }}\n        />\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{\n            name: 'extension',\n            type: 'material',\n            color: '#cdde20',\n          }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'apartment', type: 'material', color: '#009688' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'backup', type: 'material', color: '#ff5606' }}\n          containerStyle={{\n            borderColor: 'grey',\n            borderStyle: 'solid',\n            borderWidth: 1,\n          }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Letter Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 30,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          title=\"Fc\"\n          containerStyle={{ backgroundColor: '#3d4db7' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"P\"\n          containerStyle={{ backgroundColor: 'coral' }}\n        />\n        <Avatar\n          size={64}\n          rounded\n          title=\"Rd\"\n          containerStyle={{ backgroundColor: 'purple' }}\n        />\n      </View>\n\n      <Text style={styles.subHeader}>Badged Avatars</Text>\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginBottom: 40,\n        }}\n      >\n        <Avatar\n          size={64}\n          rounded\n          icon={{ name: 'adb', type: 'material' }}\n          containerStyle={{ backgroundColor: 'orange' }}\n        >\n          <Avatar.Accessory size={24} />\n        </Avatar>\n        <Avatar\n          size={64}\n          rounded\n          source={{ uri: 'https://randomuser.me/api/portraits/women/57.jpg' }}\n          title=\"Bj\"\n          containerStyle={{ backgroundColor: 'grey' }}\n        >\n          <Avatar.Accessory size={23} />\n        </Avatar>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n})\n\nexport default Avatars;\n```\n\n----------------------------------------\n\nTITLE: Using Extended Component Props in Application\nDESCRIPTION: Illustrates how to use the RNE `Text` component with the custom `bold` prop added previously. The styling defined in the theme (Snippet 7) will be automatically applied based on the presence and value of the `bold` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return (\n    <View>\n      <Text>Normal Text</Text>\n      <Text bold>Bold Text</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing SearchBar Using React Refs in JavaScript\nDESCRIPTION: Example of how to create a reference to the SearchBar component using React refs, which allows calling methods on the SearchBar instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay Component for Web Platform in React Native Elements\nDESCRIPTION: This snippet demonstrates how to properly configure the Overlay component for web platforms using react-native-web. It shows the import of a Modal component and its usage with the Overlay component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Overlay ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TypeScript\nDESCRIPTION: Imports the `ListItem` component from the `@rneui/themed` library. The `ListItem.Accordion` sub-component is accessed through this import. This is necessary to use the accordion functionality in a React Native application using TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using ListItem with Avatar in TSX\nDESCRIPTION: Provides examples of integrating the Avatar component within ListItems. Demonstrates different Avatar configurations, including using an image source URI, displaying an icon, or showing initials with a background color. The `bottomDivider` prop is used for visual separation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <ListItem bottomDivider>\n    <Avatar\n      rounded\n      source={{ uri: 'https://randomuser.me/api/portraits/men/36.jpg' }}\n    />\n    <ListItem.Content>\n      <ListItem.Title>John Doe</ListItem.Title>\n      <ListItem.Subtitle>President</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n  <ListItem bottomDivider>\n    <Avatar\n      rounded\n      icon={{\n        name: 'person-outline',\n        type: 'material',\n        size: 26,\n      }}\n      containerStyle={{ backgroundColor: '#c2c2c2' }}\n    />\n    <ListItem.Content>\n      <ListItem.Title>Alba King</ListItem.Title>\n      <ListItem.Subtitle>Vice President</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n  <ListItem>\n    <Avatar rounded title=\"A\" containerStyle={{ backgroundColor: 'grey' }} />\n    <ListItem.Content>\n      <ListItem.Title>Adam Eva</ListItem.Title>\n      <ListItem.Subtitle>Vice Chairman</ListItem.Subtitle>\n    </ListItem.Content>\n  </ListItem>\n</>\n```\n\n----------------------------------------\n\nTITLE: Injecting Modal Implementation for Web in React Native Elements Tooltip (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import a web-compatible Modal component and inject it as the ModalComponent prop into the Tooltip component for react-native-web compatibility. The main dependency is the 'modal-react-native-web' package, which must be installed for web support. All other Tooltip properties remain unchanged; only the ModalComponent prop is required for web environments where the default Modal is not implemented.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n<Tooltip ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Rendering a Heading with React Native Elements Text Component (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `<Text>` component from React Native Elements to display text styled as a second-level heading (`h2`). It renders the text \"Hello World\" with predefined h2 styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx live\n<Text h2>Hello World</Text>\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Dependencies for CRA Web Setup with Yarn\nDESCRIPTION: Installs development dependencies needed to customize the Create React App build process for React Native Elements web usage. This includes Babel plugins (`@babel/plugin-proposal-class-properties`) and tools for overriding CRA configuration (`customize-cra`, `react-app-rewired`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Area Context - NPM\nDESCRIPTION: Command to install the required react-native-safe-area-context dependency using NPM.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of React Native Elements Button Component\nDESCRIPTION: Demonstrates how to import and use a Button component from React Native Elements. This example shows the minimal implementation required to render a button with a title in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/packages/base/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '@rneui/base';\n\nconst App = () => <Button title=\"Hello World\" />;\n```\n\n----------------------------------------\n\nTITLE: Embedding a Usage Example Component in Markdown (Markdown)\nDESCRIPTION: This snippet demonstrates how to embed a usage example component within the Markdown documentation. Using the <Usage /> tag, it instructs the documentation renderer to include the previously imported Card usage example at this location. This is commonly used in frameworks that support JSX-like Markdown or MDX, such as Docusaurus.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Card.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native Elements\nDESCRIPTION: Shows how to import the Tab component from the React Native Elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/tab.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tab } from 'react-native-elements';\n```\n\n----------------------------------------\n\nTITLE: Adding React Native Vector Icons to Project Dependencies - Bash\nDESCRIPTION: Shows how to add react-native-vector-icons as a dependency in a React Native project using yarn. This is required for proper font and icon rendering in React Native Elements. Inputs: yarn command in a shell; outputs: react-native-vector-icons added to the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements using TypeScript\nDESCRIPTION: This snippet demonstrates the necessary import statement to use the `ListItem` component, including its `ListItem.Content` sub-component, from the `@rneui/themed` library in a React Native project using TypeScript. This import allows access to the ListItem functionality for building lists.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to React Native Elements Theme\nDESCRIPTION: This snippet shows how to extend the Theme interface to include custom properties using TypeScript module declaration in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Theme {\n    myCustomProperty: string;\n    myCustomFunction: () => void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Edge RNEui Packages with NPM (Bash)\nDESCRIPTION: Installs the latest development (bleeding-edge) versions of `@rneui/themed` and `@rneui/base` using npm and the `@edge` distribution tag. Use this for testing upcoming features.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package. It is required to begin using the ListItem and its subcomponents in a React Native project. The import statement is standard and does not require any additional configuration or parameters. No input or output is involved at this step.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Applying Array Styles in React Native Elements Theme\nDESCRIPTION: This snippet shows how to correctly apply array-based styles in both the theme and local component props. The styles are merged properly as they are both arrays.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/4.pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Consuming Theme Context with ThemeConsumer (Render Props) - TypeScript\nDESCRIPTION: Demonstrates using ThemeConsumer to access the theme context within a React component via render props. The child function receives 'theme' and applies a theme color directly to a Text element. This method avoids using HOCs or hooks for theme access. Requires '@rneui/themed' and 'react-native'. Outputs children with theme-based styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/0.index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements (Yarn)\nDESCRIPTION: Installs the stable version of React Native Elements using Yarn. This command adds both the themed and base packages to your project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Using a Basic Button Component in TypeScript\nDESCRIPTION: This snippet demonstrates the fundamental usage of a React Native Elements component. It imports the `Button` component from `@rneui/base` and renders it within a simple functional component `App` with the title \"Hello World\". This serves as a minimal example to get started with the library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Button } from '@rneui/base';\n\nconst App = () => {\n  return <Button title=\"Hello World\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the Switch component from the React Native Elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using the Icon Component in React Native Elements (JavaScript)\nDESCRIPTION: Demonstrates how to import and use the Icon component from 'react-native-elements'. It shows various configurations, including setting the icon name, color, type (from different icon sets like material, evilicon, ionicon, font-awesome), applying reverse and raised styles, and handling onPress events.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/icon.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Icon } from 'react-native-elements'\n\n<Icon\n  name='rowing' />\n\n<Icon\n  name='g-translate'\n  color='#00aced' />\n\n<Icon\n  name='sc-telegram'\n  type='evilicon'\n  color='#517fa4'\n/>\n\n<Icon\n  reverse\n  name='ios-american-football'\n  type='ionicon'\n  color='#517fa4'\n/>\n\n<Icon\n  raised\n  name='heartbeat'\n  type='font-awesome'\n  color='#f50'\n  onPress={() => console.log('hello')} />\n```\n\n----------------------------------------\n\nTITLE: Using Input Component with Various Props - React Native Elements - JavaScript\nDESCRIPTION: This set of code snippets shows how to import and utilize the Input component from react-native-elements with different properties such as placeholder text, icons (both predefined and custom), error messages, and secure text entry for password fields. Required dependencies include react-native-elements and react-native-vector-icons. Key parameters demonstrated include placeholder, leftIcon, errorMessage, errorStyle, secureTextEntry, style, and onChangeText. The expected inputs are JSX props, and outputs are rendered UI input fields that respond per the given props. Constraints include the requirement for React environment setup and installation of the listed libraries.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/input.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { Input } from 'react-native-elements';\n\n<Input\n  placeholder='BASIC INPUT'\n/>\n\n<Input\n  placeholder='INPUT WITH ICON'\n  leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n/>\n\n<Input\n  placeholder='INPUT WITH CUSTOM ICON'\n  leftIcon={\n    <Icon\n      name='user'\n      size={24}\n      color='black'\n    />\n  }\n/>\n\n\n <Input\n   placeholder=\"Comment\"\n   leftIcon={{ type: 'font-awesome', name: 'comment' }}\n   style={styles}\n   onChangeText={value => this.setState({ comment: value })}\n  />\n\n\n<Input\n  placeholder='INPUT WITH ERROR MESSAGE'\n  errorStyle={{ color: 'red' }}\n  errorMessage='ENTER A VALID ERROR HERE'\n/>\n\n<Input placeholder=\"Password\" secureTextEntry={true} />\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component Inside a Stack Layout in React Native Elements (TypeScript)\nDESCRIPTION: This usage example demonstrates integrating the Switch component within a Stack layout alongside other UI elements in React Native. The Stack is configured with 'row' direction, centered alignment, and spacing. This snippet is suitable for rendering a styled, interactive toggle switch within a UI, provided that proper component dependencies (such as Stack and Switch from React Native Elements) are available.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Switch />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Identifying the Theme Key for the Rating Component\nDESCRIPTION: Specifies the theme key `Rating` used for customizing the component's appearance via the `ThemeProvider` in React Native Elements. This key targets the `Rating` component styles within the application's theme configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRating\n```\n\n----------------------------------------\n\nTITLE: Creating a Reference to React Native Elements Input Component\nDESCRIPTION: Example of creating a reference to an Input component using React's ref system. This allows accessing the component's methods programmatically.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Header with Custom Components as Props - React Native Elements - JavaScript/JSX\nDESCRIPTION: Here, fully custom React components are injected for left, center, and right sections by using JSX elements as prop values. This approach maximizes flexibility for advanced customization via completely custom component trees for each segment. Inputs are expected to be valid React elements, and the Header renders these directly. No changes to dependencies, but the custom components must be defined elsewhere in scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/header.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={<MyCustomCenterComponent />}\n  rightComponent={<MyCustomRightComponent />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Avatar using Map Function in React Native Elements\nDESCRIPTION: This example demonstrates how to create a list of items with avatars using the map function. Each list item displays a name, avatar, and subtitle with a bottom divider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient to Header in React Native Elements (JSX)\nDESCRIPTION: This snippet demonstrates how to use the `react-native-linear-gradient` package to apply a gradient background to the `@rneui/themed` Header component. It requires importing both `Header` and `LinearGradient`, and utilizes the `ViewComponent` prop to specify the gradient component and `linearGradientProps` to configure the gradient colors and direction. This setup is necessary for `react-native-cli` projects after installing and linking the gradient library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Fractional Ratings in React Native Elements\nDESCRIPTION: This example shows how to configure the Rating component to display fractional values. It sets the fraction to 1 and an initial value of 3.3.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Using Themed Components with ThemeProvider in React Native Elements (JSX)\nDESCRIPTION: This JSX snippet illustrates how to use themed components in React Native Elements. It imports `Button` and `ThemeProvider` from `@rneui/themed`. The `Button` component is wrapped within the `ThemeProvider`, enabling it to inherit theme properties. This demonstrates the basic setup for utilizing the library's theming capabilities.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from '@rneui/themed';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Progress Component with React Native Elements\nDESCRIPTION: A React Native component that demonstrates different types of linear progress bars using @rneui/themed. Features include indeterminate progress bars with default and custom colors, and a determinate progress bar with start/restart functionality controlled by state management.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from '@rneui/themed';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\nconst [progress, setProgress] = React.useState(0);\n\nReact.useEffect(() => {\n  let subs = true;\n  if (progress < 1 && progress !== 0) {\n    setTimeout(() => {\n      if (subs) {\n        setProgress(progress + 0.1);\n      }\n    }, 100);\n  }\n  return () => {\n    subs = false;\n  };\n}, [progress]);\n\nreturn (\n  <View>\n    <View\n      style={{\n        margin: 10,\n      }}\n    >\n      <Text>Indeterminate Variant </Text>\n      <LinearProgress style={{ marginVertical: 10 }} />\n      <Text>Indeterminate Variant with color</Text>\n      <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n      <Text>Determinate Variant</Text>\n      <LinearProgress\n        style={{ marginVertical: 10 }}\n        value={progress}\n        variant=\"determinate\"\n      />\n\n      <Button\n        disabled={progress > 0}\n        onPress={() => {\n          setProgress(0.00001);\n        }}\n        title={'Start Progress'}\n        containerStyle={{ margin: 10 }}\n      />\n      <Button\n        disabled={progress === 0}\n        onPress={() => {\n          setProgress(0);\n        }}\n        title={'Restart'}\n        containerStyle={{ margin: 10 }}\n      />\n    </View>\n  </View>\n);\n};\n\nexport default LinearProgressAPI;\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with FlatList and Avatar\nDESCRIPTION: Example of using React Native's FlatList component with ListItem and Avatar. Includes key extraction and item rendering logic for a list of users with avatars and subtitles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using CircularSlider Component in React Native - JavaScript\nDESCRIPTION: Demonstrates how to import and use the CircularSlider component from react-native-elements-universe. Dependencies include the react-native-elements-universe library. Shows basic usage with mandatory value and onChange props, usage without the thumb for a progress indicator, and configuring a 90-degree arc by setting the maxAngle property. Expected input includes value (number or percent), and event handlers for value changes. Slider appearance can be customized via props; either use a 0-100 percentage or specify minimumValue and maximumValue for custom range.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/circularSlider.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { CircularSlider } from 'react-native-elements-universe';\n\n<CircularSlider value={value} onChange={setValue} />;\n\n<CircularSlider value={value} noThumb />;\n\n// 90 deg Arc\n<CircularSlider maxAngle={90} />;\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient to ListItem in TSX\nDESCRIPTION: Demonstrates applying a linear gradient background to a ListItem. This is achieved using the `linearGradientProps` to define colors and direction, and specifying a `LinearGradient` component (e.g., from `expo-linear-gradient`) via the `ViewComponent` prop. Text color is adjusted for visibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar\n    rounded\n    source={{ uri: 'https://randomuser.me/api/portraits/men/33.jpg' }}\n  />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Using `styled` with Theme Access to Style a `View` (TypeScript/TSX)\nDESCRIPTION: Demonstrates using the `styled` function with a style function that receives the `theme` object as an argument. This allows the created `Surface` component (wrapping `View`) to access theme properties like `theme.colors.background` for styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst Surface = styled(View)((theme) => ({\n  // default style of component\n  root: {\n    backgroundColor: theme.colors.background,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Text Headings - React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Text component from react-native-elements and use it to render headings of various levels (h1 to h4). The h1, h2, h3, and h4 props automatically set the font size and semantics for the heading. No additional dependencies are required beyond react-native-elements. Input consists of setting boolean props (h1, h2, h3, h4) on the Text tag; the output is stylized heading text within a React Native interface. Custom styling and further prop customization is available as detailed elsewhere in the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/text.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Text } from 'react-native-elements';\n\n<Text h1>Heading 1</Text>\n<Text h2>Heading 2</Text>\n<Text h3>Heading 3</Text>\n<Text h4>Heading 4</Text>\n```\n\n----------------------------------------\n\nTITLE: Rendering FAB Component in JSX with a Title (React Native Elements, JavaScript)\nDESCRIPTION: Shows how to render the FAB component within JSX by specifying a title prop. This snippet expects the FAB component to be imported and react-native-elements to be installed. The title parameter defines the label displayed on the button, and the output is a floating, circular button intended for user interaction. The example focuses on basic usage; additional configuration may be required for customization or event handling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/fab.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<FAB title=\"Create\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the `Dialog` component from the `@rneui/themed` package. This import is necessary to use the `Dialog` and its sub-components like `Dialog.Title` within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Avatar Accessory Theme Key\nDESCRIPTION: Demonstrates the theme key used for styling Avatar.Accessory component in React Native Elements theme system.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Avatar.Accessory.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAvatarAccessory\n```\n\n----------------------------------------\n\nTITLE: Basic CircularSlider Usage - JSX\nDESCRIPTION: This snippet shows how to render the CircularSlider component with a value and an onChange handler. Dependencies include a state management hook (typically useState), and provides an interactive circular slider. The value prop sets the current value, while onChange updates the state. Input is the numeric value, and the output is a UI slider reflecting the value and change handler.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/universe/CircularSlider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<CircularSlider value={value} onChange={setValue} />\n\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in React Native Elements\nDESCRIPTION: Shows how to import the Button component from the @rneui/themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using Pressable Props in RNE CheckBox (Diff)\nDESCRIPTION: Demonstrates how to use the new `onPressIn` and `onPressOut` props directly on the `CheckBox` component in RNE v4, which now utilizes the React Native `Pressable` API. This allows for finer control over press interactions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/migration-v4.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  <CheckBox\n    title=\"I agree\"\n+   onPressIn={()=>{}}\n+   onPressOut={()=>{}}\n    onPress={() => {}}\n  />\n```\n\n----------------------------------------\n\nTITLE: Using Themed Background in App Structure - React/JSX\nDESCRIPTION: Shows composing the App by wrapping the Background component (which uses themed backgrounds) within ThemeProvider. The theme is set to dark mode by default. Ensures all children inherit the background and color scheme from the theme context. Depends on a Background component, createTheme, and '@rneui/themed'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  // default mode\n  mode: 'dark',\n});\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Background>\n        {/*...*/}\n        {/*...*/}\n      </Background>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Button with Icon in React Native Elements\nDESCRIPTION: Demonstrates how to add an icon to a button using the Icon component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type=\"solid\">\n  <Icon name=\"home\" color=\"white\" />\n  Icon\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Interface for Theming System - TypeScript\nDESCRIPTION: This snippet defines the `Theme` interface, representing the overall theming structure in React Native Elements. It includes a `colors` property (which references the `Colors` interface), a `mode` indicating light or dark theme, and a set of standardized spacing options. Dependencies include the `Colors` interface and TypeScript for typing. Inputs are theme-related configuration objects; outputs are strongly-typed theme structures enforced at compile time.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/theme_object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Theme {\n  colors: Colors;\n  mode: 'light' | 'dark';\n  spacing: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Themed Button Component - React Native Elements - JavaScript\nDESCRIPTION: This statement exports the main Buttons component wrapped with the withTheme higher-order component from React Native Elements. This provides access to the current theme object and enables consistent theming across components. The only required dependency is react-native-elements. The output is a themed export for integration elsewhere.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Button/snack/index.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default withTheme(Buttons, '');\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported Usage Component (MDX/JSX)\nDESCRIPTION: Renders the imported `Usage` component, which contains the MDX content from `../component_usage/Tile.mdx`. This displays the Tile component's usage examples within the documentation page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Tile.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Documenting CheckBox Component Properties - React Native Elements - Markdown\nDESCRIPTION: This markdown snippet lists and explains each available property for the CheckBox component in React Native Elements, including type, default values, and use-case context. It is used to guide developers in applying correct configuration options when using the CheckBox in their projects. Inputs are through markdown tables, and the output is rendered documentation; there are no runtime dependencies beyond Markdown support.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/CheckBox.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CheckBox\n\nCheckBoxes allow users to complete tasks that involve making choices such as selecting options, or switching settings - On or Off.\n\nIt provides a clear visual of either a true or false choice.\n\n## Usage\n\n<Usage />\n\n---\n\n## Props\n\n### CheckBox\n\n- [Component](#component)\n- [center](#center)\n- [checked](#checked)\n- [checkedColor](#checkedcolor)\n- [checkedIcon](#checkedicon)\n- [checkedTitle](#checkedtitle)\n- [containerStyle](#containerstyle)\n- [fontFamily](#fontfamily)\n- [iconRight](#iconright)\n- [iconType](#icontype)\n- [onIconPress](#oniconpress)\n- [onLongIconPress](#onlongiconpress)\n- [right](#right)\n- [size](#size)\n- [textStyle](#textstyle)\n- [title](#title)\n- [titleProps](#titleprops)\n- [uncheckedColor](#uncheckedcolor)\n- [uncheckedIcon](#uncheckedicon)\n- [wrapperStyle](#wrapperstyle)\n\n## Reference\n\n### CheckBox\n\n#### Component\n\nSpecify React Native component for main button.\n\n| Type            | Default |\n| --------------- | ------- |\n| React Component | None    |\n\n---\n\n#### center\n\nAligns checkbox to center.\n\n| Type    | Default |\n| ------- | ------- |\n| boolean | false   |\n\n---\n\n#### checked\n\nFlag for checking the icon.\n\n| Type    | Default |\n| ------- | ------- |\n| boolean | false   |\n\n---\n\n#### checkedColor\n\nDefault checked color.\n\n| Type   | Default        |\n| ------ | -------------- |\n| string | Color(Primary) |\n\n---\n\n#### checkedIcon\n\nDefault checked icon ([Font Awesome Icon](http://fontawesome.io/icons/)).\n\n| Type | Default |\n| ---- | ------- |\n| any  | None    |\n\n---\n\n#### checkedTitle\n\nSpecify a custom checked message.\n\n| Type   | Default |\n| ------ | ------- |\n| string | None    |\n\n---\n\n#### containerStyle\n\nStyle of main container.\n\n| Type               | Default |\n| ------------------ | ------- |\n| View style(Object) | None    |\n\n---\n\n#### fontFamily\n\nSpecify different font family.\n\n| Type   | Default |\n| ------ | ------- |\n| string | None    |\n\n---\n\n#### iconRight\n\nMoves icon to right of text.\n\n| Type    | Default |\n| ------- | ------- |\n| boolean | false   |\n\n---\n\n#### iconType\n\nType of icon set. [Supported sets here](icon#available-icon-sets).\n\n| Type   | Default |\n| ------ | ------- |\n| string | None    |\n\n---\n\n#### onIconPress\n\nonPress function for checkbox.\n\n| Type     | Default |\n| -------- | ------- |\n| Function | None    |\n\n---\n\n#### onLongIconPress\n\nonLongPress function for checkbox.\n\n| Type     | Default |\n| -------- | ------- |\n| Function | None    |\n\n---\n\n#### right\n\nAligns checkbox to right.\n\n| Type    | Default |\n| ------- | ------- |\n| boolean | false   |\n\n---\n\n#### size\n\nSize of the checkbox.\n\n| Type   | Default |\n| ------ | ------- |\n| number | None    |\n\n---\n\n#### textStyle\n\nStyle of text.\n\n| Type               | Default |\n| ------------------ | ------- |\n| Text Style(Object) | None    |\n\n---\n\n#### title\n\nTitle of checkbox.\n\n| Type | Default |\n| ---- | ------- |\n| any  | None    |\n\n---\n\n#### titleProps\n\nAdditional props for the title Text component.\n\n| Type      | Default |\n| --------- | ------- |\n| TextProps | {}      |\n\n---\n\n#### uncheckedColor\n\nDefault unchecked color.\n\n| Type   | Default |\n| ------ | ------- |\n| string | None    |\n\n---\n\n#### uncheckedIcon\n\nDefault checked icon ([Font Awesome Icon](http://fontawesome.io/icons/))\n\n| Type | Default |\n| ---- | ------- |\n| any  | None    |\n\n---\n\n#### wrapperStyle\n\nStyle for the wrapper of checkbox.\n\n| Type               | Default |\n| ------------------ | ------- |\n| View style(Object) | None    |\n\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for New Documentation Pages\nDESCRIPTION: A markdown template showing the required header format for creating new documentation pages in the React Native Elements documentation site.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: /component\nid: my-component\ntitle: My Component\n---\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with Yarn\nDESCRIPTION: Shell commands using Yarn to first install all project dependencies defined in `package.json` (via `yarn`) and then specifically add the core React Native Elements packages (`@rneui/base`, `@rneui/themed`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing from React Native Elements\nDESCRIPTION: Demonstrates the basic import statement for using components from the 'react-native-elements' library in a React Native project. This specific example shows an empty import brace, indicating either a placeholder or potentially importing only for side effects if the library structure supported it, but typically components would be listed within the braces.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements (TypeScript/React Native)\nDESCRIPTION: This snippet illustrates how to import the Dialog component from the @rneui/themed package using ES6 import syntax. It is required to use the Dialog and Dialog.Title subcomponents in your TypeScript-based React Native project. The @rneui/themed package must be installed as a dependency for this import to function.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with React Native Elements Template\nDESCRIPTION: Command to create a new Expo project using the React Native Elements template.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Stable via Yarn - Bash\nDESCRIPTION: Installs the stable releases of @rneui/themed and @rneui/base using the Yarn package manager. Run this command in your project directory to add the required dependencies for React Native Elements. Ensure Yarn is installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Importing Chip Component in React Native Elements\nDESCRIPTION: Shows how to import the Chip component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chip } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Icon Component\nDESCRIPTION: This snippet demonstrates how to specify the theme key for the Icon component when using ThemeProvider for customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Icon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nIcon\n```\n\n----------------------------------------\n\nTITLE: Importing TabView Component in React Native Elements\nDESCRIPTION: This snippet shows the necessary import statement to use the `TabView` component from the `@rneui/themed` library. `TabView.Item` is accessed as a child or property of the imported `TabView`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabView } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet imports a Snack component from a markdown index file and renders it as a React component. It requires a standard React environment and assumes that the './snack/index.md' path points to a compatible module export. The Snack component is rendered with no props, and the structure enables live interactive previews or documentation of UI elements. Expected input is a React environment with module-resolution support for '.md' files, output is the rendered Snack component. The snippet includes a comment indicating further enhancements for ButtonGroup components are planned.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ButtonGroup/ButtonGroup.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n\n// Example of ButtonGroup with React Component as prop input which is not into snack yet\n```\n\n----------------------------------------\n\nTITLE: Adding Checkboxes to ListItems in React Native Elements (tsx)\nDESCRIPTION: Shows how to include a `ListItem.CheckBox` within `ListItem` components. This example manages the checked state for multiple list items using `React.useState` and allows toggling the state via `onPress`. It customizes checkbox icons using `iconType`, `checkedIcon`, and `uncheckedIcon` props. Requires props for `ListItem.CheckBox`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction () {\n     const [checked, setChecked] = React.useState([false, false]);\n     return (\n       <>\n         <ListItem bottomDivider>\n           <ListItem.CheckBox\n             // Use ThemeProvider to change the defaults of the checkbox\n             iconType=\"material-community\"\n             checkedIcon=\"checkbox-marked\"\n             uncheckedIcon=\"checkbox-blank-outline\"\n             checked={checked[0]}\n             onPress={() => setChecked([!checked[0], checked[1]])}\n           />\n           <ListItem.Content>\n             <ListItem.Title>User 1</ListItem.Title>\n             <ListItem.Subtitle>CA, US</ListItem.Subtitle>\n           </ListItem.Content>\n           <ListItem.Chevron />\n         </ListItem>\n         <ListItem bottomDivider>\n           <ListItem.CheckBox\n             // Use ThemeProvider to change the defaults of the checkbox\n             iconType=\"material-community\"\n             checkedIcon=\"checkbox-marked\"\n             uncheckedIcon=\"checkbox-blank-outline\"\n             checked={checked[1]}\n             onPress={() => setChecked([checked[0], !checked[1]])}\n           />\n           <ListItem.Content>\n             <ListItem.Title>User 2</ListItem.Title>\n             <ListItem.Subtitle>HR, India</ListItem.Subtitle>\n           </ListItem.Content>\n           <ListItem.Chevron />\n         </ListItem>\n       </>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for React Native Elements\nDESCRIPTION: Command for installing dependencies after cloning the React Native Elements repository using yarn package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Icon and Chevron using Map Function\nDESCRIPTION: This example shows how to create a list of items with icons and chevron indicators. Each list item displays a title and an icon, with a chevron indicating the item is tappable using ListItem and Icon components from React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Icon } from '@rneui/themed'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Theme Mode with useThemeMode Hook (TypeScript)\nDESCRIPTION: This example demonstrates the use of the useThemeMode hook to access and update the theme mode (e.g., switching between 'light' and 'dark') within a React Native functional component. The hook provides the current mode and a setMode function. Requires the @rneui/themed dependency and ThemeProvider context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThemeMode } from '@rneui/themed';\n\nfunction Demo() {\n  const { mode, setMode } = useThemeMode();\n\n  return <Button onPress={() => setMode('dark')} title={mode} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Dynamically with updateTheme\nDESCRIPTION: Illustrates how to use the `updateTheme` function (provided by `withTheme` HOC or `useTheme` hook) to dynamically merge new theme values with the existing theme. This example shows updating the primary color to 'red'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  colors: {\n    primary: 'pink',\n  },\n};\n\n// We can update the primary color\nupdateTheme({ colors: { primary: 'red' } });\n```\n\n----------------------------------------\n\nTITLE: Importing LinearProgress Component from React Native Elements\nDESCRIPTION: Shows how to import the LinearProgress component from the @rneui/themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LinearProgress } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckBox Components in React Native (JavaScript)\nDESCRIPTION: Demonstrates various ways to implement the CheckBox component from react-native-elements. Examples include basic usage, centered alignment, custom icons (using icon names and Image components), icon positioning (iconRight), specifying icon types (material), custom colors (checkedColor), and handling the onPress event to toggle the checked state managed by `this.state.checked`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { CheckBox } from 'react-native-elements'\n\n<CheckBox\n  title='Click Here'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here'\n  checkedIcon='dot-circle-o'\n  uncheckedIcon='circle-o'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here to Remove This Item'\n  iconRight\n  iconType='material'\n  checkedIcon='clear'\n  uncheckedIcon='add'\n  checkedColor='red'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  checkedIcon={<Image source={require('../checked.png')} />}\n  uncheckedIcon={<Image source={require('../unchecked.png')} />}\n  checked={this.state.checked}\n  onPress={() => this.setState({checked: !this.state.checked})}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements\nDESCRIPTION: Shows how to import the Card component from the @rneui/themed package\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements (TypeScript)\nDESCRIPTION: This snippet shows how to import the ListItem component from the @rneui/themed package for use with the Chevron icon feature. No additional dependencies beyond react-native-elements (RNEUI v4+) and React Native are required. By importing ListItem, developers can access ListItem.Chevron for adding iconography to list elements; this is essential before using the Chevron or ListItem in their codebase.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.Chevron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Button and Container Styles - React Native Elements - JavaScript\nDESCRIPTION: This snippet sets up custom inline style objects for a button and its container within a React Native Elements context. The button uses a specific background color, rounded corners, and padding, while the container controls width and margin. These styles are intended for direct use as props, allowing for quick UI customization in a React Native application. Dependencies: React Native, React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbuttonStyle={{\n  backgroundColor: 'rgba(92, 99,216, 1)',\n  borderColor: 'transparent',\n  borderWidth: 0,\n  borderRadius: 5,\n  paddingVertical: 10,\n}}\ncontainerStyle={{\n  width: 200,\n  marginHorizontal: 50,\n  marginVertical: 10,\n}}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements using Bash (npm/yarn)\nDESCRIPTION: Shows commands for installing project dependencies (`npm install` or `yarn`) and adding `react-native-elements` using either npm or yarn package managers for a standard `react-native-init` project. This follows cleaning the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install && npm install react-native-elements --save\n\n# yarn\nyarn && yarn add react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Installing RNE Packages using Yarn for Expo\nDESCRIPTION: Installs project dependencies using `yarn` and then adds the core React Native Elements packages (`@rneui/base` and `@rneui/themed`). This follows the cleanup step when resolving font issues in an Expo managed project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Text Styles with createTheme in React Native Elements\nDESCRIPTION: These snippets show two different ways to create custom text styles using createTheme. The first uses a function to conditionally apply styles, while the second directly sets styles for a specific text variant.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/theming.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  Text: (prop) => ({\n    style: prop.h5 && { fontSize: 8 },\n  }),\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  Text: {\n    h5Style: { fontSize: 8 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons (Shell/Bash)\nDESCRIPTION: Executes the linking process for react-native-vector-icons so that native code integrates the icons package. Running this command is often necessary in bare React Native projects to ensure fonts and resources are included. Refer to the React Native official linking documentation for more information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Configuring ModalComponent for Dialog in React Native Web (JSX)\nDESCRIPTION: This snippet demonstrates how to configure the `Dialog` component for use on the web platform with `react-native-web`. Since `react-native-web` does not have a built-in `Modal` implementation, a compatible one (like `modal-react-native-web`) must be imported and passed to the `Dialog` component via the `ModalComponent` prop. Failure to do so will result in the Dialog not rendering correctly on the web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Dialog ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Theme-Aware Styles with makeStyles Hook Generator (JSX)\nDESCRIPTION: Illustrates using the `makeStyles` hook generator to create styles outside the component definition while still having access to the `theme` and component `props`. The `makeStyles` function takes a callback that receives `theme` and `props` and returns a style object. The generated `useStyles` hook is then called within the component to get the computed styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { makeStyles, useTheme } from 'react-native-elements';\n\nconst MyComponent = (props) => {\n  const { theme } = useTheme();\n  const styles = useStyles(theme,props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n\nexport default MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Applying Native Platform Color Palette to Theme (React Native Elements, JSX)\nDESCRIPTION: Shows how to incorporate native platform-specific color palettes into the theming system by utilizing Platform.select for lightColors. This example enables your app to automatically select colors based on the running platform (iOS, Android, or default), and applies them through ThemeProvider. Dependencies are '@rneui/themed' and 'react-native', and relevant colors must be available in lightColors.platform. The button in the provider will use the selected native theme color as its main color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/color.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Rating Component in React Native (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to render a read-only `Rating` component from React Native Elements. It takes a `rating` value from props, sets the `imageSize` to 20, enables `readonly` mode, and applies custom styles via `styles.rating`. Assumes `rating` is passed via component props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Rating/Rating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons for CheckBox in TypeScript\nDESCRIPTION: Shows how to replace the default checkmark icons with custom icons using the 'checkedIcon' and 'uncheckedIcon' props (e.g., 'heart'/'heart-o', 'bookmark'/'bookmark-o'). It also demonstrates customizing the 'checkedColor'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/CheckBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n     const [checked, setState] = React.useState(true);\n     const toggleCheckbox = () => setState(!checked);\n     return (\n       <Stack row align=\"center\">\n         <CheckBox\n           checked={checked}\n           checkedIcon=\"heart\"\n           uncheckedIcon=\"heart-o\"\n           checkedColor=\"red\"\n           onPress={toggleCheckbox}\n         />\n         <CheckBox\n           checked={checked}\n           checkedIcon=\"bookmark\"\n           uncheckedIcon=\"bookmark-o\"\n           checkedColor=\"heart\"\n           onPress={toggleCheckbox}\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient with React Native Elements Chip - JavaScript (JSX)\nDESCRIPTION: This snippet demonstrates how to use the react-native-linear-gradient package with the Chip component from React Native Elements. It shows the required imports and how to pass linearGradientProps for creating a gradient background on the Chip. The example presumes that react-native-linear-gradient is installed and configured, or that expo/create-react-native-app is used, and explains use of colors, start, and end properties for the gradient.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Button and Container Styling - React Native Elements - JavaScript\nDESCRIPTION: This snippet shows how to customize button and container styling using inline JavaScript objects for use within a React Native Elements Button component. The buttonStyle prop modifies aspects like background color, border, and padding, while containerStyle controls width and margins. Dependencies include React Native and react-native-elements; expected inputs are style objects, and outputs render a styled Button component. It assumes knowledge of React Native's styling props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbuttonStyle={{\n  backgroundColor: 'rgba(92, 99,216, 1)',\n  borderColor: 'transparent',\n  borderWidth: 0,\n  borderRadius: 5,\n  paddingVertical: 10,\n}}\ncontainerStyle={{\n  width: 200,\n  marginHorizontal: 50,\n  marginVertical: 10,\n}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Slider Component via Theme Key\nDESCRIPTION: Demonstrates how to access the Slider component using the theme key in React Native Elements for customization purposes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSlider\n```\n\n----------------------------------------\n\nTITLE: Defining Colors Interface for UI Themes - TypeScript\nDESCRIPTION: This snippet declares the `Colors` interface, which specifies a comprehensive set of color properties used throughout themed components in React Native Elements. It organizes primary and secondary colors, grayscale variants, semantic colors (success, warning, error), and platform-specific palettes. Dependencies are TypeScript and the `PlatformColors` type. Inputs are color value definitions; outputs are type-safe color palette objects for use in styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/theme_object.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Colors {\n  primary: string;\n  secondary: string;\n  background: string;\n  white: string;\n  black: string;\n  grey0: string;\n  grey1: string;\n  grey2: string;\n  grey3: string;\n  grey4: string;\n  grey5: string;\n  greyOutline: string;\n  searchBg: string;\n  success: string;\n  warning: string;\n  error: string;\n  disabled: string;\n  divider: string;\n  platform: {\n    ios: PlatformColors;\n    android: PlatformColors;\n    web: PlatformColors;\n    default: PlatformColors;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Global Theme with ThemeProvider (JSX)\nDESCRIPTION: Shows how to use the `ThemeProvider` component to apply a consistent theme across multiple components. In this example, a theme object is defined to set the `raised` prop to `true` for all `Button` components rendered within the `ThemeProvider`'s scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    raised: true,\n  },\n};\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n      <Button title=\"My 2nd Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Rating Component in React Native Elements\nDESCRIPTION: Demonstrates how to render a non-interactive `Rating` component using the `readonly` prop. The `startingValue` prop sets the displayed rating (passed via props in this example), and `imageSize` and `style` are used for visual customization. This is useful for displaying existing ratings without allowing user input.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/rating.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Solid Button in React Native Elements\nDESCRIPTION: This snippet demonstrates the simplest way to create a default solid `Button` component using `react-native-elements`. It only requires the `title` prop to display text on the button. This is the default style if the `type` prop is not specified.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid Button\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem Accordion in React Native Elements\nDESCRIPTION: This example shows how to create an accordion-style ListItem using React Native Elements. It demonstrates expanding and collapsing a list of items within the accordion.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem.Accordion\n  content={\n    <>\n      <Icon name=\"place\" size={30} />\n      <ListItem.Content>\n        <ListItem.Title>List Accordion</ListItem.Title>\n      </ListItem.Content>\n    </>\n  }\n  isExpanded={expanded}\n  onPress={() => {\n    setExpanded(!expanded);\n  }}\n>\n  {list2.map((l, i) => (\n    <ListItem key={i} onPress={log} bottomDivider>\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\n      <ListItem.Content>\n        <ListItem.Title>{l.name}</ListItem.Title>\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  ))}\n</ListItem.Accordion>\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in React Native Elements\nDESCRIPTION: A basic example of using the Slider component to create a slider that updates state when the value changes. The slider is contained in a flex view with text displaying the current value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/slider.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from 'react-native-elements';\nimport { Animated } from 'react-native';\n\n<View style={{ flex: 1, alignItems: 'stretch', justifyContent: 'center' }}>\n  <Slider\n    value={this.state.value}\n    onValueChange={(value) => this.setState({ value })}\n  />\n  <Text>Value: {this.state.value}</Text>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay for Web-Platform using Custom Modal - React Native Elements (JSX)\nDESCRIPTION: This snippet shows how to import a Modal implementation from 'modal-react-native-web' and pass it to the Overlay's ModalComponent prop. This setup ensures that the Overlay functions correctly on web platforms, which do not currently implement the default React Native Modal. Dependencies include 'react-native-elements', 'react-native-web', and 'modal-react-native-web'. The main input is a valid Modal component, and the main output is a functional Overlay on the web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n<Overlay ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Adding a Badge to a ListItem using @rneui/themed in JavaScript\nDESCRIPTION: Illustrates how to include a `Badge` component from `@rneui/themed` directly within a `ListItem`. This example shows setting the badge's numerical `value`, customizing the `textStyle`, and adjusting its position using `containerStyle` with a negative margin. Requires `@rneui/themed`'s `ListItem` and `Badge` components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Overlay Component Example in React Native Elements\nDESCRIPTION: A comprehensive example showing how to implement an Overlay component with toggle functionality, styling, and content. The component uses React hooks for state management and includes buttons with icons to demonstrate common usage patterns.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay, Icon } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype OverlayComponentProps = {};\n\nconst OverlayComponent: React.FunctionComponent<OverlayComponentProps> = () => {\nconst [visible, setVisible] = useState(false);\n\nconst toggleOverlay = () => {\n  setVisible(!visible);\n};\n\nreturn (\n  <View>\n    <Button\n      title=\"Open Overlay\"\n      onPress={toggleOverlay}\n      buttonStyle={styles.button}\n    />\n    <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n      <Text style={styles.textPrimary}>Hello!</Text>\n      <Text style={styles.textSecondary}>\n        Welcome to React Native Elements\n      </Text>\n      <Button\n        icon={\n          <Icon\n            name=\"wrench\"\n            type=\"font-awesome\"\n            color=\"white\"\n            size={25}\n            iconStyle={{ marginRight: 10 }}\n          />\n        }\n        title=\"Start Building\"\n        onPress={toggleOverlay}\n      />\n    </Overlay>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\ntextPrimary: {\n  marginVertical: 20,\n  textAlign: 'center',\n  fontSize: 20,\n},\ntextSecondary: {\n  marginBottom: 10,\n  textAlign: 'center',\n  fontSize: 17,\n},\n});\n\nexport default OverlayComponent;\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme to Override Default Button Styles with ThemeProvider (TypeScript)\nDESCRIPTION: Shows how to use `ThemeProvider` from `@rneui/themed` to apply a custom theme. The example defines a theme that sets the default `titleStyle` color for all `Button` components within the provider's scope to 'red', overriding the internal default style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/0.index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Weight Styles in React Native Elements for Android\nDESCRIPTION: Example showing how to set up font weight styles for different heading levels using custom Nunito font family. Each style definition pairs a specific font family variant with its corresponding numeric font weight value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n    h1Style: {\n      fontFamily: 'Nunito-SemiBold',\n      fontWeight: '300',\n    },\n    h2Style: {\n      fontFamily: 'Nunito-Regular',\n      fontWeight: '100',\n    },\n    h3Style: {\n      fontFamily: 'Nunito-Bold',\n      fontWeight: '500',\n    },\n```\n\n----------------------------------------\n\nTITLE: Using Custom Colors in React Native Elements Components\nDESCRIPTION: Demonstrates how to use custom colors in a React Native Elements component after extending the theme. This example shows accessing a custom 'accent' color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text style={{ color: theme.colors.accent }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing PricingCard Component in React Native Elements\nDESCRIPTION: Example demonstrating how to implement a basic pricing card using the PricingCard component from react-native-elements. The component displays a free tier pricing plan with basic features and a call-to-action button.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/pricing.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PricingCard } from 'react-native-elements';\n\n<PricingCard\n  color=\"#4f9deb\"\n  title=\"Free\"\n  price=\"$0\"\n  info={['1 User', 'Basic Support', 'All Core Features']}\n  button={{ title: 'GET STARTED', icon: 'flight-takeoff' }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Chevron from React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import from the react-native-elements library, ensuring access to the ListItem.Chevron component and related UI primitives. The empty import syntax suggests either a placeholder for future explicit import or a bundler configuration requirement. The key dependency is the react-native-elements package, which must be installed in the project. The snippet by itself does not provide functional code but sets up the environment for further usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.Chevron.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Button with Icon Example in React Native Elements\nDESCRIPTION: Shows how to include an icon alongside text in a button, with the icon positioned to the left of the text.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type=\"solid\">\n  <Icon name=\"home\" color=\"white\" />\n  Icon\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Loading Button Implementation in React Native Elements\nDESCRIPTION: Creating a button with a loading spinner by using the 'loading' prop. This is useful for showing loading states during asynchronous operations.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" loading />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Solid Button in a TabView Context (React Native Elements)\nDESCRIPTION: Shows a basic solid `Button` component placed within a `TabItem` as part of a `Tabs` structure. This reiterates the default button type (`solid`) when the `type` prop is omitted or explicitly set to `solid`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid Button\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Values with ThemeConsumer Render Props (JSX)\nDESCRIPTION: Shows an alternative method to access theme values within a custom component using the `ThemeConsumer` component and the render props pattern. The function passed as a child to `ThemeConsumer` receives the theme object, allowing access to properties like `theme.colors.primary`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from 'react-native-elements';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Appearance and Status Bar in JavaScript/JSX\nDESCRIPTION: Example of customizing the React Native Elements Header's appearance. It uses `statusBarProps` and `barStyle` to configure the status bar, `containerStyle` to apply custom background color and layout justification, and combines custom and default components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/header.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  statusBarProps={{ barStyle: 'light-content' }}\n  barStyle=\"light-content\" // or directly\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  containerStyle={{\n    backgroundColor: '#3D6DCC',\n    justifyContent: 'space-around',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Extending RNE Component Props and Theme with TypeScript\nDESCRIPTION: Demonstrates extending the properties of a default RNE component (`Text`) using TypeScript declaration merging. It adds a new `bold` prop to `TextProps` and declares that the `ComponentTheme` can optionally contain a partial `TextProps` object under the `Text` key, enabling theme configuration for the new prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface ComponentTheme {\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Documentation Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet imports the documentation for the Snack component from a Markdown file and then renders it using the Snack React component. It assumes the presence of a React setup where '.md' files can be imported and that the Snack documentation is implemented as a React component. No parameters are required for the Snack component in this instance, and the rendered output is determined by the markdown content. Dependencies include React, a compatible markdown loader, and the Snack component itself.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/CheckBox/CheckBox.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet Component in React Native Elements (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to import the BottomSheet component from the '@rneui/themed' package, which is required to utilize the overlay modal functionality in a React Native application. Ensure that '@rneui/themed' is added as a dependency in your project. This snippet is necessary to use the BottomSheet component elsewhere in your codebase. No input or output is expected from this snippet as it is only for importing the module.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BottomSheet } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons via NPM\nDESCRIPTION: Command to install react-native-vector-icons, a peer dependency of React Native Elements, using NPM.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Cloning the React Native Elements repository\nDESCRIPTION: Git command to clone the React Native Elements repository from GitHub.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/example/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/react-native-elements/react-native-elements.git\n```\n\n----------------------------------------\n\nTITLE: Resetting Metro Bundler Cache to Resolve Module Errors (Bash)\nDESCRIPTION: This npm command starts the React Native development server (Metro) and resets its cache to resolve stubborn module resolution issues. It should be run from your project's root directory. Requires npm and a React Native project set up.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Merging Object Theme Style with Array Component Style in React Native Elements (JSX)\nDESCRIPTION: This example demonstrates a scenario marked as working where the theme defines `containerStyle` as an object, but the Button component receives its `containerStyle` as an array containing a style object. This implies the ThemeProvider's merging logic supports this specific combination.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Importing AirbnbRating Component in React Native Elements (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `AirbnbRating` component from the `@rneui/themed` library. This component is used to display a tap-based rating system, often seen in Airbnb-style interfaces, allowing users to provide feedback with star ratings.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AirbnbRating } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Artifacts for Expo Setup (Bash)\nDESCRIPTION: Command to remove `node_modules`, `yarn.lock`, and `package-lock.json` as a first step in resolving font or dependency issues in an Expo project (created with `create-react-native-app` or Expo XDE).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Importing LinearProgress Component in React Native\nDESCRIPTION: This snippet shows how to import the LinearProgress component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LinearProgress } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Dialog` component from the `@rneui/themed` library. This import is required to use the `Dialog.Title` sub-component within a React Native application using React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Tile Component from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Tile component from the @rneui/themed package, enabling its use in React Native or React Native Elements projects. It requires the @rneui/themed library to be installed as a dependency. The only parameter is the specific component being imported (Tile), and it can then be instantiated or used within the JSX of the project. The expected output is a reference to the Tile React component that can be rendered and configured with props as described elsewhere in the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Tile } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Button Component\nDESCRIPTION: Example import statement for Dialog.Button component from react-native-elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Dialog.Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Snack Markdown Component in React (JavaScript)\nDESCRIPTION: This snippet imports a module (presumably an MDX file) named 'snack/index.md' as the component 'Snack'. The imported 'Snack' can then be used as a standard React component elsewhere in the file. This approach is commonly used in documentation sites that support MDX integration with React.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Avatar/Avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\n----------------------------------------\n\nTITLE: Creating Swipeable ListItems in React Native Elements\nDESCRIPTION: This snippet demonstrates how to create a swipeable ListItem using React Native Elements. It includes left and right swipe actions with custom buttons and icons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem.Swipeable\n  leftContent={\n    <Button\n      title=\"Info\"\n      icon={{ name: 'info', color: 'white' }}\n      buttonStyle={{ minHeight: '100%' }}\n    />\n  }\n  rightContent={\n    <Button\n      title=\"Delete\"\n      icon={{ name: 'delete', color: 'white' }}\n      buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n    />\n  }\n>\n  <Icon name=\"My Icon\" />\n  <ListItem.Content>\n    <ListItem.Title>Hello Swiper</ListItem.Title>\n  </ListItem.Content>\n  <ListItem.Chevron />\n</ListItem.Swipeable>\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons\nDESCRIPTION: Links the `react-native-vector-icons` library to the native iOS and Android projects. This step is generally required for React Native versions below 0.60; newer versions handle automatic linking. Running this on newer RN versions might require subsequent unlinking.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Styled Components via Composition in React Native Elements (TSX)\nDESCRIPTION: Shows the composition pattern for creating reusable custom components. A `RaisedButton` component is defined, which internally renders the standard `@rneui/themed` `Button` but always applies the `raised` prop, while still accepting other props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts in CRA (JSX)\nDESCRIPTION: Demonstrates how to load the necessary font files (`MaterialIcons.ttf`, `FontAwesome.ttf`) from `react-native-vector-icons` within a React component (e.g., `App.js`) using a `<style>` tag and `@font-face` CSS rules. This is crucial for rendering icons correctly when using RNE with Create React App on the web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Themed Styles with makeStyles Hook in React Native Elements\nDESCRIPTION: This example demonstrates how to use the makeStyles hook generator to create styles that reference theme values and component props. This allows for keeping styles outside the component while still having access to the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/0.index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from '@rneui/themed';\n\ntype Params = {\n  fullWidth?: boolean;\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme with Extended TypeScript Definitions\nDESCRIPTION: This snippet shows how to create a custom theme using the extended TypeScript definitions. It defines a theme that applies bold font weight to Text components when the 'bold' prop is true.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons Peer Dependency with NPM\nDESCRIPTION: Installs the react-native-vector-icons library using npm. This is a required peer dependency for React Native Elements in standard React Native projects (not pre-installed like in Expo).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Styling a React Native Button Component (Inline)\nDESCRIPTION: This snippet demonstrates inline styling for a React Native Button component (likely from react-native-elements). It defines the `buttonStyle` prop to control the button's visual appearance (background color, border, radius, padding) and the `containerStyle` prop to manage the button's layout container (width, margins).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 10,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n            />\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Node Modules with npm/yarn due to Module Resolution Errors (Bash)\nDESCRIPTION: These bash commands forcibly delete node_modules and reinstall them using npm or yarn to fix 'Unable to resolve module x' errors. Should be used if dependency tree issues or incomplete installs are suspected. Prerequisites: npm or yarn installed. Outputs: refreshed node_modules directory.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm -rm -rf node_modules && npm i\\n\\nyarn - rm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Font Styles for Headings on Android\nDESCRIPTION: Example showing how to configure custom font styles for h1, h2, and h3 headings in React Native Elements, specifying both fontFamily and fontWeight. This addresses the Android-specific requirement that font weights must align with the used font.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n    h1Style: {\n      fontFamily: 'Nunito-SemiBold',\n      fontWeight: '300',\n    },\n    h2Style: {\n      fontFamily: 'Nunito-Regular',\n      fontWeight: '100',\n    },\n    h3Style: {\n      fontFamily: 'Nunito-Bold',\n      fontWeight: '500',\n    },\n```\n\n----------------------------------------\n\nTITLE: Rendering Snack MDX Component in React JSX (JavaScript)\nDESCRIPTION: This snippet renders the previously imported Snack component using JSX syntax. It displays the contents of 'snack/index.md' within the rendered output of a React component. The usage assumes the MDX has been properly configured to be used as a React component in the build system.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Avatar/Avatar.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context with Yarn\nDESCRIPTION: Installs the `react-native-safe-area-context` library using Yarn. This is a required peer dependency for handling safe area insets on devices with notches or home indicators.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Importing the Skeleton Component in React Native Elements (TypeScript/TSX)\nDESCRIPTION: Shows how to import the `Skeleton` component from the `@rneui/themed` package for use in a React Native application built with TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skeleton } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Header with Default Components in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates initializing the Header component using default React Native Elements components (Icon for left/right, Text for center). Configuration is provided through object props (`leftComponent`, `centerComponent`, `rightComponent`) to customize icons, text, and styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/header.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={{ icon: 'menu', color: '#fff', iconStyle: { color: '#fff' } }}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  rightComponent={{ icon: 'home', color: '#fff' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Vector Icons Dependency with Yarn (Bash)\nDESCRIPTION: Installs the required `@expo/vector-icons` dependency using Yarn for an Expo project. Expo handles icon integration differently than standard React Native, requiring this specific package. The `--save` flag adds it to `package.json`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Custom Icon CheckBox\nDESCRIPTION: Illustrates how to implement checkboxes with custom icons like heart and bookmark.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/CheckBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction () {\n     const [checked, setState] = React.useState(true);\n     const toggleCheckbox = () => setState(!checked);\n     return (\n       <Stack row align=\"center\">\n         <CheckBox\n           checked={checked}\n           checkedIcon=\"heart\"\n           uncheckedIcon=\"heart-o\"\n           checkedColor=\"red\"\n           onPress={toggleCheckbox}\n         />\n         <CheckBox\n           checked={checked}\n           checkedIcon=\"bookmark\"\n           uncheckedIcon=\"bookmark-o\"\n           checkedColor=\"heart\"\n           onPress={toggleCheckbox}\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Installing RNE Web Dependencies with Yarn (Bash)\nDESCRIPTION: Installs React Native Elements (`@rneui/base`, `@rneui/themed`), `react-native-web`, and `react-native-vector-icons` using Yarn. These are necessary dependencies for using RNE in a web project, specifically with Create React App.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn add  @rneui/base @rneui/themed react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Overriding Internal Styles with ThemeProvider (JSX)\nDESCRIPTION: Illustrates how styles defined within the `ThemeProvider` theme object take precedence over the component's default internal styles. Here, the `titleStyle` color for `Button` is set to 'red' via the theme, overriding the default title color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Matching Object Styles in Theme and Local Props (JSX)\nDESCRIPTION: This example shows a correct way to merge styles when using React Native Elements theming. Both the `containerStyle` defined within the theme for the `Button` component and the local `containerStyle` prop passed directly to the `Button` instance are style objects. Because the types match, the styles are merged correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Divider component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Divider } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using ListItem with Icon and Chevron in TSX\nDESCRIPTION: Illustrates how to incorporate an Icon component alongside text within a ListItem. It also shows the usage of `ListItem.Chevron` to add a standard chevron icon, typically indicating navigation or further actions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <ListItem>\n    <Icon name=\"inbox\" type=\"material-community\" color=\"grey\" />\n    <ListItem.Content>\n      <ListItem.Title>Inbox</ListItem.Title>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n  <ListItem>\n    <Icon name=\"trash-can-outline\" type=\"material-community\" color=\"grey\" />\n    <ListItem.Content>\n      <ListItem.Title>Trash</ListItem.Title>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Theme with createTheme Function (TypeScript)\nDESCRIPTION: This code provides the signature and typical usage of createTheme to define a theme object with lightColors, darkColors, mode, and component-specific overrides. It demonstrates function options and advanced configuration, such as supplying a callback for per-component theming. Prerequisites include the @rneui/themed package. The function outputs a theme object compatible with ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ncreateTheme({\n  lightColors: Colors,\n  darkColors: Colors,\n  mode: 'light' | 'dark',\n  components: {\n    componentName: (props, theme) => ({\n      // Props\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Themed Text Component with Extended Props - TypeScript\nDESCRIPTION: This snippet shows how to use a Text component with custom 'bold' props within an app. It presents both the default and bold usage and relies on previous theme and prop augmentations. Dependencies: useTheme, theme-provided component variations, and extended TextProps. Inputs: 'bold' prop to Text; Output: styled text reflecting the 'bold' flag.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return (\n    <View>\n      <Text>Normal Text</Text>\n      <Text bold>Bold Text</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the Dialog component from the @rneui/themed package in React Native Elements. The Dialog.Button is a subcomponent of Dialog.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Dialog.Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Accessing SearchBar Methods in React Native\nDESCRIPTION: Demonstrates how to store a reference to the SearchBar component and call its methods like focus, blur, clear, and cancel.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n\n----------------------------------------\n\nTITLE: Defining Component-Specific Theme Styles in React Native Elements (JSX)\nDESCRIPTION: Outlines the structure for applying default styles or props to specific component types globally using `createTheme` and `ThemeProvider`. Styles are defined within the `components` key of the theme object, targeting components by their theme key (represented here as `themeKey`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    [themeKey]: {\n      // ... props\n    },\n  },\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Letter Avatars with TypeScript\nDESCRIPTION: Demonstrates creating rounded Avatars that display initials or text using the `title` prop and customizing the background color via `containerStyle`. Two letter avatars are shown horizontally within a Stack.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Avatar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    title=\"Rd\"\n    containerStyle={{ backgroundColor: \"blue\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    title=\"AB\"\n    containerStyle={{ backgroundColor: \"purple\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Custom Thumb Image Slider in React Native Elements\nDESCRIPTION: Example of customizing the Slider by replacing the default thumb with a custom image using Animated.Image. The thumbnail uses an external profile picture and has custom size properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/slider.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<View style={{ flex: 1, alignItems: 'stretch', justifyContent: 'center' }}>\n  <Slider\n    value={this.state.value}\n    onValueChange={(value) => this.setState({ value })}\n    thumbStyle={{ height: 40, width: 40, backgroundColor: 'transparent' }}\n    thumbProps={{\n      Component: Animated.Image,\n      source: {\n        uri: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n      },\n    }}\n  />\n  <Text>Value: {this.state.value}</Text>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay Component with Custom Modal for Web in React Native\nDESCRIPTION: This snippet demonstrates how to import and use a custom Modal component for web platforms when implementing the Overlay component from React Native Elements. It's necessary because the standard Modal is not yet implemented in react-native-web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Overlay/Overlay.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Overlay ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme for Extended Component Props in React Native\nDESCRIPTION: Shows how to configure the theme using `createTheme` to apply styles based on extended component props. This example defines a function for the `Text` component's theme configuration. This function receives the component's props and returns style objects; here, it sets the `fontWeight` style conditionally based on the value of the custom `bold` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst myTheme = createTheme({\n  components: { // Note: Added components wrapper based on context and other examples\n    Text: (props) => ({\n      style: {\n        fontWeight: props.bold ? 'bold' : 'normal',\n      },\n    }),\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Styling for React Native Elements Button Components\nDESCRIPTION: Defines StyleSheet styles for button containers and related UI elements. This includes layout definitions for content views, button arrangements, and custom header styling for section separation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n},\nbuttonsContainer: {\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '100%',\n  marginVertical: 20,\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB Components in React Native with React Native Elements\nDESCRIPTION: This snippet demonstrates the usage of FAB (Floating Action Button) components from React Native Elements. It shows different variations of FABs including small and large sizes, custom colors, icons, loading state, disabled state, and placement options. The code also includes a visibility toggle functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { FAB } from '@rneui/themed';\n\nexport default () => {\nconst [visible, setVisible] = React.useState(true);\n\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Small Size\n      </Text>\n      <FAB\n        loading\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        size=\"small\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Large Size\n      </Text>\n      <FAB\n        visible={visible}\n        icon={{ name: 'add', color: 'white' }}\n        color=\"green\"\n      />\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n        Primary Color\n      </Text>\n      <FAB\n        visible={visible}\n        title=\"Navigate\"\n        upperCase\n        icon={{ name: 'place', color: 'white' }}\n      />\n\n      <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\n\n      <FAB\n        visible={visible}\n        disabled\n        title=\"Extended\"\n        icon={{\n          name: 'place',\n          color: 'white',\n        }}\n      />\n      <FAB\n        visible={visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"right\"\n        title=\"Hide\"\n        icon={{ name: 'delete', color: 'white' }}\n        color=\"red\"\n      />\n      <FAB\n        visible={!visible}\n        onPress={() => setVisible(!visible)}\n        placement=\"left\"\n        title=\"Show\"\n        icon={{ name: 'edit', color: 'white' }}\n        color=\"green\"\n      />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Badges in ListItem with React Native Elements in JavaScript\nDESCRIPTION: This short example adds a Badge to a ListItem, displaying a value with custom text and container styles using React Native Elements. The Badge's 'value', 'textStyle', and 'containerStyle' props are customizable. Dependencies are '@rneui/themed' for ListItem and Badge components. Inputs are configuration objects for the Badge. Useful for denoting counts or alerts in list contexts.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Colors Interface with TypeScript\nDESCRIPTION: Uses TypeScript declaration merging to extend the `Colors` interface within the `@rneui/themed` module. This allows adding custom color names (e.g., `primaryLight`, `primaryDark`) to the theme's color palette, enabling type checking and autocompletion for these custom colors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Colors {\n    primaryLight: string;\n    primaryDark: string;\n    secondaryLight: string;\n    secondaryDark: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components and Hooks in MDX\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from `@theme` and the `useBaseUrl` hook from `@docusaurus/useBaseUrl`. These imports are used within a Docusaurus MDX file to enable tabbed content display and correct URL generation for assets or links within the documentation site, respectively. They are foundational for structuring interactive documentation pages.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/universe/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TabItem from '@theme/TabItem';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Using Extended Component with Custom Theme in React Native Elements\nDESCRIPTION: This example shows how to use the extended Text component with the custom 'bold' property in a React Native Elements application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return (\n    <View>\n      <Text>Normal Text</Text>\n      <Text bold>Bold Text</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay for Web Platform with Modal Component\nDESCRIPTION: When using React Native Elements Overlay on web platforms, a valid Modal component implementation must be provided since it's not available in react-native-web. This example shows how to use modal-react-native-web as the ModalComponent prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/overlay.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Overlay ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying a Custom Theme using createTheme and ThemeProvider (TypeScript)\nDESCRIPTION: Demonstrates creating a custom theme object using `createTheme` from `@rneui/themed`, specifying custom colors (e.g., `lightColors.primary`). This theme is then applied globally to components within the `ThemeProvider`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/0.index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#a4e2f5',\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      {/* ... */}\n      {/* ... */}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the PricingCard component from the '@rneui/themed' package in a JavaScript/TypeScript React Native project. The PricingCard is used to display attractive pricing tables, requiring the '@rneui/themed' dependency to be installed. No parameters are required for the import itself; after import, the component can be used in JSX to render pricing cards with customizable props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PricingCard } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Example Component (MDX)\nDESCRIPTION: Imports the content of the `LinearProgress.mdx` file, located in a relative `component_usage` directory, as a React component named `Usage`. This component likely contains Markdown and JSX code examples demonstrating how to use the `LinearProgress` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/LinearProgress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from \"../component_usage/LinearProgress.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Button with Left Icon - React Native Elements - TSX\nDESCRIPTION: This snippet creates a Button with a solid type and a left-side icon. The 'icon' prop specifies which icon to display (here, 'home'), and the 'type' prop is set to 'solid'. The button displays the label 'Solid'. The icon handling requires compatible icon support within React Native Elements and any icon libraries required therein.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Button title=\\\"Solid\\\" type=\\\"solid\\\" icon=\\\"home\\\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Image Component with Placeholder - React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Image component from React Native Elements and display images with an optional loading placeholder using the ActivityIndicator from React Native. It requires the react-native, react-native-elements libraries, and optionally react-native's ActivityIndicator for placeholder content. Key parameters include source (image URI), style (dimensions), and PlaceholderContent (element to render while loading). Input: source image URI; Output: rendered image with optional placeholder and transition effects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/image.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { ActivityIndicator } from 'react-native';\\nimport { Image } from 'react-native-elements';\\n\\n// Standard Image\\n<Image\\n  source={{ uri: image }}\\n  style={{ width: 200, height: 200 }}\\n/>\\n\\n// Image with custom placeholder content\\n<Image\\n  source={{ uri: image }}\\n  style={{ width: 200, height: 200 }}\\n  PlaceholderContent={<ActivityIndicator />}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Stateful Wrapper for RNE Tooltip (JavaScript/React)\nDESCRIPTION: Provides a functional React component pattern to wrap the stateless v4 `Tooltip`. This `ControlledTooltip` component uses React's `useState` hook to manage the tooltip's visibility state, mimicking the stateful behavior of the v3 Tooltip.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/migration-v4.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst ControlledTooltip: React.FC<TooltipProps> = (props) => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Tooltip\n      visible={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      {...props}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning a React Ref to the Input Component (React Native Elements, JavaScript)\nDESCRIPTION: Illustrates how to create a reference for the Input component using React.createRef and assign it to the ref prop. This is necessary for invoking imperative interaction methods (e.g., focus, blur) on the Input instance. Requires React and React Native Elements as dependencies. The variable 'input' can then be accessed with the current property to call available interaction methods.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Styles in Theme with createTheme - jsx\nDESCRIPTION: Shows how to define a theme with per-component customization by providing a Button theme as a function of buttonProps using 'createTheme'. Inputs are button properties; output is a dynamic 'titleStyle'. This enables conditional styling of Buttons according to type for theme-driven customizability.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme } from '@rneui/themed';\\n\\nconst myTheme = createTheme({\\n  Button: (buttonProps) => ({\\n    titleStyle: {\\n      color: buttonProps.type === 'solid' ? 'blue' : 'red',\\n    },\\n  }),\\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed Headings with React Native Elements in TypeScript\nDESCRIPTION: This snippet defines a TypeScript functional component that uses React Native Elements' Text and useTheme to display headings (h1-h4) with colors drawn dynamically from the app theme. It applies custom styles via StyleSheet for spacing and alignment, ensuring each heading is visually distinct and responsive. Dependencies required are react-native, react-native-elements, and TypeScript, with theme context optionally supplied at runtime. The component has no inputs but demonstrates theming APIs and can be reused within a broader React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Text/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Text, useTheme } from 'react-native-elements';\n\ntype TextComponentProps = {};\nconst TextComponent: React.FunctionComponent<TextComponentProps> = () => {\n  const { theme } = useTheme();\n\n  return (\n    <>\n      <View style={styles.view}>\n        <Text\n          style={styles.text}\n          h1\n          h1Style={{ color: theme?.colors?.secondary }}\n        >\n          Heading 1\n        </Text>\n        <Text\n          style={styles.text}\n          h2\n          h2Style={{ color: theme?.colors?.success }}\n        >\n          Heading 2\n        </Text>\n        <Text\n          style={styles.text}\n          h3\n          h3Style={{ color: theme?.colors?.warning }}\n        >\n          Heading 3\n        </Text>\n        <Text\n          style={styles.text}\n          h4\n          h4Style={{ color: theme?.colors?.primary }}\n        >\n          Heading 4\n        </Text>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    margin: 10,\n  },\n  text: {\n    textAlign: 'center',\n    padding: 5,\n  },\n  more: {\n    marginVertical: 20,\n  },\n  button: {\n    width: 120,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n});\n\nexport default TextComponent;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Component in React\nDESCRIPTION: This snippet imports a Snack component from a local file and renders it. The Snack component is likely used to embed interactive React Native code examples or demonstrations.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Divider/Divider.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Header Component\nDESCRIPTION: Demonstrates how to specify the theme key for the Header component when using ThemeProvider. This allows for consistent styling across your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nHeader\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json Scripts for react-app-rewired\nDESCRIPTION: Shows the required modifications to the `scripts` section of `package.json` in a Create React App project. It replaces `react-scripts` with `react-app-rewired` to enable the custom build configurations defined in `config-overrides.js`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test\",\n+   \"test\": \"react-app-rewired test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies for React Native Init Setup\nDESCRIPTION: This bash command forcefully removes the `node_modules` directory and the `yarn.lock` file. It's used as a first step to ensure a clean state before reinstalling dependencies when troubleshooting font issues in a standard React Native project initialized with `react-native-init`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Defining the Theme Object Structure (TypeScript)\nDESCRIPTION: Provides a TypeScript interface definition outlining the default structure of the theme object used by React Native Elements. It highlights the `colors` property, including standard grays, semantic colors, and nested platform-specific color palettes for iOS and Android.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the Input component from React Native Elements. It also shows the import of usage examples and tab components for documentation structure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Input.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies with Bash\nDESCRIPTION: Shell command to completely remove the `node_modules` directory and the `yarn.lock` file. This is often a first step in resolving dependency issues, ensuring a clean slate before reinstalling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component\nDESCRIPTION: Import statement for ListItem component usage in React Native Elements\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: Shows how to import the Dialog component from the @rneui/themed package to use the loading functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing the SearchBar Component - React Native Elements - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the SearchBar component from the '@rneui/themed' package, which is part of the React Native Elements library. To use this snippet, ensure that the '@rneui/themed' dependency is installed in your project. The import enables access to all SearchBar-related props and methods for building sophisticated search UIs in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SearchBar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Usage Example for Badge Component in JavaScript\nDESCRIPTION: This JavaScript import statement imports the content from the `Badge.mdx` file located in a relative path. This MDX file likely contains detailed usage examples and code snippets for the Badge component. The imported content is assigned to the `Usage` variable, presumably for rendering within the documentation page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Badge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from \"../component_usage/Badge.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components for Documentation - JavaScript\nDESCRIPTION: This snippet imports React and Docusaurus-specific components, such as Tabs, TabItem, and useBaseUrl, which are used to create interactive and modular documentation pages. These dependencies are required for organizing tabbed content and referencing base URLs for static assets or links. The snippet sets up the groundwork for building rich documentation but does not contain implementation logic or UI elements yet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/universe/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Function Signature of `styled` in `@rneui/themed` (TypeScript/TSX)\nDESCRIPTION: Shows the function signature for the `styled` utility. It first takes the base `Component` to be styled, optionally accepts generic `Props` for the new component, and then takes either a static style object (`Styles`) or a style function receiving `theme` and `props` to define the component's styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nstyled(Component)<Props>(styles: Styles | ((theme, props) => Styles))\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with SafeAreaProvider in JavaScript\nDESCRIPTION: Demonstrates how to wrap the root component of a React Native application with the `SafeAreaProvider` component from 'react-native-safe-area-context'. This is required for the safe area context to function correctly throughout the app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab.Item with Dynamic ButtonStyle in React Native Elements (JSX)\nDESCRIPTION: This snippet demonstrates the use of the Tab.Item component from react-native-elements, showing how to dynamically adjust the buttonStyle property based on the active state of the tab. It requires react-native-elements as a dependency and is typically used inside a Tabs group to display interactive tab buttons within a React Native UI. The title prop sets the tab label, and the buttonStyle callback customizes the background color depending on whether the tab is active (red) or inactive (blue). The component expects to be used within a larger Tab interface, and the active argument is supplied by the parent context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab.Item\n  title=\"Tab 1\"\n  buttonStyle={(active) => {\n    backgroundColor: active ? \"red\" : \"blue\";\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Font Weights for Text Styles in React Native (TypeScript)\nDESCRIPTION: Defines style objects (`h1Style`, `h2Style`, `h3Style`) to customize the appearance of heading text components. It emphasizes the importance of matching `fontWeight` values to the specific font files used, especially on Android, by providing examples with 'Nunito' fonts and specific weight values ('300', '100', '500'). Requires the specified font files ('Nunito-SemiBold', 'Nunito-Regular', 'Nunito-Bold') to be included and linked in the React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n    h1Style: {\n      fontFamily: 'Nunito-SemiBold',\n      fontWeight: '300',\n    },\n    h2Style: {\n      fontFamily: 'Nunito-Regular',\n      fontWeight: '100',\n    },\n    h3Style: {\n      fontFamily: 'Nunito-Bold',\n      fontWeight: '500',\n    },\n```\n\n----------------------------------------\n\nTITLE: Managing Theme Mode with useThemeMode Hook in React Native Elements (TSX)\nDESCRIPTION: This snippet shows fetching and updating the current theme mode using the useThemeMode hook. It provides access to the current mode ('light' or 'dark') and allows updating it through setMode within a button press handler. Dependencies include @rneui/themed and a React Native Button component. The hook helps in implementing dynamic theme switching; input is the desired mode, and output is a rerendered UI with updated theme mode context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/1.themprovider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThemeMode } from '@rneui/themed';\\n\\nfunction Demo() {\\n  const { mode, setMode } = useThemeMode();\\n\\n  return <Button onPress={() => setMode('dark')} title={mode} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Theme Properties in a React Native Component\nDESCRIPTION: Illustrates how to access custom properties previously defined on the theme object within a React Native component (`App.tsx`). It employs the `useTheme` hook to get the theme context and then accesses the custom `theme.myCustomProperty` to display its value within a `Text` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text>{theme.myCustomProperty}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component from React Native Elements - TypeScript/TSX\nDESCRIPTION: Shows the recommended import syntax for bringing the Button component into a React Native Elements project using TypeScript/TSX. The code assumes that '@rneui/themed' is installed and available in the project. No inputs or outputsâ€”this is an import statement example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Packages - Yarn CLI/Bash\nDESCRIPTION: This Bash snippet shows the process of installing dependencies '@rneui/base' and '@rneui/themed' using Yarn, after cleaning the environment. This is typically the second setup step following removal of node_modules. These packages are necessary for using core and themed components of React Native Elements. The command assumes Yarn is installed and must be executed at the project's root.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Content as a Component in MDX (JavaScript/ESM)\nDESCRIPTION: This JavaScript (ESM) import statement, used within an MDX file, imports the default export (typically a React component representation) from the specified Markdown file (`CONTRIBUTING.md`). The path uses an alias `@site` common in Docusaurus, pointing relative to the website source directory. The imported content is assigned to the `ContributionGuide` variable.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n```\n\n----------------------------------------\n\nTITLE: Linking Safe Area Context\nDESCRIPTION: Command to link the react-native-safe-area-context package with the native modules.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Displaying a Circular Skeleton Placeholder (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to render a circular `Skeleton` component from `react-native-elements`. The `variant` prop is set to `\"circular\"`, and specific `width` and `height` props are provided to define its dimensions, creating a round placeholder suitable for avatars or icons during loading.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Skeleton variant=\"circular\" width={40} height={40} />\n```\n\n----------------------------------------\n\nTITLE: Illustrating Component Version Differences in React Native Elements (Markdown)\nDESCRIPTION: Explains that certain components like `<FormInput />` are only available in older versions (v0.19.1 and below) of React Native Elements, while newer components like `<Input />` are available in later versions (v1.0.0-beta1 and higher). This context helps resolve \"Invariant Violation\" errors caused by using components incompatible with the installed library version.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nExample:\n\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Button with Loading Spinner in React Native Elements\nDESCRIPTION: Shows how to display a loading spinner within a button using the loading prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" loading />\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with External Props in JSX\nDESCRIPTION: Illustrates that external styles passed directly as props to a component have the highest precedence, overriding both internal component styles and theme styles defined via `ThemeProvider`. The `Button`'s `titleStyle.color` is set to 'pink' via a direct prop, overriding the 'red' color set in the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating ThemeProvider with Button Component - React Native Elements - JavaScript\nDESCRIPTION: This JSX snippet demonstrates how to use the ThemeProvider from 'react-native-elements' to apply a global theme to all child components, such as the Button component. It requires the 'react-native-elements' dependency and specifically imports the ThemeProvider and Button. The main input is the title prop for the Button (\\\"Hey!\\\" in this instance). The snippet is intended to be used at the root or higher-level component of your app to ensure consistent theming. It outputs a themed button, but customization is possible by referring to the related Customization documentation. No additional configuration is shown in this snippet; further theming options are available in the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ThemeProvider } from 'react-native-elements';\n\nconst MyApp = () => {\n  return (\n    <ThemeProvider>\n      <Button title=\"Hey!\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json Scripts for react-app-rewired\nDESCRIPTION: Shows the necessary changes (diff) to the `scripts` section of `package.json` in a Create React App project. It replaces the standard `react-scripts` commands with `react-app-rewired` commands to enable the custom build configurations defined in `config-overrides.js`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test\",\n+   \"test\": \"react-app-rewired test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Properties in Custom Components using withTheme HOC (JSX)\nDESCRIPTION: Illustrates how to access the theme object (`theme`), update function (`updateTheme`), and replace function (`replaceTheme`) within a custom component using the `withTheme` Higher-Order Component (HOC) provided by React Native Elements. The HOC injects these as props into the wrapped component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { withTheme } from 'react-native-elements';\n\nfunction MyComponent(props) {\n  const { theme, updateTheme, replaceTheme } = props;\n  return <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n}\n\nexport default withTheme(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Button Sizes - React Native Elements - TSX\nDESCRIPTION: Shows how to render small, medium, and large Button components by setting the 'size' prop within a Stack layout. Stack ensures horizontal alignment. Key parameters include 'size' (with values 'sm', 'md', 'lg') and Button children representing label text. Outputs buttons of varying dimensions according to the selected size.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\\\"center\\\" spacing={4}>\n  <Button size=\\\"sm\\\">Small</Button>\n  <Button size=\\\"md\\\">Medium</Button>\n  <Button size=\\\"lg\\\">Large</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Using LinearGradient with Header in React Native Elements (JSX)\nDESCRIPTION: Demonstrates how to apply a linear gradient background to the React Native Elements Header component. It utilizes the 'react-native-linear-gradient' package by passing it to the `ViewComponent` prop and configuring the gradient via `linearGradientProps`. This requires installing and linking 'react-native-linear-gradient' for react-native-cli projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Header/Header.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { Header } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component from React Native Elements\nDESCRIPTION: Shows how to import the Dialog component from the @rneui/themed package for use in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Extending RNE Component Props Interface in TypeScript (@rneui/themed)\nDESCRIPTION: Illustrates extending the props interface (`TextProps`) for a default RNE component (`Text`) and the `ComponentTheme` interface using TypeScript declaration merging in `themed.d.ts`. This adds a custom `bold` boolean prop to the `Text` component's type definition, allowing it to be used with type checking, and registers it within the component theme structure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// themed.d.ts\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface ComponentTheme {\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Colors for Light/Dark Modes in React Native Elements (JSX)\nDESCRIPTION: Shows how to define custom primary colors for both light and dark themes using `createTheme` from `@rneui/themed`. The defined `theme` object is then applied globally to the application using the `ThemeProvider` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n  mode: 'light',\n});\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>{/* ... */}</ThemeProvider>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using Overlay Component in React Native Elements\nDESCRIPTION: This example demonstrates how to implement and toggle an Overlay component in a React Native application. It uses useState hook to manage visibility state and includes a button to toggle the overlay display.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/overlay.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay } from 'react-native-elements';\n\nconst OverlayExample = () => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleOverlay = () => {\n    setVisible(!visible);\n  };\n\n  return (\n    <View>\n      <Button title=\"Open Overlay\" onPress={toggleOverlay} />\n\n      <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n        <Text>Hello from Overlay!</Text>\n      </Overlay>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ThemeProvider from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the ThemeProvider component from the @rneui/themed package. ThemeProvider enables usage of custom or default themes throughout a React Native application. The code is essential as a first step for integrating theming functionality and requires the @rneui/themed dependency.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Referencing the ListItem Swipeable Theme Key (JavaScript)\nDESCRIPTION: This example shows the theme key string 'ListItemSwipeable', which is used when customizing the theme through ThemeProvider for ListItem Swipeable components in React Native Elements. The theme key serves as a unique identifier for overriding styles and behaviors of the swipeable list item in your application's theme configuration. This does not require dependencies other than the theme provider setup.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Swipeable.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemSwipeable\n```\n\n----------------------------------------\n\nTITLE: Displaying Different Avatar Sizes with TypeScript\nDESCRIPTION: Illustrates how to render rounded Avatars in various predefined sizes (24, 32, 48) using the `size` prop. Each avatar uses the same icon and background color, arranged horizontally in a Stack.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Avatar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={24}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={48}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Creating and Referencing an Input Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a React ref with React.createRef() and attach it to the Input component using the ref prop. This setup is required for directly accessing imperative methods (like focus, blur, etc.) from the Input API. Requires React and @rneui/themed dependencies. The ref can be accessed via input.current in functional or class components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Merging Theme and Local Styles as Arrays - React Native Elements - JSX\nDESCRIPTION: Shows correct use of arrays for both theme style and local style in React Native Elements, which is required for ThemeProvider to merge them without type conflicts. Dependencies are identicalâ€”using react-native-elements. Both the theme entry and the prop must be arrays of style objects, enabling React Native's style resolution logic when arrays are used for styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/4.pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles with ThemeProvider in JSX\nDESCRIPTION: Illustrates setting up `ThemeProvider` from React Native Elements to apply consistent styling across multiple component instances. Defines a `theme` object to set default props (e.g., `raised: true` for all `Button`s) within the provider's scope, leveraging React's Context API.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    raised: true,\n  },\n};\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n      <Button title=\"My 2nd Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements v4 Packages\nDESCRIPTION: This code block shows how to install the new packages for React Native Elements v4 using npm or yarn. It also includes an option to create an alias for easier migration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base @rneui/themed\n\n# or with yarn\nyarn add @rneui/base @rneui/themed\n\n# Creating an alias\nyarn add react-native-elements@npm:@rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to import the `Card` component from the `@rneui/themed` library, which is necessary to use the `Card.FeaturedTitle` sub-component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Adding Pressable Props to ButtonGroup in React Native Elements v4\nDESCRIPTION: This snippet shows how to add Pressable-specific props to the ButtonGroup component using the new pressableProps API in React Native Elements v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  <ButtonGroup\n+   pressableProps={{android_ripple:{radius:2}}}\n  />\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Values using ThemeConsumer and Render Props (TypeScript)\nDESCRIPTION: Shows how to use the `ThemeConsumer` component from `@rneui/themed` to access the current theme object via render props. This allows applying theme values (like `theme.colors.primary`) directly to standard React Native components like `Text`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/0.index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Documentation Page Imports\nDESCRIPTION: Import statements for documentation page components using Docusaurus tabs and custom usage component\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Badge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport Usage from \"../component_usage/Badge.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Applying Array Styles with ThemeProvider in React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet illustrates using array-based styles for both the theme and the local component style in React Native Elements. The ThemeProvider merges the 'containerStyle' arrays, supporting the application of multiple style objects. Requires React Native and react-native-elements; ensures that the Button component's container merges the margin and background color styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on a React Native SearchBar Instance\nDESCRIPTION: This JavaScript code shows how to invoke methods like `focus()`, `blur()`, `clear()`, and `cancel()` on a `SearchBar` instance that has been previously referenced (e.g., via `this.search`). The `cancel()` method is noted as only being available when the `platform` prop is explicitly set to \"ios\" or \"android\". It depends on having a valid reference to the SearchBar component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Values in Custom Components with withTheme HOC (JSX)\nDESCRIPTION: Demonstrates using the `withTheme` Higher-Order Component (HOC) from `react-native-elements` to inject theme-related props (`theme`, `updateTheme`, `replaceTheme`) into a custom component. This allows the component (`MyComponent`) to access and use theme values, such as `theme.colors.primary`, for styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { withTheme } from 'react-native-elements';\n\nfunction MyComponent(props) {\n  const { theme, updateTheme, replaceTheme } = props;\n  return <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n}\n\nexport default withTheme(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Using Imperative Methods on Input Ref - React Native Elements (JavaScript)\nDESCRIPTION: This snippet illustrates how to call various imperative methods (focus, blur, clear, isFocused, setNativeProps, shake) on a React Native Elements Input component via a ref. The ref must point to a rendered Input component, which requires having attached it using React.createRef as shown earlier. The main functions include programmatically controlling input state and feedback for enhanced interactivity (e.g., auto-focusing, clearing, error shake animation). Inputs are method calls on the ref, outputs are the corresponding Input component behaviors; the snippet assumes the ref is correctly attached and Input is mounted.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/input.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ninput.current.focus();\\ninput.current.blur();\\ninput.current.clear();\\ninput.current.isFocused();\\ninput.current.setNativeProps({ value: 'hello' });\\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements via Yarn\nDESCRIPTION: Command to install the stable version of React Native Elements using Yarn package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Web-Compatible Modal with Dialog Component - React Native Elements (JSX)\nDESCRIPTION: This code snippet demonstrates how to import a web-compatible Modal component ('modal-react-native-web') and provide it to the Dialog component's ModalComponent prop. This approach is necessary on web platforms because React Native's Modal component is not yet implemented in react-native-web. The setup ensures that dialogs render correctly in React Native Web environments by allowing developers to specify a substitute Modal implementation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n<Dialog ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Docusaurus Page Metadata in Markdown\nDESCRIPTION: Specifies the required YAML frontmatter for a new component documentation file (.md) within the Docusaurus framework used by the project. This metadata includes a unique `id` for referencing the page (e.g., in sidebars) and the `title` to be displayed for the documentation page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: my-component\ntitle: My Component\n---\n```\n\n----------------------------------------\n\nTITLE: Importing the Card Component in React Native Elements\nDESCRIPTION: Demonstrates the necessary import statement to use the `Card` component from the `@rneui/themed` library within a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Copying Missing libfishhook.a for WebSocket - Shell - iOS\nDESCRIPTION: This snippet uses the cp command to copy the built 'libfishhook.a' static library to the destination required by React Native's WebSocket implementation. Execute this command in the project root or suitable relative path so that both source and destination exist. It resolves build failures caused by missing or misplaced libraries after the main build process; ensure the source file exists before running.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ cp ios/build/Build/Products/Debug-iphonesimulator/libfishhook.a node_modules/react-native/Libraries/WebSocket\n```\n\n----------------------------------------\n\nTITLE: Wrapping App in SafeAreaProvider - React Native (JavaScript)\nDESCRIPTION: This snippet demonstrates how to wrap your root component with SafeAreaProvider from react-native-safe-area-context. This ensures that all child components are aware of safe-area constraints on devices. Required to avoid layout issues on devices with special screen features. The App component returns JSX with SafeAreaProvider as the top-level wrapper.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/getting_started.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component Dependencies\nDESCRIPTION: Import statements for the Icon component documentation page, including tabs components and usage documentation\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Icon.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots with NPM - Bash\nDESCRIPTION: This snippet provides the command to update Jest snapshot files using NPM as the package manager. Developers use 'npm run test -u' to regenerate or update snapshot files after making intentional component changes. Requires NPM and project test scripts; It will update all snapshots tracked in Jest.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements\nDESCRIPTION: Demonstrates how to import the Card component from React Native Elements themed package. This import is required before using the Card.Image subcomponent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Card.Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component Dependencies\nDESCRIPTION: Import statements showing required dependencies for the Switch component documentation, including theme tabs and React Native Elements imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Switch.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Switch Usage Examples with MDX Component in JSX\nDESCRIPTION: Renders the usage examples for the Switch component by embedding an imported MDX component named 'Usage'. This component is expected to be defined in '../component_usage/Switch.mdx' and contain the actual code examples and demonstrations.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for react-app-rewired (Diff)\nDESCRIPTION: Shows the necessary changes in the `scripts` section of `package.json`. It replaces `react-scripts` with `react-app-rewired` for the `start`, `build`, and `test` commands to apply the custom build configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test\",\n+   \"test\": \"react-app-rewired test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements\nDESCRIPTION: Commands to install React Native Elements in a project using either yarn or npm.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/example/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Using yarn\nyarn add react-native-elements\n\n# Using npm\nnpm install react-native-elements --save\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component Dependencies\nDESCRIPTION: Import statements for the Image component documentation showing required dependencies from React Native Elements and documentation tools.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Image.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Using CheckBox with Labels in TypeScript\nDESCRIPTION: Shows how to add a text label to a CheckBox component using the 'title' prop. It also demonstrates a disabled checkbox with a label.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/CheckBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <CheckBox checked title=\"Label\" />\n  <CheckBox checked disabled title=\"Label\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: Shows how to import the Card component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Updating Tooltip Component in React Native Elements v4\nDESCRIPTION: This diff shows how to update the Tooltip component to use the new stateless approach with visible, onOpen, and onClose props in React Native Elements v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  <Tooltip\n+   visible={open}\n+   onOpen={() => {\n+      setOpen(true);\n+   }}\n+   onClose={() => {\n+      setOpen(false);\n+   }}\n    popover=\"Hey All\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing Tile Component in React Native Elements\nDESCRIPTION: Shows how to import the Tile component from the React Native Elements library. This is the first step to using the Tile component in your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tile } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Container and StatusBar - React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates advanced customization with containerStyle, status bar settings, and component substitution for the header sections. Props include statusBarProps, barStyle, component assignments and a custom containerStyle for header layout and background color. This setup allows for deep UI adjustments beyond the content, affecting how the header integrates with the broader app bar and status bar. External dependencies may include custom components and react-native-status-bar.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/header.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  statusBarProps={{ barStyle: 'light-content' }}\n  barStyle=\"light-content\" // or directly\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  containerStyle={{\n    backgroundColor: '#3D6DCC',\n    justifyContent: 'space-around',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with External Props in JSX\nDESCRIPTION: Illustrates the highest style precedence: external styles applied via component props. The `titleStyle` prop directly on the `Button` sets the color to 'pink', overriding both the internal default color and the 'red' color defined in the `theme`. External props always take precedence.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the use-theme hook in React Native Elements\nDESCRIPTION: This example shows how to use the use-theme hook to access and update the current theme. It demonstrates accessing theme colors and updating the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/1.themeprovider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\n\nfunction Demo() {\n  const { theme, updateTheme } = useTheme();\n  return (\n    <View style={{ background: theme.colors.primary }}>\n      <Button onPress={() => updateTheme({ colors: { primary: 'red' } })} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Button Component in React Native\nDESCRIPTION: Example of how to import and use a Button component from React Native Elements in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/packages/themed/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '@rneui/themed';\n\n<Button />;\n```\n\n----------------------------------------\n\nTITLE: Handling Errors and Edge Cases in React Native Component\nDESCRIPTION: This snippet demonstrates error handling and dealing with edge cases in the CommitList component of the React Native app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderContent = () => (\n  this.props.loading ?\n    <ActivityIndicator color='#87ceeb' /> :\n    this.renderFlatList()\n)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderFlatList = () => (\n  this.props.error ?\n    <Text h4>Error: {this.props.data.message || 'ðŸ˜•'}</Text> :\n    <FlatList ... />\n)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderLeftElement = (item) => {\n  const initials = item.commit.author.name.match(/\\b\\w/g) || [];\n\n  return (\n    <View style={leftElementStyle}>\n      <Avatar\n        title={((initials.shift() || '') + (initials.pop() || ''))}\n        source={{uri: (item.author && item.author.avatar_url) || undefined}}\n        ...\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SearchBar Component from React Native Elements\nDESCRIPTION: Shows how to import the SearchBar component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchBar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Configuring react-app-rewired for RNE Transpilation (JavaScript)\nDESCRIPTION: Defines the `config-overrides.js` file used by `react-app-rewired`. It adds the `@babel/plugin-proposal-class-properties` Babel plugin and configures `babel-loader` to include and transpile specific RNE and related packages from `node_modules`, which are typically excluded by Create React App.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Button Colors Example in React Native Elements\nDESCRIPTION: Demonstrates how to apply different color themes to buttons using the color prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button>Primary</Button>\n  <Button color=\"secondary\">Secondary</Button>\n  <Button color=\"warning\">Warning</Button>\n  <Button color=\"error\">Error</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Components in Header Props with JavaScript/JSX\nDESCRIPTION: Illustrates how to integrate custom React components (`MyCustomLeftComponent`, `MyCustomCenterComponent`, `MyCustomRightComponent`) into the React Native Elements Header by passing them directly as values to the `leftComponent`, `centerComponent`, and `rightComponent` props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/header.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={<MyCustomCenterComponent />}\n  rightComponent={<MyCustomRightComponent />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Button Type Prop Usage in React Native Elements 1.0\nDESCRIPTION: Examples showing how to use the new 'type' prop in Button component to replace the deprecated 'transparent' and 'outline' props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2019-01-27-1.0-release.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Transparent\n<Button type=\"clear\" />\n\n// Outline\n<Button type=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: Aligning Header Center Component to the Left in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet shows how to align the center component of the Header to the left side using the `placement` prop set to 'left'. Default components are configured using object props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/header.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  placement=\"left\"\n  leftComponent={{ icon: 'menu', color: '#fff' }}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  rightComponent={{ icon: 'home', color: '#fff' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Tab component from the @rneui/themed library in a TypeScript React Native project. This import is necessary to use the Tab and its child Tab.Item components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Tab.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Including Icons in ListItems using React Native Elements (TypeScript/React Native)\nDESCRIPTION: This snippet shows how to add Material Community icons to ListItems using the Icon component, along with content and a chevron for navigational affordance. Each ListItem includes an Icon, ListItem.Content, ListItem.Title, and ListItem.Chevron subcomponents. Dependencies: '@rneui/themed', material-community icons. Inputs: icon settings and text. Outputs: interactive list rows with icons and chevrons. Typical use: menu or actionable item lists.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<>\n  <ListItem>\n    <Icon name=\"inbox\" type=\"material-community\" color=\"grey\" />\n    <ListItem.Content>\n      <ListItem.Title>Inbox</ListItem.Title>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n  <ListItem>\n    <Icon name=\"trash-can-outline\" type=\"material-community\" color=\"grey\" />\n    <ListItem.Content>\n      <ListItem.Title>Trash</ListItem.Title>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Object Interface in React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript interface defines the expected structure of the theme object for the React Native Elements library, particularly its colors nomenclature including nested platform keys (ios, android, web). The interface ensures type-safety and clarity for developers extending the theme in their applications. It lists both generic and platform-specific color properties but leaves value types untyped for flexibility; implementers should specify color value types as needed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/2.theme object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    background;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Tab from React Native Elements (TypeScript)\nDESCRIPTION: Shows how to import the Tab component from the '@rneui/themed' package in a TypeScript React Native project. This line should be placed at the top of your file to gain access to the Tab UI component. No external dependencies beyond react-native and @rneui/themed are required. The import is necessary before usage in a component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tab } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Button Variants in React Native Elements\nDESCRIPTION: Shows different button variants including solid, outline, and clear types using the type prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button title=\"Solid\" />\n  <Button title=\"Outline\" type=\"outline\" />\n  <Button title=\"Clear\" type=\"clear\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Shape Variants in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates rendering two types of skeleton placeholders: a rectangle and a circle. The first <Skeleton> sets width and height for a rectangle, while the second uses the 'circle' prop for a circular skeleton. Both usage examples can be copied directly into a React Native Elements project supporting TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Skeleton width={120} height={40} />\n<Skeleton circle width={40} height={40} />\n```\n\n----------------------------------------\n\nTITLE: Button Sizes in React Native Elements\nDESCRIPTION: Shows how to create buttons in different sizes (small, medium, and large) using the size prop. This affects the button's padding and overall dimensions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button size=\"sm\">Small</Button>\n  <Button size=\"md\">Medium</Button>\n  <Button size=\"lg\">Large</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Custom Header Component Implementation with Navigation and Icons\nDESCRIPTION: Complete implementation of a custom Header component with left menu icon, center title, and right navigation buttons. Includes TypeScript types, styling, and integration with SafeAreaProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {\nStyleSheet,\nView,\nText,\nLinking,\nStyleProp,\nTextStyle,\nViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from '@rneui/themed';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\ntitle: string;\nview?: string;\n};\n\ntype ParamList = {\nDetail: {\n  openDrawer: void;\n};\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\nconst docsNavigate = () => {\n  Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n};\n\nconst playgroundNavigate = () => {\n  Linking.openURL(`https://@rneui/themed.js.org/#/${props.view}`);\n};\n\nreturn (\n  <SafeAreaProvider>\n    <HeaderRNE\n      leftComponent={{\n        icon: 'menu',\n        color: '#fff',\n      }}\n      rightComponent={\n          <View style={styles.headerRight}>\n            <TouchableOpacity onPress={docsNavigate}>\n              <Icon name=\"description\" color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={playgroundNavigate}\n            >\n              <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n            </TouchableOpacity>\n          </View>\n      }\n      centerComponent={{ text: 'Header', style: styles.heading }}\n    />\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nheaderContainer: {\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#397af8',\n  marginBottom: 20,\n  width: '100%',\n  paddingVertical: 15,\n},\nheading: {\n  color: 'white',\n  fontSize: 22,\n  fontWeight: 'bold',\n},\nheaderRight: {\n  display: 'flex',\n  flexDirection: 'row',\n  marginTop: 5,\n},\nsubheaderText: {\n  color: 'white',\n  fontSize: 16,\n  fontWeight: 'bold',\n},\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme with Extended Properties in React Native Elements - TypeScript\nDESCRIPTION: This snippet shows how to use the extended theme typings from the previous declaration merging to implement a custom theme via the `createTheme` helper in React Native Elements. The provided function ensures the `Text` style adapts to the new `bold` property. Dependencies include the previous module augmentation and the `createTheme` function from `@rneui/themed`. The key parameter is `props.bold`, which controls the font weight in the themed style for the `Text` component. The result is a theme configuration object with custom dynamic styling support based on extended properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Tab Item in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use the Tab.Item component from React Native Elements. It shows how to set the title and conditionally style the button based on its active state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab.Item\n  title=\"Tab 1\"\n  buttonStyle={(active) => {\n    backgroundColor: active ? \"red\" : \"blue\";\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Referencing the Theme Key for Dialog in React Native Elements (JavaScript)\nDESCRIPTION: This snippet provides the theme key string used for customizing the Dialog component's appearance through the theme provider in @rneui/themed. No external dependencies are needed to use this snippet, but theming must be configured in the application. It works as an identifier for theming and customization, taking no inputs and producing no runtime outputsâ€”it is used for configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDialog\n```\n\n----------------------------------------\n\nTITLE: Theme Key Configuration - React Native Elements\nDESCRIPTION: Specifies the theme key used for Avatar.Accessory component customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Avatar.Accessory.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAvatarAccessory\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Code snippet showing how to import the ListItem component from '@rneui/themed' package, which can be used to access the ListItem.ButtonGroup functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Definitions for React Native Elements Theme\nDESCRIPTION: This snippet demonstrates how to extend the default React Native Elements theme types using TypeScript's declaration merging. It adds custom properties to the Text and Colors interfaces, and defines a RecursivePartial type for nested theme objects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@rneui/themed';\n\ntype RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface Colors {\n    background: string;\n    border: string;\n    text: string;\n    altText: string;\n    danger: string;\n  }\n\n  export interface FullTheme {\n    colors: RecursivePartial<Colors>;\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog with Modal on Web Platform in React Native\nDESCRIPTION: Example demonstrating how to use a Modal component with the Dialog component for web platform compatibility, as Modal is not implemented in react-native-web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Dialog ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Function Signature of styled in @rneui/themed\nDESCRIPTION: Displays the TypeScript function signature for the `styled` function. It takes a base component (`Component`) and optional generic props (`<Props>`), returning a function that accepts either a static style object (`Styles`) or a function receiving the theme and props to define styles, ultimately creating a new styled component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nstyled(Component)<Props>(styles: Styles | ((theme, props) => Styles))\n```\n\n----------------------------------------\n\nTITLE: Customizing Heading Styles with fontFamily and fontWeight in React Native Elements (tsx)\nDESCRIPTION: This snippet defines custom style objects (`h1Style`, `h2Style`, `h3Style`) for heading elements, likely within a theme configuration for `react-native-elements`. It specifies custom `fontFamily` and `fontWeight` properties, illustrating how to style text components. Note the surrounding text's emphasis on Android requiring `fontWeight` values to precisely match the weights available in the specified font file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n    h1Style: {\n      fontFamily: 'Nunito-SemiBold',\n      fontWeight: '300',\n    },\n    h2Style: {\n      fontFamily: 'Nunito-Regular',\n      fontWeight: '100',\n    },\n    h3Style: {\n      fontFamily: 'Nunito-Bold',\n      fontWeight: '500',\n    },\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependency: react-native-safe-area-context - Bash\nDESCRIPTION: Shows how to install react-native-safe-area-context for safe area handling in React Native projects. Applicable for both npm and yarn users. Includes a linking command for manual setup, although linking is automatic in React Native 0.60+.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for CardFeaturedTitle Customization\nDESCRIPTION: This snippet shows the theme key `CardFeaturedTitle` used for customizing the appearance of the Card's featured title through the React Native Elements ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCardFeaturedTitle\n```\n\n----------------------------------------\n\nTITLE: App Root Theming Example - React Native Elements (jsx)\nDESCRIPTION: Provides a full example of setting up ThemeProvider and custom theme at the root level with createTheme, showcasing both light and dark mode definitions. Requires @rneui/themed package. 'App' component will apply theming to all child components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\\n\\nconst myTheme = createTheme({\\n  lightColors: {\\n    primary: '#f2f2f2',\\n  },\\n  darkColors: {\\n    primary: '#121212',\\n  },\\n  mode: 'dark',\\n});\\n\\nconst App = () => {\\n  return (\\n    <ThemeProvider theme={myTheme}>\\n      <Button title=\"My Button\" />\\n    </ThemeProvider>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo Project with Stable RNEUI Template\nDESCRIPTION: Creates a new Expo project using the Expo CLI, pre-configured with the stable version of the React Native Elements template.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider at App Root in React Native Elements v4\nDESCRIPTION: This example demonstrates how to implement ThemeProvider at the root of the application using React Native Elements v4. It includes creating a custom theme and applying it to the entire app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#f2f2f2',\n  },\n  darkColors: {\n    primary: '#121212',\n  },\n  mode: 'dark',\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components with Correct Spelling - React Native Elements (JSX)\nDESCRIPTION: This JSX snippet illustrates both an incorrect and a correct way of importing a component (ListItem) from the '@rneui/themed' package. The incorrect import demonstrates a capitalization error, while the correct import uses the right case-sensitive identifier as expected by JavaScript module systems. Developers must ensure consistent capitalization when importing React Native Elements components to avoid 'Element type is invalid' errors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\\nimport { Listitem } from '@rneui/themed';\\n\\n// Correct\\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Theme Properties in a Component using useTheme (@rneui/themed)\nDESCRIPTION: Illustrates accessing custom properties previously added to the theme's type definition and instance (e.g., `myCustomProperty`) within a React component. It utilizes the `useTheme` hook from `@rneui/themed` to get the current theme object and then accesses the custom property for rendering.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text>{theme.myCustomProperty}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the Rating Component in React Native Elements (JavaScript/TypeScript)\nDESCRIPTION: Imports the `Rating` component from the `@rneui/themed` package. This step is necessary to make the component available for use within a React Native application utilizing the RNE UI toolkit.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rating } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements for React Native CLI via Yarn or NPM in Shell\nDESCRIPTION: This snippet provides the commands required to install the React Native Elements UI kit for projects bootstrapped with react-native init (using React Native CLI). The shell commands can use either yarn or npm; the --save flag persists the dependency in package.json. Node.js and a working React Native CLI project are required. These commands add react-native-elements to the project's dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-elements\n# or with npm\nnpm i react-native-elements --save\n```\n\n----------------------------------------\n\nTITLE: Using Tab and Tab.Item for Tabbed Layout (React Native Elements, TypeScript/JSX)\nDESCRIPTION: This code snippet provides an example of how to define a simple tabbed layout using the Tab and Tab.Item components from React Native Elements. The 'value' prop determines the currently selected tab (here, index 0 is selected), and the 'variant' prop customizes the appearance. Each Tab.Item renders the label for an individual tab. No external dependencies are needed beyond @rneui/themed. The expected input is a list of Tab.Item children, and output is the rendered tabbed UI; limitations include no built-in navigation for complex scenarios.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Tab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Tab value={0} variant=\"primary\">\n  <Tab.Item>Tab 1</Tab.Item>\n  <Tab.Item>Tab 2</Tab.Item>\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons with Yarn (Bash)\nDESCRIPTION: Adds the `react-native-vector-icons` library, a common dependency for React Native Elements icons, to the project using Yarn. This step is crucial for resolving font-related errors when icons are not displaying correctly in projects initialized with `react-native-init`. Requires Yarn to be installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing the Rating Component from @rneui/themed in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Rating component from the '@rneui/themed' library for use in a React Native project. This import makes the component available for rendering within your application's UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rating } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements\nDESCRIPTION: Shows how to import the Card component from the themed React Native Elements package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Assigning a Ref to the SearchBar Component (JavaScript)\nDESCRIPTION: Illustrates how to obtain a reference to the SearchBar component instance using the `ref` prop provided by React. This allows direct interaction with the component's methods.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/searchbar.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing SearchBar with React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the SearchBar component from the @rneui/themed package using TypeScript, which is necessary to include and utilize the component within a React Native project. The import statement assumes that the @rneui/themed package is already installed as a project dependency. This pattern is essential before rendering and customizing the SearchBar UI element within application components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchBar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Swipeable and Related Components in React Native Elements (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the Tabs, TabItem, and ListItem.Swipeable-related documentation components required for implementing or documenting the ListItem.Swipeable feature in a React Native project using React Native Elements. It also imports the Usage component for usage examples. Dependencies include the '@theme' package (for Tabs and TabItem) and 'react-native-elements'. The imported components are prerequisites for setting up swipeable list items and displaying usage documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/ListItem.Swipeable.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Testing Documentation Changes with Yarn\nDESCRIPTION: Commands to test changes in the documentation auto-generation process. This requires navigating to the website directory first and then running the test command.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2021-08-12-auto-generation-of-docs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd website\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Library (JavaScript)\nDESCRIPTION: An empty import statement for the `react-native-elements` library. In this context, it likely serves as a placeholder or ensures the library is recognized by documentation build tools, rather than importing specific components for direct use in this snippet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.CheckBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Card Featured Subtitle Theme Key in React Native Elements - JavaScript\nDESCRIPTION: Indicates the theme key 'CardFeaturedSubtitle' used for customizing the appearance or behavior of the Card.FeaturedSubtitle component via theme providers in React Native Elements. This key is intended for use with the library's theming system and requires familiarity with theme customization. There is no explicit input or output as it serves as an identifier for styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nCardFeaturedSubtitle\n```\n\n----------------------------------------\n\nTITLE: Installing RNE Web Dependencies (Bash)\nDESCRIPTION: Installs the core libraries required to use React Native Elements on the web: `react-native-elements` itself, `react-native-web` for rendering React Native components on the web, and `react-native-vector-icons` for icon support. This is the first step after creating a new Create React App project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/web_usage.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-elements react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context via NPM - Bash\nDESCRIPTION: Installs the react-native-safe-area-context dependency via npm. Required if your project does not already include this dependency. It helps handle safe area boundaries on devices.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge Version (Yarn)\nDESCRIPTION: Installs the bleeding edge version of React Native Elements using Yarn. This command adds the latest development versions of both packages to your project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup from @rneui/themed (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `ButtonGroup` component from the `@rneui/themed` library. This import is necessary to use the ButtonGroup component within your React Native application built with TypeScript/TSX.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ButtonGroup } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing LinearProgress Component in React Native Elements\nDESCRIPTION: Shows how to import the LinearProgress component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinearProgress } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Badge` component from the `@rneui/themed` package in a TypeScript-based React Native project. This import is necessary to use the Badge component within your application screens or components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements (TSX)\nDESCRIPTION: This code snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package. Importing `ListItem` is necessary to utilize its sub-components like `ListItem.Subtitle` in a React Native application using React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.Subtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { ListItem } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Using useThemeMode to Control Theme Mode Dynamically - TypeScript\nDESCRIPTION: Demonstrates the useThemeMode hook, which provides the current theme mode (light or dark) and allows updating it with setMode. The sample component updates the theme mode to 'dark' when the Button is pressed. Requires '@rneui/themed' and integration in a React component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThemeMode } from '@rneui/themed';\n\nfunction Demo() {\n  const { mode, setMode } = useThemeMode();\n\n  return <Button onPress={() => setMode('dark')} title={mode} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.CheckBox Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the ListItem.CheckBox component from React Native Elements. It also shows the import of Tabs and TabItem components from the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component via Composition in React Native Elements (TSX)\nDESCRIPTION: Demonstrates creating a reusable custom component (`RaisedButton`) by composing the base `Button` component from `@rneui/themed`. This approach sets default props (`raised`) while allowing further customization through passed props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: Shows how to import the Card component from the React Native Elements themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: ListItem.Swipeable Props Interface\nDESCRIPTION: Type definitions for the Swipeable variant of ListItem, including props for left/right swipe content and dimensions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/listitem.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListItemSwipeableProps {\n  leftContent?: ReactNode;\n  rightContent?: ReactNode;\n  leftStyle?: ViewStyle;\n  rightStyle?: ViewStyle;\n  leftWidth?: number; // Default: ScreenWidth/3\n  rightWidth?: number; // Default: ScreenWidth/3\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install development dependencies needed for babel configuration and create-react-app customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/web_usage.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Avatars using FlatList in React Native\nDESCRIPTION: This snippet demonstrates how to use React Native's FlatList component with ListItems and Avatars from React Native Elements. It efficiently renders a list of users with their avatars and information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider>\n    <Avatar source={{uri: item.avatar_url}} />\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Avatar Placeholder Props - diff\nDESCRIPTION: Details the migration away from 'placeholderStyle' and 'renderPlaceholderContent' to the new 'renderCustomContent' prop for the Avatar component. This simplifies customizing avatar placeholders. Replace instances accordingly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n  <Avatar\\n-   renderPlaceholderContent={\\n-       <Text testID=\"my-custom-placeholder\">Hey</Text>\\n-     }\\n-   placeholderStyle = {{backgroundColor:\"red\"}}\\n+   renderCustomContent={<Text>Hey</Text>}\\n+  />\n```\n\n----------------------------------------\n\nTITLE: Creating Featured Tile with Icon in React Native Elements\nDESCRIPTION: Shows how to implement a featured tile with an icon overlay. Uses the font-awesome icon set for the play-circle icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/tile.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tile } from 'react-native-elements';\n\n<Tile\n  imageSrc={require('./img/path')}\n  icon={{ name: 'play-circle', type: 'font-awesome' }}\n  featured\n/>;\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component in React Native\nDESCRIPTION: Shows how to import the ButtonGroup component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ButtonGroup } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating Gradient ListItems with Scale Feedback in React Native\nDESCRIPTION: This snippet demonstrates how to create a ListItem with a linear gradient background and scale feedback on touch. It uses react-native-touchable-scale and react-native-linear-gradient libraries.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n\n----------------------------------------\n\nTITLE: Default Theme Object Structure in React Native Elements (TypeScript)\nDESCRIPTION: This interface represents the default structure of the theme object in React Native Elements, showing nested platform color objects for iOS, Android, and web. It is used for reference when extending or merging custom themes. The code is a type/interface only and has no runtime output. Inputs are not applicable, and output is type safety for theme structure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Skeleton Shape Variants with React Native Elements (TypeScript)\nDESCRIPTION: These snippets illustrate rendering of Skeleton placeholder components with different shapes (rectangle and circle) in React Native using TypeScript. The first example creates a rectangular skeleton with specified width and height, while the second sets the circle prop to produce a circular skeleton. Both take numeric width and height parameters to control the size of the placeholder displayed before content loads.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Skeleton width={120} height={40} />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Skeleton circle width={40} height={40} />\n```\n\n----------------------------------------\n\nTITLE: Using LinearGradient with Header - React Native Elements - JavaScript/JSX\nDESCRIPTION: This code shows how to use a LinearGradient background in the Header component by setting ViewComponent and linearGradientProps. It requires both react-native-elements and react-native-linear-gradient, as well as proper installation and linking of the gradient library (unless using Expo). Props include colors and start/end coordinates for the gradient. Inputs are the ViewComponent prop set to LinearGradient and linearGradientProps for gradient configuration; output is a Header with a linear gradient background.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/header.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Fractional Ratings in React Native (JavaScript/JSX)\nDESCRIPTION: Shows how to enable and display ratings with decimal values using the `Rating` component. The `fractions` prop is set to determine the number of decimal places (e.g., `fractions=\"{1}\"` for one decimal place). The `startingValue` prop can be set to a floating-point number, and `showRating` displays the numeric value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/rating.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Default Component Props in React Native Elements\nDESCRIPTION: This snippet shows how to extend the props of a default React Native Elements component (Text) and its ComponentTheme using TypeScript module declaration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface ComponentTheme {\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Themed Component in React Native Elements\nDESCRIPTION: Demonstrates how to create a custom component that uses the React Native Elements theme. This example shows how to use the withTheme HOC and declare the component in the ComponentTheme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme } from '@rneui/themed';\n\ntype CustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nconst CustomComponent = (props: CustomComponentProps) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n};\n\nexport default withTheme<CustomComponentProps>(CustomComponent, 'ComponentKey');\n\ndeclare module '@rneui/themed' {\n  export interface ComponentTheme {\n    ComponentKey: Partial<CustomComponentProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Component Precedence in Header - React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates the precedence of children over props in the Header component. Even with leftComponent prop defined, providing custom left content as a child (MyCustomLeftComponent) supersedes the prop, dictating what is rendered. The right and center components are likewise provided as children. Usage of both props and children showcases resolution behavior for developers. All custom components must be defined prior to use.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/header.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<Header leftComponent={{ icon: 'menu' }}>\n  <MyCustomLeftComponent />\n  <MyCustomCenterComponent />\n  <MyCustomRightComponent />\n</Header>\n```\n\n----------------------------------------\n\nTITLE: Referencing Overlay Theme Key - JavaScript\nDESCRIPTION: This snippet shows how the 'Overlay' theme key is represented as a string. This is typically used when customizing or referencing theme attributes within React Native Elements. The string should be used directly as the theme key in theme provider customization settings.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nOverlay\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements (tsx)\nDESCRIPTION: This snippet shows how to import the `ListItem` component from the `@rneui/themed` package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Matching Array Styles in Theme and Local Props (JSX)\nDESCRIPTION: This example demonstrates another valid scenario for style merging in React Native Elements theming. Here, both the `containerStyle` defined in the theme and the local `containerStyle` prop on the `Button` are provided as arrays containing style objects. Since the types (arrays) match, the merging works as expected.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Rating Component Type Definition\nDESCRIPTION: TypeScript type definitions showing the available props for the Rating component, including customization options for appearance, behavior, and event handling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Props = {\n  fractions?: any;\n  imageSize?: number;\n  jumpValue?: number;\n  minValue?: number;\n  onFinishRating?: Function;\n  onStartRating?: Function;\n  onSwipeRating?: (number: any) => void;\n  ratingBackgroundColor?: string;\n  ratingColor?: string;\n  ratingCount?: number;\n  ratingImage?: ReactNode;\n  ratingTextColor?: string;\n  readonly?: boolean;\n  showRating?: boolean;\n  showReadOnlyText?: boolean;\n  startingValue?: number;\n  style?: View Style;\n  tintColor?: string;\n  type?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements Themed Library (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Card component from the @rneui/themed package for use within a React Native (TypeScript) application. The Card component can be used for displaying various types of information in a styled card container. To use, ensure that @rneui/themed is installed as a project dependency. The imported Card can then be utilized within React components to structure information and actions. No additional parameters are needed for import, but the Card's props allow customization of its appearance and behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme with createTheme - React Native Elements (diff)\nDESCRIPTION: Demonstrates transitioning to the 'createTheme' helper for defining custom themes, including light and dark color schemes and theme mode. Replaces the old FullTheme object with a function-based theme generation. Requires importing from @rneui/themed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- const myTheme: FullTheme = {\\n+ const myTheme = createTheme({\\n-  colors: {\\n+  lightColors:{\\n     primary: '#f2f2f2',\\n   },\\n+  darkColors: {\\n+   primary: '#121212',\\n+  },\\n+  mode: 'dark',\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem Accordion in React Native Elements\nDESCRIPTION: This code demonstrates how to create an expandable accordion list item that can show or hide a list of sub-items. It uses state management to toggle the expanded status and renders child list items when expanded.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem.Accordion\n  content={\n    <>\n      <Icon name=\"place\" size={30} />\n      <ListItem.Content>\n        <ListItem.Title>List Accordion</ListItem.Title>\n      </ListItem.Content>\n    </>\n  }\n  isExpanded={expanded}\n  onPress={() => {\n    setExpanded(!expanded);\n  }}\n>\n  {list2.map((l, i) => (\n    <ListItem key={i} onPress={log} bottomDivider>\n      <Avatar title={l.name[0]} source={{ uri: l.avatar_url }} />\n      <ListItem.Content>\n        <ListItem.Title>{l.name}</ListItem.Title>\n        <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  ))}\n</ListItem.Accordion>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn for Web Support - Bash\nDESCRIPTION: Installs the necessary React Native Elements, react-native-web, and react-native-vector-icons packages using yarn. Required prior to setting up project overrides or customizations. Ensures essential UI and icon libraries are available for web integration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/web_usage.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-elements react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Button in App.js\nDESCRIPTION: Shows how to import and use a Button component from React Native Elements in the main App.js file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button } from 'react-native-elements';\n```\n\n----------------------------------------\n\nTITLE: Component Props-based Theming with createTheme - React Native Elements (jsx)\nDESCRIPTION: Shows how to define a theme property (Button) as a function to style based on passed props (e.g., type). Assumes @rneui/themed with createTheme imported. Adapted for customizing component style per input parameters.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme } from '@rneui/themed';\\n\\nconst myTheme = createTheme({\\n  Button: (buttonProps) => ({\\n    titleStyle: {\\n      color: buttonProps.type === 'solid' ? 'blue' : 'red',\\n    },\\n  }),\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref for React Native Elements Input in JavaScript\nDESCRIPTION: Demonstrates how to create a reference to the `Input` component using `React.createRef()` and assigning it via the `ref` prop. This allows programmatic access to the component's methods like focus, blur, clear, etc.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/vector-icons Dependency - Bash Shell\nDESCRIPTION: This snippet adds the @expo/vector-icons package with saving the dependency to package.json using yarn in Expo-managed apps. It is vital for icon support in React Native Elements when running under the Expo ecosystem.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Using `makeStyles` Hook for Themed and Prop-Based Styles (TypeScript/TSX)\nDESCRIPTION: Demonstrates the usage of `makeStyles` to create a `useStyles` hook. This hook generates styles that depend on the theme (e.g., `theme.colors.white`) and component props (`props.fullWidth`). The hook is then called within the `MyComponent` functional component, passing the component's props to retrieve the calculated styles which are applied to the `View` and `Text` elements. Requires `@rneui/themed` context provider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  fullWidth?: boolean;\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of LinearProgress Component in React Native Elements (JSX)\nDESCRIPTION: This JSX snippet demonstrates the basic rendering of the `LinearProgress` component. The `color=\"primary\"` prop is used to set the progress bar's color, likely using a predefined theme color. This component visually indicates an indeterminate ongoing process.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/linearProgress.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<LinearProgress color=\"primary\" />\n```\n\n----------------------------------------\n\nTITLE: Adjusting CheckBox Size in TypeScript\nDESCRIPTION: Demonstrates how to control the size of the CheckBox component using the 'size' prop, showing examples with sizes 18, 24, and 32.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/CheckBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <CheckBox checked size={18} />\n  <CheckBox checked size={24} />\n  <CheckBox checked size={32} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements in TypeScript\nDESCRIPTION: This snippet shows how to import the ListItem component from the @rneui/themed library using TypeScript syntax. It is a prerequisite for using the ListItem UI component in React Native projects that utilize React Native Elements. No additional configuration is required; simply install @rneui/themed and ensure your project uses TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons Peer Dependency with Yarn\nDESCRIPTION: Installs the react-native-vector-icons library using yarn. This is a required peer dependency for React Native Elements in standard React Native projects (not pre-installed like in Expo).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Identifying CheckBox Theme Key\nDESCRIPTION: Specifies the theme key 'CheckBox' used for customizing the appearance of all CheckBox components via a ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/CheckBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCheckBox\n```\n\n----------------------------------------\n\nTITLE: Importing ThemeProvider and Creating Custom Theme in React Native\nDESCRIPTION: This snippet shows how to import the ThemeProvider component from React Native Elements and create a custom theme object. The theme object defines colors and styles that will be applied throughout the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ThemeProvider } from '@rneui/themed';\n\nconst theme = {\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n  mode: 'light',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Project with Stable RNE Template using NPX\nDESCRIPTION: Uses npx (Node Package Execute) and Expo CLI to create a new Expo project pre-configured with the stable version of React Native Elements using the official template `@rneui/template`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app --template @rneui/template\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.Chevron Styling\nDESCRIPTION: Identifies the theme key (`ListItemChevron`) used for customizing the appearance of the `ListItem.Chevron` component via the `ThemeProvider` in react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Chevron.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nListItemChevron\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the React Native Elements themed package, which is required before using the ListItem.Accordion functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Passing Pressable Props via `pressableProps` in RNE (Diff)\nDESCRIPTION: Shows how to pass additional props supported by React Native's `Pressable` component (like `android_ripple`) to RNE components (e.g., `ButtonGroup`) using the dedicated `pressableProps` prop introduced in v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/migration-v4.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  <ButtonGroup\n+   pressableProps={{android_ripple:{radius:2}}}\n  />\n```\n\n----------------------------------------\n\nTITLE: Component Version Compatibility Example in React Native Elements (Markdown)\nDESCRIPTION: This snippet explains the version compatibility of different form components in React Native Elements, noting that FormInput is only available in v0.19.1 and below, while Input is available in v1.0.0-beta1 and higher.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nExample:\n\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons Package - Bash Shell\nDESCRIPTION: This snippet demonstrates how to add the react-native-vector-icons dependency using yarn. This package is required for custom icons in React Native Elements, and is especially relevant for projects not using Expo. The yarn add command should be executed in the project root.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Component for Web Platform\nDESCRIPTION: Shows how to implement a Modal component for web platform compatibility with React Native Elements Tooltip, since Modal is not implemented in react-native-web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Modal from 'modal-react-native-web';\n\n<Tooltip ModalComponent={Modal} ... />\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the Dialog component from the @rneui/themed package. The Dialog component is used to display informative popups or modal dialogs in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Avatar component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates the necessary import statement to use the `Card` component from the `@rneui/themed` library in a React Native project using TypeScript. This import is required to access the `Card` component and its subcomponents like `Card.FeaturedTitle`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme with Extended Text Component Properties - TypeScript\nDESCRIPTION: This code defines an RNE theme where the Text component's style changes depending on a custom 'bold' prop. The createTheme call returns a theme whose Text component style function checks the 'bold' value and sets the fontWeight accordingly. It presumes a prior augmentation of TextProps and helps enforce prop-driven theming for components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient with Header in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use LinearGradient with the Header component from React Native Elements. It requires the react-native-linear-gradient package to be installed and configured in the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Themes Dynamically - React Native Elements (TypeScript)\nDESCRIPTION: This code provides an example of updating the application theme at runtime by calling the 'updateTheme' function. It shows how to change primary color values on-the-fly, typically within a component's logic. Dependencies are @rneui/themed and an established ThemeProvider. The input is a partial theme object and the effect is an immediate update to theme-dependent styles; this function should be used within the correct context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/0.index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupdateTheme({\n  lightColors: {\n    primary: 'purple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TSX\nDESCRIPTION: Shows how to import the ListItem component from the '@rneui/themed' library. This import is necessary to use the ListItem and its sub-components within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: TabView Theme Key\nDESCRIPTION: This snippet shows the theme key ('TabView') used for customizing the TabView component's styles when using the ThemeProvider context provided by React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/TabView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTabView\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Theme Colors Configuration\nDESCRIPTION: Example showing how to configure platform-specific colors using Platform.select() for iOS and Android.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/2.theme object.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, lightColors, createTheme, ThemeProvider } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    ...Platform.select({\n      default: lightColors.platform.android,\n      ios: lightColors.platform.ios,\n    }),\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* This button's color will now be the default iOS / Android blue. */}\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Project with React Native Elements (Edge)\nDESCRIPTION: Creates a new Expo project using the bleeding edge React Native Elements template.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements - Bleeding Edge NPM\nDESCRIPTION: Command to install the latest development version directly from GitHub using NPM.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install https://github.com/react-native-elements/react-native-elements#dist\n```\n\n----------------------------------------\n\nTITLE: Importing CheckBox Component in React Native Elements\nDESCRIPTION: Shows how to import the CheckBox component from the themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CheckBox } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Slider from React Native Elements in TypeScript\nDESCRIPTION: Demonstrates how to import the Slider component from the @rneui/themed package in a TypeScript React Native project. This step is required before using the Slider in your component files. Ensure that @rneui/themed is installed as a dependency.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Slider } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: ListItem with Custom Subtitle View â€“ React Native Elements â€“ JavaScript\nDESCRIPTION: This code shows a ListItem where the subtitle prop is a custom View containing an image and styled text, allowing for complex UI composition like rating bars or time indicators. It requires react-native-elements, React Native's View, Image, Text, and StyleSheet components, and assumes assets are available at required paths. Expected input is static or dynamic props; output is a ListItem with custom-styled subtitle components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/listitem.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem } from 'react-native-elements'\n\nrender () {\n  return (\n    <ListItem\n      title='Limited supply! Its like digital gold!'\n      subtitle={\n        <View style={styles.subtitleView}>\n          <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n          <Text style={styles.ratingText}>5 months ago</Text>\n        </View>\n      }\n      leftAvatar={{ source: require('../images/avatar1.jpg') }}\n    />\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Component in React Native Elements\nDESCRIPTION: Shows how to import the Rating component from the @rneui/themed package for use in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rating } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab and TabView Components in React Native Elements\nDESCRIPTION: Demonstrates how to use Tab and TabView components together. The Tab component handles the navigation controls while TabView displays the corresponding content for each tab item.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/tab.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab value={index} onChange={setIndex}>\n  <Tab.Item title=\"recent\" />\n  <Tab.Item title=\"favorite\" />\n  <Tab.Item title=\"cart\" />\n</Tab>\n\n <TabView value={index} onChange={setIndex} >\n  <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\n    <Text h1>Recent</Text>\n  </TabView.Item>\n  <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\n    <Text h1>Favorite</Text>\n  </TabView.Item>\n  <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\n    <Text h1>Cart</Text>\n  </TabView.Item>\n</TabView>\n```\n\n----------------------------------------\n\nTITLE: Importing Header Component in React Native Elements\nDESCRIPTION: Shows how to import the Header component from the React Native Elements library. This is the first step in using the Header component in your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Avatar with Title Placeholder in List Items - react-native-elements - JavaScript\nDESCRIPTION: This code shows how to use the Avatar component as an initial placeholder in list items, combined with ListItem for structured layouts. It utilizes the 'title' prop as an initial, and 'source' for optional images, and nests the Avatar within ListItem along with content and a chevron. Dependencies are 'react-native-elements'; inputs include name strings and avatar URLs. Outputs are list rows combining avatars, tiles, and subtitles, providing a common pattern for contact or member lists.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/avatar.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar, ListItem } from 'react-native-elements';\n\n<ListItem>\n  <Avatar\n    title={name[0]}\n    source={{ uri: avatar_url }}\n  />\n  <ListItem.Content>\n    <ListItem.Title>{name}</ListItem.Title>\n    <ListItem.SubTitle>{role}</ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron/>\n/>;\n```\n\n----------------------------------------\n\nTITLE: Adding Background Color to Colors Object - diff\nDESCRIPTION: Displays how to add a 'background' color property to a colors configuration object for theming. This aids in new theme customization in v4. Ensure all components using the 'colors' object can access this new property.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst colors={\\n  primary: '#2e7d32',\\n  secondary: '#757575',\\n+ background: '#ffffff',\\n}\n```\n\n----------------------------------------\n\nTITLE: ListItem with Linear Gradient and Scale Feedback - React Native Elements JavaScript\nDESCRIPTION: This advanced example shows how to construct a ListItem with gradient backgrounds and animated press feedback using third-party libraries: react-native-linear-gradient for the ViewComponent, and react-native-touchable-scale for active scaling on press. Inputs include props for friction, tension, and gradient colors. Requires 'react-native-elements', 'react-native-linear-gradient', and 'react-native-touchable-scale' (non-expo environments only for gradients). Outputs a visually-rich, interactive ListItem.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/listitem.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Avatar Initials and Interaction with React Native Elements in JavaScript\nDESCRIPTION: This snippet showcases avatars rendered with user initials and varying sizes using the Avatar component from React Native Elements. It also demonstrates interactivity via the 'onPress' handler and customizable opacity when pressed. Dependencies include the 'react-native-elements' library, with parameters like 'size', 'title', 'rounded', and 'activeOpacity'. The expected result is a series of avatars labeled with initials and interactive feedback upon pressing.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/avatar.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar } from \"react-native-elements\";\n\n<Avatar\n  size=\"small\"\n  rounded\n  title=\"MT\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"medium\"\n  title=\"BP\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"large\"\n  title=\"LW\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  size=\"xlarge\"\n  rounded\n  title=\"CR\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Placeholder Note Admonition in Markdown\nDESCRIPTION: This snippet utilizes Docusaurus admonition syntax (`:::note ... :::`) to create a visually distinct note block within the Markdown content. It currently contains an HTML comment `<!-- TODO -->`, serving as a placeholder for future content or action items related to the documentation section. This is standard Markdown enhanced by Docusaurus features.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/universe/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\n<!-- TODO -->\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Customizing the Rating Component\nDESCRIPTION: This shows the theme key identifier (`Rating`) used within the theme object when utilizing the `ThemeProvider` from `@rneui/themed`. This key allows for applying custom styles or default props to all instances of the `Rating` component throughout the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRating\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Icon component from the '@rneui/themed' package, which is part of the react-native-elements library. This import makes the Icon component available for use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing LinearProgress from React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the LinearProgress component from the '@rneui/themed' package in a JavaScript/React Native project. It is required before using the LinearProgress component within your React Native application. No additional dependencies are required beyond having React Native Elements installed. The import enables subsequent customization and rendering of the LinearProgress component in your UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LinearProgress } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Styling a React Native Elements Button using styled in TypeScript\nDESCRIPTION: Illustrates how to apply styles to an existing React Native Elements component (`Button`) using the `styled` function. It creates a new `RedButton` component by setting the `backgroundColor` to 'red' within the `containerStyle` property, demonstrating how to target specific style props of RNE components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst RedButton = styled(Button)({\n  containerStyle: {\n    backgroundColor: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying the Avatar Theme Key\nDESCRIPTION: Indicates the theme key used for customizing the Avatar component via a ThemeProvider. This allows for centralized styling adjustments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAvatar\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native\nDESCRIPTION: Imports the ListItem component from the '@rneui/themed' package. This import is necessary to utilize the ListItem.ButtonGroup functionality within a React Native application using the RNEUI library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing SearchBar Component in TypeScript\nDESCRIPTION: Shows the standard import statement for using the SearchBar component from the @rneui/themed library within a TypeScript-based React Native project. This makes the component available for use in your UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchBar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Setting up ThemeProvider in React Native Elements\nDESCRIPTION: This snippet demonstrates how to set up a ThemeProvider with a custom theme using createTheme. It applies the 'raised' prop to all Button components within the ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/1.themeprovider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      raised: true,\n    },\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>My Button</Button>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates the recommended import statement for bringing the Input component from '@rneui/themed' into a TypeScript-based React Native project. To utilize this component, ensure that '@rneui/themed' is installed as a dependency in your project. The imported Input component can be placed directly in your JSX, and all React Native TextInput props are supported along with those documented here. The input is expected to be used inside a React Native functional or class component. There are no additional constraints for using this import.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Input } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package, which is necessary to use the ListItem.Accordion functionality. No additional dependencies are required beyond having the React Native Elements library installed. The import allows subsequent use of the ListItem and its Accordion variant throughout the component file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Default Card Component Implementation\nDESCRIPTION: Demonstrates a basic implementation of the Card component with text content and a button. Shows how to structure content within a card including a word definition example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Card>\n  <Text>Word of the Day</Text>\n  <Text h4>be-nev-o=lent</Text>\n  <Text>adjective</Text>\n  <Text>\n    well meaning and kindly.\n    <br />\n    {'\"a benevolent smile\"'}\n  </Text>\n  <Button size=\"sm\" type=\"clear\">\n    Learn More\n  </Button>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements using npm or yarn - Bash\nDESCRIPTION: These commands install the stable version of React Native Elements in your React Native project using either npm or yarn. No additional parameters are required. They will add react-native-elements as a dependency in your package.json file. Make sure Node.js and either npm or yarn are installed before running.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-elements\n\n# or with yarn\nyarn add react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Chip Component\nDESCRIPTION: This code snippet demonstrates the theme key used for customizing the Chip component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nChip\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient to RNE Chip in React Native (JSX)\nDESCRIPTION: Demonstrates how to integrate `react-native-linear-gradient` with the `@rneui/themed` `Chip` component to create a gradient background. It requires installing `react-native-linear-gradient` (especially for `react-native-cli` projects). The `LinearGradient` component is passed via the `ViewComponent` prop, and gradient properties like `colors`, `start`, and `end` are configured using `linearGradientProps`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Tests Using Jest - Bash\nDESCRIPTION: These bash commands update saved Jest snapshot files for the test suite. Running 'yarn test -u' or 'npm run test -u' tells Jest to compare current rendered component outputs to stored snapshots and update the stored files if changes match expectations. Prerequisites are an installed test suite and either yarn or npm package managers, with Jest configured for the project. The commands do not require additional parameters, updating all matching snapshots project-wide.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn test -u\\n\\n# npm\\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Custom Component with withTheme HOC (TypeScript)\nDESCRIPTION: This code shows how to define a custom component that can receive theme props (theme, updateTheme, replaceTheme) and export it with withTheme. The component type uses ThemeProps for type-safe access to theme functions. Relies on @rneui/themed dependency and ensures the component is themable via context. Useful for class or functional components needing direct theme prop access.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withTheme, ThemeProps } from '@rneui/themed';\n\ntype CustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nconst CustomComponent = (props: ThemeProps<CustomComponentProps>) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n};\n\nexport default withTheme<CustomComponentProps>(CustomComponent, 'ComponentKey');\n```\n\n----------------------------------------\n\nTITLE: Applying Object Styles in React Native Elements Theme\nDESCRIPTION: This example demonstrates the correct way to apply object-based styles both in the theme and locally. The styles are merged correctly because they are of the same type (object).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/4.pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements (TypeScript)\nDESCRIPTION: This import statement brings the Dialog component from the @rneui/themed package into your TypeScript project. No external dependencies are required beyond installing @rneui/themed. The import enables usage of Dialog and its subcomponents, such as Dialog.Button, which accepts the full set of Button props. Input: none. Output: makes the Dialog component available for usage in your JSX/TSX files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Dialog.Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons Dependency - Bash\nDESCRIPTION: Links the react-native-vector-icons native dependency using React Native's CLI. For React Native 0.59 or lower, you must run this to enable native modules. With 0.60+, auto-linking is used.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Using the PricingCard Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic usage of the `PricingCard` component from the `react-native-elements` library. It imports the component and renders it with specified props like `color`, `title`, `price`, `info` (an array of strings representing features), and `button` (an object defining the button's title and icon). This creates a visual pricing tier card.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/pricing.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { PricingCard } from 'react-native-elements';\n\n<PricingCard\n  color=\"#4f9deb\"\n  title=\"Free\"\n  price=\"$0\"\n  info={['1 User', 'Basic Support', 'All Core Features']}\n  button={{ title: 'GET STARTED', icon: 'flight-takeoff' }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Rendering and Configuring Overlay Components in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates multiple ways to import and use the Overlay component from react-native-elements in a React Native application. It covers conditional rendering based on state, customizing overlay width, height, window background color, overlay background color, and handling backdrop presses via an event handler. Dependencies include react-native-elements and a React environment with state management. Key parameters such as isVisible, windowBackgroundColor, overlayBackgroundColor, width, height, and onBackdropPress determine the visibility, appearance, and interaction of the Overlay. The expected input is a Boolean for isVisible and functional or styling props as needed; it outputs a modal overlay presenting the specified children components. All code is meant to be included within a React component's render function and requires the component to manage state for visibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/overlay.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Overlay } from 'react-native-elements';\n\n<Overlay isVisible={this.state.isVisible}>\n  <Text>Hello from Overlay!</Text>\n</Overlay>;\n\n{\n  this.state.visible && (\n    <Overlay isVisible>\n      <Text>Hello from Overlay!</Text>\n    </Overlay>\n  );\n}\n\n<Overlay\n  isVisible={this.state.isVisible}\n  windowBackgroundColor=\"rgba(255, 255, 255, .5)\"\n  overlayBackgroundColor=\"red\"\n  width=\"auto\"\n  height=\"auto\"\n>\n  <Text>Hello from Overlay!</Text>\n</Overlay>;\n\n<Overlay\n  isVisible={this.state.isVisible}\n  onBackdropPress={() => this.setState({ isVisible: false })}\n>\n  <Text>Hello from Overlay!</Text>\n</Overlay>;\n```\n\n----------------------------------------\n\nTITLE: Referencing the LinearProgress Theme Key in JavaScript\nDESCRIPTION: This snippet shows how to refer to the 'LinearProgress' theme key for customization via a theme provider or when applying custom themes. This is relevant when using React Native Elements' theming system to globally alter the style or behavior of LinearProgress components throughout the app. No additional setup is needed, but it assumes the use of the ThemeProvider pattern described in the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/LinearProgress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nLinearProgress\n```\n\n----------------------------------------\n\nTITLE: Importing LinearProgress Component in TypeScript\nDESCRIPTION: This code snippet shows how to import the LinearProgress component from the '@rneui/themed' package in a TypeScript-based React Native project. This import makes the component available for use within your application screens or components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinearProgress } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons (Yarn)\nDESCRIPTION: Installs react-native-vector-icons, a peer dependency for React Native Elements, using Yarn. This step is necessary for projects created with react-native init.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for TabView.Item Documentation in JavaScript\nDESCRIPTION: This snippet imports Tabs and TabItem components from a theme package and prepares to import from react-native-elements, which is required for composing and documenting the TabView.Item usage. These dependencies are foundational for rendering tabbed interfaces and documenting usage in a React Native context. The snippet is intended for use in Markdown or MDX documentation files, and does not include any business logic; it serves purely as setup.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Card component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Pressable Props - diff\nDESCRIPTION: Illustrates how to use the 'pressableProps' API, passing additional props such as Android ripple effects to Pressable-based components. Ensures more platform-specific UI customization. Pass these props as an object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n  <ButtonGroup\\n+   pressableProps={{android_ripple:{radius:2}}}\\n  />\n```\n\n----------------------------------------\n\nTITLE: FAB Properties Documentation Table - Size\nDESCRIPTION: Defines size options for FAB, allowing 'large' or 'small' values\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/fab.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|        Type        | Default |\n| :----------------: | :-----: |\n| 'large' or 'small' | `large` |\n```\n\n----------------------------------------\n\nTITLE: Fixing \"Unable to resolve module\" with npm or yarn (Shell/Bash)\nDESCRIPTION: Shows how to address module resolution errors by deleting node_modules and reinstalling packages using either npm or yarn. These commands force a clean reinstall of dependencies and can resolve issues where a module cannot be found. Clearing and reinstalling dependencies is a best practice for React Native troubleshooting.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && npm i\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: Enabling Fractional Ratings in React Native Elements\nDESCRIPTION: This snippet shows how to configure the React Native Elements Rating component to support fractional values. The `fractions` prop is set to `\"{1}\"` (likely representing 1 decimal place in context), allowing for non-integer ratings like the `startingValue` of `\"{3.3}\"`. The `showRating` prop displays the numerical value alongside the visual rating.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n```html\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Button with Loading Spinner in React Native Elements\nDESCRIPTION: Demonstrates how to display a loading spinner on a button using the loading prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" loading />\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component in React Native Elements\nDESCRIPTION: Shows how to import the Skeleton component from the @rneui/themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skeleton } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React Native Elements\nDESCRIPTION: Shows how to import the Input component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet from React Native Elements in TypeScript\nDESCRIPTION: This snippet shows how to import the BottomSheet overlay modal component from the @rneui/themed package in a React Native project. No additional dependencies are required other than @rneui/themed. The import is necessary before you can add and configure the BottomSheet component in your application. This code does not accept any input and does not produce any direct output; it is a prerequisite for using the component elsewhere in TypeScript files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BottomSheet } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with ThemeConsumer (Render Props) in React Native Elements (TSX)\nDESCRIPTION: Illustrates how to access the theme object within a component using the `ThemeConsumer` component from `@rneui/themed`. It employs the render props pattern, where the child function receives the `theme` object and can use its values (e.g., `theme.colors.primary`) for styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating LinearGradient with Header in React Native Elements (JSX)\nDESCRIPTION: This snippet demonstrates how to apply a linear gradient background to the React Native Elements `Header` component using the `react-native-linear-gradient` package. It requires importing both `Header` from `@rneui/themed` and `LinearGradient`. The `LinearGradient` component is passed to the `ViewComponent` prop of the `Header`, and its appearance (colors, start/end points) is configured via the `linearGradientProps` prop. Note that `react-native-cli` users need to install and link `react-native-linear-gradient` first.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Header } from '@rneui/themed';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Header\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the `Dialog` component from the '@rneui/themed' package. The `Dialog.Button` is a sub-component accessed via the imported `Dialog`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the @rneui/themed package, which can be used to create ListItem.ButtonGroup components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Example via MDX Component\nDESCRIPTION: Imports and renders an MDX component named 'Usage' from a relative path. This is likely used to embed a separate file containing code examples or detailed usage instructions for the LinearProgress component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/LinearProgress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from \"../component_usage/LinearProgress.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing CheckBox Component in React Native Elements\nDESCRIPTION: Shows how to import the CheckBox component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CheckBox } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native\nDESCRIPTION: This snippet demonstrates the standard ES6 import statement required to use the `Dialog` component from the `@rneui/themed` package in a React Native application. The `Dialog.Loading` component is accessed as a property of the imported `Dialog`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using Theme Key for ButtonGroup in React Native Elements\nDESCRIPTION: Demonstrates the theme key name for customizing the ButtonGroup component when using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nButtonGroup\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard Component in React Native Elements\nDESCRIPTION: Shows how to import the PricingCard component from the @rneui/themed package, which is a convenience component for displaying features and pricing tables.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PricingCard } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Calling SearchBar Methods via Ref in React Native\nDESCRIPTION: This snippet shows how to invoke instance methods (focus, blur, clear, cancel) on a SearchBar component using a previously obtained reference (e.g., 'this.search'). The 'cancel' method is noted as only being available for platform-specific SearchBars (iOS/Android).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts for Web (JSX)\nDESCRIPTION: Provides a JSX snippet with embedded CSS (`@font-face` rules) to load the `MaterialIcons` and `FontAwesome` font files required by `react-native-vector-icons`. This ensures icons are displayed correctly in the web application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: ListItem with Linear Gradient and Scale Feedback in React Native Elements\nDESCRIPTION: This example implements a ListItem with TouchableScale for feedback animation and LinearGradient for background styling. It creates a visually appealing list item with color gradient and scaling animation on press.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements';\nimport TouchableScale from 'react-native-touchable-scale'; // https://github.com/kohver/react-native-touchable-scale\nimport LinearGradient from 'react-native-linear-gradient'; // Only if no expo\n\n<ListItem\n  Component={TouchableScale}\n  friction={90} //\n  tension={100} // These props are passed to the parent component (here TouchableScale)\n  activeScale={0.95} //\n  linearGradientProps={{\n    colors: ['#FF9800', '#F44336'],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar rounded source={{ uri: avatar_url }} />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: 'white', fontWeight: 'bold' }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: 'white' }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>;\n```\n\n----------------------------------------\n\nTITLE: Applying Animations to Skeleton Component in React Native Elements\nDESCRIPTION: Shows how to use different animation types (pulse, wave, none) with the Skeleton component. It also demonstrates the use of a custom LinearGradient component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Skeleton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Skeleton animation=\"pulse\" width={80} height={40} />\n  <Skeleton\n    LinearGradientComponent={LinearGradient}\n    animation=\"wave\"\n    width={80}\n    height={40}\n  />\n  <Skeleton animation=\"none\" width={80} height={40} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Identifying TabViewItem Theme Key for Customization\nDESCRIPTION: This snippet specifies 'TabViewItem' as the theme key. This key is used within the theme configuration provided via `ThemeProvider` to apply custom styles specifically to `TabView.Item` components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/TabView.Item.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTabViewItem\n```\n\n----------------------------------------\n\nTITLE: Running Basic API Documentation Build Command\nDESCRIPTION: Basic command to build the full API documentation for React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/scripts/docgen/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn docs-build-api\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.CheckBox in React Native Elements\nDESCRIPTION: Specifies the theme key to use when customizing the ListItem.CheckBox component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.CheckBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nListItemCheckBox\n```\n\n----------------------------------------\n\nTITLE: Importing the Input Component in TypeScript (React Native)\nDESCRIPTION: This snippet demonstrates how to import the `Input` component from the `@rneui/themed` library in a TypeScript React Native project. This import is necessary to use the `Input` component within your application screens or components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Prop for Overlay in React Native Elements (JSX)\nDESCRIPTION: This snippet demonstrates how to assign a custom Modal component, imported from 'modal-react-native-web', to the Overlay component's ModalComponent prop for compatibility with web platforms. It requires the 'modal-react-native-web' package to be installed and does not show the complete component implementation, focusing on integration setup. The expected result is that Overlay usage on web will work by utilizing the correct Modal implementation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Overlay ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native (TSX)\nDESCRIPTION: This snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package. This import is necessary to use the `ListItem` and its subcomponents like `ListItem.ButtonGroup` within a React Native application using TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Theme Key for CheckBox Customization\nDESCRIPTION: Specifies the theme key (`CheckBox`) used for customizing the CheckBox component globally via a ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/CheckBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCheckBox\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the BottomSheet component from the @rneui/themed package in a TypeScript React Native application. This import is necessary to utilize the BottomSheet modal for overlaying content from the bottom of the screen. Ensure the @rneui/themed package is installed in the project before using this component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BottomSheet } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Map and Avatars in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Demonstrates rendering a list of items using the JavaScript `map` function and the `ListItem` and `Avatar` components from `@rneui/themed`. Each item displays a name, subtitle, and avatar based on the `list` array data. Requires `@rneui/themed` (`ListItem`, `Avatar`) and React Native's `View` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component from react-native-elements (TypeScript)\nDESCRIPTION: This snippet shows how to import the Image component from the @rneui/themed library into a TypeScript project. The import enables enhanced image rendering features such as placeholders and transition effects for React Native apps. No additional configuration is required beyond installing @rneui/themed as a dependency.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Switching Between Light and Dark Modes with useTheme Hook in React (JSX)\nDESCRIPTION: This snippet demonstrates how to use the `useTheme` hook from `@rneui/themed` within a component to access the `updateTheme` function. It provides two example functions: one to switch directly to dark mode and another to toggle between light and dark modes based on the current theme state. These functions can be triggered by UI elements like buttons. Requires the `@rneui/themed` library and React.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/theming.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\n\nconst App = () => {\n  const { updateTheme } = useTheme();\n\n  const switchToDarkMode = () => {\n    updateTheme({\n      mode: 'dark',\n    });\n  };\n\n  const toggleTheme = () => {\n    updateTheme((theme) => ({\n      mode: theme.mode === 'light' ? 'dark' : 'light',\n    }));\n  };\n\n  return (\n    <>\n      <Button title=\"Toggle Theme\" onPress={toggleTheme} />\n      <Button title=\"Dark\" onPress={switchToDarkMode} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Header with Default Components in JavaScript/JSX\nDESCRIPTION: Demonstrates initializing the React Native Elements Header component using default configurations for the left, center, and right sections. It utilizes props like `leftComponent`, `centerComponent`, and `rightComponent`, passing objects with `icon` or `text` properties and `style` options.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/header.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={{ icon: 'menu', color: '#fff' }}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  rightComponent={{ icon: 'home', color: '#fff' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts for Web\nDESCRIPTION: Example of how to load vector icon fonts for web projects using React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Importing Components from React Native Elements in JavaScript\nDESCRIPTION: This JavaScript import statement is used to bring in specific components or utilities from the 'react-native-elements' library. Although shown with empty braces `{}`, it would typically list the components needed, such as `Badge`, `Avatar`, etc., for use within the React Native application file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Icon Component in React Native\nDESCRIPTION: Shows how to import the Icon component from the '@rneui/themed' library for use within a React Native application. This is the standard way to make the component available in your code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Icon } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with Component Props in React Native Elements (TypeScript)\nDESCRIPTION: This snippet illustrates the style precedence in React Native Elements. It shows how styles passed directly as props (`titleStyle={{ color: 'pink' }}`) override both the component's internal styles and the styles defined in the theme provided by `ThemeProvider`. Dependencies include `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with Component Props in React Native Elements\nDESCRIPTION: This example demonstrates the styling precedence in React Native Elements, showing how component props can override theme styles. The button title will be pink, overriding both the default white and theme-defined red.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/0.index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ThemeProvider with Custom Colors in React Native Elements\nDESCRIPTION: Shows how to create a ThemeProvider instance with custom colors for both light and dark modes. This allows the use of custom colors throughout the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = createTheme({\n  lightColors: {\n    ...yourCustomColorShape,\n  },\n  darkColors: {\n    ...yourCustomColorShape,\n  },\n  mode: 'light', // your light or dark mode value\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Stable RNEui Packages with Yarn (Bash)\nDESCRIPTION: Installs the stable releases of the `@rneui/themed` and `@rneui/base` packages using the Yarn package manager. These are the core packages for React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: Shows how to import the Dialog component from the @rneui/themed package. The Dialog component can be used to wrap other components and display modal-like information to users.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component - React Native Elements - JavaScript\nDESCRIPTION: Demonstrates how to import the ListItem component from the '@rneui/themed' package in a JavaScript (React Native) codebase. This is a prerequisite for using ListItem and its SubTitle subcomponent. Make sure '@rneui/themed' is installed as a project dependency. No parameters are involved in this static import, and it enables access to all ListItem features in the rest of the file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Subtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context Peer Dependency with Yarn\nDESCRIPTION: Installs the react-native-safe-area-context library using yarn. This is a required peer dependency for handling safe areas in React Native Elements components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Implementing the Slider Component in React Native (JavaScript)\nDESCRIPTION: Demonstrates various ways to use the `Slider` component from `react-native-elements`. Examples include basic setup with state management (`value`, `onValueChange`), customizing the slider thumb using an `Animated.Image` via `thumbProps`, and embedding custom components like an `Icon` within the thumb also using `thumbProps`. It requires importing `Slider` from `react-native-elements` and potentially `Animated` from `react-native`. Key props shown are `value`, `onValueChange`, `thumbStyle`, `thumbProps`, `maximumValue`, `minimumValue`, `step`, and `trackStyle`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/slider.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider } from 'react-native-elements';\nimport { Animated } from 'react-native';\n\n<View style={{ flex: 1, alignItems: 'stretch', justifyContent: 'center' }}>\n  <Slider\n    value={this.state.value}\n    onValueChange={(value) => this.setState({ value })}\n  />\n  <Text>Value: {this.state.value}</Text>\n</View>;\n\n// Replace Thumb with custom image\n<View style={{ flex: 1, alignItems: 'stretch', justifyContent: 'center' }}>\n  <Slider\n    value={this.state.value}\n    onValueChange={(value) => this.setState({ value })}\n    thumbStyle={{ height: 40, width: 40, backgroundColor: 'transparent' }}\n    thumbProps={{\n      Component: Animated.Image,\n      source: {\n        uri: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n      },\n    }}\n  />\n  <Text>Value: {this.state.value}</Text>\n</View>;\n\n// Set Custom Children inside thumb\n<View style={{ flex: 1, alignItems: 'stretch', justifyContent: 'center' }}>\n  <Slider\n    value={value}\n    onValueChange={setValue}\n    maximumValue={50}\n    minimumValue={20}\n    step={1}\n    trackStyle={{ height: 10, backgroundColor: 'transparent' }}\n    thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n    thumbProps={{\n      children: (\n        <Icon\n          name=\"heartbeat\"\n          type=\"font-awesome\"\n          size={20}\n          reverse\n          containerStyle={{ bottom: 20, right: 20 }}\n          color=\"#f50\"\n        />\n      ),\n    }}\n  />\n  <Text>Value: {this.state.value}</Text>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons\nDESCRIPTION: Links the react-native-vector-icons package to your React Native project. This step is necessary for versions of React Native below 0.60.0.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: Shows how to import the Card component from @rneui/themed package which contains the FeaturedSubtitle subcomponent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Divider from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Divider component from the @rneui/themed package in a TypeScript React Native project. No external configuration is needed beyond having @rneui/themed installed as a dependency. The import enables the use of Divider for visually separating content sections as per the documented props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Divider } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Specifying the Text Component Theme Key\nDESCRIPTION: Shows the key used within the theme object (passed via ThemeProvider) to target and customize the styles of the Text component globally.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nText\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-safe-area-context Dependency - Bash\nDESCRIPTION: Links the react-native-safe-area-context native module using the React Native CLI. Required for React Native versions below 0.60. For newer versions, auto-linking usually makes this optional.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Component Props Table\nDESCRIPTION: Markdown table showing the available props for the ListItem.Content component\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.Content.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Type    | Default | Description |\n| ------- | ------- | ------- | ----------- |\n| `right` | boolean |         |             |\n```\n\n----------------------------------------\n\nTITLE: Using Fractional Ratings in React Native Elements\nDESCRIPTION: This example shows how to implement fractional ratings using the Rating component. It sets the fraction to 1 and a starting value of 3.3.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding background Color to colors Object - diff\nDESCRIPTION: Depicts how to update the 'colors' object by introducing a 'background' color key for customizing UI backgrounds. Input is the previous 'colors' object; output is the updated version. Used in theming and is forward compatible with v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst colors={\\n  primary: '#2e7d32',\\n  secondary: '#757575',\\n+ background: '#ffffff',\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-elements (Expo/CRNA)\nDESCRIPTION: Demonstrates how to install the `react-native-elements` package using either yarn or npm for projects created with Expo or Create React Native App. Assumes `react-native-vector-icons` is already present, so only this package needs to be added.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-elements\n# or with npm\nnpm install react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Content Component\nDESCRIPTION: Example of importing components from react-native-elements package\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing the SocialIcon Component in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `SocialIcon` component from the `@rneui/themed` library. This import is the first step required to utilize the SocialIcon component within a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SocialIcon } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component from React Native Elements - TypeScript\nDESCRIPTION: This snippet illustrates how to import the Switch component from the '@rneui/themed' package for usage in a TypeScript-based React Native project. The statement should be placed at the top of any file where the Switch control is needed. No dependencies are required beyond having '@rneui/themed' installed as part of project dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Switch } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component from React Native Elements\nDESCRIPTION: Shows how to import the Icon component from the @rneui/themed package for use in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to ListItem in React Native Elements\nDESCRIPTION: This snippet shows how to add a Badge component to a ListItem with custom styling, including text color and container positioning adjustments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Using Fractional Ratings in React Native\nDESCRIPTION: Illustrates how to enable and display fractional ratings using the `Rating` component. The `fractions` prop controls the number of decimal places (set to 1 here), and `startingValue` sets the initial fractional rating value. The `showRating` prop displays the numeric value alongside the rating images. Requires `react-native-elements`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/rating.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Fractional Ratings in React Native Elements\nDESCRIPTION: This example shows how to configure the `Rating` component to display fractional ratings (e.g., 3.3 stars). The `fractions` prop is set to `\"{1}\"` (likely meaning 1 decimal place in the rating value display), and `startingValue` initializes the component with a fractional value. The `showRating` prop displays the numeric rating value alongside the stars. Requires the `@rneui/themed` package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Default Component Props Interface in TypeScript\nDESCRIPTION: Demonstrates extending the props interface (`TextProps`) for a default RNE component (`Text`) using TypeScript declaration merging in `themed.d.ts`. It adds a new boolean `bold` prop. Crucially, it also extends `ComponentTheme` to include a partial definition for `Text` using the extended `TextProps`, enabling theme configuration specific to these extended props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// themed.d.ts\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface ComponentTheme {\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the @rneui/themed package in a JavaScript or TypeScript React Native project. Required dependency is @rneui/themed. The imported ListItem can then be used to construct list elements in the app. There are no additional setup or parameters needed for importing. Input: none; Output: imported ListItem module.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing the Switch Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Switch` component from the `@rneui/themed` package in a TypeScript/TSX file. This import is necessary to use the Switch component within your React Native application built with React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Avatar Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Avatar` component from the `@rneui/themed` package. This import is necessary to use the Avatar component within a React Native application built with TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Fractional Ratings in React Native Rating Component (JSX)\nDESCRIPTION: This JSX snippet shows how to configure the React Native Elements `Rating` component to support fractional ratings. The `fractions` prop is set to 1 (allowing for one decimal place), `showRating` displays the numerical value alongside the stars, and `startingValue` is initialized to 3.3.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Rating/Rating.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component - React Native Elements\nDESCRIPTION: Shows how to import the Avatar component from the React Native Elements themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Avatar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for SocialIcon in React Native Elements\nDESCRIPTION: This code demonstrates how to specify the theme key for the SocialIcon component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/SocialIcon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nSocialIcon\n```\n\n----------------------------------------\n\nTITLE: Importing Chip Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Chip component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip from React Native Elements (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the Tooltip component from the @rneui/themed package for use in a React Native project written in TypeScript. The Tooltip component enables developers to display overlays with informative text or content when users interact with a trigger element (e.g., on tap or long press). The import requires installing the @rneui/themed package and TypeScript support/configuration in the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Removing iOS and Android Build Folders After Font Problems - Bash\nDESCRIPTION: This set of Bash commands is recommended for cleaning build artifacts after encountering unrecognized font errors in React Native. By deleting the platform-specific build directories, you can force a clean rebuild, which often resolves caching issues related to font linking. The snippet demonstrates both iOS and Android commands, which can be run independently based on the affected platform.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\niOS - rm -rf ios/build\n```\n\nLANGUAGE: bash\nCODE:\n```\nAndroid - rm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots using Yarn/NPM\nDESCRIPTION: Provides the shell commands to update Jest snapshots after intended changes have been made to components. Use `yarn test -u` if using Yarn, or `npm run test -u` if using NPM. These commands tell Jest to overwrite the existing snapshots with the new component structure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn test -u\n\n# npm\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Matching Array Styles for Theme and Component in React Native Elements\nDESCRIPTION: This example illustrates a working configuration where both the theme's `Button.containerStyle` and the inline `containerStyle` prop passed to the Button component are defined as arrays containing style objects. The ThemeProvider correctly merges these styles as their types are consistent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/4.pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Using createTheme for Custom Theme - diff\nDESCRIPTION: Presents migration from a manual theme object to using the 'createTheme' helper, with distinct light and dark color keys. Inputs are old and new theme definitions. This pattern initializes theme management for RNE v4, enabling runtime switching and improved theming support.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- const myTheme: FullTheme = {\\n+ const myTheme = createTheme({\\n-  colors: {\\n+  lightColors:{\\n     primary: '#f2f2f2',\\n   },\\n+  darkColors: {\\n+   primary: '#121212',\\n+  },\\n+  mode: 'dark',\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: Shows how to import the `Card` component from the `@rneui/themed` library, which is necessary to use the `Card.Image` sub-component within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Example Functional Test Scenario (Markdown)\nDESCRIPTION: This snippet provides a human-readable description, written in Markdown, illustrating a functional test case for a button group component. It specifies the expected behavior: when a user interacts with a button, it should become highlighted, and any previously selected button should be de-highlighted. This serves as a conceptual example for functional testing.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/repo/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Theme Key Reference for React Native Elements Image\nDESCRIPTION: Specifies the theme key that can be used to customize the Image component through the ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nImage\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in TypeScript\nDESCRIPTION: This code snippet shows the standard way to import the `Card` component from the `@rneui/themed` library in a TypeScript project. The `Card.Image` component is accessed as a property of the imported `Card` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Card.Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Supplying ModalComponent for React Native Web Tooltip in JavaScript\nDESCRIPTION: Demonstrates how to provide a compatible Modal component implementation (e.g., 'modal-react-native-web') to the Tooltip's `ModalComponent` prop. This is required for web platforms because Modal is not natively implemented in 'react-native-web'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Tooltip ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Components from React Native Elements (JavaScript)\nDESCRIPTION: This JavaScript code imports components from the 'react-native-elements' library. Although no specific components are named within the curly braces in this snippet, this pattern is standard for making library components (like ListItem, Avatar, Icon, etc.) available for use within a React Native application file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates the correct way to import the Avatar component from the '@rneui/themed' package for use in your TypeScript or JavaScript project. Ensure that '@rneui/themed' is installed and available in your project dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Avatar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Specifying SpeedDial Theme Key in React Native Elements\nDESCRIPTION: Demonstrates the theme key used for customizing the SpeedDial component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/SpeedDial.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSpeedDial\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Overlay component from '@rneui/themed' in a TypeScript/React Native environment. No additional setup or configuration is required beyond ensuring that '@rneui/themed' is installed as a dependency. The imported Overlay component can then be used as a floating view/modal following the props described in the documentation. Input is the import statement; output is the inclusion of the Overlay component in your codebase.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Overlay } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Dialog.Loading Component Customization\nDESCRIPTION: This snippet specifies the theme key, `DialogLoading`, which can be used within a ThemeProvider configuration to apply custom styles or properties to all instances of the `Dialog.Loading` component in the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.Loading.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDialogLoading\n```\n\n----------------------------------------\n\nTITLE: Importing the Tile Component in React Native (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the `Tile` component from the `@rneui/themed` package for use within a React Native application. This is the standard way to make the component available in your project files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tile } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref to Input Component for Imperative Method Calls - React Native Elements (JavaScript)\nDESCRIPTION: This simple snippet shows how to create a React ref using React.createRef() and attach it to an Input component from React Native Elements. No external dependencies besides React and react-native-elements are required. The ref allows later access to the Input instance's imperative methods (focus, blur, etc.), and the argument to the ref prop must be the created ref variable. Expected input is no more than instantiating the Input, and the output is the rendered input field with an associated reference for later use. This ref pattern is necessary to interact directly with the Input component's methods.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/input.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst input = React.createRef();\\n\\n<Input\\n  ref={input}\\n  ...\\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons via NPM - Bash\nDESCRIPTION: Installs the react-native-vector-icons package, a required peer dependency for React Native Elements, using npm. This step is needed for standard React Native projects not based on Expo or CRNA.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Example Functional Test Scenario Description\nDESCRIPTION: Describes an example scenario for a functional test case for a button group component. It specifies that when a button is touched, it should become highlighted, and any previously selected button should be un-highlighted, verifying the component's interactive behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with Component Props (JavaScript/React Native)\nDESCRIPTION: This example demonstrates that explicit style props on a component take precedence over theme and internal styles in React Native Elements. The Button titleStyle is set directly in the component's props, overriding theme values from ThemeProvider. The dependencies are react-native-elements, the input is both a theme object and external prop, and output is a component with external styling applied.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining StyleSheet for React Native Elements UI Components\nDESCRIPTION: StyleSheet definition for layout and appearance of UI components. Includes styles for content view, button containers with flex properties, and a styled subheader with background color and text alignment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n},\nbuttonsContainer: {\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '100%',\n  marginVertical: 20,\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Mixing Object and Array Styles for Button Container (JSX)\nDESCRIPTION: This snippet illustrates a scenario where the theme defines `containerStyle` as an object, but the `Button` instance receives `containerStyle` as an array. This combination is noted as non-functional, highlighting a potential incompatibility or limitation in the style merging logic when mixing object and array types between theme and instance props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Map, Icons, and Chevrons in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Shows how to render a list using the JavaScript `map` function with `ListItem`, `Icon`, and `ListItem.Chevron` from `@rneui/themed`. Each list item displays a title and an icon, suitable for navigation or action lists. Depends on `@rneui/themed` (`ListItem`, `Icon`) and React Native's `View`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { ListItem, Icon } from '@rneui/themed'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons with NPM (Bash)\nDESCRIPTION: Installs the `react-native-vector-icons` package using npm. This is a required peer dependency for React Native Elements in standard React Native projects (not using Expo or CRNA initially).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Dialog component from the @rneui/themed package. The Dialog.Title is a subcomponent of Dialog used to add a title to the Dialog.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing styled from @rneui/themed in TypeScript\nDESCRIPTION: Shows how to import the `styled` function from the `@rneui/themed` library. This function is used as a Higher-Order Component (HOC) or factory to create styled components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons with Yarn (Bash)\nDESCRIPTION: Installs the `react-native-vector-icons` package using Yarn. This is a required peer dependency for React Native Elements in standard React Native projects (not using Expo or CRNA initially).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with Yarn (Bash)\nDESCRIPTION: This shell command installs project dependencies with yarn and adds both @rneui/base and @rneui/themed to a React Native project. These packages are necessary for using React Native Elements components. Prerequisites include yarn being installed; the command should be executed from your project directory.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Bleeding Edge via Yarn - Bash\nDESCRIPTION: Adds the latest (bleeding-edge) versions of @rneui/base and @rneui/themed from GitHub using Yarn, specifying the respective branch or tag. Useful for early adopters; run each command in your project root.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\\nyarn add @rneui/base@github:react-native-elements/react-native-elements#base\\n\\n# @rneui/themed\\nyarn add @rneui/themed@github:react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Image Component\nDESCRIPTION: This snippet demonstrates the theme key used for the Image component in React Native Elements, which is simply 'Image'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nImage\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component for FeaturedSubtitle Usage (TypeScript)\nDESCRIPTION: Demonstrates how to import the main `Card` component from the `@rneui/themed` package in a TypeScript React Native project. This import is required to utilize the `Card.FeaturedSubtitle` sub-component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Actions Component\nDESCRIPTION: Shows the import statement for Dialog Actions component from react-native-elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Removing iOS and Android Build Artifacts to Resolve Font Issues - Bash\nDESCRIPTION: Gives bash commands to delete iOS and Android build folders to resolve caching issues leading to unrecognized font errors. Intended to be used after installing or linking vector icons or when encountering red error screens. The user should run these in their shell, targeting the relevant build directories.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\niOS - rm -rf ios/build\\n\\nAndroid - rm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Functional Testing Scenario Description - Markdown\nDESCRIPTION: Describes a behavioral expectation for a component, provided as a markdown snippet to clarify the intended result of a functional test. This is not code to be executed, but rather a written example to illustrate the kind of behavior the functional tests should validate, such as button highlighting based on user input. Can serve as the basis for writing test cases with React Native Testing Library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Importing RNE Chip Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Chip component from the @rneui/themed package within a TypeScript-based React Native application. This import is required to use the Chip component and its associated features.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chip } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Button and Content Styles with StyleSheet - React Native - JavaScript\nDESCRIPTION: This snippet creates a StyleSheet object named styles containing several style definitions for use throughout the file. These styles standardize content layouts, button container arrangements, and subheader appearance with properties for flex, alignment, background color, and spacing. Expected use: passing these style objects to React Native component 'style' props. Dependencies: React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Button/snack/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = StyleSheet.create({\n  contentView: {\n    flex: 1,\n  },\n  buttonsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    marginVertical: 20,\n  },\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component in React Native (TSX)\nDESCRIPTION: This code snippet demonstrates how to import the `ButtonGroup` component from the `@rneui/themed` library for use in a React Native application using TypeScript. This component is designed to present a linear set of mutually exclusive segmented buttons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ButtonGroup } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native Elements\nDESCRIPTION: Shows how to import the Tab component from the React Native Elements themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native\nDESCRIPTION: Imports the Dialog component from the '@rneui/themed' package. This component contains the Dialog.Button sub-component which is used to add buttons within a Dialog.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on SearchBar in React Native\nDESCRIPTION: This code shows how to call various methods on the SearchBar component after storing a reference to it. It includes examples of focusing, blurring, clearing, and canceling the SearchBar.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n\n----------------------------------------\n\nTITLE: Theme Style Array Merging Example\nDESCRIPTION: Shows proper theme style merging when both theme and local styles are arrays. Demonstrates theme configuration with containerStyle as an array and matching local style array.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/4.pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component - React Native Elements - TypeScript\nDESCRIPTION: This snippet shows how to import the Card component from the @rneui/themed package in a TypeScript/React Native project. The Card component includes Card.Divider, which acts as a separator within the card and inherits all Divider component props. There are no required parameters for the import itself; subsequent usage would require appropriate configuration of props and children components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Card.Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component (React Native Elements, TypeScript)\nDESCRIPTION: This snippet shows how to import the SpeedDial component from the '@rneui/themed' package using TypeScript in a React Native project. The import enables access to SpeedDial's functionality, allowing developers to add floating action buttons with expandable action stacks. Ensure '@rneui/themed' is installed before using this import statement. No parameters are involved; usage of SpeedDial requires referencing the component after this import.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SpeedDial } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/vector-icons in Expo Apps - Yarn CLI/Bash\nDESCRIPTION: This Bash snippet shows how to install the '@expo/vector-icons' package using Yarn in an Expo or create-react-native-app context. This icon set is a standard dependency for Expo applications requiring icon support in React Native Elements. The '--save' flag ensures the package is listed in package.json dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Importing the Skeleton Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet shows how to import the Skeleton component from the @rneui/themed package. Importing this component is necessary before using it in your React Native project. The import assumes @rneui/themed is installed as a dependency.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Skeleton } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package in a TypeScript/TSX file. This import is necessary to use the ListItem.Swipeable functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for ListItem.Title\nDESCRIPTION: This snippet shows the theme key 'ListItemTitle'. This key is used within the React Native Elements theme configuration (via ThemeProvider) to apply custom styles specifically to the ListItem.Title component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nListItemTitle\n```\n\n----------------------------------------\n\nTITLE: Importing the Text Component in React Native\nDESCRIPTION: Demonstrates the ES6 import statement required to bring the Text component into a React Native project using the `@rneui/themed` library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Text } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Text component from the '@rneui/themed' package for use in a React Native Elements project. The import enables access to theme-based styling and preset heading typography. No additional dependencies are required besides a React environment with react-native-elements installed. The only parameter is the import path; no input/output is applicable except ensuring the Text component is available for use.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Text } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: SearchBar Props Table Structure\nDESCRIPTION: Markdown table structure defining the available props for the SearchBar component, including their types and defaults.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Type                            | Default              | Description |\n| ------------------------- | ------------------------------- | -------------------- | ----------- |\n| `cancelButtonProps`       | Text Style                      |                      |             |\n| `cancelButtonTitle`       | string                          |                      |             |\n| `cancelIcon`              | IconNode                        |                      |             |\n| `clearIcon`               | IconNode                        |                      |             |\n| `containerStyle`          | View Style                      |                      |             |\n| `inputContainerStyle`     | View Style                      |                      |             |\n| `inputStyle`              | Text Style                      |                      |             |\n| `leftIconContainerStyle`  | View Style                      |                      |             |\n| `lightTheme`              | boolean                         |                      |             |\n| `loadingProps`            | ActivityIndicatorProps          |                      |             |\n| `onCancel`                | `(() => any)` or `(() => any)`  |                      |             |\n| `onClear`                 | Function                        |                      |             |\n| `platform`                | `default` or `android` or `ios` | `'default' as const` |             |\n| `rightIconContainerStyle` | View Style                      |                      |             |\n| `round`                   | boolean                         |                      |             |\n| `searchIcon`              | IconNode                        |                      |             |\n| `showCancel`              | boolean                         |                      |             |\n| `showLoading`             | boolean                         |                      |             |\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Commands for Common Errors (Bash)\nDESCRIPTION: Commands to resolve common errors in React Native Elements, including fixing unrecognized font errors by cleaning build directories and resolving module resolution issues by reinstalling dependencies or resetting cache.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ios/build\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf android/build && rm -rf android/app/build\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && npm i\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && yarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Configuration for Custom Component Key using createTheme (@rneui/themed)\nDESCRIPTION: Shows how to configure default props or styles for a custom component (identified by the unique `ComponentKey` used in `withTheme`) within the theme structure using `createTheme`. This specific example sets a default `color: 'red'` for the `titleStyle` prop of the custom component associated with `ComponentKey`. Requires `ThemeProvider` and `createTheme` imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  components: {\n    ComponentKey: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Interface with Custom Properties in TypeScript (@rneui/themed)\nDESCRIPTION: Demonstrates extending the main `Theme` interface from `@rneui/themed` using TypeScript declaration merging in a `themed.d.ts` file. This adds custom properties (`myCustomProperty` of type string, `myCustomFunction` of type function) to the theme type definition, enabling type safety and autocompletion when these properties are added to a theme instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/extending.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// themed.d.ts\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Theme {\n    myCustomProperty: string;\n    myCustomFunction: () => void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Card component from the @rneui/themed package in React Native Elements. The Card.Title component is a sub-component of Card.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Card.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing FAB Component in React Native Elements\nDESCRIPTION: Shows how to import the FAB component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FAB } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from @rneui/themed (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package. This import is required to use the `ListItem` and its nested components, such as `ListItem.CheckBox`, within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for FAB Component\nDESCRIPTION: Demonstrates the theme key used for customizing the FAB component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/FAB.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFAB\n```\n\n----------------------------------------\n\nTITLE: Importing the Divider Component in TypeScript\nDESCRIPTION: Shows how to import the Divider component from the '@rneui/themed' package. This is necessary to use the Divider component within a React Native project built with TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Divider } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Specifying BottomSheet Theme Key in React Native Elements\nDESCRIPTION: This code snippet demonstrates the theme key to use for customizing the BottomSheet component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/BottomSheet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBottomSheet\n```\n\n----------------------------------------\n\nTITLE: Importing Chip Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Chip component from the @rneui/themed package in a React Native application. The Chip component is a part of the React Native Elements library and can be used to create compact, interactive elements in the UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chip } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only Rating in React Native Elements\nDESCRIPTION: Example of creating a read-only rating component with a specified starting value and image size.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Importing TabView from React Native Elements (TypeScript)\nDESCRIPTION: Demonstrates the correct TypeScript/TSX import of the TabView component from the @rneui/themed package, as required to use TabView.Item or related components. Requires installation of the @rneui/themed package as a dependency. This code is intended for React Native projects using the React Native Elements library and expects the environment to support ES module imports and TypeScript/TSX syntax. The import assigns the TabView component for use in application code or further composition.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TabView } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Divider Component in React Native Elements (JavaScript/React Native)\nDESCRIPTION: This snippet demonstrates the basic usage of the `Divider` component from `react-native-elements`. It shows how to import the component and render it, applying a custom style (blue background color) via the `style` prop. This component is intended to visually separate content within a React Native application and inherits standard View props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/divider.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Divider } from 'react-native-elements';\n\n<Divider style={{ backgroundColor: 'blue' }} />;\n```\n\n----------------------------------------\n\nTITLE: Cleaning Node Modules and Lock Files (Shell/Bash)\nDESCRIPTION: Removes node_modules and lock files to ensure a clean dependency tree in a React Native project. This shell snippet is crucial for troubleshooting package-related issues when initializing or resetting a React Native Elements project. The command recursively deletes node_modules, yarn.lock, and package-lock.json to force a fresh installation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Linking Vector Icons Library (React Native Init) (Bash)\nDESCRIPTION: Links the `react-native-vector-icons` native dependencies automatically using the React Native CLI command (`react-native link`). This step is necessary for projects initialized with `react-native-init` to make the icon fonts available.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme with Light and Dark Colors - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom RNE theme object with lightColors and darkColors, passing in custom color definitions via the 'yourCustomColorShape'. It uses the createTheme function, with the possibility of specifying the mode. Dependencies include 'createTheme' from '@rneui/themed' and a valid shape object for custom colors. The expected output is a fully configured theme object to be used with RNE theme providers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst theme = createTheme({\n  lightColors: {\n    ...yourCustomColorShape\n  },\n  darkColors: {\n    ...yourCustomColorShape\n  },\n  mode: // your light or dark mode value\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Selection State and Rendering ButtonGroup with String Labels - React Native Elements (JavaScript)\nDESCRIPTION: Implements selection state and click handling for the ButtonGroup component using an array of string labels. Relies on React Native Elements, and expects the class to extend React.Component. Uses 'selectedIndex' to track the selected button, binding update function, and provides styling via 'containerStyle'. Inputs include an array of button label strings and style props; outputs are a rendered ButtonGroup with current selection. Requires React, React Native Elements, and the parent class context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/button_group.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstructor () {\\n  super()\\n  this.state = {\\n    selectedIndex: 2\\n  }\\n  this.updateIndex = this.updateIndex.bind(this)\\n}\\n\\nupdateIndex (selectedIndex) {\\n  this.setState({selectedIndex})\\n}\\n\\nrender () {\\n  const buttons = ['Hello', 'World', 'Buttons']\\n  const { selectedIndex } = this.state\\n\\n  return (\\n    <ButtonGroup\\n      onPress={this.updateIndex}\\n      selectedIndex={selectedIndex}\\n      buttons={buttons}\\n      containerStyle={{height: 100}}\\n    />\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Packages - Bash Shell\nDESCRIPTION: This shell command installs and adds the @rneui/base and @rneui/themed packages to the project's dependencies using yarn. It should be run after clearing the node_modules folder to reinstall and register the UI components required for React Native Elements. Assumes that yarn is installed and used as the package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component in React Native Elements\nDESCRIPTION: Shows how to import the SpeedDial component from the @rneui/themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SpeedDial } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component in React Native\nDESCRIPTION: This example demonstrates how to use the Switch component in a React Native application. It includes state management for the switch value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RNESwitch() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Stack row align=\"center\">\n      <Switch value={open} onValueChange={setOpen} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNE with Yarn\nDESCRIPTION: Installs the latest development (bleeding edge) versions of the core React Native Elements packages using Yarn, by specifying the '@edge' dist-tag.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons Package with Yarn (Bash)\nDESCRIPTION: This command installs the react-native-vector-icons dependency using yarn. This package provides support for icon fonts in React Native applications and is often required by React Native Elements. It must be installed for proper font rendering if you are not using Expo.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing from React Native Elements Library in JavaScript\nDESCRIPTION: This JavaScript snippet shows an import statement for the 'react-native-elements' library using ES6 module syntax. The empty braces `{}` indicate that specific named exports would typically be listed here, but are omitted in this example, potentially as a placeholder or context marker.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/SpeedDial.Action.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component - React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates the import statement for bringing the Card component from the '@rneui/themed' package into your React Native project. The '@rneui/themed' package is required as a dependency. Use this line at the top of your JavaScript or TypeScript file to enable usage of any Card subcomponent, such as Card.FeaturedTitle. Assumes your project already has React Native Elements installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Referencing FAB Theme Key in React Native Elements (Plain Text)\nDESCRIPTION: This simple snippet provides the theme key (\\\"FAB\\\") necessary for customizing FAB styles via the ThemeProvider feature in React Native Elements. It is referenced as a string, generally within a theming or configuration context. No dependencies are required, and the expected usage is in theme mapping. There are no inputs or outputs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/FAB.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFAB\n```\n\n----------------------------------------\n\nTITLE: Removing Node Modules and Lock Files in React Native Project (Bash)\nDESCRIPTION: This shell command deletes the node_modules directory and yarn.lock file from your React Native project, a common step to resolve dependency issues and stale package problems. No dependencies are required to run this command other than shell access. It does not resolve issues by itself but prepares the environment for clean installation in subsequent steps.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React Native Elements\nDESCRIPTION: Shows how to import the Input component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Resetting React Native Metro Cache - Bash\nDESCRIPTION: This Bash command resets the Metro bundler's cache in React Native, useful for fixing persistent or unrecognized module resolution errors. The command is generally run after clearing and reinstalling node modules to ensure the packager is not using cached, outdated metadata. Use it in the project directory.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Importing TabItem Component for Documentation Theme\nDESCRIPTION: Imports the TabItem component from the '@theme/TabItem' library. This component works in conjunction with the Tabs component to define individual tabs within a tabbed interface in the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Correcting Invalid Component Imports in React Native Elements (JSX)\nDESCRIPTION: This snippet illustrates the correct and incorrect ways to import components from the '@rneui/themed' package. The incorrect import uses a misspelt component name, while the correct import uses the proper capitalization. Ensuring correct spelling is critical as React Native Elements component imports are case-sensitive. No additional dependencies are required beyond the '@rneui/themed' package. The input is the import statement; the output is the correct availability of the corresponding component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\\nimport { Listitem } from '@rneui/themed';\\n\\n// Correct\\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Solid Button with Title - React Native Elements - JSX\nDESCRIPTION: Demonstrates the basic creation and rendering of a 'solid' type Button using React Native Elements in JSX. No additional dependencies or customizations are involved beyond a required 'title' prop. Inputs include the title string; output is a default styled button.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\\\"Solid Button\\\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Component in React Native Elements\nDESCRIPTION: Shows how to import the Rating component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Rating } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet Component in React Native\nDESCRIPTION: This code snippet shows how to import the BottomSheet component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BottomSheet } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in React Native Elements\nDESCRIPTION: Shows how to import the Avatar component from React Native Elements themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Extending Default Component Props in React Native Elements\nDESCRIPTION: Shows how to extend the props of a default React Native Elements component (Text in this case) and add it to the ComponentTheme. This allows for adding custom props to existing components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface ComponentTheme {\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Avatar using Map Function\nDESCRIPTION: Demonstrates how to create a list of items with avatars using the map function. Each item displays a name, avatar image, and subtitle using React Native Elements ListItem and Avatar components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements using TypeScript\nDESCRIPTION: This snippet demonstrates the import statement for the Card component from the @rneui/themed package using TypeScript (TSX). It is necessary before using the Card.Image component in your React Native codebase. The import allows access to Card and its subcomponents, supporting the implementation of visual card layouts with images.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Card.Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native Elements (TypeScript)\nDESCRIPTION: Shows how to import the `Tab` component from the `@rneui/themed` package. This import is necessary to use the Tab functionality within a React Native application built with React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Tab } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native\nDESCRIPTION: Shows how to import the `ListItem` component from the `@rneui/themed` library. This import is necessary to use the `ListItem.Chevron` sub-component within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Chevron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Header Component from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Header component from the '@rneui/themed' package in a React Native TypeScript project. Ensure that 'react-native-elements' is installed and that setup steps including 'react-native-safe-area-context' are completed as per the installation guide. The import makes the Header component available for use within your React Native component hierarchy. It expects TypeScript syntax and will output an imported Header ready for use.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Header } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component for Card.Divider (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `Card` component from the `@rneui/themed` package. This import is necessary to use the `Card` component and its subcomponents like `Card.Divider` within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Card.Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts on Web using JSX\nDESCRIPTION: Demonstrates how to load the required font files (e.g., MaterialIcons, FontAwesome) from `react-native-vector-icons` in a web environment (like Create React App). This is done by embedding a `<style>` tag with `@font-face` rules directly within a React component (e.g., App.js).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for ListItem.Accordion (JavaScript)\nDESCRIPTION: This snippet indicates the theme key 'ListItemAccordion', demonstrating how to reference this component in the theme configuration for styling with ThemeProvider. The string is used in the context of React Native Elements theming, allowing custom styles to be applied to all ListItem.Accordion instances.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Accordion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemAccordion\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the Card component from the @rneui/themed package. The Card.Title is a subcomponent of Card used to add a general title to the Card component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Card.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: Shows how to import the Card component from the @rneui/themed package, which includes the Card.Divider subcomponent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Card.Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Highlighting Component Version Availability in React Native Elements (Markdown)\nDESCRIPTION: This markdown code block clarifies which versions of React Native Elements offer specific components. It informs users that <FormInput /> is only available in v0.19.1 and below, while <Input /> is present in v1.0.0-beta1 and higher. This helps users troubleshoot missing components due to version mismatches. No code is executed; this is purely informational documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nExample:\\n\\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Overriding Internal Styles with Theme Styles in React Native Elements (TSX)\nDESCRIPTION: Illustrates how styles defined within the theme object using `createTheme` override the default internal styles of a component. In this example, the `Button`'s `titleStyle.color` is set to 'red' in the theme, which takes precedence over the component's built-in style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Clearing Android Build Cache (Bash)\nDESCRIPTION: Command to remove Android build directories (`android/build` and `android/app/build`). This helps resolve 'Unrecognized font' errors on Android, similar to clearing the iOS build cache.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component with React Native Elements - TypeScript\nDESCRIPTION: Imports the Dialog component from the @rneui/themed package using TypeScript/TSX syntax. This snippet is required for enabling the use of Dialog and related subcomponents, such as Dialog.Actions, in React Native projects. No additional parameters; simply ensure @rneui/themed is installed in your project's dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: How to import the Dialog component from the React Native Elements themed package. This allows you to use the Dialog component in your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements (TypeScript)\nDESCRIPTION: This snippet shows how to import the Card component from the @rneui/themed package using TypeScript. This import is required to use the Card and its subcomponents, including Card.FeaturedTitle. Ensure that the @rneui/themed library is installed, and that you are working in a TypeScript-aware environment. No additional configuration is required, and this will provide access to all Card features and props including the featured title subcomponent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Referencing AvatarAccessory Theme Key in React Native Elements (JavaScript)\nDESCRIPTION: Indicates the theme key 'AvatarAccessory', which can be used when customizing or accessing theme values related to the Avatar.Accessory component via the ThemeProvider. No dependencies are required for this reference as it is a string value, but proper setup of the ThemeProvider is necessary for theme customization to take effect.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Avatar.Accessory.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAvatarAccessory\n```\n\n----------------------------------------\n\nTITLE: Importing AirbnbRating Component in React Native Elements\nDESCRIPTION: Shows how to import the AirbnbRating component from the @rneui/themed package, which is required before using it in your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AirbnbRating } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using `styled` to Extend an Existing RNE Component (`Button`) (TypeScript/TSX)\nDESCRIPTION: Shows how to apply the `styled` function to an existing React Native Elements component (`Button`). It creates a `RedButton` component with a specific background color applied via `containerStyle`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst RedButton = styled(Button)({\n  containerStyle: {\n    backgroundColor: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Dialog Component\nDESCRIPTION: This code block demonstrates the theme key used for customizing the Dialog component when using ThemeProvider in React Native Elements. The theme key 'Dialog' can be used to apply custom styles to the component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nDialog\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with ThemeContext Hook (JSX)\nDESCRIPTION: Demonstrates the modern approach using React Hooks to access the theme. The `useContext` hook is used with `ThemeContext` (exported from react-native-elements) to retrieve the `theme` object within a functional component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { Text } from 'react-native';\nimport { ThemeContext } from 'react-native-elements';\n\nconst MyComponent = () => {\n  const { theme } = useContext(ThemeContext);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the Slider Component in React Native (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Slider component from the '@rneui/themed' library for use in a React Native application using TypeScript. This import makes the Slider component available for rendering and customization within your application code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Slider } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Tile Usage Example in React Native\nDESCRIPTION: This code snippet demonstrates how to include a usage example for the Tile component in the documentation. It uses the Usage component imported from a separate file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Tile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Usage Example in React Native Elements - JavaScript\nDESCRIPTION: This JavaScript snippet imports a markdown file containing usage examples for the Divider component in React Native Elements. The import enables the documentation page to render sample code and demonstrate Divider implementation within React Native applications. Usage assumes the presence of the Divider.md file in the specified directory, and is dependent on the project's asset bundling and markdown rendering configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Divider.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/Divider/Divider.md'\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with SafeAreaProvider\nDESCRIPTION: Example of how to wrap a React Native app with SafeAreaProvider from react-native-safe-area-context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context Dependency - Bash\nDESCRIPTION: This command installs the react-native-safe-area-context package, which helps manage safe-area boundaries within your app UI. Use npm or yarn to add it as a dependency. Required for correct display on devices with notches or rounded corners. No parameters are required.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/getting_started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n# or with yarn\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Radio Button Style CheckBox\nDESCRIPTION: Demonstrates how to create radio button behavior using checkboxes with state management.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/CheckBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction () {\n     const [selectedIndex, setIndex] = React.useState(0);\n\n     return (\n       <Stack row align=\"center\" spacing={4}>\n         <CheckBox\n           checked={selectedIndex === 0}\n           onPress={() => setIndex(0)}\n           iconType=\"material-community\"\n           checkedIcon=\"radiobox-marked\"\n           uncheckedIcon=\"radiobox-blank\"\n         />\n         <CheckBox\n           checked={selectedIndex === 1}\n           onPress={() => setIndex(1)}\n           iconType=\"material-community\"\n           checkedIcon=\"radiobox-marked\"\n           uncheckedIcon=\"radiobox-blank\"\n         />\n       </Stack>\n     );\n   }\n```\n\n----------------------------------------\n\nTITLE: Creating ListItem with Icon and Chevron using Map Function in React Native\nDESCRIPTION: This snippet shows how to create list items with an icon and chevron (right arrow) using the map function. Each item has a title and corresponding icon with a bottom divider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/listitem.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Icon } from 'react-native-elements'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Importing CheckBox Component in React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the CheckBox component from the @rneui/themed package for use in a React Native or Expo project written in TypeScript. Make sure the @rneui/themed package is installed in your project dependencies. This import provides access to all CheckBox functionality and can be used directly in your component tree. No input or output is involved beyond adding the named import.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckBox } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Dependencies\nDESCRIPTION: Shows the import statements required for the SpeedDial component documentation, including Tabs and TabItem from theme components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/SpeedDial.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the React Native Elements themed package. This component can be used to create a list item with a checkbox.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNE from GitHub with NPM\nDESCRIPTION: Installs the latest development (bleeding edge) versions of the core React Native Elements packages directly from the GitHub repository branches ('base' and 'themed') using npm. This is an alternative if installing from the '@edge' dist-tag fails.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nnpm install react-native-elements/react-native-elements#base\n\n# @rneui/themed\nnpm install react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Clearing Node Modules and Reinstalling with NPM/Yarn - Bash\nDESCRIPTION: This Bash snippet demonstrates how to completely remove the node_modules directory and reinstall dependencies using either NPM or Yarn in the event of unresolved module errors. The commands ensure a fresh module installation, potentially resolving dependency or symlink issues. Use the appropriate command depending on your chosen package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm -rm -rf node_modules && npm i\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn - rm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements in Expo using Bash (npm/yarn)\nDESCRIPTION: Commands for installing project dependencies and `react-native-elements` using npm or yarn within an Expo or create-react-native-app project context. This is part of the troubleshooting process for font issues in Expo managed projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install && npm install react-native-elements --save\n\n# yarn\nyarn && yarn add react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Placeholder Import from React Native Elements\nDESCRIPTION: This is an empty import statement from the 'react-native-elements' library. It might be a placeholder or an incomplete example, as it doesn't import any specific components like ListItem or ListItem.Title.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component - React Native Elements - TypeScript\nDESCRIPTION: Demonstrates the import statement required to incorporate the Input component from the @rneui/themed package into a TypeScript-based React Native project. This snippet is necessary as a first step before implementing Input within any functional or class component. The Input component depends on React Native and @rneui/themed; developers should ensure these packages are installed. No parameters are needed for import, and this code does not produce output by itselfâ€”it enables subsequent usage of the Input UI element.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons for Expo Projects\nDESCRIPTION: Shell command using Yarn to install the `@expo/vector-icons` package. Expo projects use this specific package to handle vector icons instead of `react-native-vector-icons`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the parent `ListItem` component from the `@rneui/themed` package. The `ListItem.Input` component is accessed as a property of the imported `ListItem`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing `styled` Utility from `@rneui/themed` (TypeScript/TSX)\nDESCRIPTION: Imports the `styled` function from the `@rneui/themed` library. This function is used as a utility to create styled components by wrapping existing React Native or RNE components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: TabView Props Table - React Native Elements - Markdown/HTML\nDESCRIPTION: This section documents all available props for the TabView component in React Native Elements. It uses a Markdown table within a div with class 'table-responsive' to provide an organized, scrollable presentation. Properties include animation type, swipe settings, container styles, callback handlers, and tab functionality, each with type, default value, and description. This structured table is meant for documentation and supports developers in configuring the TabView component correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/TabView.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<div class='table-responsive'>\n\n| Name                    | Type                   | Default    | Description                                                                                      |\n| ----------------------- | ---------------------- | ---------- | ------------------------------------------------------------------------------------------------ |\n| `animationConfig`       | AnimationConfig        | `{}`       | Define the animation configurations.                                                             |\n| `animationType`         | `spring` or `timing`   | `spring`   | Choose the animation type among `spring` and `timing`. This is visible when there is tab change. |\n| `containerStyle`        | View Style             |            | Styling for Component container.                                                                 |\n| `disableSwipe`          | Boolean                | `false`    | Swipe disabled or not                                                                            |\n| `disableTransition`     | Boolean                | `false`    | Disables transition                                                                              |\n| `minSwipeRatio`         | number                 | `0.4`      | Minimum distance to swipe before the view changes.                                               |\n| `minSwipeSpeed`         | number                 | `1`        | Minimum speed to swipe before the view changes.                                                  |\n| `onChange`              | (value: number) => any | `Function` | On Index Change Callback.                                                                        |\n| `onSwipeStart`          | (direction) => void    | `Function` | Handler when the user swipes the view.                                                           |\n| `tabItemContainerStyle` | View Style             |            | Styling for TabView.Item Component container.                                                    |\n| `value`                 | number                 | `0`        | Child position index value.                                                                      |\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Referencing ListItem CheckBox Theme Key - JavaScript\nDESCRIPTION: Shows the theme key 'ListItemCheckBox' which can be used for theming or customizing appearance settings within a theme provider context in React Native Elements. It is not executable code but represents a configuration string for applying or referencing component-specific styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.CheckBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemCheckBox\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay Component in TypeScript\nDESCRIPTION: This snippet shows how to import the `Overlay` component from the `@rneui/themed` package. This import is required to utilize the Overlay functionality within a React Native application using TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Overlay } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the SpeedDial component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SpeedDial } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Title Placeholder in ListItem with React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows how to embed avatar title placeholders within a ListItem component using React Native Elements. The leftAvatar property of ListItem is configured to display the user's initial, avatar image, and an optional accessory overlay. This setup commonly appears in list-based profile UIs, requiring dependencies on 'react-native-elements', and expects 'name' and 'avatar_url' variables as input. The result is a ListItem featuring a customized avatar on the left, with dynamic user data.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/avatar.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem } from 'react-native-elements';\n\n<ListItem\n  leftAvatar={{\n    title: name[0],\n    source: { uri: avatar_url },\n    showAccessory: true,\n  }}\n  title={name}\n  subtitle={role}\n  chevron\n/>;\n```\n\n----------------------------------------\n\nTITLE: Adding Badge to ListItem - React Native Elements JavaScript\nDESCRIPTION: Demonstrates embedding a Badge within a ListItem, showing a numeric badge styled with custom text and position. It leverages the Badge and ListItem components from React Native Elements. Requires 'react-native-elements'; badge value and styling can be customized as needed. Useful for notification counts or status indicators.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/listitem.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Mixing Default and Custom Components in Header in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This example demonstrates combining different component types within a single Header. It uses a custom component (`MyCustomLeftComponent`) for the left side, a render function (`this.renderCenterComponent()`) for the center, and a default configuration object for the right side (`rightComponent`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/header.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={this.renderCenterComponent()}\n  rightComponent={{ icon: 'home', style: { color: '#fff' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Icon Styles with React Native Elements\nDESCRIPTION: This code snippet demonstrates how to use the Icon component from React Native Elements in different configurations. It shows basic usage, color customization, different icon types, and additional properties like 'reverse' and 'raised'. The component also includes an example of attaching an onPress event to an icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Icon/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Icon } from 'react-native-elements';\n\nexport default () => {\n  return (\n    <>\n      <View\n        style={{\n          alignItems: 'center',\n          paddingVertical: 5,\n          flexGrow: 1,\n        }}\n      >\n        <Icon\n          name='rowing' />\n\n        <Icon\n          name='g-translate'\n          color='#00aced' />\n\n        <Icon\n          name='sc-telegram'\n          type='evilicon'\n          color='#517fa4'\n        />\n\n        <Icon\n          reverse\n          name='ios-american-football'\n          type='ionicon'\n          color='#517fa4'\n        />\n\n        <Icon\n          raised\n          name='heartbeat'\n          type='font-awesome'\n          color='#f50'\n          onPress={() => console.log('hello')} />\n      </View>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Tile from React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Tile component from the '@rneui/themed' package in a JavaScript or TypeScript React Native project. There are no external dependencies beyond @rneui/themed required for this operation. Use this at the top of your file to utilize the Tile component in your UI layouts.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tile } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component in React Native\nDESCRIPTION: Shows how to import the `SpeedDial` component from the '@rneui/themed' package. This component is required to use the `SpeedDial.Action` sub-component within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SpeedDial } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Correcting Component Import Spelling in React Native Elements (JSX)\nDESCRIPTION: Demonstrates the correct way to import the `ListItem` component from `@rneui/themed` to avoid \"Invariant Violation\" errors caused by incorrect spelling. The first line shows the incorrect import (`Listitem`), and the second shows the corrected version (`ListItem`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\nimport { Listitem } from '@rneui/themed';\n\n// Correct\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons Peer Dependency with Yarn\nDESCRIPTION: Installs the 'react-native-vector-icons' library using Yarn. This is a required peer dependency for React Native Elements in standard React Native projects (created with `react-native init`). Expo and Create React Native App projects usually include this dependency already.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the Card component from the @rneui/themed package. The Card.Title is a subcomponent of Card.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component for FeaturedTitle in React Native Elements\nDESCRIPTION: Shows how to import the Card component from @rneui/themed package. The Card component contains the FeaturedTitle subcomponent that can be used to add a featured title to cards.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing the FAB Component in React Native Elements\nDESCRIPTION: Shows the necessary import statement to use the FAB component from the `@rneui/themed` package in a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FAB } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons Dependency\nDESCRIPTION: Links the native parts of the react-native-vector-icons library to the native projects (iOS/Android). This step is generally only needed for React Native versions below 0.60, as auto-linking handles it in newer versions. Unlinking might be necessary if auto-linking causes issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons Dependency with Yarn (React Native Init) (Bash)\nDESCRIPTION: Installs the required `react-native-vector-icons` dependency using Yarn for a standard React Native project (`react-native-init`). This library is often needed by React Native Elements components and resolves missing font errors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the SpeedDial component from the '@rneui/themed' package for use within a TypeScript React Native project. Ensure that '@rneui/themed' is installed as a dependency. The import pattern shown is typical for integrating component APIs from React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SpeedDial } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab from React Native Elements (TypeScript)\nDESCRIPTION: Demonstrates how to import the Tab component from the '@rneui/themed' package to use Tab.Item or related components. No additional dependencies are required beyond installing '@rneui/themed'. Use this import at the beginning of your TypeScript or JavaScript files to access Tab and its subcomponents. Input: none; Output: imports the component for use in the module.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tab.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Tab } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Initializing SearchBar Reference in React Native\nDESCRIPTION: Shows how to store and access a reference to the SearchBar component using React refs. This enables calling methods like focus, blur, clear, and cancel directly on the SearchBar instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements (JavaScript/JSX)\nDESCRIPTION: An empty import statement targeting the `react-native-elements` library. This might be a placeholder or serve to establish context, although it doesn't import any specific named exports in this instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing the BottomSheet Component\nDESCRIPTION: This snippet shows how to import the BottomSheet component from the '@rneui/themed' library for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BottomSheet } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Component with React Native Elements\nDESCRIPTION: A TypeScript example showing how to implement a Switch component using @rneui/themed library. The component manages toggle state using React hooks and includes basic styling through StyleSheet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SwitchComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SwitchComponentProps> = () => {\nconst [checked, setChecked] = useState(false);\n\nconst toggleSwitch = () => {\n  setChecked(!checked);\n};\n\nreturn (\n  <View style={styles.view}>\n   <Switch\n      value={checked}\n      onValueChange={(value) => setChecked(value)}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Referencing Input Theme Key in React Native Elements\nDESCRIPTION: This snippet shows the theme key 'Input' which is used to customize the Input component's styles when using the ThemeProvider from react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nInput\n```\n\n----------------------------------------\n\nTITLE: Installing Stable RNE with NPM\nDESCRIPTION: This command installs the stable versions of the core React Native Elements packages, `@rneui/themed` and `@rneui/base`, using the Node Package Manager (npm). These are the recommended packages for production use.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay from React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Overlay component from the '@rneui/themed' package using TypeScript syntax. The Overlay component is used to render content that floats above an appâ€™s main view. This import is required before integrating the Overlay component into any React Native application leveraging React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Overlay } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: ListItem Props Table Structure\nDESCRIPTION: Markdown table structure defining the available props for the ListItem component, including their types, defaults, and descriptions\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                  | Type            | Default | Description                                                                    |\n| --------------------- | --------------- | ------- | ------------------------------------------------------------------------------ |\n| `Component`           | React Component |         | Replace element with custom element.                                           |\n| `ViewComponent`       | React Component |         | Container for linear gradient.                                                 |\n| `bottomDivider`       | boolean         |         | Add divider at the bottom of the list item.                                    |\n| `children`            | any             |         | Add enclosed children.                                                         |\n| `containerStyle`      | View Style      |         | Additional main container styling.                                             |\n| `disabledStyle`       | View Style      |         | Specific styling to be used when list item is disabled.                        |\n| `linearGradientProps` | any             |         | Props for linear gradient component.                                           |\n| `pad`                 | number          |         | Adds spacing between the leftComponent, the title component & right component. |\n| `topDivider`          | boolean         |         | Add divider at the top of the list item.                                       |\n```\n\n----------------------------------------\n\nTITLE: Setup Commands for Expo Apps (Bash)\nDESCRIPTION: Installation commands for setting up React Native Elements in an Expo app environment, including cleanup and installing the required dependencies with proper vector icon support for Expo.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add @rneui/base @rneui/themed\n```\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Importing SocialIcon Component in React Native Elements - TypeScript\nDESCRIPTION: This code demonstrates how to import the SocialIcon component from the @rneui/themed library into a TypeScript React Native project. It is a prerequisite for utilizing the SocialIcon component and must be included at the top of your file. Ensure that you have installed @rneui/themed in your project dependencies before using this import statement.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SocialIcon } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating Reference to Input Component in React Native\nDESCRIPTION: This snippet demonstrates how to create a reference to an Input component using React's createRef() method. The ref is then passed to the Input component as a prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Input/Input.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Header Component with React Native Elements (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to import the Header component from the @rneui/themed package in a React Native project. The Header provides navigation features and displays contextual actions. Ensure you have completed the installation of react-native-safe-area-context as a prerequisite before importing. The import makes the Header available for use as a JSX element within a TypeScript (TSX) file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Header } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay ModalComponent for Web in React Native\nDESCRIPTION: This snippet demonstrates how to pass a custom Modal component implementation to the `Overlay` component using the `ModalComponent` prop. This is necessary for web platforms (`react-native-web`) where the default Modal might not be available. It imports a specific `Modal` component, likely from 'modal-react-native-web', and passes it to the Overlay.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Overlay ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNE from GitHub with Yarn\nDESCRIPTION: Installs the latest development (bleeding edge) versions of the core React Native Elements packages directly from the GitHub repository branches ('base' and 'themed') using Yarn. This is an alternative if installing from the '@edge' dist-tag fails.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nyarn add @rneui/base@github:react-native-elements/react-native-elements#base\n\n# @rneui/themed\nyarn add @rneui/themed@github:react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Components with Different States\nDESCRIPTION: Demonstrates how to use the Switch component with different configurations. Shows a basic enabled switch and a customized switch with an orange color property.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/switch.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Switch value={true} />\n\n<Switch value={false} color=\"orange\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Card component from the @rneui/themed package using TypeScript syntax. It requires the @rneui/themed library to be installed as a dependency. The import statement makes the Card component available for use in your React Native project, allowing you to include card-based UI elements. No additional parameters are required at import, and this step is necessary for any component usage within your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing TabView Component in React Native\nDESCRIPTION: Demonstrates the ES6 import statement required to use the TabView component from the '@rneui/themed' library within a React Native application. This makes the component available for use in the current file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabView } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing TabView Component in React Native (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the `TabView` component from the `@rneui/themed` package. This import is necessary to use the swipeable tab functionality provided by the component within a React Native application using TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { TabView } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Installing CRA Rewiring Dev Dependencies with Yarn (Bash)\nDESCRIPTION: Installs necessary development dependencies using Yarn for customizing the Create React App build process. `@babel/plugin-proposal-class-properties` handles modern JavaScript features, while `customize-cra` and `react-app-rewired` allow overriding the default Webpack configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNEUI with Yarn\nDESCRIPTION: Installs the bleeding-edge versions of the core React Native Elements packages (@rneui/base and @rneui/themed) using the yarn package manager and the '@edge' dist-tag.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Theme Key Configuration for Card.Image\nDESCRIPTION: Specifies the theme key used for styling Card.Image component in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.Image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCardImage\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements - Stable NPM\nDESCRIPTION: Command to install the stable version of React Native Elements using NPM package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Contribution Guide as a Component - React with JSX - JavaScript\nDESCRIPTION: This snippet imports a Markdown file as a React component using a relative path, assuming that the documentation framework can process Markdown imports. There are no external runtime dependencies beyond a compatible static site generator (e.g., Docusaurus) and React. The only parameter is the import path. The output is a component that can be rendered within JSX, and the limitation is that the environment must support Markdown imports as React components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons (NPM)\nDESCRIPTION: Installs react-native-vector-icons, a peer dependency for React Native Elements, using NPM. This step is necessary for projects created with react-native init.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Switch component from the React Native Elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `PricingCard` component from the `@rneui/themed` package in a TypeScript/React Native project. This component is designed for displaying pricing information in a structured format.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PricingCard } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Customizing FAB Component\nDESCRIPTION: Specifies the theme key 'FAB' used within the React Native Elements `ThemeProvider` to apply custom styles to all FAB instances.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/FAB.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFAB\n```\n\n----------------------------------------\n\nTITLE: Button with Right Icon - React Native Elements - TSX\nDESCRIPTION: This demonstrates a Button with the icon positioned to the right of the title. Setting both the 'icon' prop and 'iconRight' boolean prop moves the icon after the label. The button is styled as 'solid'. Ensure any related icon dependency is available.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button title=\\\"Solid\\\" type=\\\"solid\\\" icon=\\\"home\\\" iconRight />\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation with React Native Elements in JavaScript\nDESCRIPTION: This snippet demonstrates the creation of a tabbed user interface using React Native Elements' Tab and TabView components, controlled by local state (useState) in a React functional component. Dependencies include React, @rneui/themed, and React Native. The Tab component displays three tabs with icons and titles, while TabView shows the content for each tab with distinct background colors and a custom animation type ('spring'). The selected tab is tracked via the 'index' state, updated on user interaction. The snippet's input is tab selection; its outputs are interactive tab navigation and animated tab views. Limitations include hardcoded tab data and simple content for demonstration purposes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { Tab, Text, TabView } from '@rneui/themed';\\n\\nexport default () => {\\nconst [index, setIndex] = React.useState(0);\\n\\nreturn (\\n  <>\\n    <Tab\\n      value={index}\\n      onChange={(e) => setIndex(e)}\\n      indicatorStyle={{\\n        backgroundColor: 'white',\\n        height: 3,\\n      }}\\n      variant=\"primary\"\\n    >\\n      <Tab.Item\\n        title=\"Recent\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'timer', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"favorite\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'heart', type: 'ionicon', color: 'white' }}\\n      />\\n      <Tab.Item\\n        title=\"cart\"\\n        titleStyle={{ fontSize: 12 }}\\n        icon={{ name: 'cart', type: 'ionicon', color: 'white' }}\\n      />\\n    </Tab>\\n\\n    <TabView value={index} onChange={setIndex} animationType=\"spring\">\\n      <TabView.Item style={{ backgroundColor: 'red', width: '100%' }}>\\n        <Text h1>Recent</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'blue', width: '100%' }}>\\n        <Text h1>Favorite</Text>\\n      </TabView.Item>\\n      <TabView.Item style={{ backgroundColor: 'green', width: '100%' }}>\\n        <Text h1>Cart</Text>\\n      </TabView.Item>\\n    </TabView>\\n  </>\\n);\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the Tile Component in TypeScript\nDESCRIPTION: This snippet shows how to import the `Tile` component from the `@rneui/themed` library within a TypeScript React Native project. This import is necessary to use the Tile component in your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Tile } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Dialog component from the @rneui/themed package. The Dialog.Button component is part of this Dialog component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Dialog.Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Dialog component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component from React Native Elements\nDESCRIPTION: Example showing how to import the Avatar component from react-native-elements package along with documentation components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport { Avatar } from \"react-native-elements\";\nimport Usage from \"../component_usage/Avatar.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Migrating RNE Tooltip to Stateless Usage (Diff)\nDESCRIPTION: Illustrates the breaking change in the `Tooltip` component for RNE v4. The component is now stateless and requires manual state management using the `visible`, `onOpen`, and `onClose` props to control its visibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/migration-v4.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  <Tooltip\n+   visible={open}\n+   onOpen={() => {\n+      setOpen(true);\n+   }}\n+   onClose={() => {\n+      setOpen(false);\n+   }}\n    popover=\"Hey All\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Applying Array Styles to Button Container via Theme and Props (JSX)\nDESCRIPTION: This example demonstrates defining `containerStyle` as an array of style objects within the theme and also passing an array of style objects to the `containerStyle` prop on the `Button` instance. This approach is marked as functional, indicating that array-based styles from theme and props also merge as expected.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with Yarn in Expo (Bash)\nDESCRIPTION: Installs project dependencies using `yarn` and adds the React Native Elements packages (`@rneui/base` and `@rneui/themed`). This is tailored for setting up or troubleshooting RNE within an Expo managed workflow project (created via `create-react-native-app` or Expo XDE). Requires Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing the TabView Component\nDESCRIPTION: This snippet demonstrates how to import the TabView component from the '@rneui/themed' library for use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabView } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial from React Native Elements Themed Package in TypeScript\nDESCRIPTION: This snippet demonstrates the import statement required to use the SpeedDial component from the @rneui/themed package in a TypeScript (TSX) project. Importing this component is necessary before adding a SpeedDial or SpeedDial.Action to a React Native UI. The import expects proper installation of @rneui/themed as a dependency and the use of a TypeScript-compatible environment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SpeedDial } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Badge Component\nDESCRIPTION: This code block demonstrates the theme key to use when customizing the Badge component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Badge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nBadge\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown Guide in React Docs Page - JSX\nDESCRIPTION: This snippet imports a Markdown file (CONTRIBUTING.md) using ES module syntax and then renders it as a React component within a documentation page. Requires a documentation framework that supports importing Markdown as components (such as Docusaurus). The main purpose is to display contributing guidelines; input is the Markdown file, output is the rendered content. Must be used in an environment that handles both JSX and markdown-to-component imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Linking Native Vector Icons - Bash Shell\nDESCRIPTION: Shows the command for linking the react-native-vector-icons native module to your React Native project. This is necessary to ensure icon fonts are properly bundled with the app. The command must be run after the dependency is installed, and is only necessary for non-Expo projects (older React Native CLI workflows).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install main dependencies including react-native-elements, react-native-web, and react-native-vector-icons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/web_usage.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-elements react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Referencing SocialIcon Theme Key in Customization (JavaScript)\nDESCRIPTION: Highlights the theme key 'SocialIcon', which can be used with ThemeProvider for UI customization in a React Native Elements project. This is a string key for advanced theming and doesn't require import; it is a string used with the framework's theming APIs. Developers use this key to override or extend SocialIcon component styles in custom themes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/SocialIcon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSocialIcon\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native\nDESCRIPTION: Shows how to import the `Dialog` component from the '@rneui/themed' library. This import is necessary to use the `Dialog.Actions` sub-component within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Rating Component in React Native\nDESCRIPTION: This snippet demonstrates how to create a read-only Rating component using React Native Elements. It destructures `rating` from props and passes it to the `startingValue` prop of the `Rating` component. The `readonly` prop prevents user interaction, and `imageSize` controls the size of the rating symbols.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported Usage Component in MDX\nDESCRIPTION: Renders the `Usage` component that was previously imported from the `FAB.mdx` file. This tag injects the content of the usage example file directly into this part of the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/FAB.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Button Colors in React Native Elements\nDESCRIPTION: Shows how to apply different colors to buttons using the color prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button>Primary</Button>\n  <Button color=\"secondary\">Secondary</Button>\n  <Button color=\"warning\">Warning</Button>\n  <Button color=\"error\">Error</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing the Dialog Component in React Native (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Dialog` component from the `@rneui/themed` package in a React Native project using TypeScript. This import is the first step to utilizing the Dialog component within an application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Dialog Component with React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates the correct import statement for the Dialog component from the @rneui/themed library. Essential when incorporating dialogs into a React Native application, it relies on the @rneui/themed package as a dependency. No parameters are required; the output is a usable Dialog component as a React element. The snippet is intended for files where Dialog functionality is needed and assumes the relevant package is already installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Theme Key for TabItem Customization\nDESCRIPTION: Specifies the theme key 'TabItem' used for customizing the appearance of the Tab.Item component via the RNEUI ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tab.Item.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTabItem\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup from React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the ButtonGroup component from the @rneui/themed package in a React Native JavaScript or TypeScript project. No external dependencies are required beyond installing @rneui/themed. The code is used at the top of your component files where you intend to use ButtonGroup. Returns the ButtonGroup class or function for UI usage. There are no inputs or outputs for this import statement.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ButtonGroup } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons\nDESCRIPTION: Commands to install react-native-vector-icons, a peer dependency for React Native Elements, using NPM or Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install react-native-vector-icons\n\n# Yarn\nyarn add react-native-vector-icons\n\n# Linking the dependency\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Header Component from React Native Elements\nDESCRIPTION: Code snippet showing how to import the Header component from the React Native Elements themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Header } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements\nDESCRIPTION: This code shows how to import components from React Native Elements, specifically for the Card component documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Color Interface in React Native Elements (TypeScript)\nDESCRIPTION: Defines a TypeScript interface named \\'theme\\' that outlines the color keys used within the React Native Elements theming system. It includes primary and secondary colors, various greys, semantic colors like success/error/warning, and nested platform-specific color sets for iOS, Android, and Web. The structure provides developers with a formal contract for theme objects, but the code does not specify types for each color field, serving primarily as documentation or a template.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/color.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    background;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Rating Display in React Native (JavaScript)\nDESCRIPTION: Illustrates how to configure the `Rating` component for display purposes only, preventing user interaction. This is achieved by setting the `readonly` prop to true. The initial value is set using `startingValue`, likely passed down as a prop (`this.props.rating`), and custom styling is applied via the `style` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/rating.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Web Platform Tooltip Implementation with Modal Component\nDESCRIPTION: Shows how to implement the Tooltip component for web platforms using a custom Modal component since react-native-web doesn't implement Modal natively. Requires importing and using modal-react-native-web package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Tooltip ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Importing the Input Component in React Native\nDESCRIPTION: This snippet shows how to import the `Input` component from the `@rneui/themed` library for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing TabView from React Native Elements\nDESCRIPTION: Example showing how to import the TabView component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TabView } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing TabView from React Native Elements - TypeScript\nDESCRIPTION: This snippet illustrates how to import the TabView component from the @rneui/themed package in a TypeScript React Native project. The import statement is necessary for utilizing TabView and its associated items within tabbed interfaces. Prerequisite: the @rneui/themed package must be installed as a dependency. The code expects TypeScript syntax and is used to enable tab functionality in user interfaces.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TabView } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Initializing SearchBar Reference in React Native\nDESCRIPTION: This snippet demonstrates how to store a reference to the SearchBar component in a React Native application. It uses the ref prop to create a reference that can be used to call methods on the SearchBar.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context Peer Dependency with NPM\nDESCRIPTION: Installs the react-native-safe-area-context library using npm. This is a required peer dependency for handling safe areas in React Native Elements components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons with NPM\nDESCRIPTION: Installs the `react-native-vector-icons` library using npm. This is a required peer dependency for React Native Elements, providing icon support. It's often pre-installed in Expo/CRNA projects but needed for standard `react-native init` projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Icon Component Customization\nDESCRIPTION: Specifies the theme key 'Icon' used for customizing the default styles of the Icon component via the ThemeProvider in @rneui/themed. This key allows for global styling adjustments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Icon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nIcon\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Demonstrates the import of documentation-specific components for tab functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport Usage from \"../component_usage/Overlay.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Web Development Dependencies for Create React App - Bash\nDESCRIPTION: Installs development dependencies such as Babel plugins, customize-cra, and react-app-rewired to enable advanced config overrides for create-react-app. Required for modifying the build process when using React Native Elements on the web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Disabled Buttons in React Native Elements\nDESCRIPTION: Shows how to disable buttons across different variants using the disabled prop. Disabled buttons have reduced opacity and don't respond to user interactions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Button title=\"Solid\" disabled />\n  <Button title=\"Outline\" type=\"outline\" disabled />\n  <Button title=\"Clear\" type=\"clear\" disabled />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for SpeedDial.Action in React Native Elements\nDESCRIPTION: This code snippet indicates the theme key used for customizing the SpeedDial.Action component in React Native Elements using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/SpeedDial.Action.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSpeedDialAction\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements using TypeScript\nDESCRIPTION: This snippet shows how to import the ListItem component from the @rneui/themed package in a TypeScript-based React Native project. It is a prerequisite for using ListItem.Title and other components within the same package. No special configuration is required, but ensure @rneui/themed is installed as a dependency. The import enables access to ListItem and its subcomponents, such as Title, for further UI composition.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Customizing Create React App Babel and Webpack Configuration for React Native Elements - JavaScript\nDESCRIPTION: A custom config-overrides.js file for Create React App, using customize-cra to add Babel plugins and ensure Babel includes React Native Elements source code and dependencies. Allows advanced JavaScript and JSX from React Native libraries and icons to work in CRA-based web projects. Requires customize-cra and react-app-rewired installed in the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Colors Type in React Native Elements Theme\nDESCRIPTION: This snippet demonstrates how to add custom colors to the Colors type in React Native Elements using TypeScript module declaration. It allows for autocompletion of custom colors when accessing the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Colors {\n    primaryLight: string;\n    primaryDark: string;\n    secondaryLight: string;\n    secondaryDark: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: This snippet demonstrates how to import the `Dialog` component from the `@rneui/themed` library. The `Dialog.Title` component is accessed as a property of the imported `Dialog`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing Active Tab.Item with Conditional Styling (TypeScript)\nDESCRIPTION: This code shows how to render a `Tab.Item` component from `react-native-elements`. It utilizes the `containerStyle` prop, passing a function that receives the `active` boolean state. This function conditionally applies a red background color (`backgroundColor: 'red'`) only when the `Tab.Item` is active, demonstrating dynamic styling based on state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Tab.Item.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab.Item\n  containerStyle={(active) => ({\n    backgroundColor: active ? \"red\" : undefined,\n  })}\n>\n  Tab\n</Tab.Item>\n```\n\n----------------------------------------\n\nTITLE: Using Fractions in React Native Elements Rating Component\nDESCRIPTION: This example shows how to use fractions in the Rating component. It sets the fraction to 1 and a starting value of 3.3.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Rating showRating fractions=\"{1}\" startingValue=\"{3.3}\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Header Theme Key in React Native Elements\nDESCRIPTION: Code snippet showing the theme key for the Header component, which can be used for customization with ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHeader\n```\n\n----------------------------------------\n\nTITLE: Theme Key for DialogButton Customization\nDESCRIPTION: Specifies 'DialogButton' as the theme key used for customizing the appearance and behavior of the Dialog.Button component via the ThemeProvider in React Native Elements. This allows for consistent styling across the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDialogButton\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with SafeAreaProvider in JavaScript\nDESCRIPTION: Demonstrates wrapping the root application component with `SafeAreaProvider` from `react-native-safe-area-context`. This setup is required for components relying on safe area insets.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component in React Native (JavaScript)\nDESCRIPTION: This snippet shows how to import the `SpeedDial` component from the `react-native-elements` library. This is the necessary first step to use the component within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/speeddial.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { SpeedDial } from 'react-native-elements';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `ListItem` component from the '@rneui/themed' package. This import is required to utilize the `ListItem.Subtitle` component within your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.Subtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package in a TypeScript-based React Native project. This import is required to use the `ListItem.Swipeable` functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for React Native Elements v4\nDESCRIPTION: This snippet shows how to update the import statement for React Native Elements v4. It demonstrates the change from the old package name to the new one.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import {} from 'react-native-elements'\n+ import {} from '@rneui/themed'\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons with Yarn\nDESCRIPTION: Installs the `react-native-vector-icons` library using Yarn. This is a required peer dependency for React Native Elements, providing icon support. It's often pre-installed in Expo/CRNA projects but needed for standard `react-native init` projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing from React Native Elements Library\nDESCRIPTION: Performs an empty import from the 'react-native-elements' library. While this specific import statement doesn't bring in any named exports, it establishes the context that the file utilizes or relates to this library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/LinearProgress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Image Component\nDESCRIPTION: Shows how to import the Image component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Divider Component\nDESCRIPTION: This code block demonstrates the theme key used for customizing the Divider component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nDivider\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Card component from the '@rneui/themed' package, which is necessary to use Card and its subcomponents such as Card.Title. It requires having the '@rneui/themed' package installed in your project. After import, the Card can be used directly within your React Native component render logic as part of your UI composition.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements in TypeScript\nDESCRIPTION: This code demonstrates how to import the ListItem component from the @rneui/themed package for use in a React Native TypeScript project. Ensure that the @rneui/themed package is installed as a dependency in your project. The code is required as a setup step before rendering any ListItem instances, allowing access to all ListItem features and customization props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only Rating in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use the Rating component in read-only mode. It takes a rating prop and displays it as a static rating.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n\n----------------------------------------\n\nTITLE: Referencing Divider Theme Key in React Native Elements (JavaScript)\nDESCRIPTION: This snippet displays the theme key string for the Divider component, which is used when customizing component styles through a ThemeProvider. Ensure your theme provider setup supports this key. Inputs and outputs are not functionally relevant in this context, but the string 'Divider' acts as an identifier within the theming API.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDivider\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: Shows how to import the Card component from the themed package in React Native Elements. The Card.Divider component is accessed through this import.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Overlay Theme Key Usage in React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows the theme key string ('Overlay') used for customizing the Overlay component using the ThemeProvider in React Native Elements. The theme key can be referenced when defining themes or custom styles for the Overlay component. No dependencies other than applying a ThemeProvider context are required. The key is a simple string and should be used in the theming configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nOverlay\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-safe-area-context for React Native < 0.60.0 - Bash\nDESCRIPTION: This command explicitly links the react-native-safe-area-context native module in projects using React Native version older than 0.60.0. Not required for newer projects, as auto-linking is supported. Executes via the React Native CLI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/getting_started.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React Native Elements\nDESCRIPTION: Shows how to import the Slider component from the React Native Elements library. This is the first step in using the Slider in your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component in React Native Elements\nDESCRIPTION: Example import statement for the ButtonGroup component. The content shows how to import Tabs and TabItem from theme components, along with importing from react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/ButtonGroup.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Colors Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of the `theme` object, specifically the `colors` property. It outlines standard color keys (primary, secondary, background, etc.) and platform-specific nested objects (ios, android, web) for native color definitions. This interface serves as a type definition for theme customization within React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/2.theme object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    background;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Styled Component with Composition (JSX)\nDESCRIPTION: Demonstrates creating a custom `RaisedButton` component by wrapping the standard `Button` component from react-native-elements and applying the `raised` prop by default. This allows reusing the specific style ('raised') without repeating the prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'react-native-elements';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Stable via NPM - Bash\nDESCRIPTION: Installs the stable releases of both @rneui/themed and @rneui/base packages required for most React Native Elements projects. Requires npm to be installed on your machine. Run this command in your project directory to add the latest stable dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Importing the Slider Component in React Native Elements\nDESCRIPTION: This snippet demonstrates how to import the Slider component from the '@rneui/themed' package, making it available for use within a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the @rneui/themed package. This component can be used to create list items with subtitles in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.Subtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Styling Active Tab.Item in React Native (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to conditionally style a `Tab.Item` component based on its active state. The `containerStyle` prop accepts a function that receives the `active` boolean status, allowing different styles (like background color) to be applied when the tab is active.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tab.Item.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab.Item\n  containerStyle={(active) => ({\n    backgroundColor: active ? \"red\" : undefined,\n  })}\n>\n  Tab\n</Tab.Item>\n```\n\n----------------------------------------\n\nTITLE: Assigning a Ref to SearchBar in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to capture a reference to the SearchBar component using the `ref` prop in React. This allows programmatic access to the SearchBar's instance methods from the parent component, storing the reference in `this.search`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons Dependencies (Bash)\nDESCRIPTION: Executes the React Native CLI command to automatically link the native modules (iOS and Android) required by `react-native-vector-icons`. This step connects the installed package to the native project builds, making the vector fonts available in projects initialized with `react-native-init`. Requires `react-native-cli`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Key for Tab Item (TypeScript)\nDESCRIPTION: Displays the theme key identifier ('TabItem') used with the ThemeProvider customization system in React Native Elements. This string is referenced in theming setups to specifically target Tab.Item for style overrides. Requires usage of ThemeProvider context. Input: none; Output: theme key as a reference string.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tab.Item.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nTabItem\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the @rneui/themed package using TypeScript. It is a prerequisite for using the ListItem.Title subcomponent, which allows adding a Title to a ListItem. No additional configuration is required apart from having the @rneui/themed package installed as a dependency. The imported component can then be used in React Native JSX to display customizable list items, with the ability to pass all standard Text props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using Badge Components in React Native Elements (JavaScript)\nDESCRIPTION: Demonstrates the import, configuration, and rendering of Badge components using the react-native-elements library in a React Native application. Examples include badges with numeric, custom, or absent values (resulting in mini badges for status indication), as well as placing badges on Avatars and using the withBadge HOC to augment Icons with badge overlays. Requires React Native and react-native-elements as dependencies, and uses optional props such as status, value, containerStyle, and supports both functional and decorator-based component augmentation. Inputs include status strings, value content, and child components, while outputs are visually rendered badges; key limitation: intended for use within a React Native render tree.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Text, View } from 'react-native'\nimport { Avatar, Badge, Icon, withBadge } from 'react-native-elements'\n\n// Standard badge\n<Badge value=\"99+\" status=\"error\" />\n<Badge value={<Text>My Custom Badge</Text>} />\n\n// Mini badge\n<Badge status=\"success\" />\n<Badge status=\"error\" />\n<Badge status=\"primary\" />\n<Badge status=\"warning\" />\n\n// Avatar with mini badge\n<View>\n  <Avatar\n    rounded\n    source={{\n      uri: 'https://randomuser.me/api/portraits/men/41.jpg',\n    }}\n    size=\"large\"\n  />\n\n  <Badge\n    status=\"success\"\n    containerStyle={{ position: 'absolute', top: -4, right: -4 }}\n  />\n</View>\n\n// withBadge HOC\n\nconst BadgedIcon = withBadge(1)(Icon)\n<BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n\n// Using the decorator proposal\n@connect(state => ({\n  notifications: state.notifications,\n}))\n@withBadge(props => props.notifications.length)\nexport default class MyDecoratedIcon extends React.Component {\n  render() {\n    return (\n      <Icon type=\"ionicon\" name=\"md-cart\" />\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Referencing the Theme Key for SearchBar - React Native Elements - JavaScript\nDESCRIPTION: This snippet highlights the theme key 'SearchBar', which can be used with a theme provider in React Native Elements customization. The theme key enables developers to override default SearchBar component styles by specifying custom theme values. No code execution is involved, but familiarity with the theme provider pattern and documentation links is expected.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSearchBar\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component for React Native Elements\nDESCRIPTION: This snippet demonstrates how to import the main Card component from the '@rneui/themed' package. This import is necessary to utilize the Card component and its subcomponents, such as Card.Title, within a React Native application built with RNEUI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Card.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for React Native Elements Documentation (JavaScript)\nDESCRIPTION: This code snippet imports the Tabs and TabItem components from the @theme package, and attempts to import from react-native-elements. It is a typical pattern in documentation files to show how related UI components and helpers are brought into scope for examples or customization. No additional dependencies beyond the listed packages are required; expect to use these imports in the context of MDX or platform-specific documentation code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Card.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Headings with React Native Elements Text Component - TypeScript\nDESCRIPTION: This snippet shows how to use the <Text> component from React Native Elements to render a level 2 heading with the text 'Hello World'. It assumes React Native Elements is installed and properly linked in the project. The h2 prop automatically styles the text according to the library's predefined h2 styles, with the output being a large, prominent header. No additional input or parameters are required.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx live\\n<Text h2>Hello World</Text>\\n```\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with Yarn or NPM in Shell\nDESCRIPTION: This snippet demonstrates how to install the React Native Elements package in a React Native project using shell commands. Either yarn or npm can be used depending on the developer's preference. No special prerequisites other than Node.js and a React Native-compatible environment. The commands add react-native-elements as a dependency; the choice of package manager does not alter behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-elements\n# or with npm\nnpm install react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Using Overlay with react-native-elements in JavaScript/JSX\nDESCRIPTION: The snippet demonstrates how to implement an Overlay modal in a React Native application using the react-native-elements library. It showcases toggling overlay visibility via a Button, utilizing the useState hook for state management. Dependencies: react (with hooks), react-native-elements; expected parameters include an optional set of overlay props and children; output is a rendered overlay that appears above app content; the overlay closes when the backdrop is pressed. Limitations: the example expects a proper Modal implementation, especially for web platforms.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/overlay.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Overlay } from 'react-native-elements';\n\nconst OverlayExample = () => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleOverlay = () => {\n    setVisible(!visible);\n  };\n\n  return (\n    <View>\n      <Button title=\"Open Overlay\" onPress={toggleOverlay} />\n\n      <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\n        <Text>Hello from Overlay!</Text>\n      </Overlay>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HOCs for Data Fetching and Routing in React Native\nDESCRIPTION: This snippet shows how to configure Higher Order Components (HOCs) for data fetching and routing in a React Native component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nwithHeader({ title: 'Commits' }),\nwithRouter,\nfetch(({ location: { state = {} } }) => (\n `https://api.github.com/repos/${state.owner}/${state.repo}/commits`\n))\n```\n\n----------------------------------------\n\nTITLE: Starting the Example App for Development Testing\nDESCRIPTION: Commands to navigate to the example directory and start the Expo app for testing changes during development.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd example\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package, which is required to use ListItem.Content. Ensure the '@rneui/themed' dependency is installed in your project before using this import. The import grants access to all ListItem subcomponents, including ListItem.Content, for structured layouts in your UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-safe-area-context\nDESCRIPTION: Links the `react-native-safe-area-context` library to the native iOS and Android projects. This step is generally required for React Native versions below 0.60; newer versions handle automatic linking. Running this on newer RN versions might require subsequent unlinking.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Identifying the Card Theme Key in React Native Elements\nDESCRIPTION: Specifies 'Card' as the theme key for customizing the Card component's styles using the ThemeProvider provided by React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCard\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with SafeAreaProvider (JavaScript)\nDESCRIPTION: Demonstrates how to import and use the `SafeAreaProvider` component from `react-native-safe-area-context`. It should wrap the root of your application to enable safe area insets.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Example into Markdown Documentation (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import a Markdown file containing usage examples of the Card component into a documentation page. The import is handled using an ES6 import statement, specifying the relative path to the Card usage markdown. It presumes a documentation build tool (e.g., Docusaurus, Next.js) capable of handling markdown imports, allowing for dynamic embedding of example content.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Card.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/Card/Card.md'\n```\n\n----------------------------------------\n\nTITLE: Assigning a Ref to the SearchBar Component (JavaScript/JSX)\nDESCRIPTION: This code snippet shows how to obtain a reference to the SearchBar component instance using the 'ref' prop in React. Storing the reference (e.g., in 'this.search') allows calling instance methods directly on the SearchBar.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/searchbar.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.ButtonGroup in React Native Elements\nDESCRIPTION: The theme key that can be used for customizing the ListItem.ButtonGroup component through ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nListItemButtonGroup\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Styles to Multiple Component Types (JSX)\nDESCRIPTION: Shows how to define default props for multiple component types within a single theme object. This example configures all `Avatar` components to be rounded and sets a default `fontSize` for the `textStyle` of all `Badge` components within the `ThemeProvider`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  Avatar: {\n    rounded: true,\n  },\n  Badge: {\n    textStyle: { fontSize: 30 },\n  },\n};\n\n...\n\n<ThemeProvider theme={theme}>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons Peer Dependency with NPM\nDESCRIPTION: Installs the 'react-native-vector-icons' library using npm. This is a required peer dependency for React Native Elements in standard React Native projects (created with `react-native init`). Expo and Create React Native App projects usually include this dependency already.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Properties using ThemeConsumer Render Props (JSX)\nDESCRIPTION: Demonstrates accessing the theme object within a custom component using the `ThemeConsumer` component and the render prop pattern. The theme object is passed as an argument to the function provided as a child to `ThemeConsumer`, allowing access to theme properties like `theme.colors.primary`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from 'react-native-elements';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component in React Native Elements\nDESCRIPTION: Shows how to import the Tooltip component from the @rneui/themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Dialog Theme Key Configuration\nDESCRIPTION: The theme key used for customizing the Dialog component through ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDialog\n```\n\n----------------------------------------\n\nTITLE: Importing the Button Component in React Native Elements\nDESCRIPTION: Shows how to import the `Button` component from the `@rneui/themed` library for use in a React Native application. This is the standard way to make the component available in your code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating a Default ListItem in React Native Elements (tsx)\nDESCRIPTION: Demonstrates the basic usage of the `ListItem` component with nested `ListItem.Content`, `ListItem.Title`, and `ListItem.Subtitle` to display simple text information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem>\n  <ListItem.Content>\n    <ListItem.Title>John Doe</ListItem.Title>\n    <ListItem.Subtitle>CEO, Example.com</ListItem.Subtitle>\n  </ListItem.Content>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Migrating Tooltip Component to Stateless Model - diff\nDESCRIPTION: Illustrates upgrading Tooltip from implicit internal state to controlled (stateless) use by passing 'visible', 'onOpen', and 'onClose' props for v4. Inputs are prior Tooltip props; outputs are new props required for Tooltip to work. This snippet ensures the Tooltip's open state is driven by external component state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n  <Tooltip\\n+   visible={open}\\n+   onOpen={() => {\\n+      setOpen(true);\\n+   }}\\n+   onClose={() => {\\n+      setOpen(false);\\n+   }}\\n    popover=\"Hey All\"\\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React Native Elements\nDESCRIPTION: Shows how to import the Badge component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Badge } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Exporting React Native Lists2 Component with StyleSheet\nDESCRIPTION: A code snippet showing the end of a StyleSheet definition with a grey color property and exporting the Lists2 component as the default export.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n  color: 'grey',\n},\n});\n\nexport default Lists2;\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component with React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Divider component from the @rneui/themed package using TypeScript (TSX). Ensure that the @rneui/themed library is installed in your project as a dependency. The import gives access to the Divider component and its configurable props, which include appearance, orientation, and subheader settings. Use this import statement at the top of your TSX files where the Divider is needed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Divider } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Updating ThemeProvider in React Native Elements v4\nDESCRIPTION: This diff demonstrates the removal of the useDark prop from ThemeProvider in React Native Elements v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- <ThemeProvider theme={myTheme} useDark={false}>\n+ <ThemeProvider theme={myTheme}>\n     <Button title=\"My Button\" />\n   </ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Chip Component\nDESCRIPTION: Specifies 'Chip' as the key used within the React Native Elements theme configuration to customize the Chip component's appearance via ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nChip\n```\n\n----------------------------------------\n\nTITLE: Updating create-react-app Scripts for react-app-rewired - Diff\nDESCRIPTION: Demonstrates the required changes to the scripts section of your package.json, replacing react-scripts with react-app-rewired for build, start, and test commands. Required to enable loader and Babel customizations using config-overrides.js.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\\n-   \"start\": \"react-scripts start\",\\n+   \"start\": \"react-app-rewired start\",\\n-   \"build\": \"react-scripts build\",\\n+   \"build\": \"react-app-rewired build\",\\n-   \"test\": \"react-scripts test\",\\n+   \"test\": \"react-app-rewired test\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TabView Component in React Native\nDESCRIPTION: This snippet shows how to import the TabView component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TabView } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Identifying ButtonGroup Theme Key\nDESCRIPTION: Specifies the theme key 'ButtonGroup' used for customizing the component's appearance when using the ThemeProvider from `@rneui/themed`. This key allows applying global styles or themes to all ButtonGroup instances within the provider's scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nButtonGroup\n```\n\n----------------------------------------\n\nTITLE: Aliasing Package for Migration - bash\nDESCRIPTION: Shows how to use yarn to create an alias so 'react-native-elements' points to '@rneui/themed' for migration purposes. Useful in large codebases to minimize changes. Only works with yarn. Required dependency is yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-elements@npm:@rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Installing Edge (Bleeding Edge) React Native Elements Packages - Bash\nDESCRIPTION: Shows how to install pre-release (edge) versions of @rneui/base and @rneui/themed using either npm or yarn. Additionally demonstrates fallback installation from GitHub repositories in case the edge dist-tag isn't working. Useful for users who need the latest features or fixes before official release. Requires a project already set up with React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base@edge @rneui/themed@edge\n```\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nnpm install react-native-elements/react-native-elements#base\n\n# @rneui/themed\nnpm install react-native-elements/react-native-elements#themed\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/base@edge @rneui/themed@edge\n```\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nyarn add @rneui/base@github:react-native-elements/react-native-elements#base\n\n# @rneui/themed\nyarn add @rneui/themed@github:react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Dialog component from the @rneui/themed package in a TypeScript (tsx) environment. It is essential for making the Dialog and Dialog.Actions components available in a React Native Elements setup. No parameters are involved; simply place this statement at the top of the TypeScript or TSX file where you intend to use the dialog features. This import is required before using any Dialog-related props or nested components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the ListItem component from the React Native Elements themed package. This import is necessary to use the ListItem.CheckBox functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing the Avatar Component in React Native (TSX)\nDESCRIPTION: This snippet demonstrates how to import the `Avatar` component from the `@rneui/themed` package within a React Native project using TypeScript (TSX). This import makes the Avatar component available for use in your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Avatar } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component from @rneui/themed (TypeScript)\nDESCRIPTION: This snippet shows how to import the `Dialog` component from the `@rneui/themed` library using ES6 module syntax in a TypeScript/TSX file. This import is required to utilize the `Dialog` component and its associated sub-components like `Dialog.Loading`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing and Linking react-native-vector-icons (React Native CLI)\nDESCRIPTION: Provides commands using yarn or npm to install `react-native-vector-icons`, a required dependency for `react-native-elements` in standard React Native CLI projects. It also includes the command to link the library, noting that manual linking might not be necessary for React Native versions 0.60.0 and above due to auto-linking.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/getting_started.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# yarn\nyarn add react-native-vector-icons\n# or with npm\nnpm i --save react-native-vector-icons\n\n# link\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context via Yarn\nDESCRIPTION: Command to install react-native-safe-area-context, a peer dependency of React Native Elements, using Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Vector Icons using Bash (npm/yarn)\nDESCRIPTION: Provides commands to install the `@expo/vector-icons` package using npm or yarn. This package is the required way to include vector icons in Expo managed projects (like those created with `create-react-native-app` or Expo XDE) and is necessary for React Native Elements icons to work correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install @expo/vector-icons --save\n\n# yarn\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Function Signature of withTheme Higher-Order Component (TypeScript)\nDESCRIPTION: This snippet provides the function signature for the withTheme higher-order component, listing its generic Props and optional themeKey parameter. It describes how to wrap components in order to inject theme context props. Primarily used for TypeScript type reference within a project using @rneui/themed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nwithTheme<Props>(Component, ?themeKey)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Tooltip Configurations in React Native\nDESCRIPTION: This is a runnable React Native example (using SnackPlayer) showcasing different ways to configure the `@rneui/themed` Tooltip component. It demonstrates props like `popover` (for the tooltip content), `withPointer` (to show/hide the caret), `width`, `backgroundColor`, and `containerStyle` through multiple instances within a `ScrollView`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Text, colors } from '@rneui/themed';\nimport { View, StyleSheet, Dimensions, ScrollView } from 'react-native';\n\nconst { height } = Dimensions.get('window');\n\ntype ToolTipComponentProps = {};\n\nconst TooltipComponent: React.FunctionComponent<ToolTipComponentProps> = () => {\nconst toolProps = {};\nreturn (\n  <>\n    <ScrollView>\n      <View style={{ marginVertical: height / 8 }}>\n        <View style={styles.view}>\n          <Tooltip\n            popover={<Text>no caret!</Text>}\n            withPointer={false}\n          >\n            <Text>without caret</Text>\n          </Tooltip>\n          <Tooltip\n            popover={<Text>Tooltip info goes here</Text>}\n            width={200}\n            backgroundColor={colors.primary}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            backgroundColor={colors.secondary}\n            popover={\n              <Text>Tooltip info goes here too. Find tooltip everywhere</Text>\n            }\n            containerStyle={{ width: 200, height: 60 }}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n          <Tooltip\n            containerStyle={{ width: 145, height: 130 }}\n            popover={\n              <Text>\n                {\n                  'Some big text full of important stuff for the super duper user that our design has been created for'\n                }\n              </Text>\n            }\n          >\n            <Text>HUGE</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary1}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>More attention</Text>\n          </Tooltip>\n        </View>\n        <View style={styles.view}>\n          <Tooltip\n            width={200}\n            backgroundColor={colors.primary2}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>I'm different</Text>\n          </Tooltip>\n          <Tooltip\n            width={200}\n            popover={<Text>Tooltip info goes here</Text>}\n          >\n            <Text>Press me</Text>\n          </Tooltip>\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  marginVertical: 50,\n},\n});\n\nexport default TooltipComponent;\n```\n\n----------------------------------------\n\nTITLE: Theme Key for BottomSheet\nDESCRIPTION: This snippet indicates the theme key ('BottomSheet') used for customizing the BottomSheet component's styles via the ThemeProvider in '@rneui/themed'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/BottomSheet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBottomSheet\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates the import statement required to use the Card component from the React Native Elements library in a TypeScript (.tsx) file. The import provides access to all Card sub-components, including FeaturedSubtitle, which receives all Text props for customization. No additional dependencies are needed beyond '@rneui/themed'; ensure your project is set up with React Native and React Native Elements. The imported component is used within JSX, and the snippet is particularly relevant for projects using TypeScript with React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Rating Component\nDESCRIPTION: Demonstrates the theme key used for customizing the Rating component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nRating\n```\n\n----------------------------------------\n\nTITLE: AirbnbRating Props Interface Definition\nDESCRIPTION: TypeScript interface defining the available props for the AirbnbRating component, including rating configuration, styling, and callback functions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/AirbnbRating.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AirbnbRatingProps {\n  count?: number;               // Total number of ratings (default: 5)\n  defaultRating?: number;        // Initial rating value (default: 3)\n  isDisabled?: boolean;         // Whether rating can be modified (default: false)\n  onFinishRating?: (rating: number) => void;  // Callback when rating is selected\n  reviewColor?: string;         // Color of review text (default: '#f1c40f')\n  reviewSize?: number;          // Size of review text (default: 40)\n  reviews?: string[];          // Labels for rating values (default: ['Terrible', 'Bad', 'Okay', 'Good', 'Great'])\n  selectedColor?: string;       // Color of filled stars (default: '#004666')\n  showRating?: boolean;         // Show reviews above rating (default: true)\n  size?: number;               // Size of rating stars (default: 40)\n  starContainerStyle?: ViewStyle;  // Custom style for star container\n  starImage?: string;          // Custom star image source\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons - Yarn\nDESCRIPTION: Command to install the required react-native-vector-icons dependency using Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with FlatList and Avatar â€“ React Native Elements â€“ JavaScript\nDESCRIPTION: This example leverages React Native's FlatList to efficiently render ListItems with avatars and subtitles, using keyExtractor and renderItem helper methods. It requires react-native-elements, React Native's FlatList, and a list array with name, subtitle, and avatar_url properties. The input is a list array; the output is a performant, scrollable list of ListItems with avatars and chevrons, suitable for large datasets.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/listitem.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem\n    title={item.name}\n    subtitle={item.subtitle}\n    leftAvatar={{ source: { uri: item.avatar_url } }}\n    bottomDivider\n    chevron\n  />\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Gradle Build File - Gradle - Android\nDESCRIPTION: This snippet shows the revised 'dependencies' section for the Android Gradle build configuration, replacing deprecated 'compile' statements with 'implementation'. Dependencies are managed as a file tree and with specific external libraries. Required dependencies include Android support libraries and React Native artifacts. The change ensures compatibility with modern Android Studio build requirements and resolves deprecation warnings; it should be placed in 'app/build.gradle'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_19\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\\nimplementation fileTree(dir: \"libs\", include: [\"*.jar\"])\\nimplementation \"com.android.support:appcompat-v7:23.0.1\"\\nimplementation \"com.facebook.react:react-native:+\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar.Accessory Component\nDESCRIPTION: Import statement showing how to import from react-native-elements package, though the specific import is empty in this example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: AirbnbRating Theme Key Configuration\nDESCRIPTION: Indicates the theme key used for customizing the AirbnbRating component through ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/AirbnbRating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAirbnbRating\n```\n\n----------------------------------------\n\nTITLE: Overriding Create React App Scripts for react-app-rewired - Diff\nDESCRIPTION: A diff-style representation for modifying the scripts section of package.json to use react-app-rewired instead of react-scripts, allowing for custom configuration overrides. Ensures Create React App can be extended for use with React Native Elements and related libraries. Replace the script entries as shown.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test\",\n+   \"test\": \"react-app-rewired test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Referencing SpeedDial Usage Component in React Native Elements Documentation - JavaScript\nDESCRIPTION: This snippet imports a Markdown file that contains the usage examples for the SpeedDial component into the main documentation file. The import statement enables the rendering of example usage within the documentation using MDX or a similar markdown-based documentation system. This requires proper configuration of the documentation environment to support such imports, typically seen in Docusaurus or Storybook setups.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/SpeedDial.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Usage from './usage/SpeedDial/SpeedDial.md'\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Button Component Customization\nDESCRIPTION: Specifies the theme key (`Button`) used for customizing the Button component styles via the ThemeProvider in React Native Elements. This key allows applying global styles to all Button instances through the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nButton\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the `ListItem` component from the '@rneui/themed' library, which is a prerequisite for using the `ListItem.Title` sub-component within a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNEUI with NPM\nDESCRIPTION: Installs the bleeding-edge versions of the core React Native Elements packages (@rneui/base and @rneui/themed) using the npm package manager and the '@edge' dist-tag.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands for React Native Init\nDESCRIPTION: Series of bash commands for clean installation and linking of react-native-elements and vector icons in a react-native-init project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n\n# yarn\nyarn && yarn add react-native-elements\n\n# yarn\nyarn add react-native-vector-icons\n\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Integrating Badge Component within ListItem in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Shows a simple example of embedding a `Badge` component from `@rneui/themed` inside a `ListItem`. Demonstrates basic usage and styling of the `Badge` component using its props like `value`, `textStyle`, and `containerStyle`. Depends on `@rneui/themed` components (`ListItem`, `Badge`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Importing SocialIcon Component in React Native\nDESCRIPTION: This snippet shows how to import the SocialIcon component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SocialIcon } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Identifying the Theme Key for Card.Divider Customization\nDESCRIPTION: This snippet shows the theme key `CardDivider`. This key is used within a theme object, typically provided via a `ThemeProvider`, to apply custom styles to all `Card.Divider` components throughout the application. It allows for centralized styling adjustments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCardDivider\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar from React Native Elements in JavaScript\nDESCRIPTION: Demonstrates how to import the Avatar component from the '@rneui/themed' package for use in a React Native Elements application. Required dependency: '@rneui/themed'. No parameters are involved in this import statement. This snippet is essential for initializing and using Avatar or Avatar.Accessory components within a project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Avatar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Updating CheckBox Component Props in React Native Elements v4\nDESCRIPTION: This diff demonstrates the addition of new Pressable-related props (onPressIn and onPressOut) to the CheckBox component in React Native Elements v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  <CheckBox\n    title=\"I agree\"\n    onPress={()=>{}}\n    onLongPress={()=>{}}\n+   onPressIn={()=>{}}\n+   onPressOut={()=>{}}\n    onPress={() => {}}\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component with React Native Elements in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the Badge component from the '@rneui/themed' package using TypeScript for a React Native project. It is a prerequisite for using badges in the UI, and requires installation of the 'react-native-elements' (now '@rneui/themed') library. The import statement allows access to the Badge component which can then be customized using its props as described in the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Badge } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the `Overlay` component from the `@rneui/themed` package for use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Overlay } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Fixing Component Import Spelling in React Native Elements (JSX)\nDESCRIPTION: This example demonstrates how to correctly import a component from React Native Elements, showing both the incorrect and correct ways to import the ListItem component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\nimport { Listitem } from '@rneui/themed';\n\n// Correct\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Swipeable in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the @rneui/themed package, which includes the Swipeable variant.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Cleaning iOS Build Cache using Bash\nDESCRIPTION: Command to remove the iOS build directory (`ios/build`). This is a troubleshooting step used to resolve 'Unrecognized font' errors or other build caching issues on iOS after linking or updating dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ios/build\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native Elements\nDESCRIPTION: Shows how to import the Tab component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Tab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component Usage in React\nDESCRIPTION: This code snippet shows how to import the Dialog usage documentation from a separate file. It uses the import statement to bring in the Usage component from a specific path.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Usage from \"../component_usage/Dialog.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Stable RNE with NPM\nDESCRIPTION: Installs the stable versions of the core React Native Elements packages (@rneui/themed and @rneui/base) using the Node Package Manager (npm).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNE Directly from GitHub with NPM\nDESCRIPTION: These commands install the bleeding-edge versions of `@rneui/base` and `@rneui/themed` directly from their respective branches (`base`, `themed`) on the GitHub repository using npm. This is an alternative if installing via the `@edge` tag fails.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nnpm install react-native-elements/react-native-elements#base\n\n# @rneui/themed\nnpm install react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package in a TypeScript React Native project. The import is necessary to utilize the ListItem.Title component and its associated props. Ensure that '@rneui/themed' is installed as a project dependency.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing SocialIcon Dependencies\nDESCRIPTION: Import statements showing required dependencies for using SocialIcon component and documentation structure\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/SocialIcon.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Chip Component in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `Chip` component from the `@rneui/themed` package. This import makes the Chip component available for use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chip } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component from React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the @rneui/themed package to use ListItem.Title functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons Dependency (Bash)\nDESCRIPTION: Uses the `react-native link` command (via `npx`) to link the native parts of the `react-native-vector-icons` library. This step is usually automatic for React Native 0.60+ but might be needed for older versions or troubleshooting, or might need to be undone using `unlink` if autolinking causes issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context (Yarn)\nDESCRIPTION: Installs react-native-safe-area-context, another peer dependency for React Native Elements, using Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Illustrating Header Component Precedence in JavaScript/JSX\nDESCRIPTION: This snippet demonstrates that components defined as direct children take precedence over components defined via props. `<MyCustomLeftComponent />` passed as a child overrides the `leftComponent={{ icon: 'menu' }}` prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/header.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<Header leftComponent={{ icon: 'menu' }}>\n  <MyCustomLeftComponent />\n  <MyCustomCenterComponent />\n  <MyCustomRightComponent />\n</Header>\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Type with Custom Properties in React Native Elements\nDESCRIPTION: Shows how to add custom properties to the Theme type using TypeScript module declaration. This allows for adding any custom properties or functions to the theme object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Theme {\n    myCustomProperty: string;\n    myCustomFunction: () => void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Value Type for onChange Prop in TabView\nDESCRIPTION: Indicates that the default value for the `onChange` prop of the `TabView` component is a function. This prop is a callback executed when the active tab index changes, receiving the new index as an argument.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/TabView.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nFunction\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Key for Tile in React Native Elements (JavaScript)\nDESCRIPTION: This snippet displays the theme key for the Tile component, which can be referenced when customizing theme values with a ThemeProvider. It does not require any imports and is typically used for configuration and documentation purposes to indicate which string key relates to the Tile component within theming logic.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTile\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component from @rneui/themed in TypeScript\nDESCRIPTION: This snippet shows the TypeScript import statement required to bring the ListItem component into scope from the '@rneui/themed' package. This is necessary to use the ListItem component and its nested components like ListItem.Input within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Theme Pitfall Example 2: Matching Array Styles (JSX)\nDESCRIPTION: Illustrates another working scenario for theme style merging. Both the theme's `containerStyle` and the component prop `containerStyle` are defined as arrays of style objects. Because the types match, the styles merge correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Migrating to Pressable Event Props - diff\nDESCRIPTION: Demonstrates updating a 'CheckBox' component to support Pressable's event handlers ('onPressIn' and 'onPressOut'). Input is a pre-v4 component instance; output is a v4 component with additional event props. Ensures compatibility with the new interaction model and highlights that Pressable's prop set is available.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  <CheckBox\\n    title=\"I agree\"\\n    onPress={()=>{}}\\n    onLongPress={()=>{}}\\n+   onPressIn={()=>{}}\\n+   onPressOut={()=>{}}\\n    onPress={() => {}}\\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Theme Components\nDESCRIPTION: Imports the Tabs and TabItem components from the @theme namespace, commonly used in Docusaurus for creating tabbed content within documentation pages.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported Usage Component (MDX)\nDESCRIPTION: This MDX/JSX snippet renders the 'Usage' component that was previously imported from '../component_usage/Card.mdx'. This effectively embeds the Card component's usage examples into the current documentation page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Card.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Implementing navigation in Home component\nDESCRIPTION: Adds navigation to the CommitList screen when the Submit button is pressed in the Home component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { withRouter } from '../Utils/Routing';\n\nonPressButton = () => this.props.history.push('/commit');\n\n// In render method\n<Button\n  onPress={this.onPressButton}\n  // ... other props\n/>\n\nexport default withRouter(Home);\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNE with NPM\nDESCRIPTION: This command installs the bleeding-edge versions of the core React Native Elements packages (`@rneui/base` and `@rneui/themed`) using npm with the `@edge` dist-tag. These versions contain the latest features and fixes but might be unstable.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Key for ListItemSubtitle in React Native Elements\nDESCRIPTION: This code snippet demonstrates the theme key used for customizing the ListItemSubtitle component in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Subtitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemSubtitle\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with Yarn (React Native Init) (Bash)\nDESCRIPTION: Installs project dependencies using Yarn (`yarn`) and then adds the `react-native-elements` package to a standard React Native project (`react-native-init`). This is part of the setup or troubleshooting process.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Referencing the Theme Key for TabView.Item (JavaScript)\nDESCRIPTION: This snippet specifies the theme key for customizing TabView.Item using the ThemeProvider in React Native Elements. Utilize 'TabViewItem' as the key to apply custom styles or override default styles in the context of a theme. No additional dependencies are required beyond having ThemeProvider set up in your project; the value is simply used in theming configurations and is not directly executable code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/TabView.Item.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTabViewItem\n```\n\n----------------------------------------\n\nTITLE: Loading Icon Fonts for react-native-vector-icons in App.js (Web) - JSX\nDESCRIPTION: Style tag in JSX to load MaterialIcons and FontAwesome fonts for use with react-native-vector-icons on web platforms. Uses require statements to ensure correct font loading in applications built with react-native-web. Place this in the root component or index file to ensure icons render.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on React Native Elements SearchBar via Ref (JavaScript)\nDESCRIPTION: This code shows how to call various methods (`focus`, `blur`, `clear`, `cancel`) on a `SearchBar` instance using the reference obtained via the `ref` prop (stored in `this.search`). The `cancel` method is noted as being specific to iOS and Android platform styles when the `platform` prop is set accordingly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SearchBar/SearchBar.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.ButtonGroup Styling\nDESCRIPTION: Identifies the theme key 'ListItemButtonGroup' used within the react-native-elements (RNEUI) ThemeProvider. This key allows for targeted styling and customization of the ListItem.ButtonGroup component through the application's theme configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nListItemButtonGroup\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component with React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Icon component from the @rneui/themed package into a TypeScript React Native project. It requires that the @rneui/themed package is installed as a project dependency. The Icon component can then be used to add visual indicators and action cues to the application's user interface. There are no input parameters for this import, and using it successfully depends on a properly configured React Native environment with support for the React Native Elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Extending Colors Type in React Native Elements Theme\nDESCRIPTION: Demonstrates how to add custom colors to the Colors type using TypeScript module declaration. This allows for autocompletion of custom colors when accessing the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Colors {\n    tertiary: string;\n    accent: string;\n    surface: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup from React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the ButtonGroup component from the @rneui/themed package for use in a React Native app with TypeScript. The import provides access to a styled and functional segmented button group, which supports extensive customization and theming. No additional dependencies are required other than the @rneui/themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ButtonGroup } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Displaying a Read-Only Rating in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to render a non-interactive Rating component using React Native Elements. It utilizes the `readonly` prop to disable user interaction and `startingValue` to set the displayed rating, referencing a `rating` variable presumably passed via props. `imageSize` and `style` props are also used for customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { rating } = this.props;\n\n<Rating imageSize={20} readonly startingValue={rating} style={styles.rating} />;\n```\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies and Artifacts - Bash\nDESCRIPTION: Provides a bash command for removing the node_modules directory and yarn.lock file to ensure a clean environment before dependency installation. Intended for React Native projects to resolve issues related to stale or corrupt dependencies. Must be run from the project root directory. Inputs: bash shell/terminal; outputs: deleted node_modules and yarn.lock.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay from React Native Elements (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the Overlay component from the '@rneui/themed' package for use in a React Native project. Dependency required: '@rneui/themed' must be installed in your project. This import statement should be included at the top of your JavaScript/TypeScript files to access the Overlay component and its functionalities.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Overlay } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for SocialIcon in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to specify the theme key for the SocialIcon component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/SocialIcon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nSocialIcon\n```\n\n----------------------------------------\n\nTITLE: Importing the Tile Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Tile component from the '@rneui/themed' package for use in a React Native (TypeScript) project. No additional dependencies are required beyond React Native Elements and its themed variant. The imported Tile can be used as a UI building block to display content cards with images, captions, and titles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tile } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on SearchBar Instance in JavaScript\nDESCRIPTION: Example of how to access and call methods on a referenced SearchBar component, including focus(), blur(), clear(), and platform-specific cancel() methods.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n\n----------------------------------------\n\nTITLE: Rendering a Default ListItem in React Native Elements (TypeScript/React Native)\nDESCRIPTION: This code snippet provides the simplest usage example of the ListItem component, rendering a list row with a title and subtitle using ListItem.Content, ListItem.Title, and ListItem.Subtitle. No icons or custom styling are involved. Required dependency: '@rneui/themed'. Inputs include child components with text content; outputs a single styled list row. Limitations: basic usage without interactivity.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<ListItem>\n  <ListItem.Content>\n    <ListItem.Title>John Doe</ListItem.Title>\n    <ListItem.Subtitle>CEO, Example.com</ListItem.Subtitle>\n  </ListItem.Content>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for Overlay Component\nDESCRIPTION: This snippet identifies the theme key name (`Overlay`) used when customizing the Overlay component through the React Native Elements ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nOverlay\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay with Modal for Web Platforms in React Native\nDESCRIPTION: This snippet demonstrates how to properly configure the Overlay component when using react-native-web, which requires passing a valid Modal component implementation through the ModalComponent prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Overlay ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Embedding Usage Component in Markdown (Markdown)\nDESCRIPTION: This snippet embeds the imported Usage component, rendering the usage instructions for the custom Image component inline within the documentation. It assumes the presence of an MDX-aware environment where React components or imported Markdown files can be inserted directly into documentation content for live rendering or content modularization. The input does not specify parameters; it simply renders the imported component as part of the documentation flow.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Image.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing ThemeProvider from @rneui/themed - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the ThemeProvider component from the '@rneui/themed' library. ThemeProvider is the entry point for applying and propagating custom themes throughout the component tree in a React Native Elements project. The import statement is required wherever you wrap components with theme context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Text Documentation Page (JavaScript/MDX)\nDESCRIPTION: This snippet imports necessary components for structuring and displaying the documentation page. It includes `Tabs` and `TabItem` likely for layout, imports usage examples from a separate MDX file (`../component_usage/Text.mdx`), and includes an empty import statement from `react-native-elements`, potentially as a placeholder or for context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Text.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Key for Switch Component - TypeScript\nDESCRIPTION: This snippet denotes the theme key ('Switch') used for customizing the Switch component's styling via a theme provider. When using theming libraries or custom themes, reference this key to override the Switch's appearance globally. No code execution is required; this is a convention for maintaining consistent component styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSwitch\n```\n\n----------------------------------------\n\nTITLE: Importing the Tooltip Component\nDESCRIPTION: Imports the Tooltip component from the '@rneui/themed' library for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tooltip } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay Component in React Native Elements\nDESCRIPTION: Shows how to import the Overlay component from the React Native Elements themed package. This is the first step to using the Overlay component in your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Overlay } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements - Stable Yarn\nDESCRIPTION: Command to install the stable version of React Native Elements using Yarn package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Linking Vector Icons Dependency in React Native\nDESCRIPTION: Links the native modules for 'react-native-vector-icons' in a standard React Native project. This step is typically required for React Native versions below 0.60. For versions 0.60 and above, auto-linking is usually sufficient, and manual linking might cause issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Tab.Item Component\nDESCRIPTION: Example of importing the Tab.Item component from React Native Elements library along with documentation components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Tab.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component from React Native Elements\nDESCRIPTION: Basic import statement showing how to import the Slider component and related documentation utilities.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Slider.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates the correct import statement for including the Badge component from the '@rneui/themed' package in a React Native project. Ensure that the '@rneui/themed' dependency is installed in your project. No props are shown here; you must use the imported Badge component according to its documented props and within a valid React Native component tree.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Badge } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Card component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Area Context - Yarn\nDESCRIPTION: Command to install the required react-native-safe-area-context dependency using Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Installing Web Dev Dependencies for CRA with Yarn\nDESCRIPTION: Installs necessary development dependencies (`customize-cra`, `react-app-rewired`, `@babel/plugin-proposal-class-properties`) using yarn to allow customization of the Create React App build process for React Native Elements compatibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Themes with createTheme Helper - diff\nDESCRIPTION: Illustrates how to create a custom theme using the 'createTheme' helper instead of manually building FullTheme objects. Supports light and dark themes. Update object structure as shown.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- const myTheme: FullTheme = {\\n+ const myTheme = createTheme({\\n-  colors: {\\n+  lightColors:{\\n     primary: '#f2f2f2',\\n   },\\n+  darkColors: {\\n+   primary: '#121212',\\n+  },\\n+  mode: 'dark',\\n};\n```\n\n----------------------------------------\n\nTITLE: Theme Key Configuration for AirbnbRating\nDESCRIPTION: Specifies the theme key to use when customizing the AirbnbRating component with ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/AirbnbRating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nAirbnbRating\n```\n\n----------------------------------------\n\nTITLE: Importing Header Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Header component and related components for documentation purposes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Header.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for SearchBar in React Native Elements\nDESCRIPTION: This code block demonstrates the theme key to use when customizing the SearchBar component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nSearchBar\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Button Component - React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Button component from '@rneui/base' and use it in a functional React component. No additional dependencies are required beyond a configured React Native app with the appropriate package installed. The Button receives a 'title' prop and, when rendered, displays a native-styled button with the specified text as its label. Input: None; Output: Renders a \"Hello World\" button. There are no dynamic props or custom styles in this basic example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Button } from '@rneui/base';\n\nconst App = () => {\n  return <Button title=\"Hello World\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with a Linear Gradient Background using TypeScript\nDESCRIPTION: Shows how to apply a linear gradient background to a Button. This requires providing a `LinearGradient` component (e.g., from `react-native-linear-gradient`) to the `ViewComponent` prop and configuring gradient colors and direction via the `linearGradientProps` object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: [\"#FF9800\", \"#F44336\"],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n>\n  Linear Gradient\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using ThemeConsumer in React Native Elements\nDESCRIPTION: This snippet shows how to use the ThemeConsumer component with render props to access the theme without wrapping components with withTheme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/1.themeprovider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: ListItem with RightIcon Props in React Native Elements 1.0\nDESCRIPTION: Example showing how to add an onPress handler to the rightIcon in a ListItem component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2019-01-27-1.0-release.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem rightIcon={{ name: 'home', onPress: () => console.log('clicked') }} />\n```\n\n----------------------------------------\n\nTITLE: Embedding Usage Examples using MDX Component (MDX)\nDESCRIPTION: This MDX snippet renders a component named 'Usage'. Based on the preceding import `import Usage from \"../component_usage/ListItem.mdx\";`, this tag dynamically includes the content (likely code examples and explanations showing how to use the ListItem component) from the specified `.mdx` file directly into the documentation page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with npm\nDESCRIPTION: Command to install the @rneui/base package, which is the core package for React Native Elements UI toolkit. This is the first step to start using the library in your React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/packages/base/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Configuring Create React App for React Native Elements\nDESCRIPTION: Configures a Create React App project to work with React Native Elements by creating a custom Babel configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering the Snack Component using JSX\nDESCRIPTION: This JSX snippet renders the previously imported `Snack` component. It uses the self-closing tag syntax common in React/React Native for components that don't require children. This will instantiate and display the UI element defined by the `Snack` component, likely a snackbar notification.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Tab/Tab.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Referencing the Image Theme Key in React Native Elements (JavaScript)\nDESCRIPTION: This snippet provides the theme key 'Image', used with ThemeProvider to apply custom theming to the Image component in React Native Elements. Using the correct theme key enables consistent styling across the application. Ensure that the ThemeProvider is configured properly and that the key matches the component for theming to work.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nImage\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay Component with Modal for Web Platform in React Native\nDESCRIPTION: This snippet demonstrates how to use a custom Modal component for web compatibility with the Overlay component in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Overlay ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in TypeScript\nDESCRIPTION: This snippet demonstrates the necessary import statement to use the `Badge` component from the `@rneui/themed` library within a React Native project using TypeScript. It makes the `Badge` component available for rendering in the application's UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for DialogTitle Customization\nDESCRIPTION: This snippet shows the theme key `DialogTitle` used for customizing the appearance of the `Dialog.Title` component through the React Native Elements ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDialogTitle\n```\n\n----------------------------------------\n\nTITLE: Installing CircularSlider with NPM - Bash\nDESCRIPTION: This snippet shows the command to install the @rneui/circular-slider package using npm. Run this command in the terminal within your project's root directory. NPM is required for dependency management, and this command adds the CircularSlider package to your JavaScript/React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/universe/CircularSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/circular-slider\n\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component in TypeScript\nDESCRIPTION: This snippet shows how to import the Tooltip component from the '@rneui/themed' package in a TypeScript React Native project. This import is necessary to use the Tooltip component within your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Key for Header in React Native Elements (JavaScript)\nDESCRIPTION: This snippet indicates the theme key ('Header') used within the ThemeProvider customization system of the React Native Elements library. It is referenced when customizing default styles or props with a global theme. The string 'Header' serves as an identifier for the theming context and does not require additional dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHeader\n```\n\n----------------------------------------\n\nTITLE: Importing Chip Component in React Native Elements\nDESCRIPTION: Example of importing the Chip component and related documentation components from their respective packages. This includes imports for documentation tabs and usage examples.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Chip.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to ListItems in React Native Elements\nDESCRIPTION: This example shows how to add a badge to a ListItem in React Native Elements. It demonstrates customizing the badge's value, text style, and container style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Installing Stable RNEui Packages with NPM (Bash)\nDESCRIPTION: Installs the stable releases of the `@rneui/themed` and `@rneui/base` packages using the Node Package Manager (npm). These are the core packages for React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Importing Tile Component in React Native\nDESCRIPTION: This code snippet shows how to import the Tile component and related modules for documentation purposes. It includes imports for Tabs, TabItem, and a usage example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Tile.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in React Native\nDESCRIPTION: This snippet shows how to import the Icon component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies for Expo App - Bash\nDESCRIPTION: Presents a bash command to remove node_modules, yarn.lock, and package-lock.json to ensure a clean dependency state in Expo apps. Used before reinstallation of dependencies. Inputs: shell command; outputs: deleted node_modules and lock files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Divider Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates the theme key used for customizing the Divider component in React Native Elements using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nDivider\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from @rneui/themed in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package in a TypeScript/TSX file. This import is the first step required to utilize the ListItem component and its associated sub-components, such as ListItem.Chevron, within a React Native application using the RNEUI library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.Chevron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Identifying the SpeedDial Theme Key for Customization\nDESCRIPTION: Specifies the theme key 'SpeedDial' used for customizing the appearance and behavior of the SpeedDial component through the ThemeProvider in react-native-elements/themed. This allows applying consistent styling across the application using the theme context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/SpeedDial.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpeedDial\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons Dependency - Bash\nDESCRIPTION: These commands add the react-native-vector-icons package to your project using npm or yarn. This dependency is required unless your project was bootstrapped with Expo or Create React Native App, in which case it is included by default. This enables icon support in UI components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/getting_started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n\n# or with yarn\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Tests with Jest - Bash\nDESCRIPTION: These command-line instructions allow developers to update Jest snapshot test files after intended UI or functional changes in the React Native Elements project. The commands rely on having Jest and the respective package manager (yarn or npm) configured. Running these commands will rewrite the current snapshot files to match the latest render output. 'yarn test -u' and 'npm run test -u' both serve the same purpose, depending on the used package manager. Requires an existing Jest test suite and snapshot tests; improper use may overwrite correct snapshots.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn test -u\\n\\n# npm\\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Subtitle Component\nDESCRIPTION: Import statement showing how to import components from react-native-elements package\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.Subtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing CheckBox from @rneui/themed in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the CheckBox component from the '@rneui/themed' package. This import statement is necessary to utilize the CheckBox component within a React Native application built with TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CheckBox } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Dialog` component from the `@rneui/themed` library in a TypeScript React Native project. This import is necessary to use the `Dialog` component and its subcomponents like `Dialog.Loading`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native Elements\nDESCRIPTION: Shows how to import the Tab component from the @rneui/themed package to use Tab.Item in your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Tab.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Usage Example in Javascript\nDESCRIPTION: Imports a component named `Usage` from an external MDX file (`../component_usage/FAB.mdx`). This allows modular documentation where detailed usage examples for the FAB component are maintained separately and included here.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/FAB.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from \"../component_usage/FAB.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Button Component Prop Changes - diff\nDESCRIPTION: Shows the transition for Button from using props to JSX children. 'size', 'radius', and 'color' are added as props, while the button label is passed as a child node for better flexibility. Adjust usage as per the new API.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  <Button\\n+  size='sm',\\n+  radius='md'\\n+  color='primary'\\n-  title='Press me'\\n-  />\\n+  >\\n+ Press me\\n+ </Button>\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons for Standard React Native\nDESCRIPTION: Shell command using Yarn to add the `react-native-vector-icons` library, which is a common dependency for React Native Elements and often the source of font-related errors if missing or not linked.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Identifying the Theme Key for Slider Component Customization\nDESCRIPTION: This snippet shows the theme key ('Slider') associated with the Slider component. This key is used when customizing the component's appearance and behavior through the ThemeProvider in react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSlider\n```\n\n----------------------------------------\n\nTITLE: Rendering TabView Usage Documentation\nDESCRIPTION: This code snippet shows how to render the usage documentation for the TabView component. It imports and renders a Usage component, which likely contains examples and explanations of how to use the TabView.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/TabView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Documentation into Markdown (JavaScript)\nDESCRIPTION: Imports a markdown documentation file ('./usage/Avatar/Avatar.md') into the current file, typically for embedding or referencing usage examples in an MDX or documentation setup for React Native Elements. This pattern assumes a documentation build pipeline that recognizes such imports, reading and rendering live code and usage details. No parameters are required; the output is presumed to be available markdown content integrated into the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/Avatar/Avatar.md'\n```\n\n----------------------------------------\n\nTITLE: Overriding Internal Styles with ThemeProvider in JSX\nDESCRIPTION: Demonstrates how styles defined within the `ThemeProvider`'s theme object take precedence over the component's internal default styles. Here, the `Button`'s `titleStyle.color` is set to 'red' via the theme, overriding the default white color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Cleaning Platform Build Caches for iOS/Android (Bash)\nDESCRIPTION: This set of bash commands removes build artifacts for iOS ('ios/build') and Android ('android/build', 'android/app/build') to resolve font caching and linking errors, such as 'Unrecognized font x'. These should be run in the root of the React Native project after linking or reinstallation steps. No parameters; outputs are deleted build folders.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\niOS - rm -rf ios/build\\n\\nAndroid - rm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Icons using Map Function in React Native\nDESCRIPTION: This example shows how to render a list of items with icons using the map function in React Native Elements. It uses the ListItem and Icon components to display item information with corresponding icons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Icon } from 'react-native-elements'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: ListItem with Chevron Styling in React Native Elements 1.0\nDESCRIPTION: Example of customizing the chevron appearance in a ListItem component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2019-01-27-1.0-release.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem chevron={{ color: 'pink' }} />\n```\n\n----------------------------------------\n\nTITLE: Installing Create React Native Web App CLI\nDESCRIPTION: Installs the Create React Native Web App CLI tool globally using npm.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm i -g create-react-native-web-app\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard Related Modules in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates the import of theme-specific components and the PricingCard usage documentation for integration with a React Native Elements project. Dependencies include the @theme/Tabs, @theme/TabItem, and PricingCard.mdx. The imported modules are used for documentation structure and live usage demonstrations within the docs site. No user-provided parameters are required; customization is handled via props within separate usage examples.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/PricingCard.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Themed Button Component in React Native Elements\nDESCRIPTION: Exports the Buttons component wrapped with the withTheme higher-order component from React Native Elements. This enables the component to access theme properties provided by the theme context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default withTheme(Buttons, '');\n```\n\n----------------------------------------\n\nTITLE: Installing RNE v4 Packages - bash\nDESCRIPTION: This snippet provides bash commands to install the necessary base and themed packages from '@rneui' using npm or yarn. Required dependencies are @rneui/base and @rneui/themed packages. No parameters are needed. Installs the libraries globally in the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base @rneui/themed\\n\\n# or with yarn\\nyarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Elements for Web\nDESCRIPTION: Configuration for using React Native Elements in a web project with create-react-app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Default Value Type for onSwipeStart Prop in TabView\nDESCRIPTION: Indicates that the default value for the `onSwipeStart` prop of the `TabView` component is a function. This prop is a callback executed when the user initiates a swipe gesture on the view, receiving the swipe direction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/TabView.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nFunction\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for DialogButton Customization (PlainText)\nDESCRIPTION: This snippet shows the theme key 'DialogButton' which is used within the ThemeProvider for customizing the styles of the Dialog.Button component in react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDialogButton\n```\n\n----------------------------------------\n\nTITLE: Using Theme Key for ButtonGroup in React Native Elements - JavaScript\nDESCRIPTION: This snippet documents the theme key for the ButtonGroup component in the @rneui/themed library. It is used with the ThemeProvider component to apply custom theming. The key is a string literal and assumes setup of React Native Elements' customization system. Input is a string, output is to be used as a theme configuration reference.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nButtonGroup\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component in React Native (TSX)\nDESCRIPTION: This code snippet demonstrates how to import the `SpeedDial` component from the `@rneui/themed` package in a TypeScript-based React Native project. This import is essential for using both the `SpeedDial` container and its nested `SpeedDial.Action` items.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SpeedDial } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Rendering an Imported Markdown Component in MDX (JSX)\nDESCRIPTION: This JSX tag renders the `ContributionGuide` component. Since `ContributionGuide` was imported from a Markdown file via MDX processing, this line effectively displays the content of the `CONTRIBUTING.md` file at this location on the page. This relies on the underlying MDX/React rendering engine.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/repo/contributing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the ListItem component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for Header in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to render the Usage component for the Header documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Usage Examples (MDX)\nDESCRIPTION: Imports an MDX file containing usage examples for the Divider component and renders it using an MDX component tag. This pattern allows separating documentation content from usage examples.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from \"../component_usage/Divider.mdx\";\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay ModalComponent for React Native Web (JSX)\nDESCRIPTION: This JSX snippet demonstrates configuring the `@rneui/themed` `Overlay` component for `react-native-web`. Since `react-native-web` lacks a built-in `Modal`, a compatible implementation (e.g., `modal-react-native-web`) must be imported and passed to the `ModalComponent` prop to ensure correct rendering on the web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Overlay ModalComponent={Modal} ... />\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Markdown as a Component - React Native Elements - JavaScript\nDESCRIPTION: This snippet demonstrates importing a Markdown file containing usage examples (ListItem.md) as a JavaScript/React component. This pattern requires appropriate build tooling (e.g., webpack, MDX loader) to allow importing Markdown as a component. The imported Usage component can then be rendered within the JSX to provide live documentation or code samples for ListItem usage. It presumes the reader's environment supports such imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/ListItem.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/ListItem/ListItem.md'\n```\n\n----------------------------------------\n\nTITLE: Applying Matching Object Styles with ThemeProvider in React Native\nDESCRIPTION: This snippet demonstrates a working scenario where both the theme configuration and the local component prop define `containerStyle` as an object. Because the types match, the styles merge correctly according to the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component from React Native Elements\nDESCRIPTION: Shows how to import the Switch component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Commit List Content in React Native\nDESCRIPTION: This snippet shows the main render method and the renderContent method for displaying the commit list or a loading indicator.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_13\n\nLANGUAGE: JSX\nCODE:\n```\n<View style={styles.container}>\n  {this.renderContent()}\n</View>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderContent = () => (\n  this.props.loading ?\n    <ActivityIndicator color='#87ceeb' /> :\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={this.props.data}\n      renderItem={this.renderItem}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Packages with Yarn (Bash)\nDESCRIPTION: This pair of bash commands installs required core packages ('@rneui/base', '@rneui/themed') for React Native Elements using 'yarn'. The first command installs project dependencies; the second adds the requisite UI kits. These should be run in the project root directory. Dependencies: yarn package manager. Output: Node modules for the specified packages are installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for SpeedDial.Action\nDESCRIPTION: Specifies 'SpeedDialAction' as the theme key used for customizing the SpeedDial.Action component via the ThemeProvider in react-native-elements. This allows developers to apply specific styles to all SpeedDial.Action instances through the theme configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/SpeedDial.Action.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpeedDialAction\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements Themed Package (JavaScript)\nDESCRIPTION: This code demonstrates how to import the ListItem component from the '@rneui/themed' package for use in your React Native project. Ensure that '@rneui/themed' is installed in your project dependencies. This import is essential for utilizing the ListItem, including its Swipeable variant, in component implementations. No input is required and the output is the ListItem component available for use within your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Exporting Styled React Native Component - JavaScript\nDESCRIPTION: This snippet exports the Lists2 component in a React Native project. It is intended for use in other modules or screens and presumes that Lists2 has been defined earlier, possibly utilizing customized color and style properties. There are no additional dependencies needed beyond React Native, and the main output is a default export statement exposing Lists2 to the importing context. The code is constrained to standard ES6 module export syntax.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Lists2;\n```\n\n----------------------------------------\n\nTITLE: Installing Edge RNEui Packages from GitHub with Yarn (Bash)\nDESCRIPTION: Provides commands to install the bleeding-edge versions of `@rneui/base` and `@rneui/themed` directly from their respective GitHub branches (`base` and `themed`) using Yarn. This is an alternative if the `@edge` tag causes issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nyarn add @rneui/base@github:react-native-elements/react-native-elements#base\n\n# @rneui/themed\nyarn add @rneui/themed@github:react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Removing Node Modules and Lock Files in Expo Apps - Bash\nDESCRIPTION: This Bash command removes node_modules, yarn.lock, and package-lock.json files in an Expo or create-react-native-app setup. It prepares the project for a clean dependency installation by deleting potential sources of conflicts or corruption. Use before (re-)installing packages in an Expo workflow.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Card Component Props Table\nDESCRIPTION: A markdown table showing the available props for the Card component, including containerStyle and wrapperStyle, both of which accept View Style types.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Type       | Default | Description            |\n| ---------------- | ---------- | ------- | ---------------------- |\n| `containerStyle` | View Style |         | Outer container style. |\n| `wrapperStyle`   | View Style |         | Inner container style. |\n```\n\n----------------------------------------\n\nTITLE: Importing `makeStyles` Utility from `@rneui/themed` (TypeScript/TSX)\nDESCRIPTION: Imports the `makeStyles` hook generator function from the `@rneui/themed` library. This function is essential for creating theme-aware style hooks in React Native Elements applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package. This import is required to utilize the `ListItem` component and its sub-components, including `ListItem.Input`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Theme Components in JavaScript\nDESCRIPTION: Imports the Tabs and TabItem components from the documentation theme (@theme). These are typically used for organizing content within the documentation page, such as creating tabbed sections.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Importing Snack Component from Markdown in JavaScript\nDESCRIPTION: This JavaScript code imports the `Snack` component from the './snack/index.md' file. This unconventional import path suggests reliance on a build system (like MDX) capable of processing Markdown files to extract or represent React components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Slider/Slider.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Elements Website\nDESCRIPTION: This command installs the necessary node modules for the React Native Elements website using Yarn package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Rendering the Snack Component using JSX\nDESCRIPTION: This JSX code renders the previously imported 'Snack' component. It uses the self-closing tag syntax common in React and React Native for components that don't require children or specific props in this particular usage context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SpeedDial/SpeedDial.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Importing FAB from @rneui/themed in TypeScript\nDESCRIPTION: This snippet shows how to import the FAB component from the @rneui/themed package for use within a React Native project. The only prerequisite is the installation of the @rneui/themed library. No parameters are required for the import, and it enables access to all available FAB props as documented. There are no constraints except ensuring this package exists in project dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FAB } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements (JavaScript/TypeScript)\nDESCRIPTION: This snippet shows how to import the Dialog component from the '@rneui/themed' library. The Dialog.Button component is accessed as a property of the imported Dialog component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Documentation Dependencies with React Native Elements (JavaScript)\nDESCRIPTION: Imports necessary dependencies, including Tabs, TabItem for UI tabbing, and Usage, a Markdown/MDX file example for demonstrating usage. It also pulls in React Native Elements and react-native-ratings indirectly via component documentation. These imports are required for rendering the documentation, MDX usage examples, and script-generated tabbed sections. There is no functional application logic; the focus is strictly on UI/UX for documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Rating.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Card.FeaturedTitle in React Native Elements\nDESCRIPTION: This code snippet specifies the theme key for the Card.FeaturedTitle component in React Native Elements. It is used for customizing the component's appearance using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCardFeaturedTitle\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Component with h2 Style in React Native Elements\nDESCRIPTION: Simple example showing how to render a Text component with h2 heading style using React Native Elements. The 'live' indicator suggests this is a live editable example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Text h2>Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Icon using Map Function\nDESCRIPTION: Shows how to create a list of items with icons using the map function. Each item displays a title and an icon with a chevron indicator using React Native Elements ListItem and Icon components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Icon } from '@rneui/themed'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((item, i) => (\n      <ListItem key={i} bottomDivider>\n        <Icon name={item.icon} />\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Colors in React Native Elements Components\nDESCRIPTION: This example demonstrates how to use custom colors defined in the theme within a React Native Elements component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text style={{ color: theme.colors.primaryLight }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Colors Object Changes in React Native Elements 1.0\nDESCRIPTION: A code snippet showing the colors object from React Native Elements v0.19.1 that has been modified or removed in version 1.0.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2019-01-27-1.0-release.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  primary: '#9E9E9E',\n  primary1: '#4d86f7',\n  primary2: '#6296f9',\n  secondary: '#8F0CE8',\n  secondary2: '#00B233',\n  secondary3: '#00FF48',\n  grey0: '#393e42',\n  grey1: '#43484d',\n  grey2: '#5e6977',\n  grey3: '#86939e',\n  grey4: '#bdc6cf',\n  grey5: '#e1e8ee',\n  dkGreyBg: '#232323',\n  greyOutline: '#bbb',\n  searchBg: '#303337',\n  disabled: '#dadee0',\n  white: '#ffffff',\n  error: '#ff190c',\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Usage Rendering - TabView Example - Markdown/JSX\nDESCRIPTION: This snippet dynamically renders the Usage example for the TabView component by embedding a Usage component. This allows documentation maintainers to keep usage examples in separate files for easier updates and modularity. The Usage import is required to reference the demonstration code or sample usage details, and this component is expected to output a code sample or rendered example describing how to use the TabView. No parameters are required; the output is contextually inserted markdown or interactive code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/TabView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Installing CRA Customization Dev Dependencies with Yarn\nDESCRIPTION: Installs necessary development dependencies (`@babel/plugin-proposal-class-properties`, `customize-cra`, `react-app-rewired`) using Yarn. These tools are required to customize the Create React App build process to transpile React Native Elements code for the web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Styles for Extended Component Props\nDESCRIPTION: Shows how to define the styling logic for the extended `Text` component's `bold` prop within a theme created using `createTheme`. It provides a function for the `Text` key that receives the component's props and returns style adjustments based on the `bold` prop's value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/3.typescript.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: FAB Properties Documentation Table - Visibility\nDESCRIPTION: Controls FAB visibility through a boolean value\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/fab.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|  Type   | Default |\n| :-----: | :-----: |\n| Boolean | `false` |\n```\n\n----------------------------------------\n\nTITLE: Documenting Dialog.Title Usage in React Native Elements (JavaScript)\nDESCRIPTION: This snippet explains the use of the Dialog.Title component within react-native-elements, primarily focusing on how to add a title to dialogs in a React Native application. No direct import of Dialog.Title is shown, but the documentation lists the component's key props: title (string), titleProps (additional TextProps forwarded), and titleStyle (style customization for the title text). It assumes react-native-elements is installed as a dependency and that the consumer is familiar with React Native's Text component props and styling. The expected input is component props, and the output is a stylable, accessible dialog title.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Dialog.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in React Native Elements\nDESCRIPTION: Shows how to import the Button component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial from React Native Elements in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the SpeedDial component from the '@rneui/themed' package for use in a TypeScript (TSX) React Native project. Prior to use, you must have the '@rneui/themed' dependency installed. This import is required for including the SpeedDial component in your component tree and accessing all its props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SpeedDial } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native\nDESCRIPTION: This snippet demonstrates the ES6 import statement required to use the `ListItem` component from the `@rneui/themed` library within a React Native application. This component is necessary to utilize the `ListItem.Chevron` functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Chevron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Theme Pitfall Example 1: Matching Object Styles (JSX)\nDESCRIPTION: Illustrates a working scenario for theme style merging. Both the theme's `containerStyle` and the component prop `containerStyle` are defined as objects. Because the types match, the styles merge correctly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `SpeedDial` component from the `@rneui/themed` library. This import is necessary to use the SpeedDial functionality within a React Native application built with TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SpeedDial } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Rendering ButtonGroup Usage Examples\nDESCRIPTION: Renders the imported `Usage` component, which displays the actual usage examples for the ButtonGroup component. The content is defined in the `../component_usage/ButtonGroup.mdx` file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem ButtonGroup Components\nDESCRIPTION: Import statement showing how to import components from react-native-elements package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangular Skeleton Component in React Native\nDESCRIPTION: Example of creating a rectangular skeleton placeholder with specified width and height dimensions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Skeleton width={210} height={118} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Correcting React Native Elements Component Imports (JSX / JavaScript)\nDESCRIPTION: These code snippets demonstrate the correct and incorrect approaches for importing a component from the @rneui/themed package in a React Native project. The incorrect example shows a common typo, while the correct example provides the right usage. No external dependencies are required aside from @rneui/themed. This pattern helps users detect and prevent import-related errors, such as 'Invariant Violation: Element type is invalid.'\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\\nimport { Listitem } from '@rneui/themed';\\n\\n// Correct\\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Project with React Native Elements (Stable)\nDESCRIPTION: Creates a new Expo project using the stable React Native Elements template.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template\n```\n\n----------------------------------------\n\nTITLE: Referencing Card.Title Theme Key in React Native Elements\nDESCRIPTION: This snippet shows the theme key 'CardTitle' used for customizing the Card.Title component via the ThemeProvider in React Native Elements. This key allows developers to apply specific styles to all Card.Title instances through the application's theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCardTitle\n```\n\n----------------------------------------\n\nTITLE: Importing TabView from React Native Elements (TypeScript)\nDESCRIPTION: Imports the TabView component from the @rneui/themed package using TypeScript syntax. Required for utilizing TabView or TabView.Item components in a React Native project. Dependency: @rneui/themed must be installed in the project. No parameters; enables access to TabView-related components. Returns the TabView object for building tab views within React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TabView } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context via NPM\nDESCRIPTION: Command to install react-native-safe-area-context, a peer dependency of React Native Elements, using NPM.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Specifying SearchBar Theme Key in React Native Elements\nDESCRIPTION: This code specifies the theme key for the SearchBar component, which can be used for customizing its appearance using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nSearchBar\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in React Native Elements\nDESCRIPTION: Demonstrates the simplest implementation of a Button component with just a title prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button title=\"Solid Button\" />\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Code snippet demonstrating how to import the ListItem component from React Native Elements themed package. The ListItem.Input subcomponent can be accessed after importing ListItem.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-safe-area-context\nDESCRIPTION: Links the react-native-safe-area-context package to your React Native project. This step is necessary for versions of React Native below 0.60.0.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Node Modules using Bash (yarn)\nDESCRIPTION: Command sequence to remove the `node_modules` directory and reinstall all dependencies using yarn. Similar to the npm version, this is used to fix 'Unable to resolve module' errors by getting a clean set of dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: SpeedDial.Action Props Table\nDESCRIPTION: Markdown table showing the available props for SpeedDial.Action component, including the labelPressable boolean prop which enables onPress functionality for the label\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/SpeedDial.Action.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Type    | Default | Description            |\n| ---------------- | ------- | ------- | ---------------------- |\n| `labelPressable` | boolean |         | onPress on Label Press |\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Icon Type in JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a custom icon type in React Native Elements. It uses the registerCustomIconType function to add a new icon set with a custom identifier and font.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Icon/Icon.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nregisterCustomIconType('customid', customFont)\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` library in a TypeScript/React Native project. This import is necessary to utilize the `ListItem` and its nested components like `ListItem.ButtonGroup`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport { ListItem } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Importing makeStyles from @rneui/themed in TypeScript\nDESCRIPTION: Shows how to import the `makeStyles` hook generator from the `@rneui/themed` library. This hook is used for creating theme-aware styles, often defined outside the component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient with Chip in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use LinearGradient with a Chip component from React Native Elements. It shows the import statements, component setup, and props configuration for creating a gradient background on a Chip.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Chip/Chip.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chip } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Chip\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Changes and Pull Request References\nDESCRIPTION: Changelog entries documenting changes with pull request and issue references\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CHANGELOG.old.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [RELEASE] v0.12.0 [`#370`](https://github.com/flyingcircle/react-native-elements/pull/370)\n- Added /example expo to RNE core [`#372`](https://github.com/flyingcircle/react-native-elements/pull/372)\n- Bugfix button [`#373`](https://github.com/flyingcircle/react-native-elements/pull/373)\n```\n\n----------------------------------------\n\nTITLE: Updating Card Component with Title in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use Card.Title to replace the deprecated title props in the Card component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2020-08-10-2.3-upgrade-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Card>\n  <Card.Title style={titleStyle} numberOfLines={titleNumberOfLines}>\n    {title}\n  </Card.Title>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Referencing Theming Key for PricingCard in React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows how to reference the theme key for the PricingCard component, which allows for integration with a custom ThemeProvider in React Native Elements. The string 'PricingCard' can be used to override or customize default theming options via the ThemeProvider. No dependencies are required beyond React Native Elements and a theme configuration; the output is a string identifying the component for theming purposes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/PricingCard.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPricingCard\n```\n\n----------------------------------------\n\nTITLE: Rendering the Imported Snack Component using JSX\nDESCRIPTION: This JSX snippet renders the `Snack` component that was previously imported. It requires a React or React Native environment where the `Snack` component is in scope and JSX is transpiled for rendering.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Slider/Slider.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Configuring CRA Overrides for RNE Web Usage in JavaScript\nDESCRIPTION: Provides the JavaScript code for `config-overrides.js`. This file uses `customize-cra` and `react-app-rewired` to modify the default Create React App Webpack and Babel configuration. It ensures that RNE packages and related dependencies (like vector icons) are correctly transpiled for web usage by including them in the Babel processing pipeline and adding necessary Babel plugins.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref for React Native Elements Input in React\nDESCRIPTION: This snippet demonstrates how to create a reference object using `React.createRef()` which can later be attached to a React Native Elements Input component to allow direct interaction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst input = React.createRef();\n```\n\n----------------------------------------\n\nTITLE: Extending Component Props via TypeScript Declaration Merging - TypeScript\nDESCRIPTION: This snippet explains how to use TypeScript declaration merging to augment RNE's TextProps with a bold property and update ComponentTheme for Text. By importing '@rneui/themed' and extending relevant interfaces, custom component props become typed and compatible with RNE's theming. This enables conditional styling and prop validation for new fields.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/3.typescript.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface ComponentTheme {\n    Text: Partial<TextProps>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ListItem Component with Right-aligned Content in React Native Elements\nDESCRIPTION: This snippet illustrates how to use ListItem.Content and ListItem.Title with the 'right' prop for right-aligned content.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2020-08-10-2.3-upgrade-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem>\n  <ListItem.Content right>\n    <ListItem.Title right style={titleStyle} {...titleProps}>\n      {title}\n    </ListItem.Title>\n  </ListItem.Content>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements in JavaScript\nDESCRIPTION: Imports necessary components or utilities from the 'react-native-elements' library. This specific example shows an empty import (`{}`), which might serve as a placeholder or indicate that specific named imports should be added by the developer.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Usage Example with ES6 in JavaScript\nDESCRIPTION: This snippet imports a pre-written Markdown example for Badge usage with an ES6 import statement, enabling content embedding in documentation UIs or MDX pages. The imported usage example typically contains code demonstrations for the Badge component. Requires a project structure that supports Markdown imports as modules (such as Next.js or MDX bundlers). The imported module ('./usage/Badge/Badge.md') is assumed to be available relative to the documentation file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Badge.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/Badge/Badge.md'\n```\n\n----------------------------------------\n\nTITLE: Button Usage with Theming (tsx)\nDESCRIPTION: Depicts an example of the Button component using the 'type' prop, which will reflect customized styling per the themed definition. Assumes the Button is from @rneui/themed and the appropriate theme is provided via ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type='solid'>\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots using Yarn or NPM\nDESCRIPTION: Provides command-line instructions to update Jest snapshots for React Native Elements components using either Yarn or npm. The `-u` flag tells Jest to update any failing snapshots, which is necessary after making intentional changes to a component's rendered output.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn test -u\n\n# npm\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Migrating ThemeProvider Usage - diff\nDESCRIPTION: Shows how to remove the deprecated 'useDark' prop from ThemeProvider for v4. Input is the old ThemeProvider JSX; output is the updated JSX. Make this change wherever ThemeProvider is used to comply with v4 theme context requirements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <ThemeProvider theme={myTheme} useDark={false}>\\n+ <ThemeProvider theme={myTheme}>\\n     <Button title=\"My Button\" />\\n   </ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Dialog Actions Theme Key\nDESCRIPTION: Specifies the theme key used for styling Dialog Actions component through ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.Actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDialogActions\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements packages\nDESCRIPTION: Command to install the required packages (@rneui/themed and @rneui/base) for using React Native Elements in a project. This is the first step before implementing any components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Importing the Divider Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Divider component from the @rneui/themed package, a prerequisite for using Divider in a React Native project. Ensure that @rneui/themed is installed in your project's dependencies. The import statement should usually be placed at the top of your component file. The input is the module to import from, and the output is the imported Divider component available for use in JSX.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Divider } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: Shows how to import the Card component from the @rneui/themed package. This import statement is necessary to use the Card.Divider subcomponent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using Theme Key for Text Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet specifies the theme key 'Text', which can be used with ThemeProvider to customize theming for the Text component globally. The context assumes usage with ThemeProvider for style overrides. No direct code action occurs, but theming systems reference this key to apply global styles. No parameters or direct inputs/outputs except the string key reference.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nText\n```\n\n----------------------------------------\n\nTITLE: Mapping List Data to ListItem with Avatar â€“ React Native Elements â€“ JavaScript\nDESCRIPTION: This code demonstrates rendering an array of user data using the ListItem component, each with an avatar and subtitle, by mapping through the list and creating a ListItem for each. Dependencies include react-native-elements and React Native, requiring at least View and ListItem components, and network access for avatar images. Inputs are a user list array; outputs are a set of ListItem rows with avatars and titles for each entry.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/listitem.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem\n        key={i}\n        leftAvatar={{ source: { uri: l.avatar_url } }}\n        title={l.name}\n        subtitle={l.subtitle}\n        bottomDivider\n      />\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component in React Native Elements\nDESCRIPTION: Shows how to import the SpeedDial component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SpeedDial } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing Required RNE v4 Packages - bash\nDESCRIPTION: Demonstrates npm and yarn commands to install '@rneui/base' and '@rneui/themed'. Ideally, run these commands in your project directory prior to updating imports. No code parameters or outputs; these are shell installation commands.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base @rneui/themed\\n\\n# or with yarn\\nyarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package in a TypeScript React Native project. This import is required to use the `ListItem` and its sub-components like `ListItem.CheckBox`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Rating Component Demo in React Native Elements\nDESCRIPTION: This SnackPlayer example demonstrates various configurations of the Rating component, including different types, sizes, and interactions. It also includes styling and layout examples.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { Rating, RatingProps } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <Rating\n          showRating\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          showRating\n          type=\"star\"\n          fractions={1}\n          startingValue={3.6}\n          readonly\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"custom\"\n          ratingColor=\"#3498db\"\n          ratingCount={10}\n          imageSize={30}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={{ paddingVertical: 10 }}\n        />\n        <Rating\n          type=\"heart\"\n          ratingCount={3}\n          fractions={2}\n          startingValue={1.57}\n          imageSize={40}\n          onFinishRating={ratingCompleted}\n          showRating\n          style={styles.rating}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled View with Theme-Aware Styles using styled in TypeScript\nDESCRIPTION: Shows how to use `styled` with a function that receives the theme object. This allows creating a `Surface` component (wrapping `View`) whose background color dynamically depends on the `theme.colors.background` value provided by the theme context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst Surface = styled(View)((theme) => ({\n  // default style of component\n  root: {\n    backgroundColor: theme.colors.background,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Specifying Version-specific Component Availability - Markdown\nDESCRIPTION: Clarifies which React Native Elements components are available in specific versions by providing a markdown-formatted example. No dependencies required, contextually used for documentation. The snippet serves as a reference to avoid component usage errors based on version constraints. Inputs: documentation readers; outputs: informative version-to-component mapping.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nExample:\\n\\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only available in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Configuring Create React App Build for RNEUI in JavaScript\nDESCRIPTION: Creates a `config-overrides.js` file using `customize-cra` and `react-app-rewired` to modify the Webpack configuration of a Create React App project. This ensures that RNEUI packages and related dependencies (like vector icons) located in `node_modules` are correctly processed by Babel.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Custom Avatars using FlatList in React Native\nDESCRIPTION: This example shows how to use a FlatList with ListItems and custom Avatar components from React Native Elements. It demonstrates handling cases where avatar URLs may or may not be provided.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TabView from React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the TabView component from the '@rneui/themed' package in JavaScript. Require the 'react-native-elements' and '@rneui/themed' library to access TabView. The import statement enables the use of TabView and its child component TabView.Item in your React Native project. The statement must be placed at the top level of your source file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabView } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons via Yarn\nDESCRIPTION: Command to install react-native-vector-icons, a peer dependency of React Native Elements, using Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Identifying ListItemChevron Theme Key for Customization\nDESCRIPTION: This snippet specifies the theme key `ListItemChevron` used within the react-native-elements theme configuration. This key allows developers to apply custom styles globally to `ListItem.Chevron` instances when using a `ThemeProvider` for customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Chevron.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nListItemChevron\n```\n\n----------------------------------------\n\nTITLE: Rendering Input Component Usage Example (MDX)\nDESCRIPTION: This MDX tag renders the content from the referenced `Usage.mdx` file, located at `../component_usage/Input.mdx`. This external file presumably contains code examples demonstrating how to use the `Input` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Input.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Avatar` component from the `@rneui/themed` package in a React Native project using TypeScript. This import is necessary to access and use the `Avatar` component and its sub-components, including `Avatar.Accessory`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with Bleeding Edge React Native Elements Template\nDESCRIPTION: Command to create a new Expo project using the bleeding edge React Native Elements template.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies for Expo (Bash)\nDESCRIPTION: This command removes the `node_modules` directory along with both `yarn.lock` and `package-lock.json` files. This ensures a completely clean state before reinstalling dependencies, suitable for troubleshooting in Expo projects that might use either Yarn or npm.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Theme Customization Key for PricingCard\nDESCRIPTION: Specifies the theme key (`PricingCard`) used to apply custom styles to the `PricingCard` component when using the `ThemeProvider` from `@rneui/themed`. This allows for consistent styling across the application via the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/PricingCard.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPricingCard\n```\n\n----------------------------------------\n\nTITLE: Rendering Snack Component in React Native Elements - JSX\nDESCRIPTION: This code renders the Snack React component using JSX syntax. It is intended for display or documentation within a React Native Elements context. No props are provided to the component, so it is assumed to use its default export behavior and configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/SocialIcon/SocialIcon.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with External Prop Styles in React Native Elements (TSX)\nDESCRIPTION: Demonstrates that styles passed directly as props to a component instance (external styles) have the highest precedence, overriding both internal component styles and styles defined in the theme via `ThemeProvider`. Here, the `titleStyle` prop set directly on the `Button` overrides the theme's setting.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  components: {\n    Button: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Tab Component Theme Key (TypeScript)\nDESCRIPTION: Lists the theme key required for customizing the Tab component by referencing its string ID ('Tab'). This reference is used within a theme provider to override or augment default styles at the application level. Requested by higher level documentation for customizing component themes in React Native Elements. No code is executed, and no imports are required; this string is used for configuration elsewhere.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tab.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nTab\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported Markdown Guide in Documentation Page - JSX - JavaScript\nDESCRIPTION: This snippet inserts the imported Markdown contribution guide component into the rendered output of a documentation page. It assumes that the imported component correctly encapsulates the Markdown contents. The main parameter is the component itself. The output is the rendered contribution guide, and the snippet requires a React/JSX-compatible documentation framework.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/repo/contributing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Themed Component in React Native Elements App\nDESCRIPTION: This example shows how to use a custom themed component within a React Native Elements application, including creating a theme and using the ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  MyCustomComponent: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <MyCustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Grid with RNE Image in React Native\nDESCRIPTION: This React Native functional component `ImageAPI` renders a `FlatList` in a two-column grid. Each item in the grid displays an `Image` from the `@rneui/themed` library, fetching a random image from Unsplash based on its index. It uses `SafeAreaView` for safe area rendering and shows an `ActivityIndicator` as a placeholder while the image is loading. The component relies on `react`, `react-native` core components (`FlatList`, `SafeAreaView`, `StyleSheet`, `ActivityIndicator`), and the `@rneui/themed` library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```SnackPlayer name=RNE Image\nimport React from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Image } from '@rneui/themed';\n\nconst BASE_URI = 'https://source.unsplash.com/random?sig=';\n\nconst ImageAPI = () => {\nreturn (\n  <>\n    <SafeAreaView>\n      <FlatList\n        data={[...new Array(10)].map((_, i) => i.toString())}\n        style={styles.list}\n        numColumns={2}\n        keyExtractor={(e) => e}\n        renderItem={({ item }) => (\n          <Image\n            source={{ uri: BASE_URI + item }}\n            containerStyle={styles.item}\n            PlaceholderContent={<ActivityIndicator />}\n          />\n        )}\n      />\n    </SafeAreaView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nlist: {\n  width: '100%',\n  backgroundColor: '#000',\n},\nitem: {\n  aspectRatio: 1,\n  width: '100%',\n  flex: 1,\n},\n});\n\nexport default ImageAPI;\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots using npm (Bash)\nDESCRIPTION: This command uses npm to execute the defined 'test' script with the '-u' argument, instructing Jest to update any outdated snapshots. This is typically run after verifying that changes to a component's output are intended and should become the new baseline for future tests.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem Customization\nDESCRIPTION: Specifies the theme key 'ListItem' used for customizing the component's default styles via the RNEUI ThemeProvider. This allows for consistent styling across the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nListItem\n```\n\n----------------------------------------\n\nTITLE: Installing Stable RNE with Yarn\nDESCRIPTION: Installs the stable versions of the core React Native Elements packages (@rneui/themed and @rneui/base) using the Yarn package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying a Single-Theme Configuration (JSX)\nDESCRIPTION: This snippet shows how to configure and apply a theme with a single color scheme (light mode only) using createTheme and ThemeProvider. The mode is set to 'light', excluding alternative modes. Ideal for applications that do not require dark mode support. Requires @rneui/themed package and all themed components must be children of ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  // Use only one color scheme\n  lightColors: {\n    primary: 'red',\n  },\n  // And set that mode as default\n  mode: 'light',\n  components: {\n    Button: {\n      raised: true,\n    },\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>My Button</Button>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Button Props Type Definition in React Native Elements\nDESCRIPTION: Type definitions and documentation for Button component props including default values, types and descriptions for each prop. Includes styling, interaction, and configuration options.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/button.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Props\n\n> Also receives all\n> [TouchableNativeFeedback](http://reactnative.dev/docs/touchablenativefeedback.html#props)\n> (Android) or\n> [TouchableOpacity](http://reactnative.dev/docs/touchableopacity.html#props)\n> (iOS) props\n\n- [`buttonStyle`](#buttonstyle)\n- [`containerStyle`](#containerstyle)\n- [`disabled`](#disabled)\n- [`disabledStyle`](#disabledstyle)\n- [`disabledTitleStyle`](#disabledtitlestyle)\n- [`icon`](#icon)\n- [`iconContainerStyle`](#iconcontainerstyle)\n- [`iconRight`](#iconright)\n- [`iconPosition`](#iconposition)\n- [`linearGradientProps`](#lineargradientprops)\n- [`loading`](#loading)\n- [`loadingProps`](#loadingprops)\n- [`loadingStyle`](#loadingstyle)\n- [`onPress`](#onpress)\n- [`raised`](#raised)\n- [`title`](#title)\n- [`titleProps`](#titleprops)\n- [`titleStyle`](#titlestyle)\n- [`TouchableComponent`](#touchablecomponent)\n- [`type`](#type)\n- [`ViewComponent`](#viewcomponent)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Layout with React Native Elements in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use a proposed Stack component in React Native Elements to arrange child components in a one-dimensional layout, with adjustable spacing between items. The Stack component receives a 'spacing' prop that sets the space between children, and contains Item components as children. Expected input includes the number and type of items, while output displays them stacked accordingly. This example assumes the presence of Stack and Item components and is intended for use in React Native environments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2021-08-23-google-summer-of-code-arpitBhalla.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```js\\n<Stack spacing={2}>\\n  <Item>Item 1</Item>\\n  <Item>Item 2</Item>\\n  <Item>Item 3</Item>\\n</Stack>\\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Component in React/JSX\nDESCRIPTION: This snippet first imports the default export, named 'Snack', from the file './snack/index.md'. This source file being Markdown suggests the use of a framework like MDX where components can be defined or exported from Markdown files. Subsequently, the imported 'Snack' component is rendered using standard JSX syntax (<Snack />). This pattern is typical for component documentation examples in React/React Native projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/FAB/FAB.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/vector-icons for Expo Projects (Shell/Bash)\nDESCRIPTION: Outlines how to install @expo/vector-icons for projects created with create-react-native-app or Expo XDE. Users are given both npm and yarn commands to add the appropriate vector icons library for Expo-managed projects. This is a prerequisite for using icon components in Expo apps with React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install @expo/vector-icons --save\n\n# yarn\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal and Vertical Sliders with Custom Thumb Icons in React Native Elements (TypeScript)\nDESCRIPTION: This React Native functional component demonstrates the implementation of both horizontal and vertical sliders using the `Slider` component from `react-native-elements`. It utilizes `useState` to manage the slider values and features custom thumb icons using the `Icon` component. The horizontal slider's thumb color dynamically changes based on its value via an interpolation function. Styles for layout and appearance are defined using `StyleSheet`. Dependencies include `react`, `react-native`, and `react-native-elements`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Slider/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Slider, Text, Icon } from 'react-native-elements';\n\ntype SlidersComponentProps = {};\n\nconst Sliders: React.FunctionComponent<SlidersComponentProps> = () => {\n  const [value, setValue] = useState(0);\n  const [vertValue, setVertValue] = useState(0);\n\n  const interpolate = (start: number, end: number) => {\n    let k = (value - 0) / 10; // 0 =>min  && 10 => MAX\n    return Math.ceil((1 - k) * start + k * end) % 256;\n  };\n\n  const color = () => {\n    let r = interpolate(255, 0);\n    let g = interpolate(0, 255);\n    let b = interpolate(0, 0);\n    return `rgb(${r},${g},${b})`;\n  };\n\n  return (\n    <>\n      <Text style={styles.subHeader}>Horizontal Slider</Text>\n\n      <View style={[styles.contentView]}>\n        <Slider\n          value={value}\n          onValueChange={setValue}\n          maximumValue={10}\n          minimumValue={0}\n          step={1}\n          allowTouchTrack\n          trackStyle={{ height: 5, backgroundColor: 'transparent' }}\n          thumbStyle={{ height: 20, width: 20, backgroundColor: 'transparent' }}\n          thumbProps={{\n            children: (\n              <Icon\n                name=\"heartbeat\"\n                type=\"font-awesome\"\n                size={20}\n                reverse\n                containerStyle={{ bottom: 20, right: 20 }}\n                color={color()}\n              />\n            ),\n          }}\n        />\n        <Text style={{ paddingTop: 20 }}>Value: {value}</Text>\n      </View>\n      <Text style={styles.subHeader}>Vertical Slider</Text>\n      <View style={styles.verticalContent}>\n        <Slider\n          value={vertValue}\n          onValueChange={setVertValue}\n          maximumValue={50}\n          minimumValue={20}\n          step={1}\n          orientation=\"vertical\"\n          thumbStyle={{ height: 20, width: 16, backgroundColor: 'transparent' }}\n          thumbProps={{\n            children: (\n              <Icon\n                name=\"heartbeat\"\n                type=\"font-awesome\"\n                size={20}\n                reverse\n                containerStyle={{ bottom: 20, right: 20 }}\n                color=\"#f50\"\n              />\n            ),\n          }}\n        />\n      </View>\n      <Text style={{ paddingLeft: 25 }}>Value: {vertValue}</Text>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  contentView: {\n    padding: 20,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n  },\n  verticalContent: {\n    padding: 20,\n    flex: 1,\n    flexDirection: 'row',\n    height: 500,\n    justifyContent: 'center',\n    alignItems: 'stretch',\n  },\n  subHeader: {\n    backgroundColor : \"#2089dc\",\n    color : \"white\",\n    textAlign : \"center\",\n    paddingVertical : 5,\n    marginBottom : 10\n  }\n});\n\nexport default Sliders;\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs and React Native Elements in JavaScript\nDESCRIPTION: This snippet imports the Tabs and TabItem components from the Docusaurus theme, as well as all exports from react-native-elements. It sets up the necessary dependencies for utilizing UI components, particularly for displaying documentation tabs and React Native Elements components. Ensure that @theme/Tabs, @theme/TabItem, and react-native-elements are installed in the project dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Correcting Component Imports in React Native Elements - JSX - JavaScript\nDESCRIPTION: Demonstrates the difference between incorrect and correct imports of the ListItem component from the @rneui/themed package. Helps developers identify and fix spelling mistakes that lead to 'Invariant Violation: Element type is invalid' errors. No external dependencies except having @rneui/themed installed. Inputs: an import statement in your component file. Output: correctly imported ListItem without runtime error.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Incorrect\\nimport { Listitem } from '@rneui/themed';\\n\\n// Correct\\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements - JavaScript\nDESCRIPTION: Demonstrates how to import the ListItem component from the '@rneui/themed' package in a JavaScript or React Native application. This import is necessary for using ListItem and its features, such as the CheckBox integration. The statement requires that the '@rneui/themed' package is installed and available in the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Card from React Native Elements - TypeScript\nDESCRIPTION: Demonstrates how to import the Card component from the @rneui/themed module in a TypeScript file. This is a prerequisite for using Card.FeaturedTitle and its subcomponents in your React Native application. The import is necessary for accessing and rendering card UI elements provided by the React Native Elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for SpeedDialAction - React Native Elements - JavaScript\nDESCRIPTION: This snippet indicates the theme key ('SpeedDialAction') used when customizing themes via the ThemeProvider in React Native Elements. To override or configure styles for the SpeedDial.Action subcomponent, refer to this key in your theme configuration object. It does not correspond to functional code but serves as an identifier for theme customization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/SpeedDial.Action.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSpeedDialAction\n```\n\n----------------------------------------\n\nTITLE: Loading Icon Fonts in App.js for Web Compatibility - JSX\nDESCRIPTION: Injects a style tag with @font-face declarations into the component tree to load MaterialIcons and FontAwesome fonts via react-native-vector-icons. Required to ensure icons render correctly in web environments since browsers require font-face registrations for custom fonts. Place this code in App.js or a top-level component. Inputs: none, expects that the corresponding .ttf files are available via require(). Outputs: makes icon fonts available globally on the web page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/web_usage.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet Component in React Native Elements\nDESCRIPTION: Shows how to import the BottomSheet component from the @rneui/themed package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BottomSheet } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Package Alias for Migration - bash\nDESCRIPTION: Shows a yarn command for aliasing 'react-native-elements' to '@rneui/themed'. This helps maintain compatibility with existing code using the original package name during migration. Command has no parameters or outputs beyond modifying your dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-elements@npm:@rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component with React Native Elements in TypeScript\nDESCRIPTION: This code demonstrates importing the ListItem component from the @rneui/themed package in a TypeScript React Native project. The import is necessary to access both standard and swipeable list item variants provided by React Native Elements. No additional dependencies outside of @rneui/themed are required. After import, the component can be used within functional components to render interactive list items.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Vector Icons with Yarn (Bash)\nDESCRIPTION: Adds the `@expo/vector-icons` package to the project using Yarn. In Expo projects (created via `create-react-native-app` or Expo XDE), this package is used instead of `react-native-vector-icons` as Expo manages icon font loading. Requires Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts in App.js (JSX/CSS)\nDESCRIPTION: Demonstrates how to load the necessary icon fonts (`MaterialIcons`, `FontAwesome`) within the main application component (`App.js`) using a `<style>` tag and CSS `@font-face` rules. This step is required for icons used by React Native Elements components (via `react-native-vector-icons`) to render correctly on the web, as they are not automatically loaded.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/web_usage.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements - Bleeding Edge Yarn\nDESCRIPTION: Command to install the latest development version directly from GitHub using Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add  https://github.com/react-native-elements/react-native-elements#dist\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context (NPM)\nDESCRIPTION: Installs react-native-safe-area-context, another peer dependency for React Native Elements, using NPM.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.CheckBox in React Native Elements\nDESCRIPTION: This code snippet provides the theme key for customizing the ListItem.CheckBox component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.CheckBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemCheckBox\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Bleeding Edge via NPM - Bash\nDESCRIPTION: Installs the latest (bleeding-edge) versions of @rneui/base and @rneui/themed directly from the GitHub repository using npm. Useful for those wanting the newest features or fixes not yet released to npm. Each package is installed individually with its respective GitHub branch.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\\nnpm install react-native-elements/react-native-elements#base\\n\\n# @rneui/themed\\nnpm install react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Button Theme Key for Customization\nDESCRIPTION: Shows the theme key to use when customizing the Button component using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nButton\n```\n\n----------------------------------------\n\nTITLE: Referencing ListItem Theme Key in React Native Elements (TypeScript)\nDESCRIPTION: This snippet indicates the theme key string (\"ListItem\") used for theming the ListItem component with ThemeProvider in React Native Elements. Developers can use this key to customize default styles for all ListItem instances. There are no dependencies or parameters; this is for theming reference purposes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nListItem\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component for Accessory Usage (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Avatar` component from the `@rneui/themed` library in a TypeScript React Native project. This import is necessary to utilize the `Avatar` component and its nested `Avatar.Accessory` subcomponent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Clearing Build Artifacts to Resolve Font Issues in React Native (Bash)\nDESCRIPTION: These commands remove build directories for iOS and Android platforms to address font loading issues such as 'Unrecognized font x.' Run them within your project's root directory as needed. No dependencies beyond access to the filesystem are required.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\niOS - rm -rf ios/build\\n\\nAndroid - rm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Importing the Image Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the enhanced `Image` component from the `@rneui/themed` library. This component is intended to be used as a replacement for the standard React Native `Image` component within a TypeScript-based React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons with Yarn (Bash)\nDESCRIPTION: Installs the 'react-native-vector-icons' package needed by React Native Elements for icon support. Required only for projects not using Expo, as Expo provides its own set of vector icons. Should be run after installing the main UI packages. Input: yarn command. Output: vector icons package is present in node_modules.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Variants in React Native Elements\nDESCRIPTION: Demonstrates the usage of different shape variants (rectangle and circle) of the Skeleton component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Skeleton width={120} height={40} />\n  <Skeleton circle width={40} height={40} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Theme Properties in React Native Elements\nDESCRIPTION: This example demonstrates how to use custom properties added to the theme in a React Native Elements component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/3.typescript.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  return <Text>{theme.myCustomProperty}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Component Styles Object-Based in createTheme (JavaScript)\nDESCRIPTION: This snippet illustrates the standard object-based approach for defining component styles within `createTheme`. It targets specific style props of a component, such as `h5Style` for the `Text` component, and assigns a style object (`{ fontSize: 8 }`) to it. Requires the `@rneui/themed` library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/theming.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  Text: {\n    h5Style: { fontSize: 8 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Component in React Native\nDESCRIPTION: This code snippet imports a Snack component from a local module and renders it within the current component. It showcases how to include and use custom components in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/LinearProgress/LinearProgress.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported Contribution Guide using JSX\nDESCRIPTION: Renders the previously imported `ContributionGuide` component using JSX syntax. This displays the content of the `CONTRIBUTING.md` file directly on the documentation page. Requires the `ContributionGuide` component to be successfully imported and in scope.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/repo/contributing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Component in React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to import the Rating component from the @rneui/themed package, which is necessary to integrate the Swipe Rating UI into a React Native project. The import process assumes that @rneui/themed is installed as a dependency. The imported component supports props for customization, including image size, color, jump value, callbacks, and more. Input is a direct ES6 import statement, and its output is a usable React component within your app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Rating } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Area Context Peer Dependency with NPM\nDESCRIPTION: Installs the 'react-native-safe-area-context' library using npm. This is a required peer dependency for handling safe areas on devices with notches or other intrusions. Skip if already installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Switch Component Props Definition\nDESCRIPTION: Markdown table defining the available props for the Switch component, including the color prop which customizes the Switch component's color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Type   | Default   | Description                        |\n| ------- | ------ | --------- | ---------------------------------- |\n| `color` | string | `primary` | The color of the Switch component. |\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Colors in React Native Elements v4\nDESCRIPTION: This diff shows the addition of a new 'background' color to the colors object in the theme configuration for React Native Elements v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nconst colors={\n  primary: '#2e7d32',\n  secondary: '#757575',\n+ background: '#ffffff',\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stable RNEUI with Yarn\nDESCRIPTION: Installs the stable versions of the core React Native Elements packages (@rneui/themed and @rneui/base) using the yarn package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Applying Object Styles in React Native Elements Theme and Component (JSX)\nDESCRIPTION: This example demonstrates a correct usage pattern where the theme defines `containerStyle` as an object and the Button component also receives `containerStyle` as an object. React Native Elements successfully merges these styles because their types (object) match.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: FAB Properties Documentation Table - Placement\nDESCRIPTION: Defines placement options for FAB positioning at the bottom, with values 'left' or 'right'\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/fab.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|       Type       | Default |\n| :--------------: | :-----: |\n| `left`or `right` |  none   |\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter for RNE v4 Documentation\nDESCRIPTION: YAML front matter metadata for the documentation page defining title and authors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2022-05-15-rneui-migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: React Native Elements 4.0\n\nauthors: [arpitBhalla, rneui]\n---\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Contribution Guide in MDX\nDESCRIPTION: This MDX snippet first imports the content of the `CONTRIBUTING.md` file (located relative to the `@site` alias, likely pointing to the documentation source root) into a variable named `ContributionGuide`. It then renders this imported content using the `ContributionGuide` component tag (`<ContributionGuide />`). This pattern allows embedding external Markdown content within a documentation page structured with React components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Importing SearchBar Dependencies\nDESCRIPTION: Import statements for the SearchBar component and related documentation utilities.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/SearchBar.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge React Native Elements via NPM\nDESCRIPTION: Commands to install the bleeding edge version of React Native Elements using NPM.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nnpm install react-native-elements/react-native-elements#base\n\n# @rneui/themed\nnpm install react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Illustrating Version-Specific Components in Markdown\nDESCRIPTION: Provides an example showing that certain components like `<FormInput />` are available only in older versions (v0.19.1 and below) of React Native Elements, while newer versions (v1.0.0-beta1+) use alternatives like `<Input />`. This helps troubleshoot 'Invariant Violation' errors related to version mismatches.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nExample:\n\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts in Web Project\nDESCRIPTION: Demonstrates how to load Vector Icon fonts in a web project using React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the ListItem component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Chevron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Actions and Theme Tabs - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import documentation-related components, Tabs and TabItem, from a documentation theme, as well as an empty import from react-native-elements. These imports are prerequisites for rendering the documentation page and for referencing the Dialog.Actions component. No functional code is present; the imports are foundational for the rest of the documentation file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Injecting Icon Fonts Styles in App.js for react-native-vector-icons - JSX\nDESCRIPTION: Shows how to embed icon font-face definitions directly into your App.js file using a style tag for proper rendering of MaterialIcons and FontAwesome fonts on the web. This is essential for react-native-vector-icons to render correctly when using React Native Elements with react-native-web. Place this style tag in your top-level App component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\\n  @font-face {\\n    font-family: 'MaterialIcons';\\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\\n  }\\n\\n  @font-face {\\n    font-family: 'FontAwesome';\\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\\n  }\\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Rendering Overlay Usage Examples with MDX\nDESCRIPTION: This MDX tag renders the content of the `Overlay.mdx` file, located in the parent directory under `component_usage`. This pattern is common in documentation frameworks like Docusaurus to embed detailed usage examples and code demonstrations for the `Overlay` component directly into the documentation page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Cleaning iOS Build Directory - Bash Shell\nDESCRIPTION: This shell command removes the ios/build directory in a React Native project using CLI tooling. It is typically used to resolve build or caching issues on iOS devices. Requires macOS and access to the ios subdirectory within your project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ios/build\n```\n\n----------------------------------------\n\nTITLE: Importing TabView Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the TabView component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabView } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using ThemeConsumer for Render Props Access to Theme (TypeScript)\nDESCRIPTION: This snippet illustrates usage of the ThemeConsumer component from @rneui/themed, exposing the theme object via render props without using withTheme HOC. It integrates well in functional components and provides inline theme access for UI customization. Dependencies are React and @rneui/themed, with output updating on theme changes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context\nDESCRIPTION: Commands to install react-native-safe-area-context, another peer dependency, using NPM or Yarn, and linking instructions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install react-native-safe-area-context\n\n# Yarn\nyarn add react-native-safe-area-context\n\n# Linking\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements and Peer Dependencies for Web (with react-native-web) - Bash\nDESCRIPTION: Shows how to add core React Native Elements packages, react-native-web, and react-native-vector-icons for web compatibility using yarn. Additional dev dependencies (Babel plugin, customize-cra, react-app-rewired) are also installed for custom build configuration. Must be run in the root of a Create React App project using yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add  @rneui/base @rneui/themed react-native-web react-native-vector-icons\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements in Expo Workflow - Bash\nDESCRIPTION: Details the bash command to install @rneui/base and @rneui/themed in an Expo-managed workflow using yarn. Ensures compatibility with Expo's dependency management. Inputs: shell/terminal; outputs: installed dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with SafeAreaProvider\nDESCRIPTION: Demonstrates how to wrap your React Native app with the SafeAreaProvider component from react-native-safe-area-context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Tile Theme Key for Customization (Text)\nDESCRIPTION: This snippet shows the theme key (`Tile`) used to target the Tile component for style customizations when using the `ThemeProvider` from `react-native-elements`. This key allows developers to define global styles for all `Tile` instances within the application's theme object, as explained in the library's customization documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTile\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel and Module Includes for React Native Elements - JavaScript\nDESCRIPTION: Defines a config-overrides.js file using customize-cra for a Create React App project to apply the class property Babel plugin and explicitly include React Native Elements, vector icons, ratings modules, and the src directory for Babel transpilation. This is required because these dependencies are shipped with untranspiled JavaScript, which Create React App does not transpile from node_modules by default. Dependencies: customize-cra, @babel/plugin-proposal-class-properties, path, react-app-rewired.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/web_usage.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/react-native-elements'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Components (Empty)\nDESCRIPTION: This line imports from the 'react-native-elements' library. However, the curly braces `{}` are empty, indicating that no specific components are being imported in this particular statement. It might be a placeholder or an artifact.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Card.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Key for ListItemButtonGroup in JavaScript\nDESCRIPTION: Provides the theme key 'ListItemButtonGroup' used within a custom theme provider setup to customize ListItem.ButtonGroup styles in React Native Elements. This key can be supplied to a theme provider (as described in the customizing guide) for theme-based component styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemButtonGroup\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements (JavaScript/JSX)\nDESCRIPTION: Imports components or utilities from the 'react-native-elements' library. The empty braces `{}` suggest that specific named exports would typically be placed inside them for use in the component file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Tile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Documentation Module in React Native Elements - JavaScript\nDESCRIPTION: Imports the Usage markdown module for the Icon component, facilitating inclusion of usage instructions within the documentation site. Requires the Usage file ('./usage/Icon/Icon.md') and React (implied by JSX usage). Used to modularize documentation content. No direct inputs/outputs; designed for documentation page composition.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Icon.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/Icon/Icon.md'\n```\n\n----------------------------------------\n\nTITLE: Removing All Node Modules and Lock Files for Expo - Bash Shell\nDESCRIPTION: Specifically for Expo or create-react-native-app workflows, this removes node_modules, yarn.lock, and package-lock.json to ensure all environments are reset before dependency installation. It is a preliminary step before fixing vector icon and font issues in Expo-managed projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Icon Component Type Definition\nDESCRIPTION: TypeScript interface showing the available props for the Icon component. Includes styling, behavioral, and event handling properties.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/icon.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IconProps {\n  brand?: boolean;  // Uses brands font (FontAwesome5 only)\n  color?: string;   // Color of icon (default: 'black')\n  Component?: React.ComponentType;  // Custom React Native component\n  containerStyle?: ViewStyle;  // Container styling\n  disabled?: boolean;  // Disables onPress events\n  disabledStyle?: ViewStyle;  // Styling for disabled state\n  iconProps?: IconProperties;  // Additional icon props\n  iconStyle?: ViewStyle;  // Icon specific styling\n  name: string;  // Required icon name\n  onLongPress?: () => void;  // Long press handler\n  onPress?: () => void;  // Press handler\n  raised?: boolean;  // Adds box shadow\n  reverse?: boolean;  // Reverses color scheme\n  reverseColor?: string;  // Reverse icon color\n  size?: number;  // Icon size (default: 26)\n  solid?: boolean;  // Uses solid font (FontAwesome5 only)\n  type?: string;  // Icon set type (default: 'material')\n  underlayColor?: string;  // Press event underlay color\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Default Theme Object Structure in TypeScript\nDESCRIPTION: Outlines the basic structure of the default theme object provided by React Native Elements, specifically focusing on the `colors` property. It shows the standard color keys and the nested `platform` object containing iOS and Android specific colors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface theme {\n  colors: {\n    primary;\n    secondary;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Themed Button Usage with Variant Type - tsx\nDESCRIPTION: Shows a usage example of the themed Button component with 'type' prop set to 'solid' in a TypeScript JSX environment (tsx). Assumes prior application of the customized theme. Input is Button usage; output is styled Button per theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/migration-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type='solid'>\n```\n\n----------------------------------------\n\nTITLE: Using Snack Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the usage of the imported Snack component within the documentation. It's used to provide an interactive example of the withBadge HOC.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Badge/Badge.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Passing Form Data to Second Screen in React Native Navigation\nDESCRIPTION: This snippet demonstrates how to pass form data to the second screen when navigating in a React Native app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.props.history.push({\n  pathname: '/commit',\n  state: { owner, repo }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Badges and withBadge HOC in React Native Elements\nDESCRIPTION: Demonstrates various ways to use the Badge component in React Native Elements. It shows standard badges with string values or custom components, mini badges using only the 'status' prop, combining a mini badge with an Avatar component, and using the 'withBadge' Higher-Order Component (HOC) both as a function call and with decorator syntax for adding badges to Icons. Dependencies include 'react-native' and 'react-native-elements'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { Text, View } from 'react-native'\nimport { Avatar, Badge, Icon, withBadge } from 'react-native-elements'\n\n// Standard badge\n<Badge value=\"99+\" status=\"error\" />\n<Badge value={<Text>My Custom Badge</Text>} />\n\n// Mini badge\n<Badge status=\"success\" />\n<Badge status=\"error\" />\n<Badge status=\"primary\" />\n<Badge status=\"warning\" />\n\n// Avatar with mini badge\n<View>\n  <Avatar\n    rounded\n    source={{\n      uri: 'https://randomuser.me/api/portraits/men/41.jpg',\n    }}\n    size=\"large\"\n  />\n\n  <Badge\n    status=\"success\"\n    containerStyle={{ position: 'absolute', top: -4, right: -4 }}\n  />\n</View>\n\n// withBadge HOC\n\nconst BadgedIcon = withBadge(1)(Icon)\n<BadgedIcon type=\"ionicon\" name=\"ios-chatbubbles\" />\n\n// Using the decorator proposal\n@connect(state => ({\n  notifications: state.notifications,\n}))\n@withBadge(props => props.notifications.length)\nexport default class MyDecoratedIcon extends React.Component {\n  render() {\n    return (\n      <Icon type=\"ionicon\" name=\"md-cart\" />\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Comprehensive React Native Elements ListItem Examples in SnackPlayer\nDESCRIPTION: A complete example showing various ListItem implementations including lists with icons, gradients, accordions, swipeable items, and different interactive elements like switches, checkboxes, and button groups.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/ListItem.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { View, StyleSheet, Image, FlatList } from 'react-native';\nimport {\nText,\nListItem,\nAvatar,\nIcon,\nBadge,\nListItemProps,\nButton,\nSwitch,\ncolors\n} from '@rneui/themed';\n\nconst log = () => console.log('this is an example method');\n\ntype List1Data = {\ntitle: string;\nicon: string;\n};\nconst list1: List1Data[] = [\n{\n  title: 'Appointments',\n  icon: 'av-timer',\n},\n{\n  title: 'Trips',\n  icon: 'flight-takeoff',\n},\n{\n  title: 'Passwords',\n  icon: 'fingerprint',\n},\n{\n  title: 'Pitches',\n  icon: 'lightbulb-outline',\n},\n{\n  title: 'Updates',\n  icon: 'track-changes',\n},\n];\n\ntype List2Data = {\nname: string;\navatar_url: string;\nsubtitle: string;\nlinearGradientColors: string[];\n};\n\nconst list2: Partial<List2Data>[] = [\n{\n  name: 'Amy Farha',\n  avatar_url: 'https://uifaces.co/our-content/donated/XdLjsJX_.jpg',\n  subtitle: 'Vice President',\n  linearGradientColors: ['#FF9800', '#F44336'],\n},\n{\n  name: 'Chris Jackson',\n  avatar_url: 'https://uifaces.co/our-content/donated/KtCFjlD4.jpg',\n  subtitle: 'Vice Chairman',\n  linearGradientColors: ['#3F51B5', '#2196F3'],\n},\n{\n  name: 'Amanda Martin',\n  avatar_url:\n    'https://images.unsplash.com/photo-1498529605908-f357a9af7bf5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=047fade70e80ebb22ac8f09c04872c40',\n  subtitle: 'CEO',\n  linearGradientColors: ['#FFD600', '#FF9800'],\n},\n{\n  name: 'Christy Thomas',\n  avatar_url: 'https://randomuser.me/api/portraits/women/48.jpg',\n  subtitle: 'Lead Developer',\n  linearGradientColors: ['#4CAF50', '#8BC34A'],\n},\n{\n  name: 'Melissa Jones',\n  avatar_url:\n    'https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMDQ0NDk1OV5BMl5BanBnXkFtZTcwNDcxOTExNg@@._V1_UY256_CR2,0,172,256_AL_.jpg',\n  subtitle: 'CTO',\n  linearGradientColors: ['#F44336', '#E91E63'],\n},\n];\n\ntype ListComponentProps = ListItemProps;\n\nconst Lists2: React.FunctionComponent<ListComponentProps> = () => {\nconst [expanded, setExpanded] = React.useState(false);\n\nconst listItemProps = {};\nconst renderRow = ({ item }: { item: List1Data }) => {\n  return (\n    <ListItem.Swipeable\n      onPress={log}\n      bottomDivider\n      leftContent={\n        <Button\n          title=\"Info\"\n          icon={{ name: 'info', color: 'white' }}\n          buttonStyle={{ minHeight: '100%' }}\n        />\n      }\n      rightContent={\n        <Button\n          title=\"Delete\"\n          icon={{ name: 'delete', color: 'white' }}\n          buttonStyle={{ minHeight: '100%', backgroundColor: 'red' }}\n        />\n      }\n    >\n      <Icon name={item.icon} />\n      <ListItem.Content>\n        <ListItem.Title>{item.title}</ListItem.Title>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem.Swipeable>\n  );\n};\nconst [switch1, setSwitch1] = useState(true);\nconst [checkbox1, setCheckbox1] = useState(true);\nconst [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\n\nreturn (\n  <>\n    <FlatList\n      ListHeaderComponent={\n        <>\n          <View style={{ paddingVertical: 8 }}>\n            {list2.map((l, i) => (\n              <ListItem\n                key={i}\n                linearGradientProps={{\n                  colors: l.linearGradientColors,\n                  start: [1, 0],\n                  end: [0.2, 0],\n                }}\n                containerStyle={{\n                  marginHorizontal: 16,\n                  marginVertical: 8,\n                  borderRadius: 8,\n                }}\n              >\n                <Avatar rounded source={{ uri: l.avatar_url }} />\n                <ListItem.Content>\n                  <ListItem.Title\n                    style={{ color: 'white', fontWeight: 'bold' }}\n                  >\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle style={[{ color: 'white' }]}>\n                    {l.subtitle}\n                  </ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Chevron color=\"white\" />\n              </ListItem>\n            ))}\n          </View>\n\n          <View style={styles.list}>\n            <ListItem.Accordion\n              content={\n                <>\n                  <Icon name=\"place\" size={30} />\n                  <ListItem.Content>\n                    <ListItem.Title>List Accordion</ListItem.Title>\n                  </ListItem.Content>\n                </>\n              }\n              isExpanded={expanded}\n              onPress={() => {\n                setExpanded(!expanded);\n              }}\n            >\n              {list2.map((l: Partial<List2Data>, i: React.Key) => (\n                <ListItem key={i} onPress={log} bottomDivider>\n                  <Avatar title={l.name} source={{ uri: l.avatar_url }} />\n                  <ListItem.Content>\n                    <ListItem.Title>{l.name}</ListItem.Title>\n                    <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                  </ListItem.Content>\n                  <ListItem.Chevron />\n                </ListItem>\n              ))}\n            </ListItem.Accordion>\n          </View>\n          <View style={styles.list}>\n            {list2.map((l, i) => (\n              <ListItem key={i} bottomDivider>\n                <Icon name=\"user-circle-o\" type=\"font-awesome\" color=\"red\" />\n                <ListItem.Content>\n                  <ListItem.Title style={{ color: 'red' }}>\n                    {l.name}\n                  </ListItem.Title>\n                  <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n                </ListItem.Content>\n                <ListItem.Content right>\n                  <ListItem.Title right style={{ color: 'green' }}>\n                    11:00 am\n                  </ListItem.Title>\n                  <ListItem.Subtitle right>12:00 am</ListItem.Subtitle>\n                </ListItem.Content>\n              </ListItem>\n            ))}\n          </View>\n          <View style={styles.list}>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Name</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.Input placeholder=\"Type your name\" />\n              <ListItem.Chevron />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Switch that please ðŸ˜²</ListItem.Title>\n              </ListItem.Content>\n              <Switch\n                value={switch1}\n                onValueChange={(value) => setSwitch1(value)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.Content>\n                <ListItem.Title>Choose ðŸ¤¯</ListItem.Title>\n              </ListItem.Content>\n              <ListItem.ButtonGroup\n                buttons={['Flower', 'Coco']}\n                selectedIndex={selectedButtonIndex}\n                onPress={(index) => setSelectedButtonIndex(index)}\n              />\n            </ListItem>\n            <ListItem bottomDivider>\n              <ListItem.CheckBox\n                checked={checkbox1}\n                onPress={() => setCheckbox1(!checkbox1)}\n              />\n              <ListItem.Content>\n                <ListItem.Title>Check that please ðŸ˜¢</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Badge value=\"12\" />\n              <ListItem.Content>\n                <ListItem.Title>With a Badge ! ðŸ˜»</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n            <ListItem bottomDivider>\n              <Icon name=\"check\" size={20} />\n              <ListItem.Content>\n                <ListItem.Title>This thing is checked ðŸ˜Ž</ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n          <View style={styles.list}>\n            <ListItem>\n              <Avatar source={'https://randomuser.me/api/portraits/women/57.jpg'} />\n              <ListItem.Content>\n                <ListItem.Title>\n                  Limited supply! Its like digital gold!\n                </ListItem.Title>\n                <View style={styles.subtitleView}>\n                  <Image\n                    source={\"https://cdn.pixabay.com/photo/2019/11/03/20/11/portrait-4599553__340.jpg\"}\n                    style={styles.ratingImage}\n                  />\n                  <Text style={styles.ratingText}>5 months ago</Text>\n                </View>\n              </ListItem.Content>\n            </ListItem>\n          </View>\n        </>\n      }\n      data={list1}\n      keyExtractor={(a: List1Data, index: number) => index.toString()}\n      renderItem={renderRow}\n    />\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nlist: {\n  marginTop: 20,\n  borderTopWidth: 1,\n  borderColor: colors.greyOutline,\n},\nsubtitleView: {\n  flexDirection: 'row',\n  paddingLeft: 10,\n  paddingTop: 5,\n},\nratingImage: {\n  height: 19.21,\n  width: 100,\n},\nratingText: {\n  paddingLeft: 10,\n\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context with NPM\nDESCRIPTION: Installs the `react-native-safe-area-context` library using npm. This is a required peer dependency for handling safe area insets on devices with notches or home indicators.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Importing CircularSlider Component - JSX\nDESCRIPTION: This snippet demonstrates importing the CircularSlider component from the @rneui/circular-slider package. It is required at the top of your React Native file to utilize the CircularSlider, which allows implementing a customizable circular slider UI element in your component hierarchy.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/universe/CircularSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CircularSlider } from \"@rneui/circular-slider\";\n\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies (Bash)\nDESCRIPTION: This command removes the `node_modules` directory and the `yarn.lock` file to ensure a clean state before reinstalling dependencies. This is often the first step in troubleshooting dependency-related issues in a React Native project managed with Yarn, particularly when using `react-native-init`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons via Yarn - Bash\nDESCRIPTION: Installs react-native-vector-icons peer dependency using Yarn. Required unless you use Expo or CRNA, both of which bundle this dependency by default.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Dialog Loading Theme Key\nDESCRIPTION: Theme key used for customizing the Dialog Loading component through ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.Loading.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDialogLoading\n```\n\n----------------------------------------\n\nTITLE: Using Button with Custom Type - tsx\nDESCRIPTION: Gives an example of using the Button component with a specific 'type' prop to leverage theme logic from the previous snippet. When 'type' is set to 'solid', 'titleStyle' will inherit blue color from the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type='solid'>\n```\n\n----------------------------------------\n\nTITLE: ThemeProvider Usage Changes - React Native Elements (diff)\nDESCRIPTION: Indicates deprecation and necessary changes in ThemeProvider usage. Specifies that 'useDark' is no longer accepted and highlights the need to pass only the 'theme' prop. Assumes a project root-level usage as per best practices.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- <ThemeProvider theme={myTheme} useDark={false}>\\n+ <ThemeProvider theme={myTheme}>\\n     <Button title=\"My Button\" />\\n   </ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Repository Label Documentation in Markdown\nDESCRIPTION: Structured markdown documentation describing various GitHub labels used for issue and pull request management in the React Native Elements repository. Includes detailed explanations for each label's purpose and usage.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/repo/labels.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: labels\ntitle: Label Guide\nslug: /labels\n---\n```\n\n----------------------------------------\n\nTITLE: Removing Node Modules and Lock Files - Bash Shell\nDESCRIPTION: This shell snippet is used to delete node_modules and yarn.lock from the project. It is typically the first step in troubleshooting dependency or build issues to ensure a clean slate before reinstalling packages. Executes a recursive removal, which requires project directory access and appropriate permissions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Divider in React Native Elements - JavaScript\nDESCRIPTION: This snippet imports the Tabs and TabItem components from the Docusaurus theme and the Usage demo from a local MDX file, preparing the documentation page for tabbed navigation and demo rendering. Dependencies include '@theme/Tabs', '@theme/TabItem', 'react-native-elements', and the local MDX Usage file. Inputs are the component paths; outputs are import bindings for use in the documentation JSX. No runtime logic is presented.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Divider.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing New Packages - React Native Elements v4 (bash)\nDESCRIPTION: Demonstrates npm and yarn commands for installing required v4 packages, i.e., @rneui/base and @rneui/themed. These must be included as dependencies in your project for all new functionality. Both npm and yarn commands are shown for convenience.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base @rneui/themed\\n\\n# or with yarn\\nyarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Adding Spacing to Theme Object - diff\nDESCRIPTION: Shows how to enrich the theme object by adding a 'spacing' property, which enables more fine-grained control over component spacing. Modify the theme configuration with this property to achieve better layout designs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nconst theme:FullTheme={\\n  colors:{},\\n+ spacing:{}\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an H2 Heading with Text Component in React Native Elements (tsx)\nDESCRIPTION: This live code snippet demonstrates the basic usage of the `<Text>` component from `react-native-elements` to display text styled as an H2 heading using the `h2` prop. It requires the `react-native-elements` library and a React Native setup.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Text h2>Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Dialog component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Theme Components\nDESCRIPTION: Imports the Tabs and TabItem components from the documentation theme (@theme). These are likely used for structuring the documentation page itself, potentially for displaying code examples or related information in a tabbed interface.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Installing CRA Customization Dev Dependencies (Bash)\nDESCRIPTION: Installs development dependencies needed to customize the Create React App build configuration. `customize-cra` and `react-app-rewired` allow overriding the default webpack and Babel settings, and `@babel/plugin-proposal-class-properties` is a necessary Babel plugin for transpiling certain JavaScript features used by the libraries.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/web_usage.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Components\nDESCRIPTION: This import statement is used to bring in components from the `react-native-elements` library. While the curly braces are empty in this specific example, it represents the standard method for importing components needed for the Overlay functionality or its examples within a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements in Expo with Yarn\nDESCRIPTION: Shell commands using Yarn tailored for Expo projects. It first installs general project dependencies and then adds the React Native Elements packages (`@rneui/base`, `@rneui/themed`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Assigning a Ref to SearchBar in React Native\nDESCRIPTION: This snippet demonstrates how to assign a reference to a SearchBar component instance using the 'ref' prop in a React Native class component. This allows direct access to the component's methods from the parent component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<SearchBar\n  ref={search => this.search = search}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements via NPM\nDESCRIPTION: Commands to install the stable version of React Native Elements using NPM.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Installing and Linking react-native-vector-icons with Yarn, NPM, and React Native Link in Shell\nDESCRIPTION: This code snippet details installation and (if necessary) manual linking of react-native-vector-icons, a dependency of React Native Elements, for projects using React Native CLI. It covers shell commands for adding the package via yarn or npm, and uses react-native link for older React Native versions (pre-0.60). Projects using React Native 0.60.0 or above can usually skip the linking step. These commands are run from the root of a React Native CLI project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/getting_started.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# yarn\nyarn add react-native-vector-icons\n# or with npm\nnpm i --save react-native-vector-icons\n\n# link\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/vector-icons for Expo Apps (Bash)\nDESCRIPTION: Installs '@expo/vector-icons' using yarn for applications managed with Expo. Required for icon support, as Expo handles icons natively and does not require additional linking. Should be executed after installing core UI packages. Output: vector icons installed and usable in Expo.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Input Component\nDESCRIPTION: Example of importing required components for ListItem.Input documentation\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Updating NPM Scripts to Use react-app-rewired - Diff\nDESCRIPTION: Shows a package.json script section diff where react-scripts commands are replaced with react-app-rewired equivalents. This ensures the custom config-overrides.js is respected in development, build, and test processes. Required for integrating custom Babel and webpack configurations with Create React App.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/web_usage.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test\",\n+   \"test\": \"react-app-rewired test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Metro Bundler Cache (Bash)\nDESCRIPTION: Command to start the React Native Metro bundler with the `--reset-cache` flag. This clears the bundler's cache and can resolve 'Unable to resolve module x' errors caused by stale cache data.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Importing CircularSlider in React Native\nDESCRIPTION: Example of how to import the CircularSlider component in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/universe/CircularSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CircularSlider } from \"@rneui/circular-slider\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Key for ListItemSubtitle - JavaScript\nDESCRIPTION: Indicates the theme key used to target and customize styles for the ListItem.Subtitle component within the React Native Elements ThemeProvider. Developers should use 'ListItemSubtitle' for theme customization. No dependencies or function calls are included in this direct usage. The string is used for referencing theming keys and not for code execution. \n- Input: theme key string \n- Output: for developer reference in theming files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Subtitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemSubtitle\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Customizing AirbnbRating in React Native Elements\nDESCRIPTION: This snippet shows the theme key `AirbnbRating`. This key is used within the theme object provided to the React Native Elements `ThemeProvider` to apply custom styles or default props specifically to all `AirbnbRating` components throughout the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/AirbnbRating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAirbnbRating\n```\n\n----------------------------------------\n\nTITLE: Including the Usage Component in Documentation Render Tree - Markdown/MDX\nDESCRIPTION: This snippet inserts the imported usage example for the SpeedDial component into the documentation render tree. The self-closing component tag renders the content of the imported Markdown file at the specified place in the document. This requires the documentation environment (such as Docusaurus or MDX) to support custom component usage and Markdown imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/SpeedDial.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for react-app-rewired (Diff)\nDESCRIPTION: Modifies the `scripts` section in `package.json` to replace the default `react-scripts` commands with `react-app-rewired`. This ensures that the custom build configuration defined in `config-overrides.js` is used when starting, building, or testing the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/web_usage.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test\",\n+   \"test\": \"react-app-rewired test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Functional Test Scenario for React Native Elements\nDESCRIPTION: A markdown description of a functional test scenario for a button group component in React Native Elements. It outlines the expected behavior when a user interacts with the component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-elements (React Native CLI)\nDESCRIPTION: Shows the command to install the `react-native-elements` package using yarn or npm in a standard React Native CLI project (created with `react-native init`). This is the first step required for CLI-based installations.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-elements\n# or with npm\nnpm i react-native-elements --save\n```\n\n----------------------------------------\n\nTITLE: Exporting Lists2 Component in React Native\nDESCRIPTION: This code snippet exports the Lists2 component, which is likely defined earlier in the file. It also includes a StyleSheet object with styling for different parts of the list, such as the subtitle and container.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n  color: 'grey',\n},\n});\n\nexport default Lists2;\n```\n\n----------------------------------------\n\nTITLE: Updating ListItem Component with Content and Title in React Native Elements\nDESCRIPTION: This code shows how to replace deprecated title props with ListItem.Content and ListItem.Title components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2020-08-10-2.3-upgrade-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ListItem>\n  <ListItem.Content>\n    <ListItem.Title style={titleStyle} {...titleProps}>\n      {title}\n    </ListItem.Title>\n  </ListItem.Content>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: ListItem with Custom Icon Props in React Native Elements 1.0\nDESCRIPTION: Example of using the leftIcon prop with additional props like onPress in the ListItem component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2019-01-27-1.0-release.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem\n  title=\"Yea\"\n  leftIcon={{ name: 'home', onPress: () => alert('hello') }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB Components in React Native with React Native Elements\nDESCRIPTION: This snippet demonstrates how to use the FAB component from React Native Elements in various configurations. It shows different sizes, colors, icons, and states of the FAB, as well as how to control its visibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/FAB/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { FAB } from 'react-native-elements';\n\nexport default () => {\n  const [visible, setVisible] = React.useState(true);\n\n  return (\n    <>\n      <View\n        style={{\n          alignItems: 'center',\n          paddingVertical: 5,\n          flexGrow: 1,\n        }}\n      >\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n          Small Size\n        </Text>\n        <FAB\n          loading\n          visible={visible}\n          icon={{ name: 'add', color: 'white' }}\n          size=\"small\"\n        />\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n          Large Size\n        </Text>\n        <FAB\n          visible={visible}\n          icon={{ name: 'add', color: 'white' }}\n          color=\"green\"\n        />\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>\n          Primary Color\n        </Text>\n        <FAB\n          visible={visible}\n          title=\"Navigate\"\n          upperCase\n          icon={{ name: 'place', color: 'white' }}\n        />\n\n        <Text style={{ color: '#397af8', paddingVertical: 10 }}>Disabled</Text>\n\n        <FAB\n          visible={visible}\n          disabled\n          title=\"Extended\"\n          icon={{\n            name: 'place',\n            color: 'white',\n          }}\n        />\n        <FAB\n          visible={visible}\n          onPress={() => setVisible(!visible)}\n          placement=\"right\"\n          title=\"Hide\"\n          icon={{ name: 'delete', color: 'white' }}\n          color=\"red\"\n        />\n        <FAB\n          visible={!visible}\n          onPress={() => setVisible(!visible)}\n          placement=\"left\"\n          title=\"Show\"\n          icon={{ name: 'edit', color: 'white' }}\n          color=\"green\"\n        />\n      </View>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a reusable Header HOC\nDESCRIPTION: Implements a Higher Order Component to add a reusable header with back/home navigation to screens.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Header } from 'react-native-elements';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nconst withHeader = ({ title = '' }) => (WrappedComponent) => {\n  // ... implementation\n};\n\n// Usage\nexport default withRouter(withHeader({ title: 'Commit List' })(CommitList));\n```\n\n----------------------------------------\n\nTITLE: Importing Theming Components for Documentation (JavaScript/JSX)\nDESCRIPTION: Imports `Tabs` and `TabItem` components from the `@theme` scope. These are likely used by the documentation framework (Docusaurus) to render tabbed content within the page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Resetting Metro Bundler Cache (Shell/Bash)\nDESCRIPTION: Resets the Metro bundler's cache in a React Native project, which can resolve persistent 'Unable to resolve module' errors. This command ensures that stale caches are cleared, allowing correct dependency resolution on next start. It's essential for troubleshooting hard-to-debug metro or bundler issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Area Context Peer Dependency with Yarn\nDESCRIPTION: Installs the 'react-native-safe-area-context' library using Yarn. This is a required peer dependency for handling safe areas on devices with notches or other intrusions. Skip if already installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies with npm for Module Resolution Issues\nDESCRIPTION: Clears the `node_modules` directory and reinstalls all project dependencies using npm (`npm i`). This command is used to fix \"Unable to resolve module x\" errors, which often indicate corrupted or incomplete dependencies when using npm as the package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && npm i\n```\n\n----------------------------------------\n\nTITLE: Rendering SpeedDial Usage Examples (MDX/JSX)\nDESCRIPTION: This JSX tag renders the 'Usage' component, which is imported from '../component_usage/SpeedDial.mdx'. This external component presumably contains the practical code examples demonstrating how to implement and use the SpeedDial component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/SpeedDial.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots using Yarn/NPM in Bash\nDESCRIPTION: Provides the command-line instructions to update Jest snapshots for tests. This is necessary when intentional changes have been made to component rendering and the snapshots need to reflect the new standard. It shows commands for both yarn and npm package managers.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn test -u\n\n# npm\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Deploying the web app\nDESCRIPTION: Command to deploy the web app using yarn, likely using gh-pages for GitHub Pages deployment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/example/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn deploy\n```\n\n----------------------------------------\n\nTITLE: ListItem Component Props Interface\nDESCRIPTION: Type definitions and prop documentation for the ListItem component including common props like bottomDivider, Component, containerStyle, disabled, etc.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/listitem.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListItemProps {\n  bottomDivider?: boolean; // Add divider at bottom\n  Component?: typeof View | typeof TouchableHighlight;\n  containerStyle?: ViewStyle;\n  disabled?: boolean;\n  disabledStyle?: ViewStyle;\n  onLongPress?: () => void;\n  onPress?: () => void;\n  pad?: number; // Default: 16\n  topDivider?: boolean;\n  ViewComponent?: React.ComponentType;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CircularSlider via NPM in React Native\nDESCRIPTION: Command to install the CircularSlider component using NPM package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/universe/CircularSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/circular-slider\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements and Web Dependencies via Yarn - Bash\nDESCRIPTION: Adds React Native Elements packages and required dependencies for web support, including react-native-web and react-native-vector-icons. Run this command in your create-react-app project directory for web compatibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn add  @rneui/base @rneui/themed react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Clearing Android Build Cache\nDESCRIPTION: Removes the Android project's main build directory (`android/build`) and the app module's build directory (`android/app/build`). This helps resolve caching problems, particularly the \"Unrecognized font x\" error on Android, by forcing a clean build.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component from React Native Elements\nDESCRIPTION: Shows how to import the Avatar component from the @rneui/themed package for use in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Avatar } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Accordion and Supporting Components in React Native Elements (JavaScript)\nDESCRIPTION: Demonstrates how to import dependencies required for using ListItem.Accordion in a React Native Elements project. The import statements ensure React support, documentation utilities, and the testing of an empty import from the main package. It sets up the code context before using ListItem.Accordion within an application, with dependencies including @theme/Tabs, @theme/TabItem, and react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/ListItem.Accordion.mdx\";\n```\n\n----------------------------------------\n\nTITLE: ListItem with Title Props in React Native Elements 1.0\nDESCRIPTION: Example showing how to pass props like numberOfLines to the title in a ListItem component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2019-01-27-1.0-release.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem titleProps={{ numberOfLines: 4 }} />\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-safe-area-context Dependency\nDESCRIPTION: Links the native parts of the react-native-safe-area-context library. Similar to vector icons, this is generally only needed for React Native versions below 0.60 due to auto-linking in newer versions. Unlinking might be necessary if auto-linking causes issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies with npm (Bash)\nDESCRIPTION: Command sequence to completely remove the `node_modules` directory and then reinstall all project dependencies using npm (`npm i`). This is a common fix for 'Unable to resolve module x' errors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && npm i\n```\n\n----------------------------------------\n\nTITLE: Calling SearchBar Methods in React Native\nDESCRIPTION: Demonstrates how to call various SearchBar methods using the stored reference. Shows examples of focus, blur, clear, and platform-specific cancel methods.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n\n----------------------------------------\n\nTITLE: Themed Styles via makeStyles Hook Generator (JavaScript/React Native)\nDESCRIPTION: Demonstrates use of the makeStyles hook generator from react-native-elements to create styles referencing the current theme and component props. The hook allows dynamic styling based on theme values and optional properties (e.g., fullWidth), separating styling logic from component code. Dependencies are react-native-elements, and expected output is UI elements with consistent, theme-aware styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from 'react-native-elements';\n\ntype Params = {\n  fullWidth?: boolean,\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating Letter-based Avatars in React Native Elements\nDESCRIPTION: Demonstrates how to create avatars with text/letters as content with custom background colors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Avatar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    title=\"Rd\"\n    containerStyle={{ backgroundColor: \"blue\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    title=\"AB\"\n    containerStyle={{ backgroundColor: \"purple\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNE Directly from GitHub with Yarn\nDESCRIPTION: These commands install the bleeding-edge versions of `@rneui/base` and `@rneui/themed` directly from their respective branches (`base`, `themed`) on the GitHub repository using Yarn. This is an alternative if installing via the `@edge` tag fails.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nyarn add @rneui/base@github:react-native-elements/react-native-elements#base\n\n# @rneui/themed\nyarn add @rneui/themed@github:react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Installing RNE Packages using Yarn for React Native Init\nDESCRIPTION: Installs project dependencies using `yarn` and then adds the core React Native Elements packages (`@rneui/base` and `@rneui/themed`). This follows the cleanup step when resolving font issues in a `react-native-init` project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing from React Native Elements in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the basic structure for importing components or utilities from the 'react-native-elements' library using ES6 module syntax. Although the braces are empty in this example, they would typically contain the specific names of the components or functions being imported. This is a prerequisite for using any components from the library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Fractional Ratings in React Native Elements (JSX)\nDESCRIPTION: Shows how to configure the `Rating` component to support and display fractional rating values (e.g., 3.3 out of 5). The `fractions` prop enables this feature (set to 1 for one decimal place), `startingValue` accepts a float, and `showRating` displays the numeric value.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/rating.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Rating showRating fractions={1} startingValue={3.3} />\n```\n\n----------------------------------------\n\nTITLE: Providing Web Modal for RNE Tooltip in JavaScript\nDESCRIPTION: This snippet demonstrates how to provide a compatible Modal component implementation when using the RNE Tooltip component on the web platform (`react-native-web`). It imports a Modal component (e.g., from `modal-react-native-web`) and passes it to the `ModalComponent` prop of the `Tooltip`. This is necessary because `react-native-web` does not have a built-in Modal implementation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Tooltip ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Theming and Card Components - React Native Elements - JavaScript\nDESCRIPTION: Imports theming components (Tabs, TabItem) from the docusaurus theme package and React Native Elements for use in the documentation and sample UI. This code is a prerequisite for rendering card dividers in a customizable way within component tabs. Required dependencies are '@theme/Tabs', '@theme/TabItem', and 'react-native-elements'. There are no parameters or outputs; this is for setup and configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Card.Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Referencing the Card Title Theme Key in React Native Elements (JavaScript)\nDESCRIPTION: This snippet provides the theme key, 'CardTitle', utilized when customizing or overriding styles for the Card.Title component via a ThemeProvider. This is referenced in advanced theming scenarios and assumes that a theming context, such as ThemeProvider from '@rneui/themed', is set up in your application. The key does not correspond to code but to documentation of the correct theming property.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCardTitle\n```\n\n----------------------------------------\n\nTITLE: Importing the Dialog Component (React Native/TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Dialog component from the '@rneui/themed' package for use in a React Native application using TypeScript. This component is used to display modal dialogs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components and Utilities in JavaScript\nDESCRIPTION: This snippet imports Tabs and TabItem UI components, as well as the useBaseUrl hook, from the Docusaurus theme in JavaScript. These imports are used to build interactive tabs and resolve URLs within the documentation. The dependencies are '@theme/Tabs', '@theme/TabItem', and '@docusaurus/useBaseUrl', which must be available in the project's node_modules directory for the code to function correctly. This code snippet does not produce direct output but is crucial for enabling dynamic content sections and resource linking in documentation pages.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/universe/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths - React Native Elements (diff)\nDESCRIPTION: Shows the required update in import statements when migrating to v4, switching from 'react-native-elements' to '@rneui/themed'. No dependencies beyond those stated. Ensures all themed components are imported from the new package location. Requires refactoring any previous imports globally.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import {} from 'react-native-elements'\\n+ import {} from '@rneui/themed'\n```\n\n----------------------------------------\n\nTITLE: Removing Project Dependencies and Lock Files in Expo or create-react-native-app (Bash)\nDESCRIPTION: This shell command removes node_modules, yarn.lock, and package-lock.json to ensure a clean slate before reinstalling dependencies in an Expo or create-react-native-app project. This can help resolve persistent dependency conflicts. Run from the project root and ensure you have appropriate permissions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge Version via Yarn\nDESCRIPTION: Commands to install the bleeding edge version of React Native Elements using Yarn, including alternative GitHub installation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/base@edge @rneui/themed@edge\n\n# Alternative GitHub installation\n# @rneui/base\nyarn add @rneui/base@github:react-native-elements/react-native-elements#base\n\n# @rneui/themed\nyarn add @rneui/themed@github:react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Identifying Theme Key for ListItem.Content Customization (Text)\nDESCRIPTION: Specifies the theme key `ListItemContent` used for customizing the appearance of the `ListItem.Content` component through the ThemeProvider in React Native Elements. This key allows developers to define custom styles in their theme configuration that apply specifically to this component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Content.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nListItemContent\n```\n\n----------------------------------------\n\nTITLE: ListItem.Accordion Props Interface\nDESCRIPTION: Type definitions for the Accordion variant of ListItem component, including props for expansion control and animation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/listitem.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListItemAccordionProps {\n  isExpanded?: boolean;\n  icon?: IconNode;\n  expandIcon?: IconNode;\n  content?: ReactNode;\n  noIcon?: boolean;\n  noRotation?: boolean;\n  animation?: Object | number; // Default: {type:\"timing\",duration:350}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial with Themed Provider in React Native Elements (JavaScript)\nDESCRIPTION: This code snippet demonstrates the import statement required to use the SpeedDial component from the '@rneui/themed' package in a React Native project. Ensure that the '@rneui/themed' dependency is installed in your project. The import allows developers to integrate a floating action button that displays a stack of related actions into their application's UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SpeedDial } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React Native Elements\nDESCRIPTION: Shows how to import the Slider component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual Commit Items in React Native\nDESCRIPTION: This snippet demonstrates the renderItem and renderLeftElement methods for displaying individual commit items in the list.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderItem = ({ item }) => (\n  <ListItem\n    title={item.commit.author.name}\n    subtitle={item.commit.message}\n    leftElement={this.renderLeftElement(item)\n  />\n)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderLeftElement = (item) => (\n  <View>\n    <Avatar\n      source={{ uri: item.author.avatar_url }}\n      size='medium'\n      rounded\n    />\n  </View>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons (Shell/Bash)\nDESCRIPTION: Demonstrates installing the react-native-vector-icons package, a common dependency for icon usage in React Native Elements. The snippet provides both npm and yarn alternatives, allowing users to choose based on their development setup. Accurate installation is essential to resolve font-related errors in React Native projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install react-native-vector-icons --save\n\n# yarn\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-safe-area-context\nDESCRIPTION: Command to link react-native-safe-area-context in a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Tab` component from the `@rneui/themed` library. This import is necessary to access and use the nested `Tab.Item` component within a React Native application built with TypeScript.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Tab.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components - Docusaurus/MDX - Markdown/JSX\nDESCRIPTION: This snippet imports Docusaurus-specific tab and tab item components, as well as a usage example for the TabView, into a Markdown/MDX page. The @theme/Tabs and @theme/TabItem imports enable interactive tab sections in the rendered documentation, while the react-native-elements import is required for referencing the TabView in sample code and prop tables. These imports are foundational for structuring component documentation and examples on the documentation site.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/TabView.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing TabView.Item Component in React Native\nDESCRIPTION: This code snippet demonstrates how to import the TabView.Item component from react-native-elements. It also shows the import of Tabs and TabItem components from the theme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/TabView.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Avatar Theme Key for React Native Elements\nDESCRIPTION: Shows the theme key used for customizing Avatar component with ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nAvatar\n```\n\n----------------------------------------\n\nTITLE: Building the web app\nDESCRIPTION: Command to build the web version of the app using yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/example/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn web\n```\n\n----------------------------------------\n\nTITLE: Identifying ListItem Theme Key in React Native Elements\nDESCRIPTION: This snippet indicates that 'ListItem' is the theme key used for customizing the ListItem component via a ThemeProvider in `react-native-elements`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nListItem\n```\n\n----------------------------------------\n\nTITLE: Setting up routing in App.js\nDESCRIPTION: Configures routing in the main App component using React Router.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Route, Router, Switch } from './Utils/Routing';\n\n// Inside render method\n<Router>\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n    <Route path=\"/commit\" component={CommitList} />\n  </Switch>\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts in React Native Web\nDESCRIPTION: JSX code snippet to load vector icon fonts in a React Native Web application, ensuring proper rendering of icons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Usage Documentation in React Native Elements (Markdown)\nDESCRIPTION: This snippet demonstrates how to import an external Markdown (.md) usage documentation file into a Markdown-based documentation file. It allows the Button documentation page to include example usage instructions by referencing the 'Button.md' file located in './usage/Button/'. Dependencies include support for ES6 JavaScript module import syntax within the documentation generation system. The import provides context for usage that will appear in the rendered output but does not execute any runtime functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Button.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Usage from './usage/Button/Button.md'\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard Dependencies in React Native\nDESCRIPTION: Import statements showing required dependencies for using the PricingCard component from React Native Elements and related documentation components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/PricingCard.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Header Component with React Native Elements\nDESCRIPTION: This code snippet defines a custom Header component using React Native Elements. It includes left and right components for navigation, a centered title, and functionality to open documentation and playground links. The component is styled using StyleSheet and uses SafeAreaProvider for proper rendering.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Header/snack/index.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  Linking,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport { Header as HeaderRNE, HeaderProps, Icon } from 'react-native-elements';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype HeaderComponentProps = {\n  title: string;\n  view?: string;\n};\n\ntype ParamList = {\n  Detail: {\n    openDrawer: void;\n  };\n};\n\nconst Header: React.FunctionComponent<HeaderComponentProps> = (props) => {\n\n  const docsNavigate = () => {\n    Linking.openURL(`https://reactnativeelements.com/docs/${props.view}`);\n  };\n\n  const playgroundNavigate = () => {\n    Linking.openURL(`https://react-native-elements.js.org/#/${props.view}`);\n  };\n\n  return (\n    <SafeAreaProvider>\n      <HeaderRNE\n        leftComponent={{\n          icon: 'menu',\n          color: '#fff',\n        }}\n        rightComponent={\n            <View style={styles.headerRight}>\n              <TouchableOpacity onPress={docsNavigate}>\n                <Icon name=\"description\" color=\"white\" />\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={{ marginLeft: 10 }}\n                onPress={playgroundNavigate}\n              >\n                <Icon type=\"antdesign\" name=\"rocket1\" color=\"white\" />\n              </TouchableOpacity>\n            </View>\n        }\n        centerComponent={{ text: 'Header', style: styles.heading }}\n      />\n    </SafeAreaProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  headerContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#397af8',\n    marginBottom: 20,\n    width: '100%',\n    paddingVertical: 15,\n  },\n  heading: {\n    color: 'white',\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  headerRight: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginTop: 5,\n  },\n  subheaderText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: ListItem with Avatar Props in React Native Elements 1.0\nDESCRIPTION: Example of using the leftAvatar and rightAvatar props in the ListItem component, showing customization options.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2019-01-27-1.0-release.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem\n  leftAvatar={{\n    title: 'MD',\n    rounded: false,\n    containerStyle: { margin: 5 },\n    onPress: () => alert('hey'),\n  }}\n  rightAvatar={{ title: 'DW', onLongPress: () => alert('hey') }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing New Expo Project with React Native Elements Template (Stable) - Bash\nDESCRIPTION: Bootstraps a new React Native project using Expo CLI and the official React Native Elements template. Run this command to quickly set up a starter project with recommended defaults.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template\n```\n\n----------------------------------------\n\nTITLE: Updating Imports to @rneui Namespaces - diff\nDESCRIPTION: This code snippet demonstrates how to update old import statements from 'react-native-elements' to the new '@rneui/themed' package. No new dependencies are required other than installing the @rneui libraries. Replace all relevant imports to ensure compatibility with v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import {} from 'react-native-elements'\\n+ import {} from '@rneui/themed'\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Documentation Content with MDX in React Native Elements (MDX)\nDESCRIPTION: This snippet embeds and renders the imported Usage component, which typically contains practical documentation and code examples for the SearchBar component. Requires a valid Usage MDX file and a compatible documentation environment. The Usage component doesn't accept parametersâ€”it's rendered as-is to provide end-user instructions. Output is determined by the content of the imported MDX file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Embedding Chip Usage Example in Documentation - Markdown\nDESCRIPTION: This snippet inserts the imported Usage example into the documentation, typically rendering it as a live or static demo within the page. It assumes that Usage is resolved either to a component or HTML/MD output by the site's build system. No additional parameters or configuration are required for rendering.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Chip.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Node Modules to Resolve Module Resolution Errors (Bash)\nDESCRIPTION: These commands completely remove node_modules and reinstall all dependencies using either npm or yarn to resolve 'Unable to resolve module x' errors. Execute the appropriate command depending on your package manager. Ensure to run them from the project root and have either npm or yarn installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm -rm -rf node_modules && npm i\\n\\nyarn - rm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Bundler with Cache Reset via npm\nDESCRIPTION: Starts the React Native Metro bundler using npm, passing the `--reset-cache` flag. This command clears the bundler's cache and can resolve \"Unable to resolve module x\" errors caused by stale or incorrect cached module information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Cleaning Node Modules with Yarn - Bash Shell\nDESCRIPTION: Removes node_modules and reinstalls all dependencies using yarn as the package manager. This maintains consistency for projects managed with yarn and helps clear corrupted or outdated packages.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements via Yarn\nDESCRIPTION: Commands to install the stable version of React Native Elements using Yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Using Custom Components as Children in Header in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet shows an alternative method for providing custom components to the Header by nesting them directly as children. The order typically corresponds to left, center, and right components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/header.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<Header>\n  <MyCustomLeftComponent />\n  <MyCustomCenterComponent />\n  <MyCustomRightComponent />\n</Header>\n```\n\n----------------------------------------\n\nTITLE: Importing TabView Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the TabView component and related modules in a React Native Elements project. It also includes imports for documentation-specific components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/TabView.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Theme Key Configuration for Card Featured Subtitle\nDESCRIPTION: Specifies the theme key used for styling Card.FeaturedSubtitle component\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCardFeaturedSubtitle\n```\n\n----------------------------------------\n\nTITLE: Importing the Divider Component in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `Divider` component from the `@rneui/themed` package. This import is necessary to use the Divider component within a React Native application utilizing the React Native Elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Divider } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Example Functional Test Scenario for React Native Button Group\nDESCRIPTION: This snippet demonstrates a test scenario description for a functional test of a button group component. It specifies the expected behavior when a user interacts with the component, highlighting the purpose of functional testing in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML block, known as frontmatter in Markdown/MDX files processed by tools like Docusaurus, sets metadata for the documentation page. It defines the page's position in the sidebar (`sidebar_position`), a unique identifier (`id`), the URL slug (`slug`), and the display title (`title`).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/universe/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 0\nid: getting_started\nslug: /universe\ntitle: Getting Started\n---\n```\n\n----------------------------------------\n\nTITLE: Merging Object Styles with ThemeProvider in React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates merging an object-style theme with local object styles for a React Native Elements Button. Both the theme and local properties use objects for the 'containerStyle' property, ensuring compatibility in the ThemeProvider. Dependencies include React Native and react-native-elements; the Button will have a container with a top margin and a blue background.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Overrides\nDESCRIPTION: Configuration file that customizes babel settings to include necessary node modules and plugins for web compatibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/web_usage.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/react-native-elements'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Theme Key for DialogLoading in React Native Elements\nDESCRIPTION: This code snippet provides the theme key for customizing the DialogLoading component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.Loading.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDialogLoading\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons using Bash (npm/yarn)\nDESCRIPTION: Provides commands to install the `react-native-vector-icons` library using npm or yarn. This library is a crucial dependency for displaying icons within React Native Elements components in a standard `react-native-init` project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install react-native-vector-icons --save\n\n# yarn\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Key for ListItemInput - JavaScript\nDESCRIPTION: This snippet provides the theme key string 'ListItemInput' used when customizing or overriding theme properties for the ListItem.Input component. Use this key within a ThemeProvider or theme object to apply specific styles or configurations globally.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemInput\n```\n\n----------------------------------------\n\nTITLE: Importing React Native and React Native Elements Components\nDESCRIPTION: This snippet demonstrates the import statements for various React Native and React Native Elements components used in rendering the commit list.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ActivityIndicator, Dimensions, FlatList, Platform, View } from 'react-native';\nimport { Avatar, ListItem } from 'react-native-elements';\n```\n\n----------------------------------------\n\nTITLE: Styled Components Theme Configuration\nDESCRIPTION: Example of incorrect and correct theme configuration when using styled-components with React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  Text: {\n    style: {\n      fontSize: 16\n    }\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst StyledText = styled(Text)`\n  color: red;\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  Text: {\n    style: [\n      {\n        fontSize: 16\n      }\n    ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Tests with Jest - Bash\nDESCRIPTION: Illustrates the bash commands needed to update Jest snapshot tests for the project, supporting both yarn and npm usage. Dependencies include Jest configured in the project and either yarn or npm installed. The code block is to be executed in the terminal to refresh snapshot files after intentional changes, ensuring future comparisons align with updated expectations.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn test -u\\n\\n# npm\\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package in a TypeScript file. This import is necessary to use the `ListItem` and its sub-components like `ListItem.Content`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles to a React Native Elements Button (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates applying inline styles to a Button component, likely from 'react-native-elements'. The `buttonStyle` object defines the button's visual appearance (background color, border, padding), while `containerStyle` sets the dimensions and margins of the button's container view.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n              buttonStyle={{\n                backgroundColor: 'rgba(92, 99,216, 1)',\n                borderColor: 'transparent',\n                borderWidth: 0,\n                borderRadius: 5,\n                paddingVertical: 10,\n              }}\n              containerStyle={{\n                width: 200,\n                marginHorizontal: 50,\n                marginVertical: 10,\n              }}\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the ListItem component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Card.Title in React Native Elements\nDESCRIPTION: This snippet provides the theme key for the Card.Title component, which can be used for customizing the component's appearance using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCardTitle\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo development server\nDESCRIPTION: Commands to start the Expo development server using either yarn or npm.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/example/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Using yarn\nyarn start\n\n# Using npm\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Component in React Native Elements\nDESCRIPTION: This code imports a Snack component from a markdown file and renders it. It's likely used to embed interactive code examples or documentation within a React Native Elements project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Card/Card.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-vector-icons - Yarn CLI/Bash\nDESCRIPTION: This Bash command snippet shows how to install the 'react-native-vector-icons' dependency using Yarn, which is required for icon support in React Native Elements. Without this package, icon rendering and font resolution errors may occur. The snippet presumes a React Native CLI project and that Yarn is available.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Configuring CRA Build Overrides (JavaScript)\nDESCRIPTION: Creates a `config-overrides.js` file using `customize-cra` and `react-app-rewired`. This configuration ensures that the necessary Babel plugins are added and that RNE packages (`@rneui/base`, `@rneui/themed`), vector icons, and ratings are included in the Babel transpilation process, allowing them to work in a web environment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Different Sized Avatars in React Native Elements\nDESCRIPTION: Shows how to create avatars of different sizes (24, 32, and 48) with the same icon.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Avatar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={24}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={32}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={48}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component for Documentation (JavaScript/MDX)\nDESCRIPTION: Imports the `Tabs` component from the `@theme/Tabs` package. This component is typically used within documentation systems like Docusaurus to create tabbed content sections for organizing information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\n```\n\n----------------------------------------\n\nTITLE: Rendering External Usage Component in MDX\nDESCRIPTION: This MDX tag renders the imported 'Usage' component. It serves as a placeholder within the documentation file to display the actual usage examples defined in `LinearProgress.mdx`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/LinearProgress.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Theme Style Object Merging Example\nDESCRIPTION: Demonstrates correct theme style merging when both theme and local styles are objects. Shows theme configuration with containerStyle as an object and matching local style object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/4.pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing CircularSlider with Yarn - Bash\nDESCRIPTION: This snippet provides the command to install the @rneui/circular-slider package using Yarn. Execute this in your project root to add the dependency via Yarn, which should be installed on your system beforehand. This is an alternative to NPM for package management.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/universe/CircularSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/circular-slider\n\n```\n\n----------------------------------------\n\nTITLE: Installing Stable RNE with Yarn\nDESCRIPTION: This command installs the stable versions of the core React Native Elements packages, `@rneui/themed` and `@rneui/base`, using the Yarn package manager. These are the recommended packages for production use.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Consuming Theme Using ThemeConsumer Render Props (JavaScript/React Native)\nDESCRIPTION: This snippet demonstrates how to use the ThemeConsumer component to access the current theme object via render props. Custom components can read theme values without HOCs. Dependencies are react-native and react-native-elements; expected output is UI styled according to the theme context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from 'react-native-elements';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Content as Component in MDX\nDESCRIPTION: This MDX code imports the content of the `CONTRIBUTING.md` file, located in the parent directory relative to the `@site` alias (a common alias in Docusaurus for the website source directory), as a reusable React component named `ContributionGuide`. This mechanism allows embedding external Markdown content within documentation pages.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n```\n\n----------------------------------------\n\nTITLE: React Native Elements Chip Component Examples\nDESCRIPTION: Comprehensive example showcasing various Chip component implementations including solid, disabled, outlined, and icon chips with different configurations and interactions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, ScrollView, StyleSheet } from 'react-native';\nimport { Chip, withTheme, lightColors } from '@rneui/themed';\n\ntype ChipsComponentProps = {};\n\nconst Chips: React.FunctionComponent<ChipsComponentProps> = () => {\nreturn (\n  <>\n    <ScrollView>\n      <View style={styles.contentView}>\n        <View style={{ alignItems: 'center' }}>\n          <Chip title=\"Solid Chip\" containerStyle={{ marginVertical: 15 }} />\n          <Chip\n            title=\"Disabled Chip\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined Chip\"\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Outlined & Disabled\"\n            type=\"outline\"\n            disabled\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Left Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Right Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: 'white',\n            }}\n            iconRight\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'bluetooth',\n              type: 'font-awesome',\n              size: 20,\n              color: lightColors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n          <Chip\n            title=\"Pressable Icon Chip\"\n            icon={{\n              name: 'close',\n              type: 'font-awesome',\n              size: 20,\n              color: lightColors.primary2,\n            }}\n            onPress={() => console.log('Icon chip was pressed!')}\n            iconRight\n            type=\"outline\"\n            containerStyle={{ marginVertical: 15 }}\n          />\n        </View>\n      </View>\n    </ScrollView>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n  marginTop: 20,\n},\n});\n\nexport default withTheme(Chips, '');\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies with Yarn for Module Resolution Issues\nDESCRIPTION: Removes the `node_modules` directory and reinstalls all project dependencies using yarn. Similar to the npm version, this command addresses \"Unable to resolve module x\" errors by ensuring a clean installation of dependencies when using yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Reinstalling Node Modules to Resolve Module Resolution Errors - Bash\nDESCRIPTION: Provides commands for removing and reinstalling node_modules using npm or yarn to resolve module resolution issues. Should be run when the error 'Unable to resolve module x' appears. Inputs: CLI (npm or yarn); outputs: fresh node_modules directory with dependencies installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm -rm -rf node_modules && npm i\\n\\nyarn - rm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: Extending Pressable Props in Components - React Native Elements (diff)\nDESCRIPTION: Exemplifies the usage of Pressable event handlers (onPressIn, onPressOut) and how new props can be passed using 'pressableProps'. This requires the components to be upgraded to v4 and rely on the @rneui/themed package. Demonstrates the replacement of deprecated Touchable-based props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  <CheckBox\\n    title=\"I agree\"\\n    onPress={()=>{}}\\n    onLongPress={()=>{}}\\n+   onPressIn={()=>{}}\\n+   onPressOut={()=>{}}\\n    onPress={() => {}}\\n  />\n```\n\nLANGUAGE: diff\nCODE:\n```\n  <ButtonGroup\\n+   pressableProps={{android_ripple:{radius:2}}}\\n  />\n```\n\n----------------------------------------\n\nTITLE: Explaining Component Availability by Version (Markdown)\nDESCRIPTION: Provides clarification using inline markdown about which components are available in specific versions of React Native Elements. '<FormInput />' is supported in v0.19.1 and below, while '<Input />' is available from v1.0.0-beta1 onwards. No code execution is involved; this is informational, helping users match components with their library version.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nExample:\\n\\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Linking Vector Icons using React Native CLI\nDESCRIPTION: Executes the React Native CLI command `react-native link` to automatically link the native dependencies of `react-native-vector-icons` to the iOS and Android projects. This step is necessary for fonts to be correctly recognized by the native platforms in `react-native-init` projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing the Badge Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Badge` component from the `@rneui/themed` package. This import statement makes the Badge component available for use within a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using Theme Key for Featured Title - React Native Elements - JavaScript\nDESCRIPTION: This snippet displays the theme key string ('CardFeaturedTitle') used when customizing the Card.FeaturedTitle component via the ThemeProvider in React Native Elements. It can be utilized as a key in your theme object to override or extend styles for the featured title. Requires the ThemeProvider context from '@rneui/themed' and relevant theme configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCardFeaturedTitle\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependency: react-native-vector-icons - Bash\nDESCRIPTION: Commands for installing react-native-vector-icons, a required peer dependency for icon usage in React Native Elements. Automatically linked in React Native 0.60+ but manual linking instruction is provided for backward compatibility. Assumes the project is using a compatible React Native environment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-vector-icons\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Documenting Functional Test Scenario - Markdown\nDESCRIPTION: This markdown-formatted snippet describes a user-oriented functional testing scenario for a button group component. It outlines the expected behavior when a user interacts with the button group: selecting a button should highlight it and un-highlight the previously selected button. The scenario is intended for communicating testing requirements and does not specify automated test code. It can be used as a comment or documentation adjacent to the actual test implementation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Contribution Guidelines in MDX\nDESCRIPTION: Imports the CONTRIBUTING.md file content from the parent directory and renders it using a ContributionGuide component within an MDX documentation page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with Yarn (Bash)\nDESCRIPTION: This command first installs all project dependencies listed in `package.json` using `yarn` and then adds the core React Native Elements packages (`@rneui/base` and `@rneui/themed`) to the project. It's used as part of the setup or troubleshooting process for RNE in a standard React Native project initialized with `react-native-init`. Requires Yarn to be installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Node Modules using Bash (npm)\nDESCRIPTION: Command sequence to remove the `node_modules` directory and reinstall all dependencies using npm (`npm i`). This helps resolve 'Unable to resolve module' errors by ensuring a fresh installation of all project dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && npm i\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNEUI from GitHub with Yarn\nDESCRIPTION: Installs the bleeding-edge versions of @rneui/base and @rneui/themed directly from their respective GitHub branches using yarn. This is an alternative method if installation via the '@edge' dist-tag fails.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nyarn add @rneui/base@github:react-native-elements/react-native-elements#base\n\n# @rneui/themed\nyarn add @rneui/themed@github:react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Component Versioning Example in Markdown\nDESCRIPTION: Illustrates how component availability can differ between versions of React Native Elements (e.g., `<FormInput />` vs. `<Input />`), which can cause 'Invariant Violation' errors if the wrong component is used for the installed version. Requires checking the project's `package.json` and the library documentation for the specific version.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nExample:\n\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem for Subtitle Usage in React Native Elements (TypeScript)\nDESCRIPTION: Demonstrates how to import the `ListItem` component from the `@rneui/themed` package in a TypeScript/React Native project. This import is necessary to utilize the `ListItem.Subtitle` sub-component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.Subtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport { ListItem } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearProgress Component with React Native Elements\nDESCRIPTION: This code demonstrates how to use the LinearProgress component from React Native Elements, including both indeterminate and determinate progress variants. It implements a functional component with state management to control the progress animation and provides buttons to start and restart the progress.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, LinearProgress } from '@rneui/themed';\n\nconst LinearProgressAPI: React.FunctionComponent = () => {\nconst [progress, setProgress] = React.useState(0);\n\nReact.useEffect(() => {\n  let subs = true;\n  if (progress < 1 && progress !== 0) {\n    setTimeout(() => {\n      if (subs) {\n        setProgress(progress + 0.1);\n      }\n    }, 100);\n  }\n  return () => {\n    subs = false;\n  };\n}, [progress]);\n\nreturn (\n  <View>\n    <View\n      style={{\n        margin: 10,\n      }}\n    >\n      <Text>Indeterminate Variant </Text>\n      <LinearProgress style={{ marginVertical: 10 }} />\n      <Text>Indeterminate Variant with color</Text>\n      <LinearProgress style={{ marginVertical: 10 }} color=\"red\" />\n      <Text>Determinate Variant</Text>\n      <LinearProgress\n        style={{ marginVertical: 10 }}\n        value={progress}\n        variant=\"determinate\"\n      />\n\n      <Button\n        disabled={progress > 0}\n        onPress={() => {\n          setProgress(0.00001);\n        }}\n        title={'Start Progress'}\n        containerStyle={{ margin: 10 }}\n      />\n      <Button\n        disabled={progress === 0}\n        onPress={() => {\n          setProgress(0);\n        }}\n        title={'Restart'}\n        containerStyle={{ margin: 10 }}\n      />\n    </View>\n  </View>\n);\n};\n\nexport default LinearProgressAPI;\n```\n\n----------------------------------------\n\nTITLE: Creating Styles using StyleSheet in React Native\nDESCRIPTION: This snippet uses `StyleSheet.create` from React Native to define a set of reusable style objects. It includes styles for a main content view (`contentView`), a container for buttons (`buttonsContainer`) using flexbox for layout, and a subheading (`subHeader`) with background color, text color, and padding.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n},\nbuttonsContainer: {\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '100%',\n  marginVertical: 20,\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Styled Lists2 Component using React Native - JavaScript\nDESCRIPTION: This snippet exports a React Native component named Lists2 with its associated styles applied, making it available for import in other modules. It utilizes JavaScript module exports (`export default`) and presumes the Lists2 component and the styles (with a color property set to grey) are previously defined in the file. Other dependencies may include React, React Native, and any higher-level UI components. The main parameter of interest is the Lists2 component itself, and the output is the default module export. This approach follows standard React Native component structuring.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Lists2;\n```\n\n----------------------------------------\n\nTITLE: FAB Properties Documentation Table - OverlayColor\nDESCRIPTION: Specifies the color for background overlay\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/fab.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|     Type     |  Default  |\n| :----------: | :-------: |\n| color string | `#454545` |\n```\n\n----------------------------------------\n\nTITLE: Exporting Lists2 Component with Styling in React Native\nDESCRIPTION: This code shows the completion of a StyleSheet object with text styling properties and the default export of a Lists2 component. The style includes left padding and grey text color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n  paddingLeft: 10,\n  color: 'grey',\n},\n});\n\nexport default Lists2;\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for TabView.Item in React Native Elements\nDESCRIPTION: This snippet demonstrates the theme key to be used for customizing the TabView.Item component in React Native Elements using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/TabView.Item.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTabViewItem\n```\n\n----------------------------------------\n\nTITLE: Importing the Snack Component in JavaScript\nDESCRIPTION: This JavaScript code uses ES6 import syntax to import the default export, named `Snack`, from the relative path `./snack/index.md`. This is typically used in React/React Native projects to bring components into scope for rendering. It depends on the existence of the specified MD file and a compatible module bundler capable of handling `.md` imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Tab/Tab.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for ListItemContent in React Native Elements\nDESCRIPTION: This code snippet shows the theme key for the ListItemContent component, which can be used for customizing the component's appearance using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Content.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemContent\n```\n\n----------------------------------------\n\nTITLE: Importing Components from React Native Elements (JavaScript/TypeScript)\nDESCRIPTION: This snippet shows a basic, incomplete import statement typical in React Native projects using the `react-native-elements` library. It serves as a placeholder or starting point for importing specific components needed within a file, although no specific components are actually imported in this example.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Example Markdown - React Native Elements - JavaScript\nDESCRIPTION: This snippet imports a Markdown file containing Overlay usage examples into the current documentation context. It enables dynamic documentation rendering by referencing an external usage guide, which can include interactive or illustrative content for the Overlay component. Dependency: the file './usage/Overlay/Overlay.md' must be present in the relative directory, and the environment should support such imports (e.g., MDX or custom doc tooling).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Overlay.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/Overlay/Overlay.md'\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons - React Native CLI/Bash\nDESCRIPTION: This Bash snippet provides the command to link 'react-native-vector-icons' into a React Native project. Linking is required in older React Native (pre-Autolinking) setups to ensure native assets are correctly wired up. Developers must run this command at the project root after installation of the icon library. Refer to React Native documentation for further details on linking.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Adding React Router dependencies\nDESCRIPTION: Installs react-router-dom for web routing and react-router-native for native routing.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn add react-router-dom react-router-native\n```\n\n----------------------------------------\n\nTITLE: Creating Different Shaped Avatars in React Native Elements\nDESCRIPTION: Demonstrates how to create rounded and square avatars with icons using the Avatar component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Avatar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row spacing={4}>\n  <Avatar\n    size={32}\n    rounded\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n  <Avatar\n    size={32}\n    icon={{ name: \"pencil\", type: \"font-awesome\" }}\n    containerStyle={{ backgroundColor: \"#9700b9\" }}\n  />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Card.Divider in React Native Elements\nDESCRIPTION: Indicates the theme key used for styling the Card.Divider component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nCardDivider\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Native Colors in Theme (JSX)\nDESCRIPTION: Shows how to configure the theme to use the default native color palette for the current platform (iOS or Android). It uses `Platform.select` from `react-native` to conditionally spread the appropriate platform colors from `colors.platform.ios` or `colors.platform.android` into the theme's `colors` object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Button, colors, ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  colors: {\n    ...Platform.select({\n      default: colors.platform.android,\n      ios: colors.platform.ios,\n    }),\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      // This button's color will now be the default iOS / Android blue.\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Skeleton Shape Variants in React Native Elements (TypeScript/TSX)\nDESCRIPTION: Illustrates how to use the `Skeleton` component with different shape variants. It shows a default rectangular skeleton (`width={120}`, `height={40}`) and a circular skeleton (`circle`, `width={40}`, `height={40}`). Assumes usage of a `Stack` component for layout.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\"center\" spacing={4}>\n  <Skeleton width={120} height={40} />\n  <Skeleton circle width={40} height={40} />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Including Markdown-Defined Usage Component in Documentation - Markdown/JSX\nDESCRIPTION: Embeds the imported Usage documentation component within the page layout. It displays usage examples and best practices for the Icon component. Requires the Usage module to be correctly imported. No parameters; renders content inline in the documentation. Intended for static site generators supporting MDX or JSX.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Icon.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Exporting Themed Component with Higher-Order Component - React Native Elements - JavaScript\nDESCRIPTION: This export statement wraps the Buttons component with React Native Elements' withTheme HOC, allowing the component to access and apply theme properties. The HOC is provided with an empty string as the second parameter. This pattern requires react-native-elements and is meant to make styling and theming consistent throughout the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default withTheme(Buttons, '');\n```\n\n----------------------------------------\n\nTITLE: Correcting Component Import Syntax in React Native Elements\nDESCRIPTION: Demonstrates the correct way to import components from react-native-elements, using proper capitalization.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Incorrect\nimport { Listitem } from 'react-native-elements'\n\n// Correct\nimport { ListItem } from 'react-native-elements'\n```\n\n----------------------------------------\n\nTITLE: Documentation Tab Components Import\nDESCRIPTION: Import statements for documentation tab components used in the documentation structure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/vector-icons in an Expo Project with Yarn (Bash)\nDESCRIPTION: This command installs the @expo/vector-icons package in an Expo-managed React Native project using yarn. This package provides icon font support in Expo projects. It should be run after removing existing dependencies and requires yarn to be installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Using the Icon Component in React Native Elements (JavaScript)\nDESCRIPTION: This React Native functional component demonstrates various ways to use the `Icon` component from `@rneui/themed`. It shows how to specify the icon `name`, `type` (icon set like 'evilicon', 'ionicon', 'font-awesome'), and `color`. It also illustrates using the `reverse` prop to create a button-like appearance and the `raised` prop for a shadow effect. An `onPress` handler is attached to one icon to log a message.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Icon } from '@rneui/themed';\n\nexport default () => {\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Icon\n        name='rowing' />\n\n      <Icon\n        name='g-translate'\n        color='#00aced' />\n\n      <Icon\n        name='sc-telegram'\n        type='evilicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        reverse\n        name='ios-american-football'\n        type='ionicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        raised\n        name='heartbeat'\n        type='font-awesome'\n        color='#f50'\n        onPress={() => console.log('hello')} />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Safe Area Context Dependency in React Native\nDESCRIPTION: Links the native modules for 'react-native-safe-area-context' in a standard React Native project. This step is typically required for React Native versions below 0.60. For versions 0.60 and above, auto-linking is usually sufficient, and manual linking might cause issues.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Title Component for Use in Buttons - React Native - JavaScript\nDESCRIPTION: This component, CustomTitle, returns a styled <View> containing two <Text> elements for a name and position title. It demonstrates inline styling for font weight, size, and italics, suitable for displaying custom, reusable title sections within other React Native components. Inputs are the hardcoded name and title, outputs are the formatted texts. Dependencies: React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Button/snack/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomTitle = () => {\n  return (\n    <View style={{ flexDirection: 'column' }}>\n      <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n      <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n        Minister of Magic\n      </Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Node Modules and Lockfile - React Native CLI/Bash\nDESCRIPTION: This Bash command snippet is used in React Native CLI setups to delete existing node_modules and yarn.lock to remove potentially corrupted or stale packages before reinstalling dependencies. Running this ensures a clean environment and can resolve build or linking failures. No input parameters are required beyond access to the project root folder, and the command should be run in a shell.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Files using Bash\nDESCRIPTION: Command to remove `node_modules`, lock files (`yarn.lock`, `package-lock.json`) to ensure a clean state before reinstalling dependencies. This is often the first step when troubleshooting linking or dependency issues in a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements (JavaScript)\nDESCRIPTION: This snippet shows how to import the `ListItem` component from the `@rneui/themed` package. `ListItem.Content` is typically used as a child of the `ListItem` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for Card.Image in React Native Elements\nDESCRIPTION: This code snippet demonstrates the theme key used for customizing the Card.Image component in React Native Elements using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Card.Image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nCardImage\n```\n\n----------------------------------------\n\nTITLE: Cleaning Expo Project Files using Bash\nDESCRIPTION: Command to remove `node_modules` and lock files (`yarn.lock`, `package-lock.json`) within an Expo or create-react-native-app (CRNA) project. This ensures a clean state before reinstalling dependencies, similar to the process for `react-native-init` projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Importing Snack Component from Markdown in JavaScript\nDESCRIPTION: This JavaScript code snippet uses an ES module import statement to import the default export, named 'Snack', from the relative path './snack/index.md'. This pattern suggests an environment (like MDX) where Markdown files can export components or content, requiring appropriate tooling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/AirbnbRating/AirbnbRating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\n----------------------------------------\n\nTITLE: Configuring Left-Aligned Header Center Component in JavaScript/JSX\nDESCRIPTION: Shows how to configure the React Native Elements Header to align the center component to the left using the `placement=\"left\"` prop. The example still uses default components configured via object props for left, center, and right sections.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/header.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  placement=\"left\"\n  leftComponent={{ icon: 'menu', color: '#fff' }}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  rightComponent={{ icon: 'home', color: '#fff' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Artifacts for React Native Init Setup (Bash)\nDESCRIPTION: Command to remove `node_modules` and `yarn.lock` as a first step in resolving font or dependency issues in a standard React Native project initialized with `react-native-init`. This ensures a clean state before reinstalling dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo Project with Bleeding Edge RNEUI Template\nDESCRIPTION: Creates a new Expo project using the Expo CLI, pre-configured with the bleeding-edge version of the React Native Elements template.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies with Yarn (Bash)\nDESCRIPTION: Command sequence to completely remove the `node_modules` directory and then reinstall all project dependencies using Yarn (`yarn`). This serves the same purpose as the npm equivalent for fixing 'Unable to resolve module x' errors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && yarn\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in React Native Elements\nDESCRIPTION: Shows how to import the Button component from the React Native Elements themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component from React Native Elements in TypeScript\nDESCRIPTION: This code snippet shows how to import the Dialog component from the @rneui/themed package in a TypeScript React Native project. The Dialog component includes the Loading functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Dialog.Loading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Title Component in React Native\nDESCRIPTION: This snippet defines a functional React Native component named `CustomTitle`. It returns a `View` containing two `Text` components styled to display a primary title (bold) and a secondary subtitle (italic), arranged vertically.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomTitle = () => {\nreturn (\n  <View style={{ flexDirection: 'column' }}>\n    <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n    <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n      Minister of Magic\n    </Text>\n  </View>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Functional Testing User Interaction Scenario in Markdown\nDESCRIPTION: This markdown code block presents an example scenario for functional testing of a Button Group component in React Native Elements. It articulates that when a user touches a button, the correct button should be highlighted while the previously selected button is un-highlighted. This serves as a guideline or expected behavior for writing related Enzyme tests. No code dependencies are required, as this is for documentation/specification only.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Contribution Guide Markdown - React (JSX) - JavaScript\nDESCRIPTION: This snippet imports a markdown file containing the contribution guide and renders it inside a React component using JSX. It requires a setup (such as Docusaurus or markdown-to-React loader) that allows importing markdown files as React components. No parameters are passed; the markdown is shown as-is. Expected output is the content of the markdown file rendered in place, with no additional customization applied. Assumes that the build environment is configured to handle markdown imports as components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Theme Key Configuration for CardFeaturedSubtitle\nDESCRIPTION: Specifies the theme key used for customizing the CardFeaturedSubtitle component styling\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCardFeaturedSubtitle\n```\n\n----------------------------------------\n\nTITLE: Importing SpeedDial Component - React Native Elements - JavaScript\nDESCRIPTION: This snippet shows the import statement required to use the SpeedDial component from the '@rneui/themed' package. It is a prerequisite for utilizing any SpeedDial or SpeedDial.Action functionality. The import must be placed at the top of your JavaScript file to ensure you can create and manage SpeedDial elements in your component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/SpeedDial.Action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SpeedDial } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Modal for Web Platform in React Native Elements Dialog\nDESCRIPTION: This snippet demonstrates how to import and use a valid Modal component for the web platform when using the Dialog component from React Native Elements. It's necessary because the Modal component is not yet implemented in react-native-web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Dialog/Dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Dialog ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.Title in React Native Elements\nDESCRIPTION: This code snippet displays the theme key for customizing the ListItem.Title component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nListItemTitle\n```\n\n----------------------------------------\n\nTITLE: Importing Header Usage Example Component (JavaScript/JSX)\nDESCRIPTION: Imports a component named `Usage` from a relative MDX file (`../component_usage/Header.mdx`). This external `Usage` component is expected to contain the practical code examples demonstrating how to implement and use the Header component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Header.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from \"../component_usage/Header.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Functional Testing Specification Example - Markdown\nDESCRIPTION: This markdown snippet illustrates a simplified behavioral specification for functional testing within the React Native Elements project. It does not provide executable code, but communicates the expected outcome when a user interacts with a button group: selecting a button should highlight it and un-highlight the previously selected one. The snippet serves as a plain text example of intended test behavior, useful for guiding test implementation but not dependent on any programming framework or environment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements in Expo Apps - Yarn CLI/Bash\nDESCRIPTION: This Bash snippet demonstrates how to install '@rneui/base' and '@rneui/themed' using Yarn in an Expo app context after first cleaning out old dependencies. It is a direct repeat of the React Native CLI install but is contextualized for Expo-based projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/troubleshooting.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn && yarn add @rneui/base @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Components\nDESCRIPTION: Imports necessary components or types from the 'react-native-elements' library. Although the brackets are empty in this specific instance, it signifies the standard way components would be imported for use within a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported Markdown Component in MDX\nDESCRIPTION: This MDX/JSX code renders the `ContributionGuide` component, which was previously imported from the `CONTRIBUTING.md` file. This effectively embeds the full content of the external contribution guidelines directly into this documentation page at the location where the tag is placed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/repo/contributing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Referencing Component Availability by Version - React Native Elements - Markdown\nDESCRIPTION: This snippet provides contextual information in Markdown format about the availability of components like FormInput and Input in different versions of React Native Elements. It clarifies that `<FormInput />` is exclusive to v0.19.1 and below, while `<Input />` is introduced in v1.0.0-beta1 and higher. The context is useful for developers double-checking which UI components exist in specific package versions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nExample:\\n\\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Initializing Header with Left-aligned Center Component - React Native Elements - JavaScript/JSX\nDESCRIPTION: This example shows aligning the center component to the left using the 'placement' prop. The left, center, and right components are each configured with icon or text settings, mirroring default usage with added alignment flexibility. The main prop of interest is 'placement', which repositions the center section; all other parameters remain the same as the default usage. Dependencies remain react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/header.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  placement=\"left\"\n  leftComponent={{ icon: 'menu', color: '#fff' }}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  rightComponent={{ icon: 'home', color: '#fff' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Component Availability by Version (Markdown)\nDESCRIPTION: Provides guidance on which form components (<FormInput /> vs <Input />) are available in different versions of react-native-elements. This code snippet is in Markdown, clarifying which component to use based on package version. Users should consult their package.json and the library documentation to confirm supported components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nExample:\n\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Vector Icons Package - Bash\nDESCRIPTION: Shows how to install @expo/vector-icons as a dependency using yarn for Expo applications. Required for icon-related features within React Native Elements on Expo platforms. Inputs: yarn install command; outputs: added package dependency.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of `styled` to Style a `View` Component (TypeScript/TSX)\nDESCRIPTION: Illustrates the basic usage of the `styled` function to create a new component `Conatiner` by wrapping React Native's `View`. It applies a default style object, defining `paddingHorizontal` for the `root` style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/styles.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst Conatiner = styled(View)({\n  // default style of component\n  root: {\n    paddingHorizontal: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Android Build Directories - Bash Shell\nDESCRIPTION: Removes Android build output and intermediate files for both the general android/build and android/app/build directories. This is part of troubleshooting when the app fails to compile or run as expected on Android devices.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with useTheme Hook in React Native Elements (TSX)\nDESCRIPTION: Demonstrates accessing the theme object within a functional component using the `useTheme` hook provided by `@rneui/themed`. The hook returns an object containing the current `theme`, which can then be used for styling elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from '@rneui/themed';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown as a Component in JavaScript/JSX\nDESCRIPTION: This JavaScript statement uses ES module syntax to import the content of a Markdown file (`CONTRIBUTING.md`) as a React component named `ContributionGuide`. The path `@site/../CONTRIBUTING.md` suggests it's relative to a configured site source directory, typical in static site generators like Docusaurus.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots using Yarn (Bash)\nDESCRIPTION: This command utilizes Yarn to run the project's test suite with the update snapshots flag ('-u'). It's used within the context of Jest snapshot testing to regenerate snapshot files when intentional changes have been made to component rendering.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn test -u\n```\n\n----------------------------------------\n\nTITLE: Referencing the ListItemContent Theme Key - JavaScript\nDESCRIPTION: This snippet shows the theme key string 'ListItemContent', which can be used with the ThemeProvider when customizing theme properties in React Native Elements. Referencing this key allows developers to override default theming for the ListItem.Content subcomponent. This string does not correspond to an importable value but is used as an identifier within theme configuration objects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Content.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemContent\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Styles for Multiple Components - React Native StyleSheet - JavaScript\nDESCRIPTION: A StyleSheet object named 'styles' defines reusable styles for various UI elements such as content containers and subheaders. The styles handle layout (flex, direction, alignment), spacing, background color, and text properties for consistency across components. These are intended for use as the style prop in React Native components. Dependencies: React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n},\nbuttonsContainer: {\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '100%',\n  marginVertical: 20,\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies for Expo Setup\nDESCRIPTION: Forcefully removes the `node_modules` directory along with both `yarn.lock` and `package-lock.json` files. This ensures a completely clean state before reinstalling dependencies when troubleshooting font issues in an Expo managed project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: ListItem with Badge â€“ React Native Elements â€“ JavaScript\nDESCRIPTION: This code demonstrates how to add a customizable badge to a ListItem, indicating notifications or counts, with the badge styled via textStyle and containerStyle props for visual emphasis. Dependencies are react-native-elements and React Native. The badge input is a configuration object; output is a ListItem with an overlay badge.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/listitem.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ListItem\n  ...\n  badge={{ value: 3, textStyle: { color: 'orange' }, containerStyle: { marginTop: -20 } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from @rneui/themed in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `ListItem` component from the `@rneui/themed` package using TypeScript syntax. This import is required to use the `ListItem` component and its sub-components like `ListItem.CheckBox` within a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Migration Guide\nDESCRIPTION: Markdown link syntax pointing to the v4 migration guide blog post documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[v4 migration guide](/blog/2022/05/15/rneui-migration-guide)\n```\n\n----------------------------------------\n\nTITLE: Linking React Native Vector Icons\nDESCRIPTION: Links the React Native Vector Icons library to the native projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Example Markdown - React Native Elements - JavaScript\nDESCRIPTION: This JavaScript import statement brings in a usage markdown documentation from a local path for inclusion in the main documentation file. It is utilized in the markdown with a React-like JSX include. There are no parameters or runtime dependencies beyond the JavaScript import system and the markdown rendering infrastructure.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/CheckBox.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/CheckBox/CheckBox.md'\n```\n\n----------------------------------------\n\nTITLE: Calling SearchBar Instance Methods via Ref (JavaScript)\nDESCRIPTION: This snippet demonstrates how to programmatically interact with the SearchBar component by calling its instance methods ('focus', 'blur', 'clear', 'cancel') using a previously obtained reference. The 'cancel' method is noted as only available for iOS and Android platforms.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/searchbar.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons Package (Bash)\nDESCRIPTION: This command performs native linking of react-native-vector-icons in a React Native project. Linking is required for the package's native code integration if not using Expo or autolinking-capable React Native version. Dependencies include react-native-cli and react-native-vector-icons installed in the project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Fixing Lint and Formatting Errors\nDESCRIPTION: Commands to automatically fix linting and formatting errors in the codebase.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint --fix\nyarn format --write\n```\n\n----------------------------------------\n\nTITLE: Fixing iOS Build with Patch Script - Shell - iOS\nDESCRIPTION: This snippet demonstrates using cURL to fetch and execute a shell script that resolves React Native/Xcode 10 build issues. The script is retrieved from a remote gist and piped directly to bash for execution. It requires an internet connection, curl, and bash, and must be executed in the project root directory; use when build fails due to certain incompatibilities introduced in recent Xcode versions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -L https://gist.githubusercontent.com/fiznool/739b8e592596b5731512edfd77a1a2e9/raw/e0123e0b2382e127f1cfd6e28228315f1299738f/fix-rn-xcode10.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Importing Components from React Native Elements\nDESCRIPTION: This snippet demonstrates how to import components from the 'react-native-elements' library. Although the curly braces are empty in this specific example, they would typically contain the names of the specific components needed for the application, such as 'Tooltip', 'Button', etc.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Linking Vector Icons Library in React Native Init Project\nDESCRIPTION: Executes the React Native CLI command to automatically link the `react-native-vector-icons` library's native dependencies to the iOS and Android projects. This step is crucial for fonts included in the library to be recognized by the native platforms in a non-Expo project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots in React Native Elements\nDESCRIPTION: This command updates the snapshot tests in the React Native Elements project. Snapshot tests need to be updated whenever intentional changes are made to component structure or props, allowing the new snapshot to become the reference for future comparisons.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn test -u\n\n# npm\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Describing Functional Testing Behavior - Markdown\nDESCRIPTION: An example statement in markdown format illustrating a behavioral expectation for functional testing: when a user interacts with a button in a button group, the correct button should be highlighted. This does not represent code to be executed, but communicates intended behavior for use in test case authoring. It's a pattern often used in behavior-driven development (BDD) to specify UX outcomes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Text component from React Native Elements. It also includes imports for Tabs and TabItem components from the theme, as well as a Usage component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/Text.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App with Edge RNE Template (Bash)\nDESCRIPTION: Uses `npx create-expo-app` with the official React Native Elements edge template (`@rneui/template@edge`) to bootstrap a new Expo project pre-configured with the latest development version of RNE.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Importing Contribution Guide Component in JavaScript/JSX\nDESCRIPTION: Imports the `CONTRIBUTING.md` file, likely processed as a React component, using an alias path (`@site`). This makes the contribution guidelines available for rendering within the MDX page. Depends on a build environment (e.g., Docusaurus) that resolves the alias and handles Markdown imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/repo/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ContributionGuide from '@site/../CONTRIBUTING.md';\n```\n\n----------------------------------------\n\nTITLE: Identifying the Theme Key for Tab Component Customization\nDESCRIPTION: Specifies 'Tab' as the theme key used within the ThemeProvider for customizing the appearance and behavior of the Tab component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTab\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Components for Documentation\nDESCRIPTION: Imports the Tabs and TabItem components from the documentation theme library (@theme). These are likely used for structuring the documentation page itself, not directly related to the ListItem.Title component's functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Version Release Headers\nDESCRIPTION: Changelog version headers showing release versions with dates and comparison links\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CHANGELOG.old.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### [v0.12.0](https://github.com/flyingcircle/react-native-elements/compare/v0.11.2...v0.12.0)\n\n> 14 May 2017\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons for React Native < 0.60.0 - Bash\nDESCRIPTION: This command manually links the react-native-vector-icons native dependency to your React Native project using the React Native CLI. Only necessary for projects using React Native below version 0.60.0; newer versions perform automatic linking. Skipping this step may cause missing asset issues in older projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/getting_started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Import statements for documentation-specific theme components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/ListItem.ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Dialog Component for Web Platform in React Native\nDESCRIPTION: This snippet demonstrates how to use a valid Modal component implementation for the Dialog component when working with react-native-web, as the native Modal is not yet implemented.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Dialog ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: FAB Properties Documentation Table - Color\nDESCRIPTION: Specifies color options for FAB, defaulting to theme's secondary color\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/fab.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|    Type    |         Default         |\n| :--------: | :---------------------: |\n| color name | theme's secondary color |\n```\n\n----------------------------------------\n\nTITLE: Referencing Input Component with useRef - React Native Elements - JavaScript\nDESCRIPTION: This code snippet illustrates how to create a React ref using React.createRef() and attach it to an Input component. This practice enables imperative method calls on the component instance, a recommended pattern for direct component interactions. Prerequisites include React and react-native-elements. The main parameter is the ref prop; the expected input is a React ref object and the output is a reference to the Input instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/input.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst input = React.createRef();\n\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Correct Component Import in JavaScript\nDESCRIPTION: Shows the correct way to import the `ListItem` component from 'react-native-elements', fixing the potential 'Invariant Violation' error caused by incorrect spelling or casing.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Correct\nimport { ListItem } from 'react-native-elements'\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Tests with Yarn and npm in Bash\nDESCRIPTION: This Bash snippet shows the commands needed to update Jest snapshot tests in a JavaScript/React Native project. Running 'yarn test -u' or 'npm run test -u' will re-generate the snapshot files after component changes, ensuring future test runs compare against the updated snapshots. These commands require the project to use either Yarn or npm as its package manager, and for Jest to be configured as the test runner. Inputs are provided via the command line, and the outputs are updated snapshot files in the repo.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn test -u\\n\\n# npm\\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Colors Interface in TypeScript\nDESCRIPTION: Defines custom color properties (`tertiary`, `accent`, `surface`) by extending the `@rneui/themed` `Colors` interface using TypeScript declaration merging. This should be placed in a declaration file (e.g., `themed.d.ts`) to allow TypeScript to recognize and provide autocompletion for these custom colors when accessing the theme object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/extending.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// themed.d.ts\nimport '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Colors {\n    tertiary: string;\n    accent: string;\n    surface: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Tooltip to Controlled Usage - diff\nDESCRIPTION: Highlights the new Tooltip API, which is now stateless by default, requiring explicit 'visible', 'onOpen', and 'onClose' props. This approach gives developers better control over tooltip state. Required for all Tooltips in v4.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n  <Tooltip\\n+   visible={open}\\n+   onOpen={() => {\\n+      setOpen(true);\\n+   }}\\n+   onClose={() => {\\n+      setOpen(false);\\n+   }}\\n    popover=\"Hey All\"\\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Component in React Native\nDESCRIPTION: This snippet imports a Snack component from a local 'snack' directory and renders it using JSX syntax. The Snack component is likely used for interactive code examples or documentation in the React Native Elements project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Image/Image.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Using Docusaurus Admonition with Placeholder Comment (Markdown/HTML)\nDESCRIPTION: This snippet demonstrates a Docusaurus admonition block, specifically a 'note'. Admonitions are used to highlight specific information. Inside this note block, an HTML comment `<!-- TODO -->` serves as a placeholder, indicating that content needs to be added here.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/universe/getting_started.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\n<!-- TODO -->\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component from React Native Elements\nDESCRIPTION: Shows how to import the Switch component from the React Native Elements library. This is the first step required to use the component in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/switch.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch } from 'react-native-elements';\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies (Including package-lock.json) with Bash\nDESCRIPTION: Shell command to remove the `node_modules` directory and both `yarn.lock` and `package-lock.json` files. This ensures a thorough dependency clean-up, accommodating projects that might use npm or have mixed lock files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Theme Pitfall Example 3: Mismatched Object/Array Styles (JSX)\nDESCRIPTION: Highlights a common pitfall where theme style merging fails. The theme's `containerStyle` is an object, but the component prop `containerStyle` is an array. This type mismatch prevents the styles from being merged as expected.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Header Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the Header component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Header } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Manually Toggling a Tooltip Using Refs in React Native\nDESCRIPTION: This snippet demonstrates how to set up a reference to a Tooltip component and manually toggle it, such as when the screen loads. It uses React's useRef hook to store the tooltip reference and the useEffect hook to trigger the tooltip on component mount.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tooltipRef = useRef(null);\n\n...\n\n<Tooltip\n  ref={tooltipRef}\n  ...\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  tooltipRef.current.toggleTooltip();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with npm\nDESCRIPTION: Command to install the @rneui/themed package using npm. This is the main package for React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/packages/themed/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Resetting Metro Bundler Cache to Fix Module Resolution Issues - Bash\nDESCRIPTION: Recommends running the npm start script with the --reset-cache flag to clear Metro's cache, often resolving module resolution or stale cache errors in React Native projects. Intended to be run in the terminal from the project root. Inputs: npm script; outputs: Metro server with reset cache.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/troubleshooting.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Illustrating Component Precedence in Header (Children over Props) in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates the precedence rule for Header components. When both a prop (e.g., `leftComponent`) and a child component (`<MyCustomLeftComponent />`) are provided for the same slot, the child component takes precedence and is rendered.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/header.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<Header leftComponent={{ icon: 'menu' }}>\n  <MyCustomLeftComponent />\n  <MyCustomCenterComponent />\n  <MyCustomRightComponent />\n</Header>\n```\n\n----------------------------------------\n\nTITLE: Markdown Example of RNE Component Version Differences\nDESCRIPTION: Demonstrates using Markdown how component availability can differ between React Native Elements versions. Specifically, it shows that `<FormInput />` is deprecated in favor of `<Input />` in newer versions (v1.0.0-beta1+), highlighting a potential cause for import errors if using the wrong component for the installed RNE version.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nExample:\n\n`<FormInput />` is only available in v0.19.1 and below. `<Input />` is only\navailable in `v1.0.0-beta1` and higher.\n```\n\n----------------------------------------\n\nTITLE: Setting up the Development Environment using Bash\nDESCRIPTION: Provides a sequence of shell commands to set up the local development environment for contributing to the react-native-elements project. It involves cloning the forked repository, navigating into the project directory, installing dependencies using yarn or npm, and running the test suite.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <your-forked-repo-url> && cd react-native-elements\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Handling with Formik in React Native\nDESCRIPTION: This snippet shows how to integrate Formik for form handling in the Home component of the React Native app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Formik } from 'formik';\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Formik initialValues={{ owner: '', repo: '' }}\n  onSubmit={this.onPressButton}>\n  {({ handleChange, handleSubmit, values }) => (\n    <View style={styles.container}>\n      <Input ... onChangeText={handleChange('owner')} value={values.owner} />\n      <Input ... onChangeText={handleChange('repo')} value={values.repo} />\n      <Button ... onPress={handleSubmit} />\n    </View>\n  )}\n</Formik>\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.Swipeable in React Native Elements\nDESCRIPTION: This code snippet specifies the theme key for customizing the ListItem.Swipeable component using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Swipeable.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nListItemSwipeable\n```\n\n----------------------------------------\n\nTITLE: Displaying Various Icons using RNE Icon Component (React Native)\nDESCRIPTION: This React Native example demonstrates rendering multiple icons using the `<Icon>` component from `@rneui/themed`. It showcases different properties like `name` (for the specific icon), `color`, `type` (specifying the icon set like 'evilicon' or 'ionicon'), `reverse` (for a button-like appearance), `raised` (for a raised effect), and handling `onPress` events.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Icon } from '@rneui/themed';\n\nexport default () => {\nreturn (\n  <>\n    <View\n      style={{\n        alignItems: 'center',\n        paddingVertical: 5,\n        flexGrow: 1,\n      }}\n    >\n      <Icon\n        name='rowing' />\n\n      <Icon\n        name='g-translate'\n        color='#00aced' />\n\n      <Icon\n        name='sc-telegram'\n        type='evilicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        reverse\n        name='ios-american-football'\n        type='ionicon'\n        color='#517fa4'\n      />\n\n      <Icon\n        raised\n        name='heartbeat'\n        type='font-awesome'\n        color='#f50'\n        onPress={() => console.log('hello')} />\n    </View>\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing iOS Build Cache\nDESCRIPTION: This bash command removes the iOS build directory (`ios/build`). It's used to resolve potential caching issues, specifically the \"Unrecognized font x\" error on iOS, often after linking or updating font-related libraries.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ios/build\n```\n\n----------------------------------------\n\nTITLE: Installing Edge RNEui Packages with Yarn (Bash)\nDESCRIPTION: Installs the latest development (bleeding-edge) versions of `@rneui/themed` and `@rneui/base` using Yarn and the `@edge` distribution tag. Use this for testing upcoming features.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Customizing PricingCard Button Style in React Native Elements\nDESCRIPTION: This snippet demonstrates how to customize the button style of a PricingCard component in React Native Elements v1.0. It uses the 'button' prop with a 'buttonStyle' key to set the font family.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2019-01-27-1.0-release.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<PricingCard button={{ buttonStyle: { fontFamily: 'Arial' } }} />\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet Component - React Native Elements\nDESCRIPTION: Example of importing the BottomSheet component and related dependencies in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/BottomSheet.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing RNEUI Web Dependencies with Yarn\nDESCRIPTION: Installs React Native Elements core packages, `react-native-web`, and `react-native-vector-icons` using yarn for use in a web project (specifically demonstrated with Create React App).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn add  @rneui/base @rneui/themed react-native-web react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Describing a Functional Test Case for a Button Group in Markdown\nDESCRIPTION: Illustrates an example of a functional test case using descriptive text in Markdown format. It describes the expected behavior of a button group component: when a user taps a button, it should become highlighted, and any previously selected button should be un-highlighted. This clarifies the goal of a functional test.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Tooltip Customization\nDESCRIPTION: Specifies the theme key 'Tooltip' used for customizing the Tooltip component styles via the ThemeProvider in @rneui/themed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTooltip\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Theme Components (JavaScript/JSX)\nDESCRIPTION: Imports the Tabs and TabItem components from the '@theme' scope. These are likely used within a documentation framework (like Docusaurus) to structure content using tabs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Tile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Resetting Metro Bundler Cache using Bash\nDESCRIPTION: Command to start the React Native Metro bundler while clearing its cache (`--reset-cache`). This can resolve 'Unable to resolve module' errors and other issues caused by stale cache data used by the bundler.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands for Expo App\nDESCRIPTION: Commands for installing react-native-elements and vector icons in an Expo or create-react-native-app project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n\n# yarn\nyarn && yarn add react-native-elements\n\n# yarn\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Importing TabItem Component for Documentation (JavaScript/MDX)\nDESCRIPTION: Imports the `TabItem` component from the `@theme/TabItem` package. This component works in conjunction with the `Tabs` component to define individual tabs within a tabbed interface in the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNE with NPM\nDESCRIPTION: Installs the latest development (bleeding edge) versions of the core React Native Elements packages using npm, by specifying the '@edge' dist-tag.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons\nDESCRIPTION: Command to link react-native-vector-icons in a React Native project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Displaying Button Variants in a Row Layout - React Native Elements - TSX\nDESCRIPTION: Illustrates the usage of solid, outline, and clear Button variants inside a Stack row layout for side-by-side comparison. Relies on Stack and Button components from the respective libraries. Main parameters are 'title' and 'type' for Button. Outputs horizontally aligned buttons with visual distinction.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack row align=\\\"center\\\" spacing={4}>\n  <Button title=\\\"Solid\\\" />\n  <Button title=\\\"Outline\\\" type=\\\"outline\\\" />\n  <Button title=\\\"Clear\\\" type=\\\"clear\\\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript and ESLint Verification\nDESCRIPTION: Commands to verify that code changes pass TypeScript type checking and ESLint linting rules.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn typescript\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with Avatars using Map Function in React Native\nDESCRIPTION: This snippet demonstrates how to render a list of items with avatars using the map function in React Native Elements. It uses the ListItem and Avatar components to display user information.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/ListItem/ListItem.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem, Avatar } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<View>\n  {\n    list.map((l, i) => (\n      <ListItem key={i} bottomDivider>\n        <Avatar source={{uri: l.avatar_url}} />\n        <ListItem.Content>\n          <ListItem.Title>{l.name}</ListItem.Title>\n          <ListItem.Subtitle>{l.subtitle}</ListItem.Subtitle>\n        </ListItem.Content>\n      </ListItem>\n    ))\n  }\n</View>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel and Webpack Overrides for React Native Elements in Create React App - JavaScript\nDESCRIPTION: Implements a configuration override via customize-cra for Create React App by adding Babel plugins and including necessary node_modules in its transpilation scope. This enables support for class properties and transpiles all relevant packages (react-native-elements, vector-icons, ratings) and the user's source code. Requires customize-cra, react-app-rewired, and Node.js path module. Place this in config-overrides.js at the project root.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/web_usage.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/react-native-elements'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Linking react-native-vector-icons in React Native CLI (Bash)\nDESCRIPTION: This bash command links the 'react-native-vector-icons' native module with the React Native project to ensure native symbol support. Required only for vanillia React Native projects and should be rerun after dependency installation. Requires react-native CLI tools installed globally. No input parameters. Output: native code linking completed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Using Custom Components in Header via Props in React Native Elements (JavaScript/JSX)\nDESCRIPTION: This snippet illustrates passing custom React components (`MyCustomLeftComponent`, `MyCustomCenterComponent`, `MyCustomRightComponent`) directly to the `leftComponent`, `centerComponent`, and `rightComponent` props of the Header.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/header.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={<MyCustomLeftComponent />}\n  centerComponent={<MyCustomCenterComponent />}\n  rightComponent={<MyCustomRightComponent />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components in MDX\nDESCRIPTION: This snippet imports React components (`Tabs`, `TabItem`) from the Docusaurus theme and a hook (`useBaseUrl`) from the Docusaurus core library. These are used within MDX files to enhance documentation pages with interactive elements and proper URL handling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/universe/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Running Snapshot Test Updates in React Native Elements\nDESCRIPTION: Commands to update snapshot tests using either yarn or npm package managers. This is used when intentional changes are made to components and the snapshots need to be updated to reflect the new expected output.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn test -u\n\n# npm\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Tooltip Component Customization\nDESCRIPTION: Specifies the theme key 'Tooltip' used for customizing the Tooltip component's style via the ThemeProvider in React Native Elements. This key allows developers to define custom styles for all Tooltip instances within the scope of the ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTooltip\n```\n\n----------------------------------------\n\nTITLE: Overriding Internal Styles with ThemeProvider in JSX\nDESCRIPTION: Demonstrates the style precedence where theme styles override the component's internal default styles. The `theme` object sets the `Button`'s `titleStyle.color` to 'red', overriding the internal default color (likely white). This is the second level of style application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Card.Divider via Theme Key in React Native Elements\nDESCRIPTION: Shows the theme key for the Card.Divider component which can be used for customizing the component through ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCardDivider\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Documentation Inline - React Native Elements - Markdown/JSX\nDESCRIPTION: This snippet shows the Usage component, previously imported from a Markdown file, being rendered directly in the Markdown/JSX documentation. This approach allows embedding live examples or rich usage documentation inside the reference documentation file. The Usage component displays usage information about the ListItem component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/ListItem.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Title Component in React Native (JavaScript/JSX)\nDESCRIPTION: Defines a functional component `CustomTitle` in React Native. It renders a View containing two Text components, styled inline to create a title with a primary line (bold) and a secondary line (italic). The `flexDirection: 'column'` arranges the text vertically.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomTitle = () => {\nreturn (\n  <View style={{ flexDirection: 'column' }}>\n    <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n    <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n      Minister of Magic\n    </Text>\n  </View>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Document Headers in Docusaurus - Markdown\nDESCRIPTION: This snippet demonstrates the required YAML front matter header for new documentation files in Docusaurus. The header must specify an 'id' (used as a unique identifier for the doc) and a 'title' (displayed at the top of the page and in the sidebar). These are required for Docusaurus to correctly index and version documentation files. Inputs are 'id' and 'title' string fields; outputs are a validated, registered doc page.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\nid: my-component\\ntitle: My Component\\n---\n```\n\n----------------------------------------\n\nTITLE: Referencing ListItemTitle in Theme Customization (JavaScript)\nDESCRIPTION: This snippet shows the string 'ListItemTitle' used as a theme key for customizing ListItem.Title styles via a ThemeProvider. It is intended for integration with theming systems in the React Native Elements library, and relies on preceding setup with ThemeProvider. Input: theme key as string; Output: reference to ListItem.Title styles for customization. This is not executable code but used as a string identifier in configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemTitle\n```\n\n----------------------------------------\n\nTITLE: Linking Vector Icons in Standard React Native\nDESCRIPTION: Shell command using the React Native CLI to automatically link the `react-native-vector-icons` library to the native iOS and Android projects. This step is crucial for making the icon fonts available to the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Describing Functional Test Behavior - Markdown\nDESCRIPTION: This markdown snippet describes the expected user interaction for a Button Group component in functional tests. It specifies that tapping a button highlights it while un-highlighting the previous one. This text serves as a human-readable test case specification for developers and testers; there are no code dependencies, inputs, or outputs associated.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Implementing platform-specific routing\nDESCRIPTION: Creates separate routing files for web and native platforms to use the appropriate router.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Routing.native.js\nimport { NativeRouter as Router } from 'react-router-native';\n\n// Routing.web.js\nimport { BrowserRouter as Router } from 'react-router-dom';\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies\nDESCRIPTION: Commands to navigate to the project directory and install dependencies using either yarn or npm.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/example/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd react-native-elements\n\n# Using yarn\nyarn install\n\n# Using npm\nnpm install\n\ncd example\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet Usage Example in React Native Elements (JavaScript)\nDESCRIPTION: Demonstrates how to import the BottomSheet usage example from a Markdown file as a component for rendering in documentation or demo pages. Requires React and a compatible build environment that can import Markdown files as React components. This snippet imports the usage instructions, allowing them to be displayed within the documentation; it assumes proper configuration for Markdown imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/BottomSheet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/BottomSheet/BottomSheet.md'\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Theme with Themed Provider (React Native Elements, JSX)\nDESCRIPTION: Demonstrates how to create and apply a custom theme using the ThemeProvider in React Native Elements. It imports ThemeProvider and createTheme, defines custom light and dark colors, and wraps the application within the provider to propagate the custom theme. Dependencies include '@rneui/themed', and the example shows how to use the theming context for UI customization. The sample code expects proper installation of RNEUI and assumes the presence of relevant components within the provider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/color.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  lightColors: {\n    primary: '#e7e7e8',\n  },\n  darkColors: {\n    primary: '#000',\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* ... */}\n      {/* ... */}\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem.Swipeable in React Native Elements\nDESCRIPTION: This code snippet shows how to import the ListItem component from the @rneui/themed package, which includes the Swipeable functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/ListItem.Swipeable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Vector Icons using Yarn\nDESCRIPTION: Installs the `@expo/vector-icons` package using yarn and saves it as a dependency. This package provides access to vector icons within the Expo ecosystem and is the correct package to use instead of `react-native-vector-icons` directly in Expo managed projects to resolve font errors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add @expo/vector-icons --save\n```\n\n----------------------------------------\n\nTITLE: Starting the example app locally\nDESCRIPTION: Command to start the React Native Elements example app locally for development and testing purposes. This is useful for contributors who want to work on the library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn example:start\n```\n\n----------------------------------------\n\nTITLE: Importing SocialIcon Component in React Native Elements\nDESCRIPTION: Shows how to import the SocialIcon component from the @rneui/themed package for use in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/SocialIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SocialIcon } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Clearing Metro Bundler Cache - Bash Shell\nDESCRIPTION: This command resets the Metro Javascript bundler cache by starting npm with the --reset-cache option. It's often necessary when encountering persistent module resolution or import errors in React Native projects.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Importing Snack Component in Markdown\nDESCRIPTION: This code snippet imports a Snack component from a local file. It's likely used to embed an interactive code example in the documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Icon/Icon.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\n----------------------------------------\n\nTITLE: Cleaning Android Build Cache using Bash\nDESCRIPTION: Commands to remove Android build directories (`android/build`, `android/app/build`). This is a troubleshooting step for 'Unrecognized font' errors or other build problems on Android, often performed after changing dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf android/build && rm -rf android/app/build\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Theme Components in Javascript\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from the documentation theme (`@theme`). These are likely used to structure the documentation page itself, potentially for displaying different usage examples or variations.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Updating ThemeProvider Usage - diff\nDESCRIPTION: Indicates how to update ThemeProvider usage to reflect changes in required props, specifically removing 'useDark'. Ensures theme compatibility with v4. Check for all instances of useTheme or useStyles before ThemeProvider to avoid errors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- <ThemeProvider theme={myTheme} useDark={false}>\\n+ <ThemeProvider theme={myTheme}>\\n     <Button title=\"My Button\" />\\n   </ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Importing Modal from modal-react-native-web for Tooltip Web Support\nDESCRIPTION: This snippet shows how to import the Modal component from 'modal-react-native-web' package and pass it to the Tooltip component. This is necessary for web platform support since Modal is not implemented in react-native-web.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Modal from 'modal-react-native-web';\n\n\n<Tooltip ModalComponent={Modal} ... />\n```\n\n----------------------------------------\n\nTITLE: Updating Colors Import Paths - diff\nDESCRIPTION: Demonstrates the updated import statement transition for colors, moving from 'react-native-elements' to '@rneui/themed'. Necessary for proper theme handling in v4. Update all references accordingly.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { colors } from 'react-native-elements'\\n+ import { lightColors, darkColors } from '@rneui/themed'\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItems with FlatList and Custom Avatar Component â€“ React Native Elements â€“ JavaScript\nDESCRIPTION: This code demonstrates rendering a FlatList of ListItems with a custom avatar component that conditionally shows either an image or an initial, based on the presence of an avatar_url. It requires React Native, react-native-elements, and an array of user objects with optional avatar_url. The core feature is dynamic avatar display and chevron navigation, suitable where fallback visuals are desired for missing avatars.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/listitem.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListItem } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem\n    title={item.name}\n    subtitle={item.subtitle}\n    leftAvatar={{\n      source: item.avatar_url && { uri: item.avatar_url },\n      title: item.name[0]\n    }}\n    bottomDivider\n    chevron\n  />\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements and Vector Icons\nDESCRIPTION: Adds React Native Elements beta and React Native Vector Icons as dependencies using yarn.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn add react-native-elements@beta\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn add react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Dynamically with updateTheme (JavaScript)\nDESCRIPTION: Illustrates how the `updateTheme` function, typically received via `withTheme` or context, can be used to merge new values into the existing theme. This example shows updating the primary color from 'pink' to 'red'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  colors: {\n    primary: 'pink',\n  },\n};\n\n// We can update the primary color\nupdateTheme({ colors: { primary: 'red' } });\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements with Yarn (Expo) (Bash)\nDESCRIPTION: Installs project dependencies using Yarn (`yarn`) and adds the `react-native-elements` package to an Expo project. This is part of the setup or troubleshooting process for Expo-based apps.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add react-native-elements\n```\n\n----------------------------------------\n\nTITLE: Injecting Icon Fonts in App.js Using Style Tag - JSX\nDESCRIPTION: Adds custom font-faces for MaterialIcons and FontAwesome directly within a style tag in the React component tree. This ensures that icon components from react-native-vector-icons render correctly in the browser. The code uses JSX syntax and expects that the respective .ttf font files are available via require. Place this in an appropriate location (e.g., the top level of App.js).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/web_usage.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Embedding Usage Component in Markdown with JSX Syntax\nDESCRIPTION: This snippet demonstrates embedding the imported Badge usage component in the markdown content using JSX-like syntax, as is common in MDX or similar JavaScript-powered markdown integrations. It effectively renders the example directly in the documentation page. Prerequisites: MDX or documentation setup that supports JSX tags in Markdown. The <Usage /> component is expected to be defined via import.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Badge.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Utilities and Usage Components in React Native Elements (JavaScript)\nDESCRIPTION: This snippet imports necessary utilities for theming tabs and usage documentation in React Native Elements' Docusaurus-based doc pages. Dependencies include @theme/Tabs, @theme/TabItem, and a usage MDX file. There are no key parameters; the imports prepare the file for rendering usage instructions and themed documentation UI. No runtime logic is implemented, and usage is determined by the documentation framework.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/SearchBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/SearchBar.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Removing Node Modules and Lock Files (Bash)\nDESCRIPTION: This bash command recursively removes 'node_modules' and 'yarn.lock' to ensure a clean dependency state. Used as the first step in troubleshooting installs or corruption of dependencies in React Native CLI-based projects. Must be run in the root of the JavaScript project. Inputs: none. Outputs: node_modules folder and yarn.lock file are deleted.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub API Data with fetch-hoc in React Native\nDESCRIPTION: This snippet demonstrates how to use fetch-hoc and redux's compose to fetch commit data from the GitHub API in a React Native component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n$ yarn add fetch-hoc redux\n```\n\n----------------------------------------\n\nTITLE: Rendering Dialog Usage Component in JSX\nDESCRIPTION: This code snippet demonstrates how to render the imported Usage component within JSX. It's a self-closing tag that will display the Dialog usage documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React Native Elements (JavaScript)\nDESCRIPTION: Illustrates correct and incorrect import statements for components from the react-native-elements package. Developers should ensure proper spelling and case sensitivity when importing. Using the incorrect component name leads to runtime errors; the correct syntax requires the component name to match exactly as exported.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Incorrect\nimport { Listitem } from 'react-native-elements'\n\n// Correct\nimport { ListItem } from 'react-native-elements'\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with Different Heading Styles in React Native Elements\nDESCRIPTION: This snippet shows how to create a functional component that displays different heading styles using the Text component from React Native Elements. It demonstrates using the useTheme hook to access theme colors and applying them to different heading styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/component_usage/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Text, useTheme } from '@rneui/themed';\n\ntype TextComponentProps = {};\nconst TextComponent: React.FunctionComponent<TextComponentProps> = () => {\nconst { theme } = useTheme();\n\nreturn (\n  <>\n    <View style={styles.view}>\n      <Text\n        style={styles.text}\n        h1\n        h1Style={{ color: theme?.colors?.secondary }}\n      >\n        Heading 1\n      </Text>\n      <Text\n        style={styles.text}\n        h2\n        h2Style={{ color: theme?.colors?.success }}\n      >\n        Heading 2\n      </Text>\n      <Text\n        style={styles.text}\n        h3\n        h3Style={{ color: theme?.colors?.warning }}\n      >\n        Heading 3\n      </Text>\n      <Text\n        style={styles.text}\n        h4\n        h4Style={{ color: theme?.colors?.primary }}\n      >\n        Heading 4\n      </Text>\n    </View>\n  </>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\ntext: {\n  textAlign: 'center',\n  padding: 5,\n},\nmore: {\n  marginVertical: 20,\n},\nbutton: {\n  width: 120,\n  marginLeft: 'auto',\n  marginRight: 'auto',\n},\n});\n\nexport default TextComponent;\n```\n\n----------------------------------------\n\nTITLE: Replacing Math Exponentiation Operator with Math.pow in Tooltip Component\nDESCRIPTION: A code change replacing the exponentiation operator (**) with Math.pow for calculating tooltip coordinates, likely for better compatibility across JavaScript environments.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CHANGELOG.old.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSwitch from `**` to `Math.pow` for getTooltipCoordinate\n```\n\n----------------------------------------\n\nTITLE: Repository File Structure Overview\nDESCRIPTION: Text representation of the React Native Elements repository structure, showing the organization of example app, packages, and documentation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n.\nâ”œâ”€â”€ example # demo expo app\nâ”œâ”€â”€ scripts\nâ”œâ”€â”€ packages\nâ”‚   â”œâ”€â”€ base     # component without theme\nâ”‚   â”œâ”€â”€ themed   # component using withTheme HOC\nâ”‚   â””â”€â”€ ....     # rest components having universal device support\nâ””â”€â”€ website\n    â”œâ”€â”€ docs     # prop API docs\n    â””â”€â”€ scripts  # scripts for autoDocGen\n```\n\n----------------------------------------\n\nTITLE: Importing Base Components for Documentation Theme\nDESCRIPTION: Imports necessary components `Tabs` and `TabItem` from the documentation theme (`@theme/Tabs`, `@theme/TabItem`) to structure the documentation page, likely for displaying tabbed content.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component from React Native Elements (TypeScript)\nDESCRIPTION: This TypeScript import statement brings the Tab component from '@rneui/themed' into the current file. It is necessary when you want to use Tab or its subcomponents in your TypeScript or JavaScript project. No parameters or outputs are expected; this simply sets up access to Tab-related functionality for further UI development.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Tab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\\nimport { Tab } from \\\"@rneui/themed\\\";\\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme in Custom Components with withTheme HOC (JSX)\nDESCRIPTION: Demonstrates using the `withTheme` Higher-Order Component (HOC) to inject theme-related props (`theme`, `updateTheme`, `replaceTheme`) into a custom component. This allows the component (`MyComponent`) to access theme values, like `theme.colors.primary`, for styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { withTheme } from 'react-native-elements';\n\nfunction MyComponent(props) {\n  const { theme, updateTheme, replaceTheme } = props;\n  return <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n}\n\nexport default withTheme(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Component in React Native Elements\nDESCRIPTION: This code imports the Snack component from a local markdown file and renders it. It's likely used to embed interactive code examples or documentation within a React Native Elements project.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/PricingCard/PricingCard.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Using the use-theme-mode hook in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use the use-theme-mode hook to get and set the current theme mode (light or dark).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/1.themeprovider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThemeMode } from '@rneui/themed';\n\nfunction Demo() {\n  const { mode, setMode } = useThemeMode();\n\n  return <Button onPress={() => setMode('dark')} title={mode} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Component in JavaScript/JSX\nDESCRIPTION: This snippet imports the `Snack` component, likely sourced from a Markdown file (`./snack/index.md`), and then renders it using JSX syntax. This pattern is common in React applications or documentation frameworks for displaying component examples or content. Requires a React environment and the `Snack` component definition at the specified path.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Switch/Switch.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Snack from './snack/index.md'\n\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Rendering Snack Component in JSX - JavaScript\nDESCRIPTION: This JSX snippet demonstrates rendering the Snack component, likely providing interactive or live preview capabilities. The component is referenced as a self-closing tag and relies on being properly imported and registered in the React Native environment. All required props and configurations must be handled elsewhere or within the component itself. The output is a rendered Snack component in the UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Tile/Tile.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Cleaning Node Modules and Lock Files for Expo Apps (Bash)\nDESCRIPTION: Removes 'node_modules', 'yarn.lock', and 'package-lock.json' to completely clean existing installs and cache before reinstalling dependencies in Expo-managed React Native projects. Should be done prior to installing required packages to ensure no corrupted caches remain. Input: bash command. Output: removed dependency folders and lock files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Using the Dark Mode Theme Preset (JavaScript/React Native)\nDESCRIPTION: This code demonstrates how to enable the built-in dark mode palette using the useDark prop in ThemeProvider. It reads the current color scheme (light or dark) using useColorScheme from react-native-appearance and enables theme switching accordingly. The code requires the react-native-appearance library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useColorScheme } from 'react-native-appearance';\n\n...\n  let colorScheme = useColorScheme();\n...\n  <ThemeProvider useDark={colorScheme === 'dark'}>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme and Internal Styles with External Props (TypeScript)\nDESCRIPTION: Illustrates style precedence where external styles applied via component props (`titleStyle` in this case) override both internal component styles and styles defined in a theme via `ThemeProvider`. The button title color is set to 'pink', overriding the 'red' theme color and the internal default.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/0.index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst theme = createTheme({\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for LinearProgress in React Native Elements\nDESCRIPTION: This code block demonstrates the theme key used for customizing the LinearProgress component when using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/LinearProgress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nLinearProgress\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Icons - NPM\nDESCRIPTION: Command to install the required react-native-vector-icons dependency using NPM.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/getting_started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Snack Markdown Component - React - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Snack component, which is defined in a markdown documentation file located at './snack/index.md', and render it as part of a React component tree. The core dependency is React, and the imported component must be default-exported from the referenced file. The main parameter is the import path, which refers to a markdown file likely processed by a specialized loader or plugin that supports rendering markdown as React components. No external inputs or outputs besides rendering the component in the UI. Limitations include requiring a build setup that supports MDX or markdown-to-React conversion.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Text/Text.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Skeleton Component in React Native\nDESCRIPTION: Example of creating a circular skeleton placeholder with specified width and height dimensions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Skeleton circle width={40} height={40} />\n```\n\n----------------------------------------\n\nTITLE: Importing the TabView Component in React Native (TSX)\nDESCRIPTION: This code snippet demonstrates how to import the `TabView` component from the `@rneui/themed` package for use in a React Native application using TypeScript/TSX. This import is the first step required to utilize the swipeable tab functionality provided by the component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/TabView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { TabView } from \"@rneui/themed\";\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering an Imported Component in JSX\nDESCRIPTION: This JSX snippet renders the `ContributionGuide` component, which was previously imported (presumably from a Markdown file). This displays the content of the imported file within the React application's UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/repo/contributing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Using the useTheme Hook (TypeScript)\nDESCRIPTION: This snippet demonstrates usage of the useTheme hook from @rneui/themed to access the theme object and updateTheme function within a function component. The updateTheme method updates the theme, merging provided changes (e.g., alter primary color). This approach assumes the component is wrapped in ThemeProvider or else receives the default theme. Dependencies include React and @rneui/themed. Inputs include current theme context; outputs are updated styles on execution.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/themeprovider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\n\nfunction Demo() {\n  const { theme, updateTheme } = useTheme();\n  return (\n    <View style={{ background: theme.colors.primary }}>\n      <Button onPress={() => updateTheme({ colors: { primary: 'red' } })} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Contribution Guide in React Documentation\nDESCRIPTION: Documentation page setup that imports and renders contribution guidelines from a markdown file using MDX syntax\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n---\nid: contributing\ntitle: ''\n---\n\nimport ContributionGuide from '../../../CONTRIBUTING.md';\n\n<ContributionGuide />\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package, which is a prerequisite for using the accordion list functionality in React Native Elements. No additional dependencies are required beyond the react-native-elements library. Use this import in your component to access ListItem-related features, including accordion support.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Running API Documentation Build with Source Path Options\nDESCRIPTION: Examples of building documentation using source path filters and component/package specific options. Shows both long and short flag formats.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/scripts/docgen/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn docs-build-api --source='base/src/Avatar/**'\nyarn docs-build-api -s='base/src/Avatar/**'\n\n## or\n\nyarn docs-build-api --component='Button' --pkg='base'\nyarn docs-build-api -c='Button' -p='base'\n```\n\n----------------------------------------\n\nTITLE: Starting the React Native Elements Website Development Server\nDESCRIPTION: This command starts the development server for the React Native Elements website, allowing for local testing and development.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring Dialogs for Web using a Custom Modal Component (JSX)\nDESCRIPTION: This snippet shows how to pass a custom Modal implementation (such as from modal-react-native-web) to the Dialog component's ModalComponent prop. This is required for web platform support because React Native's Modal is not available on the web. To function properly, ensure that Modal is imported from a compatible web package and provided to the Dialog via the ModalComponent prop; other Dialog functionality remains unchanged.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/dialog.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport Modal from 'modal-react-native-web';\n\n...\n\n<Dialog ModalComponent={Modal} ... />\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Values with useContext Hook (JSX)\nDESCRIPTION: Illustrates using the `useContext` hook with `ThemeContext` from `react-native-elements` to access the theme object directly within a functional component. This is the modern hook-based approach for consuming context values like `theme.colors.primary`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/customization.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { Text } from 'react-native';\nimport { ThemeContext } from 'react-native-elements';\n\nconst MyComponent = () => {\n  const { theme } = useContext(ThemeContext);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CheckBox Component in TypeScript\nDESCRIPTION: Imports the CheckBox component from the '@rneui/themed' library, making it available for use within a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckBox } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Expo CLI globally using npm\nDESCRIPTION: Command to install Expo CLI globally on the system, with a note about using --unsafe-perm flag for permission errors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/example/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[sudo] npm install -g expo-cli\n```\n\n----------------------------------------\n\nTITLE: Initializing New Expo Project with React Native Elements Template (Bleeding Edge) - Bash\nDESCRIPTION: Creates a new Expo-managed app with the latest (edge) version of the React Native Elements template. Use this to test or develop against unreleased template updates.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Defining Styles with StyleSheet in React Native (JavaScript)\nDESCRIPTION: Creates a StyleSheet object using `StyleSheet.create` from React Native. This object centralizes style definitions for different components: `contentView` for a main container, `buttonsContainer` for laying out buttons in a row that wraps, and `subHeader` for styling a header element.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = StyleSheet.create({\ncontentView: {\n  flex: 1,\n},\nbuttonsContainer: {\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '100%',\n  marginVertical: 20,\n},\nsubHeader: {\n  backgroundColor : \"#2089dc\",\n  color : \"white\",\n  textAlign : \"center\",\n  paddingVertical : 5,\n  marginBottom : 10\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient to Button in React Native Elements (JavaScript/JSX)\nDESCRIPTION: Shows how to apply a linear gradient background to a Button component using the `react-native-linear-gradient` package. This requires importing `LinearGradient` and passing it to the `ViewComponent` prop of the Button. The gradient itself is configured using the `linearGradientProps` object. Requires `react-native-elements` and `react-native-linear-gradient` dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/button.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'react-native-elements';\nimport LinearGradient from 'react-native-linear-gradient';\n\n...\n\n<Button\n  ViewComponent={LinearGradient} // Don't forget this!\n  linearGradientProps={{\n    colors: ['red', 'pink'],\n    start: { x: 0, y: 0.5 },\n    end: { x: 1, y: 0.5 },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Slider in Theme Configuration\nDESCRIPTION: Demonstrates how to reference the Slider component in theme configuration. This is useful when customizing the Slider's appearance using ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nSlider\n```\n\n----------------------------------------\n\nTITLE: Rendering the Imported Snack Component using JSX\nDESCRIPTION: This JSX snippet renders the 'Snack' component, which must have been previously imported (as shown in the related import snippet). It utilizes the self-closing tag syntax typical in React/React Native to instantiate and display the component's UI.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/AirbnbRating/AirbnbRating.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Snack />\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots with Jest - Bash\nDESCRIPTION: Provides shell commands to update Jest snapshot files via Yarn or npm for React Native Elements. This ensures snapshot data matches the expected output after changes. Requires Jest installed as a dev dependency and snapshot tests to be present. The commands are: 'yarn test -u' for Yarn users, and 'npm run test -u' for npm users. These commands should be run from the project root, and will overwrite existing snapshot references with new outputs.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\\nyarn test -u\\n\\n# npm\\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component from React Native Elements in TypeScript\nDESCRIPTION: This snippet shows how to import the Switch component from the '@rneui/themed' package using TypeScript. The Switch is a controlled component designed for React Native, offering on/off toggling with theme and color support. Ensure the '@rneui/themed' package is installed to use this component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: FAB Properties Documentation Table - UpperCase\nDESCRIPTION: Controls text transformation to uppercase for Extended Label\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/props/fab.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|  Type   | Default |\n| :-----: | :-----: |\n| boolean | `false` |\n```\n\n----------------------------------------\n\nTITLE: Array Chunking Utility for Grouping Elements - JavaScript\nDESCRIPTION: This snippet adds a chunk method to the Array prototype, enabling any array instance to be split into subarrays of size n for grouping elements, such as avatar rows. It operates recursively and is required for organizing avatars into rows of equal length in the UI demonstration. No dependencies are needed, but extending the Array prototype may not be safe if used outside demo scenarios or in large codebases due to possible conflicts.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/component_usage/Avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component in React Native\nDESCRIPTION: This snippet shows how to import the `Tab` component namespace from the `@rneui/themed` library, which is necessary to use the nested `Tab.Item` component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tab.Item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tab } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules and Components in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import Tabs and TabItem components from the Docusaurus theme as well as the react-native-elements library. These imports are necessary prerequisites for building interactive UI documentation and for using the Card.FeaturedTitle component. This snippet sets up the essential dependencies needed to utilize the features described in the documentation. No parameters, inputs, or outputs are involved; it is solely for importing required dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Card.FeaturedTitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Expo\nDESCRIPTION: Commands to eject the app from Expo using either yarn or npm, with a warning about the irreversible nature of ejecting.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/example/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Using Yarn\nyarn eject\n\n# Using npm\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Correcting Component Import Typo in JSX\nDESCRIPTION: Provides the correct import statement for the `ListItem` component from `@rneui/themed`. Correct capitalization is crucial to avoid the \"Invariant Violation\" error mentioned previously.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Correct\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements (Placeholder)\nDESCRIPTION: An empty import statement indicating that components from the 'react-native-elements' library are potentially used within the context, although none are explicitly imported in this specific line. This signifies a dependency on the library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/LinearProgress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native\nDESCRIPTION: This code snippet demonstrates how to import the main `Dialog` component from the `@rneui/themed` package. This import is required to utilize the `Dialog` component and its nested components, such as `Dialog.Actions`, in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing AirbnbRating Component in React Native (TypeScript)\nDESCRIPTION: This React Native functional component demonstrates rendering the `AirbnbRating` component from `@rneui/themed`. It shows a default rating, a disabled rating, and a customized rating with specific `count`, `reviews`, `defaultRating`, and `size` props. Basic layout and styling are provided using `StyleSheet`. The component depends on `react`, `react-native`, and `@rneui/themed`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/component_usage/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```SnackPlayer name=RNE AirbnbRating\nimport React from 'react';\nimport { StyleSheet, Text, View, Platform, ScrollView } from 'react-native';\nimport { AirbnbRating } from '@rneui/themed';\n\ntype RatingsComponentProps = {};\n\nconst Ratings: React.FunctionComponent<RatingsComponentProps> = () => {\nconst ratingCompleted = (rating: number) => {\n  console.log('Rating is: ' + rating);\n};\n\nconst ratingProps = {};\nreturn (\n  <View style={styles.container}>\n    <ScrollView style={styles.viewContainer}>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: 30,\n        }}\n      >\n        <AirbnbRating />\n        <AirbnbRating isDisabled={true}/>\n        <AirbnbRating\n          count={11}\n          reviews={[\n            'Terrible',\n            'Bad',\n            'Meh',\n            'OK',\n            'Good',\n            'Hmm...',\n            'Very Good',\n            'Wow',\n            'Amazing',\n            'Unbelievable',\n            'Jesus',\n          ]}\n          defaultRating={11}\n          size={20}\n        />\n      </View>\n    </ScrollView>\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n  flex: 1,\n},\nheadingContainer: {\n  paddingTop: 50,\n},\ntitleText: {\n  fontSize: 25,\n  fontWeight: 'bold',\n  textAlign: 'center',\n  paddingVertical: 5,\n  fontFamily: Platform.OS === 'ios' ? 'Menlo-Bold' : '',\n  color: '#27ae60',\n},\nsubtitleText: {\n  fontSize: 18,\n  fontWeight: '400',\n  textAlign: 'center',\n  fontFamily: Platform.OS === 'ios' ? 'Trebuchet MS' : '',\n  color: '#34495e',\n},\nviewContainer: {\n  flex: 1,\n},\nrating: {\n  paddingVertical: 10,\n},\n});\n\nexport default Ratings;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Theme-Aware Styles with makeStyles Hook Generator in React Native Elements (TSX)\nDESCRIPTION: Shows how to create styles that depend on the theme and component props using the `makeStyles` hook generator from `@rneui/themed`. It defines a `useStyles` hook where the style definitions can access both the `theme` and the component's `props` (optional), allowing for dynamic and theme-aware styling outside the component body.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from '@rneui/themed';\n\ntype Params = {\n  fullWidth?: boolean;\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with React Native Elements Template - Bash\nDESCRIPTION: Uses the Expo CLI to initialize a new project with the React Native Elements template in stable or edge versions. Requires Expo CLI installed globally. Outputs a new project directory.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template\n```\n\nLANGUAGE: bash\nCODE:\n```\nexpo init app --template @rneui/template@edge\n```\n\n----------------------------------------\n\nTITLE: Importing from React Native Elements Library (JavaScript/TypeScript)\nDESCRIPTION: This statement imports elements from the `react-native-elements` library. While the specific import list is empty in this snippet, it establishes the connection to the library for using its components within the context of the file or related components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Mismatched Styles (Object vs. Array) Causing Theme Issues (JSX)\nDESCRIPTION: This snippet highlights a common pitfall when using React Native Elements theming. The `containerStyle` in the theme is defined as a style object, while the local `containerStyle` prop on the `Button` is passed as an array containing a style object. Because the types (object vs. array) do not match, the styles will not merge correctly, leading to unexpected behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Mixing Object and Array Styles for Theme and Component in React Native Elements\nDESCRIPTION: This example shows a scenario where the theme defines `Button.containerStyle` as an object, while the Button component receives `containerStyle` as an array containing a style object. According to the documentation, this configuration also works, indicating that the ThemeProvider can merge styles even when one is an object and the other is an array.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/4.pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Using SpeedDial as Theme Key in React Native Elements (JavaScript)\nDESCRIPTION: This code snippet designates 'SpeedDial' as a theme key for customizing the component's style using a ThemeProvider in React Native Elements. Developers can reference this key within the theme configuration to override default appearance settings specific to the SpeedDial component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/SpeedDial.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSpeedDial\n```\n\n----------------------------------------\n\nTITLE: Consuming Theme with ThemeConsumer Render Prop - React Native Elements (TypeScript)\nDESCRIPTION: This snippet outlines how to consume the application's theme using the ThemeConsumer component from @rneui/themed within a function component. It demonstrates accessing 'theme' via a render prop and applying the theme's color to a React Native Text element. The approach requires React, react-native, and @rneui/themed. Inputs include no direct props to ThemeConsumer; output is a styled Text that dynamically adapts to the current theme context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/customization/0.index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from '@rneui/themed';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet Component in React Native Elements\nDESCRIPTION: A complete example of implementing a BottomSheet component in React Native Elements. It shows how to create a toggleable bottom sheet with a list of items, custom styling, and click actions. Requires the react-native-safe-area-context dependency.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/BottomSheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { BottomSheet, Button, ListItem } from '@rneui/themed';\nimport { StyleSheet } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\ntype BottomSheetComponentProps = {};\n\nconst BottomSheetComponent: React.FunctionComponent<BottomSheetComponentProps> = () => {\nconst [isVisible, setIsVisible] = useState(false);\nconst list = [\n  { title: 'List Item 1' },\n  { title: 'List Item 2' },\n  {\n    title: 'Cancel',\n    containerStyle: { backgroundColor: 'red' },\n    titleStyle: { color: 'white' },\n    onPress: () => setIsVisible(false),\n  },\n];\n\nreturn (\n  <SafeAreaProvider>\n    <Button\n      title=\"Open Bottom Sheet\"\n      onPress={() => setIsVisible(true)}\n      buttonStyle={styles.button}\n    />\n    <BottomSheet modalProps={{}} isVisible={isVisible}>\n      {list.map((l, i) => (\n        <ListItem\n          key={i}\n          containerStyle={l.containerStyle}\n          onPress={l.onPress}\n        >\n          <ListItem.Content>\n            <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n          </ListItem.Content>\n        </ListItem>\n      ))}\n    </BottomSheet>\n  </SafeAreaProvider>\n);\n};\n\nconst styles = StyleSheet.create({\nbutton: {\n  margin: 10,\n},\n});\n\nexport default BottomSheetComponent;\n```\n\n----------------------------------------\n\nTITLE: Defining Component Styles Functionally in createTheme (JavaScript)\nDESCRIPTION: This snippet shows an alternative way to define theme styles for components using a function within `createTheme`. The function receives the component's props as an argument, allowing for conditional styling. In this example, it applies `fontSize: 8` to a `Text` component if its `h5` prop is true. Requires the `@rneui/themed` library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/theming.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  Text: (prop) => ({\n    style: prop.h5 && { fontSize: 8 },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Calling SearchBar Methods via Ref in React Native Elements (JavaScript)\nDESCRIPTION: This code shows how to invoke the `focus()`, `blur()`, `clear()`, and `cancel()` methods on a SearchBar component instance that has been previously stored using a `ref` (e.g., in `this.search`). The `cancel()` method is specifically noted as being available only when the `platform` prop is set to \"ios\" or \"android\".\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/SearchBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Button using TypeScript\nDESCRIPTION: Illustrates how to include an `Icon` component (presumably from `@rneui/themed` or a similar library) within a Button, displayed next to the text. The `radius` prop is also used to control button corner rounding.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Button radius={\"sm\"} type=\"solid\">\n  Save\n  <Icon name=\"save\" color=\"white\" />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Accessing the Input Component Theme Key\nDESCRIPTION: This snippet displays the theme key ('Input') used to customize the styles of the Input component when using the ThemeProvider from React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nInput\n```\n\n----------------------------------------\n\nTITLE: Consuming Theme with Higher-Order Component (withTheme) (JavaScript/React Native)\nDESCRIPTION: This snippet uses the withTheme HOC from react-native-elements to inject the theme, updateTheme, and replaceTheme props into a custom component. The code displays themable text with the current theme's primary color. Dependencies are react-native and react-native-elements, input is component props, and output is a theme-aware custom component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { withTheme } from 'react-native-elements';\n\nfunction MyComponent(props) {\n  const { theme, updateTheme, replaceTheme } = props;\n  return <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n}\n\nexport default withTheme(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNE with Yarn\nDESCRIPTION: This command installs the bleeding-edge versions of the core React Native Elements packages (`@rneui/base` and `@rneui/themed`) using Yarn with the `@edge` dist-tag. These versions contain the latest features and fixes but might be unstable.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/base@edge @rneui/themed@edge\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component for Documentation Theme\nDESCRIPTION: Imports the Tabs component from the '@theme/Tabs' library. This component is typically used within documentation frameworks like Docusaurus (implied by '@theme') to create tabbed interfaces for organizing content.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Key for ListItem.Accordion\nDESCRIPTION: Shows the theme key to be used when customizing the ListItem.Accordion component using the ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Accordion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemAccordion\n```\n\n----------------------------------------\n\nTITLE: Theme Key for ListItem.Chevron in React Native Elements\nDESCRIPTION: This code snippet displays the theme key for customizing the ListItem.Chevron component using ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Chevron.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nListItemChevron\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component from React Native Elements\nDESCRIPTION: Shows how to import the Dialog component from the @rneui/themed package for use in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Header with Default Components - React Native Elements - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to quickly set up the Header component using the default left, center, and right components by specifying configuration objects as props. It leverages the built-in Icon for button elements and Text for the title, allowing color customization via prop configuration. Inputs include leftComponent, centerComponent and rightComponent props, each accepting configuration objects for icon or text; outputs in the UI are the arranged header sections. No special dependencies are required beyond react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-2.3.2/header.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Header\n  leftComponent={{ icon: 'menu', color: '#fff' }}\n  centerComponent={{ text: 'MY TITLE', style: { color: '#fff' } }}\n  rightComponent={{ icon: 'home', color: '#fff' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Identifying TabItem Theme Key for Customization\nDESCRIPTION: This snippet displays the theme key (`TabItem`) used for customizing the `Tab.Item` component's styles via the ThemeProvider in React Native Elements. This key allows developers to apply global style overrides.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Tab.Item.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTabItem\n```\n\n----------------------------------------\n\nTITLE: Configuring Create React App for Web Usage\nDESCRIPTION: Configuration file (config-overrides.js) to set up React Native Elements for web usage with Create React App, using react-app-rewired and customize-cra.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst { override, addBabelPlugins, babelInclude } = require('customize-cra');\n\nmodule.exports = override(\n  ...addBabelPlugins('@babel/plugin-proposal-class-properties'),\n  babelInclude([\n    path.resolve(__dirname, 'node_modules/@rneui/base'),\n    path.resolve(__dirname, 'node_modules/@rneui/themed'),\n    path.resolve(__dirname, 'node_modules/react-native-vector-icons'),\n    path.resolve(__dirname, 'node_modules/react-native-ratings'),\n    path.resolve(__dirname, 'src'),\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Colors at Runtime (JavaScript/React Native)\nDESCRIPTION: This code demonstrates how to update the current theme at runtime by calling updateTheme in a component wrapped with withTheme. Calling updateTheme with a new colors object will override parts of the theme. Requires react-native-elements and a component enhanced with withTheme.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/customization.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  colors: {\n    primary: 'pink',\n  },\n};\n\n// We can update the primary color\nupdateTheme({ colors: { primary: 'red' } });\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React Native\nDESCRIPTION: This snippet demonstrates how to import the Input component from the '@rneui/themed' package for use in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating a Single-Theme App with ThemeProvider - React/JSX\nDESCRIPTION: Illustrates configuring the application to use only one color scheme (light mode) for theming. The snippet creates a theme with custom colors and sets 'mode' to 'light', then applies it with ThemeProvider. Ideal for applications with a fixed theme. Requires React Native Elements setup.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  // Use only one color scheme\n  lightColors: {\n    primary: 'red',\n  },\n  // And set that mode as default\n  mode: 'light',\n  components: {\n    Button: {\n      raised: true,\n    },\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>My Button</Button>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Card.Image Component\nDESCRIPTION: Specifies 'CardImage' as the theme key used for customizing the styles of the Card.Image component through the ThemeProvider in react-native-elements/themed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.Image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCardImage\n```\n\n----------------------------------------\n\nTITLE: Importing AirbnbRating Component (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `AirbnbRating` component from the `@rneui/themed` library. This import is necessary to use the component within a React Native application utilizing the React Native Elements UI toolkit (themed version).\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/components/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AirbnbRating } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Creating a new React Native Web project\nDESCRIPTION: Uses the Create React Native Web App CLI to generate a new project called 'gitphone'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nÎ» create-react-native-web-app gitphone\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Gradient Background to ListItem in React Native Elements (tsx)\nDESCRIPTION: Demonstrates applying a linear gradient background to a `ListItem` using the `linearGradientProps` and `ViewComponent` props (specifying `LinearGradient`, potentially from 'expo-linear-gradient' or similar). It also includes an `Avatar`, custom styled text (white and bold), and a white `ListItem.Chevron`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem\n  linearGradientProps={{\n    colors: [\"#FF9800\", \"#F44336\"],\n    start: { x: 1, y: 0 },\n    end: { x: 0.2, y: 0 },\n  }}\n  ViewComponent={LinearGradient} // Only if no expo\n>\n  <Avatar\n    rounded\n    source={{ uri: \"https://randomuser.me/api/portraits/men/33.jpg\" }}\n  />\n  <ListItem.Content>\n    <ListItem.Title style={{ color: \"white\", fontWeight: \"bold\" }}>\n      Chris Jackson\n    </ListItem.Title>\n    <ListItem.Subtitle style={{ color: \"white\" }}>\n      Vice Chairman\n    </ListItem.Subtitle>\n  </ListItem.Content>\n  <ListItem.Chevron color=\"white\" />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the Image component from the @rneui/themed package in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Mismatched Style Types in Theme and Local Props (Object vs Array) - React Native Elements - JavaScript\nDESCRIPTION: Illustrates a common pitfall where the theme provides an object-style containerStyle while the Button receives an array-style containerStyle. This mismatch leads to style merging failure. Dependencies: react-native-elements. Input: theme with object-based containerStyle, Button with array-based containerStyle. Output: Theme and local styles do not merge as intended; styling may be incorrect. Limitation: Always ensure matching style types for merging.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Array Chunking Utility for Avatar Grouping - JavaScript\nDESCRIPTION: This snippet extends the Array prototype with a 'chunk' method, allowing arrays to be split into groups of a specified size for layout purposes. It recursively partitions an array, which is leveraged in the main Avatars component to display images in rows of three. The method modifies the Array prototype globally, which can have side-effects, so should be used with care in broader codebases.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to run the unit tests to ensure code changes don't break existing functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge RNEUI from GitHub with NPM\nDESCRIPTION: Installs the bleeding-edge versions of @rneui/base and @rneui/themed directly from their respective GitHub branches using npm. This is an alternative method if installation via the '@edge' dist-tag fails.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# @rneui/base\nnpm install react-native-elements/react-native-elements#base\n\n# @rneui/themed\nnpm install react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Importing LinearProgress Component in React Native Elements (JavaScript)\nDESCRIPTION: This code snippet shows how to import the `LinearProgress` component from the `react-native-elements` library. This import is necessary to use the component within a React Native application file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/linearProgress.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { LinearProgress } from 'react-native-elements';\n```\n\n----------------------------------------\n\nTITLE: Custom Title Component with Styled Text - React Native - JavaScript\nDESCRIPTION: This functional component, CustomTitle, composes two styled Text elements vertically to display a name and a subtitle (title and role). The layout uses a column direction and applies bold and italic formatting to distinguish between the main title and subtitle. It serves as a reusable presentational component for custom headers or profile sections. Dependencies: React Native.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst CustomTitle = () => {\nreturn (\n  <View style={{ flexDirection: 'column' }}>\n    <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n    <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n      Minister of Magic\n    </Text>\n  </View>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from React Native Elements\nDESCRIPTION: Shows how to import the Card component from the @rneui/themed package\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Card.FeaturedSubtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Aliasing for Package Migration - React Native Elements (bash)\nDESCRIPTION: Shows how to use yarn package aliases to redirect imports from the old package name to the new '@rneui/themed' package, streamlining updates during migration. Only applies if using yarn and if aliasing is desirable.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/migration-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-elements@npm:@rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Installing Bleeding Edge Version via NPM\nDESCRIPTION: Commands to install the bleeding edge version of React Native Elements using NPM, including alternative GitHub installation.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/base@edge @rneui/themed@edge\n\n# Alternative GitHub installation\n# @rneui/base\nnpm install react-native-elements/react-native-elements#base\n\n# @rneui/themed\nnpm install react-native-elements/react-native-elements#themed\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Documentation in React Native Elements - JavaScript\nDESCRIPTION: This snippet imports the documentation file for the Snack component from the local file system using an ES6 import statement. The imported Markdown file ('snack/index.md') is presumably used to provide inline documentation or metadata related to the Snack component. The import expects the file path to resolve correctly based on project structure and may require Markdown loaders if used outside of environments that natively support such imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Tile/Tile.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Snack from './snack/index.md'\n```\n\n----------------------------------------\n\nTITLE: Merging Theme and Local Styles as Objects - React Native Elements - JSX\nDESCRIPTION: Demonstrates declaring both theme-level and component-level styles as objects to ensure successful merging by the ThemeProvider in React Native Elements. No additional dependencies are required beyond react-native-elements; theme must provide the style for Button as an object, and the local style prop must also be an object. Accepts style props as objects, producing expected React Native style merging behavior without errors.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/customization/4.pitfall.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots with Yarn - Bash\nDESCRIPTION: This snippet shows the command for updating Jest snapshot files when using Yarn as the package manager. It is intended for developers to ensure that changes to component structures are reflected in the latest snapshot tests using the 'yarn test -u' command. Prerequisite: Yarn must be installed and project scripts configured; This updates all existing Jest snapshot files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn test -u\n```\n\n----------------------------------------\n\nTITLE: Importing the SpeedDial Component in React Native (JavaScript/TypeScript)\nDESCRIPTION: Shows how to import the `SpeedDial` component from the '@rneui/themed' package. This is the standard way to make the component available for use within your React Native application files.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/SpeedDial.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SpeedDial } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem from React Native Elements - JavaScript\nDESCRIPTION: Illustrates how to import the ListItem component from the @rneui/themed package for use in your React Native project. This import is necessary to access both the ListItem and its Subtitle subcomponent. Ensure that you have installed the @rneui/themed package as a dependency in your project. Usage: \n- No additional parameters required for the import. \n- Outputs the ListItem class/component for UI rendering. \n- Only valid for environments supporting ES module imports.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Subtitle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing FAB from React Native Elements - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the FAB component from the '@rneui/themed' package using TypeScript syntax. There are no external dependencies aside from the '@rneui/themed' package, which should be installed in the project. This import makes the FAB component available for use throughout the file or component where this code is added. No additional parameters are required, but the imported FAB can accept various props as documented elsewhere.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/FAB.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FAB } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-safe-area-context via Yarn - Bash\nDESCRIPTION: Uses yarn to add the react-native-safe-area-context dependency. Run this in your project directory if the package is not already installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts in CRA Web Project using JSX\nDESCRIPTION: Demonstrates how to load the required font files (e.g., MaterialIcons, FontAwesome) from 'react-native-vector-icons' within a Create React App web project using a `<style>` tag and `@font-face` CSS rules. This makes the icons render correctly in the web environment.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/installation.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: React Native Elements Input Component Examples\nDESCRIPTION: This SnackPlayer example demonstrates various configurations of the Input component from React Native Elements. It includes basic input, input with icons, custom icons, error messages, and a password input.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Input, Icon } from '@rneui/themed';\n\nexport default () => {\n\nreturn (\n  <>\n    <Input\n      placeholder='BASIC INPUT'\n    />\n\n    <Input\n      placeholder='INPUT WITH ICON'\n      leftIcon={{ type: 'font-awesome', name: 'chevron-left' }}\n    />\n\n    <Input\n      placeholder='INPUT WITH CUSTOM ICON'\n      leftIcon={\n        <Icon\n          name='user'\n          size={24}\n          color='black'\n        />\n      }\n    />\n\n\n    <Input\n      placeholder=\"Comment\"\n      leftIcon={{ type: 'font-awesome', name: 'comment' }}\n      onChangeText={value => this.setState({ comment: value })}\n      />\n\n\n    <Input\n      placeholder='INPUT WITH ERROR MESSAGE'\n      errorStyle={{ color: 'red' }}\n      errorMessage='ENTER A VALID ERROR HERE'\n    />\n\n    <Input placeholder=\"Password\" secureTextEntry={true} />\n  </>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Themed Tab Components in React (JavaScript)\nDESCRIPTION: This snippet imports the Tabs and TabItem components provided by the Docusaurus @theme package for organizing tabbed user interface sections within documentation files. No external dependencies are required aside from the Docusaurus theme itself. The imported components are intended for structuring content and do not directly affect runtime list item behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.Chevron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Component in React Native - JavaScript\nDESCRIPTION: This snippet uses the ES6 export default syntax in JavaScript to export the Lists2 component, which is presumably a React Native component. This enables the Lists2 component to be imported and used in other files or modules of the React Native project. There are no external dependencies beyond standard React Native imports; the export assumes that Lists2 has been properly defined earlier in the file.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default Lists2;\n```\n\n----------------------------------------\n\nTITLE: Installing CircularSlider via Yarn in React Native\nDESCRIPTION: Command to install the CircularSlider component using Yarn package manager.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/universe/CircularSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rneui/circular-slider\n```\n\n----------------------------------------\n\nTITLE: Implementing ListItem with Custom Avatar Component\nDESCRIPTION: Shows implementation of ListItem with a custom Avatar component that can display either an image or a text fallback. Uses FlatList for rendering the list efficiently.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/component_usage/ListItem.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListItem, Avatar } from '@rneui/themed'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nkeyExtractor = (item, index) => index.toString()\n\nrenderItem = ({ item }) => (\n  <ListItem bottomDivider >\n    <Avatar title={item.name[0]} source={item.avatar_url && { uri: item.avatar_url }}/>\n    <ListItem.Content>\n      <ListItem.Title>{item.name}</ListItem.Title>\n      <ListItem.Subtitle>{item.subtitle}</ListItem.Subtitle>\n    </ListItem.Content>\n    <ListItem.Chevron />\n  </ListItem>\n)\n\nrender () {\n  return (\n    <FlatList\n      keyExtractor={this.keyExtractor}\n      data={list}\n      renderItem={this.renderItem}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functional SearchBar Component in React Native\nDESCRIPTION: This is a complete React Native functional component example demonstrating the use of the SearchBar component from '@rneui/themed'. It utilizes the 'useState' hook to manage the search input's state and updates it via the 'onChangeText' prop. Basic styling is applied using StyleSheet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/SearchBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SearchBar } from '@rneui/themed';\nimport { View, Text, StyleSheet } from 'react-native';\n\ntype SearchBarComponentProps = {};\n\nconst SwitchComponent: React.FunctionComponent<SearchBarComponentProps> = () => {\nconst [search, setSearch] = useState(\"\");\n\nconst updateSearch = (search) => {\n  setSearch(search);\n};\n\nreturn (\n  <View style={styles.view}>\n    <SearchBar\n      placeholder=\"Type Here...\"\n      onChangeText={updateSearch}\n      value={search}\n    />\n  </View>\n);\n};\n\nconst styles = StyleSheet.create({\nview: {\n  margin: 10,\n},\n});\n\nexport default SwitchComponent;\n```\n\n----------------------------------------\n\nTITLE: Importing PricingCard from @rneui/themed (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the `PricingCard` component from the `@rneui/themed` library in a TypeScript React Native project. This import makes the component available for rendering pricing information tables. Requires the `@rneui/themed` package to be installed.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/PricingCard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PricingCard } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Building Component API Documentation\nDESCRIPTION: Command to auto-generate component API documentation from TSDoc in TypeScript declarations.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn docs-build-api\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Styles as Arrays and Overriding Locally - React Native Elements - JavaScript\nDESCRIPTION: Provides an example where both the theme and local style for a Button component's containerStyle are arrays, which is valid and merges as expected in React Native Elements. Dependencies: react-native-elements. Input: theme with array-based containerStyle and a Button with an array-based containerStyle. Output: Styles from both theme and props are combined using array merging.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/customization.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Referencing the Theme Key for ListItemSwipeable in JavaScript\nDESCRIPTION: This snippet specifies the theme key 'ListItemSwipeable', which can be used with the 'ThemeProvider' for customizing the appearance and behavior of ListItem.Swipeable components. It acts as an identifier in the theme system, allowing developers to override default styles or config values. To apply customizations, refer to this key when configuring your theme object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/ListItem.Swipeable.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemSwipeable\n```\n\n----------------------------------------\n\nTITLE: Referencing the Theme Key for Badge in React Native Elements - JavaScript\nDESCRIPTION: This code snippet indicates the component's theme key, which is 'Badge', used for theme customization within the React Native Elements framework. You may reference this key when applying theme overrides or using ThemeProvider. No dependencies are needed beyond React Native Elements; the key is expected as a string literal input for theming.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Badge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBadge\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles with Component Props (JSX)\nDESCRIPTION: Demonstrates that styles passed directly as props to a component (external styles) have the highest precedence, overriding both internal component styles and styles defined in the `ThemeProvider` theme. Here, `titleStyle={{ color: 'pink' }}` overrides the theme's 'red' color.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/customization.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements (TypeScript)\nDESCRIPTION: This snippet shows the necessary import statement to use the Card component, which includes the Card.Title sub-component, from the '@rneui/themed' library in a TypeScript React Native project. This import makes the Card component and its associated sub-components available for use.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/Card.Title.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Example Functional Test Case Description (Markdown)\nDESCRIPTION: Illustrates a functional test scenario for a ButtonGroup component using natural language within a Markdown block. This example describes the expected behavior: when a user selects a button, it should become highlighted, and any previously selected button should be un-highlighted. This serves as a requirement specification for a functional test.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/repo/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf a user touches on a button in the button group, then the button selected should be highlighted\nand the previous one un-highlighted.\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating the Theme with updateTheme - TypeScript\nDESCRIPTION: Invokes 'updateTheme' to modify the current theme's primary color at runtime. This function merges supplied theme values with the existing theme context. Must be called in a context where ThemeProvider is already used. Only relevant in runtime; outputs changes to theme values for the app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/0.index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateTheme({\n  lightColors: {\n    primary: 'purple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay ModalComponent for React Native Web (JSX)\nDESCRIPTION: This snippet demonstrates the necessary configuration for using the Overlay component on the web platform with react-native-web. It imports a Modal component implementation (e.g., from `modal-react-native-web`) and passes it to the Overlay via the `ModalComponent` prop, as react-native-web does not have a built-in Modal.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/component_usage/Overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n...\\nimport Modal from 'modal-react-native-web';\\n\\n...\\n\\n<Overlay ModalComponent={Modal} ... />\\n...\n```\n\n----------------------------------------\n\nTITLE: Calling Interaction Methods on SearchBar via Ref (JavaScript)\nDESCRIPTION: Shows how to invoke built-in methods like `focus()`, `blur()`, `clear()`, and `cancel()` on a SearchBar instance that has been assigned to a reference (e.g., `this.search`). The `cancel()` method is noted as only available for iOS and Android platforms.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/searchbar.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```\nthis.search.focus();\nthis.search.blur();\nthis.search.clear();\nthis.search.cancel(); // Only available if `platform` props is \"ios\" | \"android\"\n```\n```\n\n----------------------------------------\n\nTITLE: Importing the Tooltip Component in React Native Elements\nDESCRIPTION: Imports the `Tooltip` component from the '@rneui/themed' package. This component is necessary to utilize the tooltip functionality provided by the React Native Elements library.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tooltip } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Using Component Props in Themes - jsx\nDESCRIPTION: Shows how to define dynamic theming logic for the Button component by using a function to set 'titleStyle' based on the button's props. This pattern requires @rneui/themed and ensures theme-aware customization for UI components.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme } from '@rneui/themed';\\n\\nconst myTheme = createTheme({\\n  components: {\\n    Button: (buttonProps) => ({\\n      titleStyle: {\\n        color: buttonProps.type === 'solid' ? 'blue' : 'red',\\n      },\\n    }),\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Customized Builds - Bash\nDESCRIPTION: Adds Babel plugin for class properties, customize-cra, and react-app-rewired as dev dependencies to enable custom Babel plugins and configuration overrides. These allow modifications to the build process which are otherwise restricted in standard Create React App setups.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/web_usage.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-class-properties customize-cra react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Title Component in React Native\nDESCRIPTION: Defines a CustomTitle functional component that displays a user's name and title in a column layout. This component uses basic React Native View and Text components with inline styling to create a structured visual hierarchy.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst CustomTitle = () => {\nreturn (\n  <View style={{ flexDirection: 'column' }}>\n    <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n    <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n      Minister of Magic\n    </Text>\n  </View>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Component for Web Usage with Tooltip\nDESCRIPTION: A basic example showing how to import the Modal component from 'modal-react-native-web' and use it with the Tooltip component for web platform compatibility.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/component_usage/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Modal from 'modal-react-native-web';\n\n\n<Tooltip ModalComponent={Modal} ... />\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Key for ListItem.Subtitle - React Native Elements - JavaScript\nDESCRIPTION: Shows the string name ('ListItemSubtitle') corresponding to the theme key for customizing styles of the ListItem.Subtitle component. This is used when defining or overriding theme values with the ThemeProvider in React Native Elements. No dependencies beyond the theming system are required. The string should be referenced in a JavaScript or JSON-based style/theme configuration.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ListItem.Subtitle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItemSubtitle\n```\n\n----------------------------------------\n\nTITLE: Cleaning Node Modules with npm - Bash Shell\nDESCRIPTION: This command removes node_modules and reinstalls npm dependencies. It is a general fix for module resolution failures or mismatches, ensuring npm uses the latest correct versions as described by package-lock.json. Should be used with care and requires npm installed globally.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/troubleshooting.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && npm i\n```\n\n----------------------------------------\n\nTITLE: Merging Theme Updates with updateTheme in React Native Elements (TypeScript)\nDESCRIPTION: This snippet shows how to use the `updateTheme` function to dynamically modify the currently active theme. It merges the provided theme object (specifying `lightColors.primary` as 'purple') with the existing theme context, allowing for partial theme updates.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/customization/overview.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nupdateTheme({\n  lightColors: {\n    primary: 'purple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Theming Navigation with ThemeProvider - React/TSX\nDESCRIPTION: Demonstrates how to wrap the Navigation component with ThemeProvider using a pre-defined theme object. Ensures that all navigation and inner components have access to the themed context. Requires setup of a theme via createTheme and integration in the app's entry point.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/themeprovider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme=createTheme({\n  // ...\n})\n\nexport const App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Navigation>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the @rneui/themed package for use in React Native applications.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Applying Matching Array Styles with ThemeProvider in React Native\nDESCRIPTION: This snippet shows a working example where both the theme configuration and the local component prop define `containerStyle` as an array. The documentation confirms this works because the style types are consistent.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/customization/pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Pressable Props - diff\nDESCRIPTION: Displays how components now accept Pressable event props such as 'onPressIn' and 'onPressOut', replacing the previous Touchable-based API. This enables advanced gesture handling. Update all event handler xprops appropriately.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/src/pages/migration/migration-v3.mdx#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  <CheckBox\\n    title=\"I agree\"\\n    onPress={()=>{}}\\n    onLongPress={()=>{}}\\n+   onPressIn={()=>{}}\\n+   onPressOut={()=>{}}\\n    onPress={() => {}}\\n  />\n```\n\n----------------------------------------\n\nTITLE: Merging Array Styles in React Native Elements Theme (JSX)\nDESCRIPTION: Shows a successful style merge using React Native Elements `ThemeProvider` where both the theme's `Button.containerStyle` and the local `Button` component's `containerStyle` are defined as arrays of style objects. This ensures styles are merged as expected.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/customization/4.pitfall.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nconst theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a CustomTitle Component in React Native\nDESCRIPTION: A functional component that renders a styled title with a name and subtitle. The component uses flexDirection to arrange text elements vertically with custom styling for font weight, size, and style.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst CustomTitle = () => {\nreturn (\n  <View style={{ flexDirection: 'column' }}>\n    <Text style={{ fontWeight: 'bold', fontSize: 18 }}>John Doe</Text>\n    <Text style={{ fontStyle: 'italic', fontSize: 12 }}>\n      Minister of Magic\n    </Text>\n  </View>\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for react-app-rewired (Diff)\nDESCRIPTION: Shows the required modifications to the `scripts` section in `package.json`. It replaces the standard `react-scripts` commands with `react-app-rewired` commands to enable the custom build configurations defined in `config-overrides.js`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/installation.mdx#2025-04-23_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test\",\n+   \"test\": \"react-app-rewired test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Themes Using useTheme Hook in React Native Elements\nDESCRIPTION: This snippet demonstrates how to switch between light and dark themes using the useTheme hook. It includes functions to switch to dark mode and toggle between light and dark modes.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/customization/theming.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@rneui/themed';\n\nconst App = () => {\n  const { updateTheme } = useTheme();\n\n  const switchToDarkMode = () => {\n    updateTheme({\n      mode: 'dark',\n    });\n  };\n\n  const toggleTheme = () => {\n    updateTheme((theme) => ({\n      mode: theme.mode === 'light' ? 'dark' : 'light',\n    }));\n  };\n\n  return (\n    <>\n      <Button title=\"Toggle Theme\" onPress={toggleTheme} />\n      <Button title=\"Dark\" onPress={switchToDarkMode} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements (Placeholder)\nDESCRIPTION: An empty import statement from 'react-native-elements'. This typically signifies that components from the library are being used within the context of the documentation or examples on the page, even if not explicitly shown in this particular snippet. It establishes the library context.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Dialog.Loading.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Importing from react-native-elements (JavaScript)\nDESCRIPTION: Illustrates the import statement for react-native-elements with no explicit members specified. This sets the basis for referencing components from the react-native-elements library elsewhere in the file or in usage examples. There are no assigned dependencies, parameters, or functionality in this snippet.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Dialog.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Header for New Component Documentation\nDESCRIPTION: Defines the required YAML frontmatter structure for a new component's markdown documentation file (`.md`) within the `/docs` folder. This header includes a unique `id` and a `title` for the component, used by Docusaurus for identification and display in the sidebar.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: my-component\ntitle: My Component\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React Native Elements\nDESCRIPTION: This snippet shows how to import the Badge component from the React Native Elements library using the @rneui/themed package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Extending Array Prototype with Chunk Method\nDESCRIPTION: A utility function that extends JavaScript's Array prototype to add a 'chunk' method, which divides an array into smaller arrays of specified size. This is used in the Avatar component to organize images into rows.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/Avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nArray.prototype.chunk = function ( n ) {\n  if ( !this.length ) {\n      return [];\n  }\n  return [ this.slice( 0, n ) ].concat( this.slice(n).chunk(n) );\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting the Metro Cache in React Native (Bash)\nDESCRIPTION: This bash command resets the React Native packager's cache with npm, addressing persistent module resolution errors. Run in the root directory using 'npm start -- --reset-cache'. Prerequisites: npm and a React Native project. Output: force-cleared packager cache.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/troubleshooting.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Function Signature of makeStyles in @rneui/themed\nDESCRIPTION: Displays the TypeScript function signature for `makeStyles`. It accepts either a static style object (`Styles`) or a function that receives the theme object and optional component props, returning a style object. This allows for dynamic, theme-dependent styling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/customization/styles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmakeStyles(styles: Styles | ((theme, props) => Styles))\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Components with Composition in React Native Elements\nDESCRIPTION: This snippet demonstrates how to create a custom button component by composing the base Button component with predefined props. This approach allows for reusing styles across your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/0.index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@rneui/themed';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Components (Placeholder)\nDESCRIPTION: Imports components from the 'react-native-elements' library into a React Native project. This specific example shows an empty import brace, typically filled with specific components needed, like `Tooltip`, setting the stage for using the library's elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Calling Input Component Methods in React Native\nDESCRIPTION: This snippet shows how to call various methods on the Input component using the previously created ref. It includes examples of focusing, blurring, clearing, checking focus state, setting native props, and shaking the input.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/usage/Input/Input.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```\n\n----------------------------------------\n\nTITLE: Mixing Object and Array Styles in React Native Elements\nDESCRIPTION: This example illustrates a case where the theme uses an object for styles, but the local style is an array. This approach still works in React Native Elements, demonstrating flexibility in style application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/4.pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to ListItem in React Native Elements\nDESCRIPTION: This example shows how to add a badge to a ListItem. The badge displays a numeric value of 3 with custom text color and container positioning, demonstrating how to enhance list items with notification indicators.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/component_usage/ListItem.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem>\n  <Badge\n    value={3}\n    textStyle={{ color: 'orange' }}\n    containerStyle={{ marginTop: -20 }}\n  />\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Importing Chip Component from React Native Elements\nDESCRIPTION: Shows how to import the Chip component from the themed React Native Elements package.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chip } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Correcting React Native Elements Component Import Typo (JavaScript)\nDESCRIPTION: Demonstrates correcting a common typo when importing the `ListItem` component from `react-native-elements`. Incorrect capitalization (e.g., `Listitem` instead of `ListItem`) leads to an 'Invariant Violation: Element type is invalid' error.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Incorrect\nimport { Listitem } from 'react-native-elements'\n\n// Correct\nimport { ListItem } from 'react-native-elements'\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Tooltip Component in React Native Elements v4\nDESCRIPTION: This code snippet demonstrates how to create a controlled Tooltip component using React hooks in React Native Elements v4, maintaining backwards compatibility with the previous stateful behavior.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/migration-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst ControlledTooltip: React.FC<TooltipProps> = (props) => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Tooltip\n      visible={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      {...props}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Themed Component in React Native Elements App\nDESCRIPTION: Shows how to use a custom themed component in a React Native Elements application. This example demonstrates creating a theme with custom component styles and using the component in the app.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/customization/3.extending.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  components: {\n    ComponentKey: {\n      titleStyle: {\n        color: 'red',\n      },\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <CustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Theme Key for DialogActions Customization\nDESCRIPTION: Specifies the theme key 'DialogActions' used for customizing the appearance of Dialog Actions components via the ThemeProvider in '@rneui/themed'. This key allows developers to apply consistent styling across the application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Dialog.Actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDialogActions\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Icon Fonts\nDESCRIPTION: JSX code snippet that loads required font families for MaterialIcons and FontAwesome using inline styles.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-3.4.2/web_usage.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<style type=\"text/css\">{`\n  @font-face {\n    font-family: 'MaterialIcons';\n    src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n  }\n\n  @font-face {\n    font-family: 'FontAwesome';\n    src: url(${require('react-native-vector-icons/Fonts/FontAwesome.ttf')}) format('truetype');\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Exporting a Themed Component in React Native Elements\nDESCRIPTION: Exports the Buttons component wrapped with the withTheme HOC (Higher Order Component) from React Native Elements. This allows the component to access theme properties defined at the application level.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default withTheme(Buttons, '');\n```\n\n----------------------------------------\n\nTITLE: Declaring Theme Key Usage for Avatar in TypeScript\nDESCRIPTION: This snippet shows the string 'Avatar', denoting the theme key used for customizing the Avatar component's appearance through a theme provider. It is referenced in theme customization workflows with ThemeProvider in React Native Elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nAvatar\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the Card component from the @rneui/themed package in React Native Elements. The Card component is used for displaying information about a single subject, often containing content and actions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Documents version release details, pull requests, bug fixes and features for React Native Elements library\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/CHANGELOG.old.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### [v0.10.0](https://github.com/flyingcircle/react-native-elements/compare/v0.9.7...v0.10.0)\n\n> 15 March 2017\n\n- V0.10.0 [`#224`](https://github.com/flyingcircle/react-native-elements/pull/224)\n- Fix issues with Grid, Col and Row [`#211`](https://github.com/flyingcircle/react-native-elements/pull/211)\n- Allows Checkbox to be checked separately [`#212`](https://github.com/flyingcircle/react-native-elements/pull/212)\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements (TSX)\nDESCRIPTION: This snippet demonstrates how to import the ListItem component from the '@rneui/themed' package in a TypeScript/TSX project. This import is necessary to utilize the ListItem component and its sub-components like ListItem.Input.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/components/ListItem.Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Mixed Theme Style Types Example\nDESCRIPTION: Illustrates theme style merging with different style types - theme using object and local styles using array. This configuration still works due to React Native Elements' style handling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/customization/4.pitfall.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component and Documentation Utilities in React Native (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Avatar component from react-native-elements, as well as utility components for tabs and usage documentation within a React application. It requires the react-native-elements package and a documentation framework (Docusaurus themes). The imports facilitate organized rendering of documentation content and component demonstrations, expecting valid installation of these dependencies.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport { Avatar } from \"react-native-elements\";\nimport Usage from \"../component_usage/Avatar.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Component Import in JavaScript\nDESCRIPTION: Demonstrates a common mistake leading to an 'Invariant Violation' error, where a component ('Listitem') is imported with incorrect casing from 'react-native-elements'. This component does not exist with this spelling.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-1.2.0/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Incorrect\nimport { Listitem } from 'react-native-elements'\n```\n\n----------------------------------------\n\nTITLE: Importing the Card Component in React Native Elements (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates the ES6 import statement required to bring the `Card` component into a React Native project using the `@rneui/themed` library. The `Card` component is the container required to use `Card.Divider`.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Card.Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Assigning a Ref to the React Native Elements Input Component\nDESCRIPTION: This JSX snippet shows how to assign the previously created ref (`input`) to the `ref` prop of the React Native Elements `<Input>` component. This links the ref object to the component instance.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.6/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Input\n  ref={input}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing AirbnbRating Component in TypeScript\nDESCRIPTION: This snippet shows how to import the AirbnbRating component from the '@rneui/themed' package. This component is part of the React Native Elements UI library and is specifically the TapRating version derived from 'react-native-ratings'.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AirbnbRating } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing LinearProgress Component in TypeScript\nDESCRIPTION: This snippet shows how to import the `LinearProgress` component from the `@rneui/themed` package within a TypeScript React Native project. This import is necessary to use the component in your application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/LinearProgress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinearProgress } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Using CircularSlider in React Native\nDESCRIPTION: Examples of how to use the CircularSlider component with different props in a React Native application. Shows basic usage, usage without a thumb, and usage with a custom maximum angle.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/universe/CircularSlider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<CircularSlider value={value} onChange={setValue} />\n\n<CircularSlider value={value} noThumb />\n\n<CircularSlider maxAngle={90} />\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component in React Native\nDESCRIPTION: Shows how to import the `ButtonGroup` component from the `@rneui/themed` package for use in a React Native application. This is the standard way to make the component available in your code.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ButtonGroup } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Theme Key for TabView Component Customization\nDESCRIPTION: Specifies the theme key 'TabView' used to apply custom styles or configurations to the TabView component through the React Native Elements ThemeProvider. This key targets the component within the theme object.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/TabView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTabView\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React Native Elements\nDESCRIPTION: This code snippet demonstrates how to import the Card component from the @rneui/themed package. The Card.Divider is a subcomponent of Card used to add dividers within cards.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Card.Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Setup Commands for React Native Init Projects (Bash)\nDESCRIPTION: This code provides the setup commands for installing React Native Elements and vector icons in a react-native-init project, including cleanup, installation, and linking steps.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules yarn.lock\n```\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn && yarn add @rneui/base @rneui/themed\n```\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add react-native-vector-icons\n```\n\nLANGUAGE: bash\nCODE:\n```\nreact-native link react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Placeholder Comment in HTML\nDESCRIPTION: This snippet shows a standard HTML comment used as a placeholder or reminder within the documentation content. It indicates that some content or action is pending at this location.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.3/universe/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- TODO -->\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the @rneui/themed package. This is the basic import statement needed to use the ListItem component in your React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Updating Avatar Component with Accessory in React Native Elements\nDESCRIPTION: This snippet demonstrates how to use the new Avatar.Accessory child component instead of the deprecated accessory props.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2020-08-10-2.3-upgrade-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Avatar>\n  <Avatar.Accessory {...accessoryProps} />\n</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Loading Button in React Native Elements\nDESCRIPTION: Shows how to display a loading spinner in a button using the loading prop. This is useful for indicating async operations like form submissions.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Button.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Button title=\"Solid\" type=\"solid\" loading />\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React Native Elements\nDESCRIPTION: This code snippet shows how to import the Dialog component from the @rneui/themed package in React Native Elements. The Dialog.Actions component is accessed through this import.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Dialog.Actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Tile Component via Theme in React Native Elements\nDESCRIPTION: Demonstrates how to access the Tile component using the theme key in React Native Elements. This is useful when customizing the component through theming.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Tile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nTile\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Key for DialogTitle in React Native Elements\nDESCRIPTION: This code snippet demonstrates the theme key used for the DialogTitle component in React Native Elements. It is used for customizing the component's appearance through ThemeProvider.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Dialog.Title.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDialogTitle\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component in React Native Elements\nDESCRIPTION: Demonstrates the standard ES6 import statement required to use the `Text` component from the `@rneui/themed` library in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/components/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Text } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Theme Key for Skeleton Component Customization\nDESCRIPTION: Identifies the theme key 'Skeleton' used for customizing the component's styles via the ThemeProvider in react-native-elements.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSkeleton\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in React Native\nDESCRIPTION: This snippet shows how to import the Divider component from the @rneui/themed package in a React Native application.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/docs/components/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Divider } from '@rneui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements (NPM)\nDESCRIPTION: Installs the stable version of React Native Elements using NPM. This command installs both the themed and base packages.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed @rneui/base\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Button in React Native Elements\nDESCRIPTION: Demonstrates how to create a button with an icon using the Icon component inside the Button.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/components/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button radius={'sm'} type=\"solid\">\n  Save\n  <Icon name=\"save\" color=\"white\" />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing AirbnbRating Component Dependencies\nDESCRIPTION: Import statements showing required dependencies for using the AirbnbRating component in a React Native application\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/AirbnbRating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {} from \"react-native-elements\";\nimport Usage from \"../component_usage/AirbnbRating.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Button with Right Icon in React Native Elements\nDESCRIPTION: Shows how to add an icon to the right side of a button's text.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.5/components/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type=\"solid\">\n  Icon\n  <Icon name=\"home\" color=\"white\" />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing ListItem Component in React Native Elements\nDESCRIPTION: Shows how to import the ListItem component from the @rneui/themed package to use the Chevron functionality.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.4/components/ListItem.Chevron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListItem } from \"@rneui/themed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Theme Components (MDX)\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from the documentation theme (`@theme`). These are used to structure content within the documentation page, likely for showing code examples or different usage scenarios.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/ListItem.CheckBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Elements Components (Placeholder)\nDESCRIPTION: This snippet shows an empty import statement for 'react-native-elements'. In a typical usage scenario, specific components like 'Avatar' would be imported here. This likely serves as a placeholder within the documentation framework.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.1/components/Avatar.Accessory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"react-native-elements\";\n```\n\n----------------------------------------\n\nTITLE: Icon Component Usage Example\nDESCRIPTION: Usage component reference for demonstrating Icon implementation examples\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/components/Icon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots for React Native Elements Testing\nDESCRIPTION: Commands to update snapshots for Jest-based testing in React Native Elements. This is necessary when intentional changes are made to components that affect their rendered output.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/repo/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn test -u\n\n# npm\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Theme Components in JavaScript\nDESCRIPTION: This snippet imports necessary components from the Docusaurus theme and core library. `Tabs` and `TabItem` are likely used for creating tabbed content sections, while `useBaseUrl` is a Docusaurus utility hook for creating correct URL paths within the site.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.2/universe/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Usage in React Native Elements\nDESCRIPTION: This snippet demonstrates the simplest way to use a Button component from React Native Elements. It imports the Button from the base package and renders it with a title prop.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.7/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from '@rneui/base';\n\nconst App = () => {\n  return <Button title=\"Hello World\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Usage Example for Chip Component - JavaScript\nDESCRIPTION: This code snippet imports the Usage documentation for the Chip component example from a Markdown file, enabling the embedding of example usage within the documentation page. No external dependencies aside from the local file association are required. The behavior depends on the documentation site compiling the Markdown file as a component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-beta.0/main/Chip.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Usage from './usage/Chip/Chip.md'\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for GitHub API Data Fetching\nDESCRIPTION: This snippet shows the import statements needed for using fetch-hoc and redux's compose in a React Native component.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/blog/2018-12-13-react-native-web.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { compose } from 'redux';\nimport fetch from 'fetch-hoc';\n```\n\n----------------------------------------\n\nTITLE: Invoking Input Component Methods via React Ref in React Native Elements (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access and invoke instance methods on an Input component by using the current property of a React ref. Supported methods include focus, blur, clear, isFocused, setNativeProps, and shake, enabling direct component manipulation. Requires a valid React ref constructed with React.createRef(). Methods provide programmatic control over the Input's behavior and state.\nSOURCE: https://github.com/react-native-elements/react-native-elements/blob/next/website/versioned_docs/version-4.0.0-rc.8/component_usage/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninput.current.focus();\ninput.current.blur();\ninput.current.clear();\ninput.current.isFocused();\ninput.current.setNativeProps({ value: 'hello' });\ninput.current.shake();\n```"
  }
]