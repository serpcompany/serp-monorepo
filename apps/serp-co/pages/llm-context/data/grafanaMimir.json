[
  {
    "owner": "grafana",
    "repo": "mimir",
    "content": "TITLE: HTTP Endpoints for Prometheus-Compatible Queries\nDESCRIPTION: Collection of Prometheus-compatible query endpoints including instant, range, exemplar, and series queries.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nGET,POST <prometheus-http-prefix>/api/v1/query\n```\n\nLANGUAGE: http\nCODE:\n```\nGET,POST <prometheus-http-prefix>/api/v1/query_range\n```\n\nLANGUAGE: http\nCODE:\n```\nGET,POST <prometheus-http-prefix>/api/v1/query_exemplars\n```\n\nLANGUAGE: http\nCODE:\n```\nGET,POST <prometheus-http-prefix>/api/v1/series\n```\n\nLANGUAGE: http\nCODE:\n```\nGET,POST <prometheus-http-prefix>/api/v1/cardinality/active_series\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Client in Mimir\nDESCRIPTION: Detailed configuration options for the gRPC client used for inter-component communication, including message size limits, compression, rate limiting, TLS settings, and timeout parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_111\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) gRPC client max receive message size (bytes).\n# CLI flag: -<prefix>.grpc-max-recv-msg-size\n[max_recv_msg_size: <int> | default = 104857600]\n\n# (advanced) gRPC client max send message size (bytes).\n# CLI flag: -<prefix>.grpc-max-send-msg-size\n[max_send_msg_size: <int> | default = 104857600]\n\n# (advanced) Use compression when sending messages. Supported values are:\n# 'gzip', 'snappy', 's2' and '' (disable compression)\n# CLI flag: -<prefix>.grpc-compression\n[grpc_compression: <string> | default = \"\"]\n\n# (advanced) Rate limit for gRPC client; 0 means disabled.\n# CLI flag: -<prefix>.grpc-client-rate-limit\n[rate_limit: <float> | default = 0]\n\n# (advanced) Rate limit burst for gRPC client.\n# CLI flag: -<prefix>.grpc-client-rate-limit-burst\n[rate_limit_burst: <int> | default = 0]\n\n# (advanced) Enable backoff and retry when we hit rate limits.\n# CLI flag: -<prefix>.backoff-on-ratelimits\n[backoff_on_ratelimits: <boolean> | default = false]\n\nbackoff_config:\n  # (advanced) Minimum delay when backing off.\n  # CLI flag: -<prefix>.backoff-min-period\n  [min_period: <duration> | default = 100ms]\n\n  # (advanced) Maximum delay when backing off.\n  # CLI flag: -<prefix>.backoff-max-period\n  [max_period: <duration> | default = 10s]\n\n  # (advanced) Number of times to backoff and retry before failing.\n  # CLI flag: -<prefix>.backoff-retries\n  [max_retries: <int> | default = 10]\n\n# (experimental) Initial stream window size. Values less than the default are\n# not supported and are ignored. Setting this to a value other than the default\n# disables the BDP estimator.\n# CLI flag: -<prefix>.initial-stream-window-size\n[initial_stream_window_size: <int> | default = 63KiB1023B]\n\n# (experimental) Initial connection window size. Values less than the default\n# are not supported and are ignored. Setting this to a value other than the\n# default disables the BDP estimator.\n# CLI flag: -<prefix>.initial-connection-window-size\n[initial_connection_window_size: <int> | default = 63KiB1023B]\n\n# (advanced) Enable TLS in the gRPC client. This flag needs to be enabled when\n# any other TLS flag is set. If set to false, insecure connection to gRPC server\n# will be used.\n# CLI flag: -<prefix>.tls-enabled\n[tls_enabled: <boolean> | default = false]\n\n# (advanced) Path to the client certificate, which will be used for\n# authenticating with the server. Also requires the key path to be configured.\n# CLI flag: -<prefix>.tls-cert-path\n[tls_cert_path: <string> | default = \"\"]\n\n# (advanced) Path to the key for the client certificate. Also requires the\n# client certificate to be configured.\n# CLI flag: -<prefix>.tls-key-path\n[tls_key_path: <string> | default = \"\"]\n\n# (advanced) Path to the CA certificates to validate server certificate against.\n# If not set, the host's root CA certificates are used.\n# CLI flag: -<prefix>.tls-ca-path\n[tls_ca_path: <string> | default = \"\"]\n\n# (advanced) Override the expected name on the server certificate.\n# CLI flag: -<prefix>.tls-server-name\n[tls_server_name: <string> | default = \"\"]\n\n# (advanced) Skip validating server certificate.\n# CLI flag: -<prefix>.tls-insecure-skip-verify\n[tls_insecure_skip_verify: <boolean> | default = false]\n\n# (advanced) Override the default cipher suite list (separated by commas).\n# Allowed values:\n#\n# Secure Ciphers:\n# - TLS_AES_128_GCM_SHA256\n# - TLS_AES_256_GCM_SHA384\n# - TLS_CHACHA20_POLY1305_SHA256\n# - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n# - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n# - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n# - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n# - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n# - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n#\n# Insecure Ciphers:\n# - TLS_RSA_WITH_RC4_128_SHA\n# - TLS_RSA_WITH_3DES_EDE_CBC_SHA\n# - TLS_RSA_WITH_AES_128_CBC_SHA\n# - TLS_RSA_WITH_AES_256_CBC_SHA\n# - TLS_RSA_WITH_AES_128_CBC_SHA256\n# - TLS_RSA_WITH_AES_128_GCM_SHA256\n# - TLS_RSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n# - TLS_ECDHE_RSA_WITH_RC4_128_SHA\n# - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n# - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n# CLI flag: -<prefix>.tls-cipher-suites\n[tls_cipher_suites: <string> | default = \"\"]\n\n# (advanced) Override the default minimum TLS version. Allowed values:\n# VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13\n# CLI flag: -<prefix>.tls-min-version\n[tls_min_version: <string> | default = \"\"]\n\n# (advanced) The maximum amount of time to establish a connection. A value of 0\n# means default gRPC client connect timeout and backoff.\n# CLI flag: -<prefix>.connect-timeout\n[connect_timeout: <duration> | default = 5s]\n\n# (advanced) Initial backoff delay after first connection failure. Only relevant\n# if ConnectTimeout > 0.\n# CLI flag: -<prefix>.connect-backoff-base-delay\n[connect_backoff_base_delay: <duration> | default = 1s]\n\n# (advanced) Maximum backoff delay when establishing a connection. Only relevant\n# if ConnectTimeout > 0.\n# CLI flag: -<prefix>.connect-backoff-max-delay\n[connect_backoff_max_delay: <duration> | default = 5s]\n\ncluster_validation:\n  # (experimental) Optionally define the cluster validation label.\n  # CLI flag: -<prefix>.cluster-validation.label\n  [label: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Client TLS Flags for Grafana Mimir Querier\nDESCRIPTION: This example shows how to configure TLS flags for the gRPC client in the Grafana Mimir querier when connecting to the query-frontend. It specifies paths to client certificate, key, and CA certificate.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/secure/securing-communications-with-tls.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Path to the TLS Cert for the gRPC Client\n-querier.frontend-client.tls-cert-path=/path/to/client.crt\n\n# Path to the TLS Key for the gRPC Client\n-querier.frontend-client.tls-key-path=/path/to/client.key\n\n# Path to the TLS CA for the gRPC Client\n-querier.frontend-client.tls-ca-path=/path/to/root.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Query Frontend YAML Configuration\nDESCRIPTION: YAML configuration file that sets up Mimir query-frontend to work with Prometheus-compatible services. It includes settings for multitenancy, server configuration, query splitting, caching with memcached, and downstream Prometheus connection.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-the-query-frontend-work-with-prometheus.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# You can use the Mimir query frontend with any Prometheus-API compatible\n# service, including Prometheus and Thanos.  Use this config file to get\n# the benefits of query parallelisation and caching.\n\n# Disable the requirement that every request to Mimir has a\n# X-Scope-OrgID header. `anonymous` will be substituted in instead.\nmultitenancy_enabled: false\n\n# We only want to run the query-frontend module.\ntarget: query-frontend\n\n# We don't want the default /api/prom or /prometheus prefixes on endpoints.\napi:\n  prometheus_http_prefix: '/'\n\nserver:\n  http_listen_port: 9091\n\nfrontend:\n  split_queries_by_interval: 24h\n  align_queries_with_step: true\n  cache_results: true\n\n  results_cache:\n    backend: \"memcached\"\n\n    memcached:\n      # You can either configure a headless service in Kubernetes and Mimir will discover the individual\n      # instances using a SRV DNS query (host) or list comma separated memcached addresses.\n      addresses: \"dnssrvnoa+memcached.mimir.svc.cluster.local:11211\"\n\n  log_queries_longer_than: 1s\n\n  # The Prometheus URL to which the query-frontend should connect to.\n  downstream_url: http://prometheus.mydomain.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration example for setting up Amazon S3 as the storage backend for Grafana Mimir. Includes separate bucket configurations for blocks, alertmanager, and ruler storage with AWS credentials.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-object-storage-backend.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncommon:\n  storage:\n    backend: s3\n    s3:\n      endpoint: s3.us-east-2.amazonaws.com\n      region: us-east-2\n      secret_access_key: \"${AWS_SECRET_ACCESS_KEY}\"\n      access_key_id: \"${AWS_ACCESS_KEY_ID}\"\n\nblocks_storage:\n  s3:\n    bucket_name: mimir-blocks\n\nalertmanager_storage:\n  s3:\n    bucket_name: mimir-alertmanager\n\nruler_storage:\n  s3:\n    bucket_name: mimir-ruler\n```\n\n----------------------------------------\n\nTITLE: Basic Routing with Gorilla Mux in Go\nDESCRIPTION: This Go snippet demonstrates registering URL paths with corresponding handler functions using the gorilla/mux Router. It sets up basic routes for the main URL path, '/products', and '/articles' to their respective handlers.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/\", HomeHandler)\n    r.HandleFunc(\"/products\", ProductsHandler)\n    r.HandleFunc(\"/articles\", ArticlesHandler)\n    http.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates for Grafana Mimir TLS\nDESCRIPTION: This script generates self-signed certificates for securing Grafana Mimir cluster communications. It creates private keys, root certificate, and client/server certificates valid for 100,000 days.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/secure/securing-communications-with-tls.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\n\n# root cert / certifying authority\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days 100000 -out root.crt\n\n# csrs - certificate signing requests\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=localhost\" -out server.csr\n\n# certificates\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days 100000 -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days 100000 -sha256\n```\n\n----------------------------------------\n\nTITLE: Configuring TSDB Options in Grafana Mimir (YAML)\nDESCRIPTION: This snippet defines configuration options for the Time Series Database (TSDB) in Grafana Mimir. It includes settings for data retention, block shipping, compaction, WAL management, and various performance-related parameters. These options control how time series data is stored and managed within the ingester component.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_138\n\nLANGUAGE: yaml\nCODE:\n```\ntsdb:\n  [dir: <string> | default = \"./tsdb/\"]\n  [retention_period: <duration> | default = 13h]\n  [ship_interval: <duration> | default = 1m]\n  [ship_concurrency: <int> | default = 10]\n  [head_compaction_interval: <duration> | default = 1m]\n  [head_compaction_concurrency: <int> | default = 1]\n  [head_compaction_idle_timeout: <duration> | default = 1h]\n  [head_chunks_write_buffer_size_bytes: <int> | default = 4194304]\n  [head_chunks_end_time_variance: <float> | default = 0]\n  [stripe_size: <int> | default = 16384]\n  [wal_compression_enabled: <boolean> | default = false]\n  [wal_segment_size_bytes: <int> | default = 134217728]\n  [wal_replay_concurrency: <int> | default = 0]\n  [flush_blocks_on_shutdown: <boolean> | default = false]\n  [close_idle_tsdb_timeout: <duration> | default = 13h]\n  [memory_snapshot_on_shutdown: <boolean> | default = false]\n  [head_chunks_write_queue_size: <int> | default = 1000000]\n```\n\n----------------------------------------\n\nTITLE: Calculating Query Alignment in Grafana Mimir\nDESCRIPTION: These mathematical expressions demonstrate how Grafana Mimir determines if a range query is aligned. A query is considered aligned when both the start and end parameters are multiples of its step.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/query/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstart modulo step = 0\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nend modulo step = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP TLS Settings in Grafana Mimir\nDESCRIPTION: Complete configuration for HTTP TLS settings including certificate paths, key paths, client authentication settings, and CA paths. Provides options for both inline and file-based certificate configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_tls_config:\n  # Server TLS certificate. This configuration parameter is YAML only.\n  [cert: <string> | default = \"\"]\n\n  # Server TLS key. This configuration parameter is YAML only.\n  [key: <string> | default = \"\"]\n\n  # Root certificate authority used to verify client certificates. This\n  # configuration parameter is YAML only.\n  [client_ca: <string> | default = \"\"]\n\n  # (advanced) HTTP server cert path.\n  # CLI flag: -server.http-tls-cert-path\n  [cert_file: <string> | default = \"\"]\n\n  # (advanced) HTTP server key path.\n  # CLI flag: -server.http-tls-key-path\n  [key_file: <string> | default = \"\"]\n\n  # (advanced) HTTP TLS Client Auth type.\n  # CLI flag: -server.http-tls-client-auth\n  [client_auth_type: <string> | default = \"\"]\n\n  # (advanced) HTTP TLS Client CA path.\n  # CLI flag: -server.http-tls-ca-path\n  [client_ca_file: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Store Gateway with Tenant Federation\nDESCRIPTION: Configuration block for the store-gateway component with tenant federation settings. Controls how queries can be federated across multiple tenants using the X-Scope-OrgID header.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# The store_gateway block configures the store-gateway component.\n[store_gateway: <store_gateway>]\n\ntenant_federation:\n  # If enabled on all services, queries can be federated across multiple\n  # tenants. The tenant IDs involved need to be specified separated by a '|'\n  # character in the 'X-Scope-OrgID' header.\n  # CLI flag: -tenant-federation.enabled\n  [enabled: <boolean> | default = false]\n\n  # (experimental) The number of workers used for each tenant federated query.\n  # This setting limits the maximum number of per-tenant queries executed at a\n  # time for a tenant federated query.\n  # CLI flag: -tenant-federation.max-concurrent\n  [max_concurrent: <int> | default = 16]\n\n  # The max number of tenant IDs that may be supplied for a federated query if\n  # enabled. 0 to disable the limit.\n  # CLI flag: -tenant-federation.max-tenants\n  [max_tenants: <int> | default = 0]\n```\n\n----------------------------------------\n\nTITLE: Complete Gorilla Mux Server Example\nDESCRIPTION: Minimal working example of a complete web server using Gorilla Mux, showing basic router setup and handler definition.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"log\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc YourHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Gorilla!\\n\"))\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    // Routes consist of a path and a handler function.\n    r.HandleFunc(\"/\", YourHandler)\n\n    // Bind to a port and pass our router in\n    log.Fatal(http.ListenAndServe(\":8000\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple LRU Cache with Golang-LRU in Go\nDESCRIPTION: This code snippet demonstrates how to initialize a fixed-size LRU cache using the golang-lru package. It inserts entries until the cache is full and asserts the final size. The example highlights cache overflow handling in a thread-safe manner. Requires the golang-lru package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/golang-lru/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/hashicorp/golang-lru/v2\"\n)\n\nfunc main() {\n\tl, _ := lru.New[int, any](128)\n\tfor i := 0; i < 256; i++ {\n\t\tl.Add(i, nil)\n\t}\n\tif l.Len() != 128 {\n\t\tpanic(fmt.Sprintf(\"bad len: %v\", l.Len()))\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Worker in Mimir\nDESCRIPTION: Configuration for the worker running within the querier that picks up and executes queries enqueued by the query-frontend or query-scheduler, including address settings, DNS lookup parameters, and response streaming options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_112\n\nLANGUAGE: yaml\nCODE:\n```\n# Address of the query-frontend component, in host:port format. If multiple\n# query-frontends are running, the host should be a DNS resolving to all\n# query-frontend instances. This option should be set only when query-scheduler\n# component is not in use.\n# CLI flag: -querier.frontend-address\n[frontend_address: <string> | default = \"\"]\n\n# Address of the query-scheduler component, in host:port format. The host should\n# resolve to all query-scheduler instances. This option should be set only when\n# query-scheduler component is in use and\n# -query-scheduler.service-discovery-mode is set to 'dns'.\n# CLI flag: -querier.scheduler-address\n[scheduler_address: <string> | default = \"\"]\n\n# (advanced) How often to query DNS for query-frontend or query-scheduler\n# address.\n# CLI flag: -querier.dns-lookup-period\n[dns_lookup_duration: <duration> | default = 10s]\n\n# (advanced) Querier ID, sent to the query-frontend to identify requests from\n# the same querier. Defaults to hostname.\n# CLI flag: -querier.id\n[id: <string> | default = \"\"]\n\n# Configures the gRPC client used to communicate between the querier and the\n# query-frontend.\n# The CLI flags prefix for this block configuration is: querier.frontend-client\n[grpc_client_config: <grpc_client>]\n\n# Configures the gRPC client used to communicate between the querier and the\n# query-scheduler.\n# The CLI flags prefix for this block configuration is: querier.scheduler-client\n[query_scheduler_grpc_client_config: <grpc_client>]\n\n# (experimental) Enables streaming of responses from querier to query-frontend\n# for response types that support it (currently only `active_series` responses\n# do).\n# CLI flag: -querier.response-streaming-enabled\n[response_streaming_enabled: <boolean> | default = false]\n```\n\n----------------------------------------\n\nTITLE: Uploading Blocks using Mimirtool\nDESCRIPTION: Command to upload TSDB blocks to Grafana Mimir using mimirtool backfill functionality with tenant specification.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool backfill --address=http://<mimir-hostname> --id=<tenant> <block1> <block2>...\n```\n\n----------------------------------------\n\nTITLE: Typical Application Logging in Go\nDESCRIPTION: Shows how to set up basic application logging using logfmt format with synchronized writer. Demonstrates key-value pair logging with custom fields.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nw := log.NewSyncWriter(os.Stderr)\nlogger := log.NewLogfmtLogger(w)\nlogger.Log(\"question\", \"what is the meaning of life?\", \"answer\", 42)\n\n// Output:\n// question=\"what is the meaning of life?\" answer=42\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Storage Retention in YAML for Grafana Mimir\nDESCRIPTION: This YAML snippet shows how to set a global storage retention period for Grafana Mimir. It configures the compactor to delete metrics data older than 1 year from object storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-metrics-storage-retention.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  # Delete from storage metrics data older than 1 year.\n  compactor_blocks_retention_period: 1y\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Settings in Grafana Mimir\nDESCRIPTION: HTTP server specific configuration including timeouts, connection handling, and path prefixes. Controls how the HTTP server handles requests, connections, and timing constraints.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) Read timeout for entire HTTP request, including headers and body.\n# CLI flag: -server.http-read-timeout\n[http_server_read_timeout: <duration> | default = 30s]\n\n# Read timeout for HTTP request headers. If set to 0, value of\n# -server.http-read-timeout is used.\n# CLI flag: -server.http-read-header-timeout\n[http_server_read_header_timeout: <duration> | default = 0s]\n\n# (advanced) Write timeout for HTTP server\n# CLI flag: -server.http-write-timeout\n[http_server_write_timeout: <duration> | default = 2m]\n\n# (advanced) Idle timeout for HTTP server\n# CLI flag: -server.http-idle-timeout\n[http_server_idle_timeout: <duration> | default = 2m]\n\n# Log closed connections that did not receive any response, most likely because\n# client didn't send any request within timeout.\n# CLI flag: -server.http-log-closed-connections-without-response-enabled\n[http_log_closed_connections_without_response_enabled: <boolean> | default = false]\n\n# (advanced) Base path to serve all API routes from (e.g. /v1/)\n# CLI flag: -server.path-prefix\n[http_path_prefix: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Tenant Storage Retention Overrides in YAML for Grafana Mimir\nDESCRIPTION: This YAML configuration demonstrates how to set per-tenant storage retention overrides in Grafana Mimir's runtime configuration. It shows different retention periods for three tenants, including disabling retention for one tenant.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-metrics-storage-retention.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  tenant1:\n    # Delete from storage tenant1's metrics data older than 1 year.\n    compactor_blocks_retention_period: 1y\n  tenant2:\n    # Delete from storage tenant2's metrics data older than 2 years.\n    compactor_blocks_retention_period: 2y\n  tenant3:\n    # Disable retention for tenant3's metrics (never delete its data).\n    compactor_blocks_retention_period: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Write Deployment Mode in Grafana Mimir\nDESCRIPTION: Basic configuration for enabling read-write deployment mode with required settings including multi-zone ingesters, store gateways, and replica configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-deployment-mode.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    deployment_mode: 'read-write',\n\n    mimir_write_replicas: 15,\n    mimir_read_replicas: 6,\n    mimir_backend_replicas: 9,\n\n    // Requirements.\n    multi_zone_ingester_enabled: true,\n    multi_zone_store_gateway_enabled: true,\n    ruler_remote_evaluation_enabled: false,\n\n    // Disable microservices autoscaling.\n    autoscaling_querier_enabled: false,\n    autoscaling_ruler_querier_enabled: false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML in Go\nDESCRIPTION: This snippet demonstrates how to marshal a Go struct to YAML and unmarshal it back, using the kubernetes-sigs/yaml package. It requires importing the yaml package from sigs.k8s.io. The Person struct is used to show the process of converting Go structures to YAML and back, using yaml.Marshal and yaml.Unmarshal methods.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"` // Affects YAML field names too.\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\t// Marshal a Person struct to YAML.\n\tp := Person{\"John\", 30}\n\ty, err := yaml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\n\t// Unmarshal the YAML back into a Person struct.\n\tvar p2 Person\n\terr = yaml.Unmarshal(y, &p2)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2)\n\t/* Output:\n\t{John 30}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Per-Tenant HA Deduplication Configuration for Mimir\nDESCRIPTION: Configuration for enabling HA deduplication per tenant in Mimir, including both global and tenant-specific settings using Consul as the key-value store.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configure-helm-ha-deduplication-consul/index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    limits:\n      accept_ha_samples: true\n      # The following two configurations must match those of external_labels in Prometheus\n      # The config values below are the default and can be removed if you don't want to override to a new value\n      ha_cluster_label: cluster\n      ha_replica_label: __replica__\n    distributor:\n      ha_tracker:\n        enable_ha_tracker: true\n        kvstore:\n          store: consul\n          consul:\n            host: <consul-endpoint> # example: http://consul.consul.svc.cluster.local:8500\nruntimeConfig:\n  overrides:\n    <tenant-id>: # put real tenant ID here\n      accept_ha_samples: true\n      ha_cluster_label: cluster\n      ha_replica_label: __replica__\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Handler with Gorilla Mux\nDESCRIPTION: Demonstrates how to set up CORS handling using CORSMethodMiddleware with custom OPTIONS handler for setting required CORS headers. The example shows proper configuration of HTTP methods and header setting.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n\n    // IMPORTANT: you must specify an OPTIONS method matcher for the middleware to set CORS headers\n    r.HandleFunc(\"/foo\", fooHandler).Methods(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions)\n    r.Use(mux.CORSMethodMiddleware(r))\n    \n    http.ListenAndServe(\":8080\", r)\n}\n\nfunc fooHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n    if r.Method == http.MethodOptions {\n        return\n    }\n\n    w.Write([]byte(\"foo\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Settings in YAML\nDESCRIPTION: Defines server configurations for HTTP and gRPC endpoints. Includes settings for network interfaces, ports, connection limits, and TLS options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) HTTP server listen network, default tcp\n# CLI flag: -server.http-listen-network\n[http_listen_network: <string> | default = \"tcp\"]\n\n# HTTP server listen address.\n# CLI flag: -server.http-listen-address\n[http_listen_address: <string> | default = \"\"]\n\n# HTTP server listen port.\n# CLI flag: -server.http-listen-port\n[http_listen_port: <int> | default = 8080]\n\n# (advanced) Maximum number of simultaneous http connections, <=0 to disable\n# CLI flag: -server.http-conn-limit\n[http_listen_conn_limit: <int> | default = 0]\n\n# (advanced) gRPC server listen network\n# CLI flag: -server.grpc-listen-network\n[grpc_listen_network: <string> | default = \"tcp\"]\n\n# gRPC server listen address.\n# CLI flag: -server.grpc-listen-address\n[grpc_listen_address: <string> | default = \"\"]\n\n# gRPC server listen port.\n# CLI flag: -server.grpc-listen-port\n[grpc_listen_port: <int> | default = 9095]\n\n# (advanced) Maximum number of simultaneous grpc connections, <=0 to disable\n# CLI flag: -server.grpc-conn-limit\n[grpc_listen_conn_limit: <int> | default = 0]\n\n# (experimental) Enables PROXY protocol.\n# CLI flag: -server.proxy-protocol-enabled\n[proxy_protocol_enabled: <boolean> | default = false]\n\n# Comma-separated list of cipher suites to use. If blank, the default Go cipher\n# suites is used.\n# CLI flag: -server.tls-cipher-suites\n[tls_cipher_suites: <string> | default = \"\"]\n\n# Minimum TLS version to use. Allowed values: VersionTLS10, VersionTLS11,\n# VersionTLS12, VersionTLS13. If blank, the Go TLS minimum version is used.\n```\n\n----------------------------------------\n\nTITLE: Setting up Jsonnet project for Grafana Mimir deployment\nDESCRIPTION: Shell script to initialize a Tanka project, install Grafana Mimir Jsonnet libraries, and set up the environment for deployment. It also generates and displays the YAML manifests.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/deploy.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n#!/usr/bin/env bash\n# SPDX-License-Identifier: AGPL-3.0-only\n\nset -e\n\n# Initialise the Tanka.\nmkdir jsonnet-example && cd jsonnet-example\ntk init --k8s=1.29\n\n# Install Mimir jsonnet.\njb install github.com/grafana/mimir/operations/mimir@main\n\n# Use the provided example.\ncp vendor/mimir/mimir-manifests.jsonnet.example environments/default/main.jsonnet\n\n# Generate the YAML manifests.\nexport PAGER=cat\ntk show environments/default\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storage Settings in YAML\nDESCRIPTION: Specifies common storage configurations for multiple components. Includes options for selecting backend storage and configuring specific storage providers like S3, GCS, Azure, Swift, and filesystem.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  # Backend storage to use. Supported backends are: s3, gcs, azure, swift,\n  # filesystem.\n  # CLI flag: -common.storage.backend\n  [backend: <string> | default = \"filesystem\"]\n\n  # The s3_backend block configures the connection to Amazon S3 object storage\n  # backend.\n  # The CLI flags prefix for this block configuration is: common.storage\n  [s3: <s3_storage_backend>]\n\n  # The gcs_backend block configures the connection to Google Cloud Storage\n  # object storage backend.\n  # The CLI flags prefix for this block configuration is: common.storage\n  [gcs: <gcs_storage_backend>]\n\n  # The azure_storage_backend block configures the connection to Azure object\n  # storage backend.\n  # The CLI flags prefix for this block configuration is: common.storage\n  [azure: <azure_storage_backend>]\n\n  # The swift_storage_backend block configures the connection to OpenStack\n  # Object Storage (Swift) object storage backend.\n  # The CLI flags prefix for this block configuration is: common.storage\n  [swift: <swift_storage_backend>]\n\n  # The filesystem_storage_backend block configures the usage of local file\n  # system as object storage backend.\n  # The CLI flags prefix for this block configuration is: common.storage\n  [filesystem: <filesystem_storage_backend>]\n\nclient_cluster_validation:\n  # (experimental) Optionally define the cluster validation label.\n  # CLI flag: -common.client-cluster-validation.label\n  [label: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Object Storage Configuration for Grafana Mimir\nDESCRIPTION: This YAML snippet provides an example of configuring Amazon S3 as the object storage backend for Grafana Mimir, including secret handling for access keys.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    common:\n      storage:\n        backend: s3\n        s3:\n          endpoint: s3.us-east-2.amazonaws.com\n          region: us-east\n          secret_access_key: \"${AWS_SECRET_ACCESS_KEY}\"\n          access_key_id: \"${AWS_ACCESS_KEY_ID}\"\n\n    blocks_storage:\n      s3:\n        bucket_name: mimir-blocks\n    alertmanager_storage:\n      s3:\n        bucket_name: mimir-alertmanager\n    ruler_storage:\n      s3:\n        bucket_name: mimir-ruler\n```\n\n----------------------------------------\n\nTITLE: Variable Route Paths in Gorilla Mux (Go)\nDESCRIPTION: This snippet demonstrates how to define and handle dynamic URL paths using variables and regular expressions. The examples register routes with dynamic segments and retrieve route variables via mux.Vars() inside a handler.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/products/{key}\", ProductHandler)\nr.HandleFunc(\"/articles/{category}/\", ArticlesCategoryHandler)\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc ArticlesCategoryHandler(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, \"Category: %v\\n\", vars[\"category\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocks Storage Backend in Grafana Mimir\nDESCRIPTION: Basic YAML configuration for the blocks storage component in Grafana Mimir, specifying the backend storage type to use. Supported backends include s3, gcs, azure, swift, and filesystem.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_128\n\nLANGUAGE: yaml\nCODE:\n```\n# Backend storage to use. Supported backends are: s3, gcs, azure, swift,\n# filesystem.\n# CLI flag: -blocks-storage.backend\n[backend: <string> | default = \"filesystem\"]\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Functions in Go\nDESCRIPTION: Demonstrates how to create and use custom validation functions for specific types and contexts.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\ntype CustomByteArray [6]byte // custom types are supported and can be validated\n\ntype StructWithCustomByteArray struct {\n  ID              CustomByteArray `valid:\"customByteArrayValidator,customMinLengthValidator\"` // multiple custom validators are possible as well and will be evaluated in sequence\n  Email           string          `valid:\"email\"`\n  CustomMinLength int             `valid:\"-\"`\n}\n\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // you can type switch on the context interface being validated\n  case StructWithCustomByteArray:\n    // you can check and validate against some other field in the context,\n    // return early or not validate against the context at all – your choice\n  case SomeOtherType:\n    // ...\n  default:\n    // expecting some other type? Throw/panic here or continue\n  }\n\n  switch v := i.(type) { // type switch on the struct field being validated\n  case CustomByteArray:\n    for _, e := range v { // this validator checks that the byte array is not empty, i.e. not all zeroes\n      if e != 0 {\n        return true\n      }\n    }\n  }\n  return false\n})\ngovalidator.CustomTypeTagMap.Set(\"customMinLengthValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // this validates a field against the value in another field, i.e. dependent validation\n  case StructWithCustomByteArray:\n    return len(v.ID) >= v.CustomMinLength\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Mimir Configuration Parameters\nDESCRIPTION: This YAML block defines all available configuration parameters for the Mimir Puppet module, including package management, user settings, configuration paths, logging options, and systemd overrides.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/puppet/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Mimir version under the form X.X.X or one of the supported puppet values\n# as 'present', 'latest', ...\n[package_ensure: <string> | default = \"present\"]\n\n# Boolean to specify if module should manage mimir user\n[manage_user: <boolean> | default = false]\n\n# Home directory for the managed user\n# Only if manage_user is set to true\n[user_home: <string> | default = \"/var/lib/mimir\"]\n\n# Binary to use as shell for managed user\n# Only if manage_user is set to true\n[user_shell: <string> | default = \"/sbin/nologin\"]\n\n# Additionnal groups the managed user should be connected to\n# Only if manage_user is set to true\n[user_extra_groups: <array> | default =  []]\n\n# Directory to store the mimir configuration\n[config_dir: <string> | default = \"/etc/mimir\"]\n\n# Group to use for configuration resources\n[config_group: <string> | default = \"mimir\"]\n\n# Hash containing the configuration keys to override\n[config_hash: <hash> | default = {}]\n\n# Owner to use for configuration resources\n[config_owner: <string> | default = \"mimir\"]\n\n# Additional arguments to set to the mimir process\n[custom_args: <array> | default = []]\n\n# Directory to store mimir logs if log to file is enabled\n# Only if log_to_file is set to true\n[log_dir_path: <string> | default = \"/var/log/mimir\"]\n\n# Mode of the directory used to store logs\n# Only if log_to_file is set to true\n[log_dir_mode: <string> | default = \"0700\"]\n\n# Filename to store mimir logs if log to file is enabled\n# Only if log_to_file is set to true\n[log_file_path: <string> | default = \"mimir.log\"]\n\n# Mode of the file used to store logs\n# Only if log_to_file is set to true\n[log_file_mode: <string> | default = \"0600\"]\n\n# Group to use for log resources\n# Only if log_to_file is set to true\n[log_group: <string> | default = \"root\"]\n\n# Log level to use for process mimir\n[log_level: <string> | default = \"info\"]\n\n# Owner to use for log resources\n# Only if log_to_file is set to true\n[log_owner: <string> | default = \"root\"]\n\n# Should log be kept in journald or sent to a dedicated file\n[log_to_file: <boolean> | default = false]\n\n# Command use to validate configuration\n[validate_cmd: <string> | default = \"/usr/local/bin/mimir --modules=true\"]\n\n# Command use to restart/reload process\n[restart_cmd: <string> | default = \"/bin/systemctl reload mimir\"]\n\n# Should the process be restarted on configuration changes\n[restart_on_change: <boolean> | default = false]\n\n# List of systemd parameters to override\n[systemd_overrides: <hash> | default = {'Service' => {'LimitNOFILE' => '1048576'}}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus External Labels for HA in YAML\nDESCRIPTION: This snippet shows how to set identifiers in Prometheus configuration using external labels. It sets the cluster and replica labels for a Prometheus instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-high-availability-deduplication.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  external_labels:\n    cluster: prom-team1\n    __replica__: replica1\n```\n\n----------------------------------------\n\nTITLE: Custom Helm Values for Mimir with S3 Storage Configuration\nDESCRIPTION: Custom values configuration for Helm that sets up Mimir to use S3 buckets for various storage needs including blocks storage, ruler storage, and alertmanager storage. It also references the previously created secret for authentication.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  extraEnvFrom:\n    - secretRef:\n        name: mimir-bucket-secret\n  podAnnotations:\n    bucketSecretVersion: \"0\"\n\n# This turns of the built-in MinIO support\nminio:\n  enabled: false\n\nmimir:\n  structuredConfig:\n    # Uncomment when using Grafana Enterprise Metrics\n    # admin_client:\n    #   storage:\n    #     s3:\n    #       bucket_name: my-admin-bucket\n    #       access_key_id: ${AWS_ACCESS_KEY_ID}\n    #       endpoint: s3.amazonaws.com\n    #       secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n    alertmanager_storage:\n      s3:\n        bucket_name: my-ruler-bucket\n        access_key_id: ${AWS_ACCESS_KEY_ID}\n        endpoint: s3.amazonaws.com\n        secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n    blocks_storage:\n      backend: s3\n      s3:\n        bucket_name: my-blocks-bucket\n        access_key_id: ${AWS_ACCESS_KEY_ID}\n        endpoint: s3.amazonaws.com\n        secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n    ruler_storage:\n      s3:\n        bucket_name: my-ruler-bucket\n        access_key_id: ${AWS_ACCESS_KEY_ID}\n        endpoint: s3.amazonaws.com\n        secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n```\n\n----------------------------------------\n\nTITLE: Finding and Marking Duplicate Blocks for Deletion\nDESCRIPTION: Series of commands to identify and mark duplicate blocks from replica Prometheus instances for deletion. This ensures only one set of blocks from one replica is kept to avoid data duplication in Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Get list of all blocks in the bucket\nthanos tools bucket inspect \\\n    --objstore.config-file bucket.yaml \\\n    --output=tsv > blocks.tsv\n\n# Find blocks from replica that we will drop\ncat blocks.tsv| grep prometheus_replica=<PROMETHEUS-REPLICA-TO-DROP> \\\n    | awk '{print $1}' > blocks_to_drop.tsv\n\n# Mark found blocks for deletion\nfor ID in $(cat blocks_to_drop.tsv)\ndo\n    thanos tools bucket mark \\\n       --marker=\"deletion-mark.json\" \\\n       --objstore.config-file bucket.yaml \\\n       --details=\"Removed as duplicate\" \\\n       --id $ID\ndone\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Groups Configuration in YAML\nDESCRIPTION: YAML structure for defining rule groups in Mimir. It includes namespace organization, group names, intervals, source tenants, and individual rules (both recording and alerting).\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n---\n<namespace1>:\n- name: <string>\n  interval: <duration;optional>\n  source_tenants:\n    - <string>\n  rules:\n  - record: <string>\n      expr: <string>\n  - alert: <string>\n      expr: <string>\n      for: <duration>\n      annotations:\n        <annotation_name>: <string>\n      labels:\n        <label_name>: <string>\n- name: <string>\n  interval: <duration;optional>\n  source_tenants:\n    - <string>\n  rules:\n  - record: <string>\n      expr: <string>\n  - alert: <string>\n      expr: <string>\n      for: <duration>\n      annotations:\n        <annotation_name>: <string>\n      labels:\n        <label_name>: <string>\n<namespace2>:\n- name: <string>\n  interval: <duration;optional>\n  source_tenants:\n    - <string>\n  rules:\n  - record: <string>\n      expr: <string>\n  - alert: <string>\n      expr: <string>\n      for: <duration>\n      annotations:\n        <annotation_name>: <string>\n      labels:\n        <label_name>: <string>\n```\n\n----------------------------------------\n\nTITLE: Starting Mimir with Docker Compose\nDESCRIPTION: Basic command to build Mimir from source and run it using docker-compose.\nSOURCE: https://github.com/grafana/mimir/blob/main/development/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./compose-up.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Limits in YAML\nDESCRIPTION: Instance-level limitations for ingestion rate, tenant capacity, series limits, and push request handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ninstance_limits:\n  max_ingestion_rate: <float> | default = 0\n  max_tenants: <int> | default = 0\n  max_series: <int> | default = 0\n  max_inflight_push_requests: <int> | default = 30000\n  max_inflight_push_requests_bytes: <int> | default = 0\n```\n\n----------------------------------------\n\nTITLE: Defining Example Rule Group in YAML\nDESCRIPTION: Example YAML configuration for creating or updating a rule group in Mimir. It demonstrates the structure for defining an alert rule with a simple expression and label.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nname: MyGroupName\nrules:\n  - alert: MyAlertName\n    expr: up == 0\n    labels:\n      severity: warning\n```\n\n----------------------------------------\n\nTITLE: Executing Shardable PromQL Query with Sum and Rate\nDESCRIPTION: Example of how a fully shardable PromQL query using sum and rate functions is executed with query sharding enabled and a shard count of 3.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/query-sharding/index.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(metric[1m]))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(\n  concat(\n    sum(rate(metric{__query_shard__=\"1_of_3\"}[1m]))\n    sum(rate(metric{__query_shard__=\"2_of_3\"}[1m]))\n    sum(rate(metric{__query_shard__=\"3_of_3\"}[1m]))\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Alloy with Docker and Custom Configuration\nDESCRIPTION: Bash command to start a Grafana Alloy container with Docker, mounting a custom configuration file that includes remote write to Grafana Mimir and exposing the HTTP server on port 12345.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v <absolute-path-to>/config.alloy:/etc/alloy/config.alloy -p 12345:12345 grafana/alloy:latest run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy\n```\n\n----------------------------------------\n\nTITLE: Configuring Query-Scheduler for Ring-Based Discovery in Jsonnet\nDESCRIPTION: This snippet configures query-scheduler instances to join a ring while keeping querier and query-frontend instances discovering query-schedulers via DNS. It sets the service discovery mode to 'ring' and disables the ring read path.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-query-scheduler-from-dns-to-ring-based-service-discovery.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    query_scheduler_service_discovery_mode: 'ring',\n    query_scheduler_service_discovery_ring_read_path_enabled: false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Logrus Configuration in Go\nDESCRIPTION: Shows how to customize Logrus by setting a JSON formatter, directing output to stdout, and setting the log level. It also demonstrates logging with different severity levels and reusing fields.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  log.SetFormatter(&log.JSONFormatter{})\n  log.SetOutput(os.Stdout)\n  log.SetLevel(log.WarnLevel)\n}\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Query Advanced Settings - YAML\nDESCRIPTION: Advanced query configuration including experimental features, query alignment, and PromQL compatibility options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_120\n\nLANGUAGE: yaml\nCODE:\n```\nblocked_queries: <blocked_queries_config...> | default = \nblocked_requests: <blocked_requests_config...> | default = \nalign_queries_with_step: <boolean> | default = false\nenabled_promql_experimental_functions: <string> | default = \"\"\nprom2_range_compat: <boolean> | default = false\nsubquery_spin_off_enabled: <boolean> | default = false\ncardinality_analysis_enabled: <boolean> | default = false\n```\n\n----------------------------------------\n\nTITLE: Converting Configuration with mimirtool Bash\nDESCRIPTION: This command converts a Cortex YAML configuration file and CLI flags to a Grafana Mimir-compatible format. It uses input and output files for both YAML and flags, and supports verbose output to indicate changes in configuration parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool config convert --yaml-file=cortex.yaml --flags-file=cortex.flags --yaml-out=mimir.yaml --flags-out=mimir.flags\n```\n\n----------------------------------------\n\nTITLE: Ruler Storage Configuration in YAML\nDESCRIPTION: Configuration block for ruler storage backend settings including S3, GCS, Azure, Swift and filesystem options. Includes storage prefix and caching configuration options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_74\n\nLANGUAGE: yaml\nCODE:\n```\n# Backend storage to use. Supported backends are: s3, gcs, azure, swift,\n# filesystem, local.\n# CLI flag: -ruler-storage.backend\n[backend: <string> | default = \"filesystem\"]\n\n# The s3_backend block configures the connection to Amazon S3 object storage\n# backend.\n# The CLI flags prefix for this block configuration is: ruler-storage\n[s3: <s3_storage_backend>]\n\n# The gcs_backend block configures the connection to Google Cloud Storage object\n# storage backend.\n# The CLI flags prefix for this block configuration is: ruler-storage\n[gcs: <gcs_storage_backend>]\n\n# The azure_storage_backend block configures the connection to Azure object\n# storage backend.\n# The CLI flags prefix for this block configuration is: ruler-storage\n[azure: <azure_storage_backend>]\n\n# The swift_storage_backend block configures the connection to OpenStack Object\n# Storage (Swift) object storage backend.\n# The CLI flags prefix for this block configuration is: ruler-storage\n[swift: <swift_storage_backend>]\n\n# The filesystem_storage_backend block configures the usage of local file system\n# as object storage backend.\n# The CLI flags prefix for this block configuration is: ruler-storage\n[filesystem: <filesystem_storage_backend>]\n\n# Prefix for all objects stored in the backend storage. For simplicity, it may\n# only contain digits and English alphabet letters.\n# CLI flag: -ruler-storage.storage-prefix\n[storage_prefix: <string> | default = \"\"]\n\nlocal:\n  # Directory to scan for rules\n  # CLI flag: -ruler-storage.local.directory\n  [directory: <string> | default = \"\"]\n\ncache:\n  # Backend for ruler storage cache, if not empty. The cache is supported for\n  # any storage backend except \"local\". Supported values: memcached, redis.\n  # CLI flag: -ruler-storage.cache.backend\n  [backend: <string> | default = \"\"]\n\n  # The memcached block configures the Memcached-based caching backend.\n  # The CLI flags prefix for this block configuration is: ruler-storage.cache\n  [memcached: <memcached>]\n\n  # The redis block configures the Redis-based caching backend.\n  # The CLI flags prefix for this block configuration is: ruler-storage.cache\n  [redis: <redis>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-domain/Sub-domain Routing with HttpRouter in Go\nDESCRIPTION: This example shows how to create a host switch that routes requests to different handlers based on the host name. It defines a custom type that implements the http.Handler interface, allowing the server to handle multiple domains or sub-domains.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// We need an object that implements the http.Handler interface.\n// Therefore we need a type for which we implement the ServeHTTP method.\n// We just use a map here, in which we map host names (with port) to http.Handlers\ntype HostSwitch map[string]http.Handler\n\n// Implement the ServeHTTP method on our new type\nfunc (hs HostSwitch) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Check if a http.Handler is registered for the given host.\n\t// If yes, use it to handle the request.\n\tif handler := hs[r.Host]; handler != nil {\n\t\thandler.ServeHTTP(w, r)\n\t} else {\n\t\t// Handle host names for which no handler is registered\n\t\thttp.Error(w, \"Forbidden\", 403) // Or Redirect?\n\t}\n}\n\nfunc main() {\n\t// Initialize a router as usual\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/hello/:name\", Hello)\n\n\t// Make a new HostSwitch and insert the router (our http handler)\n\t// for example.com and port 12345\n\ths := make(HostSwitch)\n\ths[\"example.com:12345\"] = router\n\n\t// Use the HostSwitch to listen and serve on port 12345\n\tlog.Fatal(http.ListenAndServe(\":12345\", hs))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Span from Context in Go OpenTracing\nDESCRIPTION: Demonstrates how to create a new span from an existing context.Context. This approach leverages Go's context package for span propagation, creating a child span and returning both the span and an updated context.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc xyz(ctx context.Context, ...) {\n    ...\n    span, ctx := opentracing.StartSpanFromContext(ctx, \"operation_name\")\n    defer span.Finish()\n    span.LogFields(\n        log.String(\"event\", \"soft error\"),\n        log.String(\"type\", \"cache timeout\"),\n        log.Int(\"waited.millis\", 1500))\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TSDB Block Upload in Grafana Mimir Configuration\nDESCRIPTION: YAML configuration to enable TSDB block upload functionality in Grafana Mimir using the limits configuration parameter.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-tsdb-block-upload.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  # Enable TSDB block upload\n  compactor_block_upload_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Formatting PromQL Queries in Grafana Mimir\nDESCRIPTION: These endpoints format the provided PromQL query. They are compatible with the Prometheus format query endpoint.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET <prometheus-http-prefix>/api/v1/format_query?query={query}\nPOST <prometheus-http-prefix>/api/v1/format_query\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruler Options in YAML\nDESCRIPTION: YAML configuration block for Mimir ruler settings. Includes options for rule evaluation, Alertmanager integration, and notification handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\n# URL of alerts return path.\n# CLI flag: -ruler.external.url\n[external_url: <url> | default = ]\n\n# Configures the gRPC client used to communicate between ruler instances.\n# The CLI flags prefix for this block configuration is: ruler.client\n[ruler_client: <grpc_client>]\n\n# (advanced) How frequently to evaluate rules\n# CLI flag: -ruler.evaluation-interval\n[evaluation_interval: <duration> | default = 1m]\n\n# (advanced) How frequently the configured rule groups are re-synced from the\n# object storage.\n# CLI flag: -ruler.poll-interval\n[poll_interval: <duration> | default = 10m]\n\n# Directory to store temporary rule files loaded by the Prometheus rule\n# managers. This directory is not required to be persisted between restarts.\n# CLI flag: -ruler.rule-path\n[rule_path: <string> | default = \"./data-ruler/\"]\n\n# Comma-separated list of URL(s) of the Alertmanager(s) to send notifications\n# to. Each URL is treated as a separate group. Multiple Alertmanagers in HA per\n# group can be supported by using DNS service discovery format, comprehensive of\n# the scheme. Basic auth is supported as part of the URL.\n# CLI flag: -ruler.alertmanager-url\n[alertmanager_url: <string> | default = \"\"]\n\n# (advanced) How long to wait between refreshing DNS resolutions of Alertmanager\n# hosts.\n# CLI flag: -ruler.alertmanager-refresh-interval\n[alertmanager_refresh_interval: <duration> | default = 1m]\n\n# (advanced) Capacity of the queue for notifications to be sent to the\n# Alertmanager.\n# CLI flag: -ruler.notification-queue-capacity\n[notification_queue_capacity: <int> | default = 10000]\n\n# (advanced) HTTP timeout duration when sending notifications to the\n# Alertmanager.\n```\n\n----------------------------------------\n\nTITLE: Managed identity authentication with azidentity in Go\nDESCRIPTION: This snippet shows managed identity authentication using azidentity, including creating a ManagedIdentityCredential and configuring a client.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewManagedIdentityCredential(nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Preparing Rule Files for Grafana Mimir\nDESCRIPTION: This command prepares rule files for upload to Grafana Mimir by linting PromQL expressions and adding labels to query aggregations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules prepare <file_path>...\n```\n\n----------------------------------------\n\nTITLE: Analyzing Grafana Instance for Metric Usage\nDESCRIPTION: This snippet demonstrates how to use the mimirtool analyze grafana command to extract Prometheus metrics used in queries from a Grafana instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool analyze grafana --address=<url>\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Metamonitoring Credentials\nDESCRIPTION: This YAML snippet demonstrates how to create a Kubernetes Secret to store API keys for authenticating with Prometheus and Loki. It includes example keys for both services.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/monitor-system-health.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: metamonitoring-credentials\ndata:\n  prometheus-api-key: FAKEACCESSKEY\n  loki-api-key: FAKESECRETKEY\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Mimir on Linux AMD64\nDESCRIPTION: Commands to download and make executable the Grafana Mimir binary for Linux AMD64 architecture.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fLo mimir https://github.com/grafana/mimir/releases/latest/download/mimir-linux-amd64\nchmod +x mimir\n```\n\n----------------------------------------\n\nTITLE: Setting X-Scope-OrgID Header for Prometheus Remote Write in YAML\nDESCRIPTION: This configuration snippet shows how to directly set the X-Scope-OrgID header for Prometheus remote write when not using an authenticating reverse proxy. It specifies the tenant ID in the headers section.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/secure/authentication-and-authorization.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  \"X-Scope-OrgID\": <TENANT ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus Formatters Based on Environment in Go\nDESCRIPTION: This snippet demonstrates how to configure Logrus formatters based on the application environment. It sets up JSON formatting for production and text formatting for other environments.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Remote Write to Grafana Mimir\nDESCRIPTION: YAML configuration for setting up remote write in Prometheus to send metrics to an externally accessible Grafana Mimir instance. This is added to an existing Prometheus configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: http://<ingress-host>/api/v1/push\n```\n\n----------------------------------------\n\nTITLE: Extracting CLI Flags from JSON using Bash\nDESCRIPTION: This Bash script extracts CLI flags from specified Kubernetes component JSON files using jq for parsing. The first parameter is a JSON file with resources and the second is the name of the component to extract flags for. The script checks for jq availability and outputs the extracted flags in a format usable for further processing.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nset -euf -o pipefail\n\nfunction usage {\n  cat <<EOF\n Extract the CLI flags from individual components.\n\n Usage:\n   $0 <resources JSON> <component>\n\n Examples:\n   $0 resources.json ingester\n   $0 <(tk eval environments/default) distributor\n   $0 <(jsonnet environments/default/main.jsonnet) query-frontend\n EOF\n}\n\nif ! command -v jq &>/dev/null; then\n  echo \"jq command not found in PATH\"\n  echo \"To download jq, refer to https://stedolan.github.io/jq/download/.\"\nfi\n\nif [[ $# -ne 2 ]]; then\n  usage\n  exit 1\nfi\n\njq -rf /dev/stdin -- \"$1\" <<EOF\n..\n| if type == \"object\" and .metadata.name == \"$2\" then .spec.template.spec.containers[]?.args[] else null end\n| select(. != null)\nEOF\n```\n\n----------------------------------------\n\nTITLE: Fix: Update protobuf dep to v1.33.0\nDESCRIPTION: This commit updates the protobuf dependency to v1.33.0 in the `auth` package. This update ensures compatibility with the latest protobuf features and resolves any potential issues arising from older versions of the protobuf library.  The commit hash is 30b038d8cac0b8cd5dd4761c87f3f298760dd33a.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n30b038d8cac0b8cd5dd4761c87f3f298760dd33a\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with Automatic Retries - Go\nDESCRIPTION: This code snippet demonstrates how to perform a simple GET request using the retryablehttp package. In the case of an error, the request will automatically retry with exponential backoff.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nresp, err := retryablehttp.Get(\"/foo\")\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Processing Example in Go\nDESCRIPTION: Demonstrates marshaling and unmarshaling YAML data in Go using both struct and map types. Shows how to handle nested structures, arrays, and custom tags for field renaming and formatting.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Complete Prometheus Configuration with Remote Write to Mimir\nDESCRIPTION: A complete Prometheus configuration file that includes remote write to Grafana Mimir and a basic scrape configuration to collect metrics from Prometheus itself.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: http://<ingress-host>/api/v1/push\n\nscrape_configs:\n  - job_name: prometheus\n    honor_labels: true\n    static_configs:\n      - targets: [\"localhost:9090\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Ingress in Helm Values for Grafana Mimir\nDESCRIPTION: YAML configuration to enable ingress in the Helm chart for Grafana Mimir. This sets up the ingress with the nginx class and configures a host with path settings to make Mimir externally accessible.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnginx:\n  ingress:\n    enabled: true\n    ingressClassName: nginx\n    hosts:\n      - host: <ingress-host>\n        paths:\n          - path: /\n            pathType: Prefix\n    tls:\n      # empty, disabled.\n```\n\n----------------------------------------\n\nTITLE: Implementing CacheOnReadFs for Layered File System Caching in Go\nDESCRIPTION: Creates a composite file system where files are cached in an overlay layer after being read from the base layer. This example sets up caching with a 100-second duration, balancing between base (OS) and overlay (memory) file systems.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nlayer := afero.NewMemMapFs()\nufs := afero.NewCacheOnReadFs(base, layer, 100 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: View Store-gateway Tenant Blocks\nDESCRIPTION: Returns a web page detailing the blocks associated with a given tenant using a GET request with the tenant's ID. This endpoint aids in understanding block distributions per tenant.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_52\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /store-gateway/tenant/{tenant}/blocks\n```\n\n----------------------------------------\n\nTITLE: Listing Rule Groups in Grafana Mimir\nDESCRIPTION: This command retrieves and prints the names of all rule groups in the Grafana Mimir instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote-Read Stats for Grafana Mimir\nDESCRIPTION: This snippet demonstrates how to use the mimirtool remote-read stats command to get statistics of stored series matching a specific selector from a Grafana Mimir cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool remote-read stats --selector '{job=\"node\"}' --address http://demo.robustperception.io:9090 --remote-read-path /api/v1/read\n```\n\nLANGUAGE: console\nCODE:\n```\nINFO[0000] Create remote read client using endpoint 'http://demo.robustperception.io:9090/api/v1/read'\nINFO[0000] Querying time from=2020-12-30T14:00:00Z to=2020-12-30T15:00:00Z with selector={job=\"node\"}\nINFO[0000] MIN TIME                           MAX TIME                           DURATION     NUM SAMPLES  NUM SERIES   NUM STALE NAN VALUES  NUM NAN VALUES\nINFO[0000] 2020-12-30 14:00:00.629 +0000 UTC  2020-12-30 14:59:59.629 +0000 UTC  59m59s       159480       425          0                     0\n```\n\n----------------------------------------\n\nTITLE: Detecting Language from Filename in Go\nDESCRIPTION: This Go snippet demonstrates detecting a language from a given filename using the Chroma library. It uses the `lexers.Match()` function which matches the file extension to identify the appropriate lexer. It's crucial that the file path is correctly passed to perform the detection.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlexer := lexers.Match(\"foo.go\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Tracer with a Specific Implementation in Go\nDESCRIPTION: Shows how to set up a global tracer using the singleton pattern. This is the simplest starting point for adding OpenTracing to an application, setting the global tracer implementation as early as possible in the application lifecycle.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/opentracing/opentracing-go\"\nimport \".../some_tracing_impl\"\n\nfunc main() {\n    opentracing.SetGlobalTracer(\n        // tracing impl specific:\n        some_tracing_impl.New(...),\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for S3 Credentials in YAML\nDESCRIPTION: A Kubernetes Secret manifest that stores AWS credentials for S3 access. It includes AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY fields which should be base64 encoded.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mimir-bucket-secret\ndata:\n  AWS_ACCESS_KEY_ID: FAKEACCESSKEY\n  AWS_SECRET_ACCESS_KEY: FAKESECRETKEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Replication and Tenant Management in Grafana Mimir\nDESCRIPTION: YAML configuration for Grafana Mimir's experimental dynamic replication feature and tenant management settings. This includes parameters for controlling block replication factors and tenant access control.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_142\n\nLANGUAGE: yaml\nCODE:\n```\n# Experimental dynamic replication configuration.\ndynamic_replication:\n  # (experimental) Use a higher number of replicas for recent blocks. Useful to\n  # spread query load more evenly at the cost of slightly higher disk usage.\n  # CLI flag: -store-gateway.dynamic-replication.enabled\n  [enabled: <boolean> | default = false]\n\n  # (experimental) Threshold of the most recent sample in a block used to\n  # determine it is eligible for higher than default replication. If a block has\n  # samples within this amount of time, it is considered recent and will be\n  # owned by more replicas.\n  # CLI flag: -store-gateway.dynamic-replication.max-time-threshold\n  [max_time_threshold: <duration> | default = 25h]\n\n  # (experimental) Multiple of the default replication factor that should be\n  # used for recent blocks. Minimum value is 2\n  # CLI flag: -store-gateway.dynamic-replication.multiple\n  [multiple: <int> | default = 2]\n\n# (advanced) Comma separated list of tenants that can be loaded by the\n# store-gateway. If specified, only blocks for these tenants will be loaded by\n# the store-gateway, otherwise all tenants can be loaded. Subject to sharding.\n# CLI flag: -store-gateway.enabled-tenants\n[enabled_tenants: <string> | default = \"\"]\n\n# (advanced) Comma separated list of tenants that cannot be loaded by the\n# store-gateway. If specified, and the store-gateway would normally load a given\n# tenant for (via -store-gateway.enabled-tenants or sharding), it will be\n# ignored instead.\n# CLI flag: -store-gateway.disabled-tenants\n[disabled_tenants: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard HTTP Client with Retries - Go\nDESCRIPTION: This snippet illustrates how to create a standard http.Client with retry capabilities by configuring a retryablehttp.Client and converting it. This allows for seamless integration with existing applications that expect a standard http.Client.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nretryClient := retryablehttp.NewClient()\nretryClient.RetryMax = 10\n\nstandardClient := retryClient.StandardClient() // *http.Client\n```\n\n----------------------------------------\n\nTITLE: Prometheus Remote Write Exporter Configuration\nDESCRIPTION: Basic configuration for the Prometheus remote write exporter to send metrics to Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-otel-collector.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  prometheusremotewrite:\n    endpoint: http://<mimir-endpoint>/api/v1/push\n```\n\n----------------------------------------\n\nTITLE: Setting Final Deployment Mode - Jsonnet Configuration\nDESCRIPTION: Jsonnet configuration to set the final deployment mode to read-write, removing microservice Kubernetes objects.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_11\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    deployment_mode: 'read-write',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Grafana Mimir Rules with Cluster Rules\nDESCRIPTION: This snippet demonstrates how to use the mimirtool rules diff command to compare local rules against the rules in a Grafana Mimir cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules diff <file_path>...\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client gRPC Compression\nDESCRIPTION: This option enables compression for gRPC messages sent by the Alertmanager client, which can reduce network bandwidth usage. Supported compression algorithms include gzip, snappy, and s2, with the default being no compression.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_80\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Use compression when sending messages. Supported values are:\n  # 'gzip', 'snappy', 's2' and '' (disable compression)\n  # CLI flag: -alertmanager.alertmanager-client.grpc-compression\n  [grpc_compression: <string> | default = \"\"]\n\n```\n\n----------------------------------------\n\nTITLE: Estimating Firing Alert Notifications in Alertmanager\nDESCRIPTION: This PromQL query estimates the peak of firing alert notifications per second in the last 24 hours across all Prometheus servers. It's used to plan resources for the Alertmanager component.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/run-production-environment/planning-capacity.md#2025-04-17_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nsum(max_over_time(rate(alertmanager_alerts_received_total[5m])[24h:5m]))\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Minimum Version in Grafana Mimir\nDESCRIPTION: Sets the minimum TLS version supported by the server. This is a top-level configuration parameter that applies to all TLS connections.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# CLI flag: -server.tls-min-version\n[tls_min_version: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Initial Connection Window Size\nDESCRIPTION: This experimental option configures the initial connection window size for gRPC connections, impacting network throughput and performance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_88\n\nLANGUAGE: yaml\nCODE:\n```\n  # (experimental) Initial connection window size. Values less than the default\n  # are not supported and are ignored. Setting this to a value other than the\n  # default disables the BDP estimator.\n  # CLI flag: -alertmanager.alertmanager-client.initial-connection-window-size\n  [initial_connection_window_size: <int> | default = 63KiB1023B]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Server Settings\nDESCRIPTION: Essential configuration parameters for Mimir server deployment including HTTP port, storage backends for blocks, ruler and alertmanager, and various directory paths for data storage and rules.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/common-flags-new.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-server.http-listen-port=80\n-blocks-storage.backend=s3\n-ruler-storage.backend=s3\n-alertmanager-storage.backend=s3\n-activity-tracker.filepath=./active-query-tracker\n-alertmanager.storage.path=data/\n-blocks-storage.filesystem.dir=\n-compactor.data-dir=./data\n-ruler.rule-path=/rules\n-ruler-storage.filesystem.dir=\n```\n\n----------------------------------------\n\nTITLE: Using goleak.VerifyTestMain for Package-Level Leak Detection\nDESCRIPTION: Example of using goleak's VerifyTestMain method in a TestMain function to verify no goroutine leaks after all tests in a package have completed. This approach is more efficient than checking after each individual test.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/goleak/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMain(m *testing.M) {\n\tgoleak.VerifyTestMain(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Dry Run for Relabeling Blocks with External Labels\nDESCRIPTION: Commands to perform a dry run of relabeling blocks with external labels. This tests the relabeling process without making permanent changes to verify the configuration works as expected.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Get list of all blocks in the bucket after removing the depuplicate and downsampled blocks.\nthanos tools bucket inspect \\\n    --objstore.config-file bucket.yaml \\\n    --output=tsv > blocks-to-rewrite.tsv\n\n# Check if rewrite of the blocks with external labels is working as expected.\nfor ID in $(cat blocks-to-rewrite.tsv)\ndo\n    thanos tools bucket rewrite \\\n        --objstore.config-file bucket.yaml \\\n        --rewrite.to-relabel-config-file relabel-config.yaml \\\n        --dry-run \\\n        --id $ID\ndone\n```\n\n----------------------------------------\n\nTITLE: Uploading a Blob to Azure Storage\nDESCRIPTION: Complete example of uploading a local file to Azure Blob Storage, including client creation and file handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n\tblobName      = \"sample-blob\"\n\tsampleFile    = \"path/to/sample/file\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\n// open the file for reading\nfile, err := os.OpenFile(sampleFile, os.O_RDONLY, 0)\n// TODO: handle error\ndefer file.Close()\n\n// upload the file to the specified container with the specified blob name\n_, err = client.UploadFile(context.TODO(), containerName, blobName, file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Analyzing Grafana Metrics with Mimir\nDESCRIPTION: This command analyzes Grafana dashboards to extract used metrics. It requires Grafana address and API key, and outputs a JSON file with metrics and dashboard information.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metricsUsed\": [\n    \"apiserver_request:availability30d\",\n    \"workqueue_depth\",\n    \"workqueue_queue_duration_seconds_bucket\"\n  ],\n  \"dashboards\": [\n    {\n      \"slug\": \"\",\n      \"uid\": \"09ec8aa1e996d6ffcd6817bbaff4db1b\",\n      \"title\": \"Kubernetes / API server\",\n      \"metrics\": [\n        \"apiserver_request:availability30d\",\n        \"apiserver_request_total\",\n        \"cluster_quantile:apiserver_request_duration_seconds:histogram_quantile\",\n        \"workqueue_depth\",\n        \"workqueue_queue_duration_seconds_bucket\"\n      ],\n      \"parse_errors\": [\"unsupported panel type: \\\"news\\\"\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Authenticating a Swift Connection in Go\nDESCRIPTION: This snippet demonstrates how to create a connection to a Swift server, authenticate, and list all containers. It shows the basic setup required including username, API key, authentication URL, domain, and tenant configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/ncw/swift/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/ncw/swift\"\n\n// Create a connection\nc := swift.Connection{\n    UserName: \"user\",\n    ApiKey:   \"key\",\n    AuthUrl:  \"auth_url\",\n    Domain:   \"domain\",  // Name of the domain (v3 auth only)\n    Tenant:   \"tenant\",  // Name of the tenant (v2 auth only)\n}\n// Authenticate\nerr := c.Authenticate()\nif err != nil {\n    panic(err)\n}\n// List all the containers\ncontainers, err := c.ContainerNames(nil)\nfmt.Println(containers)\n// etc...\n```\n\n----------------------------------------\n\nTITLE: List Alertmanager Configurations\nDESCRIPTION: This GET endpoint lists all Alertmanager configurations and returns a YAML dictionary of configurations when accessed. It is consistently available regardless of the Alertmanager API's status, designed to be internal, and yields a 200 status code on success.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_42\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /multitenant_alertmanager/configs\n```\n\n----------------------------------------\n\nTITLE: Initializing Kotel Tracer and Kafka Client with OpenTelemetry in Go\nDESCRIPTION: This snippet demonstrates how to set up a Kotel tracer with OpenTelemetry, create a Kotel service, and initialize a Kafka client with the Kotel hook. It includes steps for configuring the tracer provider, tracer options, and Kafka client options.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/twmb/franz-go/plugin/kotel/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Initialize tracer provider.\ntracerProvider, err := initTracerProvider()\n\n// Create a new kotel tracer.\ntracerOpts := []kotel.TracerOpt{\n\tkotel.TracerProvider(tracerProvider),\n\tkotel.TracerPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{})),\n}\ntracer := kotel.NewTracer(tracerOpts...)\n\n// Create a new kotel service.\nkotelOps := []kotel.Opt{\n\tkotel.WithTracer(tracer),\n}\nkotelService := kotel.NewKotel(kotelOps...)\n\n// Create a new Kafka client.\ncl, err := kgo.NewClient(\n\t// Pass in the kotel hook.\n\tkgo.WithHooks(kotelService.Hooks()...),\n\t// ...other opts.\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Relabel Configuration for External Labels\nDESCRIPTION: Example of a relabel configuration file used to add necessary external labels to blocks. This YAML configuration specifies label keys and values to be added to each block during the rewrite process.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# relabel-config.yaml\n- action: replace\n  target_label: \"<LABEL-KEY>\"\n  replacement: \"<LABEL-VALUE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Mimir Compactor\nDESCRIPTION: This YAML configuration block defines settings for the Grafana Mimir compactor component. It includes options for block ranges, concurrency, cleanup intervals, and deletion delays. It also configures tenant-specific behaviors and performance-related settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_140\n\nLANGUAGE: yaml\nCODE:\n```\nblock_ranges: <list of durations> | default = 2h0m0s,12h0m0s,24h0m0s\nblock_sync_concurrency: <int> | default = 8\nmeta_sync_concurrency: <int> | default = 20\ndata_dir: <string> | default = \"./data-compactor/\"\ncompaction_interval: <duration> | default = 1h\ncompaction_retries: <int> | default = 3\ncompaction_concurrency: <int> | default = 1\nfirst_level_compaction_wait_period: <duration> | default = 25m\ncleanup_interval: <duration> | default = 15m\ncleanup_concurrency: <int> | default = 20\ndeletion_delay: <duration> | default = 12h\ntenant_cleanup_delay: <duration> | default = 6h\nmax_compaction_time: <duration> | default = 1h\nno_blocks_file_cleanup_enabled: <boolean> | default = false\nmax_opening_blocks_concurrency: <int> | default = 1\nmax_closing_blocks_concurrency: <int> | default = 1\nsymbols_flushers_concurrency: <int> | default = 1\nmax_block_upload_validation_concurrency: <int> | default = 1\nenabled_tenants: <string> | default = \"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Tanka and jsonnet-bundler\nDESCRIPTION: Commands to install Tanka (tk) and jsonnet-bundler (jb) using Go. These tools are required for generating Kubernetes manifests from Jsonnet files.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/deploy.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# make sure to be outside of GOPATH or a go.mod project\ngo install github.com/grafana/tanka/cmd/tk@latest\ngo install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Complete Block Upload Endpoint\nDESCRIPTION: API endpoint to complete a TSDB block upload. Returns various status codes based on conditions like existing blocks (409), missing meta files (404), or validation limits (429).\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_57\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v1/upload/block/{block}/finish\n```\n\n----------------------------------------\n\nTITLE: Authenticating with DefaultAzureCredential in Go\nDESCRIPTION: Example demonstrating how to authenticate a client from the armresources module using DefaultAzureCredential, which simplifies authentication during development.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Bash/ZSH Shell Completion with Kingpin\nDESCRIPTION: This snippet explains how to enable shell completion for command-line applications using Kingpin, covering both Bash and ZSH setups, and providing instructions for users to facilitate command-line autofill capabilities.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nBy default, all flags and commands/subcommands generate completions internally.\n\nOut of the box, CLI tools using kingpin should be able to take advantage of completion hinting for flags and commands. By specifying `--completion-bash` as the first argument, your CLI tool will show possible subcommands. By ending your argv with `--`, hints for flags will be shown.\n```\n\n----------------------------------------\n\nTITLE: Preventing Goroutine Leaks in Tests\nDESCRIPTION: This Go code snippet presents a solution for avoiding goroutine leaks when using Regexp2 with MatchTimeout in conjunction with Go testing libraries. It shows how to properly defer a method that stops the timeout clock to ensure no goroutines are left running after tests. A prerequisite is knowledge of Go testing and the goleak library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TestSomething(t *testing.T) {\n    defer goleak.VerifyNone(t)\n    defer regexp2.StopTimeoutClock()\n\n    // ... test\n}\n\n//or\n\nfunc TestMain(m *testing.M) {\n    // setup\n    // ...\n\n    // run \n    m.Run()\n\n    //tear down\n    regexp2.StopTimeoutClock()\n    goleak.VerifyNone(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GEM Access Tokens\nDESCRIPTION: Creates a Kubernetes Secret named 'gem-tokens' containing access tokens for remote GEM clusters. These tokens are used for authentication when querying the clusters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-gem-federation-frontend.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: gem-tokens\ndata:\n  CLUSTER_1_GEM_TOKEN: TOKEN1\n  CLUSTER_2_GEM_TOKEN: TOKEN2\n```\n\n----------------------------------------\n\nTITLE: Benchmarking xxhash in Go\nDESCRIPTION: Provides commands for benchmarking the xxhash package using go test with and without the 'purego' build tag, enabling performance comparison on different data inputs. Important for measuring hashing speed on different system architectures under Go 1.19.2.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Syncing Grafana Mimir Rules with Cluster\nDESCRIPTION: This snippet shows how to use the mimirtool rules sync command to compare and apply rule differences to a Grafana Mimir cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules sync <file_path>...\n```\n\n----------------------------------------\n\nTITLE: Profiling Individual Spans in Go\nDESCRIPTION: Shows how to explicitly profile individual spans using the Span Profiler. This method is particularly useful for spans that are created in different goroutines, ensuring that profiling is enabled for specified operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/dskit/spanprofiler/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc YourOperationName(ctx context.Background()) {\n    // Start a span and enable profiling for it\n    span, ctx := spanprofiler.StartSpanFromContext(ctx, \"YourOperationName\", tracer)\n    defer span.Finish() // Finish the span when done\n\n    // Use the span in your application logic\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Mimir Mixin with Terraform\nDESCRIPTION: Terraform configuration to deploy Grafana Mimir mixin, including provider setup, data sources for alerts, rules, and dashboards, and resources for deployment.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# Specify which providers to use\nterraform {\n  required_version = \">= 1.3.5\"\n  required_providers {\n    mixtool = {\n      source  = \"ovh/mixtool\"\n      version = \"~> 0.1.1\"\n    }\n    mimirtool = {\n      source  = \"ovh/mimirtool\"\n      version = \"~> 0.1.1\"\n    }\n    grafana = {\n      source  = \"grafana/grafana\"\n      version = \"~> 1.32.0\"\n    }\n  }\n}\n\n# Configure providers if needed\nprovider \"grafana\" {\n  url  = \"http://localhost:9000\"\n  auth = \"admin:admin\"\n}\n\nprovider \"mimirtool\" {\n  address   = \"http://localhost:9009\"\n  tenant_id = \"anonymous\"\n}\n\nlocals {\n  mixin_source   = \"custom.libsonnet\"\n  jsonnet_path   = \"vendor\"\n}\n\n# Build alerts\ndata \"mixtool_alerts\" \"mimir\" {\n  source       = local.mixin_source\n  jsonnet_path = [local.jsonnet_path]\n}\n\n# Build rules\ndata \"mixtool_rules\" \"mimir\" {\n  source       = local.mixin_source\n  jsonnet_path = [local.jsonnet_path]\n}\n\n# Build dashboards\ndata \"mixtool_dashboards\" \"mimir\" {\n  source       = local.mixin_source\n  jsonnet_path = [local.jsonnet_path]\n}\n\n# Deploy rules\nresource \"mimirtool_ruler_namespace\" \"rules\" {\n  namespace   = \"rules_community\"\n  config_yaml = data.mixtool_rules.mimir.rules\n}\n\n# Deploy alerts\nresource \"mimirtool_ruler_namespace\" \"alerts\" {\n  namespace   = \"alerts_community\"\n  config_yaml = data.mixtool_alerts.mimir.alerts\n}\n\n# Deploy dashboards\nresource \"grafana_dashboard\" \"mimir\" {\n  for_each    = data.mixtool_dashboards.mimir.dashboards\n  config_json = each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Duplicate Name Handling (Go)\nDESCRIPTION: This example describes how duplicate names in JSON objects are handled during marshaling and unmarshaling. v1 did not error on duplicate names, while v2 does. This snippet is linked to the `TestDuplicateNames` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n\"[DuplicateNames](/diff_test.go#:~:text=TestDuplicateNames)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to ListBlobsInclude Parameter\nDESCRIPTION: Adds 'permissions' to the enum list of the ListBlobsInclude parameter in the Swagger document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:  \n- from: swagger-document    \n  where: $.parameters.ListBlobsInclude    \n  transform: >        \n    $.items.enum.push(\"permissions\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi KV Store in Runtime Configuration YAML\nDESCRIPTION: This YAML snippet shows how to configure the multi KV store in the runtime configuration file. It allows overriding the primary backend and enabling/disabling mirroring to the secondary backend.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-hash-rings.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmulti_kv_config:\n  # The runtime configuration only allows to override the primary backend and whether mirroring is enabled.\n  primary: consul\n  mirror_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 SSE globally in Grafana Mimir YAML\nDESCRIPTION: This snippet demonstrates how to configure AWS S3 Server-Side Encryption (SSE) globally for all storage backends in Grafana Mimir using Amazon S3-managed keys. It includes settings for alertmanager_storage, blocks_storage, and ruler_storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/secure/encrypting-data-at-rest.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager_storage:\n  backend: \"s3\"\n  s3:\n    sse:\n      type: \"SSE-S3\"\nblocks_storage:\n  backend: \"s3\"\n  s3:\n    sse:\n      type: \"SSE-S3\"\nruler_storage:\n  backend: \"s3\"\n  s3:\n    sse:\n      type: \"SSE-S3\"\n```\n\n----------------------------------------\n\nTITLE: Querying oldest member timestamp in Grafana Mimir hash ring\nDESCRIPTION: This PromQL query measures the age of the oldest heartbeat timestamp in the Grafana Mimir hash ring. It's used to monitor the propagation latency of hash ring changes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-hash-rings.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nmax(time() - cortex_ring_oldest_member_timestamp{state=\"ACTIVE\"})\n```\n\n----------------------------------------\n\nTITLE: Initializing MinIO Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize a MinIO client object with endpoint and credentials. It sets up the connection to the MinIO server.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n)\n\nfunc main() {\n\tendpoint := \"play.min.io\"\n\taccessKeyID := \"Q3AM3UQ867SPQQA43P2F\"\n\tsecretAccessKey := \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"\n\tuseSSL := true\n\n\t// Initialize minio client object.\n\tminioClient, err := minio.New(endpoint, &minio.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, \"\"),\n\t\tSecure: useSSL,\n\t})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tlog.Printf(\"%#v\\n\", minioClient) // minioClient is now set up\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing procfs Filesystem and Reading Stats in Go\nDESCRIPTION: Demonstrates how to initialize the procfs filesystem mount point and read system statistics. Shows basic usage of the procfs package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance-wide Out-of-Order Sample Ingestion in YAML\nDESCRIPTION: YAML configuration to allow ingestion of out-of-order samples up to 5 minutes since the latest received sample for the series across the entire Mimir instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-out-of-order-samples-ingestion.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  # Allow ingestion of out-of-order samples up to 5 minutes since the latest received sample for the series.\n  out_of_order_time_window: 5m\n```\n\n----------------------------------------\n\nTITLE: Copying Mimir Blocks between Azure Blob Storage Containers\nDESCRIPTION: Configuration example for copying blocks between Azure Blob Storage containers, including account authentication and container specifications.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/copyblocks/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./copyblocks \\\n  --source.backend azure \\\n  --destination.backend azure \\\n  --azure.source.container-name <source container name> \\\n  --azure.source.account-name <source account name> \\\n  --azure.source.account-key <source account key> \\\n  --azure.destination.container-name <destination container name> \\\n  --azure.destination.account-name <destination account name> \\\n  --azure.destination.account-key <destination account key> \\\n  --copy-period 24h \\\n  --min-block-duration 13h \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana Mimir with Custom Configuration\nDESCRIPTION: Upgrades the Grafana Mimir installation using Helm with custom values from the 'custom.yaml' file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n mimir-test upgrade mimir grafana/mimir-distributed -f custom.yaml\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Configuration in YAML\nDESCRIPTION: Configuration block for Alertmanager settings including data directory, retention, external URL and polling interval configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_75\n\nLANGUAGE: yaml\nCODE:\n```\n# Directory to store Alertmanager state and temporarily configuration files. The\n# content of this directory is not required to be persisted between restarts\n# unless Alertmanager replication has been disabled.\n# CLI flag: -alertmanager.storage.path\n[data_dir: <string> | default = \"./data-alertmanager/\"]\n\n# (advanced) How long should we store stateful data (notification logs and\n# silences). For notification log entries, refers to how long should we keep\n# entries before they expire and are deleted. For silences, refers to how long\n# should tenants view silences after they expire and are deleted.\n# CLI flag: -alertmanager.storage.retention\n[retention: <duration> | default = 120h]\n\n# The URL under which Alertmanager is externally reachable (eg. could be\n# different than -http.alertmanager-http-prefix in case Alertmanager is served\n# via a reverse proxy). This setting is used both to configure the internal\n# requests router and to generate links in alert templates. If the external URL\n# has a path portion, it will be used to prefix all HTTP endpoints served by\n# Alertmanager, both the UI and API.\n# CLI flag: -alertmanager.web.external-url\n[external_url: <url> | default = http://localhost:8080/alertmanager]\n\n# (advanced) How frequently to poll Alertmanager configs.\n# CLI flag: -alertmanager.configs.poll-interval\n[poll_interval: <duration> | default = 15s]\n\n# (advanced) Maximum size (bytes) of an accepted HTTP request body.\n```\n\n----------------------------------------\n\nTITLE: Making a Client Request with Context Timeout\nDESCRIPTION: Example of making a Put request to etcd with a timeout context. This demonstrates the recommended pattern for making requests with proper timeout handling and resource cleanup.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), timeout)\nresp, err := cli.Put(ctx, \"sample_key\", \"sample_value\")\ncancel()\nif err != nil {\n    // handle error!\n}\n// use the response\n```\n\n----------------------------------------\n\nTITLE: Client secret authentication with azidentity in Go\nDESCRIPTION: This snippet shows client secret authentication using azidentity, including creating a ClientSecretCredential and configuring a client.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Serializing Trace Context to HTTP Headers in Go OpenTracing\nDESCRIPTION: Shows how to propagate trace context across process boundaries by injecting span context into HTTP headers. This enables distributed tracing across microservices or other networked components.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc makeSomeRequest(ctx context.Context) ... {\n    if span := opentracing.SpanFromContext(ctx); span != nil {\n        httpClient := &http.Client{}\n        httpReq, _ := http.NewRequest(\"GET\", \"http://myservice/\", nil)\n\n        // Transmit the span's TraceContext as HTTP headers on our\n        // outbound request.\n        opentracing.GlobalTracer().Inject(\n            span.Context(),\n            opentracing.HTTPHeaders,\n            opentracing.HTTPHeadersCarrier(httpReq.Header))\n\n        resp, err := httpClient.Do(httpReq)\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Marked Blocks for Deletion\nDESCRIPTION: Command to clean up TSDB blocks that have been marked for deletion. This permanently removes the blocks from the bucket with no delay, making space and preparing for the next step.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nthanos tools bucket cleanup \\\n    --objstore.config-file bucket.yaml \\\n    --delete-delay=0\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter in Go OpenTelemetry SDK\nDESCRIPTION: Changed examples to use WithBatchTimeout with a time.Duration value instead of an integer.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nWithBatchTimeout(5 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Managing Context-based Process with run.Group in Go\nDESCRIPTION: Example showing how to use run.Group with a context.Context to manage a process. The execute function runs the process while the interrupt function cancels the context.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/run/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithCancel(context.Background())\ng.Add(func() error {\n\treturn myProcess(ctx, ...)\n}, func(error) {\n\tcancel()\n})\n```\n\n----------------------------------------\n\nTITLE: Using BBloom Filter in Go Applications\nDESCRIPTION: This Go code demonstrates how to use the BBloom package to create and manipulate a Bloom filter. It explains initializing the filter, adding and checking elements, and handling concurrent use via thread-safe methods. Dependencies include the BBloom package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dgraph-io/ristretto/z/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t...\n\t\"github.com/AndreasBriese/bbloom\"\n\t...\n\t)\n\n// create a bloom filter for 65536 items and 1 % wrong-positive ratio \nbf := bbloom.New(float64(1<<16), float64(0.01))\n\n// or \n// create a bloom filter with 650000 for 65536 items and 7 locs per hash explicitly\n// bf = bbloom.New(float64(650000), float64(7))\n// or\nbf = bbloom.New(650000.0, 7.0)\n\n// add one item\nbf.Add([]byte(\"butter\"))\n\n// Number of elements added is exposed now \n// Note: ElemNum will not be included in JSON export (for compatability to older version)\nnOfElementsInFilter := bf.ElemNum\n\n// check if item is in the filter\nisIn := bf.Has([]byte(\"butter\"))    // should be true\nisNotIn := bf.Has([]byte(\"Butter\")) // should be false\n\n// 'add only if item is new' to the bloomfilter\nadded := bf.AddIfNotHas([]byte(\"butter\"))    // should be false because 'butter' is already in the set\nadded = bf.AddIfNotHas([]byte(\"buTTer\"))    // should be true because 'buTTer' is new\n\n// thread safe versions for concurrent use: AddTS, HasTS, AddIfNotHasTS\n// add one item\nbf.AddTS([]byte(\"peanutbutter\"))\n// check if item is in the filter\nisIn = bf.HasTS([]byte(\"peanutbutter\"))    // should be true\nisNotIn = bf.HasTS([]byte(\"peanutButter\")) // should be false\n// 'add only if item is new' to the bloomfilter\nadded = bf.AddIfNotHasTS([]byte(\"butter\"))    // should be false because 'peanutbutter' is already in the set\nadded = bf.AddIfNotHasTS([]byte(\"peanutbuTTer\"))    // should be true because 'penutbuTTer' is new\n\n// convert to JSON ([]byte) \nJson := bf.JSONMarshal()\n\n// bloomfilters Mutex is exposed for external un-/locking\n// i.e. mutex lock while doing JSON conversion\nbf.Mtx.Lock()\nJson = bf.JSONMarshal()\nbf.Mtx.Unlock()\n\n// restore a bloom filter from storage \nbfNew := bbloom.JSONUnmarshal(Json)\n\nisInNew := bfNew.Has([]byte(\"butter\"))    // should be true\nisNotInNew := bfNew.Has([]byte(\"Butter\")) // should be false\n```\n\n----------------------------------------\n\nTITLE: Installing mimirtool on Linux AMD64\nDESCRIPTION: Commands to download and make executable the mimirtool binary for Linux AMD64 architecture using curl. This tool is essential for converting Cortex configurations to Mimir format.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fLo mimirtool https://github.com/grafana/mimir/releases/latest/download/mimirtool-linux-amd64\nchmod +x mimirtool\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Mimir using Docker\nDESCRIPTION: Docker command to pull the latest Grafana Mimir image.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull grafana/mimir:latest\n```\n\n----------------------------------------\n\nTITLE: Fetching Metrics in Grafana Mimir\nDESCRIPTION: This endpoint returns the metrics for the running Grafana Mimir service in the Prometheus exposition format.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET /metrics\n```\n\n----------------------------------------\n\nTITLE: Enable Remote Evaluation Mode\nDESCRIPTION: Configuration to enable remote operational mode for the ruler, which adds separate query path deployments.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-ruler.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    ruler_remote_evaluation_enabled: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Grafana Alloy Configuration\nDESCRIPTION: Full Grafana Alloy configuration for self-scraping and remote write to Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.exporter.self \"self_metrics\" {\n}\n\nprometheus.scrape \"self_scrape\" {\n  targets    = prometheus.exporter.self.self_metrics.targets\n  forward_to = [prometheus.remote_write.mimir.receiver]\n}\n\nprometheus.remote_write \"mimir\" {\n  endpoint {\n    url = \"http://localhost:9009/api/v1/push\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Downsampled Thanos Blocks for Deletion\nDESCRIPTION: Command to mark downsampled blocks (5m and 1h resolution) for deletion. Mimir doesn't support downsampled blocks from Thanos, so these must be removed while keeping the raw resolution blocks.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nthanos tools bucket retention \\\n    --objstore.config-file bucket.yaml \\\n    --retention.resolution-1h=1s \\\n    --retention.resolution-5m=1s \\\n    --retention.resolution-raw=0s\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Context Support in Go-json\nDESCRIPTION: Example code showing the context-based JSON marshaling and unmarshaling interfaces introduced in v0.7.0. These interfaces allow passing context through JSON operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MarshalerContext interface {\n  MarshalJSON(context.Context) ([]byte, error)\n}\n\ntype UnmarshalerContext interface {\n  UnmarshalJSON(context.Context, []byte) error\n}\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Scheduler Address Configuration\nDESCRIPTION: Specifies the address of the query-scheduler component.  This should resolve to all query-scheduler instances and is used when the query-scheduler is enabled and `-query-scheduler.service-discovery-mode` is set to 'dns'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Address of the query-scheduler component, in host:port format. The host should\\n# resolve to all query-scheduler instances. This option should be set only when\\n# query-scheduler component is in use and\\n# -query-scheduler.service-discovery-mode is set to 'dns'.\\n# CLI flag: -query-frontend.scheduler-address\\n[scheduler_address: <string> | default = \\\"\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant TSDB Block Upload Override\nDESCRIPTION: YAML configuration example showing how to enable TSDB block upload for specific tenants using runtime configuration overrides.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-tsdb-block-upload.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  tenant1:\n    compactor_block_upload_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration block for connecting to Google Cloud Storage object storage backend in Grafana Mimir. This block uses the CLI flags prefix 'blocks-storage'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_131\n\nLANGUAGE: toml\nCODE:\n```\n[gcs: <gcs_storage_backend>]\n```\n\n----------------------------------------\n\nTITLE: Importing Mimir Jsonnet Library\nDESCRIPTION: Example of importing the Mimir Jsonnet library to replace the existing Cortex library import.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-cortex.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonnet\nCODE:\n```\nimport 'github.com/grafana/mimir/operations/mimir/mimir.libsonnet'\n```\n\n----------------------------------------\n\nTITLE: Using Decimal Library for Financial Calculations in Go\nDESCRIPTION: This snippet demonstrates how to use the decimal library for precise financial calculations, including price, quantity, fees, and taxes. It showcases decimal creation, multiplication, addition, subtraction, and division operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/shopspring/decimal/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/shopspring/decimal\"\n)\n\nfunc main() {\n\tprice, err := decimal.NewFromString(\"136.02\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tquantity := decimal.NewFromInt(3)\n\n\tfee, _ := decimal.NewFromString(\".035\")\n\ttaxRate, _ := decimal.NewFromString(\".08875\")\n\n\tsubtotal := price.Mul(quantity)\n\n\tpreTax := subtotal.Mul(fee.Add(decimal.NewFromFloat(1)))\n\n\ttotal := preTax.Mul(taxRate.Add(decimal.NewFromFloat(1)))\n\n\tfmt.Println(\"Subtotal:\", subtotal)                      // Subtotal: 408.06\n\tfmt.Println(\"Pre-tax:\", preTax)                         // Pre-tax: 422.3421\n\tfmt.Println(\"Taxes:\", total.Sub(preTax))                // Taxes: 37.482861375\n\tfmt.Println(\"Total:\", total)                            // Total: 459.824961375\n\tfmt.Println(\"Tax rate:\", total.Sub(preTax).Div(preTax)) // Tax rate: 0.08875\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Config Option to Limits Struct in Go\nDESCRIPTION: Example of adding a new config option to the validation.Limits struct with appropriate YAML and JSON tags.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nResultsCacheForUnalignedQueryEnabled bool `yaml:\"cache_unaligned_requests\" json:\"cache_unaligned_requests\" category:\"advanced\"`\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 SSE for a specific tenant in Grafana Mimir YAML\nDESCRIPTION: This snippet shows how to configure AWS S3 Server-Side Encryption (SSE) for a specific tenant named 'tenant-a' in Grafana Mimir's runtime configuration file. It uses Amazon S3-managed keys (SSE-S3) for encryption.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/secure/encrypting-data-at-rest.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  \"tenant-a\":\n    s3_sse_type: \"SSE-S3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance IDs for Mimir Components\nDESCRIPTION: This snippet contains configuration parameters for setting instance IDs of various Mimir components. Each line specifies a component and its corresponding instance ID, which is crucial for distributed operations and ring-based sharding in Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/gem/ring-instance-id-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-admin-api.leader-election.ring.instance-id=123abc-7\n-alertmanager.sharding-ring.instance-id=123abc-2\n-compactor.ring.instance-id=123abc-4\n-distributor.ring.instance-id=123abc-1\n-ingester.lifecycler.id=123abc-6\n-ruler.ring.instance-id=123abc-3\n-store-gateway.sharding-ring.instance-id=123abc-5\n```\n\n----------------------------------------\n\nTITLE: Fetching Grafana Mimir Configuration\nDESCRIPTION: This endpoint displays the current configuration applied to Grafana Mimir, including default values and settings via CLI flags. The configuration is provided in YAML format with sensitive data masked.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /config\n```\n\n----------------------------------------\n\nTITLE: Enabling Zone-Aware Ingesters for Mimir (YAML)\nDESCRIPTION: YAML configuration to start new zone-aware ingesters and enable the rollout operator. This configuration maintains nginx and gateway replicas at 0 to control traffic during the migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n\nnginx:\n  replicas: 0\ngateway:\n  replicas: 0\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Map Determinism in Marshaling (Go)\nDESCRIPTION: This example explains how Go maps are marshaled regarding key order. v1 marshaled maps in a deterministic order, while v2 marshals them in a non-deterministic order for improved performance. This snippet is linked to the `TestMapDeterminism` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\n\"[MapDeterminism](/diff_test.go#:~:text=TestMapDeterminism)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Engine Fallback via CLI Flag in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to disable the fallback to Prometheus' engine when MQE encounters unsupported features. It sets the enable-query-engine-fallback flag to false for the querier component.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/mimir-query-engine.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n-querier.enable-query-engine-fallback=false\n```\n\n----------------------------------------\n\nTITLE: Analyzing Prometheus Metrics with Mimir\nDESCRIPTION: This command runs against a Grafana Mimir, Metrics Enterprise, Prometheus, or Cloud Prometheus instance. It uses output from previous analyze commands to show the number of series used in dashboards or rules, and metrics not in use. The command outputs a JSON file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool analyze prometheus --address=<url> --id=<tenant_id>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total_active_series\": 38184,\n  \"in_use_active_series\": 14047,\n  \"additional_active_series\": 24137,\n  \"in_use_metric_counts\": [\n    {\n      \"metric\": \"apiserver_request_duration_seconds_bucket\",\n      \"count\": 11400,\n      \"job_counts\": [\n        {\n          \"job\": \"apiserver\",\n          \"count\": 11400\n        }\n      ]\n    },\n    {\n      \"metric\": \"apiserver_request_total\",\n      \"count\": 684,\n      \"job_counts\": [\n        {\n          \"job\": \"apiserver\",\n          \"count\": 684\n        }\n      ]\n    }\n  ],\n  \"additional_metric_counts\": [\n    {\n      \"metric\": \"etcd_request_duration_seconds_bucket\",\n      \"count\": 2688,\n      \"job_counts\": [\n        {\n          \"job\": \"apiserver\",\n          \"count\": 2688\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Consul Mirroring\nDESCRIPTION: Step 4 configuration that disables mirroring to Consul while maintaining memberlist as primary store.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-consul-to-memberlist.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    memberlist_ring_enabled: true,\n    multikv_migration_enabled: true,\n    multikv_mirror_enabled: false,  // Changed in this step.\n    multikv_switch_primary_secondary: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Grafana Mimir\nDESCRIPTION: Basic make command to build the Grafana Mimir project\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Managing HTTP Server with run.Group in Go\nDESCRIPTION: Example demonstrating how to manage an HTTP server using run.Group. The execute function runs the server while the interrupt function closes the listener.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/run/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nln, _ := net.Listen(\"tcp\", \":8080\")\ng.Add(func() error {\n\treturn http.Serve(ln, nil)\n}, func(error) {\n\tln.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Logger with Fixed Key/Value Pairs in Go\nDESCRIPTION: This snippet shows how to create a new logger with fixed key/value pairs using the `With()` method.  The specified key/value pair will be included in all messages emitted by that logger, providing contextual information without having to pass it to every log call.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"requestID := \\\"5fb446b6-6eba-821d-df1b-cd7501b6a363\\\"\\nrequestLogger := subsystemLogger.With(\\\"request\\\", requestID)\nrequestLogger.Info(\\\"we are transporting a request\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Copying Objects Between Amazon S3 Buckets\nDESCRIPTION: Command to copy objects between S3 buckets with full authentication configuration. Includes endpoint specification for custom S3-compatible services.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/copyprefix/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./copyprefix \\\n  --source.backend s3 \\\n  --destination.backend s3 \\\n  --s3.source.bucket-name <source bucket name> \\\n  --s3.source.access-key-id <source access key id> \\\n  --s3.source.secret-access-key <source secret access key> \\\n  --s3.source.endpoint <source endpoint> \\\n  --s3.destination.bucket-name <destination bucket name> \\\n  --s3.destination.access-key-id <destination access key id> \\\n  --s3.destination.secret-access-key <destination secret access key> \\\n  --s3.destination.endpoint <destination endpoint> \\\n  --source-prefix tenant2 \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Evaluating Instant Queries in PromQL Test Scripts\nDESCRIPTION: Demonstrates the syntax for the 'eval instant' command, which runs an instant query against the test environment and asserts the expected results.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/promql/promqltest/README.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\neval instant at 1m sum by (env) (my_metric)\n    expect warn\n    expect no_info\n    {env=\"prod\"} 5\n    {env=\"test\"} 20\n```\n\n----------------------------------------\n\nTITLE: Initializing Kotel Meter and Kafka Client with OpenTelemetry in Go\nDESCRIPTION: This example demonstrates how to set up a Kotel meter with OpenTelemetry, create a Kotel service with metrics enabled, and initialize a Kafka client with the Kotel hook for metric collection.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/twmb/franz-go/plugin/kotel/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Initialize meter provider.\nmeterProvider, err := initMeterProvider()\n\n// Create a new kotel meter.\nmeterOpts := []kotel.MeterOpt{kotel.MeterProvider(meterProvider)}\nmeter := kotel.NewMeter(meterOpts...)\n\n// Pass the meter to NewKotel hook.\nkotelOps := []kotel.Opt{\n\tkotel.WithMeter(meter),\n}\n\n// Create a new kotel service.\nkotelService := kotel.NewKotel(kotelOps...)\n\n// Create a new Kafka client.\ncl, err := kgo.NewClient(\n\t// Pass in the kotel hook.\n\tkgo.WithHooks(kotelService.Hooks()...),\n\t// ...other opts.\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Tenant Delete Request Endpoint\nDESCRIPTION: API endpoint to request deletion of all data for a specific tenant identified by X-Scope-OrgID header.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_61\n\nLANGUAGE: http\nCODE:\n```\nPOST /compactor/delete_tenant\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStack Swift Storage Backend in YAML\nDESCRIPTION: Configuration block for connecting to OpenStack Swift Object Storage. Includes authentication credentials, API version settings, and domain configuration. Supports multiple storage prefixes for different components.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_149\n\nLANGUAGE: yaml\nCODE:\n```\n[application_credential_id: <string> | default = \"\"]\n[application_credential_name: <string> | default = \"\"]\n[application_credential_secret: <string> | default = \"\"]\n[auth_version: <int> | default = 0]\n[auth_url: <string> | default = \"\"]\n[username: <string> | default = \"\"]\n[user_domain_name: <string> | default = \"\"]\n[user_domain_id: <string> | default = \"\"]\n[user_id: <string> | default = \"\"]\n[password: <string> | default = \"\"]\n[domain_id: <string> | default = \"\"]\n[domain_name: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Replicas in Helm Values File\nDESCRIPTION: YAML configuration for enabling the Gateway component and setting the appropriate number of replicas in a Helm values file. This matches the number of existing NGINX replicas for a smooth transition.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngateway:\n  enabledNonEnterprise: true\n  replicas: 10\n```\n\n----------------------------------------\n\nTITLE: Mocking Time in Tests with Go\nDESCRIPTION: This snippet demonstrates how to use a `Mock` clock in tests by importing the Clock library and initializing the application with a mock clock instead of a realtime clock. This allows adjusting time programmatically for testing purposes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/benbjohnson/clock/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"testing\"\n\n\t\"github.com/benbjohnson/clock\"\n)\n\nfunc TestApplication_DoSomething(t *testing.T) {\n\tmock := clock.NewMock()\n\tapp := Application{Clock: mock}\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Printing All Rule Groups in Grafana Mimir\nDESCRIPTION: This command retrieves and prints all rule groups in the Grafana Mimir instance. It can also save the output to a specified directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules print\n```\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules print --output-dir=rules\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Mimir HA Tracker in YAML\nDESCRIPTION: This configuration example enables the HA tracker for all tenants in Grafana Mimir. It sets up the limits and distributor sections, including the KV store configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-high-availability-deduplication.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  accept_ha_samples: true\ndistributor:\n  ha_tracker:\n    enable_ha_tracker: true\n    kvstore:\n      [store: <string> | default = \"consul\"]\n      [consul | etcd: <config>]\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Fields in Logrus\nDESCRIPTION: Illustrates the recommended approach of using structured logging with fields in Logrus, which produces more discoverable and useful log messages.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlog.WithFields(log.Fields{\n  \"event\": event,\n  \"topic\": topic,\n  \"key\": key,\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Running Undelete-Blocks with Azure Blob Storage\nDESCRIPTION: Example command for using the undelete-blocks tool with Azure Blob Storage. It demonstrates how to specify the Azure backend, container name, account credentials, and JSON input file with tenant exclusion.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/undelete-blocks/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./undelete-blocks \\\n  --backend azure \\\n  --azure.container-name <container name> \\\n  --azure.account-name <account name> \\\n  --azure.account-key <account key> \\\n  --blocks-from json \\\n  --input-file undelete.json \\\n  --exclude-tenants tenant1 \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager Client TLS Settings in YAML\nDESCRIPTION: Configures TLS settings for the Alertmanager client used by the Ruler. This includes options for enabling TLS, specifying certificate paths, and configuring cipher suites.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_69\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager_client:\n  # (advanced) Enable TLS for gRPC client connecting to alertmanager.\n  # CLI flag: -ruler.alertmanager-client.tls-enabled\n  [tls_enabled: <boolean> | default = true]\n\n  # (advanced) Path to the client certificate, which will be used for\n  # authenticating with the server. Also requires the key path to be configured.\n  # CLI flag: -ruler.alertmanager-client.tls-cert-path\n  [tls_cert_path: <string> | default = \"\"]\n\n  # (advanced) Path to the key for the client certificate. Also requires the\n  # client certificate to be configured.\n  # CLI flag: -ruler.alertmanager-client.tls-key-path\n  [tls_key_path: <string> | default = \"\"]\n\n  # (advanced) Path to the CA certificates to validate server certificate\n  # against. If not set, the host's root CA certificates are used.\n  # CLI flag: -ruler.alertmanager-client.tls-ca-path\n  [tls_ca_path: <string> | default = \"\"]\n\n  # (advanced) Override the expected name on the server certificate.\n  # CLI flag: -ruler.alertmanager-client.tls-server-name\n  [tls_server_name: <string> | default = \"\"]\n\n  # (advanced) Skip validating server certificate.\n  # CLI flag: -ruler.alertmanager-client.tls-insecure-skip-verify\n  [tls_insecure_skip_verify: <boolean> | default = false]\n\n  # (advanced) Override the default cipher suite list (separated by commas).\n  # CLI flag: -ruler.alertmanager-client.tls-cipher-suites\n  [tls_cipher_suites: <string> | default = \"\"]\n\n  # (advanced) Override the default minimum TLS version. Allowed values:\n  # VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13\n  # CLI flag: -ruler.alertmanager-client.tls-min-version\n  [tls_min_version: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana Mimir with Helm Using Custom Values\nDESCRIPTION: Bash command to upgrade a Grafana Mimir installation using Helm with custom values from a configuration file. This applies the ingress configuration to make Mimir externally accessible.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n mimir-test upgrade mimir grafana/mimir-distributed -f custom.yaml\n```\n\n----------------------------------------\n\nTITLE: Copying Mimir Blocks between S3 Buckets\nDESCRIPTION: Example for copying blocks between S3 buckets with endpoint configuration and authentication. Includes note about server-side copy permissions.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/copyblocks/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./copyblocks \\\n  --source.backend s3 \\\n  --destination.backend s3 \\\n  --s3.source.bucket-name <source bucket name> \\\n  --s3.source.access-key-id <source access key id> \\\n  --s3.source.secret-access-key <source secret access key> \\\n  --s3.source.endpoint <source endpoint> \\\n  --s3.destination.bucket-name <destination bucket name> \\\n  --s3.destination.access-key-id <destination access key id> \\\n  --s3.destination.secret-access-key <destination secret access key> \\\n  --s3.destination.endpoint <destination endpoint> \\\n  --copy-period 24h \\\n  --min-block-duration 13h \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Defining a Federated Rule Group in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a federated rule group with source tenants and a recording rule. Federated rule groups allow aggregating data from multiple tenants when evaluating rules.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/ruler/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: MyGroupName\nsource_tenants: [\"tenant-a\", \"tenant-b\"]\nrules:\n  - record: sum:metric\n    expr: sum(metric)\n```\n\n----------------------------------------\n\nTITLE: Scaling Zone-Aware Ingester Replicas in Mimir Configuration\nDESCRIPTION: This YAML snippet shows how to gradually increase the number of zone-aware ingester replicas during the migration process. The number of replicas (N) should be increased in steps, not exceeding 21 at a time.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n      replicas: <N>\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Ruler and Alertmanager Components\nDESCRIPTION: Configuration blocks for the ruler and alertmanager components and their storage backends. These components handle rule evaluation and alert management in Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# The ruler block configures the ruler.\n[ruler: <ruler>]\n\n# The ruler_storage block configures the ruler storage backend.\n[ruler_storage: <ruler_storage>]\n\n# The alertmanager block configures the alertmanager.\n[alertmanager: <alertmanager>]\n\n# The alertmanager_storage block configures the alertmanager storage backend.\n[alertmanager_storage: <alertmanager_storage>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager Client Authentication in YAML\nDESCRIPTION: Sets up authentication for the Alertmanager client, including basic auth and OAuth2 options. This allows the Ruler to authenticate with the Alertmanager when sending notifications.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\n  # HTTP Basic authentication username. It overrides the username set in the URL\n  # (if any).\n  # CLI flag: -ruler.alertmanager-client.basic-auth-username\n  [basic_auth_username: <string> | default = \"\"]\n\n  # HTTP Basic authentication password. It overrides the password set in the URL\n  # (if any).\n  # CLI flag: -ruler.alertmanager-client.basic-auth-password\n  [basic_auth_password: <string> | default = \"\"]\n\n  oauth2:\n    # OAuth2 client ID. Enables the use of OAuth2 for authenticating with\n    # Alertmanager.\n    # CLI flag: -ruler.alertmanager-client.oauth.client_id\n    [client_id: <string> | default = \"\"]\n\n    # OAuth2 client secret.\n    # CLI flag: -ruler.alertmanager-client.oauth.client_secret\n    [client_secret: <string> | default = \"\"]\n\n    # Endpoint used to fetch access token.\n    # CLI flag: -ruler.alertmanager-client.oauth.token_url\n    [token_url: <string> | default = \"\"]\n\n    # Optional scopes to include with the token request.\n    # CLI flag: -ruler.alertmanager-client.oauth.scopes\n    [scopes: <string> | default = \"\"]\n\n    # (advanced) Optional additional URL parameters to send to the token URL.\n    # CLI flag: -ruler.alertmanager-client.oauth.endpoint-params\n    [endpoint_params: <map of string to string> | default = {}]\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoints for Unregister Preparation\nDESCRIPTION: Endpoints to control ingester unregistration behavior on termination. Includes request/response body examples.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET,PUT,DELETE /ingester/unregister-on-shutdown\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"unregister\": true}\n```\n\n----------------------------------------\n\nTITLE: Querier: Max Concurrent Queries Configuration\nDESCRIPTION: Defines the maximum number of concurrent queries that each querier process can handle. This setting limits the concurrency and resource usage of each querier instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n\"# The number of workers running in each querier process. This setting limits the\\n# maximum number of concurrent queries in each querier. The minimum value is\\n# four; lower values are ignored and set to the minimum\\n# CLI flag: -querier.max-concurrent\\n[max_concurrent: <int> | default = 20]\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Time in Relative Terms - Go\nDESCRIPTION: This snippet demonstrates the `humanize.Time` function, which converts a `time.Time` instance into a human-readable format indicating the time relative to now. This is useful for displaying timestamps in a user-friendly manner.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"This was touched %s.\", humanize.Time(someTimeInstance)) // This was touched 7 hours ago.\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Scheduler Options in YAML\nDESCRIPTION: YAML configuration block for Mimir query scheduler settings. Includes options for request limits, service discovery, and ring configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\n# Maximum number of outstanding requests per tenant per query-scheduler.\n# In-flight requests above this limit will fail with HTTP response status code\n# 429.\n# CLI flag: -query-scheduler.max-outstanding-requests-per-tenant\n[max_outstanding_requests_per_tenant: <int> | default = 100]\n\n# (experimental) If a querier disconnects without sending notification about\n# graceful shutdown, the query-scheduler will keep the querier in the tenant's\n# shard until the forget delay has passed. This feature is useful to reduce the\n# blast radius when shuffle-sharding is enabled.\n# CLI flag: -query-scheduler.querier-forget-delay\n[querier_forget_delay: <duration> | default = 0s]\n\n# This configures the gRPC client used to report errors back to the\n# query-frontend.\n# The CLI flags prefix for this block configuration is:\n# query-scheduler.grpc-client-config\n[grpc_client_config: <grpc_client>]\n\n# (experimental) Service discovery mode that query-frontends and queriers use to\n# find query-scheduler instances. When query-scheduler ring-based service\n# discovery is enabled, this option needs be set on query-schedulers,\n# query-frontends and queriers. Supported values are: dns, ring.\n# CLI flag: -query-scheduler.service-discovery-mode\n[service_discovery_mode: <string> | default = \"dns\"]\n\n# The hash ring configuration. The query-schedulers hash ring is used for\n# service discovery.\nring:\n  # The key-value store used to share the hash ring across multiple instances.\n  # When query-scheduler ring-based service discovery is enabled, this option\n  # needs be set on query-schedulers, query-frontends and queriers.\n  kvstore:\n    # Backend storage to use for the ring. Supported values are: consul, etcd,\n    # inmemory, memberlist, multi.\n    # CLI flag: -query-scheduler.ring.store\n    [store: <string> | default = \"memberlist\"]\n\n    # (advanced) The prefix for the keys in the store. Should end with a /.\n    # CLI flag: -query-scheduler.ring.prefix\n    [prefix: <string> | default = \"collectors/\"]\n\n    # The consul block configures the consul client.\n    # The CLI flags prefix for this block configuration is: query-scheduler.ring\n    [consul: <consul>]\n\n    # The etcd block configures the etcd client.\n    # The CLI flags prefix for this block configuration is: query-scheduler.ring\n    [etcd: <etcd>]\n\n    multi:\n      # (advanced) Primary backend storage used by multi-client.\n      # CLI flag: -query-scheduler.ring.multi.primary\n      [primary: <string> | default = \"\"]\n\n      # (advanced) Secondary backend storage used by multi-client.\n      # CLI flag: -query-scheduler.ring.multi.secondary\n      [secondary: <string> | default = \"\"]\n\n      # (advanced) Mirror writes to secondary store.\n      # CLI flag: -query-scheduler.ring.multi.mirror-enabled\n      [mirror_enabled: <boolean> | default = false]\n\n      # (advanced) Timeout for storing value to secondary store.\n      # CLI flag: -query-scheduler.ring.multi.mirror-timeout\n      [mirror_timeout: <duration> | default = 2s]\n\n  # (advanced) Period at which to heartbeat to the ring. 0 = disabled.\n  # CLI flag: -query-scheduler.ring.heartbeat-period\n  [heartbeat_period: <duration> | default = 15s]\n\n  # (advanced) The heartbeat timeout after which query-schedulers are considered\n  # unhealthy within the ring. When query-scheduler ring-based service discovery\n  # is enabled, this option needs be set on query-schedulers, query-frontends\n  # and queriers.\n  # CLI flag: -query-scheduler.ring.heartbeat-timeout\n  [heartbeat_timeout: <duration> | default = 1m]\n\n  # (advanced) Instance ID to register in the ring.\n  # CLI flag: -query-scheduler.ring.instance-id\n  [instance_id: <string> | default = \"<hostname>\"]\n\n  # List of network interface names to look up when finding the instance IP\n  # address.\n  # CLI flag: -query-scheduler.ring.instance-interface-names\n  [instance_interface_names: <list of strings> | default = [<private network interfaces>]]\n\n  # (advanced) Port to advertise in the ring (defaults to\n  # -server.grpc-listen-port).\n  # CLI flag: -query-scheduler.ring.instance-port\n  [instance_port: <int> | default = 0]\n\n  # (advanced) IP address to advertise in the ring. Default is auto-detected.\n  # CLI flag: -query-scheduler.ring.instance-addr\n  [instance_addr: <string> | default = \"\"]\n\n  # (advanced) Enable using a IPv6 instance address. (default false)\n  # CLI flag: -query-scheduler.ring.instance-enable-ipv6\n  [instance_enable_ipv6: <boolean> | default = false]\n\n# The maximum number of query-scheduler instances to use, regardless how many\n# replicas are running. This option can be set only when\n# -query-scheduler.service-discovery-mode is set to 'ring'. 0 to use all\n# available query-scheduler instances.\n# CLI flag: -query-scheduler.max-used-instances\n[max_used_instances: <int> | default = 0]\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Handlers with Logrus in Go\nDESCRIPTION: This snippet shows how to register a fatal handler with Logrus. Fatal handlers are functions that are called when a fatal level message is logged, allowing for graceful shutdown before the application exits.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Starting OTEL Collector with OTLP Push\nDESCRIPTION: Command to start Mimir with OpenTelemetry collector configured to use OTLP push. Accepts OTEL metrics on ports 4317 (gRPC) and 4318 (HTTP).\nSOURCE: https://github.com/grafana/mimir/blob/main/development/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./compose-up.sh --profile otel-collector-otlp-push\n```\n\n----------------------------------------\n\nTITLE: Listing Go Dependencies for Grafana Mimir\nDESCRIPTION: This snippet shows the full list of Go package dependencies for the Grafana Mimir project. It includes package import paths, versions, and any explicit version constraints. The list covers various functionalities including cryptography, networking, OAuth, API clients, and protobuf handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/modules.txt#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n## explicit; go 1.23.0\ngolang.org/x/crypto/argon2\ngolang.org/x/crypto/bcrypt\ngolang.org/x/crypto/blake2b\ngolang.org/x/crypto/blowfish\ngolang.org/x/crypto/chacha20\ngolang.org/x/crypto/chacha20poly1305\ngolang.org/x/crypto/cryptobyte\ngolang.org/x/crypto/cryptobyte/asn1\ngolang.org/x/crypto/hkdf\ngolang.org/x/crypto/internal/alias\ngolang.org/x/crypto/internal/poly1305\ngolang.org/x/crypto/pbkdf2\ngolang.org/x/crypto/pkcs12\ngolang.org/x/crypto/pkcs12/internal/rc2\ngolang.org/x/crypto/scrypt\n# golang.org/x/exp v0.0.0-20250106191152-7588d65b2ba8\n## explicit; go 1.22.0\ngolang.org/x/exp/constraints\ngolang.org/x/exp/slices\n# golang.org/x/mod v0.24.0\n## explicit; go 1.23.0\ngolang.org/x/mod/semver\n# golang.org/x/net v0.38.0\n## explicit; go 1.23.0\ngolang.org/x/net/bpf\ngolang.org/x/net/context/ctxhttp\ngolang.org/x/net/http/httpguts\ngolang.org/x/net/http/httpproxy\ngolang.org/x/net/http2\ngolang.org/x/net/http2/hpack\ngolang.org/x/net/idna\ngolang.org/x/net/internal/httpcommon\ngolang.org/x/net/internal/iana\ngolang.org/x/net/internal/socket\ngolang.org/x/net/internal/timeseries\ngolang.org/x/net/ipv4\ngolang.org/x/net/ipv6\ngolang.org/x/net/netutil\ngolang.org/x/net/publicsuffix\ngolang.org/x/net/trace\ngolang.org/x/net/websocket\n# golang.org/x/oauth2 v0.28.0\n## explicit; go 1.23.0\ngolang.org/x/oauth2\ngolang.org/x/oauth2/authhandler\ngolang.org/x/oauth2/clientcredentials\ngolang.org/x/oauth2/google\ngolang.org/x/oauth2/google/externalaccount\ngolang.org/x/oauth2/google/internal/externalaccountauthorizeduser\ngolang.org/x/oauth2/google/internal/impersonate\ngolang.org/x/oauth2/google/internal/stsexchange\ngolang.org/x/oauth2/internal\ngolang.org/x/oauth2/jws\ngolang.org/x/oauth2/jwt\n# golang.org/x/sync v0.12.0\n## explicit; go 1.23.0\ngolang.org/x/sync/errgroup\ngolang.org/x/sync/semaphore\ngolang.org/x/sync/singleflight\n# golang.org/x/sys v0.31.0\n## explicit; go 1.23.0\ngolang.org/x/sys/cpu\ngolang.org/x/sys/plan9\ngolang.org/x/sys/unix\ngolang.org/x/sys/windows\ngolang.org/x/sys/windows/registry\n# golang.org/x/term v0.30.0\n## explicit; go 1.23.0\ngolang.org/x/term\n# golang.org/x/text v0.23.0\n## explicit; go 1.23.0\ngolang.org/x/text/cases\ngolang.org/x/text/internal\ngolang.org/x/text/internal/language\ngolang.org/x/text/internal/language/compact\ngolang.org/x/text/internal/tag\ngolang.org/x/text/language\ngolang.org/x/text/runes\ngolang.org/x/text/secure/bidirule\ngolang.org/x/text/transform\ngolang.org/x/text/unicode/bidi\ngolang.org/x/text/unicode/norm\n# golang.org/x/time v0.11.0\n## explicit; go 1.23.0\ngolang.org/x/time/rate\n# golang.org/x/tools v0.31.0\n## explicit; go 1.23.0\ngolang.org/x/tools/go/gcexportdata\ngolang.org/x/tools/go/packages\ngolang.org/x/tools/go/types/objectpath\ngolang.org/x/tools/go/types/typeutil\ngolang.org/x/tools/internal/aliases\ngolang.org/x/tools/internal/event\ngolang.org/x/tools/internal/event/core\ngolang.org/x/tools/internal/event/keys\ngolang.org/x/tools/internal/event/label\ngolang.org/x/tools/internal/gcimporter\ngolang.org/x/tools/internal/gocommand\ngolang.org/x/tools/internal/packagesinternal\ngolang.org/x/tools/internal/pkgbits\ngolang.org/x/tools/internal/stdlib\ngolang.org/x/tools/internal/typeparams\ngolang.org/x/tools/internal/typesinternal\ngolang.org/x/tools/internal/versions\n# google.golang.org/api v0.227.0\n## explicit; go 1.23.0\ngoogle.golang.org/api/googleapi\ngoogle.golang.org/api/googleapi/transport\ngoogle.golang.org/api/iamcredentials/v1\ngoogle.golang.org/api/internal\ngoogle.golang.org/api/internal/cert\ngoogle.golang.org/api/internal/gensupport\ngoogle.golang.org/api/internal/impersonate\ngoogle.golang.org/api/internal/third_party/uritemplates\ngoogle.golang.org/api/iterator\ngoogle.golang.org/api/option\ngoogle.golang.org/api/option/internaloption\ngoogle.golang.org/api/storage/v1\ngoogle.golang.org/api/transport\ngoogle.golang.org/api/transport/grpc\ngoogle.golang.org/api/transport/http\n# google.golang.org/genproto v0.0.0-20241113202542-65e8d215514f\n## explicit; go 1.21\ngoogle.golang.org/genproto/googleapis/type/date\ngoogle.golang.org/genproto/googleapis/type/expr\n# google.golang.org/genproto/googleapis/api v0.0.0-20250303144028-a0af3efb3deb\n## explicit; go 1.23.0\ngoogle.golang.org/genproto/googleapis/api\ngoogle.golang.org/genproto/googleapis/api/annotations\ngoogle.golang.org/genproto/googleapis/api/httpbody\n# google.golang.org/genproto/googleapis/rpc v0.0.0-20250409194420-de1ac958c67a\n## explicit; go 1.23.0\ngoogle.golang.org/genproto/googleapis/rpc/code\ngoogle.golang.org/genproto/googleapis/rpc/errdetails\ngoogle.golang.org/genproto/googleapis/rpc/status\n# google.golang.org/grpc v1.71.1 => google.golang.org/grpc v1.65.0\n## explicit; go 1.21\ngoogle.golang.org/grpc\ngoogle.golang.org/grpc/attributes\ngoogle.golang.org/grpc/backoff\ngoogle.golang.org/grpc/balancer\ngoogle.golang.org/grpc/balancer/base\ngoogle.golang.org/grpc/balancer/grpclb\ngoogle.golang.org/grpc/balancer/grpclb/grpc_lb_v1\ngoogle.golang.org/grpc/balancer/grpclb/state\ngoogle.golang.org/grpc/balancer/pickfirst\ngoogle.golang.org/grpc/balancer/roundrobin\ngoogle.golang.org/grpc/binarylog/grpc_binarylog_v1\ngoogle.golang.org/grpc/channelz\ngoogle.golang.org/grpc/codes\ngoogle.golang.org/grpc/connectivity\ngoogle.golang.org/grpc/credentials\ngoogle.golang.org/grpc/credentials/alts\ngoogle.golang.org/grpc/credentials/alts/internal\ngoogle.golang.org/grpc/credentials/alts/internal/authinfo\ngoogle.golang.org/grpc/credentials/alts/internal/conn\ngoogle.golang.org/grpc/credentials/alts/internal/handshaker\ngoogle.golang.org/grpc/credentials/alts/internal/handshaker/service\ngoogle.golang.org/grpc/credentials/alts/internal/proto/grpc_gcp\ngoogle.golang.org/grpc/credentials/google\ngoogle.golang.org/grpc/credentials/insecure\ngoogle.golang.org/grpc/credentials/oauth\ngoogle.golang.org/grpc/encoding\ngoogle.golang.org/grpc/encoding/gzip\ngoogle.golang.org/grpc/encoding/proto\ngoogle.golang.org/grpc/grpclog\ngoogle.golang.org/grpc/health/grpc_health_v1\ngoogle.golang.org/grpc/internal\ngoogle.golang.org/grpc/internal/backoff\ngoogle.golang.org/grpc/internal/balancer/gracefulswitch\ngoogle.golang.org/grpc/internal/balancerload\ngoogle.golang.org/grpc/internal/binarylog\ngoogle.golang.org/grpc/internal/buffer\ngoogle.golang.org/grpc/internal/channelz\ngoogle.golang.org/grpc/internal/credentials\ngoogle.golang.org/grpc/internal/envconfig\ngoogle.golang.org/grpc/internal/googlecloud\ngoogle.golang.org/grpc/internal/grpclog\ngoogle.golang.org/grpc/internal/grpcsync\ngoogle.golang.org/grpc/internal/grpcutil\ngoogle.golang.org/grpc/internal/idle\ngoogle.golang.org/grpc/internal/metadata\ngoogle.golang.org/grpc/internal/pretty\ngoogle.golang.org/grpc/internal/resolver\ngoogle.golang.org/grpc/internal/resolver/dns\ngoogle.golang.org/grpc/internal/resolver/dns/internal\ngoogle.golang.org/grpc/internal/resolver/passthrough\ngoogle.golang.org/grpc/internal/resolver/unix\ngoogle.golang.org/grpc/internal/serviceconfig\ngoogle.golang.org/grpc/internal/status\ngoogle.golang.org/grpc/internal/syscall\ngoogle.golang.org/grpc/internal/transport\ngoogle.golang.org/grpc/internal/transport/networktype\ngoogle.golang.org/grpc/internal/xds\ngoogle.golang.org/grpc/keepalive\ngoogle.golang.org/grpc/metadata\ngoogle.golang.org/grpc/peer\ngoogle.golang.org/grpc/resolver\ngoogle.golang.org/grpc/resolver/dns\ngoogle.golang.org/grpc/resolver/manual\ngoogle.golang.org/grpc/serviceconfig\ngoogle.golang.org/grpc/stats\ngoogle.golang.org/grpc/status\ngoogle.golang.org/grpc/tap\ngoogle.golang.org/grpc/test/bufconn\n# google.golang.org/protobuf v1.36.6\n## explicit; go 1.22\ngoogle.golang.org/protobuf/encoding/protodelim\ngoogle.golang.org/protobuf/encoding/protojson\ngoogle.golang.org/protobuf/encoding/prototext\ngoogle.golang.org/protobuf/encoding/protowire\ngoogle.golang.org/protobuf/internal/descfmt\ngoogle.golang.org/protobuf/internal/descopts\ngoogle.golang.org/protobuf/internal/detrand\ngoogle.golang.org/protobuf/internal/editiondefaults\ngoogle.golang.org/protobuf/internal/editionssupport\ngoogle.golang.org/protobuf/internal/encoding/defval\ngoogle.golang.org/protobuf/internal/encoding/json\ngoogle.golang.org/protobuf/internal/encoding/messageset\ngoogle.golang.org/protobuf/internal/encoding/tag\ngoogle.golang.org/protobuf/internal/encoding/text\ngoogle.golang.org/protobuf/internal/errors\ngoogle.golang.org/protobuf/internal/filedesc\ngoogle.golang.org/protobuf/internal/filetype\ngoogle.golang.org/protobuf/internal/flags\ngoogle.golang.org/protobuf/internal/genid\ngoogle.golang.org/protobuf/internal/impl\ngoogle.golang.org/protobuf/internal/order\ngoogle.golang.org/protobuf/internal/pragma\ngoogle.golang.org/protobuf/internal/protolazy\ngoogle.golang.org/protobuf/internal/set\ngoogle.golang.org/protobuf/internal/strs\ngoogle.golang.org/protobuf/internal/version\ngoogle.golang.org/protobuf/proto\ngoogle.golang.org/protobuf/protoadapt\ngoogle.golang.org/protobuf/reflect/protodesc\ngoogle.golang.org/protobuf/reflect/protoreflect\ngoogle.golang.org/protobuf/reflect/protoregistry\ngoogle.golang.org/protobuf/runtime/protoiface\ngoogle.golang.org/protobuf/runtime/protoimpl\ngoogle.golang.org/protobuf/types/descriptorpb\ngoogle.golang.org/protobuf/types/gofeaturespb\ngoogle.golang.org/protobuf/types/known/anypb\ngoogle.golang.org/protobuf/types/known/durationpb\ngoogle.golang.org/protobuf/types/known/emptypb\ngoogle.golang.org/protobuf/types/known/fieldmaskpb\ngoogle.golang.org/protobuf/types/known/structpb\ngoogle.golang.org/protobuf/types/known/timestamppb\ngoogle.golang.org/protobuf/types/known/wrapperspb\n# gopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc\n## explicit\ngopkg.in/alexcesaro/quotedprintable.v3\n# gopkg.in/mail.v2 v2.3.1\n## explicit\ngopkg.in/mail.v2\n# gopkg.in/telebot.v3 v3.2.1\n## explicit; go 1.13\ngopkg.in/telebot.v3\n# gopkg.in/yaml.v2 v2.4.0\n## explicit; go 1.15\ngopkg.in/yaml.v2\n# gopkg.in/yaml.v3 v3.0.1 => github.com/colega/go-yaml-yaml v0.0.0-20220720105220-255a8d16d094\n## explicit\ngopkg.in/yaml.v3\n# k8s.io/apimachinery v0.32.3\n## explicit; go 1.23.0\nk8s.io/apimachinery/pkg/util/runtime\n# k8s.io/client-go v0.32.3\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Overrides-Exporter Ring Status Endpoint\nDESCRIPTION: API endpoint to display the overrides-exporter hash ring status webpage, showing state and health information for each exporter.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_66\n\nLANGUAGE: http\nCODE:\n```\nGET /overrides-exporter/ring\n```\n\n----------------------------------------\n\nTITLE: Creating Test File in Windows\nDESCRIPTION: This command creates a test file with a specified size using the fsutil utility on Windows systems.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfsutil file createnew \"C:\\Users\\<username>\\Desktop\\sample.txt\" 20480\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distributor Ring Status in Grafana Mimir\nDESCRIPTION: This endpoint displays a web page with the distributor hash ring status, including the state, health, and last heartbeat time of each distributor.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nGET /distributor/ring\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Extended Timeout\nDESCRIPTION: Command to run integration tests with an increased timeout period, useful when the default 10-minute timeout is insufficient for completing all tests.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-integration-tests-work.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v -tags=requires_docker -timeout=20m ./integration/...\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStack Swift Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration example for setting up OpenStack Swift as the storage backend for Grafana Mimir. Includes authentication details and separate container configurations for blocks, alertmanager, and ruler storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-object-storage-backend.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncommon:\n  storage:\n    backend: swift\n    swift:\n      auth_url: http://10.121.xx.xx:5000/v3\n      username: mimir\n      user_domain_name: Default\n      password: \"${OPENSTACK_API_KEY}\"\n      project_name: mimir-prod\n      domain_name: Default\n\nblocks_storage:\n  swift:\n    container_name: mimir-blocks\n\nalertmanager_storage:\n  swift:\n    container_name: mimir-alertmanager\n\nruler_storage:\n  swift:\n    container_name: mimir-ruler\n```\n\n----------------------------------------\n\nTITLE: Copying Mimir Blocks between Different Storage Providers (S3 to Azure)\nDESCRIPTION: Example showing how to copy blocks between different storage providers, specifically from S3 to Azure Blob Storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/copyblocks/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./copyblocks \\\n  --source.backend s3 \\\n  --destination.backend azure \\\n  --s3.source.bucket-name <source bucket name> \\\n  --s3.source.access-key-id <source access key> \\\n  --s3.source.secret-access-key <source secret access key> \\\n  --s3.source.endpoint <source endpoint> \\\n  --azure.destination.container-name <destination container name> \\\n  --azure.destination.account-name <destination account name> \\\n  --azure.destination.account-key <destination account key> \\\n  --copy-period 24h \\\n  --min-block-duration 13h \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation (After Refactoring) in Go\nDESCRIPTION: Benchmark results after refactoring, showing noticeable improvements in memory allocation and execution time compared to the previous version.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo test -bench Spec\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor\nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t4064535557 ns/op\t3379715592 B/op\t25320330 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Integrating fgprof with HTTP Server in Go\nDESCRIPTION: This snippet shows how to add fgprof alongside the built-in Go profiler in an HTTP server. It sets up handlers for both the default pprof endpoints and the fgprof endpoint.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/felixge/fgprof/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n\t_ \"net/http/pprof\"\n\t\"github.com/felixge/fgprof\"\n)\n\nfunc main() {\n\thttp.DefaultServeMux.Handle(\"/debug/fgprof\", fgprof.Handler())\n\tgo func() {\n\t\tlog.Println(http.ListenAndServe(\":6060\", nil))\n\t}()\n\n\t// <code to profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Values for GEM Federation-Frontend\nDESCRIPTION: Creates a Helm values file named 'federation-frontend.yaml' with configuration for deploying the GEM federation-frontend. It includes settings for enterprise features, resource allocation, and remote GEM cluster configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-gem-federation-frontend.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable enterprise features\nenterprise:\n  enabled: true\n\n# Enable and configure federation-frontend\nfederation_frontend:\n  enabled: true\n  # Since this is a standalone deployment, configure the chart to not render any of the other GEM components.\n  disableOtherComponents: true\n  replicas: 2\n  resources:\n    requests:\n      cpu: 100m\n      memory: 128Mi\n    limits:\n      cpu: 1\n      memory: 256Mi\n  extraEnvFrom:\n    - secretRef:\n        name: gem-tokens\n\n# Configure the remote GEM clusters to query.\nmimir:\n  structuredConfig:\n    auth:\n      type: trust\n    # The federation-frontend doesn't handle authentication or authorization. Disabling multitenancy means the federation-frontend doesn't require the X-Scope-OrgID header.\n    # With disabled multitenancy, the federation-frontend uses the authn/z material from the proxy_targets configuration.\n    # For a complete list of configuration options, refer to the configuration reference at https://grafana.com/docs/enterprise-metrics/<GEM_VERSION>/config/reference/#federation.\n    multitenancy_enabled: false\n    federation:\n      proxy_targets:\n        - name: \"cluster-1\"\n          url: \"http://gem-query-frontend.monitoring.svc.cluster.local:8080/prometheus\"\n          basic_auth:\n            username: tenant-1\n            password: \"${CLUSTER_1_GEM_TOKEN}\"\n\n        - name: \"cluster-2\"\n          url: \"https://gem.monitoring.acme.local/prometheus\"\n          basic_auth:\n            username: tenant-2\n            password: \"${CLUSTER_2_GEM_TOKEN}\"\n\n# Disable MinIO\nminio:\n  enabled: false\n\n# The federation-frontend doesn't need the rollout-operator for rollouts, so it can be disabled.\nrollout_operator:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Frontend Options in YAML\nDESCRIPTION: YAML configuration block for Mimir query frontend settings. Includes options for query sharding, pruning, active series queries, and result formatting.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_65\n\nLANGUAGE: yaml\nCODE:\n```\n# True to enable query sharding.\n# CLI flag: -query-frontend.parallelize-shardable-queries\n[parallelize_shardable_queries: <boolean> | default = false]\n\n# (experimental) True to enable pruning dead code (eg. expressions that cannot\n# produce any results) and simplifying expressions (eg. expressions that can be\n# evaluated immediately) in queries.\n# CLI flag: -query-frontend.prune-queries\n[prune_queries: <boolean> | default = false]\n\n# (advanced) How many series a single sharded partial query should load at most.\n# This is not a strict requirement guaranteed to be honoured by query sharding,\n# but a hint given to the query sharding when the query execution is initially\n# planned. 0 to disable cardinality-based hints.\n# CLI flag: -query-frontend.query-sharding-target-series-per-shard\n[query_sharding_target_series_per_shard: <int> | default = 0]\n\n# (experimental) True to enable sharding of active series queries.\n# CLI flag: -query-frontend.shard-active-series-queries\n[shard_active_series_queries: <boolean> | default = false]\n\n# (experimental) Set to true to use the zero-allocation response decoder for\n# active series queries.\n# CLI flag: -query-frontend.use-active-series-decoder\n[use_active_series_decoder: <boolean> | default = false]\n\n# Format to use when retrieving query results from queriers. Supported values:\n# json, protobuf\n# CLI flag: -query-frontend.query-result-response-format\n[query_result_response_format: <string> | default = \"protobuf\"]\n\n# (advanced) URL of downstream Prometheus.\n# CLI flag: -query-frontend.downstream-url\n[downstream_url: <string> | default = \"\"]\n\nclient_cluster_validation:\n  # (experimental) Optionally define the cluster validation label.\n  # CLI flag: -query-frontend.client-cluster-validation.label\n  [label: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Health Check Handler Implementation\nDESCRIPTION: Implementation of a simple health check endpoint that returns a JSON response indicating the service status.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\npackage main\n\nfunc HealthCheckHandler(w http.ResponseWriter, r *http.Request) {\n    // A very simple health check.\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(http.StatusOK)\n\n    // In the future we could report back on the status of our DB, or our cache\n    // (e.g. Redis) by performing a simple PING, and include them in the response.\n    io.WriteString(w, `{\"alive\": true}`)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/health\", HealthCheckHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Group Matching with Regexp2\nDESCRIPTION: This Go code snippet shows how to obtain detailed match groups using Regexp2's FindStringMatch method. Required dependencies include the Regexp2 package. Key parameters are the regex pattern and input string, with expected output detailing matched groups and captures. It explains the group and capture retrieval mechanism.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif m, _ := re.FindStringMatch(`Something to match`); m != nil {\n    // the whole match is always group 0\n    fmt.Printf(\"Group 0: %v\\n\", m.String())\n\n    // you can get all the groups too\n    gps := m.Groups()\n\n    // a group can be captured multiple times, so each cap is separately addressable\n    fmt.Printf(\"Group 1, first capture\", gps[1].Captures[0].String())\n    fmt.Printf(\"Group 1, second capture\", gps[1].Captures[1].String())\n}\n```\n\n----------------------------------------\n\nTITLE: Sending OTLP Metrics to Grafana Mimir Distributor\nDESCRIPTION: This endpoint is the entrypoint for OTLP HTTP. It accepts a POST request with Protocol Buffers encoded data, optionally compressed with GZIP. Authentication is required.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /otlp/v1/metrics\n```\n\n----------------------------------------\n\nTITLE: Querier: Streaming Chunks Per Ingester Buffer Size Configuration\nDESCRIPTION: Configures the number of series to buffer per ingester when streaming chunks from ingesters. This parameter affects the memory usage and performance of the querier during streaming operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n\"# (advanced) Number of series to buffer per ingester when streaming chunks from\\n# ingesters.\\n# CLI flag: -querier.streaming-chunks-per-ingester-buffer-size\\n[streaming_chunks_per_ingester_series_buffer_size: <int> | default = 256]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Object Storage in YAML\nDESCRIPTION: YAML configuration for Google Cloud Storage object store including bucket settings, authentication, and HTTP configuration options.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntype: GCS\nconfig:\n  bucket: \"\"\n  service_account: \"\"\n  use_grpc: false\n  grpc_conn_pool_size: 0\n  http_config:\n    idle_conn_timeout: 0s\n    response_header_timeout: 0s\n    insecure_skip_verify: false\n    tls_handshake_timeout: 0s\n    expect_continue_timeout: 0s\n    max_idle_conns: 0\n    max_idle_conns_per_host: 0\n    max_conns_per_host: 0\n    tls_config:\n      ca_file: \"\"\n      cert_file: \"\"\n      key_file: \"\"\n      server_name: \"\"\n      insecure_skip_verify: false\n    disable_compression: false\n  chunk_size_bytes: 0\nprefix: \"\"\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Objects with JMESPath in Go\nDESCRIPTION: Shows how to extract an entire nested object using JMESPath. The example queries for the 'bar' object within the 'foo' object, returning the complete nested structure.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo.bar\", data)\nresult = { \"baz\": [ 0, 1, 2, 3, 4 ] }\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Configuration\nDESCRIPTION: This YAML snippet shows how to configure Thanos to use Azure Blob Storage. The configuration includes parameters for the storage account, account key or connection string, container name, and other optional settings like endpoints, managed identity configuration, and HTTP settings. `mdox-exec` is used to generate configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml mdox-exec=\"go run scripts/cfggen/main.go --name=azure.Config\"\ntype: AZURE\nconfig:\n  storage_account: \"\"\n  storage_account_key: \"\"\n  storage_connection_string: \"\"\n  storage_create_container: false\n  container: \"\"\n  endpoint: \"\"\n  user_assigned_id: \"\"\n  max_retries: 0\n  reader_config:\n    max_retry_requests: 0\n  pipeline_config:\n    max_tries: 0\n    try_timeout: 0s\n    retry_delay: 0s\n    max_retry_delay: 0s\n  http_config:\n    idle_conn_timeout: 0s\n    response_header_timeout: 0s\n    insecure_skip_verify: false\n    tls_handshake_timeout: 0s\n    expect_continue_timeout: 0s\n    max_idle_conns: 0\n    max_idle_conns_per_host: 0\n    max_conns_per_host: 0\n    tls_config:\n      ca_file: \"\"\n      cert_file: \"\"\n      key_file: \"\"\n      server_name: \"\"\n      insecure_skip_verify: false\n    disable_compression: false\n  msi_resource: \"\"\nprefix: \"\"\n```\n```\n\n----------------------------------------\n\nTITLE: Example Configuration B with Null Processors (YAML)\nDESCRIPTION: This YAML configuration sets the 'processors' field to null. When merged with configuration A, this effectively removes the 'nop' processor defined in A.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"processors:\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Kuberesolver in Go\nDESCRIPTION: This snippet demonstrates how to import the kuberesolver module and register it with gRPC. It also shows how to use it when dialing a service.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sercand/kuberesolver/v6/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Import the module\nimport \"github.com/sercand/kuberesolver/v6\"\n\t\n// Register kuberesolver to grpc before calling grpc.Dial\nkuberesolver.RegisterInCluster()\n\n// it is same as\nresolver.Register(kuberesolver.NewBuilder(nil /*custom kubernetes client*/ , \"kubernetes\"))\n\n// if schema is 'kubernetes' then grpc will use kuberesolver to resolve addresses\ncc, err := grpc.Dial(\"kubernetes:///service.namespace:portname\", opts...)\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Configuration Parameters\nDESCRIPTION: Experimental settings for OpenTelemetry metric ingestion and resource attribute handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_126\n\nLANGUAGE: yaml\nCODE:\n```\notel_metric_suffixes_enabled: <boolean> | default = false\notel_created_timestamp_zero_ingestion_enabled: <boolean> | default = false\npromote_otel_resource_attributes: <string> | default = \"\"\notel_keep_identifying_resource_attributes: <boolean> | default = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration example for setting up Google Cloud Storage as the backend for Grafana Mimir. Includes service account configuration and separate bucket settings for blocks, alertmanager, and ruler storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-object-storage-backend.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncommon:\n  storage:\n    backend: gcs\n    gcs:\n      service_account: |\n        {\n          \"type\": \"service_account\",\n          \"project_id\": \"my-project\",\n          \"private_key_id\": \"1234abc\",\n          \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n\\n-----END PRIVATE KEY-----\\n\",\n          \"client_email\": \"test@my-project.iam.gserviceaccount.com\",\n          \"client_id\": \"5678\",\n          \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n          \"token_uri\": \"https://oauth2.googleapis.com/token\",\n          \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n          \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/test%40my-project.iam.gserviceaccount.com\"\n        }\n\nblocks_storage:\n  gcs:\n    bucket_name: mimir-blocks\n\nalertmanager_storage:\n  gcs:\n    bucket_name: mimir-alertmanager\n\nruler_storage:\n  gcs:\n    bucket_name: mimir-ruler\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client TLS Cipher Suites\nDESCRIPTION: This setting overrides the default list of TLS cipher suites used for secure communication. It allows specifying a custom list of ciphers to use.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_95\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Override the default cipher suite list (separated by commas).\n  # Allowed values:\n  #\n  # Secure Ciphers:\n  # - TLS_AES_128_GCM_SHA256\n  # - TLS_AES_256_GCM_SHA384\n  # - TLS_CHACHA20_POLY1305_SHA256\n  # - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n  # - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n  # - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n  # - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n  # - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n  # - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n  # - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n  # - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n  # - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n  # - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n  #\n  # Insecure Ciphers:\n  # - TLS_RSA_WITH_RC4_128_SHA\n  # - TLS_RSA_WITH_3DES_EDE_CBC_SHA\n  # - TLS_RSA_WITH_AES_128_CBC_SHA\n  # - TLS_RSA_WITH_AES_256_CBC_SHA\n  # - TLS_RSA_WITH_AES_128_CBC_SHA256\n  # - TLS_RSA_WITH_AES_128_GCM_SHA256\n  # - TLS_RSA_WITH_AES_256_GCM_SHA384\n  # - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n  # - TLS_ECDHE_RSA_WITH_RC4_128_SHA\n  # - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n  # - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n  # - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n  # CLI flag: -alertmanager.alertmanager-client.tls-cipher-suites\n  [tls_cipher_suites: <string> | default = \"\"]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Storage Backend for Ruler\nDESCRIPTION: This code snippet shows how to configure the local storage backend for the ruler component using CLI flags. Local storage reads Prometheus recording rules from the local filesystem.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/ruler/index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n-ruler-storage.backend=local\n-ruler-storage.local.directory=/tmp/rules\n```\n\n----------------------------------------\n\nTITLE: Creating an etcd Client Connection\nDESCRIPTION: Code to initialize a new etcd client with specified endpoints and timeout. This creates a gRPC connection to the etcd cluster that should be properly closed after use.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncli, err := clientv3.New(clientv3.Config{\n\tEndpoints:   []string{\"localhost:2379\", \"localhost:22379\", \"localhost:32379\"},\n\tDialTimeout: 5 * time.Second,\n})\nif err != nil {\n\t// handle error!\n}\ndefer cli.Close()\n```\n\n----------------------------------------\n\nTITLE: Defining the Editable Interface in Go\nDESCRIPTION: The Editable interface is defined to provide a method for retrieving a message's ID and chat ID, enabling the editing of messages stored in a database. Any struct implementing this interface can be easily edited within Telegram. It is particularly useful for database models of messages, allowing for simplified edits based on stored message identifiers.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Editable is an interface for all objects that\n// provide \"message signature\", a pair of 32-bit\n// message ID and 64-bit chat ID, both required\n// for edit operations.\n//\n// Use case: DB model struct for messages to-be\n// edited with, say two columns: msg_id,chat_id\n// could easily implement MessageSig() making\n// instances of stored messages editable.\ntype Editable interface {\n\t// MessageSig is a \"message signature\".\n\t//\n\t// For inline messages, return chatID = 0.\n\tMessageSig() (messageID int, chatID int64)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking TSDB Index Health\nDESCRIPTION: Example of using tsdb-index-health tool to generate a health report for a TSDB block's index.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntsdb-index-health ./01FTT67BBYH23T8870BBF77YZX\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Span in Go OpenTracing\nDESCRIPTION: Shows how to create a root span with no parent or causal reference. This is typically used to start a new trace at the entry point of an application or service.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc xyz() {\n    ...\n    sp := opentracing.StartSpan(\"operation_name\")\n    defer sp.Finish()\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as a Replacement for Go's flag Package\nDESCRIPTION: This snippet shows how to import pflag as a drop-in replacement for Go's native flag package. It allows existing code to continue functioning without changes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Awareness in Grafana Mimir\nDESCRIPTION: Initial configuration to enable multi-zone ingesters and store-gateways, which is a prerequisite for read-write mode.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    multi_zone_ingester_enabled: true,\n    multi_zone_store_gateway_enabled: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Mimir Autoscaling with Jsonnet\nDESCRIPTION: This snippet demonstrates how to enable autoscaling for Mimir components including queriers, ruler queriers, and distributors. It sets the Prometheus URL and configures min/max replicas for each component.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-autoscaling.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\nlocal mimir = import 'mimir/mimir.libsonnet';\n\nmimir {\n    _config+:: {\n        autoscaling_prometheus_url: 'http://prometheus.default:9090/prometheus',\n        // Enable queriers autoscaling.\n        autoscaling_querier_enabled: true,\n        autoscaling_querier_min_replicas: 10,\n        autoscaling_querier_max_replicas: 40,\n        // Enable ruler queriers autoscaling.\n        autoscaling_ruler_querier_enabled: true,\n        autoscaling_ruler_querier_min_replicas: 10,\n        autoscaling_ruler_querier_max_replicas: 40,\n        // Enable distributor autoscaling.\n        autoscaling_distributor_enabled: true,\n        autoscaling_distributor_min_replicas: 10,\n        autoscaling_distributor_max_replicas: 40,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration block for connecting to OpenStack Object Storage (Swift) object storage backend in Grafana Mimir. This block uses the CLI flags prefix 'blocks-storage'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_133\n\nLANGUAGE: toml\nCODE:\n```\n[swift: <swift_storage_backend>]\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: Demonstrates how to check if a version meets specified constraints using the NewConstraint and Check functions. This example checks if version 1.3 satisfies the constraint '>= 1.2.3'.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\">= 1.2.3\")\nif err != nil {\n    // Handle constraint not being parsable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parsable.\n}\n// Check if the version meets the constraints. The a variable will be true.\na := c.Check(v)\n```\n\n----------------------------------------\n\nTITLE: Custom CORS Configuration in Go\nDESCRIPTION: Example demonstrating how to create a CORS middleware with custom configuration options including allowed origins, credentials, and debug mode.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/rs/cors/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := cors.New(cors.Options{\n    AllowedOrigins: []string{\"http://foo.com\", \"http://foo.com:8080\"},\n    AllowCredentials: true,\n    // Enable Debugging for testing, consider disabling in production\n    Debug: true,\n})\n\n// Insert the middleware\nhandler = c.Handler(handler)\n```\n\n----------------------------------------\n\nTITLE: Large-Scale k6 Load Test Configuration\nDESCRIPTION: Command to run a large-scale load test simulating 1 billion active series with specified write and read rates.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/k6/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nk6 run load-testing-with-k6.js \\\n    -e K6_WRITE_HOSTNAME=\"mimir:80\" \\\n    -e K6_READ_HOSTNAME=\"mimir:80\" \\\n    -e K6_WRITE_REQUEST_RATE=\"50000\" \\\n    -e K6_WRITE_SERIES_PER_REQUEST=\"20000\" \\\n    -e K6_READ_REQUEST_RATE=\"200\" \\\n    -e RAMP_UP_MIN=\"2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration for using local filesystem as an object storage backend in Grafana Mimir. Can be used with different prefixes including alertmanager-storage, blocks-storage, common.storage, and ruler-storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_151\n\nLANGUAGE: yaml\nCODE:\n```\n# Local filesystem storage directory.\n# CLI flag: -<prefix>.filesystem.dir\n[dir: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC TLS Settings in Grafana Mimir\nDESCRIPTION: Complete configuration for gRPC TLS settings including certificate paths, key paths, client authentication settings, and CA paths. Similar to HTTP TLS but applied to gRPC connections.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ngrpc_tls_config:\n  # Server TLS certificate. This configuration parameter is YAML only.\n  [cert: <string> | default = \"\"]\n\n  # Server TLS key. This configuration parameter is YAML only.\n  [key: <string> | default = \"\"]\n\n  # Root certificate authority used to verify client certificates. This\n  # configuration parameter is YAML only.\n  [client_ca: <string> | default = \"\"]\n\n  # (advanced) GRPC TLS server cert path.\n  # CLI flag: -server.grpc-tls-cert-path\n  [cert_file: <string> | default = \"\"]\n\n  # (advanced) GRPC TLS server key path.\n  # CLI flag: -server.grpc-tls-key-path\n  [key_file: <string> | default = \"\"]\n\n  # (advanced) GRPC TLS Client Auth type.\n  # CLI flag: -server.grpc-tls-client-auth\n  [client_auth_type: <string> | default = \"\"]\n\n  # (advanced) GRPC TLS Client CA path.\n  # CLI flag: -server.grpc-tls-ca-path\n  [client_ca_file: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Claims Interface in Go\nDESCRIPTION: This code snippet defines the Claims interface, specifying methods to retrieve various claims related to JWT such as expiration time and issuer. The interface ensures that claims can be correctly handled to enhance token validation. It serves as a blueprint for implementing different claims in JWT.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Claims interface {\n\tGetExpirationTime() (*NumericDate, error)\n\tGetIssuedAt() (*NumericDate, error)\n\tGetNotBefore() (*NumericDate, error)\n\tGetIssuer() (string, error)\n\tGetSubject() (string, error)\n\tGetAudience() (ClaimStrings, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Google Cloud Storage Configuration\nDESCRIPTION: Minimal configuration for Google Cloud Storage when running in GCP with pre-configured credentials.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-object-storage-backend.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    storage_backend: 'gcs',\n    blocks_storage_bucket_name: 'blocks-bucket',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository\nDESCRIPTION: This snippet shows how to add the Grafana Helm repository to your Helm installation, allowing access to the necessary charts for deploying Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Enabling Zone-Awareness on Read Path for Mimir Ingesters\nDESCRIPTION: This YAML snippet enables zone-awareness on both read and write paths for Mimir ingesters. It's a crucial step in completing the migration to zone-aware operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n      writePath: true\n      readPath: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Exponential Histogram Aggregation in Go\nDESCRIPTION: This snippet shows how to set up aggregation for an exponential histogram using the OpenTelemetry SDK in Go. It specifies the maximum size and scale for the histogram.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/send/otel-exponential-histograms/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nAggregation: metric.AggregationBase2ExponentialHistogram{\n\t\tMaxSize:  160,\n\t\tMaxScale: 20,\n\t}\n```\n\n----------------------------------------\n\nTITLE: Tencent COS Configuration\nDESCRIPTION: This YAML snippet provides an example configuration for using Tencent Cloud Object Storage (COS) with Thanos.  It requires the bucket, region, app ID, and either the endpoint or the secret key and secret ID for authentication. It also includes optional HTTP configuration. `mdox-exec` is used to generate configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml mdox-exec=\"go run scripts/cfggen/main.go --name=cos.Config\"\ntype: COS\nconfig:\n  bucket: \"\"\n  region: \"\"\n  app_id: \"\"\n  endpoint: \"\"\n  secret_key: \"\"\n  secret_id: \"\"\n  http_config:\n    idle_conn_timeout: 1m30s\n    response_header_timeout: 2m\n    insecure_skip_verify: false\n    tls_handshake_timeout: 10s\n    expect_continue_timeout: 1s\n    max_idle_conns: 100\n    max_idle_conns_per_host: 100\n    max_conns_per_host: 0\n    tls_config:\n      ca_file: \"\"\n      cert_file: \"\"\n      key_file: \"\"\n      server_name: \"\"\n      insecure_skip_verify: false\n    disable_compression: false\nprefix: \"\"\n```\n```\n\n----------------------------------------\n\nTITLE: Analyzing TSDB Symbols with tsdb-symbols\nDESCRIPTION: This command executes the `tsdb-symbols` tool to analyze a specific TSDB block (specified by its ID: `01FTT67BBYH23T8870BBF77YZX`). The `-shard-count` flag is set to 4, indicating that the tool should perform a series sharding analysis assuming the data will be split into 4 shards. The tool outputs various statistics about the symbols in the block, including size, count, and distribution across shards.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"$ tsdb-symbols -shard-count=4 01FTT67BBYH23T8870BBF77YZX\"\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Response Size for Active Series Queries in YAML\nDESCRIPTION: Sets the maximum response size in bytes for active series queries using the -querier.active-series-results-max-size-bytes CLI flag on queriers.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n-querier.active-series-results-max-size-bytes: 1000000\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant-Specific Exemplar Limits in Grafana Mimir Runtime Config YAML\nDESCRIPTION: This snippet demonstrates how to configure exemplar limits for a specific tenant in the Grafana Mimir runtime configuration file. It sets a limit of 100,000 exemplars for a tenant named 'tenant-a'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/use-exemplars/store-exemplars.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  \"tenant-a\":\n    max_global_exemplars_per_user: 100000\n```\n\n----------------------------------------\n\nTITLE: Loading Rules and Alerts\nDESCRIPTION: Commands to load monitoring rules and alerts into Mimir using mimirtool.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/configurations/grafanacon-2022/index.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules load --address=http://mimir-helm/ --id=anonymous ./rules.yaml\n\nmimirtool rules load --address=http://mimir-helm/ --id=anonymous ./alerts.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTracing Server Interceptor\nDESCRIPTION: Example demonstrating how to initialize a gRPC server with OpenTracing interceptors for both unary and streaming calls. Requires an OpenTracing Tracer instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing-contrib/go-grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// You must have some sort of OpenTracing Tracer instance on hand.\nvar tracer opentracing.Tracer = ...\n...\n\n// Initialize the gRPC server.\ns := grpc.NewServer(\n    ... // other options\n    grpc.UnaryInterceptor(\n        otgrpc.OpenTracingServerInterceptor(tracer)),\n    grpc.StreamInterceptor(\n        otgrpc.OpenTracingStreamServerInterceptor(tracer)))\n\n// All future RPC activity involving `s` will be automatically traced.\n```\n\n----------------------------------------\n\nTITLE: Serving Single Page Applications with Gorilla Mux in Go\nDESCRIPTION: This example code demonstrates serving a Single Page Application (SPA) alongside API endpoints using gorilla/mux. It utilizes an SPA handler for static file serving and a mux router to efficiently route API requests.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n)\n\ntype spaHandler struct {\n\tstaticPath string\n\tindexPath  string\n}\n\nfunc (h spaHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tpath := filepath.Join(h.staticPath, r.URL.Path)\n\n\tfi, err := os.Stat(path)\n\tif os.IsNotExist(err) || fi.IsDir() {\n\t\thttp.ServeFile(w, r, filepath.Join(h.staticPath, h.indexPath))\n\t\treturn\n\t}\n\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n\t}\n\n\thttp.FileServer(http.Dir(h.staticPath)).ServeHTTP(w, r)\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\trouter.HandleFunc(\"/api/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\tjson.NewEncoder(w).Encode(map[string]bool{\"ok\": true})\n\t})\n\n\tspa := spaHandler{staticPath: \"build\", indexPath: \"index.html\"}\n\trouter.PathPrefix(\"/\").Handler(spa)\n\n\tsrv := &http.Server{\n\t\tHandler: router,\n\t\tAddr:    \"127.0.0.1:8000\",\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\n\tlog.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Reuse Implementation\nDESCRIPTION: Example implementation of buffer reuse using sync.Pool to improve performance\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype buffer struct {\n    data []byte\n}\n\nvar bufPool = sync.Pool{\n    New: func() interface{} {\n        return &buffer{data: make([]byte, 0, 1024)}\n    },\n}\n\nbuf := bufPool.Get().(*buffer)\ndata := encode(buf.data) // reuse buf.data\n\nnewBuf := make([]byte, len(data))\ncopy(newBuf, buf)\n\nbuf.data = data\nbufPool.Put(buf)\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository\nDESCRIPTION: Commands to add and update the Grafana Helm charts repository.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/configurations/grafanacon-2022/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Querier: Minimize Ingester Requests Hedging Delay Configuration\nDESCRIPTION: Specifies the delay before initiating requests to further ingesters when request minimization is enabled and the initial set of ingesters haven't all responded. This setting is ignored if `-querier.minimize-ingester-requests` is not enabled.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n\"# (advanced) Delay before initiating requests to further ingesters when request\\n# minimization is enabled and the initially selected set of ingesters have not\\n# all responded. Ignored if -querier.minimize-ingester-requests is not enabled.\\n# CLI flag: -querier.minimize-ingester-requests-hedging-delay\\n[minimize_ingester_requests_hedging_delay: <duration> | default = 3s]\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Grafana Mimir Repository - Bash\nDESCRIPTION: This snippet demonstrates how to clone the Grafana Mimir repository from GitHub and navigate to the tutorial directory for further instructions.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/play-with-grafana-mimir/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grafana/mimir.git\ncd mimir\ncd docs/sources/mimir/get-started/play-with-grafana-mimir/\n```\n\n----------------------------------------\n\nTITLE: Deploying GEM Federation-Frontend using Helm\nDESCRIPTION: Installs the GEM federation-frontend using Helm with the previously created values file. This command deploys the federation-frontend component in the 'federation-frontend-demo' namespace.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-gem-federation-frontend.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install federation-frontend grafana/mimir-distributed -f federation-frontend.yaml -n federation-frontend-demo\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Mimir with Docker - Bash\nDESCRIPTION: This command initializes the local setup of Grafana Mimir along with its dependencies using Docker Compose, ensuring all necessary services are running.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/play-with-grafana-mimir/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables with Koanf in Go\nDESCRIPTION: This snippet demonstrates how to load configuration from a JSON file and merge it with environment variables using Koanf. It includes a custom function to transform environment variable names.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/env\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use . as the key path delimiter. This can be / or anything.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load environment variables and merge into the loaded config.\n\t// \"MYVAR\" is the prefix to filter the env vars by.\n\t// \".\" is the delimiter used to represent the key hierarchy in env vars.\n\t// The (optional, or can be nil) function can be used to transform\n\t// the env var names, for instance, to lowercase them.\n\t//\n\t// For example, env vars: MYVAR_TYPE and MYVAR_PARENT1_CHILD1_NAME\n\t// will be merged into the \"type\" and the nested \"parent1.child1.name\"\n\t// keys in the config file here as we lowercase the key, \n\t// replace `_` with `.` and strip the MYVAR_ prefix so that \n\t// only \"parent1.child1.name\" remains.\n\tk.Load(env.Provider(\"MYVAR_\", \".\", func(s string) string {\n\t\treturn strings.Replace(strings.ToLower(\n\t\t\tstrings.TrimPrefix(s, \"MYVAR_\")), \"_\", \".\", -1)\n\t}), nil)\n\n\tfmt.Println(\"name is = \", k.String(\"parent1.child1.name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Quickstart Example for go-redis Usage in Go\nDESCRIPTION: A basic example demonstrating how to create a Redis client, set a key-value pair, and retrieve values using go-redis.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-redis/redis/v8/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/go-redis/redis/v8\"\n    \"fmt\"\n)\n\nvar ctx = context.Background()\n\nfunc ExampleClient() {\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n    })\n\n    err := rdb.Set(ctx, \"key\", \"value\", 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, \"key\").Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"key\", val)\n\n    val2, err := rdb.Get(ctx, \"key2\").Result()\n    if err == redis.Nil {\n        fmt.Println(\"key2 does not exist\")\n    } else if err != nil {\n        panic(err)\n    } else {\n        fmt.Println(\"key2\", val2)\n    }\n    // Output: key value\n    // key2 does not exist\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Runtime Configuration in Grafana Mimir\nDESCRIPTION: This endpoint displays the runtime configuration currently applied to Grafana Mimir in YAML format, including default values. It requires the -runtime-config.file option to be configured.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /runtime_config\n```\n\n----------------------------------------\n\nTITLE: Configuring TSDB Settings in Grafana Mimir\nDESCRIPTION: This YAML configuration block defines various TSDB-related settings for Grafana Mimir, including out-of-order sample handling, caching options for postings, and head compaction behavior. It sets parameters like cache sizes, TTLs, and thresholds for early compaction.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_139\n\nLANGUAGE: yaml\nCODE:\n```\nbigger_out_of_order_blocks_for_old_samples: <boolean> | default = false\nseries_hash_cache_max_size_bytes: <int> | default = 367001600\nout_of_order_capacity_max: <int> | default = 32\nhead_postings_for_matchers_cache_ttl: <duration> | default = 10s\nhead_postings_for_matchers_cache_size: <int> | default = 100\nhead_postings_for_matchers_cache_max_bytes: <int> | default = 104857600\nhead_postings_for_matchers_cache_force: <boolean> | default = false\nblock_postings_for_matchers_cache_ttl: <duration> | default = 10s\nblock_postings_for_matchers_cache_size: <int> | default = 100\nblock_postings_for_matchers_cache_max_bytes: <int> | default = 104857600\nblock_postings_for_matchers_cache_force: <boolean> | default = false\nearly_head_compaction_min_in_memory_series: <int> | default = 0\nearly_head_compaction_min_estimated_series_reduction_percentage: <int> | default = 15\ntimely_head_compaction_enabled: <boolean> | default = false\n```\n\n----------------------------------------\n\nTITLE: Defining and Building Named Routes in Gorilla Mux (Go)\nDESCRIPTION: Demonstrates how to define named routes and build URLs for them using the Gorilla Mux router. It covers simple path variables, host variables, and query parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"article\")\n\nurl, err := r.Get(\"article\").URL(\"category\", \"technology\", \"id\", \"42\")\n```\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"{subdomain}.example.com\").\n  Path(\"/articles/{category}/{id:[0-9]+}\").\n  Queries(\"filter\", \"{filter}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// url.String() will be \"http://news.example.com/articles/technology/42?filter=gorilla\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\",\n                                 \"filter\", \"gorilla\")\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Backoff on Rate Limits\nDESCRIPTION: This boolean setting enables or disables automatic backoff and retry mechanisms when the gRPC client encounters rate limits. Enabling this feature can improve resilience to temporary rate limiting.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_83\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Enable backoff and retry when we hit rate limits.\n  # CLI flag: -alertmanager.alertmanager-client.backoff-on-ratelimits\n  [backoff_on_ratelimits: <boolean> | default = false]\n\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Configuration Parameters\nDESCRIPTION: Settings for Alertmanager including firewall rules, rate limits, size limits and notification hooks.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_125\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager_receivers_firewall_block_cidr_networks: <string> | default = \"\"\nalertmanager_receivers_firewall_block_private_addresses: <boolean> | default = false\nalertmanager_notification_rate_limit: <float> | default = 0\n```\n\n----------------------------------------\n\nTITLE: Compactor Configuration Parameters\nDESCRIPTION: Settings for block retention, splitting, merging and upload validation in the Grafana Mimir compactor.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_123\n\nLANGUAGE: yaml\nCODE:\n```\ncompactor_blocks_retention_period: <duration> | default = 0s\ncompactor_split_and_merge_shards: <int> | default = 0\ncompactor_split_groups: <int> | default = 1\ncompactor_tenant_shard_size: <int> | default = 0\n```\n\n----------------------------------------\n\nTITLE: Ruler Configuration Parameters - YAML\nDESCRIPTION: Configuration options for Mimir's ruler component including evaluation delays, sharding, and rule limits per tenant and namespace.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_121\n\nLANGUAGE: yaml\nCODE:\n```\nruler_evaluation_delay_duration: <duration> | default = 1m\nruler_tenant_shard_size: <int> | default = 0\nruler_max_rules_per_rule_group: <int> | default = 20\nruler_max_rule_groups_per_tenant: <int> | default = 70\nruler_recording_rules_evaluation_enabled: <boolean> | default = true\nruler_alerting_rules_evaluation_enabled: <boolean> | default = true\nruler_sync_rules_on_changes_enabled: <boolean> | default = true\nruler_max_rules_per_rule_group_by_namespace: <map of string to int> | default = {}\nruler_max_rule_groups_per_tenant_by_namespace: <map of string to int> | default = {}\nruler_protected_namespaces: <string> | default = \"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Alertmanager Configuration with Output Directory\nDESCRIPTION: Command to retrieve the Alertmanager configuration and output it to a specified directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager get --output-dir=\"am\"\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Store Mirroring\nDESCRIPTION: Step 2 configuration that enables mirroring between primary (Consul) and secondary (memberlist) stores.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-consul-to-memberlist.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    memberlist_ring_enabled: true,\n    multikv_migration_enabled: true,\n    multikv_mirror_enabled: true,  // Changed in this step.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Mimir with Helm\nDESCRIPTION: Command to install Grafana Mimir version 3.0.0 in the 'test' namespace using Helm.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n test install mimir grafana/mimir-distributed --version 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Reflection Elimination Implementation\nDESCRIPTION: Example showing how to eliminate reflection using type information address for better performance\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype emptyInterface struct {\n    typ unsafe.Pointer\n    ptr unsafe.Pointer\n}\n\nvar typeToEncoder = map[uintptr]func(unsafe.Pointer)([]byte, error){}\n\nfunc Marshal(v interface{}) ([]byte, error) {\n    iface := (*emptyInterface)(unsafe.Pointer(&v)\n    typeptr := uintptr(iface.typ)\n    if enc, exists := typeToEncoder[typeptr]; exists {\n        return enc(iface.ptr)\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structured Logging Example in Go\nDESCRIPTION: Demonstrates the difference between unstructured and structured logging approaches. Shows how to convert traditional printf-style logging to key-value structured logging.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Unstructured\nlog.Printf(\"HTTP server listening on %s\", addr)\n\n// Structured\nlogger.Log(\"transport\", \"HTTP\", \"addr\", addr, \"msg\", \"listening\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Read Path Limits in YAML\nDESCRIPTION: YAML configuration example showing how to set CPU and memory utilization limits for Grafana Mimir ingester read path. Sets CPU limit to 0.8 cores and memory limit to 16 GiB, above which read requests will be rejected.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-resource-utilization-based-ingester-read-path-limiting.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  # Configure ingester to reject read requests when average CPU utilization is >= 0.8 cores\n  read_path_cpu_utilization_limit: 0.8\n  # Configure ingester to reject read requests when memory utilization is >= 16 GiB\n  read_path_memory_utilization_limit: 17179869184\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Blob Client in azblob\nDESCRIPTION: Creates a new Azure Blob storage client using the simplified constructor that takes a URL string, credentials, and optional client options.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager Storage in Mimir\nDESCRIPTION: Configuration options for the Alertmanager storage backend, including filesystem storage and path settings for alertmanager configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_108\n\nLANGUAGE: yaml\nCODE:\n```\n# The CLI flags prefix for this block configuration is: alertmanager-storage\n[filesystem: <filesystem_storage_backend>]\n\n# Prefix for all objects stored in the backend storage. For simplicity, it may\n# only contain digits and English alphabet letters.\n# CLI flag: -alertmanager-storage.storage-prefix\n[storage_prefix: <string> | default = \"\"]\n\nlocal:\n  # Path at which alertmanager configurations are stored.\n  # CLI flag: -alertmanager-storage.local.path\n  [path: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Ruler Configuration in Jsonnet\nDESCRIPTION: Basic configuration to enable the ruler component and specify its storage bucket name. The ruler is optional and needs explicit enablement.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-ruler.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    ruler_enabled: true,\n    ruler_storage_bucket_name: 'ruler-bucket-name',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Carrier Interfaces in Go OpenTelemetry SDK\nDESCRIPTION: Added Keys() method to TextMapCarrier and HeaderCarrier interfaces to adapt http.Header to these interfaces.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nKeys() method to `propagation.TextMapCarrier` and `propagation.HeaderCarrier`\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Agent Operator\nDESCRIPTION: Commands to install Grafana Agent Operator using Helm and apply the agent setup configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/configurations/grafanacon-2022/index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install agent grafana/grafana-agent-operator\n\nkubectl apply -f agent-setup.yaml\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Storage Backend\nDESCRIPTION: This option selects the backend storage to use for Alertmanager data. Supported backends include s3, gcs, azure, swift, filesystem, and local.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_107\n\nLANGUAGE: yaml\nCODE:\n```\n### alertmanager_storage\n\nThe `alertmanager_storage` block configures the alertmanager storage backend.\n\n```yaml\n# Backend storage to use. Supported backends are: s3, gcs, azure, swift,\n# filesystem, local.\n# CLI flag: -alertmanager-storage.backend\n[backend: <string> | default = \"filesystem\"]\n\n# The s3_backend block configures the connection to Amazon S3 object storage\n# backend.\n# The CLI flags prefix for this block configuration is: alertmanager-storage\n[s3: <s3_storage_backend>]\n\n# The gcs_backend block configures the connection to Google Cloud Storage object\n# storage backend.\n# The CLI flags prefix for this block configuration is: alertmanager-storage\n[gcs: <gcs_storage_backend>]\n\n# The azure_storage_backend block configures the connection to Azure object\n# storage backend.\n# The CLI flags prefix for this block configuration is: alertmanager-storage\n[azure: <azure_storage_backend>]\n\n# The swift_storage_backend block configures the connection to OpenStack Object\n# Storage (Swift) object storage backend.\n# The CLI flags prefix for this block configuration is: alertmanager-storage\n[swift: <swift_storage_backend>]\n\n# The filesystem_storage_backend block configures the usage of local file system\n# as object storage backend.\n```\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Data for Dynamic Structure Decoding\nDESCRIPTION: Sample JSON data that demonstrates the need for mapstructure. The JSON contains a 'type' field that determines the structure needed for proper decoding.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Detailed Dequeue Decision Tree in Mermaid (Full Version)\nDESCRIPTION: A comprehensive Mermaid flowchart diagram showing the complete dequeue decision tree with all its components. It illustrates the depth-first search process, decision points between query component and tenant nodes, and the shuffle sharding checks that occur during dequeuing.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/scheduler/DESIGN.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Dequeue Decision Tree (Full)\nconfig:\n  theme: default\n---\n\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\n\ngraph TB\n\n    request(((\"\\`\n    **dequeue request**\n    querierID\n    workerID\n    lastTenantIndex\n    \\`\")))\n\n    subgraph rootLayer [\"**root layer**\"]\n        queryComponentAlgo[\"\\`\n            **query component\n            node selection algorithm:**\n            select starting query component by querier-worker ID;\n            move on to next query component node only if DFS exhausted\n        \\`\"]\n        style queryComponentAlgo fill:white,stroke:lightgray,stroke-dasharray:5\n\n    root([\"**root**\"])\n    end\n    request-->root\n\n    subgraph queryComponentLayer [\"**query component layer**\"]\n        tenandShardAlgo[\"\\`\n            **tenant shuffle shard\n            node selection algorithm:**\n            select next tenant in global rotation;\n            start after lastTenantIndex,\n            move on to next tenant node if tenant not sharded to querier\n        \\`\"]\n        style tenandShardAlgo fill:white,stroke:lightgray,stroke-dasharray:5\n\n        ingester([\"\\`**ingester**\\`\"])\n        storeGateway([\"\\`**store-gateway**\\`\"])\n        both([\"\\`**ingester + store-gateway**\\`\"])\n    end\n\n        %% root~~~tqasDescribe\n        root-->|search subtree for next sharded tenant|ingester\n        ingester-->|no sharded tenant found|root\n\n        root-->|search subtree for next sharded tenant|storeGateway\n        storeGateway-->|no sharded tenant found|root\n\n        root-->|search subtree for next sharded tenant|both\n        both-->|no sharded tenant found|root\n\n\n    subgraph tenantLayer [\"**tenant layer (leaf)**\"]\n        leafAlgo[\"\\`\n        **dequeue:**\n        No further node selection at leaf node level;\n        any existing node has a non-empty queue\n        \\`\"]\n        style leafAlgo fill:white,stroke:lightgray,stroke-dasharray:5\n\n        ingester-tenant1([**tenant-1**])\n        ingester-tenant2([**tenant-2**])\n\n        storeGateway-tenant1([**tenant-1**])\n        storeGateway-tenant2([**tenant-2**])\n\n        both-tenant1([**tenant-1**])\n        both-tenant3([**tenant-3**])\n    end\n\n    ingester-->|sharded to querierID?|ingester-tenant1\n    ingester-tenant1-->|no|ingester\n    ingester-->|sharded to querierID?|ingester-tenant2\n    ingester-tenant2-->|no|ingester\n\n    storeGateway-->|sharded to querierID?|storeGateway-tenant1\n    storeGateway-tenant1-->|no|storeGateway\n    storeGateway-->|sharded to querierID?|storeGateway-tenant2\n    storeGateway-tenant2-->|no|storeGateway\n\n    both-->|sharded to querierID?|both-tenant1\n    both-tenant1-->|no|both\n    both-->|sharded to querierID?|both-tenant3\n    both-tenant3-->|no|both\n\n    dequeue-ingester-tenant1[[dequeue for ingester,  tenant1]]\n    dequeue-ingester-tenant2[[dequeue for ingester, tenant2]]\n    ingester-tenant1-->|yes|dequeue-ingester-tenant1\n    ingester-tenant2-->|yes|dequeue-ingester-tenant2\n\n    dequeue-storeGateway-tenant1[[dequeue for store-gateway, tenant1]]\n    dequeue-storeGateway-tenant2[[dequeue for store-gateway, tenant2]]\n    storeGateway-tenant1-->|yes|dequeue-storeGateway-tenant1\n    storeGateway-tenant2-->|yes|dequeue-storeGateway-tenant2\n\n    dequeue-both-tenant1[[dequeue for ingester+store-gateway,  tenant1]]\n    dequeue-both-tenant3[[dequeue for ingester+store-gateway, tenant3]]\n    both-tenant1-->|yes|dequeue-both-tenant1\n    both-tenant3-->|yes|dequeue-both-tenant3\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Server Settings in Grafana Mimir\nDESCRIPTION: Comprehensive gRPC server settings including message size limits, stream concurrency, connection idle time, keepalive settings, and worker configuration. Allows fine-tuning of gRPC performance and resource usage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) Limit on the size of a gRPC message this server can receive\n# (bytes).\n# CLI flag: -server.grpc-max-recv-msg-size-bytes\n[grpc_server_max_recv_msg_size: <int> | default = 104857600]\n\n# (advanced) Limit on the size of a gRPC message this server can send (bytes).\n# CLI flag: -server.grpc-max-send-msg-size-bytes\n[grpc_server_max_send_msg_size: <int> | default = 104857600]\n\n# (advanced) Limit on the number of concurrent streams for gRPC calls per client\n# connection (0 = unlimited)\n# CLI flag: -server.grpc-max-concurrent-streams\n[grpc_server_max_concurrent_streams: <int> | default = 100]\n\n# (advanced) The duration after which an idle connection should be closed.\n# Default: infinity\n# CLI flag: -server.grpc.keepalive.max-connection-idle\n[grpc_server_max_connection_idle: <duration> | default = 2562047h47m16.854775807s]\n\n# (advanced) The duration for the maximum amount of time a connection may exist\n# before it will be closed. Default: infinity\n# CLI flag: -server.grpc.keepalive.max-connection-age\n[grpc_server_max_connection_age: <duration> | default = 2562047h47m16.854775807s]\n\n# (advanced) An additive period after max-connection-age after which the\n# connection will be forcibly closed. Default: infinity\n# CLI flag: -server.grpc.keepalive.max-connection-age-grace\n[grpc_server_max_connection_age_grace: <duration> | default = 2562047h47m16.854775807s]\n\n# (advanced) Duration after which a keepalive probe is sent in case of no\n# activity over the connection., Default: 2h\n# CLI flag: -server.grpc.keepalive.time\n[grpc_server_keepalive_time: <duration> | default = 2h]\n\n# (advanced) After having pinged for keepalive check, the duration after which\n# an idle connection should be closed, Default: 20s\n# CLI flag: -server.grpc.keepalive.timeout\n[grpc_server_keepalive_timeout: <duration> | default = 20s]\n\n# (advanced) Minimum amount of time a client should wait before sending a\n# keepalive ping. If client sends keepalive ping more often, server will send\n# GOAWAY and close the connection.\n# CLI flag: -server.grpc.keepalive.min-time-between-pings\n[grpc_server_min_time_between_pings: <duration> | default = 10s]\n\n# (advanced) If true, server allows keepalive pings even when there are no\n# active streams(RPCs). If false, and client sends ping when there are no active\n# streams, server will send GOAWAY and close the connection.\n# CLI flag: -server.grpc.keepalive.ping-without-stream-allowed\n[grpc_server_ping_without_stream_allowed: <boolean> | default = true]\n\n# (advanced) If non-zero, configures the amount of GRPC server workers used to\n# serve the requests.\n# CLI flag: -server.grpc.num-workers\n[grpc_server_num_workers: <int> | default = 100]\n```\n\n----------------------------------------\n\nTITLE: Validating Semantic Versions Against Constraints in Go\nDESCRIPTION: This code snippet demonstrates how to validate a semantic version against a constraint using the semver package. It shows how to create a constraint, parse a version, perform validation, and handle the resulting errors.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\"<= 1.2.3, >= 1.4\")\nif err != nil {\n    // Handle constraint not being parseable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parseable.\n}\n\n// Validate a version against a constraint.\na, msgs := c.Validate(v)\n// a is false\nfor _, m := range msgs {\n    fmt.Println(m)\n\n    // Loops over the errors which would read\n    // \"1.3 is greater than 1.2.3\"\n    // \"1.3 is less than 1.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in Mimir\nDESCRIPTION: YAML configuration for connecting Grafana Mimir to Redis, setting up backend configurations for chunks, index, metadata, and results caching with Redis endpoint specifications.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-redis-cache.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    blocks_storage:\n      bucket_store:\n        chunks_cache:\n          backend: redis\n          redis:\n            endpoint: <redis-url>:6379\n        index_cache:\n          backend: redis\n          redis:\n            endpoint: <redis-url>:6379\n        metadata_cache:\n          backend: redis\n          redis:\n            endpoint: <redis-url>:6379\n    frontend:\n      cache_results: true\n      results_cache:\n        backend: redis\n        redis:\n          endpoint: <redis-url>:6379\n```\n\n----------------------------------------\n\nTITLE: Terminating a Grafana Mimir Instance\nDESCRIPTION: This command abruptly terminates one of the three Grafana Mimir instances to simulate an outage and trigger the alert.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/play-with-grafana-mimir/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose kill mimir-3\n```\n\n----------------------------------------\n\nTITLE: Anonymous Azure Blob Client Creation\nDESCRIPTION: Shows how to create an Azure Blob client for anonymous or SAS token access using the new NoCredential constructor.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClientWithNoCredential(\"<public blob or blob with SAS URL>\", nil)\n```\n\n----------------------------------------\n\nTITLE: Example Go Code Snippet from Metric API\nDESCRIPTION: Code example showing metric API interfaces referenced in changelog updates. Demonstrates MeterImpl interface supporting meter construction.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// MeterImpl interface\ntype MeterImpl interface {\n    // Methods for meter construction\n    NewMeter() Meter\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Error Values\nDESCRIPTION: Demonstrates using errors.Is to check for specific error values within a multierror. Enables precise error condition checking across multiple errors.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Enterprise Features in Helm Values\nDESCRIPTION: YAML configuration to enable the enterprise features of Grafana Enterprise Metrics in the Helm chart deployment.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-gem.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise:\n  enabled: true\n\n```\n\n----------------------------------------\n\nTITLE: Memberlist (Gossip) Configuration in YAML\nDESCRIPTION: Configuration block for Gossip memberlist settings including node naming, timeouts, gossip intervals, compression settings, cluster joining behavior and cleanup timeouts.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_115\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) Name of the node in memberlist cluster. Defaults to hostname.\n# CLI flag: -memberlist.nodename\n[node_name: <string> | default = \"\"]\n\n# (advanced) Add random suffix to the node name.\n# CLI flag: -memberlist.randomize-node-name\n[randomize_node_name: <boolean> | default = true]\n\n# (advanced) The timeout for establishing a connection with a remote node, and\n# for read/write operations.\n# CLI flag: -memberlist.stream-timeout\n[stream_timeout: <duration> | default = 2s]\n\n# (advanced) Multiplication factor used when sending out messages (factor *\n# log(N+1)).\n# CLI flag: -memberlist.retransmit-factor\n[retransmit_factor: <int> | default = 4]\n\n# (advanced) How often to use pull/push sync.\n# CLI flag: -memberlist.pullpush-interval\n[pull_push_interval: <duration> | default = 30s]\n\n# (advanced) How often to gossip.\n# CLI flag: -memberlist.gossip-interval\n[gossip_interval: <duration> | default = 200ms]\n\n# (advanced) How many nodes to gossip to.\n# CLI flag: -memberlist.gossip-nodes\n[gossip_nodes: <int> | default = 3]\n\n# (advanced) How long to keep gossiping to dead nodes, to give them chance to\n# refute their death.\n# CLI flag: -memberlist.gossip-to-dead-nodes-time\n[gossip_to_dead_nodes_time: <duration> | default = 30s]\n\n# (advanced) How soon can dead node's name be reclaimed with new address. 0 to\n# disable.\n# CLI flag: -memberlist.dead-node-reclaim-time\n[dead_node_reclaim_time: <duration> | default = 0s]\n\n# (advanced) Enable message compression. This can be used to reduce bandwidth\n# usage at the cost of slightly more CPU utilization.\n# CLI flag: -memberlist.compression-enabled\n[compression_enabled: <boolean> | default = true]\n\n# (advanced) How frequently to notify watchers when a key changes. Can reduce\n# CPU activity in large memberlist deployments. 0 to notify without delay.\n# CLI flag: -memberlist.notify-interval\n[notify_interval: <duration> | default = 0s]\n\n# Gossip address to advertise to other members in the cluster. Used for NAT\n# traversal.\n# CLI flag: -memberlist.advertise-addr\n[advertise_addr: <string> | default = \"\"]\n\n# Gossip port to advertise to other members in the cluster. Used for NAT\n# traversal.\n# CLI flag: -memberlist.advertise-port\n[advertise_port: <int> | default = 7946]\n\n# (advanced) The cluster label is an optional string to include in outbound\n# packets and gossip streams. Other members in the memberlist cluster will\n# discard any message whose label doesn't match the configured one, unless the\n# 'cluster-label-verification-disabled' configuration option is set to true.\n# CLI flag: -memberlist.cluster-label\n[cluster_label: <string> | default = \"\"]\n\n# (advanced) When true, memberlist doesn't verify that inbound packets and\n# gossip streams have the cluster label matching the configured one. This\n# verification should be disabled while rolling out the change to the configured\n# cluster label in a live memberlist cluster.\n# CLI flag: -memberlist.cluster-label-verification-disabled\n[cluster_label_verification_disabled: <boolean> | default = false]\n\n# Other cluster members to join. Can be specified multiple times. It can be an\n# IP, hostname or an entry specified in the DNS Service Discovery format.\n# CLI flag: -memberlist.join\n[join_members: <list of strings> | default = []]\n\n# (advanced) Min backoff duration to join other cluster members.\n# CLI flag: -memberlist.min-join-backoff\n[min_join_backoff: <duration> | default = 1s]\n\n# (advanced) Max backoff duration to join other cluster members.\n# CLI flag: -memberlist.max-join-backoff\n[max_join_backoff: <duration> | default = 1m]\n\n# (advanced) Max number of retries to join other cluster members.\n# CLI flag: -memberlist.max-join-retries\n[max_join_retries: <int> | default = 10]\n\n# (advanced) Abort if this node fails the fast memberlist cluster joining\n# procedure at startup. When enabled, it's guaranteed that other services,\n# depending on memberlist, have an updated view over the cluster state when\n# they're started.\n# CLI flag: -memberlist.abort-if-fast-join-fails\n[abort_if_cluster_fast_join_fails: <boolean> | default = false]\n\n# Abort if this node fails to join memberlist cluster at startup. When enabled,\n# it's not guaranteed that other services are started only after the cluster\n# state has been successfully updated; use 'abort-if-fast-join-fails' instead.\n# CLI flag: -memberlist.abort-if-join-fails\n[abort_if_cluster_join_fails: <boolean> | default = false]\n\n# (advanced) If not 0, how often to rejoin the cluster. Occasional rejoin can\n# help to fix the cluster split issue, and is harmless otherwise. For example\n# when using only few components as a seed nodes (via -memberlist.join), then\n# it's recommended to use rejoin. If -memberlist.join points to dynamic service\n# that resolves to all gossiping nodes (eg. Kubernetes headless service), then\n# rejoin is not needed.\n# CLI flag: -memberlist.rejoin-interval\n[rejoin_interval: <duration> | default = 0s]\n\n# (advanced) How long to keep LEFT ingesters in the ring.\n# CLI flag: -memberlist.left-ingesters-timeout\n[left_ingesters_timeout: <duration> | default = 5m]\n\n# (experimental) How long to keep obsolete entries in the KV store.\n# CLI flag: -memberlist.obsolete-entries-timeout\n[obsolete_entries_timeout: <duration> | default = 30s]\n\n# (advanced) Timeout for leaving memberlist cluster.\n# CLI flag: -memberlist.leave-timeout\n[leave_timeout: <duration> | default = 20s]\n\n# (advanced) Timeout for broadcasting all remaining locally-generated updates to\n# other nodes when shutting down. Only used if there are nodes left in the\n# memberlist cluster, and only applies to locally-generated updates, not to\n# broadcast messages that are result of incoming gossip updates. 0 = no timeout,\n# wait until all locally-generated updates are sent.\n# CLI flag: -memberlist.broadcast-timeout-for-local-updates-on-shutdown\n[broadcast_timeout_for_local_updates_on_shutdown: <duration> | default = 10s]\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Flag with pflag\nDESCRIPTION: This example demonstrates how to define an integer flag using pflag. It creates a flag named 'flagname' with a default value of 1234 and a help message.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Manual Timing of Function Calls in Go\nDESCRIPTION: This snippet shows how to manually time function calls using time.Since() in Go. It's used to demonstrate the discrepancy between manual timing and profiler results.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/felixge/fgprof/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstart := time.Start()\nslowNetworkRequest()\nfmt.Printf(\"slowNetworkRequest: %s\\n\", time.Since(start))\n// ...\n```\n\n----------------------------------------\n\nTITLE: Deleting Namespace via HTTP API\nDESCRIPTION: The snippet provides the HTTP DELETE method to remove all rule groups within a namespace in Grafana Mimir. The request requires the namespace to be percent-encoded and returns a 202 on success. The endpoint's functionality can be restricted by the `-ruler.enable-api` flag and requires authentication.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE /<prometheus-http-prefix>/config/v1/rules/{namespace}\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Prometheus Metrics Source in Helm Values\nDESCRIPTION: Basic configuration for setting up the Prometheus metrics source that KEDA will use for autoscaling decisions. Defines the Prometheus server address and polling interval.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-autoscaling.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkedaAutoscaling:\n  prometheusAddress: \"http://prometheus.monitoring:9090\"\n  pollingInterval: 10\n```\n\n----------------------------------------\n\nTITLE: Basic UUID Usage Example in Go\nDESCRIPTION: Demonstrates creating Version 4 UUIDs and parsing UUID strings. Shows package-level variable initialization, error handling, and basic UUID operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gofrs/uuid/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/gofrs/uuid\"\n)\n\n// Create a Version 4 UUID, panicking on error.\n// Use this form to initialize package-level variables.\nvar u1 = uuid.Must(uuid.NewV4())\n\nfunc main() {\n\t// Create a Version 4 UUID.\n\tu2, err := uuid.NewV4()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to generate UUID: %v\", err)\n\t}\n\tlog.Printf(\"generated Version 4 UUID %v\", u2)\n\n\t// Parse a UUID from a string.\n\ts := \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"\n\tu3, err := uuid.FromString(s)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to parse UUID %q: %v\", s, err)\n\t}\n\tlog.Printf(\"successfully parsed UUID %v\", u3)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MD5 SIMD Usage in Go\nDESCRIPTION: Example showing how to create an MD5 SIMD server, instantiate a hash object, compute a digest, and properly handle cleanup. Demonstrates core usage pattern including server creation, hashing, and resource management.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/md5-simd/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    // Create server\n    server := md5simd.NewServer()\n    defer server.Close()\n\n    // Create hashing object (conforming to hash.Hash)\n    md5Hash := server.NewHash()\n    defer md5Hash.Close()\n\n    // Write one (or more) blocks\n    md5Hash.Write(block)\n    \n    // Return digest\n    digest := md5Hash.Sum([]byte{})\n```\n\n----------------------------------------\n\nTITLE: Acquiring a token with azidentity in Go\nDESCRIPTION: This snippet shows how to acquire a token using azidentity, including creating a ClientSecretCredential and calling GetToken to obtain the token.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\ntk, err := cred.GetToken(\n    context.TODO(), policy.TokenRequestOptions{Scopes: []string{\"https://vault.azure.net/.default\"}},\n)\nif err == nil {\n    token := tk.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Prefix for Object Storage in Grafana Mimir\nDESCRIPTION: Configuration option for setting the prefix for all objects stored in the backend storage. The prefix may only contain digits and English alphabet letters. This can be set using the CLI flag '-blocks-storage.storage-prefix'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_135\n\nLANGUAGE: toml\nCODE:\n```\n[storage_prefix: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Example Rule Group Configuration for Grafana Mimir\nDESCRIPTION: This YAML configuration defines a rule group with a single recording rule. It demonstrates the structure required for loading rules into Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: my_namespace\ngroups:\n  - name: example\n    interval: 5m\n    rules:\n      - record: job:http_inprogress_requests:sum\n        expr: sum by (job) (http_inprogress_requests)\n```\n\n----------------------------------------\n\nTITLE: Finding Block Sizes\nDESCRIPTION: Command to determine the size of TSDB blocks for configuration purposes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfind <path/to/blocks> -name 'chunks' -printf '%s\\n' | numfmt --to=iec-i\n```\n\n----------------------------------------\n\nTITLE: Complete Grafana Alloy Configuration with Remote Write to Mimir\nDESCRIPTION: A complete Grafana Alloy configuration file that sets up self-metrics collection and remote write to Grafana Mimir, enabling Alloy to collect and forward metrics to an externally accessible Mimir instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.exporter.self \"self_metrics\" {\n}\n\nprometheus.scrape \"self_scrape\" {\n  targets    = prometheus.exporter.self.self_metrics.targets\n  forward_to = [prometheus.remote_write.mimir.receiver]\n}\n\nprometheus.remote_write \"mimir\" {\n  endpoint {\n    url = \"http://<ingress-host>/api/v1/push\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ULID Generation Example in Go\nDESCRIPTION: Example showing how to generate a ULID using a timestamp and entropy source. Uses the Monotonic entropy source to ensure correct ordering within the same millisecond.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleULID() {\n\tt := time.Unix(1000000, 0)\n\tentropy := ulid.Monotonic(rand.New(rand.NewSource(t.UnixNano())), 0)\n\tfmt.Println(ulid.MustNew(ulid.Timestamp(t), entropy))\n\t// Output: 0000XSNJG0MQJHBF4QX1EFD6Y3\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Shuffle Sharding for Mimir Queriers and Rulers\nDESCRIPTION: This YAML configuration disables shuffle sharding on the read path for Mimir queriers and rulers during the migration process. This is necessary when using shuffle sharding to ensure proper data access during the transition.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  extraArgs:\n    \"querier.shuffle-sharding-ingesters-enabled\": \"false\"\nruler:\n  extraArgs:\n    \"querier.shuffle-sharding-ingesters-enabled\": \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ring Client with Custom Hashing\nDESCRIPTION: Shows how to configure a Redis Ring client with a custom consistent hashing algorithm, allowing precise control over key distribution across cluster nodes\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-redis/redis/v8/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang/groupcache/consistenthash\"\n\nring := redis.NewRing(&redis.RingOptions{\n    NewConsistentHash: func() {\n        return consistenthash.New(100, crc32.ChecksumIEEE)\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Go Service\nDESCRIPTION: This snippet shows how to start, use, and stop the custom `exampleService` implemented in the previous snippet. It demonstrates the asynchronous startup using `StartAsync`, waiting for the service to be running using `AwaitRunning`, sending messages to the service via the `Send` method, stopping the service using `StopAsync`, and waiting for termination using `AwaitTerminated`. After termination, it highlights how to safely access the collected data (log).\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/dskit/services/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ns := newExampleServ()\ns.StartAsync(context.Background())\ns.AwaitRunning(context.Background())\n// now collect() is running\ns.Send(\"A\")\ns.Send(\"B\")\ns.Send(\"C\")\ns.StopAsync()\ns.AwaitTerminated(context.Background())\n// now service is finished, and we can access s.log\n```\n\n----------------------------------------\n\nTITLE: Using Default Fields with Logrus in Go\nDESCRIPTION: Shows how to create a logrus.Entry with default fields that are attached to all log statements, useful for consistently logging context like request_id and user_ip.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Query Frontend Results Cache: Redis Configuration\nDESCRIPTION: Configures the Redis-based caching backend. The CLI flags for this block configuration are prefixed with `query-frontend.results-cache`.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\n\"  # The redis block configures the Redis-based caching backend.\\n  # The CLI flags prefix for this block configuration is:\\n  # query-frontend.results-cache\\n  [redis: <redis>]\"\n```\n\n----------------------------------------\n\nTITLE: Consul API Usage Example in Go\nDESCRIPTION: This snippet provides a complete Go program that demonstrates how to create a Consul client, store a key-value pair, and retrieve it. It handles errors and prints the retrieved value to the console.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\n\tcapi \"github.com/hashicorp/consul/api\"\n)\n\nfunc main() {\n\t// Get a new client\n\tclient, err := capi.NewClient(capi.DefaultConfig())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Get a handle to the KV API\n\tkv := client.KV()\n\n\t// PUT a new KV pair\n\tp := &capi.KVPair{Key: \"REDIS_MAXCLIENTS\", Value: []byte(\"1000\")}\n\t_, err = kv.Put(p, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Lookup the pair\n\tpair, _, err := kv.Get(\"REDIS_MAXCLIENTS\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"KV: %v %s\\n\", pair.Key, pair.Value)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Config and DiscovererOptions Interfaces in Go\nDESCRIPTION: This snippet defines the Config interface for implementing service discovery mechanisms in Prometheus. It includes the Name() and NewDiscoverer() methods. The DiscovererOptions struct is also defined, containing fields for logging, metrics registration, and HTTP client options.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Config interface {\n\t// Name returns the name of the discovery mechanism.\n\tName() string\n\n\t// NewDiscoverer returns a Discoverer for the Config\n\t// with the given DiscovererOptions.\n\tNewDiscoverer(DiscovererOptions) (Discoverer, error)\n}\n\ntype DiscovererOptions struct {\n\tLogger *slog.Logger\n\n\t// A registerer for the Discoverer's metrics.\n\tRegisterer prometheus.Registerer\n\t\n\tHTTPClientOptions []config.HTTPClientOption\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached in Helm Values (YAML)\nDESCRIPTION: Example of the new structure for configuring Memcached instances in the Helm values after removing the Bitnami dependency. This snippet shows the reorganization of Memcached-related settings into separate sections for different caches.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmemcached:\n  # Common values shared across all memcached instances\n\nmemcachedExporter:\n  # Configuration for memcached metrics exporter\n\nchunks-cache:\n  # Configuration for chunks cache (previously under 'memcached')\n  replicas: 3\n\nindex-cache:\n  # Configuration for index cache (previously 'memcached-queries')\n  replicas: 3\n\nmetadata-cache:\n  # Configuration for metadata cache (previously 'memcached-metadata')\n  replicas: 3\n\nresults-cache:\n  # Configuration for results cache (previously 'memcached-results')\n  replicas: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Span Processor with Environment Variables in Go\nDESCRIPTION: Code snippet demonstrating how to configure the batch span processor using environment variables in the OpenTelemetry Go SDK. It lists the supported environment variables for various batch processor settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nOTEL_BSP_SCHEDULE_DELAY\nOTEL_BSP_EXPORT_TIMEOUT\nOTEL_BSP_MAX_QUEUE_SIZE\nOTEL_BSP_MAX_EXPORT_BATCH_SIZE\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Vault Integration\nDESCRIPTION: Configuration block for Vault integration with various authentication methods including AppRole, Kubernetes, UserPass, and Token. Enables fetching keys and certificates from HashiCorp Vault.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvault:\n  # (experimental) Enables fetching of keys and certificates from Vault\n  # CLI flag: -vault.enabled\n  [enabled: <boolean> | default = false]\n\n  # (experimental) Location of the Vault server\n  # CLI flag: -vault.url\n  [url: <string> | default = \"\"]\n\n  # (experimental) Location of secrets engine within Vault\n  # CLI flag: -vault.mount-path\n  [mount_path: <string> | default = \"\"]\n\n  auth:\n    # (experimental) Authentication type to use. Supported types are: approle,\n    # kubernetes, userpass, token\n    # CLI flag: -vault.auth.type\n    [type: <string> | default = \"\"]\n\n    approle:\n      # (experimental) Role ID of the AppRole\n      # CLI flag: -vault.auth.approle.role-id\n      [role_id: <string> | default = \"\"]\n\n      # (experimental) Secret ID issued against the AppRole\n      # CLI flag: -vault.auth.approle.secret-id\n      [secret_id: <string> | default = \"\"]\n\n      # (experimental) Response wrapping token if the Secret ID is response\n      # wrapped\n      # CLI flag: -vault.auth.approle.wrapping-token\n      [wrapping_token: <boolean> | default = false]\n\n      # (experimental) Path if the Vault backend was mounted using a non-default\n      # path\n      # CLI flag: -vault.auth.approle.mount-path\n      [mount_path: <string> | default = \"\"]\n\n    kubernetes:\n      # (experimental) The Kubernetes named role\n      # CLI flag: -vault.auth.kubernetes.role-name\n      [role_name: <string> | default = \"\"]\n\n      # (experimental) The Service Account JWT\n      # CLI flag: -vault.auth.kubernetes.service-account-token\n      [service_account_token: <string> | default = \"\"]\n\n      # (experimental) Path to where the Kubernetes service account token is\n      # mounted. By default it lives at\n      # /var/run/secrets/kubernetes.io/serviceaccount/token. Field will be used\n      # if the service_account_token is not specified.\n      # CLI flag: -vault.auth.kubernetes.service-account-token-path\n      [service_account_token_path: <string> | default = \"\"]\n\n      # (experimental) Path if the Vault backend was mounted using a non-default\n      # path\n      # CLI flag: -vault.auth.kubernetes.mount-path\n      [mount_path: <string> | default = \"\"]\n\n    userpass:\n      # (experimental) The userpass auth method username\n      # CLI flag: -vault.auth.userpass.username\n      [username: <string> | default = \"\"]\n\n      # (experimental) The userpass auth method password\n      # CLI flag: -vault.auth.userpass.password\n      [password: <string> | default = \"\"]\n\n      # (experimental) Path if the Vault backend was mounted using a non-default\n      # path\n      # CLI flag: -vault.auth.userpass.mount-path\n      [mount_path: <string> | default = \"\"]\n\n    token:\n      # (experimental) The token used to authenticate against Vault\n      # CLI flag: -vault.auth.token\n      [token: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Gateway in Grafana Mimir\nDESCRIPTION: YAML configuration for the store-gateway component in Grafana Mimir. Defines settings for the sharding ring which handles distribution of storage blocks across multiple store-gateway instances, including kvstore options, ring membership, and zone awareness settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_141\n\nLANGUAGE: yaml\nCODE:\n```\n# The hash ring configuration.\nsharding_ring:\n  # The key-value store used to share the hash ring across multiple instances.\n  # This option needs be set both on the store-gateway, querier and ruler when\n  # running in microservices mode.\n  kvstore:\n    # Backend storage to use for the ring. Supported values are: consul, etcd,\n    # inmemory, memberlist, multi.\n    # CLI flag: -store-gateway.sharding-ring.store\n    [store: <string> | default = \"memberlist\"]\n\n    # (advanced) The prefix for the keys in the store. Should end with a /.\n    # CLI flag: -store-gateway.sharding-ring.prefix\n    [prefix: <string> | default = \"collectors/\"]\n\n    # The consul block configures the consul client.\n    # The CLI flags prefix for this block configuration is:\n    # store-gateway.sharding-ring\n    [consul: <consul>]\n\n    # The etcd block configures the etcd client.\n    # The CLI flags prefix for this block configuration is:\n    # store-gateway.sharding-ring\n    [etcd: <etcd>]\n\n    multi:\n      # (advanced) Primary backend storage used by multi-client.\n      # CLI flag: -store-gateway.sharding-ring.multi.primary\n      [primary: <string> | default = \"\"]\n\n      # (advanced) Secondary backend storage used by multi-client.\n      # CLI flag: -store-gateway.sharding-ring.multi.secondary\n      [secondary: <string> | default = \"\"]\n\n      # (advanced) Mirror writes to secondary store.\n      # CLI flag: -store-gateway.sharding-ring.multi.mirror-enabled\n      [mirror_enabled: <boolean> | default = false]\n\n      # (advanced) Timeout for storing value to secondary store.\n      # CLI flag: -store-gateway.sharding-ring.multi.mirror-timeout\n      [mirror_timeout: <duration> | default = 2s]\n\n  # (advanced) Period at which to heartbeat to the ring. 0 = disabled.\n  # CLI flag: -store-gateway.sharding-ring.heartbeat-period\n  [heartbeat_period: <duration> | default = 15s]\n\n  # (advanced) The heartbeat timeout after which store gateways are considered\n  # unhealthy within the ring. 0 = never (timeout disabled). This option needs\n  # be set both on the store-gateway, querier and ruler when running in\n  # microservices mode.\n  # CLI flag: -store-gateway.sharding-ring.heartbeat-timeout\n  [heartbeat_timeout: <duration> | default = 1m]\n\n  # (advanced) The replication factor to use when sharding blocks. This option\n  # needs be set both on the store-gateway, querier and ruler when running in\n  # microservices mode.\n  # CLI flag: -store-gateway.sharding-ring.replication-factor\n  [replication_factor: <int> | default = 3]\n\n  # File path where tokens are stored. If empty, tokens are not stored at\n  # shutdown and restored at startup.\n  # CLI flag: -store-gateway.sharding-ring.tokens-file-path\n  [tokens_file_path: <string> | default = \"\"]\n\n  # (advanced) Number of tokens for each store-gateway.\n  # CLI flag: -store-gateway.sharding-ring.num-tokens\n  [num_tokens: <int> | default = 512]\n\n  # True to enable zone-awareness and replicate blocks across different\n  # availability zones. This option needs be set both on the store-gateway,\n  # querier and ruler when running in microservices mode.\n  # CLI flag: -store-gateway.sharding-ring.zone-awareness-enabled\n  [zone_awareness_enabled: <boolean> | default = false]\n\n  # When enabled, a store-gateway is automatically removed from the ring after\n  # failing to heartbeat the ring for a period longer than 10 times the\n  # configured -store-gateway.sharding-ring.heartbeat-timeout.\n  # CLI flag: -store-gateway.sharding-ring.auto-forget-enabled\n  [auto_forget_enabled: <boolean> | default = true]\n\n  # (advanced) Minimum time to wait for ring stability at startup, if set to\n  # positive value.\n  # CLI flag: -store-gateway.sharding-ring.wait-stability-min-duration\n  [wait_stability_min_duration: <duration> | default = 0s]\n\n  # (advanced) Maximum time to wait for ring stability at startup. If the\n  # store-gateway ring keeps changing after this period of time, the\n  # store-gateway will start anyway.\n  # CLI flag: -store-gateway.sharding-ring.wait-stability-max-duration\n  [wait_stability_max_duration: <duration> | default = 5m]\n\n  # (advanced) Instance ID to register in the ring.\n  # CLI flag: -store-gateway.sharding-ring.instance-id\n  [instance_id: <string> | default = \"<hostname>\"]\n\n  # List of network interface names to look up when finding the instance IP\n  # address.\n  # CLI flag: -store-gateway.sharding-ring.instance-interface-names\n  [instance_interface_names: <list of strings> | default = [<private network interfaces>]]\n\n  # (advanced) Port to advertise in the ring (defaults to\n  # -server.grpc-listen-port).\n  # CLI flag: -store-gateway.sharding-ring.instance-port\n  [instance_port: <int> | default = 0]\n\n  # (advanced) IP address to advertise in the ring. Default is auto-detected.\n  # CLI flag: -store-gateway.sharding-ring.instance-addr\n  [instance_addr: <string> | default = \"\"]\n\n  # (advanced) Enable using a IPv6 instance address. (default false)\n  # CLI flag: -store-gateway.sharding-ring.instance-enable-ipv6\n  [instance_enable_ipv6: <boolean> | default = false]\n\n  # The availability zone where this instance is running. Required if\n  # zone-awareness is enabled.\n  # CLI flag: -store-gateway.sharding-ring.instance-availability-zone\n  [instance_availability_zone: <string> | default = \"\"]\n\n  # Unregister from the ring upon clean shutdown.\n  # CLI flag: -store-gateway.sharding-ring.unregister-on-shutdown\n  [unregister_on_shutdown: <boolean> | default = true]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Buildx for Multi-architecture Image Building\nDESCRIPTION: Commands to create and select a Docker Buildx builder instance named 'armBuilder' for building multi-architecture Docker images.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/how-to-update-the-build-image.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx create --name armBuilder ; docker buildx use armBuilder\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoints for Instance Ring Downscale\nDESCRIPTION: Endpoints to prepare ingester for downscaling by managing read-only mode state.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nGET,POST,DELETE /ingester/prepare-instance-ring-downscale\n```\n\n----------------------------------------\n\nTITLE: Creating and Using S2 Dictionary from Sample File in Go\nDESCRIPTION: Demonstrates how to create an S2 dictionary from a sample file, encode data using the dictionary, and decode the encoded data. This method is useful for uniform input data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n    // Read a sample\n    sample, err := os.ReadFile(\"sample.json\")\n\n    // Create a dictionary.\n    dict := s2.MakeDict(sample, nil)\n\t\n    // b := dict.Bytes() will provide a dictionary that can be saved\n    // and reloaded with s2.NewDict(b).\n\t\n    // To encode:\n    encoded := dict.Encode(nil, file)\n\n    // To decode:\n    decoded, err := dict.Decode(nil, file)\n```\n\n----------------------------------------\n\nTITLE: Calculating Observation Rates in PromQL\nDESCRIPTION: Demonstrates how to calculate rates of observations over time windows and between specific value ranges.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/visualize/native-histograms/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: PromQL\nCODE:\n```\n# Native histograms:\nhistogram_count(sum(rate(request_duration_seconds[5m])))\n\n# Classic histograms:\nsum(rate(request_duration_seconds_count[5m]))\n```\n\nLANGUAGE: PromQL\nCODE:\n```\n# Native histograms:\nhistogram_fraction(0, 2, sum(rate(request_duration_seconds[5m])))\n*\nhistogram_count(sum(rate(request_duration_seconds[5m])))\n\n# Classic histograms:\nsum(rate(request_duration_seconds_bucket{le=\"2.5\"}[5m]))\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Error Types\nDESCRIPTION: Shows how to use errors.As to extract a specific error type from a multierror. Provides a standard way to introspect and handle specific error conditions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nerr := somefunc()\n\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Querier Autoscaling and Setting Fixed Replicas\nDESCRIPTION: This snippet shows how to disable the querier autoscaler and manually set the number of replicas for the querier Deployment to 10. It imports the necessary Jsonnet libraries and uses the deployment mixin to set the replicas.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-autoscaling.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\nlocal k = import 'github.com/grafana/jsonnet-libs/ksonnet-util/kausal.libsonnet';\nlocal deployment = k.apps.v1.deployment;\n\nmimir {\n    _config+:: {\n        autoscaling_querier_enabled: false,\n    },\n\n    querier_deployment+: deployment.mixin.spec.withReplicas(10),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Proxy for Grafana Mimir Request Mirroring\nDESCRIPTION: Envoy proxy configuration that sets up request mirroring between two Grafana Mimir clusters. The configuration listens on port 9900, proxies requests to mimir-primary:8080, and mirrors them to mimir-secondary:8080. Includes admin settings, listener configuration, and cluster definitions with DNS refresh and timeout settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/mirror-requests-to-a-second-cluster/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  # No access logs.\n  access_log_path: /dev/null\n  address:\n    socket_address: { address: 0.0.0.0, port_value: 9901 }\n\nstatic_resources:\n  listeners:\n    - name: mimir_listener\n      address:\n        socket_address: { address: 0.0.0.0, port_value: 9900 }\n      filter_chains:\n        - filters:\n            - name: envoy.http_connection_manager\n              config:\n                stat_prefix: mimir_ingress\n                route_config:\n                  name: all_routes\n                  virtual_hosts:\n                    - name: all_hosts\n                      domains: [\"*\"]\n                      routes:\n                        - match: { prefix: \"/\" }\n                          route:\n                            cluster: mimir_primary\n\n                            # Specifies the upstream timeout. This spans between the point at which the entire downstream\n                            # request has been processed and when the upstream response has been completely processed.\n                            timeout: 15s\n\n                            # Specifies the cluster that requests will be mirrored to. The performance\n                            # and availability of the secondary cluster have no impact on the requests to the primary\n                            # one. The response to the client will always be the one from the primary one. In this sense,\n                            # the requests from Envoy to the secondary cluster are \"fire and forget\".\n                            request_mirror_policies:\n                              - cluster: mimir_secondary\n                http_filters:\n                  - name: envoy.router\n  clusters:\n    - name: mimir_primary\n      type: STRICT_DNS\n      connect_timeout: 1s\n      # Replace mimir-primary with the address and port the distributor of your primary mimir cluster\n      hosts: [{ socket_address: { address: mimir-primary, port_value: 8080 }}]\n      dns_refresh_rate: 5s\n    - name: mimir_secondary\n      type: STRICT_DNS\n      connect_timeout: 1s\n      # Replace mimir-secondary with the address and port the distributor of your secondary mimir cluster\n      hosts: [{ socket_address: { address: mimir-secondary, port_value: 8080 }}]\n      dns_refresh_rate: 5s\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus with Colorable Output in Go\nDESCRIPTION: Example showing how to configure the logrus logging package with go-colorable to enable colored output on Windows. Sets up the text formatter with forced colors and configures the output to use the colorable stdout writer.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\nlogrus.SetOutput(colorable.NewColorableStdout())\n\nlogrus.Info(\"succeeded\")\nlogrus.Warn(\"not correct\")\nlogrus.Error(\"something error\")\nlogrus.Fatal(\"panic\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Error Types with errwrap in Go\nDESCRIPTION: Illustrates how to implement the Wrapper interface for custom error types in Go with the errwrap package. Demonstrates making a struct, AppError, that contains an error, and implementing WrappedErrors method to comply with the Wrapper interface. This enables the use of errwrap functionalities like ContainsType with custom error types.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n\n// Example usage\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Storage Configuration\nDESCRIPTION: Configuration for Azure Blob Storage with account credentials using environment variable interpolation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-object-storage-backend.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    storage_backend: 'azure',\n    storage_azure_account_name: '$(STORAGE_AZURE_ACCOUNT_NAME)',\n    storage_azure_account_key: '$(STORAGE_AZURE_ACCOUNT_KEY)',\n    blocks_storage_bucket_name: 'blocks-bucket',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Baggage via HTTP Headers in Jaeger Tracing\nDESCRIPTION: Shows how to inject baggage key-value pairs into a trace using HTTP headers. This approach allows an external process to add context to spans that will be propagated throughout the trace.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"jaeger-baggage: key1=value1, key2=value2\" http://myhost.com\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Log Query Request Headers Configuration\nDESCRIPTION: Configures a comma-separated list of request header names to include in query logs. This applies to both query stats and slow queries logs, aiding in debugging and analysis.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Comma-separated list of request header names to include in query\\n# logs. Applies to both query stats and slow queries logs.\\n# CLI flag: -query-frontend.log-query-request-headers\\n[log_query_request_headers: <string> | default = \\\"\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Using Logrus as an io.Writer in Go\nDESCRIPTION: This snippet demonstrates how to use Logrus as an io.Writer, which can be useful for integrating with the standard library's http.Server or overriding the standard logger.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n\n// Overriding standard library logger\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Configuring Overrides Exporter Metrics in YAML\nDESCRIPTION: Specifies which metrics to include in the overrides exporter. Provides a comma-separated list of allowed metric names for various limits and rates.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  # Comma-separated list of metrics to include in the exporter. Allowed metric\n  # names: ingestion_rate, ingestion_burst_size, ingestion_artificial_delay,\n  # max_global_series_per_user, max_global_series_per_metric,\n  # max_global_exemplars_per_user, max_fetched_chunks_per_query,\n  # max_fetched_series_per_query, max_fetched_chunk_bytes_per_query,\n  # ruler_max_rules_per_rule_group, ruler_max_rule_groups_per_tenant,\n  # max_global_metadata_per_user, max_global_metadata_per_metric, request_rate,\n  # request_burst_size, alertmanager_notification_rate_limit,\n  # alertmanager_max_dispatcher_aggregation_groups,\n  # alertmanager_max_alerts_count, alertmanager_max_alerts_size_bytes.\n  # CLI flag: -overrides-exporter.enabled-metrics\n  [enabled_metrics: <string> | default = \"ingestion_rate,ingestion_burst_size,max_global_series_per_user,max_global_series_per_metric,max_global_exemplars_per_user,max_fetched_chunks_per_query,max_fetched_series_per_query,max_fetched_chunk_bytes_per_query,ruler_max_rules_per_rule_group,ruler_max_rule_groups_per_tenant\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Read Path Autoscaling in Grafana Mimir\nDESCRIPTION: Configuration for enabling and setting up autoscaling parameters for the read path in Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-deployment-mode.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    autoscaling_mimir_read_enabled: true,\n    autoscaling_mimir_read_min_replicas: 2,\n    autoscaling_mimir_read_max_replicas: 20,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dequeue Decision Tree in Mermaid (Simplified Version)\nDESCRIPTION: A Mermaid flowchart diagram illustrating a simplified version of the dequeue decision tree, showing how query components are selected by querier-worker ID and tenants are selected by global tenant rotation. The diagram displays the hierarchical node structure and the organization of queue nodes.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/scheduler/DESIGN.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Dequeue Decision Tree (Simplified)\nconfig:\n  theme: default\n---\n\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\n\ngraph TB\n    queryComponentAlgo[\"`\n       select query component node by querier-worker ID\n    `\"]\n    style queryComponentAlgo fill:white,stroke:lightgray,stroke-dasharray:5\n\n\n    root([\"**root**\n\n    \"])\n\n    root~~~tenandShardAlgo[\"\n        select tenant by global tenant rotation\n    \"]\n\n    style tenandShardAlgo fill:white,stroke:lightgray,stroke-dasharray:5\n\n    ingester([\"**ingester**\"])\n    storeGateway([\"**store-gateway**\"])\n\n    both([\"**ingester +\n\n    store-gateway**\"])\n\n    root<-->ingester\n    root<-->storeGateway\n    root<-->both\n\n    ingester-tenant1([\"**tenant-1**\n\n    [queue node]\n    \"])\n    ingester-tenant2([\"**tenant-2**\n\n    [queue node]\n    \"])\n\n    storeGateway-tenant1([\"**tenant-1**\n\n    [queue node]\n    \"])\n    storeGateway-tenant2([\"**tenant-2**\n\n    [queue node]\n    \"])\n\n    both-tenant1([\"**tenant-1**\n\n    [queue node]\n    \"])\n    both-tenant2([\"**tenant-2**\n\n    [queue node]\n    \"])\n\n    ingester<-->ingester-tenant1\n    ingester<-->ingester-tenant2\n\n\n    storeGateway<-->storeGateway-tenant1\n    storeGateway<-->storeGateway-tenant2\n\n    both<-->both-tenant1\n    both<-->both-tenant2\n```\n\n----------------------------------------\n\nTITLE: Using BasePathFs Backend in Go\nDESCRIPTION: Example of using Afero's BasePathFs backend to restrict operations to a specific path.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nbp := afero.NewBasePathFs(afero.NewOsFs(), \"/base/path\")\n```\n\n----------------------------------------\n\nTITLE: Formatting File Size in Human Readable Form - Go\nDESCRIPTION: This snippet utilizes the `humanize.Bytes` function to convert a byte size into a human-readable format, such as MB or MiB. It is useful for displaying file sizes in user-friendly terms.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"That file is %s.\", humanize.Bytes(82854982)) // That file is 83 MB.\n```\n\n----------------------------------------\n\nTITLE: Grafana Mimir Demo Configuration\nDESCRIPTION: YAML configuration for running Grafana Mimir as a monolith with local filesystem storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmultitenancy_enabled: false\n\nblocks_storage:\n  backend: filesystem\n  bucket_store:\n    sync_dir: /tmp/mimir/tsdb-sync\n  filesystem:\n    dir: /tmp/mimir/data/tsdb\n  tsdb:\n    dir: /tmp/mimir/tsdb\n\ncompactor:\n  data_dir: /tmp/mimir/compactor\n  sharding_ring:\n    kvstore:\n      store: memberlist\n\ndistributor:\n  ring:\n    instance_addr: 127.0.0.1\n    kvstore:\n      store: memberlist\n\ningester:\n  ring:\n    instance_addr: 127.0.0.1\n    kvstore:\n      store: memberlist\n    replication_factor: 1\n\nruler_storage:\n  backend: filesystem\n  filesystem:\n    dir: /tmp/mimir/rules\n\nserver:\n  http_listen_port: 9009\n  log_level: error\n\nstore_gateway:\n  sharding_ring:\n    replication_factor: 1\n```\n\n----------------------------------------\n\nTITLE: Validating Alertmanager Configuration using mimirtool\nDESCRIPTION: This command validates an Alertmanager configuration file using the mimirtool command-line utility.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/alertmanager.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager verify <ALERTMANAGER CONFIGURATION FILE>\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Mimir Libraries with jsonnet-bundler\nDESCRIPTION: Commands to install the required Grafana Mimir libraries and monitoring mixin using jsonnet-bundler.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-cortex.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njb install github.com/grafana/mimir/operations/mimir@main\njb install github.com/grafana/mimir/operations/mimir-mixin@main\n```\n\n----------------------------------------\n\nTITLE: Configuring authentication with azidentity in Go\nDESCRIPTION: This snippet shows how to configure authentication using azidentity, including setting up ClientOptions for sovereign clouds and creating a ClientSecretCredential.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\nclientOpts := azcore.ClientOptions{Cloud: cloud.AzureChina}\n\ncred, err := azidentity.NewClientSecretCredential(\n    tenantID, clientID, secret, &azidentity.ClientSecretCredentialOptions{ClientOptions: clientOpts},\n)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication for Prometheus Remote Write in YAML\nDESCRIPTION: This snippet demonstrates how to set up basic authentication with a username and password stored in a file for Prometheus remote write. It includes the username directly and specifies the path to the password file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/secure/authentication-and-authorization.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbasic_auth:\n  username: <AUTHENTICATION PROXY USERNAME>\n  password_file: <PATH TO AUTHENTICATION PROXY PASSWORD FILE>\n```\n\n----------------------------------------\n\nTITLE: GCS Service Account Configuration (Inline)\nDESCRIPTION: This YAML snippet demonstrates how to configure Thanos to use Google Cloud Storage (GCS) by inlining a service account JSON directly into the configuration.  This method avoids the need for separate credential files. The service account contains the necessary information to authenticate with GCS.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ntype: GCS\nconfig:\n  bucket: \"thanos\"\n  service_account: |-\n    {\n      \"type\": \"service_account\",\n      \"project_id\": \"project\",\n      \"private_key_id\": \"abcdefghijklmnopqrstuvwxyz12345678906666\",\n      \"private_key\": \"-----BEGIN PRIVATE KEY-----\\...\\n-----END PRIVATE KEY-----\\n\",\n      \"client_email\": \"project@thanos.iam.gserviceaccount.com\",\n      \"client_id\": \"123456789012345678901\",\n      \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n      \"token_uri\": \"https://oauth2.googleapis.com/token\",\n      \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n      \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/thanos%40gitpods.iam.gserviceaccount.com\"\n    }\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Differences in Grafana Mimir\nDESCRIPTION: This endpoint displays the differences between the Grafana Mimir default configuration and the current configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /config?mode=diff\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of JMESPath Search in Go\nDESCRIPTION: Demonstrates the basic usage of the jmespath.Search function to query a specific element from a nested JSON structure. The example shows how to access a value at index 2 from an array nested within a JSON object.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/jmespath/go-jmespath\"\n\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.Search(\"foo.bar.baz[2]\", data)\nresult = 2\n```\n\n----------------------------------------\n\nTITLE: Accessing Multierror Errors\nDESCRIPTION: Demonstrates type assertion to access the list of errors in a multierror. Enables programmatic handling of multiple errors when aware of multierror usage.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Exponential Histogram View in Go\nDESCRIPTION: This code demonstrates how to create a view for an exponential histogram in Go using the OpenTelemetry SDK. It creates a new metric with exponential buckets based on an existing histogram.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/send/otel-exponential-histograms/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nv := sdkmetric.NewView(sdkmetric.Instrument{\n      \tName: \"request_latency\",\n      \tKind: sdkmetric.InstrumentKindHistogram,\n      }, sdkmetric.Stream{\n   \t   Name: \"request_latency_exp\",\n   \t   Aggregation: sdkmetric.AggregationBase2ExponentialHistogram{MaxSize: 160, NoMinMax: true, MaxScale: 20},\n      })\n```\n\n----------------------------------------\n\nTITLE: Exporting Remote-Read Data to Local TSDB\nDESCRIPTION: This snippet demonstrates how to use the mimirtool remote-read export command to download metrics matching a specific selector from a Grafana Mimir cluster and store them in a local TSDB.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool remote-read export --selector '{job=\"node\"}' --address http://demo.robustperception.io:9090 --remote-read-path /api/v1/read --tsdb-path ./local-tsdb\n```\n\nLANGUAGE: console\nCODE:\n```\nINFO[0000] Create remote read client using endpoint 'http://demo.robustperception.io:9090/api/v1/read'\nINFO[0000] Created TSDB in path './local-tsdb'\nINFO[0000] Using existing TSDB in path './local-tsdb'\nINFO[0000] Querying time from=2020-12-30T13:53:59Z to=2020-12-30T14:53:59Z with selector={job=\"node\"}\nINFO[0001] Store TSDB blocks in './local-tsdb'\nINFO[0001] BLOCK ULID                  MIN TIME                       MAX TIME                       DURATION     NUM SAMPLES  NUM CHUNKS   NUM SERIES   SIZE\nINFO[0001] 01ETT28D6B8948J87NZXY8VYD9  2020-12-30 13:53:59 +0000 UTC  2020-12-30 13:59:59 +0000 UTC  6m0.001s     15950        429          425          105KiB867B\nINFO[0001] 01ETT28D91Z9SVRYF3DY0KNV41  2020-12-30 14:00:00 +0000 UTC  2020-12-30 14:53:58 +0000 UTC  53m58.001s   143530       1325         425          509KiB679B\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library in Go\nDESCRIPTION: Command to install the latest version of the Cobra library using Go's package manager.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Using the Global Logger with hclog in Go\nDESCRIPTION: This snippet demonstrates how to use the default global logger provided by the `hclog` package to log an informational message. It utilizes `hclog.Default().Info()` to output the message \"hello world\".\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"hclog.Default().Info(\\\"hello world\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Querier: Query Engine Configuration\nDESCRIPTION: Selects the query engine to use, either 'prometheus' or 'mimir'. This is an experimental feature and allows switching between different query processing implementations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n\"# (experimental) Query engine to use, either 'prometheus' or 'mimir'\\n# CLI flag: -querier.query-engine\\n[query_engine: <string> | default = \\\"prometheus\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Using Digest Type in xxhash Go\nDESCRIPTION: These code snippets show the methods available to the Digest type in the xxhash package, implementing hash.Hash64. It offers methods for writing data and computing hashes with pure Go and assembly backing. Requires Go with module compatibility.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Using go-str2duration to Parse Duration Strings in Go\nDESCRIPTION: A comprehensive example demonstrating how to use the go-str2duration package to parse various duration string formats including standard Go duration strings and extended formats with weeks and days.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/xhit/go-str2duration/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\tstr2duration \"github.com/xhit/go-str2duration/v2\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\n    for i, tt := range []struct {\n            dur      string\n            expected time.Duration\n        }{\n            //This times are returned with time.Duration string\n            {\"1h\", time.Duration(time.Hour)},\n            {\"1m\", time.Duration(time.Minute)},\n            {\"1s\", time.Duration(time.Second)},\n            {\"1ms\", time.Duration(time.Millisecond)},\n            {\"1µs\", time.Duration(time.Microsecond)},\n            {\"1us\", time.Duration(time.Microsecond)},\n            {\"1ns\", time.Duration(time.Nanosecond)},\n            {\"4.000000001s\", time.Duration(4*time.Second + time.Nanosecond)},\n            {\"1h0m4.000000001s\", time.Duration(time.Hour + 4*time.Second + time.Nanosecond)},\n            {\"1h1m0.01s\", time.Duration(61*time.Minute + 10*time.Millisecond)},\n            {\"1h1m0.123456789s\", time.Duration(61*time.Minute + 123456789*time.Nanosecond)},\n            {\"1.00002ms\", time.Duration(time.Millisecond + 20*time.Nanosecond)},\n            {\"1.00000002s\", time.Duration(time.Second + 20*time.Nanosecond)},\n            {\"693ns\", time.Duration(693 * time.Nanosecond)},\n\n            //This times aren't returned with time.Duration string, but are easily readable and can be parsed too!\n            {\"1ms1ns\", time.Duration(time.Millisecond + 1*time.Nanosecond)},\n            {\"1s20ns\", time.Duration(time.Second + 20*time.Nanosecond)},\n            {\"60h8ms\", time.Duration(60*time.Hour + 8*time.Millisecond)},\n            {\"96h63s\", time.Duration(96*time.Hour + 63*time.Second)},\n\n            //And works with days and weeks!\n            {\"2d3s96ns\", time.Duration(48*time.Hour + 3*time.Second + 96*time.Nanosecond)},\n            {\"1w2d3s96ns\", time.Duration(168*time.Hour + 48*time.Hour + 3*time.Second + 96*time.Nanosecond)},\n\n            {\"10s1us693ns\", time.Duration(10*time.Second + time.Microsecond + 693*time.Nanosecond)},\n\n        } {\n            durationFromString, err := str2duration.ParseDuration(tt.dur)\n            if err != nil {\n                panic(err)\n\n            //Check if expected time is the time returned by the parser\n            } else if tt.expected != durationFromString {\n                 fmt.Println(fmt.Sprintf(\"index %d -> in: %s returned: %s\\tnot equal to %s\", i, tt.dur, durationFromString.String(), tt.expected.String()))\n            }else{\n                fmt.Println(fmt.Sprintf(\"index %d -> in: %s parsed succesfully\", i, tt.dur))\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Random Function in GoUtils\nDESCRIPTION: This example shows how to use the Random function from GoUtils, which can return an error. It demonstrates proper error handling when calling a function that may fail due to invalid arguments.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/goutils/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/Masterminds/goutils\"\n)\n\nfunc main() {\n\n    // EXAMPLE 2: A goutils function which returns an error\n    rand1, err1 := goutils.Random (-1, 0, 0, true, true)  \n\n    if err1 != nil {\n\t\t\tfmt.Println(err1) // Prints out error message because -1 was entered as the first parameter in goutils.Random(...)\n\t\t} else {\n\t\t\tfmt.Println(rand1)\n\t\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Max Body Size Configuration\nDESCRIPTION: Configures the maximum body size for downstream Prometheus requests. This limits the size of requests forwarded by the query frontend to backend components.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Max body size for downstream prometheus.\\n# CLI flag: -query-frontend.max-body-size\\n[max_body_size: <int> | default = 10485760]\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator to TagMap in Go\nDESCRIPTION: Demonstrates how to add a custom validator to the TagMap for use in struct validation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n```\n\n----------------------------------------\n\nTITLE: Reading from Nested Maps with Koanf in Go\nDESCRIPTION: This snippet demonstrates how to use the confmap provider in Koanf to load configuration from a nested map. It shows loading default values, then overlaying JSON and YAML configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/providers/confmap\"\n\t\"github.com/knadh/koanf/providers/file\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load default values using the confmap provider.\n\t// We provide a flat map with the \".\" delimiter.\n\t// A nested map can be loaded by setting the delimiter to an empty string \"\".\n\tk.Load(confmap.Provider(map[string]interface{}{\n\t\t\"parent1.name\": \"Default Name\",\n\t\t\"parent3.name\": \"New name here\",\n\t}, \".\"), nil)\n\n\t// Load JSON config on top of the default values.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load YAML config and merge into the previously loaded config (because we can).\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n\tfmt.Println(\"parent's ID is = \", k.Int(\"parent1.id\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Claims Structure with Validation in Go\nDESCRIPTION: This snippet illustrates the creation of a custom claims structure that includes additional fields beyond the standard registered claims. It also defines a method for application-specific validation on the claims, ensuring that specific rules can be applied as needed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// MyCustomClaims includes all registered claims, plus Foo.\ntype MyCustomClaims struct {\n\tFoo string `json:\"foo\"`\n\tjwt.RegisteredClaims\n}\n\n// Validate can be used to execute additional application-specific claims\n// validation.\nfunc (m MyCustomClaims) Validate() error {\n\tif m.Foo != \"bar\" {\n\t\treturn errors.New(\"must be foobar\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure SDK in Go\nDESCRIPTION: This snippet demonstrates how to set up logging for the Azure SDK in Go. It shows how to enable console logging for all SDK modules and how to configure logging specifically for the azidentity module.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Using Regex and Time Range Limiting with tsdb-gaps\nDESCRIPTION: Shows how to use tsdb-gaps with a regex-based metric selector and time range limitations. The example demonstrates finding gaps in 'minio_node_drive_latency_us' metric, filtering by API label, and restricting the time range to a 30-minute window.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/tsdb-gaps/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n./tsdb-gaps -select '{__name__=\"minio_node_drive_latency_us\", api=~\"storage.(Read|Write).*\"}' -mint \"2024-06-20T00:30:00Z\" -maxt \"2024-06-20T01:00:00Z\" 01J0SSQT75APKRZ2ZX8FYZ08TA | jq\n  level=debug msg=\"using matchers\" matcher=\"__name__=\\\"minio_node_drive_latency_us\\\"\" matcher=\"api=~\\\"storage.(Read|Write).*\\\"\"\n{\n  \"01J0SSQT75APKRZ2ZX8FYZ08TA\": {\n    \"blockID\": \"01J0SSQT75APKRZ2ZX8FYZ08TA\",\n    \"minTime\": 1718841600134,\n    \"maxTime\": 1718848800000,\n    \"totalSeries\": 398711,\n    \"totalMatchedSeries\": 6,\n    \"totalSeriesWithGaps\": 1,\n    \"totalSamples\": 195206875,\n    \"totalMissedSamples\": 38,\n    \"gapStats\": [\n      {\n        \"seriesLabels\": \"{__name__=\\\"minio_node_drive_latency_us\\\", api=\\\"storage.ReadVersion\\\", drive=\\\"/var/db/minio\\\", instance=\\\"minio\\\", job=\\\"minio-job\\\", server=\\\"127.0.0.1:9000\\\"}\",\n        \"minTime\": 1718843532624,\n        \"maxTime\": 1718845677624,\n        \"totalSamples\": 10,\n        \"missedSamples\": 38,\n        \"minIntervalDiffMillis\": 15000,\n        \"maxIntervalDiffMillis\": 870000,\n        \"mostCommonIntervalSeconds\": 15,\n        \"gapThreshold\": 22500,\n        \"gaps\": [\n          {\n            \"start\": 1718843592624,\n            \"end\": 1718844462624,\n            \"intervals\": 38\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenShift Deployment with Default SecurityContextConstraints\nDESCRIPTION: YAML configuration for deploying Grafana Mimir on OpenShift using the default SecurityContextConstraints (SCC), disabling RBAC creation and modifying security context settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nrbac:\n  create: false\n  type: scc\n  podSecurityContext:\n    fsGroup: null\n    runAsGroup: null\n    runAsUser: null\nrollout_operator:\n  podSecurityContext:\n    fsGroup: null\n    runAsGroup: null\n    runAsUser: null\n```\n\n----------------------------------------\n\nTITLE: Running benchmark-query-engine with Command-Line Options\nDESCRIPTION: Shows various command-line options for running the benchmark-query-engine tool. Options include running all benchmarks, listing available benchmarks, filtering benchmarks with regex, controlling iteration count, and managing the ingester service.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/benchmark-query-engine/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run . -list\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run . -bench=abc\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run . -count=X\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run . -bench=abc -count=X\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run . -start-ingester\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run . -use-existing-ingester=localhost:1234\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Runtime Size Calculation in Go\nDESCRIPTION: This example showcases how to use the size package to calculate the memory consumption of a struct with various field types. It imports the package, defines a struct with different data types, and prints the total size in bytes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/DmitriyVTitov/size/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t// Use latest tag.\n\t\"github.com/DmitriyVTitov/size\"\n)\n\nfunc main() {\n\ta := struct {\n\t\ta int\n\t\tb string\n\t\tc bool\n\t\td int32\n\t\te []byte\n\t\tf [3]int64\n\t}{\n\t\ta: 10,                    // 8 bytes\n\t\tb: \"Text\",                // 16 (string itself) + 4 = 20 bytes\n\t\tc: true,                  // 1 byte\n\t\td: 25,                    // 4 bytes\n\t\te: []byte{'c', 'd', 'e'}, // 24 (slice itself) + 3 = 27 bytes\n\t\tf: [3]int64{1, 2, 3},     // 3 * 8 = 24 bytes\n\t} // 84 + 3 (padding) = 87 bytes\n\n\tfmt.Println(size.Of(a))\n}\n\n// Output: 87\n```\n\n----------------------------------------\n\nTITLE: Downloading query-tee Docker Image\nDESCRIPTION: Command to pull the latest query-tee Docker image from the Docker registry.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/query-tee.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull \"grafana/query-tee:latest\"\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Mimir using Helm\nDESCRIPTION: Installs Grafana Mimir in the 'mimir-test' namespace using the mimir-distributed Helm chart.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n mimir-test install mimir grafana/mimir-distributed\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Fields from Arrays with JMESPath in Go\nDESCRIPTION: Demonstrates using the projection operator to extract a specific field from each object in an array. The example shows how to collect all 'first' field values from a list of objects.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata  = []byte(`{\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search({\"foo[*].first\", data)\nresult [ 'a', 'c' ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Mixin in Jsonnet\nDESCRIPTION: Jsonnet code to import and configure the Grafana Mimir mixin, allowing for custom configuration overrides.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonnet\nCODE:\n```\n(import 'github.com/grafana/mimir/operations/mimir-mixin/mixin.libsonnet') + {\n  _config+:: {\n    // Override the Grafana Mimir mixin config here.\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Log Queries Longer Than Configuration\nDESCRIPTION: Configures the query frontend to log queries that take longer than the specified duration. Setting it to 0 disables logging, and setting it to a negative value enables logging for all queries.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Log queries that are slower than the specified duration. Set to 0 to disable.\\n# Set to < 0 to enable on all queries.\\n# CLI flag: -query-frontend.log-queries-longer-than\\n[log_queries_longer_than: <duration> | default = 0s]\"\n```\n\n----------------------------------------\n\nTITLE: Feature: Add httptransport Package\nDESCRIPTION: This commit introduces the `httptransport` package to the `auth` module.  This package facilitates the configuration of authentication for HTTP transports when interacting with Google Cloud services.  The commit is related to issue #8567.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n6898597d2ea95d630fcd00fd15c58c75ea843bff\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Summarization Template in Go\nDESCRIPTION: This template iterates through a list of alerts and applies templates to display their labels and annotations. It acts as a helper function for summarizing the alerts within the main message.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/alerting/receivers/templates/ng_alert_notification.txt#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n{{- define \"__default_alerts_summarize\" -}}\n{{- range . }}\n{{- template \"__default_alert_labels\" . }}\n{{- template \"__default_alert_annotations\" . }}\n{{ end }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Implementing PROXY Protocol HTTP Server in Go\nDESCRIPTION: Example of a Go HTTP server using the go-proxyproto library to create a listener that can handle PROXY protocol connections with a timeout.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pires/go-proxyproto/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/pires/go-proxyproto\"\n)\n\nfunc main() {\n\tserver := http.Server{\n\t\tAddr: \":8080\",\n\t}\n\n\tln, err := net.Listen(\"tcp\", server.Addr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tproxyListener := &proxyproto.Listener{\n\t\tListener:          ln,\n\t\tReadHeaderTimeout: 10 * time.Second,\n\t}\n\tdefer proxyListener.Close()\n\n\tserver.Serve(proxyListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Settings in YAML\nDESCRIPTION: Defines common configuration options that apply to multiple components. Includes settings for timeseries unmarshaling optimization and cost attribution.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# The common block holds configurations that configure multiple components at a\n# time.\n[common: <common>]\n\n# (experimental) Enables optimized marshaling of timeseries.\n# CLI flag: -timeseries-unmarshal-caching-optimization-enabled\n[timeseries_unmarshal_caching_optimization_enabled: <boolean> | default = true]\n\n# (experimental) Specifies how often inactive cost attributions for received and\n# discarded sample trackers are evicted from the counter, ensuring they do not\n# contribute to the cost attribution cardinality per user limit. This setting\n# does not apply to active series, which are managed separately.\n# CLI flag: -cost-attribution.eviction-interval\n[cost_attribution_eviction_interval: <duration> | default = 20m]\n\n# (experimental) Defines a custom path for the registry. When specified, Mimir\n# exposes cost attribution metrics through this custom path. If not specified,\n# cost attribution metrics aren't exposed.\n# CLI flag: -cost-attribution.registry-path\n[cost_attribution_registry_path: <string> | default = \"\"]\n\n# (experimental) Time interval at which the cost attribution cleanup process\n# runs, ensuring inactive cost attribution entries are purged.\n# CLI flag: -cost-attribution.cleanup-interval\n[cost_attribution_cleanup_interval: <duration> | default = 3m]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Ristretto Cache\nDESCRIPTION: This code snippet demonstrates how to initialize a Ristretto cache with specific configuration parameters and how to use it to set, get, and delete key-value pairs. It showcases the basic usage of the Ristretto cache library, including setting cache size, adding entries, retrieving them, and deleting them.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dgraph-io/ristretto/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n\tcache, err := ristretto.NewCache(&ristretto.Config{\n\t\tNumCounters: 1e7,     // number of keys to track frequency of (10M).\n\t\tMaxCost:     1 << 30, // maximum cost of cache (1GB).\n\t\tBufferItems: 64,      // number of keys per Get buffer.\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// set a value with a cost of 1\n\tcache.Set(\"key\", \"value\", 1)\n\t\n\t// wait for value to pass through buffers\n\ttime.Sleep(10 * time.Millisecond)\n\n\tvalue, found := cache.Get(\"key\")\n\tif !found {\n\t\tpanic(\"missing value\")\n\t}\n\tfmt.Println(value)\n\tcache.Del(\"key\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using CaptureMetrics with HTTP Handler in Go\nDESCRIPTION: This snippet demonstrates how to wrap an existing HTTP handler with httpsnoop.CaptureMetrics to log metrics for every request. It captures HTTP method, URL, status code, duration, and bytes written.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/felixge/httpsnoop/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Prometheus Remote Write Basic Auth Configuration\nDESCRIPTION: Complete configuration for Prometheus remote write with basic authentication setup.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-otel-collector.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  basicauth/prw:\n    client_auth:\n      username: username\n      password: password\n\nexporters:\n  prometheusremotewrite:\n    auth:\n      authenticator: basicauth/prw\n    endpoint: http://<mimir-endpoint>/api/v1/push\n\nservice:\n  extensions: [basicauth/prw]\n  pipelines:\n    metrics:\n      receivers: [...]\n      processors: [...]\n      exporters: [..., prometheusremotewrite]\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoint for Store Gateway Ring Status\nDESCRIPTION: HTTP endpoint that displays the status of store-gateways ring, including tokens owned by each store-gateway and options to manage ring instances.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/store-gateway.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /store-gateway/ring\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with HttpRouter's NotFound Handler in Go\nDESCRIPTION: This snippet shows how to use the NotFound handler to serve static files from a directory. This approach allows the router to handle all defined routes while directing unmatched requests to the file server.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Serve static files from the ./public directory\nrouter.NotFound = http.FileServer(http.Dir(\"public\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ParameterStore Provider - Go\nDESCRIPTION: This snippet illustrates the initialization of the AWS ParameterStore provider using the koanf library. Like the SecretsManager provider, it supports an optional function for string transformation and uses the parameterstore package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nvault.ParameterStore(parameterstore.Config{}, f func(s string) string)\n```\n\n----------------------------------------\n\nTITLE: Disabling Anonymous Usage Statistics in YAML Configuration\nDESCRIPTION: Configuration snippet to disable anonymous usage statistics reporting in Mimir. By default, reporting is enabled, but users can opt-out by setting the enabled flag to false.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/about-anonymous-usage-statistics-reporting.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nusage_stats:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Loading Alertmanager Configuration from Directory\nDESCRIPTION: Command to load Alertmanager configuration and all template files from a directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager load  am/config.yaml am/*.tpl\n```\n\n----------------------------------------\n\nTITLE: Merging with Override Option in Go\nDESCRIPTION: Shows how to merge structs with the WithOverride transformer, which will overwrite values in the destination struct with values from the source struct regardless of whether they're zero values.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nif err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying manifests using Tanka\nDESCRIPTION: Commands to show the difference between the Jsonnet definition and the Kubernetes cluster, and apply changes using Tanka.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/deploy.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Show the difference between your Jsonnet definition and your Kubernetes cluster:\ntk diff environments/default\n\n# Apply changes to your Kubernetes cluster:\ntk apply environments/default\n```\n\n----------------------------------------\n\nTITLE: Get Alertmanager Configuration via HTTP API\nDESCRIPTION: Fetches the current Alertmanager configuration for the authenticated tenant via an HTTP GET request, using the configured object storage. No query parameters are accepted, and the status code 200 is returned on success. Operations can be controlled through the `-alertmanager.enable-api` flag.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_46\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /api/v1/alerts\n```\n\n----------------------------------------\n\nTITLE: Updated Mimir 3.0 Configuration\nDESCRIPTION: Migrated values file for Mimir 3.0 with updated cache configuration and externalized secrets.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-helm-chart-2.x-to-3.0.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrbac:\n  create: false\n\nchunks-cache:\n  enabled: true\n  replicas: 1\n\nindex-cache:\n  enabled: true\n  replicas: 1\n\nmetadata-cache:\n  enabled: true\n  replicas: 1\n\nresults-cache:\n  enabled: true\n  replicas: 1\n\nmetaMonitoring:\n  serviceMonitor:\n    enabled: true\n\nmimir:\n  structuredConfig:\n    blocks_storage:\n      backend: s3\n      s3:\n        access_key_id: ${AWS_ACCESS_KEY_ID}\n        bucket_name: my-blocks-bucket\n        endpoint: s3.amazonaws.com\n        secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n\nglobal:\n  extraEnvFrom:\n    - secretRef:\n        name: mimir-bucket-secret\n```\n\n----------------------------------------\n\nTITLE: Getting Alertmanager Configuration\nDESCRIPTION: Command to retrieve the current Alertmanager configuration using Mimirtool.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager get\n```\n\n----------------------------------------\n\nTITLE: Get Alertmanager Status via HTTP API\nDESCRIPTION: Fetches the current status of the Alertmanager cluster using an HTTP GET request. This endpoint returns a web page showing the current cluster members and doesn't require any URL parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_41\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /multitenant_alertmanager/status\n```\n\n----------------------------------------\n\nTITLE: Bitset Example Usage\nDESCRIPTION: Demonstrates basic usage of the bitset library, including setting, testing, and clearing bits. It showcases chaining and intersection operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\n\t\"github.com/bits-and-blooms/bitset\"\n)\n\nfunc main() {\n\tfmt.Printf(\"Hello from BitSet!\\n\")\n\tvar b bitset.BitSet\n\t// play some Go Fish\n\tfor i := 0; i < 100; i++ {\n\t\tcard1 := uint(rand.Intn(52))\n\t\tcard2 := uint(rand.Intn(52))\n\t\tb.Set(card1)\n\t\tif b.Test(card2) {\n\t\t\tfmt.Println(\"Go Fish!\")\n\t\t}\n\t\tb.Clear(card1)\n\t}\n\n\t// Chaining\n\tb.Set(10).Set(11)\n\n\tfor i, e := b.NextSet(0); e; i, e = b.NextSet(i + 1) {\n\t\tfmt.Println(\"The following bit is set:\", i)\n\t}\n\tif b.Intersection(bitset.New(100).Set(10)).Count() == 1 {\n\t\tfmt.Println(\"Intersection works.\")\n\t} else {\n\t\tfmt.Println(\"Intersection doesn't work???\")\n\t}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Alertmanager Configuration Example\nDESCRIPTION: Example command to load a specific Alertmanager configuration and template file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager load ./example_alertmanager_config.yaml ./example_alertmanager_template.tpl\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Out-of-Order Sample Ingestion in YAML\nDESCRIPTION: YAML configuration for setting custom out-of-order time window thresholds for specific tenants in a multi-tenant Mimir setup.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-out-of-order-samples-ingestion.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  tenant1:\n    out_of_order_time_window: 2h\n  tenant2:\n    out_of_order_time_window: 30m\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Blob Storage Client\nDESCRIPTION: Example showing how to create an authenticated Azure Blob Storage client using Azure Active Directory credentials.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// create a credential for authenticating with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle err\n\n// create an azblob.Client for the specified storage account that uses the above credential\nclient, err := azblob.NewClient(\"https://MYSTORAGEACCOUNT.blob.core.windows.net/\", cred, nil)\n// TODO: handle err\n```\n\n----------------------------------------\n\nTITLE: Computing Quantiles in PromQL\nDESCRIPTION: Shows how to calculate quantiles for both native and classic histograms using PromQL.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/visualize/native-histograms/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: PromQL\nCODE:\n```\n# Native histograms:\nhistogram_quantile(0.95, sum(rate(request_duration_seconds[5m])))\n\n# Classic histograms:\nhistogram_quantile(0.95, sum by (le) (rate(request_duration_seconds_bucket[5m])))\n```\n\n----------------------------------------\n\nTITLE: Deprecating Existing Config Option in Go\nDESCRIPTION: Example of how to deprecate an existing config option by renaming the variable and marking it as hidden and deprecated in the struct field tag.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nDeprecatedCacheUnalignedRequests bool `yaml:\"cache_unaligned_requests\" category:\"advanced\" doc:\"hidden\"` // Deprecated: Deprecated in Mimir 2.10.0, remove in Mimir 2.12.0 (https://github.com/grafana/mimir/issues/5253)\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta-Monitoring for Grafana Mimir\nDESCRIPTION: YAML configuration for setting up meta-monitoring in Grafana Mimir, enabling the collection of metrics and logs using Grafana Agent with remote endpoints for Loki and Prometheus.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmetaMonitoring:\n  serviceMonitor:\n    enabled: true\n  grafanaAgent:\n    enabled: true\n    installOperator: true\n\n    logs:\n      remote:\n        url: \"https://example.com/loki/api/v1/push\"\n        auth:\n          username: 12345\n\n    metrics:\n      remote:\n        url: \"https://prometehus.prometheus.svc.cluster.local./api/v1/push\"\n        headers:\n          X-Scope-OrgID: metamonitoring\n```\n\n----------------------------------------\n\nTITLE: Contextual Logging Implementation in Go\nDESCRIPTION: Demonstrates how to create contextual loggers that inherit fields from parent loggers. Shows component-based logging with shared context.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tvar logger log.Logger\n\tlogger = log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))\n\tlogger = log.With(logger, \"instance_id\", 123)\n\n\tlogger.Log(\"msg\", \"starting\")\n\tNewWorker(log.With(logger, \"component\", \"worker\")).Run()\n\tNewSlacker(log.With(logger, \"component\", \"slacker\")).Run()\n}\n\n// Output:\n// instance_id=123 msg=starting\n// instance_id=123 component=worker msg=running\n// instance_id=123 component=slacker msg=running\n```\n\n----------------------------------------\n\nTITLE: Executing PromQL Query with Two Shardable Portions\nDESCRIPTION: Example of how a PromQL query with two shardable portions is executed with query sharding enabled and a shard count of 3.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/query-sharding/index.md#2025-04-17_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(failed[1m])) / sum(rate(total[1m]))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(\n  concat(\n    sum (rate(failed{__query_shard__=\"1_of_3\"}[1m]))\n    sum (rate(failed{__query_shard__=\"2_of_3\"}[1m]))\n    sum (rate(failed{__query_shard__=\"3_of_3\"}[1m]))\n  )\n)\n/\nsum(\n  concat(\n    sum (rate(total{__query_shard__=\"1_of_3\"}[1m]))\n    sum (rate(total{__query_shard__=\"2_of_3\"}[1m]))\n    sum (rate(total{__query_shard__=\"3_of_3\"}[1m]))\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: RE2 Compatibility Mode\nDESCRIPTION: This Go code demonstrates using the RE2 compatibility mode in Regexp2. The mode enhances compatibility by adjusting certain regex behaviors. Dependencies are the Regexp2 library and its RE2 option. The code snippet shows compiling a regex for RE2 compatibility with adjusted matching behavior.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nre := regexp2.MustCompile(`Your RE2-compatible pattern`, regexp2.RE2)\nif isMatch, _ := re.MatchString(`Something to match`); isMatch {\n    //do something\n}\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Split Queries By Interval Configuration\nDESCRIPTION: Configures the query frontend to split range queries by an interval and execute them in parallel. Using a multiple of 24 hours is recommended for optimized block querying; setting to 0 disables this feature.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Split range queries by an interval and execute in parallel. You\\n# should use a multiple of 24 hours to optimize querying blocks. 0 to disable\\n# it.\\n# CLI flag: -query-frontend.split-queries-by-interval\\n[split_queries_by_interval: <duration> | default = 24h]\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Uploaded File with MinIO Client\nDESCRIPTION: This command uses the MinIO Client (mc) to list the contents of the testbucket and verify the uploaded file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmc ls play/testbucket\n```\n\n----------------------------------------\n\nTITLE: Query Frontend Results Cache: Memcached Configuration\nDESCRIPTION: Configures the Memcached-based caching backend. The CLI flags for this configuration are prefixed with `query-frontend.results-cache`.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\n\"  # The memcached block configures the Memcached-based caching backend.\\n  # The CLI flags prefix for this block configuration is:\\n  # query-frontend.results-cache\\n  [memcached: <memcached>]\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Lumberjack for Log Rotation in Go\nDESCRIPTION: This code snippet demonstrates how to integrate the Lumberjack package for log file rotation with the Zap logging library. It sets up a logger that writes logs to a specified file, handles maximum file size, backups, and retention period.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/FAQ.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// lumberjack.Logger is already safe for concurrent use, so we don't need to\n// lock it.\nw := zapcore.AddSync(&lumberjack.Logger{\n  Filename:   \"/var/log/myapp/foo.log\",\n  MaxSize:    500, // megabytes\n  MaxBackups: 3,\n  MaxAge:     28, // days\n})\ncore := zapcore.NewCore(\n  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n  w,\n  zap.InfoLevel,\n)\nlogger := zap.New(core)\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Function Signature in GoValidator\nDESCRIPTION: Shows the updated signature for custom validator functions, which now includes a context parameter for dependent validation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\n// old signature\nfunc(i interface{}) bool\n\n// new signature\nfunc(i interface{}, o interface{}) bool\n```\n\n----------------------------------------\n\nTITLE: Complete Prometheus Configuration\nDESCRIPTION: Full Prometheus configuration including self-scraping and remote write to Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: http://localhost:9009/api/v1/push\n\nscrape_configs:\n  - job_name: prometheus\n    honor_labels: true\n    static_configs:\n      - targets: [\"localhost:9090\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Routing with HttpRouter in Go\nDESCRIPTION: This snippet demonstrates how to set up a basic HTTP server using HttpRouter. It defines two route handlers, initializes the router, and starts the server.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"log\"\n\n    \"github.com/julienschmidt/httprouter\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \"Welcome!\\n\")\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \"hello, %s!\\n\", ps.ByName(\"name\"))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\"/\", Index)\n    router.GET(\"/hello/:name\", Hello)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregations for Views in Go\nDESCRIPTION: Examples of creating different types of aggregations (Distribution, Count, Sum) for use in views.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Helm Repository for Grafana Charts\nDESCRIPTION: Adds the Grafana Helm repository and updates the local Helm chart cache.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Set Alertmanager Configuration via HTTP API\nDESCRIPTION: Allows storing or updating the Alertmanager configuration with a POST request that includes the YAML configuration in the body. This internal endpoint is controllable via the `-alertmanager.enable-api` flag and returns status 201 on success. Template file names should exclude path separators.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_47\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST /api/v1/alerts\n```\n\n----------------------------------------\n\nTITLE: Modified Metrics Output After Override\nDESCRIPTION: Updated metrics output showing the effect of tenant-specific tracker overrides.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-custom-trackers.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncortex_ingester_active_series_custom_tracker{name=\"dev\", user=\"tenant_1\"}                                           5\ncortex_ingester_active_series_custom_tracker{name=\"prod\", user=\"tenant_1\"}                                         10\ncortex_ingester_active_series_custom_tracker{name=\"service1\", user=\"tenant_with_only_prod_metrics\"}                 1\ncortex_ingester_active_series_custom_tracker{name=\"service2\", user=\"tenant_with_only_prod_metrics\"}                 2\n```\n\n----------------------------------------\n\nTITLE: Alertmanager UTF-8 Strict Mode\nDESCRIPTION: This experimental setting enables strict UTF-8 mode, allowing UTF-8 characters in various Alertmanager configurations. It is recommended to run the `migrate-utf8` command before enabling this mode.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_103\n\nLANGUAGE: yaml\nCODE:\n```\n# (experimental) Enable UTF-8 strict mode. Allows UTF-8 characters in the\n# matchers for routes and inhibition rules, in silences, and in the labels for\n# alerts. It is recommended that all tenants run the `migrate-utf8` command in\n# mimirtool before enabling this mode. Otherwise, some tenant configurations\n# might fail to load. For more information, refer to [Enable\n# UTF-8](https://grafana.com/docs/mimir/<MIMIR_VERSION>/references/architecture/components/alertmanager/#enable-utf-8).\n# Enabling and then disabling UTF-8 strict mode can break existing Alertmanager\n# configurations if tenants added UTF-8 characters to their Alertmanager\n# configuration while it was enabled.\n# CLI flag: -alertmanager.utf8-strict-mode-enabled\n[utf8_strict_mode: <boolean> | default = false]\n\n```\n\n----------------------------------------\n\nTITLE: Coalesce Lexer Tokens in Go\nDESCRIPTION: The snippet uses a coalescing lexer in Go to combine runs of similar token types into single tokens, reducing verbosity in output.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlexer = chroma.Coalesce(lexer)\n```\n\n----------------------------------------\n\nTITLE: Generating and exporting Kubernetes YAML manifests\nDESCRIPTION: Commands to generate Kubernetes YAML manifests from the Jsonnet files and export them to the './manifests' directory using Tanka.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/deploy.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Generate the YAML manifests:\nexport PAGER=cat\ntk show environments/default\ntk export manifests environments/default\n```\n\n----------------------------------------\n\nTITLE: Customizing Mimir Configuration\nDESCRIPTION: This snippet shows how to customize the Mimir configuration by passing a hash with configuration parameters. In this example, it sets the target to 'querier'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/puppet/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: puppet\nCODE:\n```\nclass {'mimir':\n    config_hash => {\n        target => 'querier',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Geographical Zone-Aware Replication for Ingesters\nDESCRIPTION: YAML configuration for setting up geographical zone-aware replication with specific node selectors for different availability zones in ingesters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: false # Do not turn on zone-awareness without migration because of potential data loss\n    topologyKey: \"kubernetes.io/hostname\" # Triggers creating anti-affinity rules\n    zones:\n      - name: zone-a\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-a\n      - name: zone-b\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-b\n      - name: zone-c\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-c\n```\n\n----------------------------------------\n\nTITLE: Using Generated Static Filesystem in Go\nDESCRIPTION: Examples of how to use the generated static filesystem, including opening a file and serving assets over HTTP.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/shurcooL/vfsgen/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfile, err := assets.Open(\"/some/file.txt\")\nif err != nil {\n\treturn err\n}\ndefer file.Close()\n```\n\nLANGUAGE: go\nCODE:\n```\nhttp.Handle(\"/assets/\", http.FileServer(assets))\n```\n\n----------------------------------------\n\nTITLE: Grafana Alloy Remote Write Configuration\nDESCRIPTION: Configuration for Grafana Alloy to write metrics to Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.remote_write \"LABEL\" {\n  endpoint {\n    url = http://localhost:9009/api/v1/push\n\n    ...\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Update Target Group Example in Go\nDESCRIPTION: Shows how to handle updates in service discovery by sending changed target groups down the channel. Demonstrates removing a single target while maintaining the group structure.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n&targetgroup.Group{\n\tTargets: []model.LabelSet{\n\t\t{\n\t\t\t\"__instance__\": \"10.11.122.11:6001\",\n\t\t\t\"hostname\":     \"demo-postgres-1\",\n\t\t\t\"test\":         \"simple-test\",\n\t\t},\n\t},\n\tLabels: model.LabelSet{\n\t\t\"job\": \"postgres\",\n\t},\n\t\"Source\": \"file2\",\n}\n```\n\n----------------------------------------\n\nTITLE: Running mark-blocks with Google Cloud Storage\nDESCRIPTION: Example command for executing the mark-blocks utility with Google Cloud Storage backend. This command specifies tenant, blocks, mark type, and uses the dry-run flag to preview changes without applying them.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/mark-blocks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mark-blocks \\\n  --tenant <tenant> \\\n  --blocks <blocks> \\\n  --mark-type <mark-type> \\\n  --backend gcs \\\n  --gcs.bucket-name <bucket name> \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Deploying Mimir with Helm\nDESCRIPTION: Command to deploy or upgrade Mimir using Helm with the specified values configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-autoscaling.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install mimir grafana/mimir-distributed -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling with Flat Paths in Koanf (Go)\nDESCRIPTION: This snippet demonstrates how to unmarshal nested structures into a flat target structure using Koanf's UnmarshalConf.FlatPaths flag. It shows examples of unmarshalling both the entire configuration and a specific child structure.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use . as the key path delimiter. This can be / or anything.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\ttype rootFlat struct {\n\t\tType                        string            `koanf:\"type\"`\n\t\tEmpty                       map[string]string `koanf:\"empty\"`\n\t\tParent1Name                 string            `koanf:\"parent1.name\"`\n\t\tParent1ID                   int               `koanf:\"parent1.id\"`\n\t\tParent1Child1Name           string            `koanf:\"parent1.child1.name\"`\n\t\tParent1Child1Type           string            `koanf:\"parent1.child1.type\"`\n\t\tParent1Child1Empty          map[string]string `koanf:\"parent1.child1.empty\"`\n\t\tParent1Child1Grandchild1IDs []int             `koanf:\"parent1.child1.grandchild1.ids\"`\n\t\tParent1Child1Grandchild1On  bool              `koanf:\"parent1.child1.grandchild1.on\"`\n\t}\n\n\t// Unmarshal the whole root with FlatPaths: True.\n\tvar o1 rootFlat\n\tk.UnmarshalWithConf(\"\", &o1, koanf.UnmarshalConf{Tag: \"koanf\", FlatPaths: true})\n\tfmt.Println(o1)\n\n\t// Unmarshal a child structure of \"parent1\".\n\ttype subFlat struct {\n\t\tName                 string            `koanf:\"name\"`\n\t\tID                   int               `koanf:\"id\"`\n\t\tChild1Name           string            `koanf:\"child1.name\"`\n\t\tChild1Type           string            `koanf:\"child1.type\"`\n\t\tChild1Empty          map[string]string `koanf:\"child1.empty\"`\n\t\tChild1Grandchild1IDs []int             `koanf:\"child1.grandchild1.ids\"`\n\t\tChild1Grandchild1On  bool              `koanf:\"child1.grandchild1.on\"`\n\t}\n\n\tvar o2 subFlat\n\tk.UnmarshalWithConf(\"parent1\", &o2, koanf.UnmarshalConf{Tag: \"koanf\", FlatPaths: true})\n\tfmt.Println(o2)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration example for setting up Azure Blob Storage as the backend for Grafana Mimir. Includes account configuration and separate container settings for blocks, alertmanager, and ruler storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-object-storage-backend.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncommon:\n  storage:\n    backend: azure\n    azure:\n      account_key: \"${AZURE_ACCOUNT_KEY}\"\n      account_name: mimirprod\n      endpoint_suffix: \"blob.core.windows.net\"\n\nblocks_storage:\n  azure:\n    container_name: mimir-blocks\n\nalertmanager_storage:\n  azure:\n    container_name: mimir-alertmanager\n\nruler_storage:\n  azure:\n    container_name: mimir-ruler\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client in Go\nDESCRIPTION: This snippet shows how to create a new storage.Client object for interacting with Google Cloud Storage. The client is created using the provided context.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/storage/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := storage.NewClient(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Querier: Default Evaluation Interval Configuration\nDESCRIPTION: Specifies the default evaluation interval or step size for subqueries. This option should be configured on the query-frontend as well when query sharding is enabled.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n\"# (advanced) The default evaluation interval or step size for subqueries. This\\n# config option should be set on query-frontend too when query sharding is\\n# enabled.\\n# CLI flag: -querier.default-evaluation-interval\\n[default_evaluation_interval: <duration> | default = 1m]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in HCL\nDESCRIPTION: This snippet demonstrates how to define a variable in HCL, which includes specifying a description for the variable. It highlights the syntax for creating nested objects and their translation into JSON format.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/hcl/README.md#2025-04-17_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"ami\" {\n    description = \"the AMI to use\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable\": {\n      \"ami\": {\n          \"description\": \"the AMI to use\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Server Settings\nDESCRIPTION: Essential configuration parameters for Grafana Mimir server including HTTP port, storage backend settings for blocks, ruler, and alertmanager, along with directory paths for various components.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/common-flags-old.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-server.http-listen-port=80\n-blocks-storage.backend=s3\n-ruler-storage.backend=s3\n-alertmanager-storage.backend=s3\n-querier.active-query-tracker-dir=./active-query-tracker\n-alertmanager.storage.path=data/\n-blocks-storage.filesystem.dir=\n-compactor.data-dir=./data\n-ruler.rule-path=/rules\n-ruler-storage.filesystem.dir=\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Azure Blob Operations\nDESCRIPTION: Example showing error handling for blob operations using the bloberror package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tconnectionString = \"<connection_string>\"\n\tcontainerName    = \"sample-container\"\n)\n\n// create a client with the provided connection string\nclient, err := azblob.NewClientFromConnectionString(connectionString, nil)\n// TODO: handle error\n\n// try to delete the container, avoiding any potential race conditions with an in-progress or completed deletion\n_, err = client.DeleteContainer(context.TODO(), containerName, nil)\n\nif bloberror.HasCode(err, bloberror.ContainerBeingDeleted, bloberror.ContainerNotFound) {\n\t// ignore any errors if the container is being deleted or already has been deleted\n} else if err != nil {\n\t// TODO: some other error\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CLI Flags for Read-Write Components\nDESCRIPTION: Example of setting CLI flags for read-write components that are inherited from microservices configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-deployment-mode.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    // This change also applies to mimir-backend.\n    store_gateway_args+:: {\n      'blocks-storage.bucket-store.sync-interval': '5m',\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verbose Logging with V-levels\nDESCRIPTION: Demonstrates V-level logging functionality in klog, allowing for granular control over log verbosity levels. Shows conditional logging based on verbosity settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n    glog.Info(\"Starting transaction...\")\n}\n\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving CPU Count Information with numcpus in Go\nDESCRIPTION: This snippet demonstrates how to use the numcpus package to get information about the number of online and possible CPUs in a system. It shows error handling and prints the results to stdout. If a function is not supported on the current platform, an error is returned.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/tklauser/numcpus/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/tklauser/numcpus\"\n)\n\nfunc main() {\n\tonline, err := numcpus.GetOnline()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetOnline: %v\\n\", err)\n\t}\n\tfmt.Printf(\"online CPUs: %v\\n\", online)\n\n\tpossible, err := numcpus.GetPossible()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetPossible: %v\\n\", err)\n\t}\n\tfmt.Printf(\"possible CPUs: %v\\n\", possible)\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Opcode Sequence Operations in Go\nDESCRIPTION: This snippet describes the transition from a longer opcode sequence to an optimized shorter version, reducing the number of instructions used in the encoding process, thus improving performance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n- opStructFieldHeadInt ( `{\"x\": 1,` )\n- opStructEndString ( `\"y\": \"hello\"}` )\n- opEnd\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Executor in Go\nDESCRIPTION: Shows how to use concurrent.Executor for managing goroutines with explicit ownership and cancellation support. Includes ticker-based execution with graceful shutdown capabilities.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Cache Results Configuration\nDESCRIPTION: Determines whether to cache query results in the query-frontend.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Cache query results.\\n# CLI flag: -query-frontend.cache-results\\n[cache_results: <boolean> | default = false]\"\n```\n\n----------------------------------------\n\nTITLE: Using Denco as URL Router in Go\nDESCRIPTION: This code demonstrates how to use Denco as a URL router. It builds a router with different routes and then uses `router.Lookup()` to find the route that matches a given path. The code then prints the data, parameters, and a boolean indicating whether a match was found. The `denco.Record` type is used to associate routes with data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-openapi/runtime/middleware/denco\"\n)\n\ntype route struct {\n\tname string\n}\n\nfunc main() {\n\trouter := denco.New()\n\trouter.Build([]denco.Record{\n\t\t{\"/\", &route{\"root\"}},\n\t\t{\"/user/:id\", &route{\"user\"}},\n\t\t{\"/user/:name/:id\", &route{\"username\"}},\n\t\t{\"/static/*filepath\", &route{\"static\"}},\n\t})\n\n\tdata, params, found := router.Lookup(\"/\")\n\t// print `&main.route{name:\"root\"}, denco.Params(nil), true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/user/hoge\")\n\t// print `&main.route{name:\"user\"}, denco.Params{denco.Param{Name:\"id\", Value:\"hoge\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/user/hoge/7\")\n\t// print `&main.route{name:\"username\"}, denco.Params{denco.Param{Name:\"name\", Value:\"hoge\"}, denco.Param{Name:\"id\", Value:\"7\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/static/path/to/file\")\n\t// print `&main.route{name:\"static\"}, denco.Params{denco.Param{Name:\"filepath\", Value:\"path/to/file\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Context with errors.Wrap\nDESCRIPTION: Shows how to add context to an error using the errors.Wrap function when handling a file read operation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects from Google Cloud Storage (GCS)\nDESCRIPTION: Example command to delete objects from a GCS bucket using the delete-objects program.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/delete-objects/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat objects-to-delete.txt | ./delete-objects -concurrency 64 -backend gcs --gcs.bucket-name <GCS_BUCKET_NAME>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Query Plan Flow with Mermaid\nDESCRIPTION: A Mermaid flowchart depicting the operator chain for the query `max(sum by (environment) (some_metric{cluster=\"cluster-1\"}))`. The chart shows how data flows from the instant vector selector through the sum aggregation to the max aggregation operator before producing the final output.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/streamingpromql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    IVS[\"`**instant vector selector**\n    some_metric#123;cluster=#quot;cluster-1#quot;#125;`\"]\n    sum[\"`**sum aggregation**\n    sum by (environment) (...)`\"]\n    max[\"`**max aggregation**\n    max (...)`\"]\n    output((output))\n    IVS --> sum\n    sum --> max\n    max --> output\n```\n\n----------------------------------------\n\nTITLE: Inspecting TSDB Index TOC\nDESCRIPTION: Example of using tsdb-index-toc tool to display sizes of different sections in the TSDB Index.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntsdb-index-toc 01FPCEFXKRREFKH3MHQFXA9S7G/index\n```\n\n----------------------------------------\n\nTITLE: Removing Thanos Labels from meta.json Files (AWS S3)\nDESCRIPTION: This bash script iterates through meta.json files in an S3 bucket, removes the `thanos.labels` field using `jq`, and uploads the modified files back to S3. It first backs up the original file and skips the upload if no changes are detected.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n   BUCKET=\"S3 Bucket name\"\n\n   echo \"Fetching list of meta.json files (this can take a while if there are many blocks)\"\n   aws s3 ls \"s3://$BUCKET/*/meta.json\" | awk '{print $4}' > meta-files.txt\n\n   echo \"Processing meta.json files\"\n   for FILE in $(cat meta-files.txt); do\n      echo \"Removing Thanos labels from $FILE\"\n      ORIG_META_JSON=$(aws s3 cat \"s3://$BUCKET/$FILE\")\n      UPDATED_META_JSON=$(echo \"$ORIG_META_JSON\" | jq \"del(.thanos.labels)\")\n\n      if ! diff -u <( echo \"$ORIG_META_JSON\" | jq . ) <( echo \"$UPDATED_META_JSON\" | jq .) > /dev/null; then\n        echo \"Backing up $FILE to $FILE.orig\"\n        aws s3 cp \"s3://$BUCKET/$FILE\" \"s3://$BUCKET/$FILE.orig\"\n        echo \"Uploading modified $FILE\"\n        echo \"$UPDATED_META_JSON\" | aws s3 cp - \"s3://$BUCKET/$FILE\"\n      else\n        echo \"No diff for $FILE\"\n      fi\n   done\n   ```\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Stacktrace Information in Go\nDESCRIPTION: This example illustrates how to use the go-errors/errors package in a main function. It demonstrates error checking, type assertion, and printing the error stack trace. The code also shows how to use the errors.Is() function for error comparison.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-errors/errors/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"crashy\"\n    \"fmt\"\n    \"github.com/go-errors/errors\"\n)\n\nfunc main() {\n    err := crashy.Crash()\n    if err != nil {\n        if errors.Is(err, crashy.Crashed) {\n            fmt.Println(err.(*errors.Error).ErrorStack())\n        } else {\n            panic(err)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying KEDA Setup Commands\nDESCRIPTION: Shell commands for verifying the KEDA and HPA setup after deployment.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-autoscaling.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Apply changes\nhelm upgrade mimir grafana/mimir-distributed -f values.yaml\n\n# Verify setup\nkubectl get hpa\nkubectl get scaledobject\nkubectl describe hpa\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Rule Group from Grafana Mimir\nDESCRIPTION: This command retrieves and prints a single rule group from Grafana Mimir. It can also save the output to a specified directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules get <namespace> <rule_group_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules get <namespace> <rule_group_name> --output-dir=rules\n```\n\n----------------------------------------\n\nTITLE: Device code authentication with autorest/adal in Go\nDESCRIPTION: This snippet demonstrates device code authentication using autorest/adal, including initiating the device auth flow, waiting for user completion, and creating a ServicePrincipalToken.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthClient := &http.Client{}\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nresource := \"https://management.azure.com/\"\ndeviceCode, err := adal.InitiateDeviceAuth(oauthClient, *oauthCfg, clientID, resource)\nhandle(err)\n\n// display instructions, wait for the user to authenticate\nfmt.Println(*deviceCode.Message)\ntoken, err := adal.WaitForUserCompletion(oauthClient, deviceCode)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenFromManualToken(*oauthCfg, clientID, resource, *token)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Changes in Bash\nDESCRIPTION: Command to deploy the changes defined in the Terraform configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Running Helm Chart Testing with Docker\nDESCRIPTION: Command to run chart-testing (ct) tool in a Docker container for linting Helm charts. It mounts the current directory and runs ct lint with specific configuration options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/contributing-to-helm-chart.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -u $(id -g):$(id -u) -e HOME=/tmp -v $(pwd):/data quay.io/helmpack/chart-testing:latest sh -c \"ct lint --all --debug --chart-dirs /data/operations/helm/charts --check-version-increment false --config /data/operations/helm/ct.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Trace Noop Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a markdown file. The badge links to the documentation for the Trace Noop package on pkg.go.dev.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/trace/noop/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/noop)\n```\n\n----------------------------------------\n\nTITLE: Configuring Low Resource Requirements for Mimir Components\nDESCRIPTION: Comprehensive configuration to reduce CPU and memory requirements for all Mimir components, including adjustments for containers, deployments, statefulsets, and memcached instances. Sets minimal resource requests and reduces replica counts.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-low-resources.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\nlocal k = import 'github.com/grafana/jsonnet-libs/ksonnet-util/kausal.libsonnet',\n      deployment = k.apps.v1.deployment,\n      statefulSet = k.apps.v1.statefulSet;\nlocal mimir = import 'mimir/mimir.libsonnet';\n\nmimir {\n  _config+:: {\n    // ... configuration values\n  },\n\n  compactor_container+: k.util.resourcesRequests('100m', '128Mi'),\n  compactor_statefulset+: statefulSet.mixin.spec.withReplicas(1),\n\n  distributor_container+: k.util.resourcesRequests('100m', '128Mi'),\n  distributor_deployment+: deployment.mixin.spec.withReplicas(2),\n\n  ingester_container+: k.util.resourcesRequests('100m', '128Mi'),\n  ingester_statefulset+: statefulSet.mixin.spec.withReplicas(3),\n\n  querier_container+: k.util.resourcesRequests('100m', '128Mi'),\n  querier_deployment+: deployment.mixin.spec.withReplicas(2),\n\n  query_frontend_container+: k.util.resourcesRequests('100m', '128Mi'),\n  query_frontend_deployment+: deployment.mixin.spec.withReplicas(2),\n\n  store_gateway_container+: k.util.resourcesRequests('100m', '128Mi'),\n  store_gateway_statefulset+: statefulSet.mixin.spec.withReplicas(1),\n\n  local smallMemcached = {\n    cpu_requests:: '100m',\n    memory_limit_mb:: 64,\n    memory_request_overhead_mb:: 8,\n    statefulSet+: statefulSet.mixin.spec.withReplicas(1),\n  },\n\n  memcached_chunks+: smallMemcached,\n  memcached_frontend+: smallMemcached,\n  memcached_index_queries+: smallMemcached,\n  memcached_metadata+: smallMemcached,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Pod Affinity Rules for Mimir Components\nDESCRIPTION: YAML configuration for setting up pod anti-affinity rules for Mimir ingester and store-gateway components in Kubernetes. This configuration ensures pods are properly distributed across nodes for high availability.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.4.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: target\n                operator: In\n                values:\n                  - ingester\n          topologyKey: \"kubernetes.io/hostname\"\n        - labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/component\n                operator: In\n                values:\n                  - ingester\n          topologyKey: \"kubernetes.io/hostname\"\nstore_gateway:\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: target\n                operator: In\n                values:\n                  - store-gateway\n          topologyKey: \"kubernetes.io/hostname\"\n        - labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/component\n                operator: In\n                values:\n                  - store-gateway\n          topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Advanced listblocks usage in Grafana Mimir\nDESCRIPTION: This example demonstrates using listblocks with additional options to filter blocks by time range, display labels, and show block sizes. It outputs detailed information about blocks within a specific date range.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/listblocks.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./listblocks -backend=gcs -gcs.bucket-name=bucket-with-blocks -user=10428 -min-time=2022-02-01T00:00:00Z -max-time=2022-02-04T00:00:00Z -show-labels -show-block-size\nBlock ID                     Min Time               Max Time               Duration   Size     Labels (excl. __org_id__)\n01FTWJ3V2TP7N4D7FCSSBJXQ9Z   2022-02-01T00:00:00Z   2022-02-02T00:00:00Z   24h0m0s    69 GiB   {__compactor_shard_id__=\"1_of_4\"}\n01FTWJZ3FD4QX4T1FMJJNP7XR1   2022-02-01T00:00:00Z   2022-02-02T00:00:00Z   24h0m0s    69 GiB   {__compactor_shard_id__=\"2_of_4\"}\n01FTWMN7AQBPMXWBHVC61ENPT7   2022-02-01T00:00:00Z   2022-02-02T00:00:00Z   24h0m0s    69 GiB   {__compactor_shard_id__=\"3_of_4\"}\n01FTWQ5Y87AWVKXH44T2N23BHW   2022-02-01T00:00:00Z   2022-02-02T00:00:00Z   24h0m0s    69 GiB   {__compactor_shard_id__=\"4_of_4\"}\n01FTZ4QWE2PNK69ZJGTK2NCWFB   2022-02-02T00:00:00Z   2022-02-03T00:00:00Z   24h0m0s    73 GiB   {__compactor_shard_id__=\"1_of_4\"}\n01FTZ55XAZCVHWP9K5AAR5BVHF   2022-02-02T00:00:00Z   2022-02-03T00:00:00Z   24h0m0s    73 GiB   {__compactor_shard_id__=\"2_of_4\"}\n01FTZ7AQBCSBB8T6P2Q5QZ416W   2022-02-02T00:00:00Z   2022-02-03T00:00:00Z   24h0m0s    73 GiB   {__compactor_shard_id__=\"3_of_4\"}\n01FTYW42TNTZ44QMM9YTFDE6Y4   2022-02-02T00:00:00Z   2022-02-03T00:00:00Z   24h0m0s    73 GiB   {__compactor_shard_id__=\"4_of_4\"}\n01FV1S5GQDAFTQ4M9CTN1CD1E4   2022-02-03T00:00:00Z   2022-02-04T00:00:00Z   24h0m0s    77 GiB   {__compactor_shard_id__=\"1_of_4\"}\n01FV1JKPH2VFXA4K6XNETC8FBR   2022-02-03T00:00:00Z   2022-02-04T00:00:00Z   24h0m0s    77 GiB   {__compactor_shard_id__=\"2_of_4\"}\n01FV1VQQTAJVA287ZY8DC435HD   2022-02-03T00:00:00Z   2022-02-04T00:00:00Z   24h0m0s    77 GiB   {__compactor_shard_id__=\"3_of_4\"}\n01FV1FRX39NC1J64D6H6W9VVZ9   2022-02-03T00:00:00Z   2022-02-04T00:00:00Z   24h0m0s    77 GiB   {__compactor_shard_id__=\"4_of_4\"}\n```\n\n----------------------------------------\n\nTITLE: Migrated Gateway Configuration\nDESCRIPTION: Converted Helm values configuration using Gateway setup, showing the new structure and parameter mapping from the NGINX configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nnginx:\n  enabled: false\n\ngateway:\n  enabledNonEnterprise: true\n  replicas: 4\n\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 100%\n      maxUnavailable: 10%\n\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: noisyNeighbour\n                operator: In\n                values:\n                  - \"true\"\n          topologyKey: \"kubernetes.io/hostname\"\n\n  env:\n    - name: SPECIAL_TYPE_KEY\n      valueFrom:\n        configMapKeyRef:\n          name: special-config\n          key: SPECIAL_TYPE\n\n  nginx:\n    basicAuth:\n      enabled: true\n      username: user\n      password: pass\n\n    image:\n      tag: 1.25-alpine\n\n    nginxConfig:\n      logFormat: |-\n        main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n  securityContext:\n    readOnlyRootFilesystem: true\n\n  ingress:\n    enabled: true\n    nameOverride: mimir-nginx\n    hosts:\n      - host: mimir.example.com\n        paths:\n          - path: /\n            pathType: Prefix\n    tls:\n      - secretName: mimir-gateway-tls\n        hosts:\n          - mimir.example.com\n```\n\n----------------------------------------\n\nTITLE: Deploying Thanos Sidecar Kubernetes Deployment\nDESCRIPTION: Kubernetes deployment manifest for setting up Thanos sidecar with NGINX container. Configures pods with NGINX and Thanos sidecar containers, including volume mounts and network settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-to-mimir-with-thanos-sidecar.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: thanos-sidecar\n  namespace: mimir\n  labels:\n    app: thanos-sidecar\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: thanos-sidecar\n  template:\n    metadata:\n      labels:\n        app: thanos-sidecar\n    spec:\n      volumes:\n        - name: config\n          configMap:\n            name: sidecar-nginx\n            defaultMode: 420\n      containers:\n        - name: nginx\n          image: nginxinc/nginx-unprivileged:1.19-alpine\n          ports:\n            - name: http\n              containerPort: 8080\n              protocol: TCP\n          volumeMounts:\n            - name: config\n              mountPath: /etc/nginx\n          terminationMessagePath: /dev/termination-log\n          terminationMessagePolicy: File\n          imagePullPolicy: IfNotPresent\n        - name: thanos-sidecar\n          image: quay.io/thanos/thanos:v0.26.0\n          args:\n            - sidecar\n            - \"--prometheus.url=http://localhost:8080/prometheus\"\n            - \"--grpc-address=:10901\"\n            - \"--http-address=:10902\"\n            - \"--log.level=info\"\n            - \"--log.format=logfmt\"\n          ports:\n            - name: http\n              containerPort: 10902\n              protocol: TCP\n            - name: grpc\n              containerPort: 10901\n              protocol: TCP\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      dnsPolicy: ClusterFirst\n      schedulerName: default-scheduler\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 25%\n      maxSurge: 25%\n  revisionHistoryLimit: 10\n  progressDeadlineSeconds: 600\n```\n\n----------------------------------------\n\nTITLE: Basic GoPacket Development Setup Commands\nDESCRIPTION: Shell commands for setting up a GoPacket development environment, including getting the code and creating a new feature branch.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/google/gopacket/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/gopacket\ncd $GOROOT/src/pkg/github.com/google/gopacket\ngit checkout -b <mynewfeature>  # create a new branch to work from\n... code code code ...\n./gc  # Run this to do local commits, it performs a number of checks\n```\n\n----------------------------------------\n\nTITLE: Performing a Range Scan in Radix Tree in Go\nDESCRIPTION: This snippet demonstrates how to perform a range scan over the keys in a radix tree using an iterator. It initializes the iterator, seeks to a lower bound, and iterates through the keys until an upper bound is reached, printing each key within the specified range. The keys are compared lexicographically.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-immutable-radix/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create a tree\nr := iradix.New()\nr, _, _ = r.Insert([]byte(\"001\"), 1)\nr, _, _ = r.Insert([]byte(\"002\"), 2)\nr, _, _ = r.Insert([]byte(\"005\"), 5)\nr, _, _ = r.Insert([]byte(\"010\"), 10)\nr, _, _ = r.Insert([]byte(\"100\"), 10)\n\n// Range scan over the keys that sort lexicographically between [003, 050)\nit := r.Root().Iterator()\nit.SeekLowerBound([]byte(\"003\"))\nfor key, _, ok := it.Next(); ok; key, _, ok = it.Next() {\n  if key >= \"050\" {\n      break\n  }\n  fmt.Println(key)\n}\n// Output:\n//  005\n//  010\n```\n\n----------------------------------------\n\nTITLE: Enabling Mimir Query Engine via CLI Flag in YAML\nDESCRIPTION: This YAML configuration snippet shows how to enable the Mimir Query Engine (MQE) using a CLI flag. It sets the query engine to 'mimir' for the querier component.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/mimir-query-engine.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-querier.query-engine=mimir\n```\n\n----------------------------------------\n\nTITLE: GOMAXPROCS Configuration\nDESCRIPTION: Ingester configuration setting for GOMAXPROCS to optimize Go scheduling on machines with many CPU cores.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: \"GOMAXPROCS\"\n    value: \"$(GOMAXPROCS)\"\n```\n\n----------------------------------------\n\nTITLE: Creating S2 Writer with Separate Index Storage in Go\nDESCRIPTION: Shows how to create an S2 Writer that returns the index separately for custom storage. This allows for using the index without needing to seek to the end of the stream.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\n\t// Get index for separate storage... \n\tenc := s2.NewWriter(w)\n\tio.Copy(enc, r)\n\tindex, err := enc.CloseIndex()\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruler Query Frontend Address for Query-Tee in YAML\nDESCRIPTION: This YAML configuration snippet sets the ruler's query frontend address to the query-tee's gRPC address. This setup enables the ruler to send evaluation requests through query-tee for comparison across different backends.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/query-tee.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nruler:\n  query_frontend:\n    address: \"dns://query-tee:9095\"\n```\n\n----------------------------------------\n\nTITLE: Setting Unique Cluster Label for Mimir Components\nDESCRIPTION: YAML configuration that sets a unique Memberlist cluster label using Helm release name and namespace while keeping verification disabled to prevent partitioning issues during the transition.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-enable-cluster-label-verification/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    memberlist:\n      cluster_label_verification_disabled: true\n      cluster_label: \"{{.Release.Name}}-{{.Release.Namespace}}\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Write Request Traffic - Prometheus Query\nDESCRIPTION: Prometheus query to monitor write request traffic rates across distributor jobs to ensure proper traffic migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_8\n\nLANGUAGE: promql\nCODE:\n```\nsum by (job) (rate(cortex_request_duration_seconds_count{job=~\".*distributor.*\", route=~\"/distributor.Distributor/Push|/httpgrpc.*|api_(v1|prom)_push|otlp_v1_metrics\"}[1m]))\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Series and TSDB Parameters in YAML\nDESCRIPTION: Basic timeout and update period settings for active series metrics and TSDB configuration updates.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nactive_series_metrics_idle_timeout: <duration> | default = 20m\n\ntsdb_config_update_period: <duration> | default = 15s\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client TLS Certificate Path\nDESCRIPTION: This specifies the path to the client certificate file used for TLS authentication.  This certificate is used to authenticate the client to the Alertmanager server.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_90\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Path to the client certificate, which will be used for\n  # authenticating with the server. Also requires the key path to be configured.\n  # CLI flag: -alertmanager.alertmanager-client.tls-cert-path\n  [tls_cert_path: <string> | default = \"\"]\n\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: gRPC Client Configuration\nDESCRIPTION: Configures the gRPC client used for communication between the query-frontends and the query-schedulers. The CLI flags for this configuration are prefixed with `query-frontend.grpc-client-config`.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Configures the gRPC client used to communicate between the query-frontends and\\n# the query-schedulers.\\n# The CLI flags prefix for this block configuration is:\\n# query-frontend.grpc-client-config\\n[grpc_client_config: <grpc_client>]\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol in Go\nDESCRIPTION: This code snippet demonstrates how to enable PROXY protocol support by setting the `ProxyProtocolEnabled` field in the `Config` struct to `true` before initializing a `Server`. This configuration enables PROXY protocol for both HTTP and gRPC servers. It requires importing the relevant Mimir packages and instantiating a `Config` struct.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/dskit/server/PROXYPROTOCOL.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncfg := &Config{\n    ProxyProtocolEnabled: true,\n    // ...\n}\n\nserver := NewServer(cfg)\n// ...\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for Mimir Status Endpoints\nDESCRIPTION: NGINX configuration blocks for spoofing Prometheus API endpoints required by Thanos sidecar, including build info and config endpoints.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-to-mimir-with-thanos-sidecar.md#2025-04-17_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /prometheus/api/v1/status/config {\n        add_header Content-Type application/json;\n        return 200 \"{\\\"status\\\":\\\"success\\\",\\\"data\\\":{\\\"yaml\\\": \\\"global:\\n  external_labels:\\n    source: mimir\\\"}}\";\n    }\n\nlocation /prometheus/api/v1/status/buildinfo {\n        add_header Content-Type application/json;\n        return 200 \"{\\\"status\\\":\\\"success\\\",\\\"data\\\":{\\\"version\\\":\\\"2.35.0\\\",\\\"revision\\\":\\\"6656cd29fe6ac92bab91ecec0fe162ef0f187654\\\",\\\"branch\\\":\\\"HEAD\\\",\\\"buildUser\\\":\\\"root@cf6852b14d68\\\",\\\"buildDate\\\":\\\"20220421-09:53:42\\\",\\\"goVersion\\\":\\\"go1.18.1\\\"}}\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Middleware Implementation in Telebot\nDESCRIPTION: Examples of implementing middleware at different scopes (global, group, and handler) and creating custom middleware functions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nb.Use(middleware.Logger())\nb.Use(middleware.AutoRespond())\n\nadminOnly := b.Group()\nadminOnly.Use(middleware.Whitelist(adminIDs...))\nadminOnly.Handle(\"/ban\", onBan)\nadminOnly.Handle(\"/kick\", onKick)\n\nb.Handle(tele.OnText, onText, middleware.IgnoreVia())\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Data Tables for Offset Serialization Formats\nDESCRIPTION: Performance comparison tables showing different encoding formats for partition offsets, measuring bytes length, encoding performance, decoding performance, and lookup performance across various implementation approaches.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/querier/api/DESIGN.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Encoding format                                                                                    | Bytes length |\n| -------------------------------------------------------------------------------------------------- | ------------ |\n| Comma-separated string: \"partition_id:offset_id\"                                                   | 23889        |\n| Binary-encoded list of partition_id offset_id pairs, encoded with: Varint + base64                 | 15916        |\n| Binary-encoded list of partition_id offset_id pairs, encoded with: Varint + snappy + base64        | 7980         |\n| Binary-encoded list of offset_id only, encoded with: Varint + snappy + base64                      | 5364         |\n| Binary-encoded list of partition_id offset_id pairs, encoded with: Int32 / int64 + base64          | 16000        |\n| Binary-encoded list of partition_id offset_id pairs, encoded with: Int32 / int64 + snappy + base64 | 10688        |\n| Binary-encoded list of offset_id only, encoded with: Int + snappy + base64                         | 5356         |\n```\n\n----------------------------------------\n\nTITLE: Wrapping Global Tracer in Go\nDESCRIPTION: Demonstrates how to wrap the global OpenTracing tracer with the Span Profiler for improved profiling capabilities. This allows for selective profile recording of root spans, enhancing tracing efficiency across application logic.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/dskit/spanprofiler/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/opentracing/opentracing-go\"\n    \"github.com/grafana/dskit/spanprofiler\"\n)\n\nfunc main() {\n    // Initialize your OpenTracing tracer\n    tracer := opentracing.GlobalTracer()\n    // Wrap it with the tracer-profiler \n    wrappedTracer := spanprofiler.NewTracer(tracer)\n    // Use the wrapped tracer in your application\n    opentracing.SetGlobalTracer(wrappedTracer)\n\n    // Or, as an oneliner:\n    // opentracing.SetGlobalTracer(spanprofiler.NewTracer(opentracing.GlobalTracer()))\n\n    // Your application logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer-Based Stream Compression with S2 in Go\nDESCRIPTION: Shows how to compress a single buffer of data as a stream using the EncodeBuffer method, which is more efficient for single-block compression scenarios\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc EncodeStream(src []byte, dst io.Writer) error {\n    enc := s2.NewWriter(dst)\n    // The encoder owns the buffer until Flush or Close is called.\n    err := enc.EncodeBuffer(src)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    // Blocks until compression is done.\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Client in Mimir\nDESCRIPTION: Configuration options for the etcd client used by various Mimir components including alertmanager, compactor, distributor, ingester, and store-gateway rings, specifying connection endpoints, timeouts, and TLS settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_113\n\nLANGUAGE: yaml\nCODE:\n```\n# The etcd endpoints to connect to.\n# CLI flag: -<prefix>.etcd.endpoints\n[endpoints: <list of strings> | default = []]\n\n# (advanced) The dial timeout for the etcd connection.\n# CLI flag: -<prefix>.etcd.dial-timeout\n[dial_timeout: <duration> | default = 10s]\n\n# (advanced) The maximum number of retries to do for failed ops.\n# CLI flag: -<prefix>.etcd.max-retries\n[max_retries: <int> | default = 10]\n\n# (advanced) Enable TLS.\n# CLI flag: -<prefix>.etcd.tls-enabled\n[tls_enabled: <boolean> | default = false]\n\n# (advanced) Path to the client certificate, which will be used for\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown with Gorilla Mux (Go)\nDESCRIPTION: Demonstrates how to implement graceful shutdown for a Gorilla Mux router using Go 1.8's shutdown capabilities. This ensures that existing connections are properly closed before the server stops.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    var wait time.Duration\n    flag.DurationVar(&wait, \"graceful-timeout\", time.Second * 15, \"the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m\")\n    flag.Parse()\n\n    r := mux.NewRouter()\n    // Add your routes as needed\n\n    srv := &http.Server{\n        Addr:         \"0.0.0.0:8080\",\n        // Good practice to set timeouts to avoid Slowloris attacks.\n        WriteTimeout: time.Second * 15,\n        ReadTimeout:  time.Second * 15,\n        IdleTimeout:  time.Second * 60,\n        Handler: r, // Pass our instance of gorilla/mux in.\n    }\n\n    // Run our server in a goroutine so that it doesn't block.\n    go func() {\n        if err := srv.ListenAndServe(); err != nil {\n            log.Println(err)\n        }\n    }()\n\n    c := make(chan os.Signal, 1)\n    // We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)\n    // SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.\n    signal.Notify(c, os.Interrupt)\n\n    // Block until we receive our signal.\n    <-c\n\n    // Create a deadline to wait for.\n    ctx, cancel := context.WithTimeout(context.Background(), wait)\n    defer cancel()\n    // Doesn't block if no connections, but will otherwise wait\n    // until the timeout deadline.\n    srv.Shutdown(ctx)\n    // Optionally, you could run srv.Shutdown in a goroutine and block on\n    // <-ctx.Done() if your application should wait for other services\n    // to finalize based on context cancellation.\n    log.Println(\"shutting down\")\n    os.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Default Configuration in Grafana Mimir\nDESCRIPTION: This endpoint displays the default configuration values for Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /config?mode=defaults\n```\n\n----------------------------------------\n\nTITLE: Processing Kafka Records with OpenTelemetry Spans in Go\nDESCRIPTION: This snippet illustrates how to process Kafka records using Kotel's WithProcessSpan method. It creates a 'process' span for the record, performs processing, and ensures the span is ended properly.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/twmb/franz-go/plugin/kotel/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc processRecord(record *kgo.Record, tracer *kotel.Tracer) {\n\tctx, span := tracer.WithProcessSpan(record)\n\t// Process the record here.\n\t// End the span when function exits.\n\tdefer span.End()\n\t// optionally pass the context to the next processing step.\n\tfmt.Printf(\n\t\t\"processed offset '%s' with key '%s' and value '%s'\\n\",\n\t\tstrconv.FormatInt(record.Offset, 10),\n\t\tstring(record.Key),\n\t\tstring(record.Value),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Line Options Structure in Go\nDESCRIPTION: Demonstrates how to define a struct with tags to specify command line options, including verbose flags, offsets, callbacks, required flags, and various data types.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jessevdk/go-flags/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Options struct {\n\tVerbose []bool `short:\"v\" long:\"verbose\" description:\"Show verbose debug information\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Rule Group from Grafana Mimir\nDESCRIPTION: This command deletes a specific rule group from Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules delete <namespace> <rule_group_name>\n```\n\n----------------------------------------\n\nTITLE: Finalizing Mimir Ingester Migration (YAML)\nDESCRIPTION: YAML configuration to be merged into the custom Helm values file. This enables zone-aware replication for ingesters and the rollout operator, completing the migration process.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Stream with zstd in Go\nDESCRIPTION: A function that compresses data from an input reader to an output writer using zstd compression with default options. It creates a new writer, copies all data from input to the encoder, and properly closes the encoder when done.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Histogram Count and Sum in PromQL\nDESCRIPTION: Examples showing how to query total count and sum of observations in both native and classic histograms.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/visualize/native-histograms/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: PromQL\nCODE:\n```\n# Native histograms:\nhistogram_count(sum(request_duration_seconds))\n\n# Classic histograms:\nsum(request_duration_seconds_count)\n```\n\nLANGUAGE: PromQL\nCODE:\n```\n# Native histograms:\nhistogram_sum(sum(request_duration_seconds))\n\n# Classic histograms:\nsum(request_duration_seconds_sum)\n```\n\n----------------------------------------\n\nTITLE: Calculating Last Produced Offset in Kafka\nDESCRIPTION: Demonstrates how to calculate the offset of the last produced record in a Kafka partition by subtracting 1 from the result of ListOffsets with timestamp -1.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/storage/ingest/DESIGN.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nFor this reason, the offset of the last produced record in a partition is `ListOffsets(timestamp = -1) - 1`.\n```\n\n----------------------------------------\n\nTITLE: Event Context Handling in Telebot\nDESCRIPTION: Examples of handling different types of Telegram events using Telebot's context system, including text messages, channel posts, photos, and inline queries.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nb.Handle(tele.OnText, func(c tele.Context) error {\n\tvar (\n\t\tuser = c.Sender()\n\t\ttext = c.Text()\n\t)\n\n\tmsg, err := b.Send(user, text)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.Send(text)\n})\n\nb.Handle(tele.OnChannelPost, func(c tele.Context) error {\n\tmsg := c.Message()\n})\n\nb.Handle(tele.OnPhoto, func(c tele.Context) error {\n\tphoto := c.Message().Photo\n})\n\nb.Handle(tele.OnQuery, func(c tele.Context) error {\n\treturn c.Answer(...)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Metrics for Kafka in Go\nDESCRIPTION: This snippet shows the metric names and labels used by kprom to track various Kafka-related operations. It includes counters for connections, errors, bytes read/written, and records produced/fetched.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/twmb/franz-go/plugin/kprom/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n#{ns}_connects_total{node_id=\"#{node}\"}\n#{ns}_connect_errors_total{node_id=\"#{node}\"}\n#{ns}_write_errors_total{node_id=\"#{node}\"}\n#{ns}_write_bytes_total{node_id=\"#{node}\"}\n#{ns}_read_errors_total{node_id=\"#{node}\"}\n#{ns}_read_bytes_total{node_id=\"#{node}\"}\n#{ns}_produce_bytes_total{node_id=\"#{node}\",topic=\"#{topic}\"}\n#{ns}_fetch_bytes_total{node_id=\"#{node}\",topic=\"#{topic}\"}\n#{ns}_buffered_produce_records_total\n#{ns}_buffered_fetch_records_total\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Identifying Leaking Tests\nDESCRIPTION: A bash script that helps determine which specific test is causing goroutine leaks when using package-level verification. The script runs each test individually and reports which tests fail the leak check.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/goleak/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a test binary which will be used to run each test individually\n$ go test -c -o tests\n\n# Run each test individually, printing \".\" for successful tests, or the test name\n# for failing tests.\n$ for test in $(go test -list . | grep -E \"^(Test|Example)\"); do ./tests -test.run \"^$test\\$\" &>/dev/null && echo -n \".\" || echo -e \"\\n$test failed\"; done\n```\n\n----------------------------------------\n\nTITLE: Querier: Enable Query Engine Fallback Configuration\nDESCRIPTION: Enables fallback to the Prometheus query engine for queries not supported by the Mimir query engine. This setting is applicable when the Mimir query engine is in use and allows handling a wider range of queries.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n\"# (experimental) If set to true and the Mimir query engine is in use, fall back\\n# to using the Prometheus query engine for any queries not supported by the\\n# Mimir query engine.\\n# CLI flag: -querier.enable-query-engine-fallback\\n[enable_query_engine_fallback: <boolean> | default = true]\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Block Information to CSV for Analysis\nDESCRIPTION: Command to export block information to CSV format for easier visualization and analysis. This helps understand block sources, external labels, and compaction levels before making changes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nthanos tools bucket inspect \\\n    --objstore.config-file bucket-prod.yaml \\\n    --output=csv > thanos-blocks.csv\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Max Retries Configuration\nDESCRIPTION: Configures the maximum number of retries for a single request. Beyond this limit, the downstream error is returned.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Maximum number of retries for a single request; beyond this, the\\n# downstream error is returned.\\n# CLI flag: -query-frontend.max-retries-per-request\\n[max_retries: <int> | default = 5]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart Values for Metamonitoring\nDESCRIPTION: This YAML configuration sets up metamonitoring using the Grafana Agent operator. It includes settings for collecting logs and metrics, specifying remote endpoints, and authentication details. It also enables scraping of Kubernetes metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/monitor-system-health.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetaMonitoring:\n  serviceMonitor:\n    enabled: true\n  grafanaAgent:\n    enabled: true\n    installOperator: true\n\n    logs:\n      remote:\n        url: \"https://example.com/loki/api/v1/push\"\n        auth:\n          username: \"12345\"\n          passwordSecretName: \"metamonitoring-credentials\"\n          passwordSecretKey: \"loki-api-key\"\n\n    metrics:\n      remote:\n        url: \"https://example.com/api/v1/push\"\n        auth:\n          username: \"54321\"\n          passwordSecretName: \"metamonitoring-credentials\"\n          passwordSecretKey: \"prometheus-api-key\"\n\n      scrapeK8s:\n        enabled: true\n        kubeStateMetrics:\n          namespace: kube-system\n          labelSelectors:\n            app.kubernetes.io/name: kube-state-metrics\n```\n\n----------------------------------------\n\nTITLE: Implementing PROXY Protocol Server in Go\nDESCRIPTION: Example of a Go server using the go-proxyproto library to create a listener that can handle PROXY protocol connections.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pires/go-proxyproto/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\tproxyproto \"github.com/pires/go-proxyproto\"\n)\n\nfunc main() {\n\t// Create a listener\n\taddr := \"localhost:9876\"\n\tlist, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"couldn't listen to %q: %q\\n\", addr, err.Error())\n\t}\n\n\t// Wrap listener in a proxyproto listener\n\tproxyListener := &proxyproto.Listener{Listener: list}\n\tdefer proxyListener.Close()\n\n\t// Wait for a connection and accept it\n\tconn, err := proxyListener.Accept()\n\tdefer conn.Close()\n\n\t// Print connection details\n\tif conn.LocalAddr() == nil {\n\t\tlog.Fatal(\"couldn't retrieve local address\")\n\t}\n\tlog.Printf(\"local address: %q\", conn.LocalAddr().String())\n\n\tif conn.RemoteAddr() == nil {\n\t\tlog.Fatal(\"couldn't retrieve remote address\")\n\t}\n\tlog.Printf(\"remote address: %q\", conn.RemoteAddr().String())\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes Deployment with Vault Agent Annotations\nDESCRIPTION: Generated Kubernetes Deployment manifest showing the annotations required for Vault Agent to inject certificates and keys into Pods, including role configuration and secret paths.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-hashicorp-vault-agent.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: release-name\n  labels:\n    helm.sh/chart: mimir-release-1.2.3\n    app.kubernetes.io/name: mimir\n    app.kubernetes.io/instance: release-name\n    app.kubernetes.io/component: comonent-name\n    app.kubernetes.io/version: \"123\"\n    app.kubernetes.io/managed-by: Helm\n  annotations: {}\n  namespace: \"default\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: mimir\n      app.kubernetes.io/instance: release-name\n      app.kubernetes.io/component: component-name\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        vault.hashicorp.com/agent-inject: \"true\"\n        vault.hashicorp.com/role: \"test-role\"\n        vault.hashicorp.com/agent-inject-secret-client.crt: \"client/cert/path\"\n        vault.hashicorp.com/agent-inject-secret-client.key: \"client/key/path\"\n        vault.hashicorp.com/agent-inject-secret-server.crt: \"server/cert/path\"\n        vault.hashicorp.com/agent-inject-secret-server.key: \"server/key/path\"\n        vault.hashicorp.com/agent-inject-secret-root.crt: \"ca/cert/path\"\n```\n\n----------------------------------------\n\nTITLE: Verifying IMDS Availability on Azure VM\nDESCRIPTION: Shell command to verify if the managed identity endpoint is available on an Azure VM by making a curl request to the metadata endpoint.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&api-version=2018-02-01' -H \"Metadata: true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Short Help Flag in Kingpin\nDESCRIPTION: Shows how to add a short -h flag for help in both simple and complex application scenarios using Kingpin's HelpFlag configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\tapp = kingpin.New(\"chat\", \"A command-line chat application.\")\n  // ...\n)\n\nfunc main() {\n\tapp.HelpFlag.Short('h')\n\tswitch kingpin.MustParse(app.Parse(os.Args[1:])) {\n  // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Objx Map from JSON in Go\nDESCRIPTION: This snippet demonstrates how to create an objx.Map from a JSON string using the MustFromJSON function. It then shows how to access and manipulate data within the map.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm := objx.MustFromJSON(`{\"name\": \"Mat\", \"age\": 30}`)\n\n// Get the details\nname := m.Get(\"name\").Str()\nage := m.Get(\"age\").Int()\n\n// Get their nickname (or use their name if they don't have one)\nnickname := m.Get(\"nickname\").Str(name)\n```\n\n----------------------------------------\n\nTITLE: Using JSON-Iterator Marshal as Replacement\nDESCRIPTION: Example showing how to replace standard json.Marshal with JSON-Iterator's compatible implementation for better performance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Client in Mimir\nDESCRIPTION: Configuration for how distributors connect to ingesters, setting up the gRPC client communication channel.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_110\n\nLANGUAGE: yaml\nCODE:\n```\n# Configures the gRPC client used to communicate with ingesters from\n# distributors, queriers and rulers.\n# The CLI flags prefix for this block configuration is: ingester.client\n[grpc_client_config: <grpc_client>]\n```\n\n----------------------------------------\n\nTITLE: Updating Changelog for Config Option Migration\nDESCRIPTION: Example of how to update the CHANGELOG.md file to reflect the migration of a config option from a global flag to a per-tenant override.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[CHANGE] Querier: `-query-frontend.cache-unaligned-requests` has been moved from a global flag to a per-tenant override. #5312\n```\n\n----------------------------------------\n\nTITLE: Generating CSS with HTML Formatter in Go\nDESCRIPTION: This snippet shows how to use options with the HTML formatter in Go to customize the generated output, including writing CSS based on classes rather than inline styles.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nformatter := html.New(html.WithClasses(true))\nerr := formatter.WriteCSS(w, style)\n```\n\n----------------------------------------\n\nTITLE: Displaying Storage Blocks in Tabbed Format\nDESCRIPTION: Example output showing storage block information in human-readable tabbed format. Displays block ID, time ranges, duration, compaction status, and size.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/listblocks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBlock ID                     Min Time               Max Time               Duration        No Compact                                    Size\n01HRB9NDFKKYM8CKGPBEY0E8QX   2024-03-06T00:00:00Z   2024-03-07T00:00:00Z   24h0m0s         [Time: 2025-04-10T19:48:56Z Reason: manual]   687 MiB\n01HRDWWNZQCH1MWCWKK4VMW08R   2024-03-07T00:00:00Z   2024-03-08T00:00:00Z   24h0m0s                                                       688 MiB\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoint for TSDB Metrics\nDESCRIPTION: Endpoint to retrieve tenant-specific TSDB metrics for troubleshooting.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nGET /ingester/tsdb_metrics\n```\n\n----------------------------------------\n\nTITLE: Enable Remote Evaluation Migration Mode\nDESCRIPTION: Configuration for zero-downtime migration to remote evaluation mode, enabling new deployments without immediate reconfiguration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-ruler.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n _config+:: {\n   ruler_remote_evaluation_enabled: true,\n   ruler_remote_evaluation_migration_enabled: true,\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Tree Nodes in Go\nDESCRIPTION: Shows how to traverse and operate on all nodes in a tree. Uses the VisitAll method with a callback function to process each node in the tree, distinguishing between branch nodes and leaf nodes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/xlab/treeprint/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntree := New()\n\none := tree.AddBranch(\"one\")\none.AddNode(\"one-subnode1\").AddNode(\"one-subnode2\")\none.AddBranch(\"two\").AddNode(\"two-subnode1\").AddNode(\"two-subnode2\").\n    AddBranch(\"three\").AddNode(\"three-subnode1\").AddNode(\"three-subnode2\")\ntree.AddNode(\"outernode\")\n\n// if you need to iterate over the whole tree\n// call `VisitAll` from your top root node.\ntree.VisitAll(func(item *node) {\n    if len(item.Nodes) > 0 {\n        // branch nodes\n        fmt.Println(item.Value) // will output one, two, three\n    } else {\n        // leaf nodes\n        fmt.Println(item.Value) // will output one-*, two-*, three-* and outernode\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Converting to Integer with ToInt in Go\nDESCRIPTION: Examples of using the ToInt function from the Cast library to convert various types to integers. This function handles different input types and returns an integer value.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/cast/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncast.ToInt(8)                  // 8\ncast.ToInt(8.31)               // 8\ncast.ToInt(\"8\")                // 8\ncast.ToInt(true)               // 1\ncast.ToInt(false)              // 0\n\nvar eight interface{} = 8\ncast.ToInt(eight)              // 8\ncast.ToInt(nil)                // 0\n```\n\n----------------------------------------\n\nTITLE: Mixing and Reusing Colors in Go\nDESCRIPTION: Shows how to create custom color objects by combining foreground colors, background colors, and text attributes like bold and underline.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create a new color object\nc := color.New(color.FgCyan).Add(color.Underline)\nc.Println(\"Prints cyan text with an underline.\")\n\n// Or just add them to New()\nd := color.New(color.FgCyan, color.Bold)\nd.Printf(\"This prints bold cyan %s\\n\", \"too!.\")\n\n// Mix up foreground and background colors, create new mixes!\nred := color.New(color.FgRed)\n\nboldRed := red.Add(color.Bold)\nboldRed.Println(\"This will print text in bold red.\")\n\nwhiteBackground := red.Add(color.BgWhite)\nwhiteBackground.Println(\"Red text with white background.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Command-Line Application with Flags and Arguments in Go\nDESCRIPTION: This snippet demonstrates how to use the Kingpin library to create a basic command-line application that pings a specified IP address with options for debug mode and timeout. It processes flags and required arguments for operation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n\n  \"github.com/alecthomas/kingpin/v2\"\n)\n\nvar (\n  debug   = kingpin.Flag(\"debug\", \"Enable debug mode.\").Bool()\n  timeout = kingpin.Flag(\"timeout\", \"Timeout waiting for ping.\").Default(\"5s\").Envar(\"PING_TIMEOUT\").Short('t').Duration()\n  ip      = kingpin.Arg(\"ip\", \"IP address to ping.\").Required().IP()\n  count   = kingpin.Arg(\"count\", \"Number of packets to send\").Int()\n)\n\nfunc main() {\n  kingpin.Version(\"0.0.1\")\n  kingpin.Parse()\n  fmt.Printf(\"Would ping: %s with timeout %s and count %d\\n\", *ip, *timeout, *count)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of tsdb-labels\nDESCRIPTION: This is example output of the `tsdb-labels` command showing various label names, number of label values and their distinct values. For example, the `AlertRules` label has two values `false` and `true`, while the `ClusterName` label has one value `etcd`.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n\"AlertRules 2 [false true]\\nClusterName 1 [etcd]\\nDomain 2 [API Controller]\\nEvent 4 [CREATE LIST READ UPDATE]\\naccess_mode 1 [ReadWriteOnce]\\nacl_operation 1 [OBJECT_ACCESS_REQUIRED_OBJECT_ACL]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics with Promauto\nDESCRIPTION: Shows the recommended way to create and register metrics using promauto.With() to automatically handle metric registration with a specific registry.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/design-patterns-and-conventions.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npromauto.With(reg)\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoints for Partition Downscale Preparation\nDESCRIPTION: Endpoints to manage ingester partition state for downscaling. Controls ACTIVE/INACTIVE state transitions.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nGET,POST,DELETE /ingester/prepare-partition-downscale\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway with Service and Ingress Settings\nDESCRIPTION: YAML configuration that preserves both the existing Service and Ingress resource names and settings when migrating from NGINX to Gateway. This ensures continuity for both internal and external access.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ngateway:\n  service:\n    annotations:\n      networking.istio.io/exportTo: admin\n    nameOverride: mimir-nginx\n  ingress:\n    enabled: true\n    nameOverride: mimir-nginx\n    hosts:\n      - host: mimir.example.com\n        paths:\n          - path: /\n            pathType: Prefix\n    tls:\n      - secretName: mimir-gateway-tls\n        hosts:\n          - mimir.example.com\n  enabledNonEnterprise: true\n  replicas: 10\n```\n\n----------------------------------------\n\nTITLE: Deploying Read-Write Components with Zero Replicas\nDESCRIPTION: Configuration to set up components for both read-write and microservices modes with initial zero replicas for migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    deployment_mode: 'migration',\n\n    mimir_write_replicas: 0,\n    mimir_read_replicas: 0,\n    mimir_backend_replicas: 0,\n    autoscaling_mimir_read_enabled: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Error Cause Type Switch Pattern\nDESCRIPTION: Demonstrates how to use errors.Cause with a type switch to handle specific error types differently.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Flag Name Normalization in pflag\nDESCRIPTION: This example demonstrates how to set a custom flag name normalization function in pflag to handle different separator characters in flag names.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Querier: Max Samples Configuration\nDESCRIPTION: Defines the maximum number of samples a single query can load into memory.  This configuration option should be set on both the query-frontend and the querier when query sharding is enabled.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n\"# Maximum number of samples a single query can load into memory. This config\\n# option should be set on query-frontend too when query sharding is enabled.\\n# CLI flag: -querier.max-samples\\n[max_samples: <int> | default = 50000000]\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting into Radix Tree in Go\nDESCRIPTION: This snippet demonstrates how to create a new immutable radix tree using `iradix.New()` and insert key-value pairs into it using `r.Insert()`. The insert operation returns a new tree and a boolean indicating if the value existed and an error. The example uses byte slices as keys and integers as values.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-immutable-radix/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create a tree\nr := iradix.New()\nr, _, _ = r.Insert([]byte(\"foo\"), 1)\nr, _, _ = r.Insert([]byte(\"bar\"), 2)\nr, _, _ = r.Insert([]byte(\"foobar\"), 2)\n```\n\n----------------------------------------\n\nTITLE: Cross-Provider Copy from S3 to Azure Blob Storage\nDESCRIPTION: Command demonstrating how to copy objects between different storage providers, specifically from Amazon S3 to Azure Blob Storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/copyprefix/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./copyprefix \\\n  --source.backend s3 \\\n  --destination.backend azure \\\n  --s3.source.bucket-name <source bucket name> \\\n  --s3.source.access-key-id <source access key id> \\\n  --s3.source.secret-access-key <source secret access key> \\\n  --s3.source.endpoint <source endpoint> \\\n  --azure.destination.container-name <destination container name> \\\n  --azure.destination.account-name <destination account name> \\\n  --azure.destination.account-key <destination account key> \\\n  --source-prefix tenant3 \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client gRPC Rate Limit Burst\nDESCRIPTION: This setting defines the burst size for the gRPC client's rate limiter. It specifies the maximum number of requests that can be sent in excess of the rate limit for a short period.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_82\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Rate limit burst for gRPC client.\n  # CLI flag: -alertmanager.alertmanager-client.grpc-client-rate-limit-burst\n  [rate_limit_burst: <int> | default = 0]\n\n```\n\n----------------------------------------\n\nTITLE: Migrating from v1.3.0 to v1.4.0 in go-errors/errors\nDESCRIPTION: This code snippet shows how to migrate from version 1.3.0 to 1.4.0 of the go-errors/errors package. It demonstrates the change in API, where ErrorStack() is now called on the result of errors.AsError() instead of directly on the error.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-errors/errors/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// before\nerrors.New(err).ErrorStack()\n// after\nerrors.AsError(errors.Wrap(err)).ErrorStack()\n```\n\n----------------------------------------\n\nTITLE: MapOf vs sync.Map 100% Reads Benchmark\nDESCRIPTION: Performance comparison for map operations with 1000 integer entries and 100% read operations\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nIntegerMapOf_WarmUp/reads=100%                  24.0ns ± 0%\nIntegerMapOf_WarmUp/reads=100%-2                12.0ns ± 0%\nIntegerMapOf_WarmUp/reads=100%-4                6.02ns ± 0%\nIntegerMapOf_WarmUp/reads=100%-8                3.01ns ± 0%\nIntegerMapOf_WarmUp/reads=100%-16               1.50ns ± 0%\nIntegerMapOf_WarmUp/reads=100%-32               0.75ns ± 0%\nIntegerMapOf_WarmUp/reads=100%-64               0.38ns ± 0%\nIntegerMapStandard_WarmUp/reads=100%            55.3ns ± 0%\nIntegerMapStandard_WarmUp/reads=100%-2          27.6ns ± 0%\nIntegerMapStandard_WarmUp/reads=100%-4          16.1ns ± 3%\nIntegerMapStandard_WarmUp/reads=100%-8          8.35ns ± 7%\nIntegerMapStandard_WarmUp/reads=100%-16         4.24ns ± 7%\nIntegerMapStandard_WarmUp/reads=100%-32         2.18ns ± 6%\nIntegerMapStandard_WarmUp/reads=100%-64         1.11ns ± 3%\n```\n\n----------------------------------------\n\nTITLE: Running Block Deduplication Analysis\nDESCRIPTION: Command to execute the list-deduplicated-blocks tool against a local filesystem directory for a specific tenant\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/list-deduplicated-blocks.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlist-deduplicated-blocks -backend=filesystem -filesystem.dir=/tmp/test-bucket -user=tenant\n```\n\n----------------------------------------\n\nTITLE: Optimizing Character Inspection in Go Decoder\nDESCRIPTION: This snippet shows how to enhance the efficiency of character inspections by adding a NUL character to the read buffer, allowing termination checks to be performed alongside other character comparisons.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nbuflen := len(buf)\nfor ; cursor < buflen; cursor++ { // compare cursor and buflen at all times, it is so slow.\n    switch buf[cursor] {\n    case ' ', '\\n', '\\r', '\\t':\n    }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfor {\n    switch buf[cursor] {\n    case ' ', '\\n', '\\r', '\\t':\n    case '\\000':\n        return nil\n    }\n    cursor++\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Blocks from AWS S3 using splitblocks\nDESCRIPTION: Command for splitting blocks stored in Amazon S3. Requires bucket name, access credentials, endpoint, and output directory path.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/splitblocks/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./splitblocks \\\n  --backend s3 \\\n  --s3.bucket-name <bucket name> \\\n  --s3.access-key-id <access key id> \\\n  --s3.secret-access-key <secret access key> \\\n  --s3.endpoint <endpoint> \\\n  --output.dir <directory> \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Starting Consul Agent\nDESCRIPTION: This snippet shows how to start a local instance of Consul in development mode. This is necessary before running the Go client to interact with the Consul API.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconsul agent -dev -node machine\n```\n\n----------------------------------------\n\nTITLE: Accessing Fgprof Endpoint in Grafana Mimir\nDESCRIPTION: This endpoint returns the sampling Go profiling data that can be used to analyze On-CPU and Off-CPU (for example, I/O) time.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET /debug/fgprof\n```\n\n----------------------------------------\n\nTITLE: Building delete-objects Program with Go\nDESCRIPTION: Compiles the delete-objects program using Go build command.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/delete-objects/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo build .\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Distributors - Jsonnet Configuration\nDESCRIPTION: Jsonnet configuration to scale down distributor replicas to zero as part of the migration process.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_9\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  distributor_deployment+:\n    deployment.mixin.spec.withReplicas(0),\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing zap.New(nil) with zap.NewNop() using gofmt\nDESCRIPTION: This snippet shows how to use `gofmt` to replace instances of `zap.New(nil)` with `zap.NewNop()` within a Go project. This change is recommended because `NewNop()` is now the preferred way to create a no-op logger in zap.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"gofmt -r 'zap.New(nil) ->\\nzap.NewNop()' -w .\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Commas - Go\nDESCRIPTION: This snippet illustrates the `humanize.Comma` function, which formats numbers with commas as thousands separators. It is useful for improving the readability of monetary or large values.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"You owe $%s.\\n\", humanize.Comma(6582491)) // You owe $6,582,491.\n```\n\n----------------------------------------\n\nTITLE: Using String Glob Patterns in Go\nDESCRIPTION: Demonstrates usage of the go-glob package for matching strings using glob patterns with wildcards. The glob.Glob function takes two string arguments - the pattern and the test string - and returns a boolean indicating if there's a match.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/ryanuber/go-glob/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/ryanuber/go-glob\"\n\nfunc main() {\n    glob.Glob(\"*World!\", \"Hello, World!\") // true\n    glob.Glob(\"Hello,*\", \"Hello, World!\") // true\n    glob.Glob(\"*ello,*\", \"Hello, World!\") // true\n    glob.Glob(\"World!\", \"Hello, World!\")  // false\n    glob.Glob(\"/home/*\", \"/home/ryanuber/.bashrc\") // true\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Raw Bytes with Koanf in Go\nDESCRIPTION: This snippet shows how to use the rawbytes Provider in Koanf to read configuration from arbitrary byte sources, such as databases or HTTP calls. It demonstrates loading JSON data from a byte slice.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/rawbytes\"\n)\n\n// Global koanf instance. Use . as the key path delimiter. This can be / or anything.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\tb := []byte(`{\"type\": \"rawbytes\", \"parent1\": {\"child1\": {\"type\": \"rawbytes\"}}}`)\n\tk.Load(rawbytes.Provider(b), json.Parser())\n\tfmt.Println(\"type is = \", k.String(\"parent1.child1.type\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External GEM License in Kubernetes Secret\nDESCRIPTION: YAML configuration for referencing a GEM license stored in a Kubernetes Secret. This approach keeps the license separate from the Helm values.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-gem.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlicense:\n  external: true\n  secretName: <name-of-your-secret>\n\n```\n\n----------------------------------------\n\nTITLE: Supporting Go Flags with pflag\nDESCRIPTION: This example demonstrates how to add Go's standard flag package flags to a pflag FlagSet, allowing support for flags defined by third-party dependencies.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Dependencies with Go Modules\nDESCRIPTION: Commands for adding and updating dependencies using Go modules\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\ngo mod vendor\ngit add go.mod go.sum vendor\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Using Command-Line Flags with cpuid in Go\nDESCRIPTION: Example of how to use command-line flags with the cpuid package. This demonstrates the proper sequence of calling Flags() before flag.Parse() and Detect() after parsing to incorporate custom flag settings into CPU detection.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/klauspost/cpuid/v2\"\n)\n\nfunc main() {\n\tcpuid.Flags()\n\tflag.Parse()\n\tcpuid.Detect()\n\n\t// Test if we have these specific features:\n\tif cpuid.CPU.Supports(cpuid.SSE, cpuid.SSE2) {\n\t\tfmt.Println(\"We have Streaming SIMD 2 Extensions\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Helm Gateway Configuration\nDESCRIPTION: Helm values configuration for setting Nginx client max body size in Grafana Mimir deployment.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngateway:\n  nginx:\n    config:\n      clientMaxBodySize: 540M\n```\n\n----------------------------------------\n\nTITLE: Linting Rule Files for Grafana Mimir\nDESCRIPTION: This command lints YAML and PromQL expressions in rule files. It edits the files in place, but can be run in dry-run mode with the -n flag.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules lint <file_path>...\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration block for connecting to Azure object storage backend in Grafana Mimir. This block uses the CLI flags prefix 'blocks-storage'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_132\n\nLANGUAGE: toml\nCODE:\n```\n[azure: <azure_storage_backend>]\n```\n\n----------------------------------------\n\nTITLE: High-Performance Logger Usage in Go\nDESCRIPTION: Shows usage of Zap's core Logger for performance-critical scenarios. This implementation is faster than SugaredLogger with minimal allocations, but only supports structured logging.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync()\nlogger.Info(\"failed to fetch URL\",\n  // Structured context as strongly typed Field values.\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Print Functions with Color\nDESCRIPTION: Shows how to create custom print functions for convenience using the PrintfFunc() method.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Create a custom print function for convenience\nred := color.New(color.FgRed).PrintfFunc()\nred(\"Warning\")\nred(\"Error: %s\", err)\n\n// Mix up multiple attributes\nnotice := color.New(color.Bold, color.FgGreen).PrintlnFunc()\nnotice(\"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Commit History Between Releases\nDESCRIPTION: Git command to display all commits between the last tagged release and HEAD, useful for verifying changelog entries.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Persist Interval\nDESCRIPTION: This parameter configures how frequently the Alertmanager persists its state (notification log and silences) to object storage. It is used when sharding is enabled to ensure data consistency across replicas.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_101\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) The interval between persisting the current alertmanager state\n# (notification log and silences) to object storage. This is only used when\n# sharding is enabled. This state is read when all replicas for a shard can not\n# be contacted. In this scenario, having persisted the state more frequently\n# will result in potentially fewer lost silences, and fewer duplicate\n# notifications.\n# CLI flag: -alertmanager.persist-interval\n[persist_interval: <duration> | default = 15m]\n\n```\n\n----------------------------------------\n\nTITLE: Using Generic MapOf in Go\nDESCRIPTION: Demonstrates the generic MapOf type that supports parametrized key and value types with comparable keys.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nm := xsync.NewMapOf[string, string]()\nm.Store(\"foo\", \"bar\")\nv, ok := m.Load(\"foo\")\n```\n\nLANGUAGE: go\nCODE:\n```\ntype Point struct {\n\tx int32\n\ty int32\n}\nm := NewMapOf[Point, int]()\nm.Store(Point{42, 42}, 42)\nv, ok := m.Load(point{42, 42})\n```\n\n----------------------------------------\n\nTITLE: Delete Alertmanager Tenant Configuration\nDESCRIPTION: Performs an HTTP POST to remove configurations for a specified tenant identified through the `X-Scope-OrgID` header. It's internal and returns 200 regardless of prior existence, with authentication needed for tenant identification.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST /multitenant_alertmanager/delete_tenant_config\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flag Values from FlagSet with pflag\nDESCRIPTION: This snippet shows how to use helper functions to get the value stored in a Flag when working with a FlagSet in pflag.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Basic Object Storage Configuration in Jsonnet\nDESCRIPTION: Minimal configuration required to set up object storage backend in Grafana Mimir. Specifies the storage provider type and bucket name.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-object-storage-backend.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    storage_backend: 'gcs',\n    blocks_storage_bucket_name: 'blocks-bucket',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client with Root Certificates\nDESCRIPTION: Demonstrates how to create an HTTP client with custom TLS configuration by loading root certificates from environment variables. This approach allows flexible certificate configuration and handles potential macOS keychain certificate loading issues.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-rootcerts/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc httpClient() (*http.Client, error)\n\ttlsConfig := &tls.Config{}\n\terr := rootcerts.ConfigureTLS(tlsConfig, &rootcerts.Config{\n\t\tCAFile:      os.Getenv(\"MYAPP_CAFILE\"),\n\t\tCAPath:      os.Getenv(\"MYAPP_CAPATH\"),\n\t\tCertificate: os.Getenv(\"MYAPP_CERTIFICATE\"),\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc := cleanhttp.DefaultClient()\n\tt := cleanhttp.DefaultTransport()\n\tt.TLSClientConfig = tlsConfig\n\tc.Transport = t\n\treturn c, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Alertmanager Configuration in UTF-8 Strict Mode\nDESCRIPTION: This command verifies if an Alertmanager configuration is compatible with UTF-8 in strict mode. It will exit with an error if the configuration is incompatible.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager verify <config_file> [template_files...] --utf8-strict-mode\n```\n\n----------------------------------------\n\nTITLE: Checking Grafana Mimir Rules for Best Practices\nDESCRIPTION: This snippet shows how to use the mimirtool rules check command to validate Grafana Mimir rules against recommended best practices. It checks the naming conventions of recording rules.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules check rules.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: my_namespace\ngroups:\n  - name: example\n    interval: 5m\n    rules:\n      - record: job_http_inprogress_requests_sum\n        expr: sum by (job) (http_inprogress_requests)\n```\n\nLANGUAGE: console\nCODE:\n```\nERRO[0000] bad recording rule name error=\"recording rule name does not match level:metric:operation format, must contain at least one colon\" file=rules.yaml rule=job_http_inprogress_requests_sum ruleGroup=example\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage Examples for go-redis in Go\nDESCRIPTION: Various examples showcasing advanced usage of go-redis, including setting expiration, using sorted sets, and executing Lua scripts.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-redis/redis/v8/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// SET key value EX 10 NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", 10*time.Second).Result()\n\n// SET key value keepttl NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", redis.KeepTTL).Result()\n\n// SORT list LIMIT 0 2 ASC\nvals, err := rdb.Sort(ctx, \"list\", &redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n\n// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2\nvals, err := rdb.ZRangeByScoreWithScores(ctx, \"zset\", &redis.ZRangeBy{\n    Min: \"-inf\",\n    Max: \"+inf\",\n    Offset: 0,\n    Count: 2,\n}).Result()\n\n// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM\nvals, err := rdb.ZInterStore(ctx, \"out\", &redis.ZStore{\n    Keys: []string{\"zset1\", \"zset2\"},\n    Weights: []int64{2, 3}\n}).Result()\n\n// EVAL \"return {KEYS[1],ARGV[1]}\" 1 \"key\" \"hello\"\nvals, err := rdb.Eval(ctx, \"return {KEYS[1],ARGV[1]}\", []string{\"key\"}, \"hello\").Result()\n\n// custom command\nres, err := rdb.Do(ctx, \"set\", \"key\", \"value\").Result()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request Diff Workflow in GitHub Actions\nDESCRIPTION: GitHub Actions workflow that runs a diff on every pull request against the repo and prints the summary as a comment in the associated pull request. Uses Mimirtool to compare rules between local files and Mimir cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/mimir-rules-action/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: diff_rules_pull_request\non: [pull_request]\njobs:\n  diff-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Diff Rules\n        id: diff_rules\n        uses: grafana/mimir/operations/mimir-rules-action@main\n        env:\n          MIMIR_ADDRESS: https://example-cluster.com/\n          MIMIR_TENANT_ID: 1\n          MIMIR_API_KEY: ${{ secrets.MIMIR_API_KEY }}\n          ACTION: diff\n          RULES_DIR: \"./rules/\"\n      - name: comment PR\n        uses: unsplash/comment-on-pr@v1.2.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          msg: \"${{ steps.diff_rules.outputs.summary }}\"\n```\n\n----------------------------------------\n\nTITLE: Loading Rule Groups into Grafana Mimir\nDESCRIPTION: This command loads rule groups from specified files into Grafana Mimir, overwriting existing groups with the same name.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules load <file_path>...\n```\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules load ./example_rules_one.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules load ./example_rules_one.yaml ./example_rules_two.yaml\n```\n\n----------------------------------------\n\nTITLE: Running ListBlocks with Google Cloud Storage\nDESCRIPTION: Command example for using listblocks with Google Cloud Storage. Requires user and bucket name parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/listblocks/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./listblocks \\\n  --user <user> \\\n  --backend gcs \\\n  --gcs.bucket-name <bucket name> \\\n```\n\n----------------------------------------\n\nTITLE: Analyzing Grafana Dashboard Files with Mimir\nDESCRIPTION: This command accepts Grafana dashboard JSON files as input and extracts Prometheus metrics used in the queries. The output JSON file can be used with the 'analyze prometheus' command.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool analyze dashboard <file>...\n```\n\n----------------------------------------\n\nTITLE: Migrating Alertmanager Configuration with Output Directory\nDESCRIPTION: This command migrates an Alertmanager configuration and outputs the result to a specified directory. It's useful for reviewing changes before applying them.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager migrate-utf8 <config_file> [template_files...] --output-dir=\"migrated\"\n```\n\n----------------------------------------\n\nTITLE: Querying TSDB Series with Selector\nDESCRIPTION: Example of using tsdb-series tool to list series matching a specific PromQL selector from a TSDB block.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsdb-series -select 'up{instance=\"compactor:8006\"}' ./01FTT67BBYH23T8870BBF77YZX\n```\n\n----------------------------------------\n\nTITLE: Analyzing Tenant-Specific Benchmark Results\nDESCRIPTION: This text snippet focuses on benchmark results for ingester-only queries, broken down by tenant ID. Similar to the previous snippet, it compares 'tenant-querier -> query component round-robin tree' and 'worker-queue prioritization -> tenant-querier tree' approaches, presenting the mean and standard deviation of 'seconds in queue' for each tenant. Different tenant configurations, including single and dual tenant scenarios with varying percentages of slow queries, are evaluated.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/scheduler/DESIGN.md#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nResults for ingester-only queries by tenant ID:\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 10pct slow queries: seconds in queue:[tenant-0: mean: 0.1046 stddev: 0.02]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 10pct slow queries: seconds in queue:[tenant-0: mean: 0.0194 stddev: 0.01]\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 25pct slow queries: seconds in queue:[tenant-0: mean: 0.2738 stddev: 0.08]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 25pct slow queries: seconds in queue:[tenant-0: mean: 0.0159 stddev: 0.01]\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 50pct slow queries: seconds in queue:[tenant-0: mean: 0.3894 stddev: 0.18]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 50pct slow queries: seconds in queue:[tenant-0: mean: 0.0118 stddev: 0.01]\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 75pct slow queries: seconds in queue:[tenant-0: mean: 0.2608 stddev: 0.18]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 75pct slow queries: seconds in queue:[tenant-0: mean: 0.0053 stddev: 0.00]\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 90pct slow queries: seconds in queue:[tenant-0: mean: 0.0780 stddev: 0.07]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 90pct slow queries: seconds in queue:[tenant-0: mean: 0.0026 stddev: 0.00]\ntree: tenant-querier -> query component round-robin tree, 2 tenants, first with 10pct slow queries, second with 90pct slow queries: seconds in queue:[tenant-0: mean: 0.1183 stddev: 0.02 tenant-1: mean: 0.0415 stddev: 0.05]\ntree: worker-queue prioritization -> tenant-querier tree, 2 tenants, first with 10pct slow queries, second with 90pct slow queries: seconds in queue:[tenant-0: mean: 0.0123 stddev: 0.00 tenant-1: mean: 0.0040 stddev: 0.00]\ntree: tenant-querier -> query component round-robin tree, 2 tenants, first with 25pct slow queries, second with 75pct slow queries: seconds in queue:[tenant-0: mean: 0.2639 stddev: 0.08 tenant-1: mean: 0.1662 stddev: 0.12]\ntree: worker-queue prioritization -> tenant-querier tree, 2 tenants, first with 25pct slow queries, second with 75pct slow queries: seconds in queue:[tenant-0: mean: 0.0118 stddev: 0.00 tenant-1: mean: 0.0047 stddev: 0.00]\ntree: tenant-querier -> query component round-robin tree, 2 tenants, first with 50pct slow queries, second with 50pct slow queries: seconds in queue:[tenant-0: mean: 0.3724 stddev: 0.17 tenant-1: mean: 0.3452 stddev: 0.19]\ntree: worker-queue prioritization -> tenant-querier tree, 2 tenants, first with 50pct slow queries, second with 50pct slow queries: seconds in queue:[tenant-0: mean: 0.0104 stddev: 0.01 tenant-1: mean: 0.0109 stddev: 0.00]\n```\n\n----------------------------------------\n\nTITLE: Running FileUploader Example in Go\nDESCRIPTION: These commands initialize the Go module, download dependencies, and run the FileUploader example.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo mod init example/FileUploader\ngo get github.com/minio/minio-go/v7\ngo get github.com/minio/minio-go/v7/pkg/credentials\ngo run FileUploader.go\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoint for Ingester Shutdown\nDESCRIPTION: Endpoint to flush time series data and shutdown the ingester service. Returns after data is flushed to long-term storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nPOST /ingester/shutdown\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone-Aware Replication for New Installations\nDESCRIPTION: This YAML configuration sets up zone-aware replication for Grafana Mimir, which ensures fault tolerance and high availability by properly selecting nodes across different zones.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n    topologyKey: kubernetes.io/hostname\n    zones:\n      - name: zone-a\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-a\n      - name: zone-b\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-b\n      - name: zone-c\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-c\n\nstore_gateway:\n  zoneAwareReplication:\n    enabled: true\n    topologyKey: kubernetes.io/hostname\n    zones:\n      - name: zone-a\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-a\n      - name: zone-b\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-b\n      - name: zone-c\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-c\n```\n\n----------------------------------------\n\nTITLE: Fix: Send Default Detect Params\nDESCRIPTION: This commit fixes an issue within the `auth/impersonate` package where default detect parameters were not being properly sent. This ensures that the impersonation process correctly utilizes default detection settings, leading to more reliable and predictable authentication behavior. The change is related to issue #9529 and references #9136.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n5b6b8bef577f82707e51f5cc5d258d5bdf90218f\n```\n\n----------------------------------------\n\nTITLE: Implementing Flag Aliases in pflag\nDESCRIPTION: This snippet shows how to create aliases for flags in pflag using a custom normalization function.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Defining Response Schema for Label Cardinality API in JSON\nDESCRIPTION: JSON schema defining the response structure for an API endpoint that provides label cardinality information. It includes total series count, label details, and cardinality breakdown for each label.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"series_count_total\": <number>,\n  \"labels\": [\n    {\n      \"label_name\": <string>,\n      \"label_values_count\": <number>,\n      \"series_count\": <number>,\n      \"cardinality\": [\n        {\n          \"label_value\": <string>,\n          \"series_count\": <number>\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Metrics Scraping\nDESCRIPTION: Command to apply ServiceMonitor configurations for scraping Kubernetes metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/configurations/grafanacon-2022/index.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f kubernetes-service-monitors.yaml\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for Thanos Sidecar\nDESCRIPTION: NGINX configuration for injecting tenant ID into requests from sidecar to Mimir, including worker process settings and proxy configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-to-mimir-with-thanos-sidecar.md#2025-04-17_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nworker_processes  5;  ## Default: 1\nerror_log  /dev/stderr;\npid        /tmp/nginx.pid;\nworker_rlimit_nofile 8192;\n\nevents {\n  worker_connections  4096;  ## Default: 1024\n}\n\nhttp {\n  client_body_temp_path /tmp/client_temp;\n  proxy_temp_path       /tmp/proxy_temp_path;\n  fastcgi_temp_path     /tmp/fastcgi_temp;\n  uwsgi_temp_path       /tmp/uwsgi_temp;\n  scgi_temp_path        /tmp/scgi_temp;\n\n  default_type application/octet-stream;\n  log_format   main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log   /dev/stderr  main;\n\n  sendfile     on;\n  tcp_nopush   on;\n  resolver kube-dns.kube-system.svc.cluster.local;\n\n  server {\n    listen 8080;\n\n    # Distributor endpoints\n    location / {\n      proxy_set_header X-Scope-OrgID 1;\n      proxy_pass      http://mimir-distributed-nginx.mimir.svc.cluster.local:80$request_uri;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Anti-Affinity for Ingester and Store Gateway in YAML\nDESCRIPTION: YAML configuration for setting up required pod anti-affinity rules for ingester and store-gateway components in Kubernetes. This ensures pods are properly distributed across nodes for high availability.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v3.2.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: target\n                operator: In\n                values:\n                  - ingester\n          topologyKey: \"kubernetes.io/hostname\"\n        - labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/component\n                operator: In\n                values:\n                  - ingester\n          topologyKey: \"kubernetes.io/hostname\"\nstore_gateway:\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: target\n                operator: In\n                values:\n                  - store-gateway\n          topologyKey: \"kubernetes.io/hostname\"\n        - labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/component\n                operator: In\n                values:\n                  - store-gateway\n          topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent in Grafana Mimir values.yaml\nDESCRIPTION: YAML configuration for enabling Vault Agent integration in Grafana Mimir, specifying role name and certificate paths for client, server, and CA certificates.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-hashicorp-vault-agent.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvaultAgent:\n  enabled: true\n  roleName: \"test-role\"\n  clientCertPath: \"client/cert/path\"\n  clientKeyPath: \"client/key/path\"\n  serverCertPath: \"server/cert/path\"\n  serverKeyPath: \"server/key/path\"\n  caCertPath: \"ca/cert/path\"\n```\n\n----------------------------------------\n\nTITLE: Scanning Redis Hash into Struct\nDESCRIPTION: Demonstrates how to scan Redis hash data directly into a Go struct using HGetAll and MGet methods, providing a convenient way to map Redis data to application structs\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-redis/redis/v8/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := rdb.HGetAll(ctx, \"hash\").Scan(&data)\n\nerr := rdb.MGet(ctx, \"key1\", \"key2\").Scan(&data)\n```\n\n----------------------------------------\n\nTITLE: Running mark-blocks with Azure Blob Storage\nDESCRIPTION: Example command for executing the mark-blocks utility with Azure Blob Storage backend. This command specifies tenant, blocks, mark type, and Azure-specific parameters like container name, account name, and account key.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/mark-blocks/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./mark-blocks \\\n  --tenant <tenant> \\\n  --blocks <blocks> \\\n  --mark-type <mark-type> \\\n  --backend azure \\\n  --azure.container-name <container name> \\\n  --azure.account-name <account name> \\\n  --azure.account-key <account key> \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Inspecting Thanos Blocks in Bucket\nDESCRIPTION: Command to inspect TSDB blocks in the bucket to verify they are valid from a Thanos perspective. This validation step ensures the blocks were copied correctly before proceeding with the migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nthanos tools bucket inspect \\\n    --objstore.config-file bucket.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Baggage Items in Go\nDESCRIPTION: Shows how to retrieve baggage items that were previously set on a span. This allows downstream services to access context data that was injected earlier in the trace.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nif span := opentracing.SpanFromContext(ctx); span != nil {\n    val := span.BaggageItem(\"key\")\n    println(val)\n}\n```\n\n----------------------------------------\n\nTITLE: Using double_exponential_smoothing Function in PromQL\nDESCRIPTION: Example of using the experimental 'double_exponential_smoothing' function in a PromQL query. This function provides advanced time series smoothing capabilities.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.15.md#2025-04-17_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\ndouble_exponential_smoothing(metric_name[1h], 0.5, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Applying Relabeling to Blocks and Marking Originals for Deletion\nDESCRIPTION: Command to apply the relabeling configuration to blocks and mark the original blocks for deletion. This step creates new blocks with the required labels while flagging the originals for removal.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Rewrite the blocks with external labels and mark the original blocks for deletion.\nfor ID in $(cat blocks-to-rewrite.tsv)\ndo\n    thanos tools bucket rewrite  \\\n        --objstore.config-file bucket.yaml \\\n        --rewrite.to-relabel-config-file relabel-config.yaml \\\n        --no-dry-run \\\n        --delete-blocks \\\n        --id $ID\ndone\n```\n\n----------------------------------------\n\nTITLE: Defining Bucket Interface in Go\nDESCRIPTION: This snippet defines the core Bucket interface of the objstore module. It specifies methods for reading, writing, and managing objects in an object storage bucket.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Bucket provides read and write access to an object storage bucket.\n// NOTE: We assume strong consistency for write-read flow.\ntype Bucket interface {\n\tio.Closer\n\tBucketReader\n\n\tProvider() ObjProvider\n\n\t// Upload the contents of the reader as an object into the bucket.\n\t// Upload should be idempotent.\n\tUpload(ctx context.Context, name string, r io.Reader) error\n\n\t// Delete removes the object with the given name.\n\t// If object does not exist in the moment of deletion, Delete should throw error.\n\tDelete(ctx context.Context, name string) error\n\n\t// Name returns the bucket name for the provider.\n\tName() string\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoint for Ingesters Ring Status\nDESCRIPTION: Endpoint that displays hash ring status including state, health and heartbeat information.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nGET /ingester/ring\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Namespace for Mimir\nDESCRIPTION: Creates a unique Kubernetes namespace called 'mimir-test' for installing Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace mimir-test\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection Settings in YAML\nDESCRIPTION: This snippet defines Redis connection settings including buffer size, concurrency limits, and TLS options. It uses YAML format with CLI flag mappings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_145\n\nLANGUAGE: yaml\nCODE:\n```\n# CLI flag: -<prefix>.redis.max-async-buffer-size\n[max_async_buffer_size: <int> | default = 25000]\n\n# (deprecated) The maximum number of concurrent connections running get\n# operations. If set to 0, concurrency is unlimited.\n# CLI flag: -<prefix>.redis.max-get-multi-concurrency\n[max_get_multi_concurrency: <int> | default = 100]\n\n# (deprecated) The maximum size per batch for mget operations.\n# CLI flag: -<prefix>.redis.max-get-multi-batch-size\n[max_get_multi_batch_size: <int> | default = 100]\n\n# (deprecated) Enable connecting to Redis with TLS.\n# CLI flag: -<prefix>.redis.tls-enabled\n[tls_enabled: <boolean> | default = false]\n\n# (deprecated) Path to the client certificate, which will be used for\n# authenticating with the server. Also requires the key path to be configured.\n# CLI flag: -<prefix>.redis.tls-cert-path\n[tls_cert_path: <string> | default = \"\"]\n\n# (deprecated) Path to the key for the client certificate. Also requires the\n# client certificate to be configured.\n# CLI flag: -<prefix>.redis.tls-key-path\n[tls_key_path: <string> | default = \"\"]\n\n# (deprecated) Path to the CA certificates to validate server certificate\n# against. If not set, the host's root CA certificates are used.\n# CLI flag: -<prefix>.redis.tls-ca-path\n[tls_ca_path: <string> | default = \"\"]\n\n# (deprecated) Override the expected name on the server certificate.\n# CLI flag: -<prefix>.redis.tls-server-name\n[tls_server_name: <string> | default = \"\"]\n\n# (deprecated) Skip validating server certificate.\n# CLI flag: -<prefix>.redis.tls-insecure-skip-verify\n[tls_insecure_skip_verify: <boolean> | default = false]\n\n# (deprecated) Override the default cipher suite list (separated by commas).\n# Allowed values:\n#\n# Secure Ciphers:\n# - TLS_AES_128_GCM_SHA256\n# - TLS_AES_256_GCM_SHA384\n# - TLS_CHACHA20_POLY1305_SHA256\n# - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n# - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n# - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n# - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n# - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n# - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n#\n# Insecure Ciphers:\n# - TLS_RSA_WITH_RC4_128_SHA\n# - TLS_RSA_WITH_3DES_EDE_CBC_SHA\n# - TLS_RSA_WITH_AES_128_CBC_SHA\n# - TLS_RSA_WITH_AES_256_CBC_SHA\n# - TLS_RSA_WITH_AES_128_CBC_SHA256\n# - TLS_RSA_WITH_AES_128_GCM_SHA256\n# - TLS_RSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n# - TLS_ECDHE_RSA_WITH_RC4_128_SHA\n# - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n# - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n# CLI flag: -<prefix>.redis.tls-cipher-suites\n[tls_cipher_suites: <string> | default = \"\"]\n\n# (deprecated) Override the default minimum TLS version. Allowed values:\n# VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13\n# CLI flag: -<prefix>.redis.tls-min-version\n[tls_min_version: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Observer Callback Options in Go\nDESCRIPTION: These options are used to configure observer callbacks for `int64` and `float64` types during their creation. This involves using `WithInt64Callback` and `WithFloat64Callback` options with the `go.opentelemetry.io/otel/metric/instrument` package to properly set up these observer callbacks.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Tenant-Specific Override Configuration\nDESCRIPTION: Configuration example showing how to override default trackers for specific tenants to track different service metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-custom-trackers.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  tenant_with_only_prod_metrics:\n    active_series_custom_trackers:\n      service1: '{service=\"service1\"}'\n      service2: '{service=\"service2\"}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Formatting\nDESCRIPTION: Shows how to customize the error formatting by setting a custom ErrorFormat function. Allows developers to control how multiple errors are represented as a string.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Errors Conditionally\nDESCRIPTION: Shows how to use ErrorOrNil to return an error only when errors have been collected. Prevents returning nil error objects unnecessarily.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration\nDESCRIPTION: Nginx server block configuration to increase maximum allowed request body size for block uploads.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    ...\n    client_max_body_size 540M;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Alertmanager Configuration YAML\nDESCRIPTION: Sample YAML configuration file for Alertmanager.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroute:\n  receiver: \"example_receiver\"\n  group_by: [\"example_groupby\"]\nreceivers:\n  - name: \"example_receiver\"\ntemplates:\n  - example_template.tpl\n```\n\n----------------------------------------\n\nTITLE: Installing go-redis with Go Modules\nDESCRIPTION: Commands to initialize a Go module and install go-redis/v8 using the go get command.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-redis/redis/v8/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/my/repo\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/go-redis/redis/v8\n```\n\n----------------------------------------\n\nTITLE: Installing Mimirtool on Linux AMD64\nDESCRIPTION: Command to download and make executable the Mimirtool binary for Linux with AMD64 architecture using curl.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fLo mimirtool https://github.com/grafana/mimir/releases/latest/download/mimirtool-linux-amd64\nchmod +x mimirtool\n```\n\n----------------------------------------\n\nTITLE: Analyzing Prometheus Rule Files with Mimir\nDESCRIPTION: This command accepts Prometheus rule YAML files as input and extracts Prometheus metrics used in the queries. The output JSON file can be used with the 'analyze prometheus' command.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool analyze rule-file <file>\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Application Object (Go)\nDESCRIPTION: Shows how to use the logr.Logger in an application object. The logger is stored as a field in the struct and used to log information during the application's execution.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype appObject struct {\n    // ... other fields ...\n    logger logr.Logger\n    // ... other fields ...\n}\n\nfunc (app *appObject) Run() {\n    app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n    // ... app code ...\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying GEM Federation-Frontend Deployment\nDESCRIPTION: Sends a POST request to the federation-frontend service to retrieve label names from the past 12 hours. This curl command helps verify that the federation-frontend is running and can query the remote GEM clusters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-gem-federation-frontend.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST 'https://mimir-federation-frontend:8080/prometheus/api/v1/labels' \\\n  -d \"start=$(date -u +%Y-%m-%dT%H:%M:%S.0Z -d '12 hours ago' 2>/dev/null || date -u -v -12H +%Y-%m-%dT%H:%M:%S.0Z)\" \\\n  -d \"end=$(date -u +%Y-%m-%dT%H:%M:%S.0Z)\"\n```\n\n----------------------------------------\n\nTITLE: Importing GoValidator Package in Go\nDESCRIPTION: Demonstrates how to import the GoValidator package in a Go file, including an example of using an alias for shorter package name.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  valid \"github.com/asaskevich/govalidator\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using External Secret for Grafana Mimir Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to prepare a Secret object intended for the Grafana Mimir configuration. The configuration is base64-encoded and stored under the 'mimir.yaml' data key.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-mimir-config\ndata:\n  mimir.yaml: <configuration-base64>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenShift Deployment with Custom SecurityContextConstraints\nDESCRIPTION: YAML configuration for deploying Grafana Mimir on OpenShift using a dedicated SecurityContextConstraints (SCC) resource, modifying default security context settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nrbac:\n  create: true\n  type: scc\n  podSecurityContext:\n    fsGroup: null\n    runAsGroup: null\n    runAsUser: null\nrollout_operator:\n  podSecurityContext:\n    fsGroup: null\n    runAsGroup: null\n    runAsUser: null\n```\n\n----------------------------------------\n\nTITLE: View Alertmanager Ring Status\nDESCRIPTION: Returns a web page detailing the status of the Alertmanager hash ring via an HTTP GET request. Information includes the state, health, and heartbeat time of each cluster member.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_43\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /multitenant_alertmanager/ring\n```\n\n----------------------------------------\n\nTITLE: Setting Max Estimated Memory Consumption per Query via CLI Flag in YAML\nDESCRIPTION: This YAML configuration snippet shows how to set a default limit for the maximum estimated memory consumption per query. It uses a CLI flag for the querier component to specify the limit.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/mimir-query-engine.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n-querier.max-estimated-memory-consumption-per-query=<value>\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client gRPC Max Receive Message Size\nDESCRIPTION: This configures the maximum allowed size, in bytes, for gRPC messages received by the Alertmanager client. Increasing this value allows the client to handle larger messages, but may also increase memory usage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_78\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) gRPC client max receive message size (bytes).\n  # CLI flag: -alertmanager.alertmanager-client.grpc-max-recv-msg-size\n  [max_recv_msg_size: <int> | default = 104857600]\n\n```\n\n----------------------------------------\n\nTITLE: Executing Partially Shardable PromQL Query with Histogram Quantile\nDESCRIPTION: Example of how a PromQL query with a non-shardable histogram_quantile function and shardable inner part is executed with query sharding enabled and a shard count of 3.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/query-sharding/index.md#2025-04-17_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by(le) (rate(metric[1m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by(le) (\n  concat(\n    sum by(le) (rate(metric{__query_shard__=\"1_of_3\"}[1m]))\n    sum by(le) (rate(metric{__query_shard__=\"2_of_3\"}[1m]))\n    sum by(le) (rate(metric{__query_shard__=\"3_of_3\"}[1m]))\n  )\n))\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Interface in Go for Swift Client\nDESCRIPTION: A proposed Go interface for error handling in the Swift client that implements the net error interface. This interface would allow for better classification of errors as timeout or temporary errors.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/ncw/swift/notes.txt#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Error interface {\n    error\n    Timeout() bool   // Is the error a timeout?\n    Temporary() bool // Is the error temporary?\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HA Tracker Status in Grafana Mimir Distributor\nDESCRIPTION: This endpoint displays a web page with the current status of the HA tracker, including the elected replica for each Prometheus HA cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET /distributor/ha_tracker\n```\n\n----------------------------------------\n\nTITLE: Improved Benchmark Results After PR #79 (Intel i5)\nDESCRIPTION: Performance metrics after optimization showing 10x performance improvement and 100x reduction in memory allocations on Intel i5 CPU\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t 9595830\t      3991 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t 9194276\t      3984 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t17002711\t      2123 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t16772926\t      2111 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t 9788331\t      3749 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t 9188260\t      3941 ns/op\t     104 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributor and Ruler Zone Exclusion\nDESCRIPTION: Configuration flag to exclude specific zones from ingester write requests.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-spread-minimizing-tokens/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-ingester.ring.excluded-zones=zone-a\n```\n\n----------------------------------------\n\nTITLE: Timestamp and Caller Information Logging in Go\nDESCRIPTION: Shows how to add automatic timestamp and caller information to log entries using Go-kit logger decorators.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar logger log.Logger\nlogger = log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))\nlogger = log.With(logger, \"ts\", log.DefaultTimestampUTC, \"caller\", log.DefaultCaller)\n\nlogger.Log(\"msg\", \"hello\")\n\n// Output:\n// ts=2016-01-01T12:34:56Z caller=main.go:15 msg=hello\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Zones for Alertmanager Replication\nDESCRIPTION: YAML configuration to set up virtual zones for alertmanager replication, using the kubernetes.io/hostname as the topology key.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n  zoneAwareReplication:\n    topologyKey: \"kubernetes.io/hostname\" # Triggers creating anti-affinity rules\n```\n\n----------------------------------------\n\nTITLE: Integrating Afero with HTTP File Server in Go\nDESCRIPTION: Demonstrates how to use Afero's HttpFs adapter to serve files over HTTP. This wrapper allows any Afero file system to be used as a backend for Go's standard http.FileServer.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhttpFs := afero.NewHttpFs(<ExistingFS>)\nfileserver := http.FileServer(httpFs.Dir(<PATH>))\nhttp.Handle(\"/\", fileserver)\n```\n\n----------------------------------------\n\nTITLE: Inserting Colored Text into Regular Strings\nDESCRIPTION: Shows how to use Sprint functions to create colored portions within otherwise normal text strings.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Create SprintXxx functions to mix strings with other non-colorized strings:\nyellow := color.New(color.FgYellow).SprintFunc()\nred := color.New(color.FgRed).SprintFunc()\nfmt.Printf(\"This is a %s and this is %s.\\n\", yellow(\"warning\"), red(\"error\"))\n\ninfo := color.New(color.FgWhite, color.BgGreen).SprintFunc()\nfmt.Printf(\"This %s rocks!\\n\", info(\"package\"))\n\n// Use helper functions\nfmt.Println(\"This\", color.RedString(\"warning\"), \"should be not neglected.\")\nfmt.Printf(\"%v %v\\n\", color.GreenString(\"Info:\"), \"an important message.\")\n\n// Windows supported too! Just don't forget to change the output to color.Output\nfmt.Fprintf(color.Output, \"Windows support: %s\", color.GreenString(\"PASS\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing XID Components in Go\nDESCRIPTION: This snippet shows how to access the individual components of an XID, including the machine ID, process ID, timestamp, and counter.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/rs/xid/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nguid.Machine()\nguid.Pid()\nguid.Time()\nguid.Counter()\n```\n\n----------------------------------------\n\nTITLE: Lines Input Format for Undelete-Blocks Tool\nDESCRIPTION: The lines format for specifying which blocks to undelete. Each line contains a tenant and block ID separated by a slash. This format is used when the --blocks-from flag is set to 'lines'.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/undelete-blocks/README.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntenant1/01GDY90HMVFPSJHXZRQH8KRAME\ntenant1/01GE0SV77NX8ASC7JN0ZQMN0WM\ntenant2/01GZDNKM6SQ9S7W5YQBDF0DK49\n```\n\n----------------------------------------\n\nTITLE: Verifying Alertmanager Configuration Compatibility with UTF-8\nDESCRIPTION: This command checks if an existing Alertmanager configuration needs to be migrated for UTF-8 compatibility. It takes a config file and optional template files as input.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager verify <config_file> [template_files...]\n```\n\n----------------------------------------\n\nTITLE: Removing Container and Blob Parameters from Path\nDESCRIPTION: Removes containerName and blob parameters from the path in the Swagger document, as direct URIs are used.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{{containerName}}/{{blob}}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ContainerName\") && false == param['$ref'].endsWith(\"#/parameters/Blob\"))});\n        } \n        else if (property.includes('/{{containerName}}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ContainerName\"))});\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental PromQL Functions Globally in Mimir YAML Configuration\nDESCRIPTION: This YAML snippet shows how to enable specific experimental PromQL functions globally for all users in the main Mimir configuration file. It demonstrates enabling the 'info', 'sort_by_label', and 'sort_by_label_desc' functions.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-experimental-promql-functions.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  enabled_promql_experimental_functions: info,sort_by_label,sort_by_label_desc\n```\n\n----------------------------------------\n\nTITLE: Using Standard Colors in Go\nDESCRIPTION: Demonstrates how to use the standard color helper functions to print colored text to the terminal.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Print with default helper functions\ncolor.Cyan(\"Prints text in cyan.\")\n\n// A newline will be appended automatically\ncolor.Blue(\"Prints %s in blue.\", \"text\")\n\n// These are using the default foreground colors\ncolor.Red(\"We have red\")\ncolor.Magenta(\"And many others ..\")\n```\n\n----------------------------------------\n\nTITLE: Running ULID Tests\nDESCRIPTION: Command to run all tests in the ULID package and its subdirectories.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus Hooks in Go\nDESCRIPTION: This snippet demonstrates how to initialize and add hooks to Logrus for error tracking and syslog logging. It includes setting up an Airbrake hook for exception tracking and a syslog hook for local logging.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Server with Docker\nDESCRIPTION: Docker command to run a local Grafana server for visualization.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name=grafana --network=grafanet -p 3000:3000 grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Context Support for Structured Logging\nDESCRIPTION: Details on storing and retrieving loggers in context.Context using NewContextWithSlogLogger and FromContextAsSlogLogger functions, with considerations for efficiency and allocations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-17_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Referencing Initial Release Version 0.1.0 in Markdown\nDESCRIPTION: Indicates the initial release of the compute/metadata package as its own module.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.1.0] (2022-10-26)\n```\n\n----------------------------------------\n\nTITLE: Configuring Server TLS Flags for Grafana Mimir\nDESCRIPTION: This snippet demonstrates how to set server TLS flags in Grafana Mimir for both HTTP and gRPC servers. It includes paths to certificates, keys, and client authentication settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/secure/securing-communications-with-tls.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Path to the TLS Cert for the HTTP Server\n-server.http-tls-cert-path=/path/to/server.crt\n\n# Path to the TLS Key for the HTTP Server\n-server.http-tls-key-path=/path/to/server.key\n\n# Type of Client Auth for the HTTP Server\n-server.http-tls-client-auth=\"RequireAndVerifyClientCert\"\n\n# Path to the Client CA Cert for the HTTP Server\n-server.http-tls-ca-path=\"/path/to/root.crt\"\n\n# Path to the TLS Cert for the gRPC Server\n-server.grpc-tls-cert-path=/path/to/server.crt\n\n# Path to the TLS Key for the gRPC Server\n-server.grpc-tls-key-path=/path/to/server.key\n\n# Type of Client Auth for the gRPC Server\n-server.grpc-tls-client-auth=\"RequireAndVerifyClientCert\"\n\n# Path to the Client CA Cert for the gRPC Server\n-server.grpc-tls-ca-path=/path/to/root.crt\n```\n\n----------------------------------------\n\nTITLE: Splitting Blocks from Azure Blob Storage using splitblocks\nDESCRIPTION: Command for splitting blocks stored in Azure Blob Storage. Requires container name, account details, and output directory path.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/splitblocks/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./splitblocks \\\n  --backend azure \\\n  --azure.container-name <container name> \\\n  --azure.account-name <account name> \\\n  --azure.account-key <account key> \\\n  --output.dir <directory> \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Getting Path Parameter Value in Denco (Go)\nDESCRIPTION: This snippet demonstrates two ways to retrieve path parameter values in Denco: using the `denco.Params.Get` method and iterating through the `denco.Params` slice. Both methods achieve the same result, extracting the value of the 'name' parameter from the route '/user/:name/:id'. The example builds a Denco router, performs a lookup, and then extracts the 'name' parameter to print a greeting.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/go-openapi/runtime/middleware/denco\"\n)\n\nfunc main() {\n    router := denco.New()\n    if err := router.Build([]denco.Record{\n        {\"/user/:name/:id\", \"route1\"},\n    }); err != nil {\n        panic(err)\n    }\n\n    // 1. Using denco.Params.Get method.\n    _, params, _ := router.Lookup(\"/user/alice/1\")\n    name := params.Get(\"name\")\n    if name != \"\" {\n        fmt.Printf(\"Hello %s.\\n\", name) // prints \"Hello alice\".\n    }\n\n    // 2. Find by loop.\n    for _, param := range params {\n        if param.Name == \"name\" {\n            fmt.Printf(\"Hello %s.\\n\", name) // prints \"Hello alice\".\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Stdlib Logger Integration with Go-Kit\nDESCRIPTION: Shows how to redirect standard library logging to Go-kit logger using JSON format. Demonstrates timestamp inclusion and adapter usage.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"os\"\n\tstdlog \"log\"\n\tkitlog \"github.com/go-kit/log\"\n)\n\nfunc main() {\n\tlogger := kitlog.NewJSONLogger(kitlog.NewSyncWriter(os.Stdout))\n\tstdlog.SetOutput(kitlog.NewStdlibAdapter(logger))\n\tstdlog.Print(\"I sure like pie\")\n}\n\n// Output:\n// {\"msg\":\"I sure like pie\",\"ts\":\"2016/01/01 12:34:56\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Ring-Based Discovery for Query-Frontend and Querier in Jsonnet\nDESCRIPTION: This snippet configures query-frontend and querier instances to discover query-schedulers via the ring. It sets the service discovery mode to 'ring' and enables the ring read path.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-query-scheduler-from-dns-to-ring-based-service-discovery.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    query_scheduler_service_discovery_mode: 'ring',\n    query_scheduler_service_discovery_ring_read_path_enabled: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Tool for Running MQE Benchmarks\nDESCRIPTION: Reference to the recommended tool for running MQE benchmarks, which provides additional benefits over the standard Go test command. The tool is located in the 'tools/benchmark-query-engine' directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/streamingpromql/benchmarks/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n`tools/benchmark-query-engine`\n```\n\n----------------------------------------\n\nTITLE: Reverting Breaking Change with BlobName in Go Models\nDESCRIPTION: Changes the type of 'Name' field from *BlobName to *string in the generated Go models file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >\n    return $.\n      replace(/Name\\s+\\*BlobName/g, `Name *string`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Thanos Sidecar Kubernetes Service\nDESCRIPTION: Kubernetes service manifest for exposing Thanos sidecar deployment, defining the service ports and selectors.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-to-mimir-with-thanos-sidecar.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: thanos-sidecar\n  namespace: mimir\n  labels:\n    app: thanos-sidecar\nspec:\n  ports:\n    - name: 10901-10901\n      protocol: TCP\n      port: 10901\n      targetPort: 10901\n  selector:\n    app: thanos-sidecar\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Memberlist Cluster Label Verification\nDESCRIPTION: YAML configuration that maintains the unique cluster label while re-enabling cluster label verification by removing the disabled flag, completing the configuration update process.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-enable-cluster-label-verification/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    memberlist:\n      cluster_label: \"{{.Release.Name}}-{{.Release.Namespace}}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cluster Name in Mimir Configuration\nDESCRIPTION: YAML configuration for setting a custom cluster name when the Helm release name differs from the license cluster name. This ensures the license is correctly applied.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-gem.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    cluster_name: <cluster-name-in-license>\n\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Grafana Service in Kubernetes\nDESCRIPTION: Command to port-forward the Grafana service from Kubernetes cluster to localhost on port 3000, enabling local access to the Grafana web interface.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward service/grafana 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Opcode Sequence in Go\nDESCRIPTION: This snippet demonstrates how to use 'json.Marshal' to create an opcode sequence for encoding a struct. It showcases the generation of opcode for field types, including an integer and a string, in a JSON format.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\njson.Marshal(struct{\n    X int `json:\"x\"`\n    Y string `json:\"y\"`\n}{X: 1, Y: \"hello\"})\n```\n\n----------------------------------------\n\nTITLE: YAML Marshaling and Unmarshaling Example in Go\nDESCRIPTION: Demonstrates how to use the yaml.v2 package to marshal and unmarshal YAML data in Go, showing both struct and map implementations. Includes examples of custom struct tags and flow style arrays.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/yaml/goyaml.v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client TLS CA Path\nDESCRIPTION: This configures the path to the Certificate Authority (CA) certificate file used to validate the server's certificate. If not set, the system's root CA certificates are used.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_92\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Path to the CA certificates to validate server certificate\n  # against. If not set, the host's root CA certificates are used.\n  # CLI flag: -alertmanager.alertmanager-client.tls-ca-path\n  [tls_ca_path: <string> | default = \"\"]\n\n```\n\n----------------------------------------\n\nTITLE: Nginx Location Configuration\nDESCRIPTION: Nginx location block configuration for client max body size.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n    ...\n    client_max_body_size 540M;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Ruler Remote Evaluation\nDESCRIPTION: Configuration to disable ruler remote evaluation after microservices ruler scale-down.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_6\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    ruler_remote_evaluation_enabled: false,\n    autoscaling_ruler_querier_enabled: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Blobs Using Pager\nDESCRIPTION: Demonstrates the new pagination pattern using runtime.Pager[T] for listing blobs in a container.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npager := client.NewListBlobsFlatPager(\"my-container\", nil)\nfor pager.More() {\n\tpage, err := pager.NextPage(context.TODO())\n\t// process results\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Backend in Grafana Mimir\nDESCRIPTION: YAML configuration for the Memcached-based caching backend in Grafana Mimir. This includes connection settings, performance tuning parameters, and TLS configuration options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_143\n\nLANGUAGE: yaml\nCODE:\n```\n# Comma-separated list of memcached addresses. Each address can be an IP\n# address, hostname, or an entry specified in the DNS Service Discovery format.\n# CLI flag: -<prefix>.memcached.addresses\n[addresses: <string> | default = \"\"]\n\n# (experimental) DNS provider used for resolving memcached addresses. Available\n# providers golang, miekgdns, miekgdns2\n# CLI flag: -<prefix>.memcached.addresses-provider\n[addresses_provider: <string> | default = \"miekgdns\"]\n\n# The socket read/write timeout.\n# CLI flag: -<prefix>.memcached.timeout\n[timeout: <duration> | default = 200ms]\n\n# The connection timeout.\n# CLI flag: -<prefix>.memcached.connect-timeout\n[connect_timeout: <duration> | default = 200ms]\n\n# (advanced) The minimum number of idle connections to keep open as a percentage\n# (0-100) of the number of recently used idle connections. If negative, idle\n# connections are kept open indefinitely.\n# CLI flag: -<prefix>.memcached.min-idle-connections-headroom-percentage\n[min_idle_connections_headroom_percentage: <float> | default = -1]\n\n# (advanced) The maximum number of idle connections that will be maintained per\n# address.\n# CLI flag: -<prefix>.memcached.max-idle-connections\n[max_idle_connections: <int> | default = 100]\n\n# (advanced) The maximum number of concurrent asynchronous operations can occur.\n# CLI flag: -<prefix>.memcached.max-async-concurrency\n[max_async_concurrency: <int> | default = 50]\n\n# (advanced) The maximum number of enqueued asynchronous operations allowed.\n# CLI flag: -<prefix>.memcached.max-async-buffer-size\n[max_async_buffer_size: <int> | default = 25000]\n\n# (advanced) The maximum number of concurrent connections running get\n# operations. If set to 0, concurrency is unlimited.\n# CLI flag: -<prefix>.memcached.max-get-multi-concurrency\n[max_get_multi_concurrency: <int> | default = 100]\n\n# (advanced) The maximum number of keys a single underlying get operation should\n# run. If more keys are specified, internally keys are split into multiple\n# batches and fetched concurrently, honoring the max concurrency. If set to 0,\n# the max batch size is unlimited.\n# CLI flag: -<prefix>.memcached.max-get-multi-batch-size\n[max_get_multi_batch_size: <int> | default = 100]\n\n# (advanced) The maximum size of an item stored in memcached, in bytes. Bigger\n# items are not stored. If set to 0, no maximum size is enforced.\n# CLI flag: -<prefix>.memcached.max-item-size\n[max_item_size: <int> | default = 1048576]\n\n# (advanced) Enable connecting to Memcached with TLS.\n# CLI flag: -<prefix>.memcached.tls-enabled\n[tls_enabled: <boolean> | default = false]\n\n# (advanced) Path to the client certificate, which will be used for\n# authenticating with the server. Also requires the key path to be configured.\n# CLI flag: -<prefix>.memcached.tls-cert-path\n[tls_cert_path: <string> | default = \"\"]\n\n# (advanced) Path to the key for the client certificate. Also requires the\n# client certificate to be configured.\n# CLI flag: -<prefix>.memcached.tls-key-path\n[tls_key_path: <string> | default = \"\"]\n\n# (advanced) Path to the CA certificates to validate server certificate against.\n# If not set, the host's root CA certificates are used.\n# CLI flag: -<prefix>.memcached.tls-ca-path\n[tls_ca_path: <string> | default = \"\"]\n\n# (advanced) Override the expected name on the server certificate.\n# CLI flag: -<prefix>.memcached.tls-server-name\n[tls_server_name: <string> | default = \"\"]\n\n# (advanced) Skip validating server certificate.\n# CLI flag: -<prefix>.memcached.tls-insecure-skip-verify\n[tls_insecure_skip_verify: <boolean> | default = false]\n\n# (advanced) Override the default cipher suite list (separated by commas).\n# Allowed values:\n#\n# Secure Ciphers:\n# - TLS_AES_128_GCM_SHA256\n# - TLS_AES_256_GCM_SHA384\n# - TLS_CHACHA20_POLY1305_SHA256\n# - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n# - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n# - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n# - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n# - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n# - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n#\n# Insecure Ciphers:\n# - TLS_RSA_WITH_RC4_128_SHA\n# - TLS_RSA_WITH_3DES_EDE_CBC_SHA\n# - TLS_RSA_WITH_AES_128_CBC_SHA\n# - TLS_RSA_WITH_AES_256_CBC_SHA\n# - TLS_RSA_WITH_AES_128_CBC_SHA256\n# - TLS_RSA_WITH_AES_128_GCM_SHA256\n# - TLS_RSA_WITH_AES_256_GCM_SHA384\n# - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n# - TLS_ECDHE_RSA_WITH_RC4_128_SHA\n# - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n# - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n# - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n# CLI flag: -<prefix>.memcached.tls-cipher-suites\n[tls_cipher_suites: <string> | default = \"\"]\n\n# (advanced) Override the default minimum TLS version. Allowed values:\n# VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13\n# CLI flag: -<prefix>.memcached.tls-min-version\n[tls_min_version: <string> | default = \"\"]\n\n# (experimental) Allow client creation even if initial DNS resolution fails.\n# CLI flag: -<prefix>.memcached.dns-ignore-startup-failures\n[dns_ignore_startup_failures: <boolean> | default = false]\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch\nDESCRIPTION: Git commands to create a new feature branch, make and commit changes, and push the branch to your fork. This prepares your changes for a pull request.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: Client certificate authentication with autorest/adal in Go\nDESCRIPTION: This snippet demonstrates client certificate authentication using autorest/adal, including reading a certificate file, decoding it, and creating a ServicePrincipalToken.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"os\"\n\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\ncertData, err := os.ReadFile(\"./example.pfx\")\nhandle(err)\n\ncertificate, rsaPrivateKey, err := decodePkcs12(certData, \"\")\nhandle(err)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenFromCertificate(\n    *oauthConfig, clientID, certificate, rsaPrivateKey, \"https://management.azure.com/\",\n)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: HTTP Call Error Implementation\nDESCRIPTION: Defines a CallErr struct for handling HTTP call errors with verbose error reporting capabilities. Includes request and response objects for detailed error diagnostics.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// CallErr represents an HTTP call error. Has a Verbose() method that allows getting the\n// http.Request and Response objects. Implements error.\ntype CallErr struct {\n    Req  *http.Request\n    Resp *http.Response\n    Err  error\n}\n\n// Errors implements error.Error().\nfunc (e CallErr) Error() string {\n    return e.Err.Error()\n}\n\n// Verbose prints a versbose error message with the request or response.\nfunc (e CallErr) Verbose() string {\n    e.Resp.Request = nil // This brings in a bunch of TLS stuff we don't need\n    e.Resp.TLS = nil     // Same\n    return fmt.Sprintf(\"%s:\\nRequest:\\n%s\\nResponse:\\n%s\", e.Err, prettyConf.Sprint(e.Req), prettyConf.Sprint(e.Resp))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Middleware with Gorilla Mux (Go)\nDESCRIPTION: Explains how to create and use middleware with Gorilla Mux. It includes examples of a simple logging middleware and a more complex authentication middleware.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Do stuff here\n        log.Println(r.RequestURI)\n        // Call the next handler, which can be another middleware in the chain, or the final handler.\n        next.ServeHTTP(w, r)\n    })\n}\n\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\nr.Use(loggingMiddleware)\n```\n\nLANGUAGE: go\nCODE:\n```\n// Define our struct\ntype authenticationMiddleware struct {\n\ttokenUsers map[string]string\n}\n\n// Initialize it somewhere\nfunc (amw *authenticationMiddleware) Populate() {\n\tamw.tokenUsers[\"00000000\"] = \"user0\"\n\tamw.tokenUsers[\"aaaaaaaa\"] = \"userA\"\n\tamw.tokenUsers[\"05f717e5\"] = \"randomUser\"\n\tamw.tokenUsers[\"deadbeef\"] = \"user0\"\n}\n\n// Middleware function, which will be called for each request\nfunc (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        token := r.Header.Get(\"X-Session-Token\")\n\n        if user, found := amw.tokenUsers[token]; found {\n        \t// We found the token in our map\n        \tlog.Printf(\"Authenticated user %s\\n\", user)\n        \t// Pass down the request to the next middleware (or final handler)\n        \tnext.ServeHTTP(w, r)\n        } else {\n        \t// Write an error and stop the handler chain\n        \thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n        }\n    })\n}\n\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\n\namw := authenticationMiddleware{tokenUsers: make(map[string]string)}\namw.Populate()\n\nr.Use(amw.Middleware)\n```\n\n----------------------------------------\n\nTITLE: Installing mimirtool on Linux AMD64\nDESCRIPTION: Command to download and install the mimirtool binary for Linux AMD64 architecture using curl. The command downloads the latest release of mimirtool and makes it executable.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-cortex.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fLo mimirtool https://github.com/grafana/mimir/releases/latest/download/mimirtool-linux-amd64\nchmod +x mimirtool\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana Mimir with Helm\nDESCRIPTION: Command line instruction for upgrading a Grafana Mimir installation using the Helm package manager. Requires existing Helm installation and access to cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade\n```\n\n----------------------------------------\n\nTITLE: Baidu BOS Configuration\nDESCRIPTION: This YAML snippet provides the configuration details for using Baidu BOS as the Thanos object store. It includes the bucket name, endpoint, access key, and secret key for authentication. `mdox-exec` is used to generate configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml mdox-exec=\"go run scripts/cfggen/main.go --name=bos.Config\"\ntype: BOS\nconfig:\n  bucket: \"\"\n  endpoint: \"\"\n  access_key: \"\"\n  secret_key: \"\"\nprefix: \"\"\n```\n```\n\n----------------------------------------\n\nTITLE: Generating ACL Header for Grafana Enterprise Metrics\nDESCRIPTION: This snippet shows how to use the mimirtool acl generate-header command to create a label-based access control header for Grafana Enterprise Metrics or Grafana Cloud Metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool acl generate-header --id=1234 --rule='{namespace=\"A\"}'\n```\n\nLANGUAGE: console\nCODE:\n```\nThe header to set:\nX-Prom-Label-Policy: 1234:%7Bnamespace=%22A%22%7D\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Generator in Go OpenTelemetry Tracer Provider\nDESCRIPTION: Added a TracerProviderOption to configure an IDGenerator for the TracerProvider.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nWithIDGenerator\n```\n\n----------------------------------------\n\nTITLE: Setting Store Gateway Memory Limits\nDESCRIPTION: Environment variable configuration for the store-gateway to set memory limits based on the memory request value to prevent out of memory issues.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v4.5.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nGOMEMLIMIT\n```\n\n----------------------------------------\n\nTITLE: Deploying Extra Objects in Mimir Helm Chart\nDESCRIPTION: Example configuration showing how to deploy arbitrary Kubernetes objects via the extraObjects section of the Helm chart. This example demonstrates creating a ConfigMap with custom data.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v4.1.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextraObjects:\n  - kind: ConfigMap\n    apiVersion: v1\n    metadata:\n      name: extra-cm-{{ .Release.Name }}\n    data: |\n      extra.yml: \"does-my-install-need-extra-info: true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester StatefulSet in Cortex\nDESCRIPTION: YAML configuration to enable StatefulSet for ingesters in Cortex, required for WAL and block storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  statefulSet:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Basic glog Logging in Go\nDESCRIPTION: This code snippet demonstrates basic usage of the glog package for logging information and fatal errors. The `glog.Info` function is used to log informational messages, while `glog.Fatalf` is used to log fatal errors and exit the program. These calls illustrate standard, un-conditional logging.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang/glog/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging with glog.V in Go\nDESCRIPTION: This snippet shows how to use `glog.V` for conditional logging based on verbosity level. The `glog.V(2)` function returns a boolean value indicating whether logging at verbosity level 2 or higher is enabled. This allows developers to conditionally log detailed information based on the configured verbosity level, improving performance when detailed logging is not needed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang/glog/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n\tglog.Info(\"Starting transaction...\")\n}\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Namespace in Grafana Mimir\nDESCRIPTION: This command deletes all rule groups in a specified namespace, including the namespace itself.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules delete-namespace <namespace>\n```\n\n----------------------------------------\n\nTITLE: Managing IO Reader with run.Group in Go\nDESCRIPTION: Example showing how to manage an IO reader using run.Group. The execute function scans and processes the input while the interrupt function closes the connection.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/run/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar conn io.ReadCloser = ...\ng.Add(func() error {\n\ts := bufio.NewScanner(conn)\n\tfor s.Scan() {\n\t\tprintln(s.Text())\n\t}\n\treturn s.Err()\n}, func(error) {\n\tconn.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository\nDESCRIPTION: Bash command to add the Grafana Helm chart repository to the local Helm installation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Fork to Git Configuration\nDESCRIPTION: This command adds the user's fork of the OpenTelemetry Go repository as a new remote in the local git configuration, allowing easy syncing with the forked repository.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Monitoring Time Series PromQL Query\nDESCRIPTION: PromQL query to monitor the number of in-memory time series in specific zone ingesters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-spread-minimizing-tokens/index.md#2025-04-17_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\nsum by(pod) (\n  cortex_ingester_memory_series{\n    namespace=\"<your-namespace>\",\n    pod=~\"ingester-zone-a-.*\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Scaling Up Zone-Aware Alertmanagers\nDESCRIPTION: YAML configuration to scale up zone-aware alertmanagers during the migration process.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n      writePath: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Basic Merging of Structs in Go\nDESCRIPTION: Demonstrates the basic usage of Mergo to merge two structs. The example shows how Mergo preserves non-zero values in the destination struct while copying zero-value fields from the source struct.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nif err := mergo.Merge(&dst, src); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus HA External Labels\nDESCRIPTION: Configuration for setting up HA labels in Prometheus or Grafana Agent. The cluster label must be same across replicas while the __replica__ label must be unique within the same cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configure-helm-ha-deduplication-consul/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  external_labels:\n    __replica__: replica-1\n    cluster: my-prometheus\n```\n\n----------------------------------------\n\nTITLE: Querier: Filter Queryables Enabled Configuration\nDESCRIPTION: Enables the use of the 'X-Filter-Queryables' header to filter down the list of queryables that will be used. This is useful for testing and monitoring single queryables in isolation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n\"# (advanced) If set to true, the header 'X-Filter-Queryables' can be used to\\n# filter down the list of queryables that shall be used. This is useful to test\\n# and monitor single queryables in isolation.\\n# CLI flag: -querier.filter-queryables-enabled\\n[filter_queryables_enabled: <boolean> | default = false]\"\n```\n\n----------------------------------------\n\nTITLE: Applying Mimir Configuration Changes with Helm\nDESCRIPTION: Helm command to preview configuration changes using diff before applying them to the Mimir installation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n test diff upgrade mimir grafana/mimir-distributed --version 3.0.0  -f custom.yaml\n```\n\n----------------------------------------\n\nTITLE: JSON Value Unmarshaling (Go)\nDESCRIPTION: This example addresses how JSON values are unmarshaled into non-empty Go values. v1 exhibited inconsistent behavior, while v2 always merges if the input is an object, and otherwise replaces. This snippet is linked to the `TestMergeComposite` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\n\"[MergeComposite](/diff_test.go#:~:text=TestMergeComposite)\"\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Max Concurrent Get Requests\nDESCRIPTION: This parameter configures the maximum number of concurrent get requests per tenant that the Alertmanager can handle. Setting this value appropriately can help manage resource utilization and prevent overload.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_76\n\nLANGUAGE: yaml\nCODE:\n```\n\n# CLI flag: -alertmanager.max-concurrent-get-requests-per-tenant\n[max_concurrent_get_requests_per_tenant: <int> | default = 0]\n\n```\n\n----------------------------------------\n\nTITLE: Using Backoff with Net Package in Go\nDESCRIPTION: Illustrates how to use the Backoff struct in a network connection retry scenario. It demonstrates the usage of Duration() and Reset() methods in a loop that attempts to establish a TCP connection.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jpillora/backoff/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nb := &backoff.Backoff{\n    Max:    5 * time.Minute,\n}\n\nfor {\n\tconn, err := net.Dial(\"tcp\", \"example.com:5309\")\n\tif err != nil {\n\t\td := b.Duration()\n\t\tfmt.Printf(\"%s, reconnecting in %s\", err, d)\n\t\ttime.Sleep(d)\n\t\tcontinue\n\t}\n\t//connected\n\tb.Reset()\n\tconn.Write([]byte(\"hello world!\"))\n\t// ... Read ... Write ... etc\n\tconn.Close()\n\t//disconnected\n}\n```\n\n----------------------------------------\n\nTITLE: Conversion Between JSON and YAML in Go\nDESCRIPTION: This snippet shows how to convert JSON data to YAML and vice versa using the yaml.JSONToYAML and yaml.YAMLToJSON methods from the kubernetes-sigs/yaml package. The example converts a JSON byte slice to YAML and then back to JSON, illustrating the compatibility and usage of these functions in a Go program.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\nfunc main() {\n\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\n\ty, err := yaml.JSONToYAML(j)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\tj2, err := yaml.YAMLToJSON(y)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(j2))\n\t/* Output:\n\t{\"age\":30,\"name\":\"John\"}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Using SPSCQueue in Go\nDESCRIPTION: Shows usage of SPSCQueue, a bounded single-producer single-consumer concurrent queue.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nq := xsync.NewSPSCQueue(1024)\n// producer inserts an item into the queue\n// optimistic insertion attempt; doesn't block\ninserted := q.TryEnqueue(\"bar\")\n// consumer obtains an item from the queue\n// optimistic obtain attempt; doesn't block\nitem, ok := q.TryDequeue() // interface{} pointing to a string\n```\n\n----------------------------------------\n\nTITLE: Conditionally Capturing Fields with log.Noop in Go OpenTracing\nDESCRIPTION: Shows how to conditionally log fields based on environment or other factors. This is useful for adding sensitive or debugging information only in specific environments while maintaining a consistent API.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Customer(order *Order) log.Field {\n    if os.Getenv(\"ENVIRONMENT\") == \"dev\" {\n        return log.String(\"customer\", order.Customer.ID)\n    }\n    return log.Noop()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Slugs Using the Go 'slug' Package\nDESCRIPTION: This snippet demonstrates how to use the 'slug' package in Go to create slugs from Unicode strings, including support for different languages. The package allows custom substitution of certain words in slugs.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gosimple/slug/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n\t\"github.com/gosimple/slug\"\n\t\"fmt\"\n)\n\nfunc main () {\n\ttext := slug.Make(\"Hellö Wörld хелло ворлд\")\n\tfmt.Println(text) // Will print: \"hello-world-khello-vorld\"\n\n\tsomeText := slug.Make(\"影師\")\n\tfmt.Println(someText) // Will print: \"ying-shi\"\n\n\tenText := slug.MakeLang(\"This & that\", \"en\")\n\tfmt.Println(enText) // Will print: \"this-and-that\"\n\n\tdeText := slug.MakeLang(\"Diese & Dass\", \"de\")\n\tfmt.Println(deText) // Will print: \"diese-und-dass\"\n\n\tslug.CustomSub = map[string]string{\n\t\t\"water\": \"sand\",\n\t}\n\ttextSub := slug.Make(\"water is hot\")\n\tfmt.Println(textSub) // Will print: \"sand-is-hot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ChainedTokenCredential Initialization - Go\nDESCRIPTION: The code snippet shows the updated method to initialize the 'ChainedTokenCredential'. This change involves wrapping the credentials in a slice and accommodating optional parameters. This transition from a simple parameter to a slice enhances flexibility in credential handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewChainedTokenCredential(credA, credB)\n\n// after\ncred, err := NewChainedTokenCredential([]azcore.TokenCredential{credA, credB}, nil)\n```\n\n----------------------------------------\n\nTITLE: Updating Test Fixtures for procfs Library\nDESCRIPTION: Bash commands for managing test fixtures by removing existing fixtures directory and recreating it from the ttar file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf testdata/fixtures\nmake test\n```\n\n----------------------------------------\n\nTITLE: Ensuring Backwards Compatibility for Deprecated Option in Go\nDESCRIPTION: Example of preserving the deprecated option's non-default value by setting it in the new limits config if it's not the default.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif t.Cfg.Frontend.QueryMiddleware.DeprecatedCacheUnalignedRequests != querymiddleware.DefaultDeprecatedCacheUnalignedRequests {\n    t.Cfg.LimitsConfig.ResultsCacheForUnalignedQueryEnabled = t.Cfg.Frontend.QueryMiddleware.DeprecatedCacheUnalignedRequests\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type by Name in Go using reflect2\nDESCRIPTION: Demonstrates how to use reflect2.TypeByName to retrieve a type by its fully qualified name. This function works similar to Java's Class.forName.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Storage Backend in YAML\nDESCRIPTION: Configuration block for connecting to Google Cloud Storage. Includes bucket configuration, authentication settings, and HTTP connection parameters. Supports multiple storage prefixes including alertmanager-storage, blocks-storage, common.storage, and ruler-storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_147\n\nLANGUAGE: yaml\nCODE:\n```\n# GCS bucket name\n[bucket_name: <string> | default = \"\"]\n\n# JSON either from a Google Developers Console client_credentials.json file, or\n# a Google Developers service account key.\n[service_account: <string> | default = \"\"]\n\nhttp:\n  [idle_conn_timeout: <duration> | default = 1m30s]\n  [response_header_timeout: <duration> | default = 2m]\n  [insecure_skip_verify: <boolean> | default = false]\n  [tls_handshake_timeout: <duration> | default = 10s]\n  [expect_continue_timeout: <duration> | default = 1s]\n  [max_idle_connections: <int> | default = 100]\n  [max_idle_connections_per_host: <int> | default = 100]\n  [max_connections_per_host: <int> | default = 0]\n  [tls_ca_path: <string> | default = \"\"]\n  [tls_cert_path: <string> | default = \"\"]\n  [tls_key_path: <string> | default = \"\"]\n  [tls_server_name: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Instance Limits in YAML\nDESCRIPTION: Example demonstrating how to set ingester-level limits including max ingestion rate, series, tenants and push requests.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/about-runtime-configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningester_limits:\n  max_ingestion_rate: 20000\n  max_series: 1500000\n  max_tenants: 1000\n  max_inflight_push_requests: 30000\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Alloy Remote Write Component\nDESCRIPTION: Configuration snippet for Grafana Alloy to set up remote write to Grafana Mimir. This component configuration enables Alloy to send metrics to an externally accessible Mimir instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.remote_write \"LABEL\" {\n  endpoint {\n    url = http://<ingress-host>/api/v1/push\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic MPMCQueueOf in Go\nDESCRIPTION: Demonstrates the generic MPMCQueueOf type with parametrized item types for Go 1.19+.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nq := xsync.NewMPMCQueueOf[string](1024)\ninserted := q.TryEnqueue(\"foo\")\nitem, ok := q.TryDequeue() // string\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingestion Partitions Tenant Shard Size in Grafana Mimir\nDESCRIPTION: YAML configuration for setting the tenant shard size for ingestion partitions in Grafana Mimir, with a default value of 0.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_129\n\nLANGUAGE: yaml\nCODE:\n```\n# CLI flag: -ingest-storage.ingestion-partition-tenant-shard-size\n[ingestion_partitions_tenant_shard_size: <int> | default = 0]\n```\n\n----------------------------------------\n\nTITLE: Using JSON-Iterator Unmarshal as Replacement\nDESCRIPTION: Example showing how to replace standard json.Unmarshal with JSON-Iterator's compatible implementation for better performance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Using goleak.VerifyNone in a Test Function\nDESCRIPTION: Example of using goleak's VerifyNone method to check for goroutine leaks at the end of an individual test. This pattern ensures that no unexpected goroutines are running when the test completes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/goleak/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestA(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\t// test logic here.\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting CORS XML Tag Formatting\nDESCRIPTION: YAML directive that fixes the XML tags for CORS rules by changing them from 'CORS>CORSRule' to 'Cors>CorsRule' to match the service's expected format.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/xml:\"CORS>CORSRule\"/g, \"xml:\\\"Cors>CorsRule\\\"\");\n```\n\n----------------------------------------\n\nTITLE: Fetching Status Flags in Grafana Mimir\nDESCRIPTION: This endpoint displays empty configuration flags for compatibility with the Prometheus /api/v1/status/flags API.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/status/flags\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Kubernetes Code of Conduct\nDESCRIPTION: A markdown hyperlink that directs users to the official Kubernetes Community Code of Conduct document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/yaml/code-of-conduct.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Kubernetes Community Code of Conduct](https://git.k8s.io/community/code-of-conduct.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Kafka-based Ingest Storage in Grafana Mimir\nDESCRIPTION: Detailed YAML configuration for the experimental Kafka-based ingest storage feature in Grafana Mimir. This configuration includes all Kafka connection settings, consumer/producer parameters, and performance tuning options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_127\n\nLANGUAGE: yaml\nCODE:\n```\n# True to enable the ingestion via object storage.\n# CLI flag: -ingest-storage.enabled\n[enabled: <boolean> | default = false]\n\nkafka:\n  # The Kafka backend address.\n  # CLI flag: -ingest-storage.kafka.address\n  [address: <string> | default = \"\"]\n\n  # The Kafka topic name.\n  # CLI flag: -ingest-storage.kafka.topic\n  [topic: <string> | default = \"\"]\n\n  # The Kafka client ID.\n  # CLI flag: -ingest-storage.kafka.client-id\n  [client_id: <string> | default = \"\"]\n\n  # The maximum time allowed to open a connection to a Kafka broker.\n  # CLI flag: -ingest-storage.kafka.dial-timeout\n  [dial_timeout: <duration> | default = 2s]\n\n  # How long to wait for an incoming write request to be successfully committed\n  # to the Kafka backend.\n  # CLI flag: -ingest-storage.kafka.write-timeout\n  [write_timeout: <duration> | default = 10s]\n\n  # The number of Kafka clients used by producers. When the configured number of\n  # clients is greater than 1, partitions are sharded among Kafka clients. A\n  # higher number of clients may provide higher write throughput at the cost of\n  # additional Metadata requests pressure to Kafka.\n  # CLI flag: -ingest-storage.kafka.write-clients\n  [write_clients: <int> | default = 1]\n\n  # The username used to authenticate to Kafka using the SASL plain mechanism.\n  # To enable SASL, configure both the username and password.\n  # CLI flag: -ingest-storage.kafka.sasl-username\n  [sasl_username: <string> | default = \"\"]\n\n  # The password used to authenticate to Kafka using the SASL plain mechanism.\n  # To enable SASL, configure both the username and password.\n  # CLI flag: -ingest-storage.kafka.sasl-password\n  [sasl_password: <string> | default = \"\"]\n\n  # The consumer group used by the consumer to track the last consumed offset.\n  # The consumer group must be different for each ingester. If the configured\n  # consumer group contains the '<partition>' placeholder, it is replaced with\n  # the actual partition ID owned by the ingester. When empty (recommended),\n  # Mimir uses the ingester instance ID to guarantee uniqueness.\n  # CLI flag: -ingest-storage.kafka.consumer-group\n  [consumer_group: <string> | default = \"\"]\n\n  # How frequently a consumer should commit the consumed offset to Kafka. The\n  # last committed offset is used at startup to continue the consumption from\n  # where it was left.\n  # CLI flag: -ingest-storage.kafka.consumer-group-offset-commit-interval\n  [consumer_group_offset_commit_interval: <duration> | default = 1s]\n\n  # How frequently to poll the last produced offset, used to enforce strong read\n  # consistency.\n  # CLI flag: -ingest-storage.kafka.last-produced-offset-poll-interval\n  [last_produced_offset_poll_interval: <duration> | default = 1s]\n\n  # How long to retry a failed request to get the last produced offset.\n  # CLI flag: -ingest-storage.kafka.last-produced-offset-retry-timeout\n  [last_produced_offset_retry_timeout: <duration> | default = 10s]\n\n  # From which position to start consuming the partition at startup. Supported\n  # options: last-offset, start, end, timestamp.\n  # CLI flag: -ingest-storage.kafka.consume-from-position-at-startup\n  [consume_from_position_at_startup: <string> | default = \"last-offset\"]\n\n  # Milliseconds timestamp after which the consumption of the partition starts\n  # at startup. Only applies when consume-from-position-at-startup is timestamp\n  # CLI flag: -ingest-storage.kafka.consume-from-timestamp-at-startup\n  [consume_from_timestamp_at_startup: <int> | default = 0]\n\n  # The best-effort maximum lag a consumer tries to achieve at startup. Set both\n  # -ingest-storage.kafka.target-consumer-lag-at-startup and\n  # -ingest-storage.kafka.max-consumer-lag-at-startup to 0 to disable waiting\n  # for maximum consumer lag being honored at startup.\n  # CLI flag: -ingest-storage.kafka.target-consumer-lag-at-startup\n  [target_consumer_lag_at_startup: <duration> | default = 2s]\n\n  # The guaranteed maximum lag before a consumer is considered to have caught up\n  # reading from a partition at startup, becomes ACTIVE in the hash ring and\n  # passes the readiness check. Set both\n  # -ingest-storage.kafka.target-consumer-lag-at-startup and\n  # -ingest-storage.kafka.max-consumer-lag-at-startup to 0 to disable waiting\n  # for maximum consumer lag being honored at startup.\n  # CLI flag: -ingest-storage.kafka.max-consumer-lag-at-startup\n  [max_consumer_lag_at_startup: <duration> | default = 15s]\n\n  # Enable auto-creation of Kafka topic on startup if it doesn't exist. If\n  # creating the topic fails and the topic doesn't already exist, Mimir will\n  # fail to start.\n  # CLI flag: -ingest-storage.kafka.auto-create-topic-enabled\n  [auto_create_topic_enabled: <boolean> | default = true]\n\n  # When auto-creation of Kafka topic is enabled and this value is positive,\n  # Mimir will create the topic with this number of partitions. When the value\n  # is -1 the Kafka broker will use the default number of partitions\n  # (num.partitions configuration).\n  # CLI flag: -ingest-storage.kafka.auto-create-topic-default-partitions\n  [auto_create_topic_default_partitions: <int> | default = -1]\n\n  # The maximum size of a Kafka record data that should be generated by the\n  # producer. An incoming write request larger than this size is split into\n  # multiple Kafka records. We strongly recommend to not change this setting\n  # unless for testing purposes.\n  # CLI flag: -ingest-storage.kafka.producer-max-record-size-bytes\n  [producer_max_record_size_bytes: <int> | default = 15983616]\n\n  # The maximum size of (uncompressed) buffered and unacknowledged produced\n  # records sent to Kafka. The produce request fails once this limit is reached.\n  # This limit is per Kafka client. 0 to disable the limit.\n  # CLI flag: -ingest-storage.kafka.producer-max-buffered-bytes\n  [producer_max_buffered_bytes: <int> | default = 1073741824]\n\n  # The maximum allowed for a read requests processed by an ingester to wait\n  # until strong read consistency is enforced. 0 to disable the timeout.\n  # CLI flag: -ingest-storage.kafka.wait-strong-read-consistency-timeout\n  [wait_strong_read_consistency_timeout: <duration> | default = 20s]\n\n  # The maximum amount of time a Kafka broker waits for some records before a\n  # Fetch response is returned.\n  # CLI flag: -ingest-storage.kafka.fetch-max-wait\n  [fetch_max_wait: <duration> | default = 5s]\n\n  # The maximum number of concurrent fetch requests that the ingester makes when\n  # reading data from Kafka during startup. Concurrent fetch requests are issued\n  # only when there is sufficient backlog of records to consume. 0 to disable.\n  # CLI flag: -ingest-storage.kafka.fetch-concurrency-max\n  [fetch_concurrency_max: <int> | default = 0]\n\n  # When enabled, the fetch request MaxBytes field is computed using the\n  # compressed size of previous records. When disabled, MaxBytes is computed\n  # using uncompressed bytes. Different Kafka implementations interpret MaxBytes\n  # differently.\n  # CLI flag: -ingest-storage.kafka.use-compressed-bytes-as-fetch-max-bytes\n  [use_compressed_bytes_as_fetch_max_bytes: <boolean> | default = true]\n\n  # The maximum number of buffered records ready to be processed. This limit\n  # applies to the sum of all inflight requests. Set to 0 to disable the limit.\n  # CLI flag: -ingest-storage.kafka.max-buffered-bytes\n  [max_buffered_bytes: <int> | default = 100000000]\n\n  # The maximum number of concurrent ingestion streams to the TSDB head. Every\n  # tenant has their own set of streams. 0 to disable.\n  # CLI flag: -ingest-storage.kafka.ingestion-concurrency-max\n  [ingestion_concurrency_max: <int> | default = 0]\n\n  # The number of timeseries to batch together before ingesting to the TSDB\n  # head. Only use this setting when\n  # -ingest-storage.kafka.ingestion-concurrency-max is greater than 0.\n  # CLI flag: -ingest-storage.kafka.ingestion-concurrency-batch-size\n  [ingestion_concurrency_batch_size: <int> | default = 150]\n\n  # The number of batches to prepare and queue to ingest to the TSDB head. Only\n  # use this setting when -ingest-storage.kafka.ingestion-concurrency-max is\n  # greater than 0.\n  # CLI flag: -ingest-storage.kafka.ingestion-concurrency-queue-capacity\n  [ingestion_concurrency_queue_capacity: <int> | default = 5]\n\n  # The expected number of times to ingest timeseries to the TSDB head after\n  # batching. With fewer flushes, the overhead of splitting up the work is\n  # higher than the benefit of parallelization. Only use this setting when\n  # -ingest-storage.kafka.ingestion-concurrency-max is greater than 0.\n  # CLI flag: -ingest-storage.kafka.ingestion-concurrency-target-flushes-per-shard\n  [ingestion_concurrency_target_flushes_per_shard: <int> | default = 80]\n\n  # The estimated number of bytes a sample has at time of ingestion. This value\n  # is used to estimate the timeseries without decompressing them. Only use this\n  # setting when -ingest-storage.kafka.ingestion-concurrency-max is greater than\n  # 0.\n  # CLI flag: -ingest-storage.kafka.ingestion-concurrency-estimated-bytes-per-sample\n  [ingestion_concurrency_estimated_bytes_per_sample: <int> | default = 500]\n\nmigration:\n  # When both this option and ingest storage are enabled, distributors write to\n  # both Kafka and ingesters. A write request is considered successful only when\n  # written to both backends.\n  # CLI flag: -ingest-storage.migration.distributor-send-to-ingesters-enabled\n  [distributor_send_to_ingesters_enabled: <boolean> | default = false]\n```\n\n----------------------------------------\n\nTITLE: Extracting Cortex Configuration\nDESCRIPTION: Command to extract Cortex configuration from values.yaml using yq.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyq '.config' <VALUES YAML FILE> > cortex.yaml\n```\n\n----------------------------------------\n\nTITLE: Buffio Writer Example\nDESCRIPTION: Illustrates how to wrap a file stream with bufio.NewWriter for potentially better performance when writing bitsets to files.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n\tf, err := os.Create(\"myfile\")\n\tw := bufio.NewWriter(f)\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Storage Blocks in YAML Format\nDESCRIPTION: Example output showing storage block information in YAML format. Provides the same information as JSON but in a more human-readable format.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/listblocks/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- blockID: 01HRB9NDFKKYM8CKGPBEY0E8QX\n  duration: 24h0m0s\n  durationSeconds: 86400\n  maxTime: \"2024-03-07T00:00:00Z\"\n  minTime: \"2024-03-06T00:00:00Z\"\n  noCompact:\n    time: \"2025-04-10T19:48:56Z\"\n    reason: manual\n  size: 687 MiB\n  sizeBytes: 720756845\n- blockID: 01HRDWWNZQCH1MWCWKK4VMW08R\n  duration: 24h0m0s\n  durationSeconds: 86400\n  maxTime: \"2024-03-08T00:00:00Z\"\n  minTime: \"2024-03-07T00:00:00Z\"\n  size: 688 MiB\n  sizeBytes: 721221809\n```\n\n----------------------------------------\n\nTITLE: Using SelfRef to Continue Spans in Go\nDESCRIPTION: Demonstrates how to use the SelfRef feature to continue an existing span with an externally provided SpanContext. This allows appending data to the same span from different processes or continuing traces from offline storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nspan := tracer.StartSpan(\n    \"continued_span\",\n    jaeger.SelfRef(yourSpanContext),\n)\n...\ndefer span.Finish()\n```\n\n----------------------------------------\n\nTITLE: Embedded Unexported Struct Serialization (Go)\nDESCRIPTION: This example focuses on the serialization of structs that embed unexported structs. v1 sometimes allowed serialization, while v2 does not. This snippet is linked to the `TestEmbedUnexported` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\n\"[EmbedUnexported](/diff_test.go#:~:text=TestEmbedUnexported)\"\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Active Series Write Timeout Configuration\nDESCRIPTION: Configures the timeout for writing active series responses. A value of 0 indicates that the value from `-server.http-write-timeout` is used.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (experimental) Timeout for writing active series responses. 0 means the value\\n# from `-server.http-write-timeout` is used.\\n# CLI flag: -query-frontend.active-series-write-timeout\\n[active_series_write_timeout: <duration> | default = 5m]\"\n```\n\n----------------------------------------\n\nTITLE: Using Denco as HTTP Request Multiplexer in Go\nDESCRIPTION: This code snippet demonstrates how to use Denco as an HTTP request multiplexer, similar to `http.ServeMux`. It defines handler functions for different routes and registers them with the Denco mux. The `denco.NewMux()` function creates a new mux, and `mux.Build()` builds the handler from a list of `denco.Handler` records, associating routes with handler functions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/go-openapi/runtime/middleware/denco\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, params denco.Params) {\n    fmt.Fprintf(w, \"Welcome to Denco!\\n\")\n}\n\nfunc User(w http.ResponseWriter, r *http.Request, params denco.Params) {\n    fmt.Fprintf(w, \"Hello %s!\\n\", params.Get(\"name\"))\n}\n\nfunc main() {\n    mux := denco.NewMux()\n    handler, err := mux.Build([]denco.Handler{\n        mux.GET(\"/\", Index),\n        mux.GET(\"/user/:name\", User),\n        mux.POST(\"/user/:name\", User),\n    })\n    if err != nil {\n        panic(err)\n    }\n    log.Fatal(http.ListenAndServe(\":8080\", handler))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Service Parameters\nDESCRIPTION: YAML configuration block defining various service parameters for Grafana Mimir, including distributor settings, ingester limits, and querier controls. Includes settings for rate limiting, series limits, metadata controls, and query parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_118\n\nLANGUAGE: yaml\nCODE:\n```\nservice_overload_status_code_on_rate_limit_enabled: <boolean> | default = false\nmax_global_series_per_user: <int> | default = 150000\nmax_global_series_per_metric: <int> | default = 0\nmax_global_metadata_per_user: <int> | default = 0\nmax_global_metadata_per_metric: <int> | default = 0\nmax_global_exemplars_per_user: <int> | default = 0\nignore_ooo_exemplars: <boolean> | default = false\nnative_histograms_ingestion_enabled: <boolean> | default = true\nactive_series_custom_trackers: <map of tracker name (string) to matcher (string)> | default = \nactive_series_additional_custom_trackers: <map of tracker name (string) to matcher (string)> | default = \nout_of_order_time_window: <duration> | default = 0s\nout_of_order_blocks_external_label_enabled: <boolean> | default = false\nseparate_metrics_group_label: <string> | default = \"\"\nmax_fetched_chunks_per_query: <int> | default = 2000000\nmax_estimated_fetched_chunks_per_query_multiplier: <float> | default = 0\nmax_fetched_series_per_query: <int> | default = 0\nmax_fetched_chunk_bytes_per_query: <int> | default = 0\nmax_estimated_memory_consumption_per_query: <int> | default = 0\nmax_query_lookback: <duration> | default = 0s\nmax_partial_query_length: <duration> | default = 0s\nmax_query_parallelism: <int> | default = 14\nmax_labels_query_length: <duration> | default = 0s\nmax_series_query_limit: <int> | default = 0\nmax_cache_freshness: <duration> | default = 10m\nmax_queriers_per_tenant: <int> | default = 0\nquery_sharding_total_shards: <int> | default = 16\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL Flusher in Mimir\nDESCRIPTION: Configuration for the Write-Ahead Log (WAL) flusher target, used for manually running one-time flushes when scaling down ingesters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_109\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) Stop after flush has finished. If false, process will keep running,\n# doing nothing.\n# CLI flag: -flusher.exit-after-flush\n[exit_after_flush: <boolean> | default = true]\n```\n\n----------------------------------------\n\nTITLE: Implementing Expirable LRU Cache with Golang-LRU in Go\nDESCRIPTION: This code snippet shows how to create an expirable LRU cache with a time-to-live configuration using the golang-lru expirable package. It demonstrates adding elements, checking for existence, and handling expiration. Requires the golang-lru package with support for expirable caches.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/golang-lru/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/hashicorp/golang-lru/v2/expirable\"\n)\n\nfunc main() {\n\t// make cache with 10ms TTL and 5 max keys\n\tcache := expirable.NewLRU[string, string](5, nil, time.Millisecond*10)\n\n\n\t// set value under key1.\n\tcache.Add(\"key1\", \"val1\")\n\n\t// get value under key1\n\tr, ok := cache.Get(\"key1\")\n\n\t// check for OK value\n\tif ok {\n\t\tfmt.Printf(\"value before expiration is found: %v, value: %q\\n\", ok, r)\n\t}\n\n\t// wait for cache to expire\n\ttime.Sleep(time.Millisecond * 12)\n\n\t// get value under key1 after key expiration\n\tr, ok = cache.Get(\"key1\")\n\tfmt.Printf(\"value after expiration is found: %v, value: %q\\n\", ok, r)\n\n\t// set value under key2, would evict old entry because it is already expired.\n\tcache.Add(\"key2\", \"val2\")\n\n\tfmt.Printf(\"Cache len: %d\\n\", cache.Len())\n\t// Output:\n\t// value before expiration is found: true, value: \"val1\"\n\t// value after expiration is found: false, value: \"\"\n\t// Cache len: 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Acquiring a token with autorest/adal in Go\nDESCRIPTION: This snippet demonstrates how to acquire a token using autorest/adal, including creating a ServicePrincipalToken and refreshing it to obtain the token.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://vault.azure.net\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n\nerr = spt.Refresh()\nif err == nil {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Setting External Configuration Values in YAML\nDESCRIPTION: This YAML snippet illustrates the values that need to be set in a custom values file or via the Helm command line when using external configurations. It references the external Secret or ConfigMap name and version.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuseExternalConfig: true\nexternalConfigSecretName: my-mimir-config\nexternalConfigVersion: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Advanced ULID Time Parsing with Additional Options\nDESCRIPTION: This example shows the extended usage of the ulidtime tool with additional flags: -header to display column headers, -entropy to show random entropy values, and -millis to display millisecond timestamps.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/ulidtime.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nulidtime -header -entropy -millis 01H8G30YH46MCFWK10PMXJN2KW 01H8K2R3AZT7N9JSJFF2NDGEA9 01H8N8E7SCB3PBBD6PERMJ7PEJ 01H8QTZPEXGG8TEQFBKY0BPQMF 01H8TDCKH5WM2D56KSGNATE9RT 01H8X1ZFE5BED94C7JX88ZF9K4 01H8ZN7G70Z28DDCXTPF7H8DJ4 01H926WF74G7YFWZ1394S7616G 01H94S30Z0VZQP3GWQX2X2X524 01H97970YAQ4EKCZ6QS1QB4Q27 01H99YVZ0ACNDYXF6FMWM91V4S 01H9CFBYCS0XHYNW10X1HC8NSQ 01H9F454S0KD1VAYW53225D60D 01H9HKGZ8PDWSEJYMPRZBG65YN\n\nULID                        TIMESTAMP                 MILLISECONDS   RANDOM\n01H8G30YH46MCFWK10PMXJN2KW  2023-08-23T02:19:22.532Z  1692757162532  3518fe4c20b53b2a8a7c\n01H8K2R3AZT7N9JSJFF2NDGEA9  2023-08-24T06:12:15.839Z  1692857535839  d1ea99664f78aad83949\n01H8N8E7SCB3PBBD6PERMJ7PEJ  2023-08-25T02:30:13.036Z  1692930613036  58ecb5b4d6762923d9d2\n01H8QTZPEXGG8TEQFBKY0BPQMF  2023-08-26T02:32:48.349Z  1693017168349  8411a75deb9f80bb5e8f\n01H8TDCKH5WM2D56KSGNATE9RT  2023-08-27T02:32:54.565Z  1693103574565  e504d29a798555a7271a\n01H8X1ZFE5BED94C7JX88ZF9K4  2023-08-28T03:11:13.349Z  1693192273349  5b9a9230f2ea11f7a664\n01H8ZN7G70Z28DDCXTPF7H8DJ4  2023-08-29T03:26:08.096Z  1693279568096  f890d6b3bab3cf143644\n01H926WF74G7YFWZ1394S7616G  2023-08-30T03:13:09.86Z   1693365189860  81fcfe7c2349327304d0\n01H94S30Z0VZQP3GWQX2X2X524  2023-08-31T03:09:47.872Z  1693451387872  dfef61c397e8ba2e9444\n01H97970YAQ4EKCZ6QS1QB4Q27  2023-09-01T02:30:05.002Z  1693535405002  b91d367cd7c86eb25c47\n01H99YVZ0ACNDYXF6FMWM91V4S  2023-09-02T03:27:00.106Z  1693625220106  655beebccfa72890ec99\n01H9CFBYCS0XHYNW10X1HC8NSQ  2023-09-03T02:53:49.849Z  1693709629849  0763eaf020e862c45737\n01H9F454S0KD1VAYW53225D60D  2023-09-04T03:35:35.968Z  1693798535968  9b43b57b85188456980d\n01H9HKGZ8PDWSEJYMPRZBG65YN  2023-09-05T02:42:41.046Z  1693881761046  6f32e97a96c7d70317d5\n```\n\n----------------------------------------\n\nTITLE: Visualizing Complete Resolver Configuration Update Flow in Terminal ASCII\nDESCRIPTION: This terminal ASCII diagram illustrates the full sequence when a configuration change is detected. It shows how the Resolver reacts to an onChange notification from a Provider by re-resolving the configuration through a new Retrieve call.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n         Resolver              Provider\n            │                     │\n   Watch    │                     │\n───────────►│                     │\n            │                     │\n            .                     .\n            .                     .\n            .                     .\n            │      onChange       │\n            │◄────────────────────┤\n◄───────────┤                     │\n            |                     |\n  Resolve   │                     │\n───────────►│                     │\n            │                     │\n            │      Retrieve       │\n            ├────────────────────►│\n            │        Conf         │\n            │◄────────────────────┤\n◄───────────┤                     │\n```\n\n----------------------------------------\n\nTITLE: Accessing MaxEncodedSize Method in ZSTD Encoder\nDESCRIPTION: Example showing how to access the MaxEncodedSize method in the zstd encoder, which allows determining the maximum possible size after encoding. This API was added in v1.15.13 of the library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://pkg.go.dev/github.com/klauspost/compress@v1.15.13/zstd#Encoder.MaxEncodedSize\n```\n\n----------------------------------------\n\nTITLE: Running Zap tests and linters\nDESCRIPTION: Commands to verify that tests and linters pass in the Zap codebase. These are required checks before submitting contributions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Tenant Ingestion Rate Limits in YAML\nDESCRIPTION: Example showing how to override default ingestion rate limits for specific tenants in the runtime configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/about-runtime-configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  tenant1:\n    ingestion_rate: 50000\n  tenant2:\n    ingestion_rate: 75000\n```\n\n----------------------------------------\n\nTITLE: Listing Unused PVCs - Kubectl Command\nDESCRIPTION: Kubectl command to list unused Persistent Volume Claims (PVCs) from scaled-down microservices for cleanup.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pvc --no-headers | grep -E '(ingester|store-gateway|compactor)' | awk '{print $1}'\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Remote Timeout\nDESCRIPTION: This setting defines the timeout duration for requests made to downstream Alertmanagers. Adjusting this timeout can help prevent issues caused by slow or unresponsive Alertmanager instances.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_77\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager_client:\n  # (advanced) Timeout for downstream alertmanagers.\n  # CLI flag: -alertmanager.alertmanager-client.remote-timeout\n  [remote_timeout: <duration> | default = 2s]\n\n```\n\n----------------------------------------\n\nTITLE: Running Undelete-Blocks with Amazon S3\nDESCRIPTION: Example command for using the undelete-blocks tool with Amazon S3 or S3-compatible storage. It demonstrates how to specify the S3 backend, bucket name, credentials, endpoint, and lines input format.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/undelete-blocks/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./undelete-blocks\\\n  --backend s3 \\\n  --s3.bucket-name <bucket name> \\\n  --s3.access-key-id <access key id> \\\n  --s3.secret-access-key <secret access key> \\\n  --s3.endpoint <endpoint> \\\n  --blocks-from lines \\\n  --input-file undelete.lines \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: AliYun OSS Configuration\nDESCRIPTION: This YAML snippet shows the configuration for using AliYun OSS as Thanos object storage. It requires the endpoint, bucket name, access key ID, and access key secret for authentication. `mdox-exec` is used to generate configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml mdox-exec=\"go run scripts/cfggen/main.go --name=oss.Config\"\ntype: ALIYUNOSS\nconfig:\n  endpoint: \"\"\n  bucket: \"\"\n  access_key_id: \"\"\n  access_key_secret: \"\"\nprefix: \"\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using go-sysconf to Retrieve System Clock Ticks in Go\nDESCRIPTION: This snippet demonstrates how to use the go-sysconf library to get the number of clock ticks per second from the system. It imports the library, calls the Sysconf function with SC_CLK_TCK parameter, and prints the result if successful.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/tklauser/go-sysconf/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/tklauser/go-sysconf\"\n)\n\nfunc main() {\n\t// get clock ticks, this will return the same as C.sysconf(C._SC_CLK_TCK)\n\tclktck, err := sysconf.Sysconf(sysconf.SC_CLK_TCK)\n\tif err == nil {\n\t\tfmt.Printf(\"SC_CLK_TCK: %v\\n\", clktck)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Go Version in go.mod\nDESCRIPTION: Instructions for updating the minimum supported Golang version in the project's go.mod file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-upgrade-golang-version.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo\n```\n\n----------------------------------------\n\nTITLE: Marking a Flag as Hidden in pflag\nDESCRIPTION: This example demonstrates how to mark a flag as hidden in pflag, which keeps it functional but removes it from usage and help text.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Environment Variables\nDESCRIPTION: Example showing how to properly configure container environment variables for both microservices and read-write components.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-deployment-mode.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    // This change will NOT be applied to mimir-write too.\n    ingester_container+::\n      container.withEnvMixin(\n        [envVar.new('GOGC', '50')]\n      ),\n\n    mimir_write_container+::\n      container.withEnvMixin(\n        [envVar.new('GOGC', '50')]\n      ),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Max Outstanding Per Tenant Configuration\nDESCRIPTION: Defines the maximum number of outstanding requests per tenant per frontend. Requests exceeding this limit will result in an HTTP 429 error (Too Many Requests).\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Maximum number of outstanding requests per tenant per frontend;\\n# requests beyond this error with HTTP 429.\\n# CLI flag: -querier.max-outstanding-requests-per-tenant\\n[max_outstanding_per_tenant: <int> | default = 100]\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Services Status in Grafana Mimir\nDESCRIPTION: This endpoint displays a web page with the status of internal Grafana Mimir services.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /services\n```\n\n----------------------------------------\n\nTITLE: Creating S2 Writer with Snappy Compatibility and Index in Go\nDESCRIPTION: Demonstrates how to create an S2 Writer that is Snappy compatible and includes an index. The index allows for random seeking within the compressed data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n\t// Add Index to stream...\n\tenc := s2.NewWriter(w, s2.WriterAddIndex())\n\tio.Copy(enc, r)\n\tenc.Close()\n```\n\n----------------------------------------\n\nTITLE: Enabling Query Queue Load Balancing by Query Component in YAML\nDESCRIPTION: Enables query queue load balancing by query component. Requires setting both -query-frontend.additional-query-queue-dimensions-enabled on query-frontend and -query-scheduler.additional-query-queue-dimensions-enabled on query-scheduler to true.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n-query-frontend.additional-query-queue-dimensions-enabled: true\n-query-scheduler.additional-query-queue-dimensions-enabled: true\n```\n\n----------------------------------------\n\nTITLE: Handling Repeatable Flags and Arguments in Kingpin\nDESCRIPTION: This snippet demonstrates how to define repeatable flags and arguments in Kingpin using custom types, outlining the implementation of cumulative flags and arguments to capture multiple inputs.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype ipList []net.IP\n\nfunc (i *ipList) Set(value string) error {\n  if ip := net.ParseIP(value); ip == nil {\n    return fmt.Errorf(\"'%s' is not an IP address\", value)\n  } else {\n    *i = append(*i, ip)\n    return nil\n  }\n}\n\nfunc (i *ipList) String() string {\n  return \"\"\n}\n\nfunc (i *ipList) IsCumulative() bool {\n  return true\n}\n\nfunc IPList(s Settings) (target *[]net.IP) {\n  target = new([]net.IP)\n  s.SetValue((*ipList)(target))\n  return\n}\n\nips := IPList(kingpin.Arg(\"ips\", \"IP addresses to ping.\"))\n```\n\n----------------------------------------\n\nTITLE: Reading Command Line Arguments with Koanf in Go\nDESCRIPTION: Example demonstrating how to read configuration from command line arguments using spf13/pflag integration\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/toml\"\n\n\t// TOML version 2 is available at:\n\t// \"github.com/knadh/koanf/parsers/toml/v2\"\n\n\t\"github.com/knadh/koanf/providers/file\"\n\t\"github.com/knadh/koanf/providers/posflag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Use the POSIX compliant pflag lib instead of Go's flag lib.\n\tf := flag.NewFlagSet(\"config\", flag.ContinueOnError)\n\tf.Usage = func() {\n\t\tfmt.Println(f.FlagUsages())\n\t\tos.Exit(0)\n\t}\n\t// Path to one or more config files to load into koanf along with some config params.\n\tf.StringSlice(\"conf\", []string{\"mock/mock.toml\"}, \"path to one or more .toml config files\")\n\tf.String(\"time\", \"2020-01-01\", \"a time string\")\n\tf.String(\"type\", \"xxx\", \"type of the app\")\n\tf.Parse(os.Args[1:])\n\n\t// Load the config files provided in the commandline.\n\tcFiles, _ := f.GetStringSlice(\"conf\")\n\tfor _, c := range cFiles {\n\t\tif err := k.Load(file.Provider(c), toml.Parser()); err != nil {\n\t\t\tlog.Fatalf(\"error loading file: %v\", err)\n\t\t}\n\t}\n\n\t// \"time\" and \"type\" may have been loaded from the config file, but\n\t// they can still be overridden with the values from the command line.\n\t// The bundled posflag.Provider takes a flagset from the spf13/pflag lib.\n\t// Passing the Koanf instance to posflag helps it deal with default command\n\t// line flag values that are not present in conf maps from previously loaded\n\t// providers.\n\tif err := k.Load(posflag.Provider(f, \".\", k), nil); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\tfmt.Println(\"time is = \", k.String(\"time\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental PromQL Function in Grafana Mimir 2.15\nDESCRIPTION: Configuration flags to enable the experimental PromQL function 'double_exponential_smoothing' in the query-frontend and querier components of Grafana Mimir 2.15.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.15.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n-querier.promql-experimental-functions-enabled=true\n-query-frontend.promql-experimental-functions-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Converting Cortex Configuration to Mimir\nDESCRIPTION: Command to convert Cortex configuration to Mimir format using mimirtool.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool config convert --yaml-file cortex.yaml --yaml-out mimir.yaml\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Generated YAML Configuration\nDESCRIPTION: Command to remove unnecessary fields from the converted Mimir configuration using yq.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyq -i 'del(.activity_tracker.filepath,.alertmanager.data_dir,.compactor.data_dir,.frontend_worker.frontend_address,.ingester.ring.tokens_file_path,.ruler.alertmanager_url,.ruler.rule_path,.runtime_config.file)' mimir.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating ManagedIdentityCredential Initialization - Go\nDESCRIPTION: The code demonstrates the change in initializing 'ManagedIdentityCredential', moving from directly passing client ID to using options struct for better clarity and flexibility in defining user-assigned identities.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewManagedIdentityCredential(\"client-id\", nil)\n// or, for a resource ID\nopts := &ManagedIdentityCredentialOptions{ID: ResourceID}\ncred, err := NewManagedIdentityCredential(\"/subscriptions/...\", opts)\n\n// after\nclientID := ClientID(\"7cf7db0d-...\")\nopts := &ManagedIdentityCredentialOptions{ID: clientID}\n// or, for a resource ID\nresID: ResourceID(\"/subscriptions/...\")\nopts := &ManagedIdentityCredentialOptions{ID: resID}\ncred, err := NewManagedIdentityCredential(opts)\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoint for Tenant TSDB Details\nDESCRIPTION: Endpoint to view details about a specific tenant's open TSDB.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nGET /ingester/tsdb/{tenant}\n```\n\n----------------------------------------\n\nTITLE: Copying Mimir Blocks between Google Cloud Storage Buckets\nDESCRIPTION: Example configuration for copying blocks between GCS buckets with configurable copy period and minimum block duration. Includes dry-run option for testing.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/copyblocks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./copyblocks \\\n  --source.backend gcs \\\n  --destination.backend gcs \\\n  --gcs.source.bucket-name <source bucket name> \\\n  --gcs.destination.bucket-name <destination bucket name> \\\n  --copy-period 24h \\\n  --min-block-duration 13h \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Enabling Sharding of Active Series Queries in YAML\nDESCRIPTION: Enables sharding of active series queries using the -query-frontend.shard-active-series-queries CLI flag on query-frontends.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n-query-frontend.shard-active-series-queries: true\n```\n\n----------------------------------------\n\nTITLE: Creating Git Worktree for Version-Specific Mimir Documentation Testing\nDESCRIPTION: This snippet demonstrates how to use git worktree to checkout a specific version branch of Mimir that matches the target Helm chart version. This ensures documentation testing is performed against the correct version.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git worktree add --checkout \"$(git rev-parse --show-toplevel)/../mimir-v2.9.x\" origin/release-2.9\nPreparing worktree (detached HEAD 761114d8b)\nHEAD is now at 761114d8b Bump version to 2.9.0 (#5289)\n```\n\n----------------------------------------\n\nTITLE: Analyzing TSDB Chunks File\nDESCRIPTION: Example of using tsdb-chunks tool to inspect chunks file content and metadata.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntsdb-chunks 01FQKXVKF3QG5WQXSY726KKSBP/chunks/000001 | head\n```\n\n----------------------------------------\n\nTITLE: Specifying Expected Output in fsnotify Test Scripts\nDESCRIPTION: This snippet shows how to specify the expected output in fsnotify test scripts, including platform-specific tests and commenting.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwatch /\ntouch /file\n\nOutput:\n    # Tested if nothing else matches\n    create    /file\n\n    # Windows-specific test.\n    windows:\n        write  /file\n```\n\n----------------------------------------\n\nTITLE: Dashboard Visualization Query in PromQL\nDESCRIPTION: Example query for visualizing histogram data in Grafana dashboard panels.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/visualize/native-histograms/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(rate(request_duration_seconds[$__rate_interval]))\n```\n\n----------------------------------------\n\nTITLE: Client secret authentication with autorest/adal in Go\nDESCRIPTION: This snippet demonstrates client secret authentication using autorest/adal, including setting up the OAuthConfig, creating a ServicePrincipalToken, and configuring a client.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.azure.com/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Accessing Flag Values with pflag\nDESCRIPTION: This example demonstrates how to access the values of parsed flags using pflag. It shows both direct access to flag pointers and access to bound variables.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Enabling UTF-8 Support in Alertmanager in YAML\nDESCRIPTION: Enables support for UTF-8 in Alertmanager using the -alertmanager.utf8-strict-mode-enabled CLI flag. Allows Alertmanager to handle alerts with UTF-8 characters in labels.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n-alertmanager.utf8-strict-mode-enabled: true\n```\n\n----------------------------------------\n\nTITLE: Basic ULID Time Parsing Example\nDESCRIPTION: This example demonstrates the basic usage of the ulidtime tool to parse multiple ULIDs and display their embedded timestamps in ISO 8601 format.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/ulidtime.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ulidtime 01FRCN18HV5B638BKNF4H52JP6 01FRCHB3HX5VBE6HJGSC4NW9DG 01FRCFGMP7TAXD2PTNWVW8RYYC 01FRCJHSJX7PQ38VQFQ2T9EF70\n01FRCN18HV5B638BKNF4H52JP6  2022-01-02T05:43:41.883Z\n01FRCHB3HX5VBE6HJGSC4NW9DG  2022-01-02T04:39:10.141Z\n01FRCFGMP7TAXD2PTNWVW8RYYC  2022-01-02T04:07:14.375Z\n01FRCJHSJX7PQ38VQFQ2T9EF70  2022-01-02T05:00:17.885Z\n```\n\n----------------------------------------\n\nTITLE: Setting Mimir Distributor Remote Timeout\nDESCRIPTION: Command line flag that sets the remote timeout duration for the Mimir distributor component to 15 seconds. This parameter controls how long the distributor waits for remote operations before timing out.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/flags-precedence-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-distributor.remote-timeout=15s\n```\n\n----------------------------------------\n\nTITLE: Using Custom Output Writers with Color\nDESCRIPTION: Demonstrates how to use the color package with custom io.Writer outputs instead of the default standard output.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Use your own io.Writer output\ncolor.New(color.FgBlue).Fprintln(myWriter, \"blue color!\")\n\nblue := color.New(color.FgBlue)\nblue.Fprint(writer, \"This will print text in blue.\")\n```\n\n----------------------------------------\n\nTITLE: Managed identity authentication with autorest/adal in Go\nDESCRIPTION: This snippet demonstrates managed identity authentication using autorest/adal, including creating a ServicePrincipalToken and configuring a client.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\nspt, err := adal.NewServicePrincipalTokenFromManagedIdentity(\"https://management.azure.com/\", nil)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Copying Blocks to Mimir Bucket (GCS)\nDESCRIPTION: This bash command copies blocks recursively from an intermediate GCS bucket to the Mimir bucket for a specific tenant. It leverages the `gsutil cp` command with the `-m` (multithreading) and `-r` (recursive) flags for faster copying.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n   gsutil -m cp -r gs://<INTERMEDIATE-MIMIR-BUCKET> gs://<MIMIR-GCS-BUCKET>/<TENANT>/\n   ```\n```\n\n----------------------------------------\n\nTITLE: Zone-Aware YAML Configuration Example\nDESCRIPTION: Sample YAML front matter configuration for the documentation page showing metadata and navigation properties.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-zone-aware-replication.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n  - ../configuring/configuring-zone-aware-replication/\n  - configuring-zone-aware-replication/\n  - ../operators-guide/configure/configure-zone-aware-replication/\ndescription: Learn how to replicate data across failure domains.\nmenuTitle: Zone-aware replication\ntitle: Configure Grafana Mimir zone-aware replication\nweight: 110\n```\n\n----------------------------------------\n\nTITLE: Logger Interface Definition in Go\nDESCRIPTION: The core Logger interface definition from the Go-kit logging package, showing the minimal interface required for structured logging.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Logger interface {\n\tLog(keyvals ...interface{}) error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Anti-Affinity for Ingester and Store Gateway in Kubernetes YAML\nDESCRIPTION: YAML configuration to reintroduce pod anti-affinity rules for the ingester and store-gateway components in Mimir. This ensures proper distribution of pods across nodes for high availability.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n         - labelSelector:\n             matchExpressions:\n               - key: target\n                 operator: In\n                 values:\n                   - ingester\n           topologyKey: 'kubernetes.io/hostname'\n         - labelSelector:\n             matchExpressions:\n               - key: app.kubernetes.io/component\n                 operator: In\n                 values:\n                   - ingester\n           topologyKey: 'kubernetes.io/hostname'\nstore_gateway:\n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n         - labelSelector:\n             matchExpressions:\n               - key: target\n                 operator: In\n                 values:\n                   - store-gateway\n           topologyKey: 'kubernetes.io/hostname'\n         - labelSelector:\n             matchExpressions:\n               - key: app.kubernetes.io/component\n                 operator: In\n                 values:\n                   - store-gateway\n           topologyKey: 'kubernetes.io/hostname'\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure library using Go Get\nDESCRIPTION: Command to install the copystructure library using Go's package manager. This installs the library from the GitHub repository maintained by mitchellh.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mitchellh/copystructure/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Installing Go Version Library\nDESCRIPTION: Shows how to install the go-version library using the 'go get' command in a terminal. It includes the command line for obtaining the library, emphasizing its simplicity.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n$ go get github.com/hashicorp/go-version\n```\n\n----------------------------------------\n\nTITLE: Buffer-based Decompression with Zstandard in Go\nDESCRIPTION: Example showing how to decompress Zstandard data from a byte slice. Creates a reusable decoder with caching that can efficiently decompress multiple byte slices concurrently.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Device code authentication with azidentity in Go\nDESCRIPTION: This snippet shows device code authentication using azidentity, including creating a DeviceCodeCredential and configuring a client.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewDeviceCodeCredential(nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewSubscriptionsClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Display Alertmanager UI\nDESCRIPTION: Provides access to the Alertmanager UI for browsing via HTTP GET. Authentication is mandatory. This endpoint is tied to the defined prefix and configurable per deployment.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_44\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /<alertmanager-http-prefix>\n```\n\n----------------------------------------\n\nTITLE: Formatting Float Numbers Nicely - Go\nDESCRIPTION: This snippet utilizes the `humanize.Ftoa` function to format float64 values by removing trailing zeros for a more elegant presentation. This is helpful when displaying numeric values where precision is not a priority.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"%f\", 2.24)                // 2.240000\nfmt.Printf(\"%s\", humanize.Ftoa(2.24)) // 2.24\nfmt.Printf(\"%f\", 2.0)                 // 2.000000\nfmt.Printf(\"%s\", humanize.Ftoa(2.0))  // 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Structured Mimir Configuration (YAML)\nDESCRIPTION: Example of using the new 'mimir.structuredConfig' value to modify Mimir configuration after template evaluation. This allows altering individual values in the configuration using structured YAML instead of text.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    ingester:\n      ring:\n        instance-availability-zone: \"zone-default\"\n    blocks_storage:\n      bucket_store:\n        chunks_cache:\n          memcached:\n            timeout: 450ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Activity Tracker\nDESCRIPTION: Configuration block for the activity tracker component. Defines the file path for storing ongoing activities and the maximum number of concurrent activities that can be tracked.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nactivity_tracker:\n  # File where ongoing activities are stored. If empty, activity tracking is\n  # disabled.\n  # CLI flag: -activity-tracker.filepath\n  [filepath: <string> | default = \"./metrics-activity.log\"]\n\n  # (advanced) Max number of concurrent activities that can be tracked. Used to\n  # size the file in advance. Additional activities are ignored.\n  # CLI flag: -activity-tracker.max-entries\n  [max_entries: <int> | default = 1024]\n```\n\n----------------------------------------\n\nTITLE: Running Load Test in k6 Cloud\nDESCRIPTION: Command to execute the load test using k6 cloud infrastructure.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/k6/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nk6 cloud load-testing-with-k6.js\n```\n\n----------------------------------------\n\nTITLE: Building Mimir Docker Image for Integration Tests\nDESCRIPTION: Command to build the grafana/mimir:latest Docker image required for running integration tests locally. This step is necessary before running the tests.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-integration-tests-work.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake ./cmd/mimir/.uptodate\n```\n\n----------------------------------------\n\nTITLE: Creating TracerProvider in Go\nDESCRIPTION: This snippet shows the usage of `NewTracerProvider` from `go.opentelemetry.io/otel/bridge/opentracing`. This creates a `WrapperTracer` instance from a `TracerProvider`.  This enables the use of OpenTelemetry `TracerProvider` instances within an OpenTracing context, facilitating interoperability between the two tracing frameworks.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Alertmanager Client TLS Server Name\nDESCRIPTION: This option allows overriding the expected server name in the server's certificate. This is useful in cases where the certificate's subject name or subject alternative names do not match the actual hostname.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_93\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Override the expected name on the server certificate.\n  # CLI flag: -alertmanager.alertmanager-client.tls-server-name\n  [tls_server_name: <string> | default = \"\"]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Structured Config Example\nDESCRIPTION: Example YAML configuration showing how to set structured configuration in Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    ingester:\n      ring:\n        num_tokens: 512\n```\n\n----------------------------------------\n\nTITLE: Configuring Conntrack Dialer for HTTP DefaultClient in Go\nDESCRIPTION: Sets up connection tracking for the default HTTP transport by replacing the DialContext function with a conntrack-enabled version. This enables tracing and monitoring of outbound HTTP connections with custom timeout and keepalive settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttp.DefaultTransport.(*http.Transport).DialContext = conntrack.NewDialContextFunc(\n    conntrack.DialWithTracing(),\n    conntrack.DialWithDialer(&net.Dialer{\n        Timeout:   30 * time.Second,\n        KeepAlive: 30 * time.Second,\n    }),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Context\nDESCRIPTION: Commands to set up the correct Kubernetes context and namespace for the demo environment.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/configurations/grafanacon-2022/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config use-context docker-desktop\nkubectl config set-context docker-desktop --namespace=default\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Read Address\nDESCRIPTION: Template section that sets up the Grafana data source URL for Prometheus, including both ingress and in-cluster access configurations\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/templates/NOTES.txt#2025-04-17_snippet_2\n\nLANGUAGE: helm\nCODE:\n```\n{{ with $gateway.ingress -}}\n{{- if .enabled -}}\nFrom outside the cluster via ingress:\n{{ range .hosts }}  http{{ if .tls }}s{{ end }}://{{ .host }}{{ template \"mimir.prometheusHttpPrefix\" $ }}\n{{ end }}\n{{- else -}}\nIngress is not enabled, see the {{ if eq (include \"mimir.gateway.isEnabled\" $) \"true\" }}gateway{{ else }}nginx{{ end }}.ingress values.\n{{- end -}}\n{{- end }}\nFrom inside the cluster:\n  {{ include \"mimir.gatewayUrl\" $ }}{{ template \"mimir.prometheusHttpPrefix\" $ }}\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling and Marshalling YAML Data in Go\nDESCRIPTION: This example demonstrates how to unmarshal and marshal YAML data using the go-yaml library in Go. The code shows how to define a Go struct to map the YAML contents and use the Unmarshal and Marshal methods to convert between YAML and Go data structures. Dependencies include the 'gopkg.in/yaml.v3' package which needs to be imported. The code takes a YAML string as input and outputs the corresponding Go struct and map representations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/yaml/goyaml.v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Per-Tenant Metric Relabeling in YAML\nDESCRIPTION: Forcefully disables metric relabeling on a per-tenant basis using the -distributor.metric-relabeling-enabled CLI flag on rulers. Metric relabeling is enabled by default.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n-distributor.metric-relabeling-enabled: false\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Secret using kubectl\nDESCRIPTION: Applies the previously created Secret to the Kubernetes cluster in the 'federation-frontend-demo' namespace using the kubectl command.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-gem-federation-frontend.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n federation-frontend-demo apply -f mysecret.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Prometheus Contributions in Bash\nDESCRIPTION: This command runs the test suite to ensure all tests pass before committing and pushing changes to the Prometheus project.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: Fixing Field Casing for SignedOID and SignedTID in Azure SDK\nDESCRIPTION: YAML directive that corrects the casing of SignedOid and SignedTid to SignedOID and SignedTID respectively in the zz_models.go file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >\n    return $.\n      replace(/SignedOid\\s+\\*string/g, `SignedOID *string`).\n      replace(/SignedTid\\s+\\*string/g, `SignedTID *string`);\n```\n\n----------------------------------------\n\nTITLE: Complete Struct Merging Example in Go\nDESCRIPTION: A full example showing how Mergo merges two structs, preserving the non-zero value in the destination struct while copying the zero-value field from the source.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/imdario/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mimir with Default Configuration\nDESCRIPTION: This code demonstrates how to install Grafana Mimir using the default configuration, which will start Mimir in standalone mode.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/puppet/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: puppet\nCODE:\n```\nclass{'mimir': }\n```\n\n----------------------------------------\n\nTITLE: Installing LZ4 Package in Go\nDESCRIPTION: Command to install the LZ4 package using Go package manager.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/pierrec/lz4/v4\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Cache Errors Configuration\nDESCRIPTION: Determines whether to cache non-transient errors from queries in the query-frontend.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Cache non-transient errors from queries.\\n# CLI flag: -query-frontend.cache-errors\\n[cache_errors: <boolean> | default = false]\"\n```\n\n----------------------------------------\n\nTITLE: Verbose Error Printing\nDESCRIPTION: Demonstrates how to print verbose error messages using the errors package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(errors.Verbose(err))\n```\n\n----------------------------------------\n\nTITLE: Usage Options for Grafana Mimir Tenant Injector CLI\nDESCRIPTION: Command-line options for configuring the tenant injector, including local address, remote address, and tenant ID settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/tenant-injector.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage of tenant-injector:\n  -local-address string\n    \tLocal address to listen on (host:port or :port). (default \":8080\")\n  -remote-address string\n    \tURL of target to forward requests to to (eg. http://domain.com:80).\n  -tenant-id string\n    \tTenant ID to inject to proxied requests.\n```\n\n----------------------------------------\n\nTITLE: Declaring Afero Backends in Go\nDESCRIPTION: Examples of declaring Afero backends using NewMemMapFs() and NewOsFs().\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar AppFs = afero.NewMemMapFs()\n\nor\n\nvar AppFs = afero.NewOsFs()\n```\n\n----------------------------------------\n\nTITLE: Benchmarking ULID Operations in Go\nDESCRIPTION: This code snippet shows benchmark results for various ULID operations including creation, parsing, marshaling, and comparison. The benchmarks were run on an Intel Core i7 Ivy Bridge 2.7 GHz, MacOS 10.12.1, and Go 1.8.0beta1.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkNew/WithCryptoEntropy-8      2000000        771 ns/op      20.73 MB/s   16 B/op   1 allocs/op\nBenchmarkNew/WithEntropy-8            20000000      65.8 ns/op     243.01 MB/s   16 B/op   1 allocs/op\nBenchmarkNew/WithoutEntropy-8         50000000      30.0 ns/op     534.06 MB/s   16 B/op   1 allocs/op\nBenchmarkMustNew/WithCryptoEntropy-8  2000000        781 ns/op      20.48 MB/s   16 B/op   1 allocs/op\nBenchmarkMustNew/WithEntropy-8        20000000      70.0 ns/op     228.51 MB/s   16 B/op   1 allocs/op\nBenchmarkMustNew/WithoutEntropy-8     50000000      34.6 ns/op     462.98 MB/s   16 B/op   1 allocs/op\nBenchmarkParse-8                      50000000      30.0 ns/op     866.16 MB/s    0 B/op   0 allocs/op\nBenchmarkMustParse-8                  50000000      35.2 ns/op     738.94 MB/s    0 B/op   0 allocs/op\nBenchmarkString-8                     20000000      64.9 ns/op     246.40 MB/s   32 B/op   1 allocs/op\nBenchmarkMarshal/Text-8               20000000      55.8 ns/op     286.84 MB/s   32 B/op   1 allocs/op\nBenchmarkMarshal/TextTo-8             100000000     22.4 ns/op     714.91 MB/s    0 B/op   0 allocs/op\nBenchmarkMarshal/Binary-8             300000000     4.02 ns/op    3981.77 MB/s    0 B/op   0 allocs/op\nBenchmarkMarshal/BinaryTo-8           2000000000    1.18 ns/op   13551.75 MB/s    0 B/op   0 allocs/op\nBenchmarkUnmarshal/Text-8             100000000     20.5 ns/op    1265.27 MB/s    0 B/op   0 allocs/op\nBenchmarkUnmarshal/Binary-8           300000000     4.94 ns/op    3240.01 MB/s    0 B/op   0 allocs/op\nBenchmarkNow-8                        100000000     15.1 ns/op     528.09 MB/s    0 B/op   0 allocs/op\nBenchmarkTimestamp-8                  2000000000    0.29 ns/op   27271.59 MB/s    0 B/op   0 allocs/op\nBenchmarkTime-8                       2000000000    0.58 ns/op   13717.80 MB/s    0 B/op   0 allocs/op\nBenchmarkSetTime-8                    2000000000    0.89 ns/op    9023.95 MB/s    0 B/op   0 allocs/op\nBenchmarkEntropy-8                    200000000     7.62 ns/op    1311.66 MB/s    0 B/op   0 allocs/op\nBenchmarkSetEntropy-8                 2000000000    0.88 ns/op   11376.54 MB/s    0 B/op   0 allocs/op\nBenchmarkCompare-8                    200000000     7.34 ns/op    4359.23 MB/s    0 B/op   0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Accessing Pprof Endpoints in Grafana Mimir\nDESCRIPTION: These endpoints return runtime profiling data in the format expected by the pprof visualization tool. They provide profiling for various aspects including heap, trace, goroutine, and mutex.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nGET /debug/pprof/heap\nGET /debug/pprof/block\nGET /debug/pprof/profile\nGET /debug/pprof/trace\nGET /debug/pprof/goroutine\nGET /debug/pprof/mutex\n```\n\n----------------------------------------\n\nTITLE: Dumping Remote-Read Data from Grafana Mimir\nDESCRIPTION: This snippet shows how to use the mimirtool remote-read dump command to print all series and samples matching a specific selector from a Grafana Mimir cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool remote-read dump --selector 'up{job=\"node\"}' --address http://demo.robustperception.io:9090 --remote-read-path /api/v1/read\n```\n\nLANGUAGE: console\nCODE:\n```\n{__name__=\"up\", instance=\"demo.robustperception.io:9100\", job=\"node\"} 1 1609336914711\n{__name__=\"up\", instance=\"demo.robustperception.io:9100\", job=\"node\"} NaN 1609336924709 # StaleNaN\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching Tenant Statistics in Grafana Mimir Distributor\nDESCRIPTION: This endpoint displays a web page showing per-tenant statistics updated in real time, including the total number of active series and current ingestion rate.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /distributor/all_user_stats\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Go Consul Client\nDESCRIPTION: This snippet illustrates the expected output of the Go program when it is run successfully, displaying the stored key-value pair.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nKV: REDIS_MAXCLIENTS 1000\n```\n\n----------------------------------------\n\nTITLE: Copying Thanos Blocks to Intermediate Bucket with AWS S3\nDESCRIPTION: Command to copy TSDB blocks from Thanos bucket to an intermediate Mimir bucket using AWS CLI. This is the first step in the migration process, transferring all blocks to a workspace where they can be processed.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws s3 cp --recursive s3://<THANOS-BUCKET> s3://<INTERMEDIATE-MIMIR-BUCKET>/\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path for Semantic Versioning in Go\nDESCRIPTION: This snippet demonstrates how to include version information in the module path for Go packages using semantic versioning. It's used for versions v2 and higher, following Go's semantic import versioning guidelines.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/auto/sdk/VERSIONING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Any `v2` or higher version of this module will be included as a `/vN` at the end of the module path used in `go.mod` files and in the package import path.\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Backend in Grafana Mimir\nDESCRIPTION: YAML configuration for the Redis-based caching backend in Grafana Mimir. This includes connection parameters, authentication settings, and performance tuning options. Note that most of these settings are marked as deprecated.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_144\n\nLANGUAGE: yaml\nCODE:\n```\n# (deprecated) Redis Server or Cluster configuration endpoint to use for\n# caching. A comma-separated list of endpoints for Redis Cluster or Redis\n# Sentinel.\n# CLI flag: -<prefix>.redis.endpoint\n[endpoint: <string> | default = \"\"]\n\n# (deprecated) Username to use when connecting to Redis.\n# CLI flag: -<prefix>.redis.username\n[username: <string> | default = \"\"]\n\n# (deprecated) Password to use when connecting to Redis.\n# CLI flag: -<prefix>.redis.password\n[password: <string> | default = \"\"]\n\n# (deprecated) Database index.\n# CLI flag: -<prefix>.redis.db\n[db: <int> | default = 0]\n\n# (deprecated) Redis Sentinel master name. An empty string for Redis Server or\n# Redis Cluster.\n# CLI flag: -<prefix>.redis.master-name\n[master_name: <string> | default = \"\"]\n\n# (deprecated) Client dial timeout.\n# CLI flag: -<prefix>.redis.dial-timeout\n[dial_timeout: <duration> | default = 5s]\n\n# (deprecated) Client read timeout.\n# CLI flag: -<prefix>.redis.read-timeout\n[read_timeout: <duration> | default = 3s]\n\n# (deprecated) Client write timeout.\n# CLI flag: -<prefix>.redis.write-timeout\n[write_timeout: <duration> | default = 3s]\n\n# (deprecated) Maximum number of connections in the pool.\n# CLI flag: -<prefix>.redis.connection-pool-size\n[connection_pool_size: <int> | default = 100]\n\n# (deprecated) Maximum duration to wait to get a connection from pool.\n# CLI flag: -<prefix>.redis.connection-pool-timeout\n[connection_pool_timeout: <duration> | default = 4s]\n\n# (deprecated) Minimum number of idle connections.\n# CLI flag: -<prefix>.redis.min-idle-connections\n[min_idle_connections: <int> | default = 10]\n\n# (deprecated) Amount of time after which client closes idle connections.\n# CLI flag: -<prefix>.redis.idle-timeout\n[idle_timeout: <duration> | default = 5m]\n\n# (deprecated) Close connections older than this duration. If the value is zero,\n# then the pool does not close connections based on age.\n# CLI flag: -<prefix>.redis.max-connection-age\n[max_connection_age: <duration> | default = 0s]\n\n# (deprecated) The maximum size of an item stored in Redis. Bigger items are not\n# stored. If set to 0, no maximum size is enforced.\n# CLI flag: -<prefix>.redis.max-item-size\n[max_item_size: <int> | default = 16777216]\n\n# (deprecated) The maximum number of concurrent asynchronous operations can\n# occur.\n# CLI flag: -<prefix>.redis.max-async-concurrency\n[max_async_concurrency: <int> | default = 50]\n\n# (deprecated) The maximum number of enqueued asynchronous operations allowed.\n```\n\n----------------------------------------\n\nTITLE: k6 Cloud Authentication\nDESCRIPTION: Command template for authenticating k6 CLI with k6 cloud service.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/k6/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nk6 login cloud -t <token>\n```\n\n----------------------------------------\n\nTITLE: Installing xk6 Module for k6 Extension Support\nDESCRIPTION: Command to install xk6, which is required for building k6 with additional modules.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/k6/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo install go.k6.io/xk6/cmd/xk6@latest\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests and Build for minio-go Project\nDESCRIPTION: Commands to run Go tests with race condition checking and build the project. Includes a note about setting AWS S3 account credentials as environment variables for functional tests.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race ./...\ngo build\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Release Tags in Git\nDESCRIPTION: Commands to set up GPG environment, create a signed git tag for a new release version, and push the changes to remote repository. Requires access to MinIO's trusted private key.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/MAINTAINERS.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ export GNUPGHOME=/media/${USER}/minio/trusted\n$ git tag -s 4.0.0\n$ git push\n$ git push --tags\n```\n\n----------------------------------------\n\nTITLE: Alertmanager UTF-8 Migration Logging\nDESCRIPTION: This setting enables logging of tenant configurations that are incompatible with UTF-8 strict mode, helping with migration efforts.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_105\n\nLANGUAGE: yaml\nCODE:\n```\n# (experimental) Enable logging of tenant configurations that are incompatible\n# with UTF-8 strict mode.\n# CLI flag: -alertmanager.utf8-migration-logging-enabled\n[utf8_migration_logging: <boolean> | default = false]\n\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Secret with kubectl\nDESCRIPTION: Command to apply the previously created secret manifest to the Kubernetes cluster in the mimir-test namespace.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n mimir-test apply -f mysecret.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Service Discovery Interface in Go\nDESCRIPTION: The core interface definition for implementing service discovery in Prometheus. Defines the Discoverer interface that all SD mechanisms must implement with a Run method that takes a context and channel for target groups.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Discoverer interface {\n\tRun(ctx context.Context, up chan<- []*targetgroup.Group)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Build Error for Undefined Accessor Symbols in Go\nDESCRIPTION: This code snippet shows a build error that occurs when cgo is not enabled while building for macOS. The error indicates undefined 'accessor' symbols, which are required for Keychain access.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ GOOS=darwin go build\n# github.com/Azure/azure-sdk-for-go/sdk/azidentity/cache\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:19: undefined: accessor.New\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:38: undefined: accessor.WithAccount\n```\n\n----------------------------------------\n\nTITLE: Using RBMutex with Optimistic Locking in Go\nDESCRIPTION: Demonstrates optimistic locking methods available in RBMutex for both reader and writer locks.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmu := xsync.NewRBMutex()\nif locked, t := mu.TryRLock(); locked {\n\t// critical reader section...\n\tmu.RUnlock(t)\n}\nif mu.TryLock() {\n\t// critical writer section...\n\tmu.Unlock()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta to Cumulative Processor in YAML\nDESCRIPTION: Sample configuration for the Delta to Cumulative processor which transforms delta metrics to cumulative metrics by accumulating samples. It allows configuring the maximum staleness duration before removing series and the maximum number of streams to track.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/deltatocumulativeprocessor/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n    deltatocumulative:\n        # how long until a series not receiving new samples is removed\n        [ max_stale: <duration> | default = 5m ]\n \n        # upper limit of streams to track. new streams exceeding this limit\n        # will be dropped\n        [ max_streams: <int> | default = 9223372036854775807 (max int) ]\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Connect Timeout\nDESCRIPTION: This sets the maximum time allowed to establish a connection to the Alertmanager.  A value of 0 uses the default gRPC client connect timeout and backoff behavior.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_97\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) The maximum amount of time to establish a connection. A value of\n  # 0 means default gRPC client connect timeout and backoff.\n  # CLI flag: -alertmanager.alertmanager-client.connect-timeout\n  [connect_timeout: <duration> | default = 5s]\n\n```\n\n----------------------------------------\n\nTITLE: Custom Hash Function for MapOf in Go\nDESCRIPTION: Demonstrates using a custom hash function (Murmur3) with MapOf for better performance when DDOS protection isn't needed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nm := NewMapOfWithHasher[int, int](func(i int, _ uint64) uint64 {\n\th := uint64(i)\n\th = (h ^ (h >> 33)) * 0xff51afd7ed558ccd\n\th = (h ^ (h >> 33)) * 0xc4ceb9fe1a85ec53\n\treturn h ^ (h >> 33)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Events with Event.Has() Method in Go\nDESCRIPTION: Example showing how the Event.Has() method simplifies checking event types compared to using bit operations directly. This makes event checking more readable and less error-prone.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif event.Op&Write == Write && !(event.Op&Remove == Remove) {\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nif event.Has(Write) && !event.Has(Remove) {\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Gateway Configuration with Helm\nDESCRIPTION: Bash command to apply the updated configuration using Helm. This upgrades the existing Mimir release with the new Gateway settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade $RELEASE grafana/mimir-distributed -f custom.yaml\n```\n\n----------------------------------------\n\nTITLE: gRPC Binary Log Sink Implementation\nDESCRIPTION: Implementation of binary logging sink functionality in gRPC, showing buffered and writer sink patterns for handling log entries.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/pooling-buffers-for-grpc-messages.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nbufferedSink {\n  // writes to buffer\n}\n\nwriterSink {\n  // writes directly to writer\n}\n```\n\n----------------------------------------\n\nTITLE: Querier: Streaming Chunks Per Store Gateway Buffer Size Configuration\nDESCRIPTION: Configures the number of series to buffer per store-gateway when streaming chunks from store-gateways. Adjusting this value can impact memory utilization and streaming efficiency.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n\"# (advanced) Number of series to buffer per store-gateway when streaming chunks\\n# from store-gateways.\\n# CLI flag: -querier.streaming-chunks-per-store-gateway-buffer-size\\n[streaming_chunks_per_store_gateway_series_buffer_size: <int> | default = 256]\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking xxhash in Go\nDESCRIPTION: Command for benchmarking the pure Go and assembly implementations of the xxhash Sum64 function using benchstat.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parsers in Kingpin\nDESCRIPTION: This snippet shows how to create custom argument parsers in Kingpin, particularly for handling HTTP header values by implementing the `String` and `Set` methods.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype HTTPHeaderValue http.Header\n\nfunc (h *HTTPHeaderValue) Set(value string) error {\n  parts := strings.SplitN(value, \":\", 2)\n  if len(parts) != 2 {\n    return fmt.Errorf(\"expected HEADER:VALUE got '%s'\", value)\n  }\n  (*http.Header)(h).Add(parts[0], parts[1])\n  return nil\n}\n\nfunc (h *HTTPHeaderValue) String() string {\n  return \"\"\n}\n\nfunc HTTPHeader(s Settings) (target *http.Header) {\n  target = &http.Header{}\n  s.SetValue((*HTTPHeaderValue)(target))\n  return\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Jaeger Client in Go Dependency Management\nDESCRIPTION: Example of how to import the Jaeger client library using a dependency manager like dep with semantic versioning.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[constraint]]\n  name = \"github.com/uber/jaeger-client-go\"\n  version = \"2.17\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Protobufs Using Make Command\nDESCRIPTION: Command to recompile protocol buffers from the project's parent directory. Requires protoc version 3.15.8 to be installed and available in the system PATH.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/prompb/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake proto\n```\n\n----------------------------------------\n\nTITLE: Creating a New Logger with hclog in Go\nDESCRIPTION: This snippet shows how to create a new logger instance using `hclog.New()` with specific options. It configures the logger's name to \"my-app\" and sets the logging level to DEBUG, allowing more verbose output.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"appLogger := hclog.New(&hclog.LoggerOptions{\n\tName:  \\\"my-app\\\",\n\tLevel: hclog.LevelFromString(\\\"DEBUG\\\"),\n})\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Kafka Client with Prometheus Metrics in Go\nDESCRIPTION: This code demonstrates how to create a new kprom.Metrics instance and use it as a hook when initializing a Kafka client. It shows the basic setup required to integrate Prometheus metrics with a Kafka client using the kprom package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/twmb/franz-go/plugin/kprom/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmetrics := kprom.NewMetrics(\"namespace\")\ncl, err := kgo.NewClient(\n\tkgo.WithHooks(metrics),\n\t// ...other opts\n)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking MD5 Performance Comparison (Go)\nDESCRIPTION: Benchmark results comparing performance between standard crypto/md5, 8-lane AVX2, and 16-lane AVX512 implementations. Shows throughput in MB/s and memory allocation metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/md5-simd/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkCryptoMd5-4                     687.66 MB/s           0 B/op          0 allocs/op\nBenchmarkBlock8-4                       4144.80 MB/s           0 B/op          0 allocs/op\nBenchmarkBlock16-4                      8228.88 MB/s           0 B/op          0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Max Async Concurrency for Mimir Query Frontend\nDESCRIPTION: Sets the maximum number of concurrent asynchronous operations the Memcached client can execute when used for the query frontend results cache. This parameter helps control resource utilization and prevent overloading the Memcached instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/renamed-flags-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-query-frontend.results-cache.memcached.max-async-concurrency=45\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication with HttpRouter in Go\nDESCRIPTION: This snippet demonstrates how to implement HTTP Basic Authentication for protected routes in HttpRouter. It creates a wrapper function that checks credentials before passing the request to the original handler, returning a 401 Unauthorized response if authentication fails.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/julienschmidt/httprouter\"\n)\n\nfunc BasicAuth(h httprouter.Handle, requiredUser, requiredPassword string) httprouter.Handle {\n\treturn func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n\t\t// Get the Basic Authentication credentials\n\t\tuser, password, hasAuth := r.BasicAuth()\n\n\t\tif hasAuth && user == requiredUser && password == requiredPassword {\n\t\t\t// Delegate request to the given handle\n\t\t\th(w, r, ps)\n\t\t} else {\n\t\t\t// Request Basic Authentication otherwise\n\t\t\tw.Header().Set(\"WWW-Authenticate\", \"Basic realm=Restricted\")\n\t\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\t}\n\t}\n}\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\tfmt.Fprint(w, \"Not protected!\\n\")\n}\n\nfunc Protected(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\tfmt.Fprint(w, \"Protected!\\n\")\n}\n\nfunc main() {\n\tuser := \"gordon\"\n\tpass := \"secret!\"\n\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/protected/\", BasicAuth(Protected, user, pass))\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Flag Sorting in pflag\nDESCRIPTION: This snippet shows how to disable automatic sorting of flags in help and usage messages when using pflag.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Disabling Traffic for Mimir Migration (YAML)\nDESCRIPTION: YAML configuration to turn off traffic to the Mimir installation by setting nginx and gateway replicas to 0, while maintaining the previous ingester settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    blocks_storage:\n      tsdb:\n        flush_blocks_on_shutdown: true\n    ingester:\n      ring:\n        unregister_on_shutdown: true\n\ningester:\n  zoneAwareReplication:\n    enabled: false\n\nnginx:\n  replicas: 0\ngateway:\n  replicas: 0\n```\n\n----------------------------------------\n\nTITLE: Running Chroma Lexer Tests in Go\nDESCRIPTION: This command runs the test suite for Chroma lexers, validating the output of each lexer against expected results stored in testdata files.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/lexers/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo test ./lexers\n```\n\n----------------------------------------\n\nTITLE: Using Afero Utility Functions in Go\nDESCRIPTION: Example of using Afero's utility functions directly or via the Afero type.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfs := new(afero.MemMapFs)\nf, err := afero.TempFile(fs,\"\", \"ioutil-test\")\n\n```\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewMemMapFs()\nafs := &afero.Afero{Fs: fs}\nf, err := afs.TempFile(\"\", \"ioutil-test\")\n```\n\n----------------------------------------\n\nTITLE: Initiating Alertmanager Migration to Zone-Aware Replication\nDESCRIPTION: YAML configuration to start the migration process for alertmanager to zone-aware replication.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Using Backoff with Jitter in Go\nDESCRIPTION: Shows how to use the Backoff struct with Jitter enabled, which adds randomization to the backoff durations. It includes seeding the random number generator for reproducible results.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jpillora/backoff/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"math/rand\"\n\nb := &backoff.Backoff{\n\tJitter: true,\n}\n\nrand.Seed(42)\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n\nfmt.Printf(\"Reset!\\n\")\nb.Reset()\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n```\n\n----------------------------------------\n\nTITLE: Testing Local Lexers with Go\nDESCRIPTION: This Go command allows testing lexer changes in a local Chroma instance. Executing it provides a link to a web UI for interactive testing.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngo run . --csrf-key=securekey\n```\n\n----------------------------------------\n\nTITLE: Installing uuid Package with Go\nDESCRIPTION: This snippet demonstrates how to install the uuid package in Go using the `go get` command. It is essential for working with UUID functionalities in your Go application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/google/uuid/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Verifying Alert Deduplication in Alertmanager Cluster\nDESCRIPTION: This command checks if alerts in an Alertmanager cluster are properly deduplicated. It's useful when transitioning from Prometheus to Grafana Mimir alert evaluation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alerts verify\n```\n\n----------------------------------------\n\nTITLE: Splitting Blocks from Google Cloud Storage using splitblocks\nDESCRIPTION: Command for splitting blocks stored in Google Cloud Storage. Requires GCS bucket name and output directory path.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/splitblocks/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./splitblocks \\\n  --backend gcs \\\n  --gcs.bucket-name <bucket name> \\\n  --output.dir <directory> \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: In-Order Registration Configuration\nDESCRIPTION: Configuration flag to enable in-order registration of ingesters in the ring.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-spread-minimizing-tokens/index.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n-ingester.ring.spread-minimizing-join-ring-in-order=true\n```\n\n----------------------------------------\n\nTITLE: Setting Up TLS Server with Connection Tracking in Go\nDESCRIPTION: Configures a TLS-enabled HTTP server with connection tracking, tracing, and TCP keepalive. Uses helper functions from the connhelpers package to properly set up TLS configuration with HTTP/2 support.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\nlistener = conntrack.NewListener(listener, \n    conntrack.TrackWithName(\"https\"), \n    conntrack.TrackWithTracing(),\n    conntrack.TrackWithTcpKeepAlive(5 * time.Minutes))\ntlsConfig, err := connhelpers.TlsConfigForServerCerts(*tlsCertFilePath, *tlsKeyFilePath)\ntlsConfig, err = connhelpers.TlsConfigWithHttp2Enabled(tlsConfig)\ntlsListener := tls.NewListener(listener, tlsConfig)\nhttpServer.Serve(listener)\n```\n\n----------------------------------------\n\nTITLE: Copying Blocks to Mimir Bucket (AWS S3)\nDESCRIPTION: This bash command copies blocks recursively from an intermediate S3 bucket to the Mimir bucket for a specific tenant. It leverages the `aws s3 cp` command with the `--recursive` flag.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n   aws s3 cp --recursive s3://<INTERMEDIATE-MIMIR-BUCKET> s3://<MIMIR-AWS-BUCKET>/<TENANT>/\n   ```\n```\n\n----------------------------------------\n\nTITLE: Querier: Shuffle Sharding Ingesters Enabled Configuration\nDESCRIPTION: Determines whether to fetch in-memory series from the minimum set of required ingesters. When enabled, only ingesters which may have received series since `-querier.query-ingesters-within` are selected. If disabled or if `-querier.query-ingesters-within` is 0, all ingesters are queried.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n\"# (advanced) Fetch in-memory series from the minimum set of required ingesters,\\n# selecting only ingesters which may have received series since\\n# -querier.query-ingesters-within. If this setting is false or\\n# -querier.query-ingesters-within is '0', queriers always query all ingesters\\n# (ingesters shuffle sharding on read path is disabled).\\n# CLI flag: -querier.shuffle-sharding-ingesters-enabled\\n[shuffle_sharding_ingesters_enabled: <boolean> | default = true]\"\n```\n\n----------------------------------------\n\nTITLE: Running Lexer Tests in Go\nDESCRIPTION: This shell command executes tests for lexers in the Chroma project using the Go testing framework. It should be run from the root directory after making changes to lexers.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./lexers\n```\n\n----------------------------------------\n\nTITLE: Importing goautoneg Package in Go\nDESCRIPTION: This snippet shows how to import the goautoneg package from a Bitbucket repository. It's used for HTTP Content-Type Autonegotiation in Go applications.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Resolved Mimir Configuration Output\nDESCRIPTION: Example output YAML showing the original resources plus a derived MimirConfig object with resolved configuration parameters and default value annotations.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/compare-helm-with-jsonnet/plugins/resolve-config/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: querier\n  namespace: default\nspec:\n  template:\n    spec:\n      containers:\n        - name: mimir\n          image: grafana/mimir:latest\n          args:\n            - -target=querier\n            - -config.file=/etc/mimir/mimir.yaml\n          volumeMounts:\n            - name: mimir-config\n              mountPath: /etc/mimir\n      volumes:\n        - name: mimir-config\n          configMap:\n            name: config\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config\n  namespace: default\ndata:\n  mimir.yaml: |\n    memberlist:\n      bind_port: 1234\n---\napiVersion: grafana.com/v1alpha1\nkind: MimirConfig\nmetadata:\n  name: querier\n  namespace: default\nconfig:\n  target: querier\n  memberlist:\n    abort_if_cluster_join_fails: false (default)\n    advertise_addr: \" (default)\"\n    advertise_port: 7946 (default)\n    bind_port: 1234\n  # remaining configuration fields omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Basic Metrics Usage in Go\nDESCRIPTION: Demonstrates basic usage of the metrics package including method profiling and configuring a statsite sink. Shows how to measure execution time and emit key-value metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/armon/go-metrics/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc SlowMethod() {\n    // Profiling the runtime of a method\n    defer metrics.MeasureSince([]string{\"SlowMethod\"}, time.Now())\n}\n\n// Configure a statsite sink as the global metrics sink\nsink, _ := metrics.NewStatsiteSink(\"statsite:8125\")\nmetrics.NewGlobal(metrics.DefaultConfig(\"service-name\"), sink)\n\n// Emit a Key/Value pair\nmetrics.EmitKey([]string{\"questions\", \"meaning of life\"}, 42)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Attribute Package in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in Markdown, linking to the documentation for the OpenTelemetry attribute package in Go.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Random Seeking with Custom Index\nDESCRIPTION: Implements random seeking using a custom index. The input stream must support io.Seeker interface for random access.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(true, index)\n\trs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: Basic k6 Load Test Execution\nDESCRIPTION: Simple command to run a small-scale load test against a local Mimir instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/k6/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nk6 run load-testing-with-k6.js -e K6_WRITE_HOSTNAME=\"localhost:80\" -e K6_READ_HOSTNAME=\"localhost:80\"\n```\n\n----------------------------------------\n\nTITLE: Updating DialerFunc Signature in Go MQTT Client\nDESCRIPTION: This snippet demonstrates how to update the signature of a DialerFunc to include a context parameter, which is required in the new version of the MQTT client library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/at-wat/mqtt-go/MIGRATION.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-mqtt.DialerFunc(func() (*mqtt.BaseClient, error) {\n+mqtt.DialerFunc(func(ctx context.Context) (*mqtt.BaseClient, error) {\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: Official text of the Developer's Certificate of Origin (DCO) version 1.1, outlining contribution guidelines and certification requirements for open source project contributions\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Using Counter in Go\nDESCRIPTION: Demonstrates usage of the Counter type, which provides a striped int64 counter inspired by Java's LongAdder for high-contention scenarios.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := xsync.NewCounter()\n// increment and decrement the counter\nc.Inc()\nc.Dec()\n// read the current value\nv := c.Value()\n```\n\n----------------------------------------\n\nTITLE: Sending Remote Write Requests to Grafana Mimir Distributor\nDESCRIPTION: This endpoint is the entrypoint for Prometheus remote write. It accepts a POST request with Protocol Buffers encoded and Snappy compressed data. Authentication is required.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v1/push\n```\n\n----------------------------------------\n\nTITLE: Block Directory Structure Example\nDESCRIPTION: Shows the expected directory structure of a valid block that can be uploaded. Contains chunks directory, index file, and meta.json file.\nSOURCE: https://github.com/grafana/mimir/blob/main/development/tools/upload-block/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ls /path/to/block/01J5240S2R3BE24W8CH4TPTEST\n\nchunks/\nindex\nmeta.json\n```\n\n----------------------------------------\n\nTITLE: Tokenising and Formatting in Go\nDESCRIPTION: This Go snippet demonstrates tokenizing input content and formatting it using the selected style and formatter. It transforms the content read from an input stream into formatted output.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ncontents, err := ioutil.ReadAll(r)\niterator, err := lexer.Tokenise(nil, string(contents))\nerr := formatter.Format(w, style, iterator)\n```\n\n----------------------------------------\n\nTITLE: Advanced Route Matching with Gorilla Mux in Go\nDESCRIPTION: This section of code illustrates advanced route matching in gorilla/mux using domain patterns, subdomains, methods, schemes, headers, and custom matchers. It includes an example of combining matchers for a single route and using subrouters for grouping related routes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"www.example.com\")\nr.Host(\"{subdomain:[a-z]+}.example.com\")\nr.PathPrefix(\"/products/\")\nr.Methods(\"GET\", \"POST\")\nr.Schemes(\"https\")\nr.Headers(\"X-Requested-With\", \"XMLHttpRequest\")\nr.Queries(\"key\", \"value\")\nr.MatcherFunc(func(r *http.Request, rm *RouteMatch) bool {\n    return r.ProtoMajor == 0\n})\nr.HandleFunc(\"/products\", ProductsHandler).\n  Host(\"www.example.com\").\n  Methods(\"GET\").\n  Schemes(\"http\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/specific\", specificHandler)\nr.PathPrefix(\"/\").Handler(catchAllHandler)\n```\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\ns := r.Host(\"www.example.com\").Subrouter()\ns.HandleFunc(\"/products/\", ProductsHandler)\ns.HandleFunc(\"/products/{key}\", ProductHandler)\ns.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\ns := r.PathPrefix(\"/products\").Subrouter()\ns.HandleFunc(\"/\", ProductsHandler)\ns.HandleFunc(\"/{key}/\", ProductHandler)\ns.HandleFunc(\"/{key}/details\", ProductDetailsHandler)\n```\n\n----------------------------------------\n\nTITLE: HTML Escaping in JSON Strings (Go)\nDESCRIPTION: This example highlights the change in HTML escaping within JSON strings. v1 encoded JSON strings with HTML-specific characters being escaped, whereas v2 does not escape any characters unless necessary. This snippet is linked to the `TestEscapeHTML` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\n\"[EscapeHTML](/diff_test.go#:~:text=TestEscapeHTML)\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Versions in Go\nDESCRIPTION: Illustrates sorting of version strings using the go-version library. After converting strings to Version objects, it sorts them using Go's native sort package, ensuring they are ordered correctly according to semantic versioning.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nversionsRaw := []string{\"1.1\", \"0.7.1\", \"1.4-beta\", \"1.4\", \"2\"}\nversions := make([]*version.Version, len(versionsRaw))\nfor i, raw := range versionsRaw {\n    v, _ := version.NewVersion(raw)\n    versions[i] = v\n}\n\n// After this, the versions are properly sorted\nsort.Sort(version.Collection(versions))\n```\n\n----------------------------------------\n\nTITLE: Listing Grafana Mimir Components in Monolithic Mode\nDESCRIPTION: This command runs Grafana Mimir with the -modules flag to display all components that run in monolithic mode when -target is set to 'all'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/deployment-modes/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mimir -modules\n```\n\n----------------------------------------\n\nTITLE: Store-Gateway Zero-Downtime Migration Configurations\nDESCRIPTION: Series of YAML configurations for performing a zero-downtime migration of store-gateways to zone-aware replication.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nstore_gateway:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n\nrollout_operator:\n  enabled: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstore_gateway:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n      readPath: true\n\nrollout_operator:\n  enabled: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstore_gateway:\n  zoneAwareReplication:\n    enabled: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Identity Logging in Go\nDESCRIPTION: Example showing how to enable and configure logging for Azure Identity credentials to help debug authentication issues. The code demonstrates setting up a log listener and filtering for authentication events.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Installing and running mimir-continuous-test as a local binary\nDESCRIPTION: Instructions for downloading the mimir binary for Linux AMD64, making it executable, and running the continuous-test target. This method is useful for users who prefer to run the tool directly on their system.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimir-continuous-test.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lo mimir https://github.com/grafana/mimir/releases/latest/download/mimir-linux-amd64\nchmod +x mimir\nmimir -target=continuous-test\n```\n\n----------------------------------------\n\nTITLE: Using RegexpFs in Afero to Filter Files by Pattern in Go\nDESCRIPTION: Creates a filtered view of the file system where only files matching a specified regular expression are accessible. In this example, only .txt files are allowed, and attempts to create other file types will fail.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewRegexpFs(afero.NewMemMapFs(), regexp.MustCompile(`\\.txt$`))\n_, err := fs.Create(\"/file.html\")\n// err = syscall.ENOENT\n```\n\n----------------------------------------\n\nTITLE: Digest Methods for Streaming Hashing in Go\nDESCRIPTION: Shows the key methods of the Digest type which implements hash.Hash64 interface for streaming hash calculation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Mixed Version Release\nDESCRIPTION: Release combining stable module updates with unstable metric module changes\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\notel: v1.0.1\notel/trace: v1.0.1\notel/metric: v0.15.0\notel/baggage: v1.0.1\notel/sdk/trace: v1.0.1\notel/sdk/metric: v0.15.0\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Backoff Retries\nDESCRIPTION: This configures the maximum number of retry attempts during the backoff process. After reaching this number of retries, the operation fails.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_86\n\nLANGUAGE: yaml\nCODE:\n```\n    # (advanced) Number of times to backoff and retry before failing.\n    # CLI flag: -alertmanager.alertmanager-client.backoff-retries\n    [max_retries: <int> | default = 10]\n\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Compactor Tenants Endpoint\nDESCRIPTION: API endpoint to retrieve a web page listing all tenants with blocks in storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_64\n\nLANGUAGE: http\nCODE:\n```\nGET /compactor/tenants\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands to run tests for the bitset package, including coverage analysis.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n```bash\ngo test\ngo test -cover\n```\n```\n\n----------------------------------------\n\nTITLE: Case Sensitivity in JSON Unmarshaling (Go)\nDESCRIPTION: This example demonstrates the change in behavior regarding case sensitivity when unmarshaling JSON object members into Go structs.  v1 used case-insensitive matching, while v2 uses case-sensitive matching. This snippet is linked to the `TestCaseSensitivity` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n\"[CaseSensitivity](/diff_test.go#:~:text=TestCaseSensitivity)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mimir with Sizing Plan\nDESCRIPTION: This bash snippet demonstrates how to install Grafana Mimir using a specified sizing plan YAML file, which provides the necessary configuration for cluster capacity.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install mimir-prod grafana/mimir-distributed -f ./small.yaml\n```\n\n----------------------------------------\n\nTITLE: Compacting TSDB Blocks\nDESCRIPTION: Example of using tsdb-compact tool to merge multiple blocks with sharding capabilities.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntsdb-compact -output-dir ./out -shard-count=4 01FPCEFXKRREFKH3MHQFXA9S7G 01FQGS1WN6KVX3ZM39SRE88DBS 01FQKXVKF3QG5WQXSY726KKSBP\n```\n\n----------------------------------------\n\nTITLE: Recursive Type Handling for JSON Encoding in Go\nDESCRIPTION: This snippet illustrates how recursive types are handled during JSON encoding in 'go-json' using a specialized opcode that avoids traditional recursive calls, aiming for efficiency in processing.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype T struct {\n    X int\n    U *U\n}\ntype U struct {\n    T *T\n}\nb, err := json.Marshal(&T{\n    X: 1,\n    U: &U{\n        T: &T{\n            X: 2,\n        },\n    },\n})\nfmt.Println(string(b)) // {\"X\":1,\"U\":{\"T\":{\"X\":2,\"U\":null}}}\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Testing\nDESCRIPTION: Extended AWS IAM policy for running e2e tests. Includes additional permissions for bucket creation and deletion.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Statement\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetObject\",\n                \"s3:DeleteObject\",\n                \"s3:PutObject\",\n                \"s3:CreateBucket\",\n                \"s3:DeleteBucket\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::<bucket>/*\",\n                \"arn:aws:s3:::<bucket>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using slog-gokit Adapter in Go\nDESCRIPTION: Example demonstrating how to use the slog-gokit adapter to create an slog Logger that chains log calls to a go-kit Logger. It shows basic usage and how to adjust log levels dynamically.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/tjhop/slog-gokit/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log/slog\"\n\t\"os\"\n\n\t\"github.com/go-kit/log\"\n\tslgk \"github.com/tjhop/slog-gokit\"\n)\n\nfunc main() {\n\t// Take an existing go-kit/log Logger:\n\tgklogger := log.NewLogfmtLogger(os.Stderr)\n\n\t// Create an slog Logger that chains log calls to the go-kit/log Logger:\n\tslogger := slog.New(slgk.NewGoKitHandler(gklogger, nil))\n\tslogger.WithGroup(\"example_group\").With(\"foo\", \"bar\").Info(\"hello world\")\n\n\t// The slog Logger produces logs at slog.LevelInfo by default.\n\t// Optionally create an slog.Leveler to dynamically adjust the level of\n\t// the slog Logger.\n\tlvl := &slog.LevelVar{}\n\tlvl.Set(slog.LevelDebug)\n\tslogger = slog.New(slgk.NewGoKitHandler(gklogger, lvl))\n\tslogger.WithGroup(\"example_group\").With(\"foo\", \"bar\").Info(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Version 0.3.0 in Markdown\nDESCRIPTION: Links to the comparison between version 0.2.3 and 0.3.0 of the compute/metadata package on GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.3.0](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.2.3...compute/metadata/v0.3.0) (2024-04-15)\n```\n\n----------------------------------------\n\nTITLE: View Store-gateway Ring Status\nDESCRIPTION: Displays a web page showing the status of the store-gateway hash ring via an HTTP GET request, providing insights into the state, health, and last heartbeat time of each store-gateway.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /store-gateway/ring\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure CLI Account\nDESCRIPTION: Azure CLI command to verify the currently logged in account details.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz account show\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Key Value Usage\nDESCRIPTION: Examples of key-value pair usage in updated API after package merging.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nkv.BoolValue\nkv.Int64Value\nkv.Uint64Value\nkv.Float64Value\nkv.Int32Value\nkv.Uint32Value\nkv.Float32Value\nkv.StringValue\nkv.IntValue\nkv.UintValue\nkv.ArrayValue\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fprint Functions with Color\nDESCRIPTION: Demonstrates how to create custom fprint functions that write to specific io.Writers with color formatting.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nblue := color.New(color.FgBlue).FprintfFunc()\nblue(myWriter, \"important notice: %s\", stars)\n\n// Mix up with multiple attributes\nsuccess := color.New(color.Bold, color.FgGreen).FprintlnFunc()\nsuccess(myWriter, \"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: MPMCQueue vs Go Channels Benchmark\nDESCRIPTION: Performance comparison between MPMCQueue and Go channels with concurrent producers and consumers\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nQueueProdConsWork100                             252ns ± 0%\nQueueProdConsWork100-2                           206ns ± 5%\nQueueProdConsWork100-4                           136ns ±12%\nQueueProdConsWork100-8                           110ns ± 6%\nQueueProdConsWork100-16                          108ns ± 2%\nQueueProdConsWork100-32                          102ns ± 2%\nQueueProdConsWork100-64                          101ns ± 0%\nChanProdConsWork100                              283ns ± 0%\nChanProdConsWork100-2                            406ns ±21%\nChanProdConsWork100-4                            549ns ± 7%\nChanProdConsWork100-8                            754ns ± 7%\nChanProdConsWork100-16                           828ns ± 7%\nChanProdConsWork100-32                           810ns ± 8%\nChanProdConsWork100-64                           832ns ± 4%\n```\n\n----------------------------------------\n\nTITLE: Managing Dependencies in Prometheus Project with Go Modules\nDESCRIPTION: These commands show how to tidy up the go.mod and go.sum files, and copy new or updated dependencies to the vendor directory in the Prometheus project.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Skipping to Desired Offset\nDESCRIPTION: Demonstrates how to skip forward to reach the exact desired uncompressed offset.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n\terr = dec.Skip(wantOffset - uncompressedOffset)\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog Entries Using Git Log Command\nDESCRIPTION: A git command that formats commit logs for inclusion in the CHANGELOG.md file. It presents each commit with its message and author in a clean format suitable for release notes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/RELEASE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --pretty=format:'- %s -- %an'\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in GCS Bucket (Command Line)\nDESCRIPTION: This shell command demonstrates how to list objects in a Google Cloud Storage (GCS) bucket using the `thanos tools bucket ls` command. It assumes that the `OBJSTORE_CONFIG` environment variable is set to the path of a file containing the object store configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nthanos tools bucket ls --objstore.config=\"${OBJSTORE_CONFIG}\"\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a New Logger for a Subsystem with hclog in Go\nDESCRIPTION: This snippet demonstrates how to create a new logger instance for a specific subsystem using the `Named()` method. It allows grouping logs by subsystem, making it easier to filter and analyze logs from specific parts of the application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"subsystemLogger := appLogger.Named(\\\"transport\\\")\nsubsystemLogger.Info(\\\"we are transporting something\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Example of False Hit in Bitmap Field Lookup\nDESCRIPTION: This snippet demonstrates a case where the bitmap field lookup might produce a false hit. It shows a struct definition where a shorter input string could be mistakenly matched.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype T struct {\n    X int `json:\"abc\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Query Processing Time Utilization with Querier-Worker Queue Prioritization - Mermaid\nDESCRIPTION: This diagram represents query processing time utilization with a prioritization scheme based on querier-worker connections. It contrasts the new system's performance against the previous round-robin method by showing how many queries are processed within a set timeframe.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/scheduler/DESIGN.md#2025-04-17_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Query Processing Time Utilization with Querier-Worker Queue Prioritization\nconfig:\n  gantt:\n    displayMode: compact\n    numberSectionStyles: 2\n  theme: default\n---\ngantt\n    dateFormat ss\n    axisFormat %S\n    tickInterval 1second\n\n    section consumer-1\n        fast        :active, c1-1, 00, 1s\n        fast        :active, c1-2, 01, 1s\n        fast        :active, c1-3, 02, 1s\n        fast        :active, c1-4, 03, 1s\n        fast        :active, c1-5, 04, 1s\n        fast        :active, c1-6, 05, 1s\n        fast        :active, c1-7, 06, 1s\n        fast        :active, c1-8, 07, 1s\n        fast        :active, c1-9, 08, 1s\n        fast        :active, c1-10, 09, 1s\n        fast        :active, c1-11, 10, 1s\n        fast        :active, c1-12, 11, 1s\n        fast        :active, c1-13, 12, 1s\n        fast        :active, c1-14, 13, 1s\n        fast        :active, c1-15, 14, 1s\n        fast        :active, c1-16, 15, 1s\n\n    section consumer-2\n        fast        :active, c2-1, 00, 1s\n        fast        :active, c2-2, 01, 1s\n        fast        :active, c2-3, 02, 1s\n        fast        :active, c2-4, 03, 1s\n        fast        :active, c2-5, 04, 1s\n        fast        :active, c2-6, 05, 1s\n        fast        :active, c2-7, 06, 1s\n        fast        :active, c2-8, 07, 1s\n        fast        :active, c2-9, 08, 1s\n        fast        :active, c2-10, 09, 1s\n        fast        :active, c2-11, 10, 1s\n        fast        :active, c2-12, 11, 1s\n        fast        :active, c2-13, 12, 1s\n        fast        :active, c2-14, 13, 1s\n        fast        :active, c2-15, 14, 1s\n        fast        :active, c2-16, 15, 1s\n\n    section consumer-3\n        slow        :done, c3-1, 00, 8s\n        slow        :done, c3-2, 08, 8s\n\n    section consumer-4\n        slow        :done, c4-1, 00, 8s\n        slow        :done, c4-2, 08, 8s\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX for Distributed Mimir Deployment\nDESCRIPTION: This NGINX configuration sets up a reverse proxy for a distributed Mimir deployment. It defines worker processes, error logging, and connection settings. The HTTP block includes routing rules for various Mimir components such as the distributor, alertmanager, ruler, and query frontend.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-to-mimir-with-thanos-sidecar.md#2025-04-17_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nworker_processes  5;  ## Default: 1\nerror_log  /dev/stderr;\npid        /tmp/nginx.pid;\nworker_rlimit_nofile 8192;\n\nevents {\n  worker_connections  4096;  ## Default: 1024\n}\n\nhttp {\n  client_body_temp_path /tmp/client_temp;\n  proxy_temp_path       /tmp/proxy_temp_path;\n  fastcgi_temp_path     /tmp/fastcgi_temp;\n  uwsgi_temp_path       /tmp/uwsgi_temp;\n  scgi_temp_path        /tmp/scgi_temp;\n\n  default_type application/octet-stream;\n  log_format   main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log   /dev/stderr  main;\n\n  sendfile     on;\n  tcp_nopush   on;\n  resolver kube-dns.kube-system.svc.cluster.local;\n\n  server {\n    listen 8080;\n\n    location = / {\n      return 200 'OK';\n      auth_basic off;\n    }\n\n    # Distributor endpoints\n    location /distributor {\n      proxy_pass      http://mimir-distributed-distributor.mimir.svc.cluster.local:8080$request_uri;\n    }\n    location = /api/v1/push {\n      proxy_pass      http://mimir-distributed-distributor.mimir.svc.cluster.local:8080$request_uri;\n    }\n\n    # Alertmanager endpoints\n    location /alertmanager {\n      proxy_pass      http://mimir-distributed-alertmanager.mimir.svc.cluster.local:8080$request_uri;\n    }\n    location = /multitenant_alertmanager/status {\n      proxy_pass      http://mimir-distributed-alertmanager.mimir.svc.cluster.local:8080$request_uri;\n    }\n    location = /api/v1/alerts {\n      proxy_pass      http://mimir-distributed-alertmanager.mimir.svc.cluster.local:8080$request_uri;\n    }\n\n    # Ruler endpoints\n    location /prometheus/config/v1/rules {\n      proxy_pass      http://mimir-distributed-ruler.mimir.svc.cluster.local:8080$request_uri;\n    }\n    location /prometheus/api/v1/rules {\n      proxy_pass      http://mimir-distributed-ruler.mimir.svc.cluster.local:8080$request_uri;\n    }\n\n    location /api/v1/rules {\n      proxy_pass      http://mimir-distributed-ruler.mimir.svc.cluster.local:8080$request_uri;\n    }\n    location /prometheus/api/v1/alerts {\n      proxy_pass      http://mimir-distributed-ruler.mimir.svc.cluster.local:8080$request_uri;\n    }\n    location /prometheus/rules {\n      proxy_pass      http://mimir-distributed-ruler.mimir.svc.cluster.local:8080$request_uri;\n    }\n    location = /ruler/ring {\n      proxy_pass      http://mimir-distributed-ruler.mimir.svc.cluster.local:8080$request_uri;\n    }\n\n    location /prometheus/api/v1/status/config {\n      add_header Content-Type application/json;\n      return 200 \"{\\\"status\\\":\\\"success\\\",\\\"data\\\":{\\\"yaml\\\": \\\"global:\\n  external_labels:\\n    source: mimir\\\"}}\";\n    }\n\n    location /prometheus/api/v1/status/buildinfo {\n    add_header Content-Type application/json;\n    return 200 \"{\\\"status\\\":\\\"success\\\",\\\"data\\\":{\\\"version\\\":\\\"2.35.0\\\",\\\"revision\\\":\\\"6656cd29fe6ac92bab91ecec0fe162ef0f187654\\\",\\\"branch\\\":\\\"HEAD\\\",\\\"buildUser\\\":\\\"root@cf6852b14d68\\\",\\\"buildDate\\\":\\\"20220421-09:53:42\\\",\\\"goVersion\\\":\\\"go1.18.1\\\"}}\";\n    }\n\n\n\n    # Rest of /prometheus goes to the query frontend\n    location /prometheus {\n      proxy_pass      http://mimir-distributed-query-frontend.mimir.svc.cluster.local:8080$request_uri;\n    }\n\n    # Buildinfo endpoint can go to any component\n    location = /api/v1/status/buildinfo {\n      proxy_pass      http://mimir-distributed-query-frontend.mimir.svc.cluster.local:8080$request_uri;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from Structs with Koanf in Go\nDESCRIPTION: This snippet shows how to use the structs provider in Koanf to load configuration data from a Go struct. It demonstrates defining a nested struct and loading its values into Koanf.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/providers/structs\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\ntype parentStruct struct {\n\tName   string      `koanf:\"name\"`\n\tID     int         `koanf:\"id\"`\n\tChild1 childStruct `koanf:\"child1\"`\n}\ntype childStruct struct {\n\tName        string            `koanf:\"name\"`\n\tType        string            `koanf:\"type\"`\n\tEmpty       map[string]string `koanf:\"empty\"`\n\tGrandchild1 grandchildStruct  `koanf:\"grandchild1\"`\n}\ntype grandchildStruct struct {\n\tIds []int `koanf:\"ids\"`\n\tOn  bool  `koanf:\"on\"`\n}\ntype sampleStruct struct {\n\tType    string            `koanf:\"type\"`\n\tEmpty   map[string]string `koanf:\"empty\"`\n\tParent1 parentStruct      `koanf:\"parent1\"`\n}\n\nfunc main() {\n\t// Load default values using the structs provider.\n\t// We provide a struct along with the struct tag `koanf` to the\n\t// provider.\n\tk.Load(structs.Provider(sampleStruct{\n\t\tType:  \"json\",\n\t\tEmpty: make(map[string]string),\n\t\tParent1: parentStruct{\n\t\t\tName: \"parent1\",\n\t\t\tID:   1234,\n\t\t\tChild1: childStruct{\n\t\t\t\tName:  \"child1\",\n\t\t\t\tType:  \"json\",\n\t\t\t\tEmpty: make(map[string]string),\n\t\t\t\tGrandchild1: grandchildStruct{\n\t\t\t\t\tIds: []int{1, 2, 3},\n\t\t\t\t\tOn:  true,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}, \"koanf\"), nil)\n\n\tfmt.Printf(\"name is = `%s`\\n\", k.String(\"parent1.child1.name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Go-wordwrap Package\nDESCRIPTION: Demonstrates how to use the WrapString function from the wordwrap package to wrap a string at a specified line length. This example wraps the string \"foo bar baz\" with a line length of 3 characters.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nwrapped := wordwrap.WrapString(\"foo bar baz\", 3)\nfmt.Println(wrapped)\n```\n\n----------------------------------------\n\nTITLE: Printing TSDB Chunk Data\nDESCRIPTION: Demonstration of tsdb-print-chunk tool to display sample values and timestamps from specific chunks in a TSDB block.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntsdb-print-chunk ./01FTT67BBYH23T8870BBF77YZX 8 1574\n```\n\n----------------------------------------\n\nTITLE: Generating Static Filesystem Code with vfsgen in Go\nDESCRIPTION: Example of using vfsgen.Generate to create a static implementation of an http.FileSystem.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/shurcooL/vfsgen/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := vfsgen.Generate(fs, vfsgen.Options{})\nif err != nil {\n\tlog.Fatalln(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Readiness in Grafana Mimir\nDESCRIPTION: This endpoint returns 200 when Grafana Mimir is ready to serve traffic.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /ready\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Cluster Validation Label\nDESCRIPTION: This experimental setting optionally defines a label used for cluster validation.  It allows identifying and validating nodes within a cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_100\n\nLANGUAGE: yaml\nCODE:\n```\n  cluster_validation:\n    # (experimental) Optionally define the cluster validation label.\n    # CLI flag: -alertmanager.alertmanager-client.cluster-validation.label\n    [label: <string> | default = \"\"]\n\n```\n\n----------------------------------------\n\nTITLE: Checking Library Version in API File\nDESCRIPTION: Command to grep the current library version from api.go file to verify version information.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/MAINTAINERS.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ grep libraryVersion api.go\n      libraryVersion = \"4.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Connection Interceptors in Go\nDESCRIPTION: Configuration code showing the setup of gRPC connection with various interceptors including instrumentation, tracing, user header handling, and backoff retry functionality.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/pooling-buffers-for-grpc-messages.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngrpcclient.Instrument(\n  otgrpc.OpenTracingClientInterceptor(opentracing.GlobalTracer()),\n  middleware.ClientUserHeaderInterceptor,\n  middleware.UnaryClientInstrumentInterceptor(requestDuration)\n)\n```\n\n----------------------------------------\n\nTITLE: Returning Not Found Status in Go gRPC\nDESCRIPTION: This snippet demonstrates how to return a 'Not Found' error using the gRPC status package in Go. It uses the standard status.Error method to create an error with the code 'NotFound' and a descriptive message.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gogo/status/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreturn status.Error(codes.NotFound, \"no such user\")\n```\n\n----------------------------------------\n\nTITLE: Fixing URL Encoding for Azure Storage by Replacing Plus Signs\nDESCRIPTION: YAML directive that modifies URL encoding to replace '+' signs with '%20' in service and container clients, as the '+' character disrupts encoding with the Azure service.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_service_client.go\n  - zz_container_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/req.Raw\\(\\).URL.RawQuery \\= reqQP.Encode\\(\\)/g, `req.Raw().URL.RawQuery = strings.Replace(reqQP.Encode(), \"+\", \"%20\", -1)`);\n```\n\n----------------------------------------\n\nTITLE: Efficient Data Slicing in Protocol Decoding\nDESCRIPTION: Example showing the recommended approach for handling protocol data slices without unnecessary copying.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/google/gopacket/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype MyProtocol struct {\n  A, B net.IP\n}\nfunc decodeMyProtocol(data []byte, p gopacket.PacketBuilder) error {\n  p.AddLayer(&MyProtocol{\n    A: data[:4],\n    B: data[4:8],\n  })\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Blocks from Local Filesystem using splitblocks\nDESCRIPTION: Command for splitting blocks stored in a local filesystem. Uses filesystem backend and requires source and output directory paths.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/splitblocks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./splitblocks \\\n  --backend filesystem \\\n  --filesystem.dir <directory> \\\n  --output.dir <directory> \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Displaying TSDB Series with Chunk Metadata\nDESCRIPTION: Example showing how to list series with detailed chunk metadata using tsdb-series tool with both -select and -show-chunks options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsdb-series -select 'up{instance=\"compactor:8006\"}' -show-chunks ./01FTT67BBYH23T8870BBF77YZX\n```\n\n----------------------------------------\n\nTITLE: Calling C Functions with purego in Go\nDESCRIPTION: This code snippet illustrates how to use the purego library to dynamically load a system C library and call a C function from Go on macOS and Linux. The example demonstrates the use of purego's Dlopen and RegisterLibFunc functions. Prior to running the code, ensure the purego dependency is installed and set CGO_ENABLED=0 for execution.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/ebitengine/purego/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\n\t\"github.com/ebitengine/purego\"\n)\n\nfunc getSystemLibrary() string {\n\tswitch runtime.GOOS {\n\tcase \"darwin\":\n\t\treturn \"/usr/lib/libSystem.B.dylib\"\n\tcase \"linux\":\n\t\treturn \"libc.so.6\"\n\tdefault:\n\t\tpanic(fmt.Errorf(\"GOOS=%s is not supported\", runtime.GOOS))\n\t}\n}\n\nfunc main() {\n\tlibc, err := purego.Dlopen(getSystemLibrary(), purego.RTLD_NOW|purego.RTLD_GLOBAL)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar puts func(string)\n\tpurego.RegisterLibFunc(&puts, libc, \"puts\")\n\tputs(\"Calling C from Go without Cgo!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PROXY Protocol Client in Go\nDESCRIPTION: Example of a Go client using the go-proxyproto library to create and send a PROXY protocol header before sending data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pires/go-proxyproto/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\n\tproxyproto \"github.com/pires/go-proxyproto\"\n)\n\nfunc chkErr(err error) {\n\tif err != nil {\n\t\tlog.Fatalf(\"Error: %s\", err.Error())\n\t}\n}\n\nfunc main() {\n\t// Dial some proxy listener e.g. https://github.com/mailgun/proxyproto\n\ttarget, err := net.ResolveTCPAddr(\"tcp\", \"127.0.0.1:2319\")\n\tchkErr(err)\n\n\tconn, err := net.DialTCP(\"tcp\", nil, target)\n\tchkErr(err)\n\n\tdefer conn.Close()\n\n\t// Create a proxyprotocol header or use HeaderProxyFromAddrs() if you\n\t// have two conn's\n\theader := &proxyproto.Header{\n\t\tVersion:            1,\n\t\tCommand:            proxyproto.PROXY,\n\t\tTransportProtocol:  proxyproto.TCPv4,\n\t\tSourceAddr: &net.TCPAddr{\n\t\t\tIP:   net.ParseIP(\"10.1.1.1\"),\n\t\t\tPort: 1000,\n\t\t},\n\t\tDestinationAddr: &net.TCPAddr{\n\t\t\tIP:   net.ParseIP(\"20.2.2.2\"),\n\t\t\tPort: 2000,\n\t\t},\n\t}\n\t// After the connection was created write the proxy headers first\n\t_, err = header.WriteTo(conn)\n\tchkErr(err)\n\t// Then your data... e.g.:\n\t_, err = io.WriteString(conn, \"HELO\")\n\tchkErr(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Deprecated CreateHeaderRaw in zip Package\nDESCRIPTION: This snippet shows an update to the zip package, replacing the deprecated CreateHeaderRaw function with CreateRaw. It's part of the changes in version 1.14.4.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nzip: Update deprecated CreateHeaderRaw to correctly call CreateRaw by @saracen in [#502](https://github.com/klauspost/compress/pull/502)\n```\n\n----------------------------------------\n\nTITLE: Adding ARM64 xxhash Assembly in zstd Package\nDESCRIPTION: This snippet mentions the addition of ARM64 assembly for xxhash in the zstd package. It's part of the changes in version 1.14.1.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nzstd: add arm64 xxhash assembly in [#464](https://github.com/klauspost/compress/pull/464)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant Alertmanager Configuration with mimirtool\nDESCRIPTION: This command retrieves a tenant's Alertmanager configuration using the mimirtool command-line utility. It requires specifying the Alertmanager URL and tenant ID.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/alertmanager.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager get \\\n  --address=<ALERTMANAGER URL>\n  --id=<TENANT ID>\n```\n\n----------------------------------------\n\nTITLE: Example Go Program with Multiple Function Types\nDESCRIPTION: This snippet demonstrates a simple Go program with a loop calling three different types of functions: a slow network request, a CPU-intensive task, and a function with unknown behavior.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/felixge/fgprof/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tfor {\n\t\t// Http request to a web service that might be slow.\n\t\tslowNetworkRequest()\n\t\t// Some heavy CPU computation.\n\t\tcpuIntensiveTask()\n\t\t// Poorly named function that you don't understand yet.\n\t\tweirdFunction()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling NGINX Component in Helm Values\nDESCRIPTION: YAML configuration to disable the NGINX component after Gateway has been deployed. This prevents running both components simultaneously.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnginx:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Benchmarking UvarintSize Function in Go\nDESCRIPTION: This code snippet provides benchmark results for the `UvarintSize` function, which computes the byte size of an unsigned varint without encoding or decoding. It showcases the performance improvements gained through optimization compared to the standard implementation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dennwc/varint/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\nbenchmark                    old ns/op     new ns/op     delta\nBenchmarkUvarintSize/1-8     1.71          0.43          -74.85%\nBenchmarkUvarintSize/2-8     2.56          0.57          -77.73%\nBenchmarkUvarintSize/3-8     3.22          0.72          -77.64%\nBenchmarkUvarintSize/4-8     3.74          0.72          -80.75%\nBenchmarkUvarintSize/5-8     4.29          0.57          -86.71%\nBenchmarkUvarintSize/6-8     4.85          0.58          -88.04%\nBenchmarkUvarintSize/7-8     5.43          0.71          -86.92%\nBenchmarkUvarintSize/8-8     6.01          0.86          -85.69%\nBenchmarkUvarintSize/9-8     6.64          1.00          -84.94%\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Error Message for PodSecurityPolicy Removal\nDESCRIPTION: Example error message that occurs when attempting to upgrade a Helm release to Kubernetes 1.25 with PodSecurityPolicy still present in the release history.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-kubernetes-version-1.25.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nresource mapping not found for name: \"mimir\" namespace: \"\" from \"\":\nno matches for kind \"PodSecurityPolicy\" in version \"policy/v1beta1\" ensure CRDs are installed first\n```\n\n----------------------------------------\n\nTITLE: Buffio Reader Example\nDESCRIPTION: Illustrates how to wrap a file stream with bufio.NewReader for potentially better performance when reading bitsets from files.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n\tf, err := os.Open(\"myfile\")\n\tr := bufio.NewReader(f)\n```\n```\n\n----------------------------------------\n\nTITLE: Generated Mimir Configuration ConfigMap\nDESCRIPTION: The resulting ConfigMap that will be created by Helm, showing the complete Mimir configuration with S3 storage settings for various components.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Source: mimir-distributed/templates/mimir-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mimir-config\n  labels:\n    helm.sh/chart: mimir-distributed-3.0.0\n    app.kubernetes.io/name: mimir\n    app.kubernetes.io/instance: mimir\n    app.kubernetes.io/version: \"2.2.0\"\n    app.kubernetes.io/managed-by: Helm\n  namespace: \"mimir-test\"\ndata:\n  mimir.yaml: |\n    activity_tracker:\n      filepath: /active-query-tracker/activity.log\n    alertmanager:\n      data_dir: /data\n      enable_api: true\n      external_url: /alertmanager\n    alertmanager_storage:\n      s3:\n        access_key_id: ${AWS_ACCESS_KEY_ID}\n        bucket_name: my-ruler-bucket\n        endpoint: s3.amazonaws.com\n        secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n    blocks_storage:\n      backend: s3\n      bucket_store:\n        sync_dir: /data/tsdb-sync\n      s3:\n        access_key_id: ${AWS_ACCESS_KEY_ID}\n        bucket_name: my-blocks-bucket\n        endpoint: s3.amazonaws.com\n        secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n      tsdb:\n        dir: /data/tsdb\n    compactor:\n      data_dir: /data\n    frontend:\n      align_queries_with_step: true\n      log_queries_longer_than: 10s\n    frontend_worker:\n      frontend_address: mimir-query-frontend-headless.test.svc:9095\n    ingester:\n      ring:\n        final_sleep: 0s\n        num_tokens: 512\n        unregister_on_shutdown: false\n    ingester_client:\n      grpc_client_config:\n        max_recv_msg_size: 104857600\n        max_send_msg_size: 104857600\n    limits: {}\n    memberlist:\n      abort_if_cluster_join_fails: false\n      compression_enabled: false\n      join_members:\n      - dns+mimir-gossip-ring.test.svc.cluster.local:7946\n    ruler:\n      alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.mimir-alertmanager-headless.test.svc.cluster.local/alertmanager\n      enable_api: true\n      rule_path: /data\n    ruler_storage:\n      s3:\n        access_key_id: ${AWS_ACCESS_KEY_ID}\n        bucket_name: my-ruler-bucket\n        endpoint: s3.amazonaws.com\n        secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n    runtime_config:\n      file: /var/mimir/runtime.yaml\n    server:\n      grpc_server_max_concurrent_streams: 1000\n```\n\n----------------------------------------\n\nTITLE: Removing Thanos Labels from meta.json Files (GCS)\nDESCRIPTION: This bash script iterates through meta.json files in a GCS bucket, removes the `thanos.labels` field using `jq`, and uploads the modified files back to GCS. It first backs up the original file and skips the upload if no changes are detected. Uses gsutil for GCS interactions.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n   #!/bin/bash\n\n   BUCKET=\"GCS Bucket name\"\n\n   echo \"Fetching list of meta.json files (this can take a while if there are many blocks)\"\n   gsutil ls \"gs://$BUCKET/*/meta.json\" > meta-files.txt\n\n   echo \"Processing meta.json files\"\n   for FILE in $(cat meta-files.txt); do\n      echo \"Removing Thanos labels from $FILE\"\n      ORIG_META_JSON=$(gsutil cat \"$FILE\")\n      UPDATED_META_JSON=$(echo \"$ORIG_META_JSON\" | jq \"del(.thanos.labels)\")\n\n      if ! diff -u <( echo \"$ORIG_META_JSON\" | jq . ) <( echo \"$UPDATED_META_JSON\" | jq .) > /dev/null; then\n         echo \"Backing up $FILE to $FILE.orig\"\n         gsutil cp \"$FILE\" \"$FILE.orig\"\n         echo \"Uploading modified $FILE\"\n         echo \"$UPDATED_META_JSON\" | gsutil cp - \"$FILE\"\n      else\n         echo \"No diff for $FILE\"\n      fi\n   done\n   ```\n```\n\n----------------------------------------\n\nTITLE: Global HA Deduplication Configuration for Mimir\nDESCRIPTION: Configuration for enabling HA deduplication globally in Mimir using Consul as the key-value store. This includes setting up the HA tracker and Consul connection details.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configure-helm-ha-deduplication-consul/index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    limits:\n      accept_ha_samples: true\n      # The following two configurations must match those of external_labels in Prometheus\n      # The config values below are the default and can be removed if you don't want to override to a new value\n      ha_cluster_label: cluster\n      ha_replica_label: __replica__\n    distributor:\n      ha_tracker:\n        enable_ha_tracker: true\n        kvstore:\n          store: consul\n          consul:\n            host: <consul-endpoint> # example: http://consul.consul.svc.cluster.local:8500\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Creation from IO Reader in Go\nDESCRIPTION: Demonstrates how to initialize a GitIgnore matcher from an io.Reader interface instead of a file path.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnoreFromReader(base, reader)\n```\n\n----------------------------------------\n\nTITLE: OpenFile Function Declaration in Go\nDESCRIPTION: Function declaration for OpenFile, which opens a new browser window for the given file path.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenFile(path string) error\n```\n\n----------------------------------------\n\nTITLE: Delete Tenant Configuration via HTTP API\nDESCRIPTION: This POST request deletes all rule groups associated with a given tenant, always returning a 200 status code, regardless of pre-existing state. Intended for internal use, this API remains operational even with `-ruler.enable-api` disabled and requires authentication for tenant identification.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_40\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST /ruler/delete_tenant_config\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Color Output Programmatically\nDESCRIPTION: Shows how to disable color output globally with a flag or locally for specific color definitions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar flagNoColor = flag.Bool(\"no-color\", false, \"Disable color output\")\n\nif *flagNoColor {\n\tcolor.NoColor = true // disables colorized output\n}\n```\n\n----------------------------------------\n\nTITLE: HuaweiCloud OBS Configuration\nDESCRIPTION: This YAML configuration defines the settings for using HuaweiCloud OBS as an object store. It includes the bucket name, endpoint, access key, and secret key. The `http_config` field is optional and allows optimization of HTTP transport settings, including TLS configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntype: OBS\nconfig:\n  bucket: \"\"\n  endpoint: \"\"\n  access_key: \"\"\n  secret_key: \"\"\n  http_config:\n    idle_conn_timeout: 1m30s\n    response_header_timeout: 2m\n    insecure_skip_verify: false\n    tls_handshake_timeout: 10s\n    expect_continue_timeout: 1s\n    max_idle_conns: 100\n    max_idle_conns_per_host: 100\n    max_conns_per_host: 0\n    tls_config:\n      ca_file: \"\"\n      cert_file: \"\"\n      key_file: \"\"\n      server_name: \"\"\n      insecure_skip_verify: false\n    disable_compression: false\nprefix: \"\"\n```\n\n----------------------------------------\n\nTITLE: Store Gateway Ring Configuration\nDESCRIPTION: Configuration for store gateway ring management during migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  // Configure microservices store-gateway to leave the ring.\n  store_gateway_args+:: {\n    'store-gateway.sharding-ring.unregister-on-shutdown': true,\n  },\n\n  mimir_backend_args+:: {\n    'store-gateway.sharding-ring.unregister-on-shutdown': false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example YAML Configuration Input for Conversion\nDESCRIPTION: Provides a sample input YAML configuration file for use with the 'mimirtool config convert' command. Key parameters include results cache settings for Memcached.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nquery_range:\n  results_cache:\n    cache:\n      memcached:\n        expiration: 10s # Expiration was removed in Grafana Mimir, so this parameter will be missing from the output YAML\n        batch_size: 2048\n        parallelism: 10\n      memcached_client:\n        max_idle_conns: 32\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client TLS Minimum Version\nDESCRIPTION: This setting specifies the minimum acceptable TLS version for secure connections.  It helps to ensure that only secure protocols are used.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_96\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Override the default minimum TLS version. Allowed values:\n  # VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13\n  # CLI flag: -alertmanager.alertmanager-client.tls-min-version\n  [tls_min_version: <string> | default = \"\"]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Ingester Pod Management Policy\nDESCRIPTION: YAML configuration to set the ingester podManagementPolicy to OrderedReady for compatibility.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  podManagementPolicy: \"OrderedReady\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PodSecurityPolicy for Kubernetes 1.24 in Grafana Mimir Helm Chart\nDESCRIPTION: YAML configuration to force PodSecurityPolicy on Kubernetes 1.24 when upgrading the Grafana Mimir Helm chart to version 5.0. This setting should be merged into the custom values file to maintain PodSecurityPolicy usage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-helm-chart-4.x-to-5.0.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrbac:\n  forcePSPOnKubernetes124: true\n```\n\n----------------------------------------\n\nTITLE: Installing sockaddr CLI via Go get\nDESCRIPTION: The command installs the 'sockaddr' CLI utility using Go's package management tool. It retrieves the source from GitHub and installs it on the system, allowing for further use as an administrative or testing tool in conjunction with the 'go-sockaddr' library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-sockaddr/README.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ go get -u github.com/hashicorp/go-sockaddr/cmd/sockaddr\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Mimir with Helm\nDESCRIPTION: Helm command to upgrade the existing Cortex release to Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE> grafana/mimir-distributed [-n <NAMESPACE>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Zone-Aware Replication for Ingesters\nDESCRIPTION: YAML configuration for setting up basic zone-aware replication with virtual zones for ingesters, including anti-affinity rules.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: false # Do not turn on zone-awareness without migration because of potential data loss\n    topologyKey: \"kubernetes.io/hostname\" # Triggers creating anti-affinity rules\n```\n\n----------------------------------------\n\nTITLE: Setting No Option Default Values for Flags in pflag\nDESCRIPTION: This snippet shows how to set a NoOptDefVal for a flag in pflag, which changes the flag's behavior when set without an option on the command line.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: Setting Values using Unsafe Pointers with reflect2 in Go\nDESCRIPTION: Demonstrates how to use reflect2 to set values using unsafe.Pointer. This method bypasses type checking for improved performance but requires careful usage.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Running Chunk Download Script\nDESCRIPTION: Command to execute the chunk download script from the current directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/grpcurl-query-ingesters/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbash ./download-chunks-from-ingesters.sh\n```\n\n----------------------------------------\n\nTITLE: Prometheus Remote Write Pipeline Service\nDESCRIPTION: Service pipeline configuration to enable the Prometheus remote write exporter.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-otel-collector.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines:\n    metrics:\n      receivers: [...]\n      processors: [...]\n      exporters: [..., prometheusremotewrite]\n```\n\n----------------------------------------\n\nTITLE: Applying Go Code Generation Plugin\nDESCRIPTION: This JSON configuration illustrates how to apply the `go-codegen` plugin to a Smithy project, specifying the service, module, and additional settings. Dependencies must include the smithy-go-codegen artifact. It is necessary to create models using the Smithy model language and have a protocol definition for transport mechanisms and serialization code generation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/aws/smithy-go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0\",\n  \"sources\": [\n    \"models\"\n  ],\n  \"maven\": {\n    \"dependencies\": [\n      \"software.amazon.smithy.go:smithy-go-codegen:0.1.0\"\n    ]\n  },\n  \"plugins\": {\n    \"go-codegen\": {\n      \"service\": \"example.weather#Weather\",\n      \"module\": \"github.com/example/weather\",\n      \"generateGoMod\": true,\n      \"goDirective\": \"1.20\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags to Upstream Repository\nDESCRIPTION: Git commands to push the new release tags for main module and submodules to the upstream repository.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Using OsFs Backend in Go\nDESCRIPTION: Example of using Afero's OsFs backend for native OS operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nappfs := afero.NewOsFs()\nappfs.MkdirAll(\"src/a\", 0755)\n```\n\n----------------------------------------\n\nTITLE: Spread-Minimizing Token Configuration\nDESCRIPTION: Configuration flags for enabling spread-minimizing tokens on ingesters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-spread-minimizing-tokens/index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n-ingester.ring.tokens-file-path=\n-ingester.ring.token-generation-strategy=spread-minimizing\n-ingester.ring.spread-minimizing-zones=zone-a,zone-b,zone-c\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Mimir Mixin in Bash\nDESCRIPTION: Command to install Grafana Mimir mixin using jb (Jsonnet Bundler).\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njb install github.com/grafana/mimir/operations/mimir-mixin@main\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry B3 Propagator Configuration\nDESCRIPTION: Example of B3 propagator encoding configuration after updates.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nB3Encoding.MultipleHeader\nB3Encoding.SingleHeader\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output from Querying Mimir Bucket Index\nDESCRIPTION: This is a sample CSV output from the query-bucket-index tool showing blocks that match a specific time range query. The output includes block IDs, time ranges, upload timestamps, shard information, source, compaction level, and deletion status.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/query-bucket-index/README.md#2025-04-17_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nBlock ID,Min time,Max time,Uploaded at,Shard ID,Source,Compaction level,Deletion marker present?,Deletion time\n01J3JW2VVE4HYNAQ5RGRAK54N9,2024-07-24T12:00:00Z,2024-07-24T14:00:00Z,2024-07-24T17:23:12Z,3_of_4,compactor,4,true,2024-07-25T01:41:46Z\n01J3JWBDSEJ4K9MABF569E2E3Z,2024-07-24T12:00:00Z,2024-07-24T14:00:00Z,2024-07-24T17:27:40Z,4_of_4,compactor,4,false,\n01J3JWMA3FGGB5253479FBCKYB,2024-07-24T12:00:00Z,2024-07-24T14:00:00Z,2024-07-24T17:31:40Z,2_of_4,compactor,4,true,2024-07-25T01:36:18Z\n01J3KP1M6VCNY8J56GBT80JBRT,2024-07-24T12:00:00Z,2024-07-25T00:00:00Z,2024-07-25T01:08:56Z,1_of_4,compactor,5,true,2024-07-25T03:18:33Z\n01J3KQ28GNX4EN7AG22HV9ZNGB,2024-07-24T12:00:00Z,2024-07-25T00:00:00Z,2024-07-25T01:41:46Z,3_of_4,compactor,5,false,\n01J3KQD3C45M9F6WZ6EN5EQ2Q2,2024-07-24T12:00:00Z,2024-07-25T00:00:00Z,2024-07-25T01:36:17Z,2_of_4,compactor,5,false,\n01J3KXB2Z1Y5W01MRF3AHM1MN1,2024-07-24T12:00:00Z,2024-07-25T00:00:00Z,2024-07-25T03:18:32Z,1_of_4,compactor,6,true,2024-07-25T03:23:16Z\n01J3KXHZEKA00XYXF6JP4BH3QM,2024-07-24T12:00:00Z,2024-07-25T00:00:00Z,2024-07-25T03:23:10Z,1_of_4,compactor,6,false,\n```\n\n----------------------------------------\n\nTITLE: Uploading Tenant Alertmanager Configuration with mimirtool\nDESCRIPTION: This command uploads a tenant's Alertmanager configuration using the mimirtool command-line utility. It requires specifying the configuration file, Alertmanager URL, and tenant ID.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/alertmanager.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager load <ALERTMANAGER CONFIGURATION FILE>  \\\n  --address=<ALERTMANAGER URL>\n  --id=<TENANT ID>\n```\n\n----------------------------------------\n\nTITLE: Importing Afero in Go\nDESCRIPTION: Import statement to include Afero in a Go application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/afero\"\n```\n\n----------------------------------------\n\nTITLE: Creating Decoder Without Stream Identifier\nDESCRIPTION: Shows how to create an S2 decoder that ignores the stream identifier when reading from an offset.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r, s2.ReaderIgnoreStreamIdentifier())\n```\n\n----------------------------------------\n\nTITLE: Parsing and Using Data Size Units in Go\nDESCRIPTION: Demonstrates how to parse string representations of data sizes and use predefined unit multipliers. The example shows parsing a kilobyte string value and using the Mebibyte constant for calculations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/units/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nn, err := ParseBase2Bytes(\"1KB\")\n// n == 1024\nn = units.Mebibyte * 512\n```\n\n----------------------------------------\n\nTITLE: Scaling Read Component Configuration\nDESCRIPTION: Two configuration options for scaling up the Mimir read component: fixed replicas or autoscaling.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    deployment_mode: 'migration',\n\n    mimir_write_replicas: 0,\n    mimir_read_replicas: 3,\n    mimir_backend_replicas: 0,\n    autoscaling_mimir_read_enabled: false,\n  },\n}\n```\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    deployment_mode: 'migration',\n\n    mimir_write_replicas: 0,\n    mimir_backend_replicas: 0,\n    autoscaling_mimir_read_enabled: true,\n    autoscaling_mimir_read_min_replicas: 3,\n    autoscaling_mimir_read_max_replicas: 30,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Color Output for Specific Color Objects\nDESCRIPTION: Demonstrates how to enable or disable color output for individual color objects on the fly.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nc := color.New(color.FgCyan)\nc.Println(\"Prints cyan text\")\n\nc.DisableColor()\nc.Println(\"This is printed without any color\")\n\nc.EnableColor()\nc.Println(\"This prints again cyan...\")\n```\n\n----------------------------------------\n\nTITLE: JWT-GO Version History Content\nDESCRIPTION: Detailed markdown documentation of JWT-GO library version history, including features, breaking changes, and bug fixes across all versions from 1.0.0 to 4.0.0.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang-jwt/jwt/v5/VERSION_HISTORY.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `jwt-go` Version History\n\nThe following version history is kept for historic purposes. To retrieve the current changes of each version, please refer to the change-log of the specific release versions on https://github.com/golang-jwt/jwt/releases.\n\n## 4.0.0\n\n* Introduces support for Go modules. The `v4` version will be backwards compatible with `v3.x.y`.\n\n## 3.2.2\n\n* Starting from this release, we are adopting the policy to support the most 2 recent versions of Go currently available. By the time of this release, this is Go 1.15 and 1.16 ([#28](https://github.com/golang-jwt/jwt/pull/28)).\n* Fixed a potential issue that could occur when the verification of `exp`, `iat` or `nbf` was not required and contained invalid contents, i.e. non-numeric/date. Thanks for @thaJeztah for making us aware of that and @giorgos-f3 for originally reporting it to the formtech fork ([#40](https://github.com/golang-jwt/jwt/pull/40)).\n* Added support for EdDSA / ED25519 ([#36](https://github.com/golang-jwt/jwt/pull/36)).\n* Optimized allocations ([#33](https://github.com/golang-jwt/jwt/pull/33)).\n```\n\n----------------------------------------\n\nTITLE: OCI Object Storage Configuration - Instance Principal Provider\nDESCRIPTION: This YAML configuration demonstrates the use of Instance Principal Provider for authenticating with Oracle Cloud Infrastructure (OCI) Object Storage. It requires the bucket name and compartment OCID to be specified. Optional configurations, similar to the 'Default Provider', can also be included.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ntype: OCI\nconfig:\n  provider: \"instance-principal\"\n  bucket: \"\"\n  compartment_ocid: \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Annotations Template in Go\nDESCRIPTION: This template displays the annotations associated with an alert. It handles `summary`, `description`, and `runbook_url` annotations specifically, displaying them separately and removing them from the general list of annotations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/alerting/receivers/templates/ng_alert_notification.txt#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n{{- define \"__default_alert_annotations\" -}}\n{{- $annotations := .Annotations -}}\n{{- if index $annotations \"summary\" }}\nSummary: {{ index .Annotations \"summary\" -}}\n{{- $annotations = $annotations.Remove (toStrings (list \"summary\")) }}\n{{- end -}}\n{{- if index $annotations \"description\" }}\nDescription: {{ index $annotations \"description\" -}}\n{{- $annotations = $annotations.Remove (toStrings (list \"description\")) }}\n{{- end -}}\n{{- if index $annotations \"runbook_url\" }}\nRunbook: {{ index $annotations \"runbook_url\" -}}\n{{- $annotations = $annotations.Remove (toStrings (list \"runbook_url\")) }}\n{{- end -}}\n{{- if $annotations }}\nAnnotations: {{ template \"__default_sorted_pairs\" $annotations }}\n{{- end -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Other Go Compressors Comparison in Markdown\nDESCRIPTION: This markdown table compares the compression performance of other Go-based compressors like Zstd and Deflate on the same mixed content dataset, showing input and output sizes, compression ratio, and speed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| *                 | Input      | Output     | Reduction | MB/s   |\n|-------------------|------------|------------|-----------|--------|\n| Zstd Fastest (Go) | 4014735833 | 794608518  | 80.21%    | 236.04 |\n| Zstd Best (Go)    | 4014735833 | 704603356  | 82.45%    | 35.63  |\n| Deflate (Go) l1   | 4014735833 | 871294239  | 78.30%    | 214.04 |\n| Deflate (Go) l9   | 4014735833 | 730389060  | 81.81%    | 41.17  |\n```\n\n----------------------------------------\n\nTITLE: Converting Time to GMT for If-Modified-Since and If-Unmodified-Since Headers\nDESCRIPTION: YAML directive that ensures time values used in HTTP headers are correctly converted to GMT timezone before formatting as RFC1123, which is required by the Azure Storage service.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_container_client.go\n  - zz_blob_client.go\n  - zz_appendblob_client.go\n  - zz_blockblob_client.go\n  - zz_pageblob_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/req\\.Raw\\(\\)\\.Header\\[\"If-Modified-Since\"\\]\\s+=\\s+\\[\\]string\\{modifiedAccessConditions\\.IfModifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"If-Modified-Since\"] = []string{(*modifiedAccessConditions.IfModifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace(/req\\.Raw\\(\\)\\.Header\\[\"If-Unmodified-Since\"\\]\\s+=\\s+\\[\\]string\\{modifiedAccessConditions\\.IfUnmodifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"If-Unmodified-Since\"] = []string{(*modifiedAccessConditions.IfUnmodifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace(/req\\.Raw\\(\\)\\.Header\\[\"x-ms-source-if-modified-since\"\\]\\s+=\\s+\\[\\]string\\{sourceModifiedAccessConditions\\.SourceIfModifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-source-if-modified-since\"] = []string{(*sourceModifiedAccessConditions.SourceIfModifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace(/req\\.Raw\\(\\)\\.Header\\[\"x-ms-source-if-unmodified-since\"\\]\\s+=\\s+\\[\\]string\\{sourceModifiedAccessConditions\\.SourceIfUnmodifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-source-if-unmodified-since\"] = []string{(*sourceModifiedAccessConditions.SourceIfUnmodifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace(/req\\.Raw\\(\\)\\.Header\\[\"x-ms-immutability-policy-until-date\"\\]\\s+=\\s+\\[\\]string\\{options\\.ImmutabilityPolicyExpiry\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-immutability-policy-until-date\"] = []string{(*options.ImmutabilityPolicyExpiry).In(gmt).Format(time.RFC1123)}`);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Page in Grafana Mimir\nDESCRIPTION: This endpoint displays an index page with links to other web pages exposed by Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /\n```\n\n----------------------------------------\n\nTITLE: Using MPMCQueue in Go\nDESCRIPTION: Shows usage of MPMCQueue, a bounded multi-producer multi-consumer concurrent queue.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nq := xsync.NewMPMCQueue(1024)\n// producer optimistically inserts an item into the queue\n// optimistic insertion attempt; doesn't block\ninserted := q.TryEnqueue(\"bar\")\n// consumer obtains an item from the queue\n// optimistic obtain attempt; doesn't block\nitem, ok := q.TryDequeue() // interface{} pointing to a string\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration from Files in Go\nDESCRIPTION: Example showing how to read and merge configuration from JSON and YAML files using koanf\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load YAML config and merge into the previously loaded config (because we can).\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n\tfmt.Println(\"parent's ID is = \", k.Int(\"parent1.id\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Bitset Serialization to Bytes\nDESCRIPTION: Shows how to serialize a bitset to a stream of bytes using the WriteTo method. This allows for safe and portable storage or transmission of bitset data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n    const length = 9585\n\tconst oneEvery = 97\n\tbs := bitset.New(length)\n\t// Add some bits\n\tfor i := uint(0); i < length; i += oneEvery {\n\t\tbs = bs.Set(i)\n\t}\n\n\tvar buf bytes.Buffer\n\tn, err := bs.WriteTo(&buf)\n\tif err != nil {\n\t\t// failure\n\t}\n\t// Here n == buf.Len()\n```\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Optimized Varint Encoding in Go\nDESCRIPTION: This code snippet shows benchmark results for an optimized varint implementation compared to the conventional `binary.Uvarint` approach in Go. It highlights performance improvements across different input sizes, demonstrating the efficiency gains achieved by the optimization.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dennwc/varint/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nbenchmark                      old ns/op     new ns/op     delta\nBenchmarkUvarint/1-8           4.13          2.85          -30.99%\nBenchmarkUvarint/1_large-8     4.01          2.28          -43.14%\nBenchmarkUvarint/2-8           6.23          2.87          -53.93%\nBenchmarkUvarint/2_large-8     5.60          2.86          -48.93%\nBenchmarkUvarint/3-8           6.55          3.44          -47.48%\nBenchmarkUvarint/3_large-8     6.54          2.86          -56.27%\nBenchmarkUvarint/4-8           7.30          3.71          -49.18%\nBenchmarkUvarint/4_large-8     7.46          3.10          -58.45%\nBenchmarkUvarint/5-8           8.31          4.12          -50.42%\nBenchmarkUvarint/5_large-8     8.56          3.48          -59.35%\nBenchmarkUvarint/6-8           9.42          4.66          -50.53%\nBenchmarkUvarint/6_large-8     9.91          4.07          -58.93%\nBenchmarkUvarint/7-8           10.6          5.28          -50.19%\nBenchmarkUvarint/7_large-8     11.0          4.70          -57.27%\nBenchmarkUvarint/8-8           11.7          6.02          -48.55%\nBenchmarkUvarint/8_large-8     12.1          5.19          -57.11%\nBenchmarkUvarint/9-8           12.9          6.83          -47.05%\nBenchmarkUvarint/9_large-8     13.1          5.71          -56.41%\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Release Notes\nDESCRIPTION: YAML frontmatter configuration defining the title, menu title, description and weight of the release notes documentation page.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v5.3.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Grafana Mimir Helm chart version 5.3 release notes\"\nmenuTitle: \"V5.3 release notes\"\ndescription: \"Release notes for Grafana Mimir Helm chart version 5.3\"\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling and Marshalling with Koanf in Go\nDESCRIPTION: This snippet demonstrates how to unmarshal Koanf configuration into a struct and marshal it back to JSON. It shows both quick unmarshal and advanced unmarshal with custom configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use . as the key path delimiter. This can be / or anything.\nvar (\n\tk      = koanf.New(\".\")\n\tparser = json.Parser()\n)\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), parser); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Structure to unmarshal nested conf to.\n\ttype childStruct struct {\n\t\tName       string            `koanf:\"name\"`\n\t\tType       string            `koanf:\"type\"`\n\t\tEmpty      map[string]string `koanf:\"empty\"`\n\t\tGrandChild struct {\n\t\t\tIds []int `koanf:\"ids\"`\n\t\t\tOn  bool  `koanf:\"on\"`\n\t\t} `koanf:\"grandchild1\"`\n\t}\n\n\tvar out childStruct\n\n\t// Quick unmarshal.\n\tk.Unmarshal(\"parent1.child1\", &out)\n\tfmt.Println(out)\n\n\t// Unmarshal with advanced config.\n\tout = childStruct{}\n\tk.UnmarshalWithConf(\"parent1.child1\", &out, koanf.UnmarshalConf{Tag: \"koanf\"})\n\tfmt.Println(out)\n\n\t// Marshal the instance back to JSON.\n\t// The parser instance can be anything, eg: json.Parser(), yaml.Parser() etc.\n\tb, _ := k.Marshal(parser)\n\tfmt.Println(string(b))\n}\n```\n\n----------------------------------------\n\nTITLE: Limits Configuration Parameters in YAML\nDESCRIPTION: Configuration settings for rate limiting, request bursts, ingestion controls, and validation rules. These parameters define per-tenant limits and validation constraints for incoming data.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_117\n\nLANGUAGE: yaml\nCODE:\n```\nrequest_rate: <float> | default = 0\nrequest_burst_size: <int> | default = 0\ningestion_rate: <float> | default = 10000\ningestion_burst_size: <int> | default = 200000\ningestion_burst_factor: <float> | default = 0\naccept_ha_samples: <boolean> | default = false\nha_cluster_label: <string> | default = \"cluster\"\nha_replica_label: <string> | default = \"__replica__\"\nha_max_clusters: <int> | default = 100\ndrop_labels: <list of strings> | default = []\nmax_label_name_length: <int> | default = 1024\nmax_label_value_length: <int> | default = 2048\nmax_label_names_per_series: <int> | default = 30\nmax_label_names_per_info_series: <int> | default = 80\nmax_metadata_length: <int> | default = 1024\nmax_native_histogram_buckets: <int> | default = 0\nmax_exemplars_per_series_per_request: <int> | default = 0\nreduce_native_histogram_over_max_buckets: <boolean> | default = true\ncreation_grace_period: <duration> | default = 10m\npast_grace_period: <duration> | default = 0s\nenforce_metadata_metric_name: <boolean> | default = true\ningestion_tenant_shard_size: <int> | default = 0\nmetric_relabeling_enabled: <boolean> | default = true\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Gate Status in Go\nDESCRIPTION: Example of how to check if a feature gate is enabled at runtime. The code demonstrates using the IsEnabled method to conditionally execute feature-specific code.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/featuregate/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif myFeatureGate.IsEnabled() {\n\tsetupNewFeature()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Limits with Environment Variables in Go\nDESCRIPTION: Code snippet showing how to configure span limits using environment variables in the OpenTelemetry Go SDK. It lists the supported environment variables for setting various span limits.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nOTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT\nOTEL_SPAN_ATTRIBUTE_COUNT_LIMIT\nOTEL_SPAN_EVENT_COUNT_LIMIT\nOTEL_EVENT_ATTRIBUTE_COUNT_LIMIT\nOTEL_SPAN_LINK_COUNT_LIMIT\nOTEL_LINK_ATTRIBUTE_COUNT_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruler Notification Timeout in YAML\nDESCRIPTION: Sets the timeout duration for rule notifications. This configuration option specifies how long the Ruler will wait for notifications to be sent before timing out.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\n# CLI flag: -ruler.notification-timeout\n[notification_timeout: <duration> | default = 10s]\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Error Message\nDESCRIPTION: Example error message shown when invalid deployment configuration is used with maxSurge=0\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v5.1.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nInvalid value: intstr.IntOrString{Type:0, IntVal:0, StrVal:\"\"}: may not be 0 when `maxSurge` is 0\n```\n\n----------------------------------------\n\nTITLE: Printing TSDB Labels with tsdb-labels\nDESCRIPTION: This command executes the `tsdb-labels` tool on a specified TSDB block (`./01HA705M6Y8VNNR7W4C8116P2T`). The tool reads the block and outputs the label names, the number of values for each label, and the distinct values associated with each label, providing a summary of the label content within the block. This command provides insight into the labels and values present within a given TSDB block.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"tsdb-labels ./01HA705M6Y8VNNR7W4C8116P2T\"\n```\n\n----------------------------------------\n\nTITLE: Using Default Values in Sprig Pipelines\nDESCRIPTION: Shows the improved usage of the 'default' function in Sprig pipelines. This example demonstrates how to provide a default value when the pipeline input is empty or undefined.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{.Foo | default \"bar\"}}\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client TLS Enabled\nDESCRIPTION: This boolean setting enables or disables TLS for gRPC communication. When enabled, TLS encryption is used to secure the connection.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_89\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Enable TLS in the gRPC client. This flag needs to be enabled when\n  # any other TLS flag is set. If set to false, insecure connection to gRPC\n  # server will be used.\n  # CLI flag: -alertmanager.alertmanager-client.tls-enabled\n  [tls_enabled: <boolean> | default = false]\n\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client gRPC Rate Limit\nDESCRIPTION: This configures the rate limit for the gRPC client, allowing you to control the number of requests per second. A value of 0 disables rate limiting.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_81\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Rate limit for gRPC client; 0 means disabled.\n  # CLI flag: -alertmanager.alertmanager-client.grpc-client-rate-limit\n  [rate_limit: <float> | default = 0]\n\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Mimir with Local Binary\nDESCRIPTION: Command to run Grafana Mimir using local binary with configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./mimir --config.file=./demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for time.Time in Go\nDESCRIPTION: Shows how to implement a custom transformer for handling special types like time.Time. This example creates a transformer that checks if the destination time is zero before setting it from the source.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/imdario/mergo\"\n        \"reflect\"\n        \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStack Swift Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration parameters for using OpenStack Swift as an object storage backend in Grafana Mimir. Includes authentication settings (project details, domains), regional configuration, container name, and connection parameters like retry limits and timeouts.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_150\n\nLANGUAGE: yaml\nCODE:\n```\n# OpenStack Swift project ID (v2,v3 auth only).\n# CLI flag: -<prefix>.swift.project-id\n[project_id: <string> | default = \"\"]\n\n# OpenStack Swift project name (v2,v3 auth only).\n# CLI flag: -<prefix>.swift.project-name\n[project_name: <string> | default = \"\"]\n\n# ID of the OpenStack Swift project's domain (v3 auth only), only needed if it\n# differs the from user domain.\n# CLI flag: -<prefix>.swift.project-domain-id\n[project_domain_id: <string> | default = \"\"]\n\n# Name of the OpenStack Swift project's domain (v3 auth only), only needed if it\n# differs from the user domain.\n# CLI flag: -<prefix>.swift.project-domain-name\n[project_domain_name: <string> | default = \"\"]\n\n# OpenStack Swift Region to use (v2,v3 auth only).\n# CLI flag: -<prefix>.swift.region-name\n[region_name: <string> | default = \"\"]\n\n# Name of the OpenStack Swift container to put chunks in.\n# CLI flag: -<prefix>.swift.container-name\n[container_name: <string> | default = \"\"]\n\n# (advanced) Max retries on requests error.\n# CLI flag: -<prefix>.swift.max-retries\n[max_retries: <int> | default = 3]\n\n# (advanced) Time after which a connection attempt is aborted.\n# CLI flag: -<prefix>.swift.connect-timeout\n[connect_timeout: <duration> | default = 10s]\n\n# (advanced) Time after which an idle request is aborted. The timeout watchdog\n# is reset each time some data is received, so the timeout triggers after X time\n# no data is received on a request.\n# CLI flag: -<prefix>.swift.request-timeout\n[request_timeout: <duration> | default = 5s]\n```\n\n----------------------------------------\n\nTITLE: Monitoring Write Requests PromQL Query\nDESCRIPTION: PromQL query to monitor write request rates to specific zone ingesters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-spread-minimizing-tokens/index.md#2025-04-17_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nsum by(route) (\n  rate(\n    cortex_request_duration_seconds_count{\n      namespace=\"<your-namespace>\",\n      container=\"ingester\",\n      pod=~\"ingester-zone-a-.*\",\n      route=\"/cortex.Ingester/Push\"}[5m]\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Go's Random Number Generator with seed.MustInit()\nDESCRIPTION: This snippet demonstrates how to use the seed.MustInit() function in a package initialization. It will panic if unable to set a high-entropy random seed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sean-/seed/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage mypackage\n\nimport (\n  \"github.com/sean-/seed\"\n)\n\n// MustInit will panic() if it is unable to set a high-entropy random seed:\nfunc init() {\n  seed.MustInit()\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Relabeling to Cluster-Specific Blocks\nDESCRIPTION: Loop to rewrite blocks for a specific cluster with the configured relabeling. This processes only the blocks identified for a particular cluster to allow parallel processing of different clusters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nfor ID in `cat prod-blocks.tsv`\ndo\n    thanos tools bucket rewrite  \\\n       --objstore.config-file bucket.yaml \\\n       --rewrite.to-relabel-config-file relabel-config.yaml \\\n       --delete-blocks \\\n       --no-dry-run \\\n       --id $ID\ndone\n```\n\n----------------------------------------\n\nTITLE: Disabling Logger Thread Locking\nDESCRIPTION: Method to disable default mutex protection for logger when thread safety is guaranteed by other means. This can be used when hooks are thread-safe or output writing is inherently thread-safe.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nlogger.SetNoLock()\n```\n\n----------------------------------------\n\nTITLE: Applying OpenCensus Tags as Profiler Labels in Go\nDESCRIPTION: Example of how to apply OpenCensus tags as profiler labels for Go 1.9 and above.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Insert(userIDKey, \"fff0989878\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for KMS Access\nDESCRIPTION: IAM policy required for accessing KMS keys when using server-side encryption with S3. Grants permissions for KMS key operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"KMSAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kms:GenerateDataKey\",\n                \"kms:Encrypt\",\n                \"kms:Decrypt\"\n            ],\n            \"Resource\": \"arn:aws:kms:<region>:<account>:key/<KMS key id>\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Labels Template in Go\nDESCRIPTION: This template displays the labels associated with an alert. It specifically handles the `alertname` label, displaying it separately and removing it from the general list of labels.  The `toStrings` function converts the list of strings into strings.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/alerting/receivers/templates/ng_alert_notification.txt#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n{{- define \"__default_alert_labels\" -}}\n{{- $labels := .Labels -}}\n{{- if index $labels \"alertname\" }}\nAlertname: {{ index .Labels \"alertname\" -}}\n{{ $labels = $labels.Remove (toStrings (list \"alertname\")) }}\n{{- end }}\nLabels: {{ template \"__default_sorted_pairs\" $labels }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Installing BBloom Package in Go\nDESCRIPTION: This shell command installs the BBloom package, a Bloom filter implementation in Go, from its GitHub repository. It requires a Go development setup and network access to GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dgraph-io/ristretto/z/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/AndreasBriese/bbloom\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Instance Interface Names Configuration\nDESCRIPTION: Specifies a list of network interface names to use when finding the instance IP address. This IP address is sent to query-scheduler and querier for directing query responses.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) List of network interface names to look up when finding the\\n# instance IP address. This address is sent to query-scheduler and querier,\\n# which uses it to send the query response back to query-frontend.\\n# CLI flag: -query-frontend.instance-interface-names\\n[instance_interface_names: <list of strings> | default = [<private network interfaces>]]\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Alertmanager Configuration for UTF-8 Compatibility\nDESCRIPTION: This command migrates an existing Alertmanager configuration to be compatible with UTF-8. It takes a config file and optional template files as input, and outputs the migrated files.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager migrate-utf8 <config_file> [template_files...]\n```\n\n----------------------------------------\n\nTITLE: Feature: Add Cert Support to httptransport\nDESCRIPTION: This commit adds certificate support to the `httptransport` package within the `auth` module. This enhancement allows the use of certificates for authentication over HTTP, providing a secure and reliable way to establish trust. The commit corresponds to issue #8569.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n37e3435f8e98595eafab481bdfcb31a4c56fa993\n```\n\n----------------------------------------\n\nTITLE: Using RBMutex in Go\nDESCRIPTION: Shows usage of RBMutex, a reader-biased reader/writer mutual exclusion lock.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmu := xsync.NewRBMutex()\n// reader lock calls return a token\nt := mu.RLock()\n// the token must be later used to unlock the mutex\nmu.RUnlock(t)\n// writer locks are the same as in sync.RWMutex\nmu.Lock()\nmu.Unlock()\n```\n\n----------------------------------------\n\nTITLE: Bitset Deserialization from Bytes\nDESCRIPTION: Demonstrates how to deserialize a bitset from a stream of bytes using the ReadFrom method. This reads the data into an existing BitSet instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n\t// Read back from buf\n\tbs = bitset.New()\n\tn, err = bs.ReadFrom(&buf)\n\tif err != nil {\n\t\t// error\n\t}\n\t// n is the number of bytes read\n```\n```\n\n----------------------------------------\n\nTITLE: Running All Mimir Integration Tests\nDESCRIPTION: Command to execute all integration tests for Mimir. The requires_docker tag ensures Docker is available for the tests.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-integration-tests-work.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v -tags=requires_docker ./integration/...\n```\n\n----------------------------------------\n\nTITLE: Using WithDecodeAllCapLimit Option in ZSTD Decoder\nDESCRIPTION: API reference for the WithDecodeAllCapLimit option in the zstd package, which allows setting memory capacity limits during decompression. This option was added in v1.15.10 of the library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://pkg.go.dev/github.com/klauspost/compress@v1.15.10/zstd#WithDecodeAllCapLimit\n```\n\n----------------------------------------\n\nTITLE: Go Module Import Path Example\nDESCRIPTION: Example showing how to properly format Go module import paths with version numbers for v2+ modules\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/v2/trace\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Series Custom Trackers in YAML\nDESCRIPTION: Example configuration showing how to set up custom trackers for monitoring dev and prod namespace series counts per tenant.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-custom-trackers.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nactive_series_custom_trackers:\n  dev: '{namespace=~\"dev-.*\"}'\n  prod: '{namespace=~\"prod-.*\"}'\n```\n\n----------------------------------------\n\nTITLE: Feature: Move Credentials to Base Auth Package\nDESCRIPTION: This commit moves the `Credentials` type to the root of the `auth` package.  This change centralizes the core authentication abstraction for the module. It is associated with issue #9590.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n1a04bafa83c27342b9308d785645e1e5423ea10d\n```\n\n----------------------------------------\n\nTITLE: Converting to String with ToString in Go\nDESCRIPTION: Examples of using the ToString function from the Cast library to convert various types to strings. This function handles different input types and returns a string representation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/cast/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncast.ToString(\"mayonegg\")         // \"mayonegg\"\ncast.ToString(8)                  // \"8\"\ncast.ToString(8.31)               // \"8.31\"\ncast.ToString([]byte(\"one time\")) // \"one time\"\ncast.ToString(nil)                // \"\"\n\nvar foo interface{} = \"one more time\"\ncast.ToString(foo)                // \"one more time\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Prometheus Project using Go Modules\nDESCRIPTION: These commands demonstrate how to add or update dependencies using Go modules in the Prometheus project. It includes picking the latest tagged release or a specific version.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client TLS Key Path\nDESCRIPTION: This parameter provides the path to the private key file associated with the client certificate.  It's used in conjunction with the certificate to establish a secure TLS connection.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_91\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Path to the key for the client certificate. Also requires the\n  # client certificate to be configured.\n  # CLI flag: -alertmanager.alertmanager-client.tls-key-path\n  [tls_key_path: <string> | default = \"\"]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Accept Struct for HTTP Accept Header in Go\nDESCRIPTION: This struct represents a clause in an HTTP Accept Header. It includes fields for Type, SubType, Q (quality factor), and additional parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Querier Forget Delay Configuration\nDESCRIPTION: Sets the delay before a disconnected querier is removed from a tenant's shard. This reduces the blast radius in shuffle-sharding scenarios when queriers disconnect without a graceful shutdown notification.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (experimental) If a querier disconnects without sending notification about\\n# graceful shutdown, the query-frontend will keep the querier in the tenant's\\n# shard until the forget delay has passed. This feature is useful to reduce the\\n# blast radius when shuffle-sharding is enabled.\\n# CLI flag: -query-frontend.querier-forget-delay\\n[querier_forget_delay: <duration> | default = 0s]\"\n```\n\n----------------------------------------\n\nTITLE: Converting String ETags to azcore.ETag Type in Azure SDK\nDESCRIPTION: YAML directive that replaces string ETag types with azcore.ETag types in multiple files, adds the azcore import, and adjusts related function calls to handle the new type properly.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from:\n  - zz_models.go\n  - zz_options.go\n  where: $\n  transform: >\n    return $.\n      replace(/import \"time\"/, `import (\\n\\t\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n)`).\n      replace(/Etag\\s+\\*string/g, `ETag *azcore.ETag`).\n      replace(/IfMatch\\s+\\*string/g, `IfMatch *azcore.ETag`).\n      replace(/IfNoneMatch\\s+\\*string/g, `IfNoneMatch *azcore.ETag`).\n      replace(/SourceIfMatch\\s+\\*string/g, `SourceIfMatch *azcore.ETag`).\n      replace(/SourceIfNoneMatch\\s+\\*string/g, `SourceIfNoneMatch *azcore.ETag`);\n\n- from: zz_responses.go\n  where: $\n  transform: >\n    return $.\n      replace(/\"time\"/, `\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"`).\n      replace(/ETag\\s+\\*string/g, `ETag *azcore.ETag`);\n\n- from:\n  - zz_appendblob_client.go\n  - zz_blob_client.go\n  - zz_blockblob_client.go\n  - zz_container_client.go\n  - zz_pageblob_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/\"github\\.com\\/Azure\\/azure\\-sdk\\-for\\-go\\/sdk\\/azcore\\/policy\"/, `\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"`).\n      replace(/result\\.ETag\\s+=\\s+&val/g, `result.ETag = (*azcore.ETag)(&val)`).\n      replace(/\\*modifiedAccessConditions.IfMatch/g, `string(*modifiedAccessConditions.IfMatch)`).\n      replace(/\\*modifiedAccessConditions.IfNoneMatch/g, `string(*modifiedAccessConditions.IfNoneMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfMatch/g, `string(*sourceModifiedAccessConditions.SourceIfMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfNoneMatch/g, `string(*sourceModifiedAccessConditions.SourceIfNoneMatch)`);\n```\n\n----------------------------------------\n\nTITLE: Query Frontend Configuration Parameters - YAML\nDESCRIPTION: Configuration options for Mimir's query frontend including sharding, caching, and query limits. Defines parameters for query execution, results caching, and request handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_119\n\nLANGUAGE: yaml\nCODE:\n```\nquery_sharding_max_sharded_queries: <int> | default = 128\nquery_sharding_max_regexp_size_bytes: <int> | default = 4096\nsplit_instant_queries_by_interval: <duration> | default = 0s\nquery_ingesters_within: <duration> | default = 13h\nmax_total_query_length: <duration> | default = 0s\nresults_cache_ttl: <duration> | default = 1w\nresults_cache_ttl_for_out_of_order_time_window: <duration> | default = 10m\nresults_cache_ttl_for_cardinality_query: <duration> | default = 0s\nresults_cache_ttl_for_labels_query: <duration> | default = 0s\nresults_cache_ttl_for_errors: <duration> | default = 5m\ncache_unaligned_requests: <boolean> | default = false\nmax_query_expression_size_bytes: <int> | default = 0\n```\n\n----------------------------------------\n\nTITLE: Installing Gorilla Mux Go Package\nDESCRIPTION: The shell command installs the gorilla/mux package, a routing library for Go, using go get. It requires a correctly configured Go toolchain.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -u github.com/gorilla/mux\n```\n\n----------------------------------------\n\nTITLE: Example UTF-8 Matcher Disagreement Log\nDESCRIPTION: Sample log output showing a matcher configuration that may behave differently when UTF-8 is enabled. Demonstrates how the system identifies potential behavior changes in existing configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/alertmanager.md#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmsg=\"Matchers input has disagreement\" input=\"foo=\\\"\\\\xf0\\\\x9f\\\\x99\\\\x82\\\"\" user=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Running Shorter Version of Go Tests for minio-go Project\nDESCRIPTION: Command to run a shorter version of the Go tests with race condition checking, useful for quicker testing during development.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -short -race ./...\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC Logging Configuration\nDESCRIPTION: Environment variable configuration for controlling gRPC logging verbosity and severity levels, useful for debugging and monitoring RPC interactions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport GRPC_GO_LOG_VERBOSITY_LEVEL=99\nexport GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Running Compaction Planner with GCS Backend\nDESCRIPTION: Example command showing how to run the compaction planner tool with Google Cloud Storage backend. The command configures the tool with specific tenant ID, bucket name, split groups, and shard count parameters to analyze potential compaction jobs.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/compaction-planner.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./compaction-planner -backend=gcs -gcs.bucket-name=blocks-bucket -user=10428 -split-groups=1 -shard-count=4\n2022-02-04 09:52:05.506428 I | Using index from 2022-02-04T08:38:27Z\n2022-02-04 09:52:05.533720 I | Filtering using *compactor.NoCompactionMarkFilter\nJob No.   Start Time             End Time               Blocks   Job Key\n1         2022-02-04T02:00:00Z   2022-02-04T04:00:00Z   4        0@6672437747845546250-merge-2_of_4-1643940000000-1643947200000\n2         2022-02-04T02:00:00Z   2022-02-04T04:00:00Z   4        0@6672437747845546250-merge-4_of_4-1643940000000-1643947200000\n3         2022-02-04T04:00:00Z   2022-02-04T06:00:00Z   4        0@6672437747845546250-merge-1_of_4-1643947200000-1643954400000\n4         2022-02-04T04:00:00Z   2022-02-04T06:00:00Z   4        0@6672437747845546250-merge-2_of_4-1643947200000-1643954400000\n5         2022-02-04T04:00:00Z   2022-02-04T06:00:00Z   4        0@6672437747845546250-merge-3_of_4-1643947200000-1643954400000\n6         2022-02-04T04:00:00Z   2022-02-04T06:00:00Z   4        0@6672437747845546250-merge-4_of_4-1643947200000-1643954400000\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Device Statistics in Go\nDESCRIPTION: Shows how to initialize both proc and sys filesystems to access block device information using the blockdevice package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\nstats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Initial Stream Window Size\nDESCRIPTION: This experimental setting defines the initial stream window size for gRPC connections. It's used to optimize network performance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_87\n\nLANGUAGE: yaml\nCODE:\n```\n  # (experimental) Initial stream window size. Values less than the default are\n  # not supported and are ignored. Setting this to a value other than the\n  # default disables the BDP estimator.\n  # CLI flag: -alertmanager.alertmanager-client.initial-stream-window-size\n  [initial_stream_window_size: <int> | default = 63KiB1023B]\n\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud IAM Go Client Library\nDESCRIPTION: Command to install the Google Cloud IAM Go client library using go get. This adds the cloud.google.com/go/iam package to your Go module dependencies.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/iam/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/iam\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only and Read-Write Span Interfaces in Go OpenTelemetry SDK\nDESCRIPTION: Added ReadOnlySpan and ReadWriteSpan interfaces to provide better control for accessing span data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n\"otel/sdk/trace\".ReadOnlySpan\n\"otel/sdk/trace\".ReadWriteSpan\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Command Completion Options in Kingpin\nDESCRIPTION: Example of using HintOptions to provide static completion suggestions for a port flag while allowing custom values. The flag is marked as required and accepts an integer value.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\napp := kingpin.New(\"completion\", \"My application with bash completion.\")\napp.Flag(\"port\", \"Provide a port to connect to\").\n    Required().\n    HintOptions(\"80\", \"443\", \"8080\").\n    IntVar(&c.port)\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects from Amazon S3\nDESCRIPTION: Example command to delete objects from an S3 bucket using the delete-objects program. Includes parameters for S3 endpoint, bucket name, and access credentials.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/delete-objects/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat objects-to-delete.txt | ./delete-objects \\\n    -concurrency 64 \\\n    -backend s3 \\\n    -s3.endpoint <S3_ENDPOINT> \\\n    -s3.bucket-name <S3_BUCKET_NAME> \\\n    -s3.access-key-id <S3_ACCESS_KEY_ID> \\\n    -s3.secret-access-key <S3_SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Fix: Update protobuf dep to v1.33.0\nDESCRIPTION: This commit updates the protobuf dependency to v1.33.0 in the `auth/oauth2adapt` package. This ensures compatibility with the latest protobuf features and resolves potential issues arising from older versions.  The commit hash is 30b038d8cac0b8cd5dd4761c87f3f298760dd33a.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n30b038d8cac0b8cd5dd4761c87f3f298760dd33a\n```\n\n----------------------------------------\n\nTITLE: Deserializing Trace Context from HTTP Headers in Go OpenTracing\nDESCRIPTION: Demonstrates how to extract trace context from incoming HTTP headers and create a server-side span. This completes the distributed tracing chain by linking the server span with the client operation that initiated the request.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n    var serverSpan opentracing.Span\n    appSpecificOperationName := ...\n    wireContext, err := opentracing.GlobalTracer().Extract(\n        opentracing.HTTPHeaders,\n        opentracing.HTTPHeadersCarrier(req.Header))\n    if err != nil {\n        // Optionally record something about err here\n    }\n\n    // Create the span referring to the RPC client if available.\n    // If wireContext == nil, a root span will be created.\n    serverSpan = opentracing.StartSpan(\n        appSpecificOperationName,\n        ext.RPCServerOption(wireContext))\n\n    defer serverSpan.Finish()\n\n    ctx := opentracing.ContextWithSpan(context.Background(), serverSpan)\n    ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using TDigest for Quantile and CDF Calculations in Go\nDESCRIPTION: This snippet demonstrates how to use the tdigest package to create a t-digest, add data points, compute quantiles, and calculate cumulative distribution functions (CDFs). It showcases the basic operations of the t-digest algorithm implementation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/influxdata/tdigest/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/influxdata/tdigest\"\n)\n\nfunc main() {\n\ttd := tdigest.NewWithCompression(1000)\n\tfor _, x := range []float64{1, 2, 3, 4, 5, 5, 4, 3, 2, 1} {\n\t\ttd.Add(x, 1)\n\t}\n\n\t// Compute Quantiles\n\tlog.Println(\"50th\", td.Quantile(0.5))\n\tlog.Println(\"75th\", td.Quantile(0.75))\n\tlog.Println(\"90th\", td.Quantile(0.9))\n\tlog.Println(\"99th\", td.Quantile(0.99))\n\n\t// Compute CDFs\n\tlog.Println(\"CDF(1) = \", td.CDF(1))\n\tlog.Println(\"CDF(2) = \", td.CDF(2))\n\tlog.Println(\"CDF(3) = \", td.CDF(3))\n\tlog.Println(\"CDF(4) = \", td.CDF(4))\n\tlog.Println(\"CDF(5) = \", td.CDF(5))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Runtime Config and Memberlist\nDESCRIPTION: Configuration blocks for runtime configuration reloading and memberlist (Gossip protocol). Controls how often to check runtime config files and defines memberlist settings for cluster coordination.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nruntime_config:\n  # (advanced) How often to check runtime config files.\n  # CLI flag: -runtime-config.reload-period\n  [period: <duration> | default = 10s]\n\n  # Comma separated list of yaml files with the configuration that can be\n  # updated at runtime. Runtime config files will be merged from left to right.\n  # CLI flag: -runtime-config.file\n  [file: <string> | default = \"\"]\n\n# The memberlist block configures the Gossip memberlist.\n[memberlist: <memberlist>]\n```\n\n----------------------------------------\n\nTITLE: Second Release Candidate\nDESCRIPTION: Second RC release addressing backwards incompatible changes in otel/trace package\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\notel: v1.0.0-RC2\notel/trace: v1.0.0-RC2\notel/baggage: v1.0.0-RC2\notel/sdk/trace: v1.0.0-RC2\n```\n\n----------------------------------------\n\nTITLE: Handling Errors when Initializing Go's Random Number Generator with seed.Init()\nDESCRIPTION: This snippet shows how to use the seed.Init() function to initialize the random number generator while handling potential errors. It allows for custom error handling instead of panicking.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sean-/seed/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Or if you want to not panic() and can actually handle this error:\nfunc init() {\n  if secure, err := !seed.Init(); !secure {\n    // Handle the error\n    //panic(fmt.Sprintf(\"Unable to securely seed Go's RNG: %v\", err))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fallback Lexer Handling in Go\nDESCRIPTION: This Go snippet illustrates using a fallback lexer in case the detection process does not identify a language. If the `lexer` is `nil`, it assigns a default fallback from the lexers.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nif lexer == nil {\n  lexer = lexers.Fallback\n}\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Backoff Minimum Period\nDESCRIPTION: This parameter configures the minimum delay duration during the backoff process when the client encounters rate limits. It affects how quickly the client retries after being rate-limited.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_84\n\nLANGUAGE: yaml\nCODE:\n```\n  backoff_config:\n    # (advanced) Minimum delay when backing off.\n    # CLI flag: -alertmanager.alertmanager-client.backoff-min-period\n    [min_period: <duration> | default = 100ms]\n\n```\n\n----------------------------------------\n\nTITLE: Fixing BlobDeleteType Enum in Swagger\nDESCRIPTION: Updates the BlobDeleteType enum in the Swagger document to include specific values.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters\n  transform: >\n    delete $.BlobDeleteType.enum;\n    $.BlobDeleteType.enum = [\n        \"None\",\n        \"Permanent\"\n    ];\n```\n\n----------------------------------------\n\nTITLE: View Compactor Ring Status\nDESCRIPTION: Provides a web page with details on the compactor hash ring status through a GET request, showing the state, health, and last heartbeat time of each compactor.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_54\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /compactor/ring\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Not Running Timeout Configuration\nDESCRIPTION: Defines the maximum time to wait for the query-frontend to become ready before rejecting requests. A value of 0 disables the timeout, causing the frontend to fail immediately if it's not running.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Maximum time to wait for the query-frontend to become ready before\\n# rejecting requests received before the frontend was ready. 0 to disable (i.e.\\n# fail immediately if a request is received while the frontend is still starting\\n# up)\\n# CLI flag: -query-frontend.not-running-timeout\\n[not_running_timeout: <duration> | default = 2s]\"\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release Draft\nDESCRIPTION: Script command to create a draft release on GitHub from the release branch.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout release-<version>\n./tools/release/create-draft-release.sh\n```\n\n----------------------------------------\n\nTITLE: Testing and Formatting Commands for go-jose\nDESCRIPTION: Commands for testing code, formatting it according to Go standards, and recommended tools for linting and error checking before submitting contributions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-jose/go-jose/v4/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo fmt\n```\n\nLANGUAGE: bash\nCODE:\n```\ngolint\n```\n\nLANGUAGE: bash\nCODE:\n```\nerrcheck\n```\n\n----------------------------------------\n\nTITLE: Starting OTEL Collector with Prometheus Remote Write\nDESCRIPTION: Command to start Mimir with OpenTelemetry collector configured to use Prometheus remote write protocol. Accepts OTEL metrics on ports 4317 (gRPC) and 4318 (HTTP).\nSOURCE: https://github.com/grafana/mimir/blob/main/development/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./compose-up.sh --profile otel-collector-remote-write\n```\n\n----------------------------------------\n\nTITLE: OpenURL Function Declaration in Go\nDESCRIPTION: Function declaration for OpenURL, which opens a new browser window pointing to the specified URL.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenURL(url string) error\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Trafficdump for Grafana Mimir\nDESCRIPTION: Commands for installing pcap library prerequisites and building the Trafficdump tool from source. The example shows how to navigate to the tool directory and compile the binary using make.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/trafficdump.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd mimir/tools/trafficdump\nmake\n```\n\n----------------------------------------\n\nTITLE: Enabling Timely Head Compaction in YAML\nDESCRIPTION: Enables timely head compaction on ingesters using the -blocks-storage.tsdb.timely-head-compaction-enabled CLI flag. This allows head compaction to occur when the min block range can no longer be appended.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n-blocks-storage.tsdb.timely-head-compaction-enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Read Path Sharding\nDESCRIPTION: Configuration flag for enabling shuffle sharding on ingester read path. Controls whether queriers and rulers fetch series from a subset of ingesters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-shuffle-sharding/index.md#2025-04-17_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n-querier.shuffle-sharding-ingesters-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Final Mimir Configuration for Zone-Aware Replication\nDESCRIPTION: This YAML snippet shows the final configuration for Mimir after completing the migration to zone-aware replication. It enables zone-aware replication for ingesters and the rollout operator.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Structured Logging Format Example\nDESCRIPTION: Example of converting traditional format string logging to structured key-value logging with constant messages.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlogger.Error(err, \"client returned an error\", \"code\", responseCode)\n```\n\nLANGUAGE: go\nCODE:\n```\nlogger.V(4).Info(\"got a retry-after response when requesting url\", \"attempt\", retries, \"after seconds\", seconds, \"url\", url)\n```\n\nLANGUAGE: go\nCODE:\n```\nlogger.Info(\"unable to reflect over type\", \"type\", fmt.Sprintf(\"%T\"))\n```\n\n----------------------------------------\n\nTITLE: Switching Primary and Secondary Stores\nDESCRIPTION: Step 3 configuration that switches memberlist to primary and Consul to secondary store.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-consul-to-memberlist.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    memberlist_ring_enabled: true,\n    multikv_migration_enabled: true,\n    multikv_mirror_enabled: true,\n    multikv_switch_primary_secondary: true,  // Changed in this step.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic xxhash Function API in Go\nDESCRIPTION: Shows the core API functions of the xxhash package for calculating 64-bit hashes of byte slices and strings.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling JMESPath Queries in Go\nDESCRIPTION: Demonstrates how to pre-compile JMESPath expressions for improved performance when executing the same query multiple times. This approach avoids re-parsing the expression with each search.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": \"bar\"}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nprecompiled, err := Compile(\"foo\")\nif err != nil{\n  // ... handle the error\n}\nresult, err := precompiled.Search(data)\nresult = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Legacy Mimir 2.x Configuration\nDESCRIPTION: Example values file compatible with Mimir 2.x showing memcached and storage configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-helm-chart-2.x-to-3.0.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrbac:\n  pspEnabled: false\n\nmemcached:\n  enabled: true\n  replicaCount: 1\n\nmemcached-queries:\n  enabled: true\n  replicaCount: 1\n\nmemcached-metadata:\n  enabled: true\n  replicaCount: 1\n\nmemcached-results:\n  enabled: true\n  replicaCount: 1\n\nserviceMonitor:\n  enabled: true\n\nmimir:\n  config: |-\n    blocks_storage:\n      backend: s3\n      s3:\n        endpoint: s3.amazonaws.com\n        bucket_name: my-blocks-bucket\n        access_key_id: FAKEACCESSKEY\n        secret_access_key: FAKESECRETKEY\n```\n\n----------------------------------------\n\nTITLE: Upload Block File to Store-gateway\nDESCRIPTION: Uploads a file to a specific block using a POST request with a compatible path, validating file contents and structure. The API enforces certain constraints, such as path validity.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_56\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST /api/v1/upload/block/{block}/files?path={path}\n```\n\n----------------------------------------\n\nTITLE: Profiling Command-Line Example with pprof\nDESCRIPTION: Demonstrates how to generate a heap profile over a 30-second interval using the standard Go profiling tool\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/pyroscope-go/godeltaprof/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof http://localhost:6060/debug/pprof/heap?seconds=30\n```\n\n----------------------------------------\n\nTITLE: Installing go-proxyproto Library in Go\nDESCRIPTION: Command to install the go-proxyproto library using go get.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pires/go-proxyproto/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u github.com/pires/go-proxyproto\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects from Azure Blob Storage\nDESCRIPTION: Example command to delete objects from Azure Blob Storage using the delete-objects program. Includes parameters for Azure container name, account name, and account key.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/delete-objects/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat objects-to-delete.txt | ./delete-objects \\\n    -concurrency 64 \\\n    -backend azure \\\n    -azure.container-name <AZURE_CONTAINER_NAME> \\\n    -azure.account-name <AZURE_ACCOUNT_NAME> \\\n    -azure.account-key <AZURE_ACCOUNT_KEY>\n```\n\n----------------------------------------\n\nTITLE: Manual Index Loading\nDESCRIPTION: Shows how to manually load an S2 compression index from bytes without using a decoder.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n\tvar index s2.Index\n\t_, err = index.Load(idxBytes)\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go Repository Using Git\nDESCRIPTION: This snippet details how to clone the OpenTelemetry Go repository using git directly instead of using the go command. This method allows developers to work with the project in a standard git environment.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Sending Kafka Records with OpenTelemetry Tracing in Go\nDESCRIPTION: This example shows how to send Kafka records with OpenTelemetry tracing using Kotel. It demonstrates creating a new span, producing a record with the traced context, and handling errors while maintaining the trace.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/twmb/franz-go/plugin/kotel/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc httpHandler(w http.ResponseWriter, r *http.Request) {\n\t// Start a new span with options.\n\topts := []trace.SpanStartOption{\n\t\ttrace.WithSpanKind(trace.SpanKindServer),\n\t\ttrace.WithAttributes([]attribute.KeyValue{attribute.String(\"some-key\", \"foo\")}...),\n\t}\n\tctx, span := tracer.Start(r.Context(), \"request\", opts...)\n\t// End the span when function exits.\n\tdefer span.End()\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\trecord := &kgo.Record{Topic: \"topic\", Value: []byte(\"foo\")}\n\t// Pass in the context from the tracer.Start() call to ensure that the span\n\t// created is linked to the parent span.\n\tcl.Produce(ctx, record, func(_ *kgo.Record, err error) {\n\t\tdefer wg.Done()\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"record had a produce error: %v\\n\", err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\tspan.RecordError(err)\n\t\t}\n\t})\n\twg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query-Frontend and Querier for Ring-Based Discovery in YAML\nDESCRIPTION: YAML configuration for setting up the query-frontend and querier to use ring-based discovery for query-schedulers. This includes enabling ring mode, removing DNS-based discovery, and configuring the ring store backend.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/query-scheduler/index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n-query-scheduler.service-discovery-mode=ring\n\n# Remove the DNS-based service discovery configuration:\n# -query-frontend.scheduler-address\n\n# Configure the query-scheduler ring backend (e.g. \"memberlist\").\n-query-scheduler.ring.store=<backend>\n\n# If the configured <backend> is \"memberlist\", then ensure memberlist is configured for the query-scheduler.\n-memberlist.join=<same as other Mimir components>\n\n# If the configured <backend> is \"consul\" or \"etcd\", then set their backend configuration\n# for the query-scheduler ring:\n# - Consul: -query-scheduler.ring.consul.*\n# - Ecd:    -query-scheduler.ring.etcd.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Jaeger Tracer with Prometheus Metrics in Go\nDESCRIPTION: Example of initializing a Jaeger tracer with Prometheus metrics factory using the Configuration struct.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/uber/jaeger-client-go/config\"\n    \"github.com/uber/jaeger-lib/metrics/prometheus\"\n)\n\n    metricsFactory := prometheus.New()\n    tracer, closer, err := config.Configuration{\n        ServiceName: \"your-service-name\",\n    }.NewTracer(\n        config.Metrics(metricsFactory),\n    )\n```\n\n----------------------------------------\n\nTITLE: Notifying Changelog Cut in Bash\nDESCRIPTION: Script execution command to notify open PRs about changelog changes for the Mimir Helm chart release process.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/RELEASE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./tools/release/notify-changelog-cut.sh operations/helm/charts/mimir-distributed/CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Backend in YAML\nDESCRIPTION: This snippet defines configuration options for the Amazon S3 object storage backend, including endpoint, authentication, and advanced settings. It uses YAML format with CLI flag mappings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_146\n\nLANGUAGE: yaml\nCODE:\n```\n# The S3 bucket endpoint. It could be an AWS S3 endpoint listed at\n# https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an\n# S3-compatible service in hostname:port format.\n# CLI flag: -<prefix>.s3.endpoint\n[endpoint: <string> | default = \"\"]\n\n# S3 region. If unset, the client will issue a S3 GetBucketLocation API call to\n# autodetect it.\n# CLI flag: -<prefix>.s3.region\n[region: <string> | default = \"\"]\n\n# S3 bucket name\n# CLI flag: -<prefix>.s3.bucket-name\n[bucket_name: <string> | default = \"\"]\n\n# S3 secret access key\n# CLI flag: -<prefix>.s3.secret-access-key\n[secret_access_key: <string> | default = \"\"]\n\n# S3 access key ID\n# CLI flag: -<prefix>.s3.access-key-id\n[access_key_id: <string> | default = \"\"]\n\n# S3 session token\n# CLI flag: -<prefix>.s3.session-token\n[session_token: <string> | default = \"\"]\n\n# (advanced) If enabled, use http:// for the S3 endpoint instead of https://.\n# This could be useful in local dev/test environments while using an\n# S3-compatible backend storage, like Minio.\n# CLI flag: -<prefix>.s3.insecure\n[insecure: <boolean> | default = false]\n\n# (advanced) The signature version to use for authenticating against S3.\n# Supported values are: v4, v2.\n# CLI flag: -<prefix>.s3.signature-version\n[signature_version: <string> | default = \"v4\"]\n\n# (advanced) Use a specific version of the S3 list object API. Supported values\n# are v1 or v2. Default is unset.\n# CLI flag: -<prefix>.s3.list-objects-version\n[list_objects_version: <string> | default = \"\"]\n\n# (advanced) Bucket lookup style type, used to access bucket in S3-compatible\n# service. Default is auto. Supported values are: auto, path, virtual-hosted.\n# CLI flag: -<prefix>.s3.bucket-lookup-type\n[bucket_lookup_type: <string> | default = \"auto\"]\n\n# (experimental) When enabled, direct all AWS S3 requests to the dual-stack\n# IPv4/IPv6 endpoint for the configured region.\n# CLI flag: -<prefix>.s3.dualstack-enabled\n[dualstack_enabled: <boolean> | default = true]\n\n# (experimental) The S3 storage class to use, not set by default. Details can be\n# found at https://aws.amazon.com/s3/storage-classes/. Supported values are:\n# STANDARD, REDUCED_REDUNDANCY, STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING,\n# GLACIER, DEEP_ARCHIVE, OUTPOSTS, GLACIER_IR, SNOW, EXPRESS_ONEZONE\n# CLI flag: -<prefix>.s3.storage-class\n[storage_class: <string> | default = \"\"]\n\n# (experimental) If enabled, it will use the default authentication methods of\n# the AWS SDK for go based on known environment variables and known AWS config\n# files.\n# CLI flag: -<prefix>.s3.native-aws-auth-enabled\n[native_aws_auth_enabled: <boolean> | default = false]\n\n# (experimental) The minimum file size in bytes used for multipart uploads. If\n# 0, the value is optimally computed for each object.\n# CLI flag: -<prefix>.s3.part-size\n[part_size: <int> | default = 0]\n\n# (experimental) If enabled, a Content-MD5 header is sent with S3 Put Object\n# requests. Consumes more resources to compute the MD5, but may improve\n# compatibility with object storage services that do not support checksums.\n# CLI flag: -<prefix>.s3.send-content-md5\n[send_content_md5: <boolean> | default = false]\n\n# Accessing S3 resources using temporary, secure credentials provided by AWS\n# Security Token Service.\n# CLI flag: -<prefix>.s3.sts-endpoint\n[sts_endpoint: <string> | default = \"\"]\n\nsse:\n  # Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.\n  # CLI flag: -<prefix>.s3.sse.type\n  [type: <string> | default = \"\"]\n\n  # KMS Key ID used to encrypt objects in S3\n  # CLI flag: -<prefix>.s3.sse.kms-key-id\n  [kms_key_id: <string> | default = \"\"]\n\n  # KMS Encryption Context used for object encryption. It expects JSON formatted\n  # string.\n  # CLI flag: -<prefix>.s3.sse.kms-encryption-context\n  [kms_encryption_context: <string> | default = \"\"]\n\nhttp:\n  # (advanced) The time an idle connection remains idle before closing.\n  # CLI flag: -<prefix>.s3.http.idle-conn-timeout\n  [idle_conn_timeout: <duration> | default = 1m30s]\n\n  # (advanced) The amount of time the client waits for a server's response\n  # headers.\n  # CLI flag: -<prefix>.s3.http.response-header-timeout\n  [response_header_timeout: <duration> | default = 2m]\n\n  # (advanced) If the client connects to object storage via HTTPS and this\n  # option is enabled, the client accepts any certificate and hostname.\n  # CLI flag: -<prefix>.s3.http.insecure-skip-verify\n  [insecure_skip_verify: <boolean> | default = false]\n\n  # (advanced) Maximum time to wait for a TLS handshake. Set to 0 for no limit.\n  # CLI flag: -<prefix>.s3.tls-handshake-timeout\n  [tls_handshake_timeout: <duration> | default = 10s]\n\n  # (advanced) The time to wait for a server's first response headers after\n  # fully writing the request headers if the request has an Expect header. Set\n  # to 0 to send the request body immediately.\n  # CLI flag: -<prefix>.s3.expect-continue-timeout\n  [expect_continue_timeout: <duration> | default = 1s]\n\n  # (advanced) Maximum number of idle (keep-alive) connections across all hosts.\n  # Set to 0 for no limit.\n  # CLI flag: -<prefix>.s3.max-idle-connections\n  [max_idle_connections: <int> | default = 100]\n\n  # (advanced) Maximum number of idle (keep-alive) connections to keep per-host.\n  # Set to 0 to use a built-in default value of 2.\n  # CLI flag: -<prefix>.s3.max-idle-connections-per-host\n  [max_idle_connections_per_host: <int> | default = 100]\n\n  # (advanced) Maximum number of connections per host. Set to 0 for no limit.\n  # CLI flag: -<prefix>.s3.max-connections-per-host\n  [max_connections_per_host: <int> | default = 0]\n\n  # (advanced) Path to the Certificate Authority (CA) certificates to validate\n  # the server certificate. If not set, the host's root CA certificates are\n  # used.\n  # CLI flag: -<prefix>.s3.http.tls-ca-path\n  [tls_ca_path: <string> | default = \"\"]\n\n  # (advanced) Path to the client certificate, which is used for authenticating\n  # with the server. This setting also requires you to configure the key path.\n  # CLI flag: -<prefix>.s3.http.tls-cert-path\n  [tls_cert_path: <string> | default = \"\"]\n\n  # (advanced) Path to the key for the client certificate. This setting also\n  # requires you to configure the client certificate.\n  # CLI flag: -<prefix>.s3.http.tls-key-path\n  [tls_key_path: <string> | default = \"\"]\n\n  # (advanced) Override the expected name on the server certificate.\n  # CLI flag: -<prefix>.s3.http.tls-server-name\n  [tls_server_name: <string> | default = \"\"]\n\ntrace:\n  # (advanced) When enabled, low-level S3 HTTP operation information is logged\n  # at the debug level.\n  # CLI flag: -<prefix>.s3.trace.enabled\n  [enabled: <boolean> | default = false]\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining page metadata, aliases, and navigation properties for the DNS service discovery documentation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/about-dns-service-discovery.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n  - ../configuring/about-dns-service-discovery/\ndescription:\n  DNS service discovery finds addresses of backend services to which Grafana\n  Mimir connects.\nmenuTitle: DNS service discovery\ntitle: About Grafana Mimir DNS service discovery\nweight: 20\n```\n\n----------------------------------------\n\nTITLE: Feature: Make externalaccount Public\nDESCRIPTION: This commit makes the `externalaccount` package public within the `auth` module. This allows external users and services to directly utilize the external account authentication functionality, promoting greater flexibility and integration capabilities. This change addresses issue #9633.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\na0978d8e96968399940ebd7d092539772bf9caac\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Kubernetes\nDESCRIPTION: Example showing how to configure environment variables for accessing secrets in Kubernetes using extraEnvFrom.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-helm-chart-2.x-to-3.0.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  extraEnvFrom:\n    - secretRef:\n        name: mysecret\n```\n\n----------------------------------------\n\nTITLE: Configuring Geographical Zones for Alertmanager Replication\nDESCRIPTION: YAML configuration to set up geographical zones for alertmanager replication, specifying node selectors for different availability zones.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n  zoneAwareReplication:\n    topologyKey: \"kubernetes.io/hostname\" # Triggers creating anti-affinity rules\n    zones:\n      - name: zone-a\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-a\n      - name: zone-b\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-b\n      - name: zone-c\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-c\n```\n\n----------------------------------------\n\nTITLE: Cloning the Jaeger Client Go Repository\nDESCRIPTION: Commands to properly clone the Jaeger client Go repository into the correct GOPATH location and initialize the project.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/github.com/uber\ncd $GOPATH/src/github.com/uber\ngit clone git@github.com:jaegertracing/jaeger-client-go.git jaeger-client-go\ncd jaeger-client-go\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Ring and Partition Ring in YAML for Grafana Mimir\nDESCRIPTION: This YAML configuration block defines the settings for the ingester's ring and partition ring. It includes options for key-value store, heartbeat periods, replication factors, zone awareness, and token generation strategies. The configuration also covers partition ownership and deletion policies.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nring:\n  kvstore:\n    [store: <string> | default = \"memberlist\"]\n    [prefix: <string> | default = \"collectors/\"]\n    [consul: <consul>]\n    [etcd: <etcd>]\n    multi:\n      [primary: <string> | default = \"\"]\n      [secondary: <string> | default = \"\"]\n      [mirror_enabled: <boolean> | default = false]\n      [mirror_timeout: <duration> | default = 2s]\n  [heartbeat_period: <duration> | default = 15s]\n  [heartbeat_timeout: <duration> | default = 1m]\n  [replication_factor: <int> | default = 3]\n  [zone_awareness_enabled: <boolean> | default = false]\n  [excluded_zones: <string> | default = \"\"]\n  [tokens_file_path: <string> | default = \"\"]\n  [num_tokens: <int> | default = 128]\n  [instance_id: <string> | default = \"<hostname>\"]\n  [instance_interface_names: <list of strings> | default = [<private network interfaces>]]\n  [instance_port: <int> | default = 0]\n  [instance_addr: <string> | default = \"\"]\n  [instance_enable_ipv6: <boolean> | default = false]\n  [instance_availability_zone: <string> | default = \"\"]\n  [unregister_on_shutdown: <boolean> | default = true]\n  [observe_period: <duration> | default = 0s]\n  [min_ready_duration: <duration> | default = 15s]\n  [final_sleep: <duration> | default = 0s]\n  [token_generation_strategy: <string> | default = \"random\"]\n  [spread_minimizing_join_ring_in_order: <boolean> | default = false]\n  [spread_minimizing_zones: <string> | default = \"\"]\n\npartition_ring:\n  kvstore:\n    [store: <string> | default = \"memberlist\"]\n    [prefix: <string> | default = \"collectors/\"]\n    [consul: <consul>]\n    [etcd: <etcd>]\n    multi:\n      [primary: <string> | default = \"\"]\n      [secondary: <string> | default = \"\"]\n      [mirror_enabled: <boolean> | default = false]\n      [mirror_timeout: <duration> | default = 2s]\n  [min_partition_owners_count: <int> | default = 1]\n  [min_partition_owners_duration: <duration> | default = 10s]\n  [delete_inactive_partition_after: <duration> | default = 13h]\n\n[metadata_retain_period: <duration> | default = 10m]\n[rate_update_period: <duration> | default = 15s]\n[active_series_metrics_enabled: <boolean> | default = true]\n[active_series_metrics_update_period: <duration> | default = 1m]\n```\n\n----------------------------------------\n\nTITLE: No code snippets present\nDESCRIPTION: This document contains explanatory text and architectural details but no actual code snippets to document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating Deletion Marks with mark-blocks Tool in Bash\nDESCRIPTION: This snippet demonstrates how to use the mark-blocks tool to create deletion marks for specified blocks. It shows the directory structure before and after running the tool, and includes the command to create deletion marks with details.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/mark-blocks.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS7Z\n\n$ touch tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/meta.json\n\n$ tree -f tenant-1\ntenant-1\n├── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R\n│   └── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/meta.json\n└── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS7Z\n\n3 directories, 1 file\n\n$ go run ./tools/mark-blocks -mark-type deletion -tenant tenant-1 -details \"Corrupted blocks\" -blocks \"01FSCTA0A4M1YQHZQ4B2VTGS2R,01FSCTA0A4M1YQHZQ4B2VTGS7Z\"\nlevel=info time=2025-02-10T14:23:17.594517Z msg=\"skipping block because its meta.json was not found: 01FSCTA0A4M1YQHZQ4B2VTGS7Z\"\nlevel=info time=2025-02-10T14:23:17.594747Z msg=\"uploaded mark to tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/deletion-mark.json\"\nlevel=info time=2025-02-10T14:23:17.594945Z msg=\"uploaded mark to tenant-1/markers/01FSCTA0A4M1YQHZQ4B2VTGS2R-deletion-mark.json\"\n\n$ tree -f tenant-1\ntenant-1\n├── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R\n│   ├── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/deletion-mark.json\n│   └── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/meta.json\n├── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS7Z\n└── tenant-1/markers\n    └── tenant-1/markers/01FSCTA0A4M1YQHZQ4B2VTGS2R-deletion-mark.json\n\n4 directories, 3 files\n```\n\n----------------------------------------\n\nTITLE: Querier: Minimize Ingester Requests Configuration\nDESCRIPTION: Determines whether to query only the minimum required ingesters initially to reach quorum. Enabling this setting reduces resource consumption at the cost of increased latency for the unhappy path when ingester failures occur.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n\"# (advanced) If true, when querying ingesters, only the minimum required\\n# ingesters required to reach quorum will be queried initially, with other\\n# ingesters queried only if needed due to failures from the initial set of\\n# ingesters. Enabling this option reduces resource consumption for the happy\\n# path at the cost of increased latency for the unhappy path.\\n# CLI flag: -querier.minimize-ingester-requests\\n[minimize_ingester_requests: <boolean> | default = true]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Federation Max Tenants in YAML\nDESCRIPTION: Sets the maximum number of tenant IDs allowed for a federated query using the -tenant-federation.max-tenants CLI flag on query-frontends. Default is 0, which disables the limit.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-tenant-federation.max-tenants: 0\n```\n\n----------------------------------------\n\nTITLE: Release Process Commands - Branch Creation\nDESCRIPTION: Commands for creating a new release branch from the latest weekly release.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout r<xxx> # xxx is the latest weekly release\ngit checkout -b release-<version>\ngit push -u origin release-<version>\n```\n\n----------------------------------------\n\nTITLE: Azure Client Secret Error Response Example\nDESCRIPTION: Example of an error response from an invalid client secret authentication attempt, showing the structure of authentication error messages including error codes, descriptions, and correlation IDs.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"AADSTS7000215: Invalid client secret provided. Ensure the secret being sent in the request is the client secret value, not the client secret ID, for a secret added to app '86be4c01-505b-45e9-bfc0-9b825fd84'.\\r\\nTrace ID: 03da4b8e-5ffe-48ca-9754-aff4276f0100\\r\\nCorrelation ID: 7b12f9bb-2eef-42e3-ad75-eee69ec9088d\\r\\nTimestamp: 2022-03-02 18:25:26Z\",\n  \"error_codes\": [\n    7000215\n  ],\n  \"timestamp\": \"2022-03-02 18:25:26Z\",\n  \"trace_id\": \"03da4b8e-5ffe-48ca-9754-aff4276f0100\",\n  \"correlation_id\": \"7b12f9bb-2eef-42e3-ad75-eee69ec9088d\",\n  \"error_uri\": \"https://login.microsoftonline.com/error?code=7000215\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Runtime Configuration Differences in Grafana Mimir\nDESCRIPTION: This endpoint displays the differences between the Grafana Mimir default runtime configuration and the current runtime configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET /runtime_config?mode=diff\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Resource Information\nDESCRIPTION: Bash command to get information about existing Service resources. This helps identify the service name that needs to be preserved during migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubecl get service\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account using Azure CLI\nDESCRIPTION: Command to create a new Azure storage account using the Azure CLI with Standard LRS redundancy.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Custom Index Forward Seeking\nDESCRIPTION: Shows how to use a custom index for forward-only seeking. The input stream doesn't need to support seeking since a custom index is provided.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(false, index)\n\trs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: Request Context Method\nDESCRIPTION: Added WithContext() method to runtime.Request type for shallow cloning with a new context\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *Request) WithContext(ctx context.Context) *Request\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Const Type Names in Swagger\nDESCRIPTION: Modifies various enum and parameter names in the Swagger document to avoid stuttering and improve clarity.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters['BlobDeleteType']\n  transform: >\n    $[\"x-ms-enum\"].name = \"DeleteType\";\n    $[\"x-ms-client-name\"] = \"DeleteType\";\n\n- from: swagger-document\n  where: $.parameters['BlobExpiryOptions']\n  transform: >\n    $[\"x-ms-enum\"].name = \"ExpiryOptions\";\n    $[\"x-ms-client-name\"].name = \"ExpiryOptions\";\n\n- from: swagger-document\n  where: $[\"x-ms-paths\"][*].*.responses[*].headers[\"x-ms-immutability-policy-mode\"]\n  transform: >\n    $[\"x-ms-client-name\"].name = \"ImmutabilityPolicyMode\";\n    $.enum = [ \"Mutable\", \"Unlocked\", \"Locked\"];\n    $[\"x-ms-enum\"] = { \"name\": \"ImmutabilityPolicyMode\", \"modelAsString\": false };\n\n- from: swagger-document\n  where: $.parameters['ImmutabilityPolicyMode']\n  transform: >\n    $[\"x-ms-enum\"].name = \"ImmutabilityPolicySetting\";\n    $[\"x-ms-client-name\"].name = \"ImmutabilityPolicySetting\";\n\n- from: swagger-document\n  where: $.definitions['BlobPropertiesInternal']\n  transform: >\n    $.properties.ImmutabilityPolicyMode[\"x-ms-enum\"].name = \"ImmutabilityPolicyMode\";\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Microservice Components\nDESCRIPTION: Configuration to scale down replicas for all microservice components during migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_5\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    multi_zone_store_gateway_replicas: 0,\n    autoscaling_querier_enabled: false,\n  },\n\n  query_frontend_deployment+:\n    deployment.mixin.spec.withReplicas(0),\n\n  query_scheduler_deployment+:\n    deployment.mixin.spec.withReplicas(0),\n\n  querier_deployment+:\n    deployment.mixin.spec.withReplicas(0),\n\n  ruler_deployment+:\n    deployment.mixin.spec.withReplicas(0),\n\n  overrides_exporter_deployment+:\n    deployment.mixin.spec.withReplicas(0),\n\n  compactor_statefulset+:\n    statefulSet.mixin.spec.withReplicas(0),\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Koanf Core and Providers\nDESCRIPTION: Shell commands for installing the koanf core library along with various providers and parsers\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install the core.\ngo get -u github.com/knadh/koanf/v2\n\n# Install the necessary Provider(s).\n# Available: file, env, posflag, basicflag, confmap, rawbytes,\n#            structs, fs, s3, appconfig/v2, consul/v2, etcd/v2, vault/v2, parameterstore/v2\n# eg: go get -u github.com/knadh/koanf/providers/s3\n# eg: go get -u github.com/knadh/koanf/providers/consul/v2\n\ngo get -u github.com/knadh/koanf/providers/file\n\n\n# Install the necessary Parser(s).\n# Available: toml, toml/v2, json, yaml, dotenv, hcl, hjson, nestedtext\n# go get -u github.com/knadh/koanf/parsers/$parser\n\ngo get -u github.com/knadh/koanf/parsers/toml\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Context in Go\nDESCRIPTION: Example of how to add or modify tags in the current context using the tag package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Upsert(userIDKey, \"cde36753ed\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using slog.Handler with logr\nDESCRIPTION: Instructions for using a plain slog.Handler as a backend for logr logging. Explains mapping of verbosity levels, stack unwinding, logger naming, and error handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-17_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Looping Over Validation Errors in Go\nDESCRIPTION: Shows how to iterate over individual validation errors returned by GoValidator.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n  errs := err.(govalidator.Errors).Errors()\n  for _, e := range errs {\n    fmt.Println(e.Error())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Ingress Controller\nDESCRIPTION: Command to deploy the NGINX ingress controller in the Kubernetes cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/configurations/grafanacon-2022/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.2/deploy/static/provider/cloud/deploy.yaml\n```\n\n----------------------------------------\n\nTITLE: Feature: External Account Default TokenURL\nDESCRIPTION: This commit adds a default TokenURL for external accounts in the `auth/credentials/externalaccount` package.  This enhancement simplifies the configuration and usage of external accounts for authentication by providing a default endpoint for token retrieval. The change is associated with issue #9700.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n81830e6848ceefd055aa4d08f933d1154455a0f6\n```\n\n----------------------------------------\n\nTITLE: Setting Dialer Name in Context for Connection Tracking in Go\nDESCRIPTION: Demonstrates how to set a specific dialer name for a single HTTP request by using conntrack.DialNameToContext with the ctxhttp library. This allows categorizing and labeling connections by their purpose.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncallCtx := conntrack.DialNameToContext(parentCtx, \"google\")\nctxhttp.Get(callCtx, http.DefaultClient, \"https://www.google.com\")\n```\n\n----------------------------------------\n\nTITLE: Downloading query-tee Binary for Linux AMD64\nDESCRIPTION: Commands to download the query-tee binary for Linux AMD64 architecture from the GitHub releases page and make it executable.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/query-tee.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lo query-tee https://github.com/grafana/mimir/releases/latest/download/query-tee-linux-amd64\nchmod +x query-tee\n```\n\n----------------------------------------\n\nTITLE: Creating Release Branch in Git\nDESCRIPTION: Git commands to create and push a new release branch for the Mimir Helm chart from the main branch.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/RELEASE.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\ngit checkout origin/main\ngit checkout -b mimir-distributed-release-<version>\ngit push -u origin mimir-distributed-release-<version>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Settings in Grafana Mimir\nDESCRIPTION: Logging configuration including format, level, source IP tracking, and request header logging. Provides control over log verbosity, format, and contents for troubleshooting and auditing.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# Output log messages in the given format. Valid formats: [logfmt, json]\n# CLI flag: -log.format\n[log_format: <string> | default = \"logfmt\"]\n\n# Only log messages with the given severity or above. Valid levels: [debug,\n# info, warn, error]\n# CLI flag: -log.level\n[log_level: <string> | default = \"info\"]\n\n# (advanced) Optionally log the source IPs.\n# CLI flag: -server.log-source-ips-enabled\n[log_source_ips_enabled: <boolean> | default = false]\n\n# Log all source IPs instead of only the originating one. Only used if\n# server.log-source-ips-enabled is true\n# CLI flag: -server.log-source-ips-full\n[log_source_ips_full: <boolean> | default = false]\n\n# (advanced) Header field storing the source IPs. Only used if\n# server.log-source-ips-enabled is true. If not set the default Forwarded,\n# X-Real-IP and X-Forwarded-For headers are used\n# CLI flag: -server.log-source-ips-header\n[log_source_ips_header: <string> | default = \"\"]\n\n# (advanced) Regex for matching the source IPs. Only used if\n# server.log-source-ips-enabled is true. If not set the default Forwarded,\n# X-Real-IP and X-Forwarded-For headers are used\n# CLI flag: -server.log-source-ips-regex\n[log_source_ips_regex: <string> | default = \"\"]\n\n# Optionally log request headers.\n# CLI flag: -server.log-request-headers\n[log_request_headers: <boolean> | default = false]\n\n# (advanced) Optionally log requests at info level instead of debug level.\n# Applies to request headers as well if server.log-request-headers is enabled.\n# CLI flag: -server.log-request-at-info-level-enabled\n[log_request_at_info_level_enabled: <boolean> | default = false]\n\n# Comma separated list of headers to exclude from loggin. Only used if\n# server.log-request-headers is true.\n# CLI flag: -server.log-request-headers-exclude-list\n[log_request_exclude_headers_list: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Decompression with S2 in Go\nDESCRIPTION: Shows how to decompress data using S2's streaming interface. Creates a new reader and copies decompressed data from source to destination\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc DecodeStream(src io.Reader, dst io.Writer) error {\n    dec := s2.NewReader(src)\n    _, err := io.Copy(dst, dec)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Chroma v2 in Go\nDESCRIPTION: Shows how to import version 2 of the Chroma library in Go code.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/alecthomas/chroma/v2\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the unit tests suite for Grafana Mimir\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Previewing Helm Template Output for Mimir Configuration\nDESCRIPTION: Command to preview the generated Kubernetes configuration before installation, targeting the mimir-config template specifically.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n mimir-test template mimir grafana/mimir-distributed -f custom.yaml -s templates/mimir-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic Telebot Bot Setup\nDESCRIPTION: Minimal example showing how to create a new Telegram bot with Telebot, including token configuration, poller setup, and basic command handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\ttele \"gopkg.in/telebot.v3\"\n)\n\nfunc main() {\n\tpref := tele.Settings{\n\t\tToken:  os.Getenv(\"TOKEN\"),\n\t\tPoller: &tele.LongPoller{Timeout: 10 * time.Second},\n\t}\n\n\tb, err := tele.NewBot(pref)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\n\tb.Handle(\"/hello\", func(c tele.Context) error {\n\t\treturn c.Send(\"Hello!\")\n\t})\n\n\tb.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Migration Configuration for Mimir Ingesters in YAML\nDESCRIPTION: This YAML configuration enables zone-aware replication and migration for Mimir ingesters. It sets up the initial state for the migration process with zero replicas and enables the rollout operator.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n      replicas: 0\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: System Call Interface Functions in Go\nDESCRIPTION: Core system call interface functions implemented in assembly that provide different methods for making system calls. The functions vary in argument capacity and scheduler interaction.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n  func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n  func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\n  func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Mimir Overrides-Exporter\nDESCRIPTION: Command to run the overrides-exporter component of Grafana Mimir. It specifies the target as 'overrides-exporter' and provides the path to the runtime configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/overrides-exporter.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmimir -target=overrides-exporter -runtime-config.file=runtime.yaml\n```\n\n----------------------------------------\n\nTITLE: Temporary Migration Using Go Modules Replace\nDESCRIPTION: Go modules replace directive to use the v1 branch of go-viper/mapstructure instead of mitchellh/mapstructure. This allows for a gradual migration to the new repository.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreplace github.com/mitchellh/mapstructure => github.com/go-viper/mapstructure v1.6.0\n```\n\n----------------------------------------\n\nTITLE: Defining and Creating Custom Errors with Stacktrace in Go\nDESCRIPTION: This snippet demonstrates how to define a custom error and create a new error with stacktrace using the go-errors/errors package. It shows the creation of a package-level error variable and a function that returns a new error instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-errors/errors/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage crashy\n\nimport \"github.com/go-errors/errors\"\n\nvar Crashed = errors.Errorf(\"oh dear\")\n\nfunc Crash() error {\n    return errors.New(Crashed)\n}\n```\n\n----------------------------------------\n\nTITLE: KEDA Autoscaling PromQL Label Selector Change\nDESCRIPTION: Example demonstrating the change in toPromQLLabelSelector from object to list of strings to support all PromQL operators.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntoPromQLLabelSelector: [\"namespace=~\\\".*\\\"\", \"pod=~\\\"mimir-.*\\\"\"]\"\n```\n\n----------------------------------------\n\nTITLE: Importing Browser Package in Go\nDESCRIPTION: Import statement for the browser package from GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pkg/browser\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Dictionary in Sprig Templates\nDESCRIPTION: Demonstrates how to use the 'dict' function to create a dictionary (key-value pairs) within a Sprig template. This is useful for organizing and accessing structured data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{$d := dict \"key1\" \"val1\" \"key2\" \"val2\"}}\n```\n\n----------------------------------------\n\nTITLE: Consul Client Configuration in YAML\nDESCRIPTION: Configuration block for setting up Consul client connections. Includes settings for hostname, ACL tokens, timeouts, rate limits and retry behavior. Used by various Mimir components like alertmanager, compactor, distributor etc.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_114\n\nLANGUAGE: yaml\nCODE:\n```\n# Hostname and port of Consul.\n# CLI flag: -<prefix>.consul.hostname\n[host: <string> | default = \"localhost:8500\"]\n\n# (advanced) ACL Token used to interact with Consul.\n# CLI flag: -<prefix>.consul.acl-token\n[acl_token: <string> | default = \"\"]\n\n# (advanced) HTTP timeout when talking to Consul\n# CLI flag: -<prefix>.consul.client-timeout\n[http_client_timeout: <duration> | default = 20s]\n\n# (advanced) Enable consistent reads to Consul.\n# CLI flag: -<prefix>.consul.consistent-reads\n[consistent_reads: <boolean> | default = false]\n\n# (advanced) Rate limit when watching key or prefix in Consul, in requests per\n# second. 0 disables the rate limit.\n# CLI flag: -<prefix>.consul.watch-rate-limit\n[watch_rate_limit: <float> | default = 1]\n\n# (advanced) Burst size used in rate limit. Values less than 1 are treated as 1.\n# CLI flag: -<prefix>.consul.watch-burst-size\n[watch_burst_size: <int> | default = 1]\n\n# (advanced) Maximum duration to wait before retrying a Compare And Swap (CAS)\n# operation.\n# CLI flag: -<prefix>.consul.cas-retry-delay\n[cas_retry_delay: <duration> | default = 1s]\n```\n\n----------------------------------------\n\nTITLE: Generating Lexer Go Code with Golex\nDESCRIPTION: Command to generate Go code from the lexer definition file using golex. Used after making changes to promlex.l or openmetricslex.l files.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/model/textparse/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngolex -o=promlex.l.go promlex.l\n```\n\n----------------------------------------\n\nTITLE: Using JSON Colorize Option for Encoding\nDESCRIPTION: Example demonstrating how to use the Colorize option introduced in v0.6.0 to generate colored JSON output for better readability.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nb, err := json.MarshalWithOption(v, json.Colorize(json.DefaultColorScheme))\nif err != nil {\n  ...\n}\nfmt.Println(string(b)) // print colored json\n```\n\n----------------------------------------\n\nTITLE: Setting Baggage Items Programmatically in Go\nDESCRIPTION: Demonstrates how to programmatically set baggage items within a service using the OpenTracing API. Baggage items are key-value pairs attached to the span context and propagated throughout the trace.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nif span := opentracing.SpanFromContext(ctx); span != nil {\n    span.SetBaggageItem(\"key\", \"value\")\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing JSON Import Statement\nDESCRIPTION: Example showing how to replace the standard encoding/json import with go-json\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-import \"encoding/json\"\n+import \"github.com/goccy/go-json\"\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag in pflag\nDESCRIPTION: This example demonstrates how to deprecate a flag in pflag, which hides it from help text and prints a usage message when the deprecated flag is used.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration block for connecting to Amazon S3 object storage backend in Grafana Mimir. This block uses the CLI flags prefix 'blocks-storage'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_130\n\nLANGUAGE: toml\nCODE:\n```\n[s3: <s3_storage_backend>]\n```\n\n----------------------------------------\n\nTITLE: Configuring the System-Wide Logger with hclog in Go\nDESCRIPTION: This snippet shows how to configure the system-wide logger (from `import \"log\"`) to use `hclog` by wrapping it with `StandardWriter()`. This redirects all standard library logging output to the `hclog` instance, allowing consistent logging across the application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\"// log the standard logger from 'import \\\"log\\\"'\nlog.SetOutput(appLogger.StandardWriter(&hclog.StandardLoggerOptions{InferLevels: true}))\nlog.SetPrefix(\\\"\")\nlog.SetFlags(0)\n\nlog.Printf(\\\"[DEBUG] %d\\\", 42)\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant Limits in Grafana Mimir\nDESCRIPTION: This experimental API returns realtime limits for the authenticated tenant in JSON format. It requires authentication and the -runtime-config.file option to be configured.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/user_limits\n```\n\n----------------------------------------\n\nTITLE: Installing Compress Package in Go\nDESCRIPTION: Command to add the compress package to a Go project using go get. This will fetch the latest version of the package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/klauspost/compress@latest\n```\n\n----------------------------------------\n\nTITLE: Error Cause Interface Definition\nDESCRIPTION: Defines the causer interface that allows errors to be unwrapped to find their original cause.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data in PromQL Test Scripts\nDESCRIPTION: Shows the syntax for the 'load' command, which adds data to the test environment. It includes an example of loading a metric with various data points and a native histogram.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/promql/promqltest/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nload 1m\n    my_metric{env=\"prod\"} 5 2+3x2 _ stale {{schema:1 sum:3 count:22 buckets:[5 10 7]}}\n```\n\n----------------------------------------\n\nTITLE: Fix: uint32 Conversion\nDESCRIPTION: This commit addresses an issue related to uint32 conversion within the `auth` package. This fix ensures correct handling of uint32 values, resolving potential errors or unexpected behavior. The commit hash is 9221c7fa12cef9d5fb7ddc92f41f1d6204971c7b.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n9221c7fa12cef9d5fb7ddc92f41f1d6204971c7b\n```\n\n----------------------------------------\n\nTITLE: Bucket Store YAML Configuration Schema\nDESCRIPTION: YAML configuration schema for Grafana Mimir's bucket store component. Includes settings for synchronization, concurrency limits, caching backends (inmemory, memcached, redis), and metadata management.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_136\n\nLANGUAGE: yaml\nCODE:\n```\nbucket_store:\n  [sync_dir: <string> | default = \"./tsdb-sync/\"]\n  [sync_interval: <duration> | default = 15m]\n  [max_concurrent: <int> | default = 200]\n  [max_concurrent_queue_timeout: <duration> | default = 5s]\n  [tenant_sync_concurrency: <int> | default = 1]\n  [block_sync_concurrency: <int> | default = 4]\n  [meta_sync_concurrency: <int> | default = 20]\n\n  index_cache:\n    [backend: <string> | default = \"inmemory\"]\n    [memcached: <memcached>]\n    [redis: <redis>]\n    inmemory:\n      [max_size_bytes: <int> | default = 1073741824]\n\n  chunks_cache:\n    [backend: <string> | default = \"\"]\n    [memcached: <memcached>]\n    [redis: <redis>]\n    [max_get_range_requests: <int> | default = 3]\n    [attributes_ttl: <duration> | default = 168h]\n    [attributes_in_memory_max_items: <int> | default = 50000]\n    [subrange_ttl: <duration> | default = 24h]\n\n  metadata_cache:\n    [backend: <string> | default = \"\"]\n    [memcached: <memcached>]\n    [redis: <redis>]\n    [tenants_list_ttl: <duration> | default = 15m]\n    [tenant_blocks_list_ttl: <duration> | default = 5m]\n    [chunks_list_ttl: <duration> | default = 24h]\n    [metafile_exists_ttl: <duration> | default = 2h]\n    [metafile_doesnt_exist_ttl: <duration> | default = 5m]\n    [metafile_content_ttl: <duration> | default = 24h]\n    [metafile_max_size_bytes: <int> | default = 1048576]\n    [metafile_attributes_ttl: <duration> | default = 168h]\n    [block_index_attributes_ttl: <duration> | default = 168h]\n    [bucket_index_content_ttl: <duration> | default = 5m]\n    [bucket_index_max_size_bytes: <int> | default = 1048576]\n\n  [ignore_deletion_mark_delay: <duration> | default = 1h]\n  [ignore_deletion_mark_while_querying_delay: <duration> | default = 50m]\n\n  bucket_index:\n    [update_on_error_interval: <duration> | default = 1m]\n    [idle_timeout: <duration> | default = 1h]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Validation in Grafana Mimir\nDESCRIPTION: Experimental cluster validation settings for both gRPC and HTTP protocols. Enables validation of cluster labels to ensure requests are routed to the correct cluster, with options for soft validation and path exclusions.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ncluster_validation:\n  # (experimental) Optionally define the cluster validation label.\n  # CLI flag: -server.cluster-validation.label\n  [label: <string> | default = \"\"]\n\n  grpc:\n    # (experimental) When enabled, cluster label validation is executed:\n    # configured cluster validation label is compared with the cluster\n    # validation label received through the requests.\n    # CLI flag: -server.cluster-validation.grpc.enabled\n    [enabled: <boolean> | default = false]\n\n    # (experimental) When enabled, soft cluster label validation is executed.\n    # Can be enabled only together with server.cluster-validation.grpc.enabled\n    # CLI flag: -server.cluster-validation.grpc.soft-validation\n    [soft_validation: <boolean> | default = false]\n\n  http:\n    # (experimental) When enabled, cluster label validation is executed:\n    # configured cluster validation label is compared with the cluster\n    # validation label received through the requests.\n    # CLI flag: -server.cluster-validation.http.enabled\n    [enabled: <boolean> | default = false]\n\n    # (experimental) When enabled, soft cluster label validation is executed.\n    # Can be enabled only together with server.cluster-validation.http.enabled\n    # CLI flag: -server.cluster-validation.http.soft-validation\n    [soft_validation: <boolean> | default = false]\n\n    # (experimental) Comma-separated list of url paths that are excluded from\n    # the cluster validation check.\n    # CLI flag: -server.cluster-validation.http.excluded-paths\n    [excluded_paths: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: File Uploader Example in Go using MinIO\nDESCRIPTION: This example demonstrates connecting to a MinIO server, creating a bucket, and uploading a file. It uses the public MinIO 'play' server for testing and development purposes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// FileUploader.go MinIO example\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tendpoint := \"play.min.io\"\n\taccessKeyID := \"Q3AM3UQ867SPQQA43P2F\"\n\tsecretAccessKey := \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"\n\tuseSSL := true\n\n\t// Initialize minio client object.\n\tminioClient, err := minio.New(endpoint, &minio.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, \"\"),\n\t\tSecure: useSSL,\n\t})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\t// Make a new bucket called testbucket.\n\tbucketName := \"testbucket\"\n\tlocation := \"us-east-1\"\n\n\terr = minioClient.MakeBucket(ctx, bucketName, minio.MakeBucketOptions{Region: location})\n\tif err != nil {\n\t\t// Check to see if we already own this bucket (which happens if you run this twice)\n\t\texists, errBucketExists := minioClient.BucketExists(ctx, bucketName)\n\t\tif errBucketExists == nil && exists {\n\t\t\tlog.Printf(\"We already own %s\\n\", bucketName)\n\t\t} else {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t} else {\n\t\tlog.Printf(\"Successfully created %s\\n\", bucketName)\n\t}\n\n\t// Upload the test file\n\t// Change the value of filePath if the file is in another location\n\tobjectName := \"testdata\"\n\tfilePath := \"/tmp/testdata\"\n\tcontentType := \"application/octet-stream\"\n\n\t// Upload the test file with FPutObject\n\tinfo, err := minioClient.FPutObject(ctx, bucketName, objectName, filePath, minio.PutObjectOptions{ContentType: contentType})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tlog.Printf(\"Successfully uploaded %s of size %d\\n\", objectName, info.Size)\n}\n```\n\n----------------------------------------\n\nTITLE: Quick Highlighting Example in Go\nDESCRIPTION: Demonstrates using Chroma's quick highlighting function to format source code with syntax highlighting. Takes source code, language name, output format, and style name as parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nerr := quick.Highlight(os.Stdout, someSourceCode, \"go\", \"html\", \"monokai\")\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Enable State Cleanup\nDESCRIPTION: This advanced setting enables periodic cleanup of Alertmanager stateful data (notification logs and silences) from object storage.  It removes data for tenants that no longer have a configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_102\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) Enables periodic cleanup of alertmanager stateful data\n# (notification logs and silences) from object storage. When enabled, data is\n# removed for any tenant that does not have a configuration.\n# CLI flag: -alertmanager.enable-state-cleanup\n[enable_state_cleanup: <boolean> | default = true]\n\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Configuration with Credentials\nDESCRIPTION: Configuration for Amazon S3 storage with credentials using environment variable interpolation for secure credential management.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-object-storage-backend.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    storage_backend: 's3',\n    storage_s3_access_key_id: '$(BLOCKS_STORAGE_S3_ACCESS_KEY_ID)',\n    storage_s3_secret_access_key: '$(BLOCKS_STORAGE_S3_SECRET_ACCESS_KEY)',\n    aws_region: 'af-south-1',\n    blocks_storage_bucket_name: 'blocks-bucket',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming ObjectReplicationMetadata to OrMetadata in Swagger\nDESCRIPTION: Changes the XML string 'ObjectReplicationMetadata' to 'OrMetadata' in the BlobItemInternal definition.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobItemInternal.properties[\"OrMetadata\"] = $.BlobItemInternal.properties[\"ObjectReplicationMetadata\"];\n    delete $.BlobItemInternal.properties[\"ObjectReplicationMetadata\"];\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Multi-architecture Builds on Linux\nDESCRIPTION: Command to install the necessary QEMU packages on Linux systems to support multi-architecture Docker image builds, particularly for ARM64 compatibility.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/how-to-update-the-build-image.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install qemu qemu-user-static binfmt-support debootstrap\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Changes in Bash\nDESCRIPTION: Command to review the changes that Terraform would apply to the infrastructure.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Using xxhash API in Go\nDESCRIPTION: The provided code snippets illustrate the API functions available in the xxhash package, which include two hashing functions and a Digest type for more granular control. This implementation requires Go 1.9.7+ and leverages optimizations for specific architectures, with pure Go and assembly variants.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Markup Buttons in Go\nDESCRIPTION: This snippet demonstrates how to create various types of buttons (reply, inline, contact, location, etc.) dynamically using the Telebot's markup constructors. This allows for responsive interaction based on user inputs and can enhance user experience through a variety of button actions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nr := b.NewMarkup()\n\n// Reply buttons:\nr.Text(\"Hello!\")\nr.Contact(\"Send phone number\")\nr.Location(\"Send location\")\nr.Poll(tele.PollQuiz)\n\n// Inline buttons:\nr.Data(\"Show help\", \"help\") // data is optional\nr.Data(\"Delete item\", \"delete\", item.ID)\nr.URL(\"Visit\", \"https://google.com\")\nr.Query(\"Search\", query)\nr.QueryChat(\"Share\", query)\nr.Login(\"Login\", &tele.Login{...})\n```\n\n----------------------------------------\n\nTITLE: Formatting Word Series with Conjunctions - Go\nDESCRIPTION: This snippet uses the `english.WordSeries` and `english.OxfordWordSeries` functions to format lists of words with appropriate conjunctions, which is helpful in creating well-structured sentences when listing items.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nenglish.WordSeries([]string{\"foo\"}, \"and\") // foo\nenglish.WordSeries([]string{\"foo\", \"bar\"}, \"and\") // foo and bar\nenglish.WordSeries([]string{\"foo\", \"bar\", \"baz\"}, \"and\") // foo, bar and baz\n\nenglish.OxfordWordSeries([]string{\"foo\", \"bar\", \"baz\"}, \"and\") // foo, bar, and baz\n```\n\n----------------------------------------\n\nTITLE: Example Metrics Output\nDESCRIPTION: Sample output from the /metrics endpoint showing custom tracker metrics for different tenants and patterns.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-custom-trackers.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncortex_ingester_active_series_custom_tracker{name=\"dev\", user=\"tenant_1\"}                         5\ncortex_ingester_active_series_custom_tracker{name=\"prod\", user=\"tenant_1\"}                       10\ncortex_ingester_active_series_custom_tracker{name=\"prod\", user=\"tenant_with_only_prod_metrics\"}   3\n```\n\n----------------------------------------\n\nTITLE: Editing and Deleting Messages with Telebot\nDESCRIPTION: This example shows how to retrieve stored messages from a database, then edit or delete them using the Telebot library. The code utilizes GORM for querying and demonstrates how to apply edits or deletions based on the Retrieved StoredMessage instances.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// just two integer columns in the database\nvar msgs []tele.StoredMessage\ndb.Find(&msgs) // gorm syntax\n\nfor _, msg := range msgs {\n\tbot.Edit(&msg, \"Updated text\")\n\t// or\n\tbot.Delete(&msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Overrides with Multiple Tenant Limits in Go\nDESCRIPTION: Example of using the helper function to consume overrides with multiple tenant limits in a multi-tenant codepath.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ncacheUnalignedRequests := validation.AllTrueBooleansPerTenant(\n    tenantIDs, s.limits.ResultsCacheForUnalignedQueryEnabled,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Standard Go JSON Marshal\nDESCRIPTION: Example of using the standard Go encoding/json package to marshal data to JSON format.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Installing the Color Package with Go\nDESCRIPTION: Shows how to install the color package using the go get command.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/color\n```\n\n----------------------------------------\n\nTITLE: Previous JSON Output Format\nDESCRIPTION: Example showing the old JSON output format where span objects were wrapped in arrays for each export call.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[ { ... } ][ { ... } { ... } ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Component Instance IDs for Ring Membership\nDESCRIPTION: Configuration parameters that define unique identifiers for different Mimir components within their respective rings. Each component (alertmanager, compactor, distributor, ingester, ruler, and store-gateway) requires a unique instance ID to participate in the ring-based topology used for coordination and work distribution.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/ring-instance-id-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-alertmanager.sharding-ring.instance-id=123abc-2\n-compactor.ring.instance-id=123abc-4\n-distributor.ring.instance-id=123abc-1\n-ingester.ring.instance-id=123abc-6\n-ruler.ring.instance-id=123abc-3\n-store-gateway.sharding-ring.instance-id=123abc-5\n```\n\n----------------------------------------\n\nTITLE: Installing go-json Package\nDESCRIPTION: Command to install the go-json package using go get\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/goccy/go-json\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Lexer in Go\nDESCRIPTION: This Go snippet shows how to explicitly specify a lexer for a particular language using its Chroma syntax ID. It demonstrates the use of the `lexers.Get()` function. The syntax ID should be correctly provided to fetch the corresponding lexer.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlexer := lexers.Get(\"go\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Span from Parent Span in Go OpenTracing\nDESCRIPTION: Demonstrates creating a child span from an existing parent span. This establishes a causal relationship between operations using the ChildOf reference type to build the trace hierarchy.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc xyz(parentSpan opentracing.Span, ...) {\n    ...\n    sp := opentracing.StartSpan(\n        \"operation_name\",\n        opentracing.ChildOf(parentSpan.Context()))\n    defer sp.Finish()\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status Configuration in Grafana Mimir\nDESCRIPTION: This endpoint displays empty configuration settings for compatibility with the Prometheus /api/v1/status/config API.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/status/config\n```\n\n----------------------------------------\n\nTITLE: Installing LZ4 CLI Tool\nDESCRIPTION: Command to install the command-line interface tool for LZ4 compression/decompression.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/pierrec/lz4/v4/cmd/lz4c@latest\n```\n\n----------------------------------------\n\nTITLE: Feature: Add Base Auth Package\nDESCRIPTION: This commit introduces the base `auth` package to the Google Cloud Go library. This foundational package provides core authentication functionalities and abstractions, forming the basis for more specialized authentication mechanisms. The commit is associated with issue #8465.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n6a45f26b809b64edae21f312c18d4205f96b180e\n```\n\n----------------------------------------\n\nTITLE: Importing Go JOSE v4 Library\nDESCRIPTION: Shows how to import the Go JOSE v4 library in a Go project. This is the current stable version of the library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-jose/go-jose/v4/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/go-jose/go-jose/v4\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of Using go-flags for Command Line Parsing in Go\nDESCRIPTION: Illustrates a complete example of using go-flags to define, parse, and handle various types of command line options, including slices, maps, pointers, and custom callbacks.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jessevdk/go-flags/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar opts struct {\n\tVerbose []bool `short:\"v\" long:\"verbose\" description:\"Show verbose debug information\"`\n\tOffset uint `long:\"offset\" description:\"Offset\"`\n\tCall func(string) `short:\"c\" description:\"Call phone number\"`\n\tName string `short:\"n\" long:\"name\" description:\"A name\" required:\"true\"`\n\tAnimal string `long:\"animal\" choice:\"cat\" choice:\"dog\"`\n\tFile string `short:\"f\" long:\"file\" description:\"A file\" value-name:\"FILE\"`\n\tPtr *int `short:\"p\" description:\"A pointer to an integer\"`\n\tStringSlice []string `short:\"s\" description:\"A slice of strings\"`\n\tPtrSlice []*string `long:\"ptrslice\" description:\"A slice of pointers to string\"`\n\tIntMap map[string]int `long:\"intmap\" description:\"A map from string to int\"`\n}\n\nopts.Call = func(num string) {\n\tcmd := exec.Command(\"open\", \"callto:\"+num)\n\tcmd.Start()\n\tcmd.Process.Release()\n}\n\nargs := []string{\n\t\"-vv\",\n\t\"--offset=5\",\n\t\"-n\", \"Me\",\n\t\"--animal\", \"dog\",\n\t\"-p\", \"3\",\n\t\"-s\", \"hello\",\n\t\"-s\", \"world\",\n\t\"--ptrslice\", \"hello\",\n\t\"--ptrslice\", \"world\",\n\t\"--intmap\", \"a:1\",\n\t\"--intmap\", \"b:5\",\n\t\"arg1\",\n\t\"arg2\",\n\t\"arg3\",\n}\n\nargs, err := flags.ParseArgs(&opts, args)\n\nif err != nil {\n\tpanic(err)\n}\n\nfmt.Printf(\"Verbosity: %v\\n\", opts.Verbose)\nfmt.Printf(\"Offset: %d\\n\", opts.Offset)\nfmt.Printf(\"Name: %s\\n\", opts.Name)\nfmt.Printf(\"Animal: %s\\n\", opts.Animal)\nfmt.Printf(\"Ptr: %d\\n\", *opts.Ptr)\nfmt.Printf(\"StringSlice: %v\\n\", opts.StringSlice)\nfmt.Printf(\"PtrSlice: [%v %v]\\n\", *opts.PtrSlice[0], *opts.PtrSlice[1])\nfmt.Printf(\"IntMap: [a:%v b:%v]\\n\", opts.IntMap[\"a\"], opts.IntMap[\"b\"])\nfmt.Printf(\"Remaining args: %s\\n\", strings.Join(args, \" \"))\n```\n\n----------------------------------------\n\nTITLE: Recording Stats Measurements in Go\nDESCRIPTION: Example of how to record measurements associated with a measure using the stats package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstats.Record(ctx, videoSize.M(102478))\n```\n\n----------------------------------------\n\nTITLE: Helm Diff Output for Mimir Configuration Changes\nDESCRIPTION: Diff output showing changes to ConfigMap and Deployment resources, including updates to alertmanager external URL, server log level, and configuration checksum.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n#... cut for size ...\n\ntest, mimir-config, ConfigMap (v1) has changed:\n  # Source: mimir-distributed/templates/mimir-config.yaml\n  apiVersion: v1\n  kind: ConfigMap\n  metadata:\n    name: mimir-config\n    labels:\n      helm.sh/chart: mimir-distributed-3.0.0\n      app.kubernetes.io/name: mimir\n      app.kubernetes.io/instance: mimir\n      app.kubernetes.io/version: \"2.2.0\"\n      app.kubernetes.io/managed-by: Helm\n    namespace: \"test\"\n  data:\n    mimir.yaml: |\n       activity_tracker:\n        filepath: /active-query-tracker/activity.log\n      alertmanager:\n        data_dir: /data\n        enable_api: true\n-       external_url: /alertmanager\n+       external_url: https://example.com/alerts\n      alertmanager_storage:\n        backend: s3\n        s3:\n          access_key_id: grafana-mimir\n          bucket_name: mimir-ruler\n          endpoint: mimir-minio.test.svc:9000\n          insecure: true\n          secret_access_key: supersecret\n      blocks_storage:\n        backend: s3\n        bucket_store:\n          sync_dir: /data/tsdb-sync\n        s3:\n          access_key_id: grafana-mimir\n          bucket_name: mimir-tsdb\n          endpoint: mimir-minio.test.svc:9000\n          insecure: true\n          secret_access_key: supersecret\n        tsdb:\n          dir: /data/tsdb\n      compactor:\n        data_dir: /data\n      frontend:\n        align_queries_with_step: true\n        log_queries_longer_than: 10s\n      frontend_worker:\n        frontend_address: mimir-query-frontend-headless.test.svc:9095\n      ingester:\n        ring:\n          final_sleep: 0s\n          num_tokens: 512\n          unregister_on_shutdown: false\n      ingester_client:\n        grpc_client_config:\n          max_recv_msg_size: 104857600\n          max_send_msg_size: 104857600\n      limits: {}\n      memberlist:\n        abort_if_cluster_join_fails: false\n        compression_enabled: false\n        join_members:\n        - mimir-gossip-ring\n      ruler:\n        alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.mimir-alertmanager-headless.test.svc.cluster.local/alertmanager\n        enable_api: true\n        rule_path: /data\n      ruler_storage:\n        backend: s3\n        s3:\n          access_key_id: grafana-mimir\n          bucket_name: mimir-ruler\n          endpoint: mimir-minio.test.svc:9000\n          insecure: true\n          secret_access_key: supersecret\n      runtime_config:\n        file: /var/mimir/runtime.yaml\n      server:\n        grpc_server_max_concurrent_streams: 1000\n+       log_level: debug\n```\n\n----------------------------------------\n\nTITLE: Parsing and Comparing Versions in Go\nDESCRIPTION: Demonstrates how to parse and compare software versions using the go-version library. It involves creating version objects and performing a comparison to check if one version is less than another. The example showcases the LessThan method and mentions additional comparison methods.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\nv2, err := version.NewVersion(\"1.5+metadata\")\n\n// Comparison example. There is also GreaterThan, Equal, and just\n// a simple Compare that returns an int allowing easy >=, <=, etc.\nif v1.LessThan(v2) {\n    fmt.Printf(\"%s is less than %s\", v1, v2)\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Component Benchmark Results\nDESCRIPTION: This text snippet provides benchmark results for different query components, comparing two query processing approaches: 'tenant-querier -> query component round-robin tree' and 'worker-queue prioritization -> tenant-querier tree'. The results include the mean and standard deviation of the 'seconds in queue' metric for 'ingester' and 'store-gateway' components under varying percentages of slow queries and tenant configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/scheduler/DESIGN.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResults by query component:\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 10pct slow queries: seconds in queue: [ingester: mean: 0.1046 stddev: 0.02 store-gateway: mean: 0.0079 stddev: 0.02]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 10pct slow queries: seconds in queue: [ingester: mean: 0.0194 stddev: 0.01 store-gateway: mean: 0.0271 stddev: 0.04]\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 25pct slow queries: seconds in queue: [ingester: mean: 0.2738 stddev: 0.08 store-gateway: mean: 0.1084 stddev: 0.09]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 25pct slow queries: seconds in queue: [ingester: mean: 0.0159 stddev: 0.01 store-gateway: mean: 0.1177 stddev: 0.09]\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 50pct slow queries: seconds in queue: [ingester: mean: 0.3894 stddev: 0.18 store-gateway: mean: 0.2471 stddev: 0.17]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 50pct slow queries: seconds in queue: [ingester: mean: 0.0118 stddev: 0.01 store-gateway: mean: 0.2530 stddev: 0.17]\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 75pct slow queries: seconds in queue: [ingester: mean: 0.2608 stddev: 0.18 store-gateway: mean: 0.3999 stddev: 0.26]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 75pct slow queries: seconds in queue: [ingester: mean: 0.0053 stddev: 0.00 store-gateway: mean: 0.4056 stddev: 0.26]\ntree: tenant-querier -> query component round-robin tree, 1 tenant, 90pct slow queries: seconds in queue: [ingester: mean: 0.0780 stddev: 0.07 store-gateway: mean: 0.4917 stddev: 0.31]\ntree: worker-queue prioritization -> tenant-querier tree, 1 tenant, 90pct slow queries: seconds in queue: [ingester: mean: 0.0026 stddev: 0.00 store-gateway: mean: 0.4929 stddev: 0.31]\ntree: tenant-querier -> query component round-robin tree, 2 tenants, first with 10pct slow queries, second with 90pct slow queries: seconds in queue: [ingester: mean: 0.1099 stddev: 0.04 store-gateway: mean: 0.2333 stddev: 0.17]\ntree: worker-queue prioritization -> tenant-querier tree, 2 tenants, first with 10pct slow queries, second with 90pct slow queries: seconds in queue: [ingester: mean: 0.0114 stddev: 0.00 store-gateway: mean: 0.2644 stddev: 0.18]\ntree: tenant-querier -> query component round-robin tree, 2 tenants, first with 25pct slow queries, second with 75pct slow queries: seconds in queue: [ingester: mean: 0.2402 stddev: 0.10 store-gateway: mean: 0.2277 stddev: 0.16]\ntree: worker-queue prioritization -> tenant-querier tree, 2 tenants, first with 25pct slow queries, second with 75pct slow queries: seconds in queue: [ingester: mean: 0.0101 stddev: 0.00 store-gateway: mean: 0.2447 stddev: 0.17]\ntree: tenant-querier -> query component round-robin tree, 2 tenants, first with 50pct slow queries, second with 50pct slow queries: seconds in queue: [ingester: mean: 0.3586 stddev: 0.18 store-gateway: mean: 0.2149 stddev: 0.15]\ntree: worker-queue prioritization -> tenant-querier tree, 2 tenants, first with 50pct slow queries, second with 50pct slow queries: seconds in queue: [ingester: mean: 0.0106 stddev: 0.01 store-gateway: mean: 0.2113 stddev: 0.15]\n```\n\n----------------------------------------\n\nTITLE: Mapping between Maps and Structs in Go\nDESCRIPTION: Demonstrates how to map a map[string]interface{} to a struct or vice versa. Keys are capitalized to match exported fields in the struct.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/imdario/mergo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nif err := mergo.Map(&dst, srcMap); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret Configuration\nDESCRIPTION: Example of Kubernetes Secret configuration for storing S3 credentials.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-helm-chart-2.x-to-3.0.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mimir-bucket-secret\ndata:\n  AWS_ACCESS_KEY_ID: FAKEACCESSKEY\n  AWS_SECRET_ACCESS_KEY: FAKESECRETKEY\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag Shorthand in pflag\nDESCRIPTION: This snippet shows how to deprecate only the shorthand of a flag in pflag while keeping the long form.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir for Ingester Migration (YAML)\nDESCRIPTION: YAML configuration to enable flushing data from ingesters to storage on shutdown and disable zone-aware replication. This is the initial step in the migration process with downtime.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    blocks_storage:\n      tsdb:\n        flush_blocks_on_shutdown: true\n    ingester:\n      ring:\n        unregister_on_shutdown: true\n\ningester:\n  zoneAwareReplication:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Package Migration Update\nDESCRIPTION: Example showing package movement from api/trace to trace package with renamed identifiers\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Before:\ngo.opentelemetry.io/otel/api/trace.ID\ngo.opentelemetry.io/otel/api/trace.IDFromHex\n\n// After:\ngo.opentelemetry.io/otel/trace.TraceID\ngo.opentelemetry.io/otel/trace.TraceIDFromHex\n```\n\n----------------------------------------\n\nTITLE: Using Initials Function in GoUtils\nDESCRIPTION: This snippet demonstrates how to use the Initials function from GoUtils to generate initials from a full name. It imports the goutils package and calls the Initials function with a sample name.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/goutils/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\t\"github.com/Masterminds/goutils\"\n)\n\nfunc main() {\n\n\t// EXAMPLE 1: A goutils function which returns no errors\n    fmt.Println (goutils.Initials(\"John Doe Foo\")) // Prints out \"JDF\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Block Upload Status Response - Failed\nDESCRIPTION: Example JSON response indicating block upload failure with error message.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{ \"result\": \"failed\", \"error\": \"missing index file\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Etcd Endpoint for Grafana Mimir Distributor HA Tracker\nDESCRIPTION: This configuration snippet sets the Etcd endpoint for the high-availability tracker of Grafana Mimir's distributor. It specifies the service name and port for the Etcd client within a Kubernetes cluster namespace.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/string-slice-single-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-distributor.ha-tracker.etcd.endpoints=etcd-client.cortex-to-mimir.svc.cluster.local.:2379\n```\n\n----------------------------------------\n\nTITLE: Disabling Anonymous Usage Statistics via CLI Flag\nDESCRIPTION: Command-line flag to disable anonymous usage statistics reporting in Mimir. This allows users to prevent sending anonymous cluster information to the statistics server.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/about-anonymous-usage-statistics-reporting.md#2025-04-17_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n-usage-stats.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Modifying Service Client Methods in Go\nDESCRIPTION: Removes pager methods and exports various generated methods in the service client Go file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_service_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*ServiceClient\\) NewListContainersSegmentPager\\(.+\\/\\/ listContainersSegmentCreateRequest creates the ListContainersSegment request/s, `//\\n// listContainersSegmentCreateRequest creates the ListContainersSegment request`).\n        replace(/\\(client \\*ServiceClient\\) listContainersSegmentCreateRequest\\(/, `(client *ServiceClient) ListContainersSegmentCreateRequest(`).\n        replace(/\\(client \\*ServiceClient\\) listContainersSegmentHandleResponse\\(/, `(client *ServiceClient) ListContainersSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Finalizing Alertmanager Zone-Aware Replication Configuration\nDESCRIPTION: YAML configuration to finalize the zone-aware replication setup for alertmanager after migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n  zoneAwareReplication:\n    enabled: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Installing Kingpin in Go\nDESCRIPTION: Command to install the Kingpin library using go get.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/alecthomas/kingpin/v2\n```\n\n----------------------------------------\n\nTITLE: Making 'where' Parameter Required in Blob Filtering\nDESCRIPTION: YAML directive that changes the 'where' parameter in blob filtering operations to be required by setting the required property to true.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.FilterBlobsWhere\n  transform: >\n    $.required = true;\n```\n\n----------------------------------------\n\nTITLE: Example Configuration A with Nop Components (YAML)\nDESCRIPTION: This YAML configuration defines receivers, processors, exporters, and extensions with a 'nop' component. It also sets up a service pipeline that references the 'nop' processor.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"receivers:\n    nop:\n\nprocessors:\n    nop:\n\nexporters:\n    nop:\n\nextensions:\n    nop:\n\nservice:\n    extensions: [nop]\n    pipelines:\n        traces:\n            receivers: [nop]\n            processors: [nop]\n            exporters: [nop]\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Protobuf Import Path for Mimir Ingester\nDESCRIPTION: Required modification to the ingester protobuf file to update import path for local compilation.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/grpcurl-query-ingesters/README.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nimport \"github.com/grafana/mimir/pkg/mimirpb/mimir.proto\" -> import \"pkg/mimirpb/mimir.proto\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Version 0.6.0 in Markdown\nDESCRIPTION: Links to the comparison between version 0.5.2 and 0.6.0 of the compute/metadata package on GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.6.0](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.5.2...compute/metadata/v0.6.0) (2024-12-13)\n```\n\n----------------------------------------\n\nTITLE: Querying Active Series in Prometheus\nDESCRIPTION: This PromQL query retrieves the sum of active series across all Prometheus servers. It's used to estimate resource requirements for various Grafana Mimir components.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/run-production-environment/planning-capacity.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum(prometheus_tsdb_head_series)\n```\n\n----------------------------------------\n\nTITLE: ULID CLI Tool Installation\nDESCRIPTION: Commands to install the ULID command-line tool.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd $(mktemp -d)\nenv GOPATH=$(pwd) GO111MODULE=on go get -v github.com/oklog/ulid/v2/cmd/ulid\n```\n\n----------------------------------------\n\nTITLE: Running Tests for OpenCensus Go\nDESCRIPTION: Commands to install required tools and run tests for the OpenCensus Go project. The first command only needs to be run initially to set up tools.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make install-tools  # Only first time.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Fixing CRC Response Header in PutBlob Response\nDESCRIPTION: Adds the x-ms-content-crc64 header to the PutBlob response in the Swagger document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{{containerName}}/{{blob}}?BlockBlob\"].put.responses[\"201\"].headers\n  transform: >\n      $[\"x-ms-content-crc64\"] = {\n        \"x-ms-client-name\": \"ContentCRC64\",\n        \"type\": \"string\",\n        \"format\": \"byte\",\n        \"description\": \"Returned for a block blob so that the client can check the integrity of message content.\"\n      };\n```\n\n----------------------------------------\n\nTITLE: Importing xsync Library in Go\nDESCRIPTION: Shows how to import the xsync library using the v3 version suffix. This is required as v3 is the latest major version.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/puzpuzpuz/xsync/v3\"\n)\n```\n\n----------------------------------------\n\nTITLE: Sorting Strings Naturally in Go\nDESCRIPTION: This code snippet demonstrates how to use the `natsort` package to sort a list of strings naturally. It initializes a string slice, calls `natsort.Sort` to sort the slice, and then prints the sorted strings to the console, separated by newline characters.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/facette/natsort/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n\n    \"facette.io/natsort\"\n)\n\nfunc main() {\n    list := []string{\n        \"1000X Radonius Maximus\",\n        \"10X Radonius\",\n        \"200X Radonius\",\n        \"20X Radonius\",\n        \"20X Radonius Prime\",\n        \"30X Radonius\",\n        \"40X Radonius\",\n        \"Allegia 50 Clasteron\",\n        \"Allegia 500 Clasteron\",\n        \"Allegia 50B Clasteron\",\n        \"Allegia 51 Clasteron\",\n        \"Allegia 6R Clasteron\",\n        \"Alpha 100\",\n        \"Alpha 2\",\n        \"Alpha 200\",\n        \"Alpha 2A\",\n        \"Alpha 2A-8000\",\n        \"Alpha 2A-900\",\n        \"Callisto Morphamax\",\n        \"Callisto Morphamax 500\",\n        \"Callisto Morphamax 5000\",\n        \"Callisto Morphamax 600\",\n        \"Callisto Morphamax 6000 SE\",\n        \"Callisto Morphamax 6000 SE2\",\n        \"Callisto Morphamax 700\",\n        \"Callisto Morphamax 7000\",\n        \"Xiph Xlater 10000\",\n        \"Xiph Xlater 2000\",\n        \"Xiph Xlater 300\",\n        \"Xiph Xlater 40\",\n        \"Xiph Xlater 5\",\n        \"Xiph Xlater 50\",\n        \"Xiph Xlater 500\",\n        \"Xiph Xlater 5000\",\n        \"Xiph Xlater 58\",\n    }\n\n    natsort.Sort(list)\n\n    fmt.Println(strings.Join(list, \"\\n\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Storage Blocks in JSON Format\nDESCRIPTION: Example output showing storage block information in JSON format. Includes detailed block metadata with structured fields for programmatic parsing.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/listblocks/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"blockID\": \"01HRB9NDFKKYM8CKGPBEY0E8QX\",\n    \"duration\": \"24h0m0s\",\n    \"durationSeconds\": 86400,\n    \"maxTime\": \"2024-03-07T00:00:00Z\",\n    \"minTime\": \"2024-03-06T00:00:00Z\",\n    \"noCompact\": {\n      \"time\": \"2025-04-10T19:48:56Z\",\n      \"reason\": \"manual\"\n    },\n    \"size\": \"687 MiB\",\n    \"sizeBytes\": 720756845\n  },\n  {\n    \"blockID\": \"01HRDWWNZQCH1MWCWKK4VMW08R\",\n    \"duration\": \"24h0m0s\",\n    \"durationSeconds\": 86400,\n    \"maxTime\": \"2024-03-08T00:00:00Z\",\n    \"minTime\": \"2024-03-07T00:00:00Z\",\n    \"size\": \"688 MiB\",\n    \"sizeBytes\": 721221809\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Label Values Cardinality Response Schema\nDESCRIPTION: JSON schema defining the response format for the label values cardinality endpoint. Shows the structure including total counts and cardinality details.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label_values_count_total\": <number>,\n  \"label_names_count\": <number>,\n  \"cardinality\": [\n    {\n      \"label_name\": <string>,\n      \"label_values_count\": <number>\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bucket Store Options in Grafana Mimir (YAML)\nDESCRIPTION: This snippet defines various configuration options for the bucket store in Grafana Mimir, including cache sizes, partitioner settings, and index header management. It controls how data is stored, retrieved, and managed in the distributed storage system.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_137\n\nLANGUAGE: yaml\nCODE:\n```\n  [max_stale_period: <duration> | default = 1h]\n  [ignore_blocks_within: <duration> | default = 10h]\n  [series_hash_cache_max_size_bytes: <int> | default = 1073741824]\n  [partitioner_max_gap_bytes: <int> | default = 524288]\n  [postings_offsets_in_mem_sampling: <int> | default = 32]\n\n  index_header:\n    [max_idle_file_handles: <int> | default = 1]\n    [eager_loading_startup_enabled: <boolean> | default = true]\n    [lazy_loading_enabled: <boolean> | default = true]\n    [lazy_loading_idle_timeout: <duration> | default = 1h]\n    [lazy_loading_concurrency: <int> | default = 4]\n    [lazy_loading_concurrency_queue_timeout: <duration> | default = 5s]\n    [verify_on_load: <boolean> | default = false]\n\n  [streaming_series_batch_size: <int> | default = 5000]\n  [series_fetch_preference: <float> | default = 0.75]\n```\n\n----------------------------------------\n\nTITLE: Querier: Lookback Delta Configuration\nDESCRIPTION: Sets the time since the last sample after which a time series is considered stale. This value affects expression evaluations and should be consistent between the querier and query-frontend when sharding is enabled.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_39\n\nLANGUAGE: text\nCODE:\n```\n\"# (advanced) Time since the last sample after which a time series is considered\\n# stale and ignored by expression evaluations. This config option should be set\\n# on query-frontend too when query sharding is enabled.\\n# CLI flag: -querier.lookback-delta\\n[lookback_delta: <duration> | default = 5m]\"\n```\n\n----------------------------------------\n\nTITLE: Individual Schema Generation Steps\nDESCRIPTION: Sequential commands for generating individual components of the schema system\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake kustomizationapi/swagger.go\nmake kubernetesapi/swagger.go\nmake kubernetesapi/openapiinfo.go\n```\n\n----------------------------------------\n\nTITLE: Defining BucketReader Interface in Go\nDESCRIPTION: This snippet defines the BucketReader interface, which provides read-only access to an object storage bucket. It includes methods for iterating over objects, retrieving object data, and checking object existence.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// BucketReader provides read access to an object storage bucket.\ntype BucketReader interface {\n\t// Iter calls f for each entry in the given directory (not recursive.). The argument to f is the full\n\t// object name including the prefix of the inspected directory.\n\n\t// Entries are passed to function in sorted order.\n\tIter(ctx context.Context, dir string, f func(name string) error, options ...IterOption) error\n\n\t// IterWithAttributes calls f for each entry in the given directory similar to Iter.\n\t// In addition to Name, it also includes requested object attributes in the argument to f.\n\t//\n\t// Attributes can be requested using IterOption.\n\t// Not all IterOptions are supported by all providers, requesting for an unsupported option will fail with ErrOptionNotSupported.\n\tIterWithAttributes(ctx context.Context, dir string, f func(attrs IterObjectAttributes) error, options ...IterOption) error\n\n\t// SupportedIterOptions returns a list of supported IterOptions by the underlying provider.\n\tSupportedIterOptions() []IterOptionType\n\n\t// Get returns a reader for the given object name.\n\tGet(ctx context.Context, name string) (io.ReadCloser, error)\n\n\t// GetRange returns a new range reader for the given object name and range.\n\tGetRange(ctx context.Context, name string, off, length int64) (io.ReadCloser, error)\n\n\t// Exists checks if the given object exists in the bucket.\n\tExists(ctx context.Context, name string) (bool, error)\n\n\t// IsObjNotFoundErr returns true if error means that object is not found. Relevant to Get operations.\n\tIsObjNotFoundErr(err error) bool\n\n\t// IsAccessDeniedErr returns true if access to object is denied.\n\tIsAccessDeniedErr(err error) bool\n\n\t// Attributes returns information about the specified object.\n\tAttributes(ctx context.Context, name string) (ObjectAttributes, error)\n}\n```\n\n----------------------------------------\n\nTITLE: RBMutex vs sync.RWMutex Benchmark\nDESCRIPTION: Performance comparison between RBMutex and sync.RWMutex with periodic writer locks and work in critical sections\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nRBMutexWorkWrite100000                           146ns ± 0%\nRBMutexWorkWrite100000-2                        73.3ns ± 0%\nRBMutexWorkWrite100000-4                        36.7ns ± 0%\nRBMutexWorkWrite100000-8                        18.6ns ± 0%\nRBMutexWorkWrite100000-16                       9.83ns ± 3%\nRBMutexWorkWrite100000-32                       5.53ns ± 0%\nRBMutexWorkWrite100000-64                       4.04ns ± 3%\nRWMutexWorkWrite100000                           121ns ± 0%\nRWMutexWorkWrite100000-2                         128ns ± 1%\nRWMutexWorkWrite100000-4                         124ns ± 2%\nRWMutexWorkWrite100000-8                         101ns ± 1%\nRWMutexWorkWrite100000-16                       92.9ns ± 1%\nRWMutexWorkWrite100000-32                       89.9ns ± 1%\nRWMutexWorkWrite100000-64                       88.4ns ± 1%\n```\n\n----------------------------------------\n\nTITLE: Printing with newline using fmt.Fprintln in Go\nDESCRIPTION: This snippet references the Fprintln function from the fmt package. It prints to a specified writer and adds a newline at the end.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/.errcheck_excludes.txt#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Fprintln\n```\n\n----------------------------------------\n\nTITLE: Using OpenTelemetry Package Import Path\nDESCRIPTION: Example of OpenTelemetry package import path after the SDK module split.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/sdk\"\n```\n\n----------------------------------------\n\nTITLE: Installing slug Dependency using go get\nDESCRIPTION: This command installs the `gosimple/slug` package, used for generating URL-friendly slugs. The Grafana SDK uses this package for compatibility reasons, as it's also used in the Grafana server itself.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana-tools/sdk/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\n\tgo get github.com/gosimple/slug\n```\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Tenant Delete Status Endpoint\nDESCRIPTION: API endpoint to check the status of a tenant deletion request.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_62\n\nLANGUAGE: http\nCODE:\n```\nGET /compactor/delete_tenant_status\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Flags with pflag\nDESCRIPTION: This snippet shows how to parse the command line into defined flags using pflag. It should be called after all flags are defined.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Example CLI Flag Input for Conversion\nDESCRIPTION: Provides a sample input CLI flags file for use with the conversion command. Includes a parameter for background write-back concurrency.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n-frontend.background.write-back-concurrency=45\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Trace Embedded Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the documentation for the trace/embedded package on pkg.go.dev, providing quick access to the package's API documentation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/trace/embedded/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/embedded)\n```\n\n----------------------------------------\n\nTITLE: Getting Azure CLI Access Token\nDESCRIPTION: Azure CLI command to obtain an access token for the current account.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz account get-access-token --output json --resource https://management.core.windows.net\n```\n\n----------------------------------------\n\nTITLE: Mimir Structured Configuration with Environment Variables\nDESCRIPTION: Example of Mimir configuration using environment variables for sensitive data.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-helm-chart-2.x-to-3.0.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    blocks_storage:\n      s3:\n        secret_access_key: ${AWS_SECRET_ACCESS_KEY}\n```\n\n----------------------------------------\n\nTITLE: Installing ULID Package with Go\nDESCRIPTION: Command to install the ULID package using Go's package manager.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/oklog/ulid\n```\n\n----------------------------------------\n\nTITLE: Registering a View in Go\nDESCRIPTION: Example of how to register a view with a distribution aggregation for collecting data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := view.Register(&view.View{\n\tName:        \"example.com/video_size_distribution\",\n\tDescription: \"distribution of processed video size over time\",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf(\"Failed to register view: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: LZ4 Compression Example in Go\nDESCRIPTION: Example demonstrating how to compress and uncompress a string using LZ4 with pipes and goroutines. Shows basic usage of the LZ4 Writer and Reader interfaces.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Compress and uncompress an input string.\ns := \"hello world\"\nr := strings.NewReader(s)\n\n// The pipe will uncompress the data from the writer.\npr, pw := io.Pipe()\nzw := lz4.NewWriter(pw)\nzr := lz4.NewReader(pr)\n\ngo func() {\n\t// Compress the input string.\n\t_, _ = io.Copy(zw, r)\n\t_ = zw.Close() // Make sure the writer is closed\n\t_ = pw.Close() // Terminate the pipe\n}()\n\n_, _ = io.Copy(os.Stdout, zr)\n\n// Output:\n// hello world\n```\n\n----------------------------------------\n\nTITLE: Overriding Package Versions for Grafana Mimir\nDESCRIPTION: This snippet specifies package replacements and version overrides for various dependencies used in the Grafana Mimir project. It includes custom forks and specific versions for packages like Prometheus, memberlist, and yaml.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/modules.txt#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n# github.com/prometheus/prometheus => github.com/grafana/mimir-prometheus v1.8.2-0.20250414042702-d35df15de7be\n# github.com/hashicorp/memberlist => github.com/grafana/memberlist v0.3.1-0.20220714140823-09ffed8adbbe\n# gopkg.in/yaml.v3 => github.com/colega/go-yaml-yaml v0.0.0-20220720105220-255a8d16d094\n# github.com/grafana/regexp => github.com/grafana/regexp v0.0.0-20240531075221-3685f1377d7b\n# github.com/munnerz/goautoneg => github.com/grafana/goautoneg v0.0.0-20240607115440-f335c04c58ce\n# github.com/opentracing-contrib/go-stdlib => github.com/grafana/opentracing-contrib-go-stdlib v0.0.0-20230509071955-f410e79da956\n# github.com/opentracing-contrib/go-grpc => github.com/charleskorn/go-grpc v0.0.0-20231024023642-e9298576254f\n# github.com/prometheus/alertmanager => github.com/grafana/prometheus-alertmanager v0.25.1-0.20250331083058-4563aec7a975\n# github.com/twmb/franz-go => github.com/grafana/franz-go v0.0.0-20241009100846-782ba1442937\n# google.golang.org/grpc => google.golang.org/grpc v1.65.0\n```\n\n----------------------------------------\n\nTITLE: Updating IAM Client Library Dependencies in Go\nDESCRIPTION: Updates google.golang.org/api dependency to v0.203.0 and adds a warning about upcoming Protobuf changes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/iam/CHANGES.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get -u google.golang.org/api@v0.203.0\n```\n\n----------------------------------------\n\nTITLE: Verifying App Service Managed Identity Endpoint\nDESCRIPTION: Shell command to verify managed identity availability in App Service environment by making a curl request using environment variables.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&api-version=2019-08-01\" -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\"\n```\n\n----------------------------------------\n\nTITLE: Installing otgrpc Package\nDESCRIPTION: Command to install the OpenTracing gRPC package using go get.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing-contrib/go-grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/opentracing-contrib/go-grpc\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Distributor\nDESCRIPTION: This YAML snippet showcases the configuration options for the Mimir distributor, including settings for the client pool, retry-after headers, HA tracker, ring, instance limits, and more. It allows customization of distributor behavior and resource management.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n\"pool:\\n  # (advanced) How frequently to clean up clients for ingesters that have gone\\n  # away.\\n  # CLI flag: -distributor.client-cleanup-period\\n  [client_cleanup_period: <duration> | default = 15s]\\n\\n  # (advanced) Run a health check on each ingester client during periodic\\n  # cleanup.\\n  # CLI flag: -distributor.health-check-ingesters\\n  [health_check_ingesters: <boolean> | default = true]\\n\\nretry_after_header:\\n  # (advanced) Enables inclusion of the Retry-After header in the response: true\\n  # includes it for client retry guidance, false omits it.\\n  # CLI flag: -distributor.retry-after-header.enabled\\n  [enabled: <boolean> | default = true]\\n\\n  # (advanced) Minimum duration of the Retry-After HTTP header in responses to\\n  # 429/5xx errors. Must be greater than or equal to 1s. Backoff is calculated\\n  # as MinBackoff*2^(RetryAttempt-1) seconds with random jitter of 50% in either\\n  # direction. RetryAttempt is the value of the Retry-Attempt HTTP header.\\n  # CLI flag: -distributor.retry-after-header.min-backoff\\n  [min_backoff: <duration> | default = 6s]\\n\\n  # (advanced) Minimum duration of the Retry-After HTTP header in responses to\\n  # 429/5xx errors. Must be greater than or equal to 1s. Backoff is calculated\\n  # as MinBackoff*2^(RetryAttempt-1) seconds with random jitter of 50% in either\\n  # direction. RetryAttempt is the value of the Retry-Attempt HTTP header.\\n  # CLI flag: -distributor.retry-after-header.max-backoff\\n  [max_backoff: <duration> | default = 1m36s]\\n\\nha_tracker:\\n  # Enable the distributors HA tracker so that it can accept samples from\\n  # Prometheus HA replicas gracefully (requires labels).\\n  # CLI flag: -distributor.ha-tracker.enable\\n  [enable_ha_tracker: <boolean> | default = false]\\n\\n  # (advanced) Update the timestamp in the KV store for a given cluster/replica\\n  # only after this amount of time has passed since the current stored\\n  # timestamp.\\n  # CLI flag: -distributor.ha-tracker.update-timeout\\n  [ha_tracker_update_timeout: <duration> | default = 15s]\\n\\n  # (advanced) Maximum jitter applied to the update timeout, in order to spread\\n  # the HA heartbeats over time.\\n  # CLI flag: -distributor.ha-tracker.update-timeout-jitter-max\\n  [ha_tracker_update_timeout_jitter_max: <duration> | default = 5s]\\n\\n  # (advanced) If we don't receive any samples from the accepted replica for a\\n  # cluster in this amount of time we will failover to the next replica we\\n  # receive a sample from. This value must be greater than the update timeout\\n  # CLI flag: -distributor.ha-tracker.failover-timeout\\n  [ha_tracker_failover_timeout: <duration> | default = 30s]\\n\\n  # Enable the elected_replica_status metric, which shows the current elected\\n  # replica. It is disabled by default due to the possible high cardinality of\\n  # the metric.\\n  # CLI flag: -distributor.ha-tracker.enable-elected-replica-metric\\n  [enable_elected_replica_metric: <boolean> | default = false]\\n\\n  # Backend storage to use for the ring. Note that memberlist support is\\n  # experimental.\\n  kvstore:\\n    # Backend storage to use for the ring. Supported values are: consul, etcd,\\n    # inmemory, memberlist, multi.\\n    # CLI flag: -distributor.ha-tracker.store\\n    [store: <string> | default = \\\"consul\\\"]\\n\\n    # (advanced) The prefix for the keys in the store. Should end with a /.\\n    # CLI flag: -distributor.ha-tracker.prefix\\n    [prefix: <string> | default = \\\"ha-tracker/\\\"]\\n\\n    # The consul block configures the consul client.\\n    # The CLI flags prefix for this block configuration is:\\n    # distributor.ha-tracker\\n    [consul: <consul>]\\n\\n    # The etcd block configures the etcd client.\\n    # The CLI flags prefix for this block configuration is:\\n    # distributor.ha-tracker\\n    [etcd: <etcd>]\\n\\n    multi:\\n      # (advanced) Primary backend storage used by multi-client.\\n      # CLI flag: -distributor.ha-tracker.multi.primary\\n      [primary: <string> | default = \\\"\\\"]\\n\\n      # (advanced) Secondary backend storage used by multi-client.\\n      # CLI flag: -distributor.ha-tracker.multi.secondary\\n      [secondary: <string> | default = \\\"\\\"]\\n\\n      # (advanced) Mirror writes to secondary store.\\n      # CLI flag: -distributor.ha-tracker.multi.mirror-enabled\\n      [mirror_enabled: <boolean> | default = false]\\n\\n      # (advanced) Timeout for storing value to secondary store.\\n      # CLI flag: -distributor.ha-tracker.multi.mirror-timeout\\n      [mirror_timeout: <duration> | default = 2s]\\n\\n# (advanced) Max message size in bytes that the distributors will accept for\\n# incoming push requests to the remote write API. If exceeded, the request will\\n# be rejected.\\n# CLI flag: -distributor.max-recv-msg-size\\n[max_recv_msg_size: <int> | default = 104857600]\\n\\n# (experimental) Maximum OTLP request size in bytes that the distributors\\n# accept. Requests exceeding this limit are rejected.\\n# CLI flag: -distributor.max-otlp-request-size\\n[max_otlp_request_size: <int> | default = 104857600]\\n\\n# (experimental) Max size of the pooled buffers used for marshaling write\\n# requests. If 0, no max size is enforced.\\n# CLI flag: -distributor.max-request-pool-buffer-size\\n[max_request_pool_buffer_size: <int> | default = 0]\\n\\n# (advanced) Timeout for downstream ingesters.\\n# CLI flag: -distributor.remote-timeout\\n[remote_timeout: <duration> | default = 2s]\\n\\nring:\\n  # The key-value store used to share the hash ring across multiple instances.\\n  kvstore:\\n    # Backend storage to use for the ring. Supported values are: consul, etcd,\\n    # inmemory, memberlist, multi.\\n    # CLI flag: -distributor.ring.store\\n    [store: <string> | default = \\\"memberlist\\\"]\\n\\n    # (advanced) The prefix for the keys in the store. Should end with a /.\\n    # CLI flag: -distributor.ring.prefix\\n    [prefix: <string> | default = \\\"collectors/\\\"]\\n\\n    # The consul block configures the consul client.\\n    # The CLI flags prefix for this block configuration is: distributor.ring\\n    [consul: <consul>]\\n\\n    # The etcd block configures the etcd client.\\n    # The CLI flags prefix for this block configuration is: distributor.ring\\n    [etcd: <etcd>]\\n\\n    multi:\\n      # (advanced) Primary backend storage used by multi-client.\\n      # CLI flag: -distributor.ring.multi.primary\\n      [primary: <string> | default = \\\"\\\"]\\n\\n      # (advanced) Secondary backend storage used by multi-client.\\n      # CLI flag: -distributor.ring.multi.secondary\\n      [secondary: <string> | default = \\\"\\\"]\\n\\n      # (advanced) Mirror writes to secondary store.\\n      # CLI flag: -distributor.ring.multi.mirror-enabled\\n      [mirror_enabled: <boolean> | default = false]\\n\\n      # (advanced) Timeout for storing value to secondary store.\\n      # CLI flag: -distributor.ring.multi.mirror-timeout\\n      [mirror_timeout: <duration> | default = 2s]\\n\\n  # (advanced) Period at which to heartbeat to the ring. 0 = disabled.\\n  # CLI flag: -distributor.ring.heartbeat-period\\n  [heartbeat_period: <duration> | default = 15s]\\n\\n  # (advanced) The heartbeat timeout after which distributors are considered\\n  # unhealthy within the ring. 0 = never (timeout disabled).\\n  # CLI flag: -distributor.ring.heartbeat-timeout\\n  [heartbeat_timeout: <duration> | default = 1m]\\n\\n  # (advanced) Instance ID to register in the ring.\\n  # CLI flag: -distributor.ring.instance-id\\n  [instance_id: <string> | default = \\\"<hostname>\\\"]\\n\\n  # List of network interface names to look up when finding the instance IP\\n  # address.\\n  # CLI flag: -distributor.ring.instance-interface-names\\n  [instance_interface_names: <list of strings> | default = [<private network interfaces>]]\\n\\n  # (advanced) Port to advertise in the ring (defaults to\\n  # -server.grpc-listen-port).\\n  # CLI flag: -distributor.ring.instance-port\\n  [instance_port: <int> | default = 0]\\n\\n  # (advanced) IP address to advertise in the ring. Default is auto-detected.\\n  # CLI flag: -distributor.ring.instance-addr\\n  [instance_addr: <string> | default = \\\"\\\"]\\n\\n  # (advanced) Enable using a IPv6 instance address. (default false)\\n  # CLI flag: -distributor.ring.instance-enable-ipv6\\n  [instance_enable_ipv6: <boolean> | default = false]\\n\\ninstance_limits:\\n  # (advanced) Max ingestion rate (samples/sec) that this distributor will\\n  # accept. This limit is per-distributor, not per-tenant. Additional push\\n  # requests will be rejected. Current ingestion rate is computed as\\n  # exponentially weighted moving average, updated every second. 0 = unlimited.\\n  # CLI flag: -distributor.instance-limits.max-ingestion-rate\\n  [max_ingestion_rate: <float> | default = 0]\\n\\n  # (advanced) Max inflight push requests that this distributor can handle. This\\n  # limit is per-distributor, not per-tenant. Additional requests will be\\n  # rejected. 0 = unlimited.\\n  # CLI flag: -distributor.instance-limits.max-inflight-push-requests\\n  [max_inflight_push_requests: <int> | default = 2000]\\n\\n  # (advanced) The sum of the request sizes in bytes of inflight push requests\\n  # that this distributor can handle. This limit is per-distributor, not\\n  # per-tenant. Additional requests will be rejected. 0 = unlimited.\\n  # CLI flag: -distributor.instance-limits.max-inflight-push-requests-bytes\\n  [max_inflight_push_requests_bytes: <int> | default = 0]\\n\\n# (experimental) Enable pooling of buffers used for marshaling write requests.\\n# CLI flag: -distributor.write-requests-buffer-pooling-enabled\\n[write_requests_buffer_pooling_enabled: <boolean> | default = true]\\n\\n# (advanced) Number of pre-allocated workers used to forward push requests to\\n# the ingesters. If 0, no workers will be used and a new goroutine will be\\n# spawned for each ingester push request. If not enough workers available, new\\n# goroutine will be spawned. (Note: this is a performance optimization, not a\\n# limiting feature.)\\n# CLI flag: -distributor.reusable-ingester-push-workers\\n[reusable_ingester_push_workers: <int> | default = 2000]\"\n```\n\n----------------------------------------\n\nTITLE: YAML Processing Example in Go\nDESCRIPTION: Demonstrates how to unmarshal YAML data into Go structs and maps, and marshal Go data structures back to YAML format. Shows handling of nested structures, slices, and custom YAML tags.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/yaml.v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: YAML\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Importing Vault API Package in Go\nDESCRIPTION: This snippet shows how to import the Vault API package in a Go project. The package provides functionality for interacting with a Vault server.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/vault/api/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"github.com/hashicorp/vault/api\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Scheduler and Usage Stats in YAML\nDESCRIPTION: Defines configuration options for the query scheduler and usage statistics reporting. Includes settings for enabling anonymous usage reporting and specifying the installation mode.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# The query_scheduler block configures the query-scheduler.\n[query_scheduler: <query_scheduler>]\n\nusage_stats:\n  # Enable anonymous usage reporting.\n  # CLI flag: -usage-stats.enabled\n  [enabled: <boolean> | default = true]\n\n  # Installation mode. Supported values: custom, helm, jsonnet.\n  # CLI flag: -usage-stats.installation-mode\n  [installation_mode: <string> | default = \"custom\"]\n```\n\n----------------------------------------\n\nTITLE: Convert from Roaring Bitmap\nDESCRIPTION: Shows how to convert a Roaring bitmap to a standard bitset. Uses the `FromBitSet` method from the `roaring` library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n\t\t\tnewroaringbitmap := roaring.FromBitSet(mybitset)\n```\n```\n\n----------------------------------------\n\nTITLE: Adding User-Specific Override Method in Go\nDESCRIPTION: Example of adding a user-specific override method to the validation.Overrides struct for the new config option.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (o *Overrides) ResultsCacheForUnalignedQueryEnabled(userID string) bool {\n    return o.getOverridesForUser(user).ResultsCacheForUnalignedQueryEnabled\n}\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Enable Notify Hooks\nDESCRIPTION: This experimental flag enables pre-notification hooks, allowing custom actions to be executed before notifications are sent.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_106\n\nLANGUAGE: yaml\nCODE:\n```\n# (experimental) Enable pre-notification hooks.\n# CLI flag: -alertmanager.notify-hooks-enabled\n[enable_notify_hooks: <boolean> | default = false]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TSDB Block Ranges and Compactor Settings for Mimir\nDESCRIPTION: These configuration options set the block ranges period for TSDB storage and define the block ranges for the compactor in Mimir. The TSDB block ranges period is set to 2 hours, while the compactor block ranges are set to 2 hours, 12 hours, and 25 hours.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/duration-slice-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-blocks-storage.tsdb.block-ranges-period=2h\n-compactor.block-ranges=2h,12h,25h\n```\n\n----------------------------------------\n\nTITLE: GitIgnore with Base Directory Specification in Go\nDESCRIPTION: Shows how to create a GitIgnore matcher with a custom base directory. Useful for handling current directory or global gitignore patterns.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnore(\"/home/you/.gitignore\", \".\")\n```\n\n----------------------------------------\n\nTITLE: Deploying manifests using kubectl\nDESCRIPTION: Commands to review and apply the generated Kubernetes manifests directly to the cluster using kubectl.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/deploy.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Review the changes that will apply to your Kubernetes cluster:\nkubectl apply --dry-run=client -k manifests/\n\n# Apply the changes to your Kubernetes cluster:\nkubectl apply -k manifests/\n```\n\n----------------------------------------\n\nTITLE: Running the Go Program\nDESCRIPTION: This snippet executes the Go application that interacts with the Consul API and performs key-value operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Removing External Labels from Meta.json Files for AWS S3\nDESCRIPTION: Bash script to remove Thanos labels from meta.json files in AWS S3 buckets. This step is necessary because Mimir's compactor cannot compact blocks with external labels in meta.json.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nBUCKET=\"XXX\"\n\necho \"Fetching list of meta.json files (this can take a while if there are many blocks)\"\naws s3 ls $BUCKET --recursive | awk '{print $4}' | grep meta.json | grep -v meta.json.orig > meta-files.txt\n\necho \"Processing meta.json files\"\nfor FILE in $(cat meta-files.txt); do\n   echo \"Removing Thanos labels from $FILE\"\n   ORIG_META_JSON=$(aws s3 cp s3://$BUCKET/$FILE -)\n   UPDATED_META_JSON=$(echo \"$ORIG_META_JSON\" | jq \"del(.thanos.labels)\")\n\n   if ! diff -u <( echo \"$ORIG_META_JSON\" | jq . ) <( echo \"$UPDATED_META_JSON\" | jq .) > /dev/null; then\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for Go Package Documentation\nDESCRIPTION: Markdown code that displays a PkgGoDev badge linking to the OpenTelemetry trace package documentation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/trace/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/trace)\n```\n\n----------------------------------------\n\nTITLE: Creating Test File in Linux/macOS\nDESCRIPTION: This command creates a test file with random data using the dd utility on Linux or macOS systems.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndd if=/dev/urandom of=/tmp/testdata bs=2048 count=10\n```\n\n----------------------------------------\n\nTITLE: Querier Mimir Query Engine: Use Query Planning Configuration\nDESCRIPTION: Determines whether to use the query planner when evaluating queries with the Mimir query engine. This is an experimental feature that may affect query performance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_40\n\nLANGUAGE: text\nCODE:\n```\n\"mimir_query_engine:\\n  # (experimental) Use query planner when evaluating queries.\\n  # CLI flag: -querier.mimir-query-engine.use-query-planning\\n  [use_query_planning: <boolean> | default = false]\"\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release Manually\nDESCRIPTION: Command for building release binaries in a container environment for standardized toolchain.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake BUILD_IN_CONTAINER=true dist\n```\n\n----------------------------------------\n\nTITLE: Running Mimir with Specific Profiles\nDESCRIPTION: Command to start Mimir with specific agent profiles. Profiles control which monitoring agents are started alongside Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/development/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./compose-up.sh --profile <profile1> --profile <profile2>\n```\n\n----------------------------------------\n\nTITLE: Clock Package Documentation in Markdown\nDESCRIPTION: Documentation header explaining the purpose of the clock package, which provides an interface for time-based operations and allows time mocking for testing. Notes that it's a copy of k8s.io/utils/clock to avoid circular dependencies.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/klog/v2/internal/clock/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Clock\n\nThis package provides an interface for time-based operations.  It allows\nmocking time for testing.\n\nThis is a copy of k8s.io/utils/clock. We have to copy it to avoid a circular\ndependency (k8s.io/klog -> k8s.io/utils -> k8s.io/klog).\n```\n\n----------------------------------------\n\nTITLE: Final Unified Stable Release\nDESCRIPTION: Final stable release bringing all modules to v1.1.0\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_9\n\nLANGUAGE: text\nCODE:\n```\notel: v1.1.0\notel/trace: v1.1.0\notel/metric: v1.1.0\notel/baggage: v1.1.0\notel/sdk/trace: v1.1.0\notel/sdk/metric: v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Module with Go Get\nDESCRIPTION: Command to install the Azure Identity module using Go modules for dependency management.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Cloning Mimir Repository in Bash\nDESCRIPTION: Command to clone the Grafana Mimir repository from GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grafana/mimir.git\n```\n\n----------------------------------------\n\nTITLE: Installing etcd/clientv3 Go Client\nDESCRIPTION: Command to install the official Go client for etcd v3 using go get. This is the standard installation method for released versions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get go.etcd.io/etcd/client/v3\n```\n\n----------------------------------------\n\nTITLE: Basic SugaredLogger Usage in Go\nDESCRIPTION: Demonstrates using Zap's SugaredLogger for contexts where performance is important but not critical. Provides both structured and printf-style logging APIs with 4-10x better performance than other logging packages.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync() // flushes buffer, if any\nsugar := logger.Sugar()\nsugar.Infow(\"failed to fetch URL\",\n  // Structured context as loosely typed key-value pairs.\n  \"url\", url,\n  \"attempt\", 3,\n  \"backoff\", time.Second,\n)\nsugar.Infof(\"Failed to fetch URL: %s\", url)\n```\n\n----------------------------------------\n\nTITLE: Defining Flags with Shorthand in pflag\nDESCRIPTION: This example demonstrates how to define flags with one-letter shorthands using pflag's 'P' suffix functions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flags with pflag\nDESCRIPTION: This example demonstrates how to create custom flags that satisfy the Value interface and couple them to flag parsing using pflag.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies - Azure SDK Components\nDESCRIPTION: Azure SDK module dependencies including core components, identity management, and storage functionality. These modules enable interaction with Azure services.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/modules.txt#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n# github.com/Azure/azure-sdk-for-go/sdk/azcore v1.17.1\n## explicit; go 1.23.0\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore/arm/internal/resource\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore/arm/policy\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Updated JSON Output Format\nDESCRIPTION: Example showing the new harmonized JSON output format for the stdout trace exporter where span JSON objects are output directly after each other rather than being wrapped in arrays.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ ... } { ... } { ... }\n```\n\n----------------------------------------\n\nTITLE: Installing vfsgen via Go Get\nDESCRIPTION: Command to install the vfsgen package using Go's package management system.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/shurcooL/vfsgen/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/shurcooL/vfsgen\n```\n\n----------------------------------------\n\nTITLE: Installing Backoff Library in Go\nDESCRIPTION: Command to install the backoff library using go get.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jpillora/backoff/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -v github.com/jpillora/backoff\n```\n\n----------------------------------------\n\nTITLE: Visualizing Resolver Configuration Resolution Flow in Terminal ASCII\nDESCRIPTION: This terminal ASCII diagram illustrates the sequence flow between Resolver and Provider during configuration resolution. It shows how the Resolver retrieves configurations from Providers, merges them, processes embedded URIs, and applies converters to produce the final effective configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n              Resolver                   Provider\n   Resolve       │                          │\n────────────────►│                          │\n                 │                          │\n              ┌─ │        Retrieve          │\n              │  ├─────────────────────────►│\n              │  │          Conf            │\n              │  │◄─────────────────────────┤\n  foreach     │  │                          │\n  configURI   │  ├───┐                      │\n              │  │   │Merge                 │\n              │  │◄──┘                      │\n              └─ │                          │\n              ┌─ │        Retrieve          │\n              │  ├─────────────────────────►│\n              │  │    Partial Conf Value    │\n              │  │◄─────────────────────────┤\n  foreach     │  │                          │\n  embedded    │  │                          │\n  configURI   │  ├───┐                      │\n              │  │   │Replace               │\n              │  │◄──┘                      │\n              └─ │                          │\n                 │            Converter     │\n              ┌─ │     Convert    │         │\n              │  ├───────────────►│         │\n    foreach   │  │                │         │\n   Converter  │  │◄───────────────┤         │\n              └─ │                          │\n                 │                          │\n◄────────────────┤                          │\n```\n\n----------------------------------------\n\nTITLE: Protobuf Code Generation Command for gRPC HTTP Proxy\nDESCRIPTION: Command to rebuild generated protobuf code for the httpgrpc service, enabling protocol translation between HTTP and gRPC\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/dskit/httpgrpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprotoc -I ./ --go_out=plugins=grpc:./ ./httpgrpc.proto\n```\n\n----------------------------------------\n\nTITLE: String Option Behavior (Go)\nDESCRIPTION: This example showcases the changes related to the `string` option's behavior.  Specifically, v2 makes the `string` option not affect Go bools, recursively affect sub-values, and never accepts JSON nulls escaped within a string.  This snippet is linked to the `TestStringOption` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n\"[StringOption](/diff_test.go#:~:text=TestStringOption)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Distributor Remote Timeout in Grafana Mimir\nDESCRIPTION: Configuration parameter that sets the remote timeout for the distributor component to 10 seconds. This timeout value controls how long the distributor waits for remote operations before timing out.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/noop-flags-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-distributor.remote-timeout=10s\n```\n\n----------------------------------------\n\nTITLE: Fixing Response Status Code Check in Submit Batch Request\nDESCRIPTION: YAML directive that changes the expected HTTP status code for batch submission responses from 200 OK to 202 Accepted to match the service's behavior.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_service_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/if\\s+!runtime\\.HasStatusCode\\(httpResp,\\s+http\\.StatusOK\\)\\s+\\{\\s+err\\s+=\\s+runtime\\.NewResponseError\\(httpResp\\)\\s+return ServiceClientSubmitBatchResponse\\{\\},\\s+err\\s+}/g, \n      `if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {\\n\\t\\terr = runtime.NewResponseError(httpResp)\\n\\t\\treturn ServiceClientSubmitBatchResponse{}, err\\n\\t}`);\n```\n\n----------------------------------------\n\nTITLE: Fixing Content-Type Header in Submit Batch Request\nDESCRIPTION: YAML directive that changes the hard-coded 'application/xml' content type to the dynamic multipartContentType variable in batch submission requests.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_container_client.go\n  - zz_service_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/req.SetBody\\(body\\,\\s+\"application\\/xml\"\\)/g, `req.SetBody(body, multipartContentType)`);\n```\n\n----------------------------------------\n\nTITLE: Installing sdnotify Go Package\nDESCRIPTION: Command to install the sdnotify package using Go's package management system. This snippet shows how to fetch and install the package from GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/okzk/sdnotify/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/okzk/sdnotify\n```\n\n----------------------------------------\n\nTITLE: Verifying README Files\nDESCRIPTION: This command checks for the presence of README files in the repository, ensuring that each necessary package has a README following the project's guidelines.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake verify-readmes\n```\n\n----------------------------------------\n\nTITLE: Using azidentity credentials with older Azure SDK packages in Go\nDESCRIPTION: This snippet demonstrates how to use azidentity credentials with older Azure SDK packages using the azidext adapter.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/jongio/azidext/go/azidext\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = azidext.NewTokenCredentialAdapter(cred, []string{\"https://management.azure.com//.default\"})\n```\n\n----------------------------------------\n\nTITLE: Activating Required Fields Behavior in GoValidator\nDESCRIPTION: Shows how to activate the behavior that requires all fields to have a validation tag by default. This is typically done in a package init function or the main() function.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\nfunc init() {\n  govalidator.SetFieldsRequiredByDefault(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation (After GC Pressure Reduction) in Go\nDESCRIPTION: Benchmark results after reducing garbage collection pressure, showing further improvements in memory allocation and execution time.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t3758414145 ns/op\t2593881496 B/op\t17111373 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format\nDESCRIPTION: Structured changelog entries detailing version releases, changes, and GitHub issue references from v1.0.0 to v1.5.1.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-viper/mapstructure/v2/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!WARNING]\\n> As of v2 of this library, change log can be found in GitHub releases.\\n\\n## 1.5.1\\n\\n* Wrap errors so they're compatible with `errors.Is` and `errors.As` [GH-282]\\n* Fix map of slices not decoding properly in certain cases. [GH-266]\\n\\n## 1.5.0\\n\\n* New option `IgnoreUntaggedFields` to ignore decoding to any fields\\n  without `mapstructure` (or the configured tag name) set [GH-277]\\n* New option `ErrorUnset` which makes it an error if any fields\\n  in a target struct are not set by the decoding process. [GH-225]\\n* New function `OrComposeDecodeHookFunc` to help compose decode hooks. [GH-240]\\n* Decoding to slice from array no longer crashes [GH-265]\\n* Decode nested struct pointers to map [GH-271]\\n* Fix issue where `,squash` was ignored if `Squash` option was set. [GH-280]\\n* Fix issue where fields with `,omitempty` would sometimes decode\\n  into a map with an empty string key [GH-281]\n```\n\n----------------------------------------\n\nTITLE: Output Example of Wrapped Text\nDESCRIPTION: Shows the expected output from the previous code example, demonstrating how the text is wrapped with each word on its own line when the line length is set to 3 characters.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfoo\nbar\nbaz\n```\n\n----------------------------------------\n\nTITLE: Adding Release Tags to OpenTelemetry Go Modules\nDESCRIPTION: Make command to add release tags to modules in a specific module set, optionally specifying a commit hash if not using the current HEAD.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: Creating Merge PR for Release Branch\nDESCRIPTION: Script command to create a pull request for merging a release branch into the main branch.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./tools/release/create-pr-to-merge-release-branch-to-main.sh\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Logrus Logging Levels in Go\nDESCRIPTION: This code snippet shows how to use different logging levels in Logrus, including Trace, Debug, Info, Warning, Error, Fatal, and Panic. It also demonstrates how to set the global logging level for the application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Unexported Struct Serialization (Go)\nDESCRIPTION: This example addresses the ability to serialize structs with only unexported fields. v1 allowed serialization, while v2 does not. This snippet is linked to the `TestEmptyStructs` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\n\"[EmptyStructs](/diff_test.go#:~:text=TestEmptyStructs)\"\n```\n\n----------------------------------------\n\nTITLE: Changing CORS Acronym to All Capitals\nDESCRIPTION: YAML directive that changes all occurrences of 'Cors' to 'CORS' in the Go source files to maintain consistent acronym casing.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/Cors/g, \"CORS\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Master Branch Rules Sync Workflow in GitHub Actions\nDESCRIPTION: GitHub Actions workflow that synchronizes rule files from the master branch with the configured Mimir cluster. Automatically runs when changes are pushed to the master branch.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/mimir-rules-action/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: sync_rules_master\non:\n  push:\n    branches:\n      - master\njobs:\n  sync-master:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          ref: master\n      - name: sync-rules\n        uses: grafana/mimir/operations/mimir-rules-action@main\n        env:\n          MIMIR_ADDRESS: https://example-cluster.com/\n          MIMIR_TENANT_ID: 1\n          MIMIR_API_KEY: ${{ secrets.MIMIR_API_KEY }}\n          ACTION: sync\n          RULES_DIR: \"./rules/\"\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Go Package Import Example\nDESCRIPTION: Example import paths mentioned in the release notes for OpenTelemetry Go SDK packages\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/log\ngo.opentelemetry.io/otel/semconv/v1.26.0\ngo.opentelemetry.io/otel/exporters/zipkin\ngo.opentelemetry.io/otel/sdk/resource\ngo.opentelemetry.io/otel/sdk/trace\n```\n\n----------------------------------------\n\nTITLE: Installing vfsgendev Command-line Tool\nDESCRIPTION: Command to install the vfsgendev binary for use in go generate directives.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/shurcooL/vfsgen/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/shurcooL/vfsgen/cmd/vfsgendev\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata Package\nDESCRIPTION: Command to install the Google Cloud Compute metadata package using Go's package manager.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Configuring Overrides Exporter Ring in YAML\nDESCRIPTION: Specifies settings for the overrides exporter ring, including backend storage options, heartbeat configurations, and instance settings. This ring is used to deduplicate exported limit metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\noverrides_exporter:\n  ring:\n    # Enable the ring used by override-exporters to deduplicate exported limit\n    # metrics.\n    # CLI flag: -overrides-exporter.ring.enabled\n    [enabled: <boolean> | default = false]\n\n    # The key-value store used to share the hash ring across multiple instances.\n    kvstore:\n      # Backend storage to use for the ring. Supported values are: consul, etcd,\n      # inmemory, memberlist, multi.\n      # CLI flag: -overrides-exporter.ring.store\n      [store: <string> | default = \"memberlist\"]\n\n      # (advanced) The prefix for the keys in the store. Should end with a /.\n      # CLI flag: -overrides-exporter.ring.prefix\n      [prefix: <string> | default = \"collectors/\"]\n\n      # The consul block configures the consul client.\n      # The CLI flags prefix for this block configuration is:\n      # overrides-exporter.ring\n      [consul: <consul>]\n\n      # The etcd block configures the etcd client.\n      # The CLI flags prefix for this block configuration is:\n      # overrides-exporter.ring\n      [etcd: <etcd>]\n\n      multi:\n        # (advanced) Primary backend storage used by multi-client.\n        # CLI flag: -overrides-exporter.ring.multi.primary\n        [primary: <string> | default = \"\"]\n\n        # (advanced) Secondary backend storage used by multi-client.\n        # CLI flag: -overrides-exporter.ring.multi.secondary\n        [secondary: <string> | default = \"\"]\n\n        # (advanced) Mirror writes to secondary store.\n        # CLI flag: -overrides-exporter.ring.multi.mirror-enabled\n        [mirror_enabled: <boolean> | default = false]\n\n        # (advanced) Timeout for storing value to secondary store.\n        # CLI flag: -overrides-exporter.ring.multi.mirror-timeout\n        [mirror_timeout: <duration> | default = 2s]\n\n    # (advanced) Period at which to heartbeat to the ring. 0 = disabled.\n    # CLI flag: -overrides-exporter.ring.heartbeat-period\n    [heartbeat_period: <duration> | default = 15s]\n\n    # (advanced) The heartbeat timeout after which overrides-exporters are\n    # considered unhealthy within the ring. 0 = never (timeout disabled).\n    # CLI flag: -overrides-exporter.ring.heartbeat-timeout\n    [heartbeat_timeout: <duration> | default = 1m]\n\n    # (advanced) Instance ID to register in the ring.\n    # CLI flag: -overrides-exporter.ring.instance-id\n    [instance_id: <string> | default = \"<hostname>\"]\n\n    # List of network interface names to look up when finding the instance IP\n    # address.\n    # CLI flag: -overrides-exporter.ring.instance-interface-names\n    [instance_interface_names: <list of strings> | default = [<private network interfaces>]]\n\n    # (advanced) Port to advertise in the ring (defaults to\n    # -server.grpc-listen-port).\n    # CLI flag: -overrides-exporter.ring.instance-port\n    [instance_port: <int> | default = 0]\n\n    # (advanced) IP address to advertise in the ring. Default is auto-detected.\n    # CLI flag: -overrides-exporter.ring.instance-addr\n    [instance_addr: <string> | default = \"\"]\n\n    # (advanced) Enable using a IPv6 instance address. (default false)\n    # CLI flag: -overrides-exporter.ring.instance-enable-ipv6\n    [instance_enable_ipv6: <boolean> | default = false]\n\n    # (advanced) Minimum time to wait for ring stability at startup, if set to\n    # positive value. Set to 0 to disable.\n    # CLI flag: -overrides-exporter.ring.wait-stability-min-duration\n    [wait_stability_min_duration: <duration> | default = 0s]\n\n    # (advanced) Maximum time to wait for ring stability at startup. If the\n    # overrides-exporter ring keeps changing after this period of time, it will\n    # start anyway.\n    # CLI flag: -overrides-exporter.ring.wait-stability-max-duration\n    [wait_stability_max_duration: <duration> | default = 5m]\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Connect Backoff Max Delay\nDESCRIPTION: This parameter defines the maximum backoff delay when establishing a connection. It limits how long the client will wait before retrying a connection.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_99\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Maximum backoff delay when establishing a connection. Only\n  # relevant if ConnectTimeout > 0.\n  # CLI flag: -alertmanager.alertmanager-client.connect-backoff-max-delay\n  [connect_backoff_max_delay: <duration> | default = 5s]\n\n```\n\n----------------------------------------\n\nTITLE: Time Duration Representation (Go)\nDESCRIPTION: This example demonstrates the change in representing `time.Duration` values in JSON. v1 represented them as JSON numbers of nanoseconds, while v2 uses formatted JSON strings. This snippet is linked to the `TestTimeDurations` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\n\"[TimeDurations](/diff_test.go#:~:text=TestTimeDurations)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Interface Values using reflect2 in Go\nDESCRIPTION: Shows how to use reflect2 to set values of interface{} types. This method includes type checking and is more efficient than standard reflection.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Initializing Prometheus Metrics with Registry\nDESCRIPTION: Example pattern for creating and registering Prometheus metrics in Grafana Mimir components. Demonstrates proper dependency injection of the Prometheus registry instead of using the default global registerer.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/design-patterns-and-conventions.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nNewComponent(reg prometheus.Registerer)\n```\n\n----------------------------------------\n\nTITLE: Displaying S2 Decompression Speed Without Assembly in Markdown\nDESCRIPTION: This markdown table shows S2's decompression speed without assembly optimizations for various file types. It compares the throughput to an unspecified baseline and provides absolute speed in MB/s.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| File                           | S2 Throughput | S2 throughput |\n|--------------------------------|---------------|---------------|\n| consensus.db.10gb.s2           | 1.84x         | 2289.8 MB/s   |\n| 10gb.tar.s2                    | 1.30x         | 867.07 MB/s   |\n| rawstudio-mint14.tar.s2        | 1.66x         | 1329.65 MB/s  |\n| github-june-2days-2019.json.s2 | 2.36x         | 1831.59 MB/s  |\n| github-ranks-backup.bin.s2     | 1.73x         | 1390.7 MB/s   |\n| enwik9.s2                      | 1.67x         | 681.53 MB/s   |\n| adresser.json.s2               | 3.41x         | 4230.53 MB/s  |\n| silesia.tar.s2                 | 1.52x         | 811.58        |\n```\n\n----------------------------------------\n\nTITLE: Making 'Duration' Parameter Required in Lease Operations\nDESCRIPTION: YAML directive that changes the 'Duration' parameter in lease operations to be required by setting the required property to true.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.LeaseDuration\n  transform: >\n    $.required = true;\n```\n\n----------------------------------------\n\nTITLE: Setting up Zap development environment in Go\nDESCRIPTION: Commands to fork, clone, and set up the Zap repository in your Go workspace. These steps establish the proper directory structure and add the upstream remote for syncing with the main repository.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/zap.git\ncd zap\ngit remote add upstream https://github.com/uber-go/zap.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Example in Go\nDESCRIPTION: Shows how to define a struct with validation tags and validate it using GoValidator.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tTitle    string `valid:\"alphanum,required\"`\n\tMessage  string `valid:\"duck,ascii\"`\n\tMessage2 string `valid:\"animal(dog)\"`\n\tAuthorIP string `valid:\"ipv4\"`\n\tDate     string `valid:\"-\"`\n}\npost := &Post{\n\tTitle:   \"My Example Post\",\n\tMessage: \"duck\",\n\tMessage2: \"dog\",\n\tAuthorIP: \"123.234.54.3\",\n}\n\n// Add your own struct validation tags\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n\n// Add your own struct validation tags with parameter\ngovalidator.ParamTagMap[\"animal\"] = govalidator.ParamValidator(func(str string, params ...string) bool {\n    species := params[0]\n    return str == species\n})\ngovalidator.ParamTagRegexMap[\"animal\"] = regexp.MustCompile(\"^animal\\\\((\\\\w+)\\\\)$\")\n\nresult, err := govalidator.ValidateStruct(post)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Listblocks command options in Grafana Mimir\nDESCRIPTION: This snippet lists the most important options available for the listblocks command, including format specification, time filtering, and additional information display options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/listblocks.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -format string\n    \tThe format of the output. Must be one of \"tabbed\", \"json\", or \"yaml\" (default \"tabbed\")\n  -max-time value\n    \tIf set, only blocks with MaxTime <= this value is printed\n  -min-time value\n    \tIf set, only blocks with MinTime >= this value is printed\n  -show-block-size\n    \tShow size of block based on details in meta.json, if available\n  -show-compaction-level\n    \tShow compaction level\n  -show-deleted\n    \tShow deleted blocks\n  -show-labels\n    \tShow block labels\n  -show-parents\n    \tShow parent blocks\n  -show-sources\n    \tShow compaction sources\n  -show-ulid-time\n    \tShow time from ULID\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and Storage Parameters for Grafana Mimir\nDESCRIPTION: Configuration parameters for Grafana Mimir including HTTP prefixes for Alertmanager and Prometheus, along with storage settings for Azure, Google Cloud Storage (GCS), and Swift storage backends. Contains authentication and endpoint configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/uncommon-flag-values.txt#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-http.alertmanager-http-prefix='hello'world\n-http.prometheus-http-prefix='hello'world'\n-ruler-storage.azure.account-key=''\n-ruler-storage.azure.account-name=\n-ruler-storage.azure.endpoint-suffix=\"\"\n-ruler-storage.gcs.bucket-name=hello'world\n-ruler-storage.gcs.service-account={\"type\": \"service_account\"}\n-ruler-storage.swift.auth-url='\"\n-ruler-storage.swift.user-domain-id=\\\\\n-ruler-storage.swift.user-domain-name=\\\"\n-ruler-storage.swift.user-id=\"\n-ruler-storage.swift.username=\"'\"\n```\n\n----------------------------------------\n\nTITLE: Removing UnmarshalXML for BlobItems in Swagger Document\nDESCRIPTION: Adds a flag to omit serde methods for BlobItemInternal, allowing for custom UnmarshalXML function creation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobItemInternal[\"x-ms-go-omit-serde-methods\"] = true;\n```\n\n----------------------------------------\n\nTITLE: Running Jsonnet Tests Update Command in Markdown\nDESCRIPTION: This command updates the compiled Jsonnet configurations for Mimir tests. It's used in the contribution process to ensure test files match the output generated by the Jsonnet in the directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/mimir/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nmake build-jsonnet-tests\n```\n```\n\n----------------------------------------\n\nTITLE: Expecting Ordered Results in PromQL Test Scripts\nDESCRIPTION: Shows how to use the 'expect ordered' line to assert that query results should be returned in a specific order.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/promql/promqltest/README.md#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\neval instant at 1m sum by (env) (my_metric)\nexpect ordered\n{env=\"prod\"} 5\n{env=\"test\"} 20\n```\n\n----------------------------------------\n\nTITLE: Store-Gateway Migration with Downtime Configuration\nDESCRIPTION: YAML configurations for migrating store-gateways with downtime, including scaling down existing gateways and enabling zone-aware replication.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstore_gateway:\n  replicas: 0\n  zoneAwareReplication:\n    enabled: false\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstore_gateway:\n  zoneAwareReplication:\n    enabled: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies - Cloud Platform SDKs\nDESCRIPTION: List of Google Cloud, Azure, and AWS SDK dependencies with their explicit version requirements and import paths. These modules provide core functionality for interacting with major cloud platforms.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/modules.txt#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n# cloud.google.com/go v0.116.0\n## explicit; go 1.21\ncloud.google.com/go/internal\ncloud.google.com/go/internal/optional\ncloud.google.com/go/internal/trace\ncloud.google.com/go/internal/version\n\n# cloud.google.com/go/auth v0.15.0\n## explicit; go 1.23.0\ncloud.google.com/go/auth\ncloud.google.com/go/auth/credentials\ncloud.google.com/go/auth/credentials/internal/externalaccount\n```\n\n----------------------------------------\n\nTITLE: Conditional Message Selection in Go\nDESCRIPTION: This template conditionally selects either a custom message provided in the `.Message` field or defaults to the `__default_message` template. This provides a fallback mechanism for using a predefined alert message if no custom message is provided.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/alerting/receivers/templates/ng_alert_notification.txt#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n{{- if .Message -}}\n    {{ .Message }}\n{{- else -}}\n    {{ template \"__default_message\" . }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: YAML Header Configuration\nDESCRIPTION: YAML front matter configuration block defining the title, menu title, description and weight for the documentation page.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v5.2.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Grafana Mimir Helm chart version 5.2 release notes\"\nmenuTitle: \"V5.2 release notes\"\ndescription: \"Release notes for Grafana Mimir Helm chart version 5.2\"\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Release Process Commands - Branch Merge\nDESCRIPTION: Command for creating a PR to merge the release branch into main.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./tools/release/create-pr-to-merge-release-branch-to-main.sh\n```\n\n----------------------------------------\n\nTITLE: Running Release Script for Version Update - Shell\nDESCRIPTION: This snippet outlines the command to execute the 'release.sh' script, which updates version numbers in 'go.mod' files and pushes a new branch to GitHub. The TAG environment variable is set to indicate the new version number.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-redis/redis/v8/RELEASING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTAG=v1.0.0 ./scripts/release.sh\n```\n\n----------------------------------------\n\nTITLE: Feature: Add Detect Package\nDESCRIPTION: This commit introduces the `detect` package to the `auth` module. This package provides functionality for automatically detecting the appropriate credentials to use based on the environment. The commit is linked to issue #8491.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nd977419a3269f6acc193df77a2136a6eb4b4add7\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Backend in YAML\nDESCRIPTION: Configuration block for connecting to Azure Storage. Includes account configuration, authentication settings via account key or managed identities, and HTTP connection parameters. Supports multiple storage prefixes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_148\n\nLANGUAGE: yaml\nCODE:\n```\n# Azure storage account name\n[account_name: <string> | default = \"\"]\n\n# Azure storage account key\n[account_key: <string> | default = \"\"]\n\n[connection_string: <string> | default = \"\"]\n[container_name: <string> | default = \"\"]\n[endpoint_suffix: <string> | default = \"\"]\n[max_retries: <int> | default = 20]\n[user_assigned_id: <string> | default = \"\"]\n\nhttp:\n  [idle_conn_timeout: <duration> | default = 1m30s]\n  [response_header_timeout: <duration> | default = 2m]\n  [insecure_skip_verify: <boolean> | default = false]\n  [tls_handshake_timeout: <duration> | default = 10s]\n  [expect_continue_timeout: <duration> | default = 1s]\n  [max_idle_connections: <int> | default = 100]\n  [max_idle_connections_per_host: <int> | default = 100]\n  [max_connections_per_host: <int> | default = 0]\n  [tls_ca_path: <string> | default = \"\"]\n  [tls_cert_path: <string> | default = \"\"]\n  [tls_key_path: <string> | default = \"\"]\n  [tls_server_name: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to BlobPropertiesInternal in ListBlob Response\nDESCRIPTION: Adds Owner, Group, Permissions, Acl, and ResourceType fields to the BlobPropertiesInternal definition in the Swagger document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:  \n- from: swagger-document    \n  where: $.definitions\n  transform: >\n    $.BlobPropertiesInternal.properties[\"Owner\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Group\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Permissions\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Acl\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"ResourceType\"] = {\n      \"type\" : \"string\",\n    };\n```\n\n----------------------------------------\n\nTITLE: Invalid UTF-8 Handling (Go)\nDESCRIPTION: This example illustrates how invalid UTF-8 characters are handled during marshaling and unmarshaling. v1 silently replaced invalid UTF-8 characters, while v2 results in an error. This snippet is linked to the `TestInvalidUTF8` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n\"[InvalidUTF8](/diff_test.go#:~:text=TestInvalidUTF8)\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Replacement in Sprig\nDESCRIPTION: Shows how to use the 'replace' function in Sprig to substitute parts of a string. This example replaces spaces with hyphens in the given text.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nreplace \" \" \"-\" \"Me First\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Changes Between Branches Before Release\nDESCRIPTION: Git command to compare differences between the current branch and the pre-release branch to verify version changes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit diff ...prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Aliases for Sign-Off\nDESCRIPTION: Git configuration commands to set up aliases for automatically adding the sign-off line to commit messages, which is required for all contributions to the Jaeger client Go project.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config --add alias.amend \"commit -s --amend\"\ngit config --add alias.c \"commit -s\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the release notes document including title, menu title, description and weight for navigation ordering.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.9.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Grafana Mimir version 2.9 release notes\"\nmenuTitle: \"V2.9 release notes\"\ndescription: \"Release notes for Grafana Mimir version 2.9\"\nweight: 900\n```\n\n----------------------------------------\n\nTITLE: Installing mapstructure Go Library\nDESCRIPTION: Command to install the mapstructure library using Go's package manager. This installs the library from GitHub repository mitchellh/mapstructure.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Setting Compactor Block Ranges in Grafana Mimir\nDESCRIPTION: This configuration parameter sets the block ranges for the compactor in Grafana Mimir. It defines three time ranges: 2 hours, 12 hours, and 25 hours, which likely correspond to different retention periods or compaction intervals for time series data.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/duration-slice-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-compactor.block-ranges=2h0m0s,12h0m0s,25h0m0s\n```\n\n----------------------------------------\n\nTITLE: Adding Client Name for Content CRC64 Header\nDESCRIPTION: YAML directive that sets the client name for the x-ms-content-crc64 header to ContentCRC64 in response objects.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.x-ms-paths.*.*.responses.*.headers.x-ms-content-crc64\n  transform: >\n    $[\"x-ms-client-name\"] = \"ContentCRC64\"\n```\n\n----------------------------------------\n\nTITLE: Installing Bitset Package\nDESCRIPTION: Command to install the bitset package using go get.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n```bash\ngo get github.com/bits-and-blooms/bitset\n```\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Connect Backoff Base Delay\nDESCRIPTION: This configures the initial backoff delay after the first connection failure. This setting is only relevant if ConnectTimeout is greater than 0.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_98\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Initial backoff delay after first connection failure. Only\n  # relevant if ConnectTimeout > 0.\n  # CLI flag: -alertmanager.alertmanager-client.connect-backoff-base-delay\n  [connect_backoff_base_delay: <duration> | default = 1s]\n\n```\n\n----------------------------------------\n\nTITLE: Using S2SX Command-Line Tool for Creating Self-Extracting Archives\nDESCRIPTION: Command-line usage documentation for s2sx utility showing available options including platform targeting, threading control, output size limits, and extraction settings. The tool allows creating self-extracting archives that work across different platforms with no dependencies.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUsage: s2sx [options] file1 file2\n\nCompresses all files supplied as input separately.\nIf files have '.s2' extension they are assumed to be compressed already.\nOutput files are written as 'filename.s2sx' and with '.exe' for windows targets.\nIf output is big, an additional file with \".more\" is written. This must be included as well.\nBy default output files will be overwritten.\n\nWildcards are accepted: testdir/*.txt will compress all files in testdir ending with .txt\nDirectories can be wildcards as well. testdir/*/*.txt will match testdir/subdir/b.txt\n\nOptions:\n  -arch string\n        Destination architecture (default \"amd64\")\n  -c    Write all output to stdout. Multiple input files will be concatenated\n  -cpu int\n        Compress using this amount of threads (default 32)\n  -help\n        Display help\n  -max string\n        Maximum executable size. Rest will be written to another file. (default \"1G\")\n  -os string\n        Destination operating system (default \"windows\")\n  -q    Don't write any output to terminal, except errors\n  -rm\n        Delete source file(s) after successful compression\n  -safe\n        Do not overwrite output files\n  -untar\n        Untar on destination\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Colorstring in Go\nDESCRIPTION: Simple example showing how to use the colorstring library to print colored text to the console. This demonstrates the inline syntax where '[blue]' and '[red]' are used to specify text colors.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mitchellh/colorstring/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncolorstring.Println(\"[blue]Hello [red]World!\")\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Best Compression Mode in S2 across different file types\nDESCRIPTION: This code snippet shows benchmark results comparing S2's default, better, and best compression modes on various file types. It demonstrates how the best mode significantly improves compression ratios at the expense of compression speed, while maintaining good decompression performance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```\n* enwik10\nDefault... 10000000000 -> 4759950115 [47.60%]; 1.03s, 9263.0MB/s\nBetter...  10000000000 -> 4084706676 [40.85%]; 2.16s, 4415.4MB/s\nBest...    10000000000 -> 3615520079 [36.16%]; 42.259s, 225.7MB/s\n\n* github-june-2days-2019.json\nDefault... 6273951764 -> 1041700255 [16.60%]; 431ms, 13882.3MB/s\nBetter...  6273951764 -> 945841238 [15.08%]; 547ms, 10938.4MB/s\nBest...    6273951764 -> 826392576 [13.17%]; 9.455s, 632.8MB/s\n\n* nyc-taxi-data-10M.csv\nDefault... 3325605752 -> 1093516949 [32.88%]; 324ms, 9788.7MB/s\nBetter...  3325605752 -> 885394158 [26.62%]; 491ms, 6459.4MB/s\nBest...    3325605752 -> 773681257 [23.26%]; 8.29s, 412.0MB/s\n\n* 10gb.tar\nDefault... 10065157632 -> 5915541066 [58.77%]; 1.028s, 9337.4MB/s\nBetter...  10065157632 -> 5453844650 [54.19%]; 1.597s, 4862.7MB/s\nBest...    10065157632 -> 5192495021 [51.59%]; 32.78s, 308.2MB/\n\n* consensus.db.10gb\nDefault... 10737418240 -> 4549762344 [42.37%]; 882ms, 12118.4MB/s\nBetter...  10737418240 -> 4438535064 [41.34%]; 1.533s, 3500.9MB/s\nBest...    10737418240 -> 4210602774 [39.21%]; 42.96s, 254.4MB/s\n```\n```\n\n----------------------------------------\n\nTITLE: Byte Array Representation (Go)\nDESCRIPTION: This example illustrates the change in representing Go byte arrays in JSON. v1 represented them as JSON arrays of JSON numbers, while v2 uses Base64-encoded JSON strings. This snippet is linked to the `TestByteArrays` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n\"[ByteArrays](/diff_test.go#:~:text=TestByteArrays)\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Container Client Methods in Go\nDESCRIPTION: Removes pager methods and exports various generated methods in the container client Go file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_container_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*ContainerClient\\) NewListBlobFlatSegmentPager\\(.+\\/\\/ listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request/s, `//\\n// listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request`).\n        replace(/\\(client \\*ContainerClient\\) listBlobFlatSegmentCreateRequest\\(/, `(client *ContainerClient) ListBlobFlatSegmentCreateRequest(`).\n        replace(/\\(client \\*ContainerClient\\) listBlobFlatSegmentHandleResponse\\(/, `(client *ContainerClient) ListBlobFlatSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Initial Module Versions\nDESCRIPTION: Starting state of OpenTelemetry modules all at version v0.14.0\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\notel: v0.14.0\notel/trace: v0.14.0\notel/metric: v0.14.0\notel/baggage: v0.14.0\notel/sdk/trace: v0.14.0\notel/sdk/metric: v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Nil Slice and Map Marshaling (Go)\nDESCRIPTION: This example demonstrates how nil Go slices and maps are marshaled in v1 versus v2.  v1 marshals them as JSON null, while v2 marshals them as empty JSON arrays and objects, respectively.  This snippet is linked to the `TestNilSlicesAndMaps` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n\"[NilSlicesAndMaps](/diff_test.go#:~:text=TestNilSlicesAndMaps)\"\n```\n\n----------------------------------------\n\nTITLE: Legacy Stdlib Integration in Go\nDESCRIPTION: Demonstrates how to redirect Go-kit logging through the standard library logger for legacy system compatibility.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlogger := kitlog.NewLogfmtLogger(kitlog.StdlibWriter{})\nlogger.Log(\"legacy\", true, \"msg\", \"at least it's something\")\n\n// Output:\n// 2016/01/01 12:34:56 legacy=true msg=\"at least it's something\"\n```\n\n----------------------------------------\n\nTITLE: Configuring External URL for Mimir Ruler\nDESCRIPTION: Sets the external URL for the Mimir ruler component to a secure localhost connection. This configuration parameter defines the publicly accessible URL for the ruler service.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/value-flags-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-ruler.external.url=https://localhost:443\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite\nDESCRIPTION: Command to execute full test suite and capture output for verification\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake prow-presubmit-check >& /tmp/k.txt; echo $?\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-Iterator with Go Get\nDESCRIPTION: Command to install the JSON-Iterator library using Go's package management.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests\nDESCRIPTION: Commands to install project dependencies and run the test suite for the Jaeger client Go library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake install\nmake test\n```\n\n----------------------------------------\n\nTITLE: Contrib Module Path Example\nDESCRIPTION: Example showing how to format contrib module paths and imports with version numbers\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/contrib/instrumentation/host/v2\nrequire go.opentelemetry.io/contrib/instrumentation/host/v2 v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Conntrack Listener for HTTP Server in Go\nDESCRIPTION: Creates a connection-tracked listener for an HTTP server with tracing and TCP keepalive settings. This wrapper enables monitoring and debugging of inbound connections with custom configuration options.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\nlistener = conntrack.NewListener(listener, \n    conntrack.TrackWithName(\"http\"), \n    conntrack.TrackWithTracing(),\n    conntrack.TrackWithTcpKeepAlive(5 * time.Minutes))\nhttpServer.Serve(listener)\n```\n\n----------------------------------------\n\nTITLE: Wrapping and Checking Errors in Go with errwrap\nDESCRIPTION: Demonstrates how to wrap errors using the errwrap package in a function that attempts to open a nonexistent file. It shows checking for specific errors using Contains and Get functions from the errwrap package. Dependencies include the os and errwrap packages. The tryOpen function returns an error, while Contains and ContainsType are used to check for specific errors.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Compression Errors in Go\nDESCRIPTION: This snippet demonstrates the possible error values returned by the Compress function and how to handle them. It's important to check for ErrIncompressible and ErrUseRLE as part of normal operation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/fse/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n| Error               | Description                                                                 |\n|---------------------|-----------------------------------------------------------------------------|\n| `<nil>`             | Everything ok, output is returned                                           |\n| `ErrIncompressible` | Returned when input is judged to be too hard to compress                    |\n| `ErrUseRLE`         | Returned from the compressor when the input is a single byte value repeated |\n| `(error)`           | An internal error occurred.                                                 |\n```\n\n----------------------------------------\n\nTITLE: Query Frontend Results Cache: Compression Configuration\nDESCRIPTION: Enables cache compression. The supported value is snappy.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\n\"  # Enable cache compression, if not empty. Supported values are: snappy.\\n  # CLI flag: -query-frontend.results-cache.compression\\n  [compression: <string> | default = \\\"\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Correcting Typo in Storage Error Code for Incremental Copy\nDESCRIPTION: YAML directive that fixes a typo in the error code IncrementalCopyOfEralierVersionSnapshotNotAllowed by changing it to IncrementalCopyOfEarlierVersionSnapshotNotAllowed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_constants.go\n  where: $\n  transform: >\n    return $.\n      replace(/IncrementalCopyOfEralierVersionSnapshotNotAllowed/g, \"IncrementalCopyOfEarlierVersionSnapshotNotAllowed\");\n```\n\n----------------------------------------\n\nTITLE: Feature: Credentials.UniverseDomain()\nDESCRIPTION: This commit adds the `Credentials.UniverseDomain()` method to the `auth` package. This method allows retrieving the universe domain associated with the credentials, which is important for multi-universe support and proper service endpoint resolution. The commit is related to issue #8654.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_21\n\nLANGUAGE: go\nCODE:\n```\naf0aa1ed8015bc8fe0dd87a7549ae029107cbdb8\n```\n\n----------------------------------------\n\nTITLE: Pluralization Functions for English - Go\nDESCRIPTION: This snippet demonstrates the usage of various pluralization functions from the `humanize/english` subpackage, enabling correct plural forms based on quantity. It is especially useful for crafting messages that involve counts of objects.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nenglish.PluralWord(1, \"object\", \"\") // object\nenglish.PluralWord(42, \"object\", \"\") // objects\nenglish.PluralWord(2, \"bus\", \"\") // buses\nenglish.PluralWord(99, \"locus\", \"loci\") // loci\n\nenglish.Plural(1, \"object\", \"\") // 1 object\nenglish.Plural(42, \"object\", \"\") // 42 objects\nenglish.Plural(2, \"bus\", \"\") // 2 buses\nenglish.Plural(99, \"locus\", \"loci\") // 99 loci\n```\n\n----------------------------------------\n\nTITLE: Appending Multiple Errors\nDESCRIPTION: Demonstrates how to collect and aggregate errors using the multierror.Append function. Allows collecting errors from multiple operations without explicit error management.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark for Logr Performance in Markdown\nDESCRIPTION: This snippet references the benchmark directory for running performance tests before and after code changes. It emphasizes the importance of performance in the Logr library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-logr/logr/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[benchmark](./benchmark)\n```\n\n----------------------------------------\n\nTITLE: DELETE Response from Ingester Unregister Endpoint in JSON\nDESCRIPTION: Example JSON response after calling the DELETE method on the proposed /ingester/unregister-on-shutdown endpoint. Shows the ingester's unregister state after reverting to the configuration value.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/proposals/ingester-unregister-flexibility.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"unregister\": false }\n```\n\n----------------------------------------\n\nTITLE: MD5 SIMD Assembly Function Signatures\nDESCRIPTION: Assembly function declarations for both AVX2 (8-lane) and AVX512 (16-lane) SIMD implementations. Shows the core functions that perform parallel MD5 computation at the lowest level.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/md5-simd/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:noescape\nfunc block8(state *uint32, base uintptr, bufs *int32, cache *byte, n int)\n\n//go:noescape\nfunc block16(state *uint32, ptrs *int64, mask uint64, n int)\n```\n\n----------------------------------------\n\nTITLE: Binding Flag to Variable with pflag\nDESCRIPTION: This snippet shows how to bind a flag to a variable using pflag's Var functions. It creates an integer flag 'flagname' bound to the variable 'flagvar'.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Optimization Pattern for Protocol Fields\nDESCRIPTION: Example demonstrating efficient memory allocation patterns for protocol field handling, using pre-allocated arrays to minimize allocations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/google/gopacket/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype MyProtocol struct {\n  // Most packets have 1-4 of VeryCommon, so we preallocate it here.\n  initialAllocation [4]uint32\n  VeryCommon []uint32\n}\n\nfunc decodeMyProtocol(data []byte, p gopacket.PacketBuilder) error {\n  prot := &MyProtocol{}\n  prot.VeryCommon = proto.initialAllocation[:0]\n  for len(data) > 4 {\n    field := binary.BigEndian.Uint32(data[:4])\n    data = data[4:]\n    // Since we're using the underlying initialAllocation, we won't need to\n    // allocate new memory for the following append unless we more than 16\n    // bytes of data, which should be the uncommon case.\n    prot.VeryCommon = append(prot.VeryCommon, field)\n  }\n  p.AddLayer(prot)\n  if len(data) > 0 {\n    return fmt.Errorf(\"MyProtocol packet has %d bytes left after decoding\", len(data))\n  }\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Printing without newline using fmt.Fprint in Go\nDESCRIPTION: This snippet references the Fprint function from the fmt package. It prints to a specified writer without adding a newline at the end.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/.errcheck_excludes.txt#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfmt.Fprint\n```\n\n----------------------------------------\n\nTITLE: Removing DataLakeStorageError Definition\nDESCRIPTION: Removes the DataLakeStorageError definition from the Swagger document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.DataLakeStorageError;\n```\n\n----------------------------------------\n\nTITLE: Referencing Version 0.5.0 in Markdown\nDESCRIPTION: Links to the comparison between version 0.4.0 and 0.5.0 of the compute/metadata package on GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.5.0](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.4.0...compute/metadata/v0.5.0) (2024-07-10)\n```\n\n----------------------------------------\n\nTITLE: Array Unmarshaling (Go)\nDESCRIPTION: This example focuses on how Go arrays are unmarshaled from JSON arrays. In v1, arrays could be unmarshaled from JSON arrays of any length, but in v2, the lengths must match. This snippet is linked to the `Arrays` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n\"[Arrays](/diff_test.go#:~:text=Arrays)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git for minio-go Project\nDESCRIPTION: Steps to create a feature branch, make changes, commit, and push to the repository for submitting a pull request to the minio-go project.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature\ngit commit -am 'Add some feature'\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Fix: Read universe_domain from credentials files\nDESCRIPTION: This commit modifies the `auth` package to read the `universe_domain` from all credentials files. This ensures that the correct universe domain is used for authentication, improving consistency and preventing potential errors when dealing with different environments. The commit addresses issue #9632.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n16efbb52e39ea4a319e5ee1e95c0e0305b6d9824\n```\n\n----------------------------------------\n\nTITLE: Referencing Version 0.2.2 in Markdown\nDESCRIPTION: Links to the comparison between version 0.2.1 and 0.2.2 of the compute/metadata package on GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.2.2](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.2.1...compute/metadata/v0.2.2) (2022-12-01)\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform in Bash\nDESCRIPTION: Command to initialize Terraform in the current directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Referencing OwlBot Lock File for Google Cloud Go Packages\nDESCRIPTION: This snippet refers to the OwlBot lock file, which contains the SHA of the post-processor version to be used. It can be manually updated to change the version of the post-processor.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/internal/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [postprocessor/README](postprocessor/README.md) for detailed\\ninstructions.\n```\n\n----------------------------------------\n\nTITLE: S3 Server-Side Encryption Configuration\nDESCRIPTION: Parameters for configuring S3 server-side encryption settings including encryption type, KMS key ID and encryption context.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_124\n\nLANGUAGE: yaml\nCODE:\n```\ns3_sse_type: <string> | default = \"\"\ns3_sse_kms_key_id: <string> | default = \"\"\ns3_sse_kms_encryption_context: <string> | default = \"\"\n```\n\n----------------------------------------\n\nTITLE: Prepare Store-gateway for Shutdown\nDESCRIPTION: Handles the configuration changes to prepare a store-gateway for shutdown via GET, POST, and DELETE requests. This includes setting the in-memory configuration, checking its status, and reverting it as needed.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_53\n\nLANGUAGE: plaintext\nCODE:\n```\nGET,POST,DELETE /store-gateway/prepare-shutdown\n```\n\n----------------------------------------\n\nTITLE: Commenting in PromQL Test Scripts\nDESCRIPTION: Demonstrates how to add comments in PromQL test scripts by prefixing lines with '#'.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/promql/promqltest/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is a comment.\n```\n\n----------------------------------------\n\nTITLE: Adding Properties Field to BlobPrefix Definition\nDESCRIPTION: Modifies the Swagger document to add a Properties field to the BlobPrefix definition, referencing BlobPropertiesInternal.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobPrefix.properties[\"Properties\"] = {\n      \"type\": \"object\",\n      \"$ref\": \"#/definitions/BlobPropertiesInternal\"\n    };\n```\n\n----------------------------------------\n\nTITLE: Enabling New Auth Library for IAM Client\nDESCRIPTION: Enables a new authentication library for the IAM client.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/iam/CHANGES.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"cloud.google.com/go/iam\"\n\nclient, err := iam.NewClient(ctx)\n```\n\n----------------------------------------\n\nTITLE: Feature: UniverseDomain to DetectOptions\nDESCRIPTION: This commit introduces `UniverseDomain` to `DetectOptions` in the `auth` package.  This addition allows specifying the universe domain during credential detection, enabling the application to target a specific environment for authentication.  This feature is tied to issue #9536.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n3618d3f7061615c0e189f376c75abc201203b501\n```\n\n----------------------------------------\n\nTITLE: Supported Commands for fsnotify Test Scripts\nDESCRIPTION: This snippet lists and explains the supported commands for writing test scripts in fsnotify, including file operations, watching paths, and control commands.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwatch path [ops]    # Watch the path, reporting events for it. Nothing is\n                    # watched by default. Optionally a list of ops can be\n                    # given, as with AddWith(path, WithOps(...)).\nunwatch path        # Stop watching the path.\nwatchlist n         # Assert watchlist length.\n\nstop                # Stop running the script; for debugging.\ndebug [yes/no]      # Enable/disable FSNOTIFY_DEBUG (tests are run in\n                      parallel by default, so -parallel=1 is probably a good\n                      idea).\n\ntouch path\nmkdir [-p] dir\nln -s target link   # Only ln -s supported.\nmkfifo path\nmknod dev path\nmv src dst\nrm [-r] path\nchmod mode path     # Octal only\nsleep time-in-ms\n\ncat path            # Read path (does nothing with the data; just reads it).\necho str >>path     # Append \"str\" to \"path\".\necho str >path      # Truncate \"path\" and write \"str\".\n\nrequire reason      # Skip the test if \"reason\" is true; \"skip\" and\nskip reason         # \"require\" behave identical; it supports both for\n                    # readability. Possible reasons are:\n                    #\n                    #   always    Always skip this test.\n                    #   symlink   Symlinks are supported (requires admin\n                    #             permissions on Windows).\n                    #   mkfifo    Platform doesn't support FIFO named sockets.\n                    #   mknod     Platform doesn't support device nodes.\n```\n\n----------------------------------------\n\nTITLE: Syncing Debug Metadata from Cloud Storage\nDESCRIPTION: Command sequence to sync debug/metas directory from Google Cloud Storage to local filesystem for faster processing\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/list-deduplicated-blocks.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/test-bucket\nmkdir -p tenant\ncd tenant\ngsutil -m cp -r -n gs://bucket/tenant/debug .\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration metadata for the release notes documentation page, specifying title, description, menu title and page weight.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.7.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Release notes for Grafana Mimir version 2.7\nmenuTitle: V2.7 release notes\ntitle: Grafana Mimir version 2.7 release notes\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Pygments Lexer Class List using Python and Pawk\nDESCRIPTION: This Python command uses 'g' (likely grep) and 'pawk' to extract Pygments lexer class names from source files and format them into a list. It searches for classes that inherit from RegexLexer and outputs the fully qualified class names.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/pygments-lexers.txt#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ng 'class.*RegexLexer' | pawk --strict -F: '\"pygments.lexers.%s.%s\" % (f[0].split(\".\")[0], f[2].split()[1].split(\"(\")[0])' > lexers.txt\n```\n\n----------------------------------------\n\nTITLE: Referencing Version 0.5.1 in Markdown\nDESCRIPTION: Links to the comparison between version 0.5.0 and 0.5.1 of the compute/metadata package on GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.5.1](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.5.0...compute/metadata/v0.5.1) (2024-09-12)\n```\n\n----------------------------------------\n\nTITLE: Using ReadOnlyFs in Afero for Read-Only File System Access in Go\nDESCRIPTION: Creates a read-only view of a file system using Afero's ReadOnlyFs wrapper. This example demonstrates how attempts to modify the file system (like creating files) will result in a permission error.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewReadOnlyFs(afero.NewOsFs())\n_, err := fs.Create(\"/file.txt\")\n// err = syscall.EPERM\n```\n\n----------------------------------------\n\nTITLE: Basic ULID Generation\nDESCRIPTION: Simple example of generating a ULID using the Make helper function.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nprintln(ulid.Make())\n// 01G65Z755AFWAKHE12NY0CQ9FH\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Package Dependencies for Grafana Mimir\nDESCRIPTION: This snippet lists various Go package dependencies required for the Grafana Mimir project. It includes packages from Kubernetes client-go, klog, kube-openapi, and kustomize projects, along with their specific versions and import paths.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/modules.txt#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n## explicit; go 1.23.0\nk8s.io/client-go/tools/metrics\nk8s.io/client-go/util/workqueue\n# k8s.io/klog/v2 v2.130.1\n## explicit; go 1.18\nk8s.io/klog/v2\nk8s.io/klog/v2/internal/buffer\nk8s.io/klog/v2/internal/clock\nk8s.io/klog/v2/internal/dbg\nk8s.io/klog/v2/internal/serialize\nk8s.io/klog/v2/internal/severity\nk8s.io/klog/v2/internal/sloghandler\n# k8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f\n## explicit; go 1.20\nk8s.io/kube-openapi/pkg/internal\nk8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json\nk8s.io/kube-openapi/pkg/validation/errors\nk8s.io/kube-openapi/pkg/validation/spec\nk8s.io/kube-openapi/pkg/validation/strfmt\nk8s.io/kube-openapi/pkg/validation/strfmt/bson\nk8s.io/kube-openapi/pkg/validation/validate\n# k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738\n## explicit; go 1.18\nk8s.io/utils/clock\nk8s.io/utils/internal/third_party/forked/golang/net\nk8s.io/utils/net\n# sigs.k8s.io/kustomize/kyaml v0.18.1\n## explicit; go 1.22.7\nsigs.k8s.io/kustomize/kyaml/comments\nsigs.k8s.io/kustomize/kyaml/errors\nsigs.k8s.io/kustomize/kyaml/ext\nsigs.k8s.io/kustomize/kyaml/fieldmeta\nsigs.k8s.io/kustomize/kyaml/filesys\nsigs.k8s.io/kustomize/kyaml/fn/framework\nsigs.k8s.io/kustomize/kyaml/fn/framework/command\nsigs.k8s.io/kustomize/kyaml/fn/runtime/runtimeutil\nsigs.k8s.io/kustomize/kyaml/kio\nsigs.k8s.io/kustomize/kyaml/kio/filters\nsigs.k8s.io/kustomize/kyaml/kio/kioutil\nsigs.k8s.io/kustomize/kyaml/openapi\nsigs.k8s.io/kustomize/kyaml/openapi/kubernetesapi\nsigs.k8s.io/kustomize/kyaml/openapi/kubernetesapi/v1_21_2\nsigs.k8s.io/kustomize/kyaml/openapi/kustomizationapi\nsigs.k8s.io/kustomize/kyaml/order\nsigs.k8s.io/kustomize/kyaml/resid\nsigs.k8s.io/kustomize/kyaml/sets\nsigs.k8s.io/kustomize/kyaml/sliceutil\nsigs.k8s.io/kustomize/kyaml/utils\nsigs.k8s.io/kustomize/kyaml/yaml\nsigs.k8s.io/kustomize/kyaml/yaml/internal/k8sgen/pkg/labels\nsigs.k8s.io/kustomize/kyaml/yaml/internal/k8sgen/pkg/selection\nsigs.k8s.io/kustomize/kyaml/yaml/internal/k8sgen/pkg/util/errors\nsigs.k8s.io/kustomize/kyaml/yaml/internal/k8sgen/pkg/util/sets\nsigs.k8s.io/kustomize/kyaml/yaml/internal/k8sgen/pkg/util/validation\nsigs.k8s.io/kustomize/kyaml/yaml/internal/k8sgen/pkg/util/validation/field\nsigs.k8s.io/kustomize/kyaml/yaml/merge2\nsigs.k8s.io/kustomize/kyaml/yaml/merge3\nsigs.k8s.io/kustomize/kyaml/yaml/schema\nsigs.k8s.io/kustomize/kyaml/yaml/walk\n# sigs.k8s.io/yaml v1.4.0\n## explicit; go 1.12\nsigs.k8s.io/yaml\nsigs.k8s.io/yaml/goyaml.v2\nsigs.k8s.io/yaml/goyaml.v3\n```\n\n----------------------------------------\n\nTITLE: Creating and Ending a Span in Go\nDESCRIPTION: Example of how to start a new span for tracing and end it when the operation is complete.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx, span := trace.StartSpan(ctx, \"cache.Get\")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n----------------------------------------\n\nTITLE: Installing Go-GitIgnore via Go Get\nDESCRIPTION: Command to install the go-gitignore library using Go's package manager.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ go get github.com/monochromegane/go-gitignore\n```\n\n----------------------------------------\n\nTITLE: Fix: Update golang.org/x/net to v0.17.0\nDESCRIPTION: This commit updates the `golang.org/x/net` dependency to version v0.17.0 in the `auth` package. This update provides bug fixes, performance improvements, and potentially new features from the networking library. The commit hash is 174da47254fefb12921bbfc65b7829a453af6f5d.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_31\n\nLANGUAGE: go\nCODE:\n```\n174da47254fefb12921bbfc65b7829a453af6f5d\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies - AWS SDK Components\nDESCRIPTION: AWS SDK module dependencies with version requirements and import paths for AWS services like SNS, SSO, and STS.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/modules.txt#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n# github.com/aws/aws-sdk-go v1.55.6\n## explicit; go 1.19\ngithub.com/aws/aws-sdk-go/aws\ngithub.com/aws/aws-sdk-go/aws/arn\ngithub.com/aws/aws-sdk-go/aws/auth/bearer\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Scheduler DNS Lookup Period Configuration\nDESCRIPTION: Configures how often the scheduler address is resolved to discover new query-scheduler instances. This setting is used when service discovery mode is set to DNS.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) How often to resolve the scheduler-address, in order to look for\\n# new query-scheduler instances.\\n# CLI flag: -query-frontend.scheduler-dns-lookup-period\\n[scheduler_dns_lookup_period: <duration> | default = 10s]\"\n```\n\n----------------------------------------\n\nTITLE: Query Frontend Results Cache: Backend Configuration\nDESCRIPTION: Selects the backend for the query-frontend results cache. Supported backends include memcached and redis.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\n\"results_cache:\\n  # Backend for query-frontend results cache, if not empty. Supported values:\\n  # memcached, redis.\\n  # CLI flag: -query-frontend.results-cache.backend\\n  [backend: <string> | default = \\\"\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Helm Upgrade Command\nDESCRIPTION: Command to upgrade Helm release with updated values file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <release-name> <chart-name> -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Quick Steps for Contributing to Cobra\nDESCRIPTION: This snippet outlines the step-by-step process for contributing to the Cobra project, from forking the repository to creating a pull request.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Fork the project.\n2. Download your fork to your PC (`git clone https://github.com/your_username/cobra && cd cobra`)\n3. Create your feature branch (`git checkout -b my-new-feature`)\n4. Make changes and run tests (`make test`)\n5. Add them to staging (`git add .`)\n6. Commit your changes (`git commit -m 'Add some feature'`)\n7. Push to the branch (`git push origin my-new-feature`)\n8. Create new pull request\n```\n\n----------------------------------------\n\nTITLE: Theorem Proof Language Lexers\nDESCRIPTION: Lexers for various theorem proving and verification languages like Coq, Isabelle, and Lean\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/pygments-lexers.txt#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npygments.lexers.theorem.CoqLexer\npygments.lexers.theorem.IsabelleLexer\npygments.lexers.theorem.LeanLexer\n```\n\n----------------------------------------\n\nTITLE: Listing Blobs in a Container\nDESCRIPTION: Example demonstrating how to enumerate blobs in a container using paging.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\n// blob listings are returned across multiple pages\npager := client.NewListBlobsFlatPager(containerName, nil)\n\n// continue fetching pages until no more remain\nfor pager.More() {\n  // advance to the next page\n\tpage, err := pager.NextPage(context.TODO())\n\t// TODO: handle error\n\n\t// print the blob names for this page\n\tfor _, blob := range page.Segment.BlobItems {\n\t\tfmt.Println(*blob.Name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Alertmanager Configuration\nDESCRIPTION: Command to delete the Alertmanager configuration in Grafana Mimir Alertmanager.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager delete\n```\n\n----------------------------------------\n\nTITLE: Basic Logrus Usage in Go\nDESCRIPTION: Demonstrates the simplest way to use Logrus with package-level exported logger. It shows how to log a message with additional fields.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n  }).Info(\"A walrus appears\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Update grpc-go to v1.59.0\nDESCRIPTION: This commit updates the `grpc-go` dependency to version v1.59.0 within the `auth` package. This update brings in the latest improvements, bug fixes, and feature enhancements from the gRPC library. The commit hash is 81a97b06cb28b25432e4ece595c55a9857e960b7.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n81a97b06cb28b25432e4ece595c55a9857e960b7\n```\n\n----------------------------------------\n\nTITLE: License Header for New Files\nDESCRIPTION: The required Apache License 2.0 header that must be included in all new files contributed to the Jaeger client Go project. This can be automatically added using 'make fmt'.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Copyright (c) 2017 The Jaeger Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function Type in Go\nDESCRIPTION: This snippet defines the `Callback` function type to `go.opentelemetry.io/otel/metric`.  This named function type is registered with a `Meter`. This is used for registering callback functions that will be invoked to observe metric values.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Migrating Import Paths in Go Files\nDESCRIPTION: Shell script to update import paths in Go files from the original mitchellh repository to the new go-viper repository. This script uses sed to find and replace the import paths in all .go files in the current directory and subdirectories.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/github.com\\/mitchellh\\/mapstructure/github.com\\/go-viper\\/mapstructure\\/v2/g' $(find . -type f -name '*.go')\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Colorable Package\nDESCRIPTION: Command to install the go-colorable package using go get\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-colorable\n```\n\n----------------------------------------\n\nTITLE: Feature: Add External Accounts in Detect\nDESCRIPTION: This commit adds support for external accounts in the `detect` package within the `auth` module. This enhancement allows automatic detection of credentials for external accounts, simplifying the authentication process for services running outside of Google Cloud. The commit addresses issue #8508.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n62210d5d3e56e8e9f35db8e6ac0defec19582507\n```\n\n----------------------------------------\n\nTITLE: Generating Complete Schema Set\nDESCRIPTION: Command to fetch OpenAPI schema, generate swagger.go for Kubernetes API, and update openapiinfo.go\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Using Mousetrap to Detect Explorer Launches in Go\nDESCRIPTION: The primary interface for the mousetrap library, providing a single function that returns a boolean indicating whether the process was started by Windows Explorer (via double-click).\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Deleting Tenant Alertmanager Configuration with mimirtool\nDESCRIPTION: This command deletes a tenant's Alertmanager configuration using the mimirtool command-line utility. It requires specifying the Alertmanager URL and tenant ID.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/alertmanager.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager delete \\\n  --address=<ALERTMANAGER URL>\n  --id=<TENANT ID>\n```\n\n----------------------------------------\n\nTITLE: Setting Sampling Priority Programmatically in Go\nDESCRIPTION: Demonstrates how to force sampling for a span and its children using the OpenTracing API's sampling.priority standard tag. This ensures the trace will be recorded regardless of the configured sampling strategy.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/opentracing/opentracing-go\"\n    \"github.com/opentracing/opentracing-go/ext\"\n)\n\nspan := opentracing.SpanFromContext(ctx)\next.SamplingPriority.Set(span, 1)\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 VPC Configuration without Credentials\nDESCRIPTION: Configuration for Amazon S3 storage when using Amazon VPC, where credentials are not required for access.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-object-storage-backend.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    storage_backend: 's3',\n    blocks_storage_bucket_name: 'blocks-bucket',\n    aws_region: 'af-south-1',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Walking Registered Routes in Gorilla Mux (Go)\nDESCRIPTION: Shows how to use the Walk function to iterate over all registered routes in a Gorilla Mux router. This is useful for debugging or generating documentation for your routes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\treturn\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", handler)\n\tr.HandleFunc(\"/products\", handler).Methods(\"POST\")\n\tr.HandleFunc(\"/articles\", handler).Methods(\"GET\")\n\tr.HandleFunc(\"/articles/{id}\", handler).Methods(\"GET\", \"PUT\")\n\tr.HandleFunc(\"/authors\", handler).Queries(\"surname\", \"{surname}\")\n\terr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tpathTemplate, err := route.GetPathTemplate()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"ROUTE:\", pathTemplate)\n\t\t}\n\t\tpathRegexp, err := route.GetPathRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Path regexp:\", pathRegexp)\n\t\t}\n\t\tqueriesTemplates, err := route.GetQueriesTemplates()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n\t\t}\n\t\tqueriesRegexps, err := route.GetQueriesRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n\t\t}\n\t\tmethods, err := route.GetMethods()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n\t\t}\n\t\tfmt.Println()\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\thttp.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Range Queries in PromQL Test Scripts\nDESCRIPTION: Shows the syntax for the 'eval range' command, which runs a range query against the test environment and asserts the expected results and annotations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/promql/promqltest/README.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\neval range from 0 to 3m step 1m sum by (env) (my_metric)\n    expect warn msg something went wrong\n    expect info regex something went (wrong|boom)\n    {env=\"prod\"} 2 5 10 20\n    {env=\"test\"} 10 20 30 45\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice\nDESCRIPTION: This snippet shows the boilerplate notice required to apply the Apache License to your work.  Replace the bracketed placeholders with the appropriate year and copyright owner name.  Ensure the text is enclosed in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/google/s2a-go/LICENSE.md#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"Copyright [yyyy] [name of copyright owner]\\n\\nLicensed under the Apache License, Version 2.0 (the \\\"License\\\");\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\nUnless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.\"\n```\n\n----------------------------------------\n\nTITLE: Web Template Engine Lexers\nDESCRIPTION: Syntax highlighting lexers for various web template languages and frameworks\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/pygments-lexers.txt#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npygments.lexers.templates.SmartyLexer\npygments.lexers.templates.DjangoLexer\npygments.lexers.templates.HandlebarsLexer\npygments.lexers.templates.LiquidLexer\npygments.lexers.templates.TwigLexer\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semantic Conventions v1.18.0\nDESCRIPTION: This markdown snippet displays a badge linking to the package documentation on pkg.go.dev for the OpenTelemetry Semantic Conventions v1.18.0 package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.18.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.18.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.18.0)\n```\n\n----------------------------------------\n\nTITLE: Formatting Queries for Blocking Using Mimirtool in Bash\nDESCRIPTION: These Bash commands demonstrate how to use the Mimirtool to format PromQL queries for use in blocked query patterns. The tool applies Prometheus formatting to ensure consistent blocking behavior.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-blocked-queries.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool promql format 'foo{}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool promql format 'sum(container_memory_rss) by (namespace)'\n```\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool promql format '\nrate(\n  metric_counter[15m] # comment 1\n) /\nrate(\n  other_counter[15m] # comment 2\n)\n'\n```\n\n----------------------------------------\n\nTITLE: Complete Remote Evaluation Migration\nDESCRIPTION: Final configuration step to complete migration to remote evaluation mode after ensuring all new deployments are running.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-ruler.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    ruler_remote_evaluation_enabled: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: List Store-gateway Tenants\nDESCRIPTION: Fetches a web page listing tenants using the store-gateway storage through a GET request, providing visibility into the current blocks utilized by each tenant.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /store-gateway/tenants\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Tool\nDESCRIPTION: Command to install the Cobra CLI tool, which is used for generating Cobra-based applications and command files.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Sorted Pairs Template in Go\nDESCRIPTION: This template iterates through a list of sorted key-value pairs (labels or annotations) and displays them in a formatted manner.  This is a helper template for displaying both labels and annotations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/alerting/receivers/templates/ng_alert_notification.txt#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n{{- define \"__default_sorted_pairs\" -}}\n{{ range .SortedPairs }}\n - {{ .Name }} = {{ .Value }}\n{{- end }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Gorilla Mux in Go\nDESCRIPTION: This snippet showcases serving static files from a specified directory using the gorilla/mux Router. The PathPrefix method is utilized for routing file requests, and the http.StripPrefix function adjusts the prefix before passing requests to the file server.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n    var dir string\n\n    flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n    flag.Parse()\n    r := mux.NewRouter()\n\n    // This will serve files under http://localhost:8000/static/<filename>\n    r.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n    srv := &http.Server{\n        Handler:      r,\n        Addr:         \"127.0.0.1:8000\",\n        // Good practice: enforce timeouts for servers you create!\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout:  15 * time.Second,\n    }\n\n    log.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Version Update Changes\nDESCRIPTION: Git commit command to update version information for the next release using the MinIO Trusted author.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/MAINTAINERS.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git commit -a -m \"Update version for next release\" --author \"MinIO Trusted <trusted@min.io>\"\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Codes Package in Markdown\nDESCRIPTION: This code snippet shows how to display a PkgGoDev badge for the OpenTelemetry 'codes' package using Markdown syntax. The badge links to the package documentation on pkg.go.dev.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/codes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/codes)](https://pkg.go.dev/go.opentelemetry.io/otel/codes)\n```\n\n----------------------------------------\n\nTITLE: Using CopyOnWriteFs for Non-Destructive File Operations in Go\nDESCRIPTION: Demonstrates creating a copy-on-write file system that reads from a read-only base layer but writes changes to a separate overlay. This allows modifications without affecting the original files, keeping all changes in memory.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nroBase := afero.NewReadOnlyFs(base)\nufs := afero.NewCopyOnWriteFs(roBase, afero.NewMemMapFs())\n\nfh, _ = ufs.Create(\"/home/test/file2.txt\")\nfh.WriteString(\"This is a test\")\nfh.Close()\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation (v0.22.6) in Go\nDESCRIPTION: Benchmark results for validating the Kubernetes API using version 0.22.6. Shows high memory allocation and execution time.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor\nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t8549863982 ns/op\t7067424936 B/op\t59583275 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Fix: Secure Flag for gRPC Conn Pools\nDESCRIPTION: This commit sets the secure flag for gRPC connection pools within the auth module. This enhancement is to improve the security posture of gRPC connections, ensuring they are established and maintained with appropriate security measures. The commit addresses issue #9833.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n14e3956dfd736399731b5ee8d9b178ae085cf7ba\n```\n\n----------------------------------------\n\nTITLE: Nginx Reload Command\nDESCRIPTION: Command to reload Nginx configuration after making changes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo nginx -s reload\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Kubernetes Code of Conduct\nDESCRIPTION: Markdown formatted link directing to the official Kubernetes community code of conduct document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/klog/v2/code-of-conduct.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPlease refer to our [Kubernetes Community Code of Conduct](https://git.k8s.io/community/code-of-conduct.md)\n```\n\n----------------------------------------\n\nTITLE: Improved Benchmark Results After PR #79 (AMD Ryzen)\nDESCRIPTION: Performance metrics after optimization on AMD Ryzen 7 5800X showing similar improvements in a different CPU architecture\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmarkToXXXName/ToGoName-16         \t18527378\t      1972 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-16        \t15552692\t      2093 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-16       \t32161176\t      1117 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-16    \t32256634\t      1137 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-16 \t18599661\t      1946 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-16 \t17581353\t      2054 ns/op\t     105 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semantic Conventions in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry semantic conventions package version 1.26.0.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.26.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.26.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.26.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruler Alert Evaluation Settings in YAML\nDESCRIPTION: Configures settings related to alert evaluation, including outage tolerance, grace periods, and resend delays. These options control how the Ruler handles alert state changes and notifications.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_71\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) Max time to tolerate outage for restoring \"for\" state of alert.\n# CLI flag: -ruler.for-outage-tolerance\n[for_outage_tolerance: <duration> | default = 1h]\n\n# (advanced) This grace period controls which alerts the ruler restores after a\n# restart. Alerts with \"for\" duration lower than this grace period are not\n# restored after a ruler restart. This means that if the alerts have been firing\n# before the ruler restarted, they will now go to pending state and then to\n# firing again after their \"for\" duration expires. Alerts with \"for\" duration\n# greater than or equal to this grace period that have been pending before the\n# ruler restart will remain in pending state for at least this grace period.\n# Alerts with \"for\" duration greater than or equal to this grace period that\n# have been firing before the ruler restart will continue to be firing after the\n# restart.\n# CLI flag: -ruler.for-grace-period\n[for_grace_period: <duration> | default = 2m]\n\n# (advanced) Minimum amount of time to wait before resending an alert to\n# Alertmanager.\n# CLI flag: -ruler.resend-delay\n[resend_delay: <duration> | default = 1m]\n```\n\n----------------------------------------\n\nTITLE: Querying Active Series Cardinality in Mimir\nDESCRIPTION: Example of querying the active series cardinality endpoint with the 'up' selector. Shows both the curl request with optional sharding control header and the JSON response format containing matched series data.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://localhost:9090/api/v1/cardinality/active_series' \\\n    --header 'Sharding-Control: 4' \\ # optional\n    --data-urlencode 'selector=up'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\" : [\n      {\n         \"__name__\" : \"up\",\n         \"job\" : \"prometheus\",\n         \"instance\" : \"localhost:9090\"\n      },\n      {\n         \"__name__\" : \"up\",\n         \"job\" : \"node\",\n         \"instance\" : \"localhost:9091\"\n      },\n      {\n         \"__name__\" : \"process_start_time_seconds\",\n         \"job\" : \"prometheus\",\n         \"instance\" : \"localhost:9090\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Binary Index-Header File Format in Plaintext\nDESCRIPTION: This snippet shows the format of the index-header file located in each block's store-gateway local directory. It includes the magic number, version information, index version, and the structure of the Symbol Table, Posting Offset Table, and Table of Contents (TOC).\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/binary-index-header.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n┌─────────────────────────────┬───────────────────────────────┐\n│    magic(0xBAAAD792) <4b>   │      version(1) <1 byte>      │\n├─────────────────────────────┬───────────────────────────────┤\n│  index version(2) <1 byte>  │ index PostingOffsetTable <8b> │\n├─────────────────────────────┴───────────────────────────────┤\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │      Symbol Table (exact copy from original index)      │ │\n│ ├─────────────────────────────────────────────────────────┤ │\n│ │      Posting Offset Table (exact copy from index)       │ │\n│ ├─────────────────────────────────────────────────────────┤ │\n│ │                          TOC                            │ │\n│ └─────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Running ListBlocks with Amazon S3\nDESCRIPTION: Command example for using listblocks with Amazon S3. Requires user, bucket name, access key ID, secret access key, and endpoint parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/listblocks/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./listblocks \\\n  --user <user> \\\n  --backend s3 \\\n  --s3.bucket-name <bucket name> \\\n  --s3.access-key-id <access key id> \\\n  --s3.secret-access-key <secret access key> \\\n  --s3.endpoint <endpoint> \\\n```\n\n----------------------------------------\n\nTITLE: Logging with go-kit/log in Go\nDESCRIPTION: This snippet references the Log method from the go-kit/log.Logger interface. It is used for structured logging in Go applications.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/.errcheck_excludes.txt#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n(github.com/go-kit/log.Logger).Log\n```\n\n----------------------------------------\n\nTITLE: Creating a Tree with Metadata in Go\nDESCRIPTION: Demonstrates creating a tree where nodes and branches can have metadata. Uses AddMetaBranch and AddMetaNode methods to attach additional information such as file sizes or counts.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/xlab/treeprint/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main {\n    // to add a custom root name use `treeprint.NewWithRoot()` instead\n    tree := treeprint.New()\n\n    tree.AddNode(\"Dockerfile\")\n    tree.AddNode(\"Makefile\")\n    tree.AddNode(\"aws.sh\")\n    tree.AddMetaBranch(\" 204\", \"bin\").\n        AddNode(\"dbmaker\").AddNode(\"someserver\").AddNode(\"testtool\")\n    tree.AddMetaBranch(\" 374\", \"deploy\").\n        AddNode(\"Makefile\").AddNode(\"bootstrap.sh\")\n    tree.AddMetaNode(\"122K\", \"testtool.a\")\n\n    fmt.Println(tree.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Auth Library for Go\nDESCRIPTION: Command to install the latest version of the Google Auth Library for Go using go get.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/auth@latest\n```\n\n----------------------------------------\n\nTITLE: Downloading a Blob from Azure Storage\nDESCRIPTION: Example showing how to download a blob from Azure Storage to a local file using anonymous access.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// this example accesses a public blob via anonymous access, so no credentials are required\nclient, err := azblob.NewClientWithNoCredential(\"https://azurestoragesamples.blob.core.windows.net/\", nil)\n// TODO: handle error\n\n// create or open a local file where we can download the blob\nfile, err := os.Create(\"cloud.jpg\")\n// TODO: handle error\ndefer file.Close()\n\n// download the blob\n_, err = client.DownloadFile(context.TODO(), \"samples\", \"cloud.jpg\", file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Renaming BlobItemInternal and BlobPropertiesInternal Models\nDESCRIPTION: YAML directive that renames BlobItemInternal to BlobItem and BlobPropertiesInternal to BlobProperties for cleaner API interface.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- rename-model:\n    from: BlobItemInternal\n    to: BlobItem\n- rename-model:\n    from: BlobPropertiesInternal\n    to: BlobProperties\n```\n\n----------------------------------------\n\nTITLE: Advanced ULID Generation\nDESCRIPTION: Example showing manual ULID creation with custom entropy source and timestamp.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nentropy := rand.New(rand.NewSource(time.Now().UnixNano()))\nms := ulid.Timestamp(time.Now())\nprintln(ulid.New(ms, entropy))\n// 01G65Z755AFWAKHE12NY0CQ9FH\n```\n\n----------------------------------------\n\nTITLE: Fix: Update grpc-go to v1.56.3\nDESCRIPTION: This commit updates the `grpc-go` dependency to version v1.56.3 within the `auth` package. This update likely includes bug fixes, performance improvements, and new features from the gRPC library. The commit hash is 343cea8c43b1e31ae21ad50ad31d3b0b60143f8c.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n343cea8c43b1e31ae21ad50ad31d3b0b60143f8c\n```\n\n----------------------------------------\n\nTITLE: Map Validation Example in Go\nDESCRIPTION: Demonstrates how to validate a map using GoValidator with a template map for validation rules.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar mapTemplate = map[string]interface{}{\n\t\"name\":\"required,alpha\",\n\t\"family\":\"required,alpha\",\n\t\"email\":\"required,email\",\n\t\"cell-phone\":\"numeric\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"required,alphanum\",\n\t\t\"line2\":\"alphanum\",\n\t\t\"postal-code\":\"numeric\",\n\t},\n}\n\nvar inputMap = map[string]interface{}{\n\t\"name\":\"Bob\",\n\t\"family\":\"Smith\",\n\t\"email\":\"foo@bar.baz\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"\",\n\t\t\"line2\":\"\",\n\t\t\"postal-code\":\"\",\n\t},\n}\n\nresult, err := govalidator.ValidateMap(inputMap, mapTemplate)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Boundary Check Elimination in Go Decoder\nDESCRIPTION: This snippet demonstrates how to eliminate boundary checks by using pointer arithmetic for character access in the Go decoder while ensuring no out-of-range access occurs.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc char(ptr unsafe.Pointer, offset int64) byte {\n    return *(*byte)(unsafe.Pointer(uintptr(ptr) + uintptr(offset)))\n}\np := (*sliceHeader)(&unsafe.Pointer(buf)).data\nfor {\n    switch char(p, cursor) {\n    case ' ', '\\n', '\\r', '\\t':\n    case '\\000':\n        return nil\n    }\n    cursor++\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Ingesters for Mimir Migration (YAML)\nDESCRIPTION: YAML configuration to scale current ingesters to 0 while maintaining previous settings for nginx and gateway. This step prepares for the deployment of new zone-aware ingesters.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    blocks_storage:\n      tsdb:\n        flush_blocks_on_shutdown: true\n    ingester:\n      ring:\n        unregister_on_shutdown: true\n\ningester:\n  replicas: 0\n  zoneAwareReplication:\n    enabled: false\n\nnginx:\n  replicas: 0\ngateway:\n  replicas: 0\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Instance Address Configuration\nDESCRIPTION: Specifies the IP address to advertise to the querier via the scheduler. If not configured, the address is auto-detected from network interfaces.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) IP address to advertise to the querier (via scheduler) (default is\\n# auto-detected from network interfaces).\\n# CLI flag: -query-frontend.instance-addr\\n[address: <string> | default = \\\"\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Defining State Function Type in Go for JSON Processing State Machine\nDESCRIPTION: Defines the core state function type used in the state machine implementation for JSON processing. This type represents a function that returns the next state and an optional error, following the design pattern described in Rob Pike's talk on lexers and parsers.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/internal/json/design.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype stateFn func() (stateFn, error)\n```\n\n----------------------------------------\n\nTITLE: Generating OpenTelemetry Semantic Conventions in Go\nDESCRIPTION: Commands to generate a new version of the semantic conventions package based on a specific OpenTelemetry tag version. This creates a new sub-package in the semconv directory.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.30.0\" # Change to the release version you are generating.\nmake semconv-generate # Uses the exported TAG.\n```\n\n----------------------------------------\n\nTITLE: Configuring Warpstream Kafka Backend for Mimir\nDESCRIPTION: CLI flag configuration required for setting up Warpstream as a Kafka backend in Grafana Mimir. This setting modifies how the fetch max bytes parameter is handled.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-kafka-backend.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-ingest-storage.kafka.use-compressed-bytes-as-fetch-max-bytes=false\n```\n\n----------------------------------------\n\nTITLE: Estimating Maximum Firing Alerts in Alertmanager\nDESCRIPTION: This PromQL query estimates the maximum number of firing alerts in the last 24 hours across all Prometheus servers. It's used to plan memory resources for the Alertmanager component.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/run-production-environment/planning-capacity.md#2025-04-17_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nsum(max_over_time(alertmanager_alerts[24h]))\n```\n\n----------------------------------------\n\nTITLE: Feature: Refactor Public Sigs to Use Credentials\nDESCRIPTION: This commit refactors public signatures within the `auth` package to utilize the `Credentials` type.  This change standardizes the use of credentials across the public API, improving consistency and ease of use.  The associated issue is #9603.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n69cb240c530b1f7173a9af2555c19e9a1beb56c5\n```\n\n----------------------------------------\n\nTITLE: Fixing EncryptionAlgorithm Enum in Swagger\nDESCRIPTION: Updates the EncryptionAlgorithm enum in the Swagger document to include specific values.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters\n  transform: >\n    delete $.EncryptionAlgorithm.enum;\n    $.EncryptionAlgorithm.enum = [\n      \"None\",\n      \"AES256\"\n    ];\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-release Version of etcd/clientv3\nDESCRIPTION: Command to install a pre-release version of the etcd client when the standard installation doesn't work. This is specifically for accessing v3.5.0 pre-release versions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get go.etcd.io/etcd/client/v3@v3.5.0-pre\n```\n\n----------------------------------------\n\nTITLE: Identifying Vendored Code Directories in Grafana Mimir\nDESCRIPTION: Lists the directories that maintain their original upstream licenses rather than the project's default AGPL-3.0-only license. These directories include all subdirectories and ship with their original license text.\nSOURCE: https://github.com/grafana/mimir/blob/main/LICENSING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nvendor/\noperations/\n```\n\n----------------------------------------\n\nTITLE: Running ULID Tests\nDESCRIPTION: Command to run the ULID test suite.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Signal Handler Setup for Metrics\nDESCRIPTION: Shows how to set up an in-memory metrics sink with signal handling. Includes examples of setting gauges, emitting keys, incrementing counters, and adding samples.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/armon/go-metrics/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Setup the inmem sink and signal handler\ninm := metrics.NewInmemSink(10*time.Second, time.Minute)\nsig := metrics.DefaultInmemSignal(inm)\nmetrics.NewGlobal(metrics.DefaultConfig(\"service-name\"), inm)\n\n// Run some code\ninm.SetGauge([]string{\"foo\"}, 42)\ninm.EmitKey([]string{\"bar\"}, 30)\n\ninm.IncrCounter([]string{\"baz\"}, 42)\ninm.IncrCounter([]string{\"baz\"}, 1)\ninm.IncrCounter([]string{\"baz\"}, 80)\n\ninm.AddSample([]string{\"method\", \"wow\"}, 42)\ninm.AddSample([]string{\"method\", \"wow\"}, 100)\ninm.AddSample([]string{\"method\", \"wow\"}, 22)\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile Path Reference\nDESCRIPTION: File path reference for updating the Golang version in the build image Dockerfile.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-upgrade-golang-version.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmimir-build-image/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: WhiteList Function Usage in Go\nDESCRIPTION: Shows how to use the WhiteList function to remove characters from a string.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.WhiteList(\"a3a43a5a4a3a2a23a4a5a4a3a4\", \"a-z\") == \"aaaaaaaaaaaa\")\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice\nDESCRIPTION: This snippet shows the boilerplate notice required to apply the Apache License 2.0 to your work.  You need to replace the bracketed fields with your own identifying information, such as the year and the copyright owner's name. The text should be enclosed in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/ssooidc/LICENSE.txt#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\"\n```\n\n----------------------------------------\n\nTITLE: Service Discovery Target Groups Example in Go\nDESCRIPTION: Example showing the structure of target groups in Prometheus service discovery, demonstrating how to organize targets with their labels and sources. Includes multiple target groups for different services like MySQL and Postgres.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n[]targetgroup.Group{\n\t{\n\t\tTargets: []model.LabelSet{\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.150.1:7870\",\n\t\t\t\t\"hostname\":     \"demo-target-1\",\n\t\t\t\t\"test\":         \"simple-test\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.150.4:7870\",\n\t\t\t\t\"hostname\":     \"demo-target-2\",\n\t\t\t\t\"test\":         \"simple-test\",\n\t\t\t},\n\t\t},\n\t\tLabels: model.LabelSet{\n\t\t\t\"job\": \"mysql\",\n\t\t},\n\t\t\"Source\": \"file1\",\n\t},\n\t{\n\t\tTargets: []model.LabelSet{\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.122.11:6001\",\n\t\t\t\t\"hostname\":     \"demo-postgres-1\",\n\t\t\t\t\"test\":         \"simple-test\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.122.15:6001\",\n\t\t\t\t\"hostname\":     \"demo-postgres-2\",\n\t\t\t\t\"test\":         \"simple-test\",\n\t\t\t},\n\t\t},\n\t\tLabels: model.LabelSet{\n\t\t\t\"job\": \"postgres\",\n\t\t},\n\t\t\"Source\": \"file2\",\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mimir with Helm and Custom Configuration\nDESCRIPTION: Command to install the Mimir distributed chart using Helm with the custom values file that configures S3 storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n mimir-test install mimir grafana/mimir-distributed -f custom.yaml\n```\n\n----------------------------------------\n\nTITLE: Finding All Matches in a String\nDESCRIPTION: This Go code defines a function to find and return all matches of a regular expression within a string using Regexp2's FindNextMatch method. The function simplifies repeated match finding. Inputs are regex patterns and strings, and the output is a slice of all matched strings. Optimization is achieved by reusing underlying slices.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc regexp2FindAllString(re *regexp2.Regexp, s string) []string {\n\tvar matches []string\n\tm, _ := re.FindStringMatch(s)\n\tfor m != nil {\n\t\tmatches = append(matches, m.String())\n\t\tm, _ = re.FindNextMatch(m)\n\t}\n\treturn matches\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing BlobMetadata Definition in Swagger\nDESCRIPTION: Removes the 'properties' field from the BlobMetadata definition in the Swagger document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.BlobMetadata[\"properties\"];\n```\n\n----------------------------------------\n\nTITLE: Installing GoValidator Package in Go\nDESCRIPTION: Instructions for installing the GoValidator package using the go get command. It shows how to get the latest version or a specific release using gopkg.in.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/asaskevich/govalidator\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get gopkg.in/asaskevich/govalidator.v10\n```\n\n----------------------------------------\n\nTITLE: Tracing Method Signatures\nDESCRIPTION: Added Enabled(), SetAttributes(), and SpanFromContext() methods to tracing.Tracer interface\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Tracer interface {\n  Enabled() bool\n  SetAttributes(attrs map[string]string)\n  SpanFromContext(ctx context.Context) interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Sprig FuncMap in Go Templates\nDESCRIPTION: Example showing how to load and use the Sprig FuncMap in Go templates. The FuncMap must be set before loading the templates.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/Masterminds/sprig\"\n  \"html/template\"\n)\n\n// This example illustrates that the FuncMap *must* be set before the\n// templates themselves are loaded.\ntpl := template.Must(\n  template.New(\"base\").Funcs(sprig.FuncMap()).ParseGlob(\"*.html\")\n)\n```\n\n----------------------------------------\n\nTITLE: Running mimir-continuous-test using Docker\nDESCRIPTION: Commands to pull and run the mimir-continuous-test Docker image. This allows users to quickly set up and execute the tool in a containerized environment.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimir-continuous-test.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull \"grafana/mimir:latest\"\ndocker run --rm -ti grafana/mimir -target=continuous-test\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays with JMESPath Expressions in Go\nDESCRIPTION: Shows how to use filter expressions to select elements from an array based on a condition. The example filters for objects where the 'age' field is greater than 30.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo[?age > `30`]\")\nresult = [ { age: 35 }, { age: 40 } ]\n```\n\n----------------------------------------\n\nTITLE: First Release Candidate\nDESCRIPTION: First RC release of stable modules at v1.0.0-RC1, while keeping metric modules at v0.14.0\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\notel: v1.0.0-RC1\notel/trace: v1.0.0-RC1\notel/baggage: v1.0.0-RC1\notel/sdk/trace: v1.0.0-RC1\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Markup in Go\nDESCRIPTION: This code defines reply and inline keyboards for a Telegram bot using the Telebot library. It includes the setup of buttons and the response handling methods for user interactions such as button presses.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\t// Universal markup builders.\n\tmenu     = &tele.ReplyMarkup{ResizeKeyboard: true}\n\tselector = &tele.ReplyMarkup{}\n\n\t// Reply buttons.\n\tbtnHelp     = menu.Text(\"ℹ Help\")\n\tbtnSettings = menu.Text(\"⚙ Settings\")\n\n\t// Inline buttons.\n\t//\n\t// Pressing it will cause the client to\n\t// send the bot a callback.\n\t//\n\t// Make sure Unique stays unique as per button kind\n\t// since it's required for callback routing to work.\n\t//\n\tbtnPrev = selector.Data(\"⬅\", \"prev\", ...)\n\tbtnNext = selector.Data(\"➡\", \"next\", ...)\n)\n\nmenu.Reply(\n\tmenu.Row(btnHelp),\n\tmenu.Row(btnSettings),\n)\nselector.Inline(\n\tselector.Row(btnPrev, btnNext),\n)\n\nb.Handle(\"/start\", func(c tele.Context) error {\n\treturn c.Send(\"Hello!\", menu)\n})\n\n// On reply button pressed (message)\nb.Handle(&btnHelp, func(c tele.Context) error {\n\treturn c.Edit(\"Here is some help: ...\")\n})\n\n// On inline button pressed (callback)\nb.Handle(&btnPrev, func(c tele.Context) error {\n\treturn c.Respond()\n})\n```\n\n----------------------------------------\n\nTITLE: Building k6 with Prometheus Remote Client Support\nDESCRIPTION: Command to build k6 with prometheus remote client support using xk6 builder.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/k6/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nxk6 build --with github.com/grafana/xk6-client-prometheus-remote@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Colorstring via Go Get\nDESCRIPTION: Command to install the colorstring library using Go's standard package management. This uses the 'go get' command to fetch the library from GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mitchellh/colorstring/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/colorstring\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmark Test for Profiler Goroutines\nDESCRIPTION: Benchmark results showing execution time per operation across different goroutine counts. Tests were run on Darwin/amd64 platform using the fgprof package, measuring performance from 1 to over 1 million concurrent goroutines.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/felixge/fgprof/BenchmarkProfilerGoroutines.txt#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go test -bench=BenchmarkProfilerGoroutines\ngoos: darwin\ngoarch: amd64\npkg: github.com/felixge/fgprof\nBenchmarkProfilerGoroutines/1_goroutines-8         \t  43431\t    26860 ns/op\nBenchmarkProfilerGoroutines/2_goroutines-8         \t  42590\t    27648 ns/op\nBenchmarkProfilerGoroutines/4_goroutines-8         \t  40725\t    28694 ns/op\nBenchmarkProfilerGoroutines/8_goroutines-8         \t  37874\t    31067 ns/op\nBenchmarkProfilerGoroutines/16_goroutines-8        \t  32778\t    37302 ns/op\nBenchmarkProfilerGoroutines/32_goroutines-8        \t  25447\t    47171 ns/op\nBenchmarkProfilerGoroutines/64_goroutines-8        \t  17937\t    66803 ns/op\nBenchmarkProfilerGoroutines/128_goroutines-8       \t  11138\t   108283 ns/op\nBenchmarkProfilerGoroutines/256_goroutines-8       \t   5232\t   191830 ns/op\nBenchmarkProfilerGoroutines/512_goroutines-8       \t   2848\t   351686 ns/op\nBenchmarkProfilerGoroutines/1024_goroutines-8      \t   1611\t   681412 ns/op\nBenchmarkProfilerGoroutines/2048_goroutines-8      \t    846\t  1396125 ns/op\nBenchmarkProfilerGoroutines/4096_goroutines-8      \t    358\t  3286943 ns/op\nBenchmarkProfilerGoroutines/8192_goroutines-8      \t    153\t  7813804 ns/op\nBenchmarkProfilerGoroutines/16384_goroutines-8     \t     70\t 16440643 ns/op\nBenchmarkProfilerGoroutines/32768_goroutines-8     \t     33\t 34101649 ns/op\nBenchmarkProfilerGoroutines/65536_goroutines-8     \t     16\t 68460458 ns/op\nBenchmarkProfilerGoroutines/131072_goroutines-8    \t      8\t134481118 ns/op\nBenchmarkProfilerGoroutines/262144_goroutines-8    \t      4\t270522885 ns/op\nBenchmarkProfilerGoroutines/524288_goroutines-8    \t      2\t567821104 ns/op\nBenchmarkProfilerGoroutines/1048576_goroutines-8   \t      1\t1202184643 ns/op\n```\n\n----------------------------------------\n\nTITLE: Git Version Tagging and Push Commands\nDESCRIPTION: Commands used by OWNERS to create a signed git tag for the new version and push it to the repository. The commands are part of the release process workflow.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/yaml/RELEASE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: Query Processing Time Utilization with Round-Robin - Mermaid\nDESCRIPTION: This diagram illustrates the query processing time utilization in a round-robin selection system across two query components. The visualization highlights the time taken for processing both fast and slow queries over a defined period of ticks.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/scheduler/DESIGN.md#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Query Processing Time Utilization with Round-Robin\nconfig:\n  gantt:\n    displayMode: compact\n    numberSectionStyles: 2\n  theme: default\n---\ngantt\n    dateFormat ss\n    axisFormat %S\n    tickInterval 1second\n\n    section consumer-1\n        fast        :active, c1-1, 00, 1s\n        fast        :active, c1-2, 01, 1s\n        fast        :active, c1-3, 02, 1s\n        slow        :done, c1-4, 03, 8s\n        slow...     :done, c1-5, 11, 5s\n\n    section consumer-2\n        slow        :done, c2-1, 00, 8s\n        fast        :active, c2-2, 08, 1s\n        fast        :active, c2-3, 09, 1s\n        fast        :active, c2-4, 10, 1s\n        fast        :active, c2-5, 11, 1s\n        slow...     :done, c2-6, 12, 4s\n\n    section consumer-3\n        fast        :active, c3-1, 00, 1s\n        slow        :done, c3-2, 01, 8s\n        slow...     :done, c3-3, 09, 7s\n\n    section consumer-4\n        slow        :done, c4-1, 00, 8s\n        slow        :done, c4-2, 08, 8s\n\n```\n\n----------------------------------------\n\nTITLE: Basic CPU Information Display Example in Go\nDESCRIPTION: Complete Go example demonstrating how to access and display basic CPU information using the cpuid package. It shows how to retrieve processor details, features, cache information, and test for specific CPU capabilities.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t. \"github.com/klauspost/cpuid/v2\"\n)\n\nfunc main() {\n\t// Print basic CPU information:\n\tfmt.Println(\"Name:\", CPU.BrandName)\n\tfmt.Println(\"PhysicalCores:\", CPU.PhysicalCores)\n\tfmt.Println(\"ThreadsPerCore:\", CPU.ThreadsPerCore)\n\tfmt.Println(\"LogicalCores:\", CPU.LogicalCores)\n\tfmt.Println(\"Family\", CPU.Family, \"Model:\", CPU.Model, \"Vendor ID:\", CPU.VendorID)\n\tfmt.Println(\"Features:\", strings.Join(CPU.FeatureSet(), \",\"))\n\tfmt.Println(\"Cacheline bytes:\", CPU.CacheLine)\n\tfmt.Println(\"L1 Data Cache:\", CPU.Cache.L1D, \"bytes\")\n\tfmt.Println(\"L1 Instruction Cache:\", CPU.Cache.L1I, \"bytes\")\n\tfmt.Println(\"L2 Cache:\", CPU.Cache.L2, \"bytes\")\n\tfmt.Println(\"L3 Cache:\", CPU.Cache.L3, \"bytes\")\n\tfmt.Println(\"Frequency\", CPU.Hz, \"hz\")\n\n\t// Test if we have these specific features:\n\tif CPU.Supports(SSE, SSE2) {\n\t\tfmt.Println(\"We have Streaming SIMD 2 Extensions\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Blob Storage and Identity Packages\nDESCRIPTION: Commands to install the required Go packages for Azure Blob Storage and Azure Identity authentication.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/storage/azblob\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Using Validator for Claims Validation in Go\nDESCRIPTION: This code snippet demonstrates how to initialize a Validator with a leeway option for validating claims in JWT. It replaces the previous direct validation on claims, providing a safer and cleaner approach to claims validation in the library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar v = jwt.NewValidator(jwt.WithLeeway(5*time.Second))\nv.Validate(myClaims)\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Authentication with AAD Token\nDESCRIPTION: Demonstrates authentication using Azure Active Directory (AAD) token credentials from the azidentity module.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Compressing Small Blocks with zstd in Go\nDESCRIPTION: An example showing how to create a reusable zstd encoder for compressing small blocks of data efficiently. This approach avoids allocations after a warmup period by reusing the encoder instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Null Handling (Go)\nDESCRIPTION: This example focuses on how JSON null values are unmarshaled into non-empty Go values. v1's behavior was inconsistent, while v2 always clears the value. This snippet is linked to the `TestMergeNull` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n\"[MergeNull](/diff_test.go#:~:text=TestMergeNull)\"\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra in Go Application\nDESCRIPTION: Go code snippet showing how to import the Cobra library into a Go application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Feature: Downscope Options UniverseDomain\nDESCRIPTION: This commit introduces the `UniverseDomain` option to the `downscope.Options` struct within the `auth` package. This enables specifying the universe domain when downscoping credentials, providing greater control over the scope and target environment for authentication. This feature relates to issue #9634.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n52cf7d780853594291c4e34302d618299d1f5a1d\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Endpoints for Mimir HA Tracker\nDESCRIPTION: Configuration setting that specifies the etcd endpoints for Mimir's high-availability tracker. Uses multiple etcd client endpoints on different ports for redundancy.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/string-slice-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-distributor.ha-tracker.etcd.endpoints=etcd-client.cortex-to-mimir.svc.cluster.local.:2379,etcd-client.cortex-to-mimir.svc.cluster.local.:2378\n```\n\n----------------------------------------\n\nTITLE: Feature: Add Downscope Package\nDESCRIPTION: This commit introduces the `downscope` package to the `auth` module. This package enables creating credentials with a reduced scope of permissions compared to the original credentials. The commit is related to issue #8532.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ndda9bff8ec70e6d104901b4105d13dcaa4e2404c\n```\n\n----------------------------------------\n\nTITLE: Creating a feature branch for Zap contributions\nDESCRIPTION: Git commands to create a new branch for development. This process ensures your branch is based on the latest upstream master before making changes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/zap\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Text Format Lexers in Pygments\nDESCRIPTION: Lexers for parsing and highlighting text-based format files like todo.txt\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/pygments-lexers.txt#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npygments.lexers.textfmts.TodotxtLexer\n```\n\n----------------------------------------\n\nTITLE: Expecting Query Failures in PromQL Test Scripts\nDESCRIPTION: Demonstrates how to use the 'expect fail' line to assert that a query should fail, optionally with specific error messages or regular expressions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/promql/promqltest/README.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\neval instant at 1m ceil({__name__=~'testmetric1|testmetric2'})\nexpect fail\n\neval instant at 1m ceil({__name__=~'testmetric1|testmetric2'})\nexpect fail msg \"vector cannot contain metrics with the same labelset\"\n\neval instant at 1m ceil({__name__=~'testmetric1|testmetric2'})\nexpect fail regex \"vector cannot contain metrics .*|something else went wrong\"\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Object Storage in YAML\nDESCRIPTION: YAML configuration for S3 object storage including authentication, bucket settings, HTTP configuration, and server-side encryption options. Defines all available configuration parameters for S3 storage backend.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntype: S3\nconfig:\n  bucket: \"\"\n  endpoint: \"\"\n  region: \"\"\n  disable_dualstack: false\n  aws_sdk_auth: false\n  access_key: \"\"\n  insecure: false\n  signature_version2: false\n  secret_key: \"\"\n  session_token: \"\"\n  put_user_metadata: {}\n  http_config:\n    idle_conn_timeout: 1m30s\n    response_header_timeout: 2m\n    insecure_skip_verify: false\n    tls_handshake_timeout: 10s\n    expect_continue_timeout: 1s\n    max_idle_conns: 100\n    max_idle_conns_per_host: 100\n    max_conns_per_host: 0\n    tls_config:\n      ca_file: \"\"\n      cert_file: \"\"\n      key_file: \"\"\n      server_name: \"\"\n      insecure_skip_verify: false\n    disable_compression: false\n  trace:\n    enable: false\n  list_objects_version: \"\"\n  bucket_lookup_type: auto\n  send_content_md5: true\n  disable_multipart: false\n  part_size: 67108864\n  sse_config:\n    type: \"\"\n    kms_key_id: \"\"\n    kms_encryption_context: {}\n    encryption_key: \"\"\n  sts_endpoint: \"\"\nprefix: \"\"\n```\n\n----------------------------------------\n\nTITLE: Wrapping hclog.Logger for Standard Library Logger in Go\nDESCRIPTION: This snippet demonstrates how to wrap an `hclog.Logger` instance with the standard library's `log.Logger` interface using the `StandardLogger()` method. It allows using the familiar `Println()`, `Printf()`, etc., methods provided by the standard library while leveraging the features of `hclog`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n\"stdLogger := appLogger.StandardLogger(&hclog.StandardLoggerOptions{\n\tInferLevels: true,\n})\n// Printf() is provided by stdlib log.Logger interface, not hclog.Logger\nstdLogger.Printf(\\\"[DEBUG] %+v\\\", stdLogger)\"\n```\n\n----------------------------------------\n\nTITLE: Finding Gaps in a Single Metric with tsdb-gaps\nDESCRIPTION: Demonstrates how to use tsdb-gaps to find gaps in a single metric ('etcd_requests_total'). The example shows the command execution and its JSON output, which indicates no gaps were found in the specified metric.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/tsdb-gaps/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n./tsdb-gaps -select '{__name__=\"etcd_requests_total\"}' 01J0SSQT75APKRZ2ZX8FYZ08TA | jq\nlevel=debug msg=\"using matchers\" matcher=\"__name__=\\\"etcd_requests_total\\\"\"\n{\n  \"01J0SSQT75APKRZ2ZX8FYZ08TA\": {\n    \"blockID\": \"01J0SSQT75APKRZ2ZX8FYZ08TA\",\n    \"minTime\": 1718841600134,\n    \"maxTime\": 1718848800000,\n    \"totalSeries\": 398711,\n    \"totalMatchedSeries\": 2487,\n    \"totalSeriesWithGaps\": 0,\n    \"totalSamples\": 195206875,\n    \"totalMissedSamples\": 0,\n    \"gapStats\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GitIgnore Pattern Matching in Go\nDESCRIPTION: Demonstrates how to create a new GitIgnore instance and match a file path against patterns. Takes a path to the gitignore file and returns a matcher object.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/monochromegane/go-gitignore/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngitignore, _ := gitignore.NewGitIgnore(\"/path/to/gitignore\")\n\npath := \"/path/to/file\"\nisDir := false\ngitignore.Match(path, isDir)\n```\n\n----------------------------------------\n\nTITLE: Fix: Update golang.org/x/net to v0.17.0\nDESCRIPTION: This commit updates the `golang.org/x/net` dependency to version v0.17.0 in the `auth/oauth2adapt` package. This update brings in bug fixes, performance enhancements, and potentially new features from the networking library. The commit hash is 174da47254fefb12921bbfc65b7829a453af6f5d.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n174da47254fefb12921bbfc65b7829a453af6f5d\n```\n\n----------------------------------------\n\nTITLE: Querier: Query Store After Configuration\nDESCRIPTION: Configures the duration after which data is considered for querying from the query store.  This setting ensures that the query end time is not more recent than 'now - query-store-after'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n\"# manipulated to ensure the query end is not more recent than 'now -\\n# query-store-after'.\\n# CLI flag: -querier.query-store-after\\n[query_store_after: <duration> | default = 12h]\"\n```\n\n----------------------------------------\n\nTITLE: Using Generic SPSCQueueOf in Go\nDESCRIPTION: Demonstrates the generic SPSCQueueOf type with parametrized item types for Go 1.19+.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nq := xsync.NewSPSCQueueOf[string](1024)\ninserted := q.TryEnqueue(\"foo\")\nitem, ok := q.TryDequeue() // string\n```\n\n----------------------------------------\n\nTITLE: Example Request Body for Alertmanager Configuration\nDESCRIPTION: An example YAML configuration provided for setting up the Alertmanager, detailing template files and alert manager configurations with SMTP settings. It illustrates how to structure the request payload for configuring the Alertmanager.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate_files:\n  default_template: |\n    {{ define \"__alertmanager\" }}AlertManager{{ end }}\n    {{ define \"__alertmanagerURL\" }}{{ .ExternalURL }}/#/alerts?receiver={{ .Receiver | urlquery }}{{ end }}\nalertmanager_config: |\n  global:\n    smtp_smarthost: 'localhost:25'\n    smtp_from: 'youraddress@example.org'\n  templates:\n    - 'default_template'\n  route:\n    receiver: example-email\n  receivers:\n    - name: example-email\n      email_configs:\n      - to: 'youraddress@example.org'\n```\n\n----------------------------------------\n\nTITLE: Resolving gRPC Import Issues in China\nDESCRIPTION: Alternative method for importing gRPC packages when encountering network restrictions, using go mod replace feature to create package aliases.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Using Afero FileSystem Methods in Go\nDESCRIPTION: Example of using Afero's FileSystem methods to open a file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nAppFs.Open(\"/tmp/foo\")\n```\n\n----------------------------------------\n\nTITLE: Defining Token Structure in Go\nDESCRIPTION: This code snippet defines the Token struct, encapsulating the components of a JWT including its raw representation, method of signing, header, claims, and decoded signature. This design facilitates easier handling and manipulation of JWTs in Go applications.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Token struct {\n\tRaw       string                 // Raw contains the raw token\n\tMethod    SigningMethod          // Method is the signing method used or to be used\n\tHeader    map[string]interface{} // Header is the first segment of the token in decoded form\n\tClaims    Claims                 // Claims is the second segment of the token in decoded form\n\tSignature []byte                 // Signature is the third segment of the token in decoded form\n\tValid     bool                   // Valid specifies if the token is valid\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Documentation v1.8.0\nDESCRIPTION: Documents changes in NewManagedIdentityCredential error handling when ManagedIdentityCredentialOptions.ID is set in unsupported environments. Now returns errors instead of logging warnings in Azure Arc, Azure ML, Cloud Shell, and Service Fabric.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/BREAKING_CHANGES.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### New errors from `NewManagedIdentityCredential` in some environments\n\n`NewManagedIdentityCredential` now returns an error when `ManagedIdentityCredentialOptions.ID` is set in a hosting environment whose managed identity API doesn't support user-assigned identities. `ManagedIdentityCredential.GetToken()` formerly logged a warning in these cases. Returning an error instead prevents the credential authenticating an unexpected identity. The affected hosting environments are:\n  * Azure Arc\n  * Azure ML (when a resource or object ID is specified; client IDs are supported)\n  * Cloud Shell\n  * Service Fabric\n```\n\n----------------------------------------\n\nTITLE: HTML Comments in Contributing Guidelines\nDESCRIPTION: Example HTML comments used to provide template customization instructions within the contributing guidelines markdown file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/yaml/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!---\nIf your repo has certain guidelines for contribution, put them here ahead of the general k8s resources\n-->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!---\nCustom Information - if you're copying this template for the first time you can add custom content here, for example:\n\n## Contact Information\n\n- [Slack channel](https://kubernetes.slack.com/messages/kubernetes-users) - Replace `kubernetes-users` with your slack channel string, this will send users directly to your channel. \n- [Mailing list](URL)\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Feature: Port External Account Changes\nDESCRIPTION: This commit ports changes related to external accounts within the `auth` module. These changes likely include bug fixes, performance improvements, or new features that enhance the support for external account authentication. The commit is associated with issue #8697.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_29\n\nLANGUAGE: go\nCODE:\n```\n5823db5d633069999b58b9131a7f9cd77e82c899\n```\n\n----------------------------------------\n\nTITLE: Memberlist Configuration Parameters in YAML\nDESCRIPTION: Configuration settings for memberlist networking including buffer sizes, IP bindings, timeouts, and TLS settings. These parameters control how Mimir nodes communicate with each other using gossip protocol.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_116\n\nLANGUAGE: yaml\nCODE:\n```\nmessage_history_buffer_bytes: <int> | default = 0\nwatch_prefix_buffer_size: <int> | default = 128\nbind_addr: <list of strings> | default = []\nbind_port: <int> | default = 7946\npacket_dial_timeout: <duration> | default = 2s\npacket_write_timeout: <duration> | default = 5s\nmax_concurrent_writes: <int> | default = 3\nacquire_writer_timeout: <duration> | default = 250ms\ntls_enabled: <boolean> | default = false\ntls_cert_path: <string> | default = \"\"\ntls_key_path: <string> | default = \"\"\ntls_ca_path: <string> | default = \"\"\ntls_server_name: <string> | default = \"\"\ntls_insecure_skip_verify: <boolean> | default = false\ntls_cipher_suites: <string> | default = \"\"\ntls_min_version: <string> | default = \"\"\n```\n\n----------------------------------------\n\nTITLE: Token File Deletion Command\nDESCRIPTION: Kubernetes command to delete old token files from ingester pods.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-spread-minimizing-tokens/index.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n mimir-prod exec ingester-zone-a-0 -- rm /data/tokens\n```\n\n----------------------------------------\n\nTITLE: Error Handling Pattern in Protocol Decoding\nDESCRIPTION: Example showing the recommended error handling approach for protocol decoding in GoPacket, demonstrating when to return errors and how to handle partial decoding scenarios.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/google/gopacket/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc decodeMyProtocol(data []byte, p gopacket.PacketBuilder) error {\n  prot := &MyProtocol{}\n  if len(data) < 10 {\n    // This error occurred before we did ANYTHING, so there's nothing in my\n    // protocol that the caller could possibly want.  Just return the error.\n    return fmt.Errorf(\"Length %d less than 10\", len(data))\n  }\n  prot.ImportantField1 = data[:5]\n  prot.ImportantField2 = data[5:10]\n  // At this point, we've already got enough information in 'prot' to\n  // warrant returning it to the caller, so we'll add it now.\n  p.AddLayer(prot)\n  if len(data) < 15 {\n    // We encountered an error later in the packet, but the caller already\n    // has the important info we've gleaned so far.\n    return fmt.Errorf(\"Length %d less than 15\", len(data))\n  }\n  prot.ImportantField3 = data[10:15]\n  return nil  // We've already added the layer, we can just return success.\n}\n```\n\n----------------------------------------\n\nTITLE: Health Check Handler Test Implementation\nDESCRIPTION: Unit test for the health check handler, demonstrating how to test HTTP handlers using httptest package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\npackage main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestHealthCheckHandler(t *testing.T) {\n    // Create a request to pass to our handler. We don't have any query parameters for now, so we'll\n    // pass 'nil' as the third parameter.\n    req, err := http.NewRequest(\"GET\", \"/health\", nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.\n    rr := httptest.NewRecorder()\n    handler := http.HandlerFunc(HealthCheckHandler)\n\n    // Our handlers satisfy http.Handler, so we can call their ServeHTTP method\n    // directly and pass in our Request and ResponseRecorder.\n    handler.ServeHTTP(rr, req)\n\n    // Check the status code is what we expect.\n    if status := rr.Code; status != http.StatusOK {\n        t.Errorf(\"handler returned wrong status code: got %v want %v\",\n            status, http.StatusOK)\n    }\n\n    // Check the response body is what we expect.\n    expected := `{\"alive\": true}`\n    if rr.Body.String() != expected {\n        t.Errorf(\"handler returned unexpected body: got %v want %v\",\n            rr.Body.String(), expected)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct for JSON Decoding in Go\nDESCRIPTION: This snippet shows a simple struct definition used as an example for JSON decoding. It demonstrates how JSON field tags are used to map JSON keys to struct fields.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype T struct {\n    A int `json:\"a\"`\n    B int `json:\"b\"`\n    C int `json:\"c\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Benchmark Results at b3e7a5386f\nDESCRIPTION: Baseline performance metrics for name conversion functions showing higher resource usage\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t  862623\t     44101 ns/op\t   10450 B/op\t     732 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t  853656\t     40728 ns/op\t   10468 B/op\t     734 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t 1268312\t     27813 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t 1276322\t     27903 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t  895334\t     40354 ns/op\t   10472 B/op\t     731 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t  882441\t     40678 ns/op\t   10566 B/op\t     749 allocs/op\n```\n\n----------------------------------------\n\nTITLE: OpenReader Function Declaration in Go\nDESCRIPTION: Function declaration for OpenReader, which consumes the contents of an io.Reader and presents the results in a new browser window.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenReader(r io.Reader) error\n```\n\n----------------------------------------\n\nTITLE: Specifying Codespell Dependency Version for Mimir\nDESCRIPTION: Defines the exact version of Codespell (2.4.1) to be installed for the Grafana Mimir project. Codespell is a tool used to check for and correct common misspellings in text files, which helps maintain code quality.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\ncodespell==2.4.1\n```\n\n----------------------------------------\n\nTITLE: Upgrading Mimir to memberlist for key-value store\nDESCRIPTION: This code snippet describes the steps to upgrade Mimir to use memberlist for the ring key-value store, replacing Consul. It involves deploying runtime `multi_kv_config` with Consul as primary initially, then switching to memberlist as primary before deploying the `v1.2.0` helm chart.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nDeploy runtime `multi_kv_config` to use Consul as a primary and memberlist as the secondary key-value store.\nThe values for such a change can be found in the [`multi-kv-consul-primary-values.yaml`](./multi-kv-consul-primary-values.yaml).\nDeploy runtime `multi_kv_config` to use memberlist as the primary and Consul as the secondary key-value store.\nThe values for such a change can be found in [`multi-kv-memberlist-primary-values.yaml`](./multi-kv-memberlist-primary-values.yaml)\n```\n\n----------------------------------------\n\nTITLE: Copying Objects Between Google Cloud Storage Buckets\nDESCRIPTION: Command to copy objects between GCS buckets with source and destination prefix specification. Includes dry run option for testing.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/copyprefix/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./copyprefix \\\n  --source.backend gcs \\\n  --destination.backend gcs \\\n  --gcs.source.bucket-name <source bucket name> \\\n  --gcs.destination.bucket-name <destination bucket name> \\\n  --source-prefix tenant1 \\\n  --destination-prefix tenant2 \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Controlling Time with the Mock Clock in Go\nDESCRIPTION: This snippet illustrates how to control the mock clock by using its functions to find the current time and move the clock forward. It also highlights the operation of timers and tickers based on the mock clock's functionality.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/benbjohnson/clock/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmock := clock.NewMock()\n\n// Find the current time.\nmock.Now().UTC() // 1970-01-01 00:00:00 +0000 UTC\n\n// Move the clock forward.\nmock.Add(2 * time.Hour)\n\n// Check the time again. It's 2 hours later!\nmock.Now().UTC() // 1970-01-01 02:00:00 +0000 UTC\n\nmock := clock.NewMock()\ncount := 0\n\n// Kick off a timer to increment every 1 mock second.\ngo func() {\n\tticker := mock.Ticker(1 * time.Second)\n\tfor {\n\t\t<-ticker.C\n\t\tcount++\n\t}\n}()\nruntime.Gosched()\n\n// Move the clock forward 10 seconds.\nmock.Add(10 * time.Second)\n\n// This prints 10.\nfmt.Println(count)\n```\n\n----------------------------------------\n\nTITLE: Importing JWT-Go Package\nDESCRIPTION: Code snippet showing how to import the jwt-go package in Go code.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang-jwt/jwt/v5\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Semantic Versions in Go\nDESCRIPTION: Shows how to sort a set of semantic versions using the sort package from the standard library. It parses raw version strings into Version objects and then sorts them.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nraw := []string{\"1.2.3\", \"1.0\", \"1.3\", \"2\", \"0.4.2\",}\nvs := make([]*semver.Version, len(raw))\nfor i, r := range raw {\n    v, err := semver.NewVersion(r)\n    if err != nil {\n        t.Errorf(\"Error parsing version: %s\", err)\n    }\n\n    vs[i] = v\n}\n\nsort.Sort(semver.Collection(vs))\n```\n\n----------------------------------------\n\nTITLE: Watching Configuration Files for Changes in Go\nDESCRIPTION: Implementation of file watching functionality to reload configuration when changes occur\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tf := file.Provider(\"mock/mock.json\")\n\tif err := k.Load(f, json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load YAML config and merge into the previously loaded config (because we can).\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n\tfmt.Println(\"parent's ID is = \", k.Int(\"parent1.id\"))\n\n\t// Watch the file and get a callback on change. The callback can do whatever,\n\t// like re-load the configuration.\n\t// File provider always returns a nil `event`.\n\tf.Watch(func(event interface{}, err error) {\n\t\tif err != nil {\n\t\t\tlog.Printf(\"watch error: %v\", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Throw away the old config and load a fresh copy.\n\t\tlog.Println(\"config changed. Reloading ...\")\n\t\tk = koanf.New(\".\")\n\t\tk.Load(f, json.Parser())\n\t\tk.Print()\n\t})\n\n\t// To stop a file watcher, call:\n\t// f.Unwatch()\n\n\t// Block forever (and manually make a change to mock/mock.json) to\n\t// reload the config.\n\tlog.Println(\"waiting forever. Try making a change to mock/mock.json to live reload\")\n\t<-make(chan bool)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Concurrent Stream Decompression Scaling in Markdown\nDESCRIPTION: This markdown table demonstrates the scaling of S2's concurrent stream decompression for different CPU core counts. It compares S2 with Snappy and includes a version without assembly optimizations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Input                                     | `-cpu=1`   | `-cpu=2`   | `-cpu=4`   | `-cpu=8`   | `-cpu=16`   |\n|-------------------------------------------|------------|------------|------------|------------|-------------|\n| enwik10.snappy                            | 1098.6MB/s | 1819.8MB/s | 3625.6MB/s | 6910.6MB/s | 10818.2MB/s |\n| enwik10.s2                                | 1303.5MB/s | 2606.1MB/s | 4847.9MB/s | 8878.4MB/s | 9592.1MB/s  |\n| sofia-air-quality-dataset.tar.snappy      | 1302.0MB/s | 2165.0MB/s | 4244.5MB/s | 8241.0MB/s | 12920.5MB/s |\n| sofia-air-quality-dataset.tar.s2          | 1399.2MB/s | 2463.2MB/s | 5196.5MB/s | 9639.8MB/s | 11439.5MB/s |\n| sofia-air-quality-dataset.tar.s2 (no asm) | 837.5MB/s  | 1652.6MB/s | 3183.6MB/s | 5945.0MB/s | 9620.7MB/s  |\n```\n\n----------------------------------------\n\nTITLE: Go Module Requirement Declaration\nDESCRIPTION: Example of how to declare module requirements in go.mod files with proper versioning\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/otel/v2\nrequire go.opentelemetry.io/otel/v2 v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Structs with Validation Tags in Go\nDESCRIPTION: Illustrates different struct definitions with validation tags, demonstrating how the SetFieldsRequiredByDefault setting affects validation behavior.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):\ntype exampleStruct struct {\n  Name  string ``\n  Email string `valid:\"email\"`\n}\n\n// this, however, will only fail when Email is empty or an invalid email address:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email\"`\n}\n\n// lastly, this will only fail when Email is an invalid email address but not when it's empty:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email,optional\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Subcommands in Go with Kingpin\nDESCRIPTION: This snippet illustrates the use of nested subcommands in the Kingpin library, including flags and argument definitions for specific commands. It provides a structure for managing delete operations on users and posts.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  deleteCommand     = kingpin.Command(\"delete\", \"Delete an object.\")\n  deleteUserCommand = deleteCommand.Command(\"user\", \"Delete a user.\")\n  deleteUserUIDFlag = deleteUserCommand.Flag(\"uid\", \"Delete user by UID rather than username.\")\n  deleteUserUsername = deleteUserCommand.Arg(\"username\", \"Username to delete.\")\n  deletePostCommand = deleteCommand.Command(\"post\", \"Delete a post.\")\n)\n\nfunc main() {\n  switch kingpin.Parse() {\n  case deleteUserCommand.FullCommand():\n  case deletePostCommand.FullCommand():\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Object Store Bucket with mimirtool Bash\nDESCRIPTION: The command validates that the object store bucket is functioning correctly, providing various flags to control the number of operations, test runs, error retries, and more.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool bucket-validation\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Server and Component Settings\nDESCRIPTION: This snippet contains a list of configuration options for Grafana Mimir, including server port, authentication type, storage backends for different components, and file paths for various functionalities.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/gem/common-flags-new.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-server.http-listen-port=80\n-auth.type=trust\n-blocks-storage.backend=s3\n-ruler-storage.backend=s3\n-alertmanager-storage.backend=s3\n-graphite.querier.schemas.backend=s3\n-activity-tracker.filepath=./active-query-tracker\n-alertmanager.storage.path=data/\n-blocks-storage.filesystem.dir=\n-compactor.data-dir=./data\n-ruler.rule-path=/rules\n-ruler-storage.filesystem.dir=\n```\n\n----------------------------------------\n\nTITLE: Creating Detailed gRPC Status Error in Go\nDESCRIPTION: This snippet demonstrates how to create a gRPC status error with additional detail using the gRPC status package. It specifies a failed precondition and adds field violation details to the error. If an error occurs when adding details, it returns an error without details.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gogo/status/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nst := status.New(codes.FailedPrecondition, \"wrong user role\")\ndetSt, err := st.WithDetails(&rpc.BadRequest{\n    FieldViolations: []*rpc.BadRequest_FieldViolation{\n        {\n            Field:       \"role\",\n            Description: \"The first user created must have the role of an ADMIN\",\n        },\n    },\n})\nif err == nil {\n    return detSt.Err()\n}\nreturn st.Err()\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Schema\nDESCRIPTION: Commands for fetching the raw schema without generating swagger.go\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm kubernetesapi/swagger.pb\nmake kubernetesapi/swagger.pb\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty via Go Get\nDESCRIPTION: This command installs the go-isatty library using the go get command. It fetches the library from the GitHub repository and installs it in the Go workspace.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: Converted CLI Flag Output\nDESCRIPTION: Shows the expected output CLI flags file after conversion. The parameter for results cache concurrency has been modified.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n-query-frontend.results-cache.memcached.max-async-concurrency=45\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Blob Storage SDK Generation in Go\nDESCRIPTION: Defines the AutoRest configuration settings for generating the Azure Blob Storage SDK in Go, including version, input file, output folder, and other parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/ae95eb6a4701d844bada7d1c4f5ecf4a7444e5b8/specification/storage/data-plane/Microsoft.BlobStorage/stable/2025-01-05/blob.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodelerfour:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.65\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway with Updated Readiness Probe\nDESCRIPTION: YAML configuration that updates the readiness probe path when migrating from NGINX to Gateway. This is necessary when upgrading from versions prior to 4.0.0 where the /ready endpoint didn't exist.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ngateway:\n  readinessProbe:\n    httpGet:\n      path: /\n  service:\n    annotations:\n      networking.istio.io/exportTo: admin\n    nameOverride: mimir-nginx\n  ingress:\n    enabled: true\n    nameOverride: mimir-nginx\n    hosts:\n      - host: mimir.example.com\n        paths:\n          - path: /\n            pathType: Prefix\n    tls:\n      - secretName: mimir-gateway-tls\n        hosts:\n          - mimir.example.com\n  enabledNonEnterprise: true\n  replicas: 10\n```\n\n----------------------------------------\n\nTITLE: Handling Inline Queries in Telebot\nDESCRIPTION: This snippet shows how to handle incoming inline queries using the Telebot library by defining a handler for 'tele.OnQuery'. It builds a response containing multiple photo results that can be sent back to the Telegram client in response to user queries.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nb.Handle(tele.OnQuery, func(c tele.Context) error {\n\turls := []string{\n\t\t\"http://photo.jpg\",\n\t\t\"http://photo2.jpg\",\n\t}\n\n\tresults := make(tele.Results, len(urls)) // []tele.Result\n\tfor i, url := range urls {\n\t\tresult := &tele.PhotoResult{\n\t\t\tURL:      url,\n\t\t\tThumbURL: url, // required for photos\n\t\t}\n\n\t\tresults[i] = result\n\t\t// needed to set a unique string ID for each result\n\t\tresults[i].SetResultID(strconv.Itoa(i))\n\t}\n\n\treturn c.Answer(&tele.QueryResponse{\n\t\tResults:   results,\n\t\tCacheTime: 60, // a minute\n\t})\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Zstandard Dictionary to S2 Dictionary in Go\nDESCRIPTION: Shows how to convert a Zstandard dictionary to an S2 dictionary, which is useful for generating dictionaries for files without a fixed structure. It also demonstrates encoding and decoding using the converted dictionary.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n    // Decode the Zstandard dictionary.\n    insp, err := zstd.InspectDictionary(zdict)\n    if err != nil {\n        panic(err)\n    }\n\t\n    // We are only interested in the contents.\n    // Assume that files start with \"// Copyright (c) 2023\".\n    // Search for the longest match for that.\n    // This may save a few bytes.\n    dict := s2.MakeDict(insp.Content(), []byte(\"// Copyright (c) 2023\"))\n\n    // b := dict.Bytes() will provide a dictionary that can be saved\n    // and reloaded with s2.NewDict(b).\n\n    // We can now encode using this dictionary\n    encodedWithDict := dict.Encode(nil, payload)\n\n    // To decode content:\n    decoded, err := dict.Decode(nil, encodedWithDict)\n```\n\n----------------------------------------\n\nTITLE: Disabling Zone-Aware Replication in Helm Values\nDESCRIPTION: YAML configuration to disable zone-aware replication for ingester, store-gateway, and rollout operator components when upgrading to Mimir Helm chart 4.0.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: false\nstore_gateway:\n  zoneAwareReplication:\n    enabled: false\nrollout_operator:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Basic Tree Structure Example in Go\nDESCRIPTION: Example demonstrates how to create a tree structure with branches and nodes. It shows creating a root, adding branches with subnodes, and creating nested branch hierarchies.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/xlab/treeprint/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // to add a custom root name use `treeprint.NewWithRoot()` instead\n    tree := treeprint.New()\n\n    // create a new branch in the root\n    one := tree.AddBranch(\"one\")\n\n    // add some nodes\n    one.AddNode(\"subnode1\").AddNode(\"subnode2\")\n\n    // create a new sub-branch\n    one.AddBranch(\"two\").\n        AddNode(\"subnode1\").AddNode(\"subnode2\"). // add some nodes\n        AddBranch(\"three\"). // add a new sub-branch\n        AddNode(\"subnode1\").AddNode(\"subnode2\") // add some nodes too\n\n    // add one more node that should surround the inner branch\n    one.AddNode(\"subnode3\")\n\n    // add a new node to the root\n    tree.AddNode(\"outernode\")\n\n    fmt.Println(tree.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting a Terminated Grafana Mimir Instance\nDESCRIPTION: This command restarts the Grafana Mimir instance that was previously terminated, resolving the alert and recovering from the outage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/play-with-grafana-mimir/index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose start mimir-3\n```\n\n----------------------------------------\n\nTITLE: Converting Map to Plain Map in Go\nDESCRIPTION: Shows how to convert a concurrent Map/MapOf to a standard Go map using utility functions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nm := xsync.NewMapOf[int, int]()\nm.Store(42, 42)\npm := xsync.ToPlainMapOf(m)\n```\n\n----------------------------------------\n\nTITLE: Error Message due to Missing Processor (Text)\nDESCRIPTION: This is the error message that occurs when configuration B (with null processors) overwrites configuration A, causing the pipeline to reference a non-existent 'nop' processor.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"Error: invalid configuration: service::pipelines::traces: references processor \\\"nop\\\" which is not configured\n2024/06/10 14:37:14 collector server run finished with error: invalid configuration: service::pipelines::traces: references processor \\\"nop\\\" which is not configured\"\n```\n\n----------------------------------------\n\nTITLE: Defining Stderr Variable in Go\nDESCRIPTION: Definition of Stderr as an io.Writer for standard error output of executed commands.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar Stderr io.Writer = os.Stderr\n```\n\n----------------------------------------\n\nTITLE: Running ListBlocks with Azure Blob Storage\nDESCRIPTION: Command example for using listblocks with Azure Blob Storage. Requires user, container name, account name, and account key parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/listblocks/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./listblocks \\\n  --user <user> \\\n  --backend azure \\\n  --azure.container-name <container name> \\\n  --azure.account-name <account name> \\\n  --azure.account-key <account key> \\\n```\n\n----------------------------------------\n\nTITLE: Resource Constructor Update\nDESCRIPTION: Change in resource.New() method signature to support builtin attributes and functional options\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// Old:\nresource.New()\n\n// New:\nresource.NewWithAttributes() // Original method renamed\nresource.New() // New signature with builtin attributes and functional options\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Mimir Components\nDESCRIPTION: This snippet contains a list of configuration settings for various Grafana Mimir components. It includes settings for server, authentication, storage backends, and specific components like ruler, alertmanager, and compactor. The configuration uses key-value pairs to set ports, storage types, and file paths.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/gem/common-flags-old.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-server.http-listen-port=80\n-auth.type=trust\n-blocks-storage.backend=s3\n-ruler-storage.backend=s3\n-alertmanager-storage.backend=s3\n-graphite.querier.schemas.backend=s3\n-querier.active-query-tracker-dir=./active-query-tracker\n-alertmanager.storage.path=data/\n-blocks-storage.filesystem.dir=\n-compactor.data-dir=./data\n-ruler.rule-path=/rules\n-ruler-storage.filesystem.dir=\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruler API and Tenant Settings in YAML\nDESCRIPTION: Configures the Ruler API and tenant-specific settings. This includes enabling the API and specifying which tenants the Ruler can evaluate rules for.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_73\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable the ruler config API.\n# CLI flag: -ruler.enable-api\n[enable_api: <boolean> | default = true]\n\n# (advanced) Comma separated list of tenants whose rules this ruler can\n# evaluate. If specified, only these tenants will be handled by ruler, otherwise\n# this ruler can process rules from all tenants. Subject to sharding.\n# CLI flag: -ruler.enabled-tenants\n[enabled_tenants: <string> | default = \"\"]\n\n# (advanced) Comma separated list of tenants whose rules this ruler cannot\n# evaluate. If specified, a ruler that would normally pick the specified\n# tenant(s) for processing will ignore them instead. Subject to sharding.\n# CLI flag: -ruler.disabled-tenants\n[disabled_tenants: <string> | default = \"\"]\n```\n\n----------------------------------------\n\nTITLE: Fix: Skip Validation on Transports\nDESCRIPTION: This commit introduces an internal option to bypass validation on transports within the auth module. This is a bug fix aimed at addressing issues related to transport validation, potentially improving compatibility or resolving specific errors. The change is referenced by issue #9823.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n9e20ef89f6287d6bd03b8697d5898dc43b4a77cf\n```\n\n----------------------------------------\n\nTITLE: Basic Go Error Handling Pattern\nDESCRIPTION: Demonstrates the traditional error handling idiom in Go, showing the basic nil check pattern.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Examining TSDB Chunks with Samples\nDESCRIPTION: Example showing detailed chunk analysis including sample data using tsdb-chunks tool with -samples option.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/tsdb-tools.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntsdb-chunks -samples 01FTT67BBYH23T8870BBF77YZX/chunks/000001 | head -n 20\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Command-Line Application in Go with Subcommands\nDESCRIPTION: This snippet illustrates the creation of a more complex command-line application using Kingpin, including global flags, subcommands, and flags specific to each subcommand. It shows how to register users and post messages in a chat application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"strings\"\n  \"github.com/alecthomas/kingpin/v2\"\n)\n\nvar (\n  app      = kingpin.New(\"chat\", \"A command-line chat application.\")\n  debug    = app.Flag(\"debug\", \"Enable debug mode.\").Bool()\n  serverIP = app.Flag(\"server\", \"Server address.\").Default(\"127.0.0.1\").IP()\n\n  register     = app.Command(\"register\", \"Register a new user.\")\n  registerNick = register.Arg(\"nick\", \"Nickname for user.\").Required().String()\n  registerName = register.Arg(\"name\", \"Name of user.\").Required().String()\n\n  post        = app.Command(\"post\", \"Post a message to a channel.\")\n  postImage   = post.Flag(\"image\", \"Image to post.\").File()\n  postChannel = post.Arg(\"channel\", \"Channel to post to.\").Required().String()\n  postText    = post.Arg(\"text\", \"Text to post.\").Strings()\n)\n\nfunc main() {\n  switch kingpin.MustParse(app.Parse(os.Args[1:])) {\n  // Register user\n  case register.FullCommand():\n    println(*registerNick)\n\n  // Post message\n  case post.FullCommand():\n    if *postImage != nil {\n    }\n    text := strings.Join(*postText, \" \")\n    println(\"Post:\", text)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Function for Multi-Tenant Limits in Go\nDESCRIPTION: Example of adding a helper function to handle multi-tenant limits, returning true only if the limit function is true for all given tenants.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc AllTrueBooleansPerTenant(tenantIDs []string, f func(string) bool) bool {\n    for _, tenantID := range tenantIDs {\n        if !f(tenantID) {\n            return false\n        }\n    }\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Alertmanager Configuration via HTTP API\nDESCRIPTION: Enables the removing of the Alertmanager configuration for a tenant using an HTTP DELETE request. This endpoint requires authentication, does not accept query parameters, and returns 200 if successful. Configurability is via the `-alertmanager.enable-api` flag.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE /api/v1/alerts\n```\n\n----------------------------------------\n\nTITLE: Binding CLI Flag to New Limits Config in Go\nDESCRIPTION: Example of binding a CLI flag to the new config option in the Limits struct's RegisterFlags method.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nf.BoolVar(&l.ResultsCacheForUnalignedQueryEnabled, \"query-frontend.cache-unaligned-requests\", false, \"Cache requests that are not step-aligned.\")\n```\n\n----------------------------------------\n\nTITLE: Fix: Port STS Expires Fix\nDESCRIPTION: This commit ports a fix for STS (Security Token Service) expiration issues within the `auth` package. This ensures that STS tokens are handled correctly with respect to their expiration, preventing authentication failures or security vulnerabilities. The commit is linked to issue #9618.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n7bec97b2f51ed3ac4f9b88bf100d301da3f5d1bd\n```\n\n----------------------------------------\n\nTITLE: Error Type Checking Example\nDESCRIPTION: Shows how to check for specific error types using Go's errors.As() function.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar callErr CallErr\nif errors.As(err, &callErr) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Language from Content in Go\nDESCRIPTION: The snippet demonstrates content-based language detection in Go using the Chroma library. It analyses the input code content to determine the language, returning `nil` if detection fails.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlexer := lexers.Analyse(\"package main\\n\\nfunc main()\\n{\\n}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Component Ring Instance IDs\nDESCRIPTION: Configuration parameters that assign unique instance IDs to different Mimir components for hash ring membership. Each component (admin-api, alertmanager, compactor, distributor, ingester, ruler, and store-gateway) requires a unique identifier for proper ring operation and service discovery.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/gem/ring-instance-id-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-admin-api.leader-election.ring.instance-id=123abc-7\n-alertmanager.sharding-ring.instance-id=123abc-2\n-compactor.ring.instance-id=123abc-4\n-distributor.ring.instance-id=123abc-1\n-ingester.ring.instance-id=123abc-6\n-ruler.ring.instance-id=123abc-3\n-store-gateway.sharding-ring.instance-id=123abc-5\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Authentication for Prometheus Remote Write in YAML\nDESCRIPTION: This snippet shows how to configure bearer authentication with a token stored in a file for Prometheus remote write. It specifies the authorization type as Bearer and provides the path to the bearer token file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/secure/authentication-and-authorization.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthorization:\n  type: Bearer\n  credentials_file: <PATH TO BEARER TOKEN FILE>\n```\n\n----------------------------------------\n\nTITLE: Custom Environment Variable Processing with Koanf in Go\nDESCRIPTION: This snippet shows how to use env.ProviderWithValue to process environment variables, allowing for custom key-value transformations such as converting space-separated values into slices.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n\tk.Load(env.ProviderWithValue(\"MYVAR_\", \".\", func(s string, v string) (string, interface{}) {\n\t\t// Strip out the MYVAR_ prefix and lowercase and get the key while also replacing\n\t\t// the _ character with . in the key (koanf delimeter).\n\t\tkey := strings.Replace(strings.ToLower(strings.TrimPrefix(s, \"MYVAR_\")), \"_\", \".\", -1)\n\n\t\t// If there is a space in the value, split the value into a slice by the space.\n\t\tif strings.Contains(v, \" \") {\n\t\t\treturn key, strings.Split(v, \" \")\n\t\t}\n\n\t\t// Otherwise, return the plain string.\n\t\treturn key, v\n\t}), nil)\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal Types using go-isatty in Go\nDESCRIPTION: This code snippet demonstrates how to use the go-isatty library to detect if the standard output is connected to a terminal, a Cygwin/MSYS2 terminal, or neither. It uses the IsTerminal and IsCygwinTerminal functions from the library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Chroma Lexer Test Data in Go\nDESCRIPTION: This command regenerates all test data for Chroma lexers by setting the RECORD environment variable to true before running the test suite. This is used when adding new test cases or updating existing ones.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/lexers/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nRECORD=true go test ./lexers\n```\n\n----------------------------------------\n\nTITLE: Exporting Create Request and Handle Response Methods in Go Clients\nDESCRIPTION: Exports various createRequest and HandleResponse methods in container and page blob client Go files.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_container_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/listBlobHierarchySegmentCreateRequest/g, function(_, s) { return `ListBlobHierarchySegmentCreateRequest` }).\n      replace(/listBlobHierarchySegmentHandleResponse/g, function(_, s) { return `ListBlobHierarchySegmentHandleResponse` });\n\n- from: zz_pageblob_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/getPageRanges(Diff)?CreateRequest/g, function(_, s) { if (s === undefined) { s = '' }; return `GetPageRanges${s}CreateRequest` }).\n      replace(/getPageRanges(Diff)?HandleResponse/g, function(_, s) { if (s === undefined) { s = '' }; return `GetPageRanges${s}HandleResponse` });\n```\n\n----------------------------------------\n\nTITLE: Configuring Query-Scheduler Ring-Based Service Discovery in YAML\nDESCRIPTION: YAML configuration for setting up the query-scheduler with ring-based service discovery. This includes enabling ring mode, configuring the ring store backend, and setting up memberlist or other backend-specific options.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/query-scheduler/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-query-scheduler.service-discovery-mode=ring\n\n# Configure the query-scheduler ring backend (e.g. \"memberlist\").\n-query-scheduler.ring.store=<backend>\n\n# If the configured <backend> is \"memberlist\", then ensure memberlist is configured for the query-scheduler.\n-memberlist.join=<same as other Mimir components>\n\n# If the configured <backend> is \"consul\" or \"etcd\", then set their backend configuration\n# for the query-scheduler ring:\n# - Consul: -query-scheduler.ring.consul.*\n# - Ecd:    -query-scheduler.ring.etcd.*\n```\n\n----------------------------------------\n\nTITLE: Using Kingpin for Error Handling and Usage Documentation\nDESCRIPTION: This snippet covers the error handling capabilities of the Kingpin library, detailing how to provide consistent error messages and usage information to the user in command-line applications.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nFunction | Purpose\n---------|--------------\n`Errorf(format, args)` | Display a printf formatted error to the user.\n`Fatalf(format, args)` | As with Errorf, but also call the termination handler.\n`FatalUsage(format, args)` | As with Fatalf, but also print contextual usage information.\n`FatalUsageContext(context, format, args)` | As with Fatalf, but also print contextual usage information from a `ParseContext`.\n`FatalIfError(err, format, args)` | Conditionally print an error prefixed with format+args, then call the termination handler\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Prefix Match in Radix Tree in Go\nDESCRIPTION: This snippet shows how to find the longest prefix match for a given key using the `LongestPrefix()` method on the root node of the tree. The method returns the longest prefix key, the value associated with it, and a boolean indicating if a match was found.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-immutable-radix/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Find the longest prefix match\nm, _, _ := r.Root().LongestPrefix([]byte(\"foozip\"))\nif string(m) != \"foo\" {\n    panic(\"should be foo\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Styles and Formatter in Go\nDESCRIPTION: This Go snippet is about selecting a style and formatter using Chroma. It sets default styles and formatters for HTML if the specified preferences are not available.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nstyle := styles.Get(\"swapoff\")\nif style == nil {\n  style = styles.Fallback\n}\nformatter := formatters.Get(\"html\")\nif formatter == nil {\n  formatter = formatters.Fallback\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Joining a Memberlist Cluster in Go\nDESCRIPTION: Demonstrates basic usage of memberlist for creating a cluster configuration, joining an existing cluster, and retrieving cluster members\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/memberlist/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/* Create the initial memberlist from a safe configuration.\n   Please reference the godoc for other default config types.\n   http://godoc.org/github.com/hashicorp/memberlist#Config\n*/\nlist, err := memberlist.Create(memberlist.DefaultLocalConfig())\nif err != nil {\n\tpanic(\"Failed to create memberlist: \" + err.Error())\n}\n\n// Join an existing cluster by specifying at least one known member.\nn, err := list.Join([]string{\"1.2.3.4\"})\nif err != nil {\n\tpanic(\"Failed to join cluster: \" + err.Error())\n}\n\n// Ask for members of the cluster\nfor _, member := range list.Members() {\n\tfmt.Printf(\"Member: %s %s\\n\", member.Name, member.Addr)\n}\n\n// Continue doing whatever you need, memberlist will maintain membership\n// information in the background. Delegates can be used for receiving\n// events when members join or leave.\n```\n\n----------------------------------------\n\nTITLE: Using Sprig Template Functions\nDESCRIPTION: Example demonstrating how to chain multiple Sprig template functions together in a Go template. Shows string manipulation using upper and repeat functions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ \"hello!\" | upper | repeat 5 }}\n```\n\n----------------------------------------\n\nTITLE: Setting Distributor Remote Timeout in Grafana Mimir Configuration\nDESCRIPTION: This configuration line sets the remote timeout for the distributor component in Grafana Mimir to 15 seconds. The distributor is responsible for handling incoming metric writes and distributing them to ingesters.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/flags-precedence-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n-distributor.remote-timeout=15s\n```\n\n----------------------------------------\n\nTITLE: JSON Input Format for Undelete-Blocks Tool\nDESCRIPTION: The JSON format for specifying which blocks to undelete. It contains a map of tenants to a list of block IDs. This format is used when the --blocks-from flag is set to 'json'.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/undelete-blocks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tenant1\": [\"01GDY90HMVFPSJHXZRQH8KRAME\", \"01GE0SV77NX8ASC7JN0ZQMN0WM\"],\n  \"tenant2\": [\"01GZDNKM6SQ9S7W5YQBDF0DK49\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using hclog.Fmt() for Formatted Logging in Go\nDESCRIPTION: This snippet demonstrates how to use `hclog.Fmt()` for formatted logging output. It allows formatting log messages using `Printf`-style formatting, enhancing the readability and information content of log entries.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n\"totalBandwidth := 200\nappLogger.Info(\\\"total bandwidth exceeded\\\", \\\"bandwidth\\\", hclog.Fmt(\\\"%d GB/s\\\", totalBandwidth))\"\n```\n\n----------------------------------------\n\nTITLE: Fixing GeoReplication Enum in Swagger\nDESCRIPTION: Modifies the GeoReplication Status enum in the Swagger document to use BlobGeoReplicationStatus.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.GeoReplication.properties.Status[\"x-ms-enum\"];\n    $.GeoReplication.properties.Status[\"x-ms-enum\"] = {\n        \"name\": \"BlobGeoReplicationStatus\",\n        \"modelAsString\": false\n    };\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Exemplar Limits in Grafana Mimir YAML\nDESCRIPTION: This snippet shows how to set the maximum number of global exemplars per user in the Grafana Mimir configuration file. It sets a limit of 100,000 exemplars as a starting point.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/use-exemplars/store-exemplars.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  max_global_exemplars_per_user: 100000\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storage Settings in Grafana Mimir\nDESCRIPTION: Example configuration showing how to set up common storage configurations in Grafana Mimir using Amazon S3. The configuration demonstrates setting common S3 storage parameters and overriding specific values for blocks storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/about-configurations.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncommon:\n  storage:\n    backend: s3\n    s3:\n      region: us-east\n      bucket_name: mimir\n\nblocks_storage:\n  s3:\n    bucket_name: mimir-blocks\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Write Endpoints\nDESCRIPTION: Template section that generates remote write endpoint URLs for both ingress and in-cluster access, with conditional handling for TLS and host configurations\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: helm\nCODE:\n```\n{{ with $gateway.ingress -}}\n{{- if .enabled -}}\nFrom outside the cluster via ingress:\n{{ range .hosts }}  http{{ if .tls }}s{{ end }}://{{ .host }}/api/v1/push\n{{ end }}\n{{- else -}}\nIngress is not enabled, see the {{ if eq (include \"mimir.gateway.isEnabled\" $) \"true\" }}gateway{{ else }}nginx{{ end }}.ingress values.\n{{- end -}}\n{{- end }}\nFrom inside the cluster:\n  {{ include \"mimir.remoteWriteUrl.inCluster\" $ }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway with Ingress Settings\nDESCRIPTION: YAML configuration that preserves the existing Ingress resource name and settings when migrating from NGINX to Gateway. This ensures minimal disruption to external service access.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngateway:\n  ingress:\n    enabled: true\n    nameOverride: mimir-nginx\n    hosts:\n      - host: mimir.example.com\n        paths:\n          - path: /\n            pathType: Prefix\n    tls:\n      - secretName: mimir-gateway-tls\n        hosts:\n          - mimir.example.com\n  enabledNonEnterprise: true\n  replicas: 10\n```\n\n----------------------------------------\n\nTITLE: Memcached Configuration v2.1\nDESCRIPTION: This YAML snippet shows a memcached configuration example in version 2.1. It demonstrates configuring replica count, arguments (memory allocation, item size, user), and image repository/tag.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-helm-chart-2.x-to-3.0.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"memcached:\\n  replicaCount: 12\\n  arguments:\\n    - -m 2048\\n    - -I 128m\\n    - -u 12345\\n  image:\\n    repository: memcached\\n    tag: 1.6.9-alpine\\n\\nmemcached-queries:\\n  replicaCount: 3\\n  architecture: modern\\n  image:\\n    repository: memcached\\n    tag: 1.6.9-alpine\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Resolver Watch Configuration Flow in Terminal ASCII\nDESCRIPTION: This terminal ASCII diagram shows how the Resolver watches for configuration changes. It depicts the interaction between Resolver and Provider during the watch operation, including how the onChange function is triggered when configuration changes occur.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n         Resolver              Provider\n            │                     │\n   Watch    │                     │\n───────────►│                     │\n            │                     │\n            .                     .\n            .                     .\n            .                     .\n            │      onChange       │\n            │◄────────────────────┤\n◄───────────┤                     │\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logrus Formatter in Go\nDESCRIPTION: This code shows how to create a custom formatter for Logrus by implementing the Formatter interface. The example creates a MyJSONFormatter that serializes log entry data to JSON.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Memcached Eviction Rate\nDESCRIPTION: This PromQL query calculates the rate of evictions per Memcached instance over the last 5 minutes. It's used to determine if Memcached needs to be scaled for various caches in Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/run-production-environment/planning-capacity.md#2025-04-17_snippet_3\n\nLANGUAGE: promql\nCODE:\n```\nsum by(instance) (rate(memcached_items_evicted_total{}[5m]))\n```\n\n----------------------------------------\n\nTITLE: Querier: Query Timeout Configuration\nDESCRIPTION: Sets the timeout duration for a query. This option must be configured on both the query-frontend and querier, especially when query sharding is enabled. It also applies to queries evaluated by the ruler.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_36\n\nLANGUAGE: text\nCODE:\n```\n\"# The timeout for a query. This config option should be set on query-frontend\\n# too when query sharding is enabled. This also applies to queries evaluated by\\n# the ruler (internally or remotely).\\n# CLI flag: -querier.timeout\\n[timeout: <duration> | default = 2m]\"\n```\n\n----------------------------------------\n\nTITLE: Running mark-blocks with Amazon S3\nDESCRIPTION: Example command for executing the mark-blocks utility with Amazon S3 backend. This command specifies tenant, blocks, mark type, and S3-specific parameters like bucket name, credentials, and endpoint.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/mark-blocks/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./mark-blocks\\\n  --tenant <tenant> \\\n  --blocks <blocks> \\\n  --mark-type <mark-type> \\\n  --backend s3 \\\n  --s3.bucket-name <bucket name> \\\n  --s3.access-key-id <access key id> \\\n  --s3.secret-access-key <secret access key> \\\n  --s3.endpoint <endpoint> \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Counter vs Atomic Int64 Benchmark Results\nDESCRIPTION: Performance comparison between Counter and atomic int64 operations across different CPU counts\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nname                                            time/op\nCounter                                         27.3ns ± 1%\nCounter-2                                       27.2ns ±11%\nCounter-4                                       15.3ns ± 8%\nCounter-8                                       7.43ns ± 7%\nCounter-16                                      3.70ns ±10%\nCounter-32                                      1.77ns ± 3%\nCounter-64                                      0.96ns ±10%\nAtomicInt64                                     7.60ns ± 0%\nAtomicInt64-2                                   12.6ns ±13%\nAtomicInt64-4                                   13.5ns ±14%\nAtomicInt64-8                                   12.7ns ± 9%\nAtomicInt64-16                                  12.8ns ± 8%\nAtomicInt64-32                                  13.0ns ± 6%\nAtomicInt64-64                                  12.9ns ± 7%\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication Flow with ChainedTokenCredential in Go\nDESCRIPTION: Example showing how to create a credential chain that attempts authentication using managed identity first, then falls back to Azure CLI authentication when managed identity is unavailable.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmanaged, err := azidentity.NewManagedIdentityCredential(nil)\nif err != nil {\n  // handle error\n}\nazCLI, err := azidentity.NewAzureCLICredential(nil)\nif err != nil {\n  // handle error\n}\nchain, err := azidentity.NewChainedTokenCredential([]azcore.TokenCredential{managed, azCLI}, nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", chain, nil)\n```\n\n----------------------------------------\n\nTITLE: Client certificate authentication with azidentity in Go\nDESCRIPTION: This snippet shows client certificate authentication using azidentity, including reading a certificate file, parsing it, and creating a ClientCertificateCredential.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"os\"\n\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncertData, err := os.ReadFile(\"./example.pfx\")\nhandle(err)\n\ncerts, key, err := azidentity.ParseCertificates(certData, nil)\nhandle(err)\n\ncred, err = azidentity.NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Bitmap Field Lookup Process in Go\nDESCRIPTION: This code snippet shows how the bitmap is used to efficiently check for the existence of a field during JSON decoding. It uses bitwise operations for fast lookup.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nvar curBit int8 = math.MaxInt8 // 11111111\n\nc := char(buf, cursor)\nbit := bitmap[keyIdx][c]\ncurBit &= bit\nif curBit == 0 {\n    // not found field\n}\n```\n\n----------------------------------------\n\nTITLE: Doubling Series Limits for Mimir Configuration in YAML\nDESCRIPTION: This snippet shows how to double the max_global_series_per_user limit in the Mimir configuration to accommodate the migration process. It's necessary to prevent write refusals due to temporary limit violations during the transition.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    limits:\n      max_global_series_per_user: 300000 # <-- or your value doubled\n```\n\n----------------------------------------\n\nTITLE: Basic CORS Server Implementation in Go\nDESCRIPTION: Basic example showing how to set up a simple HTTP server with CORS middleware. The server responds with JSON content and allows cross-origin requests with default CORS settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/rs/cors/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n\n    \"github.com/rs/cors\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        w.Write([]byte(\"{\\\"hello\\\": \\\"world\\\"}\"))\n    })\n\n    // cors.Default() setup the middleware with default options being\n    // all origins accepted with simple methods (GET, POST). See\n    // documentation below for more options.\n    handler := cors.Default().Handler(mux)\n    http.ListenAndServe(\":8080\", handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Client via Go Get\nDESCRIPTION: Commands to install the latest version of Jaeger client from master branch using go get and resolving dependencies.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/uber/jaeger-client-go/\ncd $GOPATH/src/github.com/uber/jaeger-client-go/\ngit submodule update --init --recursive\nmake install\n```\n\n----------------------------------------\n\nTITLE: Configuring Geographical Zone-Aware Replication for Store-Gateways\nDESCRIPTION: YAML configuration for setting up geographical zone-aware replication with specific node selectors for different availability zones in store-gateways.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nstore_gateway:\n  zoneAwareReplication:\n    enabled: false # Do not turn on zone-awareness without migration because of potential query errors\n    topologyKey: \"kubernetes.io/hostname\" # Triggers creating anti-affinity rules\n    zones:\n      - name: zone-a\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-a\n      - name: zone-b\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-b\n      - name: zone-c\n        nodeSelector:\n          topology.kubernetes.io/zone: us-central1-c\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Map in Go\nDESCRIPTION: Demonstrates usage of concurrent.Map which provides a thread-safe map implementation compatible with Go versions below 1.9. This is a backport of sync.Map functionality.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks Command\nDESCRIPTION: Command to execute benchmarks with 30 second duration per test\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench XXX -run XXX -benchtime 30s\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers in SI Notation - Go\nDESCRIPTION: This snippet uses the `humanize.SI` function to format numerical values in SI notation, which is useful for scientific and engineering contexts where precision and unit measurement clarity is essential.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhumanize.SI(0.00000000223, \"M\") // 2.23 nM\n```\n\n----------------------------------------\n\nTITLE: Input Kubernetes Resources for Mimir Configuration\nDESCRIPTION: Example input YAML showing a Deployment for a Mimir querier and its associated ConfigMap containing configuration parameters.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/compare-helm-with-jsonnet/plugins/resolve-config/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: querier\n  namespace: default\nspec:\n  template:\n    spec:\n      containers:\n        - name: mimir\n          image: grafana/mimir:latest\n          args:\n            - -target=querier\n            - -config.file=/etc/mimir/mimir.yaml\n          volumeMounts:\n            - name: mimir-config\n              mountPath: /etc/mimir\n      volumes:\n        - name: mimir-config\n          configMap:\n            name: config\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config\n  namespace: default\ndata:\n  mimir.yaml: |\n    memberlist:\n      bind_port: 1234\n```\n\n----------------------------------------\n\nTITLE: Memcached Configuration v3.0\nDESCRIPTION: This YAML snippet shows the equivalent memcached configuration in version 3.0. It presents how to configure chunks-cache and index-cache with properties like allocatedMemory, maxItemMemory, port and replicas.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-helm-chart-2.x-to-3.0.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"memcached:\\n  image:\\n    repository: memcached\\n    tag: 1.6.9-alpine\\n\\nchunks-cache:\\n  allocatedMemory: 2048\\n  maxItemMemory: 128\\n  port: 12345\\n  replicas: 12\\n\\nindex-cache:\\n  replicas: 3\"\n```\n\n----------------------------------------\n\nTITLE: Running Undelete-Blocks with Google Cloud Storage\nDESCRIPTION: Example command for using the undelete-blocks tool with Google Cloud Storage. It demonstrates how to specify the GCS backend, bucket name, and filtering tenants using the listing discovery method.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/undelete-blocks/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./undelete-blocks \\\n  --backend gcs \\\n  --gcs.bucket-name <bucket name> \\\n  --blocks-from listing \\\n  --include-tenants tenant1,tenant2 \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Updating Dial() to DialContext() in Go MQTT Client\nDESCRIPTION: This snippet shows how to update the Dial() function call to the new DialContext() function, which now requires a context parameter. It also demonstrates error handling for both the dial and connect operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/at-wat/mqtt-go/MIGRATION.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n-cli, err := mqtt.Dial(url)\n+cli, err := mqtt.DialContext(ctx, url)\n if err != nil {\n   // error handling\n }\n if _, err := cli.Connect(ctx, ...); err != nil {\n   // error handling\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Replication Setting for Legacy Deployments in YAML\nDESCRIPTION: Configuration to disable zone-aware replication when upgrading from a version prior to 4.0.0. This prevents data loss by maintaining the previous replication strategy until migration can be performed.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: false\nstore_gateway:\n  zoneAwareReplication:\n    enabled: false\nrollout_operator:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Blocking in YAML for Grafana Mimir\nDESCRIPTION: This YAML snippet demonstrates how to configure query blocking for Grafana Mimir. It shows how to block specific queries or regex patterns for a tenant, allowing operators to prevent harmful queries from being processed.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/proposals/query-blocking.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  \"tenant-id\":\n    blocked_queries:\n      # block this query exactly\n      - pattern: 'sum(rate({env=\"prod\"}[1m]))'\n\n      # block any query matching this regex pattern\n      - pattern: '=\"\\.\\*\"' # all queries with a label value `.*`\n        regex: true\n```\n\n----------------------------------------\n\nTITLE: OmitEmpty Option Behavior (Go)\nDESCRIPTION: This example highlights the difference in how the `omitempty` option is handled when marshaling Go structs. In v1, it was based on empty Go values, whereas in v2, it's based on empty JSON values. This snippet is linked to the `TestOmitEmptyOption` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n\"[OmitEmptyOption](/diff_test.go#:~:text=TestOmitEmptyOption)\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Feature Gate in Go\nDESCRIPTION: Example of how to register a feature gate with the global registry. This shows setting up a stable feature gate with a version range, description, and reference URL.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/featuregate/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar myFeatureGate = featuregate.GlobalRegistry().MustRegister(\n\t\"namespaced.uniqueIdentifier\",\n\tfeaturegate.Stable,\n    featuregate.WithRegisterFromVersion(\"v0.65.0\")\n\tfeaturegate.WithRegisterDescription(\"A brief description of what the gate controls\"),\n\tfeaturegate.WithRegisterReferenceURL(\"https://github.com/open-telemetry/opentelemetry-collector/issues/6167\"),\n\tfeaturegate.WithRegisterToVersion(\"v0.70.0\"))\n```\n\n----------------------------------------\n\nTITLE: Disabling Anti-affinity Rules in Mimir Jsonnet Configuration\nDESCRIPTION: Configuration to disable anti-affinity rules for Mimir components, allowing multiple replicas to run on the same Kubernetes node. This is useful for single-node cluster deployments.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-low-resources.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\nlocal mimir = import 'mimir/mimir.libsonnet';\n\nmimir {\n  _config+:: {\n    ingester_allow_multiple_replicas_on_same_node: true,\n    store_gateway_allow_multiple_replicas_on_same_node: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using bufio.Writer with gzip StatelessCompression\nDESCRIPTION: Example of implementing stateless compression with gzip using a bufio.Writer to control write sizes and limit memory usage. This approach is useful when running many concurrent compressors with limited activity.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// replace 'ioutil.Discard' with your output.\ngzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\nif err != nil {\n\treturn err\n}\ndefer gzw.Close()\n\nw := bufio.NewWriterSize(gzw, 4096)\ndefer w.Flush()\n\n// Write to 'w'\n```\n\n----------------------------------------\n\nTITLE: Processing Blocks by Cluster for Parallel Relabeling\nDESCRIPTION: Commands to process blocks from specific Prometheus clusters in parallel to speed up the relabeling process. This approach filters and processes blocks by cluster name for more efficient migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nthanos tools bucket inspect \\\n    --objstore.config-file bucket.yaml \\\n    --output=tsv \\\n    | grep <PROMETHEUS-CLUSTER-NAME> \\\n    | awk '{print $1}' > prod-blocks.tsv\n```\n\n----------------------------------------\n\nTITLE: Excluding Non Zone-Aware Ingesters from Write Path in Mimir\nDESCRIPTION: This YAML configuration excludes non zone-aware ingesters from the write path in Mimir. It's part of the process to fully transition to zone-aware operations by isolating old ingester instances.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n      writePath: true\n      readPath: true\n      excludeDefaultZone: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Non Zone-Aware Ingesters in Mimir Configuration\nDESCRIPTION: This YAML configuration scales down non zone-aware ingesters to zero in Mimir. It's the final step in removing old ingester instances as part of the migration to zone-aware replication.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n      writePath: true\n      readPath: true\n      excludeDefaultZone: true\n      scaleDownDefaultZone: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart for GEM Enterprise Authentication\nDESCRIPTION: This YAML snippet shows how to configure the Helm chart values for sending metamonitoring metrics back to GEM using enterprise authentication. It specifies the authentication details for the metamonitoring tenant.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/monitor-system-health.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmetaMonitoring:\n  serviceMonitor:\n    enabled: true\n  grafanaAgent:\n    enabled: true\n    installOperator: true\n\n    metrics:\n      remote:\n        auth:\n          username: metamonitoring\n          passwordSecretName: gem-tokens\n          passwordSecretKey: metamonitoring\n```\n\n----------------------------------------\n\nTITLE: Improving flate Compression Speed in Go\nDESCRIPTION: This snippet refers to improvements in the flate compression algorithm, particularly for the fastest compression levels. It's part of the changes in version 1.14.3.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nflate: Improve fastest levels compression speed ~10% more throughput. [#482](https://github.com/klauspost/compress/pull/482) [#489](https://github.com/klauspost/compress/pull/489) [#490](https://github.com/klauspost/compress/pull/490) [#491](https://github.com/klauspost/compress/pull/491) [#494](https://github.com/klauspost/compress/pull/494)  [#478](https://github.com/klauspost/compress/pull/478)\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Ballast Size in Grafana Mimir\nDESCRIPTION: Configures the memory ballast size to 1GB (1073741824 bytes) for Grafana Mimir. Memory ballast helps to reduce GC overhead by allocating a large chunk of memory that is never touched, effectively increasing the threshold before garbage collection triggers.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/not-in-yaml-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-mem-ballast-size-bytes=1073741824\n```\n\n----------------------------------------\n\nTITLE: Pointer Receiver Method Calls (Go)\nDESCRIPTION: This example addresses the consistency of calling `MarshalJSON` and `UnmarshalJSON` methods declared on pointer receivers. v2 consistently calls these methods, unlike v1 which was inconsistent. This snippet is linked to the `TestPointerReceiver` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n\"[PointerReceiver](/diff_test.go#:~:text=TestPointerReceiver)\"\n```\n\n----------------------------------------\n\nTITLE: Doubling Per-Tenant Limits in Mimir Runtime Configuration\nDESCRIPTION: This YAML snippet demonstrates how to double per-tenant limits for series in the Mimir runtime configuration. It includes adjustments for max_series, max_global_series_per_metric, and max_global_series_per_user.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nruntimeConfig:\n  ingester_limits:\n    max_series: X # <-- double it\n  overrides:\n    tenantA:\n      max_global_series_per_metric: Y # <-- double it\n      max_global_series_per_user: Z # <-- double it\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta-Monitoring with Grafana Agent (YAML)\nDESCRIPTION: Example configuration for setting up meta-monitoring using the Grafana Agent Kubernetes operator. This allows scraping metrics and collecting logs from Mimir pods to ship to a remote endpoint.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmetaMonitoring:\n  serviceMonitor:\n    # Configuration for ServiceMonitor object\n\n  grafanaAgent:\n    # Configuration for Grafana Agent\n\n  # Other meta-monitoring settings\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in Main Function (Go)\nDESCRIPTION: Demonstrates how to create a root logger using a chosen implementation in the main function of a Go application. The logger is then passed to other parts of the application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // ... other setup code ...\n\n    // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n    // which takes some initial parameters and returns a logr.Logger.\n    logger := logimpl.New(param1, param2)\n\n    // ... other setup code ...\n\n    app := createTheAppObject(logger)\n    app.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTracing Client Interceptor\nDESCRIPTION: Example showing how to set up a gRPC client connection with OpenTracing interceptors for both unary and streaming calls. Requires an OpenTracing Tracer instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/opentracing-contrib/go-grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// You must have some sort of OpenTracing Tracer instance on hand.\nvar tracer opentracing.Tracer = ...\n...\n\n// Set up a connection to the server peer.\nconn, err := grpc.Dial(\n    address,\n    ... // other options\n    grpc.WithUnaryInterceptor(\n        otgrpc.OpenTracingClientInterceptor(tracer)),\n    grpc.WithStreamInterceptor(\n        otgrpc.OpenTracingStreamClientInterceptor(tracer)))\n\n// All future RPC activity involving `conn` will be automatically traced.\n```\n\n----------------------------------------\n\nTITLE: Checking Mimir Pod Statuses\nDESCRIPTION: Retrieves the status of all pods in the 'mimir-test' namespace to verify the Mimir installation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n mimir-test get pods\n```\n\n----------------------------------------\n\nTITLE: Running the Pre-release Process for OpenTelemetry Go Modules\nDESCRIPTION: Command to execute the pre-release make target for a specific module set, which creates a branch with all the necessary version changes for release.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Creating GRPC Driver for OTLP Exporter in Go OpenTelemetry SDK\nDESCRIPTION: Added a function to create a ProtocolDriver that maintains a single gRPC connection to the collector.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nNewGRPCDriver\n```\n\n----------------------------------------\n\nTITLE: Defining Single Rule Group in YAML\nDESCRIPTION: YAML structure for defining a single rule group in Mimir. It includes the group name, optional interval, source tenants, and individual rules (both recording and alerting).\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nname: <string>\ninterval: <duration;optional>\nsource_tenants:\n  - <string>\nrules:\n  - record: <string>\n    expr: <string>\n  - alert: <string>\n    expr: <string>\n    for: <duration>\n    annotations:\n      <annotation_name>: <string>\n    labels:\n      <label_name>: <string>\n```\n\n----------------------------------------\n\nTITLE: Renaming zap.L and zap.S using gofmt\nDESCRIPTION: This snippet demonstrates how to use `gofmt` to rename instances of `zap.L` to `zap.L()` and `zap.S` to `zap.S()` within a Go project. This is necessary due to API changes in a specific zap release where the global loggers `L` and `S` are accessed as functions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"gofmt -r \\\"zap.L -> zap.L()\\\" -w .\\ngofmt -r \\\"zap.S -> zap.S()\\\" -w .\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Histograms Per Tenant in YAML\nDESCRIPTION: This YAML configuration demonstrates how to enable native histogram ingestion and set the maximum number of buckets for a specific tenant in Grafana Mimir. It sets 'native_histograms_ingestion_enabled' to true and 'max_native_histogram_buckets' to 160 for 'tenant1'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-native-histograms-ingestion.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  tenant1:\n    native_histograms_ingestion_enabled: true\n    max_native_histogram_buckets: 160\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Log Parsing Label Matchers\nDESCRIPTION: This experimental flag enables logging when parsing label matchers. It is intended to be used with UTF-8 strict mode to validate its functionality.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_104\n\nLANGUAGE: yaml\nCODE:\n```\n# (experimental) Enable logging when parsing label matchers. This flag is\n# intended to be used with -alertmanager.utf8-strict-mode-enabled to validate\n# UTF-8 strict mode is working as intended.\n# CLI flag: -alertmanager.log-parsing-label-matchers\n[log_parsing_label_matchers: <boolean> | default = false]\n\n```\n\n----------------------------------------\n\nTITLE: Feature: Add Impersonate Package\nDESCRIPTION: This commit introduces the `impersonate` package to the `auth` module. This package provides functionality for impersonating a service account, allowing applications to act on behalf of that service account. The commit corresponds to issue #8578.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_27\n\nLANGUAGE: go\nCODE:\n```\ne29ba0cb7bd3888ab9e808087027dc5a32474c04\n```\n\n----------------------------------------\n\nTITLE: Max Float Handling (Go)\nDESCRIPTION: This example illustrates how out-of-range floating-point numbers are handled during unmarshaling. v1 resulted in an error, while v2 uses the closest representable value. This snippet is linked to the `TestMaxFloats` test in `diff_test.go`.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/kube-openapi/pkg/internal/third_party/go-json-experiment/json/README.md#2025-04-17_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\n\"[MaxFloats](/diff_test.go#:~:text=TestMaxFloats)\"\n```\n\n----------------------------------------\n\nTITLE: Querier: Store Gateway Client Configuration\nDESCRIPTION: Configures the gRPC client used for communication between Mimir components, specifically the querier and store-gateway. This configuration is prefixed with `querier.store-gateway-client` for CLI flags.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n\"# The grpc_client block configures the gRPC client used to communicate between\\n# two Mimir components.\\n# The CLI flags prefix for this block configuration is:\\n# querier.store-gateway-client\\n[store_gateway_client: <grpc_client>]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Overrides in YAML for Grafana Mimir\nDESCRIPTION: Example YAML configuration file (runtime.yaml) showing how to override ingestion limits for a single tenant in Grafana Mimir. This configuration is used by the overrides-exporter to generate metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/overrides-exporter.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# file: runtime.yaml\n# In this example, we're overriding ingestion limits for a single tenant.\noverrides:\n  \"user1\":\n    ingestion_burst_size: 350000\n    ingestion_rate: 350000\n    max_global_series_per_metric: 300000\n    max_global_series_per_user: 300000\n```\n\n----------------------------------------\n\nTITLE: Running Tag Script for Package Creation - Shell\nDESCRIPTION: This snippet shows the command to run the 'tag.sh' script after merging a pull request. It creates tags for the packages based on the specified TAG environment variable, indicating the version number to be tagged.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-redis/redis/v8/RELEASING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTAG=v1.0.0 ./scripts/tag.sh\n```\n\n----------------------------------------\n\nTITLE: Changing Captions in Telebot\nDESCRIPTION: This snippet shows how to change the caption for a media item (such as photo or audio) in a Telegram bot using the Telebot library's EditCaption method. It demonstrates the simplicity of editing a message's caption based on a Message reference.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar m *Message\n\n// change caption of a photo, audio, etc.\nbot.EditCaption(m, \"new caption\")\n```\n\n----------------------------------------\n\nTITLE: Setting Instance IDs for Grafana Mimir Components\nDESCRIPTION: Configuration parameters that specify unique instance identifiers for different Mimir microservices. Each component requires a distinct ID for proper identification within the distributed system.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/ring-instance-id-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-alertmanager.sharding-ring.instance-id=123abc-2\n-compactor.ring.instance-id=123abc-4\n-distributor.ring.instance-id=123abc-1\n-ingester.lifecycler.id=123abc-6\n-ruler.ring.instance-id=123abc-3\n-store-gateway.sharding-ring.instance-id=123abc-5\n```\n\n----------------------------------------\n\nTITLE: Filesystem Object Storage Configuration\nDESCRIPTION: This YAML configuration defines the settings for using the local filesystem as an object storage. It includes the directory where the files will be stored and a prefix for object names. Note that this configuration is experimental and not recommended for production use.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ntype: FILESYSTEM\nconfig:\n  directory: \"\"\nprefix: \"\"\n```\n\n----------------------------------------\n\nTITLE: Using External ConfigMap for Grafana Mimir Configuration in YAML\nDESCRIPTION: This YAML snippet prepares a ConfigMap object for Grafana Mimir configuration. The configuration should be included under the 'mimir.yaml' data key, and users must ensure correct indentation and syntax.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-mimir-config\ndata:\n  mimir.yaml: |\n    <configuration>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Backoff in Go\nDESCRIPTION: Demonstrates the basic usage of the Backoff struct, including initialization with default values and calling the Duration() method multiple times. Also shows how to reset the backoff.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/jpillora/backoff/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nb := &backoff.Backoff{\n\t//These are the defaults\n\tMin:    100 * time.Millisecond,\n\tMax:    10 * time.Second,\n\tFactor: 2,\n\tJitter: false,\n}\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n\nfmt.Printf(\"Reset!\\n\")\nb.Reset()\n\nfmt.Printf(\"%s\\n\", b.Duration())\n```\n\n----------------------------------------\n\nTITLE: Verifying Helm Chart Publication in Bash\nDESCRIPTION: This command updates the local Helm repository and searches for the specified version of the Mimir Distributed chart. It's used to verify that the new chart version has been successfully published.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/RELEASE.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update && helm search repo grafana/mimir-distributed --version <VERSION>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Mimir Core Parameters in YAML\nDESCRIPTION: Main configuration structure for Grafana Mimir showing core parameters including target components, authentication settings, metrics configuration, and API settings. The configuration uses YAML format and supports environment variable substitution.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Comma-separated list of components to include in the instantiated process\ntarget: <string> | default = \"all\"\n\n# When set to true, incoming HTTP requests must specify tenant ID in HTTP X-Scope-OrgId header\nmultitenancy_enabled: <boolean> | default = true\n\n# Tenant ID to use when multitenancy is disabled\nno_auth_tenant: <string> | default = \"anonymous\"\n\n# How long to wait between SIGTERM and shutdown\nshutdown_delay: <duration> | default = 0s\n\n# Maximum number of groups allowed per user\nmax_separate_metrics_groups_per_user: <int> | default = 1000\n\n# Enable all Go runtime metrics\nenable_go_runtime_metrics: <boolean> | default = false\n\napi:\n  skip_label_name_validation_header_enabled: <boolean> | default = false\n  skip_label_count_validation_header_enabled: <boolean> | default = false\n  alertmanager_http_prefix: <string> | default = \"/alertmanager\"\n  prometheus_http_prefix: <string> | default = \"/prometheus\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard markdown format used for documenting version changes, including sections for Added, Fixed, Changed, and Deprecated modifications.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/mail.v2/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.3.1] - 2018-11-12\n\n### Fixed\n\n- #39: Reverts addition of Go modules `go.mod` manifest.\n```\n\n----------------------------------------\n\nTITLE: Comparing Kustomize Outputs Script Example 2\nDESCRIPTION: Command demonstrating how to compare Kustomize outputs between Helm and Jsonnet configurations, filtered to show only StatefulSet resources using a yq select expression.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/contributing-to-helm-chart.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd operations/compare-helm-with-jsonnet\n./compare-kustomize-outputs.sh ./helm/09-* ./jsonnet/09-* 'select(.kind == \"StatefulSet\")'\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Scheduler Worker Concurrency Configuration\nDESCRIPTION: Defines the number of concurrent workers forwarding queries to a single query-scheduler. This setting controls the concurrency level for communication with the query scheduler.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Number of concurrent workers forwarding queries to single\\n# query-scheduler.\\n# CLI flag: -query-frontend.scheduler-worker-concurrency\\n[scheduler_worker_concurrency: <int> | default = 5]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana SDK using go get\nDESCRIPTION: This command shows how to install the Grafana SDK for Go using the `go get` command. It fetches the SDK and its dependencies, making it available for use in Go projects. It assumes that the Go development environment is already set up.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana-tools/sdk/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n\tgo get github.com/grafana-tools/sdk\n```\n```\n\n----------------------------------------\n\nTITLE: Generating and Printing XID in Go\nDESCRIPTION: This snippet demonstrates how to create a new XID and print its string representation. It shows the basic usage of the XID package.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/rs/xid/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nguid := xid.New()\n\nprintln(guid.String())\n// Output: 9m4e2mr0ui3e8a215n4g\n```\n\n----------------------------------------\n\nTITLE: Enabling S2 Compression for gRPC in Grafana Mimir 2.15\nDESCRIPTION: Configuration flags to enable S2 compression for various gRPC clients in Grafana Mimir 2.15. This feature enhances data transfer efficiency.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.15.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-alertmanager.alertmanager-client.grpc-compression=s2\n-ingester.client.grpc-compression=s2\n-querier.frontend-client.grpc-compression=s2\n-querier.scheduler-client.grpc-compression=s2\n-query-frontend.grpc-client-config.grpc-compression=s2\n-query-scheduler.grpc-client-config.grpc-compression=s2\n-ruler.client.grpc-compression=s2\n-ruler.query-frontend.grpc-client-config.grpc-compression=s2\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Query Stats Enabled Configuration\nDESCRIPTION: Enables or disables query statistics tracking. When enabled, a message with query statistics is logged for every query, aiding in performance monitoring and debugging.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) False to disable query statistics tracking. When enabled, a message\\n# with some statistics is logged for every query.\\n# CLI flag: -query-frontend.query-stats-enabled\\n[query_stats_enabled: <boolean> | default = true]\"\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for tsdb-gaps CLI Tool\nDESCRIPTION: Demonstrates the command-line usage and available flags for the tsdb-gaps program. It includes required arguments, required flags, and optional flags for customizing the gap analysis process.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/tsdb-gaps/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: tsdb-gaps [flags] -select string blockID1 blockID2 ...\n\nrequired argument:\n  blockIDs: ULID corresponding to the top-level directory of the TSDB block\n\nrequired flag:\n  -select string\n        PromQL metric selector\n\noptional flags:\n  -max-single-gap-time int\n        Maximum gap time in seconds for a single gap (default 86400)\n  -max-single-missed-samples int\n        Maximum missed samples in a single gap (default 10000)\n  -max-total-gap-time int\n        Maximum total gap time in seconds for a series (default 86400)\n  -max-total-missed-samples int\n        Maximum total missed samples in a series (default 1000000)\n  -maxt value\n        Maximum timestamp to consider (default: block max time)\n  -min-single-gap-time int\n        Minimum gap time in seconds for a single gap (default 1)\n  -min-single-missed-samples int\n        Minimum missed samples in a single gap (default 1)\n  -min-total-gap-time int\n        Minimum total gap time in seconds for a series (default 1)\n  -min-total-missed-samples int\n        Minimum total missed samples in a series (default 1)\n  -mint value\n        Minimum timestamp to consider (default: block min time)\n  -scrape-interval int\n        Threshold for gap detection in seconds, set to 0 for automatic interval detection)\n```\n\n----------------------------------------\n\nTITLE: Feature: Add grpctransport Package\nDESCRIPTION: This commit adds the `grpctransport` package to the `auth` module. This package provides functionalities for setting up authentication when using gRPC transports with Google Cloud services. The commit is linked to issue #8625.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n69a83470bdcc7ed10c6c36d1abc3b7cfdb8a0ee5\n```\n\n----------------------------------------\n\nTITLE: Implementing Opcode Encoding Function in Go\nDESCRIPTION: This snippet provides the implementation of the 'encode' function, which processes the linked list of opcodes to construct the final JSON byte array while minimizing function calls through an efficient switch-case structure.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc encode(code *opcode, b []byte, p unsafe.Pointer) ([]byte, error) {\n    for {\n        switch code.op {\n        case opStructFieldHead:\n            b = append(b, '{')\n            code = code.next\n        case opStructFieldInt:\n            b = append(b, code.key...)\n            b = appendInt((*int)(unsafe.Pointer(uintptr(p)+code.offset)))\n            code = code.next\n        case opStructFieldString:\n            b = append(b, code.key...)\n            b = appendString((*string)(unsafe.Pointer(uintptr(p)+code.offset)))\n            code = code.next\n        case opStructEnd:\n            b = append(b, '}')\n            code = code.next\n        case opEnd:\n            goto END\n        }\n    }\nEND:\n    return b, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Metric Producer in Go\nDESCRIPTION: This snippet introduces the `Producer` interface and the `Reader.RegisterProducer(Producer)` function.  This addition enables the integration of external metric sources into the OpenTelemetry framework. It allows metric data from external producers to be registered and consumed by OpenTelemetry readers.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Calculating Minimum Disk Space for Grafana Mimir Compactor\nDESCRIPTION: This formula estimates the minimum disk space required for the compactor based on the compaction concurrency and the maximum compaction range block size. It's used to ensure sufficient storage for large tenants.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/compactor/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\ncompactor.compaction-concurrency * max_compaction_range_blocks_size * 2\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Metadata File for Google Cloud Go Packages in JSON\nDESCRIPTION: This snippet mentions the .repo-metadata-full.json file, which contains metadata about the packages in the repo. It is generated by the internal/gapicgen/generator and used by external tools to build lists of all packages.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/internal/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\".repo-metadata-full.json\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Helm Chart Configuration Changes in Bash\nDESCRIPTION: This snippet offers a command to inspect the changes that will be applied to the Grafana Mimir configuration before executing a Helm upgrade. It utilizes the 'helm diff' plugin to display the differences in configuration settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n mimir-test diff upgrade grafana/mimir-distributed -f custom.yaml\n```\n\n----------------------------------------\n\nTITLE: Start Block Upload to Store-gateway\nDESCRIPTION: Initiates the upload process for a TSDB block using a POST request that requires the block's `meta.json`. Various error codes indicate issues, such as conflicts or bad requests.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_55\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST /api/v1/upload/block/{block}/start\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Modifications\nDESCRIPTION: This set of commands helps developers create a new branch for making changes to the repository. It ensures that the changes are isolated from the main branch for easier management and review.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Updating Subscribe() Return Value Handling in Go MQTT Client\nDESCRIPTION: This snippet demonstrates how to update the handling of the Subscribe() function's return value. In the new version, the function returns subscription information as the first return value, which should be ignored if not needed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/at-wat/mqtt-go/MIGRATION.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-err := cli.Subscribe(...)\n+_, err := cli.Subscribe(...)\n```\n\n----------------------------------------\n\nTITLE: Enabling Zone-Awareness on Write Path for Mimir Ingesters\nDESCRIPTION: This YAML configuration enables zone-awareness on the write path for Mimir ingesters. It's part of the migration process to transition to fully zone-aware operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  zoneAwareReplication:\n    enabled: true\n    migration:\n      enabled: true\n      writePath: true\n\nrollout_operator:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Verifying Exemplar Generation in Shell\nDESCRIPTION: This command checks if metrics are being generated with exemplars by querying the application's metrics endpoint and searching for the 'traceid' field in the OpenMetrics format.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/use-exemplars/before-you-begin.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Accept: application/openmetrics-text\" http://<your application>/metrics | grep -i \"traceid\"\n```\n\n----------------------------------------\n\nTITLE: Adding 304 Response for Blob GET Operation\nDESCRIPTION: Adds a 304 (Not Modified) response to the GET operation for blobs in the Swagger document.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{{containerName}}/{{blob}}\"]\n  transform: >\n    $.get.responses[\"304\"] = {\n      \"description\": \"The condition specified using HTTP conditional header(s) is not met.\",\n      \"x-az-response-name\": \"ConditionNotMetError\",\n      \"headers\": { \"x-ms-error-code\": { \"x-ms-client-name\": \"ErrorCode\", \"type\": \"string\" } }\n    };\n```\n\n----------------------------------------\n\nTITLE: Running Grafana with Docker for Querying Mimir\nDESCRIPTION: Bash command to start a Grafana container with Docker, enabling users to add Mimir as a data source and query metrics from the externally accessible Grafana Mimir instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name=grafana -p 3000:3000 grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Mimir Documentation\nDESCRIPTION: YAML frontmatter configuration block defining the documentation metadata including title, menu title, description and weight for the Grafana Mimir Helm chart v5.7 release notes page.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v5.7.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Grafana Mimir Helm chart version 5.7 release notes\"\nmenuTitle: \"V5.7 release notes\"\ndescription: \"Release notes for Grafana Mimir Helm chart version 5.7\"\nweight: 300\n```\n\n----------------------------------------\n\nTITLE: Slow Field Lookup Process in JSON Decoding\nDESCRIPTION: This code snippet illustrates the slow process of looking up field decoders based on field names during JSON decoding. It demonstrates why optimization is needed for this step.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfieldName := decodeKey(buf, cursor) // \"a\" or \"b\" or \"c\"\ndecoder, exists := fieldToDecoderMap[fieldName] // so slow\nif exists {\n    decoder(buf, cursor)\n} else {\n    skipValue(buf, cursor)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Multi KV Store\nDESCRIPTION: Step 5 configuration that disables the multi KV store setup and prepares for final transition to memberlist only.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-consul-to-memberlist.md#2025-04-17_snippet_5\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    memberlist_ring_enabled: true,\n    multikv_migration_enabled: false,  // Changed in this step.\n    multikv_mirror_enabled: false,\n    multikv_switch_primary_secondary: true,\n    multikv_migration_teardown: true,  // Added in this step.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir Distributor HA Tracker with etcd Endpoints\nDESCRIPTION: This configuration parameter specifies the etcd endpoints for Mimir's high availability tracker. It defines multiple etcd server endpoints that the distributor component will connect to for coordination.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/string-slice-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n-distributor.ha-tracker.etcd.endpoints=etcd-client.cortex-to-mimir.svc.cluster.local.:2379,etcd-client.cortex-to-mimir.svc.cluster.local.:2378\n```\n\n----------------------------------------\n\nTITLE: Writing Test Scripts for fsnotify in Shell-like Syntax\nDESCRIPTION: This snippet demonstrates the format for writing test scripts for fsnotify. It shows how to create a new file, watch a directory, and specify the expected output.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new empty file with some data.\nwatch /\necho data >/file\n\nOutput:\n    create  /file\n    write   /file\n```\n\n----------------------------------------\n\nTITLE: CURL Request Example\nDESCRIPTION: Example of making a request to the CORS-enabled endpoint using curl, showing the request and response headers.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/foo -v\n```\n\nLANGUAGE: bash\nCODE:\n```\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET /foo HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.59.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Access-Control-Allow-Methods: GET,PUT,PATCH,OPTIONS\n< Access-Control-Allow-Origin: *\n< Date: Fri, 28 Jun 2019 20:13:30 GMT\n< Content-Length: 3\n< Content-Type: text/plain; charset=utf-8\n< \n* Connection #0 to host localhost left intact\nfoo\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Histograms Configuration in Grafana Mimir\nDESCRIPTION: YAML configuration to enable native histogram ingestion and protobuf query response format in Grafana Mimir. Sets native_histograms_ingestion_enabled to true and configures query_result_response_format for query sharding support.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-native-histograms-ingestion.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    frontend:\n      query_result_response_format: protobuf\n    limits:\n      native_histograms_ingestion_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Controlling Feature Gates via CLI Command\nDESCRIPTION: Shell command example showing how to enable or disable feature gates using command-line flags. The example demonstrates enabling gate1 and gate3 while disabling gate2.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/collector/featuregate/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\notelcol --config=config.yaml --feature-gates=gate1,-gate2,+gate3\n```\n\n----------------------------------------\n\nTITLE: Defining Opcode Structure in Go\nDESCRIPTION: This snippet defines the structure and types used for managing opcodes in the encoding process. It sets up the operation types and the opcode structure to facilitate the encoding of JSON data.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype opType int\nconst (\n    opStructFieldHead opType = iota\n    opStructFieldInt\n    opStructFieldStirng\n    opStructEnd\n    opEnd\n)\ntype opcode struct {\n    op opType\n    key []byte\n    next *opcode\n}\n```\n\n----------------------------------------\n\nTITLE: Default Style Configuration in Chroma XML\nDESCRIPTION: This XML snippet from a Chroma style configuration sets a default background and foreground color for the 'Background' token type, which acts as a parent style for other undefined tokens in the style.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<entry type=\"Background\" style=\"#f8f8f2 bg:#000000\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth with autorest/adal in Go\nDESCRIPTION: This snippet demonstrates how to configure OAuth using autorest/adal, including setting up the OAuthConfig and creating a ServicePrincipalToken.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.chinacloudapi.cn\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.chinacloudapi.cn/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Filesystem with Dev Build Tag in Go\nDESCRIPTION: Example of defining a source filesystem using a build tag for development mode.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/shurcooL/vfsgen/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +build dev\n\npackage data\n\nimport \"net/http\"\n\n// Assets contains project assets.\nvar Assets http.FileSystem = http.Dir(\"assets\")\n```\n\n----------------------------------------\n\nTITLE: Link Reference in Markdown\nDESCRIPTION: Reference link syntax used in the changelog header to point to semantic versioning documentation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/mail.v2/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Semantic Versioning](http://semver.org/)\n```\n\n----------------------------------------\n\nTITLE: Enabling Response Streaming from Querier to Query-Frontend in YAML\nDESCRIPTION: Enables streaming of responses from querier to query-frontend using the -querier.response-streaming-enabled CLI flag on queriers. Currently only supported for /api/v1/cardinality/active_series endpoint responses.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n-querier.response-streaming-enabled: true\n```\n\n----------------------------------------\n\nTITLE: Example of Import Grouping Pattern in Go\nDESCRIPTION: Demonstrates the recommended pattern for grouping imports in Go files for the Jaeger client project: standard library imports, followed by external project imports, and finally imports from the Jaeger client project.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\n\t\"github.com/uber/jaeger-lib/metrics\"\n\t\"go.uber.org/zap\"\n\n\t\"github.com/uber/jaeger-client-go/config\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Doc Site\nDESCRIPTION: This command installs and runs a local Go Doc site, providing useful documentation for developers working with the repository. It's essential for reviewing and generating documentation alongside developments.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Utilization and Error Handling in YAML\nDESCRIPTION: Settings for CPU/memory utilization limits, error sampling, and series limit management.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nignore_series_limit_for_metric_names: <string> | default = \"\"\nread_path_cpu_utilization_limit: <float> | default = 0\nread_path_memory_utilization_limit: <int> | default = 0\nerror_sample_rate: <int> | default = 10\nuse_ingester_owned_series_for_limits: <boolean> | default = false\ntrack_ingester_owned_series: <boolean> | default = false\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd Endpoint for Mimir Distributor HA Tracker in YAML\nDESCRIPTION: This configuration specifies the etcd endpoint for Mimir's distributor HA tracker. It sets the endpoint to an etcd client service within the Kubernetes cluster, likely for a migration from Cortex to Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/string-slice-single-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-distributor.ha-tracker.etcd.endpoints=etcd-client.cortex-to-mimir.svc.cluster.local.:2379\n```\n\n----------------------------------------\n\nTITLE: Ranging Over an Objx Map in Go\nDESCRIPTION: This snippet shows how to iterate over an objx.Map using a standard Go range loop, treating it as a regular map[string]interface{}.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nm := objx.MustFromJSON(json)\nfor key, value := range m {\n  // Your code...\n}\n```\n\n----------------------------------------\n\nTITLE: OTLP Basic Auth Configuration\nDESCRIPTION: Complete configuration for OTLP with basic authentication, including extensions and service setup.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-otel-collector.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  basicauth/otlp:\n    client_auth:\n      username: username\n      password: password\n\nexporters:\n  otlphttp:\n    auth:\n      authenticator: basicauth/otlp\n    endpoint: http://<mimir-endpoint>/otlp\n\nservice:\n  extensions: [basicauth/otlp]\n  pipelines:\n    metrics:\n      receivers: [...]\n      processors: [...]\n      exporters: [..., otlphttp]\n```\n\n----------------------------------------\n\nTITLE: Updating Service Version to 2025-01-05 in Go Client Files\nDESCRIPTION: Replaces hardcoded service version with a variable in multiple Go client files.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_appendblob_client.go\n  - zz_blob_client.go\n  - zz_blockblob_client.go\n  - zz_container_client.go\n  - zz_pageblob_client.go\n  - zz_service_client.go\n  where: $\n  transform: >-\n    return $.\n      replaceAll(`[]string{\"2021-12-02\"}`, `[]string{ServiceVersion}`);\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus with Docker and Custom Configuration\nDESCRIPTION: Bash command to start a Prometheus container with Docker, mounting a custom configuration file that includes remote write to Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-external-access.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9090:9090  -v <absolute-path-to>/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Load Balancing with Kuberesolver in Go\nDESCRIPTION: This snippet shows how to enable client-side load balancing when using kuberesolver. It uses the 'round_robin' balancer as an example.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sercand/kuberesolver/v6/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngrpc.DialContext(ctx,  \"kubernetes:///service:grpc\", grpc.WithBalancerName(\"round_robin\"), grpc.WithInsecure())\n```\n\n----------------------------------------\n\nTITLE: Disabling Memberlist Cluster Label Verification in Mimir Helm Configuration\nDESCRIPTION: YAML configuration to disable the Memberlist cluster label verification in the mimir-distributed Helm chart, which is necessary before setting a new cluster label to prevent the Memberlist from forming partitions.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-enable-cluster-label-verification/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    memberlist:\n      cluster_label_verification_disabled: true\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator in GoValidator\nDESCRIPTION: Demonstrates the new method for adding custom validators to prevent data races when accessing custom validators.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\n// before\ngovalidator.CustomTypeTagMap[\"customByteArrayValidator\"] = func(i interface{}, o interface{}) bool {\n  // ...\n}\n\n// after\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, o interface{}) bool {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using NoContextDialer Wrapper for Backward Compatibility in Go MQTT Client\nDESCRIPTION: This snippet shows how to wrap an old dialer implementation with NoContextDialer to maintain compatibility with the mqtt.Dialer interface from versions prior to 1.14.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/at-wat/mqtt-go/MIGRATION.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n&mqtt.NoContextDialer{oldDialer}\n```\n\n----------------------------------------\n\nTITLE: Executing Block Upload Script in Shell\nDESCRIPTION: Example command showing how to execute the upload-block.sh script with a block directory path. The path must match the ULID format of the block.\nSOURCE: https://github.com/grafana/mimir/blob/main/development/tools/upload-block/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./upload-block.sh /path/to/block/01J5240S2R3BE24W8CH4TPTEST\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure Library in Go\nDESCRIPTION: Command to install the mapstructure library using Go's package manager. This installs the v2 version of the library from the go-viper repository.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/go-viper/mapstructure/v2\n```\n\n----------------------------------------\n\nTITLE: Example Go Code Snippet from HTTP Propagation API\nDESCRIPTION: Code example referenced in changelog showing HTTPSupplier interface for propagation API. Demonstrates methods to retrieve and store values associated with a carrier.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n// HTTPSupplier interface\ntype HTTPSupplier interface {\n    Get(key string) string\n    Set(key string, value string)\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Chunks/Blocks in Grafana Mimir Ingester\nDESCRIPTION: This endpoint triggers a flush of in-memory series time series data to long-term storage. It accepts optional parameters for tenant selection and synchronous operation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nGET,POST /ingester/flush\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Requirements Table in Markdown\nDESCRIPTION: A markdown table listing the required repositories, names, and versions for the Helm chart dependencies.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Repository | Name | Version |\n|------------|------|----------|\n| https://charts.min.io/ | minio(minio) | 5.4.0 |\n| https://grafana.github.io/helm-charts | grafana-agent-operator(grafana-agent-operator) | 0.5.1 |\n| https://grafana.github.io/helm-charts | rollout_operator(rollout-operator) | 0.26.1 |\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client Backoff Maximum Period\nDESCRIPTION: This sets the maximum delay duration during the backoff process. The backoff delay increases exponentially until it reaches this maximum value.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_85\n\nLANGUAGE: yaml\nCODE:\n```\n    # (advanced) Maximum delay when backing off.\n    # CLI flag: -alertmanager.alertmanager-client.backoff-max-period\n    [max_period: <duration> | default = 10s]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GEM License in Helm Values File\nDESCRIPTION: YAML configuration for providing the GEM license contents directly in the Helm values file. This approach embeds the license JWT token in the configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/gs-gem.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlicense:\n  contents: \"iyJhbGci...\"\n\n```\n\n----------------------------------------\n\nTITLE: Converted YAML Configuration Output\nDESCRIPTION: Shows the expected output YAML configuration file after conversion. The configuration consists of updated results cache settings and server port details.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend:\n  results_cache:\n    memcached:\n      max_get_multi_batch_size: 2048\n      max_get_multi_concurrency: 10\n      max_idle_connections: 32\n\nserver:\n  http_listen_port: 80\n```\n\n----------------------------------------\n\nTITLE: Querying Overrides Metrics with cURL\nDESCRIPTION: Bash command using cURL to fetch and filter the metrics exposed by the overrides-exporter. This command retrieves only the metrics related to cortex limits overrides.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/overrides-exporter.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://localhost:8080/metrics | grep cortex_limits_overrides\n```\n\n----------------------------------------\n\nTITLE: Converting Pygments Lexers using Python Script\nDESCRIPTION: This shell command uses a Python script to convert Pygments lexers to Chroma format. The output is redirected to a specified XML file for later use.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython3 _tools/pygments2chroma_xml.py \\\n  pygments.lexers.jvm.KotlinLexer \\\n  > lexers/embedded/kotlin.xml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ingress Resource Information\nDESCRIPTION: Bash command to get information about existing Ingress resources. This helps identify the name that needs to be preserved during the migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get ingress\n```\n\n----------------------------------------\n\nTITLE: Basic Kingpin Usage Example in Go\nDESCRIPTION: A simple example demonstrating how to use Kingpin to parse command-line flags and arguments in a Go program.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  verbose = kingpin.Flag(\"verbose\", \"Verbose mode.\").Short('v').Bool()\n  name    = kingpin.Arg(\"name\", \"Name of user.\").Required().String()\n)\n\nfunc main() {\n  kingpin.Parse()\n  fmt.Printf(\"%v, %s\\n\", *verbose, *name)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Parameters in HttpRouter with http.Handler in Go\nDESCRIPTION: This snippet shows how to access named parameters when using HttpRouter with the standard http.Handler interface. It demonstrates retrieving parameters from the request context.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n    params := httprouter.ParamsFromContext(r.Context())\n\n    fmt.Fprintf(w, \"hello, %s!\\n\", params.ByName(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Owned Series Tracking in Ingesters in YAML\nDESCRIPTION: Enables owned series tracking in ingesters using the -ingester.track-ingester-owned-series CLI flag. Requires zone-aware replication and replication factor equal to the number of zones.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.12.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n-ingester.track-ingester-owned-series: true\n```\n\n----------------------------------------\n\nTITLE: Running Test Scripts in Shell\nDESCRIPTION: Commands for running various test suites including vet checks and race condition testing. These tests must pass before any PR can be merged.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/vet.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Displaying Mixed Content Block Compression Comparison in Markdown\nDESCRIPTION: This markdown table compares various compression algorithms, including different modes of S2, on a mixed content dataset. It shows input and output sizes, compression ratio, and compression speed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| *                 | Input      | Output     | Reduction  | MB/s       |\n|-------------------|------------|------------|------------|------------|\n| S2                | 4014735833 | 1059723369 | 73.60%     | **936.73** |\n| S2 Better         | 4014735833 | 961580539  | 76.05%     | 451.10     |\n| S2 Best           | 4014735833 | 899182886  | **77.60%** | 46.84      |\n| Snappy            | 4014735833 | 1128706759 | 71.89%     | 790.15     |\n| S2, Snappy Output | 4014735833 | 1093823291 | 72.75%     | 936.60     |\n| LZ4               | 4014735833 | 1063768713 | 73.50%     | 452.02     |\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Instance Enable IPv6 Configuration\nDESCRIPTION: Enables the use of an IPv6 instance address, defaulting to false. When enabled, the query frontend will advertise its IPv6 address.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Enable using a IPv6 instance address (default false).\\n# CLI flag: -query-frontend.instance-enable-ipv6\\n[instance_enable_ipv6: <boolean> | default = false]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metamonitoring for Mimir\nDESCRIPTION: YAML configuration to enable metamonitoring in Mimir, including service monitor and Grafana Agent setup.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetaMonitoring:\n  serviceMonitor:\n    enabled: true\n  grafanaAgent:\n    enabled: true\n    installOperator: true\n    metrics:\n      additionalRemoteWriteConfigs:\n        - url: \"http://mimir-nginx.mimir-test.svc:80/api/v1/push\"\n```\n\n----------------------------------------\n\nTITLE: Finding TSDB Block Directories\nDESCRIPTION: Command to locate all block directories in the TSDB storage path by finding directories containing chunks.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind <STORAGE TSDB PATH> -name chunks -exec dirname {} \\;\n```\n\n----------------------------------------\n\nTITLE: Local Storage Configuration for Ruler\nDESCRIPTION: Configuration for using local storage with the ruler component, useful for initial testing. Specifies the storage backend type and local directory path.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-ruler.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    ruler_enabled: true,\n    ruler_storage_backend: 'local',\n    ruler_local_directory: '/path/to/local/directory',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example Alertmanager Template\nDESCRIPTION: Sample Alertmanager template file using Go template syntax.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_6\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ define \"alert_customer_env_message\" }}\n  [{{ .CommonLabels.alertname }} | {{ .CommonLabels.customer }} | {{ .CommonLabels.environment }}]\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Example\nDESCRIPTION: Example of how to sign off a git commit using the developer's full name and email, demonstrating the Signed-off-by convention for open source contributions\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: git\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Testing BBloom Package Performance\nDESCRIPTION: This Go command runs benchmark tests on the BBloom package, evaluating performance metrics for main operations. Requires Go's testing framework and a pre-generated word list.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dgraph-io/ristretto/z/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo test -bench=.\n```\n\n----------------------------------------\n\nTITLE: Parsing Semantic Versions in Go\nDESCRIPTION: Demonstrates how to parse a semantic version string into a Version object using the NewVersion function. This function attempts to coerce the input into a valid semantic version.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nv, err := semver.NewVersion(\"1.2.3-beta.1+build345\")\n```\n\n----------------------------------------\n\nTITLE: Query Frontend: Instance Port Configuration\nDESCRIPTION: Defines the port to advertise to the querier via the scheduler, defaulting to `server.grpc-listen-port` if not specified.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\n\"# (advanced) Port to advertise to querier (via scheduler) (defaults to\\n# server.grpc-listen-port).\\n# CLI flag: -query-frontend.instance-port\\n[port: <int> | default = 0]\"\n```\n\n----------------------------------------\n\nTITLE: Removing DataLake Related Paths from Swagger\nDESCRIPTION: Removes paths containing 'filesystem' from the Swagger document to exclude DataLake functionality.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('filesystem'))\n        {\n            delete $[property];\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Build Information in Grafana Mimir\nDESCRIPTION: These endpoints return information about the build and enabled features in JSON format. The format is similar to the Prometheus Build Information endpoint.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/status/buildinfo\nGET <prometheus-http-prefix>/api/v1/status/buildinfo\nGET <alertmanager-http-prefix>/api/v1/status/buildinfo\n```\n\n----------------------------------------\n\nTITLE: PUT Request Body for Ingester Unregister Endpoint in JSON\nDESCRIPTION: Example JSON request body for the proposed /ingester/unregister-on-shutdown endpoint when using the PUT method. Sets whether the ingester should unregister on shutdown.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/proposals/ingester-unregister-flexibility.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"unregister\": false }\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go Repository\nDESCRIPTION: This snippet provides the command to clone the OpenTelemetry Go source code from GitHub. It allows developers to set up a local copy for development and contribution purposes.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Integrating Color into Existing Code\nDESCRIPTION: Demonstrates how to add color to existing code blocks by using Set() and Unset() methods.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Use handy standard colors\ncolor.Set(color.FgYellow)\n\nfmt.Println(\"Existing text will now be in yellow\")\nfmt.Printf(\"This one %s\\n\", \"too\")\n\ncolor.Unset() // Don't forget to unset\n\n// You can mix up parameters\ncolor.Set(color.FgMagenta, color.Bold)\ndefer color.Unset() // Use it in your function\n\nfmt.Println(\"All text will now be bold magenta.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Filesystem Storage Backend in Grafana Mimir\nDESCRIPTION: Configuration block for using local file system as object storage backend in Grafana Mimir. This block uses the CLI flags prefix 'blocks-storage'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_134\n\nLANGUAGE: toml\nCODE:\n```\n[filesystem: <filesystem_storage_backend>]\n```\n\n----------------------------------------\n\nTITLE: Setting Mimir Distributor Remote Timeout\nDESCRIPTION: Configuration parameter that sets the remote timeout duration for the Mimir distributor to 10 seconds. This controls how long the distributor will wait for remote operations before timing out.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/noop-flags-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n-distributor.remote-timeout=10s\n```\n\n----------------------------------------\n\nTITLE: Enabling Component Autoscaling Configuration\nDESCRIPTION: Configuration for enabling autoscaling on specific Mimir components, setting minimum and maximum replica counts for the scaling range.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-autoscaling.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  kedaAutoscaling:\n    enabled: true\n    minReplicaCount: 2\n    maxReplicaCount: 10\n```\n\n----------------------------------------\n\nTITLE: Linking to Prometheus Security Policy in Markdown\nDESCRIPTION: This snippet contains a Markdown link to the Prometheus security policy, which includes information on how to report vulnerabilities for Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/procfs/SECURITY.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<https://prometheus.io/docs/operating/security/>\n```\n\n----------------------------------------\n\nTITLE: Creating vfsgen Generate Helper in Go\nDESCRIPTION: Example of a generate helper file that uses vfsgen to generate static filesystem code.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/shurcooL/vfsgen/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"example.com/project/data\"\n\t\"github.com/shurcooL/vfsgen\"\n)\n\nfunc main() {\n\terr := vfsgen.Generate(data.Assets, vfsgen.Options{\n\t\tPackageName:  \"data\",\n\t\tBuildTags:    \"!dev\",\n\t\tVariableName: \"Assets\",\n\t})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running MQE Benchmarks with Go Test Command\nDESCRIPTION: Instructions for running MQE benchmarks using the standard Go test command. This method is available but not the recommended approach for comprehensive benchmark execution.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/streamingpromql/benchmarks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`go test`\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimir HTTP Port\nDESCRIPTION: Example of setting the server HTTP port to 80 to maintain compatibility with Cortex defaults, as Mimir's default port is 8080.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-cortex.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonnet\nCODE:\n```\n(import 'github.com/grafana/mimir/operations/mimir/mimir.libsonnet') {\n  _config+: {\n    server_http_port: 80,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Version 0.4.0 in Markdown\nDESCRIPTION: Links to the comparison between version 0.3.0 and 0.4.0 of the compute/metadata package on GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.4.0](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.3.0...compute/metadata/v0.4.0) (2024-07-01)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Shuffle Sharding\nDESCRIPTION: Configuration flags for enabling shuffle sharding on ingester write path. Sets the number of ingesters each tenant's series should be sharded to.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-shuffle-sharding/index.md#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-distributor.ingestion-tenant-shard-size=<size>\n```\n\n----------------------------------------\n\nTITLE: Referencing Version 0.5.2 in Markdown\nDESCRIPTION: Links to the comparison between version 0.5.1 and 0.5.2 of the compute/metadata package on GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.5.2](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.5.1...compute/metadata/v0.5.2) (2024-09-20)\n```\n\n----------------------------------------\n\nTITLE: Referencing Version 0.2.3 in Markdown\nDESCRIPTION: Links to the comparison between version 0.2.2 and 0.2.3 of the compute/metadata package on GitHub.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/compute/metadata/CHANGES.md#2025-04-17_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.2.3](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.2.2...compute/metadata/v0.2.3) (2022-12-15)\n```\n\n----------------------------------------\n\nTITLE: Preparing Grafana Mimir Rules with mimirtool\nDESCRIPTION: This snippet demonstrates how to use the mimirtool rules prepare command to modify Grafana Mimir rules. It adds a cluster label to aggregations in the rules file.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool rules prepare ./example_rules_one.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: my_namespace\ngroups:\n  - name: example\n    interval: 5m\n    rules:\n      - record: job:http_inprogress_requests:sum\n        expr: sum by (job) (http_inprogress_requests)\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: my_namespace\ngroups:\n  - name: example\n    interval: 5m\n    rules:\n      - record: job:http_inprogress_requests:sum\n        # note the added cluster label\n        expr: sum by(job, cluster) (http_inprogress_requests)\n```\n\nLANGUAGE: console\nCODE:\n```\nINFO[0000] SUCCESS: 1 rules found, 0 modified expressions\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Frontend Settings\nDESCRIPTION: Configuration for enabling cardinality estimation in the query-frontend for query sharding when results cache is enabled.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v4.5.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend.query_sharding_target_series_per_shard\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Gateway CPU Settings\nDESCRIPTION: Environment variable setting for the store-gateway to dynamically set maximum processes based on CPU request.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v4.5.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nGOMAXPROCS\n```\n\n----------------------------------------\n\nTITLE: Empty Target Group Example in Go\nDESCRIPTION: Demonstrates how to handle the case when all targets in a group are removed by sending an empty target group with just the source identifier.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n&targetgroup.Group{\n\tTargets:  nil,\n\t\"Source\": \"file2\",\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Alertmanager Template\nDESCRIPTION: This command renders an Alertmanager template using specified template files, data, and text. It's useful for previewing template output.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager render --template.glob 'templates/*' --template.data alert_data1.json --template.text '{{ template \"my_message\" . }}'\n```\n\n----------------------------------------\n\nTITLE: Migration Autoscaling Configuration with Replica Preservation\nDESCRIPTION: Configuration for safely migrating existing deployments to autoscaling while preserving current replica counts during transition.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-autoscaling.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  kedaAutoscaling:\n    enabled: true\n    preserveReplicas: true # Maintains stability during migration\n```\n\n----------------------------------------\n\nTITLE: Setting Frontend Background Write-Back Concurrency in Grafana Mimir\nDESCRIPTION: This configuration parameter sets the concurrency level for background write-back operations in the Grafana Mimir frontend. It determines how many simultaneous write-back operations can occur.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/renamed-flags-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-frontend.background.write-back-concurrency=45\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Tests for Route Variables\nDESCRIPTION: Example of implementing table-driven tests for routes with variables in Gorilla Mux, showing how to test multiple route combinations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\nfunc main() {\n    r := mux.NewRouter()\n    // A route with a route variable:\n    r.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\nfunc TestMetricsHandler(t *testing.T) {\n    tt := []struct{\n        routeVariable string\n        shouldPass bool\n    }{\n        {\"goroutines\", true},\n        {\"heap\", true},\n        {\"counters\", true},\n        {\"queries\", true},\n        {\"adhadaeqm3k\", false},\n    }\n\n    for _, tc := range tt {\n        path := fmt.Sprintf(\"/metrics/%s\", tc.routeVariable)\n        req, err := http.NewRequest(\"GET\", path, nil)\n        if err != nil {\n            t.Fatal(err)\n        }\n\n        rr := httptest.NewRecorder()\n\t\n\t// To add the vars to the context, \n\t// we need to create a router through which we can pass the request.\n\trouter := mux.NewRouter()\n        router.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n        router.ServeHTTP(rr, req)\n\n        // In this case, our MetricsHandler returns a non-200 response\n        // for a route variable it doesn't know about.\n        if rr.Code == http.StatusOK && !tc.shouldPass {\n            t.Errorf(\"handler should have failed on routeVariable %s: got %v want %v\",\n                tc.routeVariable, rr.Code, http.StatusOK)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Link for PkgGoDev\nDESCRIPTION: Displays a PkgGoDev badge and links to the OpenTelemetry metric noop package documentation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/metric/noop/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop)\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage with Service Account\nDESCRIPTION: Configuration for Google Cloud Storage with service account credentials using environment variable interpolation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/configure-object-storage-backend.md#2025-04-17_snippet_5\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    storage_backend: 'gcs',\n    storage_gcs_service_account: '$(STORAGE_GCS_SERVICE_ACCOUNT)',\n    blocks_storage_bucket_name: 'blocks-bucket',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chroma for Less with Shell Script\nDESCRIPTION: This shell command sets an environment variable to preprocess files with Chroma for syntax highlighting in 'less', using the `--fail` flag to fallback to the `cat` command if needed.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/README.md#2025-04-17_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport LESSOPEN='| p() { chroma --fail \"$1\" || cat \"$1\"; }; p \"%s\"'\n```\n\n----------------------------------------\n\nTITLE: Feature: Add idtoken Package\nDESCRIPTION: This commit adds the `idtoken` package to the `auth` module. The package enables the generation and validation of ID tokens for authenticating with Google Cloud services. The commit is linked to issue #8580.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_26\n\nLANGUAGE: go\nCODE:\n```\na79e693e97e4e3e1c6742099af3dbc58866d88fe\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with klog\nDESCRIPTION: Example showing basic logging usage with klog, demonstrating how to integrate klog into Go applications. Shows importing, initialization, and basic logging statements.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"k8s.io/klog/v2\"\nklog.InitFlags(nil)\nklog.Info(\"Prepare to repel boarders\")\nklog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Using Map Type in Go\nDESCRIPTION: Shows basic usage of the Map type, which implements a concurrent hash table with string keys.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nm := xsync.NewMap()\nm.Store(\"foo\", \"bar\")\nv, ok := m.Load(\"foo\")\ns := m.Size()\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Agent Operator Custom Resource Definitions\nDESCRIPTION: A bash command to apply the Grafana Agent Operator CRDs to a Kubernetes cluster for monitoring Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f operations/agent-static-operator/crds/\n```\n\n----------------------------------------\n\nTITLE: Sample Input File Format for Object Deletion\nDESCRIPTION: Demonstrates the expected format of the input file containing paths of objects to be deleted.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/delete-objects/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npath/to/object/to/delete/foo1.json\npath/to/object/to/delete/foo2.json\npath/to/object/to/delete/foo3.json\npath/to/object/to/delete/foo4.json\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks with Multiple CPU Configurations\nDESCRIPTION: Commands to execute Go benchmarks across different CPU counts (1-64) and generate statistical analysis\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/puzpuzpuz/xsync/v3/BENCHMARKS.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run='^$' -cpu=1,2,4,8,16,32,64 -bench . -count=30 -timeout=0 | tee bench.txt\nbenchstat bench.txt | tee benchstat.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Query Length Limit Configuration in Mimir\nDESCRIPTION: Configuration to set the maximum total query length to 12000 hours in Mimir, matching the jsonnet-based deployment configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmax_total_query_length: 12000h\n```\n\n----------------------------------------\n\nTITLE: Enforcing Restricted Security Policy in Kubernetes\nDESCRIPTION: A Kubernetes namespace label to enforce the Restricted security policy for Grafana Mimir deployments in Kubernetes v1.23 and higher.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/_index.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npod-security.kubernetes.io/enforce: restricted\n```\n\n----------------------------------------\n\nTITLE: JSON Tenant Delete Status Response Schema\nDESCRIPTION: JSON schema showing the response format for tenant deletion status, including tenant ID and block deletion status.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tenant_id\": \"<id>\",\n  \"blocks_deleted\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP HTTP Exporter for Mimir\nDESCRIPTION: Basic configuration for the OpenTelemetry HTTP exporter to send metrics to Mimir's OTLP endpoint.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-otel-collector.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlphttp:\n    endpoint: http://<mimir-endpoint>/otlp\n```\n\n----------------------------------------\n\nTITLE: Installing Golex Dependency\nDESCRIPTION: Command to install the golex tool, which is required for generating lexer code from .l files.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/prometheus/prometheus/model/textparse/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u modernc.org/golex\n```\n\n----------------------------------------\n\nTITLE: Installing ULID Package\nDESCRIPTION: Command to install the ULID package using Go modules.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/oklog/ulid/v2\n```\n\n----------------------------------------\n\nTITLE: Package Import Example\nDESCRIPTION: Example showing how the socket package should be imported with build tags, similar to syscall or golang.org/x/sys packages.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mdlayher/socket/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPackage `socket` provides a low-level network connection type which integrates\\nwith Go's runtime network poller to provide asynchronous I/O and deadline\\nsupport.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Deprecated Option in Go\nDESCRIPTION: Example of explicitly setting the deprecated config option to its default value in the old config struct's RegisterFlags method.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-to-convert-config-to-per-tenant-limit.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncfg.DeprecatedCacheUnalignedRequests = DefaultDeprecatedCacheUnalignedRequests\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC in Go Project\nDESCRIPTION: Basic import statement for using gRPC in a Go project. Required for initializing gRPC functionality and enabling RPC communication.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Ruler Configuration Parameters\nDESCRIPTION: Configuration parameters for controlling rule evaluation concurrency and tenant sharding in the Grafana Mimir ruler component.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_122\n\nLANGUAGE: yaml\nCODE:\n```\nruler_max_independent_rule_evaluation_concurrency_per_tenant: <int> | default = 4\nstore_gateway_tenant_shard_size: <int> | default = 0\n```\n\n----------------------------------------\n\nTITLE: Adding Go 1.23 Iterator Support for IAM Client\nDESCRIPTION: Adds support for Go 1.23 iterators in the IAM client library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/iam/CHANGES.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Example usage of new Go 1.23 iterator\niter := client.ListSomething(ctx)\nfor {\n  item, err := iter.Next()\n  if err == iterator.Done {\n    break\n  }\n  if err != nil {\n    // Handle error\n  }\n  // Use item\n}\n```\n\n----------------------------------------\n\nTITLE: Port-forwarding to Mimir Pods for Verification\nDESCRIPTION: Bash commands to port-forward to different Mimir component pods for verifying the Memberlist configuration by accessing the /memberlist endpoint.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-enable-cluster-label-verification/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward pod/<mimir-pod-1> --kube-context=<my-k8s-context> --namespace=<my-mimir-namespace> 8080:8080\nkubectl port-forward pod/<mimir-pod-2> --kube-context=<my-k8s-context> --namespace=<my-mimir-namespace> 8081:8080\n```\n\n----------------------------------------\n\nTITLE: Installing JWT-Go Package\nDESCRIPTION: Command to install the jwt-go package as a dependency in a Go project using go get.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/golang-jwt/jwt/v5\n```\n\n----------------------------------------\n\nTITLE: Merging Pre-release Changes into Release Branch\nDESCRIPTION: Git command to merge the pre-release branch containing version updates into the current branch for final release preparation.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit merge prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoints for Ingester Shutdown Preparation\nDESCRIPTION: Endpoints to inspect or modify ingester configuration for shutdown preparation. Supports GET/POST/DELETE operations to manage shutdown state.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nGET,POST,DELETE /ingester/prepare-shutdown\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to your Zap fork\nDESCRIPTION: Command to push your completed changes to your fork on GitHub, preparing for pull request submission.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Tagging Mimir Release\nDESCRIPTION: Script command to tag a new release from the release branch after checking out the correct version.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout release-<version>\n./tools/release/tag-release.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Pipeline Service\nDESCRIPTION: Service pipeline configuration to enable the OTLP HTTP exporter for metrics collection.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-otel-collector.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines:\n    metrics:\n      receivers: [...]\n      processors: [...]\n      exporters: [..., otlphttp]\n```\n\n----------------------------------------\n\nTITLE: Setting External URL for Grafana Mimir Ruler\nDESCRIPTION: This configuration sets the external URL for the Grafana Mimir ruler component. It specifies the URL where the ruler can be accessed externally.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/value-flags-old.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-ruler.external.url=https://localhost:443\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Produced Offset in Kafka\nDESCRIPTION: Explains how to get the offset of the next record in a Kafka partition using ListOffsets request with timestamp -1. This method returns the last produced offset plus one.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/storage/ingest/DESIGN.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe offset of the **next** record in a partition can be read from Kafka issuing `ListOffsets` request with `timestamp = -1`.\nThe special value `-1` means \"latest\" but in practice it's the \"last produced offset + 1\".\n```\n\n----------------------------------------\n\nTITLE: OCI Object Storage Configuration - OKE Workload Identity Provider\nDESCRIPTION: This YAML configuration shows the setup for OKE (Oracle Kubernetes Engine) Workload Identity Provider to access Oracle Cloud Infrastructure (OCI) Object Storage.  It needs the bucket name and region to be specified, with the region identifying the bucket's location.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ntype: OCI\nconfig:\n  provider: \"oke-workload-identity\"\n  bucket: \"\"\n  region: \"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Mimir Module to Puppetfile\nDESCRIPTION: This snippet shows how to add the Grafana Mimir module to a Puppet project's Puppetfile. It specifies the module name and version to be used.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/puppet/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: puppet\nCODE:\n```\nmod 'ovhcloud-mimir', '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Verifying Helm Chart Publication\nDESCRIPTION: Helm command to verify the successful publication of a new chart version in the repository.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/RELEASE.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update && helm search repo grafana/mimir-distributed --devel --version <VERSION>\n```\n\n----------------------------------------\n\nTITLE: Disabling Memberlist Configuration in Mimir\nDESCRIPTION: Initial configuration showing how to disable memberlist in Mimir using Jsonnet.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-consul-to-memberlist.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    memberlist_ring_enabled: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Development\nDESCRIPTION: Command to run Grafana Mimir locally using docker-compose in a specific deployment mode\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevelopment/mimir-read-write-mode/compose-up.sh -d\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenTelemetry Go Package\nDESCRIPTION: This command allows developers to fetch the OpenTelemetry Go package via Go modules. It prepares the project for further development.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Release Process Commands - Tag Creation\nDESCRIPTION: Commands for checking out the release branch and creating a new release tag.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout release-<version>\n./tools/release/tag-release.sh\n```\n\n----------------------------------------\n\nTITLE: Tagging a Mimir Release\nDESCRIPTION: Commands to checkout a release branch and tag a new release using the tag-release.sh script.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout release-<version>\\n./tools/release/tag-release.sh\n```\n\n----------------------------------------\n\nTITLE: Setting RECORD Environment Variable in Windows PowerShell\nDESCRIPTION: This PowerShell command sets the RECORD environment variable to true, preparing for Chroma lexer test data regeneration in a PowerShell session.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/lexers/README.md#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$env:RECORD = 'true'\n```\n\n----------------------------------------\n\nTITLE: Disabling MinIO\nDESCRIPTION: YAML configuration to disable the default MinIO installation when using existing object storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nminio:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Schema Data using Make\nDESCRIPTION: Command to remove all built-in Kustomization and Kubernetes schemas\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake nuke\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob HTTP Pipeline\nDESCRIPTION: Shows how to configure the HTTP pipeline using ClientOptions during client initialization.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(account, cred, &azblob.ClientOptions{\n\tClientOptions: azcore.ClientOptions{\n\t\t// configure HTTP pipeline options here\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Release Changelog\nDESCRIPTION: Git log command to generate a formatted changelog of all commits between the last release tag and the latest release tag.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/minio/minio-go/v7/MAINTAINERS.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git log --no-color --pretty=format:'-%d %s (%cr) <%an>' <last_release_tag>..<latest_release_tag>\n```\n\n----------------------------------------\n\nTITLE: Feature: Universe Domain to Transports\nDESCRIPTION: This commit adds the `UniverseDomain` to both `grpctransport` and `httptransport` within the `auth` package. This allows the specification of the universe domain for both gRPC and HTTP transports, ensuring consistent authentication across different communication channels. The associated issue is #9663, with a reference to #9670.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n67d353beefe3b607c08c891876fbd95ab89e5fe3\n```\n\n----------------------------------------\n\nTITLE: Setting Name Override\nDESCRIPTION: YAML configuration to set the nameOverride to maintain resource names during migration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-cortex.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nnameOverride: \"cortex\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Memberlist and Multi KV Store\nDESCRIPTION: Step 1 configuration that enables both memberlist and multi KV store functionality.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-consul-to-memberlist.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    memberlist_ring_enabled: true,\n    multikv_migration_enabled: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Final Memberlist Configuration\nDESCRIPTION: Final clean configuration using only memberlist as the KV store.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-consul-to-memberlist.md#2025-04-17_snippet_6\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    memberlist_ring_enabled: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Mimir\nDESCRIPTION: Command to install Mimir using Helm with custom values configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/configurations/grafanacon-2022/index.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install gcon grafana/mimir-distributed -f mimir-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Analyzing Downloaded Chunks\nDESCRIPTION: Go command to analyze and print the content of downloaded chunk dump files.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/grpcurl-query-ingesters/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo run . chunks-dump/*\n```\n\n----------------------------------------\n\nTITLE: Creating an http.FileSystem from a Directory in Go\nDESCRIPTION: Example of creating an http.FileSystem implementation using http.Dir to represent a directory on disk.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/shurcooL/vfsgen/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar fs http.FileSystem = http.Dir(\"/path/to/assets\")\n```\n\n----------------------------------------\n\nTITLE: Loading Alertmanager Configuration\nDESCRIPTION: Commands to load Alertmanager configuration and template files using Mimirtool.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool alertmanager load <config_file>\nmimirtool alertmanager load <config_file> <template_files>...\n```\n\n----------------------------------------\n\nTITLE: Using MemMapFs Backend in Go\nDESCRIPTION: Example of using Afero's MemMapFs backend for in-memory file operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmm := afero.NewMemMapFs()\nmm.MkdirAll(\"src/a\", 0755)\n```\n\n----------------------------------------\n\nTITLE: Closing Jaeger Tracer in Go Main Function\nDESCRIPTION: Recommended structure for closing the Jaeger tracer in the main function using defer.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntracer, closer, err := cfg.NewTracer(...)\ndefer closer.Close()\n```\n\n----------------------------------------\n\nTITLE: Initializing Resource in Go OpenTelemetry SDK\nDESCRIPTION: Added a default resource initialization function for use with meter and tracer providers.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nresource.Default()\n```\n\n----------------------------------------\n\nTITLE: Installing slog-gokit Adapter in Go\nDESCRIPTION: Command to install the slog-gokit adapter library using Go's package management system.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/tjhop/slog-gokit/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/tjhop/slog-gokit\n```\n\n----------------------------------------\n\nTITLE: Git Version Tagging and Release Commands\nDESCRIPTION: Commands used to create and push a signed git tag for a new release version\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/k8s.io/klog/v2/RELEASE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: First Stable Release\nDESCRIPTION: Initial stable v1.0.0 release of core modules\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\notel: v1.0.0\notel/trace: v1.0.0\notel/baggage: v1.0.0\notel/sdk/trace: v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing cpuid via Homebrew Command\nDESCRIPTION: Command to install the cpuid utility using the Homebrew package manager on macOS or Linux systems.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install cpuid\n```\n\n----------------------------------------\n\nTITLE: Scaling Write Component\nDESCRIPTION: Configuration to scale up the Mimir write component in the final migration step.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_7\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  _config+:: {\n    mimir_write_replicas: 3,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Zone-A Ingesters - Jsonnet Configuration\nDESCRIPTION: Jsonnet configuration to scale down ingester replicas in zone-a to zero after following proper shutdown procedures.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_10\n\nLANGUAGE: jsonnet\nCODE:\n```\n{\n  ingester_zone_a_statefulset+:\n    statefulSet.mixin.spec.withReplicas(0),\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Git Remote for Your Fork\nDESCRIPTION: Commands to navigate to the OpenCensus Go directory and add your fork as a Git remote. This enables pushing changes to your fork.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $(go env GOPATH)/src/go.opencensus.io\ngit remote add fork git@github.com:YOUR_GITHUB_USERNAME/opencensus-go.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Compression with S2 in Go\nDESCRIPTION: Demonstrates how to compress data using S2's streaming interface. Creates a new writer and copies data from source to destination, ensuring proper resource cleanup with Close()\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc EncodeStream(src io.Reader, dst io.Writer) error {\n    enc := s2.NewWriter(dst)\n    _, err := io.Copy(enc, src)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    // Blocks until compression is done.\n    return enc.Close() \n}\n```\n\n----------------------------------------\n\nTITLE: Checking Azure Developer CLI Configuration\nDESCRIPTION: Shell command to list the current Azure Developer CLI configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nazd config list\n```\n\n----------------------------------------\n\nTITLE: JSON Block Upload Status Response - Uploading\nDESCRIPTION: Example JSON response indicating block upload is in progress.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{ \"result\": \"uploading\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Telebot Package with Go\nDESCRIPTION: Command to install the Telebot package using Go modules.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u gopkg.in/telebot.v3\n```\n\n----------------------------------------\n\nTITLE: Setting Jaeger Environment Variables in Grafana Mimir\nDESCRIPTION: Environment variables required to configure Jaeger tracing in Grafana Mimir components. These variables control the connection to Jaeger agent and sampling configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-tracing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJAEGER_AGENT_HOST=<jaeger-agent-address>\nJAEGER_SAMPLER_MANAGER_HOST_PORT=<sampling-manager-address>\nJAEGER_SAMPLER_TYPE=<sampler-type>\nJAEGER_SAMPLER_PARAM=<sampler-param>\n```\n\n----------------------------------------\n\nTITLE: Defining Stdout Variable in Go\nDESCRIPTION: Definition of Stdout as an io.Writer for standard output of executed commands.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar Stdout io.Writer = os.Stdout\n```\n\n----------------------------------------\n\nTITLE: Regenerating Kubernetes API Schema\nDESCRIPTION: Commands for regenerating specific Kubernetes API schema components\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/sigs.k8s.io/kustomize/kyaml/openapi/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm kubernetesapi/swagger.go\nmake kubernetesapi/swagger.go\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Go Code using protoc and goimports\nDESCRIPTION: This snippet provides the command needed to regenerate Go code from protobuf file 'error.proto'. It requires the protoc compiler and goimports tool along with the necessary environment setup for googleapis.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/googleapis/gax-go/v2/apierror/internal/proto/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nprotoc -I $GOOGLEAPIS -I. --go_out=. --go_opt=module=github.com/googleapis/gax-go/v2/apierror/internal/proto error.proto\ngoimports -w .\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Compactor Tenant Planned Jobs Endpoint\nDESCRIPTION: API endpoint to retrieve a web page showing planned compaction jobs for a specific tenant.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_65\n\nLANGUAGE: http\nCODE:\n```\nGET /compactor/tenant/{tenant}/planned_jobs\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoint for Ingester Tenants\nDESCRIPTION: Endpoint to list tenants with open TSDB on the ingester.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nGET /ingester/tenants\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Mapstructure Use Case\nDESCRIPTION: JSON example demonstrating a use case for mapstructure where the structure of the data is not known until a specific field is read. This JSON contains a 'type' field that determines how the rest of the data should be decoded.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: GET Response from Ingester Unregister Endpoint in JSON\nDESCRIPTION: Example JSON response from the proposed /ingester/unregister-on-shutdown endpoint when using the GET method. Returns the current unregister state of the ingester.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/proposals/ingester-unregister-flexibility.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"unregister\": true }\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Mimir with Docker\nDESCRIPTION: Docker commands to create network and run Grafana Mimir container with configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create grafanet\n\ndocker run \\\n  --rm \\\n  --name mimir \\\n  --network grafanet \\\n  --publish 9009:9009 \\\n  --volume \"$(pwd)\"/demo.yaml:/etc/mimir/demo.yaml grafana/mimir:latest \\\n  --config.file=/etc/mimir/demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Reading S3 Configuration with Koanf in Go\nDESCRIPTION: This snippet demonstrates how to load a JSON configuration file from an S3 bucket using Koanf. It uses environment variables for AWS credentials and bucket information.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Load JSON config from s3.\nif err := k.Load(s3.Provider(s3.Config{\n\tAccessKey: os.Getenv(\"AWS_S3_ACCESS_KEY\"),\n\tSecretKey: os.Getenv(\"AWS_S3_SECRET_KEY\"),\n\tRegion:    os.Getenv(\"AWS_S3_REGION\"),\n\tBucket:    os.Getenv(\"AWS_S3_BUCKET\"),\n\tObjectKey: \"dir/config.json\",\n}), json.Parser()); err != nil {\n\tlog.Fatalf(\"error loading config: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing RehydratePriority Enum in Swagger\nDESCRIPTION: Modifies the RehydratePriority enum in the Swagger document to use a specific name and modelAsString property.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.RehydratePriority[\"x-ms-enum\"];\n    $.RehydratePriority[\"x-ms-enum\"] = {\n        \"name\": \"RehydratePriority\",\n        \"modelAsString\": false\n    };\n```\n\n----------------------------------------\n\nTITLE: OpenStack Swift Configuration\nDESCRIPTION: This YAML snippet provides an example configuration for using OpenStack Swift as the object store for Thanos. It details parameters for authentication, region, container name, large object handling (SLO/DLO), retry settings, connection timeouts, and HTTP settings. `mdox-exec` is used to generate configuration file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml mdox-exec=\"go run scripts/cfggen/main.go --name=swift.Config\"\ntype: SWIFT\nconfig:\n  auth_version: 0\n  auth_url: \"\"\n  username: \"\"\n  user_domain_name: \"\"\n  user_domain_id: \"\"\n  user_id: \"\"\n  password: \"\"\n  domain_id: \"\"\n  domain_name: \"\"\n  application_credential_id: \"\"\n  application_credential_name: \"\"\n  application_credential_secret: \"\"\n  project_id: \"\"\n  project_name: \"\"\n  project_domain_id: \"\"\n  project_domain_name: \"\"\n  region_name: \"\"\n  container_name: \"\"\n  large_object_chunk_size: 1073741824\n  large_object_segments_container_name: \"\"\n  retries: 3\n  connect_timeout: 10s\n  timeout: 5m\n  use_dynamic_large_objects: false\n  http_config:\n    idle_conn_timeout: 1m30s\n    response_header_timeout: 2m\n    insecure_skip_verify: false\n    tls_handshake_timeout: 10s\n    expect_continue_timeout: 1s\n    max_idle_conns: 100\n    max_idle_conns_per_host: 100\n    max_conns_per_host: 0\n    tls_config:\n      ca_file: \"\"\n      cert_file: \"\"\n      key_file: \"\"\n      server_name: \"\"\n      insecure_skip_verify: false\n    disable_compression: false\nprefix: \"\"\n```\n```\n\n----------------------------------------\n\nTITLE: Handling etcd Client Errors\nDESCRIPTION: Comprehensive error handling for etcd client operations. This shows how to handle different types of errors including context errors and gRPC-specific errors from the etcd API.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nresp, err := cli.Put(ctx, \"\", \"\")\nif err != nil {\n\tswitch err {\n\tcase context.Canceled:\n\t\tlog.Fatalf(\"ctx is canceled by another routine: %v\", err)\n\tcase context.DeadlineExceeded:\n\t\tlog.Fatalf(\"ctx is attached with a deadline is exceeded: %v\", err)\n\tcase rpctypes.ErrEmptyKey:\n\t\tlog.Fatalf(\"client-side error: %v\", err)\n\tdefault:\n\t\tlog.Fatalf(\"bad cluster endpoints, which are not etcd servers: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Memcached DNS Configuration Update\nDESCRIPTION: Updated DNS configuration using dnssrvnoa+ prefix instead of dns+ for better cache retention during cluster changes.\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naddress: \"dnssrvnoa+memcached-cluster\"\n```\n\n----------------------------------------\n\nTITLE: Releasing Docker Resources\nDESCRIPTION: This command releases all Docker resources used in the tutorial, including volumes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/play-with-grafana-mimir/index.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down -v\n```\n\n----------------------------------------\n\nTITLE: Unified Release Candidate\nDESCRIPTION: Release candidate for bringing all modules to stable v1.1.0\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_8\n\nLANGUAGE: text\nCODE:\n```\notel: v1.1.0-RC1\notel/trace: v1.1.0-RC1\notel/metric: v1.1.0-RC1\notel/baggage: v1.1.0-RC1\notel/sdk/trace: v1.1.0-RC1\notel/sdk/metric: v1.1.0-RC1\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_21\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```\n\n----------------------------------------\n\nTITLE: Comparing Kustomize Outputs Script Example 1\nDESCRIPTION: Command showing how to compare changes between two Kustomize overlays in the helm directory, specifically examining differences between the 8th and 9th overlays.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/contributing-to-helm-chart.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd operations/compare-helm-with-jsonnet\n./compare-kustomize-outputs.sh ./helm/08-* ./helm/09-*\n```\n\n----------------------------------------\n\nTITLE: Implementing the StoredMessage Type in Go\nDESCRIPTION: The StoredMessage struct implements the Editable interface, allowing its instances to provide message signatures for edits. This struct is designed to be stored in a database, containing the necessary fields to support message ID and chat ID retrieval for Telegram message handling.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/gopkg.in/telebot.v3/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// StoredMessage is an example struct suitable for being\n// stored in the database as-is or being embedded into\n// a larger struct, which is often the case (you might\n// want to store some metadata alongside, or might not.)\ntype StoredMessage struct {\n\tMessageID int   `sql:\"message_id\" json:\"message_id\"`\\\n\tChatID    int64 `sql:\"chat_id\" json:\"chat_id\"`\n}\n\nfunc (x StoredMessage) MessageSig() (int, int64) {\n\treturn x.MessageID, x.ChatID\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Core Client Module for Go\nDESCRIPTION: This command adds the latest version of the Azure Core Client Module to your Go module dependencies using the go get command.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore\n```\n\n----------------------------------------\n\nTITLE: Changelog Document Example\nDESCRIPTION: This JSON snippet represents the format for changelog files, which are required when submitting pull requests that affect the runtime. It specifies the ID, type, collapse behavior, description, and affected modules of the change.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/aws/smithy-go/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"id\": \"12345678-1234-1234-1234-123456789012\"\n    \"type\": \"bugfix\"\n    \"collapse\": true\n    \"description\": \"Fix improper use of printf-style functions.\",\n    \"modules\": [\n        \".\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Speeding Up Timeout Testing\nDESCRIPTION: This Go code snippet shows how to set up a faster timeout clock cycle when testing with Regexp2. It's applicable for tests requiring quick executions with timeout features in Regexp2. The setup function isn't threadsafe and should be initialized before the use.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\t//speed up testing by making the timeout clock 1ms\n\tregexp2.SetTimeoutCheckPeriod(time.Millisecond)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Storage Provider in YAML\nDESCRIPTION: This snippet shows the general YAML format for configuring an object storage provider using the objstore factory. It includes a type field to specify the provider and a config section for provider-specific options.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: <PROVIDER_TYPE>\nconfig:\n  <PROVIDER_TYPE specific options>\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenCensus Go Repository\nDESCRIPTION: Command to fetch the OpenCensus Go repository from GitHub using the Go tools. This places the repository in your GOPATH.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -d go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Initializing Jsonnet in Bash\nDESCRIPTION: Command to initialize Jsonnet for infrastructure as code.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njb init\n```\n\n----------------------------------------\n\nTITLE: Fix: Remove content-type header from IDMS requests\nDESCRIPTION: This commit removes the `content-type` header from IDMS (Identity Management System) GET requests within the `auth` package. This change addresses potential compatibility issues or security vulnerabilities related to the `content-type` header in IDMS requests. The commit is associated with issue #9508.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n8589f41599d265d7c3d46a3d86c9fab2329cbdd9\n```\n\n----------------------------------------\n\nTITLE: CPU Feature Flags Table in Markdown\nDESCRIPTION: A markdown table documenting CPU feature flags and their descriptions for x86 and amd64 architectures. Includes detailed descriptions of various instruction set extensions like AVX, AMX, BMI, and security features.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature Flag       | Description                                                                                                                                                                        |\n|--------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: CallErr Implementation Example\nDESCRIPTION: Shows how CallErr is implemented in the comm package when handling HTTP requests and responses.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nreturn nil, errors.CallErr{\n    Req:  req,\n    Resp: reply,\n    Err:  fmt.Errorf(\"http call(%s)(%s) error: reply status code was %d:\\n%s\", req.URL.String(), req.Method, reply.StatusCode, ErrorResponse), //ErrorResponse is the json body extracted from the http response\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing xstrings Package in Go\nDESCRIPTION: This snippet shows how to install the xstrings package using the go get command. It downloads and installs the package from the specified GitHub repository.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/huandu/xstrings/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/huandu/xstrings\n```\n\n----------------------------------------\n\nTITLE: Transforming Go Flags into JSON using Bash\nDESCRIPTION: This Bash script converts Go-style flags stored in a file into JSON key-value pairs. It uses sed for string manipulation and outputs a properly formatted JSON object. The only parameter required is the file containing the flags, with each flag on its own line, for subsequent usage in configurations.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nset -euf -o pipefail\n\nfunction usage {\n cat <<EOF\nTransform Go flags into JSON key value pairs\n\nUsage:\n $0 <flags file>\n\nExamples:\n $0 flags.flags\nEOF\n}\n\nif [[ $# -ne 1 ]]; then\n usage\n exit 1\nfi\n\nkey_values=$(sed -E -e 's/^-*(.*)=(.*)$/  \"\\1\": \"\\2\",/' \"$1\")\nprintf \"{\\n%s\\n}\" \"${key_values::-1}\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Go Library\nDESCRIPTION: Command to install the OpenCensus Go library using go get.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Installing INI Package with Go Get\nDESCRIPTION: Command to install the INI package using Go's package management tool. It specifies the package source and version.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-ini/ini/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ go get gopkg.in/ini.v1\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Trace ID via HTTP Headers\nDESCRIPTION: Shows how to force sampling for a new trace by setting the jaeger-debug-id HTTP header. This ensures the trace will be sampled in debug mode and can be found in the Jaeger UI using the correlation ID.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"jaeger-debug-id: some-correlation-id\" http://myhost.com\n```\n\n----------------------------------------\n\nTITLE: Example UTF-8 Incompatibility Log Message\nDESCRIPTION: Sample log output showing an incompatible matcher configuration that needs to be updated for UTF-8 support. Shows how the system identifies problematic configurations and provides suggestions for fixes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/components/alertmanager.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmsg=\"Alertmanager is moving to a new parser for labels and matchers, and this input is incompatible. Alertmanager has instead parsed the input using the classic matchers parser as a fallback. To make this input compatible with the UTF-8 matchers parser please make sure all regular expressions and values are double-quoted. If you are still seeing this message please open an issue.\" input=\"foo=\" err=\"end of input: expected label value\" suggestion=\"foo=\\\"\\\"\" user=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for Go Package Documentation\nDESCRIPTION: Displays a badge linking to the package documentation on pkg.go.dev for the OpenTelemetry baggage module.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.opentelemetry.io/otel/baggage/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/baggage)](https://pkg.go.dev/go.opentelemetry.io/otel/baggage)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages in Struct Validation Tags\nDESCRIPTION: Demonstrates how to add custom error messages to struct validation tags using the tilde separator.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype Ticket struct {\n  Id        int64     `json:\"id\"`\n  FirstName string    `json:\"firstname\" valid:\"required~First name is blank\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Welcome Message and Gateway Selection\nDESCRIPTION: Conditional template logic that sets the welcome message based on enterprise status and configures the gateway settings between nginx and custom gateway\nSOURCE: https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{ if .Values.enterprise.enabled }}\nWelcome to Grafana Enterprise Metrics!\n{{- else }}\nWelcome to Grafana Mimir!\n{{- end }}\n{{- $gateway := .Values.nginx }}\n{{- if eq (include \"mimir.gateway.isEnabled\" .) \"true\" }}\n{{- $gateway = .Values.gateway }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Entries in Markdown\nDESCRIPTION: Example of how changelog entries are structured using Markdown syntax. Each version is a second-level heading, followed by third-level headings for change categories like 'Added', 'Changed', and 'Fixed'.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/atomic/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.11.0] - 2023-05-02\n### Fixed\n- Fix initialization of `Value` wrappers.\n\n### Added\n- Add `String` method to `atomic.Pointer[T]` type allowing users to safely print\nunderlying values of pointers.\n\n[1.11.0]: https://github.com/uber-go/atomic/compare/v1.10.0...v1.11.0\n```\n\n----------------------------------------\n\nTITLE: Installing go-str2duration library with Go modules\nDESCRIPTION: Command to download and install the go-str2duration library using Go modules. This fetches version 2 of the library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/xhit/go-str2duration/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/xhit/go-str2duration/v2\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Pod Labels in Kubernetes\nDESCRIPTION: Configuration for adding POD labels to PODs directly controlled by the Mimir Helm chart, including Mimir services and nginx.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/release-notes/v4.5.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal.podLabels\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Documentation v1.6.0\nDESCRIPTION: Details behavioral changes in DefaultAzureCredential when using IMDS managed identity, specifically regarding the initial request handling without the Metadata header.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/BREAKING_CHANGES.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Behavioral change to `DefaultAzureCredential` in IMDS managed identity scenarios\n\nAs of `azidentity` v1.6.0, `DefaultAzureCredential` makes a minor behavioral change when it uses IMDS managed\nidentity. It sends its first request to IMDS without the \"Metadata\" header, to expedite validating whether the endpoint\nis available. This precedes the credential's first token request and is guaranteed to fail with a 400 error. This error\nresponse can appear in logs but doesn't indicate authentication failed.\n```\n\n----------------------------------------\n\nTITLE: Disabling Memcached Configuration in Helm Values\nDESCRIPTION: YAML configuration to disable the built-in Memcached instances in Grafana Mimir's Helm chart by setting enabled flag to false for all cache types.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/configure/configure-redis-cache.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nchunks-cache:\n  enabled: false\nindex-cache:\n  enabled: false\nmetadata-cache:\n  enabled: false\nresults-cache:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Displaying S2 vs Snappy Decompression Speed Comparison Table in Markdown\nDESCRIPTION: This markdown table compares the decompression speeds of S2 and Snappy compression algorithms for various file types. It shows S2's throughput, its performance relative to Snappy, and the same metrics for S2's 'better' mode.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| File                                                                                                | S2 Throughput | vs. Snappy | Better Throughput | vs. Snappy |\n|-----------------------------------------------------------------------------------------------------|---------------|------------|-------------------|------------|\n| [rawstudio-mint14.tar](https://files.klauspost.com/compress/rawstudio-mint14.7z)                    | 2117 MB/s     | 1.14x      | 1738 MB/s         | 0.94x      |\n| [github-june-2days-2019.json](https://files.klauspost.com/compress/github-june-2days-2019.json.zst) | 2401 MB/s     | 1.25x      | 2307 MB/s         | 1.20x      |\n| [github-ranks-backup.bin](https://files.klauspost.com/compress/github-ranks-backup.bin.zst)         | 2075 MB/s     | 0.98x      | 1764 MB/s         | 0.83x      |\n| [consensus.db.10gb](https://files.klauspost.com/compress/consensus.db.10gb.zst)                     | 2967 MB/s     | 1.05x      | 2885 MB/s         | 1.02x      |\n| [adresser.json](https://files.klauspost.com/compress/adresser.json.zst)                             | 4141 MB/s     | 1.07x      | 4184 MB/s         | 1.08x      |\n| [gob-stream](https://files.klauspost.com/compress/gob-stream.7z)                                    | 2264 MB/s     | 1.12x      | 2185 MB/s         | 1.08x      |\n| [10gb.tar](http://mattmahoney.net/dc/10gb.html)                                                     | 1525 MB/s     | 1.03x      | 1347 MB/s         | 0.91x      |\n| sharnd.out.2gb                                                                                      | 3813 MB/s     | 0.79x      | 3900 MB/s         | 0.81x      |\n| [enwik9](http://mattmahoney.net/dc/textdata.html)                                                   | 1246 MB/s     | 1.29x      | 967 MB/s          | 1.00x      |\n| [silesia.tar](http://sun.aei.polsl.pl/~sdeor/corpus/silesia.zip)                                    | 1433 MB/s     | 1.12x      | 1203 MB/s         | 0.94x      |\n| [enwik10](https://encode.su/threads/3315-enwik10-benchmark-results)                                 | 1284 MB/s     | 1.32x      | 1010 MB/s         | 1.04x      |\n```\n\n----------------------------------------\n\nTITLE: Executing listblocks command in Grafana Mimir\nDESCRIPTION: This snippet demonstrates how to run the listblocks command to display block details for a specific tenant in a GCS bucket. It shows the basic output format including Block ID, Min Time, Max Time, and Duration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/listblocks.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./listblocks -backend=gcs -gcs.bucket-name=bucket-with-blocks -user=10428\nBlock ID                     Min Time               Max Time               Duration\n01E0HMK47RGAAKZJBMG8B8QXGP   2020-02-07T07:49:46Z   2020-02-08T00:00:00Z   16h10m13.89s\n01E0M0VK2KEDZC5AK1PX8K00EX   2020-02-08T00:00:00Z   2020-02-09T00:00:00Z   24h0m0s\n01E0PK9B84XJ9KQ0DHZDQECNH6   2020-02-09T00:00:00Z   2020-02-10T00:00:00Z   24h0m0s\n01E0S8VAKJ0H41N41GBKQN4G1N   2020-02-10T00:00:00Z   2020-02-11T00:00:00Z   24h0m0s\n01E0VTN88859KW1KTDVBS14E7A   2020-02-11T00:00:00Z   2020-02-12T00:00:00Z   24h0m0s\n01E0YCZKFG2ME5GZ60AYCQ39V4   2020-02-12T00:00:00Z   2020-02-13T00:00:00Z   24h0m0s\n01E111CX17BXFZD97AKSYKX0A5   2020-02-13T00:00:00Z   2020-02-14T00:00:00Z   24h0m0s\n01E13JCZK9A5SJMAY6QSSEB0XX   2020-02-14T00:00:00Z   2020-02-15T00:00:00Z   24h0m0s\n01E164EJFPT8ZCY6QWEKNJ0VYX   2020-02-15T00:00:00Z   2020-02-16T00:00:00Z   24h0m0s\n...\n```\n\n----------------------------------------\n\nTITLE: Using Afero for Testing in Go\nDESCRIPTION: Example of using Afero's MemMapFs for testing file operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TestExist(t *testing.T) {\n\tappFS := afero.NewMemMapFs()\n\t// create test files and directories\n\tappFS.MkdirAll(\"src/a\", 0755)\n\tafero.WriteFile(appFS, \"src/a/b\", []byte(\"file b\"), 0644)\n\tafero.WriteFile(appFS, \"src/c\", []byte(\"file c\"), 0644)\n\tname := \"src/c\"\n\t_, err := appFS.Stat(name)\n\tif os.IsNotExist(err) {\n\t\tt.Errorf(\"file \\\"%s\\\" does not exist.\\n\", name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Memberlist Cluster Information in Grafana Mimir\nDESCRIPTION: This endpoint shows information about the Memberlist cluster, including the list of nodes, their health, and KV store details. If message history is enabled, it also displays received and sent messages.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET /memberlist\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote Address in Go HTTP Handler\nDESCRIPTION: This code snippet demonstrates how to access the original source IP address from an HTTP request when PROXY protocol is enabled.  It uses `net.SplitHostPort` to extract the IP address from `Request.RemoteAddr`. The expected input is an HTTP request (`r`) and the output is the extracted IP address as a string.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/dskit/server/PROXYPROTOCOL.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nserver.HTTP.HandleFunc(\"/your-endpoint\", func(w http.ResponseWriter, r *http.Request) {\n    ip, _, err := net.SplitHostPort(r.RemoteAddr)\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Command Completion in Kingpin\nDESCRIPTION: Demonstrates how to provide dynamic completion options by implementing a function that returns a slice of strings. The example shows completing hostnames from a theoretical hosts file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/kingpin/v2/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc listHosts() []string {\n  // Provide a dynamic list of hosts from a hosts file or otherwise\n  // for bash completion. In this example we simply return static slice.\n\n  // You could use this functionality to reach into a hosts file to provide\n  // completion for a list of known hosts.\n  return []string{\"sshhost.example\", \"webhost.example\", \"ftphost.example\"}\n}\n\napp := kingpin.New(\"completion\", \"My application with bash completion.\")\napp.Flag(\"flag-1\", \"\").HintAction(listHosts).String()\n```\n\n----------------------------------------\n\nTITLE: Helm Upgrade Commands for Mimir\nDESCRIPTION: Commands for upgrading Mimir helm release with the new HA deduplication configuration.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configure-helm-ha-deduplication-consul/index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n <mimir-namespace> upgrade mimir grafana/mimir-distributed -f custom.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <mimir-namespace> port-forward service/mimir-distributor 8080:8080\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <mimir-namespace> get service | grep distributor\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Experimental PromQL Function Overrides in Mimir YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable experimental PromQL functions for specific tenants using per-tenant overrides. It shows two examples: one enabling specific functions for a tenant, and another enabling all experimental functions for a different tenant.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-experimental-promql-functions.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  \"tenant-id-1\":\n    # Enable only specific functions for this tenant\n    enabled_promql_experimental_functions: sort_by_label,sort_by_label_desc\n  \"tenant-id-2\":\n    # Enable all experimental functions for this tenant\n    enabled_promql_experimental_functions: all\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Mimir Integration Test\nDESCRIPTION: Command showing how to run a single integration test by using Go's test filtering functionality with a regular expression pattern.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/contributing/how-integration-tests-work.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v -tags=requires_docker ./integration -run \"^TestChunksStorageAllIndexBackends$\"\n```\n\n----------------------------------------\n\nTITLE: Copying Objects Between Azure Blob Storage Containers\nDESCRIPTION: Command to copy objects between Azure Blob Storage containers with authentication details and skip overwrites option.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/copyprefix/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./copyprefix \\\n  --source.backend azure \\\n  --destination.backend azure \\\n  --azure.source.container-name <source container name> \\\n  --azure.source.account-name <source account name> \\\n  --azure.source.account-key <source account key> \\\n  --azure.destination.container-name <destination container name> \\\n  --azure.destination.account-name <destination account name> \\\n  --azure.destination.account-key <destination account key> \\\n  --source-prefix rules \\\n  --skip-overwrites \\\n  --dry-run\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Consul Client\nDESCRIPTION: This snippet shows how to initialize a new Go module for using the Consul client library. It sets up the project environment by creating a go.mod file.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init consul-demo\n```\n\n----------------------------------------\n\nTITLE: Fix: Default gRPC Token Type\nDESCRIPTION: This commit addresses an issue where the gRPC token type was not explicitly set. It modifies the auth module to default the gRPC token type to \"Bearer\" if no type is initially specified. This resolves potential authentication failures or unexpected behavior when using gRPC with Google Cloud services.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n5284066670b6fe65d79089cfe0199c9660f87fc7\n```\n\n----------------------------------------\n\nTITLE: Creating No-Compact Marks with mark-blocks Tool in Bash\nDESCRIPTION: This snippet illustrates the usage of the mark-blocks tool to create no-compact marks for specified blocks. It displays the directory structure before and after executing the tool, and includes the command to create no-compact marks with details.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/mark-blocks.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS7Z\n\n$ touch tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/meta.json\n\n$ tree -f tenant-1\ntenant-1\n├── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R\n│   └── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/meta.json\n└── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS7Z\n\n3 directories, 1 file\n\n$ go run ./tools/mark-blocks -mark-type no-compact -tenant tenant-1 -details \"Blocks with out of order chunks\" -blocks \"01FSCTA0A4M1YQHZQ4B2VTGS2R,01FSCTA0A4M1YQHZQ4B2VTGS7Z\"\nlevel=info time=2025-02-10T14:27:46.232169Z msg=\"skipping block because its meta.json was not found: 01FSCTA0A4M1YQHZQ4B2VTGS7Z\"\nlevel=info time=2025-02-10T14:27:46.232419Z msg=\"uploaded mark to tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/no-compact-mark.json\"\nlevel=info time=2025-02-10T14:27:46.232621Z msg=\"uploaded mark to tenant-1/markers/01FSCTA0A4M1YQHZQ4B2VTGS2R-no-compact-mark.json\"\n\n$ tree -f tenant-1\ntenant-1\n├── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R\n│   ├── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/meta.json\n│   └── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS2R/no-compact-mark.json\n├── tenant-1/01FSCTA0A4M1YQHZQ4B2VTGS7Z\n└── tenant-1/markers\n    └── tenant-1/markers/01FSCTA0A4M1YQHZQ4B2VTGS2R-no-compact-mark.json\n\n4 directories, 3 files\n```\n\n----------------------------------------\n\nTITLE: Basic Forward Seeking with S2 Reader\nDESCRIPTION: Demonstrates how to create a forward-only seeking reader without providing an index. The index is read from the stream, requiring the input to support io.Seeker interface.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(false, nil)\n\trs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: Convert to Roaring Bitmap\nDESCRIPTION: Shows how to convert a standard bitset to a Roaring bitmap for potentially better memory usage in certain scenarios. Uses the `ToBitSet` method from the `roaringbitmap` library.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n\t\t\tmybitset := roaringbitmap.ToBitSet()\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Realtime Clock in Go\nDESCRIPTION: This snippet shows how to initialize a `Clock` variable in the `Application` type to use the realtime clock for time-related functionality. The Clock library is imported and utilized to create a new clock instance.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/benbjohnson/clock/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/benbjohnson/clock\"\n\ntype Application struct {\n\tClock clock.Clock\n}\n\nvar app Application\napp.Clock = clock.New()\n...\n```\n\n----------------------------------------\n\nTITLE: Visualizing Temporary Fast Queue Starvation with Queue Prioritization in Mermaid\nDESCRIPTION: Gantt chart visualization showing how querier-worker queue prioritization handles temporary fast queue starvation. The diagram illustrates how four consumers process a mix of fast queries (1s each) and slow queries (8s each), demonstrating the system's behavior when fast query queues are temporarily emptied and recreated.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/scheduler/DESIGN.md#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Temporary Fast Queue Starvation with Querier-Worker Queue Prioritization\nconfig:\n  gantt:\n    displayMode: compact\n    numberSectionStyles: 2\n  theme: default\n---\ngantt\n    dateFormat ss\n    axisFormat %S\n    tickInterval 1second\n\n    section consumer-1\n        fast        :active, c1-1, 00, 1s\n        fast        :active, c1-2, 01, 1s\n        fast        :active, c1-3, 02, 1s\n        fast        :active, c1-4, 03, 1s\n        slow        :done, c1-5, 04, 8s\n        fast        :active, c1-6, 12, 1s\n        fast        :active, c1-7, 13, 1s\n        fast        :active, c1-8, 14, 1s\n        fast        :active, c1-9, 15, 1s\n\n    section consumer-2\n        fast        :active, c2-1, 00, 1s\n        fast        :active, c2-2, 01, 1s\n        fast        :active, c2-3, 02, 1s\n        fast        :active, c2-4, 03, 1s\n        slow        :done, c2-5, 04, 8s\n        fast        :active, c2-6, 12, 1s\n        fast        :active, c2-7, 13, 1s\n        fast        :active, c2-8, 14, 1s\n        fast        :active, c2-9, 15, 1s\n\n    section consumer-3\n        slow        :done, c3-1, 00, 8s\n        slow        :done, c3-2, 08, 8s\n\n    section consumer-4\n        slow        :done, c4-1, 00, 8s\n        slow        :done, c4-2, 08, 8s\n```\n\n----------------------------------------\n\nTITLE: Generating Ordinal Numbers - Go\nDESCRIPTION: This snippet showcases the `humanize.Ordinal` function that converts a numerical input into its corresponding ordinal string representation (e.g., 1 becomes '1st'). It can be useful for displaying rankings or positions.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"You're my %s best friend.\", humanize.Ordinal(193)) // You are my 193rd best friend.\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Notification Footer in Go\nDESCRIPTION: This template adds a footer to the notification indicating the sender and the year.  It uses the `now` and `date` functions to get the current year.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/alerting/receivers/templates/ng_alert_notification.txt#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nSent by {{.SentBy}} (c) {{now | date \"2006\"}} Grafana Labs\n```\n\n----------------------------------------\n\nTITLE: Defining the Default Alertmanager Message Template in Go\nDESCRIPTION: This template defines the structure of the default alert message. It displays the number of firing and resolved alerts, summarizes them, and provides a link to the alerts page.  It uses other templates defined within this file to summarize the alerts.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/alerting/receivers/templates/ng_alert_notification.txt#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n{{- define \"__default_message\" -}}\nYou have {{ len .Alerts.Firing }} firing alert(s), and {{ len .Alerts.Resolved }} resolved alert(s) for {{ .GroupLabels }}\n\n{{ if .Alerts.Firing -}}\n({{ len .Alerts.Firing }}) FIRING\n-----------\n{{ template \"__default_alerts_summarize\" .Alerts.Firing }}\n{{- end }}\n\n{{- if .Alerts.Resolved }}\n({{ len .Alerts.Resolved }}) RESOLVED\n-------------\n{{ template \"__default_alerts_summarize\" .Alerts.Resolved }}\n{{- end }}\nGo to the Alerts page: {{ .AlertPageUrl }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Updating Proto File Imports in Store Gateway\nDESCRIPTION: Shell command to modify import statements in protobuf files within the store gateway package. It uses sed to replace github.com/grafana/mimir/pkg/ imports with pkg/ in all .proto files.\nSOURCE: https://github.com/grafana/mimir/blob/main/tools/grpcurl-query-store-gateways/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind pkg/storegateway -type f -name \"*.proto\" -exec sed -i '' 's#import \"github.com/grafana/mimir/pkg/#import \"pkg/#g' {} +\n```\n\n----------------------------------------\n\nTITLE: Updating ClientCertificateCredential Initialization - Go\nDESCRIPTION: This snippet illustrates the new way to initialize 'ClientCertificateCredential', replacing the certificate file path with parsed certificate data, which is read from a file. This adjustment promotes better management of certificate data directly in memory.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewClientCertificateCredential(\"tenant\", \"client-id\", \"/cert.pem\", nil)\n\n// after\ncertData, err := os.ReadFile(\"/cert.pem\")\ncerts, key, err := ParseCertificates(certData, password)\ncred, err := NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Multi-architecture Build Image\nDESCRIPTION: Make command to build and push a multi-platform Docker image for both Linux/amd64 and Linux/arm64 architectures.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/how-to-update-the-build-image.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake push-multiarch-build-image\n```\n\n----------------------------------------\n\nTITLE: Getting Azure Developer CLI Token\nDESCRIPTION: Shell command to obtain an authentication token from Azure Developer CLI.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nazd auth token --output json --scope https://management.core.windows.net/.default\n```\n\n----------------------------------------\n\nTITLE: Bitmap Structure for Field Optimization in Go\nDESCRIPTION: This snippet demonstrates the bitmap structure used for field optimization in go-json. It shows how each field is assigned a specific bit in the bitmap.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n[maxFieldKeyLength][256]int8\n```\n\n----------------------------------------\n\nTITLE: Running Query Step Alignment Analysis with Logcli\nDESCRIPTION: Command to fetch query-frontend logs from Loki using logcli, filter for query_range API calls, and analyze step alignment statistics. Requires a configured Loki environment and logcli setup for the Mimir cluster.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/internal/tools/query-step-alignment-analysis.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogcli query '{namespace=\"mimir\", container=\"query-frontend\"} |=\"path=/prometheus/api/v1/query_range\" | logfmt' --limit 1000000 --output jsonl | go run main.go\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Go OLE Example\nDESCRIPTION: Instructions for installing the Go OLE package and running an example Excel program. This snippet demonstrates how to get the package, run tests, and execute a sample application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/go-ole/go-ole/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/go-ole/go-ole\ncd /path/to/go-ole/\ngo test\n\ncd /path/to/go-ole/example/excel\ngo run excel.go\n```\n\n----------------------------------------\n\nTITLE: Setting RECORD Environment Variable in Windows Command Prompt\nDESCRIPTION: This command sets the RECORD environment variable to true in a Windows command prompt session, preparing for Chroma lexer test data regeneration.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/alecthomas/chroma/v2/lexers/README.md#2025-04-17_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nset RECORD=true\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining page metadata including aliases, description, and titles for the documentation.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/about-ingester-circuit-breakers.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n  - ../configuring/configuring-ingester-circuit-breakers/\ndescription: Learn about ingester circuit breakers.\nmenuTitle: Ingester circuit breakers\ntitle: About Grafana Mimir ingester circuit breakers\n```\n\n----------------------------------------\n\nTITLE: Changing CPK Acronym to All Capitals\nDESCRIPTION: YAML directive that changes all occurrences of 'Cpk' to 'CPK' in the Go source files to maintain consistent acronym casing.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >\n      return $.\n        replace(/Cpk/g, \"CPK\");\n```\n\n----------------------------------------\n\nTITLE: Original NGINX Configuration\nDESCRIPTION: Example of original Helm values configuration using NGINX setup, including replicas, deployment strategy, authentication, and ingress settings.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nnginx:\n  enabled: true\n  replicas: 4\n\n  deploymentStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 100%\n      maxUnavailable: 10%\n\n  affinity: |\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n            - key: noisyNeighbour\n              operator: In\n              values:\n                - 'true'\n        topologyKey: 'kubernetes.io/hostname'\n\n  extraEnv:\n    - name: SPECIAL_TYPE_KEY\n      valueFrom:\n        configMapKeyRef:\n          name: special-config\n          key: SPECIAL_TYPE\n\n  basicAuth:\n    enabled: true\n    username: user\n    password: pass\n\n  image:\n    tag: 1.25-alpine\n\n  nginxConfig:\n    logFormat: |-\n      main '$remote_addr - $remote_user [$time_local]  $status '\n      '\"$request\" $body_bytes_sent \"$http_referer\" '\n      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n  podSecurityContext:\n    readOnlyRootFilesystem: true\n\n  ingress:\n    enabled: true\n    hosts:\n      - host: mimir.example.com\n        paths:\n          - path: /\n            pathType: Prefix\n    tls:\n      - secretName: mimir-gateway-tls\n        hosts:\n          - mimir.example.com\n```\n\n----------------------------------------\n\nTITLE: Merging Release Branch to Main\nDESCRIPTION: Script command to create a pull request for merging the release branch into the main branch.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./tools/release/create-pr-to-merge-release-branch-to-main.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruler Ring Settings in YAML\nDESCRIPTION: Sets up the ring configuration for distributed ruler instances. This includes options for the key-value store, heartbeat settings, and instance registration details.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_72\n\nLANGUAGE: yaml\nCODE:\n```\nring:\n  # The key-value store used to share the hash ring across multiple instances.\n  kvstore:\n    # Backend storage to use for the ring. Supported values are: consul, etcd,\n    # inmemory, memberlist, multi.\n    # CLI flag: -ruler.ring.store\n    [store: <string> | default = \"memberlist\"]\n\n    # (advanced) The prefix for the keys in the store. Should end with a /.\n    # CLI flag: -ruler.ring.prefix\n    [prefix: <string> | default = \"rulers/\"]\n\n    # The consul block configures the consul client.\n    # The CLI flags prefix for this block configuration is: ruler.ring\n    [consul: <consul>]\n\n    # The etcd block configures the etcd client.\n    # The CLI flags prefix for this block configuration is: ruler.ring\n    [etcd: <etcd>]\n\n    multi:\n      # (advanced) Primary backend storage used by multi-client.\n      # CLI flag: -ruler.ring.multi.primary\n      [primary: <string> | default = \"\"]\n\n      # (advanced) Secondary backend storage used by multi-client.\n      # CLI flag: -ruler.ring.multi.secondary\n      [secondary: <string> | default = \"\"]\n\n      # (advanced) Mirror writes to secondary store.\n      # CLI flag: -ruler.ring.multi.mirror-enabled\n      [mirror_enabled: <boolean> | default = false]\n\n      # (advanced) Timeout for storing value to secondary store.\n      # CLI flag: -ruler.ring.multi.mirror-timeout\n      [mirror_timeout: <duration> | default = 2s]\n\n  # (advanced) Period at which to heartbeat to the ring. 0 = disabled.\n  # CLI flag: -ruler.ring.heartbeat-period\n  [heartbeat_period: <duration> | default = 15s]\n\n  # (advanced) The heartbeat timeout after which rulers are considered unhealthy\n  # within the ring. 0 = never (timeout disabled).\n  # CLI flag: -ruler.ring.heartbeat-timeout\n  [heartbeat_timeout: <duration> | default = 1m]\n\n  # (advanced) Instance ID to register in the ring.\n  # CLI flag: -ruler.ring.instance-id\n  [instance_id: <string> | default = \"<hostname>\"]\n\n  # List of network interface names to look up when finding the instance IP\n  # address.\n  # CLI flag: -ruler.ring.instance-interface-names\n  [instance_interface_names: <list of strings> | default = [<private network interfaces>]]\n\n  # (advanced) Port to advertise in the ring (defaults to\n  # -server.grpc-listen-port).\n  # CLI flag: -ruler.ring.instance-port\n  [instance_port: <int> | default = 0]\n\n  # (advanced) IP address to advertise in the ring. Default is auto-detected.\n  # CLI flag: -ruler.ring.instance-addr\n  [instance_addr: <string> | default = \"\"]\n\n  # (advanced) Enable using a IPv6 instance address. (default false)\n  # CLI flag: -ruler.ring.instance-enable-ipv6\n  [instance_enable_ipv6: <boolean> | default = false]\n\n  # (advanced) Number of tokens for each ruler.\n  # CLI flag: -ruler.ring.num-tokens\n  [num_tokens: <int> | default = 128]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Logrus Instance in Go\nDESCRIPTION: Demonstrates how to create a custom instance of the Logrus logger for advanced usage, such as logging to multiple locations from the same application.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\nvar log = logrus.New()\n\nfunc main() {\n  log.Out = os.Stdout\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Zone-Aware Replication for Store-Gateways\nDESCRIPTION: YAML configuration for setting up basic zone-aware replication with virtual zones for store-gateways. This configuration creates anti-affinity rules while allowing multiple store-gateways of the same zone on the same node.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-from-single-zone-with-helm.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstore_gateway:\n  zoneAwareReplication:\n    enabled: false # Do not turn on zone-awareness without migration because of potential query errors\n    topologyKey: \"kubernetes.io/hostname\" # Triggers creating anti-affinity rules\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Support with HttpRouter in Go\nDESCRIPTION: This snippet demonstrates how to configure the GlobalOPTIONS handler to support CORS preflight requests. It sets appropriate CORS headers based on the incoming request and returns a 204 No Content status code.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrouter.GlobalOPTIONS = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    if r.Header.Get(\"Access-Control-Request-Method\") != \"\" {\n        // Set CORS headers\n        header := w.Header()\n        header.Set(\"Access-Control-Allow-Methods\", r.Header.Get(\"Allow\"))\n        header.Set(\"Access-Control-Allow-Origin\", \"*\")\n    }\n\n    // Adjust status code to 204\n    w.WriteHeader(http.StatusNoContent)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Distributor Instance Limits in YAML\nDESCRIPTION: Example showing how to configure distributor-level limits including max ingestion rate and inflight push request limits.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/about-runtime-configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndistributor_limits:\n  max_ingestion_rate: 75000\n  max_inflight_push_requests: 1500\n  max_inflight_push_requests_bytes: 314572800\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Type in Go\nDESCRIPTION: Demonstrates how to create a custom error type in Go by implementing the error interface with a struct and Error() method.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MyCustomErr struct {\n  Msg string\n}\nfunc (m MyCustomErr) Error() string { // This implements \"error\"\n  return m.Msg\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Client Buffer Sizes in Grafana Mimir 2.11\nDESCRIPTION: These CLI flags allow customization of memcached client write and read buffer sizes for various components in Grafana Mimir 2.11, including blocks storage, query frontend, and ruler storage.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/release-notes/v2.11.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-blocks-storage.bucket-store.chunks-cache.memcached.read-buffer-size-bytes\n-blocks-storage.bucket-store.chunks-cache.memcached.write-buffer-size-bytes\n-blocks-storage.bucket-store.index-cache.memcached.read-buffer-size-bytes\n-blocks-storage.bucket-store.index-cache.memcached.write-buffer-size-bytes\n-blocks-storage.bucket-store.metadata-cache.memcached.read-buffer-size-bytes\n-blocks-storage.bucket-store.metadata-cache.memcached.write-buffer-size-bytes\n-query-frontend.results-cache.memcached.read-buffer-size-bytes\n-query-frontend.results-cache.memcached.write-buffer-size-bytes\n-ruler-storage.cache.memcached.read-buffer-size-bytes\n-ruler-storage.cache.memcached.write-buffer-size-bytes\n```\n\n----------------------------------------\n\nTITLE: Querying Ratio of Successfully Sharded Queries in PromQL\nDESCRIPTION: PromQL query to calculate the ratio of queries that have been successfully sharded using Cortex metrics.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/architecture/query-sharding/index.md#2025-04-17_snippet_3\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(cortex_frontend_query_sharding_rewrites_succeeded_total[$__rate_interval])) /\nsum(rate(cortex_frontend_query_sharding_rewrites_attempted_total[$__rate_interval]))\n```\n\n----------------------------------------\n\nTITLE: Benchmark Performance Comparison Code\nDESCRIPTION: Displays benchmark results comparing different profiling approaches, showing performance and profile size variations\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/pyroscope-go/godeltaprof/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nBenchmarkOG\n      63         181862189 ns/op\nprofile sizes: [209117 209107 209077 209089 209095 209076 209088 209082 209090 209092]\n\nBenchmarkFastDelta\n      43         273936764 ns/op\nprofile sizes: [169300 10815 8969 9511 9752 9376 9545 8959 10357 9536]\n\nBenchmarkGodeltaprof\n     366          31148264 ns/op\nprofile sizes: [208898 11485 9347 9967 10291 9848 10085 9285 11033 9986]\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client gRPC Max Send Message Size\nDESCRIPTION: This setting specifies the maximum size, in bytes, of gRPC messages sent by the Alertmanager client.  It is an advanced configuration that can be adjusted to optimize performance based on the expected message sizes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_79\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) gRPC client max send message size (bytes).\n  # CLI flag: -alertmanager.alertmanager-client.grpc-max-send-msg-size\n  [max_send_msg_size: <int> | default = 104857600]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Agent Metrics\nDESCRIPTION: Command to apply metrics instance configuration for Grafana Agent.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/configurations/grafanacon-2022/index.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f metrics-instance.yaml\n```\n\n----------------------------------------\n\nTITLE: Analyzing Ruler Metrics with Mimir\nDESCRIPTION: This command fetches rule groups from a Grafana Mimir, Enterprise Metrics, or Cloud Prometheus instance and extracts metrics used in rule queries. It outputs a JSON file that can be used with the 'analyze prometheus' command.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool analyze ruler --address=<url> --id=<tenant_id>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metricsUsed\": [\n    \"apiserver_request_duration_seconds_bucket\",\n    \"container_cpu_usage_seconds_total\",\n    \"scheduler_scheduling_algorithm_duration_seconds_bucket\"\n  ],\n  \"ruleGroups\": [\n    {\n      \"namspace\": \"prometheus_rules\",\n      \"name\": \"kube-apiserver.rules\",\n      \"metrics\": [\n        \"apiserver_request_duration_seconds_bucket\",\n        \"apiserver_request_duration_seconds_count\",\n        \"apiserver_request_total\"\n      ],\n      \"parse_errors\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Mimir Mixin in Bash\nDESCRIPTION: Command to build the Mimir mixin using Make.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/monitor-grafana-mimir/installing-dashboards-and-alerts.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build-mixin\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Deployment\nDESCRIPTION: AWS IAM policy for Thanos services deployment. Provides necessary S3 bucket access permissions for basic operations.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Statement\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetObject\",\n                \"s3:DeleteObject\",\n                \"s3:PutObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::<bucket>/*\",\n                \"arn:aws:s3:::<bucket>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Block Upload Status Check Endpoint\nDESCRIPTION: API endpoint to check the status of a block upload. Returns JSON with upload state in the result field.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/references/http-api/index.md#2025-04-17_snippet_58\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/upload/block/{block}/check\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom Go Service with BasicService\nDESCRIPTION: This snippet demonstrates how to implement a custom service in Go by embedding the `BasicService` struct.  It showcases the definition of a custom service (`exampleService`), its initialization with `NewBasicService`, and the implementation of the `RunningFn` (collect) which processes messages from a channel until the service is stopped. It also shows how to define an external method `Send` that interacts with the running service.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana/dskit/services/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype exampleService struct {\n\t*BasicService\n\n\tlog []string\n\tch  chan string\n}\n\nfunc newExampleServ() *exampleService {\n\ts := &exampleService{\n\t\tch: make(chan string),\n\t}\n    s.BasicService = NewBasicService(nil, s.collect, nil) // StartingFn, RunningFn, StoppingFn\n\treturn s\n}\n\n// used as Running function. When service is stopped, context is canceled, so we react on it.\nfunc (s *exampleService) collect(ctx context.Context) error {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tcase msg := <-s.ch:\n\t\t\ts.log = append(s.log, msg)\n\t\t}\n\t}\n}\n\n// External method called by clients of the Service.\nfunc (s *exampleService) Send(msg string) bool {\n\tctx := s.ServiceContext() // provided by BasicService. Not part of Service interface.\n\tif ctx == nil {\n\t\t// Service is not yet started\n\t\treturn false\n\t}\n\tselect {\n\tcase s.ch <- msg:\n\t\treturn true\n\tcase <-ctx.Done():\n\t\t// Service is not running anymore.\n\t\treturn false\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression with Zstandard in Go\nDESCRIPTION: Example showing how to decompress a Zstandard stream from an io.Reader to an io.Writer. Creates a decoder that processes the input stream and writes the decompressed output, with proper resource cleanup.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Partition Start Offset in Kafka\nDESCRIPTION: Explains how to get the partition start offset in Kafka using ListOffsets request with timestamp -2. This method returns the offset of the first available record or the next produced offset if the partition is empty.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/storage/ingest/DESIGN.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThe partition start offset can be read from Kafka issuing `ListOffsets` request with `timestamp = -2`.\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package via Go Get\nDESCRIPTION: Command to install the UUID package directly using go get when package manager is not available.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/gofrs/uuid/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/gofrs/uuid\n```\n\n----------------------------------------\n\nTITLE: Reading Object from Google Cloud Storage Bucket in Go\nDESCRIPTION: This snippet demonstrates how to read an object from a Google Cloud Storage bucket using the storage client. It creates a reader for the object, reads all the data, and handles potential errors.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/cloud.google.com/go/storage/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Read the object1 from bucket.\nrc, err := client.Bucket(\"bucket\").Object(\"object1\").NewReader(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rc.Close()\nbody, err := io.ReadAll(rc)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Client TLS Insecure Skip Verify\nDESCRIPTION: This boolean setting disables server certificate validation. It should only be used for testing purposes as it compromises security.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_94\n\nLANGUAGE: yaml\nCODE:\n```\n  # (advanced) Skip validating server certificate.\n  # CLI flag: -alertmanager.alertmanager-client.tls-insecure-skip-verify\n  [tls_insecure_skip_verify: <boolean> | default = false]\n\n```\n\n----------------------------------------\n\nTITLE: Emitting Info Message with Key/Value Pairs in Go\nDESCRIPTION: This snippet demonstrates how to emit an Info level message with key/value pairs using the `appLogger`. It includes the input string and any error encountered during integer parsing as key/value pairs in the log message.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"input := \\\"5.5\\\"\\n_, err := strconv.ParseInt(input, 10, 32)\nif err != nil {\n\tappLogger.Info(\\\"Invalid input for ParseInt\\\", \\\"input\\\", input, \\\"error\\\", err)\n}\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Configuration Comparison Commands\nDESCRIPTION: Bash commands to export and compare Kubernetes configurations between microservice and read-write modes.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/jsonnet/migrate-from-microservices-to-read-write.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Export all of the Kubernetes objects to yaml:\n\nkubectl get -o yaml deployment distributor > distributor.yaml; yq eval -i '.spec' distributor.yaml\nkubectl get -o yaml deployment overrides-exporter > overrides-exporter.yaml; yq eval -i '.spec' overrides-exporter.yaml\nkubectl get -o yaml deployment querier > querier.yaml; yq eval -i '.spec' querier.yaml\n# ... [truncated for brevity]\n\n# Diff deployments and statefulsets:\n\n## Write\ndiff --color=always distributor.yaml mimir-write-zone-a.yaml\ndiff --color=always ingester-zone-a.yaml mimir-write-zone-a.yaml\n# ... [truncated for brevity]\n```\n\n----------------------------------------\n\nTITLE: Prometheus Remote Write Configuration\nDESCRIPTION: YAML configuration for Prometheus to write metrics to Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/get-started/_index.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: http://localhost:9009/api/v1/push\n```\n\n----------------------------------------\n\nTITLE: Backfilling Prometheus TSDB blocks with Mimirtool\nDESCRIPTION: This command runs the 'mimirtool backfill' utility to upload TSDB blocks to Grafana Mimir using the provided API for the compactor component. It requires the user, address, and specific block paths as input. The command outputs progress and results of the upload process, reporting successes and warns for any existing blocks.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/tools/mimirtool.md#2025-04-17_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nmimirtool backfill --address=http://mimir-compactor/ --id=anonymous /var/prometheus/{01G803NFXZ0MVKN71GT91HMV3Z,01G8BQ8PRR4TAP7EXZVBNTRBZ4,01G8CB7GTTC5ZXY23WTXHSYQXQ}\n```\n\n----------------------------------------\n\nTITLE: Release Process Commands - Draft Release Creation\nDESCRIPTION: Commands for creating a draft release on GitHub from the release branch.\nSOURCE: https://github.com/grafana/mimir/blob/main/RELEASE.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout release-<version>\n./tools/release/create-draft-release.sh\n```\n\n----------------------------------------\n\nTITLE: Using Home Directory Functions in Go\nDESCRIPTION: Example usage of the go-homedir library's main functions. Shows how to get the user's home directory with Dir() and expand paths containing ~ with Expand().\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/mitchellh/go-homedir/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhomedir.Dir()\n```\n\nLANGUAGE: go\nCODE:\n```\nhomedir.Expand()\n```\n\n----------------------------------------\n\nTITLE: Runtime Span Function Signature\nDESCRIPTION: Added function runtime.StartSpan() for starting distributed tracing spans in SDKs\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nruntime.StartSpan()\n```\n\n----------------------------------------\n\nTITLE: Mimir Custom Configuration YAML\nDESCRIPTION: Custom configuration file defining alertmanager external URL and server log level settings for Grafana Mimir.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/run-production-environment-with-helm/configuration-with-helm.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmimir:\n  structuredConfig:\n    alertmanager:\n      external_url: https://example.com/alerts\n    server:\n      log_level: debug\n```\n\n----------------------------------------\n\nTITLE: Finding Compressed Stream Offset\nDESCRIPTION: Demonstrates how to find the compressed and uncompressed offsets using an index.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n\tcompressedOffset, uncompressedOffset, err := index.Find(wantOffset)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenancy Multiplexing in YAML\nDESCRIPTION: YAML configuration block that defines multitenancy settings for Mimir, including the ability to enable multiplexing mode where multiple tenants share the same TSDB.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/proposals/reduce-multitenancy-cost.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# When set to true, incoming HTTP requests must specify tenant ID in HTTP\n# X-Scope-OrgId header. When set to false, tenant ID from -auth.no-auth-tenant\n# is used instead.\n# CLI flag: -auth.multitenancy-enabled\n[multitenancy_enabled: <boolean> | default = true]\n\n# The mode of multitenancy to use. Either \"standard\" or \"multiplexing\".\n# When using the \"multiplexing\" multitenancy several tenants share the same TSDB.\n# CLI flag: -auth.multitenancy-mode\n[multitenancy_mode: <string> | default = \"standard\"]\n```\n\n----------------------------------------\n\nTITLE: Copying Thanos Blocks to Intermediate Bucket with GCS\nDESCRIPTION: Command to copy TSDB blocks from Thanos bucket to an intermediate Mimir bucket using Google Cloud Storage CLI. This performs parallel copying of all objects to speed up the transfer process.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/set-up/migrate/migrate-from-thanos-or-prometheus.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngsutil -m cp -r gs://<THANOS-BUCKET>/* gs://<INTERMEDIATE-MIMIR-BUCKET>/\n```\n\n----------------------------------------\n\nTITLE: OCI Object Storage Configuration - Raw Provider\nDESCRIPTION: This YAML configuration configures the raw provider for Oracle Cloud Infrastructure (OCI) Object Storage, requiring detailed authentication information.  It necessitates bucket, compartment OCID, tenancy OCID, user OCID, region, fingerprint, and private key details for authentication. Optional configurations as in the default provider are applicable.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntype: OCI\nconfig:\n  provider: \"raw\"\n  bucket: \"\"\n  compartment_ocid: \"\"\n  tenancy_ocid: \"\"\n  user_ocid: \"\"\n  region: \"\"\n  fingerprint: \"\"\n  privatekey: \"\"\n  passphrase: \"\"         // Optional passphrase to encrypt the private API Signing key\n```\n\n----------------------------------------\n\nTITLE: Using Standard Go JSON Unmarshal\nDESCRIPTION: Example of using the standard Go encoding/json package to unmarshal JSON data into Go structures.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Installing govendor Dependency Management Tool\nDESCRIPTION: This command installs the `govendor` tool, used for vendoring dependencies in Go projects. Vendoring ensures that projects have their required dependencies included within the project, rather than relying on external package repositories.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana-tools/sdk/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\n\tgo get github.com/kardianos/govendor\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Logrus Output in Go\nDESCRIPTION: This code snippet shows how to use Logrus's built-in testing facilities to assert the presence of log messages in unit tests. It demonstrates creating a test logger and using assertions to verify log entries.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Ballast Size in Grafana Mimir\nDESCRIPTION: This command line flag sets the memory ballast size to 1GB (1073741824 bytes) for Grafana Mimir. Memory ballast is a technique used to reduce GC pressure by allocating a large chunk of memory that is never touched, effectively increasing the threshold at which garbage collection triggers.\nSOURCE: https://github.com/grafana/mimir/blob/main/pkg/mimirtool/config/testdata/not-in-yaml-new.flags.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-mem-ballast-size-bytes=1073741824\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocked Queries in YAML for Grafana Mimir\nDESCRIPTION: This YAML configuration demonstrates how to set up query blocking for a specific tenant in Grafana Mimir. It shows both exact query matching and regex-based pattern matching.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configure-blocked-queries.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  \"tenant-id\":\n    blocked_queries:\n      # block this query exactly\n      - pattern: 'sum(rate(node_cpu_seconds_total{env=\"prod\"}[1m]))'\n\n      # block any query matching this regex pattern\n      - pattern: '.*env=\"prod\".*'\n        regex: true\n```\n\n----------------------------------------\n\nTITLE: Finding Matches with Regexp2\nDESCRIPTION: This Go code snippet demonstrates using the Regexp2 library to compile a pattern and match a string against it. Dependencies include the Regexp2 package and its structs. Inputs are regex patterns and strings to match, with outputs indicating whether a match was found. It highlights the potential for panic on invalid regex in MustCompile.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/dlclark/regexp2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nre := regexp2.MustCompile(`Your pattern`, 0)\nif isMatch, _ := re.MatchString(`Something to match`); isMatch {\n    //do something\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SecretsManager Provider - Go\nDESCRIPTION: This snippet shows how to initialize the AWS SecretsManager provider using the koanf library. It requires the secretsmanager package and a configuration struct. The optional function transforms fetched strings if necessary.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nvault.SecretsMananger(secretsmanager.Config{}, f func(s string) string)\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Compression in YAML for Grafana Mimir\nDESCRIPTION: This YAML configuration snippet shows the various options available for enabling gRPC compression in different components of Grafana Mimir. It includes options for alertmanager, frontend, ingester client, query scheduler, and ruler. The compression can be set to 'snappy' or 'gzip'.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/manage/run-production-environment/production-tips/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager.alertmanager_client.grpc_compression: snappy\nfrontend.grpc_client_config.grpc_compression: gzip\nfrontend_worker.grpc_client_config.grpc_compression: snappy\ningester_client.grpc_client_config.grpc_compression: gzip\nquery_scheduler.grpc_client_config.grpc_compression: snappy\nruler.query_frontend.grpc_client_config.grpc_compression: gzip\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading a Dashboard with Grafana SDK in Go\nDESCRIPTION: This code snippet demonstrates how to programmatically create a Grafana dashboard, add rows and graphs to it, and then upload it to a Grafana server using the Grafana SDK. It requires the `github.com/grafana-tools/sdk` package and the `context` and `fmt` standard libraries. It configures a dashboard with a title, ID, time range, and graph panels before uploading it to Grafana.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/grafana-tools/sdk/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\n\tboard := sdk.NewBoard(\"Sample dashboard title\")\n\tboard.ID = 1\n\tboard.Time.From = \"now-30m\"\n\tboard.Time.To = \"now\"\n\trow1 := board.AddRow(\"Sample row title\")\n\trow1.Add(sdk.NewGraph(\"Sample graph\"))\n\tgraph := sdk.NewGraph(\"Sample graph 2\")\n\ttarget := sdk.Target{\n\t\tRefID:      \"A\",\n\t\tDatasource: \"Sample Source 1\",\n\t\tExpr:       \"sample request 1\"}\n\tgraph.AddTarget(&target)\n\trow1.Add(graph)\n\tgrafanaURL := \"http://grafana.host\"\n\tc := sdk.NewClient(grafanaURL, \"grafana-api-key\", sdk.DefaultHTTPClient)\n\tresponse, err := c.SetDashboard(context.TODO() ,*board, sdk.SetDashboardParams{\n\t\tOverwrite: false,\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"error on uploading dashboard %s\", board.Title)\n\t} else {\n\t\tfmt.Printf(\"dashboard URL: %v\", grafanaURL+*response.URL)\n\t}\n```\n```\n\n----------------------------------------\n\nTITLE: Upgrading Helm Release with Migrated Values\nDESCRIPTION: Command to upgrade the Helm release using the migrated configuration file custom.yaml.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/helm-charts/mimir-distributed/migration-guides/migrate-to-unified-proxy-deployment/_index.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade $RELEASE grafana/mimir-distributed -f custom.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Version Constraints in Go\nDESCRIPTION: Explains how to apply version constraints using the go-version library. It includes creating a version object and constraint, then checking if the version satisfies the constraint using the Check method.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\n\n// Constraints example.\nconstraints, err := version.NewConstraint(\">= 1.0, < 1.4\")\nif constraints.Check(v1) {\n\tfmt.Printf(\"%s satisfies constraints %s\", v1, constraints)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File System Watcher in Go\nDESCRIPTION: Example demonstrating how to create and use a filesystem watcher using fsnotify. Shows initialization, event monitoring in a goroutine, and path watching. Includes error handling and proper resource cleanup.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring General Server Settings in Grafana Mimir\nDESCRIPTION: General server configuration options including instrumentation handlers, gRPC status reporting, and graceful shutdown settings. Controls basic server behavior and monitoring capabilities.\nSOURCE: https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# (advanced) Register the intrumentation handlers (/metrics etc).\n# CLI flag: -server.register-instrumentation\n[register_instrumentation: <boolean> | default = true]\n\n# If set to true, gRPC statuses will be reported in instrumentation labels with\n# their string representations. Otherwise, they will be reported as \"error\".\n# CLI flag: -server.report-grpc-codes-in-instrumentation-label-enabled\n[report_grpc_codes_in_instrumentation_label_enabled: <boolean> | default = true]\n\n# (advanced) Timeout for graceful shutdowns\n# CLI flag: -server.graceful-shutdown-timeout\n[graceful_shutdown_timeout: <duration> | default = 30s]\n```\n\n----------------------------------------\n\nTITLE: Creating a Tuple in Sprig Templates\nDESCRIPTION: Illustrates the usage of the 'tuple' function to create a tuple within a Sprig template. This can be useful for grouping multiple values together.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{$t := tuple \"a\", \"b\" \"c\"}}\n```\n\n----------------------------------------\n\nTITLE: OCI Object Storage Configuration - Default Provider\nDESCRIPTION: This YAML configuration shows the settings for Oracle Cloud Infrastructure (OCI) Object Storage using the default keypair authentication method. It specifies the bucket name, compartment OCID, and optional parameters like part size, retry settings, and HTTP client configurations. The configuration leverages the same settings as the OCI CLI.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/github.com/thanos-io/objstore/README.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ntype: OCI\nconfig:\n  provider: \"default\"\n  bucket: \"\"\n  compartment_ocid: \"\"\n  part_size: \"\"                   // Optional part size to override the OCI default of 128 MiB, value is in bytes.\n  max_request_retries: \"\"         // Optional maximum number of retries for a request.\n  request_retry_interval: \"\"      // Optional sleep duration in seconds between retry requests.\n  http_config:\n    idle_conn_timeout: 1m30s      // Optional maximum amount of time an idle (keep-alive) connection will remain idle before closing itself. Zero means no limit.\n    response_header_timeout: 2m   // Optional amount of time to wait for a server's response headers after fully writing the request.\n    tls_handshake_timeout: 10s    // Optional maximum amount of time waiting to wait for a TLS handshake. Zero means no timeout.\n    expect_continue_timeout: 1s   // Optional amount of time to wait for a server's first response headers. Zero means no timeout and causes the body to be sent immediately.\n    insecure_skip_verify: false   // Optional. If true, crypto/tls accepts any certificate presented by the server and any host name in that certificate.\n    max_idle_conns: 100           // Optional maximum number of idle (keep-alive) connections across all hosts. Zero means no limit.\n    max_idle_conns_per_host: 100  // Optional maximum idle (keep-alive) connections to keep per-host. If zero, DefaultMaxIdleConnsPerHost=2 is used.\n    max_conns_per_host: 0         // Optional maximum total number of connections per host.\n    disable_compression: false    // Optional. If true, prevents the Transport from requesting compression.\n    client_timeout: 90s           // Optional time limit for requests made by the HTTP Client.\n```\n\n----------------------------------------\n\nTITLE: Installing Multierr Package via Go Get\nDESCRIPTION: Command to install the latest version of the multierr package using Go's package manager. This will add the dependency to your Go module.\nSOURCE: https://github.com/grafana/mimir/blob/main/vendor/go.uber.org/multierr/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.uber.org/multierr@latest\n```"
  }
]