[
  {
    "owner": "kozea",
    "repo": "weasyprint",
    "content": "TITLE: Basic HTML to PDF Conversion with WeasyPrint Python API\nDESCRIPTION: Simple example showing how to convert a webpage to PDF using WeasyPrint's Python API.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint import HTML\nHTML('https://weasyprint.org/').write_pdf('/tmp/weasyprint-website.pdf')\n```\n\n----------------------------------------\n\nTITLE: Generating PDF Invoice with Factur-X XML Attachment in Python\nDESCRIPTION: Python code that demonstrates how to generate a PDF/A-3B compliant invoice with an embedded Factur-X XML attachment. The code overrides the metadata generation function to include the XML data in the PDF's metadata.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom weasyprint import Attachment, HTML\n\ndef generate_rdf_metadata(metadata, variant, version, conformance):\n    original_rdf = generate_original_rdf_metadata(metadata, variant, version, conformance)\n    return Path(\"rdf.xml\").read_bytes().replace(b\"<!-- placeholder -->\", original_rdf)\n\ndocument = HTML(string=\"<h1>Invoice</h1>\").render()\ngenerate_original_rdf_metadata = document.metadata.generate_rdf_metadata\n\nfactur_x_xml = Path(\"factur-x.xml\").read_text()\nattachment = Attachment(string=factur_x_xml, name=\"factur-x.xml\", relationship=\"Data\")\ndocument.metadata.attachments = [attachment]\n\ndocument.metadata.generate_rdf_metadata = generate_rdf_metadata\ndocument.write_pdf(\"invoice.pdf\", pdf_variant=\"pdf/a-3b\")\n```\n\n----------------------------------------\n\nTITLE: HTML to PDF with Custom CSS in WeasyPrint\nDESCRIPTION: Demonstrates converting HTML to PDF while applying custom CSS styling using WeasyPrint's HTML and CSS classes.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint import HTML, CSS\nHTML('https://weasyprint.org/').write_pdf('/tmp/weasyprint-website.pdf',\n    stylesheets=[CSS(string='body { font-family: serif !important }')])\n```\n\n----------------------------------------\n\nTITLE: Generating PDF/A Documents with WeasyPrint in Python\nDESCRIPTION: Python code showing how to generate a PDF/A-3u document using WeasyPrint. This demonstrates using the pdf_variant parameter of the write_pdf method to specify the PDF variant.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint import HTML\nHTML(string=\"<p>document</p>\").write_pdf(\"document.pdf\", pdf_variant=\"pdf/a-3u\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating HTML Objects in WeasyPrint\nDESCRIPTION: Shows different ways to create HTML objects from files, URLs, and strings in WeasyPrint.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint import HTML\n\nHTML('../foo.html')  # Same as …\nHTML(filename='../foo.html')\n\nHTML('https://weasyprint.org')  # Same as …\nHTML(url='https://weasyprint.org')\n\nHTML(sys.stdin)  # Same as …\nHTML(file_obj=sys.stdin)\n```\n\n----------------------------------------\n\nTITLE: Basic WeasyPrint Command-Line Usage (Bash)\nDESCRIPTION: Example of using WeasyPrint from the command line to generate a PDF from a web page.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nweasyprint https://weasyprint.org /tmp/weasyprint-website.pdf\n```\n\n----------------------------------------\n\nTITLE: Configuring WeasyPrint Logger in Python\nDESCRIPTION: This code snippet demonstrates how to configure the WeasyPrint logging system to display warnings, errors, and critical messages. It shows how to set the logging level and add handlers to save logs to a file and print them on the console.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogger = logging.getLogger('weasyprint')\n\n# Display warnings, errors and critical messages.\nlogger.setLevel(logging.WARNING)\n\n# Save logs to the weasyprint.log file.\nlogger.addHandler(logging.FileHandler('weasyprint.log'))\n# Print logs on console.\nlogger.addHandler(logging.StreamHandler())\n```\n\n----------------------------------------\n\nTITLE: Creating PDF/UA Documents Using WeasyPrint CLI\nDESCRIPTION: Command-line example showing how to generate a PDF/UA-1 document using WeasyPrint's CLI. This demonstrates using the --pdf-variant flag to specify the PDF accessibility format.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ weasyprint document.html --pdf-variant=\"pdf/ua-1\" document.pdf\n```\n\n----------------------------------------\n\nTITLE: Creating HTML and CSS Objects from Strings\nDESCRIPTION: Example of creating HTML and CSS objects directly from string content in WeasyPrint.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint import HTML, CSS\n\n# HTML('<h1>foo') would be filename\nHTML(string='''\n    <h1>The title</h1>\n    <p>Content goes here\n''')\nCSS(string='@page { size: A3; margin: 1cm }')\n```\n\n----------------------------------------\n\nTITLE: Adjusting Document Dimensions with CSS @page Rule\nDESCRIPTION: CSS example showing how to change the page size and margins in WeasyPrint. This demonstrates using the @page rule to modify the default A4 size to Letter and set custom margins.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@page {\n  size: Letter; /* Change from the default size of A4 */\n  margin: 3cm; /* Set margin on each page */\n}\n```\n\n----------------------------------------\n\nTITLE: Font Configuration in WeasyPrint\nDESCRIPTION: Demonstrates setting up custom fonts using @font-face rules with WeasyPrint's FontConfiguration.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint import HTML, CSS\nfrom weasyprint.text.fonts import FontConfiguration\n\nfont_config = FontConfiguration()\nhtml = HTML(string='<h1>The title</h1>')\ncss = CSS(string='''\n    @font-face {\n        font-family: Gentium;\n        src: url(https://example.com/fonts/Gentium.otf);\n    }\n    h1 { font-family: Gentium }''', font_config=font_config)\nhtml.write_pdf(\n    '/tmp/example.pdf', stylesheets=[css],\n    font_config=font_config)\n```\n\n----------------------------------------\n\nTITLE: Importing WeasyPrint HTML Class in Python\nDESCRIPTION: Shows how to import and use the HTML class from WeasyPrint to work with HTML documents. The class accepts an input and optional keyword arguments.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nHTML(input, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Installing WeasyPrint in a Virtual Environment (Bash)\nDESCRIPTION: Commands to create a virtual environment, activate it, install WeasyPrint using pip, and check the installation.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install weasyprint\nweasyprint --info\n```\n\n----------------------------------------\n\nTITLE: Importing WeasyPrint CSS Class in Python\nDESCRIPTION: Demonstrates importing the CSS class from WeasyPrint to work with stylesheets. The class takes an input and optional keyword arguments.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCSS(input, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Page Management Examples in WeasyPrint\nDESCRIPTION: Shows how to handle multiple pages, including separating odd and even pages and printing document outline.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Write odd and even pages separately:\n#   Lists count from 0 but page numbers usually from 1\n#   [::2] is a slice of even list indexes but odd-numbered pages.\ndocument.copy(document.pages[::2]).write_pdf('odd_pages.pdf')\ndocument.copy(document.pages[1::2]).write_pdf('even_pages.pdf')\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to PDF with WeasyPrint\nDESCRIPTION: Example of using WeasyPrint's CLI from the development environment to convert an HTML file to PDF.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/contribute.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvenv/bin/python -m weasyprint example.html example.pdf\n```\n\n----------------------------------------\n\nTITLE: Importing WeasyPrint FontConfiguration Class in Python\nDESCRIPTION: Shows how to import the FontConfiguration class from WeasyPrint's text.fonts module. This class is used for configuring fonts.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint.text.fonts import FontConfiguration\n```\n\n----------------------------------------\n\nTITLE: Controlling Hyphenation with CSS in WeasyPrint\nDESCRIPTION: Demonstrates how to enable automatic hyphenation globally while disabling it for specific elements using the 'manual' value. In this example, URL text after links won't be hyphenated.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nhtml { hyphens: auto }\na[href]::after { content: ' [' attr(href) ']'; hyphens: manual }\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Hyphenation with HTML lang Attribute in WeasyPrint\nDESCRIPTION: Sets up automatic hyphenation by specifying the 'hyphens: auto' property and setting the HTML language attribute to enable language-specific hyphenation via Pyphen.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=en>\n<style>\n  html { hyphens: auto }\n</style>\n…\n```\n\n----------------------------------------\n\nTITLE: Using CSS Page Selectors in WeasyPrint\nDESCRIPTION: Shows how to target specific pages using the nth() selector to apply different styles based on page position or logical grouping like chapters.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n@page :nth(3) { background: red } /* Third page */\n@page :nth(2n+1) { background: green } /* Odd pages */\n@page :nth(1 of chapter) { background: blue } /* First pages of chapters */\n```\n\n----------------------------------------\n\nTITLE: Custom URL Fetcher Implementation\nDESCRIPTION: Example of implementing a custom URL fetcher for handling special URL schemes in WeasyPrint.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint import default_url_fetcher, HTML\n\ndef my_fetcher(url):\n    if url.startswith('graph:'):\n        graph_data = map(float, url[6:].split(','))\n        string = generate_graph(graph_data)\n        return {'string': string, 'mime_type': 'image/png'}\n    return default_url_fetcher(url)\n\nsource = '<img src=\"graph:42,10.3,87\">'\nHTML(string=source, url_fetcher=my_fetcher).write_pdf('out.pdf')\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents with Dotted Leaders in WeasyPrint\nDESCRIPTION: Implements a classic table of contents style with dotted leaders connecting the item text to its page number, using the leader() function and target-counter().\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_14\n\nLANGUAGE: css\nCODE:\n```\nli a::after {\n    content: ' ' leader(dotted) ' ' target-counter(attr(href), page);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Strings for Page Headers in WeasyPrint\nDESCRIPTION: Creates a dynamic page header that displays the current chapter title. The string-set property captures heading content, which is then displayed in the top-center page margin box.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n@top-center { content: string(chapter) }\nh2 { string-set: chapter \"Current chapter: \" content() }\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-References with Target Counter in WeasyPrint\nDESCRIPTION: Demonstrates how to add page references after links using target-counter() to show the page number of the link target, and target-text() to show the target's content.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_12\n\nLANGUAGE: css\nCODE:\n```\na::after { content: \", on page \" target-counter(attr(href), page) }\na::after { content: \", see \" target-text(attr(href)) }\n```\n\n----------------------------------------\n\nTITLE: CSS Grid Layout Basic Usage\nDESCRIPTION: Shows basic grid layout display property support in WeasyPrint.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_15\n\nLANGUAGE: CSS\nCODE:\n```\ndisplay: grid\n```\n\n----------------------------------------\n\nTITLE: Supported CSS Grid Properties in WeasyPrint\nDESCRIPTION: List of CSS Grid properties and features supported by WeasyPrint, including grid-auto-*, grid-template-*, flexible lengths, line names, grid areas, and alignment properties.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_16\n\nLANGUAGE: CSS\nCODE:\n```\ngrid-auto-*\ngrid-template-*\ngrid\nfr\nline names\ngrid areas\nauto rows\nauto columns\nz-index\nrepeat(X, *)\nminmax()\nalign-*\njustify-*\ngap\n*-gap\ndense auto flow\norder\nmargins\nborders\npadding\nfragmentation between rows\n```\n\n----------------------------------------\n\nTITLE: Adding Self-Signed Certificates as Trusted for System Requests\nDESCRIPTION: Commands to add self-signed certificates to the system's trusted certificates store. This enables applications like WeasyPrint to make requests to the same server without SSL certificate validation errors.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp /etc/ssl/certs/localhost.crt /usr/local/share/ca-certificates/localhost.crt\nsudo cp /etc/ssl/private/localhost.key /usr/local/share/ca-certificates/localhost.key\n\n# Update the certificate authority trusted certificates.\nsudo update-ca-certificates\n\n# Export your newly updated Certificate Authority Bundle file.\n# If using Django, it will use the newly signed certificate authority as\n# valid and images will load properly.\nsudo tee -a /etc/environment <<< 'export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt'\n```\n\n----------------------------------------\n\nTITLE: Setting up WeasyPrint Development Environment\nDESCRIPTION: Clone the WeasyPrint repository, create a virtual environment, and install the required dependencies for development, testing, and documentation.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/contribute.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Kozea/WeasyPrint.git\ncd WeasyPrint\npython -m venv venv\nvenv/bin/pip install -e '.[doc,test]'\n```\n\n----------------------------------------\n\nTITLE: Disabling PDF Bookmarks for Specific Elements in WeasyPrint\nDESCRIPTION: Shows how to remove specific headings from the automatically generated PDF bookmarks by setting the bookmark-level property to 'none'.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nh1 { bookmark-level: none }\n```\n\n----------------------------------------\n\nTITLE: Importing WeasyPrint Document Class in Python\nDESCRIPTION: Demonstrates importing the Document class from WeasyPrint's document module. This class represents a rendered document.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint.document import Document\n```\n\n----------------------------------------\n\nTITLE: Importing WeasyPrint DocumentMetadata Class in Python\nDESCRIPTION: Shows how to import the DocumentMetadata class from WeasyPrint's document module. This class holds metadata for a document.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint.document import DocumentMetadata\n```\n\n----------------------------------------\n\nTITLE: Importing WeasyPrint Page Class in Python\nDESCRIPTION: Demonstrates importing the Page class from WeasyPrint's document module. This class represents a single page in a rendered document.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint.document import Page\n```\n\n----------------------------------------\n\nTITLE: Importing WeasyPrint Attachment Class in Python\nDESCRIPTION: Shows how to import the Attachment class from WeasyPrint, used for handling attachments. It accepts an input and optional keyword arguments.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAttachment(input, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Importing WeasyPrint CounterStyle Class in Python\nDESCRIPTION: Demonstrates importing the CounterStyle class from WeasyPrint's css.counters module. This class is used for defining custom counter styles.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom weasyprint.css.counters import CounterStyle\n```\n\n----------------------------------------\n\nTITLE: Factur-X XML Structure for E-Invoicing\nDESCRIPTION: Sample XML structure following the Factur-X/ZUGFeRD standard for electronic invoicing. This structure includes the necessary elements for a minimum compliance invoice with supplier and buyer information, amounts, and tax details.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n      xmlns:udt=\"urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100\"\n      xmlns:rsm=\"urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100\"\n      xmlns:ram=\"urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100\">\n    <rsm:ExchangedDocumentContext>\n      <ram:BusinessProcessSpecifiedDocumentContextParameter>\n        <ram:ID>A1</ram:ID>\n      </ram:BusinessProcessSpecifiedDocumentContextParameter>\n      <ram:GuidelineSpecifiedDocumentContextParameter>\n        <ram:ID>urn:factur-x.eu:1p0:minimum</ram:ID>\n      </ram:GuidelineSpecifiedDocumentContextParameter>\n    </rsm:ExchangedDocumentContext>\n    <rsm:ExchangedDocument>\n      <ram:ID>123</ram:ID>\n      <ram:TypeCode>380</ram:TypeCode>\n      <ram:IssueDateTime>\n        <udt:DateTimeString format=\"102\">20200131</udt:DateTimeString>\n      </ram:IssueDateTime>\n    </rsm:ExchangedDocument>\n    <rsm:SupplyChainTradeTransaction>\n      <ram:ApplicableHeaderTradeAgreement>\n        <ram:BuyerReference>Buyer</ram:BuyerReference>\n        <ram:SellerTradeParty>\n          <ram:Name>Supplyer Corp</ram:Name>\n          <ram:SpecifiedLegalOrganization>\n            <ram:ID schemeID=\"0002\">123456782</ram:ID>\n          </ram:SpecifiedLegalOrganization>\n          <ram:PostalTradeAddress>\n            <ram:CountryID>FR</ram:CountryID>\n          </ram:PostalTradeAddress>\n          <ram:SpecifiedTaxRegistration>\n            <ram:ID schemeID=\"VA\">FR11123456782</ram:ID>\n          </ram:SpecifiedTaxRegistration>\n        </ram:SellerTradeParty>\n        <ram:BuyerTradeParty>\n          <ram:Name>Buyer Corp</ram:Name>\n          <ram:SpecifiedLegalOrganization>\n            <ram:ID schemeID=\"0002\">987654324</ram:ID>\n          </ram:SpecifiedLegalOrganization>\n        </ram:BuyerTradeParty>\n        <ram:BuyerOrderReferencedDocument >\n          <ram:IssuerAssignedID>456</ram:IssuerAssignedID>\n        </ram:BuyerOrderReferencedDocument>\n      </ram:ApplicableHeaderTradeAgreement>\n      <ram:ApplicableHeaderTradeDelivery/>\n      <ram:ApplicableHeaderTradeSettlement>\n        <ram:InvoiceCurrencyCode>EUR</ram:InvoiceCurrencyCode>\n        <ram:SpecifiedTradeSettlementHeaderMonetarySummation>\n          <ram:TaxBasisTotalAmount>100.00</ram:TaxBasisTotalAmount>\n          <ram:TaxTotalAmount currencyID=\"EUR\">20.00</ram:TaxTotalAmount>\n          <ram:GrandTotalAmount>120.00</ram:GrandTotalAmount>\n          <ram:DuePayableAmount>120.00</ram:DuePayableAmount>\n        </ram:SpecifiedTradeSettlementHeaderMonetarySummation>\n      </ram:ApplicableHeaderTradeSettlement>\n    </rsm:SupplyChainTradeTransaction>\n  </rsm:CrossIndustryInvoice>\n```\n\n----------------------------------------\n\nTITLE: Running WeasyPrint Tests with pytest\nDESCRIPTION: Execute the WeasyPrint test suite using pytest from the virtual environment. Requires Ghostscript and DejaVu fonts to be installed.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/contribute.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvenv/bin/python -m pytest\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed SSL Certificates for Server-Side Requests in Bash\nDESCRIPTION: Commands for creating a self-signed SSL certificate to resolve certificate errors when a server requests data from itself. This allows WeasyPrint to access resources from the same server without certificate validation issues.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# If you have not yet created a certificate.\nsudo openssl req -x509 \\\n    -sha256 \\\n    -nodes \\\n    -newkey rsa:4096 \\\n    -days 365 \\\n    -keyout localhost.key \\\n    -out localhost.crt\n\n# Follow the prompts about your certificate and the domain name.\nopenssl x509 -text -noout -in localhost.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx with Self-Signed SSL Certificates\nDESCRIPTION: Example of how to configure Nginx to use self-signed SSL certificates. This code snippet shows the SSL certificate configuration to add to the nginx.conf file.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssl_certificate /etc/ssl/certs/localhost.crt;\nssl_certificate_key /etc/ssl/private/localhost.key;\n```\n\n----------------------------------------\n\nTITLE: Supported CSS Basic User Interface Properties in WeasyPrint\nDESCRIPTION: List of CSS Basic User Interface properties supported by WeasyPrint, including outline properties and appearance.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\noutline-width\noutline-style\noutline-color\noutline\noutline-offset\nappearance\n```\n\n----------------------------------------\n\nTITLE: Factur-X XML Invoice Template Structure\nDESCRIPTION: Beginning of an XML template for Factur-X/ZUGFeRD invoice data. This file defines the structure of the invoice information that would be included in the PDF metadata for electronic invoice processing.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<rsm:CrossIndustryInvoice\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:qdt=\"urn:un:unece:uncefact:data:standard:QualifiedDataType:100\"\n```\n\n----------------------------------------\n\nTITLE: RDF Metadata Template for Factur-X PDF Generation\nDESCRIPTION: XML template for RDF metadata required in Factur-X/ZUGFeRD electronic invoices. This defines the PDF/A extension schema and properties needed for the Factur-X standard.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/common_use_cases.rst#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<x:xmpmeta\n    xmlns:x=\"adobe:ns:meta/\"\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\"\n    xmlns:fx=\"urn:factur-x:pdfa:CrossIndustryDocument:invoice:1p0#\"\n    xmlns:pdfaExtension=\"http://www.aiim.org/pdfa/ns/extension/\"\n    xmlns:pdfaSchema=\"http://www.aiim.org/pdfa/ns/schema#\"\n    xmlns:pdfaProperty=\"http://www.aiim.org/pdfa/ns/property#\">\n  <!-- placeholder -->\n  <rdf:RDF>\n    <rdf:Description rdf:about=\"\">\n      <fx:ConformanceLevel>MINIMUM</fx:ConformanceLevel>\n      <fx:DocumentFileName>factur-x.xml</fx:DocumentFileName>\n      <fx:DocumentType>INVOICE</fx:DocumentType>\n      <fx:Version>1.0</fx:Version>\n    </rdf:Description>\n    <rdf:Description rdf:about=\"\">\n      <pdfaExtension:schemas>\n        <rdf:Bag>\n          <rdf:li rdf:parseType=\"Resource\">\n            <pdfaSchema:schema>Factur-X PDFA Extension Schema</pdfaSchema:schema>\n            <pdfaSchema:namespaceURI>urn:factur-x:pdfa:CrossIndustryDocument:invoice:1p0#</pdfaSchema:namespaceURI>\n            <pdfaSchema:prefix>fx</pdfaSchema:prefix>\n            <pdfaSchema:property>\n              <rdf:Seq>\n                <rdf:li rdf:parseType=\"Resource\">\n                  <pdfaProperty:name>DocumentFileName</pdfaProperty:name>\n                  <pdfaProperty:valueType>Text</pdfaProperty:valueType>\n                  <pdfaProperty:category>external</pdfaProperty:category>\n                  <pdfaProperty:description>name of the embedded XML invoice file</pdfaProperty:description>\n                </rdf:li>\n                <rdf:li rdf:parseType=\"Resource\">\n                  <pdfaProperty:name>DocumentType</pdfaProperty:name>\n                  <pdfaProperty:valueType>Text</pdfaProperty:valueType>\n                  <pdfaProperty:category>external</pdfaProperty:category>\n                  <pdfaProperty:description>INVOICE</pdfaProperty:description>\n                </rdf:li>\n                <rdf:li rdf:parseType=\"Resource\">\n                  <pdfaProperty:name>Version</pdfaProperty:name>\n                  <pdfaProperty:valueType>Text</pdfaProperty:valueType>\n                  <pdfaProperty:category>external</pdfaProperty:category>\n                  <pdfaProperty:description>The actual version of the Factur-X XML schema</pdfaProperty:description>\n                </rdf:li>\n                <rdf:li rdf:parseType=\"Resource\">\n                  <pdfaProperty:name>ConformanceLevel</pdfaProperty:name>\n                  <pdfaProperty:valueType>Text</pdfaProperty:valueType>\n                  <pdfaProperty:category>external</pdfaProperty:category>\n                  <pdfaProperty:description>The conformance level of the embedded Factur-X data</pdfaProperty:description>\n                </rdf:li>\n              </rdf:Seq>\n            </pdfaSchema:property>\n          </rdf:li>\n        </rdf:Bag>\n      </pdfaExtension:schemas>\n    </rdf:Description>\n  </rdf:RDF>\n</x:xmpmeta>\n```\n\n----------------------------------------\n\nTITLE: Checking Python and Pango Versions (Bash)\nDESCRIPTION: Commands to check the installed versions of Python and Pango, which are required dependencies for WeasyPrint.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/first_steps.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\npango-view --version\n```\n\n----------------------------------------\n\nTITLE: Unsupported CSS Grid Features in WeasyPrint\nDESCRIPTION: List of CSS Grid properties and features that are either unsupported or untested in WeasyPrint, including inline-grid, subgrids, and various complex scenarios.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_17\n\nLANGUAGE: CSS\nCODE:\n```\ndisplay: inline-grid\nauto content size for grid containers\ngrid-auto-flow: column\nsubgrids\nrepeat(auto-fill, *)\nrepeat(auto-fit, *)\nauto margins for grid items\nspan with line names\nspan for flexible tracks\nsafe and unsafe alignments\nbaseline alignment\ngrid items with intrinsic size (images)\ndistribute space beyond limits\ngrid items larger than grid containers\nmin-width, max-width, min-height, max-height on grid items\ncomplex min-content and max-content cases\nabsolutely positioned and floating grid items\nfragmentation in rows\n```\n\n----------------------------------------\n\nTITLE: Unsupported CSS Basic User Interface Properties in WeasyPrint\nDESCRIPTION: List of CSS Basic User Interface properties that are not supported by WeasyPrint, including resize, cursor, caret-*, nav-*, and accent-color.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/api_reference.rst#2025-04-21_snippet_19\n\nLANGUAGE: CSS\nCODE:\n```\nresize\ncursor\ncaret-*\nnav-*\naccent-color\n```\n\n----------------------------------------\n\nTITLE: Checking Code Style with ruff\nDESCRIPTION: Use the ruff linter to verify that the code follows the project's coding style guidelines.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/contribute.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvenv/bin/python -m ruff check\n```\n\n----------------------------------------\n\nTITLE: Building WeasyPrint Documentation with Sphinx\nDESCRIPTION: Generate the HTML documentation from the Sphinx source files in the docs directory.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/contribute.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nvenv/bin/sphinx-build docs docs/_build\n```\n\n----------------------------------------\n\nTITLE: Running Python for Development Testing\nDESCRIPTION: Launch Python from the virtual environment to test changes to WeasyPrint code.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/contribute.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvenv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Starting WeasyPrint Navigator\nDESCRIPTION: Command to launch the WeasyPrint Navigator web application that displays WeasyPrint output with clickable links.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/changelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m weasyprint.navigator\n```\n\n----------------------------------------\n\nTITLE: Including WeasyPrint Main Function Documentation\nDESCRIPTION: ReStructuredText directive that auto-documents the main CLI entry point function from weasyprint.__main__.main, with system arguments as parameter.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/manpage.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: weasyprint.__main__.main(argv=sys.argv)\n   :noindex:\n```\n\n----------------------------------------\n\nTITLE: Including WeasyPrint README Content\nDESCRIPTION: ReStructuredText directive to include the content of README.rst from parent directory into the documentation.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/manpage.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../README.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for WeasyPrint\nDESCRIPTION: ReStructuredText directives that define the documentation structure and table of contents for WeasyPrint. Sets up two main documentation sections with their respective subsections.\nSOURCE: https://github.com/kozea/weasyprint/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: weasyprint\n\n.. include:: ../README.rst\n\n.. toctree::\n   :caption: Documentation\n   :maxdepth: 2\n\n   first_steps\n   common_use_cases\n   api_reference\n   going_further\n\n.. toctree::\n   :caption: Extra Information\n   :maxdepth: 2\n\n   changelog\n   contribute\n   support\n```"
  }
]