[
  {
    "owner": "ebertti",
    "repo": "django-admin-easy",
    "content": "TITLE: Comprehensive Django-Admin-Easy Examples\nDESCRIPTION: Extended examples demonstrating custom admin actions, field types, and specialized field renderers.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nimport easy\n\nclass YourAdmin(admin.ModelAdmin):\n    list_fields = ('id', 'custom1', 'custom2', 'custom3' ... 'customN')\n\n    actions = ('simples_action',)\n\n    @easy.action('My Little Simple Magic Action')\n    def simple_action(self, request, queryset):\n        return queryset.update(magic=True)\n\n    # actoin only for user that has change permission on this model\n    @easy.action('Another Simple Magic Action', 'change')\n    def simple_action(self, request, queryset):\n        return queryset.update(magic=True)\n\n\n    # render a value of field, method, property or your model or related model\n    simple1 = easy.SimpleAdminField('model_field')\n    simple2 = easy.SimpleAdminField('method_of_model')\n    simple3 = easy.SimpleAdminField('related.attribute_or_method')\n    simple4 = easy.SimpleAdminField('related_set.count', 'count')\n    simple5 = easy.SimpleAdminField(lambda x: x.method(), 'show', 'order_by')\n\n    # render boolean fields\n    bool1 = easy.BooleanAdminField(lambda x: x.value > 10, 'high')\n\n    # render with string format fields\n    format1 = easy.FormatAdminField('{o.model_field} - {o.date_field:Y%-%m}', 'column name')\n\n    # render foreignkey with link to change_form in admin\n    fk1 = easy.ForeignKeyAdminField('related')\n\n    # render foreignkey with link to change_form in admin and related_id content as text\n    fk2 = easy.ForeignKeyAdminField('related', 'related_id')\n\n    # render foreignkey_id, like raw_id_fields, with link to change_form in admin and related_id content as text\n    # without extra queries or select_related to prevent extra n-1 queries\n    raw1 = easy.RawIdAdminField('related')\n\n    # render template\n    template1 = easy.TemplateAdminField('test.html', 'shorty description', 'order_field')\n\n    # render to change_list of another model with a filter on query\n    link1 = easy.LinkChangeListAdminField('app_label', 'model_name', 'attribute_to_text',\n                                          {'field_name':'dynamic_value_model'})\n\n    link2 = easy.LinkChangeListAdminField('app_label', 'model_name', 'attribute_to_text',\n                                          {'field_name':'dynamic_value_model'},\n                                          {'another_field': 'static_value'})\n\n    # render link to generic content type fields\n    # don't forget to use select_related with content-type to avoid N+1 queries like example below\n    generic = easy.GenericForeignKeyAdminField('generic')\n\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n\n        return qs.select_related('content_type')\n\n    # or enable cache\n    generic = easy.GenericForeignKeyAdminField('generic', cache_content_type=True)\n\n    # display image of some model\n    image1 = easy.ImageAdminField('image', {'image_attrs':'attr_value'})\n\n    # use django template filter on a field\n    filter1 = easy.FilterAdminField('model_field', 'upper')\n    filter2 = easy.FilterAdminField('date_field', 'date', 'django', 'y-m-d')\n    filter3 = easy.FilterAdminField('float_field', 'localize', 'l18n')\n\n    @easy.smart(short_description='Field Description 12', admin_order_field='model_field')\n    def custom12(self, obj):\n        return obj.something_cool()\n\n    @easy.short(desc='Field Description 1', order='model_field', tags=True)\n    def decorator1(self, obj):\n        return '<b>' + obj.model_field + '</b>'\n\n    @easy.short(desc='Field Description 2', order='model_field', bool=True)\n    def decorator2(self, obj):\n```\n\n----------------------------------------\n\nTITLE: Using Django-Admin-Easy Decorators\nDESCRIPTION: Using the library's decorators to enhance standard Django admin methods with additional metadata and functionality.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nimport easy\n\nclass YourAdmin(admin.ModelAdmin):\n    fields = ('sum_method', 'some_img', 'is_true')\n\n    @easy.smart(short_description='Sum', admin_order_field='field1', allow_tags=True )\n    def sum_method(self, obj):\n        sum_result = obj.field1 + obj.field2 + obj.field3\n        return '<b>%s</b>' % sum_result\n\n    @easy.short(desc='image', order='id', tags=True)\n    def some_img(self, obj):\n        return '<img scr=\"%s\">' % obj.image\n\n    @easy.short(desc='Positive', order='value', bool=True)\n    def is_true(self, obj):\n        return obj.value > 0\n```\n\n----------------------------------------\n\nTITLE: Using Django-Admin-Easy Fields\nDESCRIPTION: The simplified approach using django-admin-easy's field classes to create the same functionality with less code.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nimport easy\n\nclass YourAdmin(admin.ModelAdmin):\n    fields = ('sum_method', 'some_img', 'is_true')\n\n    sum_method = easy.SimpleAdminField(lambda obj: '<b>%s</b>' % (obj.field1 + obj.field2 + obj.field3), 'Sum', 'field1', True)\n    some_img = easy.ImageAdminField('image', 'id')\n    is_true = easy.BooleanAdminField('Positive', 'value')\n```\n\n----------------------------------------\n\nTITLE: Traditional Django Admin Method Creation\nDESCRIPTION: Example of creating custom admin methods in standard Django, showing how to define computed fields with descriptions, ordering, and HTML support.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nclass YourAdmin(admin.ModelAdmin):\n    fields = ('sum_method', 'some_img', 'is_true')\n\n    def sum_method(self, obj):\n        sum_result = obj.field1 + obj.field2 + obj.field3\n        return '<b>%s</b>' % sum_result\n    sum_method.short_description = 'Sum'\n    sum_method.admin_order_field = 'field1'\n    sum_method.allow_tags = True\n\n    def some_img(self, obj):\n        return '<img scr=\"%s\">' % obj.image\n    some_img.short_description = 'image'\n    some_img.admin_order_field = 'id'\n    some_img.allow_tags = True\n\n    def is_true(self, obj):\n        return obj.value > 0\n    is_true.short_description = 'Positive'\n    is_true.admin_order_field = 'value'\n    is_true.boolean = True\n```\n\n----------------------------------------\n\nTITLE: Caching Admin Fields with Django-Admin-Easy\nDESCRIPTION: The cache decorator and cache management functions enable caching computed admin fields to improve performance.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@easy.cache(10)# in secondd, default is 60\ndef some_field_with_html(self, obj):\n    return obj.related.some_hard_word()\n```\n\n----------------------------------------\n\nTITLE: Cache Clearing in Django-Admin-Easy\nDESCRIPTION: Methods to clear the cache for a model instance when its data changes.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport easy\n# wherever you want\neasy.cache_clear(my_model_instance)\n\n# or\nclass MyModel(models.Model):\n    # ... fields\n\n    def save(*args, **kwargs):\n        easy.cache_clear(self)\n        super(MyModel, self).save(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Custom Admin View Mixin\nDESCRIPTION: Example of using MixinEasyViews to create custom admin views\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nimport easy\n\nclass MyModelAdmin(easy.MixinEasyViews, admin.ModelAdmin):\n    # ...\n\n    def easy_view_jump(self, request, pk=None):\n        # do something here\n        return HttpResponse('something')\n```\n\n----------------------------------------\n\nTITLE: HTML Tags Decorator in Django-Admin-Easy\nDESCRIPTION: The with_tags decorator allows HTML content to be displayed safely in the admin interface without manually using mark_safe.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@easy.with_tags()\ndef some_field_with_html(self, obj):\n    return '<b>{}</b>'.format(obj.value)\n# output some as: mark_safe(\"<b>something</b>\")\n```\n\n----------------------------------------\n\nTITLE: Template Filter Integration in Django-Admin-Easy\nDESCRIPTION: Applying Django template filters to admin field values using easy.filter decorator.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# builtin template filter like {{ value|title }}\n@easy.filter('title')\ndef some_field_with_html(self, obj):\n    return 'ezequiel bertti'\n# output: \"Ezequiel Bertti\"\n\n# like {% load i10n %} and {{ value|localize }}\n@easy.filter('localize', 'l10n')\ndef some_field_with_html(self, obj):\n    return 10000\n# output: \"10.000\"\n\n# like {{ value|date:'y-m-d' }}\n@easy.filter('date', 'default', 'y-m-d')\ndef some_field_with_html(self, obj):\n    return datetime(2016, 06, 28)\n# output: \"16-06-28\"\n```\n\n----------------------------------------\n\nTITLE: Django Utility Function Integration in Django-Admin-Easy\nDESCRIPTION: Using Django's utility functions with the utils decorator to process field values.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@easy.utils('html.escape')\n@easy.utils('html.conditional_escape')\n@easy.utils('html.strip_tags')\n@easy.utils('safestring.mark_safe')\n@easy.utils('safestring.mark_for_escaping')\n@easy.utils('text.slugify')\n@easy.utils('translation.gettext')\n@easy.utils('translation.ugettext')\n@easy.utils('translation.gettext_lazy')\n@easy.utils('translation.ugettext_lazy')\n@easy.utils('translation.gettext_noop')\n@easy.utils('translation.ugettext_noop')\ndef your_method(self, obj):\n    return obj.value\n```\n\n----------------------------------------\n\nTITLE: Custom Admin Fields Registration\nDESCRIPTION: Example showing how to register custom admin fields with readonly_fields\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nimport easy\n\nclass YourAdmin(admin.ModelAdmin):\n    fields = ('custom1', 'custom2', 'custom3' ... 'customN')\n    readonly_fields = ('custom1', 'custom2', 'custom3' ... 'customN')\n\n    custom1 = easy.ForeignKeyAdminField('related')\n    # ...\n```\n\n----------------------------------------\n\nTITLE: List Fields Declaration\nDESCRIPTION: Example of using custom admin fields in list_fields declaration\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nimport easy\n\nclass YourAdmin(admin.ModelAdmin):\n    list_fields = (\n        easy.TemplateAdminField('test.html', 'shorty description', 'order_field'),\n        easy.ImageAdminField('image', {'image_attrs':'attr_value'}),\n        # ...\n    )\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: URL Reverse Examples\nDESCRIPTION: Example of generating URLs for custom admin views\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.urlresolvers import reverse\n\n# to do something with one object of a model\nreverse('admin:myapp_mymodel_easy', args=(obj.pk, 'jump'))\n\n# or to do something with a model\nreverse('admin:myapp_mymodel_easy', args=('jump',))\n```\n\n----------------------------------------\n\nTITLE: URL Template Tags\nDESCRIPTION: HTML template examples for generating admin URLs\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n#<!-- to do something with one object of a model -->\n{% url 'admin:myapp_mymodel_easy' obj.pk 'jump' %}\n\n#<!-- or to do something with a model -->\n{% url 'admin:myapp_mymodel_easy' 'jump' %}\n```\n\n----------------------------------------\n\nTITLE: Admin Action Response\nDESCRIPTION: Example of handling admin action responses with messages\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib import messages\nimport easy\n\nclass YourAdmin(admin.ModelAdmin):\n    # ...\n    actions = ('simples_action',)\n\n    def simples_action(self, request, queryset):\n\n        success = queryset.do_something()\n        if success:\n            return easy.action_response(request, 'Some success message for user', keep_querystring=False)\n        else:\n            return easy.action_response(request, 'Some error for user', messages.ERROR)\n\n        # or just redirect to changelist with filters\n        return easy.action_response()\n```\n\n----------------------------------------\n\nTITLE: Simple Model Field Comparison\nDESCRIPTION: Example of a boolean comparison on a model field\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nreturn obj.model_field > 10\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Django Admin Easy Project\nDESCRIPTION: This snippet lists the required packages for the Django Admin Easy project. It includes model-bakery for test fixtures, Sphinx for documentation generation, Pillow for image processing, tox for testing across different environments, coverage for test coverage reporting, and django-debug-toolbar for development debugging.\nSOURCE: https://github.com/ebertti/django-admin-easy/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodel-bakery\nSphinx\nPillow\ntox\ncoverage\ndjango-debug-toolbar\n```"
  }
]