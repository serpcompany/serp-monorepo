[
  {
    "owner": "communitytoolkit",
    "repo": "windowscommunitytoolkit",
    "content": "TITLE: Configuring Basic XamlControlsResources in App.xaml\nDESCRIPTION: Basic setup for WinUI library integration by setting XamlControlsResources as the Application resources in App.xaml. Required for Windows Community Toolkit UI controls to function properly.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.UI.Controls/ReadMe.txt#2025-04-22_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Application>\n    <Application.Resources>\n        <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Creating Binding Template in XML for Windows Community Toolkit Sample\nDESCRIPTION: Example of a .bind XAML template that demonstrates how to define interactive properties with binding syntax. This allows users to modify control properties in real-time using the sample application's property panel.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Grid>\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"48\" />\n        <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <TextBlock Grid.Column=\"1\"\n        Foreground=\"Black\"\n        Text=\"@[Text:String:Hey!]\"\n        FontSize=\"@[FontSize:Slider:12:10-30]\"\n        VerticalAlignment=\"@[Vertical Alignment:Enum:VerticalAlignment.Center]\">\n    </TextBlock>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring XamlControlsResources with MergedDictionaries\nDESCRIPTION: Advanced setup showing how to combine WinUI XamlControlsResources with additional application resources using MergedDictionaries. This approach allows for custom resource overrides while maintaining WinUI compatibility.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.UI.Controls/ReadMe.txt#2025-04-22_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<Application\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:controls=\"using:Microsoft.UI.Xaml.Controls\">\n    <Application.Resources>\n        <controls:XamlControlsResources>\n            <controls:XamlControlsResources.MergedDictionaries>\n                <!-- Other app resources here -->\n            </controls:XamlControlsResources.MergedDictionaries>\n        </controls:XamlControlsResources>\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Styles from Resources\nDESCRIPTION: Code example demonstrating how to apply styles from resources to dynamically created elements. This technique allows users to modify styles in the template that apply to elements added through code.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nif (resources?.ContainsKey(\"ThingStyle\") == true)\n{\n    newThing.Style = resources[\"ThingStyle\"] as Style;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Named Controls in XAML with IXamlRendererListener\nDESCRIPTION: Code example showing how to implement the IXamlRendererListener interface to access named controls in the dynamically loaded XAML. This allows hooking up events and accessing elements that can't be directly bound in the template.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar markdownText = control.FindChild(\"MarkdownText\") as MarkdownTextBlock;\nif (markdownText != null)\n{\n    markdownText.LinkClicked += MarkdownText_LinkClicked;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Interactive Commands in Sample Controller\nDESCRIPTION: Example of registering commands that can be accessed from the main panel even when editing properties or XAML. This approach should be used instead of buttons in the sample since events can't be directly used in dynamic XAML.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override async void OnNavigatedTo(NavigationEventArgs e)\n{\n    base.OnNavigatedTo(e);\n\n    SampleController.Current.RegisterNewCommand(\"Image with placeholder\", (sender, args) =>\n    {\n        AddImage(false, true);\n    });\n\n    // ‚Ä¢‚Ä¢‚Ä¢\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding Syntax for Slider Control\nDESCRIPTION: Shows how to create a two-way binding in a template by adding an extra '@' symbol after the property definition. This ensures changes to the value are propagated back to the source.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Slider Value=\"@[Value:Slider:0:0-180]@\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring API Version Check in Sample JSON\nDESCRIPTION: JSON configuration example showing how to restrict sample visibility based on API availability and display version requirements. Uses ApiCheck to verify type presence and BadgeUpdateVersionRequired to show version requirements.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n    {\n        // ‚Ä¢‚Ä¢‚Ä¢\n        \"About\": \"MySample needs 10.0.18362 or higher to work.\",\n        \"ApiCheck\": \"Windows.UI.Xaml.Controls.NavigationView\",\n        \"BadgeUpdateVersionRequired\": \"Fall Creators Update required\",\n        // ‚Ä¢‚Ä¢‚Ä¢\n    }\n```\n\n----------------------------------------\n\nTITLE: XAML View Generated with Actual Values\nDESCRIPTION: Shows how the binding template appears in the XAML tab, with binding expressions replaced by actual values selected by the user. This makes it easy for developers to copy the exact XAML needed for their application.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Grid Margin=\"10\">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"48\" />\n        <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <TextBlock Grid.Column=\"1\"\n        Foreground=\"Black\"\n        Text=\"User Entered Text\"\n        FontSize=\"12\"\n        VerticalAlignment=\"Left\">\n    </TextBlock>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Property Page XAML Generated from Binding Template\nDESCRIPTION: Demonstrates how the .bind template is automatically transformed when displayed on the property page. The @[Property Name] syntax is converted to Binding expressions that connect to the property system.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Grid Margin=\"10\">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"48\" />\n        <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <TextBlock Grid.Column=\"1\" Foreground=\"Black\"\n        Text=\"{Binding Text.Value, Mode=OneWay}\"\n        FontSize=\"{Binding FontSize.Value, Mode=OneWay}\"\n        VerticalAlignment=\"{Binding VerticalAlignment.Value, Mode=OneWay}\">\n    </TextBlock>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Project Output Targets for Notifications Library\nDESCRIPTION: A table showing the different output targets for the Microsoft.Toolkit.Uwp.Notifications project, including .NET Standard, UWP, WinRT, and .NET Core. It specifies which languages (C# or C++) are supported for each target.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.Notifications/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| C#               | C++      |\n| ---------------- | ------------------- |\n| NET Standard 1.4 | UWP WinRT Component |\n| UWP C# DLL |                     |\n| .Net Core DLL |                     |\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Markdown formatted documentation outlining contribution guidelines for Windows Community Toolkit, including sections for questions, bug reports, good first issues, help wanted, feature requests, documentation, and pull requests.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ‚ú® Contributing to the Windows Community Toolkit\n\nThank you for exhibiting interest in contributing to the Windows Community Toolkit. The team is delighted to welcome you onboard to our exciting and growing project. Any contribution or value added go a long way to enhance the project!\n\nIn the next few steps, you will be able to see a glimpse of ways you can contribute to the Windows Community Toolkit.\n\nüö® **It is highly recommended to visit [Windows Community Toolkit Wiki](https://aka.ms/wct/wiki) where you can find complete and detail-oriented content of this page** üö®\n\n## ‚ùî Questions <a name=\"question\"></a>\n\nDue to the high volume of incoming issues please keep our GitHub issues for bug reports and feature requests. For general questions, there is a higher chance of getting your question answered on [StackOverflow](https://stackoverflow.com/questions/tagged/windows-community-toolkit) where questions should be tagged with the tag `windows-community-toolkit`.\n\nFor missing documentation related question, please file an issue at [Microsoft Docs](https://github.com/MicrosoftDocs/WindowsCommunityToolkitDocs/issues/new).\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Configuration for Windows Community Toolkit\nDESCRIPTION: Example JSON structure for registering a new sample in the samples.json file. This configuration specifies the sample's name, type, description, code location, and documentation URL within its category.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Name\": \"Panel controls\",\n    \"Icon\": \"Icons/Layouts.png\",\n    \"Samples\": [\n      {\n        \"Name\": \"AdaptiveGridView\",\n        \"Type\": \"AdaptiveGridViewPage\",\n        \"About\": \"The AdaptiveGridView control allows to present information within a Grid View perfectly adjusting the total display available space. It reacts to changes in the layout as well as the content so it can adapt to different form factors automatically. The number and the width of items are calculated based on the screen resolution in order to fully leverage the available screen space. The property ItemsHeight define the items fixed height and the property DesiredWidth sets the minimum width for the elements to add a new column.\",\n        \"CodeUrl\": \"https://github.com/CommunityToolkit/WindowsCommunityToolkit/tree/main/Microsoft.Toolkit.Uwp.UI.Controls.Core/TextToolbar\",\n        \"XamlCodeFile\": \"AdaptiveGridViewCode.bind\",\n        \"DocumentationUrl\": \"https://raw.githubusercontent.com/CommunityToolkit/WindowsCommunityToolkit/main/docs/controls/AdaptiveGridView.md\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Example\nDESCRIPTION: Example folder structure showing the recommended organization of Windows Community Toolkit repositories for local development and testing.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/ReadMe.md#2025-04-22_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\nRepos\n‚îú‚îÄ‚îÄ WindowsCommunityToolkit\n‚îú‚îÄ‚îÄ WindowsCommunityToolkitDocs\n‚îî‚îÄ‚îÄ Others\n```\n\n----------------------------------------\n\nTITLE: Listing UWP Application APPX Dependencies\nDESCRIPTION: A list of required APPX packages that must be included when deploying a UWP application. These dependencies provide the .NET Native framework, runtime components, UI controls from WinUI, and Visual C++ libraries.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/UITests/UITests.Tests.TAEF/UITests.App.dependencies.Release.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMicrosoft.NET.Native.Framework.2.2.appx\nMicrosoft.NET.Native.Runtime.2.2.appx\nMicrosoft.UI.Xaml.2.7.appx\nMicrosoft.VCLibs.x86.14.00.appx\n```\n\n----------------------------------------\n\nTITLE: Creating a Code Block with Language Identifier in Markdown\nDESCRIPTION: This snippet demonstrates how to create a code block with language identifier for syntax highlighting in markdown. The example shows a C# code block that prints 'Hello world!' to the console.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/SamplePages/MarkdownTextBlock/InitialContent.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void Main(string[] args)\n{\n  Console.WriteLine(\"Hello world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Java Code Block in Markdown\nDESCRIPTION: This snippet shows how to create a code block for Java code in markdown by indenting each line with four spaces. The example demonstrates a simple Java main method that prints 'Hello world!'.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/SamplePages/MarkdownTextBlock/InitialContent.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void main(Strings argv[]){\n    System.out.println(\"Hello world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Reference-based Image Links in Markdown\nDESCRIPTION: Demonstrates how to create reference-based image links in Markdown where image and link URLs are defined separately using reference ids.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/SamplePages/MarkdownTextBlock/InitialContent.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[![image][1]][2]\n\n[1]:https://raw.githubusercontent.com/CommunityToolkit/WindowsCommunityToolkit/main/build/nuget.png\n[2]:https://docs.microsoft.com/windows/uwpcommunitytoolkit/\n```\n\n----------------------------------------\n\nTITLE: YAML Header Formatting in Markdown\nDESCRIPTION: Shows how to create YAML metadata headers at the beginning of a Markdown document to specify document properties.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/SamplePages/MarkdownTextBlock/InitialContent.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Windows Community Toolkit\ndate: 2018/10/17\n---\n```\n\n----------------------------------------\n\nTITLE: Table Formatting in Markdown\nDESCRIPTION: Demonstrates how to create and format tables in Markdown with column alignment options and pipe separators.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/Microsoft.Toolkit.Uwp.SampleApp/SamplePages/MarkdownTextBlock/InitialContent.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nsome|header|labels\n:---|:--:|---:\nLeft-justified|center-justified|right-justified\na|b|c\nd|e|f\n```\n\n----------------------------------------\n\nTITLE: MIT License Header for Windows Community Toolkit\nDESCRIPTION: Standard copyright and license header used in source files to indicate MIT license terms and .NET Foundation ownership.\nSOURCE: https://github.com/communitytoolkit/windowscommunitytoolkit/blob/main/build/header.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// See the LICENSE file in the project root for more information.\n```"
  }
]