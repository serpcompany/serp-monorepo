[
  {
    "owner": "blacksmithgu",
    "repo": "obsidian-dataview",
    "content": "TITLE: Basic Markdown File with YAML Frontmatter for Dataview\nDESCRIPTION: Example of a markdown file with YAML frontmatter containing metadata that Dataview can index, including author, publication date, and tags.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/index.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nauthor: \"Edgar Allan Poe\"\npublished: 1845\ntags: poems\n---\n\n# The Raven\n\nOnce upon a midnight dreary, while I pondered, weak and weary,\nOver many a quaint and curious volume of forgotten lore—\n```\n\n----------------------------------------\n\nTITLE: Basic TABLE Query with Multiple Fields\nDESCRIPTION: A TABLE query showing multiple fields including due dates, file tags, and an average calculation of working hours.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_4\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE due, file.tags AS \"tags\", average(working-hours)\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Dataview Query Language (DQL) Expression Syntax\nDESCRIPTION: This snippet provides a high-level overview of all valid expressions in Dataview Query Language, including literals, lambdas, references, arithmetic operations, comparisons, and special operations.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\n# Literals\n1                   (number)\ntrue/false          (boolean)\n\"text\"              (text)\ndate(2021-04-18)    (date)\ndur(1 day)          (duration)\n[[Link]]            (link)\n[1, 2, 3]           (list)\n{ a: 1, b: 2 }      (object)\n\n# Lambdas\n(x1, x2) => ...     (lambda)\n\n# References\nfield               (directly refer to a field)\nsimple-field        (refer to fields with spaces/punctuation in them like \"Simple Field!\")\na.b                 (if a is an object, retrieve field named 'b')\na[expr]             (if a is an object or array, retrieve field with name specified by expression 'expr')\nf(a, b, ...)        (call a function called `f` on arguments a, b, ...)\n\n# Arithmetic\na + b               (addition)\na - b               (subtraction)\na * b               (multiplication)\na / b               (division)\na % b               (modulo / remainder of division)\n\n# Comparison\na > b               (check if a is greater than b)\na < b               (check if a is less than b)\na = b               (check if a equals b)\na != b              (check if a does not equal b)\na <= b              (check if a is less than or equal to b)\na >= b              (check if a is greater than or equal to b)\n\n# Strings\n\na + b               (string concatenation)\na * num             (repeat string <num> times)\n\n# Special Operations\n[[Link]].value      (fetch `value` from page `Link`)\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Metadata Example\nDESCRIPTION: Demonstrates how to add metadata fields using YAML frontmatter at the top of an Obsidian note, showing different data types including text, date, and nested objects.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/add-metadata.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nalias: \"document\"\nlast-reviewed: 2021-08-17\nthoughts:\n  rating: 8\n  reviewable: false\n---\n```\n\n----------------------------------------\n\nTITLE: Evaluating Dataview Expressions with dv.tryEvaluate in JavaScript\nDESCRIPTION: The dv.tryEvaluate function evaluates an arbitrary Dataview expression with an optional context object. It throws an Error on parse or evaluation failure.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndv.tryEvaluate(\"2 + 2\") => 4\ndv.tryEvaluate(\"x + 2\", {x: 3}) => 5\ndv.tryEvaluate(\"length(this.file.tasks)\") => number of tasks in the current file\n```\n\n----------------------------------------\n\nTITLE: Dataview TABLE Query with Multiple Fields\nDESCRIPTION: TABLE query displaying multiple fields including author, published date, and file inlinks, filtered by a poems tag.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/index.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nTABLE author, published, file.inlinks AS \"Mentions\"\nFROM #poems\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a DQL Query with Table Output in Obsidian\nDESCRIPTION: A basic DQL query that creates a table showing ratings and summaries from notes tagged with #games, sorted by rating in descending order. This demonstrates the basic structure of a Dataview Query Language codeblock.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/dql-js-inline.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nTABLE rating AS \"Rating\", summary AS \"Summary\" FROM #games\nSORT rating DESC\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Games with Metadata Using TABLE\nDESCRIPTION: A SQL-like query that displays games from the 'games' folder as a table with time played, length, and rating columns, sorted by rating in descending order.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/examples.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTABLE\n  time-played AS \"Time Played\",\n  length AS \"Length\",\n  rating AS \"Rating\"\nFROM \"games\"\nSORT rating DESC\n```\n\n----------------------------------------\n\nTITLE: TABLE Query with Custom Column Headers in Dataview\nDESCRIPTION: A TABLE query that uses the AS syntax to specify custom headers for columns displaying game metadata.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_11\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE started, file.folder AS Path, file.etags AS \"File Tags\"\nFROM #games\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Pages with DataviewJS\nDESCRIPTION: Examples of using dv.pages() to query content in the vault with different filters.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndv.pages() => all pages in your vault\ndv.pages(\"#books\") => all pages with tag 'books'\ndv.pages('\"folder\"') => all pages from folder \"folder\"\ndv.pages(\"#yes or -#no\") => all pages with tag #yes, or which DON'T have tag #no\ndv.pages('\"folder\" or #tag') => all pages with tag #tag, or from folder \"folder\"\n```\n\n----------------------------------------\n\nTITLE: Creating DataviewJS Block in Markdown\nDESCRIPTION: Shows how to create a DataviewJS code block in Markdown to execute Dataview queries. The block provides access to the 'dv' variable which contains the full codeblock-relevant Dataview API.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/intro.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```dataviewjs\ndv.pages(\"#thing\")...\n```\n```\n\n----------------------------------------\n\nTITLE: DataArray Interface Implementation in TypeScript\nDESCRIPTION: Comprehensive TypeScript interface definition for DataArray, a proxied array implementation that provides enhanced data manipulation capabilities. Includes methods for filtering, mapping, sorting, grouping, and mathematical operations with full type definitions.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/data-array.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** A function which maps an array element to some value. */\nexport type ArrayFunc<T, O> = (elem: T, index: number, arr: T[]) => O;\n\n/** A function which compares two types. */\nexport type ArrayComparator<T> = (a: T, b: T) => number;\n\n/**\n * Proxied interface which allows manipulating array-based data. All functions on a data array produce a NEW array\n * (i.e., the arrays are immutable).\n */\nexport interface DataArray<T> {\n    /** The total number of elements in the array. */\n    length: number;\n\n    /** Filter the data array down to just elements which match the given predicate. */\n    where(predicate: ArrayFunc<T, boolean>): DataArray<T>;\n    /** Alias for 'where' for people who want array semantics. */\n    filter(predicate: ArrayFunc<T, boolean>): DataArray<T>;\n\n    /** Map elements in the data array by applying a function to each. */\n    map<U>(f: ArrayFunc<T, U>): DataArray<U>;\n    /** Map elements in the data array by applying a function to each, then flatten the results to produce a new array. */\n    flatMap<U>(f: ArrayFunc<T, U[]>): DataArray<U>;\n    /** Mutably change each value in the array, returning the same array which you can further chain off of. */\n    mutate(f: ArrayFunc<T, any>): DataArray<any>;\n\n    /** Limit the total number of entries in the array to the given value. */\n    limit(count: number): DataArray<T>;\n    /**\n     * Take a slice of the array. If `start` is undefined, it is assumed to be 0; if `end` is undefined, it is assumed\n     * to be the end of the array.\n     */\n    slice(start?: number, end?: number): DataArray<T>;\n    /** Concatenate the values in this data array with those of another iterable / data array / array. */\n    concat(other: Iterable<T>): DataArray<T>;\n\n    /** Return the first index of the given (optionally starting the search) */\n    indexOf(element: T, fromIndex?: number): number;\n    /** Return the first element that satisfies the given predicate. */\n    find(pred: ArrayFunc<T, boolean>): T | undefined;\n    /** Find the index of the first element that satisfies the given predicate. Returns -1 if nothing was found. */\n    findIndex(pred: ArrayFunc<T, boolean>, fromIndex?: number): number;\n    /** Returns true if the array contains the given element, and false otherwise. */\n    includes(element: T): boolean;\n\n    /**\n     * Return a string obtained by converting each element in the array to a string, and joining it with the\n     * given separator (which defaults to ', ').\n     */\n    join(sep?: string): string;\n\n    /**\n     * Return a sorted array sorted by the given key; an optional comparator can be provided, which will\n     * be used to compare the keys in lieu of the default dataview comparator.\n     */\n    sort<U>(key: ArrayFunc<T, U>, direction?: \"asc\" | \"desc\", comparator?: ArrayComparator<U>): DataArray<T>;\n\n    /**\n     * Return an array where elements are grouped by the given key; the resulting array will have objects of the form\n     * { key: <key value>, rows: DataArray }.\n     */\n    groupBy<U>(key: ArrayFunc<T, U>, comparator?: ArrayComparator<U>): DataArray<{ key: U; rows: DataArray<T> }>;\n\n    /**\n     * Return distinct entries. If a key is provided, then rows with distinct keys are returned.\n     */\n    distinct<U>(key?: ArrayFunc<T, U>, comparator?: ArrayComparator<U>): DataArray<T>;\n\n    /** Return true if the predicate is true for all values. */\n    every(f: ArrayFunc<T, boolean>): boolean;\n    /** Return true if the predicate is true for at least one value. */\n    some(f: ArrayFunc<T, boolean>): boolean;\n    /** Return true if the predicate is FALSE for all values. */\n    none(f: ArrayFunc<T, boolean>): boolean;\n\n    /** Return the first element in the data array. Returns undefined if the array is empty. */\n    first(): T;\n    /** Return the last element in the data array. Returns undefined if the array is empty. */\n    last(): T;\n\n    /** Map every element in this data array to the given key, and then flatten it.*/\n    to(key: string): DataArray<any>;\n    /**\n     * Recursively expand the given key, flattening a tree structure based on the key into a flat array. Useful for handling\n     * hierarchical data like tasks with 'subtasks'.\n     */\n    expand(key: string): DataArray<any>;\n\n    /** Run a lambda on each element in the array. */\n    forEach(f: ArrayFunc<T, void>): void;\n\n    /** Calculate the sum of the elements in the array. */\n    sum(): number;\n\n    /** Calculate the average of the elements in the array. */\n    avg(): number;\n\n    /** Calculate the minimum of the elements in the array. */\n    min(): number;\n\n    /** Calculate the maximum of the elements in the array. */\n    max(): number;\n\n    /** Convert this to a plain javascript array. */\n    array(): T[];\n\n    /** Allow iterating directly over the array. */\n    [Symbol.iterator](): Iterator<T>;\n\n    /** Map indexes to values. */\n    [index: number]: any;\n    /** Automatic flattening of fields. Equivalent to implicitly calling `array.to(\"field\")` */\n    [field: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DQL Query Structure Pattern\nDESCRIPTION: The fundamental pattern for structuring a Dataview Query Language (DQL) query, showing the required query type, optional FROM source, and optional data commands.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\n<QUERY-TYPE> <fields>\nFROM <source>\n<DATA-COMMAND> <expression>\n<DATA-COMMAND> <expression>\n          ...\n```\n```\n\n----------------------------------------\n\nTITLE: Sort Function for Array Ordering\nDESCRIPTION: The sort function sorts a list and returns a new list in sorted order.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsort(list(3, 2, 1)) = list(1, 2, 3)\nsort(list(\"a\", \"b\", \"aa\")) = list(\"a\", \"aa\", \"b\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Comprehensive File Metadata with Dataview in Obsidian\nDESCRIPTION: This Dataview query creates a detailed table of metadata for the current file, including name, folder, creation time, modification time, tags, and frontmatter. It demonstrates how to retrieve and display a wide range of file properties.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/example tables.md#2025-04-19_snippet_2\n\nLANGUAGE: dataview\nCODE:\n```\nTABLE file.name, file.folder, file.ctime, file.cday, file.mtime, file.mday, file.tags, file.frontmatter, file.name, file.folder, file.ctime, file.cday, file.mtime, file.mday, file.tags, file.frontmatter\nWHERE file = this.file\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Complex Data Operations\nDESCRIPTION: A LIST query that demonstrates array type checking, link filtering, array length sorting, flattening, and sorting by linked page properties.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_16\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST rows.c\nWHERE typeof(contacts) = \"array\" AND contains(contacts, [[Mr. L]])\nSORT length(contacts)\nFLATTEN contacts as c\nSORT link(c).age ASC\n```\n```\n\n----------------------------------------\n\nTITLE: Type Checking in Dataview Comparisons\nDESCRIPTION: An example showing how to safely compare dates by first checking the type to avoid unexpected results with null values.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_5\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTASK\nWHERE typeof(due) = \"date\" AND due <= date(today)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating DataviewJS Codeblock\nDESCRIPTION: Shows how to create a basic DataviewJS codeblock in Obsidian markdown.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```dataviewjs\ndv.table([], ...)\n```\n```\n\n----------------------------------------\n\nTITLE: Using DataviewJS for Complex Data Visualization\nDESCRIPTION: A JavaScript-based Dataview query that filters pages by tags and ratings, then groups and displays them by genre. Demonstrates using the dv object to access the Dataview API in a JavaScript context.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/dql-js-inline.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n```dataviewjs\nlet pages = dv.pages(\"#books and -#books/finished\").where(b => b.rating >= 7);\nfor (let group of pages.groupBy(b => b.genre)) {\n   dv.header(3, group.key);\n   dv.list(group.rows.file.name);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Obsidian Page with Metadata in Markdown\nDESCRIPTION: A sample Markdown page demonstrating the use of frontmatter, inline fields, and tags to add metadata to an Obsidian note. This example includes various types of user-defined metadata for a movie review.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/metadata-pages.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ngenre: \"action\"\nreviewed: false\n---\n# Movie X\n#movies\n\n**Thoughts**:: It was decent.\n**Rating**:: 6\n\n[mood:: okay] | [length:: 2 hours]\n```\n\n----------------------------------------\n\nTITLE: Accessing File Properties with Inline DQL\nDESCRIPTION: Examples of accessing various file properties and metadata from the current page and other pages using inline DQL queries. Shows how to reference both the current page and linked pages.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/dql-js-inline.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`= this.file.name`\n`= this.file.mtime`\n`= this.someMetadataField`\n`= [[secondPage]].file.name`\n`= [[secondPage]].file.mtime`\n`= [[secondPage]].someMetadataField`\n```\n\n----------------------------------------\n\nTITLE: Split Function for String Division\nDESCRIPTION: The split function divides a string into an array of substrings based on a delimiter. It can limit the number of splits and handle regex capture groups in the delimiter.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nsplit(\"hello world\", \" \") = list(\"hello\", \"world\")\nsplit(\"hello  world\", \"\\s\") = list(\"hello\", \"world\")\nsplit(\"hello there world\", \" \", 2) = list(\"hello\", \"there\")\nsplit(\"hello there world\", \"(t?here)\") = list(\"hello \", \"there\", \" world\")\nsplit(\"hello there world\", \"( )(x)?\") = list(\"hello\", \" \", \"\", \"there\", \" \", \"\", \"world\")\n```\n\n----------------------------------------\n\nTITLE: TABLE Query with Calculations and Custom Headers in Dataview\nDESCRIPTION: A TABLE query that displays calculated values (duration played) and custom headers for game-related metadata.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_12\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE\ndefault(finished, date(today)) - started AS \"Played for\",\nfile.folder AS Path,\nfile.etags AS \"File Tags\"\nFROM #games\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced Dataview TABLE Query with Field Operations\nDESCRIPTION: TABLE query with field operations using functions to calculate age of poems and count mentions, demonstrating Dataview's ability to process data dynamically.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/index.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nTABLE author, date(now).year - published AS \"Age in Yrs\", length(file.inlinks) AS \"Counts of Mentions\"\nFROM #poems\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Task List with Metadata in Obsidian Dataview (Markdown)\nDESCRIPTION: This snippet demonstrates how to create a task list with various metadata fields using Obsidian Dataview syntax. It includes completed and uncompleted tasks, tags, dates, custom fields, and task hierarchies.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/checklist.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] Normal task, tags inherited from page [completion:: 2021-10-23]\n* [ ] Task with a #tag, adds to inherited page tags\n\t* [ ] Task that inherits tag from above and page tags\n* [x] Completed task ✅ 2021-08-06 📅 2021-08-07\n* [x] Completed task [completion::2021-08-06] [due::2021-08-07]\n* [ ] task with [annotation::arbitrary] [completion:: 2021-10-23]\n* [ ] Scheduled task 📅  2021-08-07\n* [ ] Task that overrides creation date of file ➕ 2021-08-06\n* [ ] Repeating task 🔁Mondays\n* [ ] #tell @person some important thing [p::1]\n* [x] a less important thing [p::2]\n* [ ] another important thing [p::1]\n\n#page-tag\n\n## Section\n- [ ] additional task with a block id ^block-id\n- [ ] additional task, should link to header\n```\n\n----------------------------------------\n\nTITLE: Sorting Files by Last Modified Time\nDESCRIPTION: A query that displays files from the 'books' folder as a table with their last modified time, sorted from most recent to oldest modification.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/examples.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nTABLE file.mtime AS \"Last Modified\"\nFROM \"books\"\nSORT file.mtime DESC\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Column Names in Dataview Tables\nDESCRIPTION: Shows how to create tables with custom column names by using the 'AS' keyword to rename fields in the output table.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_2\n\nLANGUAGE: dataview\nCODE:\n```\nTABLE file.day AS \"Day\", file.mtime AS \"Last Modified\" FROM \"folder\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Books by Genre and Displaying in Sorted Tables using Dataview\nDESCRIPTION: This snippet demonstrates how to use Dataview's API to group books by genre and create separate tables for each genre with books sorted by rating in descending order. It leverages the groupBy method and iterates through the resulting groups to create headers and tables.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-examples.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let group of dv.pages(\"#book\").groupBy(p => p.genre)) {\n\tdv.header(3, group.key);\n\tdv.table([\"Name\", \"Time Read\", \"Rating\"],\n\t\tgroup.rows\n\t\t\t.sort(k => k.rating, 'desc')\n\t\t\t.map(k => [k.file.link, k[\"time-read\"], k.rating]))\n}\n```\n\n----------------------------------------\n\nTITLE: DataviewJS Table Creation\nDESCRIPTION: Example of creating a complex table with nested bullet points\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndv.table(\n\t[\"Col1\", \"Col2\", \"Col3\"],\n\t\t[\n\t\t\t[\"Row1\", \"Dummy\", \"Dummy\"],\n\t\t\t[\"Row2\", \n\t\t\t\t[\"Bullet1\",\n\t\t\t\t \"Bullet2\",\n\t\t\t\t \"Bullet3\"],\n\t\t\t \"Dummy\"],\n\t\t\t[\"Row3\", \"Dummy\", \"Dummy\"]\n\t\t]\n\t);\n```\n\n----------------------------------------\n\nTITLE: TABLE Query with FLATTEN for List Processing\nDESCRIPTION: A TABLE query that flattens file lists into separate rows, filtering by author name and displaying list text with a custom column header.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_15\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE L.text AS \"My lists\"\nFROM \"dailys\"\nFLATTEN file.lists AS L\nWHERE contains(L.author, \"Surname\")\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Completed on a Specific Date with Dataview\nDESCRIPTION: This Dataview query returns all tasks from the 'tasks' folder that were completed on August 6, 2021. It uses the 'completion' field to filter tasks by their completion date.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/Tasks Completed on specific Date.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\ntask from \"tasks\" where\ncompletion = date(2021-08-06)\n```\n\n----------------------------------------\n\nTITLE: Grouping Query Results in Dataview\nDESCRIPTION: Shows how to organize results into groups using the GROUP BY clause, which creates hierarchical groupings based on specified fields.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_7\n\nLANGUAGE: dataview\nCODE:\n```\nTABLE file.name FROM \"folder\" GROUP BY file.folder\n```\n\n----------------------------------------\n\nTITLE: Embedding Date Calculations with Inline DQL\nDESCRIPTION: A practical example showing how to embed date calculations within text using inline DQL queries. This demonstrates displaying the current date and calculating time until a deadline.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/dql-js-inline.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nToday is `= date(today)` - `= [[exams]].deadline - date(today)` until exams!\n```\n\n----------------------------------------\n\nTITLE: Filtering Games by Tags Using LIST\nDESCRIPTION: A query that lists games belonging to either the 'mobas' or 'crpg' game tags, demonstrating the use of the OR operator for filtering by multiple tags.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/examples.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nLIST FROM #games/mobas OR #games/crpg\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Example with Nested Objects\nDESCRIPTION: A YAML frontmatter example demonstrating how nested object structures are defined in Obsidian, which can later be accessed using object notation in Dataview queries.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - \"ABC\"\ncurrent_episode: \"S01E03\"\nepisode_metadata:\n  previous: \"S01E02\"\n  next: \"S01E04\"\n---\n```\n\n----------------------------------------\n\nTITLE: Grouped TASK Query by File in Dataview\nDESCRIPTION: A TASK query that groups incomplete tasks by their source file, showing how to organize tasks based on where they appear in the vault. The numbers in parentheses indicate task counts per group.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_17\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTASK\nWHERE !completed\nGROUP BY file.link\n```\n```\n\n----------------------------------------\n\nTITLE: Filter Function for Array Filtering\nDESCRIPTION: The filter function filters elements in an array according to a predicate function, returning a new list of the elements that matched the condition.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfilter([1, 2, 3], (x) => x >= 2) = [2, 3]\nfilter([\"yes\", \"no\", \"yas\"], (x) => startswith(x, \"y\")) = [\"yes\", \"yas\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Games with Dataview Markdown\nDESCRIPTION: Example of using Dataview query language to create a table of games with metadata, sorted by rating.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\ntable time-played, length, rating\nfrom \"games\"\nsort rating desc\n```\n```\n\n----------------------------------------\n\nTITLE: TABLE Query with Folder Filtering and Multiple Fields\nDESCRIPTION: A TABLE query for pages in a specific protocol folder, displaying creation time, appointment details, and follow-ups, filtered and sorted.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_14\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE file.ctime, appointment.type, appointment.time, follow-ups\nFROM \"30 Protocols/32 Management\"\nWHERE follow-ups\nSORT appointment.time\n```\n```\n\n----------------------------------------\n\nTITLE: Exact Contains Function for Strings, Lists, and Objects\nDESCRIPTION: The econtains function checks if an exact match is found in a string, list, or object. It's case sensitive and behaves differently depending on the input type.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\necontains(\"Hello\", \"Lo\") = false\necontains(\"Hello\", \"lo\") = true\n```\n\nLANGUAGE: javascript\nCODE:\n```\necontains([\"These\", \"are\", \"words\"], \"word\") = false\necontains([\"These\", \"are\", \"words\"], \"words\") = true\n```\n\nLANGUAGE: javascript\nCODE:\n```\necontains({key:\"value\", pairs:\"here\"}, \"here\") = false\necontains({key:\"value\", pairs:\"here\"}, \"key\") = true\necontains({key:\"value\", recur:{recurkey: \"val\"}}, \"value\") = false\necontains({key:\"value\", recur:{recurkey: \"val\"}}, \"Recur\") = false\necontains({key:\"value\", recur:{recurkey: \"val\"}}, \"recurkey\") = false\n```\n\n----------------------------------------\n\nTITLE: Querying Uncompleted Tasks with Dataview in Obsidian\nDESCRIPTION: This Dataview query displays all uncompleted tasks from all folders except the 'recipes' folder. It uses the 'task' keyword to indicate it should retrieve task items and filters them using the '!completed' condition to show only those that remain uncompleted.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/Uncompleted Tasks.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\ntask from -\"recipes\"\nWHERE !completed\n```\n\n----------------------------------------\n\nTITLE: Extracting Tasks from Projects\nDESCRIPTION: A query that extracts all tasks from files in the 'dataview' folder, showing both completed and uncompleted tasks with their hierarchical structure.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/examples.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nTASK FROM \"dataview\"\n```\n\n----------------------------------------\n\nTITLE: Using Lambdas with Map Function in Dataview\nDESCRIPTION: An example of using lambdas with the map function in a CALENDAR query to check if all tasks are completed and flatten the results.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_9\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nCALENDAR file.day\nFLATTEN all(map(file.tasks, (x) => x.completed)) AS \"allCompleted\"\nWHERE !allCompleted\n```\n```\n\n----------------------------------------\n\nTITLE: Unique Function for Removing Duplicates\nDESCRIPTION: The unique function creates a new array with only unique values, removing any duplicates from the original array.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nunique([1, 3, 7, 3, 1]) => [1, 3, 7]\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Results as Calendar in Dataview\nDESCRIPTION: Demonstrates how to create a calendar view of query results using the CALENDAR command and a date field.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_6\n\nLANGUAGE: dataview\nCODE:\n```\nCALENDAR file.day FROM \"folder\"\n```\n\n----------------------------------------\n\nTITLE: Basic TASK Query in Dataview\nDESCRIPTION: A simple TASK query that displays all tasks in the vault as an interactive list. Users can check/uncheck tasks directly in the results, which will update the original files.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_15\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTASK\n```\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Computed Values in Dataview\nDESCRIPTION: A LIST query that displays computed values combining multiple fields for each result from a specific folder.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_3\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST \"File Path: \" + file.folder + \" _(created: \" + file.cday + \")_\"\nFROM \"Games\"\n```\n```\n\n----------------------------------------\n\nTITLE: Filtered TASK Query with Tag Condition in Dataview\nDESCRIPTION: A TASK query that filters for incomplete tasks containing a specific tag (#shopping). This demonstrates how to combine the WHERE clause with task properties to create targeted task lists.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_16\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTASK\nWHERE !completed AND contains(tags, \"#shopping\")\n```\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Dataview\nDESCRIPTION: Shows how to limit the number of returned results using the LIMIT clause, which is useful for displaying only the most relevant items.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_9\n\nLANGUAGE: dataview\nCODE:\n```\nLIST FROM \"folder\" LIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Results as Tasks in Dataview\nDESCRIPTION: Shows how to display query results in a task view format using the TASK command, which renders results with checkbox indicators.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_5\n\nLANGUAGE: dataview\nCODE:\n```\nTASK FROM #project\n```\n\n----------------------------------------\n\nTITLE: Finding All Directly and Indirectly Linked Pages with Depth-First Search\nDESCRIPTION: This code implements a depth-first search algorithm to find all pages that are linked (directly or indirectly) to a specified page. It uses a stack to track pages to process and a Set to prevent duplicate processing, collecting both inlinks and outlinks for each page.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-examples.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet page = dv.current().file.path;\nlet pages = new Set();\n\nlet stack = [page];\nwhile (stack.length > 0) {\n\tlet elem = stack.pop();\n\tlet meta = dv.page(elem);\n\tif (!meta) continue;\n\n\tfor (let inlink of meta.file.inlinks.concat(meta.file.outlinks).array()) {\n\t\tconsole.log(inlink);\n\t\tif (pages.has(inlink.path)) continue;\n\t\tpages.add(inlink.path);\n\t\tstack.push(inlink.path);\n\t}\n}\n\n// Data is now the file metadata for every page that directly OR indirectly links to the current page.\nlet data = dv.array(Array.from(pages)).map(p => dv.page(p));\n```\n\n----------------------------------------\n\nTITLE: Querying Incomplete Tasks in Dataview\nDESCRIPTION: A Dataview TASK query that filters for tasks that are not fully completed, accessing the implicit 'fullyCompleted' field directly in TASK queries.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/metadata-tasks.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nTASK\nWHERE !fullyCompleted\n```\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Tag Source Filtering\nDESCRIPTION: A LIST query that filters pages to only include those with either #status/open or #status/wip tags.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_6\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nFROM #status/open OR #status/wip\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Dataview Queries with dv.query in JavaScript\nDESCRIPTION: The asynchronous dv.query function executes a Dataview query and returns the results as a structured object. The return type varies by query type but always includes a 'type' field and success status.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait dv.query(\"LIST FROM #tag\") =>\n    { successful: true, value: { type: \"list\", values: [value1, value2, ...] } }\n\nawait dv.query(`TABLE WITHOUT ID file.name, value FROM \"path\"`) =>\n    { successful: true, value: { type: \"table\", headers: [\"file.name\", \"value\"], values: [[\"A\", 1], [\"B\", 2]] } }\n\nawait dv.query(\"TASK WHERE due\") =>\n    { successful: true, value: { type: \"task\", values: [task1, task2, ...] } }\n```\n\n----------------------------------------\n\nTITLE: Filtering Recent Files with WHERE Command\nDESCRIPTION: Query to find files modified within the last 24 hours using the WHERE command\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/data-commands.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nLIST WHERE file.mtime >= date(today) - dur(1 day)\n```\n\n----------------------------------------\n\nTITLE: TASK Query with Multiple Data Commands\nDESCRIPTION: A complex TASK query filtering incomplete tasks, sorting by creation date, limiting results, grouping by file, and sorting groups by file creation time.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_10\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTASK\nWHERE !completed\nSORT created ASC\nLIMIT 10\nGROUP BY file.link\nSORT rows.file.ctime ASC\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Results as Tables in Dataview\nDESCRIPTION: Demonstrates how to format query results as a table using the TABLE command, showing how to specify columns to display specific file metadata or properties.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\nTABLE file.day, file.mtime FROM \"folder\"\n```\n\n----------------------------------------\n\nTITLE: Regextest Function for Pattern Testing\nDESCRIPTION: The regextest function checks if a regex pattern can be found in a string using the JavaScript regex engine. It returns true if any part of the string matches the pattern.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nregextest(\"\\w+\", \"hello\") = true\nregextest(\".\", \"a\") = true\nregextest(\"yes|no\", \"maybe\") = false\nregextest(\"what\", \"what's up dog?\") = true\n```\n\n----------------------------------------\n\nTITLE: Querying by Links in Dataview\nDESCRIPTION: Two Dataview queries demonstrating how to use link-based sources. The first shows how to query files linking to the current file, and the second shows how to query outgoing links from a specific file.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/sources.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nLIST\nFROM [[]]\n```\n\n```dataview\nLIST\nFROM outgoing([[Dashboard]])\n```\n```\n\n----------------------------------------\n\nTITLE: Inline DQL for Saving Calculations in Metadata Fields\nDESCRIPTION: Shows how to use Inline DQL to calculate and store values in metadata fields, useful for reusing calculations in queries.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/faq.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nstart:: 07h00m\nend:: 18h00m\npause:: 01h30m\nduration:: `= this.end - this.start - this.pause`\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results in Dataview\nDESCRIPTION: Demonstrates how to sort query results using the SORT clause, with options for ascending or descending order.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_8\n\nLANGUAGE: dataview\nCODE:\n```\nLIST FROM \"folder\" SORT file.name ASC\n```\n\n----------------------------------------\n\nTITLE: Markdown File with Inline Fields for Dataview\nDESCRIPTION: Example of a markdown file using inline fields for Dataview indexing with the [key:: value] syntax rather than YAML frontmatter.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/index.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#poems\n\n# The Raven\n\nFrom [author:: Edgar Allan Poe], written in (published:: 1845)\n\nOnce upon a midnight dreary, while I pondered, weak and weary,\nOver many a quaint and curious volume of forgotten lore—\n```\n\n----------------------------------------\n\nTITLE: Complex Book Query with DataviewJS\nDESCRIPTION: Advanced JavaScript query that groups books by genre and creates formatted tables with sorting.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```dataviewjs\nfor (let group of dv.pages(\"#book\").where(p => p[\"time-read\"].year == 2021).groupBy(p => p.genre)) {\n\tdv.header(3, group.key);\n\tdv.table([\"Name\", \"Time Read\", \"Rating\"],\n\t\tgroup.rows\n\t\t\t.sort(k => k.rating, 'desc')\n\t\t\t.map(k => [k.file.link, k[\"time-read\"], k.rating]))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Functions in Dataview Queries\nDESCRIPTION: Two examples of function usage in Dataview queries - one using contains() to check if a file name contains specific text, and another using string() and split() functions to manipulate text.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_8\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nWHERE contains(file.name, \"WIP\")\n```\n\n```dataview\nLIST\nWHERE string(file.day.year) = split(this.file.name, \"-W\")[0]\n```\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Tag Filtering, Sorting, and Limiting\nDESCRIPTION: A LIST query that shows the 10 most recently created pages with the #status/open tag, sorted by creation time in descending order.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_9\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nFROM #status/open\nSORT file.ctime DESC\nLIMIT 10\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Files by Folder in Dataview\nDESCRIPTION: A Dataview query that displays a table with file creation time and status for all files in the projects/brainstorming folder. This shows how to use folder-based sources.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/sources.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nTABLE file.ctime, status\nFROM \"projects/brainstorming\"\n```\n```\n\n----------------------------------------\n\nTITLE: Date Comparison Query in Dataview\nDESCRIPTION: Demonstrates using a date literal (date(yesterday)) to filter incomplete tasks from yesterday.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/literals.md#2025-04-19_snippet_3\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nWHERE !completed AND file.day = date(yesterday)\n```\n\n----------------------------------------\n\nTITLE: Using Emoji Field Shorthands with Tasks in Markdown\nDESCRIPTION: Example of using emoji shorthand notation for adding date-related metadata to tasks, compatible with both Dataview and Tasks plugins.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/metadata-tasks.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Due this Saturday 🗓️2021-08-29\n- [x] Completed last Saturday ✅2021-08-22\n- [ ] I made this on ➕1990-06-14\n- [ ] Task I can start this weekend 🛫2021-08-29\n- [x] Task I finished ahead of schedule ⏳2021-08-29 ✅2021-08-22\n```\n\n----------------------------------------\n\nTITLE: Dataview TABLE Query Using Calculated Field\nDESCRIPTION: Demonstrates how to display values from calculated fields in a Dataview TABLE query, including start, end, and duration fields.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/faq.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nTABLE start, end, duration\nWHERE duration\n```\n```\n\n----------------------------------------\n\nTITLE: TABLE WITHOUT ID Query in Dataview\nDESCRIPTION: A TABLE WITHOUT ID query that omits the default file link column and displays Steam IDs and tags for game files.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_13\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE WITHOUT ID\nsteamid,\nfile.etags AS \"File Tags\"\nFROM #games\n```\n```\n\n----------------------------------------\n\nTITLE: Any Function for Checking If Any Value Is Truthy\nDESCRIPTION: The any function returns true if any of the values in the array are truthy. It can also take multiple arguments or a predicate function for more complex checks.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nany(list(1, 2, 3)) = true\nany(list(true, false)) = true\nany(list(false, false, false)) = false\nany(true, false) = true\nany(false, false) = false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nany(list(1, 2, 3), (x) => x > 2) = true\nany(list(1, 2, 3), (x) => x = 0) = false\n```\n\n----------------------------------------\n\nTITLE: Creating Objects and Lists in JavaScript\nDESCRIPTION: Demonstrates the usage of 'object()' and 'list()' functions to create new objects and arrays in Dataview.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nobject() => empty object\nobject(\"a\", 6) => object which maps \"a\" to 6\nobject(\"a\", 4, \"c\", \"yes\") => object which maps a to 4, and c to \"yes\"\n\nlist() => empty list\nlist(1, 2, 3) => list with 1, 2, and 3\narray(\"a\", \"b\", \"c\") => list with \"a\", \"b\", and \"c\"\n```\n\n----------------------------------------\n\nTITLE: Evaluating Dataview Expressions Safely with dv.evaluate in JavaScript\nDESCRIPTION: The dv.evaluate function evaluates an arbitrary Dataview expression and returns a Result object indicating success or failure. This provides a safer alternative to tryEvaluate for handling evaluation errors.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndv.evaluate(\"2 + 2\") => Successful { value: 4 }\ndv.evaluate(\"2 +\") => Failure { error: \"Failed to parse ... \" }\n```\n\n----------------------------------------\n\nTITLE: Querying Files by Tag in Dataview\nDESCRIPTION: A Dataview query that lists all files with the #homework tag. This demonstrates how to use tag-based sources in Dataview queries.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/sources.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nLIST\nFROM #homework\n```\n```\n\n----------------------------------------\n\nTITLE: TABLE Query for Recipes with Custom Field Names\nDESCRIPTION: A TABLE query for pages with the #recipes tag, displaying recipe type, portions, and length with a custom column header.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_12\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE recipe-type AS \"type\", portions, length\nFROM #recipes\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recipe Information with Dataview in Obsidian\nDESCRIPTION: This Dataview query generates a table showing the cuisine type and stove requirement for notes in the 'recipes' folder. It showcases custom field naming and data retrieval from specific folders.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/example tables.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\ntable cuisine as Cuisine, needsStove as \"Needs Stove\"\nfrom \"recipes\"\n```\n\n----------------------------------------\n\nTITLE: Basic LIST Query Without Source Filtering\nDESCRIPTION: A simple LIST query that displays all pages in the vault as a bullet point list without any filtering.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Incomplete Projects with WHERE Command\nDESCRIPTION: Query to find incomplete projects older than a month using multiple conditions\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/data-commands.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nLIST FROM #projects\nWHERE !completed AND file.ctime <= date(today) - dur(1 month)\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Complex Source Filtering\nDESCRIPTION: A LIST query with complex source filtering using tags, folders, and link relationships with logical operators.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_7\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nFROM (#assignment AND \"30 School\") OR (\"30 School/32 Homeworks\" AND outgoing([[School Dashboard Current To Dos]]))\n```\n```\n\n----------------------------------------\n\nTITLE: Extract Function for Creating Object Subsets\nDESCRIPTION: The extract function pulls specified fields from an object, creating a new object with just those fields.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nextract(file, \"ctime\", \"mtime\") = object(\"ctime\", file.ctime, \"mtime\", file.mtime)\nextract(object(\"test\", 1)) = object()\n```\n\n----------------------------------------\n\nTITLE: Filtered Dataview LIST Query with Tags and Field Condition\nDESCRIPTION: Dataview query using the LIST query type with a FROM statement to filter by tag and a WHERE clause to filter by an author field value.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/index.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nLIST\nFROM #poems\nWHERE author = \"Edgar Allan Poe\"\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced Inline DQL with Functions and Conditionals\nDESCRIPTION: Examples of more complex inline DQL queries using functions, conditionals, and date calculations. Demonstrates using choice() function for conditional output and analyzing tasks for the current day.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/dql-js-inline.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nAssignment due in `= this.due - date(today)`\nFinal paper due in `= [[Computer Science Theory]].due - date(today)`\n\n🏃‍♂️ Goal reached? `= choice(this.steps > 10000, \"YES!\", \"**No**, get moving!\")`\n\nYou have `= length(filter(link(dateformat(date(today), \"yyyy-MM-dd\")).file.tasks, (t) => !t.completed))` tasks to do. `= choice(date(today).weekday > 5, \"Take it easy!\", \"Time to get work done!\")`\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Files with dv.io.csv in JavaScript\nDESCRIPTION: The asynchronous dv.io.csv function loads a CSV file from the given path and returns its contents as a dataview array. Paths can be relative to an optional origin file or the current file.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait dv.io.csv(\"hello.csv\") => [{ column1: ..., column2: ...}, ...]\n```\n\n----------------------------------------\n\nTITLE: Displaying File Modification Dates in Calendar View\nDESCRIPTION: Creates a calendar view showing the last modification date (file.mtime) of all notes in the 'recipes' folder. This query helps visualize when recipe notes were last updated.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/example calendars.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\nCALENDAR file.mtime\nFROM\n\"recipes\"\n```\n\n----------------------------------------\n\nTITLE: Task Query from Specific File\nDESCRIPTION: Example of querying tasks from a specific file using the full file path in a Dataview query, a feature introduced in version 0.4.17.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/changelog.md#2025-04-19_snippet_3\n\nLANGUAGE: dataview\nCODE:\n```\nTASK FROM \"dataview/Test\"\n...\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific File in Dataview\nDESCRIPTION: A Dataview query that lists 'next-in-line' fields from a specific file. This demonstrates how to query data from a single file as a source.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/sources.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nLIST WITHOUT ID next-in-line\nFROM \"30 Hobbies/Games/Dashboard\"\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Blog Post Metadata with Dataview in Obsidian\nDESCRIPTION: This Dataview query creates a table displaying the modification time and draft status of notes in the 'blog' folder. It demonstrates basic table creation and metadata retrieval.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/example tables.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\ntable mtime as Modified, draft as Draft from \"blog\"\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Dates in Titles\nDESCRIPTION: A query that lists files which have a date in their filename (parsed by Dataview as file.day), and sorts them in descending chronological order.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/examples.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nLIST file.day WHERE file.day\nSORT file.day DESC\n```\n\n----------------------------------------\n\nTITLE: String Manipulation with substring() Function\nDESCRIPTION: Takes a slice of a string starting at a specified index and ending at an optional end index.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nsubstring(\"hello\", 0, 2) = \"he\"\nsubstring(\"hello\", 2, 4) = \"ll\"\nsubstring(\"hello\", 2) = \"llo\"\nsubstring(\"hello\", 0) = \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Loading File Contents with dv.io.load in JavaScript\nDESCRIPTION: The asynchronous dv.io.load function retrieves the string contents of a file at the given path. Relative paths are resolved relative to an optional origin file or the current file.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait dv.io.load(\"File\") => \"# File\\nThis is an example file...\"\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators in Dataview Queries\nDESCRIPTION: Three examples of using comparison operators in Dataview queries to filter results based on conditions like price, due date, and status.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_4\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nFROM \"Games\"\nWHERE price > 10\n```\n\n```dataview\nTASK\nWHERE due <= date(today)\n```\n\n```dataview\nLIST\nFROM #homework\nWHERE status != \"done\"\n```\n```\n\n----------------------------------------\n\nTITLE: Filtered CALENDAR Query for Valid Dates in Dataview\nDESCRIPTION: A CALENDAR query that filters for pages with a valid date in the 'due' field. The typeof check ensures only dates (not strings or other values) are included in the calendar.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_19\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nCALENDAR due\nWHERE typeof(due) = \"date\"\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Object and List Properties in Dataview\nDESCRIPTION: A Dataview query demonstrating how to access properties of objects and elements of lists using dot notation and indexing.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_7\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE id, episode_metadata.next, aliases[0]\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Results as Lists in Dataview\nDESCRIPTION: Shows how to use the LIST command to display query results in a simple list format. The example query selects files from a folder and displays them in a bulleted list.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\nLIST FROM \"folder\"\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Elements with dv.el in DataviewJS\nDESCRIPTION: Shows how to use the dv.el() function to create custom HTML elements in DataviewJS, allowing for the creation of any HTML element type.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/changelog.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndv.el(\"b\", \"Text!\");\ndv.el(\"i\", 18);\n```\n\n----------------------------------------\n\nTITLE: Querying Files with Incomplete Tasks in Dataview\nDESCRIPTION: A Dataview LIST query that finds files containing incomplete tasks, demonstrating how to access task properties from a file-level query using list functions.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/metadata-tasks.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nLIST\nWHERE any(file.tasks, (t) => !t.fullyCompleted)\n```\n```\n\n----------------------------------------\n\nTITLE: Filtered LIST Query with Tags in Dataview\nDESCRIPTION: A LIST query that restricts results to pages with specific tags using the FROM command.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nFROM #games/mobas OR #games/crpg\n```\n```\n\n----------------------------------------\n\nTITLE: Using Literals for File Comparison in Dataview\nDESCRIPTION: An example of using a literal string in a WHERE clause to filter results by file name.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_2\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nWHERE file.name = \"Scribble\"\n```\n```\n\n----------------------------------------\n\nTITLE: Transclusion Blocks for Task Queries in Obsidian\nDESCRIPTION: Series of transclusion blocks that reference different task query views. Each block embeds a different task view configuration focusing on specific filtering and display options.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/example tasks.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![[Uncompleted Tasks]]\n\n![[Completed Tasks]]\n\n![[Tasks Completed on specific Date]]\n\n![[Annotated Tasks]]\n\n![[Sorted Tasks]]\n\n![[Grouped Sorted Tasks]]\n\n![[Tasks in a specific section]]\n```\n\n----------------------------------------\n\nTITLE: Map Function for Array Transformation\nDESCRIPTION: The map function applies a provided function to each element in the array, returning a list of the transformed results.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmap([1, 2, 3], (x) => x + 2) = [3, 4, 5]\nmap([\"yes\", \"no\"], (x) => x + \"?\") = [\"yes?\", \"no?\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Section in Dataview\nDESCRIPTION: A Dataview query that displays tasks where the section's subpath equals 'Section'. The results are grouped by section to organize related tasks together. This is useful for displaying tasks from specific sections across multiple notes.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/Tasks in a specific section.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\ntask\nwhere meta(section).subpath = \"Section\"\ngroup by section\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Folder Source Filtering\nDESCRIPTION: A LIST query that filters pages to only include those within the 'Books' folder and its subfolders.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_5\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nFROM \"Books\"\n```\n```\n\n----------------------------------------\n\nTITLE: Endswith Function for Suffix Checking\nDESCRIPTION: The endswith function checks if a string ends with a specified suffix, returning a boolean result.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nendswith(\"yes\", \"es\") = true\nendswith(\"path/to/something\", \"something\") = true\nendswith(\"yes\", \"ye\") = false\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields With Keyword Names in Dataview\nDESCRIPTION: Shows how to use the special 'row' field to access properties that conflict with Dataview keywords like 'from' or 'where'.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/faq.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrow.from /* Same as \"from\" */\nrow.where /* Same as \"where\" */\n```\n\n----------------------------------------\n\nTITLE: Using Inline Fields in Obsidian Dataview\nDESCRIPTION: This example shows the new syntax for truly inline fields in Dataview. It demonstrates how to add metadata within a sentence using brackets or parentheses, allowing for more flexible and natural-looking data annotation.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/CHANGELOG.md#2025-04-19_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nI would rate this a [rating:: 6]. It was (thoughts:: acceptable).\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Grouping in Dataview\nDESCRIPTION: A LIST query that groups results by the 'type' field, showing only the group keys.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_4\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nGROUP BY type\n```\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with Luxon Tokens\nDESCRIPTION: Formats dates using Luxon formatting tokens for custom date string output.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\ndateformat(file.ctime,\"yyyy-MM-dd\") = \"2022-01-05\"\ndateformat(file.ctime,\"HH:mm:ss\") = \"12:18:04\"\ndateformat(date(now),\"x\") = \"1407287224054\"\ndateformat(file.mtime,\"ffff\") = \"Wednesday, August 6, 2014, 1:07 PM Eastern Daylight Time\"\n```\n\n----------------------------------------\n\nTITLE: LIST WITHOUT ID Query in Dataview\nDESCRIPTION: A basic LIST WITHOUT ID query that behaves like LIST but would omit identifiers if additional information was specified.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_6\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST WITHOUT ID\n```\n```\n\n----------------------------------------\n\nTITLE: Performing Arithmetic Operations in Dataview Queries\nDESCRIPTION: Two examples showing how to use arithmetic operations in Dataview TABLE queries - one calculating overtime by subtracting times, and another converting hours to days.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_3\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE start, end, (end - start) - dur(8 h) AS \"Overtime\" \nFROM #work\n```\n\n```dataview\nTABLE hrs / 24 AS \"days\"\nFROM \"30 Projects\"\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Inline DataviewJS Query\nDESCRIPTION: An example of an inline JavaScript query in Dataview that displays the modification time of the current file. Uses the dv.current() method to access the current page context.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/dql-js-inline.md#2025-04-19_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`$= dv.current().file.mtime`\n```\n\n----------------------------------------\n\nTITLE: Displaying Task Information in Dataview Tables\nDESCRIPTION: Demonstrates how to show task information using the TABLE command with task-specific fields like text and completion status.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_3\n\nLANGUAGE: dataview\nCODE:\n```\nTABLE text, completed FROM #task\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Tasks with Dataview in Obsidian\nDESCRIPTION: This Dataview query retrieves tasks, filters them based on the presence of a property 'p', and sorts them in ascending order of 'p'. It demonstrates basic Dataview syntax for task querying and sorting.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/Sorted Tasks.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\ntask\nwhere p\nsort p asc\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Date Field in Calendar View\nDESCRIPTION: Creates a calendar view showing the 'thoughtOfDate' field from all notes in the 'recipes' folder. This query visualizes custom date metadata across recipe notes.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/example calendars.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\nCALENDAR thoughtOfDate\nFROM\n\"recipes\"\n```\n\n----------------------------------------\n\nTITLE: Querying Completed Tasks with Dataview in Obsidian\nDESCRIPTION: This query displays all completed tasks from across your Obsidian vault. It uses the 'task' command with a 'WHERE completed' condition to filter only for tasks that have been marked as done.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/Completed Tasks.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\ntask WHERE completed\n```\n\n----------------------------------------\n\nTITLE: LIST WITHOUT ID with Field in Dataview\nDESCRIPTION: A LIST WITHOUT ID query that displays only the 'type' field for each result, omitting file links.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_7\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST WITHOUT ID type\n```\n```\n\n----------------------------------------\n\nTITLE: Text Search Query in Dataview\nDESCRIPTION: Shows how to use a text literal (\"Math\") in a contains() function to search file names.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/literals.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\nLIST\nWHERE contains(file.name, \"Math\")\n```\n\n----------------------------------------\n\nTITLE: Join Function for Array Concatenation\nDESCRIPTION: The join function combines elements in an array into a single string. An optional second argument specifies the delimiter to use between elements.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\njoin(list(1, 2, 3)) = \"1, 2, 3\"\njoin(list(1, 2, 3), \" \") = \"1 2 3\"\njoin(6) = \"6\"\njoin(list()) = \"\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Query Results with dv.queryMarkdown in JavaScript\nDESCRIPTION: The asynchronous dv.queryMarkdown function is equivalent to dv.query but returns the results as rendered Markdown text instead of structured data.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait dv.queryMarkdown(\"LIST FROM #tag\") =>\n    { successful: true, value: { \"- [[Page 1]]\\n- [[Page 2]]\" } }\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Property in Dataview\nDESCRIPTION: A Dataview query that displays tasks filtered by property 'p' and grouped by that same property. This demonstrates how to organize task results into categories based on a common property.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/Annotated Tasks.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\ntask\nwhere p\ngroup by p\n```\n\n----------------------------------------\n\nTITLE: Date Usage in Dataview Query\nDESCRIPTION: Example of querying date fields and accessing date properties in Dataview.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/types-of-metadata.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nbirthday:: 2001-06-11\n\n```dataview\nLIST birthday\nWHERE birthday.month = date(now).month\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Recipes with Dataview List in Obsidian\nDESCRIPTION: This snippet demonstrates a basic Dataview list query to retrieve and display items from a 'recipes' folder in Obsidian. It uses the 'list' command to create an unordered list of all files in the specified folder.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/example lists.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\nlist from \"recipes\"\n```\n\n----------------------------------------\n\nTITLE: Using Inline Fields in Obsidian with Dataview\nDESCRIPTION: This example shows how to use the new inline field syntax in Obsidian, which allows adding metadata within sentences using brackets or parentheses.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/changelog.md#2025-04-19_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nI would rate this a [rating:: 6]. It was (thoughts:: acceptable).\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Tag and Status Filtering\nDESCRIPTION: A LIST query for pages with the #assignments tag where the status field equals 'open'.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_13\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nFROM #assignments\nWHERE status = \"open\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using Fields in Dataview Queries\nDESCRIPTION: A simple example showing how to reference fields directly in a Dataview TABLE query, including fields with spaces.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/expressions.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE duedate, class, field-with-space\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata with Obsidian Dataview Frontmatter\nDESCRIPTION: This snippet shows how to define metadata in Obsidian using the Dataview plugin's supported frontmatter format. It associates an author (Scott Fitzgerald) and a tag (Fiction) with the document, allowing for querying and filtering in Dataview.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/books/The Great Gatsby.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- Author: [[Scott Fitzgerald]]\n- Tag: [[Fiction]]\n```\n\n----------------------------------------\n\nTITLE: Task Metadata Example\nDESCRIPTION: Shows how to add metadata to tasks using inline field syntax with brackets.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/add-metadata.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Send an mail to David about the deadline [due:: 2022-04-05].\n```\n\n----------------------------------------\n\nTITLE: Filtering and Grouping Tasks in Dataview\nDESCRIPTION: This snippet demonstrates how to use the new task query capabilities in Dataview. It filters tasks containing a specific tag, excludes completed tasks, and groups the results by the folder of the file containing the task.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/CHANGELOG.md#2025-04-19_snippet_5\n\nLANGUAGE: dataview\nCODE:\n```\nTASK WHERE contains(text, \"#tag\")\nWHERE !completed\nGROUP BY file.folder\n```\n\n----------------------------------------\n\nTITLE: String Display Conversion with display() Function\nDESCRIPTION: Converts input into string representation while preserving display properties of data types like links and dates.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(\"Hello World\") = \"Hello World\"\ndisplay(\"**Hello** World\") = \"Hello World\"\ndisplay(\"[Hello](https://example.com) [[World]]\") = \"Hello World\"\ndisplay(link(\"path/to/file.md\")) = \"file\"\ndisplay(link(\"path/to/file.md\", \"displayname\")) = \"displayname\"\ndisplay(date(\"2024-11-18\")) = \"November 18, 2024\"\ndisplay(list(\"Hello\", \"World\")) = \"Hello, World\"\n```\n\n----------------------------------------\n\nTITLE: Task Flattening Query - Filter Approach\nDESCRIPTION: Alternative query to display task text using filter function instead of explicit flattening\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/data-commands.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ntable filter(file.tasks.text, (t) => t) as \"Task Text\"\nfrom \"Scratchpad\"\nwhere file.tasks.text\n```\n\n----------------------------------------\n\nTITLE: Numeric Operations in JavaScript\nDESCRIPTION: Illustrates various numeric operations like rounding, truncation, and min/max calculations in Dataview.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nround(16.555555) = 17\nround(16.555555, 2) = 16.56\n\ntrunc(12.937) = 12\ntrunc(-93.33333) = -93\ntrunc(-0.837764) = 0\n\nfloor(12.937) = 12\nfloor(-93.33333) = -94\nfloor(-0.837764) = -1\n\nceil(12.937) = 13\nceil(-93.33333) = -93\nceil(-0.837764) = 0\n\nmin(1, 2, 3) = 1\nmin([1, 2, 3]) = 1\n\nmax(1, 2, 3) = 3\nmax([1, 2, 3]) = 3\n```\n\n----------------------------------------\n\nTITLE: Basic TASK Query Without Filtering\nDESCRIPTION: A simple TASK query that lists all tasks (completed or not) in the vault without any filtering.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_2\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTASK\n```\n```\n\n----------------------------------------\n\nTITLE: Task Flattening Query - Explicit Approach\nDESCRIPTION: Query to flatten and display task text from a specific file using explicit flattening\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/data-commands.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ntable T.text as \"Task Text\"\nfrom \"Scratchpad\"\nflatten file.tasks as T\nwhere T.text\n```\n\n----------------------------------------\n\nTITLE: Basic TASK Query Example\nDESCRIPTION: The simplest TASK query that lists all tasks in the vault.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_11\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTASK\n```\n```\n\n----------------------------------------\n\nTITLE: Using Dataview Value Utilities for Type Checking\nDESCRIPTION: Demonstration of how to use the Values utility from Dataview to check the types of fields and values. This helps in handling different Dataview data types like HTML and links appropriately.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/develop-against-dataview.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAPI, Values } from \"obsidian-dataview\";\n\nconst field = getAPI(plugin.app)?.page('sample.md').field;\nif (!field) return;\n\nif (Values.isHtml(field)) // do something\nelse if (Values.isLink(field)) // do something\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using the typeof() Function in Dataview JavaScript\nDESCRIPTION: Demonstrates usage of the typeof() function in Dataview which returns the type of any value as a string. This can be used for type checking in Dataview queries to determine if a value is a string, number, or array.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/changelog.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntypeof(\"text\") = \"string\"\ntypeof(1) = \"number\"\ntypeof([1, 2, 3]) = \"array\"\n```\n\n----------------------------------------\n\nTITLE: Link Metadata Access Functions\nDESCRIPTION: Provides access to link metadata properties including display text, embed status, path, subpath, and type.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nmeta([[2021-11-01|Displayed link text]]).display = \"Displayed link text\"\nmeta([[2021-11-01]]).display = null\nmeta([[My Project]]).path = \"My Project\"\nmeta([[My Project#Next Actions]]).path = \"My Project\"\nmeta([[My Project#^9bcbe8]]).path = \"My Project\"\nmeta([[My Project#Next Actions]]).subpath = \"Next Actions\"\nmeta([[My Project#^9bcbe8]]).subpath = \"9bcbe8\"\nmeta([[My Project]]).subpath = null\nmeta([[My Project]]).type = \"file\"\nmeta([[My Project#Next Actions]]).type = \"header\"\nmeta([[My Project#^9bcbe8]]).type = \"block\"\n```\n\n----------------------------------------\n\nTITLE: Basic CALENDAR Query with Creation Date\nDESCRIPTION: A CALENDAR query that displays all pages as dots on their creation dates.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_3\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nCALENDAR file.cday\n```\n```\n\n----------------------------------------\n\nTITLE: Length Function for Object and Array Size\nDESCRIPTION: The length function returns the number of fields in an object or entries in an array.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlength([]) = 0\nlength([1, 2, 3]) = 3\nlength(object(\"hello\", 1, \"goodbye\", 2)) = 2\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Toast Recipe\nDESCRIPTION: YAML frontmatter containing metadata for a toast recipe, including cuisine type (British), equipment requirements (stove), and the date the recipe was conceived.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/recipes/toast.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncuisine: British\nneedsStove: true\nthoughtOfDate: 2021-12-10\n---\n```\n\n----------------------------------------\n\nTITLE: Reverse Function for Array Inversion\nDESCRIPTION: The reverse function reverses a list and returns a new list in reversed order.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nreverse(list(1, 2, 3)) = list(3, 2, 1)\nreverse(list(\"a\", \"b\", \"c\")) = list(\"c\", \"b\", \"a\")\n```\n\n----------------------------------------\n\nTITLE: Basic Dataview LIST Query\nDESCRIPTION: Simple Dataview query using the LIST query type without any filters, which lists all files in the vault.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/index.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nLIST\n```\n```\n\n----------------------------------------\n\nTITLE: Using Inline DQL in Obsidian Notes\nDESCRIPTION: An example of an inline DQL query that displays a single value directly within text. The query references the current file's name using 'this' prefix.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/dql-js-inline.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`= this.file.name`\n```\n\n----------------------------------------\n\nTITLE: Recipe Content Markdown\nDESCRIPTION: Markdown content defining the recipe title, ingredients checklist, and basic instructions.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/recipes/pbj.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Peanut Butter and Jelly\n## Ingredients\n- [ ] Bread\n- [ ] Peanut Butter\n- [ ] Jelly\n\n## Instructions\n1. Go hog wild\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Grouping and File Links in Dataview\nDESCRIPTION: A grouped LIST query that includes file links as additional information for each group.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_5\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST rows.file.link\nGROUP BY type\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with choice() Function\nDESCRIPTION: Basic if-statement implementation that returns left value if condition is truthy, right value otherwise.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nchoice(true, \"yes\", \"no\") = \"yes\"\nchoice(false, \"yes\", \"no\") = \"no\"\nchoice(x > 4, y, z) = y if x > 4, else z\n```\n\n----------------------------------------\n\nTITLE: Accessing the Dataview API in TypeScript\nDESCRIPTION: Code snippet showing how to import and obtain the Dataview API instance. This provides access to various utilities for rendering dataviews, checking versions, and querying metadata.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/develop-against-dataview.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAPI } from \"obsidian-dataview\";\n\nconst api = getAPI();\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Styling Dataview Tables\nDESCRIPTION: Demonstrates how to use CSS snippets to apply custom styling to Dataview tables using cssclasses in frontmatter.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/faq.md#2025-04-19_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.myTable dataview.table {\n    background-color: green\n}\n```\n\n----------------------------------------\n\nTITLE: Firstvalue Function for Finding First Non-null Element\nDESCRIPTION: The firstvalue function returns the first non-null value from an array as a single element, useful for picking the first defined field in children of a task/list item.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfirstvalue([null, 1, 2]) => 1\nfirstvalue(children.myField) => If children.myField equals [null, null, \"myValue\", null], it would return \"myValue\"\n```\n\n----------------------------------------\n\nTITLE: TABLE WITHOUT ID with Custom First Column in Dataview\nDESCRIPTION: A TABLE WITHOUT ID query that renames the first column to 'Game' by explicitly including file.link with a custom header.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_14\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE WITHOUT ID\nfile.link AS \"Game\",\nfile.etags AS \"File Tags\"\nFROM #games\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Annotated Tasks with Dataview\nDESCRIPTION: A simple Dataview query that displays all tasks that have been annotated. This query returns only tasks (checkbox items) that match the 'annotated' condition.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/Annotated Tasks.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\ntask where annotated\n```\n\n----------------------------------------\n\nTITLE: None Function for Checking If No Values Are Truthy\nDESCRIPTION: The none function returns true if none of the values in the array are truthy. It can also take a predicate function for more complex checks.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nnone([]) = true\nnone([false, false]) = true\nnone([false, true]) = false\nnone([1, 2, 3]) = false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnone([1, 2, 3], (x) => x = 0) = true\nnone([true, true], (x) => x = false) = true\nnone([\"Apple\", \"Pi\", \"Banana\"], (x) => startswith(x, \"A\")) = false\n```\n\n----------------------------------------\n\nTITLE: Using dv.parse for Converting Strings to Dataview Types\nDESCRIPTION: The dv.parse function converts an arbitrary string into a complex Dataview type, primarily supporting links, dates, and durations.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndv.parse(\"[[A]]\") = Link { path: A }\ndv.parse(\"2020-08-14\") = DateTime { 2020-08-14 }\ndv.parse(\"9 seconds\") = Duration { 9 seconds }\n```\n\n----------------------------------------\n\nTITLE: Number Field Definition in YAML\nDESCRIPTION: Demonstrates how to define number fields in YAML frontmatter without quotes.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/types-of-metadata.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nrating: 8\ndescription: \"A nice little horror movie\"\n---\n```\n\n----------------------------------------\n\nTITLE: List Definition in YAML\nDESCRIPTION: Shows different ways to define lists in YAML frontmatter.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/types-of-metadata.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkey3: [one, two, three]\nkey4:\n - four\n - five\n - six\n---\n```\n\n----------------------------------------\n\nTITLE: All Function for Checking Truthy Values\nDESCRIPTION: The all function returns true only if all values in the array are truthy. It can also take multiple arguments or a predicate function for more complex checks.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nall([1, 2, 3]) = true\nall([true, false]) = false\nall(true, false) = false\nall(true, true, true) = true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nall([1, 2, 3], (x) => x > 0) = true\nall([1, 2, 3], (x) => x > 1) = false\nall([\"apple\", \"pie\", 3], (x) => typeof(x) = \"string\") = false\n```\n\n----------------------------------------\n\nTITLE: LIST WITHOUT ID with Computed Group Summary in Dataview\nDESCRIPTION: A grouped LIST WITHOUT ID query that shows a computed summary of the number of pages in each type group.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_8\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST WITHOUT ID length(rows) + \" pages of type \" + key\nGROUP BY type\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Inline Fields in Markdown\nDESCRIPTION: Shows how to add inline metadata fields in Markdown using the Key:: Value syntax on separate lines.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/add-metadata.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Markdown Page\n\nBasic Field:: Some random Value\n**Bold Field**:: Nice!\n```\n\n----------------------------------------\n\nTITLE: Regexmatch Function for Full String Matching\nDESCRIPTION: The regexmatch function checks if a regex pattern matches the entire string using the JavaScript regex engine. Unlike regextest, this requires the whole string to match.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nregexmatch(\"\\w+\", \"hello\") = true\nregexmatch(\".\", \"a\") = true\nregexmatch(\"yes|no\", \"maybe\") = false\nregexmatch(\"what\", \"what's up dog?\") = false\n```\n\n----------------------------------------\n\nTITLE: Querying Metadata with Dataview in YAML\nDESCRIPTION: An example Dataview query written in YAML format. This query creates a table displaying file creation time, movie length, rating, and review status for all notes tagged with #movies.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/metadata-pages.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```dataview\nTABLE file.ctime, length, rating, reviewed\nFROM #movies\n```\n```\n\n----------------------------------------\n\nTITLE: Default Value Handling with default() Function\nDESCRIPTION: Provides a default value when a field is null. Includes vectorized and non-vectorized (ldefault) versions.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ndefault(dateCompleted, \"incomplete\")\ndefault(list(1, 2, null), 3) = list(1, 2, 3)\nldefault(list(1, 2, null), 3) = list(1, 2, null)\n```\n\n----------------------------------------\n\nTITLE: Binding to Dataview Events in TypeScript\nDESCRIPTION: Example of how to register event listeners for Dataview-specific events. Shows how to listen for index-ready and metadata-change events to react to changes in the Dataview index.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/develop-against-dataview.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nplugin.registerEvent(plugin.app.metadataCache.on(\"dataview:index-ready\", () => {\n    ...\n});\n\nplugin.registerEvent(plugin.app.metadataCache.on(\"dataview:metadata-change\",\n    (type, file, oldPath?) => { ... }));\n```\n\n----------------------------------------\n\nTITLE: Object Definition in YAML\nDESCRIPTION: Demonstrates how to define nested objects with multiple field types in YAML frontmatter.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/types-of-metadata.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nobj:\n  key1: \"Val\"\n  key2: 3\n  key3: \n    - \"List1\"\n    - \"List2\"\n    - \"List3\"\n---\n```\n\n----------------------------------------\n\nTITLE: International Character and Emoji Fields\nDESCRIPTION: Shows how to use non-Latin characters and emojis in metadata fields.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/add-metadata.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nNoël:: Un jeu de console\nクリスマス:: 家庭用ゲーム機\n[🎅:: a console game]\n[xmas🎄:: a console game]\n```\n\n----------------------------------------\n\nTITLE: Filtering Root Tasks in DataviewJS\nDESCRIPTION: Example of how to filter out subtasks in DataviewJS to return only root tasks after the 0.4.23 update, which changed the default behavior to include all tasks.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/changelog.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfile.tasks.where(task => !task.parent)\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands\nDESCRIPTION: Console commands for setting up local development environment for Obsidian Dataview.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nfoo@bar:~$ git clone git@github.com:blacksmithgu/obsidian-dataview.git\nfoo@bar:~$ cd obsidian-dataview\nfoo@bar:~/obsidian-dataview$ npm install\nfoo@bar:~/obsidian-dataview$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: TABLE Query with Multiple Fields in Dataview\nDESCRIPTION: A TABLE query that displays multiple metadata fields (started date, folder, and tags) for files with the #games tag.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_10\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE started, file.folder, file.etags\nFROM #games\n```\n```\n\n----------------------------------------\n\nTITLE: Task Query from Specific File\nDESCRIPTION: Example of a Dataview query that retrieves tasks from a specific file by providing the full file path. This feature was added in version 0.4.17 for more targeted queries.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/CHANGELOG.md#2025-04-19_snippet_4\n\nLANGUAGE: dataview\nCODE:\n```\nTASK FROM \"dataview/Test\"\n...\n```\n\n----------------------------------------\n\nTITLE: String Truncation with truncate() Function\nDESCRIPTION: Truncates a string to a specified length with an optional custom suffix (defaults to '...').\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ntruncate(\"Hello there!\", 8) = \"Hello...\"\ntruncate(\"Hello there!\", 8, \"/\") = \"Hello t/\"\ntruncate(\"Hello there!\", 10) = \"Hello t...\"\ntruncate(\"Hello there!\", 10, \"!\") = \"Hello the!\"\ntruncate(\"Hello there!\", 20) = \"Hello there!\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Example\nDESCRIPTION: Example of YAML frontmatter metadata structure for Markdown documents.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nalias: \"document\"\nlast-reviewed: 2021-08-17\nthoughts:\n  rating: 8\n  reviewable: false\n---\n```\n\n----------------------------------------\n\nTITLE: Containsword Function for Case-Insensitive Word Matching\nDESCRIPTION: The containsword function checks for an exact word match in a string or list, but case-insensitive. For strings, it returns boolean values, while for lists, it returns an array of booleans.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncontainsword(\"word\", \"word\") = true\ncontainsword(\"word\", \"Word\") = true\ncontainsword(\"words\", \"Word\") = false\ncontainsword(\"Hello there!\", \"hello\") = true\ncontainsword(\"Hello there!\", \"HeLLo\") = true\ncontainsword(\"Hello there chaps!\", \"chap\") = false\ncontainsword(\"Hello there chaps!\", \"chaps\") = true\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainsword([\"I have no words.\", \"words\"], \"Word\") = [false, false]\ncontainsword([\"word\", \"Words\"], \"Word\") = [true, false]\ncontainsword([\"Word\", \"Words in word\"], \"WORD\") = [true, true]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating typeof() Function in Dataview JavaScript\nDESCRIPTION: Shows usage of the newly added typeof() function in Dataview, which returns the type of a given value as a string. This can be used for type comparisons in queries.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntypeof(\"text\") = \"string\"\ntypeof(1) = \"number\"\ntypeof([1, 2, 3]) = \"array\"\n```\n\n----------------------------------------\n\nTITLE: LIST Query with Additional Information in Dataview\nDESCRIPTION: A LIST query that includes file folder information alongside each page link.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_2\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST file.folder\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering, Sorting and Grouping Tasks with Dataview in Obsidian\nDESCRIPTION: A dataview query that filters tasks where a field 'p' exists, sorts them in ascending order by 'p', and groups the results by the 'p' field. This is commonly used in Obsidian to organize and visualize tasks based on a property such as priority or project.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/tasks/Grouped Sorted Tasks.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\ntask\nwhere p\nsort p asc\ngroup by p\n```\n\n----------------------------------------\n\nTITLE: Selecting Files Without a Tag in Dataview\nDESCRIPTION: Demonstrates how to query files that don't have a specific tag using the logical NOT operator with a tag filter.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_10\n\nLANGUAGE: dataview\nCODE:\n```\nLIST FROM \"folder\" WHERE !contains(tags, \"#tag\")\n```\n\n----------------------------------------\n\nTITLE: Startswith Function for Prefix Checking\nDESCRIPTION: The startswith function checks if a string begins with a specified prefix, returning a boolean result.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nstartswith(\"yes\", \"ye\") = true\nstartswith(\"path/to/something\", \"path/\") = true\nstartswith(\"yes\", \"no\") = false\n```\n\n----------------------------------------\n\nTITLE: Basic TABLE Query in Dataview\nDESCRIPTION: The simplest TABLE query that displays all files in your vault in a tabular format.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_9\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nTABLE\n```\n```\n\n----------------------------------------\n\nTITLE: Recursive Grouping with DataArray's groupIn Method\nDESCRIPTION: Demonstrates how to use the groupIn method to create nested groupings of data, specifically showing how to group pages by folder and then by title.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/changelog.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndv.pages().groupBy(page => page.file.folder).groupIn(page => page.title)\n```\n\n----------------------------------------\n\nTITLE: Replace Function for String Substitution\nDESCRIPTION: The replace function replaces all instances of a pattern in a string with a replacement. Unlike regexreplace, this uses exact string matching rather than regex patterns.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nreplace(\"what\", \"wh\", \"h\") = \"hat\"\nreplace(\"The big dog chased the big cat.\", \"big\", \"small\") = \"The small dog chased the small cat.\"\nreplace(\"test\", \"test\", \"no\") = \"no\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Dataview Query by Calculated Duration\nDESCRIPTION: Shows a query attempting to filter by a calculated duration field, demonstrating the limitation that inline calculations are stored as strings rather than their evaluated values.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/faq.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nTABLE start, end, duration\nWHERE duration > dur(\"10h\")\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates in JavaScript\nDESCRIPTION: Shows how to use the 'date()' function to parse dates from various formats in Dataview.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndate(\"2020-04-18\") = <date object representing April 18th, 2020>\ndate([[2021-04-16]]) = <date object for the given page, referring to file.day>\n\ndate(\"12/31/2022\", \"MM/dd/yyyy\") => DateTime for December 31th, 2022\ndate(\"210313\", \"yyMMdd\") => DateTime for March 13th, 2021\ndate(\"946778645000\", \"x\") => DateTime for \"2000-01-02T03:04:05\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DataviewJS Task Filtering for Non-Subtasks\nDESCRIPTION: Example showing how to filter tasks to only include root elements (non-subtasks) by checking if the task has no parent. This is used to replicate the previous behavior after the 0.4.23 update changed task representation.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfile.tasks.where(task => !task.parent)\n```\n\n----------------------------------------\n\nTITLE: Lower Function for Case Conversion\nDESCRIPTION: The lower function converts a string to all lowercase letters.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nlower(\"Test\") = \"test\"\nlower(\"TEST\") = \"test\"\n```\n\n----------------------------------------\n\nTITLE: Using dv.compare for Value Comparison in JavaScript\nDESCRIPTION: The dv.compare function compares two JavaScript values according to Dataview's default comparison rules. It returns a negative value if a < b, 0 if a = b, and a positive value if a > b.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndv.compare(1, 2) = -1\ndv.compare(\"yes\", \"no\") = 1\ndv.compare({ what: 0 }, { what: 0 }) = 0\n```\n\n----------------------------------------\n\nTITLE: Flat Function for Array Flattening\nDESCRIPTION: The flat function concatenates sub-levels of an array to the desired depth. The default is 1 level, but it can flatten multiple levels of nesting.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nflat(list(1, 2, 3, list(4, 5), 6)) => list(1, 2, 3, 4, 5, 6)\nflat(list(1, list(21, 22), list(list (311, 312, 313))), 4) => list(1, 21, 22, 311, 312, 313)\nflat(rows.file.outlinks)) => All the file outlinks at first level in output\n```\n\n----------------------------------------\n\nTITLE: Regexreplace Function for Pattern Replacement\nDESCRIPTION: The regexreplace function replaces all instances where a regex pattern matches in a string with a replacement. Special characters like $1 can be used to refer to capture groups.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nregexreplace(\"yes\", \"[ys]\", \"a\") = \"aea\"\nregexreplace(\"Suite 1000\", \"\\d+\", \"-\") = \"Suite -\"\n```\n\n----------------------------------------\n\nTITLE: Normalizing Paths with dv.io.normalize in JavaScript\nDESCRIPTION: The dv.io.normalize function converts a relative link or path into an absolute path. Paths can be resolved relative to a specified origin file or the current file.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndv.io.normalize(\"Test\") => \"dataview/test/Test.md\", if inside \"dataview/test\"\ndv.io.normalize(\"Test\", \"dataview/test2/Index.md\") => \"dataview/test2/Test.md\", irrespective of the current file\n```\n\n----------------------------------------\n\nTITLE: Listing Active Project Tasks\nDESCRIPTION: Shows how to query and display incomplete tasks from active projects.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\ntask from #projects/active\n```\n```\n\n----------------------------------------\n\nTITLE: Duration Formatting\nDESCRIPTION: Formats duration values using custom tokens for different time units with optional literal text.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ndurationformat(dur(\"3 days 7 hours 43 seconds\"), \"ddd'd' hh'h' ss's'\") = \"003d 07h 43s\"\ndurationformat(dur(\"365 days 5 hours 49 minutes\"), \"yyyy ddd hh mm ss\") = \"0001 000 05 49 00\"\ndurationformat(dur(\"2000 years\"), \"M months\") = \"24000 months\"\ndurationformat(dur(\"14d\"), \"s 'seconds'\") = \"1209600 seconds\"\n```\n\n----------------------------------------\n\nTITLE: Listing Non-Fiction Content with Dataview\nDESCRIPTION: Dataview query that lists all pages linked to the Non-Fiction note using a simple list view.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/Books.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\nlist from [[Non-Fiction]]\n```\n\n----------------------------------------\n\nTITLE: Slice Function for Array Subsetting\nDESCRIPTION: The slice function returns a shallow copy of a portion of an array selected from start to end (end not included). It can handle negative indices to count from the end.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nslice([1, 2, 3, 4, 5], 3) = [4, 5] => All items from given position, 0 as first\nslice([\"ant\", \"bison\", \"camel\", \"duck\", \"elephant\"], 0, 2) = [\"ant\", \"bison\"] => First two items\nslice([1, 2, 3, 4, 5], -2) = [4, 5] => counts from the end, last two items\nslice(someArray) => a copy of someArray\n```\n\n----------------------------------------\n\nTITLE: Padleft Function for String Padding\nDESCRIPTION: The padleft function pads a string to the desired length by adding padding on the left side. If the padding character is omitted, spaces are used by default.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\npadleft(\"hello\", 7) = \"  hello\"\npadleft(\"yes\", 5, \"!\") = \"!!yes\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Local Time for Fourth Date in Obsidian Dataview\nDESCRIPTION: This snippet uses an inline Dataview query with the 'localTime' function to display the 'fourth_date' field from the frontmatter. The date uses a named time zone (Europe/Paris) in ISO 8601 format.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2020-08-08-an-earlier-post.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`= localTime(this.fourth_date)`\n```\n\n----------------------------------------\n\nTITLE: Styling Tables with Tags Using CSS Selectors\nDESCRIPTION: Advanced CSS technique to target and style specific tables by including a tag within the table content, including hiding the tag itself.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/faq.md#2025-04-19_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n[href=\"#myId\"] {\n    display: none; /* Hides the tag from the table view */\n}\n\ntable:has([href=\"#myId\"]) {\n   /* Style your table as you like */\n  background-color: #262626;\n  & tr:nth-child(even) td:first-child{\n    background-color: #3f3f3f;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Book Info Table Example\nDESCRIPTION: Example of creating a table showing book information sorted by rating\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndv.table([\"File\", \"Genre\", \"Time Read\", \"Rating\"], dv.pages(\"#book\")\n    .sort(b => b.rating)\n    .map(b => [b.file.link, b.genre, b[\"time-read\"], b.rating]))\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Class to Dataview Container with JavaScript\nDESCRIPTION: Shows how to add a custom CSS class to a Dataview container when using JavaScript queries for targeted styling.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/faq.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndv.container.className += ' clsname'\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields With Spaces in Dataview\nDESCRIPTION: Demonstrates how to use the 'row' field to access properties with spaces in their names.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/faq.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrow[\"Field With Space In It\"]\n```\n\n----------------------------------------\n\nTITLE: Basic LIST Query in Dataview\nDESCRIPTION: The simplest LIST query that outputs a bullet point list of all files in your vault without filtering.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Another Date in Obsidian Dataview\nDESCRIPTION: This snippet uses an inline Dataview query to display the 'another_date' field from the frontmatter. The date is in ISO 8601 format with a timezone offset.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2020-08-08-an-earlier-post.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`= this.another_date`\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dataview Version\nDESCRIPTION: Command to install a specific version of the Dataview package when the default installation doesn't provide the latest version.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/develop-against-dataview.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install obsidian-dataview@0.5.64\n```\n\n----------------------------------------\n\nTITLE: Basic CALENDAR Query with Creation Date in Dataview\nDESCRIPTION: A CALENDAR query that displays file creation dates on a monthly calendar. Each dot on the calendar represents a file with its creation date at that specific day.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/query-types.md#2025-04-19_snippet_18\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nCALENDAR file.ctime\n```\n```\n\n----------------------------------------\n\nTITLE: Array and String Operations in JavaScript\nDESCRIPTION: Demonstrates array operations like sum, product, and average, as well as string manipulation functions in Dataview.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsum([1, 2, 3]) = 6\nsum([]) = null\nsum(nonnull([null, 1, 8])) = 9\n\nproduct([1,2,3]) = 6\nproduct([]) = null\nproduct(nonnull([null, 1, 2, 4])) = 8\n\naverage([1, 2, 3]) = 2\naverage([]) = null\naverage(nonnull([null, 1, 2])) = 1.5\n\ncontains(\"Hello\", \"Lo\") = false\ncontains(\"Hello\", \"lo\") = true\n\nicontains(\"Hello\", \"Lo\") = true\nicontains(\"Hello\", \"lo\") = true\n\necontains(\"Hello\", \"Lo\") = false\necontains(\"Hello\", \"lo\") = true\necontains([\"this\",\"is\",\"example\"], \"ex\") = false\necontains([\"this\",\"is\",\"example\"], \"is\") = true\n```\n\n----------------------------------------\n\nTITLE: Installing Dataview Package via npm\nDESCRIPTION: Instructions for installing the Dataview npm package as a development dependency. This is the first step for developers who want to use Dataview API in their plugins.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/resources/develop-against-dataview.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D obsidian-dataview\n```\n\n----------------------------------------\n\nTITLE: Displaying Start Date in Obsidian Dataview\nDESCRIPTION: This snippet uses an inline Dataview query to display the 'start_date' field from the frontmatter. The date is in ISO 8601 format with a timezone offset.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2020-08-08-an-earlier-post.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`= this.start_date`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DataArray.groupIn Method for Nested Grouping\nDESCRIPTION: Shows how to use the groupIn method to create nested groupings in data arrays. This example groups pages first by folder and then by title, allowing for recursive grouping structures.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndv.pages().groupBy(page => page.file.folder).groupIn(page => page.title)\n```\n\n----------------------------------------\n\nTITLE: Recipe Metadata YAML Frontmatter\nDESCRIPTION: YAML frontmatter block defining recipe metadata including cuisine type, stove requirements, and date the recipe was conceived.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/recipes/pbj.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncuisine: American\nneedsStove: false\nthoughtOfDate: 2021-12-11\n---\n```\n\n----------------------------------------\n\nTITLE: LIST Query with WHERE Filtering on Dates\nDESCRIPTION: A LIST query that filters pages to only include those with a 'due' field that is before today's date.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/queries/structure.md#2025-04-19_snippet_8\n\nLANGUAGE: dataview\nCODE:\n```\n```dataview\nLIST\nWHERE due AND due < date(today)\n```\n```\n\n----------------------------------------\n\nTITLE: Numeric Comparison Query in Dataview\nDESCRIPTION: Demonstrates using a numeric literal (2022) in a comparison operation to filter files by year.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/literals.md#2025-04-19_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\nLIST\nWHERE file.day.year = 2022\n```\n\n----------------------------------------\n\nTITLE: Tasks with Different Completion Notations in Markdown\nDESCRIPTION: Example showing the result of querying tasks by completion date, demonstrating how Dataview handles both emoji shorthand and inline field notation.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/metadata-tasks.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] Completed last Saturday ✅2021-08-22\n- [x] Some Done Task [completion:: 2021-08-22]\n```\n\n----------------------------------------\n\nTITLE: Upper Function for Case Conversion\nDESCRIPTION: The upper function converts a string to all uppercase letters.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nupper(\"Test\") = \"TEST\"\nupper(\"test\") = \"TEST\"\n```\n\n----------------------------------------\n\nTITLE: Hash Generation for Randomization\nDESCRIPTION: Generates a hash based on seed, optional text, and variant number for randomizing sort orders.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nhash(dateformat(date(today), \"YYYY-MM-DD\"), file.name) = ... A unique value for a given date in time\nhash(dateformat(date(today), \"YYYY-MM-DD\"), file.name, position.start.line) = ... A unique \"random\" value in a TASK query\n```\n\n----------------------------------------\n\nTITLE: Custom View Implementation Example\nDESCRIPTION: Example of implementing a custom view script with input parameters\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(`Loading view1`);\n\nfunction foo(...args) {\n  console.log('foo is called with args', ...args);\n}\nfoo(input)\n```\n\n----------------------------------------\n\nTITLE: Referencing Git Status Command\nDESCRIPTION: Inline code reference to the git status command used to check repository status\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/untracked/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Listing Fiction Content with Dataview\nDESCRIPTION: Dataview query that lists all pages linked to the Fiction note using a simple list view.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/Books.md#2025-04-19_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\nlist from [[Fiction]]\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Elements\nDESCRIPTION: Examples of rendering HTML elements with custom attributes using dv.el()\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndv.el(\"b\", \"This is some bold text\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndv.el(\"b\", \"This is some text\", { cls: \"dataview dataview-class\", attr: { alt: \"Nice!\" } });\n```\n\n----------------------------------------\n\nTITLE: Nonnull Function for Removing Null Values\nDESCRIPTION: The nonnull function returns a new array with all null values removed.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnonnull([]) = []\nnonnull([null, false]) = [false]\nnonnull([1, 2, 3]) = [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Elements with DataviewJS API\nDESCRIPTION: Examples of using the dv.el() function to create custom HTML elements in DataviewJS. This demonstrates creating bold and italic text elements with different content types.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndv.el(\"b\", \"Text!\");\ndv.el(\"i\", 18);\n```\n\n----------------------------------------\n\nTITLE: Multiline Text Definition in YAML\nDESCRIPTION: Shows how to define multiline text values using YAML frontmatter with the pipe operator.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/types-of-metadata.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npoem: |\n  Because I could not stop for Death,\n  He kindly stopped for me;\n  The carriage held but just ourselves\n  And Immortality.\nauthor: \"[[Emily Dickinson]]\"\ntitle: \"Because I could not stop for Death\"\n---\n```\n\n----------------------------------------\n\nTITLE: Filtering and Grouping Tasks in Dataview Query\nDESCRIPTION: This snippet demonstrates how to use the new task querying capabilities in Dataview. It filters tasks containing a specific tag, excludes completed tasks, and groups them by folder.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/changelog.md#2025-04-19_snippet_5\n\nLANGUAGE: dataview\nCODE:\n```\nTASK WHERE contains(text, \"#tag\")\nWHERE !completed\nGROUP BY file.folder\n```\n\n----------------------------------------\n\nTITLE: Link Source Query in Dataview\nDESCRIPTION: Illustrates using a link literal ([[Study MOC]]) as a source for the query.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/literals.md#2025-04-19_snippet_2\n\nLANGUAGE: dataview\nCODE:\n```\nLIST\nFROM [[Study MOC]]\n```\n\n----------------------------------------\n\nTITLE: Duration Comparison Query in Dataview\nDESCRIPTION: Shows how to use a duration literal (dur(2 days)) in a comparison to check time intervals.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/literals.md#2025-04-19_snippet_4\n\nLANGUAGE: dataview\nCODE:\n```\nLIST\nWHERE end - start > dur(2 days)\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Fields to Tasks in Markdown\nDESCRIPTION: Example of adding metadata to tasks using inline field syntax in Markdown. This syntax binds specific context to tasks.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/metadata-tasks.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Hello, this is some [metadata:: value]!\n- [X] I finished this on [completion:: 2021-08-15].\n```\n\n----------------------------------------\n\nTITLE: Date Time Component Stripping\nDESCRIPTION: Removes time component from dates, leaving only year, month, and day.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nstriptime(file.ctime) = file.cday\nstriptime(file.mtime) = file.mday\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Completion Status in Dataview\nDESCRIPTION: Example of how to filter tasks by completion status using a WHERE clause and the 'completed' property.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2021-08-08-a-post.md#2025-04-19_snippet_4\n\nLANGUAGE: dataview\nCODE:\n```\nLIST FROM #task WHERE !completed\n```\n\n----------------------------------------\n\nTITLE: Using dv.equal for Value Equality in JavaScript\nDESCRIPTION: The dv.equal function compares two JavaScript values and returns true if they are equal according to Dataview's default comparison rules.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndv.equal(1, 2) = false\ndv.equal(1, 1) = true\n```\n\n----------------------------------------\n\nTITLE: Filtering Games by Tags\nDESCRIPTION: Demonstrates how to list games filtered by specific tags using Dataview query language.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nlist from #game/moba or #game/crpg\n```\n```\n\n----------------------------------------\n\nTITLE: Embedded Inline Fields in Markdown\nDESCRIPTION: Demonstrates how to embed metadata fields within sentences using square bracket syntax.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/add-metadata.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nI would rate this a [rating:: 9]! It was [mood:: acceptable].\n```\n\n----------------------------------------\n\nTITLE: Inline Field Examples\nDESCRIPTION: Demonstrates various ways to use inline fields in Markdown documents.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# Markdown Page\n\nBasic Field:: Value\n**Bold Field**:: Nice!\nYou can also write [field:: inline fields]; multiple [field2:: on the same line].\nIf you want to hide the (field3:: key), you can do that too.\n```\n\n----------------------------------------\n\nTITLE: Using dv.clone for Deep Cloning in JavaScript\nDESCRIPTION: The dv.clone function creates a deep clone of any Dataview value, including dates, arrays, and links.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/api/code-reference.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndv.clone(1) = 1\ndv.clone({ a: 1 }) = { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Parenthesis Syntax for Hidden Keys\nDESCRIPTION: Demonstrates the alternative parenthesis syntax that hides the key when rendered in Reader mode.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/add-metadata.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nThis will not show the (longKeyIDontNeedWhenReading:: key).\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks by Completion Date in Dataview\nDESCRIPTION: Example of a Dataview query that searches for tasks completed on a specific date, which will match both emoji shorthand and inline field syntaxes.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/annotation/metadata-tasks.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```dataview\nTASK\nWHERE completion = date(\"2021-08-22\")\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying End Date in Obsidian Dataview\nDESCRIPTION: This snippet uses an inline Dataview query to display the 'end_date' field from the frontmatter. The date is in ISO 8601 format with a negative timezone offset.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/test-vault/blog/2020-08-08-an-earlier-post.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`= this.end_date`\n```\n\n----------------------------------------\n\nTITLE: Padright Function for String Padding\nDESCRIPTION: The padright function pads a string to the desired length by adding padding on the right side. If the padding character is omitted, spaces are used by default.\nSOURCE: https://github.com/blacksmithgu/obsidian-dataview/blob/master/docs/docs/reference/functions.md#2025-04-19_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\npadright(\"hello\", 7) = \"hello  \"\npadright(\"yes\", 5, \"!\") = \"yes!!\"\n```"
  }
]