[
  {
    "owner": "microsoft",
    "repo": "playwright",
    "content": "TITLE: Scanning Entire Page for Accessibility with Playwright and axe-core - JavaScript ES6\nDESCRIPTION: This snippet demonstrates how to use Playwright Test with the @axe-core/playwright library to scan an entire page for accessibility violations. It uses modern ES6 syntax (import statements) and defines a test that navigates to a given URL, runs AxeBuilder.analyze to detect accessibility issues, and asserts that there are no violations. Dependencies include @playwright/test and @axe-core/playwright, and the key parameter is the page object passed into the test function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport AxeBuilder from '@axe-core/playwright'; // 1\n\ntest.describe('homepage', () => { // 2\n  test('should not have any automatically detectable accessibility issues', async ({ page }) => {\n    await page.goto('https://your-site.com/'); // 3\n\n    const accessibilityScanResults = await new AxeBuilder({ page }).analyze(); // 4\n\n    expect(accessibilityScanResults.violations).toEqual([]); // 5\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Assertions in Playwright Tests\nDESCRIPTION: This snippet demonstrates the use of soft assertions in Playwright tests. Soft assertions do not immediately terminate test execution upon failure, allowing for multiple checks within a single test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\n\n// ... and continue the test to check more things.\nawait page.getByRole('link', { name: 'next page' }).click();\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser Using Playwright JavaScript\nDESCRIPTION: Demonstrates how to programmatically launch a Chromium browser using Playwright in Node.js, navigate to a webpage, perform actions, and close the browser. Requires the 'playwright' Node.js package. Key parameters include the browser type ('chromium', 'firefox', or 'webkit'). Inputs depend on actions executed, and the main output is browser automation. Limitations may include the requirement that Playwright and the target browser version are compatible.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\\n\\n(async () => {\\n  const browser = await chromium.launch();\\n  const page = await browser.newPage();\\n  await page.goto('https://example.com');\\n  // other actions...\\n  await browser.close();\\n})();\n```\n\n----------------------------------------\n\nTITLE: Asserting Locator Text with Playwright Test in JavaScript\nDESCRIPTION: Demonstrates using `expect(locator).toHaveText()` within a Playwright test to assert that an element located by `.status` has the exact text \"Submitted\" after a button click. This relies on the `@playwright/test` package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { test, expect } from '@playwright/test';\n\ntest('status becomes submitted', async ({ page }) => {\n  // ...\n  await page.getByRole('button').click();\n  await expect(page.locator('.status')).toHaveText('Submitted');\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting Locator Text Asynchronously with Playwright MSTest in C#\nDESCRIPTION: Demonstrates using `await Expect(locator).ToHaveTextAsync()` within an MSTest `TestMethod` leveraging `Microsoft.Playwright.MSTest`. This asserts that the element located by `.status` has the text \"Submitted\" after an asynchronous button click operation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTests : PageTest\n{\n    [TestMethod]\n    public async Task StatusBecomesSubmitted()\n    {\n        // ...\n        await Page.GetByRole(AriaRole.Button, new() { Name = \"Sign In\" }).ClickAsync();\n        await Expect(Page.Locator(\".status\")).ToHaveTextAsync(\"Submitted\");\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: JavaScript Text Content Assertions\nDESCRIPTION: Example showing text content assertions using Playwright's expect API with both direct text and regular expressions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('.title');\nawait expect(locator).toContainText('substring');\nawait expect(locator).toContainText(/\\d messages/);\n```\n\n----------------------------------------\n\nTITLE: Validating Server State After UI Actions using Playwright API and Browser Automation in Python\nDESCRIPTION: This test automates the creation of a GitHub issue using the browser UI with Playwright, then verifies via an API request that the issue was created with correct title and body. It demonstrates cross-verification of UI and backend, leveraging page automation for issue submission and the API for state validation. Dependencies: Playwright sync API, environment variables, necessary fixtures.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_last_created_issue_should_be_on_the_server(api_request_context: APIRequestContext, page: Page) -> None:\\n    page.goto(f\\\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues\\\")\\n    page.locator(\\\"text=New issue\\\").click()\\n    page.locator(\\\"[aria-label='Title']\\\").fill(\\\"Bug report 1\\\")\\n    page.locator(\\\"[aria-label='Comment body']\\\").fill(\\\"Bug description\\\")\\n    page.locator(\\\"text=Submit new issue\\\").click()\\n    issue_id = page.url.split(\\\"/\\\")[-1]\\n\\n    new_issue = api_request_context.get(f\\\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues/{issue_id}\\\")\\n    assert new_issue.ok\\n    assert new_issue.json()[\\\"title\\\"] == \\\"[Bug] report 1\\\"\\n    assert new_issue.json()[\\\"body\\\"] == \\\"Bug description\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Mocking API Requests in Python (Async)\nDESCRIPTION: This Python async example shows how to intercept a fruit API route and fulfill it with mock data. It defines an async handler function that provides a custom JSON response, then navigates to the page and verifies the mocked data is displayed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def test_mock_the_fruit_api(page: Page):\n    async def handle(route: Route):\n        json = [{\"name\": \"Strawberry\", \"id\": 21}]\n        # fulfill the route with the mock data\n        await route.fulfill(json=json)\n\n    # Intercept the route to the fruit API\n    await page.route(\"*/**/api/v1/fruits\", handle)\n\n    # Go to the page\n    await page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the Strawberry fruit is visible\n    await expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Asserting Checkbox/Radio State using Playwright LocatorAssertions\nDESCRIPTION: Ensures the Playwright Locator points to a checked input element (checkbox or radio button). It supports checking for a specific checked state (`checked` option, boolean) or an indeterminate state (`indeterminate` option, boolean, v1.50+). These options are mutually exclusive. A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is also available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst locator = page.getByLabel('Subscribe to newsletter');\nawait expect(locator).toBeChecked();\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nassertThat(page.getByLabel(\"Subscribe to newsletter\")).isChecked();\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nfrom playwright.async_api import expect\n\nlocator = page.get_by_label(\"Subscribe to newsletter\")\nawait expect(locator).to_be_checked()\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nfrom playwright.sync_api import expect\n\nlocator = page.get_by_label(\"Subscribe to newsletter\")\nexpect(locator).to_be_checked()\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar locator = Page.GetByLabel(\"Subscribe to newsletter\");\nawait Expect(locator).ToBeCheckedAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Launching Browser with Playwright - Basic Example\nDESCRIPTION: Basic examples of launching a browser instance using Playwright across different programming languages. Shows initialization, page creation, navigation, and cleanup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwright.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chromium, firefox, webkit } = require('playwright');\n\n(async () => {\n  const browser = await chromium.launch();  // Or 'firefox' or 'webkit'.\n  const page = await browser.newPage();\n  await page.goto('http://example.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      Browser browser = chromium.launch();\n      Page page = browser.newPage();\n      page.navigate(\"http://example.com\");\n      // other actions...\n      browser.close();\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    chromium = playwright.chromium # or \"firefox\" or \"webkit\".\n    browser = await chromium.launch()\n    page = await browser.new_page()\n    await page.goto(\"http://example.com\")\n    # other actions...\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using Locator (Recommended) in JavaScript\nDESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.getByText`) in JavaScript to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst locator = page.getByText('Submit');\n// ...\nawait locator.hover();\nawait locator.click();\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting Accessible Error Message using LocatorAssertions in Multiple Languages\nDESCRIPTION: Examples of using toHaveAccessibleErrorMessage/hasAccessibleErrorMessage to ensure a locator points to an element with a given aria errormessage attribute. This is useful for verifying accessibility compliance in form validation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByTestId('username-input');\nawait expect(locator).toHaveAccessibleErrorMessage('Username is required.');\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.getByTestId(\"username-input\");\nassertThat(locator).hasAccessibleErrorMessage(\"Username is required.\");\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.get_by_test_id(\"username-input\")\nawait expect(locator).to_have_accessible_error_message(\"Username is required.\")\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.get_by_test_id(\"username-input\")\nexpect(locator).to_have_accessible_error_message(\"Username is required.\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.GetByTestId(\"username-input\");\nawait Expect(locator).ToHaveAccessibleErrorMessageAsync(\"Username is required.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Emulation Options in Playwright Config\nDESCRIPTION: Sets various emulation options such as color scheme, geolocation, locale, permissions, timezone, and viewport for all tests in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Emulates `'prefers-colors-scheme'` media feature.\n    colorScheme: 'dark',\n\n    // Context geolocation.\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n\n    // Emulates the user locale.\n    locale: 'en-GB',\n\n    // Grants specified permissions to the browser context.\n    permissions: ['geolocation'],\n\n    // Emulates the user timezone.\n    timezoneId: 'Europe/Paris',\n\n    // Viewport used for all pages in the context.\n    viewport: { width: 1280, height: 720 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating React Components in Playwright Tests\nDESCRIPTION: Demonstrates how to update props, children, and callbacks of a mounted React component in Playwright component tests. This is useful for testing component behavior with changing inputs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('update', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.update(\n      <Component msg=\"greetings\" onClick={() => {}}>Child</Component>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Test Groups and Hooks in Playwright\nDESCRIPTION: Illustrates how to use test.describe for grouping tests and test.beforeEach for setting up common test conditions. The example shows a navigation test group with a beforeEach hook.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('navigation', () => {\n  test.beforeEach(async ({ page }) => {\n    // Go to the starting url before each test.\n    await page.goto('https://playwright.dev/');\n  });\n\n  test('main navigation', async ({ page }) => {\n    // Assertions use the expect API.\n    await expect(page).toHaveURL('https://playwright.dev/');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Locating Elements Inside Frames with Playwright C#\nDESCRIPTION: This C# Playwright sample demonstrates frame element location and interaction inside an iframe, using FrameLocator and GetByLabel. The code awaits both the locator and the fill operation. Requires the Microsoft.Playwright NuGet package and an initialized page instance.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Locate element inside frame\nvar username = await page.FrameLocator(\".frame-class\").GetByLabel(\"User Name\");\nawait username.FillAsync(\"John\");\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Login Form Interaction\nDESCRIPTION: Example showing how to interact with a login form using Playwright's built-in locators to fill username, password and click sign in button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByLabel('User Name').fill('John');\n\nawait page.getByLabel('Password').fill('secret-password');\n\nawait page.getByRole('button', { name: 'Sign in' }).click();\n\nawait expect(page.getByText('Welcome, John!')).toBeVisible();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByLabel(\"User Name\").fill(\"John\");\n\npage.getByLabel(\"Password\").fill(\"secret-password\");\n\npage.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\"))\n    .click();\n\nassertThat(page.getByText(\"Welcome, John!\")).isVisible();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User Agent in JavaScript\nDESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright JavaScript library. This allows testing how websites respond to different browser identifications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  userAgent: 'My user agent'\n});\n```\n\n----------------------------------------\n\nTITLE: Scanning Specific Page Elements for Accessibility Issues\nDESCRIPTION: Demonstrates how to test a specific part of a page for accessibility violations, particularly focusing on dynamic elements that appear after user interaction like navigation menus.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class HomepageTests {\n  @Test\n  void navigationMenuFlyoutShouldNotHaveAutomaticallyDetectableAccessibilityViolations() throws Exception {\n    page.navigate(\"https://your-site.com/\");\n\n    page.locator(\"button[aria-label=\\\"Navigation Menu\\\"]\").click();\n\n    page.locator(\"#navigation-menu-flyout\").waitFor();\n\n    AxeResults accessibilityScanResults = new AxeBuilder(page)\n      .include(Arrays.asList(\"#navigation-menu-flyout\"))\n      .analyze();\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Input Files in Playwright with Java\nDESCRIPTION: Demonstrates various ways to upload files using setInputFiles method in Java, including uploading a single file, multiple files, a directory, removing selected files, and uploading a buffer from memory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_90\n\nLANGUAGE: java\nCODE:\n```\n// Select one file\npage.getByLabel(\"Upload file\").setInputFiles(Paths.get(\"myfile.pdf\"));\n\n// Select multiple files\npage.getByLabel(\"Upload files\").setInputFiles(new Path[] {Paths.get(\"file1.txt\"), Paths.get(\"file2.txt\")});\n\n// Select a directory\npage.getByLabel(\"Upload directory\").setInputFiles(Paths.get(\"mydir\"));\n\n// Remove all the selected files\npage.getByLabel(\"Upload file\").setInputFiles(new Path[0]);\n\n// Upload buffer from memory\npage.getByLabel(\"Upload file\").setInputFiles(new FilePayload(\n  \"file.txt\", \"text/plain\", \"this is test\".getBytes(StandardCharsets.UTF_8)));\n```\n\n----------------------------------------\n\nTITLE: Making Assertions in Playwright Tests (Python)\nDESCRIPTION: Shows how to use Playwright's expect API to make assertions in tests. This example waits for the page title to contain 'Playwright'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.sync_api import expect\n\nexpect(page).to_have_title(re.compile(\"Playwright\"))\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Test Example in Java\nDESCRIPTION: Demonstrates a complete test script using Playwright's core features including assertions, locators, and page navigation. Shows how to launch a browser, create a page, and perform basic test operations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport java.util.regex.Pattern;\nimport com.microsoft.playwright.*;\nimport com.microsoft.playwright.options.AriaRole;\n\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class App {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n            Page page = browser.newPage();\n            page.navigate(\"https://playwright.dev\");\n\n            // Expect a title \"to contain\" a substring.\n            assertThat(page).hasTitle(Pattern.compile(\"Playwright\"));\n\n            // create a locator\n            Locator getStarted = page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Get Started\"));\n\n            // Expect an attribute \"to be strictly equal\" to the value.\n            assertThat(getStarted).hasAttribute(\"href\", \"/docs/intro\");\n\n            // Click the get started link.\n            getStarted.click();\n\n            // Expects page to have a heading with the name of Installation.\n            assertThat(page.getByRole(AriaRole.HEADING,\n               new Page.GetByRoleOptions().setName(\"Installation\"))).isVisible();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Locators to Target Specific Elements in Playwright\nDESCRIPTION: Shows how to narrow down element selection by chaining locator methods. This example creates a product locator by finding list items with specific text, then targets a button within that element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst product = page.getByRole('listitem').filter({ hasText: 'Product 2' });\n\nawait product.getByRole('button', { name: 'Add to cart' }).click();\n\nawait expect(product).toHaveCount(1);\n```\n\nLANGUAGE: python-async\nCODE:\n```\nproduct = page.get_by_role(\"listitem\").filter(has_text=\"Product 2\")\n\nawait product.get_by_role(\"button\", name=\"Add to cart\").click()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nproduct = page.get_by_role(\"listitem\").filter(has_text=\"Product 2\")\n\nproduct.get_by_role(\"button\", name=\"Add to cart\").click()\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator product = page\n    .getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasText(\"Product 2\"));\n\nproduct\n    .getByRole(AriaRole.BUTTON,\n               new Locator.GetByRoleOptions().setName(\"Add to cart\"))\n    .click();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar product = page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() { HasText = \"Product 2\" });\n\nawait product\n    .GetByRole(AriaRole.Button, new() { Name = \"Add to cart\" })\n    .ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Authenticate with API Request in Playwright - JavaScript\nDESCRIPTION: The JavaScript example uses Playwright to authenticate through API requests. It captures the authenticated state in a JSON file for reuse, offering an efficient alternative to interacting with a web page UI in tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport { test as setup } from '@playwright/test';\n\nconst authFile = 'playwright/.auth/user.json';\n\nsetup('authenticate', async ({ request }) => {\n  // Send authentication request. Replace with your own.\n  await request.post('https://github.com/login', {\n    form: {\n      'user': 'user',\n      'password': 'password'\n    }\n  });\n  await request.storageState({ path: authFile });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Playwright Tests on Deployment (Python)\nDESCRIPTION: This YAML configuration sets up GitHub Actions to run Playwright tests with Python after a successful deployment. It installs Python dependencies, sets up the environment, and runs the tests with the deployment URL as the base URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_18\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Ensure browsers are installed\n      run: python -m playwright install --with-deps\n    - name: Run tests\n      run: pytest\n      env:\n        # This might depend on your test-runner\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Focused Test in Playwright\nDESCRIPTION: This example shows how to declare a focused test using test.only. When there are focused tests, only those tests will be run in the entire project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only('focus this test', async ({ page }) => {\n  // Run only focused tests in the entire project.\n});\n```\n\n----------------------------------------\n\nTITLE: Repository Setup and Teardown for GitHub API Tests with Playwright in Python\nDESCRIPTION: This snippet defines a session-scoped, autouse pytest fixture that creates a GitHub test repository before any tests run and deletes it afterwards. It uses Playwright\\'s APIRequestContext for issuing POST and DELETE requests to the GitHub API, and enforces valid repository state using assertions. Dependencies: pytest, Playwright sync API, api_request_context fixture, GitHub credentials.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ...\\n@pytest.fixture(scope=\\\"session\\\", autouse=True)\\ndef create_test_repository(\\n    api_request_context: APIRequestContext,\\n) -> Generator[None, None, None]:\\n    # Before all\\n    new_repo = api_request_context.post(\\\"/user/repos\\\", data={\\\"name\\\": GITHUB_REPO})\\n    assert new_repo.ok\\n    yield\\n    # After all\\n    deleted_repo = api_request_context.delete(f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}\\\")\\n    assert deleted_repo.ok\\n\n```\n\n----------------------------------------\n\nTITLE: Using Test Steps API with test.step()\nDESCRIPTION: Shows how to organize tests into logical steps using the test.step() API. This helps in better structuring long tests and provides step-level information in test reports.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await test.step('Log in', async () => {\n    // ...\n  });\n  await test.step('news feed', async () => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accepting Standard Dialogs with Playwright (Python Sync)\nDESCRIPTION: Registers a synchronous handler for the 'dialog' event on a Playwright Page object. The lambda function automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears. This listener must be registered *before* the synchronous action that triggers the dialog (e.g., clicking a button).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.on(\"dialog\", lambda dialog: dialog.accept())\npage.get_by_role(\"button\").click()\n```\n```\n\n----------------------------------------\n\nTITLE: Using beforeEach Hook for Page Navigation in Playwright Tests\nDESCRIPTION: Shows how to use the beforeEach hook to navigate to a starting URL before each test. This pattern enables DRY test code by centralizing common setup operations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }) => {\n  console.log(`Running ${test.info().title}`);\n  await page.goto('https://my.start.url/');\n});\n\ntest('my test', async ({ page }) => {\n  expect(page.url()).toBe('https://my.start.url/');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in Playwright JavaScript\nDESCRIPTION: Demonstrates how to initiate and handle file downloads in a Playwright script using JavaScript by waiting for download events and saving files. Requires Playwright and a running browser instance with a page context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Start waiting for download before clicking. Note no await.\nconst downloadPromise = page.waitForEvent('download');\nawait page.getByText('Download file').click();\nconst download = await downloadPromise;\n\n// Wait for the download process to complete and save the downloaded file somewhere.\nawait download.saveAs('/path/to/save/at/' + download.suggestedFilename());\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.on('download', download => download.path().then(console.log));\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Applying Authentication State in Playwright (Python)\nDESCRIPTION: This code snippet demonstrates how to retrieve the authentication state from an APIRequestContext and apply it to a new BrowserContext. It uses HTTP credentials to authenticate, saves the storage state, and then creates a new context with that state.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrequest_context = playwright.request.new_context(http_credentials={\"username\": \"test\", \"password\": \"test\"})\nrequest_context.get(\"https://api.example.com/login\")\n# Save storage state into a variable.\nstate = request_context.storage_state()\n\n# Create a new context with the saved storage state.\ncontext = browser.new_context(storage_state=state)\n```\n\n----------------------------------------\n\nTITLE: Implementing JUnit Tests with Playwright in Java\nDESCRIPTION: A complete JUnit test class example showing how to set up Playwright with proper test fixtures. The class demonstrates initializing Playwright and Browser objects in @BeforeAll, creating new BrowserContext and Page for each test method, and implementing three different test scenarios including button clicks, checkbox interactions, and web navigation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  static Playwright playwright;\n  static Browser browser;\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeAll\n  static void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterAll\n  static void closeBrowser() {\n    playwright.close();\n  }\n\n  @BeforeEach\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterEach\n  void closeContext() {\n    context.close();\n  }\n\n  @Test\n  void shouldClickButton() {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox() {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertTrue((Boolean) page.evaluate(\"() => window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki() {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertEquals(\"https://en.wikipedia.org/wiki/Playwright\", page.url());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries in Playwright Configuration File\nDESCRIPTION: This JavaScript snippet demonstrates how to configure test retries in the Playwright configuration file. It sets the number of retry attempts for failing tests to 3.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Give failing tests 3 retry attempts\n  retries: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Playwright Locators in JavaScript\nDESCRIPTION: Demonstrates how to use Playwright's built-in locators for finding elements on a web page. The snippet includes chaining and filtering techniques to refine locator selection, enhancing test stability and reliability by avoiding direct reliance on CSS selectors which might change frequently.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst product = page.getByRole('listitem').filter({ hasText: 'Product 2' });\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'Product 2' })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npage.locator('button.buttonIcon.episode-actions-later');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npage.getByRole('button', { name: 'submit' });\n```\n\n----------------------------------------\n\nTITLE: Mocking HTTP Requests with Playwright\nDESCRIPTION: This snippet shows how to use Playwright to mock HTTP responses, ensuring that tests are not dependent on third-party systems. By routing requests to a specific URL and fulfilling them with fake data, tests can be executed quickly and predictably without waiting for real network traffic or handling external site changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait page.route('**/api/fetch_data_third_party_dependency', route => route.fulfill({\n  status: 200,\n  body: testData,\n}));\nawait page.goto('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Projects for Multiple Browsers\nDESCRIPTION: This configuration demonstrates how to set up Playwright projects to run tests across different browsers including Chromium, Firefox, WebKit, mobile viewports, and branded browsers like Microsoft Edge and Google Chrome.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n\n    /* Test against mobile viewports. */\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n\n    /* Test against branded browsers. */\n    {\n      name: 'Microsoft Edge',\n      use: {\n        ...devices['Desktop Edge'],\n        channel: 'msedge'\n      },\n    },\n    {\n      name: 'Google Chrome',\n      use: {\n        ...devices['Desktop Chrome'],\n        channel: 'chrome'\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Writing API Tests for GitHub Issues with Playwright in Java\nDESCRIPTION: This snippet shows how to write specific API tests using the configured APIRequestContext. It includes two JUnit @Test methods that send POST requests to create GitHub issues (a bug report and a feature request) and then send GET requests to verify their successful creation by checking the response status and parsing the JSON body using Gson. Assertions validate the API responses and the content of the created issues. Requires GITHUB_USER and GITHUB_API_TOKEN environment variables.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.APIResponse;\nimport com.microsoft.playwright.Playwright;\nimport com.microsoft.playwright.options.RequestOptions;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String REPO = \"test-repo-2\";\n  private static final String USER = System.getenv(\"GITHUB_USER\");\n  private static final String API_TOKEN = System.getenv(\"GITHUB_API_TOKEN\");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  // ... (Previous setup code assumed here)\n\n  @Test\n  void shouldCreateBugReport() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Bug] report 1\");\n    data.put(\"body\", \"Bug description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has(\"title\")) {\n        continue;\n      }\n      if (\"[Bug] report 1\".equals(itemObj.get(\"title\").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals(\"Bug description\", issue.get(\"body\").getAsString(), issue.toString());\n  }\n\n  @Test\n  void shouldCreateFeatureRequest() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Feature] request 1\");\n    data.put(\"body\", \"Feature description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has(\"title\")) {\n        continue;\n      }\n      if (\"[Feature] request 1\".equals(itemObj.get(\"title\").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals(\"Feature description\", issue.get(\"body\").getAsString(), issue.toString());\n  }\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Modifying API Responses in Python (Async)\nDESCRIPTION: This Python async example shows how to fetch the original API response, modify it by adding a new fruit to the JSON data, and then fulfill the route with the modified response. It demonstrates intercepting, transforming, and fulfilling a request while preserving the original response metadata.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def test_gets_the_json_from_api_and_adds_a_new_fruit(page: Page):\n    async def handle(route: Route):\n        response = await route.fetch()\n        json = await response.json()\n        json.append({ \"name\": \"Loquat\", \"id\": 100})\n        # Fulfill using the original response, while patching the response body\n        # with the given JSON object.\n        await route.fulfill(response=response, json=json)\n\n    await page.route(\"https://demo.playwright.dev/api-mocking/api/v1/fruits\", handle)\n\n    # Go to the page\n    await page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the new fruit is visible\n    await expect(page.get_by_text(\"Loquat\", exact=True)).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Load State After Button Click in Python (Sync)\nDESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in Python using synchronous syntax. The method resolves after the 'load' event is fired.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_123\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_role(\"button\").click() # click triggers navigation.\npage.wait_for_load_state() # the promise resolves after \"load\" event.\n```\n\n----------------------------------------\n\nTITLE: Using Page.evaluate in Python (Sync)\nDESCRIPTION: Examples of using the evaluate method in Python with synchronous calls to execute JavaScript expressions in the page context. This method can accept arguments, evaluate strings with variables, and work with ElementHandle objects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nresult = page.evaluate(\"([x, y]) => Promise.resolve(x * y)\", [7, 8])\nprint(result) # prints \"56\"\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(page.evaluate(\"1 + 2\")) # prints \"3\"\nx = 10\nprint(page.evaluate(f\"1 + {x}\")) # prints \"11\"\n```\n\nLANGUAGE: python\nCODE:\n```\nbody_handle = page.evaluate(\"document.body\")\nhtml = page.evaluate(\"([body, suffix]) => body.innerHTML + suffix\", [body_handle, \"hello\"])\nbody_handle.dispose()\n```\n\n----------------------------------------\n\nTITLE: Making Assertions in Playwright Tests\nDESCRIPTION: Shows how to use Playwright's expect function for making assertions. Includes examples of both synchronous and asynchronous assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(success).toBeTruthy();\n\nawait expect(page).toHaveTitle(/Playwright/);\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Conditions with AND Operator in Playwright\nDESCRIPTION: Shows how to use the 'and' method to match elements that satisfy multiple conditions simultaneously. This example finds a button that has both a specific role and title attribute.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator button = page.getByRole(AriaRole.BUTTON).and(page.getByTitle(\"Subscribe\"));\n```\n\nLANGUAGE: python-async\nCODE:\n```\nbutton = page.get_by_role(\"button\").and_(page.getByTitle(\"Subscribe\"))\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nbutton = page.get_by_role(\"button\").and_(page.getByTitle(\"Subscribe\"))\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar button = page.GetByRole(AriaRole.Button).And(page.GetByTitle(\"Subscribe\"));\n```\n\n----------------------------------------\n\nTITLE: Mocking API Endpoints in Python (Async)\nDESCRIPTION: Shows how to intercept and mock API endpoints by handling network requests in asynchronous Python. The code fulfills a request with custom status code and body data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nawait page.route(\n    \"**/api/fetch_data\",\n    lambda route: route.fulfill(status=200, body=test_data))\nawait page.goto(\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Using TestInfo to Access Test Information and Save Screenshots in Playwright\nDESCRIPTION: This example demonstrates how to access the basic TestInfo properties like title and use the outputPath method to save a screenshot with a predictable path.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }, testInfo) => {\n  expect(testInfo.title).toBe('basic test');\n  await page.screenshot(testInfo.outputPath('screenshot.png'));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Cookies to Playwright BrowserContext (JS, Java, Python, C#)\nDESCRIPTION: Demonstrates how to add an array of cookie objects to the current Playwright BrowserContext. These cookies will be available to all pages subsequently opened within this context. This method requires an array of cookie objects, each potentially specifying name, value, domain, path, expiry, etc.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait browserContext.addCookies([cookieObject1, cookieObject2]);\n```\n\nLANGUAGE: java\nCODE:\n```\nbrowserContext.addCookies(Arrays.asList(cookieObject1, cookieObject2));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait browser_context.add_cookies([cookie_object1, cookie_object2])\n```\n\nLANGUAGE: python\nCODE:\n```\nbrowser_context.add_cookies([cookie_object1, cookie_object2])\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.AddCookiesAsync(new[] { cookie1, cookie2 });\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Redirect Source URL using Playwright Request (Multi-Language)\nDESCRIPTION: Shows how to use the `request.redirectedFrom()` method to find the original request that was redirected to the current one. This example demonstrates accessing the URL of the redirected-from request after navigating to a URL known to cause a redirect (e.g., HTTP to HTTPS).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst response = await page.goto('http://example.com');\nconsole.log(response.request().redirectedFrom().url()); // 'http://example.com'\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nResponse response = page.navigate(\"http://example.com\");\nSystem.out.println(response.request().redirectedFrom().url()); // \"http://example.com\"\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nresponse = await page.goto(\"http://example.com\")\nprint(response.request.redirected_from.url) # \"http://example.com\"\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nresponse = page.goto(\"http://example.com\")\nprint(response.request.redirected_from.url) # \"http://example.com\"\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar response = await page.GotoAsync(\"http://www.microsoft.com\");\nConsole.WriteLine(response.Request.RedirectedFrom?.Url); // http://www.microsoft.com\n```\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using Locator (Recommended) in Python (Async)\nDESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.get_by_text`) in asynchronous Python to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n```python async\nlocator = page.get_by_text(\"Submit\")\nawait locator.hover()\nawait locator.click()\n```\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelector in C#\nDESCRIPTION: Examples of using the EvalOnSelectorAsync method in C# to evaluate expressions on elements matching a selector. This method finds an element and passes it to the provided JavaScript expression, returning the expression's typed result.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nvar searchValue = await page.EvalOnSelectorAsync<string>(\"#search\", \"el => el.value\");\nvar preloadHref = await page.EvalOnSelectorAsync<string>(\"link[rel=preload]\", \"el => el.href\");\nvar html = await page.EvalOnSelectorAsync(\".main-container\", \"(e, suffix) => e.outerHTML + suffix\", \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Page and Taking a Screenshot in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new page, navigate to a URL, and save a screenshot using Playwright in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\n\n(async () => {\n  const browser = await webkit.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  await page.goto('https://example.com');\n  await page.screenshot({ path: 'screenshot.png' });\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Matching Objects Containing Properties with expect.objectContaining in JavaScript\nDESCRIPTION: Shows how `expect.objectContaining(expectedObject)` works inside `expect().toEqual()` in Playwright assertions. It matches any object that contains all the properties defined in `expectedObject`. The received object can have additional properties. Matchers can be nested within the `expectedObject` for more complex pattern matching.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Assert some of the properties.\nexpect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ foo: 1 }));\n\n// Matchers can be used on the properties as well.\nexpect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ bar: expect.any(Number) }));\n\n// Complex matching of sub-properties.\nexpect({\n  list: [1, 2, 3],\n  obj: { prop: 'Hello world!', another: 'some other value' },\n  extra: 'extra',\n}).toEqual(expect.objectContaining({\n  list: expect.arrayContaining([2, 3]),\n  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),\n}));\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Responses in Python (Sync)\nDESCRIPTION: Shows how to modify network responses in synchronous Python. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef handle_route(route: Route) -> None:\n    # Fetch original response.\n    response = route.fetch()\n    # Add a prefix to the title.\n    body = response.text()\n    body = body.replace(\"<title>\", \"<title>My prefix:\")\n    route.fulfill(\n        # Pass all fields from the response.\n        response=response,\n        # Override response body.\n        body=body,\n        # Force content type to be html.\n        headers={**response.headers, \"content-type\": \"text/html\"},\n    )\n\npage.route(\"**/title.html\", handle_route)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Playwright Test with Page Navigation\nDESCRIPTION: Shows the basic structure of a Playwright test that navigates to a URL. This demonstrates the minimal code needed for a functional test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Traces with NUnit in Playwright\nDESCRIPTION: Example showing how to configure trace recording in a NUnit test class using Playwright. Sets up tracing in SetUp and TearDown methods to capture screenshots, snapshots and source code for each test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-csharp.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class Tests : PageTest\n{\n    [SetUp]\n    public async Task Setup()\n    {\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TearDown]\n    public async Task TearDown()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                TestContext.CurrentContext.WorkDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip\"\n            )\n        });\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        // ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Specific URL After Click in C#\nDESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByText(\"Click me\").ClickAsync();\nawait page.WaitForURL(\"**/login\");\n```\n\n----------------------------------------\n\nTITLE: Performing HTTP Requests Using Playwright's APIRequest in JavaScript\nDESCRIPTION: This standalone script shows how to create an API request context manually with Playwright for higher control, including making HTTP requests to create and delete a GitHub repository. Requires Playwright and a GitHub token.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { request } from '@playwright/test';\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n(async () => {\n  // Create a context that will issue http requests.\n  const context = await request.newContext({\n    baseURL: 'https://api.github.com',\n  });\n\n  // Create a repository.\n  await context.post('/user/repos', {\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      // Add GitHub personal access token.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n    data: {\n      name: REPO\n    }\n  });\n\n  // Delete a repository.\n  await context.delete(`/repos/${USER}/${REPO}`, {\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      // Add GitHub personal access token.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    }\n  });\n})();\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Playwright\nDESCRIPTION: Shows how to navigate to a URL using the goto method in both JavaScript and Python. This is typically the first step in most Playwright tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.goto('https://playwright.dev/');\n```\n\nLANGUAGE: python\nCODE:\n```\npage.goto(\"https://playwright.dev/\")\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Data using Playwright APIRequestContext `fetch`\nDESCRIPTION: Demonstrates how to send an HTTP POST request with a JSON payload using the `fetch` method of Playwright's `APIRequestContext` across multiple languages. The request body is typically provided via the `data` (or `DataObject` in C#) option, which handles serialization. Requires an initialized `APIRequestContext`. Returns an `APIResponse` (or equivalent Promise/Task).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait request.fetch('https://example.com/api/createBook', {\n  method: 'post',\n  data: {\n    title: 'Book Title',\n    author: 'John Doe',\n  }\n});\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nMap<String, Object> data = new HashMap();\ndata.put(\"title\", \"Book Title\");\ndata.put(\"body\", \"John Doe\");\nrequest.fetch(\"https://example.com/api/createBook\", RequestOptions.create().setMethod(\"post\").setData(data));\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python\ndata = {\n    \"title\": \"Book Title\",\n    \"body\": \"John Doe\",\n}\napi_request_context.fetch(\"https://example.com/api/createBook\", method=\"post\", data=data)\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar data = new Dictionary<string, object>() {\n  { \"title\", \"Book Title\" },\n  { \"body\", \"John Doe\" }\n};\nawait Request.FetchAsync(\"https://example.com/api/createBook\", new() { Method = \"post\", DataObject = data });\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking API Endpoints in Python (Sync)\nDESCRIPTION: Demonstrates intercepting and mocking API endpoints by handling network requests in synchronous Python. The example fulfills a request with custom status code and body data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npage.route(\n    \"**/api/fetch_data\",\n    lambda route: route.fulfill(status=200, body=test_data))\npage.goto(\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Page and Taking a Screenshot in Python (Async)\nDESCRIPTION: This snippet illustrates how to create a new page, navigate to a URL, and save a screenshot using Playwright in Python with async/await syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = await webkit.launch()\n    context = await browser.new_context()\n    page = await context.new_page()\n    await page.goto(\"https://example.com\")\n    await page.screenshot(path=\"screenshot.png\")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Fetching and Modifying API Response in Python (Sync)\nDESCRIPTION: Demonstrates how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in Python with synchronous syntax. This example adds a new breed to the dog API response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef handle(route):\n    response = route.fetch()\n    json = response.json()\n    json[\"message\"][\"big_red_dog\"] = []\n    route.fulfill(response=response, json=json)\n\npage.route(\"https://dog.ceo/api/breeds/list/all\", handle)\n```\n\n----------------------------------------\n\nTITLE: Defining a Preload Script for Playwright (JavaScript)\nDESCRIPTION: Example JavaScript preload script (`preload.js`) intended to be used with `BrowserContext.addInitScript`. This script overrides the global `Math.random` function to always return 42. It demonstrates how to modify the JavaScript environment before page scripts run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// preload.js\nMath.random = () => 42;\n```\n\n----------------------------------------\n\nTITLE: Mocking API Requests in Java\nDESCRIPTION: This Java example shows how to intercept a network request to a fruit API and return mock data. It demonstrates creating a dictionary with custom fruit data, fulfilling the route with this mock data, and asserting that the mocked content is visible on the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Intercept the route to the fruit API\npage.route(\"https://fruit.ceo/api/breeds/image/random\", route -> {\n    List<Dictionary<String, Object>> data = new ArrayList<Dictionary<String, Object>>();\n    Hashtable<String, Object> dict = new Hashtable<String, Object>();\n    dict.put(\"name\", \"Strawberry\");\n    dict.put(\"id\", 21);\n    data.add(dict);\n  // fulfill the route with the mock data\n  route.fulfill(RequestOptions.create().setData(data));\n});\n\n// Go to the page\npage.navigate(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Strawberry fruit is visible\nassertThat(page.getByText(\"Strawberry\")).isVisible();\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Playwright Tests on Deployment (JavaScript)\nDESCRIPTION: This YAML configuration sets up GitHub Actions to run Playwright tests after a successful deployment. It installs dependencies, sets up Node.js, and runs the tests with the deployment URL as the base URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_17\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright\n      run: npx playwright install --with-deps\n    - name: Run Playwright tests\n      run: npx playwright test\n      env:\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Playwright APIRequestContext (Sync) in Python\nDESCRIPTION: Demonstrates how to use the synchronous `APIRequestContext` in Playwright (Python) to make API calls (POST to create, DELETE to remove) to the GitHub API. It shows initializing the context from a browser context (sharing cookies) or manually, setting headers (including authorization), and asserting response status and content. Dependencies include `playwright.sync_api` and `os`. Requires a GitHub API token set as an environment variable (`GITHUB_API_TOKEN`).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nimport os\nfrom playwright.sync_api import sync_playwright\n\nREPO = \"test-repo-1\"\nUSER = \"github-username\"\nAPI_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\n\nwith sync_playwright() as p:\n    # This will launch a new browser, create a context and page. When making HTTP\n    # requests with the internal APIRequestContext (e.g. `context.request` or `page.request`)\n    # it will automatically set the cookies to the browser page and vice versa.\n    browser = p.chromium.launch()\n    context = browser.new_context(base_url=\"https://api.github.com\")\n    api_request_context = context.request\n    page = context.new_page()\n\n    # Alternatively you can create a APIRequestContext manually without having a browser context attached:\n    # api_request_context = p.request.new_context(base_url=\"https://api.github.com\")\n\n\n    # Create a repository.\n    response = api_request_context.post(\n        \"/user/repos\",\n        headers={\n            \"Accept\": \"application/vnd.github.v3+json\",\n            # Add GitHub personal access token.\n            \"Authorization\": f\"token {API_TOKEN}\",\n        },\n        data={\"name\": REPO},\n    )\n    assert response.ok\n    assert response.json()[\"name\"] == REPO\n\n    # Delete a repository.\n    response = api_request_context.delete(\n        f\"/repos/{USER}/{REPO}\",\n        headers={\n            \"Accept\": \"application/vnd.github.v3+json\",\n            # Add GitHub personal access token.\n            \"Authorization\": f\"token {API_TOKEN}\",\n        },\n    )\n    assert response.ok\n    assert await response.body() == '{\"status\": \"ok\"}'\n```\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Playwright Tests in JavaScript\nDESCRIPTION: Demonstrates how to write two basic Playwright tests: one to check the page title and another to interact with a link and verify navigation. Uses the test and expect functions from the @playwright/test module.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('has title', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n});\n\ntest('get started link', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Click the get started link.\n  await page.getByRole('link', { name: 'Get started' }).click();\n\n  // Expects page to have a heading with the name of Installation.\n  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Page Fixture Example with Form Interaction\nDESCRIPTION: A complete example showing how to use the page fixture to navigate to a page, fill in a form, and interact with elements. This is the most commonly used fixture in Playwright tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('/signin');\n  await page.getByLabel('User Name').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByText('Sign in').click();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Attribute using LocatorAssertions in Multiple Languages\nDESCRIPTION: Examples of using toHaveAttribute/hasAttribute to verify that an element has a specific attribute with an expected value. This is useful for testing element properties like input types, ARIA attributes, or data attributes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('input');\nawait expect(locator).toHaveAttribute('type', 'text');\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.locator(\"input\")).hasAttribute(\"type\", \"text\");\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import expect\n\nlocator = page.locator(\"input\")\nawait expect(locator).to_have_attribute(\"type\", \"text\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import expect\n\nlocator = page.locator(\"input\")\nexpect(locator).to_have_attribute(\"type\", \"text\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.Locator(\"input\");\nawait Expect(locator).ToHaveAttributeAsync(\"type\", \"text\");\n```\n\n----------------------------------------\n\nTITLE: Text Location Examples in Multiple Languages\nDESCRIPTION: Code examples showing how to locate elements by text content in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.getByText('Welcome, John')).toBeVisible();\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.getByText(\"Welcome, John\")).isVisible();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait expect(page.get_by_text(\"Welcome, John\")).to_be_visible()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page.GetByText(\"Welcome, John\")).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Using SearchPage in C# Tests\nDESCRIPTION: Example of how to use the SearchPage class in C# tests. The code demonstrates creating a new instance of the page object and using its async methods to navigate and perform searches.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing BigEcommerceApp.Tests.Models;\n\n// in the test\nvar page = new SearchPage(await browser.NewPageAsync());\nawait page.GotoAsync();\nawait page.SearchAsync(\"search query\");\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using Locator (Recommended) in C#\nDESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.GetByText`) in C# to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar locator = page.GetByText(\"Submit\");\nawait locator.HoverAsync();\nawait locator.ClickAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Breakpoints with Page.pause() in Playwright Tests\nDESCRIPTION: Code snippets showing how to add a pause breakpoint in Playwright tests across different programming languages. This allows you to run a test up to a specific point for debugging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nawait page.pause();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.pause();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.pause()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.pause()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.PauseAsync();\n```\n\n----------------------------------------\n\nTITLE: Comprehensive GitHub API Test Suite with Setup, Teardown, and Issue Creation using Playwright in Python\nDESCRIPTION: This code shows the full workflow of GitHub API testing using Playwright and pytest in Python. It includes fixtures for API context and repository management, ensuring the repo\\'s lifecycle is handled automatically, along with test functions to verify creation of bug reports and feature requests using API calls. Tests assert both the existence and content of issues. Dependencies: pytest, Playwright sync API, relevant environment variables (GITHUB_API_TOKEN, GITHUB_USER).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import auto\\nimport os\\nfrom typing import Generator\\n\\nimport pytest\\nfrom playwright.sync_api import Playwright, Page, APIRequestContext, expect\\n\\nGITHUB_API_TOKEN = os.getenv(\\\"GITHUB_API_TOKEN\\\")\\nassert GITHUB_API_TOKEN, \\\"GITHUB_API_TOKEN is not set\\\"\\n\\nGITHUB_USER = os.getenv(\\\"GITHUB_USER\\\")\\nassert GITHUB_USER, \\\"GITHUB_USER is not set\\\"\\n\\nGITHUB_REPO = \\\"test\\\"\\n\\n\\n@pytest.fixture(scope=\\\"session\\\")\\ndef api_request_context(\\n    playwright: Playwright,\\n) -> Generator[APIRequestContext, None, None]:\\n    headers = {\\n        # We set this header per GitHub guidelines.\\n        \\\"Accept\\\": \\\"application/vnd.github.v3+json\\\",\\n        # Add authorization token to all requests.\\n        # Assuming personal access token available in the environment.\\n        \\\"Authorization\\\": f\\\"token {GITHUB_API_TOKEN}\\\",\\n    }\\n    request_context = playwright.request.new_context(\\n        base_url=\\\"https://api.github.com\\\", extra_http_headers=headers\\n    )\\n    yield request_context\\n    request_context.dispose()\\n\\n\\n@pytest.fixture(scope=\\\"session\\\", autouse=True)\\ndef create_test_repository(\\n    api_request_context: APIRequestContext,\\n) -> Generator[None, None, None]:\\n    # Before all\\n    new_repo = api_request_context.post(\\\"/user/repos\\\", data={\\\"name\\\": GITHUB_REPO})\\n    assert new_repo.ok\\n    yield\\n    # After all\\n    deleted_repo = api_request_context.delete(f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}\\\")\\n    assert deleted_repo.ok\\n\\n\\ndef test_should_create_bug_report(api_request_context: APIRequestContext) -> None:\\n    data = {\\n        \\\"title\\\": \\\"[Bug] report 1\\\",\\n        \\\"body\\\": \\\"Bug description\\\",\\n    }\\n    new_issue = api_request_context.post(\\n        f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\", data=data\\n    )\\n    assert new_issue.ok\\n\\n    issues = api_request_context.get(f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\")\\n    assert issues.ok\\n    issues_response = issues.json()\\n    issue = list(\\n        filter(lambda issue: issue[\\\"title\\\"] == \\\"[Bug] report 1\\\", issues_response)\\n    )[0]\\n    assert issue\\n    assert issue[\\\"body\\\"] == \\\"Bug description\\\"\\n\\n\\ndef test_should_create_feature_request(api_request_context: APIRequestContext) -> None:\\n    data = {\\n        \\\"title\\\": \\\"[Feature] request 1\\\",\\n        \\\"body\\\": \\\"Feature description\\\",\\n    }\\n    new_issue = api_request_context.post(\\n        f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\", data=data\\n    )\\n    assert new_issue.ok\\n\\n    issues = api_request_context.get(f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\")\\n    assert issues.ok\\n    issues_response = issues.json()\\n    issue = list(\\n        filter(lambda issue: issue[\\\"title\\\"] == \\\"[Feature] request 1\\\", issues_response)\\n    )[0]\\n    assert issue\\n    assert issue[\\\"body\\\"] == \\\"Feature description\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication in Playwright Tests with JavaScript\nDESCRIPTION: This JavaScript snippet authenticates a user in Playwright by mimicking a login process and storing the authenticated session state. It's designed to streamline test dependencies by reusing authenticated states.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as setup, expect } from '@playwright/test';\nimport path from 'path';\n\nconst authFile = path.join(__dirname, '../playwright/.auth/user.json');\n\nsetup('authenticate', async ({ page }) => {\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('username');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  await page.waitForURL('https://github.com/');\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n  await page.context().storageState({ path: authFile });\n});\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution for Debugging in Playwright\nDESCRIPTION: This snippet shows how to set a breakpoint in your test by pausing execution using the Page.pause() method, which helps with interactive debugging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.pause();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.pause();\n```\n\nLANGUAGE: python async\nCODE:\n```\nawait page.pause()\n```\n\nLANGUAGE: python sync\nCODE:\n```\npage.pause()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.PauseAsync();\n```\n\n----------------------------------------\n\nTITLE: Interacting with Page Elements using Playwright Locators\nDESCRIPTION: Demonstrates how to create a locator for a page element and interact with it. The example shows both a verbose and a concise way to click a 'Get started' link.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a locator.\nconst getStarted = page.getByRole('link', { name: 'Get started' });\n\n// Click it.\nawait getStarted.click();\n\n// Concise version:\nawait page.getByRole('link', { name: 'Get started' }).click();\n```\n\n----------------------------------------\n\nTITLE: Handling Popups in Playwright\nDESCRIPTION: Examples of handling popup windows opened by a page, using waitForEvent and expect_popup methods to capture and interact with popups triggered by specific actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Start waiting for popup before clicking. Note no await.\nconst popupPromise = page.waitForEvent('popup');\nawait page.getByText('open the popup').click();\nconst popup = await popupPromise;\n// Interact with the new popup normally.\nawait popup.getByRole('button').click();\nconsole.log(await popup.title());\n```\n\nLANGUAGE: java\nCODE:\n```\n// Get popup after a specific action (e.g., click)\nPage popup = page.waitForPopup(() -> {\n  page.getByText(\"open the popup\").click();\n});\n// Interact with the popup normally\npopup.getByRole(AriaRole.BUTTON).click();\nSystem.out.println(popup.title());\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get popup after a specific action (async) (e.g., click)\nasync with page.expect_popup() as popup_info:\n    await page.get_by_text(\"open the popup\").click()\npopup = await popup_info.value\n\n# Interact with the popup normally\nawait popup.get_by_role(\"button\").click()\nprint(await popup.title())\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get popup after a specific action (sync) (e.g., click)\nwith page.expect_popup() as popup_info:\n    page.get_by_text(\"open the popup\").click()\npopup = popup_info.value\n\n# Interact with the popup normally\npopup.get_by_role(\"button\").click()\nprint(popup.title())\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Get popup after a specific action (e.g., click)\nvar popup = await page.RunAndWaitForPopupAsync(async () =>\n{\n    await page.GetByText(\"open the popup\").ClickAsync();\n});\n// Interact with the popup normally\nawait popup.GetByRole(AriaRole.Button).ClickAsync();\nConsole.WriteLine(await popup.TitleAsync());\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating a Page in Playwright\nDESCRIPTION: Examples of creating a new page in a browser context, navigating to a URL, interacting with page elements, and retrieving the current URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a page.\nconst page = await context.newPage();\n\n// Navigate explicitly, similar to entering a URL in the browser.\nawait page.goto('http://example.com');\n// Fill an input.\nawait page.locator('#search').fill('query');\n\n// Navigate implicitly by clicking a link.\nawait page.locator('#submit').click();\n// Expect a new url.\nconsole.log(page.url());\n```\n\nLANGUAGE: java\nCODE:\n```\n// Create a page.\nPage page = context.newPage();\n\n// Navigate explicitly, similar to entering a URL in the browser.\npage.navigate(\"http://example.com\");\n// Fill an input.\npage.locator(\"#search\").fill(\"query\");\n\n// Navigate implicitly by clicking a link.\npage.locator(\"#submit\").click();\n// Expect a new url.\nSystem.out.println(page.url());\n```\n\nLANGUAGE: python\nCODE:\n```\n# Async version\npage = await context.new_page()\n\n# Navigate explicitly, similar to entering a URL in the browser.\nawait page.goto('http://example.com')\n# Fill an input.\nawait page.locator('#search').fill('query')\n\n# Navigate implicitly by clicking a link.\nawait page.locator('#submit').click()\n# Expect a new url.\nprint(page.url)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Sync version\npage = context.new_page()\n\n# Navigate explicitly, similar to entering a URL in the browser.\npage.goto('http://example.com')\n# Fill an input.\npage.locator('#search').fill('query')\n\n# Navigate implicitly by clicking a link.\npage.locator('#submit').click()\n# Expect a new url.\nprint(page.url)\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a page.\nvar page = await context.NewPageAsync();\n\n// Navigate explicitly, similar to entering a URL in the browser.\nawait page.GotoAsync(\"http://example.com\");\n// Fill an input.\nawait page.Locator(\"#search\").FillAsync(\"query\");\n\n// Navigate implicitly by clicking a link.\nawait page.Locator(\"#submit\").ClickAsync();\n// Expect a new url.\nConsole.WriteLine(page.Url);\n```\n\n----------------------------------------\n\nTITLE: Implementing Web First Assertions with Playwright\nDESCRIPTION: Illustrates the use of web-first assertions provided by Playwright to ensure that conditions are met before proceeding with test execution. This technique reduces flakiness in tests by waiting for necessary elements to appear or change state on the DOM before asserting their properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait expect(page.getByText('welcome')).toBeVisible();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexpect(await page.getByText('welcome').isVisible()).toBe(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Playwright Tests (JavaScript/Node.js)\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow for running Playwright tests within a Node.js project. The workflow triggers on pushes and pull requests to the main/master branches. It checks out the code, sets up the LTS version of Node.js, installs project dependencies using `npm ci`, installs Playwright browsers with dependencies, executes tests via `npx playwright test`, and finally uploads the generated `playwright-report/` directory as an artifact, retaining it for 30 days.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30\n\n```\n\n----------------------------------------\n\nTITLE: Handling New Page Events - Multiple Languages\nDESCRIPTION: Demonstrates how to wait for and handle new page creation events in the browser context, including popup windows.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst newPagePromise = context.waitForEvent('page');\nawait page.getByText('open new page').click();\nconst newPage = await newPagePromise;\nconsole.log(await newPage.evaluate('location.href'));\n```\n\nLANGUAGE: java\nCODE:\n```\nPage newPage = context.waitForPage(() -> {\n  page.getByText(\"open new page\").click();\n});\nSystem.out.println(newPage.evaluate(\"location.href\"));\n```\n\nLANGUAGE: python\nCODE:\n```\nwith context.expect_page() as page_info:\n    page.get_by_text(\"open new page\").click(),\npage = page_info.value\nprint(page.evaluate(\"location.href\"))\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar popup = await context.RunAndWaitForPageAsync(async =>\n{\n    await page.GetByText(\"open new page\").ClickAsync();\n});\nConsole.WriteLine(await popup.EvaluateAsync<string>(\"location.href\"));\n```\n\n----------------------------------------\n\nTITLE: Using APIResponse with Async Python in Playwright\nDESCRIPTION: Example of making an HTTP request using Playwright's async API, then validating and processing the response. Shows how to check response status, headers, and parse JSON data from the response body.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponse.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    context = await playwright.request.new_context()\n    response = await context.get(\"https://example.com/user/repos\")\n    assert response.ok\n    assert response.status == 200\n    assert response.headers[\"content-type\"] == \"application/json; charset=utf-8\"\n    json_data = await response.json()\n    assert json_data[\"name\"] == \"foobar\"\n    assert await response.body() == '{\"status\": \"ok\"}'\n\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Clearing Permission Overrides in Playwright BrowserContext (JS, Java, Python, C#)\nDESCRIPTION: Provides examples for using `clearPermissions` to remove all previously set permission overrides for the BrowserContext. This is typically called after specific permissions (like 'clipboard-read') were granted using `grantPermissions` for testing purposes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext();\nawait context.grantPermissions(['clipboard-read']);\n// do stuff ..\ncontext.clearPermissions();\n```\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext();\ncontext.grantPermissions(Arrays.asList(\"clipboard-read\"));\n// do stuff ..\ncontext.clearPermissions();\n```\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context()\nawait context.grant_permissions([\"clipboard-read\"])\n# do stuff ..\ncontext.clear_permissions()\n```\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context()\ncontext.grant_permissions([\"clipboard-read\"])\n# do stuff ..\ncontext.clear_permissions()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await browser.NewContextAsync();\nawait context.GrantPermissionsAsync(new[] { \"clipboard-read\" });\n// Alternatively, you can use the helper class ContextPermissions\n//  to specify the permissions...\n// do stuff ...\nawait context.ClearPermissionsAsync();\n```\n\n----------------------------------------\n\nTITLE: Parse Response Body as JSON\nDESCRIPTION: The `Response.json` method converts the response body to a JSON object. This can throw an error if parsing fails. It's implemented in JavaScript and Python, with C# having similar functionality.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function parseJson() {\\n  const json = await response.json();\\n  console.log('JSON:', json);\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Debug Mode with Playwright Inspector (Bash)\nDESCRIPTION: Demonstrates how to run Playwright tests in debug mode using the Playwright Inspector. Supported across NPM, Yarn, and PNPM, these commands will start tests with debugging support enabled, pausing on breakpoints and providing interactive inspection capabilities. Dependencies: Playwright installed via the respective package manager. Key parameter: the --debug flag. Input: test suite or file. Output: interactive debugging session.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright test --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright test --debug\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests via CLI\nDESCRIPTION: Examples of common Playwright test execution commands, including running all tests, specific files, and tests matching certain criteria.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-cli-js.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test tests/todo-page.spec.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test tests/todo-page/ tests/landing-page/\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test my-spec my-spec-2\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test my-spec.ts:42\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test -g \"add a todo item\"\n```\n\n----------------------------------------\n\nTITLE: Auto-waiting Navigation and Interaction in Python (Async)\nDESCRIPTION: Demonstrates how Playwright's async API in Python automatically waits for elements to be actionable before interacting with them after navigation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Navigate and click element\n# Click will auto-wait for the element\nawait page.goto(\"https://example.com\")\nawait page.get_by_text(\"example domain\").click()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Retry Intervals with expect.toPass\nDESCRIPTION: Shows how to customize the retry behavior of expect.toPass with specific timeout and interval settings for more control over retry logic.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(async () => {\n  const response = await page.request.get('https://api.example.com');\n  expect(response.status()).toBe(200);\n}).toPass({\n  // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe\n  // ... Defaults to [100, 250, 500, 1000].\n  intervals: [1_000, 2_000, 10_000],\n  timeout: 60_000\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Custom Matchers from Multiple Modules\nDESCRIPTION: Demonstrates how to merge custom matchers from different modules or files to create a combined expect object with all custom assertions available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeTests, mergeExpects } from '@playwright/test';\nimport { test as dbTest, expect as dbExpect } from 'database-test-utils';\nimport { test as a11yTest, expect as a11yExpect } from 'a11y-test-utils';\n\nexport const expect = mergeExpects(dbExpect, a11yExpect);\nexport const test = mergeTests(dbTest, a11yTest);\n```\n\n----------------------------------------\n\nTITLE: Modifying API Responses in Java\nDESCRIPTION: This Java example demonstrates intercepting a fruit API response, parsing and modifying the JSON by adding a new fruit, and fulfilling the route with the modified data. It shows how to handle the original request, transform the response body using Gson, and verify the added content appears on the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"*/**/api/v1/fruits\", route -> {\n  Response response = route.fetch();\n  byte[] json = response.body();\n  JsonObject parsed = new Gson().fromJson(new String(json), JsonObject.class);\n  parsed.add(new JsonObject().add(\"name\", \"Loquat\").add(\"id\", 100));\n  // Fulfill using the original response, while patching the response body\n  // with the given JSON object.\n  route.fulfill(new Route.FulfillOptions().setResponse(response).setBody(parsed.toString()));\n});\n\n// Go to the page\npage.navigate(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Loquat fruit is visible\nassertThat(page.getByText(\"Loquat\", new Page.GetByTextOptions().setExact(true))).isVisible();\n```\n\n----------------------------------------\n\nTITLE: Using Locator.press() to Simulate Keyboard Input in Playwright\nDESCRIPTION: Focuses an element and presses specified keys, supporting both single keys and key combinations. Useful for keyboard interactions like pressing Backspace, Enter, or modifier keys with shortcuts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('textbox').press('Backspace');\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.TEXTBOX).press(\"Backspace\");\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"textbox\").press(\"Backspace\")\n```\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_role(\"textbox\").press(\"Backspace\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Textbox).PressAsync(\"Backspace\");\n```\n\n----------------------------------------\n\nTITLE: Using PageAssertions to Verify URL Pattern in Java\nDESCRIPTION: Example of using assertThat to verify a page URL pattern after clicking a sign-in button in Java. Uses static import from PlaywrightAssertions and regular expression pattern matching.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// ...\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class TestPage {\n  // ...\n  @Test\n  void navigatesToLoginPage() {\n    // ...\n    page.getByText(\"Sign in\").click();\n    assertThat(page).hasURL(Pattern.compile(\".*/login\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Playwright Tests (Python)\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow for executing Playwright tests within a Python project. It triggers on pushes and pull requests to main/master branches. The workflow checks out code, sets up Python 3.11, installs dependencies listed in `requirements.txt` using pip, installs Playwright browsers and their dependencies, runs tests using `pytest` while retaining traces on failure, and uploads the contents of the `test-results/` directory (containing traces) as an artifact named `playwright-traces`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Ensure browsers are installed\n      run: python -m playwright install --with-deps\n    - name: Run your tests\n      run: pytest --tracing=retain-on-failure\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-traces\n        path: test-results/\n\n```\n\n----------------------------------------\n\nTITLE: Launching Chromium and Checking Page Title with Playwright Library (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates how to use Playwright Library to launch Chromium, navigate to a page, and check its title. It includes setup, routing, navigation, assertion, and teardown steps.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { chromium, devices } from 'playwright';\nimport assert from 'node:assert';\n\n(async () => {\n  // Setup\n  const browser = await chromium.launch();\n  const context = await browser.newContext(devices['iPhone 11']);\n  const page = await context.newPage();\n\n  // The actual interesting bit\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  assert(await page.title() === 'Example Domain'); // 👎 not a Web First assertion\n\n  // Teardown\n  await context.close();\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Blocking WebSocket Messages in Both Directions with Playwright in JavaScript\nDESCRIPTION: Demonstrates Playwright's capability to block specific messages in both directions over a WebSocket connection using JavaScript. Requires a WebSocket setup and configured route.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.routeWebSocket('/ws', ws => {\n  const server = ws.connectToServer();\n  ws.onMessage(message => {\n    if (message !== 'blocked-from-the-page')\n      server.send(message);\n  });\n  server.onMessage(message => {\n    if (message !== 'blocked-from-the-server')\n      ws.send(message);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Test Execution in Playwright\nDESCRIPTION: This snippet demonstrates how to configure Playwright tests to run in parallel within a single file. It uses the test.describe.configure method to set the mode to 'parallel'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'parallel' });\n\ntest('runs in parallel 1', async ({ page }) => { /* ... */ });\ntest('runs in parallel 2', async ({ page }) => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail-Fast Strategy for Playwright Tests in GitHub Actions\nDESCRIPTION: This YAML configuration sets up a fail-fast strategy for Playwright tests in GitHub Actions. It runs tests on changed files first using the --only-changed flag, followed by a full test run. This approach provides faster feedback on pull requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_21\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        # Force a non-shallow checkout, so that we can reference $GITHUB_BASE_REF.\n        # See https://github.com/actions/checkout for more details.\n        fetch-depth: 0\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run changed Playwright tests\n      run: npx playwright test --only-changed=$GITHUB_BASE_REF\n      if: github.event_name == 'pull_request'\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30\n```\n\n----------------------------------------\n\nTITLE: Determining Response Origin from Service Worker\nDESCRIPTION: The `Response.fromServiceWorker` method indicates whether a response was served by a Service Worker's Fetch Handler, which may have modified the response differently compared to direct network responses.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst isFromServiceWorker = response.fromServiceWorker();\\nconsole.log('Is from Service Worker:', isFromServiceWorker);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Preset Authentication in JavaScript\nDESCRIPTION: This code snippet illustrates how to write a Playwright test that assumes a pre-authenticated state, leveraging the stored authentication states defined in configuration setups.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // page is authenticated\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic Fixtures for Debug Logging in Playwright Test\nDESCRIPTION: Implementation of an automatic fixture that captures debug logs during test execution and attaches them to failed tests. This fixture runs automatically for every test without needing to be explicitly listed in the test parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport debug from 'debug';\nimport fs from 'fs';\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend<{ saveLogs: void }>({\n  saveLogs: [async ({}, use, testInfo) => {\n    // Collecting logs during the test.\n    const logs = [];\n    debug.log = (...args) => logs.push(args.map(String).join(''));\n    debug.enable('myserver');\n\n    await use();\n\n    // After the test we can check whether the test passed or failed.\n    if (testInfo.status !== testInfo.expectedStatus) {\n      // outputPath() API guarantees a unique file name.\n      const logFile = testInfo.outputPath('logs.txt');\n      await fs.promises.writeFile(logFile, logs.join('\\n'), 'utf8');\n      testInfo.attachments.push({ name: 'logs', contentType: 'text/plain', path: logFile });\n    }\n  }, { auto: true }],\n});\nexport { expect } from '@playwright/test';\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Frame.waitForFunction in Java\nDESCRIPTION: This Java snippet demonstrates how to pass an argument to the predicate function in Frame.waitForFunction. It waits for an element matching a specific selector to appear in the document.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nString selector = \".foo\";\nframe.waitForFunction(\"selector => !!document.querySelector(selector)\", selector);\n```\n\n----------------------------------------\n\nTITLE: Mocking API Requests in JavaScript\nDESCRIPTION: This code intercepts calls to a fruit API endpoint and returns a custom mock response without making the actual API call. It demonstrates how to define a route handler, fulfill with mock JSON data, and assert that the mocked data appears on the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest(\"mocks a fruit and doesn't call api\", async ({ page }) => {\n  // Mock the api call before navigating\n  await page.route('*/**/api/v1/fruits', async route => {\n    const json = [{ name: 'Strawberry', id: 21 }];\n    await route.fulfill({ json });\n  });\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the Strawberry fruit is visible\n  await expect(page.getByText('Strawberry')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Scanning Entire Page for Accessibility with Playwright and axe-core - JavaScript CommonJS\nDESCRIPTION: This snippet shows how to run a full-page accessibility scan using Playwright and @axe-core/playwright with CommonJS (require) syntax. It sets up a Playwright Test suite, navigates to a specified URL, performs an accessibility scan with AxeBuilder, and asserts that there are no violations. Requires @playwright/test and @axe-core/playwright as dependencies, and expects the page context to be provided by Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { test, expect } = require('@playwright/test');\nconst AxeBuilder = require('@axe-core/playwright').default; // 1\n\ntest.describe('homepage', () => { // 2\n  test('should not have any automatically detectable accessibility issues', async ({ page }) => {\n    await page.goto('https://your-site.com/'); // 3\n\n    const accessibilityScanResults = await new AxeBuilder({ page }).analyze(); // 4\n\n    expect(accessibilityScanResults.violations).toEqual([]); // 5\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Expect Timeout in Playwright Config (TypeScript)\nDESCRIPTION: This snippet shows how to set a global expect timeout in the Playwright configuration file. It sets the timeout to 10,000 milliseconds (10 seconds) for all expect assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    timeout: 10_000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Accessing Popup Windows (Python Async)\nDESCRIPTION: Demonstrates async context management in Playwright for Python to wait for popup creation. Uses 'async with' and expect_event to block until the popup appears, then evaluates its location. Requires an async environment and a valid page object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_15\n\nLANGUAGE: python async\nCODE:\n```\nasync with page.expect_event(\"popup\") as page_info:\n    await page.get_by_text(\"open the popup\").click()\npopup = await page_info.value\nprint(await popup.evaluate(\"location.href\"))\n```\n\n----------------------------------------\n\nTITLE: Filling Text Input Fields using Playwright Locators\nDESCRIPTION: Demonstrates using the `Locator.fill` (or `FillAsync` in C#) method in Playwright to input text into various types of input fields, including standard text boxes, date, time, and local datetime inputs. Locators like `getByRole` and `getByLabel` are used to target the specific elements. This method focuses the element and triggers an `input` event.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Text input\nawait page.getByRole('textbox').fill('Peter');\n\n// Date input\nawait page.getByLabel('Birth date').fill('2020-02-02');\n\n// Time input\nawait page.getByLabel('Appointment time').fill('13:15');\n\n// Local datetime input\nawait page.getByLabel('Local time').fill('2020-03-02T05:15');\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\n// Text input\npage.getByRole(AriaRole.TEXTBOX).fill(\"Peter\");\n\n// Date input\npage.getByLabel(\"Birth date\").fill(\"2020-02-02\");\n\n// Time input\npage.getByLabel(\"Appointment time\").fill(\"13-15\");\n\n// Local datetime input\npage.getByLabel(\"Local time\").fill(\"2020-03-02T05:15\");\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\n# Text input\nawait page.get_by_role(\"textbox\").fill(\"Peter\")\n\n# Date input\nawait page.get_by_label(\"Birth date\").fill(\"2020-02-02\")\n\n# Time input\nawait page.get_by_label(\"Appointment time\").fill(\"13:15\")\n\n# Local datetime input\nawait page.get_by_label(\"Local time\").fill(\"2020-03-02T05:15\")\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\n# Text input\npage.get_by_role(\"textbox\").fill(\"Peter\")\n\n# Date input\npage.get_by_label(\"Birth date\").fill(\"2020-02-02\")\n\n# Time input\npage.get_by_label(\"Appointment time\").fill(\"13:15\")\n\n# Local datetime input\npage.get_by_label(\"Local time\").fill(\"2020-03-02T05:15\")\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Text input\nawait page.GetByRole(AriaRole.Textbox).FillAsync(\"Peter\");\n\n// Date input\nawait page.GetByLabel(\"Birth date\").FillAsync(\"2020-02-02\");\n\n// Time input\nawait page.GetByLabel(\"Appointment time\").FillAsync(\"13-15\");\n\n// Local datetime input\nawait page.GetByLabel(\"Local time\").FillAsync(\"2020-03-02T05:15\");\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Trace Recording (JavaScript)\nDESCRIPTION: Demonstrates the fundamental workflow for recording a Playwright trace in JavaScript. It initializes a browser context, starts tracing with screenshots and snapshots enabled, navigates a page, and then stops tracing, saving the output to 'trace.zip'. Requires a Playwright browser context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\nawait context.tracing.start({ screenshots: true, snapshots: true });\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\n----------------------------------------\n\nTITLE: Creating a New Playwright Project Using NPM Init\nDESCRIPTION: Commands for initializing a new Playwright project or adding Playwright to an existing project using npm init, which sets up configuration, examples, and GitHub Actions workflow.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\n# Run from your project's root directory\nnpm init playwright@latest\n# Or create a new project\nnpm init playwright@latest new-project\n```\n\n----------------------------------------\n\nTITLE: Custom Fixtures Creation\nDESCRIPTION: Example of creating and exporting custom fixtures for Page Object Models, including multiple fixture definitions and TypeScript types.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\nimport { SettingsPage } from './settings-page';\n\n// Declare the types of your fixtures.\ntype MyFixtures = {\n  todoPage: TodoPage;\n  settingsPage: SettingsPage;\n};\n\n// Extend base test by providing \"todoPage\" and \"settingsPage\".\nexport const test = base.extend<MyFixtures>({\n  todoPage: async ({ page }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n\n  settingsPage: async ({ page }, use) => {\n    await use(new SettingsPage(page));\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests on Specific Browser\nDESCRIPTION: Execute tests on a specific browser using the --project flag followed by the browser name.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --project webkit\n```\n\n----------------------------------------\n\nTITLE: Launching Browser and Navigating Page in Playwright JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use Playwright to launch a Firefox browser, create a new page, navigate to a website, and finally close the browser. It requires the Playwright package and a Node.js runtime. The snippet is asynchronous and uses features specific to Node.js such as async/await.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser Using Playwright Java\nDESCRIPTION: Shows how to use Playwright's Java API to instantiate a Chromium browser, create a new page, and navigate to a specified URL. Requires 'com.microsoft.playwright' Java library. The main parameter is the browser type and configuration. Output is browser/webpage control; errors may occur if Playwright binaries are misconfigured.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\\n\\npublic class Example {\\n  public static void main(String[] args) {\\n    try (Playwright playwright = Playwright.create()) {\\n      BrowserType chromium = playwright.chromium();\\n      Browser browser = chromium.launch();\\n      Page page = browser.newPage();\\n      page.navigate(\\\"https://example.com\\\");\\n      // other actions...\\n      browser.close();\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Domain-Specific Permissions in Playwright Test\nDESCRIPTION: Configures notification permissions for a specific domain (skype.com) in a beforeEach hook for Playwright tests. This sets permissions only for the specified origin rather than globally.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest.beforeEach(async ({ context }) => {\n  // Runs before each test and signs in each page.\n  await context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n});\n\ntest('first', async ({ page }) => {\n  // page has notifications permission for https://skype.com.\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Sign-in Flow with Testing Library in JavaScript\nDESCRIPTION: Example showing how to test a sign-in page component using Testing Library with React, including user interactions and assertions\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/testing-library-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\ntest('sign in', async () => {\n  // Setup the page.\n  const user = userEvent.setup();\n  render(<SignInPage />);\n\n  // Perform actions.\n  await user.type(screen.getByLabelText('Username'), 'John');\n  await user.type(screen.getByLabelText('Password'), 'secret');\n  await user.click(screen.getByRole('button', { name: 'Sign in' }));\n\n  // Verify signed in state by waiting until \"Welcome\" message appears.\n  expect(await screen.findByText('Welcome, John')).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements with Playwright Locator\nDESCRIPTION: Shows how to click elements using Playwright's Locator API, including basic button clicks and advanced clicking with modifiers and specific positions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('button').click();\n\nawait page.locator('canvas').click({\n  button: 'right',\n  modifiers: ['Shift'],\n  position: { x: 23, y: 32 },\n});\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.BUTTON).click();\n\npage.locator(\"canvas\").click(new Locator.ClickOptions()\n  .setButton(MouseButton.RIGHT)\n  .setModifiers(Arrays.asList(KeyboardModifier.SHIFT))\n  .setPosition(23, 32));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"button\").click()\n\nawait page.locator(\"canvas\").click(\n    button=\"right\", modifiers=[\"Shift\"], position={\"x\": 23, \"y\": 32}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with HTML Reporter\nDESCRIPTION: Shows how to use the 'html' reporter, which produces a self-contained folder with a web-based report for the test run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --reporter=html\n```\n\n----------------------------------------\n\nTITLE: Testing Sign-in Flow with Playwright in JavaScript\nDESCRIPTION: Equivalent example showing how to test a sign-in page component using Playwright Test with React, demonstrating the migration path from Testing Library\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/testing-library-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, expect } = require('@playwright/experimental-ct-react');\n\ntest('sign in', async ({ mount }) => {\n  // Setup the page.\n  const component = await mount(<SignInPage />);\n\n  // Perform actions.\n  await component.getByLabel('Username').fill('John');\n  await component.getByLabel('Password').fill('secret');\n  await component.getByRole('button', { name: 'Sign in' }).click();\n\n  // Verify signed in state by waiting until \"Welcome\" message appears.\n  await expect(component.getByText('Welcome, John')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Using toHaveText Assertion in Playwright\nDESCRIPTION: Demonstrates how to use toHaveText assertion to validate element text content using both string and regular expression matching. Shows usage with single elements and arrays of elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('.title');\nawait expect(locator).toHaveText(/Welcome, Test User/);\nawait expect(locator).toHaveText(/Welcome, .*/);\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.locator(\".title\")).hasText(\"Welcome, Test User\");\nassertThat(page.locator(\".title\")).hasText(Pattern.compile(\"Welcome, .*\"));\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Text 1</li>\n  <li>Text 2</li>\n  <li>Text 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Verifying Issue Creation via UI and API with Playwright in C#\nDESCRIPTION: Illustrates creating a GitHub issue through browser automation using Playwright's Page API and confirming its existence via an API GET request in C#. The test simulates user interaction to fill in and submit a new issue, then checks the server state with an authenticated API request and appropriate string assertions. Dependencies include Playwright for .NET, a browser context, and matching authentication states across UI and API clients; it requires repository and user information provided in variables.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Make sure to extend from PageTest if you want to use the Page class.\nclass GitHubTests : PageTest\n{\n    [TestMethod]\n    public async Task LastCreatedIssueShouldBeOnTheServer()\n    {\n        await Page.GotoAsync(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues\");\n        await Page.Locator(\"text=New Issue\").ClickAsync();\n        await Page.Locator(\"[aria-label='Title']\").FillAsync(\"Bug report 1\");\n        await Page.Locator(\"[aria-label='Comment body']\").FillAsync(\"Bug description\");\n        await Page.Locator(\"text=Submit new issue\").ClickAsync();\n        var issueId = Page.Url.Substring(Page.Url.LastIndexOf('/'));\n\n        var newIssue = await Request.GetAsync(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues/\" + issueId);\n        await Expect(newIssue).ToBeOKAsync();\n        StringAssert.Contains(await newIssue.TextAsync(), \"Bug report 1\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Authentication Projects with JavaScript\nDESCRIPTION: Defines a Playwright configuration file to manage multiple test projects, including setups for different browsers and authentication states. This ensures tests start in an authenticated state as specified.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    { name: 'setup', testMatch: /.*\\.setup\\.ts/ },\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        storageState: 'playwright/.auth/user.json',\n      },\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: {\n        ...devices['Desktop Firefox'],\n        storageState: 'playwright/.auth/user.json',\n      },\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Page and Taking a Screenshot in C#\nDESCRIPTION: This snippet demonstrates how to create a new page, navigate to a URL, and save a screenshot using Playwright in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass PageExamples\n{\n    public static async Task Run()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        await using var browser = await playwright.Webkit.LaunchAsync();\n        var page = await browser.NewPageAsync();\n        await page.GotoAsync(\"https://www.theverge.com\");\n        await page.ScreenshotAsync(new() { Path = \"theverge.png\" });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Test Assertions with expect in JavaScript\nDESCRIPTION: Shows how to use the expect function for creating test assertions. This is a crucial part of writing effective tests to verify expected behaviors.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ntest('example', async ({ page }) => {\n  await test.expect(page).toHaveTitle('Title');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Projects for Multiple Environments\nDESCRIPTION: Configuration to run tests against different environments (staging and production) with different retry settings. This setup allows testing the same test suite against multiple target environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 60000, // Timeout is shared between all tests.\n  projects: [\n    {\n      name: 'staging',\n      use: {\n        baseURL: 'staging.example.com',\n      },\n      retries: 2,\n    },\n    {\n      name: 'production',\n      use: {\n        baseURL: 'production.example.com',\n      },\n      retries: 0,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Clicking Element in Shadow DOM using Playwright\nDESCRIPTION: This code demonstrates how to click the 'Details' div within a Shadow DOM using Playwright in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByText('Details').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByText(\"Details\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_text(\"Details\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByText(\"Details\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Security Details Confirmation with Locator Handler in Python (Synchronous)\nDESCRIPTION: Synchronous Python implementation of a locator handler to automatically skip a security details confirmation page. The handler detects text matching 'Confirm your security details' and clicks the 'Remind me later' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_83\n\nLANGUAGE: python\nCODE:\n```\n# Setup the handler.\ndef handler():\n  page.get_by_role(\"button\", name=\"Remind me later\").click()\npage.add_locator_handler(page.get_by_text(\"Confirm your security details\"), handler)\n\n# Write the test as usual.\npage.goto(\"https://example.com\")\npage.get_by_role(\"button\", name=\"Start here\").click()\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Projects with Different Browsers in Playwright\nDESCRIPTION: Example configuration that runs every test in Chromium, Firefox and WebKit, both Desktop and Mobile versions. This shows how to set up multiple test projects in the configuration file, with shared options and project-specific settings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Options shared for all projects.\n  timeout: 30000,\n  use: {\n    ignoreHTTPSErrors: true,\n  },\n\n  // Options specific to each project.\n  projects: [\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n    },\n    {\n      name: 'Mobile Chrome',\n      use: devices['Pixel 5'],\n    },\n    {\n      name: 'Mobile Safari',\n      use: devices['iPhone 12'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Accepting Standard Dialogs with Playwright (Python Async)\nDESCRIPTION: Registers an asynchronous handler for the 'dialog' event on a Playwright Page object. The lambda function automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears. This listener must be registered *before* the asynchronous action that triggers the dialog (e.g., clicking a button).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python async\npage.on(\"dialog\", lambda dialog: dialog.accept())\nawait page.get_by_role(\"button\".click())\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking Network Requests in Playwright Tests (JavaScript)\nDESCRIPTION: Demonstrates how to mock network requests by defining custom routes for a browser context or page. Includes examples of blocking CSS and image requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ context }) => {\n  // Block any css requests for each test in this file.\n  await context.route(/.css$/, route => route.abort());\n});\n\ntest('loads page without css', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('loads page without images', async ({ page }) => {\n  // Block png and jpeg images.\n  await page.route(/(png|jpeg)$/, route => route.abort());\n\n  await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Backend State after UI Actions with Playwright in Java\nDESCRIPTION: This snippet illustrates using Playwright for Java to create an issue via API, then validate its appearance in the GitHub UI using browser automation and LocatorAssertions. It requires Playwright for Java, an authenticated API context, and a setup repository. Inputs include issue data, while outputs are visible issues in the GitHub web UI. Navigation, locator use, and assertion combine API and browser testing in one workflow.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class TestGitHubAPI {\n  @Test\n  void lastCreatedIssueShouldBeFirstInTheList() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Feature] request 1\");\n    data.put(\"body\", \"Feature description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    page.navigate(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues\");\n    Locator firstIssue = page.locator(\"a[data-hovercard-type='issue']\").first();\n    assertThat(firstIssue).hasText(\"[Feature] request 1\");\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Web Servers\nDESCRIPTION: Sets up multiple web servers or background processes with different configurations for frontend and backend services.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://localhost:3000',\n      name: 'Frontend',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://localhost:3333',\n      name: 'Backend',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://localhost:3000',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fast Forwarding and Pausing Time - Playwright Python Async\nDESCRIPTION: Uses Playwright's Python async API to manipulate the browser's clock, pausing and fast forwarding time during tests. The test sets up the clock state, simulates user inactivity, and checks UI updates. Requires Playwright Python async API, datetime for date input, and page context; inputs include datetime values and string durations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Initialize clock with some time before the test time and let the page load\n# naturally. `Date.now` will progress as the timers fire.\nawait page.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))\nawait page.goto(\"http://localhost:3333\")\n\n# Pretend that the user closed the laptop lid and opened it again at 10am.\n# Pause the time once reached that point.\nawait page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\n\n# Assert the page state.\nawait expect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Close the laptop lid again and open it at 10:30am.\nawait page.clock.fast_forward(\"30:00\")\nawait expect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:30:00 AM\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for Specific URL After Click in Python (Async)\nDESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element using Playwright's async API in Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_text(\"Click me\").click()\nawait page.wait_for_url(\"**/login\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fixtures\nDESCRIPTION: Demonstrates how to use custom fixtures in tests, including usage in beforeEach hooks and test functions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from './my-test';\n\ntest.beforeEach(async ({ settingsPage }) => {\n  await settingsPage.switchToDarkMode();\n});\n\ntest('basic test', async ({ todoPage, page }) => {\n  await todoPage.addToDo('something nice');\n  await expect(page.getByTestId('todo-title')).toContainText(['something nice']);\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Requests in JavaScript\nDESCRIPTION: Demonstrates how to modify outgoing network requests in JavaScript. Examples include deleting headers from requests and changing the HTTP method to POST.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Delete header\nawait page.route('**/*', async route => {\n  const headers = route.request().headers();\n  delete headers['X-Secret'];\n  await route.continue({ headers });\n});\n\n// Continue requests as POST.\nawait page.route('**/*', route => route.continue({ method: 'POST' }));\n```\n\n----------------------------------------\n\nTITLE: Calculating Locator Bounding Box in Playwright Python (Async)\nDESCRIPTION: Asynchronously retrieves bounding box coordinates for a 'button' role element in Playwright Python, clicking the element's center. Returns None if not found or visible.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nbox = await page.get_by_role(\"button\").bounding_box()\nawait page.mouse.click(box[\"x\"] + box[\"width\"] / 2, box[\"y\"] + box[\"height\"] / 2)\n```\n\n----------------------------------------\n\nTITLE: Setting Input Files in Playwright with Python (async)\nDESCRIPTION: Shows various ways to upload files using set_input_files method in Python with async syntax, including uploading a single file, multiple files, a directory, removing selected files, and uploading a buffer from memory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_91\n\nLANGUAGE: python\nCODE:\n```\n# Select one file\nawait page.get_by_label(\"Upload file\").set_input_files('myfile.pdf')\n\n# Select multiple files\nawait page.get_by_label(\"Upload files\").set_input_files(['file1.txt', 'file2.txt'])\n\n# Select a directory\nawait page.get_by_label(\"Upload directory\").set_input_files('mydir')\n\n# Remove all the selected files\nawait page.get_by_label(\"Upload file\").set_input_files([])\n\n# Upload buffer from memory\nawait page.get_by_label(\"Upload file\").set_input_files(\n    files=[\n        {\"name\": \"test.txt\", \"mimeType\": \"text/plain\", \"buffer\": b\"this is a test\"}\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Accepting Standard Dialogs with Playwright (Java)\nDESCRIPTION: Registers a handler for the 'dialog' event on a Playwright Page object using `onDialog`. The handler automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears. This listener must be registered *before* the action that triggers the dialog (e.g., clicking a button).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.onDialog(dialog -> dialog.accept());\npage.getByRole(AriaRole.BUTTON).click();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Emulated Context with Playwright Sync API (Python)\nDESCRIPTION: This synchronous Python snippet demonstrates using `playwright.sync_api` to launch a WebKit browser and create a new context emulating an 'iPhone 13'. It retrieves device parameters from `playwright.devices` and applies them using `browser.new_context`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    iphone_13 = playwright.devices['iPhone 13']\n    browser = playwright.webkit.launch(headless=False)\n    context = browser.new_context(\n        **iphone_13,\n    )\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Timeout for Fixtures in Playwright Test\nDESCRIPTION: Example showing how to set a separate timeout for a specific fixture. This allows slow operations in the fixture to have more time than the default test timeout, especially useful for worker-scoped fixtures that perform heavy initialization.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base, expect } from '@playwright/test';\n\nconst test = base.extend<{ slowFixture: string }>({\n  slowFixture: [async ({}, use) => {\n    // ... perform a slow operation ...\n    await use('hello');\n  }, { timeout: 60000 }]\n});\n\ntest('example test', async ({ slowFixture }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Network Requests with Playwright in TypeScript\nDESCRIPTION: Example that sets up request routing to intercept and log all network requests made by a page while navigating to todomvc.com.\nSOURCE: https://github.com/microsoft/playwright/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('Intercept network requests', async ({ page }) => {\n  // Log and continue all network requests\n  await page.route('**', route => {\n    console.log(route.request().url());\n    route.continue();\n  });\n  await page.goto('http://todomvc.com');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Test Example with NUnit\nDESCRIPTION: Demonstrates a basic test setup using Playwright with NUnit, including page navigation and assertions. Shows how to check page title and interact with page elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Response in JavaScript\nDESCRIPTION: Demonstrates how to wait for specific HTTP responses using URL matching or predicates in JavaScript. Shows both promise-based approaches for handling response waiting.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_140\n\nLANGUAGE: javascript\nCODE:\n```\n// Start waiting for response before clicking. Note no await.\nconst responsePromise = page.waitForResponse('https://example.com/resource');\nawait page.getByText('trigger response').click();\nconst response = await responsePromise;\n\n// Alternative way with a predicate. Note no await.\nconst responsePromise = page.waitForResponse(response =>\n  response.url() === 'https://example.com' && response.status() === 200\n      && response.request().method() === 'GET'\n);\nawait page.getByText('trigger response').click();\nconst response = await responsePromise;\n```\n\n----------------------------------------\n\nTITLE: Testing Inactivity Logout - Playwright Python Async\nDESCRIPTION: Presents Playwright's Python async approach to testing inactivity logout using controlled time. Clock installation, simulated user interaction, fast forwarding, and assertion are all covered. Relies on Playwright's async Python API, with dependencies and parameters similar to the JavaScript approach.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Initial time does not matter for the test, so we can pick current time.\nawait page.clock.install()\nawait page.goto(\"http://localhost:3333\")\n# Interact with the page\nawait page.get_by_role(\"button\").click()\n\n# Fast forward time 5 minutes as if the user did not do anything.\n# Fast forward is like closing the laptop lid and opening it after 5 minutes.\n# All the timers due will fire once immediately, as in the real browser.\nawait page.clock.fast_forward(\"05:00\")\n\n# Check that the user was logged out automatically.\nawait expect(page.getByText(\"You have been logged out due to inactivity.\")).toBeVisible()\n```\n\n----------------------------------------\n\nTITLE: Using wait_for_selector across navigations in Python (async)\nDESCRIPTION: This snippet demonstrates how to use the wait_for_selector method to wait for an image element across multiple page navigations in Python using async/await.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_146\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n    page = await browser.new_page()\n    for current_url in [\"https://google.com\", \"https://bbc.com\"]:\n        await page.goto(current_url, wait_until=\"domcontentloaded\")\n        element = await page.wait_for_selector(\"img\")\n        print(\"Loaded image: \" + str(await element.get_attribute(\"src\")))\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Browser via CDP Using Playwright C#\nDESCRIPTION: Demonstrates connecting to a Chromium browser's debug endpoint with Playwright C# library. Needs 'Microsoft.Playwright' NuGet package and a running browser with the debug endpoint exposed. Input is the endpoint URL; output is access to contexts and pages. Only Chromium-based browsers are supported.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar browser = await playwright.Chromium.ConnectOverCDPAsync(\\\"http://localhost:9222\\\");\\nvar defaultContext = browser.Contexts[0];\\nvar page = defaultContext.Pages[0];\n```\n\n----------------------------------------\n\nTITLE: Sending Form URL-encoded Data in C#\nDESCRIPTION: Example of sending a POST request with URL-encoded form data using Playwright's API request context in C#. The form data is created using CreateFormData() method and passed in the request options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar formData = Context.APIRequest.CreateFormData();\nformData.Set(\"title\", \"Book Title\");\nformData.Set(\"body\", \"John Doe\");\nawait request.PostAsync(\"https://example.com/api/findBook\", new() { Form = formData });\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Browser Contexts with Playwright Library (JavaScript)\nDESCRIPTION: Illustrates creating multiple, isolated `BrowserContext` instances (`userContext`, `adminContext`) directly from a browser instance (`browser.newContext()`) using the Playwright library in JavaScript. This allows testing interactions between different user sessions or roles within the same script, independent of the test runner.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst { chromium } = require('playwright');\n\n// Create a Chromium browser instance\nconst browser = await chromium.launch();\n\n// Create two isolated browser contexts\nconst userContext = await browser.newContext();\nconst adminContext = await browser.newContext();\n\n// Create pages and interact with contexts independently\nconst adminPage = await adminContext.newPage();\nconst userPage = await userContext.newPage();\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Data in JavaScript\nDESCRIPTION: Example of sending a POST request with JSON data using Playwright's API request context in JavaScript. The data is passed directly in the request options and is automatically serialized.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait request.post('https://example.com/api/createBook', {\n  data: {\n    title: 'Book Title',\n    author: 'John Doe',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Locator.fill() to Set Input Values in Playwright\nDESCRIPTION: Demonstrates how to fill input fields using Playwright's Locator.fill() method. This method waits for element actionability, focuses it, fills it with the provided value, and triggers an input event. Works with <input>, <textarea>, and contenteditable elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('textbox').fill('example value');\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.TEXTBOX).fill(\"example value\");\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"textbox\").fill(\"example value\")\n```\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_role(\"textbox\").fill(\"example value\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Textbox).FillAsync(\"example value\");\n```\n\n----------------------------------------\n\nTITLE: Basic Frame Locator Usage\nDESCRIPTION: Demonstrates basic usage of FrameLocator to locate and click elements within an iframe across different languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-framelocator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('#my-frame').contentFrame().getByText('Submit');\nawait locator.click();\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.locator(\"#my-frame\").contentFrame().getByText(\"Submit\");\nlocator.click();\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\"#my-frame\").content_frame.get_by_text(\"Submit\")\nawait locator.click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = page.Locator(\"#my-frame\").ContentFrame.GetByText(\"Submit\");\nawait locator.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Standalone API Testing with Request Fixture in Playwright\nDESCRIPTION: Example showing how to perform standalone API testing using the request fixture, which allows making HTTP requests directly from Node.js without a browser context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ request }) => {\n  // Do a GET request on behalf of page\n  const response = await request.get('http://example.com/foo.json');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in Java\nDESCRIPTION: Examples of selecting options in a <select> element using Page.selectOption method in Java. It demonstrates single and multiple selections using different selection criteria.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_102\n\nLANGUAGE: java\nCODE:\n```\n// Single selection matching the value or label\npage.selectOption(\"select#colors\", \"blue\");\n// single selection matching both the value and the label\npage.selectOption(\"select#colors\", new SelectOption().setLabel(\"Blue\"));\n// multiple selection\npage.selectOption(\"select#colors\", new String[] {\"red\", \"green\", \"blue\"});\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Requests in C#\nDESCRIPTION: Demonstrates how to modify outgoing network requests in C#. Examples include deleting headers from requests and changing the HTTP method to POST.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n// Delete header\nawait page.RouteAsync(\"**/*\", async route => {\n    var headers = new Dictionary<string, string>(route.Request.Headers.ToDictionary(x => x.Key, x => x.Value));\n    headers.Remove(\"X-Secret\");\n    await route.ContinueAsync(new() { Headers = headers });\n});\n\n// Continue requests as POST.\nawait Page.RouteAsync(\"**/*\", async route => await route.ContinueAsync(new() { Method = \"POST\" }));\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Routes with Custom Responses in Python (Async)\nDESCRIPTION: Demonstrates how to fulfill routes with custom responses using Playwright in Python with async/await syntax. This example shows how to respond with a 404 status code and a custom message for all requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nawait page.route(\"**/*\", lambda route: route.fulfill(\n    status=404,\n    content_type=\"text/plain\",\n    body=\"not found!\"))\n```\n\n----------------------------------------\n\nTITLE: Creating TodoPage Class for Test Fixtures in Playwright\nDESCRIPTION: Implementation of a TodoPage class that encapsulates page interactions for a Todo MVC application. This class is used by the todoPage fixture to provide a clean API for test interactions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Modifying WebSocket Messages in Java\nDESCRIPTION: This code snippet demonstrates how to connect to the actual WebSocket server while intercepting and modifying messages in Java. It modifies 'request' messages to 'request2' and passes through other messages unmodified.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\npage.routeWebSocket(\"wss://example.com/ws\", ws -> {\n  WebSocketRoute server = ws.connectToServer();\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      server.send(\"request2\");\n    else\n      server.send(frame.text());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Test Annotations in Playwright\nDESCRIPTION: Shows how to add detailed annotations to tests with type and description fields.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('test login page', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, async ({ page }) => {\n  // ...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('report tests', {\n  annotation: { type: 'category', description: 'report' },\n}, () => {\n  test('test report header', async ({ page }) => {\n    // ...\n  });\n\n  test('test full report', {\n    annotation: [\n      { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/23180' },\n      { type: 'performance', description: 'very slow test!' },\n    ],\n  }, async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Locator Text with Playwright Assertions in Java\nDESCRIPTION: Shows how to use `assertThat(locator).hasText()` from `com.microsoft.playwright.assertions.PlaywrightAssertions` in a Java JUnit test method to verify that an element found by `.status` contains the text \"Submitted\" after clicking a button. Requires the Playwright Java library and its assertions module.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\n// ...\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class TestLocator {\n  // ...\n  @Test\n  void statusBecomesSubmitted() {\n    // ...\n    page.getByRole(AriaRole.BUTTON).click();\n    assertThat(page.locator(\".status\")).hasText(\"Submitted\");\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Responses in Playwright\nDESCRIPTION: Demonstrates how to wait for specific network responses after a user action, using different matching criteria like URL patterns and predicates.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Use a glob URL pattern. Note no await.\nconst responsePromise = page.waitForResponse('**/api/fetch_data');\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n```\n\nLANGUAGE: java\nCODE:\n```\n// Use a glob URL pattern\nResponse response = page.waitForResponse(\"**/api/fetch_data\", () -> {\n  page.getByText(\"Update\").click();\n});\n```\n\nLANGUAGE: python\nCODE:\n```\n# Use a glob url pattern\nasync with page.expect_response(\"**/api/fetch_data\") as response_info:\n    await page.get_by_text(\"Update\").click()\nresponse = await response_info.value\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Use a glob URL pattern\nvar waitForResponseTask = page.WaitForResponseAsync(\"**/api/fetch_data\");\nawait page.GetByText(\"Update\").ClickAsync();\nvar response = await waitForResponseTask;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Use a RegExp. Note no await.\nconst responsePromise = page.waitForResponse(/\\.jpeg$/);\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n\n// Use a predicate taking a Response object. Note no await.\nconst responsePromise = page.waitForResponse(response => response.url().includes(token));\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n```\n\nLANGUAGE: java\nCODE:\n```\n// Use a RegExp\nResponse response = page.waitForResponse(Pattern.compile(\"\\\\.jpeg$\"), () -> {\n  page.getByText(\"Update\").click();\n});\n\n// Use a predicate taking a Response object\nResponse response = page.waitForResponse(r -> r.url().contains(token), () -> {\n  page.getByText(\"Update\").click();\n});\n```\n\n----------------------------------------\n\nTITLE: Routing WebSocket Connections in Python (Async)\nDESCRIPTION: Example of routing WebSocket connections using Page.route_web_socket method in Python with async syntax. It demonstrates how to handle WebSocket messages asynchronously.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_98\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\ndef handler(ws: WebSocketRoute):\n  ws.on_message(lambda message: message_handler(ws, message))\n\nawait page.route_web_socket(\"/ws\", handler)\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Browser Automation in C#\nDESCRIPTION: A simple C# program that navigates to the Playwright .NET documentation page and takes a screenshot using Chromium.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev/dotnet\");\nawait page.ScreenshotAsync(new()\n{\n    Path = \"screenshot.png\"\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests from Command Line\nDESCRIPTION: Execute all tests configured in the playwright.config file using the playwright test command. Tests run in headless mode by default.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Locator Results Using Playwright JavaScript\nDESCRIPTION: This snippet demonstrates iterating over a list of elements returned by Playwright's `all()` method, performing a click on each 'listitem' role. Requires Playwright for JavaScript and assumes an initialized `page` object. Inputs are the role selector, output is sequential clicks on all list items. All elements should be loaded and present on the page to avoid flakiness.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (const li of await page.getByRole('listitem').all())\n  await li.click();\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific HTTP Headers\nDESCRIPTION: The `Response.headers` and `Response.allHeaders` methods extract HTTP headers from responses, with `headers` excluding security-related headers and `allHeaders` including them. Asynchronous calls are necessary for fetching headers accurately.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst headers = response.headers();\\nconsole.log('Headers:', headers);\n```\n\n----------------------------------------\n\nTITLE: Snapshot Comparison with Playwright Expect (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Playwright's expect assertions to compare a screenshot's output with a stored snapshot file. The function toMatchSnapshot verifies that the obtained screenshot matches the specified snapshot (e.g., 'landing-page.png'), and will throw if differences are detected. It requires Playwright's test runner and the snapshot file to exist (or be generated), and is intended for visual regression testing outputs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-snapshotassertions.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexpect(screenshot).toMatchSnapshot('landing-page.png');\n```\n\n----------------------------------------\n\nTITLE: Hover and Click on Locator Object in Python Async\nDESCRIPTION: Demonstrates using a locator in async Python to perform hover and click actions on a text element. Ensures the element is freshly queried before interaction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nlocator = page.get_by_text(\"Submit\")\nawait locator.hover()\nawait locator.click()\n```\n\n----------------------------------------\n\nTITLE: Using Label-to-Control Retargeting for Input Fields\nDESCRIPTION: Playwright can automatically target the associated input control when you interact with a label element. This example demonstrates filling a password field by targeting its label.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Fill the input by targeting the label.\nawait page.getByText('Password').fill('secret');\n```\n\nLANGUAGE: java\nCODE:\n```\n// Fill the input by targeting the label.\npage.getByText(\"Password\").fill(\"secret\");\n```\n\nLANGUAGE: python\nCODE:\n```\n# Fill the input by targeting the label.\nawait page.get_by_text(\"Password\").fill(\"secret\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Fill the input by targeting the label.\npage.get_by_text(\"Password\").fill(\"secret\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Fill the input by targeting the label.\nawait page.GetByText(\"Password\").FillAsync(\"secret\");\n```\n\n----------------------------------------\n\nTITLE: Changing Timeout from beforeEach Hook (TypeScript)\nDESCRIPTION: This code demonstrates how to extend the timeout for all tests running a specific beforeEach hook. It adds 30 seconds to the existing timeout for each test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30_000);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Workers\nDESCRIPTION: Sets the maximum number of concurrent worker processes for test parallelization. Can be specified as absolute number or percentage of CPU cores.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Example Electron Automation Script using Playwright in JavaScript\nDESCRIPTION: Provides a complete asynchronous IIFE (Immediately Invoked Function Expression) example demonstrating how to automate an Electron application using Playwright. It covers launching the app (specifying the main script via `args`), evaluating code within the Electron main process to get the app path, obtaining the first application window, retrieving the window title, capturing a screenshot, redirecting Electron console output to the Node terminal, simulating a click on an element, and finally closing the Electron application.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electron.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { _electron: electron } = require('playwright');\n\n(async () => {\n  // Launch Electron app.\n  const electronApp = await electron.launch({ args: ['main.js'] });\n\n  // Evaluation expression in the Electron context.\n  const appPath = await electronApp.evaluate(async ({ app }) => {\n    // This runs in the main Electron process, parameter here is always\n    // the result of the require('electron') in the main app script.\n    return app.getAppPath();\n  });\n  console.log(appPath);\n\n  // Get the first window that the app opens, wait if necessary.\n  const window = await electronApp.firstWindow();\n  // Print the title.\n  console.log(await window.title());\n  // Capture a screenshot.\n  await window.screenshot({ path: 'intro.png' });\n  // Direct Electron console to Node terminal.\n  window.on('console', console.log);\n  // Click button.\n  await window.click('text=Click me');\n  // Exit app.\n  await electronApp.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: File Upload Operations in Playwright\nDESCRIPTION: Demonstrates various file upload scenarios including single file, multiple files, directories, and in-memory file uploads using setInputFiles method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));\n\nawait page.getByLabel('Upload files').setInputFiles([\n  path.join(__dirname, 'file1.txt'),\n  path.join(__dirname, 'file2.txt'),\n]);\n\nawait page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));\n\nawait page.getByLabel('Upload file').setInputFiles([]);\n\nawait page.getByLabel('Upload file').setInputFiles({\n  name: 'file.txt',\n  mimeType: 'text/plain',\n  buffer: Buffer.from('this is test')\n});\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByLabel(\"Upload file\").setInputFiles(Paths.get(\"myfile.pdf\"));\n\npage.getByLabel(\"Upload files\").setInputFiles(new Path[] {Paths.get(\"file1.txt\"), Paths.get(\"file2.txt\")});\n\npage.getByLabel(\"Upload directory\").setInputFiles(Paths.get(\"mydir\"));\n\npage.getByLabel(\"Upload file\").setInputFiles(new Path[0]);\n\npage.getByLabel(\"Upload file\").setInputFiles(new FilePayload(\n  \"file.txt\", \"text/plain\", \"this is test\".getBytes(StandardCharsets.UTF_8)));\n```\n\n----------------------------------------\n\nTITLE: Using Locator.or Method for Alternative Matching\nDESCRIPTION: Shows how to use the Locator.or method to create a locator that matches either of two locators, with a practical scenario.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst newEmail = page.getByRole('button', { name: 'New email' });\nconst dialog = page.getByText('Confirm security settings');\nawait expect(newEmail.or(dialog)).toBeVisible();\nif (await dialog.isVisible())\n  await page.getByRole('button', { name: 'Dismiss' }).click();\nawait newEmail.click();\n```\n\n----------------------------------------\n\nTITLE: Asserting Element CSS Classes using LocatorAssertions in Multiple Languages\nDESCRIPTION: Examples of using toHaveClass/hasClass to verify that an element has specific CSS classes. This can be used with strings to match exact class attributes or with regular expressions to match patterns within class names.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('#component');\nawait expect(locator).toHaveClass('middle selected row');\nawait expect(locator).toHaveClass(/(^|\\s)selected(\\s|$)/);\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.locator(\"#component\")).hasClass(\"middle selected row\");\nassertThat(page.locator(\"#component\")).hasClass(Pattern.compile(\"(^|\\\\s)selected(\\\\s|$)\"));\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import expect\n\nlocator = page.locator(\"#component\")\nawait expect(locator).to_have_class(\"middle selected row\")\nawait expect(locator).to_have_class(re.compile(r\"(^|\\\\s)selected(\\\\s|$)\"))\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import expect\n\nlocator = page.locator(\"#component\")\nexpect(locator).to_have_class(\"middle selected row\")\nexpect(locator).to_have_class(re.compile(r\"(^|\\\\s)selected(\\\\s|$)\"))\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.Locator(\"#component\");\nawait Expect(locator).ToHaveClassAsync(\"middle selected row\");\nawait Expect(locator).ToHaveClassAsync(new Regex(\"(^|\\\\s)selected(\\\\s|$)\"));\n```\n\n----------------------------------------\n\nTITLE: Performing Various Mouse Clicks in Playwright\nDESCRIPTION: Demonstrates various mouse click interactions using `Locator.click` (or `ClickAsync`/`DblClickAsync`/`HoverAsync` in C#). Covers standard clicks, double clicks (`dblclick`), right clicks (specifying `button: 'right'`), clicks with modifier keys like Shift or Ctrl/Meta (`modifiers` option), hovering over elements (`hover`), and clicking at specific coordinates within an element (`position` option). Playwright performs actionability checks (visibility, stability, pointer events) before clicking.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Generic click\nawait page.getByRole('button').click();\n\n// Double click\nawait page.getByText('Item').dblclick();\n\n// Right click\nawait page.getByText('Item').click({ button: 'right' });\n\n// Shift + click\nawait page.getByText('Item').click({ modifiers: ['Shift'] });\n\n// Ctrl + click on Windows and Linux\n// Meta + click on macOS\nawait page.getByText('Item').click({ modifiers: ['ControlOrMeta'] });\n\n// Hover over element\nawait page.getByText('Item').hover();\n\n// Click the top left corner\nawait page.getByText('Item').click({ position: { x: 0, y: 0 } });\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\n// Generic click\npage.getByRole(AriaRole.BUTTON).click();\n\n// Double click\npage.getByText(\"Item\").dblclick();\n\n// Right click\npage.getByText(\"Item\").click(new Locator.ClickOptions().setButton(MouseButton.RIGHT));\n\n// Shift + click\npage.getByText(\"Item\").click(new Locator.ClickOptions().setModifiers(Arrays.asList(KeyboardModifier.SHIFT)));\n\n// Ctrl + click on Windows and Linux\n// Meta + click on macOS\npage.getByText(\"Item\").click(new Locator.ClickOptions().setModifiers(Arrays.asList(KeyboardModifier.CONTROL_OR_META)));\n\n// Hover over element\npage.getByText(\"Item\").hover();\n\n// Click the top left corner\npage.getByText(\"Item\").click(new Locator.ClickOptions().setPosition(0, 0));\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\n# Generic click\nawait page.get_by_role(\"button\").click()\n\n# Double click\nawait page.get_by_text(\"Item\").dblclick()\n\n# Right click\nawait page.get_by_text(\"Item\").click(button=\"right\")\n\n# Shift + click\nawait page.get_by_text(\"Item\").click(modifiers=[\"Shift\"])\n\n# Ctrl + click on Windows and Linux\n# Meta + click on macOS\nawait page.get_by_text(\"Item\").click(modifiers=[\"ControlOrMeta\"])\n\n# Hover over element\nawait page.get_by_text(\"Item\").hover()\n\n# Click the top left corner\nawait page.get_by_text(\"Item\").click(position={ \"x\": 0, \"y\": 0})\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\n# Generic click\npage.get_by_role(\"button\").click()\n\n# Double click\npage.get_by_text(\"Item\").dblclick()\n\n# Right click\npage.get_by_text(\"Item\").click(button=\"right\")\n\n# Shift + click\npage.get_by_text(\"Item\").click(modifiers=[\"Shift\"])\n\n# Hover over element\npage.get_by_text(\"Item\").hover()\n\n# Click the top left corner\npage.get_by_text(\"Item\").click(position={ \"x\": 0, \"y\": 0})\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Generic click\nawait page.GetByRole(AriaRole.Button).ClickAsync();\n\n// Double click\nawait page.GetByText(\"Item\").DblClickAsync();\n\n// Right click\nawait page.GetByText(\"Item\").ClickAsync(new() { Button = MouseButton.Right });\n\n// Shift + click\nawait page.GetByText(\"Item\").ClickAsync(new() { Modifiers = new[] { KeyboardModifier.Shift } });\n\n// Ctrl + click on Windows and Linux\n// Meta + click on macOS\nawait page.GetByText(\"Item\").ClickAsync(new() { Modifiers = new[] { KeyboardModifier.ControlOrMeta } });\n\n// Hover over element\nawait page.GetByText(\"Item\").HoverAsync();\n\n// Click the top left corner\nawait page.GetByText(\"Item\").ClickAsync(new() { position = new Position { X = 0, Y = 0 } });\n```\n```\n\n----------------------------------------\n\nTITLE: Checking/Unchecking Checkboxes and Radio Buttons in Playwright\nDESCRIPTION: Illustrates using the `Locator.check` (or `CheckAsync` in C#) method to check or uncheck checkboxes (`input[type=checkbox]`, `[role=checkbox]`) and select radio buttons (`input[type=radio]`). Includes examples of asserting the checked state of an element using Playwright's assertion capabilities (`expect().toBeChecked()`, `assertTrue().isChecked()`, `expect().to_be_checked()`, `Expect().ToBeCheckedAsync()`).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Check the checkbox\nawait page.getByLabel('I agree to the terms above').check();\n\n// Assert the checked state\nexpect(page.getByLabel('Subscribe to newsletter')).toBeChecked();\n\n// Select the radio button\nawait page.getByLabel('XL').check();\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\n// Check the checkbox\npage.getByLabel(\"I agree to the terms above\").check();\n\n// Assert the checked state\nassertTrue(page.getByLabel(\"Subscribe to newsletter\")).isChecked();\n\n// Select the radio button\npage.getByLabel(\"XL\").check();\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\n# Check the checkbox\nawait page.get_by_label('I agree to the terms above').check()\n\n# Assert the checked state\nawait expect(page.get_by_label('Subscribe to newsletter')).to_be_checked()\n\n# Select the radio button\nawait page.get_by_label('XL').check()\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\n# Check the checkbox\npage.get_by_label('I agree to the terms above').check()\n\n# Assert the checked state\nexpect(page.get_by_label('Subscribe to newsletter')).to_be_checked()\n\n# Select the radio button\npage.get_by_label('XL').check()\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Check the checkbox\nawait page.GetByLabel(\"I agree to the terms above\").CheckAsync();\n\n// Assert the checked state\nawait Expect(page.GetByLabel(\"Subscribe to newsletter\")).ToBeCheckedAsync();\n\n// Select the radio button\nawait page.GetByLabel(\"XL\").CheckAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: React Component Test Setup with Playwright\nDESCRIPTION: This snippet shows how to set up a basic component test for a React app using Playwright Test. It demonstrates mounting the App component and asserting its content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport App from './App';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<App />);\n  await expect(component).toContainText('Learn React');\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators by Not Having Text using Playwright\nDESCRIPTION: This code demonstrates how to filter locators by not having specific text and assert the count using Playwright in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.getByRole('listitem').filter({ hasNotText: 'Out of stock' })).toHaveCount(5);\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasNotText(\"Out of stock\")))\n    .hasCount(5);\n```\n\nLANGUAGE: python\nCODE:\n```\nawait expect(page.get_by_role(\"listitem\").filter(has_not_text=\"Out of stock\")).to_have_count(5)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page.getByRole(AriaRole.Listitem).Filter(new() { HasNotText = \"Out of stock\" }))\n    .ToHaveCountAsync(5);\n```\n\n----------------------------------------\n\nTITLE: Reusing Signed-in State with Playwright - Python Sync\nDESCRIPTION: This Python (sync) code example illustrates saving the authentication state to a JSON file and using it for new browser contexts with Playwright, enabling tests to run faster by avoiding repetitive login actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_13\n\nLANGUAGE: python sync\nCODE:\n```\n# Save storage state into the file.\nstorage = context.storage_state(path=\"state.json\")\n\n# Create a new context with the saved storage state.\ncontext = browser.new_context(storage_state=\"state.json\")\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Expect Assertions in Playwright Tests\nDESCRIPTION: Shows how to configure the expect assertion library in Playwright, including timeout settings for assertions and configuration options for screenshot and snapshot comparisons.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-configuration-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    // Maximum time expect() should wait for the condition to be met.\n    timeout: 5000,\n\n    toHaveScreenshot: {\n      // An acceptable amount of pixels that could be different, unset by default.\n      maxDiffPixels: 10,\n    },\n\n    toMatchSnapshot: {\n      // An acceptable ratio of pixels that are different to the\n      // total amount of pixels, between 0 and 1.\n      maxDiffPixelRatio: 0.1,\n    },\n  },\n\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Saving Downloads in Playwright (Python Async)\nDESCRIPTION: Shows the asynchronous Python pattern using the `async with page.expect_download()` context manager. The download action is performed within the context, and the `Download` object is retrieved from `download_info.value`. The file is saved using `download.save_as()` and `download.suggested_filename`. Requires an async Playwright `page` object and an element that initiates a download.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Start waiting for the download\nasync with page.expect_download() as download_info:\n    # Perform the action that initiates download\n    await page.get_by_text(\"Download file\").click()\ndownload = await download_info.value\n\n# Wait for the download process to complete and save the downloaded file somewhere\nawait download.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```\n\n----------------------------------------\n\nTITLE: Mocking API Requests in Python (Sync)\nDESCRIPTION: This Python synchronous version demonstrates API mocking by intercepting a fruit API route and fulfilling it with custom data. It uses a synchronous route handler to provide mock JSON data, navigates to the target page, and verifies the mocked content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_mock_the_fruit_api(page: Page):\n    def handle(route: Route):\n        json = [{\"name\": \"Strawberry\", \"id\": 21}]\n        # fulfill the route with the mock data\n        route.fulfill(json=json)\n\n    # Intercept the route to the fruit API\n    page.route(\"*/**/api/v1/fruits\", handle)\n\n    # Go to the page\n    page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the Strawberry fruit is visible\n    expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Validating Top Issue Placement via UI and API with Playwright in C#\nDESCRIPTION: Demonstrates creating a GitHub issue via API and verifying through the browser that it is the first in the issue list using Playwright in C#. This snippet sets up POST requests for issue creation and utilizes built-in locators with assertion helpers to check GUI state. Requires Playwright, proper authentication setup, and an existing repository context in which issues can be created; input parameters include repository and user credentials.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nclass TestGitHubAPI : PageTest\n{\n    [TestMethod]\n    public async Task LastCreatedIssueShouldBeFirstInTheList()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Feature] request 1\" },\n            { \"body\", \"Feature description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        // When inheriting from 'PlaywrightTest' it only gives you a Playwright instance. To get a Page instance, either start\n        // a browser, context, and page manually or inherit from 'PageTest' which will launch it for you.\n        await Page.GotoAsync(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues\");\n        var firstIssue = Page.Locator(\"a[data-hovercard-type='issue']\").First;\n        await Expect(firstIssue).ToHaveTextAsync(\"[Feature] request 1\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching and Modifying API Response in Java\nDESCRIPTION: Demonstrates how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in Java. This example adds a new breed to the dog API response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"https://dog.ceo/api/breeds/list/all\", route -> {\n  APIResponse response = route.fetch();\n  JsonObject json = new Gson().fromJson(response.text(), JsonObject.class);\n  JsonObject message = itemObj.get(\"json\").getAsJsonObject();\n  message.set(\"big_red_dog\", new JsonArray());\n  route.fulfill(new Route.FulfillOptions()\n    .setResponse(response)\n    .setBody(json.toString()));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Button Component Click Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to test a button component's click event using Playwright Test. It mounts the component, asserts its text content, simulates a click, and verifies the event was triggered.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('event should work', async ({ mount }) => {\n  let clicked = false;\n\n  // Mount a component. Returns locator pointing to the component.\n  const component = await mount(\n    <Button title=\"Submit\" onClick={() => { clicked = true }}></Button>\n  );\n\n  // As with any Playwright test, assert locator text.\n  await expect(component).toContainText('Submit');\n\n  // Perform locator click. This will trigger the event.\n  await component.click();\n\n  // Assert that respective events have been fired.\n  expect(clicked).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Options from Dropdown using Frame.selectOption in JavaScript\nDESCRIPTION: Examples of how to select options from a dropdown element using the Frame.selectOption method in JavaScript. Shows single selection by value/label or multiple selections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// Single selection matching the value or label\nframe.selectOption('select#colors', 'blue');\n\n// single selection matching both the value and the label\nframe.selectOption('select#colors', { label: 'Blue' });\n\n// multiple selection\nframe.selectOption('select#colors', 'red', 'green', 'blue');\n```\n\n----------------------------------------\n\nTITLE: Implementing PlaywrightDevPage in JavaScript\nDESCRIPTION: A JavaScript implementation of PlaywrightDevPage that provides methods for navigating and interacting with the playwright.dev page. It defines locators for important page elements and exports the class for use in tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass PlaywrightDevPage {\n  /**\n   * @param {import('playwright').Page} page\n   */\n  constructor(page) {\n    this.page = page;\n    this.getStartedLink = page.locator('a', { hasText: 'Get started' });\n    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });\n    this.pomLink = page.locator('li', {\n      hasText: 'Playwright Test',\n    }).locator('a', {\n      hasText: 'Page Object Model',\n    });\n    this.tocList = page.locator('article div.markdown ul > li > a');\n  }\n  async getStarted() {\n    await this.getStartedLink.first().click();\n    await expect(this.gettingStartedHeader).toBeVisible();\n  }\n\n  async pageObjectModel() {\n    await this.getStarted();\n    await this.pomLink.click();\n  }\n}\nmodule.exports = { PlaywrightDevPage };\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchPage in Java\nDESCRIPTION: Java implementation of a SearchPage class that wraps a Playwright Page object. It provides methods for navigating to a search engine and performing searches, demonstrating page object model pattern in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage models;\n\nimport com.microsoft.playwright;\n\npublic class SearchPage {\n  private final Page page;\n  private final Locator searchTermInput;\n\n  public SearchPage(Page page) {\n    this.page = page;\n    this.searchTermInput = page.locator(\"[aria-label='Enter your search term']\");\n  }\n\n  public void navigate() {\n    page.navigate(\"https://bing.com\");\n  }\n\n  public void search(String text) {\n    searchTermInput.fill(text);\n    searchTermInput.press(\"Enter\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Signed-in State with Playwright - C#\nDESCRIPTION: This snippet demonstrates the process of storing and retrieving authentication states in C# with Playwright. The storage state is saved in a file and used to initialize new browser contexts, allowing tests to reuse logged-in sessions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Save storage state into the file.\n// Tests are executed in <TestProject>\\bin\\Debug\\netX.0\\ therefore relative path is used to reference playwright/.auth created in project root\nawait context.StorageStateAsync(new()\n{\n    Path = \"../../../playwright/.auth/state.json\"\n});\n\n// Create a new context with the saved storage state.\nvar context = await browser.NewContextAsync(new()\n{\n    StorageStatePath = \"../../../playwright/.auth/state.json\"\n});\n\n```\n\n----------------------------------------\n\nTITLE: Preparing Server State with Playwright API and UI Checks in Python\nDESCRIPTION: This test function demonstrates hybrid API and UI automation using Playwright in Python. It programmatically creates issues via API, then uses browser automation to verify the latest created issue appears first in the web UI, checking via a Locator and assertion. Dependencies: Playwright sync API, expect assertions, necessary fixtures and environment variables.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_last_created_issue_should_be_first_in_the_list(api_request_context: APIRequestContext, page: Page) -> None:\\n    def create_issue(title: str) -> None:\\n        data = {\\n            \\\"title\\\": title,\\n            \\\"body\\\": \\\"Feature description\\\",\\n        }\\n        new_issue = api_request_context.post(\\n            f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\", data=data\\n        )\\n        assert new_issue.ok\\n    create_issue(\\\"[Feature] request 1\\\")\\n    create_issue(\\\"[Feature] request 2\\\")\\n    page.goto(f\\\"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues\\\")\\n    first_issue = page.locator(\\\"a[data-hovercard-type='issue']\\\").first\\n    expect(first_issue).to_have_text(\\\"[Feature] request 2\\\")\\n\n```\n\n----------------------------------------\n\nTITLE: Validating UI Created Issue via API in JavaScript\nDESCRIPTION: This snippet shows how to create an issue using the Playwright UI and then validate its creation via an API call. Ensures synchronization between UI actions and backend state. Requires Playwright and GitHub access tokens.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n});\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be on the server', async ({ page }) => {\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  await page.getByText('New Issue').click();\n  await page.getByRole('textbox', { name: 'Title' }).fill('Bug report 1');\n  await page.getByRole('textbox', { name: 'Comment body' }).fill('Bug description');\n  await page.getByText('Submit new issue').click();\n  const issueId = new URL(page.url()).pathname.split('/').pop();\n\n  const newIssue = await apiContext.get(\n      `https://api.github.com/repos/${USER}/${REPO}/issues/${issueId}`\n  );\n  expect(newIssue.ok()).toBeTruthy();\n  expect(newIssue.json()).toEqual(expect.objectContaining({\n    title: 'Bug report 1'\n  }));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Emulation in Playwright Test (JavaScript)\nDESCRIPTION: This snippet shows how to configure Playwright Test projects to emulate specific devices using the `devices` object. It demonstrates setting up projects for 'Desktop Chrome' and 'iPhone 13' by spreading the device properties into the `use` configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test'; // import devices\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n      },\n    },\n    {\n      name: 'Mobile Safari',\n      use: {\n        ...devices['iPhone 13'],\n      },\n    },\n  ],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Status Text with Playwright\nCSharp\nDESCRIPTION: This C# code snippet demonstrates a method-laden approach using Playwright to test if an HTML element's status text becomes 'Submitted' after interacting with a button. It uses MSTest with Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTests : PageTest\n{\n    [TestMethod]\n    public async Task StatusBecomesSubmitted()\n    {\n        await Page.GetByRole(AriaRole.Button, new() { Name = \"Submit\" }).ClickAsync();\n        await Expect(Page.Locator(\".status\")).ToHaveTextAsync(\"Submitted\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Status Text with Playwright\nPython Sync\nDESCRIPTION: This snippet illustrates a synchronous Playwright test in Python to check that a status element contains the text 'Submitted' after clicking a button. It uses the playwright.sync_api package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_2\n\nLANGUAGE: python sync\nCODE:\n```\nfrom playwright.sync_api import Page, expect\n\ndef test_status_becomes_submitted(page: Page) -> None:\n    # ..\n    page.locator(\"#submit-button\").click()\n    expect(page.locator(\".status\")).to_have_text(\"Submitted\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Locator Results Using Playwright C#\nDESCRIPTION: Demonstrates how to asynchronously access and click all elements with the 'listitem' role in C# using Playwright. You must have the C# Playwright library and a properly instantiated `page`. This uses an async enumerable and awaits each click.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var li in await page.GetByRole(\"listitem\").AllAsync())\n  await li.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Test Setup with Playwright\nDESCRIPTION: This code snippet illustrates how to set up a component test for a Svelte app using Playwright Test. It demonstrates mounting the App component and checking its content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-svelte';\nimport App from './App.svelte';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(App);\n  await expect(component).toContainText('Learn Svelte');\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Playwright Tests with Custom Setup in JavaScript\nDESCRIPTION: JavaScript example showing how to use Playwright codegen with a custom setup including request routing. The script launches Chrome in headed mode, configures the browser context with routing, and then pauses execution to allow manual recording.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chromium } = require('@playwright/test');\n\n(async () => {\n  // Make sure to run headed.\n  const browser = await chromium.launch({ headless: false });\n\n  // Setup context however you like.\n  const context = await browser.newContext({ /* pass any options */ });\n  await context.route('**/*', route => route.continue());\n\n  // Pause the page, and start recording manually.\n  const page = await context.newPage();\n  await page.pause();\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Polling Intervals with expect.poll\nDESCRIPTION: Shows how to specify custom intervals between polling attempts, allowing for more controlled polling strategies when waiting for conditions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}, {\n  // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe\n  // ... Defaults to [100, 250, 500, 1000].\n  intervals: [1_000, 2_000, 10_000],\n  timeout: 60_000\n}).toBe(200);\n```\n\n----------------------------------------\n\nTITLE: Mocking API Endpoints in Java\nDESCRIPTION: Demonstrates intercepting and mocking API endpoints by handling network requests in Java. The code fulfills a request with a custom status code and body data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"**/api/fetch_data\", route -> route.fulfill(new Route.FulfillOptions()\n  .setStatus(200)\n  .setBody(testData)));\npage.navigate(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Querying All Inner Texts with Playwright C#\nDESCRIPTION: Illustrates retrieving all innerText values from 'link' role nodes in C# using Playwright. The result is a collection of string values per matched node.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar texts = await page.GetByRole(AriaRole.Link).AllInnerTextsAsync();\n```\n\n----------------------------------------\n\nTITLE: Locating Elements Inside Frames with Playwright Python (Async)\nDESCRIPTION: This async Python snippet utilizes Playwright's frame_locator and get_by_label APIs to find and interact with an element within a frame. It awaits both the locator and fill operation, making it suitable for asynchronous contexts. Dependencies include Playwright Python (async flavor), with '.frame-class' as the frame selector and 'User Name' as the label.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_2\n\nLANGUAGE: python async\nCODE:\n```\n# Locate element inside frame\nusername = await page.frame_locator('.frame-class').get_by_label('User Name')\nawait username.fill('John')\n```\n\n----------------------------------------\n\nTITLE: Using to_be_ok assertion with Python Async\nDESCRIPTION: Usage example of the to_be_ok method which ensures the response status code is within 200-299 range in Python async API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import expect\n\n# ...\nawait expect(response).to_be_ok()\n```\n\n----------------------------------------\n\nTITLE: Handling New Pages in Playwright\nDESCRIPTION: Examples of handling new pages opened by actions like clicking links with target=\"_blank\", using waitForEvent and event listeners to capture and interact with new pages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Start waiting for new page before clicking. Note no await.\nconst pagePromise = context.waitForEvent('page');\nawait page.getByText('open new tab').click();\nconst newPage = await pagePromise;\n// Interact with the new page normally.\nawait newPage.getByRole('button').click();\nconsole.log(await newPage.title());\n```\n\nLANGUAGE: java\nCODE:\n```\n// Get page after a specific action (e.g. clicking a link)\nPage newPage = context.waitForPage(() -> {\n  page.getByText(\"open new tab\").click(); // Opens a new tab\n});\n// Interact with the new page normally\nnewPage.getByRole(AriaRole.BUTTON).click();\nSystem.out.println(newPage.title());\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get page after a specific action (async) (e.g. clicking a link)\nasync with context.expect_page() as new_page_info:\n    await page.get_by_text(\"open new tab\").click() # Opens a new tab\nnew_page = await new_page_info.value\n\n# Interact with the new page normally\nawait new_page.get_by_role(\"button\").click()\nprint(await new_page.title())\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get page after a specific action (sync) (e.g. clicking a link)\nwith context.expect_page() as new_page_info:\n    page.get_by_text(\"open new tab\").click() # Opens a new tab\nnew_page = new_page_info.value\n\n# Interact with the new page normally\nnew_page.get_by_role(\"button\").click()\nprint(new_page.title())\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Get page after a specific action (e.g. clicking a link)\nvar newPage = await context.RunAndWaitForPageAsync(async () =>\n{\n    await page.GetByText(\"open new tab\").ClickAsync();\n});\n// Interact with the new page normally\nawait newPage.GetByRole(AriaRole.Button).ClickAsync();\nConsole.WriteLine(await newPage.TitleAsync());\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript in Python (Sync)\nDESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright Python sync API. This allows testing how web applications behave in environments without JavaScript support.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_78\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context(\n  java_script_enabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Asserting Viewport Intersection in Playwright\nDESCRIPTION: Examples of using toBeInViewport assertion to verify if an element intersects with the viewport using intersection observer API. Includes ratio parameter for controlling intersection threshold.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByRole('button');\n// Make sure at least some part of element intersects viewport.\nawait expect(locator).toBeInViewport();\n// Make sure element is fully outside of viewport.\nawait expect(locator).not.toBeInViewport();\n// Make sure that at least half of the element intersects viewport.\nawait expect(locator).toBeInViewport({ ratio: 0.5 });\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.getByRole(AriaRole.BUTTON);\n// Make sure at least some part of element intersects viewport.\nassertThat(locator).isInViewport();\n// Make sure element is fully outside of viewport.\nassertThat(locator).not().isInViewport();\n// Make sure that at least half of the element intersects viewport.\nassertThat(locator).isInViewport(new LocatorAssertions.IsInViewportOptions().setRatio(0.5));\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import expect\n\nlocator = page.get_by_role(\"button\")\n# Make sure at least some part of element intersects viewport.\nawait expect(locator).to_be_in_viewport()\n# Make sure element is fully outside of viewport.\nawait expect(locator).not_to_be_in_viewport()\n# Make sure that at least half of the element intersects viewport.\nawait expect(locator).to_be_in_viewport(ratio=0.5)\n```\n\n----------------------------------------\n\nTITLE: Checking Element State in Playwright\nDESCRIPTION: Demonstrates how to check if a checkbox element is checked using Playwright's isChecked method across different programming languages. This method returns a boolean indicating whether the element is checked.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nconst checked = await page.getByRole('checkbox').isChecked();\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean checked = page.getByRole(AriaRole.CHECKBOX).isChecked();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nchecked = await page.get_by_role(\"checkbox\").is_checked()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nchecked = page.get_by_role(\"checkbox\").is_checked()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar isChecked = await page.GetByRole(AriaRole.Checkbox).IsCheckedAsync();\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Test with Page Fixture\nDESCRIPTION: Demonstrates basic usage of built-in page fixture for browser automation testing. Shows how to navigate to a page and verify page title.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  await expect(page).toHaveTitle(/Playwright/);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Authenticated APIRequestContext for GitHub API using Playwright in C#\nDESCRIPTION: This snippet shows how to configure and initialize a Playwright APIRequestContext with authorization headers for GitHub REST API access. It includes environment variable retrieval for the API token and utilizes Playwright's MSTest integration. The code ensures all HTTP requests specify JSON accept headers and the appropriate personal access token. You must install Microsoft.Playwright and Microsoft.Playwright.MSTest and provide GITHUB_API_TOKEN as an environment variable. The initialized context is disposed during test cleanup to release resources.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string? API_TOKEN = Environment.GetEnvironmentVariable(\"GITHUB_API_TOKEN\");\n\n    private IAPIRequestContext Request = null!;\n\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n    }\n\n    private async Task CreateAPIRequestContext()\n    {\n        var headers = new Dictionary<string, string>();\n        // We set this header per GitHub guidelines.\n        headers.Add(\"Accept\", \"application/vnd.github.v3+json\");\n        // Add authorization token to all requests.\n        // Assuming personal access token available in the environment.\n        headers.Add(\"Authorization\", \"token \" + API_TOKEN);\n\n        Request = await this.Playwright.APIRequest.NewContextAsync(new() {\n            // All requests we send go to this API endpoint.\n            BaseURL = \"https://api.github.com\",\n            ExtraHTTPHeaders = headers,\n        });\n    }\n\n    [TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await Request.DisposeAsync();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Content of List Items in Playwright\nDESCRIPTION: Shows how to verify the text content of all items in a list. This example uses the toHaveText assertion to check that list items contain specific text values in the expected order.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page\n    .getByRole('listitem'))\n    .toHaveText(['apple', 'banana', 'orange']);\n```\n\nLANGUAGE: python-async\nCODE:\n```\nawait expect(page.get_by_role(\"listitem\")).to_have_text([\"apple\", \"banana\", \"orange\"])\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nexpect(page.get_by_role(\"listitem\")).to_have_text([\"apple\", \"banana\", \"orange\"])\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page\n    .getByRole(AriaRole.LISTITEM))\n    .hasText(new String[] { \"apple\", \"banana\", \"orange\" });\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page\n    .GetByRole(AriaRole.Listitem))\n    .ToHaveTextAsync(new string[] {\"apple\", \"banana\", \"orange\"});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Interacting with Frame Objects in Playwright JavaScript\nDESCRIPTION: This JavaScript snippet provides examples of obtaining frame objects by name or matching the frame's URL, then interacting with elements inside them using Playwright. It demonstrates use of page.frame() and page.frame({ url: ... }) patterns, followed by a fill action. Requires Playwright JS and an initialized 'page' object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Get frame using the frame's name attribute\nconst frame = page.frame('frame-login');\n\n// Get frame using frame's URL\nconst frame = page.frame({ url: /.*domain.*/ });\n\n// Interact with the frame\nawait frame.fill('#username-input', 'John');\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript in Playwright Test\nDESCRIPTION: Configures a specific test to run with JavaScript disabled using Playwright Test. This allows testing how web applications behave in environments without JavaScript support.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.use({ javaScriptEnabled: false });\n\ntest('test with no JavaScript', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Wrapper for Complex Components\nDESCRIPTION: This example shows how to create a test wrapper for a component that uses complex objects. It demonstrates converting complex props into simple ones that can be easily tested.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport InputMedia from './import-media';\n\ntype InputMediaForTestProps = {\n  onMediaChange(mediaName: string): void;\n};\n\nexport function InputMediaForTest(props: InputMediaForTestProps) {\n  // Instead of sending a complex `media` object to the test, send the media name.\n  return <InputMedia onChange={media => props.onMediaChange(media.name)} />;\n}\n// Export more stories here.\n```\n\n----------------------------------------\n\nTITLE: Clicking Custom Element with Shadow DOM using Playwright\nDESCRIPTION: This code shows how to click the custom 'x-details' element containing Shadow DOM using Playwright in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('x-details', { hasText: 'Details' }).click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"x-details\", new Page.LocatorOptions().setHasText(\"Details\"))\n    .click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"x-details\", has_text=\"Details\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page\n    .Locator(\"x-details\", new() { HasText = \"Details\" })\n    .ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Chaining Route Handlers with Route.abort and Route.fallback - Python (Sync)\nDESCRIPTION: Synchronous handler order chaining in Playwright Python, illustrating sequential registration and fallback/abort control for advanced request handling pipelines.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npage.route(\"**/*\", lambda route: route.abort())  # Runs last.\npage.route(\"**/*\", lambda route: route.fallback())  # Runs second.\npage.route(\"**/*\", lambda route: route.fallback())  # Runs first.\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in C#\nDESCRIPTION: Examples of selecting options in a <select> element using Page.SelectOptionAsync method in C#. It shows single and multiple selections using various selection criteria.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_105\n\nLANGUAGE: csharp\nCODE:\n```\n// Single selection matching the value or label\nawait page.SelectOptionAsync(\"select#colors\", new[] { \"blue\" });\n// single selection matching both the value and the label\nawait page.SelectOptionAsync(\"select#colors\", new[] { new SelectOptionValue() { Label = \"blue\" } });\n// multiple\nawait page.SelectOptionAsync(\"select#colors\", new[] { \"red\", \"green\", \"blue\" });\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Expect Messages in Playwright Assertions\nDESCRIPTION: Shows how to provide a custom message as a second argument to the expect function, which enhances readability in test reports for both passing and failing assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.getByText('Name'), 'should be logged in').toBeVisible();\n```\n\n----------------------------------------\n\nTITLE: Handling Console Messages in Python (Sync)\nDESCRIPTION: Shows synchronous Python code for console message handling, including event listeners, error filtering, and argument extraction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Listen for all console logs\npage.on(\"console\", lambda msg: print(msg.text))\n\n# Listen for all console events and handle errors\npage.on(\"console\", lambda msg: print(f\"error: {msg.text}\") if msg.type == \"error\" else None)\n\n# Get the next console log\nwith page.expect_console_message() as msg_info:\n    # Issue console.log inside the page\n    page.evaluate(\"console.log('hello', 42, { foo: 'bar' })\")\nmsg = msg_info.value\n\n# Deconstruct print arguments\nmsg.args[0].json_value() # hello\nmsg.args[1].json_value() # 42\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for Playwright Tests (Multiple Languages)\nDESCRIPTION: These YAML configurations set up GitLab CI to run Playwright tests using Docker images for JavaScript, Python, Java, and C# projects. Each configuration specifies the appropriate Playwright Docker image for the test stage.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_36\n\nLANGUAGE: yml\nCODE:\n```\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n  script:\n  ...\n```\n\nLANGUAGE: yml\nCODE:\n```\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n  script:\n  ...\n```\n\nLANGUAGE: yml\nCODE:\n```\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n  script:\n  ...\n```\n\nLANGUAGE: yml\nCODE:\n```\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n  script:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout in Playwright Config (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set a global test timeout in the Playwright configuration file. It sets the timeout to 120,000 milliseconds (2 minutes) for all tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 120_000,\n});\n```\n\n----------------------------------------\n\nTITLE: Dumping Frame Tree using Playwright in Java\nDESCRIPTION: This Java example shows how to initialize Playwright, launch a Firefox browser instance, navigate to a URL, and recursively print the frame tree. It uses `page.mainFrame()` to get the main frame and `frame.childFrames()` to iterate through child frames, outputting each frame's URL along with indentation to the standard output.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType firefox = playwright.firefox();\n      Browser browser = firefox.launch();\n      Page page = browser.newPage();\n      page.navigate(\"https://www.google.com/chrome/browser/canary.html\");\n      dumpFrameTree(page.mainFrame(), \"\");\n      browser.close();\n    }\n  }\n  static void dumpFrameTree(Frame frame, String indent) {\n    System.out.println(indent + frame.url());\n    for (Frame child : frame.childFrames()) {\n      dumpFrameTree(child, indent + \"  \");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing API Tests for GitHub Issue Creation using Playwright and Pytest in Python\nDESCRIPTION: This snippet implements pytest test functions that use Playwright\\'s APIRequestContext to create and verify issues in a GitHub repository via REST API. It includes two tests: one for submitting a bug report and another for a feature request, both asserting server-side creation and correctness of issue data. Dependencies: pytest, Playwright sync API, configured api_request_context fixture, required GitHub credentials in environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nfrom typing import Generator\\n\\nimport pytest\\nfrom playwright.sync_api import Playwright, APIRequestContext\\n\\nGITHUB_API_TOKEN = os.getenv(\\\"GITHUB_API_TOKEN\\\")\\nassert GITHUB_API_TOKEN, \\\"GITHUB_API_TOKEN is not set\\\"\\n\\nGITHUB_USER = os.getenv(\\\"GITHUB_USER\\\")\\nassert GITHUB_USER, \\\"GITHUB_USER is not set\\\"\\n\\nGITHUB_REPO = \\\"test\\\"\\n\\n# ...\\n\\ndef test_should_create_bug_report(api_request_context: APIRequestContext) -> None:\\n    data = {\\n        \\\"title\\\": \\\"[Bug] report 1\\\",\\n        \\\"body\\\": \\\"Bug description\\\",\\n    }\\n    new_issue = api_request_context.post(f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\", data=data)\\n    assert new_issue.ok\\n\\n    issues = api_request_context.get(f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\")\\n    assert issues.ok\\n    issues_response = issues.json()\\n    issue = list(filter(lambda issue: issue[\\\"title\\\"] == \\\"[Bug] report 1\\\", issues_response))[0]\\n    assert issue\\n    assert issue[\\\"body\\\"] == \\\"Bug description\\\"\\n\\ndef test_should_create_feature_request(api_request_context: APIRequestContext) -> None:\\n    data = {\\n        \\\"title\\\": \\\"[Feature] request 1\\\",\\n        \\\"body\\\": \\\"Feature description\\\",\\n    }\\n    new_issue = api_request_context.post(f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\", data=data)\\n    assert new_issue.ok\\n\\n    issues = api_request_context.get(f\\\"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues\\\")\\n    assert issues.ok\\n    issues_response = issues.json()\\n    issue = list(filter(lambda issue: issue[\\\"title\\\"] == \\\"[Feature] request 1\\\", issues_response))[0]\\n    assert issue\\n    assert issue[\\\"body\\\"] == \\\"Feature description\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Network Request in Playwright (Sync Python)\nDESCRIPTION: Illustrates waiting for a specific network request using the `page.expect_request` synchronous context manager in Playwright for Python. The code within the `with` block (`page.goto`) is executed, and the context manager waits for a request matching the pattern ('**/*logo*.png'). The value of the context manager (`first.value`) is the `Request` object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nwith page.expect_request(\"**/*logo*.png\") as first:\n  page.goto(\"https://wikipedia.org\")\nprint(first.value.url)\n```\n```\n\n----------------------------------------\n\nTITLE: Handling JSON WebSocket Messages with Playwright in Python (Asynchronous)\nDESCRIPTION: Asynchronously handles JSON messages using Playwright's async API in Python. Requires json module for parsing and Playwright setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  json_message = json.loads(message)\n  if json_message[\"request\"] == \"question\":\n    ws.send(json.dumps({ \"response\": \"answer\" }))\n\nawait page.route_web_socket(\"wss://example.com/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n----------------------------------------\n\nTITLE: Creating a Test List File to Control Test Execution Order in Playwright\nDESCRIPTION: This TypeScript file serves as a test list that controls the execution order of tests. It imports test modules and uses test.describe() to wrap each imported function, ensuring that test.use() calls are properly scoped.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\nimport featureBTests from './feature-b.spec.ts';\nimport featureATests from './feature-a.spec.ts';\n\ntest.describe(featureBTests);\ntest.describe(featureATests);\n```\n\n----------------------------------------\n\nTITLE: Reusing Signed-in State with Playwright - Java\nDESCRIPTION: This Java snippet shows how to save and reuse the authenticated state in Playwright tests. The code saves the state into a JSON file and uses it to create new browser contexts with prepopulated states, optimizing test setup time by avoiding repeated logins.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Save storage state into the file.\ncontext.storageState(new BrowserContext.StorageStateOptions().setPath(Paths.get(\"state.json\")));\n\n// Create a new context with the saved storage state.\nBrowserContext context = browser.newContext(\n  new Browser.NewContextOptions().setStorageStatePath(Paths.get(\"state.json\")));\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Recording in Playwright Config (JavaScript)\nDESCRIPTION: This snippet shows how to configure trace recording in the Playwright config file. It sets up tracing to run on the first retry of a failed test, with different retry settings for CI and local environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  retries: process.env.CI ? 2 : 0, // set to 2 when running on CI\n  // ...\n  use: {\n    trace: 'on-first-retry', // record traces on first retry of each test\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying API Responses in Python (Sync)\nDESCRIPTION: This Python synchronous example demonstrates fetching an API response, adding a new fruit to the JSON data, and fulfilling the route with the modified response. It uses synchronous methods to intercept the API call, transform the data, and then verify the modified content appears on the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_gets_the_json_from_api_and_adds_a_new_fruit(page: Page):\n    def handle(route: Route):\n        response = route.fetch()\n        json = response.json()\n        json.append({ \"name\": \"Loquat\", \"id\": 100})\n        # Fulfill using the original response, while patching the response body\n        # with the given JSON object.\n        route.fulfill(response=response, json=json)\n\n    page.route(\"https://demo.playwright.dev/api-mocking/api/v1/fruits\", handle)\n\n    # Go to the page\n    page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the new fruit is visible\n    expect(page.get_by_text(\"Loquat\", exact=True)).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Setup with Tracing in Playwright Tests (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to implement a global setup function for Playwright tests with tracing enabled. It launches a browser, creates a new context and page, performs login actions, and captures traces for both successful and failed setups. The function uses a try-catch block to ensure tracing is stopped and a trace is saved even if an error occurs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { chromium, type FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL, storageState } = config.projects[0].use;\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  try {\n    await context.tracing.start({ screenshots: true, snapshots: true });\n    await page.goto(baseURL!);\n    await page.getByLabel('User Name').fill('user');\n    await page.getByLabel('Password').fill('password');\n    await page.getByText('Sign in').click();\n    await context.storageState({ path: storageState as string });\n    await context.tracing.stop({\n      path: './test-results/setup-trace.zip',\n    });\n    await browser.close();\n  } catch (error) {\n    await context.tracing.stop({\n      path: './test-results/failed-setup-trace.zip',\n    });\n    await browser.close();\n    throw error;\n  }\n}\n\nexport default globalSetup;\n```\n\n----------------------------------------\n\nTITLE: Combining browser and system dependencies installation\nDESCRIPTION: This snippet demonstrates how to combine installation of both browsers and their system dependencies with one command. This is an efficient way to set up the testing environment, particularly when dealing with fresh CI server setups.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnpx playwright install --with-deps chromium\n```\n\nLANGUAGE: java\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"install --with-deps chromium\\\"\n```\n\nLANGUAGE: python\nCODE:\n```\nplaywright install --with-deps chromium\n```\n\nLANGUAGE: csharp\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 install --with-deps chromium\n```\n\n----------------------------------------\n\nTITLE: Extending Playwright Assertions with Custom Matchers\nDESCRIPTION: Demonstrates how to add custom assertion matchers to Playwright's expect object, enabling more specific assertions tailored to application needs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect as baseExpect } from '@playwright/test';\nimport type { Locator } from '@playwright/test';\n\nexport { test } from '@playwright/test';\n\nexport const expect = baseExpect.extend({\n  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {\n    const assertionName = 'toHaveAmount';\n    let pass: boolean;\n    let matcherResult: any;\n    try {\n      const expectation = this.isNot ? baseExpect(locator).not : baseExpect(locator);\n      await expectation.toHaveAttribute('data-amount', String(expected), options);\n      pass = true;\n    } catch (e: any) {\n      matcherResult = e.matcherResult;\n      pass = false;\n    }\n\n    if (this.isNot) {\n      pass =!pass;\n    }\n\n    const message = pass\n      ? () => this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +\n          '\\n\\n' +\n          `Locator: ${locator}\\n` +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '')\n      : () =>  this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +\n          '\\n\\n' +\n          `Locator: ${locator}\\n` +\n          `Expected: ${this.utils.printExpected(expected)}\\n` +\n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '');\n\n    return {\n      message,\n      pass,\n      name: assertionName,\n      expected,\n      actual: matcherResult?.actual,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using to_have_title Assertion in Python (Sync)\nDESCRIPTION: Example of using to_have_title assertion in synchronous Python to verify page title matches a pattern. This checks if the page title contains 'checkout' using a regular expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.sync_api import expect\n\n# ...\nexpect(page).to_have_title(re.compile(r\".*checkout\"))\n```\n\n----------------------------------------\n\nTITLE: Reusing Signed-in State with Playwright - Python Async\nDESCRIPTION: This Python (async) code snippet demonstrates how to save storage state into a file and create new contexts pre-loaded with the saved state using Playwright. It aims to improve efficiency by bypassing login processes in subsequent tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_12\n\nLANGUAGE: python async\nCODE:\n```\n# Save storage state into the file.\nstorage = await context.storage_state(path=\"state.json\")\n\n# Create a new context with the saved storage state.\ncontext = await browser.new_context(storage_state=\"state.json\")\n\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Data in Python\nDESCRIPTION: Example of sending a POST request with JSON data using Playwright's API request context in Python. The data dictionary is automatically serialized to JSON in the request body.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata = {\n    \"title\": \"Book Title\",\n    \"body\": \"John Doe\",\n}\napi_request_context.post(\"https://example.com/api/createBook\", data=data)\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Playwright (Python)\nDESCRIPTION: Shows how to navigate to a URL using Playwright in Python. Playwright automatically waits for the page to load before proceeding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npage.goto(\"https://playwright.dev/\")\n```\n\n----------------------------------------\n\nTITLE: Fetch Specific Header Value by Name\nDESCRIPTION: This async method, `Response.headerValue`, fetches the value of a specified header name, handling multiple values with appropriate delimiters. If the header is absent, it returns `null`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function headerValue(headerName) {\\n  const value = await response.headerValue(headerName);\\n  console.log(`${headerName}:`, value);\\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Elements within a Specific Context in Playwright\nDESCRIPTION: Demonstrates how to search for an element within another element's context. This example creates a save button locator and then finds it within a specific dialog, allowing for contextual element selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst saveButton = page.getByRole('button', { name: 'Save' });\n// ...\nconst dialog = page.getByTestId('settings-dialog');\nawait dialog.locator(saveButton).click();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nsave_button = page.get_by_role(\"button\", name=\"Save\")\n# ...\ndialog = page.get_by_test_id(\"settings-dialog\")\nawait dialog.locator(save_button).click()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nsave_button = page.get_by_role(\"button\", name=\"Save\")\n# ...\ndialog = page.get_by_test_id(\"settings-dialog\")\ndialog.locator(save_button).click()\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator saveButton = page.getByRole(AriaRole.BUTTON,\n                                    new Page.GetByRoleOptions().setName(\"Save\"));\n// ...\nLocator dialog = page.getByTestId(\"settings-dialog\");\ndialog.locator(saveButton).click();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar saveButton = page.GetByRole(AriaRole.Button, new() { Name = \"Save\" });\n// ...\nvar dialog = page.GetByTestId(\"settings-dialog\");\nawait dialog.Locator(saveButton).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Exposing Page URL Using JavaScript in Playwright\nDESCRIPTION: Example showing how to expose a page URL using a binding in JavaScript. Creates a browser context, exposes a pageURL function, and demonstrates its usage in page content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\n\n(async () => {\n  const browser = await webkit.launch({ headless: false });\n  const context = await browser.newContext();\n  await context.exposeBinding('pageURL', ({ page }) => page.url());\n  const page = await context.newPage();\n  await page.setContent(`\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.pageURL();\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n  `);\n  await page.getByRole('button').click();\n})();\n```\n\n----------------------------------------\n\nTITLE: Advanced Playwright Test Configuration Options\nDESCRIPTION: Demonstrates advanced configuration options including output directory for test artifacts, global setup and teardown hooks, and test timeout settings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-configuration-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Folder for test artifacts such as screenshots, videos, traces, etc.\n  outputDir: 'test-results',\n\n  // path to the global setup files.\n  globalSetup: require.resolve('./global-setup'),\n\n  // path to the global teardown files.\n  globalTeardown: require.resolve('./global-teardown'),\n\n  // Each test is given 30 seconds.\n  timeout: 30000,\n\n});\n```\n\n----------------------------------------\n\nTITLE: Running tests on different browsers using Playwright for C#\nDESCRIPTION: This C# snippet demonstrates how to run Playwright tests on specific browsers using the `dotnet test` command. The browser is specified using either the `BROWSER` environment variable or a `runsettings` file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -- Playwright.BrowserName=webkit\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --settings:chromium.runsettings\ndotnet test --settings:firefox.runsettings\ndotnet test --settings:webkit.runsettings\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n  <RunSettings>\n    <Playwright>\n      <BrowserName>chromium</BrowserName>\n    </Playwright>\n  </RunSettings>\n```\n\n----------------------------------------\n\nTITLE: Running tests on different browsers using Playwright for Python\nDESCRIPTION: This snippet demonstrates how to execute tests on specific or multiple browsers using pytest for Playwright in Python. The browser specification is provided via command line arguments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest test_login.py --browser webkit\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_login.py --browser webkit --browser firefox\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_login.py --device=\\\"iPhone 13\\\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_login.py --browser-channel msedge\n```\n\n----------------------------------------\n\nTITLE: Setting Input Files in Playwright with Python (sync)\nDESCRIPTION: Demonstrates various ways to upload files using set_input_files method in Python with synchronous syntax, including uploading a single file, multiple files, a directory, and removing selected files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_92\n\nLANGUAGE: python\nCODE:\n```\n# Select one file\npage.get_by_label(\"Upload file\").set_input_files('myfile.pdf')\n\n# Select multiple files\npage.get_by_label(\"Upload files\").set_input_files(['file1.txt', 'file2.txt'])\n\n# Select a directory\npage.get_by_label(\"Upload directory\").set_input_files('mydir')\n\n# Remove all the selected files\npage.get_by_label(\"Upload file\").set_input_files([])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Value in Playwright\nDESCRIPTION: Demonstrates how to retrieve the value of an input element using Playwright's inputValue method across different programming languages. This method returns the value for matching input, textarea, or select elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = await page.getByRole('textbox').inputValue();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nvalue = await page.get_by_role(\"textbox\").input_value()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nvalue = page.get_by_role(\"textbox\").input_value()\n```\n\nLANGUAGE: java\nCODE:\n```\nString value = page.getByRole(AriaRole.TEXTBOX).inputValue();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nString value = await page.GetByRole(AriaRole.Textbox).InputValueAsync();\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests via pnpm - Bash\nDESCRIPTION: Runs all Playwright end-to-end tests using pnpm, leveraging 'exec' to invoke the CLI. Requires Playwright dependencies installed in the project. Executes tests on browsers according to configuration and outputs results in the terminal.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright test\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Pages in Playwright\nDESCRIPTION: Examples of creating and managing multiple pages within a browser context, including creating multiple pages and accessing all pages in a context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create two pages\nconst pageOne = await context.newPage();\nconst pageTwo = await context.newPage();\n\n// Get pages of a browser context\nconst allPages = context.pages();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Create two pages\nPage pageOne = context.newPage();\nPage pageTwo = context.newPage();\n\n// Get pages of a browser context\nList<Page> allPages = context.pages();\n```\n\nLANGUAGE: python\nCODE:\n```\n# create two pages (async)\npage_one = await context.new_page()\npage_two = await context.new_page()\n\n# get pages of a browser context\nall_pages = context.pages\n```\n\nLANGUAGE: python\nCODE:\n```\n# create two pages (sync)\npage_one = context.new_page()\npage_two = context.new_page()\n\n# get pages of a browser context\nall_pages = context.pages\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Create two pages\nvar pageOne = await context.NewPageAsync();\nvar pageTwo = await context.NewPageAsync();\n\n// Get pages of a browser context\nvar allPages = context.Pages;\n```\n\n----------------------------------------\n\nTITLE: Correct Parameter Passing Between Environments\nDESCRIPTION: Shows the correct way to pass variables from test environment to browser context by explicitly passing them as arguments to the evaluate function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = 'some data';\n// Pass |data| as a parameter.\nconst result = await page.evaluate(data => {\n  window.myApp.use(data);\n}, data);\n```\n\nLANGUAGE: java\nCODE:\n```\nString data = \"some data\";\n// Pass |data| as a parameter.\nObject result = page.evaluate(\"data => {\\n\" +\n  \"  window.myApp.use(data);\\n\" +\n  \"}\", data);\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = \"some data\"\n# Pass |data| as a parameter.\nresult = await page.evaluate(\"\"\"data => {\n  window.myApp.use(data)\n}\"\"\", data)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar data = \"some data\";\n// Pass |data| as a parameter.\nvar result = await page.EvaluateAsync(\"data => { window.myApp.use(data); }\", data);\n```\n\n----------------------------------------\n\nTITLE: Writing and Validating Issue Creation API Tests with Playwright MSTest in C#\nDESCRIPTION: This snippet demonstrates creating and validating GitHub issues with the Playwright APIRequestContext in C#. It features test methods for submitting new issue data via POST requests and then fetching all issues to confirm via assertions that the submitted issues exist and have the correct body content. Usage requires prior initialization of the authorized Request context. The code leverages JSON parsing for server response validation and expects GITHUB_API_TOKEN and GITHUB_USER in the environment. The class is set up for the MSTest runner.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string REPO = \"test\";\n    static string USER = Environment.GetEnvironmentVariable(\"GITHUB_USER\");\n    static string? API_TOKEN = Environment.GetEnvironmentVariable(\"GITHUB_API_TOKEN\");\n\n    private IAPIRequestContext Request = null!;\n\n    [TestMethod]\n    public async Task ShouldCreateBugReport()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Bug] report 1\" },\n            { \"body\", \"Bug description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty(\"title\", out var title) == true)\n            {\n                if (title.GetString() == \"[Bug] report 1\")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual(\"Bug description\", issue?.GetProperty(\"body\").GetString());\n    }\n\n    [TestMethod]\n    public async Task ShouldCreateFeatureRequests()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Feature] request 1\" },\n            { \"body\", \"Feature description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty(\"title\", out var title) == true)\n            {\n                if (title.GetString() == \"[Feature] request 1\")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual(\"Feature description\", issue?.GetProperty(\"body\").GetString());\n    }\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration Setup\nDESCRIPTION: Configuration for authentication including global setup, base URL, and storage state settings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  globalSetup: require.resolve('./global-setup'),\n  use: {\n    baseURL: 'http://localhost:3000/',\n    storageState: 'state.json',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators by Child Element using Playwright\nDESCRIPTION: This code shows how to filter locators based on the presence of a child element and click a specific button using Playwright in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nawait page\n    .getByRole('listitem')\n    .filter({ has: page.getByRole('heading', { name: 'Product 2' }) })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions()\n        .setHas(page.GetByRole(AriaRole.HEADING, new Page.GetByRoleOptions()\n        .setName(\"Product 2\"))))\n    .getByRole(AriaRole.BUTTON,\n               new Page.GetByRoleOptions().setName(\"Add to cart\"))\n    .click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"listitem\").filter(\n    has=page.get_by_role(\"heading\", name=\"Product 2\")\n).get_by_role(\"button\", name=\"Add to cart\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() {\n        Has = page.GetByRole(AriaRole.Heading, new() {\n            Name = \"Product 2\"\n        })\n    })\n    .GetByRole(AriaRole.Button, new() { Name = \"Add to cart\" })\n    .ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Example Test Implementation in C#\nDESCRIPTION: Sample end-to-end tests using Playwright with different test frameworks, demonstrating page navigation and assertions\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial Mode for Dependent Tests in Playwright\nDESCRIPTION: This JavaScript snippet shows how to use test.describe.configure to set up serial mode for a group of dependent tests in Playwright. This ensures tests run in order and are retried together if any test fails.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'serial' });\n\ntest.beforeAll(async () => { /* ... */ });\ntest('first good', async ({ page }) => { /* ... */ });\ntest('second flaky', async ({ page }) => { /* ... */ });\ntest('third good', async ({ page }) => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Using Locators API in Python\nDESCRIPTION: Shows how to use the new Locators API which represents a view to elements on the page and is strict by default.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\"button\")\nlocator.click()\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using Locator (Recommended) in Java\nDESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.getByText`) in Java to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n```java\nLocator locator = page.getByText(\"Submit\");\nlocator.hover();\nlocator.click();\n```\n```\n\n----------------------------------------\n\nTITLE: Using Frame Locator in Playwright\nDESCRIPTION: Demonstrates how to locate and interact with elements inside an iframe using frameLocator method across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.frameLocator('#my-iframe').getByText('Submit');\nawait locator.click();\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.frameLocator(\"#my-iframe\").getByText(\"Submit\");\nlocator.click();\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.frame_locator(\"#my-iframe\").get_by_text(\"Submit\")\nawait locator.click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = page.FrameLocator(\"#my-iframe\").GetByText(\"Submit\");\nawait locator.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Selecting Options from Dropdown using Frame.SelectOptionAsync in C#\nDESCRIPTION: Examples of how to select options from a dropdown element using the Frame.SelectOptionAsync method in C#. Shows single selection by value/label or multiple selections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n// Single selection matching the value or label\nawait frame.SelectOptionAsync(\"select#colors\", new[] { \"blue\" });\n// single selection matching both the value and the label\nawait frame.SelectOptionAsync(\"select#colors\", new[] { new SelectOptionValue() { Label = \"blue\" } });\n// multiple selection\nawait frame.SelectOptionAsync(\"select#colors\", new[] { \"red\", \"green\", \"blue\" });\n```\n\n----------------------------------------\n\nTITLE: Testing Status Text with Playwright\nPython Async\nDESCRIPTION: This Python snippet demonstrates an asynchronous test using the Playwright library to assert that a status element has the text 'Submitted' after a button click. It requires the playwright.async_api module.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_1\n\nLANGUAGE: python async\nCODE:\n```\nfrom playwright.async_api import Page, expect\n\nasync def test_status_becomes_submitted(page: Page) -> None:\n    # ..\n    await page.locator(\"#submit-button\").click()\n    await expect(page.locator(\".status\")).to_have_text(\"Submitted\")\n```\n\n----------------------------------------\n\nTITLE: Reusing Authentication State Across API and Browser Contexts with Playwright in Java\nDESCRIPTION: This code snippet shows how to retrieve authentication (storage) state from an authenticated Playwright APIRequestContext and reuse it in a new browser context, enabling seamless cross-context authentication. It requires Playwright for Java and a browser instance. Parameters include credentials for HTTP authentication, and the storage state string is transferred between API and browser. This approach facilitates tests that require a pre-authenticated state across both API and UI automation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nAPIRequestContext requestContext = playwright.request().newContext(\n  new APIRequest.NewContextOptions().setHttpCredentials(\"user\", \"passwd\"));\nrequestContext.get(\"https://api.example.com/login\");\n// Save storage state into a variable.\nString state = requestContext.storageState();\n\n// Create a new context with the saved storage state.\nBrowserContext context = browser.newContext(new Browser.NewContextOptions().setStorageState(state));\n\n```\n\n----------------------------------------\n\nTITLE: Recording Traces with Playwright in Python\nDESCRIPTION: Demonstrates how to record and export Playwright traces for debugging and analysis using the new tracing API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nbrowser = chromium.launch()\ncontext = browser.new_context()\n\n# Start tracing before creating / navigating a page.\ncontext.tracing.start(screenshots=True, snapshots=True)\n\npage.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\ncontext.tracing.stop(path = \"trace.zip\")\n```\n\n----------------------------------------\n\nTITLE: Testing Across All Browsers by Configuring Playwright Projects (JavaScript)\nDESCRIPTION: Provides a sample Playwright configuration file (playwright.config.ts) to enable running test projects across Chromium, Firefox, and WebKit using device emulation. Uses the defineConfig and devices utilities from the Playwright test module. Input: none (config file structure). Output: configuration object specifying browser projects. Requires dependencies: '@playwright/test' and device descriptors.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\\n\\nexport default defineConfig({\\n  projects: [\\n    {\\n      name: 'chromium',\\n      use: { ...devices['Desktop Chrome'] },\\n    },\\n    {\\n      name: 'firefox',\\n      use: { ...devices['Desktop Firefox'] },\\n    },\\n    {\\n      name: 'webkit',\\n      use: { ...devices['Desktop Safari'] },\\n    },\\n  ],\\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Element Editability in Playwright\nDESCRIPTION: Demonstrates how to verify if an element is editable using Playwright's isEditable method across different programming languages. Returns a boolean indicating whether the element can be edited.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nconst editable = await page.getByRole('textbox').isEditable();\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean editable = page.getByRole(AriaRole.TEXTBOX).isEditable();\n```\n\nLANGUAGE: python-async\nCODE:\n```\neditable = await page.get_by_role(\"textbox\").is_editable()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\neditable = page.get_by_role(\"textbox\").is_editable()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nBoolean editable = await page.GetByRole(AriaRole.Textbox).IsEditableAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Options in Playwright Configuration File\nDESCRIPTION: Example showing how to configure test options like headless mode, viewport size, HTTPS error handling, and video recording in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    headless: false,\n    viewport: { width: 1280, height: 720 },\n    ignoreHTTPSErrors: true,\n    video: 'on-first-retry',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Enabled State in Playwright\nDESCRIPTION: Shows how to check if an element is enabled using Playwright's isEnabled method across different programming languages. Returns a boolean indicating whether the element is enabled.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nconst enabled = await page.getByRole('button').isEnabled();\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean enabled = page.getByRole(AriaRole.BUTTON).isEnabled();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nenabled = await page.get_by_role(\"button\").is_enabled()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nenabled = page.get_by_role(\"button\").is_enabled()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nBoolean enabled = await page.GetByRole(AriaRole.Button).IsEnabledAsync();\n```\n\n----------------------------------------\n\nTITLE: Dragging UI Elements on AndroidDevice with Playwright JS\nDESCRIPTION: The AndroidDevice.drag async method performs a drag gesture from a selected widget to a destination point. Requires selector (AndroidSelector) and dest ({x, y}). Optional speed (pixels/sec) and timeout are supported. Useful for simulating user drags in UI automation. Inputs: UI selector and destination. Outputs: None, but UI effect is observable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Drags a widget towards a point.\nawait androidDevice.drag({\n  selector: mySelector,\n  dest: { x: 100, y: 200 },\n  speed: 400,    // Optional\n  timeout: 5000  // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Viewport in Device Emulation Config (JavaScript)\nDESCRIPTION: This snippet demonstrates overriding the default viewport size provided by a device preset in the Playwright Test configuration (`playwright.config.ts`). It spreads the 'Desktop Chrome' device settings and then explicitly sets a custom `viewport` property.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-test title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // It is important to define the `viewport` property after destructuring `devices`,\n        // since devices also define the `viewport` for that device.\n        viewport: { width: 1280, height: 720 },\n      },\n    },\n  ]\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Waiting for download events with JavaScript\nDESCRIPTION: Demonstrates how to wait for a download event before clicking a download button using Playwright's waitForEvent method. This pattern allows you to set up event listeners before triggering actions that will emit those events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n// Start waiting for download before clicking. Note no await.\nconst downloadPromise = page.waitForEvent('download');\nawait page.getByText('Download file').click();\nconst download = await downloadPromise;\n```\n\n----------------------------------------\n\nTITLE: Extract Comprehensive HTTP Headers as Array\nDESCRIPTION: The `Response.headersArray` method returns headers in an array structure, allowing inspection of individual entries, even with duplicates like `Set-Cookie`. Requires async context to execute.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function headersArray() {\\n  const headers = await response.headersArray();\\n  console.log(headers);\\n}\n```\n\n----------------------------------------\n\nTITLE: Frame.WaitForFunctionAsync Example in C#\nDESCRIPTION: This C# snippet demonstrates the use of Frame.WaitForFunctionAsync to wait for a specific condition related to the viewport size. It launches a Firefox browser, creates a new page, sets the viewport size, and waits for the inner width to become less than 100 pixels.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass FrameExamples\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        await using var browser = await playwright.Firefox.LaunchAsync();\n        var page = await browser.NewPageAsync();\n        await page.SetViewportSizeAsync(50, 50);\n        await page.MainFrame.WaitForFunctionAsync(\"window.innerWidth < 100\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PageAssertions to Verify URL Pattern in JavaScript\nDESCRIPTION: Example of using the expect assertion to verify a page URL pattern after clicking a sign-in button. This demonstrates basic page navigation testing in Playwright Test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('navigates to login', async ({ page }) => {\n  // ...\n  await page.getByText('Sign in').click();\n  await expect(page).toHaveURL(/.*\\/login/);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies in Playwright\nDESCRIPTION: Configuration that sets up a dependency structure where browser-specific projects depend on a common setup project. This ensures setup tasks run before the actual tests across different browsers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: '**/*.setup.ts',\n    },\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Events in Playwright using Python\nDESCRIPTION: This Python snippet demonstrates handling Playwright worker events. It defines a handler function `handle_worker` which is registered with the page's 'worker' event. Inside the handler, it prints the worker's URL upon creation and registers another listener (using a lambda) for the worker's 'close' event to print upon destruction. Finally, it iterates through the `page.workers` list to display the URLs of existing workers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-worker.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef handle_worker(worker):\n    print(\"worker created: \" + worker.url)\n    worker.on(\"close\", lambda: print(\"worker destroyed: \" + worker.url))\n\npage.on('worker', handle_worker)\n\nprint(\"current workers:\")\nfor worker in page.workers:\n    print(\"    \" + worker.url)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Response in Java\nDESCRIPTION: Shows how to wait for HTTP responses in Java using both URL matching and predicate-based conditions. Includes examples of response handling with callbacks.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_141\n\nLANGUAGE: java\nCODE:\n```\n// Waits for the next response with the specified url\nResponse response = page.waitForResponse(\"https://example.com/resource\", () -> {\n  // Triggers the response\n  page.getByText(\"trigger response\").click();\n});\n\n// Waits for the next response matching some conditions\nResponse response = page.waitForResponse(response -> \"https://example.com\".equals(response.url()) && response.status() == 200 && \"GET\".equals(response.request().method()), () -> {\n  // Triggers the response\n  page.getByText(\"trigger response\").click();\n});\n```\n\n----------------------------------------\n\nTITLE: Emulating Viewport Size with Playwright Codegen - JavaScript - Bash\nDESCRIPTION: This snippet demonstrates setting a custom viewport size in the Playwright code generator for JavaScript/Node.js environments. The '--viewport-size' option is passed as a command-line argument to specify the width and height in pixels. Prerequisite: Playwright must be installed locally, and 'npx' present. The command launches the recording session with a browser window sized as requested.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright codegen --viewport-size=\\\"800,600\\\" playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Manual Time Control with Playwright in JavaScript\nDESCRIPTION: Demonstrates fine-grained control over time in tests using Playwright's clock API in JavaScript. The example initializes a clock with a specific time, pauses time flow to take control, and then manually ticks through time while verifying the UI updates correctly.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize clock with a specific time, let the page load naturally.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pause the time flow, stop the timers, you now have manual control\n// over the page time.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Tick through time manually, firing all timers in the process.\n// In this case, time will be updated in the screen 2 times.\nawait page.clock.runFor(2000);\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:02 AM');\n```\n\n----------------------------------------\n\nTITLE: Interacting with Page Elements in Playwright (Python)\nDESCRIPTION: Demonstrates how to create a locator and use it to click an element on the page. Playwright automatically waits for the element to be actionable before performing the click.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a locator.\nget_started = page.get_by_role(\"link\", name=\"Get started\")\n\n# Click it.\nget_started.click()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Image Elements Across Multiple URLs in Java\nDESCRIPTION: This snippet shows how to use Frame.waitForSelector to wait for and retrieve image elements across multiple URLs in a Playwright script using Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      Browser browser = chromium.launch();\n      Page page = browser.newPage();\n      for (String currentURL : Arrays.asList(\"https://google.com\", \"https://bbc.com\")) {\n        page.navigate(currentURL);\n        ElementHandle element = page.mainFrame().waitForSelector(\"img\");\n        System.out.println(\"Loaded image: \" + element.getAttribute(\"src\"));\n      }\n      browser.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Load State After Button Click in JavaScript\nDESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in JavaScript. The method resolves after the 'load' event is fired.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('button').click(); // Click triggers navigation.\nawait page.waitForLoadState(); // The promise resolves after 'load' event.\n```\n\n----------------------------------------\n\nTITLE: Basic Page Navigation in JavaScript\nDESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Navigate the page\nawait page.goto('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Access Response Request\nDESCRIPTION: The `Response.request` method provides access to the associated Request object, allowing further inspection of the original request that triggered the response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = response.request();\\nconsole.log('Request:', request);\n```\n\n----------------------------------------\n\nTITLE: Page Creation Monitoring - Java/Python/C#\nDESCRIPTION: Async method that monitors and waits for new page creation in the browser context. Can be configured with a predicate function to filter specific page events and includes timeout functionality.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WaitForPageOptions {\n  predicate?: (page: Page) => boolean;\n  timeout?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Elements Inside Frames with Playwright JavaScript\nDESCRIPTION: This snippet demonstrates how to use Playwright's frameLocator API in JavaScript to locate an element within an iframe using a CSS selector and label. It shows chaining locator queries and performing an asynchronous fill operation. Requires the Playwright JavaScript library and an active page object. The '.frame-class' selector identifies the iframe, while 'User Name' is the element's accessible label.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Locate element inside frame\nconst username = await page.frameLocator('.frame-class').getByLabel('User Name');\nawait username.fill('John');\n```\n\n----------------------------------------\n\nTITLE: Clicking Anchor Element with ElementHandle in Java\nDESCRIPTION: Shows how to click an anchor ('a') DOM element using ElementHandle in Java. Involves obtaining an ElementHandle from a queried selector and clicking the element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nElementHandle hrefElement = page.querySelector(\"a\");\nhrefElement.click();\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Decorators for Test Steps in Playwright\nDESCRIPTION: Demonstrates how to use TypeScript method decorators to create test steps in Playwright. This approach allows each method call to appear as a step in the test report.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nfunction step(target: Function, context: ClassMethodDecoratorContext) {\n  return function replacementMethod(...args: any) {\n    const name = this.constructor.name + '.' + (context.name as string);\n    return test.step(name, async () => {\n      return await target.call(this, ...args);\n    });\n  };\n}\n\nclass LoginPage {\n  constructor(readonly page: Page) {}\n\n  @step\n  async login() {\n    const account = { username: 'Alice', password: 's3cr3t' };\n    await this.page.getByLabel('Username or email address').fill(account.username);\n    await this.page.getByLabel('Password').fill(account.password);\n    await this.page.getByRole('button', { name: 'Sign in' }).click();\n    await expect(this.page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n  }\n}\n\ntest('example', async ({ page }) => {\n  const loginPage = new LoginPage(page);\n  await loginPage.login();\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect_event with sync context in Python\nDESCRIPTION: Demonstrates using Python's synchronous context manager to wait for a framenavigated event while performing an action. The function returns the navigation event data after completion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nwith page.expect_event(\"framenavigated\") as event_info:\n    page.get_by_role(\"button\")\nframe = event_info.value\n```\n\n----------------------------------------\n\nTITLE: Checking a Checkbox or Radio via Playwright JavaScript\nDESCRIPTION: Ensures a checkbox or radio input is checked using Playwright for JavaScript. Throws if the locator does not point to a checkbox/radio, or if the node is detached during the operation. Takes a selector for the 'checkbox' role as input, checks it with robust error handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait page.getByRole('checkbox').check();\n```\n\n----------------------------------------\n\nTITLE: Using Locator.filter with Negative Matching\nDESCRIPTION: Demonstrates how to use Locator.filter with hasNot and hasNotText options to find elements that don't match certain conditions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst rowLocator = page.locator('tr');\nawait rowLocator\n    .filter({ hasNotText: 'text in column 1' })\n    .filter({ hasNot: page.getByRole('button', { name: 'column 2 button' }) })\n    .screenshot();\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Frame Binary Payload – Playwright SDK – C#\nDESCRIPTION: This method, WebSocketFrame.binary, retrieves the binary payload from a WebSocket frame in Playwright (C#). It returns either a Buffer object containing binary data or null if no binary data is present. Users must have an active Playwright session and a valid WebSocketFrame instance. Inputs: None. Output: Buffer|null. The method is intended for inspecting WebSocket traffic whose payload is not plain text.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketframe.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar binaryPayload = webSocketFrame.binary(); // returns Buffer|null\n```\n\n----------------------------------------\n\nTITLE: Matching Body ARIA Snapshot using Playwright Python (Sync)\nDESCRIPTION: This Python snippet shows the synchronous way to match the ARIA snapshot of the body element. It uses `expect(page.locator(\"body\")).to_match_aria_snapshot()` with a template defining the expected 'heading' role and its name 'title'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nexpect(page.locator(\"body\")).to_match_aria_snapshot(\"\"\"\n  - heading \"title\"\n\"\"\")\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding storageState Fixture in Playwright Test\nDESCRIPTION: Example showing how to completely replace the built-in storageState fixture with a custom implementation that provides authentication cookies. This allows tests to start in an authenticated state.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  storageState: async ({}, use) => {\n    const cookie = await getAuthCookie();\n    await use({ cookies: [cookie] });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieve Response Status Code\nDESCRIPTION: Access the HTTP status code of a response using the `Response.status` method. This is useful for logging and response validation purposes, with the return being an integer code.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst statusCode = response.status();\\nconsole.log('Status Code:', statusCode);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Default Browser Arguments in Playwright (JS/Python)\nDESCRIPTION: Defines the `ignoreDefaultArgs` browser launch option for Playwright in JavaScript and Python. If `true`, Playwright omits its default launch arguments, using only those provided in `args`. If an array of strings is given, only those specific default arguments are filtered out. This is a potentially dangerous option. Defaults to `false`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n- `ignoreDefaultArgs` <[boolean]|[Array]<[string]>>\n```\n\n----------------------------------------\n\nTITLE: Hover and Click on Locator Object in Java\nDESCRIPTION: Shows how to use a locator in Java to hover and click a text element. This involves dynamically querying the element before each interaction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nLocator locator = page.getByText(\"Submit\");\nlocator.hover();\nlocator.click();\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts for Individual Actions (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set timeouts for individual actions within a test. It sets a 30-second timeout for navigation and a 10-second timeout for a click action.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev', { timeout: 30000 });\n  await page.getByText('Get Started').click({ timeout: 10000 });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Frame Element and Content Frame - Multiple Languages\nDESCRIPTION: Demonstrates how to get a frame element handle and verify it matches the content frame across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst frameElement = await frame.frameElement();\nconst contentFrame = await frameElement.contentFrame();\nconsole.log(frame === contentFrame);  // -> true\n```\n\nLANGUAGE: java\nCODE:\n```\nElementHandle frameElement = frame.frameElement();\nFrame contentFrame = frameElement.contentFrame();\nSystem.out.println(frame == contentFrame);  // -> true\n```\n\nLANGUAGE: python\nCODE:\n```\nframe_element = await frame.frame_element()\ncontent_frame = await frame_element.content_frame()\nassert frame == content_frame\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar frameElement = await frame.FrameElementAsync();\nvar contentFrame = await frameElement.ContentFrameAsync();\nConsole.WriteLine(frame == contentFrame); // -> True\n```\n\n----------------------------------------\n\nTITLE: Playwright Test Migration of AngularJS Todo List\nDESCRIPTION: The equivalent Playwright Test implementation of the Protractor example, showing the proper use of async/await, locators, and expectations in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { test, expect } = require('@playwright/test'); // 1\n\ntest.describe('angularjs homepage todo list', () => {\n  test('should add a todo', async ({ page }) => { // 2, 3\n    await page.goto('https://angularjs.org'); // 4\n\n    await page.locator('[ng-model=\"todoList.todoText\"]').fill('first test');\n    await page.locator('[value=\"add\"]').click();\n\n    const todoList = page.locator('[ng-repeat=\"todo in todoList.todos\"]'); // 5\n    await expect(todoList).toHaveCount(3);\n    await expect(todoList.nth(2)).toHaveText('first test', {\n      useInnerText: true,\n    });\n\n    // You wrote your first test, cross it off the list\n    await todoList.nth(2).getByRole('textbox').click();\n    const completedAmount = page.locator('.done-true');\n    await expect(completedAmount).toHaveCount(2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Trace Recording (Java)\nDESCRIPTION: Shows the basic process for recording a Playwright trace in Java. It involves creating a browser context, starting tracing using `Tracing.StartOptions` (enabling screenshots and snapshots), performing page navigation, and stopping the trace with `Tracing.StopOptions` to specify the output file path ('trace.zip'). Requires a Playwright BrowserContext.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = chromium.launch();\nBrowserContext context = browser.newContext();\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true));\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Options in Playwright Config\nDESCRIPTION: Sets the base URL and storage state for all tests in the Playwright configuration file. This allows for easier navigation and authentication in tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Base URL to use in actions like `await page.goto('/')`.\n    baseURL: 'http://localhost:3000',\n\n    // Populates context with given storage state.\n    storageState: 'state.json',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Docker for JavaScript Web Scraping\nDESCRIPTION: Command to run the Playwright Docker container for JavaScript web scraping with security measures for untrusted websites.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchPage in Python (Async)\nDESCRIPTION: Asynchronous Python implementation of a SearchPage class for Playwright. It encapsulates page navigation and search functionality, demonstrating the page object model pattern in Python using async/await syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass SearchPage:\n    def __init__(self, page):\n        self.page = page\n        self.search_term_input = page.locator('[aria-label=\"Enter your search term\"]')\n\n    async def navigate(self):\n        await self.page.goto(\"https://bing.com\")\n\n    async def search(self, text):\n        await self.search_term_input.fill(text)\n        await self.search_term_input.press(\"Enter\")\n```\n\n----------------------------------------\n\nTITLE: Using Route.fetch and Route.fulfill with JSON in Python\nDESCRIPTION: This snippet demonstrates how to intercept API requests, fetch the original content, modify the JSON response, and fulfill the request with the modified data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef handle_route(route: Route):\n  # Fetch original settings.\n  response = route.fetch()\n\n  # Force settings theme to a predefined value.\n  json = response.json()\n  json[\"theme\"] = \"Solorized\"\n\n  # Fulfill with modified data.\n  route.fulfill(json=json)\n\n\npage.route(\"**/api/settings\", handle_route)\n```\n\n----------------------------------------\n\nTITLE: Configuring Drone CI for Playwright Tests (JavaScript)\nDESCRIPTION: This YAML configuration sets up Drone CI to run Playwright tests using the official Playwright Docker image for JavaScript projects. It defines a single step that runs the Playwright tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_40\n\nLANGUAGE: yml\nCODE:\n```\nkind: pipeline\nname: default\ntype: docker\n\nsteps:\n  - name: test\n    image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n    commands:\n      - npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Asserting Visible DOM Elements in Playwright\nDESCRIPTION: Examples of using toBeVisible assertion to verify if a locator points to an attached and visible DOM node. Includes examples for checking single elements and lists.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// A specific element is visible.\nawait expect(page.getByText('Welcome')).toBeVisible();\n\n// At least one item in the list is visible.\nawait expect(page.getByTestId('todo-item').first()).toBeVisible();\n\n// At least one of the two elements is visible, possibly both.\nawait expect(\n    page.getByRole('button', { name: 'Sign in' })\n        .or(page.getByRole('button', { name: 'Sign up' }))\n        .first()\n).toBeVisible();\n```\n\nLANGUAGE: java\nCODE:\n```\n// A specific element is visible.\nassertThat(page.getByText(\"Welcome\")).isVisible();\n\n// At least one item in the list is visible.\nassertThat(page.getByTestId(\"todo-item\").first()).isVisible();\n\n// At least one of the two elements is visible, possibly both.\nassertThat(\n  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\"))\n    .or(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign up\")))\n    .first()\n).isVisible();\n```\n\nLANGUAGE: python\nCODE:\n```\n# A specific element is visible.\nawait expect(page.get_by_text(\"Welcome\")).to_be_visible()\n\n# At least one item in the list is visible.\nawait expect(page.get_by_test_id(\"todo-item\").first).to_be_visible()\n\n# At least one of the two elements is visible, possibly both.\nawait expect(\n    page.get_by_role(\"button\", name=\"Sign in\")\n    .or_(page.get_by_role(\"button\", name=\"Sign up\"))\n    .first\n).to_be_visible()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// A specific element is visible.\nawait Expect(Page.GetByText(\"Welcome\")).ToBeVisibleAsync();\n\n// At least one item in the list is visible.\nawait Expect(Page.GetByTestId(\"todo-item\").First).ToBeVisibleAsync();\n\n// At least one of the two elements is visible, possibly both.\nawait Expect(\n  Page.GetByRole(AriaRole.Button, new() { Name = \"Sign in\" })\n    .Or(Page.GetByRole(AriaRole.Button, new() { Name = \"Sign up\" }))\n    .First\n).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Errors with Playwright Events (Java)\nDESCRIPTION: Uses Playwright for Java to capture and print uncaught page exceptions using the onPageError handler. Expects a Page object. Navigates to a page that immediately throws a JavaScript exception, which is then printed to the console. Only Playwright for Java is required.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Log all uncaught errors to the terminal\npage.onPageError(exception -> {\n  System.out.println(\"Uncaught exception: \" + exception);\n});\n\n// Navigate to a page with an exception.\npage.navigate(\"data:text/html,<script>throw new Error('Test')<\\/script>\");\n```\n\n----------------------------------------\n\nTITLE: Using Locator.all to Iterate Over Multiple Elements in Python\nDESCRIPTION: Shows how to use the Locator.all method to iterate over all checkbox elements on a page and check each one programmatically.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Check all checkboxes!\ncheckboxes = page.get_by_role(\"checkbox\")\nfor checkbox in checkboxes.all():\n  checkbox.check()\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Enabled State using Playwright LocatorAssertions\nDESCRIPTION: Ensures the Playwright Locator points to an element that is currently enabled (i.e., not disabled). It accepts an optional `enabled` boolean parameter (v1.26+) to explicitly assert for enabled or non-enabled states. A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst locator = page.locator('button.submit');\nawait expect(locator).toBeEnabled();\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nassertThat(page.locator(\"button.submit\")).isEnabled();\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nfrom playwright.async_api import expect\n\nlocator = page.locator(\"button.submit\")\nawait expect(locator).to_be_enabled()\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nfrom playwright.sync_api import expect\n\nlocator = page.locator(\"button.submit\")\nexpect(locator).to_be_enabled()\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar locator = Page.Locator(\"button.submit\");\nawait Expect(locator).ToBeEnabledAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Index-based Selection for Python\nDESCRIPTION: Python-specific option for selecting dropdown options by index. Allows selecting one or multiple options by their position.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_95\n\nLANGUAGE: python\nCODE:\n```\n- `index` ?<[int]|[Array]<[int]>>\n```\n\n----------------------------------------\n\nTITLE: Dumping Frame Tree using Playwright Async API in Python\nDESCRIPTION: This asynchronous Python snippet demonstrates using Playwright's async API to launch Firefox, navigate to a website, and recursively dump the frame tree. It defines an async `run` function and a helper `dump_frame_tree` function that prints the name and URL of each frame, indenting child frames. The script uses `asyncio` to run the main async function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    firefox = playwright.firefox\n    browser = await firefox.launch()\n    page = await browser.new_page()\n    await page.goto(\"https://www.theverge.com\")\n    dump_frame_tree(page.main_frame, \"\")\n    await browser.close()\n\ndef dump_frame_tree(frame, indent):\n    print(indent + frame.name + '@' + frame.url)\n    for child in frame.child_frames:\n        dump_frame_tree(child, indent + \"    \")\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser Using Playwright Python (Async)\nDESCRIPTION: Shows how to launch Chromium asynchronously using Playwright's async API, create a new page, perform actions, and close the browser. Requires 'playwright' Python package and async environment. Key parameters include browser type and the Playwright instance. The function expects no input, and browser automation is the output. Limitations: must be run within an asyncio event loop.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\nfrom playwright.async_api import async_playwright, Playwright\\n\\nasync def run(playwright: Playwright):\\n    chromium = playwright.chromium\\n    browser = await chromium.launch()\\n    page = await browser.new_page()\\n    await page.goto(\\\"https://example.com\\\")\\n    # other actions...\\n    await browser.close()\\n\\nasync def main():\\n    async with async_playwright() as playwright:\\n        await run(playwright)\\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Waiting for Service Worker Activation in Playwright\nDESCRIPTION: Shows how to wait for a Service Worker to be fully activated before proceeding. This implementation-agnostic approach waits for the 'controllerchange' event which indicates the Service Worker has taken control of the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.evaluate(async () => {\n  const registration = await window.navigator.serviceWorker.getRegistration();\n  if (registration.active?.state === 'activated')\n    return;\n  await new Promise(res =>\n    window.navigator.serviceWorker.addEventListener('controllerchange', res),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Aborting Network Requests in Python (Sync)\nDESCRIPTION: Demonstrates how to abort specific network requests in synchronous Python. Examples include aborting image requests and conditionally aborting requests based on resource type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\npage.route(\"**/*.{png,jpg,jpeg}\", lambda route: route.abort())\n\n# Abort based on the request type\npage.route(\"**/*\", lambda route: route.abort() if route.request.resource_type == \"image\"  else route.continue_())\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Modifying WebSocket Messages in Python (Async)\nDESCRIPTION: This code snippet shows how to connect to the actual WebSocket server while intercepting and modifying messages in Python using async syntax. It modifies 'request' messages to 'request2' and passes through other messages unmodified.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(server: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    server.send(\"request2\")\n  else:\n    server.send(message)\n\ndef handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: message_handler(server, message))\n\nawait page.route_web_socket(\"wss://example.com/ws\", handler)\n```\n\n----------------------------------------\n\nTITLE: Clearing Input Fields with Playwright Locator\nDESCRIPTION: Demonstrates how to clear an input field using Playwright's Locator API across different programming languages. The method waits for actionability checks, focuses the element, clears it and triggers an input event.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('textbox').clear();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.TEXTBOX).clear();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"textbox\").clear()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Textbox).ClearAsync();\n```\n\n----------------------------------------\n\nTITLE: Testing GitHub API Workflows with Playwright and JUnit in Java\nDESCRIPTION: This snippet provides a complete JUnit-based test suite for GitHub repository and issue workflows using Playwright's Java API. It manages test lifecycle with @BeforeAll and @AfterAll, creates and deletes a test repository, and defines tests to create and validate issues through API calls. Dependencies include Playwright for Java, Gson for JSON parsing, JUnit 5 for assertions, and valid GitHub credentials in environment variables. Inputs are environment variables for user/token, outputs are created repositories and issues, and constraints include correct environment setup and network access to GitHub.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.APIResponse;\nimport com.microsoft.playwright.Playwright;\nimport com.microsoft.playwright.options.RequestOptions;\nimport org.junit.jupiter.api.*;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String REPO = \"test-repo-2\";\n  private static final String USER = System.getenv(\"GITHUB_USER\");\n  private static final String API_TOKEN = System.getenv(\"GITHUB_API_TOKEN\");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  void createPlaywright() {\n    playwright = Playwright.create();\n  }\n\n  void createAPIRequestContext() {\n    Map<String, String> headers = new HashMap<>();\n    // We set this header per GitHub guidelines.\n    headers.put(\"Accept\", \"application/vnd.github.v3+json\");\n    // Add authorization token to all requests.\n    // Assuming personal access token available in the environment.\n    headers.put(\"Authorization\", \"token \" + API_TOKEN);\n\n    request = playwright.request().newContext(new APIRequest.NewContextOptions()\n      // All requests we send go to this API endpoint.\n      .setBaseURL(\"https://api.github.com\")\n      .setExtraHTTPHeaders(headers));\n  }\n\n  void createTestRepository() {\n    APIResponse newRepo = request.post(\"/user/repos\",\n      RequestOptions.create().setData(Collections.singletonMap(\"name\", REPO)));\n    assertTrue(newRepo.ok(), newRepo.text());\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n    createTestRepository();\n  }\n\n  void deleteTestRepository() {\n    if (request != null) {\n      APIResponse deletedRepo = request.delete(\"/repos/\" + USER + \"/\" + REPO);\n      assertTrue(deletedRepo.ok());\n    }\n  }\n\n  void disposeAPIRequestContext() {\n    if (request != null) {\n      request.dispose();\n      request = null;\n    }\n  }\n\n  void closePlaywright() {\n    if (playwright != null) {\n      playwright.close();\n      playwright = null;\n    }\n  }\n\n  @AfterAll\n  void afterAll() {\n    deleteTestRepository();\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n\n  @Test\n  void shouldCreateBugReport() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Bug] report 1\");\n    data.put(\"body\", \"Bug description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has(\"title\")) {\n        continue;\n      }\n      if (\"[Bug] report 1\".equals(itemObj.get(\"title\").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals(\"Bug description\", issue.get(\"body\").getAsString(), issue.toString());\n  }\n\n  @Test\n  void shouldCreateFeatureRequest() {\n    Map<String, String> data = new HashMap<>();\n    data.put(\"title\", \"[Feature] request 1\");\n    data.put(\"body\", \"Feature description\");\n    APIResponse newIssue = request.post(\"/repos/\" + USER + \"/\" + REPO + \"/issues\",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has(\"title\")) {\n        continue;\n      }\n      if (\"[Feature] request 1\".equals(itemObj.get(\"title\").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals(\"Feature description\", issue.get(\"body\").getAsString(), issue.toString());\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Aborting Network Requests in JavaScript\nDESCRIPTION: Shows how to abort specific network requests in JavaScript. Examples include aborting image requests and conditionally aborting requests based on resource type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('**/*.{png,jpg,jpeg}', route => route.abort());\n\n// Abort based on the request type\nawait page.route('**/*', route => {\n  return route.request().resourceType() === 'image' ? route.abort() : route.continue();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Exceptions in Playwright (JavaScript)\nDESCRIPTION: This snippet demonstrates how to listen for the 'weberror' event on a Playwright BrowserContext in JavaScript. It registers an event listener that logs the message of any unhandled exception caught within the page's context to the console using `webError.error()`. It also includes code to navigate to a page specifically designed to throw an error, triggering the event listener.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Log all uncaught errors to the terminal\ncontext.on('weberror', webError => {\n  console.log(`Uncaught exception: \"${webError.error()}\"`);\n});\n\n// Navigate to a page with an exception.\nawait page.goto('data:text/html,<script>throw new Error(\"Test\")</script>');\n```\n\n----------------------------------------\n\nTITLE: Typing into a Password Field with Playwright\nDESCRIPTION: Example of typing text into a password field and submitting a form by pressing Enter. Demonstrates sequential text input combined with a form submission action.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByLabel('Password');\nawait locator.pressSequentially('my password');\nawait locator.press('Enter');\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.getByLabel(\"Password\");\nlocator.pressSequentially(\"my password\");\nlocator.press(\"Enter\");\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.get_by_label(\"Password\")\nawait locator.press_sequentially(\"my password\")\nawait locator.press(\"Enter\")\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.get_by_label(\"Password\")\nlocator.press_sequentially(\"my password\")\nlocator.press(\"Enter\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = page.GetByLabel(\"Password\");\nawait locator.PressSequentiallyAsync(\"my password\");\nawait locator.PressAsync(\"Enter\");\n```\n\n----------------------------------------\n\nTITLE: Waiting for Response in Python\nDESCRIPTION: Demonstrates Python implementations for waiting on HTTP responses using both async and sync patterns. Shows usage with URL matching and lambda predicates.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_142\n\nLANGUAGE: python\nCODE:\n```\nasync with page.expect_response(\"https://example.com/resource\") as response_info:\n    await page.get_by_text(\"trigger response\").click()\nresponse = await response_info.value\nreturn response.ok\n\n# or with a lambda\nasync with page.expect_response(lambda response: response.url == \"https://example.com\" and response.status == 200 and response.request.method == \"get\") as response_info:\n    await page.get_by_text(\"trigger response\").click()\nresponse = await response_info.value\nreturn response.ok\n```\n\nLANGUAGE: python\nCODE:\n```\nwith page.expect_response(\"https://example.com/resource\") as response_info:\n    page.get_by_text(\"trigger response\").click()\nresponse = response_info.value\nreturn response.ok\n\n# or with a lambda\nwith page.expect_response(lambda response: response.url == \"https://example.com\" and response.status == 200 and response.request.method == \"get\") as response_info:\n    page.get_by_text(\"trigger response\").click()\nresponse = response_info.value\nreturn response.ok\n```\n\n----------------------------------------\n\nTITLE: Using APIResponseAssertions to verify API response in JavaScript\nDESCRIPTION: Example of making a GET request to a website and asserting that the response is OK (status code 200-299) using JavaScript in Playwright Test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('navigates to login', async ({ page }) => {\n  // ...\n  const response = await page.request.get('https://playwright.dev');\n  await expect(response).toBeOK();\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Trace with Pytest Command\nDESCRIPTION: Shows how to enable trace recording using the Pytest CLI flag. The trace will be saved as trace.zip in the test-results directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest --tracing on\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Selectors in Playwright\nDESCRIPTION: Shows how to use attribute selectors for id, data-testid, data-test-id, and data-test in Playwright. These selectors provide a shorthand for selecting elements with specific attributes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Fill an input with the id \"username\"\nawait page.locator('id=username').fill('value');\n\n// Click an element with data-test-id \"submit\"\nawait page.locator('data-test-id=submit').click();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Fill an input with the id \"username\"\npage.locator(\"id=username\").fill(\"value\");\n\n// Click an element with data-test-id \"submit\"\npage.locator(\"data-test-id=submit\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\n# Fill an input with the id \"username\"\nawait page.locator('id=username').fill('value')\n\n# Click an element with data-test-id \"submit\"\nawait page.locator('data-test-id=submit').click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Fill an input with the id \"username\"\nawait page.Locator(\"id=username\").FillAsync(\"value\");\n\n// Click an element with data-test-id \"submit\"\nawait page.Locator(\"data-test-id=submit\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests via npx - Bash\nDESCRIPTION: Runs all Playwright tests in the configured browsers using npx, executing in headless mode by default. Requires a project initialized with Playwright and associated test/spec files present. Outputs test results to the console. Suitable for running both initial example and user-written tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Scanning for Specific WCAG Violations with axe-core and Playwright - JavaScript\nDESCRIPTION: This snippet shows how to use AxeBuilder.withTags to restrict an accessibility scan to only those rules matching provided WCAG A and AA tags. After navigating to a URL, the scan runs using the specified tags and asserts that no violations are found. Requires Playwright and @axe-core/playwright, and uses tags for selective coverage according to WCAG guideline levels.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntest('should not have any automatically detectable WCAG A or AA violations', async ({ page }) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Requests in Python (Sync)\nDESCRIPTION: Shows how to wait for specific network requests in Python using synchronous syntax with both URL matching and lambda functions. Useful for ensuring requests have been made before proceeding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_138\n\nLANGUAGE: python\nCODE:\n```\nwith page.expect_request(\"http://example.com/resource\") as first:\n    page.get_by_text(\"trigger request\").click()\nfirst_request = first.value\n\n# or with a lambda\nwith page.expect_request(lambda request: request.url == \"http://example.com\" and request.method == \"get\") as second:\n    page.get_by_text(\"trigger request\").click()\nsecond_request = second.value\n```\n\n----------------------------------------\n\nTITLE: Using toHaveValues Assertion in Playwright\nDESCRIPTION: Demonstrates how to validate multiple selected values in a multi-select element using toHaveValues assertion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<select id=\"favorite-colors\" multiple>\n  <option value=\"R\">Red</option>\n  <option value=\"G\">Green</option>\n  <option value=\"B\">Blue</option>\n</select>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('id=favorite-colors');\nawait locator.selectOption(['R', 'G']);\nawait expect(locator).toHaveValues([/R/, /G/]);\n```\n\n----------------------------------------\n\nTITLE: Using expect.poll for Asynchronous Polling Assertions\nDESCRIPTION: Demonstrates how to convert synchronous assertions into polling assertions that wait for a condition to be true, with custom timeout and message options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}, {\n  // Custom expect message for reporting, optional.\n  message: 'make sure API eventually succeeds',\n  // Poll for 10 seconds; defaults to 5 seconds. Pass 0 to disable timeout.\n  timeout: 10000,\n}).toBe(200);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Locator Results Using Playwright Java\nDESCRIPTION: Uses Java Playwright's locator system to access and click all 'listitem' elements. Requires Playwright for Java with an initialized `page`. The snippet selects all 'listitem' role nodes, iterating with a for-each and calling `click()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nfor (Locator li : page.getByRole(\"listitem\").all())\n  li.click();\n```\n\n----------------------------------------\n\nTITLE: Setting Input Files in Playwright with JavaScript\nDESCRIPTION: Shows various ways to upload files using setInputFiles method in JavaScript, including uploading a single file, multiple files, a directory, removing selected files, and uploading a buffer from memory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n// Select one file\nawait page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));\n\n// Select multiple files\nawait page.getByLabel('Upload files').setInputFiles([\n  path.join(__dirname, 'file1.txt'),\n  path.join(__dirname, 'file2.txt'),\n]);\n\n// Select a directory\nawait page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));\n\n// Remove all the selected files\nawait page.getByLabel('Upload file').setInputFiles([]);\n\n// Upload buffer from memory\nawait page.getByLabel('Upload file').setInputFiles({\n  name: 'file.txt',\n  mimeType: 'text/plain',\n  buffer: Buffer.from('this is test')\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Trace in Python (Sync)\nDESCRIPTION: Shows how to record a trace using Python's synchronous API. Includes browser launch, context creation, and trace configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbrowser = chromium.launch()\ncontext = browser.new_context()\n\n# Start tracing before creating / navigating a page.\ncontext.tracing.start(screenshots=True, snapshots=True, sources=True)\n\npage = context.new_page()\npage.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\ncontext.tracing.stop(path = \"trace.zip\")\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.PressAsync for Key Simulation and Screenshots in Playwright (C#)\nDESCRIPTION: This C# snippet demonstrates the usage of `page.Keyboard.PressAsync` to simulate pressing different keys ('A', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait page.GotoAsync(\"https://keycode.info\");\nawait page.Keyboard.PressAsync(\"A\");\nawait page.ScreenshotAsync(new() { Path = \"A.png\" });\nawait page.Keyboard.PressAsync(\"ArrowLeft\");\nawait page.ScreenshotAsync(new() { Path = \"ArrowLeft.png\" });\nawait page.Keyboard.PressAsync(\"Shift+O\");\nawait page.ScreenshotAsync(new() { Path = \"O.png\" });\nawait browser.CloseAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Status Text with Playwright\nJavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use Playwright's expect function to wait for a status element to have a specific text after a button click. It uses the Page object and relies on the Playwright test library for structure.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('status becomes submitted', async ({ page }) => {\n  // ...\n  await page.locator('#submit-button').click();\n  await expect(page.locator('.status')).toHaveText('Submitted');\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Isolated Contexts in Playwright Test Runner (JavaScript)\nDESCRIPTION: Demonstrates how the Playwright Test Runner automatically provides an isolated `BrowserContext` (`context`) and a `Page` (`page`) for each test, ensuring complete test isolation. The example shows two separate tests, each receiving its own unique context and page, highlighting the default isolation behavior.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('example test', async ({ page, context }) => {\n  // \"context\" is an isolated BrowserContext, created for this specific test.\n  // \"page\" belongs to this context.\n});\n\ntest('another test', async ({ page, context }) => {\n  // \"context\" and \"page\" in this second test are completely\n  // isolated from the first test.\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging All Playwright Tests with Inspector\nDESCRIPTION: Debug all tests using the Playwright Inspector by running the test command with the --debug flag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Hooks with Playwright in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'beforeEach' hook to perform actions before each test, such as navigating to a login page and authenticating the user. Dependencies include the Playwright library, and it assumes a test account when accessing external URLs. Each test begins with the page in a signed-in state, allowing for isolated test cases.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest.beforeEach(async ({ page }) => {\n  // Runs before each test and signs in each page.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('username');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n});\n\ntest('first', async ({ page }) => {\n  // page is signed in.\n});\n\ntest('second', async ({ page }) => {\n  // page is signed in.\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Playwright Tracing (Python Sync)\nDESCRIPTION: Demonstrates starting synchronous Playwright tracing in Python using `context.tracing.start()`. Options like `screenshots` and `snapshots` are passed as arguments. Recording continues until `context.tracing.stop()` is called.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncontext.tracing.start(screenshots=True, snapshots=True)\npage = context.new_page()\npage.goto(\"https://playwright.dev\")\ncontext.tracing.stop(path = \"trace.zip\")\n```\n\n----------------------------------------\n\nTITLE: CLI Commands for Recording HAR\nDESCRIPTION: Command line interface commands for recording HAR files across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# JavaScript\nnpx playwright open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n\n# Java\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"open --save-har=example.har --save-har-glob='**/api/**' https://example.com\"\n\n# Python\nplaywright open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n\n# C#\npwsh bin/Debug/netX/playwright.ps1 open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Modifying WebSocket Messages in JavaScript\nDESCRIPTION: This code snippet shows how to connect to the actual WebSocket server while intercepting and modifying messages in JavaScript. It modifies 'request' messages to 'request2' and passes through other messages unmodified.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.routeWebSocket('wss://example.com/ws', ws => {\n  const server = ws.connectToServer();\n  ws.onMessage(message => {\n    if (message === 'request')\n      server.send('request2');\n    else\n      server.send(message);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Time Control with Playwright in Python (Async)\nDESCRIPTION: Demonstrates manual time control in tests using Playwright's clock API with Python async/await. This example initializes a clock with a specific time, pauses time flow, and manually advances time while verifying the UI updates correctly.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Initialize clock with a specific time, let the page load naturally.\nawait page.clock.install(time=\n    datetime.datetime(2024, 2, 2, 8, 0, 0, tzinfo=datetime.timezone.pst),\n)\nawait page.goto(\"http://localhost:3333\")\nlocator = page.get_by_test_id(\"current-time\")\n\n# Pause the time flow, stop the timers, you now have manual control\n# over the page time.\nawait page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\nawait expect(locator).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Tick through time manually, firing all timers in the process.\n# In this case, time will be updated in the screen 2 times.\nawait page.clock.run_for(2000)\nawait expect(locator).to_have_text(\"2/2/2024, 10:00:02 AM\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Python Browser Context\nDESCRIPTION: Defines the viewport option for browser contexts in Python. This sets a consistent viewport size for each page, with defaults to 1280x720 pixels.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n- `viewport` <[null]|[Object]>\n  - `width` <[int]> page width in pixels.\n  - `height` <[int]> page height in pixels.\n\nSets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport. Learn more about [viewport emulation](../emulation.md#viewport).\n```\n\n----------------------------------------\n\nTITLE: Configuring Sharded Playwright Tests in Azure Pipelines (JavaScript)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run sharded Playwright tests across multiple projects (chromium, firefox, webkit) with three shards each. It uses a matrix strategy to parallelize the test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nstrategy:\n  matrix:\n    chromium-1:\n      project: chromium\n      shard: 1/3\n    chromium-2:\n      project: chromium\n      shard: 2/3\n    chromium-3:\n      project: chromium\n      shard: 3/3\n    firefox-1:\n      project: firefox\n      shard: 1/3\n    firefox-2:\n      project: firefox\n      shard: 2/3\n    firefox-3:\n      project: firefox\n      shard: 3/3\n    webkit-1:\n      project: webkit\n      shard: 1/3\n    webkit-2:\n      project: webkit\n      shard: 2/3\n    webkit-3:\n      project: webkit\n      shard: 3/3\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test --project=$(project) --shard=$(shard)\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Action Timeout in Playwright Tests\nDESCRIPTION: Example showing how to configure a default timeout for Playwright actions like click(). This sets the maximum time each action can take before timing out.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */\n    actionTimeout: 0,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Playwright Locators Usage Example\nDESCRIPTION: Demonstrates how to create and use Playwright locators for finding and interacting with page elements. Shows assertion and click operations using locators.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nLocator getStarted = page.locator(\"text=Get Started\");\n\nassertThat(getStarted).hasAttribute(\"href\", \"/docs/intro\");\ngetStarted.click();\n```\n\n----------------------------------------\n\nTITLE: Accessible Name Option for Role Selectors\nDESCRIPTION: Defines the `name` option for role-based selectors to match elements by their accessible name, with case-insensitive substring matching by default.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `name` <[string]|[RegExp]>\n```\n\n----------------------------------------\n\nTITLE: Sending Form URL-encoded Data in JavaScript\nDESCRIPTION: Example of sending a POST request with URL-encoded form data using Playwright's API request context in JavaScript. The form data is passed in the form option and encoded with application/x-www-form-urlencoded content type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait request.post('https://example.com/api/findBook', {\n  form: {\n    title: 'Book Title',\n    author: 'John Doe',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Messages with Playwright in C#\nDESCRIPTION: Setting up WebSocket routes using Playwright in C# to mock server communication by intercepting and responding to messages. Requires Playwright setup in C# and a page instance for routing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteWebSocketAsync(\"wss://example.com/ws\", ws => {\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      ws.Send(\"response\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Assertion Implementation\nDESCRIPTION: Demonstrates how to assert CSS classes on a located element using Playwright's expect API in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('#component');\nawait expect(locator).toContainClass('middle selected row');\nawait expect(locator).toContainClass('selected');\nawait expect(locator).toContainClass('row middle');\n```\n\n----------------------------------------\n\nTITLE: Basic Page Navigation in C#\nDESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Navigate the page\nawait page.GotoAsync(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Configuring baseURL with test.use in Playwright Test\nDESCRIPTION: Example showing how to configure the baseURL for a test file using the test.use method. This sets the baseURL that will be used by the overridden page fixture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest.use({ baseURL: 'https://playwright.dev' });\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Requests in JavaScript\nDESCRIPTION: Shows how to wait for specific network requests in JavaScript using both URL matching and predicate functions. Useful for ensuring requests have been made before proceeding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\n// Start waiting for request before clicking. Note no await.\nconst requestPromise = page.waitForRequest('https://example.com/resource');\nawait page.getByText('trigger request').click();\nconst request = await requestPromise;\n\n// Alternative way with a predicate. Note no await.\nconst requestPromise = page.waitForRequest(request =>\n  request.url() === 'https://example.com' && request.method() === 'GET',\n);\nawait page.getByText('trigger request').click();\nconst request = await requestPromise;\n```\n\n----------------------------------------\n\nTITLE: Polling for Conditions in Playwright Tests\nDESCRIPTION: Demonstrates the new expect.poll method for waiting on arbitrary conditions in tests. This example polls an API endpoint until it returns a 200 status code.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// Poll the method until it returns an expected result.\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}).toBe(200);\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Locale in Playwright Tests\nDESCRIPTION: Example showing how to specify the user locale for tests, affecting language settings, date formatting, and Accept-Language headers in the browser.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    locale: 'it-IT',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Hovering Over Elements in Playwright\nDESCRIPTION: Shows how to hover over elements using the Locator.hover() method. This method waits for element actionability, scrolls it into view if needed, and moves the mouse to hover over the element's center or specified position.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('link').hover();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"link\").hover()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_role(\"link\").hover()\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.LINK).hover();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Link).HoverAsync();\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Route with APIResponse in Playwright\nDESCRIPTION: This snippet documents the 'response' option for the Route.fulfill method. It allows fulfilling a route's request with an APIResponse object. Individual fields of the response can be overridden using additional fulfill options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n### option: Route.fulfill.response\n* since: v1.15\n- `response` <[APIResponse]>\n\n[APIResponse] to fulfill route's request with. Individual fields of the response (such as headers) can be overridden using fulfill options.\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Requests in Python (Async)\nDESCRIPTION: Shows how to wait for specific network requests in Python using async syntax with both URL matching and lambda functions. Useful for ensuring requests have been made before proceeding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_137\n\nLANGUAGE: python\nCODE:\n```\nasync with page.expect_request(\"http://example.com/resource\") as first:\n    await page.get_by_text(\"trigger request\").click()\nfirst_request = await first.value\n\n# or with a lambda\nasync with page.expect_request(lambda request: request.url == \"http://example.com\" and request.method == \"get\") as second:\n    await page.get_by_text(\"trigger request\").click()\nsecond_request = await second.value\n```\n\n----------------------------------------\n\nTITLE: Using Locator waitFor in Java\nDESCRIPTION: Shows how to wait for a locator to resolve to a single element with a visible state\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nLocator orderSent = page.locator(\"#order-sent\");\norderSent.waitFor();\n```\n\n----------------------------------------\n\nTITLE: Using APIResponseAssertions to verify API response in Python Async\nDESCRIPTION: Example of making a GET request to a website and asserting that the response is OK (status code 200-299) using Python with async/await in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import Page, expect\n\nasync def test_navigates_to_login_page(page: Page) -> None:\n    # ..\n    response = await page.request.get('https://playwright.dev')\n    await expect(response).to_be_ok()\n```\n\n----------------------------------------\n\nTITLE: Saving Authentication State with Playwright Codegen for JavaScript\nDESCRIPTION: Command to generate code for GitHub while saving authentication state (cookies, localStorage, IndexedDB) to auth.json using JavaScript. This allows reusing authentication in subsequent test recordings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright codegen github.com/microsoft/playwright --save-storage=auth.json\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Test ID in HTML\nDESCRIPTION: Example showing HTML button element with data-testid attribute for testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Navigation WaitUntil State\nDESCRIPTION: Defines the `waitUntil` option for Playwright navigation methods, specifying the condition under which a navigation operation is considered complete. It accepts 'load', 'domcontentloaded', 'networkidle', or 'commit'. The default value is 'load'. Using 'networkidle' is generally discouraged for testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `waitUntil` <[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\"|\"commit\">>\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Routes with Custom Responses in C#\nDESCRIPTION: Demonstrates how to fulfill routes with custom responses using Playwright in C#. This example shows how to respond with a 404 status code and a custom message for all requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"**/*\", route => route.FulfillAsync(new ()\n{\n    Status = 404,\n    ContentType = \"text/plain\",\n    Body = \"Not Found!\"\n}));\n```\n\n----------------------------------------\n\nTITLE: Pressing an Uppercase Character using Shift in Playwright (Python Sync)\nDESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in synchronous Python. It shows two ways to achieve this using `page.keyboard.press`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.keyboard.press(\"Shift+KeyA\")\n# or\npage.keyboard.press(\"Shift+A\")\n```\n```\n\n----------------------------------------\n\nTITLE: Grouping Trace Actions with Tracing.group (Python Sync)\nDESCRIPTION: Shows how to group related synchronous actions in a Python Playwright trace using `context.tracing.group()` and `context.tracing.group_end()`. The actions executed between these calls are visually grouped under the provided title ('Open Playwright.dev > API') in the Trace Viewer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# All actions between group and group_end\n# will be shown in the trace viewer as a group.\npage.context.tracing.group(\"Open Playwright.dev > API\")\npage.goto(\"https://playwright.dev/\")\npage.get_by_role(\"link\", name=\"API\").click()\npage.context.tracing.group_end()\n```\n\n----------------------------------------\n\nTITLE: Handling Newsletter Dialog with Locator Handler in C#\nDESCRIPTION: C# implementation of a locator handler that automatically closes a newsletter signup dialog when it appears. The handler detects text matching 'Sign up to the newsletter' and clicks the 'No thanks' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_80\n\nLANGUAGE: csharp\nCODE:\n```\n// Setup the handler.\nawait page.AddLocatorHandlerAsync(page.GetByText(\"Sign up to the newsletter\"), async () => {\n  await page.GetByRole(AriaRole.Button, new() { Name = \"No thanks\" }).ClickAsync();\n});\n\n// Write the test as usual.\nawait page.GotoAsync(\"https://example.com\");\nawait page.GetByRole(\"button\", new() { Name = \"Start here\" }).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Controlling JavaScript Execution in Browser Context\nDESCRIPTION: Defines the javaScriptEnabled option for browser contexts. This controls whether JavaScript execution is enabled in the context, defaulting to true.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_55\n\nLANGUAGE: js\nCODE:\n```\n- `javaScriptEnabled` <[boolean]>\n\nWhether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation.md#javascript-enabled).\n```\n\n----------------------------------------\n\nTITLE: Verifying API Calls with Logging\nDESCRIPTION: Shows how to track and verify API calls using exposed functions to log interactions between the page and the mock API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('log battery calls', async ({ page }) => {\n  const log = [];\n  // Expose function for pushing messages to the Node.js script.\n  await page.exposeFunction('logCall', msg => log.push(msg));\n  await page.addInitScript(() => {\n    const mockBattery = {\n      level: 0.75,\n      charging: true,\n      chargingTime: 1800,\n      dischargingTime: Infinity,\n      // Log addEventListener calls.\n      addEventListener: (name, cb) => logCall(`addEventListener:${name}`)\n    };\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => {\n      logCall('getBattery');\n      return mockBattery;\n    };\n  });\n\n  await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('75%');\n\n  // Compare actual calls with golden.\n  expect(log).toEqual([\n    'getBattery',\n    'addEventListener:chargingchange',\n    'addEventListener:levelchange'\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Timeout in Playwright\nDESCRIPTION: Configuration example showing how to set a custom timeout for the web server startup process.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n    timeout: 120 * 1000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport and High-DPI via Context/Page (Python Async)\nDESCRIPTION: This asynchronous Python snippet shows using `playwright.async_api` for: creating a context with a specific viewport, resizing a page's viewport with `page.set_viewport_size`, and creating a high-DPI context using `viewport` and `device_scale_factor` options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python async\n# Create context with given viewport\ncontext = await browser.new_context(\n  viewport={ 'width': 1280, 'height': 1024 }\n)\n\n# Resize viewport for individual page\nawait page.set_viewport_size({\"width\": 1600, \"height\": 1200})\n\n# Emulate high-DPI\ncontext = await browser.new_context(\n  viewport={ 'width': 2560, 'height': 1440 },\n  device_scale_factor=2,\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Network Request in Playwright (JavaScript)\nDESCRIPTION: Demonstrates how to wait for a specific network request matching a URL pattern (containing 'logo' and ending in '.png') using `page.waitForRequest` in Playwright for JavaScript. The waiting is initiated before the navigation action (`page.goto`) to ensure the event listener is active when the request occurs. The resolved promise yields the `request` object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Start waiting for request before goto. Note no await.\nconst requestPromise = page.waitForRequest('**/*logo*.png');\nawait page.goto('https://wikipedia.org');\nconst request = await requestPromise;\nconsole.log(request.url());\n```\n```\n\n----------------------------------------\n\nTITLE: Creating New Browser Context in Sync Playwright Python\nDESCRIPTION: This Python snippet, using Playwright's sync API, shows creation of a new browser context and page, demonstrating context isolation. It emphasizes correct cleanup to release resources, requiring Python environment and Playwright sync API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nbrowser = playwright.firefox.launch() # or \"chromium\" or \"webkit\".\n# create a new incognito browser context.\ncontext = browser.new_context()\n# create a new page in a pristine context.\npage = context.new_page()\npage.goto(\"https://example.com\")\n\n# gracefully close up everything\ncontext.close()\nbrowser.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Before and After Hooks for Parameterized Tests in JavaScript\nDESCRIPTION: This code shows how to implement beforeEach and afterEach hooks outside of the forEach loop to ensure they are executed only once for all parameterized tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest.beforeEach(async ({ page }) => {\n  // ...\n});\n\ntest.afterEach(async ({ page }) => {\n  // ...\n});\n\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  test(`testing with ${name}`, async ({ page }) => {\n    await page.goto(`https://example.com/greet?name=${name}`);\n    await expect(page.getByRole('heading')).toHaveText(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Geolocation in JavaScript\nDESCRIPTION: Changes the geolocation of a browser context using the Playwright JavaScript library. This allows testing how an application responds to location changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nawait context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions on Frame in Python (Async)\nDESCRIPTION: Shows the asynchronous usage of the evaluate method in Python to execute a JavaScript expression within a frame and return its result.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nresult = await frame.evaluate(\"([x, y]) => Promise.resolve(x * y)\", [7, 8])\nprint(result) # prints \"56\"\n```\n\n----------------------------------------\n\nTITLE: Using Non-Image Snapshots for Text Comparison (JavaScript)\nDESCRIPTION: This example demonstrates how to use the `toMatchSnapshot()` method for comparing text content against a reference snapshot in Playwright Test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  expect(await page.textContent('.hero__title')).toMatchSnapshot('hero.txt');\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Full Page Screenshots in Playwright\nDESCRIPTION: Examples of taking full page screenshots that capture the entire scrollable page content. The fullPage parameter is set to true to capture the complete page regardless of viewport size.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/screenshots.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.screenshot({ path: 'screenshot.png', fullPage: true });\n```\n\nLANGUAGE: java\nCODE:\n```\npage.screenshot(new Page.ScreenshotOptions()\n  .setPath(Paths.get(\"screenshot.png\"))\n  .setFullPage(true));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.screenshot(path=\"screenshot.png\", full_page=True)\n```\n\nLANGUAGE: python\nCODE:\n```\npage.screenshot(path=\"screenshot.png\", full_page=True)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.ScreenshotAsync(new()\n{\n    Path = \"screenshot.png\",\n    FullPage = true,\n});\n```\n\n----------------------------------------\n\nTITLE: Scanning Entire Page for Accessibility Violations with Playwright and Axe\nDESCRIPTION: Example showing how to test a complete web page for accessibility violations using Playwright and Axe. The test creates a browser instance, navigates to a page, runs an accessibility scan, and verifies there are no violations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.deque.html.axecore.playwright.*;\nimport com.deque.html.axecore.utilities.axeresults.*;\n\nimport org.junit.jupiter.api.*;\nimport com.microsoft.playwright.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HomepageTests {\n  @Test\n  void shouldNotHaveAutomaticallyDetectableAccessibilityIssues() throws Exception {\n    Playwright playwright = Playwright.create();\n    Browser browser = playwright.chromium().launch();\n    BrowserContext context = browser.newContext();\n    Page page = context.newPage();\n\n    page.navigate(\"https://your-site.com/\");\n\n    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Test ID\nDESCRIPTION: Shows how to locate elements using data-testid attribute. Includes examples of clicking a button identified by test ID and configuring custom test ID attributes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_127\n\nLANGUAGE: html\nCODE:\n```\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByTestId('directions').click();\n```\n\n----------------------------------------\n\nTITLE: Enabling Fully Parallel Test Execution in Playwright Test\nDESCRIPTION: Configuration to run all tests in all files concurrently, rather than just parallelizing at the file level.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  fullyParallel: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Browser and Navigating Page in Playwright C#\nDESCRIPTION: This C# snippet demonstrates using Playwright for browser automation to launch a Firefox browser and open a webpage. It requires .NET and the Playwright C# library. The code is asynchronous, leveraging C# async/await features to manage browser operations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nvar firefox = playwright.Firefox;\nvar browser = await firefox.LaunchAsync(new() { Headless = false });\nvar page = await browser.NewPageAsync();\nawait page.GotoAsync(\"https://www.bing.com\");\nawait browser.CloseAsync();\n```\n\n----------------------------------------\n\nTITLE: Excluding Elements from Accessibility Scans\nDESCRIPTION: Example of how to exclude specific elements from accessibility scanning when dealing with known issues.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nAxeResults accessibilityScanResults = new AxeBuilder(page)\n  .exclude(Arrays.asList(\"#element-with-known-issue\"))\n  .analyze();\n\nAssertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n```\n\n----------------------------------------\n\nTITLE: Mocking API Requests in C#\nDESCRIPTION: This C# example intercepts calls to a fruit API and returns mock data. It uses the RouteAsync method to handle the route, fulfills it with custom JSON representing a strawberry fruit, and then verifies the mocked content appears on the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Intercept the route to the fruit API\nawait page.RouteAsync(\"*/**/api/v1/fruits\", async route => {\n  var json = new[] { new { name = \"Strawberry\", id = 21 } };\n  // fulfill the route with the mock data\n  await route.FulfillAsync(new()\n  {\n    Json = json\n  });\n});\n\n// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Strawberry fruit is visible\nawait Expect(page.GetByTextAsync(\"Strawberry\")).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Evaluation in Browser Context\nDESCRIPTION: Demonstrates how to run a JavaScript function in the browser context to retrieve the current page URL. This basic example shows the core functionality of the evaluate API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst href = await page.evaluate(() => document.location.href);\n```\n\nLANGUAGE: java\nCODE:\n```\nString href = (String) page.evaluate(\"document.location.href\");\n```\n\nLANGUAGE: python\nCODE:\n```\nhref = await page.evaluate('() => document.location.href')\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar href = await page.EvaluateAsync<string>(\"document.location.href\");\n```\n\n----------------------------------------\n\nTITLE: Accessing and Interacting with Frame Objects in Playwright Python (Async)\nDESCRIPTION: This async Python code shows how to use Playwright to get a frame by name or URL pattern and then fill an input inside that frame. It leverages the async API and keyword arguments for URL filtering. Dependencies include Playwright Python (async), and requires an initialized 'page'. The snippet demonstrates filling the '#username-input' field in the selected frame.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_7\n\nLANGUAGE: python async\nCODE:\n```\n# Get frame using the frame's name attribute\nframe = page.frame('frame-login')\n\n# Get frame using frame's URL\nframe = page.frame(url=r'.*domain.*')\n\n# Interact with the frame\nawait frame.fill('#username-input', 'John')\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Console Debugging Enabled\nDESCRIPTION: Commands to run Playwright tests with the PWDEBUG=console environment variable which enables access to the playwright object in browser developer tools.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=console npx playwright test\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PWDEBUG=console\nnpx playwright test\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PWDEBUG=\"console\"\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Using the Request Fixture for API Testing\nDESCRIPTION: Demonstrates how to use the request fixture to make API calls in tests. The APIRequestContext instance is isolated for each test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ request }) => {\n  await request.post('/signin', {\n    data: {\n      username: 'user',\n      password: 'password'\n    }\n  });\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Request Headers with Playwright Route.continue - JavaScript\nDESCRIPTION: Demonstrates how to intercept and override HTTP headers during a network request using Playwright's page.route in JavaScript. Dependencies include the Playwright library and proper async handling. The route handler receives route and request objects; the headers object merges originals, adds a new foo header, and removes bar. The code immediately continues the request with modified headers. Input: route and request objects. Output: request sent to the network with possibly altered headers. Limitations include inability to override the 'Cookie' header (must use addCookies instead).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('**/*', async (route, request) => {\n  // Override headers\n  const headers = {\n    ...request.headers(),\n    foo: 'foo-value', // set \"foo\" header\n    bar: undefined, // remove \"bar\" header\n  };\n  await route.continue({ headers });\n});\n```\n\n----------------------------------------\n\nTITLE: Visibility Option for Locators in Playwright\nDESCRIPTION: Defines the `visible` option for locators that allows matching only visible or invisible elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\n- `visible` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Playwright Tests in Python\nDESCRIPTION: Demonstrates how to write two simple Playwright tests in Python. The first test checks the page title, while the second test clicks a link and verifies a heading.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.sync_api import Page, expect\n\ndef test_has_title(page: Page):\n    page.goto(\"https://playwright.dev/\")\n\n    # Expect a title \"to contain\" a substring.\n    expect(page).to_have_title(re.compile(\"Playwright\"))\n\ndef test_get_started_link(page: Page):\n    page.goto(\"https://playwright.dev/\")\n\n    # Click the get started link.\n    page.get_by_role(\"link\", name=\"Get started\").click()\n\n    # Expects page to have a heading with the name of Installation.\n    expect(page.get_by_role(\"heading\", name=\"Installation\")).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Auto-waiting Navigation and Interaction in Python (Sync)\nDESCRIPTION: Demonstrates how Playwright's synchronous API in Python automatically waits for elements to be actionable before interacting with them after navigation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Navigate and click element\n# Click will auto-wait for the element\npage.goto(\"https://example.com\")\npage.get_by_text(\"example domain\").click()\n```\n\n----------------------------------------\n\nTITLE: Using Relative URLs in Tests\nDESCRIPTION: Demonstrates how to use relative URLs in tests when baseURL is configured in the web server settings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // This will result in http://localhost:3000/foo\n  await page.goto('/foo');\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Properties from JSHandle in Python (Sync)\nDESCRIPTION: Illustrates getting properties from a JSHandle, specifically window and document objects, in Python with synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nhandle = page.evaluate_handle(\"({ window, document })\")\nproperties = handle.get_properties()\nwindow_handle = properties.get(\"window\")\ndocument_handle = properties.get(\"document\")\nhandle.dispose()\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Requests in Python (Async)\nDESCRIPTION: Demonstrates how to modify outgoing network requests in asynchronous Python. Examples include deleting headers from requests and changing the HTTP method to POST.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Delete header\nasync def handle_route(route):\n    headers = route.request.headers\n    del headers[\"x-secret\"]\n    await route.continue_(headers=headers)\nawait page.route(\"**/*\", handle_route)\n\n# Continue requests as POST.\nawait page.route(\"**/*\", lambda route: route.continue_(method=\"POST\"))\n```\n\n----------------------------------------\n\nTITLE: Launching Browser in Headed Mode with Slow Motion\nDESCRIPTION: Code to launch browsers in headed (non-headless) mode with slow motion to help with visual debugging by slowing down the execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Chromium, Firefox, or WebKit\nawait chromium.launch({ headless: false, slowMo: 100 });\n```\n\nLANGUAGE: java\nCODE:\n```\n// Chromium, Firefox, or WebKit\nchromium.launch(new BrowserType.LaunchOptions()\n  .setHeadless(false)\n  .setSlowMo(100));\n```\n\nLANGUAGE: python async\nCODE:\n```\n# Chromium, Firefox, or WebKit\nawait chromium.launch(headless=False, slow_mo=100)\n```\n\nLANGUAGE: python sync\nCODE:\n```\n# Chromium, Firefox, or WebKit\nchromium.launch(headless=False, slow_mo=100)\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Chromium, Firefox, or WebKit\nawait using var browser = await playwright.Chromium.LaunchAsync(new()\n{\n    Headless = false,\n    SlowMo = 100\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries via Command Line in Playwright\nDESCRIPTION: This bash command shows how to run Playwright tests with a specified number of retry attempts for failing tests using the command line interface.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Give failing tests 3 retry attempts\nnpx playwright test --retries=3\n```\n\n----------------------------------------\n\nTITLE: Monitoring New Pages with Event Listeners in Playwright\nDESCRIPTION: Examples of monitoring all new pages in a context using event listeners, which is useful when the action triggering new pages is unknown.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Get all new pages (including popups) in the context\ncontext.on('page', async page => {\n  await page.waitForLoadState();\n  console.log(await page.title());\n});\n```\n\nLANGUAGE: java\nCODE:\n```\n// Get all new pages (including popups) in the context\ncontext.onPage(page -> {\n  page.waitForLoadState();\n  System.out.println(page.title());\n});\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get all new pages (including popups) in the context (async)\nasync def handle_page(page):\n    await page.wait_for_load_state()\n    print(await page.title())\n\ncontext.on(\"page\", handle_page)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get all new pages (including popups) in the context (sync)\ndef handle_page(page):\n    page.wait_for_load_state()\n    print(page.title())\n\ncontext.on(\"page\", handle_page)\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Get all new pages (including popups) in the context\ncontext.Page += async  (_, page) => {\n    await page.WaitForLoadStateAsync();\n    Console.WriteLine(await page.TitleAsync());\n};\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Network Request in Playwright (.NET/C#)\nDESCRIPTION: Demonstrates how to asynchronously wait for a specific network request matching a URL pattern ('**/*logo*.png') using `page.WaitForRequestAsync` in Playwright for .NET (C#). The waiting task is started before the navigation action (`page.GotoAsync`) that triggers the request. The awaited task result is the `IRequest` object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar waitForRequestTask = page.WaitForRequestAsync(\"**/*logo*.png\");\nawait page.GotoAsync(\"https://wikipedia.org\");\nvar request = await waitForRequestTask;\nConsole.WriteLine(request.Url);\n```\n```\n\n----------------------------------------\n\nTITLE: Multiple Signed in Roles in Playwright - JavaScript\nDESCRIPTION: This JavaScript code demonstrates handling multiple user roles in Playwright, including setting up different authentication states for roles like 'admin' and 'user', allowing tests to run as various roles efficiently.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport { test as setup, expect } from '@playwright/test';\n\nconst adminFile = 'playwright/.auth/admin.json';\n\nsetup('authenticate as admin', async ({ page }) => {\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('admin');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  await page.waitForURL('https://github.com/');\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n  await page.context().storageState({ path: adminFile });\n});\n\nconst userFile = 'playwright/.auth/user.json';\n\nsetup('authenticate as user', async ({ page }) => {\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  await page.waitForURL('https://github.com/');\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n  await page.context().storageState({ path: userFile });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Project-Level Options\nDESCRIPTION: Shows how to configure options for specific projects in Playwright, including extending device presets and overriding settings like locale for individual browser configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        locale: 'de-DE',\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchPage in C#\nDESCRIPTION: C# implementation of a SearchPage class for Playwright. It demonstrates the page object model pattern with async/await in C#, providing methods for navigating to a search engine and performing searches.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\n\nnamespace BigEcommerceApp.Tests.Models;\n\npublic class SearchPage\n{\n  private readonly IPage _page;\n  private readonly ILocator _searchTermInput;\n\n  public SearchPage(IPage page)\n  {\n    _page = page;\n    _searchTermInput = page.Locator(\"[aria-label='Enter your search term']\");\n  }\n\n  public async Task GotoAsync()\n  {\n    await _page.GotoAsync(\"https://bing.com\");\n  }\n\n  public async Task SearchAsync(string text)\n  {\n    await _searchTermInput.FillAsync(text);\n    await _searchTermInput.PressAsync(\"Enter\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Catching TimeoutError in Playwright (Java)\nDESCRIPTION: This Java example demonstrates using the Playwright library (`com.microsoft.playwright`) to launch a Firefox browser and create a page. It shows how to set a timeout of 100ms for a click operation on the 'Example' locator using `Locator.ClickOptions` and how to catch the specific `com.microsoft.playwright.TimeoutError` if the operation exceeds this limit, printing \"Timeout!\" to the console.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n```java\npackage org.example;\n\nimport com.microsoft.playwright.*;\n\npublic class TimeoutErrorExample {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.firefox().launch();\n      BrowserContext context = browser.newContext();\n      Page page = context.newPage();\n      try {\n        page.locator(\"text=Example\").click(new Locator.ClickOptions().setTimeout(100));\n      } catch (TimeoutError e) {\n        System.out.println(\"Timeout!\");\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Accessibility Rules with axe-core and Playwright - JavaScript\nDESCRIPTION: This example shows how to disable specific accessibility rules with AxeBuilder.disableRules when certain rules are met with preexisting violations. The scan is performed on a particular page after disabling the 'duplicate-id' rule, and asserts that no violations remain except those intentionally excluded. The code depends on Playwright and @axe-core/playwright; rule IDs are passed as an array.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntest('should not have any accessibility violations outside of rules with known issues', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/page-with-known-issues');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .disableRules(['duplicate-id'])\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.toPass for Retrying Code Blocks\nDESCRIPTION: Demonstrates how to retry blocks of code until they pass successfully, which is useful for testing operations that may take time to complete.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(async () => {\n  const response = await page.request.get('https://api.example.com');\n  expect(response.status()).toBe(200);\n}).toPass();\n```\n\n----------------------------------------\n\nTITLE: Combining Locators via Logical 'And' in Playwright JavaScript\nDESCRIPTION: Shows how to chain Playwright's locators by combining a 'button' role locator and a locator for specific title text using the `and` method. Returns a combined locator to refine element targeting. Playwright must be installed for JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Routes with Custom Responses in JavaScript\nDESCRIPTION: Demonstrates how to fulfill routes with custom responses using Playwright in JavaScript. This example shows how to respond with a 404 status code and a custom message for all requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('**/*', async route => {\n  await route.fulfill({\n    status: 404,\n    contentType: 'text/plain',\n    body: 'Not Found!'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Video with Browser Context (C#)\nDESCRIPTION: This code shows how to create a new browser context with video recording enabled in C#, specifying the directory where videos will be saved.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await browser.NewContextAsync(new()\n{\n    RecordVideoDir = \"videos/\"\n});\n// Make sure to close, so that videos are saved.\nawait context.CloseAsync();\n```\n\n----------------------------------------\n\nTITLE: Declaring an Anonymous Test Group with Test.describe in JavaScript\nDESCRIPTION: Shows how to declare a test group without a title, which is useful for giving a group of tests a common option with test.use.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe(() => {\n  test.use({ colorScheme: 'dark' });\n\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State in Playwright\nDESCRIPTION: Defines the `checked` boolean parameter (aliased as `checkedState` in C#) for Playwright actions interacting with checkboxes. It determines whether the checkbox should be checked (`true`) or unchecked (`false`).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n- `checked` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Limited-Use Locator Handler with Times Option in C#\nDESCRIPTION: C# implementation of a locator handler that automatically removes itself after one use by setting the Times option to 1. This handler clicks on a newsletter dialog when it appears.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_95\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.AddLocatorHandlerAsync(page.GetByText(\"Sign up to the newsletter\"), async locator => {\n  await locator.ClickAsync();\n}, new() { Times = 1 });\n```\n\n----------------------------------------\n\nTITLE: Injecting Initialization Script via Path (Python Async)\nDESCRIPTION: Illustrates how to inject a pre-existing JavaScript file into all navigated pages/frames before their scripts run, using add_init_script in Playwright's async Python API. The path is resolved relative to the running script. Suitable for deterministic setup. Python async Playwright binding required.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_25\n\nLANGUAGE: python async\nCODE:\n```\n# in your playwright script, assuming the preload.js file is in same directory\nawait page.add_init_script(path=\"./preload.js\")\n```\n\n----------------------------------------\n\nTITLE: Using Frame.waitForFunction in Java\nDESCRIPTION: This example shows how to use Frame.waitForFunction in Java to wait for a specific condition related to the viewport size. It launches a Firefox browser, creates a new page, sets the viewport size, and waits for the inner width to become less than 100 pixels.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType firefox = playwright.firefox();\n      Browser browser = firefox.launch();\n      Page page = browser.newPage();\n      page.setViewportSize(50, 50);\n      page.mainFrame().waitForFunction(\"window.innerWidth < 100\");\n      browser.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Newsletter Dialog with Locator Handler in Java\nDESCRIPTION: Java implementation of a locator handler that automatically closes a newsletter signup dialog when it appears. The handler detects text matching 'Sign up to the newsletter' and clicks the 'No thanks' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_77\n\nLANGUAGE: java\nCODE:\n```\n// Setup the handler.\npage.addLocatorHandler(page.getByText(\"Sign up to the newsletter\"), () -> {\n  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"No thanks\")).click();\n});\n\n// Write the test as usual.\npage.navigate(\"https://example.com\");\npage.getByRole(\"button\", Page.GetByRoleOptions().setName(\"Start here\")).click();\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests on Specific Browser (PowerShell)\nDESCRIPTION: Commands to run Playwright tests on a specific browser (WebKit in this example) using environment variable in PowerShell.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n$env:BROWSER=\"webkit\"\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Running Playwright with Experimental TypeScript ESM Support\nDESCRIPTION: Command for running Playwright tests with experimental TypeScript ESM module support enabled, which allows importing ESM modules in TypeScript code without requiring a compile step.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev @playwright/test@1.18.0-rc1\nPW_EXPERIMENTAL_TS_ESM=1 npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Testing Inherited Context Options in Playwright\nDESCRIPTION: Demonstrates how to create a new context using the built-in browser fixture and verify that it inherits the options set in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should inherit use options on context when using built-in browser fixture', async ({\n  browser,\n}) => {\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  expect(await page.evaluate(() => navigator.userAgent)).toBe('some custom ua');\n  expect(await page.evaluate(() => window.innerWidth)).toBe(100);\n  await context.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Popup Window in Playwright (Sync Python)\nDESCRIPTION: Illustrates waiting for a popup window using the `page.expect_popup` synchronous context manager in Playwright for Python. The code within the `with` block (`page.get_by_text(...).click()`) triggers the popup, and the context manager waits for it. The value (`popup.value`) is the `Page` object of the popup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nwith page.expect_popup() as popup:\n  page.get_by_text(\"open the popup\").click()\npopup.value.goto(\"https://wikipedia.org\")\n```\n```\n\n----------------------------------------\n\nTITLE: ARIA Selected Option for Role Selectors\nDESCRIPTION: Defines the `selected` option for role-based selectors to match elements with a specific selected state.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_126\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `selected` <boolean>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Filtering Locators Example\nDESCRIPTION: This HTML snippet shows the structure of a product list, used to demonstrate locator filtering techniques.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <h3>Product 1</h3>\n    <button>Add to cart</button>\n  </li>\n  <li>\n    <h3>Product 2</h3>\n    <button>Add to cart</button>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Testing Inactivity Logout - Playwright Python Sync\nDESCRIPTION: Uses Playwright Python synchronous API to test inactivity-logout triggers by manipulating the clock and simulating inactivity. The snippet includes clock installation, interaction, fast forwarding, and verifying logout. Dependencies and behaviors match those in the async variant.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Initial time does not matter for the test, so we can pick current time.\npage.clock.install()\npage.goto(\"http://localhost:3333\")\n# Interact with the page\npage.get_by_role(\"button\").click()\n\n# Fast forward time 5 minutes as if the user did not do anything.\n# Fast forward is like closing the laptop lid and opening it after 5 minutes.\n# All the timers due will fire once immediately, as in the real browser.\npage.clock.fast_forward(\"05:00\")\n\n```\n\n----------------------------------------\n\nTITLE: Generating PDF with Screen Media in Java\nDESCRIPTION: Shows how to generate a PDF with 'screen' media type using Playwright in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_70\n\nLANGUAGE: java\nCODE:\n```\n// Generates a PDF with \"screen\" media type.\npage.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.SCREEN));\npage.pdf(new Page.PdfOptions().setPath(Paths.get(\"page.pdf\")));\n```\n\n----------------------------------------\n\nTITLE: Obtaining a JSHandle using evaluateHandle in Python (Sync)\nDESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.evaluate_handle` method in synchronous Python. This handle can subsequently be used for further JavaScript evaluations within the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python sync\njs_handle = page.evaluate_handle('window')\n#  Use jsHandle for evaluations.\n```\n```\n\n----------------------------------------\n\nTITLE: Sharding Playwright Tests for Multi-Machine Execution\nDESCRIPTION: These snippets show how to shard Playwright tests for execution across multiple machines using different package managers (npm, yarn, pnpm). The --shard flag is used to specify the shard number and total shards.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --shard=1/3\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright test --shard=1/3\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright test --shard=1/3\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Custom Tag Name Selector in Playwright for C#\nDESCRIPTION: This C# code demonstrates how to register and make use of a tag name-based custom selector engine with Playwright. It includes steps for registration and how to perform actions on elements found with custom selectors.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// Register the engine. Selectors will be prefixed with \"tag=\".\n// The script is evaluated in the page context.\nawait playwright.Selectors.Register(\"tag\", new() {\n  Script = @\"\n  // Must evaluate to a selector engine instance.\n  {\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n      return root.querySelector(selector);\n    },\n\n    // Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(selector));\n    }\n  }\"\n});\n\n// Now we can use \"tag=\" selectors.\nawait page.Locator(\"tag=button\").ClickAsync();\n\n// We can combine it with built-in locators.\nawait page.Locator(\"tag=div\").GetByText(\"Click me\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Using toBe Method in GenericAssertions\nDESCRIPTION: Shows various uses of the 'toBe' method for strict equality comparisons. It demonstrates comparing objects by reference and primitive values.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = { prop: 1 };\nexpect(value).toBe(value);\nexpect(value).not.toBe({});\nexpect(value.prop).toBe(1);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Interacting with Frame Objects in Playwright C#\nDESCRIPTION: This C# snippet shows multiple ways to access frame objects in Playwright: by frame name, URL, and by evaluating selectors via JavaScript, then interacting with the frame content. It includes creating the page, obtaining frames through various APIs, and filling an input element. Prerequisite: Microsoft.Playwright and an available 'context' object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a page.\nvar page = await context.NewPageAsync();\n\n// Get frame using the frame's name attribute\nvar frame = page.Frame(\"frame-login\");\n\n// Get frame using frame's URL\nvar frame = page.FrameByUrl(\"*domain.\");\n\n// Get frame using any other selector\nvar frameElementHandle = await page.EvaluateAsync(\"window.frames[1]\");\nvar frame = await frameElementHandle.ContentFrameAsync();\n\n// Interact with the frame\nawait frame.FillAsync(\"#username-input\", \"John\");\n```\n\n----------------------------------------\n\nTITLE: Negating Locator Assertions with '.not' in JavaScript\nDESCRIPTION: Shows how to use the `.not` property with Playwright Test assertions in JavaScript to invert the assertion logic. This specific example asserts that the given `locator` does *not* contain the text \"error\".\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait expect(locator).not.toContainText('error');\n```\n```\n\n----------------------------------------\n\nTITLE: Obtaining a JSHandle using EvaluateHandleAsync in C#\nDESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.EvaluateHandleAsync` method in C#. This handle can subsequently be used for further JavaScript evaluations within the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar jsHandle = await page.EvaluateHandleAsync(\"window\");\n//  Use jsHandle for evaluations.\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators in Playwright\nDESCRIPTION: Shows how to use Locator.filter() to narrow down element selection based on criteria like text content or the presence of child elements. The method can be chained to apply multiple filters sequentially.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nconst rowLocator = page.locator('tr');\n// ...\nawait rowLocator\n    .filter({ hasText: 'text in column 1' })\n    .filter({ has: page.getByRole('button', { name: 'column 2 button' }) })\n    .screenshot();\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator rowLocator = page.locator(\"tr\");\n// ...\nrowLocator\n    .filter(new Locator.FilterOptions().setHasText(\"text in column 1\"))\n    .filter(new Locator.FilterOptions().setHas(\n        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"column 2 button\"))\n    ))\n    .screenshot();\n```\n\nLANGUAGE: python\nCODE:\n```\nrow_locator = page.locator(\"tr\")\n# ...\nawait row_locator.filter(has_text=\"text in column 1\").filter(\n    has=page.get_by_role(\"button\", name=\"column 2 button\")\n).screenshot()\n```\n\nLANGUAGE: python\nCODE:\n```\nrow_locator = page.locator(\"tr\")\n# ...\nrow_locator.filter(has_text=\"text in column 1\").filter(\n    has=page.get_by_role(\"button\", name=\"column 2 button\")\n).screenshot()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar rowLocator = page.Locator(\"tr\");\n// ...\nawait rowLocator\n    .Filter(new() { HasText = \"text in column 1\" })\n    .Filter(new() {\n        Has = page.GetByRole(AriaRole.Button, new() { Name = \"column 2 button\" } )\n    })\n    .ScreenshotAsync();\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Network Request in Playwright (Java)\nDESCRIPTION: Shows how to wait for a specific network request matching a URL pattern ('**/*logo*.png') using `page.waitForRequest` in Playwright for Java. This method takes a URL pattern and a lambda expression containing the code (`page.navigate`) expected to trigger the request. It returns the matching `Request` object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\n// The callback lambda defines scope of the code that is expected to\n// trigger request.\nRequest request = page.waitForRequest(\"**/*logo*.png\", () -> {\n  page.navigate(\"https://wikipedia.org\");\n});\nSystem.out.println(request.url());\n```\n```\n\n----------------------------------------\n\nTITLE: Recording Trace in Python (Async)\nDESCRIPTION: Demonstrates how to programmatically record a trace using Python's async API. Includes browser launch, context creation, and trace configuration with screenshots and snapshots.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbrowser = await chromium.launch()\ncontext = await browser.new_context()\n\n# Start tracing before creating / navigating a page.\nawait context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\npage = await context.new_page()\nawait page.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\nawait context.tracing.stop(path = \"trace.zip\")\n```\n\n----------------------------------------\n\nTITLE: Java Trace Recording Implementation\nDESCRIPTION: Java example showing how to record traces using the BrowserContext tracing API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = browserType.launch();\nBrowserContext context = browser.newContext();\n\n// Start tracing before creating / navigating a page.\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true)\n  .setSources(true));\n\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\n\n// Stop tracing and export it into a zip archive.\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Proxy Settings\nDESCRIPTION: Sets up network proxy configuration for browser context. Supports HTTP and SOCKS proxies with optional authentication and domain bypass.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n- `proxy` <[Object]>\n  - `server` <[string]> Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example\n    `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n  - `bypass` ?<[string]> Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n  - `username` ?<[string]> Optional username to use if HTTP proxy requires authentication.\n  - `password` ?<[string]> Optional password to use if HTTP proxy requires authentication.\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Skipping in Playwright\nDESCRIPTION: Shows how to conditionally skip tests based on runtime conditions like browser type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('skip this test', async ({ page, browserName }) => {\n  test.skip(browserName === 'firefox', 'Still working on it');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring New Chromium Headless Mode - JavaScript\nDESCRIPTION: JavaScript configuration for using the new Chromium headless mode in Playwright tests\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'], channel: 'chromium' },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing system dependencies for Playwright browsers\nDESCRIPTION: This snippet provides commands to install system dependencies required for Playwright-supported browsers. This is especially important for CI environments to ensure all dependencies are met before running tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnpx playwright install-deps\n```\n\nLANGUAGE: java\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"install-deps\\\"\n```\n\nLANGUAGE: python\nCODE:\n```\nplaywright install-deps\n```\n\nLANGUAGE: csharp\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 install-deps\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode via npx - Bash\nDESCRIPTION: Starts Playwright tests in UI mode using npx, providing a graphical interface for debugging and monitoring test execution. Offers features such as time travel debugging, watch mode, and step-by-step inspection. Requires project setup and available test files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Using SnapshotAssertions.toMatchSnapshot for Customizable Screenshot Assertions (JavaScript)\nDESCRIPTION: This set of examples illustrates calling toMatchSnapshot with various parameters in Playwright. The first usage shows basic usage with a named snapshot, while others pass an options object to customize the allowable difference in pixels ('maxDiffPixels'), a threshold for image matching, and the ability to organize snapshots into client directories. Calls are made with the result of page.screenshot() and are meant for automated UI tests with Playwright's built-in snapshot comparison system.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-snapshotassertions.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Basic usage.\nexpect(await page.screenshot()).toMatchSnapshot('landing-page.png');\n```\n\nLANGUAGE: js\nCODE:\n```\n// Pass options to customize the snapshot comparison and have a generated name.\nexpect(await page.screenshot()).toMatchSnapshot('landing-page.png', {\n  maxDiffPixels: 27, // allow no more than 27 different pixels.\n});\n```\n\nLANGUAGE: js\nCODE:\n```\n// Configure image matching threshold.\nexpect(await page.screenshot()).toMatchSnapshot('landing-page.png', { threshold: 0.3 });\n```\n\nLANGUAGE: js\nCODE:\n```\n// Bring some structure to your snapshot files by passing file path segments.\nexpect(await page.screenshot()).toMatchSnapshot(['landing', 'step2.png']);\nexpect(await page.screenshot()).toMatchSnapshot(['landing', 'step3.png']);\n```\n\n----------------------------------------\n\nTITLE: Recording Playwright Traces for Debugging\nDESCRIPTION: Code snippet demonstrating how to record Playwright traces with screenshots and DOM snapshots for later inspection using the Trace Viewer tool.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_71\n\nLANGUAGE: js\nCODE:\n```\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\n\n// Start tracing before creating / navigating a page.\nawait context.tracing.start({ screenshots: true, snapshots: true });\n\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\n----------------------------------------\n\nTITLE: Handling Security Details Confirmation with Locator Handler in Python (Asynchronous)\nDESCRIPTION: Asynchronous Python implementation of a locator handler to automatically skip a security details confirmation page. The handler detects text matching 'Confirm your security details' and clicks the 'Remind me later' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_84\n\nLANGUAGE: python\nCODE:\n```\n# Setup the handler.\ndef handler():\n  await page.get_by_role(\"button\", name=\"Remind me later\").click()\nawait page.add_locator_handler(page.get_by_text(\"Confirm your security details\"), handler)\n\n# Write the test as usual.\nawait page.goto(\"https://example.com\")\nawait page.get_by_role(\"button\", name=\"Start here\").click()\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Playwright Test Reports\nDESCRIPTION: Configuration to include custom metadata in test reports that will be displayed in HTML and JSON formats.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  metadata: { title: 'acceptance tests' },\n});\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Fully Parallel Mode (JavaScript)\nDESCRIPTION: Demonstrates how to override the fully parallel mode for specific test describes, running them in default mode instead.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe('runs in parallel with other describes', () => {\n  test.describe.configure({ mode: 'default' });\n  test('in order 1', async ({ page }) => {});\n  test('in order 2', async ({ page }) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators in Playwright\nDESCRIPTION: Demonstrates how to use the new Locator.filter API to refine an existing locator. This example filters button elements to find one with specific text.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nconst buttons = page.locator('role=button');\n// ...\nconst submitButton = buttons.filter({ hasText: 'Submit' });\nawait submitButton.click();\n```\n\n----------------------------------------\n\nTITLE: Debugging a Specific Playwright Test File/Line (Bash)\nDESCRIPTION: Illustrates how to debug a specific test by providing the test filename and line number to the Playwright CLI, combined with the --debug flag. Works for NPM, Yarn, and PNPM setups and requires Playwright to be installed. Main use case: interactively debug targeted test cases. Inputs: test file path and line number. Output: inspector session focused on specified test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test example.spec.ts:9 --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright test example.spec.ts:9 --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright test example.spec.ts:9 --debug\n```\n\n----------------------------------------\n\nTITLE: Authentication Global Setup Example\nDESCRIPTION: Implementation of global setup that handles authentication and stores the authentication state for tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium, type FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL, storageState } = config.projects[0].use;\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.goto(baseURL!);\n  await page.getByLabel('User Name').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByText('Sign in').click();\n  await page.context().storageState({ path: storageState as string });\n  await browser.close();\n}\n\nexport default globalSetup;\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Visibility in Playwright\nDESCRIPTION: Shows how to filter elements based on their visibility status. This example selects only visible buttons from a set of elements, which helps avoid strictness violations when multiple elements match a selector but some are hidden.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('button').filter({ visible: true }).click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"button\").filter(new Locator.FilterOptions.setVisible(true)).click();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nawait page.locator(\"button\").filter(visible=True).click()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\npage.locator(\"button\").filter(visible=True).click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"button\").Filter(new() { Visible = true }).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Fetching and Modifying API Response in Python (Async)\nDESCRIPTION: Shows how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in Python with async/await syntax. This example adds a new breed to the dog API response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nasync def handle(route):\n    response = await route.fetch()\n    json = await response.json()\n    json[\"message\"][\"big_red_dog\"] = []\n    await route.fulfill(response=response, json=json)\n\nawait page.route(\"https://dog.ceo/api/breeds/list/all\", handle)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Fixture for Database User Isolation (TypeScript)\nDESCRIPTION: Defines a custom fixture that creates and manages isolated database users for each test worker, ensuring data isolation in parallel test runs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as baseTest, expect } from '@playwright/test';\n// Import project utils for managing users in the test database.\nimport { createUserInTestDatabase, deleteUserFromTestDatabase } from './my-db-utils';\n\nexport * from '@playwright/test';\nexport const test = baseTest.extend<{}, { dbUserName: string }>({\n  // Returns db user name unique for the worker.\n  dbUserName: [async ({ }, use) => {\n    // Use workerIndex as a unique identifier for each worker.\n    const userName = `user-${test.info().workerIndex}`;\n    // Initialize user in the database.\n    await createUserInTestDatabase(userName);\n    await use(userName);\n    // Clean up after the tests are done.\n    await deleteUserFromTestDatabase(userName);\n  }, { scope: 'worker' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NUnit Playwright Tests with .runsettings\nDESCRIPTION: This XML configuration specifies NUnit-specific settings, environment variables for debugging, and Playwright options such as browser selection and launch parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <!-- NUnit adapter -->  \n  <NUnit>\n    <NumberOfTestWorkers>24</NumberOfTestWorkers>\n  </NUnit>\n  <!-- General run configuration -->\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <!-- For debugging selectors, it's recommend to set the following environment variable -->\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n  <!-- Playwright -->  \n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n----------------------------------------\n\nTITLE: Accepting Standard Dialogs with Playwright (JavaScript)\nDESCRIPTION: Registers a handler for the 'dialog' event on a Playwright Page object. The handler automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears. This listener must be registered *before* the action that triggers the dialog (e.g., clicking a button).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\npage.on('dialog', dialog => dialog.accept());\nawait page.getByRole('button').click();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Selector for Playwright Query Operations\nDESCRIPTION: Defines the `selector` string parameter used in various Playwright methods to query for DOM elements based on a CSS or other supported selector syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n- `selector` <[string]>\n```\n\n----------------------------------------\n\nTITLE: Generating Locators with Playwright's Codegen\nDESCRIPTION: This snippet explains how to use Playwright's code generation tool to automatically generate locators by inspecting elements on a web page. It uses a command-line tool to open a browser and capture interactions, enhancing development productivity by reducing manually crafting locator queries.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpx playwright codegen playwright.dev\n```\n\nLANGUAGE: Bash\nCODE:\n```\nyarn playwright codegen playwright.dev\n```\n\nLANGUAGE: Bash\nCODE:\n```\npnpm exec playwright codegen playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript on All Matching Elements with Locator.evaluateAll in JavaScript\nDESCRIPTION: Shows how to execute JavaScript code on all matching elements using Locator.evaluateAll in JavaScript. Passes the array of matching elements to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('div');\nconst moreThanTen = await locator.evaluateAll((divs, min) => divs.length > min, 10);\n```\n\n----------------------------------------\n\nTITLE: Triggering Select-All Keyboard Shortcut in Playwright (C#)\nDESCRIPTION: This C# snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.Keyboard.PressAsync` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait page.Keyboard.PressAsync(\"ControlOrMeta+A\");\n```\n```\n\n----------------------------------------\n\nTITLE: CSS Class Assertion HTML Example\nDESCRIPTION: HTML structure showing a div element with multiple CSS classes for testing class assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div class='middle selected row' id='component'></div>\n```\n\n----------------------------------------\n\nTITLE: Using Clock API for Time Manipulation in Python\nDESCRIPTION: This code demonstrates how to use the new Clock API in Playwright to control and manipulate time within tests, including initializing a specific time, pausing at a certain point, and fast-forwarding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Initialize clock with some time before the test time and let the page load\n# naturally. `Date.now` will progress as the timers fire.\npage.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))\npage.goto(\"http://localhost:3333\")\n\n# Pretend that the user closed the laptop lid and opened it again at 10am.\n# Pause the time once reached that point.\npage.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\n\n# Assert the page state.\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Close the laptop lid again and open it at 10:30am.\npage.clock.fast_forward(\"30:00\")\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:30:00 AM\")\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using ElementHandle (Stale Potential) in C#\nDESCRIPTION: Shows finding an element using `page.QuerySelectorAsync` to get an [ElementHandle] and performing actions (hover, click) in C#. This method can lead to errors if the element becomes stale due to page updates.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar handle = await page.QuerySelectorAsync(\"text=Submit\");\nawait handle.HoverAsync();\nawait handle.ClickAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Aborting Network Requests in C#\nDESCRIPTION: Shows how to abort specific network requests in C#. Examples include aborting image requests and conditionally aborting requests based on resource type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"**/*.{png,jpg,jpeg}\", route => route.AbortAsync());\n\n// Abort based on the request type\nawait page.RouteAsync(\"**/*\", async route => {\nif (\"image\".Equals(route.Request.ResourceType))\n    await route.AbortAsync();\nelse\n    await route.ContinueAsync();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.press for Key Simulation and Screenshots in Playwright (Python Sync)\nDESCRIPTION: This synchronous Python snippet demonstrates the usage of `page.keyboard.press` to simulate pressing different keys ('a', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage = browser.new_page()\npage.goto(\"https://keycode.info\")\npage.keyboard.press(\"a\")\npage.screenshot(path=\"a.png\")\npage.keyboard.press(\"ArrowLeft\")\npage.screenshot(path=\"arrow_left.png\")\npage.keyboard.press(\"Shift+O\")\npage.screenshot(path=\"o.png\")\nbrowser.close()\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Trace Recording (Python Sync)\nDESCRIPTION: Illustrates the synchronous approach to recording a Playwright trace in Python. It launches a browser, creates a context, starts tracing (enabling screenshots and snapshots), navigates a page, and finally stops tracing, saving the result to 'trace.zip'. Uses the synchronous Playwright API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbrowser = chromium.launch()\ncontext = browser.new_context()\ncontext.tracing.start(screenshots=True, snapshots=True)\npage = context.new_page()\npage.goto(\"https://playwright.dev\")\ncontext.tracing.stop(path = \"trace.zip\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Playwright with TestNG in Java\nDESCRIPTION: Example of integrating Playwright with TestNG for browser automation testing. It demonstrates how to initialize Playwright and Browser instances in @BeforeClass, create new BrowserContext and Page for each test, and release resources properly in @AfterClass and @AfterMethod methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.testng.annotations.*;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.assertTrue;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  Playwright playwright;\n  Browser browser;\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeClass\n  void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterClass\n  void closeBrowser() {\n    playwright.close();\n  }\n\n  @BeforeMethod\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterMethod\n  void closeContext() {\n    context.close();\n  }\n\n  @Test\n  void shouldClickButton() {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox() {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertTrue((Boolean) page.evaluate(\"() => window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki() {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertEquals(\"https://en.wikipedia.org/wiki/Playwright\", page.url());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright APIRequestContext for GitHub API in Java\nDESCRIPTION: This snippet demonstrates the initial setup for API testing using Playwright and JUnit 5. It initializes Playwright and creates an APIRequestContext configured with a base URL for the GitHub API and necessary HTTP headers, including Accept and Authorization (using an environment variable for the token). Setup (@BeforeAll) and teardown (@AfterAll) methods manage the lifecycle of the Playwright and APIRequestContext instances.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.TestInstance;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String API_TOKEN = System.getenv(\"GITHUB_API_TOKEN\");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  void createPlaywright() {\n    playwright = Playwright.create();\n  }\n\n  void createAPIRequestContext() {\n    Map<String, String> headers = new HashMap<>();\n    // We set this header per GitHub guidelines.\n    headers.put(\"Accept\", \"application/vnd.github.v3+json\");\n    // Add authorization token to all requests.\n    // Assuming personal access token available in the environment.\n    headers.put(\"Authorization\", \"token \" + API_TOKEN);\n\n    request = playwright.request().newContext(new APIRequest.NewContextOptions()\n      // All requests we send go to this API endpoint.\n      .setBaseURL(\"https://api.github.com\")\n      .setExtraHTTPHeaders(headers));\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n  }\n\n  void disposeAPIRequestContext() {\n    if (request != null) {\n      request.dispose();\n      request = null;\n    }\n  }\n\n  void closePlaywright() {\n    if (playwright != null) {\n      playwright.close();\n      playwright = null;\n    }\n  }\n\n  @AfterAll\n  void afterAll() {\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: TodoPage Class Implementation\nDESCRIPTION: Page Object Model implementation for todo list page interactions. Provides methods for adding, removing, and managing todo items.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy in Playwright\nDESCRIPTION: Demonstrates how to set up HTTP proxy settings for Playwright browsers and contexts, including examples for global and per-context proxy configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      username: 'usr',\n      password: 'pwd'\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst browser = await chromium.launch({\n  proxy: {\n    server: 'http://myproxy.com:3128',\n    username: 'usr',\n    password: 'pwd'\n  }\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = chromium.launch(new BrowserType.LaunchOptions()\n  .setProxy(new Proxy(\"http://myproxy.com:3128\")\n  .setUsername(\"usr\")\n  .setPassword(\"pwd\")));\n```\n\nLANGUAGE: python\nCODE:\n```\nbrowser = await chromium.launch(proxy={\n  \"server\": \"http://myproxy.com:3128\",\n  \"username\": \"usr\",\n  \"password\": \"pwd\"\n})\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar proxy = new Proxy\n{\n    Server = \"http://myproxy.com:3128\",\n    Username = \"user\",\n    Password = \"pwd\"\n};\nawait using var browser = await BrowserType.LaunchAsync(new()\n{\n    Proxy = proxy\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('should use custom proxy on a new context', async ({ browser }) => {\n  const context = await browser.newContext({\n    proxy: {\n      server: 'http://myproxy.com:3128',\n    }\n  });\n  const page = await context.newPage();\n\n  await context.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Network Request in Playwright (Async Python)\nDESCRIPTION: Illustrates waiting for a specific network request using the `page.expect_request` async context manager in Playwright for Python. The code within the `async with` block (`page.goto`) is executed, and the context manager waits for a request matching the pattern ('**/*logo*.png'). The awaited value of the context manager (`first.value`) is the `Request` object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python async\nasync with page.expect_request(\"**/*logo*.png\") as first:\n  await page.goto(\"https://wikipedia.org\")\nfirst_request = await first.value\nprint(first_request.url)\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying API Responses in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to intercept an API response, modify it by adding a new fruit to the JSON data, and then fulfill the route with the modified response. It shows how to make the actual API request, transform the response, and verify the modified data appears on the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest('gets the json from api and adds a new fruit', async ({ page }) => {\n  // Get the response and add to it\n  await page.route('*/**/api/v1/fruits', async route => {\n    const response = await route.fetch();\n    const json = await response.json();\n    json.push({ name: 'Loquat', id: 100 });\n    // Fulfill using the original response, while patching the response body\n    // with the given JSON object.\n    await route.fulfill({ response, json });\n  });\n\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the new fruit is visible\n  await expect(page.getByText('Loquat', { exact: true })).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Projects with Different Directories in Playwright\nDESCRIPTION: Shows how to configure multiple test projects in Playwright, including smoke tests for different browsers and a separate project for Chrome stable. Each project uses a different test directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Smoke Chromium',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'chromium',\n      }\n    },\n    {\n      name: 'Smoke WebKit',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'webkit',\n      }\n    },\n    {\n      name: 'Smoke Firefox',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'firefox',\n      }\n    },\n    {\n      name: 'Chrome Stable',\n      testDir: './',\n      use: {\n        browserName: 'chromium',\n        channel: 'chrome',\n      }\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Multipart Form Data in C#\nDESCRIPTION: Example of uploading files using multipart/form-data encoding in C#. The example demonstrates creating a FilePayload with file name, MIME type, and content, then adding it to a multipart form for submission.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar file = new FilePayload()\n{\n    Name = \"f.js\",\n    MimeType = \"text/javascript\",\n    Buffer = System.Text.Encoding.UTF8.GetBytes(\"console.log(2022);\")\n};\nvar multipart = Context.APIRequest.CreateFormData();\nmultipart.Set(\"fileField\", file);\nawait request.PostAsync(\"https://example.com/api/uploadScript\", new() { Multipart = multipart });\n```\n\n----------------------------------------\n\nTITLE: Locating Elements Inside Frames with Playwright Python (Sync)\nDESCRIPTION: This synchronous Python snippet illustrates how to locate and fill an element inside a frame using Playwright. It demonstrates frame_locator and get_by_label APIs without async/await, useful for script-only scenarios or synchronous tests. Relies on Playwright for Python (sync), with '.frame-class' and 'User Name' as selectors.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_3\n\nLANGUAGE: python sync\nCODE:\n```\n# Locate element inside frame\n# Get frame using any other selector\nusername = page.frame_locator('.frame-class').get_by_label('User Name')\nusername.fill('John')\n```\n\n----------------------------------------\n\nTITLE: Configuring axe-core to Scan a Specific Part of a Page with Playwright - JavaScript\nDESCRIPTION: This example demonstrates how to limit an accessibility scan to a specific section of the page using AxeBuilder.include. The test navigates to a page, interacts with the UI to reveal a navigation menu, waits for the desired element to be present, and then restricts the accessibility analysis to the #navigation-menu-flyout element. Useful for targeting dynamic or interactive regions; dependencies are Playwright and @axe-core/playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntest('navigation menu should not have automatically detectable accessibility violations', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/');\n\n  await page.getByRole('button', { name: 'Navigation Menu' }).click();\n\n  // It is important to waitFor() the page to be in the desired\n  // state *before* running analyze(). Otherwise, axe might not\n  // find all the elements your test expects it to scan.\n  await page.locator('#navigation-menu-flyout').waitFor();\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .include('#navigation-menu-flyout')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Filtered Locator Count using Playwright\nDESCRIPTION: This code demonstrates how to assert the count of filtered locators using Playwright in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page\n    .getByRole('listitem')\n    .filter({ has: page.getByRole('heading', { name: 'Product 2' }) }))\n    .toHaveCount(1);\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page\n    .getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions()\n        .setHas(page.GetByRole(AriaRole.HEADING,\n                               new Page.GetByRoleOptions().setName(\"Product 2\")))))\n    .hasCount(1);\n```\n\nLANGUAGE: python\nCODE:\n```\nawait expect(\n    page.get_by_role(\"listitem\").filter(\n        has=page.get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() {\n        Has = page.GetByRole(AriaRole.Heading, new() { Name = \"Product 2\" })\n    }))\n    .ToHaveCountAsync(1);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with NPM Bash\nDESCRIPTION: This snippet executes Playwright tests using npm command `npx playwright test`. It assumes the environment has been set up, with all dependencies installed. It is essential for validating code changes through automated tests in JavaScript projects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Recording Browser Traces in Java\nDESCRIPTION: Shows how to record and export Playwright traces for debugging and inspection\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = playwright.chromium().launch();\nBrowserContext context = browser.newContext();\n\n// Start tracing before creating / navigating a page.\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true));\n\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\n\n// Stop tracing and export it into a zip archive.\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\n----------------------------------------\n\nTITLE: Using selectOption in Playwright with JavaScript\nDESCRIPTION: Demonstrates how to select options in a <select> element using different selection methods in JavaScript. Shows single selection by value, single selection by label, and multiple selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// single selection matching the value or label\nelement.selectOption('blue');\n\n// single selection matching the label\nelement.selectOption({ label: 'Blue' });\n\n// multiple selection for red, green and blue options\nelement.selectOption(['red', 'green', 'blue']);\n```\n\n----------------------------------------\n\nTITLE: Key Press Example - JavaScript\nDESCRIPTION: Example of using page.press() to simulate keyboard input on a webpage, including taking screenshots after each key press.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nconst page = await browser.newPage();\nawait page.goto('https://keycode.info');\nawait page.press('body', 'A');\nawait page.screenshot({ path: 'A.png' });\nawait page.press('body', 'ArrowLeft');\nawait page.screenshot({ path: 'ArrowLeft.png' });\nawait page.press('body', 'Shift+O');\nawait page.screenshot({ path: 'O.png' });\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Modifying API Responses in C#\nDESCRIPTION: This C# example demonstrates intercepting an API response, modifying it by adding a new fruit to the data, and fulfilling the route with the modified response. It shows how to use RouteAsync to handle the request, fetch the original response, add a new fruit to the array, and verify the modified content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"*/**/api/v1/fruits\", async (route) => {\n    var response = await route.FetchAsync();\n    var fruits = await response.JsonAsync<Fruit[]>();\n    fruits.Add(new Fruit() { Name = \"Loquat\", Id = 100 });\n    // Fulfill using the original response, while patching the response body\n    // with the given JSON object.\n    await route.FulfillAsync(new ()\n    {\n      Response = response,\n      Json = fruits\n    });\n  }\n);\n// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the Loquat fruit is visible\nawait Expect(page.GetByTextAsync(\"Loquat\", new () { Exact = true })).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Testing Automatic Logout after Inactivity in C#\nDESCRIPTION: Tests automatic user logout by simulating user inactivity using C# with Playwright's Clock API. The example installs a clock, navigates to a page, interacts with it, then fast-forwards time by 5 minutes to trigger and verify the inactivity logout message.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Initial time does not matter for the test, so we can pick current time.\nawait Page.Clock.InstallAsync();\nawait page.GotoAsync(\"http://localhost:3333\");\n\n// Interact with the page\nawait page.GetByRole(\"button\").ClickAsync();\n\n// Fast forward time 5 minutes as if the user did not do anything.\n// Fast forward is like closing the laptop lid and opening it after 5 minutes.\n// All the timers due will fire once immediately, as in the real browser.\nawait Page.Clock.FastForwardAsync(\"05:00\");\n\n// Check that the user was logged out automatically.\nawait Expect(Page.GetByText(\"You have been logged out due to inactivity.\")).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Action and Navigation Timeouts in Playwright Config (TypeScript)\nDESCRIPTION: This code shows how to set action and navigation timeouts in the Playwright configuration file. It sets a 10-second timeout for actions and a 30-second timeout for navigation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    actionTimeout: 10 * 1000,\n    navigationTimeout: 30 * 1000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Popups and Waiting for DOM Content in Python (Async)\nDESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in Python using async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_127\n\nLANGUAGE: python\nCODE:\n```\nasync with page.expect_popup() as page_info:\n    await page.get_by_role(\"button\").click() # click triggers a popup.\npopup = await page_info.value\n# Wait for the \"DOMContentLoaded\" event.\nawait popup.wait_for_load_state(\"domcontentloaded\")\nprint(await popup.title()) # popup is ready to use.\n```\n\n----------------------------------------\n\nTITLE: Auto-waiting Navigation and Interaction in C#\nDESCRIPTION: Demonstrates how Playwright in C# automatically waits for elements to be actionable before interacting with them after navigation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Navigate and click element\n// Click will auto-wait for the element\nawait page.GotoAsync(\"https://example.com\");\nawait page.GetByText(\"Example Domain\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Using toBeOK assertion with JavaScript\nDESCRIPTION: Usage example of the toBeOK method which ensures the response status code is within 200-299 range in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(response).toBeOK();\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport and High-DPI via Context/Page (C#)\nDESCRIPTION: This C# snippet shows using `Microsoft.Playwright` for: creating a context with a specific viewport using `ViewportSize`, resizing a page's viewport with `page.SetViewportSizeAsync`, and creating a high-DPI context using `ViewportSize` and `DeviceScaleFactor` options in `NewContextAsync`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Create context with given viewport\nawait using var context = await browser.NewContextAsync(new()\n{\n    ViewportSize = new ViewportSize() { Width = 1280, Height = 1024 }\n});\n\n// Resize viewport for individual page\nawait page.SetViewportSizeAsync(1600, 1200);\n\n// Emulate high-DPI\nawait using var context = await browser.NewContextAsync(new()\n{\n    ViewportSize = new ViewportSize() { Width = 2560, Height = 1440 },\n    DeviceScaleFactor = 2\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Running WebView2 Test with Playwright in Java\nDESCRIPTION: This Java test class demonstrates how to set up and run a test for a WebView2 application using Playwright. It initializes the WebView2 process, connects Playwright to it, and performs a simple navigation and element check.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Locator;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nimport java.io.IOException;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  static WebView2Process webview2Process;\n  static Playwright playwright;\n  static Browser browser;\n  static BrowserContext context;\n  static Page page;\n\n  @BeforeAll\n  static void launchBrowser() throws IOException {\n    playwright = Playwright.create();\n    webview2Process = new WebView2Process();\n    browser = playwright.chromium().connectOverCDP(\"http://127.0.0.1:\" + webview2Process.cdpPort);\n    context = browser.contexts().get(0);\n    page = context.pages().get(0);\n  }\n\n  @AfterAll\n  static void closeBrowser() {\n    webview2Process.dispose();\n  }\n\n  @Test\n  public void shouldClickButton() {\n    page.navigate(\"https://playwright.dev\");\n    Locator gettingStarted = page.getByText(\"Get started\");\n    assertThat(gettingStarted).isVisible();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Page and Taking a Screenshot in Python (Sync)\nDESCRIPTION: This snippet shows how to create a new page, navigate to a URL, and save a screenshot using Playwright in Python with synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = webkit.launch()\n    context = browser.new_context()\n    page = context.new_page()\n    page.goto(\"https://example.com\")\n    page.screenshot(path=\"screenshot.png\")\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Using toBeGreaterThanOrEqual Method for Numeric Comparisons\nDESCRIPTION: Demonstrates the use of 'toBeGreaterThanOrEqual' method to check if a value is greater than or equal to another value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = 42;\nexpect(value).toBeGreaterThanOrEqual(42);\n```\n\n----------------------------------------\n\nTITLE: Test Generator Example with Playwright Assertions in Python\nDESCRIPTION: Example test case using Playwright Python API to navigate to a page, interact with elements, and perform assertions on visibility, text content and input values.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import Page, expect\n\ndef test_example(page: Page) -> None:\n    page.goto(\"https://playwright.dev/\")\n    page.get_by_role(\"link\", name=\"Get started\").click()\n    expect(page.get_by_label(\"Breadcrumbs\").get_by_role(\"list\")).to_contain_text(\"Installation\")\n    expect(page.get_by_label(\"Search\")).to_be_visible()\n    page.get_by_label(\"Search\").click()\n    page.get_by_placeholder(\"Search docs\").fill(\"locator\")\n    expect(page.get_by_placeholder(\"Search docs\")).to_have_value(\"locator\");\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Requests in Python (Sync)\nDESCRIPTION: Shows how to modify outgoing network requests in synchronous Python. Examples include deleting headers from requests and changing the HTTP method to POST.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Delete header\ndef handle_route(route):\n    headers = route.request.headers\n    del headers[\"x-secret\"]\n    route.continue_(headers=headers)\npage.route(\"**/*\", handle_route)\n\n# Continue requests as POST.\npage.route(\"**/*\", lambda route: route.continue_(method=\"POST\"))\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Browser Contexts in Playwright Tests\nDESCRIPTION: Example of creating multiple browser contexts to simulate different users within a single test using the new_context fixture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import Page, BrowserContext\nfrom pytest_playwright.pytest_playwright import CreateContextCallback\n\ndef test_foo(page: Page, new_context: CreateContextCallback) -> None:\n    page.goto(\"https://example.com\")\n    context = new_context()\n    page2 = context.new_page()\n    # page and page2 are in different contexts\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events with Python Async in Playwright\nDESCRIPTION: Example of handling a browser dialog event in Playwright using Python's async API. The code defines a dialog handler function, launches Chromium asynchronously, registers the handler, and triggers an alert dialog.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def handle_dialog(dialog):\n    print(dialog.message)\n    await dialog.dismiss()\n\nasync def run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n    page = await browser.new_page()\n    page.on(\"dialog\", handle_dialog)\n    page.evaluate(\"alert('1')\")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using waitForSelector across navigations in Java\nDESCRIPTION: This snippet shows how to use the waitForSelector method to wait for an image element across multiple page navigations in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_145\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      Browser browser = chromium.launch();\n      Page page = browser.newPage();\n      for (String currentURL : Arrays.asList(\"https://google.com\", \"https://bbc.com\")) {\n        page.navigate(currentURL);\n        ElementHandle element = page.waitForSelector(\"img\");\n        System.out.println(\"Loaded image: \" + element.getAttribute(\"src\"));\n      }\n      browser.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Request Demo in C#\nDESCRIPTION: Demonstrates making GET requests using Playwright's Page.APIRequest functionality to interact with server APIs directly from tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// Do a GET request on behalf of page\nvar response = await Page.APIRequest.GetAsync(\"http://example.com/foo.json\");\nConsole.WriteLine(response.Status);\nConsole.WriteLine(response.StatusText);\nConsole.WriteLine(response.Ok);\nConsole.WriteLine(response.Headers[\"Content-Type\"]);\nConsole.WriteLine(await response.TextAsync());\nConsole.WriteLine((await response.JsonAsync())?.GetProperty(\"foo\").GetString());\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in Playwright Test\nDESCRIPTION: Configures the timezone for the test environment using the TestOptions.timezoneId property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    timezoneId: 'Europe/Rome',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selector on ElementHandle in Python (Sync)\nDESCRIPTION: Demonstrates evaluating a selector on an ElementHandle and extracting inner text in Python using synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ntweet_handle = page.query_selector(\".tweet\")\nassert tweet_handle.eval_on_selector(\".like\", \"node => node.innerText\") == \"100\"\nassert tweet_handle.eval_on_selector(\".retweets\", \"node => node.innerText\") == \"10\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Tests in Playwright\nDESCRIPTION: Demonstrates how to group related tests using test.describe() for logical organization.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two tests', () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Launching and Navigating with Playwright Java API - Java\nDESCRIPTION: Demonstrates launching a Chromium browser with Playwright in Java, navigating to a web page, and printing its title to the console. Requires the com.microsoft.playwright dependency and Java 8+. Key parameters include the browser type (chromium), and the URL loaded. The main output is the printed page title. No explicit error handling for navigation failures is shown; the snippet runs headlessly by default.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.*;\n\npublic class App {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n            Page page = browser.newPage();\n            page.navigate(\"https://playwright.dev\");\n            System.out.println(page.title());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Playwright to WebView2 using Python (Sync)\nDESCRIPTION: This snippet shows how to connect Playwright to a running WebView2 application using Python's synchronous syntax. It establishes a connection over CDP and retrieves the browser context and page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbrowser = playwright.chromium.connect_over_cdp(\"http://localhost:9222\")\ncontext = browser.contexts[0]\npage = context.pages[0]\n```\n\n----------------------------------------\n\nTITLE: Soft Assertions Example\nDESCRIPTION: Shows how to use soft assertions that don't terminate test execution on failure, with multiple checks and navigation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\nawait expect.soft(page.getByTestId('eta')).toHaveText('1 day');\n\n// ... and continue the test to check more things.\nawait page.getByRole('link', { name: 'next page' }).click();\nawait expect.soft(page.getByRole('heading', { name: 'Make another order' })).toBeVisible();\n```\n\n----------------------------------------\n\nTITLE: Declaring a Parallel Test Group with Test.describe.parallel in JavaScript\nDESCRIPTION: Demonstrates how to use test.describe.parallel to declare a group of tests that could be run in parallel.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe.parallel('group', () => {\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration with defineConfig in Playwright Test\nDESCRIPTION: Example of a basic Playwright Test configuration file that sets timeout, globalTimeout, reporter, and testDir options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 30000,\n  globalTimeout: 600000,\n  reporter: 'list',\n  testDir: './tests',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Context Options in JavaScript and Java\nDESCRIPTION: Demonstrates various browser context options including viewport settings, HTTPS error handling, and Content-Security-Policy bypassing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  viewport: { width: 1280, height: 720 },\n  screen: { width: 1920, height: 1080 },\n  acceptDownloads: true,\n  ignoreHTTPSErrors: false,\n  bypassCSP: false,\n  baseURL: \"http://localhost:3000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Playwright Server with Python Async API\nDESCRIPTION: Python code to connect to a remote Playwright server using the asynchronous API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import async_playwright\n\nasync with async_playwright() as p:\n    browser = await p.chromium.connect(\"ws://127.0.0.1:3000/\")\n```\n\n----------------------------------------\n\nTITLE: Handling Popups and Waiting for DOM Content in JavaScript\nDESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_125\n\nLANGUAGE: javascript\nCODE:\n```\nconst popupPromise = page.waitForEvent('popup');\nawait page.getByRole('button').click(); // Click triggers a popup.\nconst popup = await popupPromise;\nawait popup.waitForLoadState('domcontentloaded'); // Wait for the 'DOMContentLoaded' event.\nconsole.log(await popup.title()); // Popup is ready to use.\n```\n\n----------------------------------------\n\nTITLE: Asserting Element ID with toHaveId in Java\nDESCRIPTION: Shows how to use the toHaveId method (aliased as hasId in Java) to ensure that a locator points to an element with a specific DOM Node ID. This example checks if a textbox element has the ID 'lastname'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.getByRole(AriaRole.TEXTBOX)).hasId(\"lastname\");\n```\n\n----------------------------------------\n\nTITLE: Basic Web Server Configuration in Playwright\nDESCRIPTION: Basic configuration for launching a local development web server during Playwright tests, including server command, URL, and reuse options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n    stdout: 'ignore',\n    stderr: 'pipe',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Negating Locator Assertions with '.not()' in Java\nDESCRIPTION: Illustrates using the `.not()` method with Playwright Assertions (`assertThat`) in Java to check for the opposite condition. This code asserts that the specified `locator` does *not* contain the text \"error\".\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n```java\nassertThat(locator).not().containsText(\"error\");\n```\n```\n\n----------------------------------------\n\nTITLE: Using selectOption in Playwright with Python (async)\nDESCRIPTION: Demonstrates how to select options in a <select> element using different selection methods in Python with async syntax. Shows single selection by value, by label, and multiple selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_80\n\nLANGUAGE: python\nCODE:\n```\n# single selection matching the value or label\nawait element.select_option(\"blue\")\n# single selection matching the label\nawait element.select_option(label=\"blue\")\n# multiple selection for blue, red and second option\nawait element.select_option(value=[\"red\", \"green\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Using selectOption in Playwright with C#\nDESCRIPTION: Demonstrates how to select options in a <select> element using different selection methods in C#. Shows single selection by value, single selection by label, and multiple selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_82\n\nLANGUAGE: csharp\nCODE:\n```\n// single selection matching the value or label\nawait element.SelectOptionAsync(new[] { \"blue\" });\n// single selection matching the label\nawait element.SelectOptionAsync(new[] { new SelectOptionValue() { Label = \"blue\" } });\n// multiple selection for blue, red and second option\nawait element.SelectOptionAsync(new[] { \"red\", \"green\", \"blue\" });\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser Using Playwright C#\nDESCRIPTION: Illustrates launching Chromium with C# Playwright bindings, opening a page, navigating to a site, and closing the browser. Requires 'Microsoft.Playwright' NuGet package and async Task context. Inputs are limited to Playwright instance and browser options. Outputs are automated browser actions. Code must run in an async-compatible environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\\nusing System.Threading.Tasks;\\n\\nclass BrowserTypeExamples\\n{\\n    public static async Task Run()\\n    {\\n        using var playwright = await Playwright.CreateAsync();\\n        var chromium = playwright.Chromium;\\n        var browser = await chromium.LaunchAsync();\\n        var page = await browser.NewPageAsync();\\n        await page.GotoAsync(\\\"https://www.bing.com\\\");\\n        // other actions\\n        await browser.CloseAsync();\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies with Proxy for Playwright (Linux)\nDESCRIPTION: Commands to install Playwright system dependencies through a proxy on Linux. These commands must be run as root to properly pass proxy environment variables to the system package manager.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nsudo HTTPS_PROXY=https://192.0.2.1 npx playwright install-deps\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo HTTPS_PROXY=https://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install-deps\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo HTTPS_PROXY=https://192.0.2.1 playwright install-deps\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo HTTPS_PROXY=https://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install-deps\n```\n\n----------------------------------------\n\nTITLE: Playwright Browser Context Setup\nDESCRIPTION: Demonstrates how to set up an isolated browser context for test isolation in Playwright. Shows creation of browser, context, and page objects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = playwright.chromium().launch();\nBrowserContext context = browser.newContext();\nPage page = context.newPage();\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Errors with Playwright Events (Python Sync)\nDESCRIPTION: Handles and prints uncaught exceptions in Playwright's synchronous Python API by registering a 'pageerror' event handler. The code sets up the handler and navigates to a page that throws a JavaScript error. Output is printed to the terminal, and Playwright sync Python bindings are required.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_11\n\nLANGUAGE: python sync\nCODE:\n```\n# Log all uncaught errors to the terminal\npage.on(\"pageerror\", lambda exc: print(f\"uncaught exception: {exc}\"))\n\n# Navigate to a page with an exception.\npage.goto(\"data:text/html,<script>throw new Error('test')<\\/script>\")\n```\n\n----------------------------------------\n\nTITLE: Resetting Storage State for Specific Tests in Playwright\nDESCRIPTION: Demonstrates how to reset storage state for a specific test file to avoid being authenticated.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\n// Reset storage state for this file to avoid being authenticated\ntest.use({ storageState: { cookies: [], origins: [] } });\n\ntest('not signed in test', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Docker for Java Web Scraping\nDESCRIPTION: Command to run the Playwright Docker container for Java web scraping with security measures for untrusted websites.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/java:v%%VERSION%%-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Timing with Playwright in Python (Synchronous)\nDESCRIPTION: Illustrates synchronous event handling with Playwright in Python, waiting for a request to finish, navigating to a page, and then printing timing metrics. Requires Playwright and a page object. Uses a context manager without async. The timing data is printed after the 'requestfinished' event. Suitable for synchronous Playwright APIs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith page.expect_event(\\\"requestfinished\\\") as request_info:\\n    page.goto(\\\"http://example.com\\\")\\nrequest = request_info.value\\nprint(request.timing)\n```\n\n----------------------------------------\n\nTITLE: Marking Multiple Tests as Fixme in Playwright\nDESCRIPTION: This example shows how to mark multiple tests in a file or group as 'fixme' based on a condition using a single test.fixme call.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');\n\ntest('to be fixed in Safari 1', async ({ page }) => {\n  // ...\n});\ntest('to be fixed in Safari 2', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Form URL-encoded Data in Python\nDESCRIPTION: Example of sending a POST request with URL-encoded form data using Playwright's API request context in Python. The form data is passed as a dictionary to the form parameter and encoded appropriately.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nformData = {\n    \"title\": \"Book Title\",\n    \"body\": \"John Doe\",\n}\napi_request_context.post(\"https://example.com/api/findBook\", form=formData)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Multipart Form Data in Python\nDESCRIPTION: Example of uploading files using multipart/form-data encoding in Python. The example shows how to create a file payload with name, MIME type, and binary content and send it in a multipart form request.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\napi_request_context.post(\n  \"https://example.com/api/uploadScript'\",\n  multipart={\n    \"fileField\": {\n      \"name\": \"f.js\",\n      \"mimeType\": \"text/javascript\",\n      \"buffer\": b\"console.log(2022);\",\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Asserting Banner ARIA Snapshot using Playwright C#\nDESCRIPTION: This C# snippet shows how to perform an asynchronous ARIA snapshot test. It navigates to 'https://playwright.dev/', locates the 'banner' element, and uses `Expect(...).ToMatchAriaSnapshotAsync()` to assert its accessibility tree against the provided verbatim string literal representing the YAML snapshot template.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait page.GotoAsync(\"https://playwright.dev/\");\nawait Expect(page.Locator(\"banner\")).ToMatchAriaSnapshotAsync(@\"\n  - banner:\n    - heading \"\"Playwright enables reliable end-to-end testing for modern web apps.\"\" [level=1]\n    - link \"\"Get started\"\"\n    - link \"\"Star microsoft/playwright on GitHub\"\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n\");\n```\n```\n\n----------------------------------------\n\nTITLE: Creating New Browser Context in Async Playwright Python\nDESCRIPTION: This async Python snippet demonstrates using Playwright to create a new browser context and page with isolation from others. It showcases context management using Playwright’s async API, requiring the Playwright package and Python asyncio.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nbrowser = await playwright.firefox.launch() # or \"chromium\" or \"webkit\".\n# create a new incognito browser context.\ncontext = await browser.new_context()\n# create a new page in a pristine context.\npage = await context.new_page()\nawait page.goto(\"https://example.com\")\n\n# gracefully close up everything\nawait context.close()\nawait browser.close()\n```\n\n----------------------------------------\n\nTITLE: Mocking API Endpoints in C#\nDESCRIPTION: Shows how to intercept and mock API endpoints by handling network requests in C#. The example fulfills a request with custom status code and body data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"**/api/fetch_data\", async route => {\n  await route.FulfillAsync(new() { Status = 200, Body = testData });\n});\nawait page.GotoAsync(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Disabled State using Playwright LocatorAssertions\nDESCRIPTION: Ensures the Playwright Locator points to a disabled element. An element is considered disabled if it has the 'disabled' attribute or is disabled via 'aria-disabled'. Note that the 'disabled' attribute is only effective on native control elements (button, input, select, textarea, option, optgroup). A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst locator = page.locator('button.submit');\nawait expect(locator).toBeDisabled();\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nassertThat(page.locator(\"button.submit\")).isDisabled();\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nfrom playwright.async_api import expect\n\nlocator = page.locator(\"button.submit\")\nawait expect(locator).to_be_disabled()\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nfrom playwright.sync_api import expect\n\nlocator = page.locator(\"button.submit\")\nexpect(locator).to_be_disabled()\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar locator = Page.Locator(\"button.submit\");\nawait Expect(locator).ToBeDisabledAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Errors with Playwright Events (JavaScript)\nDESCRIPTION: Registers a callback to log uncaught exceptions in the page using the Playwright 'pageerror' event in JavaScript. Requires a Playwright page instance. The snippet also demonstrates triggering an error by navigating to a page that throws. The exception is logged to the terminal. No additional dependencies needed beyond Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// Log all uncaught errors to the terminal\npage.on('pageerror', exception => {\n  console.log(`Uncaught exception: \"${exception}\"`);\n});\n\n// Navigate to a page with an exception.\nawait page.goto('data:text/html,<script>throw new Error(\"Test\")<\\/script>');\n```\n\n----------------------------------------\n\nTITLE: Testing Battery Status with Mock API\nDESCRIPTION: Shows a complete test setup using the battery API mock, including beforeEach hook and assertions to verify UI updates based on mock data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest.beforeEach(async ({ page }) => {\n  await page.addInitScript(() => {\n    const mockBattery = {\n      level: 0.90,\n      charging: true,\n      chargingTime: 1800, // seconds\n      dischargingTime: Infinity,\n      addEventListener: () => { }\n    };\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => mockBattery;\n  });\n});\n\ntest('show battery status', async ({ page }) => {\n  await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('90%');\n  await expect(page.locator('.battery-status')).toHaveText('Adapter');\n  await expect(page.locator('.battery-fully')).toHaveText('00:30');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Server in Docker\nDESCRIPTION: Command to start a Playwright server in Docker that allows for remote connections from host systems or other machines.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3000:3000 --rm --init -it --workdir /home/pwuser --user pwuser mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/sh -c \"npx -y playwright@%%VERSION%% run-server --port 3000 --host 0.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Fixtures in Playwright Tests (Python)\nDESCRIPTION: Demonstrates how to use pytest fixtures with Playwright tests. This example shows a function-scoped fixture that runs before and after each test, navigating to a starting URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-python.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom playwright.sync_api import Page, expect\n\n@pytest.fixture(scope=\"function\", autouse=True)\ndef before_each_after_each(page: Page):\n    \n    print(\"before the test runs\")\n\n    # Go to the starting url before each test.\n    page.goto(\"https://playwright.dev/\")\n    yield\n    \n    print(\"after the test runs\")\n\ndef test_main_navigation(page: Page):\n    # Assertions use the expect API.\n    expect(page).to_have_url(\"https://playwright.dev/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Browser Contexts in Playwright (Java)\nDESCRIPTION: Demonstrates the Java implementation for creating multiple isolated `BrowserContext` objects (`userContext`, `adminContext`) from a single `Browser` instance using `browser.newContext()`. This enables testing scenarios requiring separate user sessions within a Java application using Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      // Create a Chromium browser instance\n      Browser browser = chromium.launch();\n      // Create two isolated browser contexts\n      BrowserContext userContext = browser.newContext();\n      BrowserContext adminContext = browser.newContext();\n      // Create pages and interact with contexts independently\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Playwright Assertions Example\nDESCRIPTION: Shows how to use Playwright's assertThat functionality to perform assertions on page elements. Demonstrates title verification using pattern matching.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.regex.Pattern;\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nassertThat(page).hasTitle(Pattern.compile(\"Playwright\"));\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in Playwright Java\nDESCRIPTION: This snippet illustrates download management in Playwright using Java. It waits for a file download event, initiates the download, and then saves the file. Necessary setup includes a Playwright page object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Wait for the download to start\nDownload download = page.waitForDownload(() -> {\n    // Perform the action that initiates download\n    page.getByText(\"Download file\").click();\n});\n\n// Wait for the download process to complete and save the downloaded file somewhere\ndownload.saveAs(Paths.get(\"/path/to/save/at/\", download.suggestedFilename()));\n```\n\nLANGUAGE: java\nCODE:\n```\npage.onDownload(download -> System.out.println(download.path()));\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Requests in Java\nDESCRIPTION: Shows how to wait for specific network requests in Java using both URL matching and predicate functions. Useful for ensuring requests have been made before proceeding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_136\n\nLANGUAGE: java\nCODE:\n```\n// Waits for the next request with the specified url\nRequest request = page.waitForRequest(\"https://example.com/resource\", () -> {\n  // Triggers the request\n  page.getByText(\"trigger request\").click();\n});\n\n// Waits for the next request matching some conditions\nRequest request = page.waitForRequest(request -> \"https://example.com\".equals(request.url()) && \"GET\".equals(request.method()), () -> {\n  // Triggers the request\n  page.getByText(\"trigger request\").click();\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Debug Mode with Environment Variables (Python)\nDESCRIPTION: Commands to run Playwright tests in debug mode by setting the PWDEBUG environment variable. This configures Playwright for debugging, opens the inspector, runs browsers in headed mode, and sets timeout to 0.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=1 pytest -s\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PWDEBUG=1\npytest -s\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PWDEBUG=1\npytest -s\n```\n\n----------------------------------------\n\nTITLE: WebSocket Routing in Playwright Python\nDESCRIPTION: Demonstrates how to intercept and mock WebSocket connections using the new routing API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\npage.route_web_socket(\"/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright for GitHub API Interaction in JavaScript\nDESCRIPTION: The code configures Playwright to interact with the GitHub API by setting a base URL and authorization headers. It shows how to define this in a configuration file or using test.use(). Dependencies include Node.js and Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using TestInfo.retry in Playwright Tests\nDESCRIPTION: Example showing how to access the retry count in test hooks and test functions. Used to handle test retries and perform cleanup operations on retry attempts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({}, testInfo) => {\n  // You can access testInfo.retry in any hook or fixture.\n  if (testInfo.retry > 0)\n    console.log(`Retrying!`);\n});\n\ntest('my test', async ({ page }, testInfo) => {\n  // Here we clear some server-side state when retrying.\n  if (testInfo.retry)\n    await cleanSomeCachesOnTheServer();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting New WebView Instances on AndroidDevice with Playwright JS\nDESCRIPTION: The AndroidDevice.webView event fires whenever a new WebView appears on the device, enabling automation or inspection. The event receives an AndroidWebView argument upon occurrence. Requires an active device connection; passes the new WebView instance as input and triggers associated handlers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Emitted when a new WebView instance is detected.\nandroidDevice.on('webView', webView => {\n  // Inspect or automate the webView\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Playwright browser test with device emulation\nDESCRIPTION: Creates a new browser context that emulates a Pixel 7 device, opens a new page, runs a test for pan gestures on a map, and finally closes the browser. This snippet demonstrates device-specific testing with Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(**p.devices['Pixel 7'])\npage = await context.new_page()\nawait test_pan_gesture_to_move_the_map(page)\nawait browser.close()\n```\n\n----------------------------------------\n\nTITLE: Using the Context Fixture in Playwright Test\nDESCRIPTION: Shows how to use the context fixture to configure the browser context for a test, such as setting up route interception. Each test gets an isolated BrowserContext instance.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('example test', async ({ page, context }) => {\n  await context.route('*external.com/*', route => route.abort());\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Pressing an Uppercase Character using Shift in Playwright (Java)\nDESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in Java. It shows two ways to achieve this using `page.keyboard().press()`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.keyboard().press(\"Shift+KeyA\");\n// or\npage.keyboard().press(\"Shift+A\");\n```\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Tests with forEach Loop in JavaScript\nDESCRIPTION: This snippet demonstrates how to create parameterized tests using a forEach loop. It iterates over an array of test cases, creating a unique test for each set of parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  // You can also do it with test.describe() or with multiple tests as long the test name is unique.\n  test(`testing with ${name}`, async ({ page }) => {\n    await page.goto(`https://example.com/greet?name=${name}`);\n    await expect(page.getByRole('heading')).toHaveText(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fixture-based Test Setup\nDESCRIPTION: Implementation of tests using custom fixtures, demonstrating improved test organization and reusability.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\n\n// Extend basic test by providing a \"todoPage\" fixture.\nconst test = base.extend<{ todoPage: TodoPage }>({\n  todoPage: async ({ page }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\n\ntest('should add an item', async ({ todoPage }) => {\n  await todoPage.addToDo('my item');\n  // ...\n});\n\ntest('should remove an item', async ({ todoPage }) => {\n  await todoPage.remove('item1');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in Python (Async)\nDESCRIPTION: Shows how to serve static files as responses to specific routes using Playwright in Python with async/await syntax. This example demonstrates serving a JSON file for a specific endpoint.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nawait page.route(\"**/xhr_endpoint\", lambda route: route.fulfill(path=\"mock_data.json\"))\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests on Multiple Browsers\nDESCRIPTION: Execute tests on multiple browsers by using the --project flag multiple times with different browser names.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --project webkit --project firefox\n```\n\n----------------------------------------\n\nTITLE: Handling Popups and Waiting for DOM Content in Java\nDESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_126\n\nLANGUAGE: java\nCODE:\n```\nPage popup = page.waitForPopup(() -> {\n  page.getByRole(AriaRole.BUTTON).click(); // Click triggers a popup.\n});\n// Wait for the \"DOMContentLoaded\" event\npopup.waitForLoadState(LoadState.DOMCONTENTLOADED);\nSystem.out.println(popup.title()); // Popup is ready to use.\n```\n\n----------------------------------------\n\nTITLE: Defining ARIA Snapshot Element Structure in YAML\nDESCRIPTION: This YAML snippet illustrates the format used for representing an accessible element within a Playwright ARIA snapshot. It shows the structure including the element's role, optional accessible name (which can be an exact string or a regex pattern), and optional attributes with their values enclosed in square brackets.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n- role \"name\" [attribute=value]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Path Mapping in Playwright\nDESCRIPTION: This JSON snippet shows a tsconfig.json configuration that enables path mapping in Playwright. It sets the baseUrl and defines a custom path mapping for a 'myhelper' package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@myhelper/*\": [\"packages/myhelper/*\"] // This mapping is relative to \"baseUrl\".\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Current Time Display - HTML\nDESCRIPTION: This HTML snippet dynamically updates a page element to show the current time every second using setInterval and toLocaleString. It's typically used as a simple time renderer for demonstration, highlighting the effect of clock manipulation in tests. No external dependencies are required; expected input is a loaded web page and output is an incrementing time displayed inside an element with id 'current-time'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\\\"current-time\\\" data-testid=\\\"current-time\\\"></div>\\n<script>\\n  const renderTime = () => {\\n    document.getElementById('current-time').textContent =\\n        new Date().toLocaleString();\\n  };\\n  setInterval(renderTime, 1000);\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling JSON WebSocket Messages with Playwright in JavaScript\nDESCRIPTION: Demonstrates handling JSON messages over a WebSocket connection using Playwright in JavaScript. Parses incoming messages and responds based on message content. Requires JSON support in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.routeWebSocket('wss://example.com/ws', ws => {\n  ws.onMessage(message => {\n    const json = JSON.parse(message);\n    if (json.request === 'question')\n      ws.send(JSON.stringify({ response: 'answer' }));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Text with Playwright Keyboard in Java\nDESCRIPTION: Shows how to use the Keyboard.type method in Java to input text instantly and with a delay to simulate user typing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n// Types instantly\npage.keyboard().type(\"Hello\");\n// Types slower, like a user\npage.keyboard().type(\"World\", new Keyboard.TypeOptions().setDelay(100));\n```\n\n----------------------------------------\n\nTITLE: Setting Global Test Options\nDESCRIPTION: Configures global options for all tests, such as browserName. These settings apply as default test options across the test suite.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    browserName: 'chromium',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Basic Screenshots in Playwright\nDESCRIPTION: Basic example of capturing a screenshot and saving it to a file. This demonstrates the simplest form of screenshot capture across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/screenshots.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.screenshot({ path: 'screenshot.png' });\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.screenshot(path=\"screenshot.png\")\n```\n\nLANGUAGE: python\nCODE:\n```\npage.screenshot(path=\"screenshot.png\")\n```\n\nLANGUAGE: java\nCODE:\n```\npage.screenshot(new Page.ScreenshotOptions()\n      .setPath(Paths.get(\"screenshot.png\")));\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.ScreenshotAsync(new()\n{\n    Path = \"screenshot.png\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Options in Fixtures in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use a custom option 'person' within a fixture, overriding the default 'page' fixture to set up a chat room with the person's name before each test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.extend<TestOptions>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n\n  // Override default \"page\" fixture.\n  page: async ({ page, person }, use) => {\n    await page.goto('/chat');\n    // We use \"person\" parameter as a \"name\" for the chat room.\n    await page.getByLabel('User Name').fill(person);\n    await page.getByText('Enter chat room').click();\n    // Each test will get a \"page\" that already has the person name.\n    await use(page);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication in Playwright\nDESCRIPTION: Shows how to set up HTTP authentication credentials for Playwright tests and browser contexts across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    httpCredentials: {\n      username: 'bill',\n      password: 'pa55w0rd',\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  httpCredentials: {\n    username: 'bill',\n    password: 'pa55w0rd',\n  },\n});\nconst page = await context.newPage();\nawait page.goto('https://example.com');\n```\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setHttpCredentials(\"bill\", \"pa55w0rd\"));\nPage page = context.newPage();\npage.navigate(\"https://example.com\");\n```\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(\n    http_credentials={\"username\": \"bill\", \"password\": \"pa55w0rd\"}\n)\npage = await context.new_page()\nawait page.goto(\"https://example.com\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = await Browser.NewContextAsync(new()\n{\n    HttpCredentials = new HttpCredentials\n    {\n        Username = \"bill\",\n        Password = \"pa55w0rd\"\n    },\n});\nvar page = await context.NewPageAsync();\nawait page.GotoAsync(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for Navigation in Playwright Tests\nDESCRIPTION: Example showing how to configure a base URL that will be prepended to relative URLs in navigation actions like page.goto('/').\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    baseURL: 'http://localhost:3000',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Strict Equality Check with toStrictEqual in JavaScript\nDESCRIPTION: Illustrates the usage of `expect().toStrictEqual()` for comparing both the contents and types of values in Playwright tests. Unlike `toEqual`, `toStrictEqual` checks for keys with undefined properties, array sparseness, and object types, ensuring a stricter comparison. The example shows a simple object comparison.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst value = { prop: 1 };\nexpect(value).toStrictEqual({ prop: 1 });\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Hooks with NUnit in Playwright\nDESCRIPTION: Example of using SetUp and TearDown hooks in NUnit with Playwright. The test navigates to playwright.dev and verifies the URL using the expect API. Demonstrates proper test fixture setup with parallelization support.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync(\"https://playwright.dev/\");\n    }\n\n    [SetUp]\n    public async Task SetUp()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Size in Playwright\nDESCRIPTION: Examples of setting the viewport size for a page before navigation. This method resizes the page and resets the screen size. It's recommended to set the viewport size before navigating to a page as many websites don't expect devices to change size.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nconst page = await browser.newPage();\nawait page.setViewportSize({\n  width: 640,\n  height: 480,\n});\nawait page.goto('https://example.com');\n```\n\nLANGUAGE: java\nCODE:\n```\nPage page = browser.newPage();\npage.setViewportSize(640, 480);\npage.navigate(\"https://example.com\");\n```\n\nLANGUAGE: python_async\nCODE:\n```\npage = await browser.new_page()\nawait page.set_viewport_size({\"width\": 640, \"height\": 480})\nawait page.goto(\"https://example.com\")\n```\n\nLANGUAGE: python_sync\nCODE:\n```\npage = browser.new_page()\npage.set_viewport_size({\"width\": 640, \"height\": 480})\npage.goto(\"https://example.com\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar page = await browser.NewPageAsync();\nawait page.SetViewportSizeAsync(640, 480);\nawait page.GotoAsync(\"https://www.microsoft.com\");\n```\n\n----------------------------------------\n\nTITLE: Overriding Page Fixture with Automatic Navigation in Playwright Test\nDESCRIPTION: Example showing how to override the built-in 'page' fixture to automatically navigate to the baseURL before each test. This allows tests to start from a predefined page without requiring navigation code in each test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  page: async ({ baseURL, page }, use) => {\n    await page.goto(baseURL);\n    await use(page);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Single Test File\nDESCRIPTION: Commands to debug a specific test file using Playwright Inspector across different shells.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=1 pytest -s test_example.py\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PWDEBUG=1\npytest -s test_example.py\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PWDEBUG=1\npytest -s test_example.py\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright and Dependencies with NPM Bash\nDESCRIPTION: The snippet installs necessary NPM packages and Playwright dependencies on a CI agent. It requires npm and npx, and installs the Playwright environment using the command `npx playwright install --with-deps`. It ensures the environment is ready for running Playwright tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install NPM packages\\nnpm ci\\n\\n# Install Playwright browsers and dependencies\\nnpx playwright install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload with FileChooser in Python (Async)\nDESCRIPTION: Illustrates how to handle file upload asynchronously using FileChooser in Playwright with Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with page.expect_file_chooser() as fc_info:\n    await page.get_by_text(\"Upload file\").click()\nfile_chooser = await fc_info.value\nawait file_chooser.set_files(\"myfile.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Test Steps in Playwright\nDESCRIPTION: Shows how to use test.step() to declare test steps in Playwright. It includes examples of basic usage, nested steps, and returning values from steps.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await test.step('Log in', async () => {\n    // ...\n  });\n\n  await test.step('Outer step', async () => {\n    // ...\n    // You can nest steps inside each other.\n    await test.step('Inner step', async () => {\n      // ...\n    });\n  });\n});\n\ntest('test', async ({ page }) => {\n  const user = await test.step('Log in', async () => {\n    // ...\n    return 'john';\n  });\n  expect(user).toBe('john');\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Response in C#\nDESCRIPTION: Shows C# implementation for waiting on HTTP responses using RunAndWaitForResponseAsync method. Demonstrates both URL-based and predicate-based approaches.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_143\n\nLANGUAGE: csharp\nCODE:\n```\n// Waits for the next response with the specified url.\nawait page.RunAndWaitForResponseAsync(async () =>\n{\n    await page.GetByText(\"trigger response\").ClickAsync();\n}, \"http://example.com/resource\");\n\n// Alternative way with a predicate.\nawait page.RunAndWaitForResponseAsync(async () =>\n{\n    await page.GetByText(\"trigger response\").ClickAsync();\n}, response => response.Url == \"https://example.com\" && response.Status == 200 && response.Request.Method == \"GET\");\n```\n\n----------------------------------------\n\nTITLE: Naming Test Configuration in Playwright\nDESCRIPTION: Configuration to set a custom name for the test configuration that appears in reports and during test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  name: 'acceptance tests',\n});\n```\n\n----------------------------------------\n\nTITLE: Recording HAR with Automatic Zipping in Playwright\nDESCRIPTION: Example of recording a HAR file with automatic zipping by using a .zip file extension in the recordHar option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  recordHar: {\n    path: 'github.har.zip',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using ToHaveURLAsync Assertion in C#\nDESCRIPTION: Example of using ToHaveURLAsync assertion in C# to verify page URL matches a regular expression pattern. This checks if the page URL contains 'checkout'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page).ToHaveURLAsync(new Regex(\".*checkout\"));\n```\n\n----------------------------------------\n\nTITLE: Using hasURL Assertion in Java\nDESCRIPTION: Example of using hasURL assertion in Java to verify page URL contains a specific string pattern. This checks if the page URL contains '.com'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page).hasURL(\".com\");\n```\n\n----------------------------------------\n\nTITLE: Taking a Screenshot with Playwright WebKit Driver - Java\nDESCRIPTION: Navigates to 'https://playwright.dev/' using Playwright's WebKit driver, takes a screenshot, and saves it as 'example.png'. Assumes Maven and Playwright Java are configured as per prior snippets. Accepts URL and screenshot path as key parameters. The output is a PNG screenshot file. The code uses headless browser mode by default and demonstrates options for capturing visual snapshots in tests or automation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class App {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.webkit().launch();\n      Page page = browser.newPage();\n      page.navigate(\"https://playwright.dev/\");\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"example.png\")));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function to BrowserContext in C#\nDESCRIPTION: This C# example demonstrates how to expose a SHA256 hashing function to all pages in a browser context using Playwright. It creates a new context, exposes the function, and then uses it in a page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System;\nusing System.Security.Cryptography;\nusing System.Threading.Tasks;\n\nclass BrowserContextExamples\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        var browser = await playwright.Webkit.LaunchAsync(new() { Headless = false });\n        var context = await browser.NewContextAsync();\n\n        await context.ExposeFunctionAsync(\"sha256\", (string input) =>\n        {\n            return Convert.ToBase64String(\n                SHA256.Create().ComputeHash(System.Text.Encoding.UTF8.GetBytes(input)));\n        });\n\n        var page = await context.NewPageAsync();\n        await page.SetContentAsync(\"<script>\\n\" +\n        \"  async function onClick() {\\n\" +\n        \"    document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\\n\" +\n        \"  }\\n\" +\n        \"</script>\\n\" +\n        \"<button onclick=\\\"onClick()\\\">Click me</button>\\n\" +\n        \"<div></div>\");\n\n        await page.GetByRole(AriaRole.Button).ClickAsync();\n        Console.WriteLine(await page.TextContentAsync(\"div\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Domain-Specific Permissions in JavaScript\nDESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright JavaScript library. This allows showing notifications only for the specified origin.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nawait context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n```\n\n----------------------------------------\n\nTITLE: Combining Locators via Logical 'And' in Playwright Java\nDESCRIPTION: In Playwright Java, creates a locator that matches both a 'button' role and the title 'Subscribe'. This narrows the selection for tighter element identification.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nLocator button = page.getByRole(AriaRole.BUTTON).and(page.getByTitle(\"Subscribe\"));\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Exceptions in Playwright (Java)\nDESCRIPTION: This Java snippet shows how to handle uncaught exceptions using Playwright's `onWebError` method on the BrowserContext. It defines a listener that prints the error message obtained from `webError.error()` to the standard output when an exception occurs in the page. The example includes navigating to a page that throws an error to demonstrate the functionality.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Log all uncaught errors to the terminal\ncontext.onWebError(webError -> {\n  System.out.println(\"Uncaught exception: \" + webError.error());\n});\n\n// Navigate to a page with an exception.\npage.navigate(\"data:text/html,<script>throw new Error('Test')</script>\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Fixtures with Execution Order in Playwright\nDESCRIPTION: Demonstrates the setup of test and worker-scoped fixtures with auto and manual configurations. Shows how fixtures are executed in order based on dependencies and scope.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nconst test = base.extend<{\n  testFixture: string,\n  autoTestFixture: string,\n  unusedFixture: string,\n}, {\n  workerFixture: string,\n  autoWorkerFixture: string,\n}>({ \n  workerFixture: [async ({ browser }) => {\n    // workerFixture setup...\n    await use('workerFixture');\n    // workerFixture teardown...\n  }, { scope: 'worker' }],\n\n  autoWorkerFixture: [async ({ browser }) => {\n    // autoWorkerFixture setup...\n    await use('autoWorkerFixture');\n    // autoWorkerFixture teardown...\n  }, { scope: 'worker', auto: true }],\n\n  testFixture: [async ({ page, workerFixture }) => {\n    // testFixture setup...\n    await use('testFixture');\n    // testFixture teardown...\n  }, { scope: 'test' }],\n\n  autoTestFixture: [async () => {\n    // autoTestFixture setup...\n    await use('autoTestFixture');\n    // autoTestFixture teardown...\n  }, { scope: 'test', auto: true }],\n\n  unusedFixture: [async ({ page }) => {\n    // unusedFixture setup...\n    await use('unusedFixture');\n    // unusedFixture teardown...\n  }, { scope: 'test' }],\n});\n\ntest.beforeAll(async () => { /* ... */ });\ntest.beforeEach(async ({ page }) => { /* ... */ });\ntest('first test', async ({ page }) => { /* ... */ });\ntest('second test', async ({ testFixture }) => { /* ... */ });\ntest.afterEach(async () => { /* ... */ });\ntest.afterAll(async () => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Saving a Downloaded File using SaveAsAsync in Playwright (C#)\nDESCRIPTION: This snippet illustrates how to use the asynchronous `download.SaveAsAsync()` method in C# to save the downloaded file, incorporating `download.SuggestedFilename` into the target path. Assumes a `Download` object is available and is called within an async method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nawait download.SaveAsAsync(\"/path/to/save/at/\" + download.SuggestedFilename);\n```\n\n----------------------------------------\n\nTITLE: JUnit Parallel Execution Configuration\nDESCRIPTION: Configuration settings for enabling parallel test execution in JUnit with Playwright\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njunit.jupiter.execution.parallel.enabled = true\njunit.jupiter.execution.parallel.mode.default = same_thread\njunit.jupiter.execution.parallel.mode.classes.default = concurrent\njunit.jupiter.execution.parallel.config.strategy=dynamic\njunit.jupiter.execution.parallel.config.dynamic.factor=0.5\n```\n\n----------------------------------------\n\nTITLE: Using firstWindow Method to Access Initial Electron Window\nDESCRIPTION: Demonstrates how to wait for and access the first window opened by an Electron application, which is a common pattern when automating Electron apps.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electronapplication.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst electronApp = await electron.launch({\n  args: ['main.js']\n});\nconst window = await electronApp.firstWindow();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function to BrowserContext in Python (Async)\nDESCRIPTION: This Python async example demonstrates how to expose a SHA256 hashing function to all pages in a browser context using Playwright. It creates a new context, exposes the function, and then uses it in a page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport hashlib\nfrom playwright.async_api import async_playwright, Playwright\n\ndef sha256(text: str) -> str:\n    m = hashlib.sha256()\n    m.update(bytes(text, \"utf8\"))\n    return m.hexdigest()\n\n\nasync def run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = await webkit.launch(headless=False)\n    context = await browser.new_context()\n    await context.expose_function(\"sha256\", sha256)\n    page = await context.new_page()\n    await page.set_content(\"\"\"\n        <script>\n          async function onClick() {\n            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n          }\n        </script>\n        <button onclick=\"onClick()\">Click me</button>\n        <div></div>\n    \"\"\")\n    await page.get_by_role(\"button\").click()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Detecting Print Dialogs with Playwright (Python Async)\nDESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()` in an async context. It uses `page.evaluate` to inject JavaScript replacing `window.print` with a function resolving a Promise, then uses `page.wait_for_function` to await the promise after clicking the print trigger.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait page.goto(\"<url>\")\n\nawait page.evaluate(\"(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()\")\nawait page.get_by_text(\"Print it!\").click()\n\nawait page.wait_for_function(\"window.waitForPrintDialog\")\n```\n```\n\n----------------------------------------\n\nTITLE: Typing Text with Playwright Keyboard in Python (Async)\nDESCRIPTION: Demonstrates the usage of the Keyboard.type method in Python with async syntax, showing both instant typing and delayed typing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nawait page.keyboard.type(\"Hello\") # types instantly\nawait page.keyboard.type(\"World\", delay=100) # types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Testing GitHub API Scenarios with Playwright and MSTest in C#\nDESCRIPTION: Implements a suite of API and UI test methods for GitHub issues using Playwright and MSTest in C#. The code demonstrates setup and teardown of API request contexts, creation and validation of both bug and feature issues by direct API requests, as well as repository lifecycle management through GitHub's REST API. Dependencies include Playwright for .NET, MSTest, and environment variables for GitHub credentials; required methods handle API requests, browser navigation, and assertions with proper cleanup between runs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string REPO = \"test-repo-2\";\n    static string USER = Environment.GetEnvironmentVariable(\"GITHUB_USER\");\n    static string? API_TOKEN = Environment.GetEnvironmentVariable(\"GITHUB_API_TOKEN\");\n\n    private IAPIRequestContext Request = null!;\n\n    [TestMethod]\n    public async Task ShouldCreateBugReport()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Bug] report 1\" },\n            { \"body\", \"Bug description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty(\"title\", out var title) == true)\n            {\n                if (title.GetString() == \"[Bug] report 1\")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual(\"Bug description\", issue?.GetProperty(\"body\").GetString());\n    }\n\n    [TestMethod]\n    public async Task ShouldCreateFeatureRequests()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { \"title\", \"[Feature] request 1\" },\n            { \"body\", \"Feature description\" }\n        };\n        var newIssue = await Request.PostAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync(\"/repos/\" + USER + \"/\" + REPO + \"/issues\");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty(\"title\", out var title) == true)\n            {\n                if (title.GetString() == \"[Feature] request 1\")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual(\"Feature description\", issue?.GetProperty(\"body\").GetString());\n    }\n\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n        await CreateTestRepository();\n    }\n\n    private async Task CreateAPIRequestContext()\n    {\n        var headers = new Dictionary<string, string>\n        {\n            // We set this header per GitHub guidelines.\n            { \"Accept\", \"application/vnd.github.v3+json\" },\n            // Add authorization token to all requests.\n            // Assuming personal access token available in the environment.\n            { \"Authorization\", \"token \" + API_TOKEN }\n        };\n\n        Request = await Playwright.APIRequest.NewContextAsync(new()\n        {\n            // All requests we send go to this API endpoint.\n            BaseURL = \"https://api.github.com\",\n            ExtraHTTPHeaders = headers,\n        });\n    }\n\n    private async Task CreateTestRepository()\n    {\n        var resp = await Request.PostAsync(\"/user/repos\", new()\n        {\n            DataObject = new Dictionary<string, string>()\n            {\n                [\"name\"] = REPO,\n            },\n        });\n        await Expect(resp).ToBeOKAsync();\n    }\n\n    [TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await DeleteTestRepository();\n        await Request.DisposeAsync();\n    }\n\n    private async Task DeleteTestRepository()\n    {\n        var resp = await Request.DeleteAsync(\"/repos/\" + USER + \"/\" + REPO);\n        await Expect(resp).ToBeOKAsync();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing default browsers using Playwright CLI\nDESCRIPTION: This snippet shows how to install the default set of browsers supported by Playwright using the command line interface in different languages. It's essential to use Playwright's CLI tool for browser installation to ensure compatibility with the testing framework.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nnpx playwright install\n```\n\nLANGUAGE: java\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"install\\\"\n```\n\nLANGUAGE: python\nCODE:\n```\nplaywright install\n```\n\nLANGUAGE: csharp\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n----------------------------------------\n\nTITLE: Querying All Inner Texts with Playwright Python (Async)\nDESCRIPTION: Asynchronously collects the `innerText` of all 'link' role elements via Playwright's Python async API. The output is a list of strings, one for each matched link. Requires Playwright installed and async context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ntexts = await page.get_by_role(\"link\").all_inner_texts()\n```\n\n----------------------------------------\n\nTITLE: Using SearchPage in Python Sync Tests\nDESCRIPTION: Example of how to use the synchronous SearchPage class in Python tests. It demonstrates initializing the page object with a browser page and using its methods for navigation and search in a synchronous manner.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom models.search import SearchPage\n\n# in the test\npage = browser.new_page()\nsearch_page = SearchPage(page)\nsearch_page.navigate()\nsearch_page.search(\"search query\")\n```\n\n----------------------------------------\n\nTITLE: Handling Console Events - Multiple Languages\nDESCRIPTION: Demonstrates how to capture and process console messages from the browser context, including handling different argument types and formats.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.on('console', async msg => {\n  const values = [];\n  for (const arg of msg.args())\n    values.push(await arg.jsonValue());\n  console.log(...values);\n});\nawait page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.onConsoleMessage(msg -> {\n  for (int i = 0; i < msg.args().size(); ++i)\n    System.out.println(i + \": \" + msg.args().get(i).jsonValue());\n});\npage.evaluate(\"() => console.log('hello', 5, { foo: 'bar' })\");\n```\n\nLANGUAGE: python\nCODE:\n```\ndef print_args(msg):\n    for arg in msg.args:\n        print(arg.json_value())\n\ncontext.on(\"console\", print_args)\npage.evaluate(\"console.log('hello', 5, { foo: 'bar' })\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Console += async (_, msg) =>\n{\n    foreach (var arg in msg.Args)\n        Console.WriteLine(await arg.JsonValueAsync<object>());\n};\n\nawait page.EvaluateAsync(\"console.log('hello', 5, { foo: 'bar' })\");\n```\n\n----------------------------------------\n\nTITLE: Building Custom Playwright Docker Image for JavaScript\nDESCRIPTION: Dockerfile to build a custom Docker image with Node.js and Playwright for JavaScript applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_22\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM node:20-bookworm\n\nRUN npx -y playwright@%%VERSION%% install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Locale and Timezone (JavaScript)\nDESCRIPTION: This snippet shows how to set the default browser locale and timezone for all tests globally within the Playwright Test configuration file (`playwright.config.ts`). The `locale` and `timezoneId` properties are set within the `use` object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"playwright.config.ts\"\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Emulates the browser locale.\n    locale: 'en-GB',\n\n    // Emulates the browser timezone.\n    timezoneId: 'Europe/Paris',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Create and Use a Custom Test Fixture for AxeBuilder in TypeScript\nDESCRIPTION: Shows how to extend base test with a custom fixture that configures AxeBuilder with common tags and exclusion patterns in TypeScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test as base } from '@playwright/test';\nimport AxeBuilder from '@axe-core/playwright';\n\ntype AxeFixture = {\n  makeAxeBuilder: () => AxeBuilder;\n};\n\n// Extend base test by providing \"makeAxeBuilder\"\n//\n// This new \"test\" can be used in multiple test files, and each of them will get\n// a consistently configured AxeBuilder instance.\nexport const test = base.extend<AxeFixture>({\n  makeAxeBuilder: async ({ page }, use) => {\n    const makeAxeBuilder = () => new AxeBuilder({ page })\n        .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n        .exclude('#commonly-reused-element-with-known-issue');\n\n    await use(makeAxeBuilder);\n  }\n});\nexport { expect } from '@playwright/test';\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Attachment using Playwright LocatorAssertions\nDESCRIPTION: Ensures that a Playwright Locator points to an element that is connected to a Document or a ShadowRoot. This assertion is available across multiple languages. It accepts an optional `attached` boolean parameter (defaulting implicitly to true) and a `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait expect(page.getByText('Hidden text')).toBeAttached();\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nassertThat(page.getByText(\"Hidden text\")).isAttached();\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait expect(page.get_by_text(\"Hidden text\")).to_be_attached()\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nexpect(page.get_by_text(\"Hidden text\")).to_be_attached()\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait Expect(Page.GetByText(\"Hidden text\")).ToBeAttachedAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Using Locator.pressSequentially() to Type Text in Playwright\nDESCRIPTION: Types text character by character into an element, allowing for configurable delay between keypresses to simulate human typing. Useful for forms or inputs with special keyboard handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nawait locator.pressSequentially('Hello'); // Types instantly\nawait locator.pressSequentially('World', { delay: 100 }); // Types slower, like a user\n```\n\nLANGUAGE: java\nCODE:\n```\nlocator.pressSequentially(\"Hello\"); // Types instantly\nlocator.pressSequentially(\"World\", new Locator.pressSequentiallyOptions().setDelay(100)); // Types slower, like a user\n```\n\nLANGUAGE: python\nCODE:\n```\nawait locator.press_sequentially(\"hello\") # types instantly\nawait locator.press_sequentially(\"world\", delay=100) # types slower, like a user\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator.press_sequentially(\"hello\") # types instantly\nlocator.press_sequentially(\"world\", delay=100) # types slower, like a user\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait locator.PressSequentiallyAsync(\"Hello\"); // Types instantly\nawait locator.PressSequentiallyAsync(\"World\", new() { Delay = 100 }); // Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State in Playwright with Python (async)\nDESCRIPTION: Demonstrates how to set the checked state of a checkbox element using the set_checked method in Python with async syntax. This example sets the checkbox to checked (True).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"checkbox\").set_checked(True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Recording in Playwright Test\nDESCRIPTION: Sets up trace recording for tests using the TestOptions.trace property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    trace: 'on-first-retry'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Launch Options in Playwright Tests\nDESCRIPTION: Example showing how to pass custom arguments to the browser when launching it, such as starting Chrome in maximized window mode, with a warning about potential risks.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        launchOptions: {\n          args: ['--start-maximized']\n        }\n      }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Browser Context in Playwright C#\nDESCRIPTION: This C# snippet uses Playwright to create and manage a new browser context for isolated sessions, with demonstration of context cleanup and navigation. It requires .NET and the Playwright C# library to execute asynchronous operations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Firefox.LaunchAsync();\n// Create a new incognito browser context.\nvar context = await browser.NewContextAsync();\n// Create a new page in a pristine context.\nvar page = await context.NewPageAsync(); ;\nawait page.GotoAsync(\"https://www.bing.com\");\n\n// Gracefully close up everything\nawait context.CloseAsync();\nawait browser.CloseAsync();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Playwright Server with Environment Variable\nDESCRIPTION: Command to connect Playwright tests to a remote Playwright server using an environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nPW_TEST_CONNECT_WS_ENDPOINT=ws://127.0.0.1:3000/ npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Setting Private Definitions and Libraries for Playwright in CMake\nDESCRIPTION: Defines the private compiler definitions and required libraries for the Playwright executable, including Windows-specific libraries and WebKit dependencies.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(Playwright_PRIVATE_DEFINITIONS _UNICODE)\nset(Playwright_PRIVATE_LIBRARIES\n    WebKit::WTF\n    comctl32\n    shlwapi\n    user32\n)\n```\n\n----------------------------------------\n\nTITLE: Detecting Print Dialogs with Playwright (Python Sync)\nDESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()` in a sync context. It uses `page.evaluate` to inject JavaScript replacing `window.print` with a function resolving a Promise, then uses `page.wait_for_function` to wait for the promise after clicking the print trigger.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.goto(\"<url>\")\n\npage.evaluate(\"(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()\")\npage.get_by_text(\"Print it!\").click()\n\npage.wait_for_function(\"window.waitForPrintDialog\")\n```\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Tests\nDESCRIPTION: This snippet shows how to use environment variables within a test to pass sensitive information like username and password without hardcoding them in the source code.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntest(`example test`, async ({ page }) => {\n  // ...\n  await page.getByLabel('User Name').fill(process.env.USER_NAME);\n  await page.getByLabel('Password').fill(process.env.PASSWORD);\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading Files via Multipart Form Data using Playwright APIRequestContext `fetch`\nDESCRIPTION: Shows how to upload files using the `fetch` method with `multipart/form-data` encoding in Playwright's `APIRequestContext`. This involves specifying file details (name, type, content/path) using language-specific constructs passed via the `multipart` option. Requires an initialized `APIRequestContext`. Returns an `APIResponse` (or equivalent Promise/Task).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst form = new FormData();\nform.set('name', 'John');\nform.append('name', 'Doe');\n// Send two file fields with the same name.\nform.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));\nform.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));\nawait request.fetch('https://example.com/api/uploadForm', {\n  multipart: form\n});\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\n// Pass file path to the form data constructor:\nPath file = Paths.get(\"team.csv\");\nAPIResponse response = request.fetch(\"https://example.com/api/uploadTeamList\",\n  RequestOptions.create().setMethod(\"post\").setMultipart(\n    FormData.create().set(\"fileField\", file)));\n\n// Or you can pass the file content directly as FilePayload object:\nFilePayload filePayload = new FilePayload(\"f.js\", \"text/javascript\",\n      \"console.log(2022);\".getBytes(StandardCharsets.UTF_8));\nAPIResponse response = request.fetch(\"https://example.com/api/uploadScript\",\n  RequestOptions.create().setMethod(\"post\").setMultipart(\n    FormData.create().set(\"fileField\", filePayload)));\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python\napi_request_context.fetch(\n  \"https://example.com/api/uploadScript\",  method=\"post\",\n  multipart={\n    \"fileField\": {\n      \"name\": \"f.js\",\n      \"mimeType\": \"text/javascript\",\n      \"buffer\": b\"console.log(2022);\",\n    },\n  })\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar file = new FilePayload()\n{\n    Name = \"f.js\",\n    MimeType = \"text/javascript\",\n    Buffer = System.Text.Encoding.UTF8.GetBytes(\"console.log(2022);\")\n};\nvar multipart = Context.APIRequest.CreateFormData();\nmultipart.Set(\"fileField\", file);\nawait Request.FetchAsync(\"https://example.com/api/uploadScript\", new() { Method = \"post\", Multipart = multipart });\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Playwright Tests (C#/.NET)\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow for running Playwright tests within a C#/.NET project. It activates on pushes and pull requests to the main/master branches. The workflow checks out the repository, sets up the .NET 8.0.x SDK, builds the project using `dotnet build`, installs the necessary Playwright browsers and their dependencies using the generated PowerShell script (`playwright.ps1`), and executes the tests using `dotnet test`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - name: Build & Install\n      run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run your tests\n      run: dotnet test\n\n```\n\n----------------------------------------\n\nTITLE: Using toHaveTitle Assertion in JavaScript\nDESCRIPTION: Example of using toHaveTitle assertion in JavaScript to verify page title matches a pattern. This checks if the page title contains 'checkout' using a regular expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page).toHaveTitle(/.*checkout/);\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Exceptions in Playwright (C#)\nDESCRIPTION: This C# snippet demonstrates attaching an event handler to the `WebError` event of a Playwright BrowserContext. It uses an event subscription `+=` with a lambda expression to define the handler, which writes the error message obtained from `webError.Error` to the console when an unhandled exception occurs in the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Log all uncaught errors to the terminal\ncontext.WebError += (_, webError) =>\n{\n  Console.WriteLine(\"Uncaught exception: \" + webError.Error);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Pinch Gesture for Google Maps with Playwright\nDESCRIPTION: This async Python script uses Playwright to simulate a pinch-in gesture on Google Maps. It includes functions for creating touch events, navigating to Google Maps, performing the pinch gesture, and taking a screenshot.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync def test_pinch_in_gesture_to_zoom_out_the_map(page):\n    await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')\n    await page.get_by_role('button', name='Keep using web').click()\n    await expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()\n    met = page.locator('[data-test-id=\"met\"]')\n    for _ in range(5):\n        await pinch(met, {'deltaX': 40, 'direction': 'in'})\n    await page.screenshot(path=\"screenshot.png\")\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        context = await browser.new_context(**p.devices['Pixel 7'])\n        page = await context.new_page()\n        await test_pinch_in_gesture_to_zoom_out_the_map(page)\n        await browser.close()\n\nimport asyncio\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in Dropdown Menus using Playwright\nDESCRIPTION: Shows how to use the `Locator.selectOption` (or `SelectOptionAsync` in C#) method in Playwright to select one or multiple options within a `<select>` HTML element. Options can be selected by their `value` attribute or their visible text label. Examples cover single selection by value/label and multiple selections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Single selection matching the value or label\nawait page.getByLabel('Choose a color').selectOption('blue');\n\n// Single selection matching the label\nawait page.getByLabel('Choose a color').selectOption({ label: 'Blue' });\n\n// Multiple selected items\nawait page.getByLabel('Choose multiple colors').selectOption(['red', 'green', 'blue']);\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\n// Single selection matching the value or label\npage.getByLabel(\"Choose a color\").selectOption(\"blue\");\n\n// Single selection matching the label\npage.getByLabel(\"Choose a color\").selectOption(new SelectOption().setLabel(\"Blue\"));\n\n// Multiple selected items\npage.getByLabel(\"Choose multiple colors\").selectOption(new String[] {\"red\", \"green\", \"blue\"});\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\n# Single selection matching the value or label\nawait page.get_by_label('Choose a color').select_option('blue')\n\n# Single selection matching the label\nawait page.get_by_label('Choose a color').select_option(label='Blue')\n\n# Multiple selected items\nawait page.get_by_label('Choose multiple colors').select_option(['red', 'green', 'blue'])\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\n# Single selection matching the value or label\npage.get_by_label('Choose a color').select_option('blue')\n\n# Single selection matching the label\npage.get_by_label('Choose a color').select_option(label='Blue')\n\n# Multiple selected items\npage.get_by_label('Choose multiple colors').select_option(['red', 'green', 'blue'])\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Single selection matching the value or label\nawait page.GetByLabel(\"Choose a color\").SelectOptionAsync(\"blue\");\n\n// Single selection matching the label\nawait page.GetByLabel(\"Choose a color\").SelectOptionAsync(new SelectOptionValue { Label = \"blue\" });\n\n// Multiple selected items\nawait page.GetByLabel(\"Choose multiple colors\").SelectOptionAsync(new[] { \"blue\", \"green\", \"red\" });\n```\n```\n\n----------------------------------------\n\nTITLE: Debugging All Tests\nDESCRIPTION: Commands to enable Playwright Inspector for debugging all tests across different shells.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=1 pytest -s\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PWDEBUG=1\npytest -s\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PWDEBUG=1\npytest -s\n```\n\n----------------------------------------\n\nTITLE: Testing Inactivity Logout - Playwright JavaScript\nDESCRIPTION: Demonstrates controlling the clock to simulate user inactivity for inactivity timeout feature tests using Playwright in JavaScript. Clock installation, page interaction, fast forwarding, and assertion of logout messages are shown. Requires Playwright and a page with inactivity logic; expects accurate assertion of logout due to lack of interaction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Initial time does not matter for the test, so we can pick current time.\nawait page.clock.install();\nawait page.goto('http://localhost:3333');\n// Interact with the page\nawait page.getByRole('button').click();\n\n// Fast forward time 5 minutes as if the user did not do anything.\n// Fast forward is like closing the laptop lid and opening it after 5 minutes.\n// All the timers due will fire once immediately, as in the real browser.\nawait page.clock.fastForward('05:00');\n\n// Check that the user was logged out automatically.\nawait expect(page.getByText('You have been logged out due to inactivity.')).toBeVisible();\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Responses in JavaScript\nDESCRIPTION: Demonstrates how to modify network responses in JavaScript. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('**/title.html', async route => {\n  // Fetch original response.\n  const response = await route.fetch();\n  // Add a prefix to the title.\n  let body = await response.text();\n  body = body.replace('<title>', '<title>My prefix:');\n  await route.fulfill({\n    // Pass all fields from the response.\n    response,\n    // Override response body.\n    body,\n    // Force content type to be html.\n    headers: {\n      ...response.headers(),\n      'content-type': 'text/html'\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Recording HAR File in Python (Sync)\nDESCRIPTION: Synchronous Python implementation for recording network traffic to a HAR file using Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef test_records_or_updates_the_har_file(page: Page):\n    # Get the response from the HAR file\n    page.route_from_har(\"./hars/fruit.har\", url=\"*/**/api/v1/fruits\", update=True)\n\n    # Go to the page\n    page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the fruit is visible\n    expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Loading Chrome Extension with Playwright in Headless Mode - Python Async\nDESCRIPTION: This Python script showcases how to run a Chrome extension in headless mode using Playwright asynchronously. It launches a persistent browser context similar to JavaScript, checking for a background page and performing tests before closing the context. The Playwright library is required as a dependency.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\npath_to_extension = \"./my-extension\"\nuser_data_dir = \"/tmp/test-user-data-dir\"\n\n\nasync def run(playwright: Playwright):\n    context = await playwright.chromium.launch_persistent_context(\n        user_data_dir,\n        channel=\"chromium\",\n        args=[\n            f\"--disable-extensions-except={path_to_extension}\",\n            f\"--load-extension={path_to_extension}\",\n        ],\n    )\n\n    if len(context.background_pages) == 0:\n        background_page = await context.wait_for_event('backgroundpage')\n    else:\n        background_page = context.background_pages[0]\n\n    # Test the background page as you would any other page.\n    await context.close()\n\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose API Logs in Python\nDESCRIPTION: Commands to enable verbose API logging in Playwright Python tests using the DEBUG environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pw:api pytest -s\n```\n\nLANGUAGE: batch\nCODE:\n```\nset DEBUG=pw:api\npytest -s\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:DEBUG=\"pw:api\"\npytest -s\n```\n\n----------------------------------------\n\nTITLE: JUnit Integration with Playwright Test Example\nDESCRIPTION: Demonstrates JUnit test class using Playwright's @UsePlaywright annotation to write browser automation tests. Shows navigation, assertions and element interactions using Page object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.junit.UsePlaywright;\nimport org.junit.jupiter.api.Test;\n\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@UsePlaywright\npublic class TestExample {\n  void shouldNavigateToInstallationGuide(Page page) {\n    page.navigate(\"https://playwright.dev/java/\");\n    page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Docs\")).click();\n    assertThat(page.getByRole(AriaRole.HEADING, new Page.GetByRoleOptions().setName(\"Installation\"))).isVisible();\n  }\n\n  @Test\n  void shouldCheckTheBox(Page page) {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertEquals(true, page.evaluate(\"window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki(Page page) {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertThat(page).hasURL(\"https://en.wikipedia.org/wiki/Playwright\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Locator Handler for Overlay Handling in Python\nDESCRIPTION: This code demonstrates how to use the new addLocatorHandler method to automatically handle overlays or dialogs that may appear during tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Setup the handler.\npage.add_locator_handler(\n    page.get_by_role(\"heading\", name=\"Hej! You are in control of your cookies.\"),\n    lambda: page.get_by_role(\"button\", name=\"Accept all\").click(),\n)\n# Write the test as usual.\npage.goto(\"https://www.ikea.com/\")\npage.get_by_role(\"link\", name=\"Collection of blue and white\").click()\nexpect(page.get_by_role(\"heading\", name=\"Light and easy\")).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Configuring Reporter in Playwright Configuration File\nDESCRIPTION: Shows how to specify a reporter programmatically in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'line',\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Codegen from Command Line - JavaScript - Bash\nDESCRIPTION: This snippet illustrates how to invoke Playwright's test code generator for a given URL using the Node.js-based CLI. The 'npx playwright codegen' command launches the interactive code generation session in a browser for a specified site. Requires Playwright to be installed in the current project, and 'npx' to be available. The first argument is the target URL for which to generate tests. Outputs a browser and inspector window for user-driven test recording.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright codegen demo.playwright.dev/todomvc\n```\n\n----------------------------------------\n\nTITLE: Enabling Offline Mode in Playwright Tests\nDESCRIPTION: Example showing how to simulate offline mode in the browser for tests, which can be useful for testing offline functionality and fallback behavior of web applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    offline: true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub API Access with Playwright Fixtures in Python\nDESCRIPTION: This snippet sets up a pytest fixture to configure an APIRequestContext for authenticated requests to GitHub\\'s REST API via Playwright in Python. It uses environment variables for the authorization token and attaches required headers to all requests. The fixture provides a session-scoped reusable context for multiple tests, ensuring correct initialization and disposal. Dependencies: pytest, playwright sync API, GitHub personal access token in environment variables.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-python.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\\nfrom typing import Generator\\n\\nimport pytest\\nfrom playwright.sync_api import Playwright, APIRequestContext\\n\\nGITHUB_API_TOKEN = os.getenv(\\\"GITHUB_API_TOKEN\\\")\\nassert GITHUB_API_TOKEN, \\\"GITHUB_API_TOKEN is not set\\\"\\n\\n\\n@pytest.fixture(scope=\\\"session\\\")\\ndef api_request_context(\\n    playwright: Playwright,\\n) -> Generator[APIRequestContext, None, None]:\\n    headers = {\\n        # We set this header per GitHub guidelines.\\n        \\\"Accept\\\": \\\"application/vnd.github.v3+json\\\",\\n        # Add authorization token to all requests.\\n        # Assuming personal access token available in the environment.\\n        \\\"Authorization\\\": f\\\"token {GITHUB_API_TOKEN}\\\",\\n    }\\n    request_context = playwright.request.new_context(\\n        base_url=\\\"https://api.github.com\\\", extra_http_headers=headers\\n    )\\n    yield request_context\\n    request_context.dispose()\\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Validating GitHub Issues with Playwright Test\nDESCRIPTION: This code demonstrates how to use Playwright to create and validate GitHub issues as part of automated tests. It uses Playwright's request fixture and assumes a repository already exists. Dependencies include Playwright and a valid GitHub personal access token.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\ntest('should create a bug report', async ({ request }) => {\n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Bug] report 1',\n      body: 'Bug description',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);\n  expect(issues.ok()).toBeTruthy();\n  expect(await issues.json()).toContainEqual(expect.objectContaining({\n    title: '[Bug] report 1',\n    body: 'Bug description'\n  }));\n});\n\ntest('should create a feature request', async ({ request }) => {\n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n      body: 'Feature description',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);\n  expect(issues.ok()).toBeTruthy();\n  expect(await issues.json()).toContainEqual(expect.objectContaining({\n    title: '[Feature] request 1',\n    body: 'Feature description'\n  }));\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Video Path (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access the path of the recorded video file associated with a page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = await page.video().path();\n```\n\n----------------------------------------\n\nTITLE: Evaluating JSHandle in JavaScript\nDESCRIPTION: Shows how to evaluate a JSHandle to get the innerText of a tweet's retweets element in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst tweetHandle = await page.$('.tweet .retweets');\nexpect(await tweetHandle.evaluate(node => node.innerText)).toBe('10 retweets');\n```\n\n----------------------------------------\n\nTITLE: Generating Tests from CSV File in TypeScript\nDESCRIPTION: This code demonstrates how to dynamically generate tests based on data from a CSV file using the csv-parse library. It reads the CSV file, parses its contents, and creates a test for each row in the file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport path from 'path';\nimport { test } from '@playwright/test';\nimport { parse } from 'csv-parse/sync';\n\nconst records = parse(fs.readFileSync(path.join(__dirname, 'input.csv')), {\n  columns: true,\n  skip_empty_lines: true\n});\n\nfor (const record of records) {\n  test(`foo: ${record.test_case}`, async ({ page }) => {\n    console.log(record.test_case, record.some_value, record.some_other_value);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Keyboard Input with Shift Modifier in Playwright (C#)\nDESCRIPTION: This C# snippet demonstrates how to use the Playwright Keyboard API to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It relies on the `page.Keyboard` object and its asynchronous methods `TypeAsync`, `PressAsync`, `DownAsync`, and `UpAsync`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait page.Keyboard.TypeAsync(\"Hello World!\");\nawait page.Keyboard.PressAsync(\"ArrowLeft\");\n\nawait page.Keyboard.DownAsync(\"Shift\");\nfor (int i = 0; i < \" World\".Length; i++)\n    await page.Keyboard.PressAsync(\"ArrowLeft\");\n\nawait page.Keyboard.UpAsync(\"Shift\");\n\nawait page.Keyboard.PressAsync(\"Backspace\");\n// Result text will end up saying \"Hello!\"\n```\n```\n\n----------------------------------------\n\nTITLE: Checking a Checkbox or Radio via Playwright Java\nDESCRIPTION: Uses Java Playwright to programmatically check an input of type checkbox. Only works with elements matching the role. Action is performed atomically and throws on mismatches.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_31\n\nLANGUAGE: Java\nCODE:\n```\npage.getByRole(AriaRole.CHECKBOX).check();\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Saving Downloads in Playwright (C#)\nDESCRIPTION: Presents the C# asynchronous approach. It starts the `page.WaitForDownloadAsync()` task *before* triggering the download with `page.GetByText(...).ClickAsync()`. It then awaits both the click and the download task completion. The file is saved using `download.SaveAsAsync()` and `download.SuggestedFilename`. Requires a Playwright `IPage` object and an element that initiates a download.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Start the task of waiting for the download before clicking\nvar waitForDownloadTask = page.WaitForDownloadAsync();\nawait page.GetByText(\"Download file\").ClickAsync();\nvar download = await waitForDownloadTask;\n\n// Wait for the download process to complete and save the downloaded file somewhere\nawait download.SaveAsAsync(\"/path/to/save/at/\" + download.SuggestedFilename);\n```\n\n----------------------------------------\n\nTITLE: Using to_be_ok assertion with Python Sync\nDESCRIPTION: Usage example of the to_be_ok method which ensures the response status code is within 200-299 range in Python sync API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.sync_api import expect\n\n# ...\nexpect(response).to_be_ok()\n```\n\n----------------------------------------\n\nTITLE: Verify Response Success\nDESCRIPTION: The `Response.ok` method checks if the HTTP status code signifies a successful request (status range 200-299). It returns a boolean indicating success.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst success = response.ok();\\nconsole.log('Success:', success);\n```\n\n----------------------------------------\n\nTITLE: Asserting Accessible Name using LocatorAssertions in Multiple Languages\nDESCRIPTION: Examples of using toHaveAccessibleName/hasAccessibleName to verify that an element has the expected accessible name. This is important for ensuring screen reader compatibility and accessibility compliance.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByTestId('save-button');\nawait expect(locator).toHaveAccessibleName('Save to disk');\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.getByTestId(\"save-button\");\nassertThat(locator).hasAccessibleName(\"Save to disk\");\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.get_by_test_id(\"save-button\")\nawait expect(locator).to_have_accessible_name(\"Save to disk\")\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.get_by_test_id(\"save-button\")\nexpect(locator).to_have_accessible_name(\"Save to disk\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.GetByTestId(\"save-button\");\nawait Expect(locator).ToHaveAccessibleNameAsync(\"Save to disk\");\n```\n\n----------------------------------------\n\nTITLE: Checking a Checkbox or Radio via Playwright Python (Async)\nDESCRIPTION: Asynchronously checks a checkbox or radio button found with Playwright's async Python API. Handles actionability checks and ensures the checked state. Throws if type is incorrect or if DOM changes during execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nawait page.get_by_role(\"checkbox\").check()\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State in Playwright with Python (sync)\nDESCRIPTION: Shows how to set the checked state of a checkbox element using the set_checked method in Python with synchronous syntax. This example sets the checkbox to checked (True).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_87\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_role(\"checkbox\").set_checked(True)\n```\n\n----------------------------------------\n\nTITLE: Checking Page Title with Playwright Test (JavaScript/TypeScript)\nDESCRIPTION: This snippet shows how to achieve similar functionality using Playwright Test. It demonstrates the simplified setup, built-in fixtures, and web-first assertions provided by the test framework.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, test, devices } from '@playwright/test';\n\ntest.use(devices['iPhone 11']);\n\ntest('should be titled', async ({ page, context }) => {\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  await expect(page).toHaveTitle('Example');\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Request Headers with Playwright Route.ContinueAsync - C#\nDESCRIPTION: Demonstrates interception and modification of HTTP request headers in C# using Playwright's RouteAsync and ContinueAsync methods. Needs Playwright C# bindings. The handler creates a new dictionary of headers, adds foo, removes origin, and forwards the request with altered headers. Cannot modify the 'Cookie' header in this way.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"**/*\", async route =>\n{\n    var headers = new Dictionary<string, string>(route.Request.Headers) { { \"foo\", \"bar\" } };\n    headers.Remove(\"origin\");\n    await route.ContinueAsync(new() { Headers = headers });\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in Python (Sync)\nDESCRIPTION: Examples of selecting options in a <select> element using Page.select_option method in Python with synchronous syntax. It demonstrates single and multiple selections using different selection criteria.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_104\n\nLANGUAGE: python\nCODE:\n```\n# Single selection matching the value or label\npage.select_option(\"select#colors\", \"blue\")\n# single selection matching both the label\npage.select_option(\"select#colors\", label=\"blue\")\n# multiple selection\npage.select_option(\"select#colors\", value=[\"red\", \"green\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Asserting CSS Properties with toHaveCSS in JavaScript\nDESCRIPTION: Demonstrates how to use the toHaveCSS method to assert that a locator resolves to an element with a specific computed CSS style. This example checks if a button element has a 'display' property set to 'flex'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByRole('button');\nawait expect(locator).toHaveCSS('display', 'flex');\n```\n\n----------------------------------------\n\nTITLE: Accessing and Interacting with Frame Objects in Playwright Java\nDESCRIPTION: This Java code illustrates getting frame objects by their name or a regular expression-matched URL with Playwright. It covers both frame selection methods and performing a fill operation. Dependencies include Playwright for Java and an initialized page object. The snippet uses 'frame-login' as the frame name, a regex for URL, and fills the username input.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Get frame using the frame\\\"s name attribute\nFrame frame = page.frame(\"frame-login\");\n\n// Get frame using frame\\\"s URL\nFrame frame = page.frameByUrl(Pattern.compile(\".*domain.*\"));\n\n// Interact with the frame\nframe.fill(\"#username-input\", \"John\");\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Emptiness using Playwright LocatorAssertions\nDESCRIPTION: Ensures the Playwright Locator points to an empty editable element (like an input with no value) or a DOM node that contains no text content. A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst locator = page.locator('div.warning');\nawait expect(locator).toBeEmpty();\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nassertThat(page.locator(\"div.warning\")).isEmpty();\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nfrom playwright.async_api import expect\n\nlocator = page.locator(\"div.warning\")\nawait expect(locator).to_be_empty()\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nfrom playwright.sync_api import expect\n\nlocator = page.locator(\"div.warning\")\nexpect(locator).to_be_empty()\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar locator = Page.Locator(\"div.warning\");\nawait Expect(locator).ToBeEmptyAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Using toHaveValue Assertion in Playwright\nDESCRIPTION: Shows how to validate input element values using toHaveValue assertion with regular expressions across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('input[type=number]');\nawait expect(locator).toHaveValue(/[0-9]/);\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\"input[type=number]\")\nawait expect(locator).to_have_value(re.compile(r\"[0-9]\"))\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Docker for .NET E2E Tests\nDESCRIPTION: Command to run the Playwright Docker container for .NET end-to-end testing where code is trusted.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Asserting DOM Element Focus in Playwright\nDESCRIPTION: Examples of using toBeFocused assertion to verify if a locator points to a focused DOM element. Shows implementation across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByRole('textbox');\nawait expect(locator).toBeFocused();\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.getByRole(AriaRole.TEXTBOX)).isFocused();\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import expect\n\nlocator = page.get_by_role(\"textbox\")\nawait expect(locator).to_be_focused()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.GetByRole(AriaRole.Textbox);\nawait Expect(locator).ToBeFocusedAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Popups and Waiting for DOM Content in Python (Sync)\nDESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in Python using synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_128\n\nLANGUAGE: python\nCODE:\n```\nwith page.expect_popup() as page_info:\n    page.get_by_role(\"button\").click() # click triggers a popup.\npopup = page_info.value\n# Wait for the \"DOMContentLoaded\" event.\npopup.wait_for_load_state(\"domcontentloaded\")\nprint(popup.title()) # popup is ready to use.\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Disabled State in Playwright\nDESCRIPTION: Shows how to check if an element is disabled using Playwright's isDisabled method across different programming languages. Returns a boolean indicating whether the element is disabled.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nconst disabled = await page.getByRole('button').isDisabled();\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean disabled = page.getByRole(AriaRole.BUTTON).isDisabled();\n```\n\nLANGUAGE: python-async\nCODE:\n```\ndisabled = await page.get_by_role(\"button\").is_disabled()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\ndisabled = page.get_by_role(\"button\").is_disabled()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nBoolean disabled = await page.GetByRole(AriaRole.Button).IsDisabledAsync();\n```\n\n----------------------------------------\n\nTITLE: Generating Screenshot Comparison in Playwright Test (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `toHaveScreenshot()` method to generate and compare screenshots in a Playwright test. It navigates to a page and expects the screenshot to match a reference.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Using APIResponseAssertions to verify API response in Python Sync\nDESCRIPTION: Example of making a GET request to a website and asserting that the response is OK (status code 200-299) using Python's synchronous API in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import Page, expect\n\ndef test_navigates_to_login_page(page: Page) -> None:\n    # ..\n    response = page.request.get('https://playwright.dev')\n    expect(response).to_be_ok()\n```\n\n----------------------------------------\n\nTITLE: Checking Element Hidden State in Playwright\nDESCRIPTION: Demonstrates how to check if an element is hidden using Playwright's isHidden method across different programming languages. Returns a boolean indicating whether the element is hidden.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nconst hidden = await page.getByRole('button').isHidden();\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean hidden = page.getByRole(AriaRole.BUTTON).isHidden();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nhidden = await page.get_by_role(\"button\").is_hidden()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nhidden = page.get_by_role(\"button\").is_hidden()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nBoolean hidden = await page.GetByRole(AriaRole.Button).IsHiddenAsync();\n```\n\n----------------------------------------\n\nTITLE: Debugging Specific Playwright Test at Line Number\nDESCRIPTION: Debug a specific test from a particular line number using the Playwright Inspector by specifying the file name, line number, and --debug flag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test example.spec.ts:10 --debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries and Timeout with Test.describe.configure in JavaScript\nDESCRIPTION: Shows how to configure retries and timeout for each test using test.describe.configure.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Each test in the file will be retried twice and have a timeout of 20 seconds.\ntest.describe.configure({ retries: 2, timeout: 20_000 });\ntest('runs first', async ({ page }) => {});\ntest('runs second', async ({ page }) => {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Playwright Tests (C#)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests in a containerized environment for a C# project. It uses the official Playwright .NET Docker image, sets up .NET SDK 8.0, builds the project, and runs the tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_31\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n\nsteps:\n- task: UseDotNet@2\n  inputs:\n    packageType: sdk\n    version: '8.0.x'\n  displayName: 'Use .NET SDK'\n\n- script: dotnet build --configuration Release\n  displayName: 'Build'\n- script: dotnet test --configuration Release\n  displayName: 'Run tests'\n```\n\n----------------------------------------\n\nTITLE: Configuring Other Options in Playwright Config\nDESCRIPTION: Sets various other options such as action timeout, browser name, CSP bypassing, browser channel, headless mode, and custom test ID attribute for all tests in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Maximum time each action such as `click()` can take. Defaults to 0 (no limit).\n    actionTimeout: 0,\n\n    // Name of the browser that runs tests. For example `chromium`, `firefox`, `webkit`.\n    browserName: 'chromium',\n\n    // Toggles bypassing Content-Security-Policy.\n    bypassCSP: true,\n\n    // Channel to use, for example \"chrome\", \"chrome-beta\", \"msedge\", \"msedge-beta\".\n    channel: 'chrome',\n\n    // Run browser in headless mode.\n    headless: false,\n\n    // Change the default data-testid attribute.\n    testIdAttribute: 'pw-test-id',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Saving a Downloaded File using save_as in Playwright (Python Async)\nDESCRIPTION: This snippet demonstrates calling the asynchronous `download.save_as()` method in Python to save a file. It uses `download.suggested_filename` to get the file name. Assumes a `download` object is available within an async function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait download.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in Playwright C#\nDESCRIPTION: Demonstrates the use of async/await patterns in C# to manage file downloads in Playwright. The snippet waits for download initiation, then saves the file upon download completion. Requires Playwright and a .NET environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Start the task of waiting for the download before clicking\nvar waitForDownloadTask = page.WaitForDownloadAsync();\nawait page.GetByText(\"Download file\").ClickAsync();\nvar download = await waitForDownloadTask;\n\n// Wait for the download process to complete and save the downloaded file somewhere\nawait download.SaveAsAsync(\"/path/to/save/at/\" + download.SuggestedFilename);\n```\n\nLANGUAGE: csharp\nCODE:\n```\npage.Download += (sender, download) => Console.WriteLine(download.Url);\n```\n\n----------------------------------------\n\nTITLE: Dragging Elements with Locator.dragTo in JavaScript\nDESCRIPTION: Demonstrates how to drag a source element to a target element in JavaScript using Playwright's Locator.dragTo method. Can specify exact positions relative to the top-left corners of the elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = page.locator('#source');\nconst target = page.locator('#target');\n\nawait source.dragTo(target);\n// or specify exact positions relative to the top-left corners of the elements:\nawait source.dragTo(target, {\n  sourcePosition: { x: 34, y: 7 },\n  targetPosition: { x: 10, y: 20 },\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Custom Fixtures from Multiple Modules in Playwright\nDESCRIPTION: Shows how to combine test fixtures from multiple files or modules using mergeTests utility.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mergeTests } from '@playwright/test';\nimport { test as dbTest } from 'database-test-utils';\nimport { test as a11yTest } from 'a11y-test-utils';\n\nexport const test = mergeTests(dbTest, a11yTest);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from './fixtures';\n\ntest('passes', async ({ database, page, a11y }) => {\n  // use database and a11y fixtures.\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Playwright Firefox Browser in Headed and Slow-Mo Mode - Java\nDESCRIPTION: Configures and launches Playwright Firefox browser with the UI visible (headless mode off) and a slow-motion delay per action. Requires previous Playwright Java setup. Key parameters include headless set to false and slowMo set to 50ms, aiding in debugging or observing test execution. No navigation or further operations are executed in this snippet.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nplaywright.firefox().launch(new BrowserType.LaunchOptions().setHeadless(false).setSlowMo(50));\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Directory in Playwright\nDESCRIPTION: Configuration to specify custom output directory for test execution files and example of creating temporary files during tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  outputDir: './test-results',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');\n});\n```\n\n----------------------------------------\n\nTITLE: WebSocketRoute.onClose Handler - JavaScript/Python\nDESCRIPTION: Function handler for WebSocket closure events. Receives optional close code and reason. Disables default forwarding of closure when set.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(code, reason): Promise<any>|any\n```\n\n----------------------------------------\n\nTITLE: Using TestInfo for File Output in Playwright Tests\nDESCRIPTION: This snippet demonstrates how to safely write temporary files during test execution using the outputPath method, which ensures files from parallel tests don't conflict.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('dir', 'temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the dir/temporary-file.txt', 'utf8');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Test Execution\nDESCRIPTION: Commands demonstrating how to configure Playwright test execution, including running in headed mode, specifying projects, and controlling parallelization.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-cli-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --headed\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --project=chromium\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --workers=1\n```\n\n----------------------------------------\n\nTITLE: Declaring Skipped Test Group in JavaScript\nDESCRIPTION: Demonstrates how to declare a skipped test group using test.describe.skip(). Tests in this group will never be run, which is useful for temporarily disabling a set of tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe.skip('skipped group', () => {\n  test('example', async ({ page }) => {\n    // This test will not run\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in JavaScript\nDESCRIPTION: Examples of selecting options in a <select> element using Page.selectOption method in JavaScript. It shows single and multiple selections using various selection criteria.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// Single selection matching the value or label\npage.selectOption('select#colors', 'blue');\n\n// single selection matching the label\npage.selectOption('select#colors', { label: 'Blue' });\n\n// multiple selection\npage.selectOption('select#colors', ['red', 'green', 'blue']);\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Content in Shadow DOM using Playwright\nDESCRIPTION: This code demonstrates how to assert that the 'x-details' element contains the text 'Details' using Playwright in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.locator('x-details')).toContainText('Details');\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.locator(\"x-details\")).containsText(\"Details\");\n```\n\nLANGUAGE: python\nCODE:\n```\nawait expect(page.locator(\"x-details\")).to_contain_text(\"Details\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page.Locator(\"x-details\")).ToContainTextAsync(\"Details\");\n```\n\n----------------------------------------\n\nTITLE: Upgrading Playwright Dependency to Latest Version (Bash)\nDESCRIPTION: Shows commands to upgrade '@playwright/test' to the latest version for NPM, Yarn, and PNPM environments. This ensures compatibility with the newest browser versions and features. Dependencies: existing Playwright setup and access to relevant package manager. Required parameter: @latest. Output: updated dependency version in project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @playwright/test@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @playwright/test@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --save-dev @playwright/test@latest\n```\n\n----------------------------------------\n\nTITLE: Accessing Project Configuration in JavaScript\nDESCRIPTION: Retrieves the processed project configuration from the configuration file. This property provides access to the full project configuration object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-workerinfo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nworkerInfo.project\n```\n\n----------------------------------------\n\nTITLE: Test Isolation Example\nDESCRIPTION: Demonstrates how to set up test isolation in Playwright tests using different test frameworks.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task BasicTest()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Browser Fixture in Playwright Test\nDESCRIPTION: Shows how to use the browser fixture in a beforeAll hook. The browser instance is shared between all tests in the same worker for efficiency.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest.beforeAll(async ({ browser }) => {\n  const page = await browser.newPage();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture in JavaScript with Playwright\nDESCRIPTION: JavaScript implementation of pan gesture emulation using Playwright. The code simulates touch events with clientX/clientY coordinates to move a map element, including touchstart, touchmove, and touchend events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect, devices, type Locator } from '@playwright/test';\n\ntest.use({ ...devices['Pixel 7'] });\n\nasync function pan(locator: Locator, deltaX?: number, deltaY?: number, steps?: number) {\n  const { centerX, centerY } = await locator.evaluate((target: HTMLElement) => {\n    const bounds = target.getBoundingClientRect();\n    const centerX = bounds.left + bounds.width / 2;\n    const centerY = bounds.top + bounds.height / 2;\n    return { centerX, centerY };\n  });\n\n  // Providing only clientX and clientY as the app only cares about those.\n  const touches = [{\n    identifier: 0,\n    clientX: centerX,\n    clientY: centerY,\n  }];\n  await locator.dispatchEvent('touchstart',\n      { touches, changedTouches: touches, targetTouches: touches });\n\n  steps = steps ?? 5;\n  deltaX = deltaX ?? 0;\n  deltaY = deltaY ?? 0;\n  for (let i = 1; i <= steps; i++) {\n    const touches = [{\n      identifier: 0,\n      clientX: centerX + deltaX * i / steps,\n      clientY: centerY + deltaY * i / steps,\n    }];\n    await locator.dispatchEvent('touchmove',\n        { touches, changedTouches: touches, targetTouches: touches });\n  }\n\n  await locator.dispatchEvent('touchend');\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Playwright Frame - C#\nDESCRIPTION: Shows how to use Playwright in C# to dispatch events on elements inside a frame. The example demonstrates event dispatch involving data transfer objects, suitable for drag operations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nawait frame.DispatchEventAsync(\"button#submit\", \"click\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar dataTransfer = await frame.EvaluateHandleAsync(\"() => new DataTransfer()\");\nawait frame.DispatchEventAsync(\"#source\", \"dragstart\", new { dataTransfer });\n```\n\n----------------------------------------\n\nTITLE: Querying All Text Contents with Playwright Python (Sync)\nDESCRIPTION: Demonstrates a synchronous call to acquire textContent for each element with the 'link' role via Playwright Python, resulting in a list of text strings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ntexts = page.get_by_role(\"link\").all_text_contents()\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Messages with Playwright in JavaScript\nDESCRIPTION: Sets up a WebSocket route to mock communication by responding to messages with predefined responses. Dependencies include Playwright for JavaScript. Requires setting up a page instance to route WebSockets.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.routeWebSocket('wss://example.com/ws', ws => {\n  ws.onMessage(message => {\n    if (message === 'request')\n      ws.send('response');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Device Serial Number from AndroidDevice with Playwright JS\nDESCRIPTION: androidDevice.serial() synchronously returns the device's unique serial number as a string. Helps distinguish multiple devices in test environments. Input: none. Output: serial string.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// Get device serial number.\nconst serial = androidDevice.serial();\nconsole.log(serial);\n```\n\n----------------------------------------\n\nTITLE: Handling Newsletter Dialog with Locator Handler in Python (Asynchronous)\nDESCRIPTION: Asynchronous Python implementation of a locator handler that automatically closes a newsletter signup dialog when it appears. The handler detects text matching 'Sign up to the newsletter' and clicks the 'No thanks' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_79\n\nLANGUAGE: python\nCODE:\n```\n# Setup the handler.\ndef handler():\n  await page.get_by_role(\"button\", name=\"No thanks\").click()\nawait page.add_locator_handler(page.get_by_text(\"Sign up to the newsletter\"), handler)\n\n# Write the test as usual.\nawait page.goto(\"https://example.com\")\nawait page.get_by_role(\"button\", name=\"Start here\").click()\n```\n\n----------------------------------------\n\nTITLE: Comparing Floating Point Numbers Approximately with expect.closeTo in JavaScript\nDESCRIPTION: Demonstrates using `expect.closeTo(expected, numDigits)` within `expect().toEqual()` for approximate equality checks of floating-point numbers in Playwright. This is useful for avoiding precision issues inherent in floating-point arithmetic. The optional `numDigits` parameter specifies the number of decimal places to compare.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexpect({ prop: 0.1 + 0.2 }).not.toEqual({ prop: 0.3 });\nexpect({ prop: 0.1 + 0.2 }).toEqual({ prop: expect.closeTo(0.3, 5) });\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Hooks with MSTest in Playwright\nDESCRIPTION: Example of using TestInitialize and TestCleanup hooks in MSTest with Playwright. The test navigates to playwright.dev and performs URL verification using the expect API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync(\"https://playwright.dev/\");\n    }\n\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Responses with Regular Expressions in Python (Sync)\nDESCRIPTION: Shows how to wait for a network response using a regular expression pattern or a predicate function in synchronous Python. The code waits for a response that ends with .jpeg or contains a specific token.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Use a regular expression\nwith page.expect_response(re.compile(r\"\\.jpeg$\")) as response_info:\n    page.get_by_text(\"Update\").click()\nresponse = response_info.value\n\n# Use a predicate taking a response object\nwith page.expect_response(lambda response: token in response.url) as response_info:\n    page.get_by_text(\"Update\").click()\nresponse = response_info.value\n```\n\n----------------------------------------\n\nTITLE: Recording Traces with MSTest in Playwright C#\nDESCRIPTION: Implements trace recording in MSTest tests using Playwright. Configures tracing with screenshots, snapshots, and source capturing, saving traces to a specified directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTestsMSTest;\n\n[TestClass]\npublic class UnitTest1 : PageTest\n{\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n         await Context.Tracing.StartAsync(new()\n        {\n            Title = TestContext.TestName,\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TestCleanup]\n    public async Task TestCleanup()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.FullyQualifiedTestClassName}.zip\"\n            )\n        });\n    }\n\n    [TestMethod]\n    public async Task TestYourOnlineShop()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HAR Recording Mode (C#, Java, Python)\nDESCRIPTION: Configures the detail level of HAR recording for non-JavaScript language bindings. Minimal mode only records information needed for routing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_78\n\nLANGUAGE: python\nCODE:\n```\n- `recordHarMode` ?<[HarMode]<\"full\"|\"minimal\">>\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies in Playwright Config\nDESCRIPTION: Configuration example showing how to set up project dependencies for global setup in playwright.config.ts. Demonstrates setting up a database project that other test projects depend on.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n    },\n    // {\n    //   other project\n    // }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Wait For Function Timeout (Python/Java/CSharp)\nDESCRIPTION: Sets the maximum waiting time in milliseconds for `waitForFunction` operations in Playwright for Python, Java, and C#. It defaults to 30000 ms (30 seconds). A value of 0 disables the timeout. The default can be changed using `BrowserContext.setDefaultTimeout` or `Page.setDefaultTimeout` methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `timeout` <[float]>\n```\n\n----------------------------------------\n\nTITLE: NUnit Test Class with Custom Context Options\nDESCRIPTION: Example of a NUnit test class that customizes BrowserContext options including color scheme, viewport size, and base URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright.NUnit;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class MyTest : PageTest\n{\n    [Test]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync(\"/login\");\n    }\n\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = \"https://github.com\",\n        };\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Browser Configuration\nDESCRIPTION: Command to run Playwright tests specifying the browser using launch configuration options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -- Playwright.BrowserName=webkit\n```\n\n----------------------------------------\n\nTITLE: Using Async Fixtures with Playwright\nDESCRIPTION: Example of configuring and using async fixtures with Playwright using pytest-playwright-asyncio and pytest-asyncio.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom playwright.async_api import Page\n\n@pytest.mark.asyncio(loop_scope=\"session\")\nasync def test_foo(page: Page):\n    await page.goto(\"https://github.com\")\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Custom Reporter Configuration\nDESCRIPTION: Example of configuring Playwright to use a custom reporter implementation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: './my-awesome-reporter.ts',\n});\n```\n\n----------------------------------------\n\nTITLE: Global beforeEach/afterEach Hooks Implementation\nDESCRIPTION: Demonstrates how to implement global beforeEach and afterEach hooks using auto fixtures.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend<{ forEachTest: void }>({\n  forEachTest: [async ({ page }, use) => {\n    // This code runs before every test.\n    await page.goto('http://localhost:8000');\n    await use();\n    // This code runs after every test.\n    console.log('Last URL:', page.url());\n  }, { auto: true }],  // automatically starts for every test.\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from './fixtures';\nimport { expect } from '@playwright/test';\n\ntest('basic', async ({ page }) => {\n  expect(page).toHaveURL('http://localhost:8000');\n  await page.goto('https://playwright.dev');\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Trace in Java\nDESCRIPTION: Command to open and view a recorded trace file using Playwright CLI with Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace trace.zip\"\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.open and AndroidDevice.shell allow execution of shell commands. open launches a shell process and returns a socket for interaction; shell executes a command and returns output buffer. Inputs: shell command (string). Outputs: AndroidSocket or Buffer. Used for advanced OS-level scripting.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// Launches a process and returns a socket.\nconst socket = await androidDevice.open({ command: 'logcat' });\n\n// Executes a shell command and returns output.\nconst output = await androidDevice.shell({ command: 'ls /data/local/tmp' });\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Component Test Structure\nDESCRIPTION: Shows the basic structure of a component test using Playwright's test fixtures.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntest('…', async ({ mount, page, context }) => {\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Working with iframes Using FrameLocator in Playwright\nDESCRIPTION: Demonstrates how to use frameLocator to interact with elements inside an iframe. The frameLocator method creates a locator that enters the iframe context, allowing you to find and interact with elements inside that iframe.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.frameLocator('iframe').getByText('Submit');\nawait locator.click();\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.frameLocator(\"iframe\").getByText(\"Submit\");\nlocator.click();\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.frame_locator(\"iframe\").get_by_text(\"Submit\")\nawait locator.click()\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.frame_locator(\"iframe\").get_by_text(\"Submit\")\nlocator.click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = page.FrameLocator(\"iframe\").GetByText(\"Submit\");\nawait locator.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Playwright Tests (JavaScript)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests with Node.js. It installs dependencies, sets up Node.js, installs Playwright browsers, and runs the tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_22\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Playwright Tests on Deployment (C#)\nDESCRIPTION: This YAML configuration sets up GitHub Actions to run Playwright tests with C# after a successful deployment. It sets up the .NET environment, builds the project, installs Playwright, and runs the tests with the deployment URL as the base URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_20\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run tests\n      run: dotnet test\n      env:\n        # This might depend on your test-runner\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Routing by HTTP Method (GET/POST) with Route.fallback - Python (Sync)\nDESCRIPTION: Synchronous Playwright Python route handlers that differentiate by HTTP method. Each handler chooses fallback or processes the request, enabling clear separation of GET and POST logic in synchronous test environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Handle GET requests.\ndef handle_get(route):\n    if route.request.method != \"GET\":\n        route.fallback()\n        return\n  # Handling GET only.\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Connecting Playwright to WebView2 using JavaScript\nDESCRIPTION: This snippet demonstrates how to connect Playwright to a running WebView2 application using JavaScript. It establishes a connection over CDP and retrieves the browser context and page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst context = browser.contexts()[0];\nconst page = context.pages()[0];\n```\n\n----------------------------------------\n\nTITLE: Running tests in Chromium headless shell using Playwright\nDESCRIPTION: This snippet shows how to install only the headless shell of Chromium when running tests in headless mode only, which is particularly useful in CI environments where minimal resources are desired.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nnpx playwright install --with-deps --only-shell\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Edge on Linux using Playwright CLI\nDESCRIPTION: This command uses the Playwright PowerShell script to install the stable version of Microsoft Edge on a Linux system.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 install msedge\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Responses in Python (Async)\nDESCRIPTION: Demonstrates how to modify network responses in asynchronous Python. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nasync def handle_route(route: Route) -> None:\n    # Fetch original response.\n    response = await route.fetch()\n    # Add a prefix to the title.\n    body = await response.text()\n    body = body.replace(\"<title>\", \"<title>My prefix:\")\n    await route.fulfill(\n        # Pass all fields from the response.\n        response=response,\n        # Override response body.\n        body=body,\n        # Force content type to be html.\n        headers={**response.headers, \"content-type\": \"text/html\"},\n    )\n\nawait page.route(\"**/title.html\", handle_route)\n```\n\n----------------------------------------\n\nTITLE: Sign In Test with Synchronous Python for Playwright\nDESCRIPTION: A synchronous Python example using Playwright to automate logging into GitHub. It involves interactions such as filling input fields and clicking buttons to achieve authenticated state in tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npage = context.new_page()\npage.goto('https://github.com/login')\n\npage.get_by_label(\"Username or email address\").fill(\"username\")\npage.get_by_label(\"Password\").fill(\"password\")\npage.get_by_role(\"button\", name=\"Sign in\").click()\n```\n\n----------------------------------------\n\nTITLE: Accessing and Interacting with Frame Objects in Playwright Python (Sync)\nDESCRIPTION: This synchronous Python snippet details accessing frames by name or URL regex, and performing a fill operation using Playwright's sync API. It's suitable when asynchronous programming isn't needed, and assumes 'page' is already created. Uses 'frame-login' and a regex URL to select frames, and fills an input field.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_8\n\nLANGUAGE: python sync\nCODE:\n```\n# Get frame using the frame's name attribute\nframe = page.frame('frame-login')\n\n# Get frame using frame's URL\nframe = page.frame(url=r'.*domain.*')\n\n# Interact with the frame\nframe.fill('#username-input', 'John')\n```\n\n----------------------------------------\n\nTITLE: Running tests on different browsers using Playwright for JavaScript\nDESCRIPTION: This snippet is a configuration file to setup multiple test projects using Playwright for running tests across various browsers and devices. Each project specifies a different browser or device configuration. No dependencies are specifically required beyond Playwright itself.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    /* Test against desktop browsers */\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n    /* Test against mobile viewports. */\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n    /* Test against branded browsers. */\n    {\n      name: 'Google Chrome',\n      use: { ...devices['Desktop Chrome'], channel: 'chrome' }, // or 'chrome-beta'\n    },\n    {\n      name: 'Microsoft Edge',\n      use: { ...devices['Desktop Edge'], channel: 'msedge' }, // or 'msedge-dev'\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Emulating Offline Mode in Python (Sync)\nDESCRIPTION: Creates a new browser context with offline mode enabled using the Playwright Python sync API. This allows testing how applications handle network unavailability.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_72\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context(\n  offline=True\n)\n```\n\n----------------------------------------\n\nTITLE: Asserting JavaScript Properties with toHaveJSProperty in Python\nDESCRIPTION: Illustrates the use of toHaveJSProperty method to check if a locator points to an element with a specific JavaScript property. This example verifies if an element with class 'component' has a 'loaded' property set to True.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\".component\")\nexpect(locator).to_have_js_property(\"loaded\", True)\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests for Specific Projects\nDESCRIPTION: Commands to run Playwright tests on all configured projects or on a specific project. The output shows how test results are displayed with project names.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test\n\nRunning 7 tests using 5 workers\n\n  ✓ [chromium] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [webkit] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Chrome] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Safari] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Microsoft Edge] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Google Chrome] › example.spec.ts:3:1 › basic test (2s)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for JavaScript Playwright\nDESCRIPTION: This snippet defines a GitHub Actions workflow that triggers on push or pull requests to specific branches. It installs dependencies, sets up Playwright, executes tests, and uploads a report. The setup uses Ubuntu and is tailored for Node.js applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\njobs:\\n  test:\\n    timeout-minutes: 60\\n    runs-on: ubuntu-latest\\n    steps:\\n    - uses: actions/checkout@v4\\n    - uses: actions/setup-node@v4\\n      with:\\n        node-version: lts/*\\n    - name: Install dependencies\\n      run: npm ci\\n    - name: Install Playwright Browsers\\n      run: npx playwright install --with-deps\\n    - name: Run Playwright tests\\n      run: npx playwright test\\n    - uses: actions/upload-artifact@v4\\n      if: ${{ !cancelled() }}\\n      with:\\n        name: playwright-report\\n        path: playwright-report/\\n        retention-days: 30\n```\n\n----------------------------------------\n\nTITLE: Appending Form Fields with Files in C#\nDESCRIPTION: Shows how to append multiple values to form fields in C#, including text fields and file uploads with explicit MIME types and filenames using FilePayload objects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar multipart = Context.APIRequest.CreateFormData();\n// Only name and value are set.\nmultipart.Append(\"firstName\", \"John\");\n// Name, value, filename and Content-Type are set.\nmultipart.Append(\"attachment\", new FilePayload()\n{\n    Name = \"pic.jpg\",\n    MimeType = \"image/jpeg\",\n    Buffer = File.ReadAllBytes(\"john.jpg\")\n});\n// Name, value, filename and Content-Type are set.\nmultipart.Append(\"attachment\", new FilePayload()\n{\n    Name = \"table.csv\",\n    MimeType = \"text/csv\",\n    Buffer = File.ReadAllBytes(\"my-tble.csv\")\n});\nawait Page.APIRequest.PostAsync(\"https://localhost/submit\", new() { Multipart = multipart });\n```\n\n----------------------------------------\n\nTITLE: Asserting ARIA Roles with toHaveRole in C#\nDESCRIPTION: Demonstrates how to use the toHaveRole method to ensure a locator points to an element with a specific ARIA role. This example checks if an element with test ID 'save-button' has the role 'button'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.GetByTestId(\"save-button\");\nawait Expect(locator).ToHaveRoleAsync(AriaRole.Button);\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using an ElementHandle with WaitForSelectorAsync in C#\nDESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.WaitForSelectorAsync` in C#, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Get the element handle\nvar jsHandle = await page.WaitForSelectorAsync(\"#box\");\nvar elementHandle = jsHandle as ElementHandle;\n\n// Assert bounding box for the element\nvar boundingBox = await elementHandle.BoundingBoxAsync();\nAssert.AreEqual(100, boundingBox.Width);\n\n// Assert attribute for the element\nvar classNames = await elementHandle.GetAttributeAsync(\"class\");\nAssert.True(classNames.Contains(\"highlighted\"));\n```\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in Form Elements - Multiple Languages\nDESCRIPTION: Examples showing how to select single and multiple options in form elements using different selection methods across languages. Demonstrates value-based, label-based and multiple selection approaches.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// Single selection matching the value or label\nhandle.selectOption('blue');\n\n// single selection matching the label\nhandle.selectOption({ label: 'Blue' });\n\n// multiple selection\nhandle.selectOption(['red', 'green', 'blue']);\n```\n\nLANGUAGE: java\nCODE:\n```\n// Single selection matching the value or label\nhandle.selectOption(\"blue\");\n// single selection matching the label\nhandle.selectOption(new SelectOption().setLabel(\"Blue\"));\n// multiple selection\nhandle.selectOption(new String[] {\"red\", \"green\", \"blue\"});\n```\n\nLANGUAGE: python\nCODE:\n```\n# Single selection matching the value or label\nawait handle.select_option(\"blue\")\n# single selection matching the label\nawait handle.select_option(label=\"blue\")\n# multiple selection\nawait handle.select_option(value=[\"red\", \"green\", \"blue\"])\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Single selection matching the value or label\nawait handle.SelectOptionAsync(new[] { \"blue\" });\n// single selection matching the label\nawait handle.SelectOptionAsync(new[] { new SelectOptionValue() { Label = \"blue\" } });\n// multiple selection\nawait handle.SelectOptionAsync(new[] { \"red\", \"green\", \"blue\" });\n// multiple selection for blue, red and second option\nawait handle.SelectOptionAsync(new[] {\n    new SelectOptionValue() { Label = \"blue\" },\n    new SelectOptionValue() { Index = 2 },\n    new SelectOptionValue() { Value = \"red\" }});\n```\n\n----------------------------------------\n\nTITLE: Using CSS :has-text() Pseudo-class in Playwright\nDESCRIPTION: Shows how to use the :has-text() CSS pseudo-class to find elements containing specific text, with examples of correct and incorrect usage patterns.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Wrong, will match many elements including <body>\nawait page.locator(':has-text(\"Playwright\")').click();\n// Correct, only matches the <article> element\nawait page.locator('article:has-text(\"Playwright\")').click();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Wrong, will match many elements including <body>\npage.locator(\":has-text(\\\"Playwright\\\")\").click();\n// Correct, only matches the <article> element\npage.locator(\"article:has-text(\\\"Playwright\\\")\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\n# Wrong, will match many elements including <body>\nawait page.locator(':has-text(\"Playwright\")').click()\n# Correct, only matches the <article> element\nawait page.locator('article:has-text(\"Playwright\")').click()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Wrong, will match many elements including <body>\npage.locator(':has-text(\"Playwright\")').click()\n# Correct, only matches the <article> element\npage.locator('article:has-text(\"All products\")').click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Wrong, will match many elements including <body>\nawait page.Locator(\":has-text(\\\"Playwright\\\")\").ClickAsync();\n// Correct, only matches the <article> element\nawait page.Locator(\"article:has-text(\\\"Playwright\\\")\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Android Device with Playwright JS\nDESCRIPTION: The AndroidDevice.close async method severs the connection to the associated device. No parameters are required. The method must be awaited; it returns after disconnect ceremony completes. It is used for cleanup; no output is returned.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Disconnects from the device.\nawait androidDevice.close();\n```\n\n----------------------------------------\n\nTITLE: Capturing Aria Snapshots in Playwright JavaScript\nDESCRIPTION: Uses Playwright's `ariaSnapshot` to capture an accessible snapshot (YAML representation) of a 'link' role element. Playwright for JavaScript must be available, the output is a string reflecting the element's ARIA tree for later assertions or comparisons.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait page.getByRole('link').ariaSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Connecting Playwright to WebView2 using Python (Async)\nDESCRIPTION: This snippet demonstrates how to connect Playwright to a running WebView2 application using Python's async syntax. It establishes a connection over CDP and retrieves the browser context and page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbrowser = await playwright.chromium.connect_over_cdp(\"http://localhost:9222\")\ncontext = browser.contexts[0]\npage = context.pages[0]\n```\n\n----------------------------------------\n\nTITLE: Filter Elements by Text\nDESCRIPTION: Demonstrates filtering elements by role and text content using chained locator methods\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'orange' })\n    .click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"listitem\").filter(has_text=\"orange\").click()\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasText(\"orange\"))\n    .click();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() { HasText = \"orange\" })\n    .ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Image Elements Across Multiple URLs in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Frame.waitForSelector to wait for and retrieve image elements across multiple URLs in a Playwright script using JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  for (const currentURL of ['https://google.com', 'https://bbc.com']) {\n    await page.goto(currentURL);\n    const element = await page.mainFrame().waitForSelector('img');\n    console.log('Loaded image: ' + await element.getAttribute('src'));\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Per Test in Playwright Test (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set a specific viewport size for an individual test using `test.use` within a Playwright Test file (`example.spec.ts`). This setting overrides any globally configured viewport for this specific test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  viewport: { width: 1600, height: 1200 },\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts and Special Keys in Playwright\nDESCRIPTION: Examples of handling keyboard shortcuts, special keys, and key combinations including Enter, Control combinations, and symbol keys.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByText('Submit').press('Enter');\n\nawait page.getByRole('textbox').press('Control+ArrowRight');\n\nawait page.getByRole('textbox').press('$');\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByText(\"Submit\").press(\"Enter\");\n\npage.getByRole(AriaRole.TEXTBOX).press(\"Control+ArrowRight\");\n\npage.getByRole(AriaRole.TEXTBOX).press(\"$\");\n```\n\n----------------------------------------\n\nTITLE: Using CSS Layout Pseudo-classes in Playwright\nDESCRIPTION: Demonstrates how to use CSS layout pseudo-classes like :right-of, :left-of, :above, :below, and :near to select elements based on their position relative to other elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Fill an input to the right of \"Username\".\nawait page.locator('input:right-of(:text(\"Username\"))').fill('value');\n\n// Click a button near the promo card.\nawait page.locator('button:near(.promo-card)').click();\n\n// Click the radio input in the list closest to the \"Label 3\".\nawait page.locator('[type=radio]:left-of(:text(\"Label 3\"))').first().click();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Fill an input to the right of \"Username\".\npage.locator(\"input:right-of(:text(\\\"Username\\\"))\").fill(\"value\");\n\n// Click a button near the promo card.\npage.locator(\"button:near(.promo-card)\").click();\n\n// Click the radio input in the list closest to the \"Label 3\".\npage.locator(\"[type=radio]:left-of(:text(\\\"Label 3\\\"))\").first().click();\n```\n\nLANGUAGE: python\nCODE:\n```\n# Fill an input to the right of \"Username\".\nawait page.locator(\"input:right-of(:text(\\\"Username\\\"))\").fill(\"value\")\n\n# Click a button near the promo card.\nawait page.locator(\"button:near(.promo-card)\").click()\n\n# Click the radio input in the list closest to the \"Label 3\".\nawait page.locator(\"[type=radio]:left-of(:text(\\\"Label 3\\\"))\").first.click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Fill an input to the right of \"Username\".\nawait page.Locator(\"input:right-of(:text(\\\"Username\\\"))\").FillAsync(\"value\");\n\n// Click a button near the promo card.\nawait page.Locator(\"button:near(.promo-card)\").ClickAsync();\n\n// Click the radio input in the list closest to the \"Label 3\".\nawait page.Locator(\"[type=radio]:left-of(:text(\\\"Label 3\\\"))\").First.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Data in Java\nDESCRIPTION: Example of sending a POST request with JSON data using Playwright's API request context in Java. The data is passed as a Map which is then converted to JSON in the request body.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> data = new HashMap();\ndata.put(\"title\", \"Book Title\");\ndata.put(\"body\", \"John Doe\");\nrequest.post(\"https://example.com/api/createBook\", RequestOptions.create().setData(data));\n```\n\n----------------------------------------\n\nTITLE: Get Element by Text Content\nDESCRIPTION: Shows how to locate and click an element using its text content across different programming languages\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByText('orange').click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_text(\"orange\").click()\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByText(\"orange\").click();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByText(\"orange\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Fetching and Modifying API Response in JavaScript\nDESCRIPTION: Shows how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in JavaScript. This example adds a new breed to the dog API response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('https://dog.ceo/api/breeds/list/all', async route => {\n  const response = await route.fetch();\n  const json = await response.json();\n  json.message['big_red_dog'] = [];\n  await route.fulfill({ response, json });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State in Playwright with Java\nDESCRIPTION: Shows how to set the checked state of a checkbox element using the setChecked method in Java. This example sets the checkbox to checked (true).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_85\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.CHECKBOX).setChecked(true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable AxeBuilder Configuration Fixture in Java\nDESCRIPTION: This Java snippet defines a test fixture class `AxeTestFixtures` extending a base `TestFixtures` class. It includes a method `makeAxeBuilder` that creates and returns an `AxeBuilder` instance pre-configured with specific WCAG tags using `withTags()` and excludes a common element with a known accessibility issue using `exclude()`. This promotes configuration reuse across multiple tests, ensuring consistency. Requires Playwright and Axe core.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nclass AxeTestFixtures extends TestFixtures {\n AxeBuilder makeAxeBuilder() {\n   return new AxeBuilder(page)\n     .withTags(new String[]{\"wcag2a\", \"wcag2aa\", \"wcag21a\", \"wcag21aa\"})\n     .exclude(\"#commonly-reused-element-with-known-issue\");\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Time Control with Playwright in Python (Sync)\nDESCRIPTION: Demonstrates manual time control in tests using Playwright's clock API with synchronous Python. This example initializes a clock with a specific timezone, pauses time flow, and manually advances time while verifying the UI updates correctly.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Initialize clock with a specific time, let the page load naturally.\npage.clock.install(\n    time=datetime.datetime(2024, 2, 2, 8, 0, 0, tzinfo=datetime.timezone.pst),\n)\npage.goto(\"http://localhost:3333\")\nlocator = page.get_by_test_id(\"current-time\")\n\n# Pause the time flow, stop the timers, you now have manual control\n# over the page time.\npage.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\nexpect(locator).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Tick through time manually, firing all timers in the process.\n# In this case, time will be updated in the screen 2 times.\npage.clock.run_for(2000)\nexpect(locator).to_have_text(\"2/2/2024, 10:00:02 AM\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript with Locator.evaluate in Python (Async)\nDESCRIPTION: Demonstrates how to execute JavaScript code on a matched element using the evaluate method in Python async mode. Includes passing arguments to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nresult = await page.get_by_testid(\"myId\").evaluate(\"(element, [x, y]) => element.textContent + ' ' + x * y\", [7, 8])\nprint(result) # prints \"myId text 56\"\n```\n\n----------------------------------------\n\nTITLE: Using CSS :has() Pseudo-class in Playwright\nDESCRIPTION: Shows how to use the :has() pseudo-class to find elements that contain other specific elements, in this example finding article elements that contain a div with class 'promo'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('article:has(div.promo)').textContent();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"article:has(div.promo)\").textContent();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"article:has(div.promo)\").text_content()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"article:has(div.promo)\").text_content()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"article:has(div.promo)\").TextContentAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Alternative Element Scenarios with OR Operator in Playwright\nDESCRIPTION: Demonstrates using the 'or' method to create a locator that matches any of multiple possible elements. Useful for situations where different UI states may appear, such as handling a possible security dialog before clicking a button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst newEmail = page.getByRole('button', { name: 'New' });\nconst dialog = page.getByText('Confirm security settings');\nawait expect(newEmail.or(dialog).first()).toBeVisible();\nif (await dialog.isVisible())\n  await page.getByRole('button', { name: 'Dismiss' }).click();\nawait newEmail.click();\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator newEmail = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"New\"));\nLocator dialog = page.getByText(\"Confirm security settings\");\nassertThat(newEmail.or(dialog).first()).isVisible();\nif (dialog.isVisible())\n  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Dismiss\")).click();\nnewEmail.click();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nnew_email = page.get_by_role(\"button\", name=\"New\")\ndialog = page.get_by_text(\"Confirm security settings\")\nawait expect(new_email.or_(dialog).first).to_be_visible()\nif (await dialog.is_visible()):\n  await page.get_by_role(\"button\", name=\"Dismiss\").click()\nawait new_email.click()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nnew_email = page.get_by_role(\"button\", name=\"New\")\ndialog = page.get_by_text(\"Confirm security settings\")\nexpect(new_email.or_(dialog).first).to_be_visible()\nif (dialog.is_visible()):\n  page.get_by_role(\"button\", name=\"Dismiss\").click()\nnew_email.click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar newEmail = page.GetByRole(AriaRole.Button, new() { Name = \"New\" });\nvar dialog = page.GetByText(\"Confirm security settings\");\nawait Expect(newEmail.Or(dialog).First).ToBeVisibleAsync();\nif (await dialog.IsVisibleAsync())\n  await page.GetByRole(AriaRole.Button, new() { Name = \"Dismiss\" }).ClickAsync();\nawait newEmail.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload with FileChooser in JavaScript\nDESCRIPTION: Demonstrates how to wait for a file chooser event, trigger it, and set a file for upload using Playwright in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Start waiting for file chooser before clicking. Note no await.\nconst fileChooserPromise = page.waitForEvent('filechooser');\nawait page.getByText('Upload file').click();\nconst fileChooser = await fileChooserPromise;\nawait fileChooser.setFiles(path.join(__dirname, 'myfile.pdf'));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routes on Browser Context in JavaScript\nDESCRIPTION: Shows how to set up route handling on the entire browser context using BrowserContext.route() in JavaScript. This applies to popup windows and opened links.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait browserContext.route('**/api/login', route => route.fulfill({\n  status: 200,\n  body: 'accept',\n}));\nawait page.goto('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Page Events in Multiple Languages\nDESCRIPTION: These snippets demonstrate how to unsubscribe from page events in JavaScript, Java, Python, and C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logRequest(interceptedRequest) {\n  console.log('A request was made:', interceptedRequest.url());\n}\npage.on('request', logRequest);\n// Sometime later...\npage.removeListener('request', logRequest);\n```\n\nLANGUAGE: java\nCODE:\n```\nConsumer<Request> logRequest = interceptedRequest -> {\n  System.out.println(\"A request was made: \" + interceptedRequest.url());\n};\npage.onRequest(logRequest);\n// Sometime later...\npage.offRequest(logRequest);\n```\n\nLANGUAGE: python\nCODE:\n```\ndef log_request(intercepted_request):\n    print(\"a request was made:\", intercepted_request.url)\npage.on(\"request\", log_request)\n# sometime later...\npage.remove_listener(\"request\", log_request)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvoid PageLoadHandler(object _, IPage p) {\n    Console.WriteLine(\"Page loaded!\");\n};\n\npage.Load += PageLoadHandler;\n// Do some work...\npage.Load -= PageLoadHandler;\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Headers in JavaScript\nDESCRIPTION: Demonstrates how to modify request headers while falling back to the subsequent handler in Playwright using JavaScript. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('**/*', async (route, request) => {\n  // Override headers\n  const headers = {\n    ...request.headers(),\n    foo: 'foo-value', // set \"foo\" header\n    bar: undefined, // remove \"bar\" header\n  };\n  await route.fallback({ headers });\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Specific URL After Click in JavaScript\nDESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByText('Click me').click();\nawait page.waitForURL('**/login');\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Line Reporter\nDESCRIPTION: Shows how to use the 'line' reporter, which is more concise than the list reporter and uses a single line to report the last finished test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --reporter=line\n```\n\n----------------------------------------\n\nTITLE: Grouping Trace Actions with test.step (JavaScript)\nDESCRIPTION: Recommends using `test.step` (typically available within the Playwright Test runner) instead of `Tracing.group` for logically grouping actions in JavaScript tests. This approach integrates better with test reporting and provides clear steps in the trace view.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// use test.step instead\nawait test.step('Log in', async () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a Browser Context with Async Playwright (Python)\nDESCRIPTION: Provides the asynchronous Python code for launching a browser (`playwright.chromium.launch()`), creating an isolated `BrowserContext` (`browser.new_context()`), and obtaining a `Page` (`context.new_page()`) using the `playwright.async_api`. This showcases manual context creation in an async Python environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbrowser = await playwright.chromium.launch()\ncontext = await browser.new_context()\npage = await context.new_page()\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Chromium Tracing with Playwright - Java\nDESCRIPTION: Illustrates how to use Playwright's browser tracing capabilities in Java. The browser.startTracing method activates tracing with configurable options including the output path. Following navigation or other actions, browser.stopTracing is called to save trace data. Dependencies include Playwright for Java, Browser, Page, and java.nio.file.Paths. Parameters are analogous to the JavaScript version, supporting optional page-based tracing and custom output location. Resulting trace files can be loaded in Chrome DevTools.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nbrowser.startTracing(page, new Browser.StartTracingOptions()\n  .setPath(Paths.get(\"trace.json\")));\npage.navigate(\"https://www.google.com\");\nbrowser.stopTracing();\n```\n\n----------------------------------------\n\nTITLE: Launching Browser Server using Playwright JavaScript\nDESCRIPTION: This snippet demonstrates how to launch a browser server using Playwright's Chromium instance in JavaScript. It requires the Playwright library and showcases connecting to the browser server using a WebSocket endpoint. The required library is the Playwright package, supporting browsers like Chromium, WebKit, and Firefox. The code establishes a connection to the browser server and ensures a clean shutdown.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\\n\\n(async () => {\\n  const browserServer = await chromium.launchServer();\\n  const wsEndpoint = browserServer.wsEndpoint();\\n  // Use web socket endpoint later to establish a connection.\\n  const browser = await chromium.connect(wsEndpoint);\\n  // Close browser instance.\\n  await browserServer.close();\\n})();\n```\n\n----------------------------------------\n\nTITLE: Tracing a Square with Mouse Movements in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'page.mouse' object to trace a 100x100 square by moving the mouse and performing click actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Using 'page.mouse' to trace a 100x100 square.\nawait page.mouse.move(0, 0);\nawait page.mouse.down();\nawait page.mouse.move(0, 100);\nawait page.mouse.move(100, 100);\nawait page.mouse.move(100, 0);\nawait page.mouse.move(0, 0);\nawait page.mouse.up();\n```\n\n----------------------------------------\n\nTITLE: Custom Callback on Every Actionability Check with Locator Handler in Python (Synchronous)\nDESCRIPTION: Synchronous Python implementation of a locator handler with the body element that runs a custom JavaScript function before every actionability check. Uses the no_wait_after parameter since the handler doesn't hide the body element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_88\n\nLANGUAGE: python\nCODE:\n```\n# Setup the handler.\ndef handler():\n  page.evaluate(\"window.removeObstructionsForTestIfNeeded()\")\npage.add_locator_handler(page.locator(\"body\"), handler, no_wait_after=True)\n\n# Write the test as usual.\npage.goto(\"https://example.com\")\npage.get_by_role(\"button\", name=\"Start here\").click()\n```\n\n----------------------------------------\n\nTITLE: Triggering Select-All Keyboard Shortcut in Playwright (Python Sync)\nDESCRIPTION: This synchronous Python snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.keyboard.press` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.keyboard.press(\"ControlOrMeta+A\")\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificates in Playwright\nDESCRIPTION: This configuration snippet demonstrates how to set up client-side certificates for TLS Client Authentication in Playwright tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // ...\n  use: {\n    clientCertificates: [{\n      origin: 'https://example.com',\n      certPath: './cert.pem',\n      keyPath: './key.pem',\n      passphrase: 'mysecretpassword',\n    }],\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Playwright Tracing (Java)\nDESCRIPTION: Shows how to start Playwright tracing in Java using `context.tracing().start()` with `Tracing.StartOptions` to configure features like screenshots and snapshots. This begins the trace recording, which is later finalized and saved using `context.tracing().stop()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true));\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Test Configuration Setup in JavaScript\nDESCRIPTION: Demonstrates the most common configuration options for Playwright tests including test directory specification, parallel execution settings, retry behavior, reporter selection, base URL configuration, and browser project setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-configuration-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Look for test files in the \"tests\" directory, relative to this configuration file.\n  testDir: 'tests',\n\n  // Run all tests in parallel.\n  fullyParallel: true,\n\n  // Fail the build on CI if you accidentally left test.only in the source code.\n  forbidOnly: !!process.env.CI,\n\n  // Retry on CI only.\n  retries: process.env.CI ? 2 : 0,\n\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n\n  // Reporter to use\n  reporter: 'html',\n\n  use: {\n    // Base URL to use in actions like `await page.goto('/')`.\n    baseURL: 'http://localhost:3000',\n\n    // Collect trace when retrying the failed test.\n    trace: 'on-first-retry',\n  },\n  // Configure projects for major browsers.\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n  // Run your local dev server before starting the tests.\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Strict Mode with Page Click in Python\nDESCRIPTION: Demonstrates how to use the new strict mode when clicking elements to ensure selector points to a single element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# This will throw if you have more than one button!\npage.click(\"button\", strict=True)\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for Playwright in Kotlin\nDESCRIPTION: Gradle build configuration script in Kotlin DSL for a Playwright Java project. It configures the project dependencies, creates a custom task for Playwright CLI access, and sets up test logging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  application\n  id(\"java\")\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation(\"com.microsoft.playwright:playwright:%%VERSION%%\")\n}\n\napplication {\n  mainClass.set(\"org.example.App\")\n}\n\n// Usage: ./gradlew playwright --args=\"help\"\ntasks.register<JavaExec>(\"playwright\") {\n  classpath(sourceSets[\"test\"].runtimeClasspath)\n  mainClass.set(\"com.microsoft.playwright.CLI\")\n}\n\ntasks.test {\n  useJUnitPlatform()\n  testLogging {\n    events(\"passed\", \"skipped\", \"failed\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Java Playwright in Containers\nDESCRIPTION: Sets up a GitHub Actions workflow to run Java-based Playwright tests within a Docker container. This setup ensures a consistent testing environment using a dedicated Playwright image and is triggered on branch changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_15\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\njobs:\\n  playwright:\\n    name: 'Playwright Tests'\\n    runs-on: ubuntu-latest\\n    container:\\n      image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\\n      options: --user 1001\\n    steps:\\n      - uses: actions/checkout@v4\\n      - uses: actions/setup-java@v3\\n        with:\\n          distribution: 'temurin'\\n          java-version: '17'\\n      - name: Build & Install\\n        run: mvn -B install -D skipTests --no-transfer-progress\\n      - name: Run tests\\n        run: mvn test\n```\n\n----------------------------------------\n\nTITLE: Injecting Initialization Script via Path (Java)\nDESCRIPTION: Uses Playwright for Java's addInitScript with a file path to inject JavaScript before any document scripts run. The preload.js file must be located in the working directory. Ensures a controlled browser context on navigation or frame creation. Java Playwright required.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n// In your playwright script, assuming the preload.js file is in same directory\npage.addInitScript(Paths.get(\"./preload.js\"));\n```\n\n----------------------------------------\n\nTITLE: Testing Events in Svelte Components with Playwright\nDESCRIPTION: Shows how to test events in Svelte components using Playwright's component testing framework. It demonstrates mounting a component with a click event handler.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('event', async ({ mount }) => {\n  const component = await mount(Component, { on: { click() {} } });\n});\n```\n\n----------------------------------------\n\nTITLE: Async Web Element Text Assertion\nDESCRIPTION: Shows how to perform an async assertion checking element text content using Playwright's expect function with toHaveText matcher.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.getByTestId('status')).toHaveText('Submitted');\n```\n\n----------------------------------------\n\nTITLE: Customizing Playwright Test Output and Debugging\nDESCRIPTION: Commands showing how to customize test output, use different reporters, run in debug mode, and access the interactive UI mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-cli-js.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --reporter=dot\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies in Playwright\nDESCRIPTION: Demonstrates how to configure dependencies between test projects using the new TestProject.dependencies property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: /global.setup\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Playwright Element Visibility Check\nDESCRIPTION: Shows how to verify element visibility using Playwright's assertion API with text locator.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-java.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nassertThat(page.locator(\"text=Installation\")).isVisible();\n```\n\n----------------------------------------\n\nTITLE: Using PlaywrightDevPage in JavaScript Tests\nDESCRIPTION: Example of how to use the PlaywrightDevPage class in JavaScript tests. The code demonstrates importing the page object model and using it to navigate to the documentation and verify table of contents elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PlaywrightDevPage } = require('./playwright-dev-page');\n\n// In the test\nconst page = await browser.newPage();\nawait playwrightDev.goto();\nawait playwrightDev.getStarted();\nawait expect(playwrightDev.tocList).toHaveText([\n  `How to install Playwright`,\n  `What's Installed`,\n  `How to run the example test`,\n  `How to open the HTML test report`,\n  `Write tests using web first assertions, page fixtures and locators`,\n  `Run single test, multiple tests, headed mode`,\n  `Generate tests with Codegen`,\n  `See a trace of your tests`\n]);\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Viewport Visibility in C#\nDESCRIPTION: Demonstrates using the new ToBeInViewportAsync assertion to check if an element intersects the viewport according to the intersection observer API. Includes examples of checking for partial and full viewport intersection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.GetByRole(AriaRole.Button);\n\n// Make sure at least some part of element intersects viewport.\nawait Expect(locator).ToBeInViewportAsync();\n\n// Make sure element is fully outside of viewport.\nawait Expect(locator).Not.ToBeInViewportAsync();\n\n// Make sure that at least half of the element intersects viewport.\nawait Expect(locator).ToBeInViewportAsync(new() { Ratio = 0.5 });\n```\n\n----------------------------------------\n\nTITLE: Launching Browser with UI and Slow Motion\nDESCRIPTION: Example of launching Firefox browser in non-headless mode with slow motion execution\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfirefox.launch(headless=False, slow_mo=50)\n```\n\n----------------------------------------\n\nTITLE: Using wait_for_selector across navigations in Python (sync)\nDESCRIPTION: This snippet shows how to use the wait_for_selector method to wait for an image element across multiple page navigations in Python using the synchronous API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_147\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.launch()\n    page = browser.new_page()\n    for current_url in [\"https://google.com\", \"https://bbc.com\"]:\n        page.goto(current_url, wait_until=\"domcontentloaded\")\n        element = page.wait_for_selector(\"img\")\n        print(\"Loaded image: \" + str(element.get_attribute(\"src\")))\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Frame.wait_for_function in Python (Sync)\nDESCRIPTION: This synchronous Python snippet demonstrates how to pass an argument to the predicate function in Frame.wait_for_function. It waits for an element matching a specific selector to appear in the document.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nselector = \".foo\"\nframe.wait_for_function(\"selector => !!document.querySelector(selector)\", selector)\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload with FileChooser in Python (Sync)\nDESCRIPTION: Demonstrates synchronous file upload handling using FileChooser in Playwright with Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith page.expect_file_chooser() as fc_info:\n    page.get_by_text(\"Upload file\").click()\nfile_chooser = fc_info.value\nfile_chooser.set_files(\"myfile.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Responses with Regular Expressions in Python (Async)\nDESCRIPTION: Demonstrates how to wait for a network response using a regular expression pattern or a predicate function in asynchronous Python. The example shows waiting for a response that ends with .jpeg or contains a specific token.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Use a regular expression\nasync with page.expect_response(re.compile(r\"\\.jpeg$\")) as response_info:\n    await page.get_by_text(\"Update\").click()\nresponse = await response_info.value\n\n# Use a predicate taking a response object\nasync with page.expect_response(lambda response: token in response.url) as response_info:\n    await page.get_by_text(\"Update\").click()\nresponse = await response_info.value\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.waitForSelector in Python (sync)\nDESCRIPTION: Shows how to use the waitForSelector method on an ElementHandle in synchronous Python to wait for a child element to appear in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_47\n\nLANGUAGE: python\nCODE:\n```\npage.set_content(\"<div><span></span></div>\")\ndiv = page.query_selector(\"div\")\n# waiting for the \"span\" selector relative to the div.\nspan = div.wait_for_selector(\"span\", state=\"attached\")\n```\n\n----------------------------------------\n\nTITLE: Emulating Viewport Size with Playwright Codegen - Java - Bash\nDESCRIPTION: This Maven-based command runs Playwright's CLI for Java with a specified viewport size for the browser instance. The '--viewport-size' option controls the browser's width and height, and can be essential for testing responsive behavior within recorded tests. Requirements include Maven and the Playwright Java package. Outputs a browser at the set resolution for recording user flows.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"codegen --viewport-size='800,600' playwright.dev\\\"\n```\n\n----------------------------------------\n\nTITLE: Swiping Gestures on AndroidDevice with Playwright JS\nDESCRIPTION: androidDevice.swipe performs a swipe in a given direction across a percentage of a widget's size. Supports speed and timeout options for fine tuning. Inputs: selector, direction, percent. Used to automate UI nav and list movement. No return value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n// Swipe a widget.\nawait androidDevice.swipe({\n  selector: mySelector,\n  direction: 'left',\n  percent: 1.0,\n  speed: 500, // Optional\n  timeout: 2500 // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Using APIResponse with Sync Python in Playwright\nDESCRIPTION: Example of making an HTTP request using Playwright's synchronous API, then validating and processing the response. Demonstrates checking response status, headers, and accessing JSON data from the response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponse.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    context = playwright.request.new_context()\n    response = context.get(\"https://example.com/user/repos\")\n    assert response.ok\n    assert response.status == 200\n    assert response.headers[\"content-type\"] == \"application/json; charset=utf-8\"\n    assert response.json()[\"name\"] == \"foobar\"\n    assert response.body() == '{\"status\": \"ok\"}'\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using Locator (Recommended) in Python (Sync)\nDESCRIPTION: Demonstrates the recommended approach using Playwright Locators (`page.get_by_text`) in synchronous Python to interact with elements. Locators automatically re-fetch the element before each action (e.g., hover, click), avoiding staleness issues.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nlocator = page.get_by_text(\"Submit\")\nlocator.hover()\nlocator.click()\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines for Playwright Tests (Multiple Languages)\nDESCRIPTION: These YAML snippets configure Bitbucket Pipelines to use Playwright Docker images for running tests in JavaScript, Python, Java, and C# projects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_35\n\nLANGUAGE: yml\nCODE:\n```\nimage: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n```\n\nLANGUAGE: yml\nCODE:\n```\nimage: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n```\n\nLANGUAGE: yml\nCODE:\n```\nimage: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n```\n\nLANGUAGE: yml\nCODE:\n```\nimage: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n```\n\n----------------------------------------\n\nTITLE: Using nth-match CSS Selector in Playwright\nDESCRIPTION: Shows how to use the :nth-match CSS selector to pick a specific element from multiple matches, and how to wait for a certain number of elements to appear.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Click the third \"Buy\" button\nawait page.locator(':nth-match(:text(\"Buy\"), 3)').click();\n\n// Wait until all three buttons are visible\nawait page.locator(':nth-match(:text(\"Buy\"), 3)').waitFor();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Click the third \"Buy\" button\npage.locator(\":nth-match(:text('Buy'), 3)\").click();\n\n// Wait until all three buttons are visible\npage.locator(\":nth-match(:text('Buy'), 3)\").waitFor();\n```\n\nLANGUAGE: python\nCODE:\n```\n# Click the third \"Buy\" button\nawait page.locator(\":nth-match(:text('Buy'), 3)\").click()\n\n# Wait until all three buttons are visible\nawait page.locator(\":nth-match(:text('Buy'), 3)\").wait_for()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Click the third \"Buy\" button\nawait page.Locator(\":nth-match(:text('Buy'), 3)\").ClickAsync();\n\n// Wait until all three buttons are visible\nawait page.Locator(\":nth-match(:text('Buy'), 3)\").WaitForAsync();\n```\n\n----------------------------------------\n\nTITLE: Recording Multiple Trace Chunks (JavaScript)\nDESCRIPTION: Illustrates recording multiple trace segments into separate files within the same browser context using `tracing.startChunk()` and `tracing.stopChunk()` in JavaScript. Global tracing must be initiated first with `tracing.start()`. Each chunk captures actions performed between its respective start/stop calls.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nawait context.tracing.start({ screenshots: true, snapshots: true });\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\nawait context.tracing.startChunk();\nawait page.getByText('Get Started').click();\n// Everything between startChunk and stopChunk will be recorded in the trace.\nawait context.tracing.stopChunk({ path: 'trace1.zip' });\n\nawait context.tracing.startChunk();\nawait page.goto('http://example.com');\n// Save a second trace file with different actions.\nawait context.tracing.stopChunk({ path: 'trace2.zip' });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routes on Browser Context in Python (Async)\nDESCRIPTION: Shows how to set up route handling on the entire browser context in asynchronous Python. This method applies to popup windows and opened links.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nawait context.route(\n    \"**/api/login\",\n    lambda route: route.fulfill(status=200, body=\"accept\"))\nawait page.goto(\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Recording Multiple Trace Chunks (Python Sync)\nDESCRIPTION: Shows how to record separate trace chunks synchronously in Python using `context.tracing.start_chunk()` and `context.tracing.stop_chunk()`. Global tracing must be active (`context.tracing.start()`). Each chunk captures intermediate actions and saves them to a specified file path.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ncontext.tracing.start(screenshots=True, snapshots=True)\npage = context.new_page()\npage.goto(\"https://playwright.dev\")\n\ncontext.tracing.start_chunk()\npage.get_by_text(\"Get Started\").click()\n# Everything between start_chunk and stop_chunk will be recorded in the trace.\ncontext.tracing.stop_chunk(path = \"trace1.zip\")\n\ncontext.tracing.start_chunk()\npage.goto(\"http://example.com\")\n# Save a second trace file with different actions.\ncontext.tracing.stop_chunk(path = \"trace2.zip\")\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Selector Engine with Playwright in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to define and register a custom selector engine with Playwright, enabling selection of elements by tag name using a 'tag=' prefix. It requires the Playwright test runner (or appropriate browser module), uses an async registration method via selectors.register, and provides querying and usage examples. Key parameters include the engine name ('tag') and the engine factory function; inputs are the selector engine logic and selected elements, outputting matched DOM elements or their counts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.\\n\\n(async () => {\\n  // Must be a function that evaluates to a selector engine instance.\\n  const createTagNameEngine = () => ({\\n    // Returns the first element matching given selector in the root's subtree.\\n    query(root, selector) {\\n      return root.querySelector(selector);\\n    },\\n\\n    // Returns all elements matching given selector in the root's subtree.\\n    queryAll(root, selector) {\\n      return Array.from(root.querySelectorAll(selector));\\n    }\\n  });\\n\\n  // Register the engine. Selectors will be prefixed with \\\"tag=\\\".\\n  await selectors.register('tag', createTagNameEngine);\\n\\n  const browser = await firefox.launch();\\n  const page = await browser.newPage();\\n  await page.setContent(`\\u003cdiv\\u003e\\u003cbutton\\u003eClick me\\u003c/button\\u003e\\u003c/div\\u003e`);\\n\\n  // Use the selector prefixed with its name.\\n  const button = page.locator('tag=button');\\n  // We can combine it with built-in locators.\\n  await page.locator('tag=div').getByText('Click me').click();\\n  // Can use it in any methods supporting selectors.\\n  const buttonCount = await page.locator('tag=button').count();\\n\\n  await browser.close();\\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation for Specific Test in Playwright\nDESCRIPTION: Configures geolocation and required permissions for a specific test using Playwright Test. This enables testing location-based features by emulating a specific geographic position.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation'],\n});\n\ntest('my test with geolocation', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Web Servers Configuration\nDESCRIPTION: Advanced configuration showing how to set up multiple web servers running simultaneously for frontend and backend services.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://localhost:3000',\n      name: 'Frontend',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://localhost:3333',\n      name: 'Backend',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://localhost:3000',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Worker-Scoped Fixtures for Authentication in Playwright Test\nDESCRIPTION: Implementation of a worker-scoped account fixture that creates a unique test account, and an overridden page fixture that signs in with this account for each test. The account is shared by all tests in the same worker process.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\ntype Account = {\n  username: string;\n  password: string;\n};\n\n// Note that we pass worker fixture types as a second template parameter.\nexport const test = base.extend<{}, { account: Account }>({\n  account: [async ({ browser }, use, workerInfo) => {\n    // Unique username.\n    const username = 'user' + workerInfo.workerIndex;\n    const password = 'verysecure';\n\n    // Create the account with Playwright.\n    const page = await browser.newPage();\n    await page.goto('/signup');\n    await page.getByLabel('User Name').fill(username);\n    await page.getByLabel('Password').fill(password);\n    await page.getByText('Sign up').click();\n    // Make sure everything is ok.\n    await expect(page.getByTestId('result')).toHaveText('Success');\n    // Do not forget to cleanup.\n    await page.close();\n\n    // Use the account value.\n    await use({ username, password });\n  }, { scope: 'worker' }],\n\n  page: async ({ page, account }, use) => {\n    // Sign in with our account.\n    const { username, password } = account;\n    await page.goto('/signin');\n    await page.getByLabel('User Name').fill(username);\n    await page.getByLabel('Password').fill(password);\n    await page.getByText('Sign in').click();\n    await expect(page.getByTestId('userinfo')).toHaveText(username);\n\n    // Use signed-in page in the test.\n    await use(page);\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Directory and .gitignore Entry with Bash\nDESCRIPTION: Creates a directory named 'playwright/.auth' and adds the directory path to the '.gitignore' file, preventing it from being tracked by git. This setup is essential to securely store the authenticated browser state required for testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p playwright/.auth\necho $'\\nplaywright/.auth' >> .gitignore\n```\n\n----------------------------------------\n\nTITLE: Recording Network Traffic to HAR File in Playwright\nDESCRIPTION: Example of recording network traffic to a HAR file programmatically in Playwright. This allows capturing network interactions for later replay or analysis.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  recordHar: { path: 'github.har.zip' }\n});\n// ... do stuff ...\nawait context.close();\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Python Playwright\nDESCRIPTION: This GitHub Actions workflow sets up a Python environment for running Playwright tests. Triggered on push or pull requests, it handles dependencies, installs browsers using Playwright CLI, and runs tests via `pytest`, retaining traces on failure.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\njobs:\\n  test:\\n    timeout-minutes: 60\\n    runs-on: ubuntu-latest\\n    steps:\\n    - uses: actions/checkout@v4\\n    - name: Set up Python\\n      uses: actions/setup-python@v4\\n      with:\\n        python-version: '3.11'\\n    - name: Install dependencies\\n      run: |\\n        python -m pip install --upgrade pip\\n        pip install -r requirements.txt\\n    - name: Ensure browsers are installed\\n      run: python -m playwright install --with-deps\\n    - name: Run your tests\\n      run: pytest --tracing=retain-on-failure\\n    - uses: actions/upload-artifact@v4\\n      if: ${{ !cancelled() }}\\n      with:\\n        name: playwright-traces\\n        path: test-results/\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Geolocation in C#\nDESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright C# client. This sets up the browser environment to emulate a specific geographic location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var context = await browser.NewContextAsync(new()\n{\n    Permissions = new[] { \"geolocation\" },\n    Geolocation = new Geolocation() { Longitude = 41.890221, Latitude = 12.492348 }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User Agent in Python (Sync)\nDESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright Python sync API. This allows testing how websites respond to different browser identifications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_67\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context(\n  user_agent='My user agent'\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Playwright Server with JavaScript API\nDESCRIPTION: JavaScript code to connect to a remote Playwright server using the BrowserType.connect API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst browser = await playwright['chromium'].connect('ws://127.0.0.1:3000/');\n```\n\n----------------------------------------\n\nTITLE: Creating Test Module with Helper Function in Playwright (Feature A)\nDESCRIPTION: This TypeScript file defines tests for 'feature-a' using a wrapper function pattern rather than direct test definitions. Tests are encapsulated in an exported function that will be called by a test list file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\nexport default function createTests() {\n  test('feature-a example test', async ({ page }) => {\n    // ... test goes here\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.waitForSelector in Java\nDESCRIPTION: Shows how to use the waitForSelector method on an ElementHandle in Java to wait for a child element to appear in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_45\n\nLANGUAGE: java\nCODE:\n```\npage.setContent(\"<div><span></span></div>\");\nElementHandle div = page.querySelector(\"div\");\n// Waiting for the \"span\" selector relative to the div.\nElementHandle span = div.waitForSelector(\"span\", new ElementHandle.WaitForSelectorOptions()\n  .setState(WaitForSelectorState.ATTACHED));\n```\n\n----------------------------------------\n\nTITLE: Typing Text with Playwright Keyboard in JavaScript\nDESCRIPTION: Demonstrates how to use the Keyboard.type method to input text, both instantly and with a delay to simulate user typing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.keyboard.type('Hello'); // Types instantly\nawait page.keyboard.type('World', { delay: 100 }); // Types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Aria Snapshot Assertion Example in Java\nDESCRIPTION: Demonstrates how to use the new toMatchAriaSnapshot method for verifying page structure using accessibility tree comparison.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npage.navigate(\"https://playwright.dev\");\nassertThat(page.locator(\"body\")).matchesAriaSnapshot(\"\"\"\n  - banner:\n    - heading /Playwright enables reliable/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n  - main:\n    - img \"Browsers (Chromium, Firefox, WebKit)\"\n    - heading \"Any browser • Any platform • One API\"\n\"\"\");\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload with FileChooser in Java\nDESCRIPTION: Shows how to wait for a file chooser, trigger it, and set a file for upload using Playwright in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nFileChooser fileChooser = page.waitForFileChooser(() -> page.getByText(\"Upload file\").click());\nfileChooser.setFiles(Paths.get(\"myfile.pdf\"));\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators with Text in JavaScript\nDESCRIPTION: Code example showing how to filter a locator by text content using the hasText option, which allows targeting elements that contain specific text.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('li', { hasText: 'my item' }).locator('button').click();\n```\n\n----------------------------------------\n\nTITLE: Building Custom Playwright Docker Image for Python\nDESCRIPTION: Dockerfile to build a custom Docker image with Python and Playwright for Python applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_23\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.12-bookworm\n\nRUN pip install playwright==@%%VERSION%% && \\\n    playwright install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Using Frame Locator with iframes - Multiple Languages\nDESCRIPTION: Shows how to locate and interact with elements inside an iframe using frame locator across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = frame.frameLocator('#my-iframe').getByText('Submit');\nawait locator.click();\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = frame.frameLocator(\"#my-iframe\").getByText(\"Submit\");\nlocator.click();\n```\n\nLANGUAGE: python\nCODE:\n```\nlocator = frame.frame_locator(\"#my-iframe\").get_by_text(\"Submit\")\nawait locator.click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = frame.FrameLocator(\"#my-iframe\").GetByText(\"Submit\");\nawait locator.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Dragging Elements with Locator.dragTo in Java\nDESCRIPTION: Shows how to drag a source element to a target element in Java using Playwright's Locator.dragTo method. Also demonstrates specifying exact positions for drag source and target.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nLocator source = page.locator(\"#source\");\nLocator target = page.locator(\"#target\");\n\nsource.dragTo(target);\n// or specify exact positions relative to the top-left corners of the elements:\nsource.dragTo(target, new Locator.DragToOptions()\n  .setSourcePosition(34, 7).setTargetPosition(10, 20));\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Test for End-to-End Testing\nDESCRIPTION: Command to install the Playwright Test package, which is a test runner built specifically for end-to-end testing needs, supporting parallel test execution and browser automation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @playwright/test\n```\n\n----------------------------------------\n\nTITLE: Auto-waiting Navigation and Interaction in Java\nDESCRIPTION: Demonstrates how Playwright in Java automatically waits for elements to be actionable before interacting with them after navigation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Navigate and click element\n// Click will auto-wait for the element\npage.navigate(\"https://example.com\");\npage.getByText(\"Example Domain\").click();\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Geolocation in Python (Async)\nDESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright Python async API. This sets up the browser environment to emulate a specific geographic location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(\n  geolocation={\"longitude\": 41.890221, \"latitude\": 12.492348},\n  permissions=[\"geolocation\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL Navigation in Python (Async)\nDESCRIPTION: This snippet shows how to use Frame.wait_for_url to wait for navigation to a specific URL after clicking a link in Python using the async API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nawait frame.click(\"a.delayed-navigation\") # clicking the link will indirectly cause a navigation\nawait frame.wait_for_url(\"**/target.html\")\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for JavaScript Playwright in Containers\nDESCRIPTION: Configures a GitHub Actions workflow to run JavaScript Playwright tests inside a container, ensuring a consistent environment. The workflow executes tests using a Playwright Docker image and is triggered on push/pull requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\njobs:\\n  playwright:\\n    name: 'Playwright Tests'\\n    runs-on: ubuntu-latest\\n    container:\\n      image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\\n      options: --user 1001\\n    steps:\\n      - uses: actions/checkout@v4\\n      - uses: actions/setup-node@v4\\n        with:\\n          node-version: lts/*\\n      - name: Install dependencies\\n        run: npm ci\\n      - name: Run your tests\\n        run: npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State in Playwright with JavaScript\nDESCRIPTION: Demonstrates how to set the checked state of a checkbox element using the setChecked method in JavaScript. This example sets the checkbox to checked (true).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('checkbox').setChecked(true);\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Saving Downloads in Playwright (JavaScript)\nDESCRIPTION: Shows the asynchronous pattern in JavaScript using `page.waitForEvent('download')` to capture the `Download` object after triggering the download action (e.g., a click). It then saves the downloaded file to a specified path using `download.saveAs()` and `download.suggestedFilename()`. Requires a Playwright `page` object and an element that initiates a download.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Start waiting for download before clicking. Note no await.\nconst downloadPromise = page.waitForEvent('download');\nawait page.getByText('Download file').click();\nconst download = await downloadPromise;\n\n// Wait for the download process to complete and save the downloaded file somewhere.\nawait download.saveAs('/path/to/save/at/' + download.suggestedFilename());\n```\n\n----------------------------------------\n\nTITLE: Export Accessibility Scan Results as Test Attachment in JavaScript\nDESCRIPTION: Demonstrates adding complete accessibility scan results as a test attachment using the `testInfo.attach` method in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('example with attachment', async ({ page }, testInfo) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await new AxeBuilder({ page }).analyze();\n\n  await testInfo.attach('accessibility-scan-results', {\n    body: JSON.stringify(accessibilityScanResults, null, 2),\n    contentType: 'application/json'\n  });\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n----------------------------------------\n\nTITLE: Counting List Items in Playwright\nDESCRIPTION: Demonstrates how to count items in a list using assertions. This example checks that a list contains exactly 3 items by targeting all elements with the 'listitem' role.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.getByRole('listitem')).toHaveCount(3);\n```\n\nLANGUAGE: python-async\nCODE:\n```\nawait expect(page.get_by_role(\"listitem\")).to_have_count(3)\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nexpect(page.get_by_role(\"listitem\")).to_have_count(3)\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.getByRole(AriaRole.LISTITEM)).hasCount(3);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page.GetByRole(AriaRole.Listitem)).ToHaveCountAsync(3);\n```\n\n----------------------------------------\n\nTITLE: Simulating Keyboard Input with Shift Modifier in Playwright (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the Playwright Keyboard API in JavaScript to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It relies on the `page.keyboard` object and its methods `type`, `press`, `down`, and `up`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait page.keyboard.type('Hello World!');\nawait page.keyboard.press('ArrowLeft');\n\nawait page.keyboard.down('Shift');\nfor (let i = 0; i < ' World'.length; i++)\n  await page.keyboard.press('ArrowLeft');\nawait page.keyboard.up('Shift');\n\nawait page.keyboard.press('Backspace');\n// Result text will end up saying 'Hello!'\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Messages with Playwright in Python (Synchronous)\nDESCRIPTION: Synchronously sets up a WebSocket route using Playwright for Python, handling and responding to messages. Requires defining a handler function and setting up a page instance to route WebSockets.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\npage.route_web_socket(\"wss://example.com/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies from Playwright BrowserContext (JS, Java, Python, C#)\nDESCRIPTION: Illustrates clearing cookies using `clearCookies`. This method can remove all cookies within the context or selectively remove cookies based on provided filters like name, domain, or path. Multiple filter options can be combined.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait context.clearCookies();\nawait context.clearCookies({ name: 'session-id' });\nawait context.clearCookies({ domain: 'my-origin.com' });\nawait context.clearCookies({ domain: /.*my-origin\\.com/ });\nawait context.clearCookies({ path: '/api/v1' });\nawait context.clearCookies({ name: 'session-id', domain: 'my-origin.com' });\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.clearCookies();\ncontext.clearCookies(new BrowserContext.ClearCookiesOptions().setName(\"session-id\"));\ncontext.clearCookies(new BrowserContext.ClearCookiesOptions().setDomain(\"my-origin.com\"));\ncontext.clearCookies(new BrowserContext.ClearCookiesOptions().setPath(\"/api/v1\"));\ncontext.clearCookies(new BrowserContext.ClearCookiesOptions()\n                         .setName(\"session-id\")\n                         .setDomain(\"my-origin.com\"));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait context.clear_cookies()\nawait context.clear_cookies(name=\"session-id\")\nawait context.clear_cookies(domain=\"my-origin.com\")\nawait context.clear_cookies(path=\"/api/v1\")\nawait context.clear_cookies(name=\"session-id\", domain=\"my-origin.com\")\n```\n\nLANGUAGE: python\nCODE:\n```\ncontext.clear_cookies()\ncontext.clear_cookies(name=\"session-id\")\ncontext.clear_cookies(domain=\"my-origin.com\")\ncontext.clear_cookies(path=\"/api/v1\")\ncontext.clear_cookies(name=\"session-id\", domain=\"my-origin.com\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.ClearCookiesAsync();\nawait context.ClearCookiesAsync(new() { Name = \"session-id\" });\nawait context.ClearCookiesAsync(new() { Domain = \"my-origin.com\" });\nawait context.ClearCookiesAsync(new() { Path = \"/api/v1\" });\nawait context.ClearCookiesAsync(new() { Name = \"session-id\", Domain = \"my-origin.com\" });\n```\n\n----------------------------------------\n\nTITLE: Setting Expect Timeout for Individual Assertions (TypeScript)\nDESCRIPTION: This code demonstrates how to set a timeout for a single expect assertion. It sets a 10-second timeout for a specific toHaveText assertion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('example', async ({ page }) => {\n  await expect(locator).toHaveText('hello', { timeout: 10_000 });\n});\n```\n\n----------------------------------------\n\nTITLE: Using selectOption in Playwright with Python (sync)\nDESCRIPTION: Shows how to select options in a <select> element using different selection methods in Python with synchronous syntax. Demonstrates single selection by value, by label, and multiple selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_81\n\nLANGUAGE: python\nCODE:\n```\n# single selection matching the value or label\nelement.select_option(\"blue\")\n# single selection matching the label\nelement.select_option(label=\"blue\")\n# multiple selection for blue, red and second option\nelement.select_option(value=[\"red\", \"green\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Checking a Checkbox or Radio via Playwright C#\nDESCRIPTION: Relies on the Playwright C# library to ensure a checkbox is in the checked state, including all Playwright actionability steps. Throws if locator is not a checkbox/radio input or is removed during the operation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nawait page.GetByRole(AriaRole.Checkbox).CheckAsync();\n```\n\n----------------------------------------\n\nTITLE: Using Page.evaluate in C#\nDESCRIPTION: Examples of using the EvaluateAsync method in C# to execute JavaScript expressions in the page context. This method can accept arguments, evaluate strings, and work with ElementHandle objects, returning typed results.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await page.EvaluateAsync<int>(\"([x, y]) => Promise.resolve(x * y)\", new[] { 7, 8 });\nConsole.WriteLine(result);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(await page.EvaluateAsync<int>(\"1 + 2\")); // prints \"3\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar bodyHandle = await page.EvaluateAsync(\"document.body\");\nvar html = await page.EvaluateAsync<string>(\"([body, suffix]) => body.innerHTML + suffix\", new object [] { bodyHandle, \"hello\" });\nawait bodyHandle.DisposeAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Requests with Playwright Request Event Listener (Multi-Language)\nDESCRIPTION: Demonstrates how to subscribe to the 'requestfailed' event on a Playwright Page. When a request fails, the provided callback function is executed, logging the URL of the failed request and the associated error information obtained via the `request.failure()` method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\npage.on('requestfailed', request => {\n  console.log(request.url() + ' ' + request.failure().errorText);\n});\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.onRequestFailed(request -> {\n  System.out.println(request.url() + \" \" + request.failure());\n});\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```py\npage.on(\"requestfailed\", lambda request: print(request.url + \" \" + request.failure))\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npage.RequestFailed += (_, request) =>\n{\n    Console.WriteLine(request.Failure);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Contexts with Async Playwright (Python)\nDESCRIPTION: Provides the asynchronous Python code using `playwright.async_api` to launch a browser and create two distinct, isolated `BrowserContext` instances (`user_context`, `admin_context`) via `browser.new_context()`. This pattern is used for simulating concurrent, independent user sessions in async Python tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    # create a chromium browser instance\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n\n    # create two isolated browser contexts\n    user_context = await browser.new_context()\n    admin_context = await browser.new_context()\n\n    # create pages and interact with contexts independently\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using PlaywrightDevPage in TypeScript Tests\nDESCRIPTION: Example of how to use the PlaywrightDevPage class in TypeScript tests. The test verifies that the getting started page contains expected table of contents items and that the Page Object Model article is displayed correctly.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport { PlaywrightDevPage } from './playwright-dev-page';\n\ntest('getting started should contain table of contents', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.getStarted();\n  await expect(playwrightDev.tocList).toHaveText([\n    `How to install Playwright`,\n    `What's Installed`,\n    `How to run the example test`,\n    `How to open the HTML test report`,\n    `Write tests using web first assertions, page fixtures and locators`,\n    `Run single test, multiple tests, headed mode`,\n    `Generate tests with Codegen`,\n    `See a trace of your tests`\n  ]);\n});\n\ntest('should show Page Object Model article', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.pageObjectModel();\n  await expect(page.locator('article')).toContainText('Page Object Model is a common pattern');\n});\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Python Playwright in Containers\nDESCRIPTION: This snippet configures running Python Playwright tests using a container-enabled GitHub Actions workflow. It ensures environment consistency and executes tests using a Playwright Docker image for Python, optimizing for CI scenarios.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\njobs:\\n  playwright:\\n    name: 'Playwright Tests'\\n    runs-on: ubuntu-latest\\n    container:\\n      image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\\n      options: --user 1001\\n    steps:\\n      - uses: actions/checkout@v4\\n      - name: Set up Python\\n        uses: actions/setup-python@v4\\n        with:\\n          python-version: '3.11'\\n      - name: Install dependencies\\n        run: |\\n          python -m pip install --upgrade pip\\n          pip install -r local-requirements.txt\\n          pip install -e .\\n      - name: Run your tests\\n        run: pytest\n```\n\n----------------------------------------\n\nTITLE: Using the Page Fixture in Playwright Test\nDESCRIPTION: Demonstrates basic usage of the page fixture in a Playwright Test. The page fixture is automatically set up before the test and torn down afterward.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Negated PageAssertions in JavaScript\nDESCRIPTION: Example of using the .not property to negate an assertion in JavaScript, checking that a page URL doesn't contain 'error'. This demonstrates how to verify the absence of a pattern.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page).not.toHaveURL('error');\n```\n\n----------------------------------------\n\nTITLE: Viewing Playwright HTML Report (Bash)\nDESCRIPTION: Shows how to launch the Playwright HTML report, enabling users to review test results, traces, and other artifacts. Compatible with NPM, Yarn, and PNPM environments. Requires Playwright tests to have been executed and report artifacts to be present. Input: none. Output: starts local web server for the HTML report.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-report\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright show-report\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright show-report\n```\n\n----------------------------------------\n\nTITLE: Grouping Trace Actions with Tracing.group (Java)\nDESCRIPTION: Demonstrates how to explicitly group related actions within a Playwright trace in Java using `tracing().group()` and `tracing().groupEnd()`. Actions performed between these calls will appear under the specified group title ('Open Playwright.dev > API') in the Trace Viewer, improving readability for complex sequences.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// All actions between group and groupEnd\n// will be shown in the trace viewer as a group.\npage.context().tracing().group(\"Open Playwright.dev > API\");\npage.navigate(\"https://playwright.dev/\");\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"API\")).click();\npage.context().tracing().groupEnd();\n```\n\n----------------------------------------\n\nTITLE: Pinia Store Test Example\nDESCRIPTION: Example of testing a Vue component with Pinia store state override.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport type { HooksConfig } from '../playwright';\nimport Store from './Store.vue';\n\ntest('override initialState ', async ({ mount }) => {\n  const component = await mount<HooksConfig>(Store, {\n    hooksConfig: {\n      store: { name: 'override initialState' }\n    }\n  });\n  await expect(component).toContainText('override initialState');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Extra HTTP Headers in Playwright Tests\nDESCRIPTION: Example showing how to configure additional HTTP headers that will be sent with every request from the browser during tests, useful for authentication and custom request configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    extraHTTPHeaders: {\n      'X-My-Header': 'value',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Network Events in Playwright\nDESCRIPTION: Shows how to subscribe to and handle network request and response events in Playwright across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Subscribe to 'request' and 'response' events.\npage.on('request', request => console.log('>>', request.method(), request.url()));\npage.on('response', response => console.log('<<', response.status(), response.url()));\n\nawait page.goto('https://example.com');\n```\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      Browser browser = chromium.launch();\n      Page page = browser.newPage();\n      page.onRequest(request -> System.out.println(\">> \" + request.method() + \" \" + request.url()));\n      page.onResponse(response -> System.out.println(\"<<\" + response.status() + \" \" + response.url()));\n      page.navigate(\"https://example.com\");\n      browser.close();\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n    page = await browser.new_page()\n    # Subscribe to \"request\" and \"response\" events.\n    page.on(\"request\", lambda request: print(\">>\", request.method, request.url))\n    page.on(\"response\", lambda response: print(\"<<\", response.status, response.url))\n    await page.goto(\"https://example.com\")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\npage.Request += (_, request) => Console.WriteLine(\">> \" + request.Method + \" \" + request.Url);\npage.Response += (_, response) => Console.WriteLine(\"<< \" + response.Status + \" \" + response.Url);\nawait page.GotoAsync(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Setup in Playwright Test\nDESCRIPTION: Configuration to specify a global setup file that runs before all tests, useful for environment preparation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalSetup: './global-setup',\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Playwright CLI in Java\nDESCRIPTION: Command to run Playwright CLI using Maven exec plugin with help flag\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"--help\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Dependency with Maven - XML\nDESCRIPTION: Defines a Maven project structure including the Playwright Java client as a dependency. The pom.xml configures artifact details, dependency version, and builds/compiles options for Java 8 compatibility. Requires Maven and Java 8+ as prerequisites. The dependency on Playwright enables Java automation scripting and browser management. Users should replace %%VERSION%% with an actual release version.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\n  xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>org.example</groupId>\n  <artifactId>examples</artifactId>\n  <version>0.1-SNAPSHOT</version>\n  <name>Playwright Client Examples</name>\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>com.microsoft.playwright</groupId>\n      <artifactId>playwright</artifactId>\n      <version>%%VERSION%%</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.10.1</version>\n        <!-- References to interface static methods are allowed only at source level 1.8 or above -->\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Handling Frame Unavailability for Playwright Requests in JavaScript\nDESCRIPTION: Provides a JavaScript example demonstrating how to safely handle cases where `request.frame()` might not be available. It checks if the request originated from a Service Worker using `request.serviceWorker()` or if it's a navigation request using `request.isNavigationRequest()` before attempting to access `request.frame().url()`. This prevents errors when the frame context is not applicable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nif (request.serviceWorker())\n  console.log(`request ${request.url()} from a service worker`);\nelse if (request.isNavigationRequest())\n  console.log(`request ${request.url()} is a navigation request`);\nelse\n  console.log(`request ${request.url()} from a frame ${request.frame().url()}`);\n```\n```\n\n----------------------------------------\n\nTITLE: Unique Authentication Per Worker with JavaScript\nDESCRIPTION: Demonstrates an approach in which each Playwright parallel worker authenticates using a unique account. This ensures isolated state management for tests modifying server-side states.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as baseTest, expect } from '@playwright/test';\nimport fs from 'fs';\nimport path from 'path';\n\nexport * from '@playwright/test';\nexport const test = baseTest.extend<{}, { workerStorageState: string }>({\n  storageState: ({ workerStorageState }, use) => use(workerStorageState),\n  workerStorageState: [async ({ browser }, use) => {\n    const id = test.info().parallelIndex;\n    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);\n\n    if (fs.existsSync(fileName)) {\n      await use(fileName);\n      return;\n    }\n\n    const page = await browser.newPage({ storageState: undefined });\n    const account = await acquireAccount(id);\n\n    await page.goto('https://github.com/login');\n    await page.getByLabel('Username or email address').fill(account.username);\n    await page.getByLabel('Password').fill(account.password);\n    await page.getByRole('button', { name: 'Sign in' }).click();\n    await page.waitForURL('https://github.com/');\n    await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n    await page.context().storageState({ path: fileName });\n    await page.close();\n    await use(fileName);\n  }, { scope: 'worker' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Size in Playwright Test (JavaScript)\nDESCRIPTION: This snippet shows how to set both the video recording mode and the video size in the Playwright Test configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    video: {\n      mode: 'on-first-retry',\n      size: { width: 640, height: 480 }\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Emulating Offline Mode in Java\nDESCRIPTION: Creates a new browser context with offline mode enabled using the Playwright Java client. This allows testing how applications handle network unavailability.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_70\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setOffline(true));\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Pytest CLI\nDESCRIPTION: Example of using the pytest command line interface to run Playwright tests with specific options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest --browser webkit --headed\n```\n\n----------------------------------------\n\nTITLE: Clock API Usage for Time Manipulation in Java Playwright\nDESCRIPTION: Demonstrates using the Clock API to control and manipulate time within tests, including setting initial time, pausing at specific times, and fast-forwarding\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npage.clock().install(new Clock.InstallOptions().setTime(\"2024-02-02T08:00:00\"));\npage.navigate(\"http://localhost:3333\");\nLocator locator = page.getByTestId(\"current-time\");\n\npage.clock().pauseAt(\"2024-02-02T10:00:00\");\n\nassertThat(locator).hasText(\"2/2/2024, 10:00:00 AM\");\n\npage.clock().fastForward(\"30:00\");\nassertThat(locator).hasText(\"2/2/2024, 10:30:00 AM\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Certificates for TLS Authentication\nDESCRIPTION: Defines the clientCertificates option for browser contexts. This allows setting up TLS client authentication by providing certificate and key information for specific origins.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_50\n\nLANGUAGE: js\nCODE:\n```\n- `clientCertificates` <[Array]<[Object]>>\n  - `origin` <[string]> Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.\n  - `certPath` ?<[path]> Path to the file with the certificate in PEM format.\n  - `cert` ?<[Buffer]> Direct value of the certificate in PEM format.\n  - `keyPath` ?<[path]> Path to the file with the private key in PEM format.\n  - `key` ?<[Buffer]> Direct value of the private key in PEM format.\n  - `pfxPath` ?<[path]> Path to the PFX or PKCS12 encoded private key and certificate chain.\n  - `pfx` ?<[Buffer]> Direct value of the PFX or PKCS12 encoded private key and certificate chain.\n  - `passphrase` ?<[string]> Passphrase for the private key (PEM or PFX).\n\nTLS Client Authentication allows the server to request a client certificate and verify it.\n\n**Details**\n\nAn array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`, a single `pfxPath`, or their corresponding direct value equivalents (`cert` and `key`, or `pfx`). Optionally, `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.\n\n:::note\nWhen using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.\n:::\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright from Custom Artifact Repository (JavaScript)\nDESCRIPTION: Commands to install Playwright browsers from a custom artifact repository for JavaScript implementations using the PLAYWRIGHT_DOWNLOAD_HOST environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nnpx playwright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Using Locators for Element Interactions in C# Playwright\nDESCRIPTION: This snippet demonstrates how to create a Locator for a button element and perform a click action using the Locator API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = page.Locator(\"button\");\nawait locator.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: C# Page Evaluation Examples\nDESCRIPTION: Comprehensive examples of page evaluation in C# showing different data types and handle operations\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// A primitive value.\nawait page.EvaluateAsync<int>(\"num => num\", 42);\n\n// An array.\nawait page.EvaluateAsync<int[]>(\"array => array.length\", new[] { 1, 2, 3 });\n\n// An object.\nawait page.EvaluateAsync<object>(\"object => object.foo\", new { foo = \"bar\" });\n\n// A single handle.\nvar button = await page.EvaluateHandleAsync(\"window.button\");\nawait page.EvaluateAsync<IJSHandle>(\"button => button.textContent\", button);\n\n// Alternative notation using JSHandle.EvaluateAsync.\nawait button.EvaluateAsync<string>(\"(button, from) => button.textContent.substring(from)\", 5);\n\n// Object with multiple handles.\nvar button1 = await page.EvaluateHandleAsync(\"window.button1\");\nvar button2 = await page.EvaluateHandleAsync(\"window.button2\");\nawait page.EvaluateAsync(\"o => o.button1.textContent + o.button2.textContent\", new { button1, button2 });\n\n// Object destructuring works. Note that property names must match\n// between the destructured object and the argument.\n// Also note the required parenthesis.\nawait page.EvaluateAsync(\"({ button1, button2 }) => button1.textContent + button2.textContent\", new { button1, button2 });\n\n// Array works as well. Arbitrary names can be used for destructuring.\n// Note the required parenthesis.\nawait page.EvaluateAsync(\"([b1, b2]) => b1.textContent + b2.textContent\", new[] { button1, button2 });\n\n// Any mix of serializables and handles works.\nawait page.EvaluateAsync(\"x => x.button1.textContent + x.list[0].textContent + String(x.foo)\", new { button1, list = new[] { button2 }, foo = null as object });\n```\n\n----------------------------------------\n\nTITLE: Pressing an Uppercase Character using Shift in Playwright (JavaScript)\nDESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in JavaScript. It shows two ways to achieve this using `page.keyboard.press`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait page.keyboard.press('Shift+KeyA');\n// or\nawait page.keyboard.press('Shift+A');\n```\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matchers in Playwright Tests\nDESCRIPTION: Shows how to use a custom matcher (toHaveAmount) in a Playwright test after extending the expect functionality.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from './fixtures';\n\ntest('amount', async () => {\n  await expect(page.locator('.cart')).toHaveAmount(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Video Size with Browser Context (JavaScript)\nDESCRIPTION: This code shows how to create a new browser context with video recording enabled, specifying both the directory and the video size.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  recordVideo: {\n    dir: 'videos/',\n    size: { width: 640, height: 480 },\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Multiple Browsers\nDESCRIPTION: Command to run tests on multiple browsers by specifying multiple --browser flags.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest --browser webkit --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Debugging Playwright Tests in UI Mode\nDESCRIPTION: Debug tests in UI mode for a better developer experience with visual step-by-step debugging and additional features.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Testing with Chrome Extensions - Python\nDESCRIPTION: This Python test file includes test functions to assert that a Chrome extension correctly modifies web pages and its popup content. It uses Playwright functions like expect to verify text changes, leveraging predefined fixtures.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom playwright.sync_api import expect, Page\n\n\ndef test_example_test(page: Page) -> None:\n    page.goto(\"https://example.com\")\n    expect(page.locator(\"body\")).to_contain_text(\"Changed by my-extension\")\n\n\ndef test_popup_page(page: Page, extension_id: str) -> None:\n    page.goto(f\"chrome-extension://{extension_id}/popup.html\")\n    expect(page.locator(\"body\")).to_have_text(\"my-extension popup\")\n```\n\n----------------------------------------\n\nTITLE: CSS and XPath Selector Examples\nDESCRIPTION: Examples of using CSS and XPath selectors to locate elements, though not recommended as primary approach.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('css=button').click();\nawait page.locator('xpath=//button').click();\n\nawait page.locator('button').click();\nawait page.locator('//button').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"css=button\").click();\npage.locator(\"xpath=//button\").click();\n\npage.locator(\"button\").click();\npage.locator(\"//button\").click();\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with HTTPS Proxy (JavaScript)\nDESCRIPTION: Commands to install Playwright browsers through an HTTPS proxy for JavaScript implementations. Includes examples for bash, batch, and powershell environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS_PROXY=https://192.0.2.1 npx playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset HTTPS_PROXY=https://192.0.2.1\nnpx playwright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Configuring New Chromium Headless Mode - Java\nDESCRIPTION: Java code example for launching Chromium browser with new headless mode\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel(\"chromium\"));\n      Page page = browser.newPage();\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Locator Results Using Playwright Python (Sync)\nDESCRIPTION: Uses sync Python Playwright API to find all 'listitem' elements and perform clicks. Requires Playwright for Python and a synchronous page context. It selects all 'listitem' roles and iterates for clicks. Should be run after content load for reliability.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfor li in page.get_by_role('listitem').all():\n  li.click();\n```\n\n----------------------------------------\n\nTITLE: Taking Page Screenshot with Playwright\nDESCRIPTION: Shows how to use the new toHaveScreenshot assertion for taking screenshots of a page. This method waits for screenshot stabilization and enhances test reliability.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.goto('https://playwright.dev');\nawait expect(page).toHaveScreenshot();\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests via yarn - Bash\nDESCRIPTION: Executes Playwright test suites through yarn, running them across all enabled browsers using default settings. Requires a Playwright setup and at least one test file. Provides logs and results in the terminal and runs tests headlessly unless otherwise configured.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright test\n```\n\n----------------------------------------\n\nTITLE: Using Role Selectors in Playwright\nDESCRIPTION: Shows how to use Playwright's role selectors to select elements by their ARIA role, attributes, and accessible name. This example clicks a button with the accessible name 'log in'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// Click a button with accessible name \"log in\"\nawait page.locator('role=button[name=\"log in\"]').click();\n```\n\n----------------------------------------\n\nTITLE: Recording Traces with NUnit in Playwright C#\nDESCRIPTION: Implements trace recording in NUnit tests using Playwright. Sets up tracing with screenshots, snapshots, and source capturing, saving traces to a specified directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class Tests : PageTest\n{\n    [SetUp]\n    public async Task Setup()\n    {\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = TestContext.CurrentContext.Test.ClassName + \".\" + TestContext.CurrentContext.Test.Name,\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TearDown]\n    public async Task TearDown()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                TestContext.CurrentContext.WorkDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip\"\n            )\n        });\n    }\n\n    [Test]\n    public async Task TestYourOnlineShop()\n    {\n        // ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in Playwright Python (Async)\nDESCRIPTION: Shows how to use async/await pattern in Python with Playwright to handle file downloads. Involves waiting for download events and saving files. Requires the Playwright Python package and an asynchronous execution environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_2\n\nLANGUAGE: python async\nCODE:\n```\n# Start waiting for the download\nasync with page.expect_download() as download_info:\n    # Perform the action that initiates download\n    await page.get_by_text(\"Download file\").click()\ndownload = await download_info.value\n\n# Wait for the download process to complete and save the downloaded file somewhere\nawait download.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```\n\nLANGUAGE: python async\nCODE:\n```\nasync def handle_download(download):\n    print(await download.path())\npage.on(\"download\", handle_download)\n```\n\n----------------------------------------\n\nTITLE: Fetching and Modifying API Response in C#\nDESCRIPTION: Shows how to fetch an API response, modify its JSON content, and then fulfill the route with the modified response using Playwright in C#. This example adds a new breed to the dog API response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"https://dog.ceo/api/breeds/list/all\", async route =>\n{\n    var response = await route.FetchAsync();\n    dynamic json = await response.JsonAsync();\n    json.message.big_red_dog = new string[] {};\n    await route.FulfillAsync(new() { Response = response, Json = json });\n});\n```\n\n----------------------------------------\n\nTITLE: Reusing a Single Page Between Tests in Playwright (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to reuse a single Page object between multiple tests in Playwright. It creates a page in beforeAll, uses it in tests, and closes it in afterAll.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nconst { test } = require('@playwright/test');\n\ntest.describe.configure({ mode: 'serial' });\n\n/** @type {import('@playwright/test').Page} */\nlet page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```\n\n----------------------------------------\n\nTITLE: Routing WebSocket Connections in JavaScript\nDESCRIPTION: Example of routing WebSocket connections using Page.routeWebSocket method in JavaScript. It demonstrates how to intercept and respond to specific WebSocket messages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.routeWebSocket('/ws', ws => {\n  ws.onMessage(message => {\n    if (message === 'request')\n      ws.send('response');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Browser Contexts in Playwright Test Runner (JavaScript)\nDESCRIPTION: Shows how to create multiple independent `BrowserContext` instances (`adminContext`, `userContext`) within a single Playwright test using the `browser` fixture (`browser.newContext()`). This is useful for simulating multi-user scenarios like chats, ensuring each user operates in a separate, isolated environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('admin and user', async ({ browser }) => {\n  // Create two isolated browser contexts\n  const adminContext = await browser.newContext();\n  const userContext = await browser.newContext();\n\n  // Create pages and interact with contexts independently\n  const adminPage = await adminContext.newPage();\n  const userPage = await userContext.newPage();\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode\nDESCRIPTION: Execute tests in UI mode for a better developer experience with visual step-by-step debugging and additional features like locator picker and watch mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Configuring WCAG Compliance Scanning with Axe\nDESCRIPTION: Shows how to configure Axe to specifically check for WCAG A and AA compliance violations using tag filtering.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nAxeResults accessibilityScanResults = new AxeBuilder(page)\n  .withTags(Arrays.asList(\"wcag2a\", \"wcag2aa\", \"wcag21a\", \"wcag21aa\"))\n  .analyze();\n\nAssertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User Agent in Java\nDESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright Java client. This allows testing how websites respond to different browser identifications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_65\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setUserAgent(\"My user agent\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Server for Tests\nDESCRIPTION: Sets up a development web server during test execution with custom configuration for command, URL, timeout, and server reuse options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    timeout: 120 * 1000,\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: 'http://localhost:3000/',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Incognito Browser Context - Multiple Languages\nDESCRIPTION: Demonstrates how to create a new incognito browser context, create a page within it, navigate to a URL, and properly dispose of the context when finished.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a new incognito browser context\nconst context = await browser.newContext();\n// Create a new page inside context.\nconst page = await context.newPage();\nawait page.goto('https://example.com');\n// Dispose context once it's no longer needed.\nawait context.close();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Create a new incognito browser context\nBrowserContext context = browser.newContext();\n// Create a new page inside context.\nPage page = context.newPage();\npage.navigate(\"https://example.com\");\n// Dispose context once it is no longer needed.\ncontext.close();\n```\n\nLANGUAGE: python\nCODE:\n```\n# create a new incognito browser context\ncontext = browser.new_context()\n# create a new page inside context.\npage = context.new_page()\npage.goto(\"https://example.com\")\n# dispose context once it is no longer needed.\ncontext.close()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Firefox.LaunchAsync(new() { Headless = false });\n// Create a new incognito browser context\nvar context = await browser.NewContextAsync();\n// Create a new page inside context.\nvar page = await context.NewPageAsync();\nawait page.GotoAsync(\"https://bing.com\");\n// Dispose context once it is no longer needed.\nawait context.CloseAsync();\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Attribute Existence in JavaScript\nDESCRIPTION: Example of using toHaveAttribute to assert the presence of an attribute without checking its value. This is useful for verifying boolean attributes like 'disabled' or 'hidden'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('input');\n// Assert attribute existence.\nawait expect(locator).toHaveAttribute('disabled');\nawait expect(locator).not.toHaveAttribute('open');\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelectorAll in JavaScript\nDESCRIPTION: Example of using the evalOnSelectorAll (alias $$eval) method in JavaScript to evaluate expressions on all elements matching a selector. This method finds all matching elements and passes them as an array to the provided function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst divCounts = await page.$$eval('div', (divs, min) => divs.length >= min, 10);\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript in Browser Context with Playwright in TypeScript\nDESCRIPTION: Example that navigates to example.com and executes a JavaScript function in the page context to retrieve the dimensions of the viewport and device scale factor.\nSOURCE: https://github.com/microsoft/playwright/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('Evaluate in browser context', async ({ page }) => {\n  await page.goto('https://www.example.com/');\n  const dimensions = await page.evaluate(() => {\n    return {\n      width: document.documentElement.clientWidth,\n      height: document.documentElement.clientHeight,\n      deviceScaleFactor: window.devicePixelRatio\n    }\n  });\n  console.log(dimensions);\n});\n```\n\n----------------------------------------\n\nTITLE: Component Testing with MSW Router Integration\nDESCRIPTION: Example showing how to use the new router fixture to intercept network requests in component testing by integrating with MSW library handlers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { handlers } from '@src/mocks/handlers';\n\ntest.beforeEach(async ({ router }) => {\n  // install common handlers before each test\n  await router.use(...handlers);\n});\n\ntest('example test', async ({ mount }) => {\n  // test as usual, your handlers are active\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Dumping Frame Tree using Playwright Sync API in Python\nDESCRIPTION: This synchronous Python snippet shows how to use Playwright's sync API to launch Firefox, navigate to a webpage, and recursively print the frame hierarchy. It defines a `run` function and a helper `dump_frame_tree` function that outputs the name and URL of each frame, using indentation for child frames. The script executes synchronously using a `with` statement for the Playwright context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    firefox = playwright.firefox\n    browser = firefox.launch()\n    page = browser.new_page()\n    page.goto(\"https://www.theverge.com\")\n    dump_frame_tree(page.main_frame, \"\")\n    browser.close()\n\ndef dump_frame_tree(frame, indent):\n    print(indent + frame.name + '@' + frame.url)\n    for child in frame.child_frames:\n        dump_frame_tree(child, indent + \"    \")\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Video Path in Playwright - JavaScript\nDESCRIPTION: The purpose of this code is to demonstrate how to retrieve the file system path of a video recording in Playwright using JavaScript. This process requires creating a browser context with the recordVideo option enabled. The output provides the path where the video will be stored once the browser context closes. This method throws an error if connected remotely.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(await page.video().path());\n```\n\n----------------------------------------\n\nTITLE: Updating Playwright and Pytest Plugin\nDESCRIPTION: Command to update both Playwright and the Pytest plugin to their latest versions using pip.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-playwright playwright -U\n```\n\n----------------------------------------\n\nTITLE: Creating a Page and Taking a Screenshot in Java\nDESCRIPTION: This snippet shows how to create a new page, navigate to a URL, and save a screenshot using Playwright in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType webkit = playwright.webkit();\n      Browser browser = webkit.launch();\n      BrowserContext context = browser.newContext();\n      Page page = context.newPage();\n      page.navigate(\"https://example.com\");\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n      browser.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Visible Elements with Locator in Java\nDESCRIPTION: Example of using the new visible filter option with Locator.filter to match only visible elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Ignore invisible todo items.\nLocator todoItems = page.getByTestId(\"todo-item\")\n    .filter(new Locator.FilterOptions().setVisible(true));\n// Check there are exactly 3 visible ones.\nassertThat(todoItems).hasCount(3);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inline Init Script\nDESCRIPTION: Example of using an inline initialization script with a parameter in JavaScript\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\n// Add script for every test in the beforeEach hook.\ntest.beforeEach(async ({ page }) => {\n  const value = 42;\n  await page.addInitScript(value => {\n    Math.random = () => value;\n  }, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Callback on Every Actionability Check with Locator Handler in Python (Asynchronous)\nDESCRIPTION: Asynchronous Python implementation of a locator handler with the body element that runs a custom JavaScript function before every actionability check. Uses the no_wait_after parameter since the handler doesn't hide the body element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_89\n\nLANGUAGE: python\nCODE:\n```\n# Setup the handler.\ndef handler():\n  await page.evaluate(\"window.removeObstructionsForTestIfNeeded()\")\nawait page.add_locator_handler(page.locator(\"body\"), handler, no_wait_after=True)\n\n# Write the test as usual.\nawait page.goto(\"https://example.com\")\nawait page.get_by_role(\"button\", name=\"Start here\").click()\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Playwright APIRequestContext (Async) in Python\nDESCRIPTION: Demonstrates how to use the asynchronous `APIRequestContext` in Playwright (Python) to make API calls (POST to create, DELETE to remove) to the GitHub API. It shows initializing the context from a browser context (sharing cookies) or manually, setting headers (including authorization), and asserting response status and content. Dependencies include `playwright.async_api`, `os`, and `asyncio`. Requires a GitHub API token set as an environment variable (`GITHUB_API_TOKEN`).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python async\nimport os\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nREPO = \"test-repo-1\"\nUSER = \"github-username\"\nAPI_TOKEN = os.getenv(\"GITHUB_API_TOKEN\")\n\nasync def run(playwright: Playwright):\n    # This will launch a new browser, create a context and page. When making HTTP\n    # requests with the internal APIRequestContext (e.g. `context.request` or `page.request`)\n    # it will automatically set the cookies to the browser page and vice versa.\n    browser = await playwright.chromium.launch()\n    context = await browser.new_context(base_url=\"https://api.github.com\")\n    api_request_context = context.request\n    page = await context.new_page()\n\n    # Alternatively you can create a APIRequestContext manually without having a browser context attached:\n    # api_request_context = await playwright.request.new_context(base_url=\"https://api.github.com\")\n\n    # Create a repository.\n    response = await api_request_context.post(\n        \"/user/repos\",\n        headers={\n            \"Accept\": \"application/vnd.github.v3+json\",\n            # Add GitHub personal access token.\n            \"Authorization\": f\"token {API_TOKEN}\",\n        },\n        data={\"name\": REPO},\n    )\n    assert response.ok\n    assert response.json()[\"name\"] == REPO\n\n    # Delete a repository.\n    response = await api_request_context.delete(\n        f\"/repos/{USER}/{REPO}\",\n        headers={\n            \"Accept\": \"application/vnd.github.v3+json\",\n            # Add GitHub personal access token.\n            \"Authorization\": f\"token {API_TOKEN}\",\n        },\n    )\n    assert response.ok\n    assert await response.body() == '{\"status\": \"ok\"}'\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\n\nasyncio.run(main())\n```\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Checks in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet shows how to set up a GitHub Actions workflow to run TypeScript type checks and Playwright tests. It includes steps for running the TypeScript compiler and Playwright tests separately.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    ...\n    - name: Run type checks\n      run: npx tsc -p tsconfig.json --noEmit\n    - name: Run Playwright tests\n      run: npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Using SearchPage in Python Async Tests\nDESCRIPTION: Example of how to use the asynchronous SearchPage class in Python tests. It shows how to initialize the page object with a browser page and use it to navigate and search asynchronously.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom models.search import SearchPage\n\n# in the test\npage = await browser.new_page()\nsearch_page = SearchPage(page)\nawait search_page.navigate()\nawait search_page.search(\"search query\")\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Events in Playwright using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to subscribe to the 'worker' event on a Playwright Page object to detect when a new WebWorker is created. It also shows how to subscribe to the 'close' event on the Worker instance to detect when it's destroyed. Additionally, it iterates through the currently active workers associated with the page and logs their URLs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-worker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npage.on('worker', worker => {\n  console.log('Worker created: ' + worker.url());\n  worker.on('close', worker => console.log('Worker destroyed: ' + worker.url()));\n});\n\nconsole.log('Current workers:');\nfor (const worker of page.workers())\n  console.log('  ' + worker.url());\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Navigation Timeout (Python/Java/CSharp)\nDESCRIPTION: Specifies the maximum time in milliseconds for navigation operations in Playwright for Python, Java, and C#. It defaults to 30000 ms (30 seconds). Setting it to 0 disables the timeout. This default can be overridden using methods like `BrowserContext.setDefaultNavigationTimeout` or `Page.setDefaultNavigationTimeout`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `timeout` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Using beforeEach Hook with Title in Playwright Tests\nDESCRIPTION: Demonstrates how to create a beforeEach hook with a descriptive title. This example navigates to a starting URL before each test and logs the test title.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntest.beforeEach('Open start URL', async ({ page }) => {\n  console.log(`Running ${test.info().title}`);\n  await page.goto('https://my.start.url/');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Pytest via PyPI\nDESCRIPTION: Command to install the Playwright Pytest plugin using pip package manager.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-playwright\n```\n\n----------------------------------------\n\nTITLE: Auto-waiting Navigation and Interaction in JavaScript\nDESCRIPTION: Demonstrates how Playwright in JavaScript automatically waits for elements to be actionable before interacting with them after navigation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Navigate and click element\n// Click will auto-wait for the element\nawait page.goto('https://example.com');\nawait page.getByText('Example Domain').click();\n```\n\n----------------------------------------\n\nTITLE: Using Base URL in Playwright Tests\nDESCRIPTION: Example of navigating to a relative URL that will be combined with the base URL specified in the pytest command.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef test_visit_example(page):\n    page.goto(\"/admin\")\n    # -> Will result in http://localhost:8080/admin\n```\n\n----------------------------------------\n\nTITLE: Setting Global Timeout in Playwright Config (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set a global timeout for the entire test run in the Playwright configuration file. It sets a timeout of 1 hour (3,600,000 milliseconds) for the whole test suite.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTimeout: 3_600_000,\n});\n```\n\n----------------------------------------\n\nTITLE: Automated Drag and Drop Operations\nDESCRIPTION: Shows how to perform automated drag and drop operations using Playwright's dragTo() method. The operation includes hovering, pressing mouse button, moving to target, and releasing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('#item-to-be-dragged').dragTo(page.locator('#item-to-drop-at'));\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"#item-to-be-dragged\").dragTo(page.locator(\"#item-to-drop-at\"));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"#item-to-be-dragged\").drag_to(page.locator(\"#item-to-drop-at\"))\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"#item-to-be-dragged\").DragToAsync(page.Locator(\"#item-to-drop-at\"));\n```\n\n----------------------------------------\n\nTITLE: Testing Events in Vue Components with Playwright\nDESCRIPTION: Illustrates testing events in Vue components using Playwright's component testing framework. It shows two approaches: using the options API and the JSX-style syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('event', async ({ mount }) => {\n  const component = await mount(Component, { on: { click() {} } });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('event', async ({ mount }) => {\n  const component = await mount(<Component v-on:click={() => {}} />);\n});\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Java Playwright\nDESCRIPTION: This YAML script configures a GitHub Actions workflow for Java Playwright tests. It sets up a Java environment upon push or pull requests, installs dependencies, configures Playwright via Maven, and executes tests, optimizing for CI setups.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\njobs:\\n  test:\\n    timeout-minutes: 60\\n    runs-on: ubuntu-latest\\n    steps:\\n    - uses: actions/checkout@v4\\n    - uses: actions/setup-java@v3\\n      with:\\n        distribution: 'temurin'\\n        java-version: '17'\\n    - name: Build & Install\\n      run: mvn -B install -D skipTests --no-transfer-progress\\n    - name: Ensure browsers are installed\\n      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"install --with-deps\\\"\\n    - name: Run tests\\n      run: mvn test\n```\n\n----------------------------------------\n\nTITLE: Example Test Using Screenshot Assertion\nDESCRIPTION: Shows a test file implementing toHaveScreenshot assertion with custom snapshot path arguments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('suite', () => {\n  test('test should work', async ({ page }) => {\n    await expect(page).toHaveScreenshot(['foo', 'bar', 'baz.png']);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Error.stack Property in Playwright (Python)\nDESCRIPTION: Implements the optional stack property for the Playwright Error class. When available, this string property contains the stack trace of the error occurring inside the browser, providing valuable debugging context. It may be None if the stack information is not available, and it does not require external libraries.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-error.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    @property\n    def stack(self) -> str:\n        \"\"\"Stack of the error which got thrown inside the browser. Optional.\"\"\"\n        return getattr(self, '_error_stack', None)\n\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions on Frame in Java\nDESCRIPTION: Demonstrates the usage of the evaluate method in Java to execute a JavaScript expression within a frame and return its result.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nObject result = frame.evaluate(\"([x, y]) => {\\n\" +\n  \"  return Promise.resolve(x * y);\\n\" +\n  \"}\", Arrays.asList(7, 8));\nSystem.out.println(result); // prints \"56\"\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors on Frame in Java\nDESCRIPTION: Shows how to use the evalOnSelectorAll method in Java to evaluate a selector on a frame and return a boolean result based on the number of matching elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nboolean divsCounts = (boolean) page.evalOnSelectorAll(\"div\", \"(divs, min) => divs.length >= min\", 10);\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser with Custom Arguments Using Playwright Python (Async)\nDESCRIPTION: Shows how to specify launch options (ignore default args) when starting a browser using Playwright's async Python API. Requires Playwright Python async bindings. Inputs include browser options like 'ignore_default_args'. Returns a browser instance with customized settings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbrowser = await playwright.chromium.launch( # or \\\"firefox\\\" or \\\"webkit\\\".\\n    ignore_default_args=[\\\"--mute-audio\\\"]\\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring User Agent and Viewport in Playwright Config\nDESCRIPTION: Sets a custom user agent and viewport size for all tests in the Playwright configuration file. These options will be inherited by contexts created using the built-in browser fixture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    userAgent: 'some custom ua',\n    viewport: { width: 100, height: 100 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using ControlOrMeta Modifier Key in Python\nDESCRIPTION: This example demonstrates how to use the ControlOrMeta modifier key, which maps to Meta on macOS and Control on Windows and Linux, for keyboard shortcuts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Press the common keyboard shortcut Control+S or Meta+S to trigger a \"Save\" operation.\npage.keyboard.press(\"ControlOrMeta+S\")\n```\n\n----------------------------------------\n\nTITLE: Managing Color Scheme and Media in Python (Sync)\nDESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright Python sync API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_61\n\nLANGUAGE: python\nCODE:\n```\n# Create context with dark mode\ncontext = browser.new_context(\n  color_scheme='dark' # or 'light'\n)\n\n# Create page with dark mode\npage = browser.new_page(\n  color_scheme='dark' # or 'light'\n)\n\n# Change color scheme for the page\npage.emulate_media(color_scheme='dark')\n\n# Change media for page\npage.emulate_media(media='print')\n```\n\n----------------------------------------\n\nTITLE: Asserting Banner ARIA Snapshot using Playwright JS\nDESCRIPTION: This JavaScript snippet demonstrates how to perform an ARIA snapshot test on a banner element. It navigates to 'https://playwright.dev/', selects the element with the role 'banner', and asserts that its accessibility tree matches the provided YAML snapshot template using `toMatchAriaSnapshot`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait page.goto('https://playwright.dev/');\nawait expect(page.getByRole('banner')).toMatchAriaSnapshot(`\n  - banner:\n    - heading /Playwright enables reliable end-to-end/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n`);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating JSHandle with Page.evaluateHandle in JavaScript\nDESCRIPTION: Demonstrates how to create a JSHandle for the window object using Page.evaluateHandle method in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst windowHandle = await page.evaluateHandle(() => window);\n```\n\n----------------------------------------\n\nTITLE: Setting Input Files for Directory Upload in Python\nDESCRIPTION: This snippet shows how to use the setInputFiles method to upload a directory for input elements that support directory uploads.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_label(\"Upload directory\").set_input_files('mydir')\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Pytest\nDESCRIPTION: Command to run Playwright tests using Pytest. By default, tests run on Chromium in headless mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright in VS Code\nDESCRIPTION: This command is used within Visual Studio Code to install Playwright using the command palette. It sets up the necessary testing environment with Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/getting-started-vscode-js.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nInstall Playwright\n```\n\n----------------------------------------\n\nTITLE: Capturing Element Screenshots with Locator.screenshot() in Playwright\nDESCRIPTION: Takes a screenshot of a specific element on the page. Supports options for disabling animations and saving to a file. The method handles scrolling the element into view before capturing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('link').screenshot();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.LINK).screenshot();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"link\").screenshot()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_role(\"link\").screenshot()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Link).ScreenshotAsync();\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Pytest Bash\nDESCRIPTION: The snippet illustrates how to run Python Playwright tests using Pytest, suitable for CI environments. Running `pytest` executes the test suite, useful for continuous checks and verification of software functionality.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Timezone via Context Options (JavaScript Library)\nDESCRIPTION: This snippet shows how to create a new browser context with a specific locale (`de-DE`) and timezone (`Europe/Berlin`) using the Playwright JavaScript library. These options are passed directly to `browser.newContext`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-library\nconst context = await browser.newContext({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Tracing Enabled (Bash)\nDESCRIPTION: This command demonstrates how to run Playwright tests with tracing enabled locally. It uses the --trace on flag to force tracing for all tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --trace on\n```\n\n----------------------------------------\n\nTITLE: Waiting for Navigation After Timeout Click in Python (Async)\nDESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in Python using async syntax. Resolves after navigation has finished.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_132\n\nLANGUAGE: python\nCODE:\n```\nasync with page.expect_navigation():\n    # This action triggers the navigation after a timeout.\n    await page.get_by_text(\"Navigate after timeout\").click()\n# Resolves after navigation has finished\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView2 Test Environment in JavaScript\nDESCRIPTION: This code sets up a custom test environment for WebView2 applications using Playwright in JavaScript. It launches a WebView2 process, connects Playwright to it, and provides isolated contexts for each test run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport childProcess from 'child_process';\n\nconst EXECUTABLE_PATH = path.join(\n    __dirname,\n    '../../webview2-app/bin/Debug/net8.0-windows/webview2.exe',\n);\n\nexport const test = base.extend({\n  browser: async ({ playwright }, use, testInfo) => {\n    const cdpPort = 10000 + testInfo.workerIndex;\n    // Make sure that the executable exists and is executable\n    fs.accessSync(EXECUTABLE_PATH, fs.constants.X_OK);\n    const userDataDir = path.join(\n        fs.realpathSync.native(os.tmpdir()),\n        `playwright-webview2-tests/user-data-dir-${testInfo.workerIndex}`,\n    );\n    const webView2Process = childProcess.spawn(EXECUTABLE_PATH, [], {\n      shell: true,\n      env: {\n        ...process.env,\n        WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: `--remote-debugging-port=${cdpPort}`,\n        WEBVIEW2_USER_DATA_FOLDER: userDataDir,\n      }\n    });\n    await new Promise<void>(resolve => webView2Process.stdout.on('data', data => {\n      if (data.toString().includes('WebView2 initialized'))\n        resolve();\n    }));\n    const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);\n    await use(browser);\n    await browser.close();\n    childProcess.execSync(`taskkill /pid ${webView2Process.pid} /T /F`);\n    fs.rmdirSync(userDataDir, { recursive: true });\n  },\n  context: async ({ browser }, use) => {\n    const context = browser.contexts()[0];\n    await use(context);\n  },\n  page: async ({ context }, use) => {\n    const page = context.pages()[0];\n    await use(page);\n  },\n});\n\nexport { expect } from '@playwright/test';\n```\n\n----------------------------------------\n\nTITLE: Advanced Request Routing with Fallback\nDESCRIPTION: Example of chained request routing with fallback handling for header modification and resource type filtering\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n// Remove a header from all requests.\npage.route(\"**/*\", route -> {\n  Map<String, String> headers = new HashMap<>(route.request().headers());\n  headers.remove(\"X-Secret\");\n  route.resume(new Route.ResumeOptions().setHeaders(headers));\n});\n\n// Abort all images.\npage.route(\"**/*\", route -> {\n  if (\"image\".equals(route.request().resourceType()))\n    route.abort();\n  else\n    route.fallback();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Selector Engine with Playwright in Java\nDESCRIPTION: This Java snippet shows how to register a custom selector engine by providing an engine script as a string, enabling element selection by tag with the 'tag=' prefix. It uses the Playwright Java API, requires script definition matching the engine interface, and demonstrates interactions with the browser, page, and locators. Inputs include the engine name and script; outputs include located elements and their counts. Dependencies: Playwright Java APIs and a supported browser driver.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Script that evaluates to a selector engine instance. The script is evaluated in the page context.\\nString createTagNameEngine = \\\"{\\n\\\" +\\n  \\\"  // Returns the first element matching given selector in the root's subtree.\\\\n\\\" +\\n  \\\"  query(root, selector) {\\\\n\\\" +\\n  \\\"    return root.querySelector(selector);\\\\n\\\" +\\n  \\\"  },\\\\n\\\" +\\n  \\\"  // Returns all elements matching given selector in the root's subtree.\\\\n\\\" +\\n  \\\"  queryAll(root, selector) {\\\\n\\\" +\\n  \\\"    return Array.from(root.querySelectorAll(selector));\\\\n\\\" +\\n  \\\"  }\\\\n\\\" +\\n  \\\"}\\\";\\n// Register the engine. Selectors will be prefixed with \\\"tag=\\\".\\nplaywright.selectors().register(\\\"tag\\\", createTagNameEngine);\\nBrowser browser = playwright.firefox().launch();\\nPage page = browser.newPage();\\npage.setContent(\\\"\\u003cdiv\\u003e\\u003cbutton\\u003eClick me\\u003c/button\\u003e\\u003c/div\\u003e\\\");\\n// Use the selector prefixed with its name.\\nLocator button = page.locator(\\\"tag=button\\\");\\n// Combine it with built-in locators.\\npage.locator(\\\"tag=div\\\").getByText(\\\"Click me\\\").click();\\n// Can use it in any methods supporting selectors.\\nint buttonCount = (int) page.locator(\\\"tag=button\\\").count();\\nbrowser.close();\n```\n\n----------------------------------------\n\nTITLE: Response Interception with Image Processing in Playwright\nDESCRIPTION: Example showing how to intercept and modify responses by combining API testing with request interception, specifically demonstrating how to blur JPEG images using the jimp library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport jimp from 'jimp'; // image processing library\n\ntest('response interception', async ({ page }) => {\n  await page.route('**/*.jpeg', async route => {\n    const response = await page._request.fetch(route.request());\n    const image = await jimp.read(await response.body());\n    await image.blur(5);\n    await route.fulfill({\n      response,\n      body: await image.getBufferAsync('image/jpeg'),\n    });\n  });\n  const response = await page.goto('https://playwright.dev');\n  expect(response.status()).toBe(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Per-Assertion Timeout Configuration\nDESCRIPTION: Shows how to set timeout for individual assertions in both Python and C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import expect\n\ndef test_foobar(page: Page) -> None:\n    expect(page.get_by_text(\"Name\")).to_be_visible(timeout=10_000)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page.GetByText(\"Name\")).ToBeVisibleAsync(new() { Timeout = 10_000 });\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL Navigation in Python (Sync)\nDESCRIPTION: This snippet demonstrates how to use Frame.wait_for_url to wait for navigation to a specific URL after clicking a link in Python using the sync API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nframe.click(\"a.delayed-navigation\") # clicking the link will indirectly cause a navigation\nframe.wait_for_url(\"**/target.html\")\n```\n\n----------------------------------------\n\nTITLE: Emulating Geolocation, Language and Timezone with Playwright Codegen for C#\nDESCRIPTION: Command to generate code while emulating Rome, Italy location, Italian language, and European/Rome timezone for Bing Maps using C#. This PowerShell execution demonstrates testing location-aware applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors with Playwright Frame - Python\nDESCRIPTION: Performs element selection evaluations in Python using Playwright. It facilitates retrieving or altering element properties, and supports asynchronous and synchronous operations with selector targeting.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nsearch_value = await frame.eval_on_selector(\"#search\", \"el => el.value\")\npreload_href = await frame.eval_on_selector(\"link[rel=preload]\", \"el => el.href\")\nhtml = await frame.eval_on_selector(\".main-container\", \"(e, suffix) => e.outerHTML + suffix\", \"hello\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nsearch_value = frame.eval_on_selector(\"#search\", \"el => el.value\")\npreload_href = frame.eval_on_selector(\"link[rel=preload]\", \"el => el.href\")\nhtml = frame.eval_on_selector(\".main-container\", \"(e, suffix) => e.outerHTML + suffix\", \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Using Viewport Assertions in Playwright\nDESCRIPTION: Shows how to use the new toBeInViewport assertion to verify element visibility within the viewport using different ratio options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = page.getByRole('button');\n\n// Make sure at least some part of element intersects viewport.\nawait expect(button).toBeInViewport();\n\n// Make sure element is fully outside of viewport.\nawait expect(button).not.toBeInViewport();\n\n// Make sure that at least half of the element intersects viewport.\nawait expect(button).toBeInViewport({ ratio: 0.5 });\n```\n\n----------------------------------------\n\nTITLE: Loading Chrome Extension with Playwright in Headless Mode - Python Sync\nDESCRIPTION: This snippet runs a Chrome extension in headless mode using Playwright in synchronous Python. It involves launching a persistent browser context, handling the background page, and closing it after running tests, relying on the Playwright library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\npath_to_extension = \"./my-extension\"\nuser_data_dir = \"/tmp/test-user-data-dir\"\n\n\ndef run(playwright: Playwright):\n    context = playwright.chromium.launch_persistent_context(\n        user_data_dir,\n        channel=\"chromium\",\n        args=[\n            f\"--disable-extensions-except={path_to_extension}\",\n            f\"--load-extension={path_to_extension}\",\n        ],\n    )\n    if len(context.background_pages) == 0:\n        background_page = context.wait_for_event('backgroundpage')\n    else:\n        background_page = context.background_pages[0]\n\n    # Test the background page as you would any other page.\n    context.close()\n\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict Mode Click in Java\nDESCRIPTION: Example of using strict mode with click action to ensure selector points to a single element\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\npage.click(\"button\", new Page.ClickOptions().setStrict(true));\n```\n\n----------------------------------------\n\nTITLE: Routing from HAR File in Playwright\nDESCRIPTION: Example of using routeFromHAR to serve responses from a previously recorded HAR file. This allows mocking network responses based on recorded traffic.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nawait context.routeFromHAR('github.har.zip');\n```\n\n----------------------------------------\n\nTITLE: Catching TimeoutError in Playwright (JavaScript/Node.js)\nDESCRIPTION: This Node.js example demonstrates launching a Chromium browser, creating a page context, and attempting to click an element ('Foo') with a very short timeout (100ms). It shows how to use a try-catch block to specifically check for and handle the `playwright.errors.TimeoutError` if the click operation fails to complete within the given time.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst playwright = require('playwright');\n\n(async () => {\n  const browser = await playwright.chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  try {\n    await page.locator('text=Foo').click({\n      timeout: 100,\n    });\n  } catch (error) {\n    if (error instanceof playwright.errors.TimeoutError)\n      console.log('Timeout!');\n  }\n  await browser.close();\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Opening Playwright HTML Test Report from Custom Location\nDESCRIPTION: Demonstrates how to open an HTML test report from a custom folder location using the Playwright CLI.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-report my-report\n```\n\n----------------------------------------\n\nTITLE: Loading Authentication State with Playwright Codegen for JavaScript\nDESCRIPTION: Command to generate code for GitHub while loading previously saved authentication state from auth.json using JavaScript. This maintains login sessions without requiring re-authentication.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright codegen --load-storage=auth.json github.com/microsoft/playwright\n```\n\n----------------------------------------\n\nTITLE: Debugging Playwright Tests with Inspector (PowerShell)\nDESCRIPTION: Commands to debug Playwright tests using the Playwright Inspector in PowerShell.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n$env:PWDEBUG=1\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Using XPath Locator in Playwright\nDESCRIPTION: XPath locators allow finding elements using XPath expressions. This example demonstrates clicking on a button using XPath selector.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('xpath=//button').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"xpath=//button\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"xpath=//button\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"xpath=//button\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"xpath=//button\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Headers in Python (Async)\nDESCRIPTION: Demonstrates how to modify request headers while falling back to the subsequent handler in Playwright using Python with async/await syntax. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nasync def handle(route, request):\n    # override headers\n    headers = {\n        **request.headers,\n        \"foo\": \"foo-value\", # set \"foo\" header\n        \"bar\": None # remove \"bar\" header\n    }\n    await route.fallback(headers=headers)\n\nawait page.route(\"**/*\", handle)\n```\n\n----------------------------------------\n\nTITLE: Locating Elements Inside Frames with Playwright Java\nDESCRIPTION: This Java code shows how to work with Playwright to locate elements inside an iframe using the frameLocator API. It chains frame locator selection and label-based queries, then fills the located input. Requires Playwright for Java, and assumes 'page' is initialized. The example uses '.frame-class' for the iframe and 'User Name' as the label.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/frames.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Locate element inside frame\nLocator username = page.frameLocator(\".frame-class\").getByLabel(\"User Name\");\nusername.fill(\"John\");\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using an ElementHandle with waitForSelector in JavaScript\nDESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.waitForSelector` in JavaScript, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Get the element handle\nconst elementHandle = page.waitForSelector('#box');\n\n// Assert bounding box for the element\nconst boundingBox = await elementHandle.boundingBox();\nexpect(boundingBox.width).toBe(100);\n\n// Assert attribute for the element\nconst classNames = await elementHandle.getAttribute('class');\nexpect(classNames.includes('highlighted')).toBeTruthy();\n```\n```\n\n----------------------------------------\n\nTITLE: Element Interaction Examples in Playwright\nDESCRIPTION: Demonstrates different ways to interact with page elements using Playwright's Locator API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a locator.\nvar getStarted = Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" });\n\n// Click it.\nawait getStarted.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Running tests on different browsers using Playwright for Java\nDESCRIPTION: This Java snippet illustrates how to run tests across different browsers utilizing Playwright. The choice of browser is determined by an environment variable `BROWSER`, allowing flexibility in browser selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      // Launch chromium, firefox or webkit.\n      Browser browser = playwright.chromium().launch();\n      Page page = browser.newPage();\n      // ...\n    }\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = null;\n      String browserName = System.getenv(\\\"BROWSER\\\");\n      if (browserName.equals(\\\"chromium\\\")) {\n        browser = playwright.chromium().launch();\n      } else if (browserName.equals(\\\"firefox\\\")) {\n        browser = playwright.firefox().launch();\n      } else if (browserName.equals(\\\"webkit\\\")) {\n        browser = playwright.webkit().launch();\n      }\n      Page page = browser.newPage();\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Error Throwing with toThrow in JavaScript\nDESCRIPTION: Shows how to use `expect().toThrow()` in Playwright to assert that a function call throws an error. It can optionally compare the thrown error against an expected value, which can be a regular expression (to match the message), a string (to check for substring inclusion in the message), an Error object (to match the message exactly), or an Error class (to check the instance type).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrow();\n\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrow(/something/);\n\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrow(Error);\n```\n```\n\n----------------------------------------\n\nTITLE: Using waitForSelector across navigations in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the waitForSelector method to wait for an image element across multiple page navigations in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_144\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  for (const currentURL of ['https://google.com', 'https://bbc.com']) {\n    await page.goto(currentURL);\n    const element = await page.waitForSelector('img');\n    console.log('Loaded image: ' + await element.getAttribute('src'));\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Responses with Regular Expressions in C#\nDESCRIPTION: Demonstrates how to wait for a network response using a regular expression pattern or a predicate function in C#. The example creates a task to wait for a response matching the criteria and then clicks on an element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Use a regular expression\nvar waitForResponseTask = page.WaitForResponseAsync(new Regex(\"\\\\.jpeg$\"));\nawait page.GetByText(\"Update\").ClickAsync();\nvar response = await waitForResponseTask;\n\n// Use a predicate taking a Response object\nvar waitForResponseTask = page.WaitForResponseAsync(r => r.Url.Contains(token));\nawait page.GetByText(\"Update\").ClickAsync();\nvar response = await waitForResponseTask;\n```\n\n----------------------------------------\n\nTITLE: Implementing PlaywrightDevPage in TypeScript\nDESCRIPTION: Defines a PlaywrightDevPage class in TypeScript that encapsulates common operations on the playwright.dev page. The class contains locators for key elements and methods for navigation and interaction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, type Locator, type Page } from '@playwright/test';\n\nexport class PlaywrightDevPage {\n  readonly page: Page;\n  readonly getStartedLink: Locator;\n  readonly gettingStartedHeader: Locator;\n  readonly pomLink: Locator;\n  readonly tocList: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.getStartedLink = page.locator('a', { hasText: 'Get started' });\n    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });\n    this.pomLink = page.locator('li', {\n      hasText: 'Guides',\n    }).locator('a', {\n      hasText: 'Page Object Model',\n    });\n    this.tocList = page.locator('article div.markdown ul > li > a');\n  }\n\n  async goto() {\n    await this.page.goto('https://playwright.dev');\n  }\n\n  async getStarted() {\n    await this.getStartedLink.first().click();\n    await expect(this.gettingStartedHeader).toBeVisible();\n  }\n\n  async pageObjectModel() {\n    await this.getStarted();\n    await this.pomLink.click();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Text Locator in Playwright\nDESCRIPTION: Demonstrates how to use the legacy text locator to click on an element containing specific text. This method is case-insensitive, trims whitespace, and searches for substrings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('text=Log in').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"text=Log in\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"text=Log in\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"text=Log in\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Event Monitoring with Predicate - Python\nDESCRIPTION: Alternative event monitoring implementation specifically for Python, providing event context management. Includes predicate function support and timeout configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nasync def wait_for_event(event, predicate=None, timeout=None):\n    # Implementation details\n    pass\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions on Frame in JavaScript\nDESCRIPTION: Shows how to use the evaluate method to execute a JavaScript expression within a frame and return its result, including handling of promises.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await frame.evaluate(([x, y]) => {\n  return Promise.resolve(x * y);\n}, [7, 8]);\nconsole.log(result); // prints \"56\"\n```\n\n----------------------------------------\n\nTITLE: Passing a JSHandle as an Argument to page.evaluate in Python (Sync)\nDESCRIPTION: Illustrates creating a JavaScript array in the page using `page.evaluate_handle`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.evaluate` to interact with the array (get length, add elements) and finally disposing of the handle using `dispose()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python sync\n# Create new array in page.\nmy_array_handle = page.evaluate_handle(\"\"\"() => {\n  window.myArray = [1];\n  return myArray;\n}\"\"\")\n\n# Get current length of the array.\nlength = page.evaluate(\"a => a.length\", my_array_handle)\n\n# Add one more element to the array using the handle\npage.evaluate(\"(arg) => arg.myArray.push(arg.newElement)\", {\n  'myArray': my_array_handle,\n  'newElement': 2\n})\n\n# Release the object when it's no longer needed.\nmy_array_handle.dispose()\n```\n```\n\n----------------------------------------\n\nTITLE: Routing Service Worker Requests in Playwright\nDESCRIPTION: JavaScript code demonstrating how to selectively intercept and handle only requests made by Service Workers in Playwright. It uses the request().serviceWorker() method to identify Service Worker-originated requests and fulfill them with custom content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait context.route('**', async route => {\n  if (route.request().serviceWorker()) {\n    // NB: calling route.request().frame() here would THROW\n    return route.fulfill({\n      contentType: 'text/plain',\n      status: 200,\n      body: 'from sw',\n    });\n  } else {\n    return route.continue();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript with Locator.evaluate in Python (Sync)\nDESCRIPTION: Shows how to execute JavaScript code on a matched element using the evaluate method in Python sync mode. Demonstrates passing arguments to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nresult = page.get_by_testid(\"myId\").evaluate(\"(element, [x, y]) => element.textContent + ' ' + x * y\", [7, 8])\nprint(result) # prints \"myId text 56\"\n```\n\n----------------------------------------\n\nTITLE: Combining Soft Assertions with Polling Logic\nDESCRIPTION: Shows how to use configured soft assertions with polling logic to continue test execution even when polling assertions fail.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst softExpect = expect.configure({ soft: true });\nawait softExpect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}, {}).toBe(200);\n```\n\n----------------------------------------\n\nTITLE: Aborting Network Requests in Java\nDESCRIPTION: Demonstrates how to abort specific network requests in Java. Examples include aborting image requests and conditionally aborting requests based on resource type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"**/*.{png,jpg,jpeg}\", route -> route.abort());\n\n// Abort based on the request type\npage.route(\"**/*\", route -> {\n  if (\"image\".equals(route.request().resourceType()))\n    route.abort();\n  else\n    route.resume();\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Fully Parallel Mode in Playwright Config (TypeScript)\nDESCRIPTION: Configures Playwright Test to run all tests in fully parallel mode across all files and projects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  fullyParallel: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Locators with Locator.or() in Playwright\nDESCRIPTION: Creates a locator that matches elements from either of two locators, handling conditional UI elements like buttons or dialogs. Useful for scenarios where alternative UI paths might appear.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nconst newEmail = page.getByRole('button', { name: 'New' });\nconst dialog = page.getByText('Confirm security settings');\nawait expect(newEmail.or(dialog).first()).toBeVisible();\nif (await dialog.isVisible())\n  await page.getByRole('button', { name: 'Dismiss' }).click();\nawait newEmail.click();\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator newEmail = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"New\"));\nLocator dialog = page.getByText(\"Confirm security settings\");\nassertThat(newEmail.or(dialog).first()).isVisible();\nif (dialog.isVisible())\n  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Dismiss\")).click();\nnewEmail.click();\n```\n\nLANGUAGE: python\nCODE:\n```\nnew_email = page.get_by_role(\"button\", name=\"New\")\ndialog = page.get_by_text(\"Confirm security settings\")\nawait expect(new_email.or_(dialog).first).to_be_visible()\nif (await dialog.is_visible()):\n  await page.get_by_role(\"button\", name=\"Dismiss\").click()\nawait new_email.click()\n```\n\nLANGUAGE: python\nCODE:\n```\nnew_email = page.get_by_role(\"button\", name=\"New\")\ndialog = page.get_by_text(\"Confirm security settings\")\nexpect(new_email.or_(dialog).first).to_be_visible()\nif (dialog.is_visible()):\n  page.get_by_role(\"button\", name=\"Dismiss\").click()\nnew_email.click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar newEmail = page.GetByRole(AriaRole.Button, new() { Name = \"New\" });\nvar dialog = page.GetByText(\"Confirm security settings\");\nawait Expect(newEmail.Or(dialog).First).ToBeVisibleAsync();\nif (await dialog.IsVisibleAsync())\n  await page.GetByRole(AriaRole.Button, new() { Name = \"Dismiss\" }).ClickAsync();\nawait newEmail.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage State for Browser Context in JavaScript and Python\nDESCRIPTION: Defines the storageState option for initializing a browser context with logged-in information. It includes settings for cookies and localStorage.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  storageState: {\n    cookies: [\n      {\n        name: \"cookie_name\",\n        value: \"cookie_value\",\n        domain: \".example.com\",\n        path: \"/\",\n        expires: 1234567890,\n        httpOnly: true,\n        secure: true,\n        sameSite: \"Strict\"\n      }\n    ],\n    origins: [\n      {\n        origin: \"https://example.com\",\n        localStorage: [\n          {\n            name: \"local_storage_key\",\n            value: \"local_storage_value\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Testing Example\nDESCRIPTION: Shows how to test a Vue component using Playwright's experimental Vue testing package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport HelloWorld from './HelloWorld.vue';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(HelloWorld, {\n    props: {\n      msg: 'Greetings',\n    },\n  });\n  await expect(component).toContainText('Greetings');\n});\n```\n\n----------------------------------------\n\nTITLE: Saving a Downloaded File using save_as in Playwright (Python Sync)\nDESCRIPTION: This snippet shows the synchronous `download.save_as()` method call in Python. It constructs the path using `download.suggested_filename`. Assumes a `download` object is available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndownload.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```\n\n----------------------------------------\n\nTITLE: Creating New Browser Context in Playwright JavaScript\nDESCRIPTION: This JavaScript example uses Playwright to create a new browser context and page, highlighting the isolation between contexts. It includes navigation to a webpage and proper cleanup. Requires Node.js and the Playwright package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n  const browser = await playwright.firefox.launch();  // Or 'chromium' or 'webkit'.\n  // Create a new incognito browser context.\n  const context = await browser.newContext();\n  // Create a new page in a pristine context.\n  const page = await context.newPage();\n  await page.goto('https://example.com');\n\n  // Gracefully close up everything\n  await context.close();\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Conditional Routing by HTTP Method (GET/POST) with Route.fallback - Java\nDESCRIPTION: Shows Java implementation of method-based request handler splitting using Playwright. First handler processes GET requests, second handles POST. Others fall back to allow specific per-method processing. Inputs/outputs are similar to the JavaScript version, but written with strong typing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Handle GET requests.\npage.route(\"**/*\", route -> {\n  if (!route.request().method().equals(\"GET\")) {\n    route.fallback();\n    return;\n  }\n  // Handling GET only.\n  // ...\n});\n\n// Handle POST requests.\npage.route(\"**/*\", route -> {\n  if (!route.request().method().equals(\"POST\")) {\n    route.fallback();\n    return;\n  }\n  // Handling POST only.\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in Python (Async)\nDESCRIPTION: Examples of selecting options in a <select> element using Page.select_option method in Python with async syntax. It shows single and multiple selections using various selection criteria.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_103\n\nLANGUAGE: python\nCODE:\n```\n# Single selection matching the value or label\nawait page.select_option(\"select#colors\", \"blue\")\n# single selection matching the label\nawait page.select_option(\"select#colors\", label=\"blue\")\n# multiple selection\nawait page.select_option(\"select#colors\", value=[\"red\", \"green\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Configuration\nDESCRIPTION: This configuration file demonstrates how to use environment variables to dynamically set the baseURL based on whether the tests are running in staging or production environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    baseURL: process.env.STAGING === '1' ? 'http://staging.example.test/' : 'http://example.test/',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Locator to FrameLocator with contentFrame in Java\nDESCRIPTION: Shows how to convert a Locator object to a FrameLocator in Java using the contentFrame method to interact with elements inside an iframe.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.locator(\"iframe[name=\\\"embedded\\\"]\");\n// ...\nFrameLocator frameLocator = locator.contentFrame();\nframeLocator.getByRole(AriaRole.BUTTON).click();\n```\n\n----------------------------------------\n\nTITLE: Launching Browser and Navigating Page in Playwright Java\nDESCRIPTION: This Java snippet shows how to automate a Firefox browser using Playwright to navigate to a webpage. It highlights needing the Playwright Java library and a Java development environment. The snippet follows a try-with-resources pattern to ensure resources are appropriately cleaned up.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n public static void main(String[] args) {\n   try (Playwright playwright = Playwright.create()) {\n     BrowserType firefox = playwright.firefox();\n     Browser browser = firefox.launch();\n     Page page = browser.newPage();\n     page.navigate(\"https://example.com\");\n     browser.close();\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selector or Locator for Playwright Element Resolution\nDESCRIPTION: Defines the `selectorOrLocator` parameter, which accepts either a string selector or a Playwright `Locator` object, used for resolving a DOM element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n- `selectorOrLocator` <[string]|[Locator]>\n```\n\n----------------------------------------\n\nTITLE: Overriding Locale and Timezone Per Test (JavaScript)\nDESCRIPTION: This snippet demonstrates overriding the globally configured locale and timezone for a specific test using `test.use` in a Playwright Test file (`example.spec.ts`). This test will run emulating a German locale (`de-DE`) and Berlin timezone.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n\ntest('my test for de lang in Berlin timezone', async ({ page }) => {\n  await page.goto('https://www.bing.com');\n  // ...\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Waiting for Page Load in JavaScript\nDESCRIPTION: Example of using the waitUntil option when navigating to a page. The 'domcontentloaded' value now only waits for the target frame's DOMContentLoaded event, not iframes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.goto('https://playwright.dev', {\n  waitUntil: 'domcontentloaded',\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events with Java in Playwright\nDESCRIPTION: Example of handling a browser dialog event in Playwright using Java. The code creates a Playwright instance, launches Chromium, registers a dialog handler that prints the message and dismisses the dialog, then triggers an alert.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      Browser browser = chromium.launch();\n      Page page = browser.newPage();\n      page.onDialog(dialog -> {\n        System.out.println(dialog.message());\n        dialog.dismiss();\n      });\n      page.evaluate(\"alert('1')\");\n      browser.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using React and Vue Selectors in Java\nDESCRIPTION: Examples of using React and Vue selector engines to locate elements by component name and properties\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"_react=SubmitButton[enabled=true]\").click();\npage.locator(\"_vue=submit-button[enabled=true]\").click();\n```\n\n----------------------------------------\n\nTITLE: HAR-based Route Handling\nDESCRIPTION: Code to serve responses from a HAR file using route handling in browser context\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\ncontext.routeFromHAR(Paths.get(\"example.har\"));\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Roles Together - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates testing interactions between multiple authenticated roles using separate browser contexts in a single Playwright test, enhancing test scenarios for role-based features.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('admin and user', async ({ browser }) => {\n  const adminContext = await browser.newContext({ storageState: 'playwright/.auth/admin.json' });\n  const adminPage = await adminContext.newPage();\n\n  const userContext = await browser.newContext({ storageState: 'playwright/.auth/user.json' });\n  const userPage = await userContext.newPage();\n\n  await adminContext.close();\n  await userContext.close();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Chaining Route Handlers with Route.abort and Route.fallback - JavaScript\nDESCRIPTION: Demonstrates how multiple route handlers can be chained in Playwright (JavaScript) to intercept and control request handling order. Handlers are registered in order, but executed in reverse: the last registered runs first. The code shows aborting a request, then two fallback passes. This setup is commonly used to implement layered or prioritized request handling. Inputs: route object. Outputs: request is aborted. Additional handlers may be executed before abort depending on the chain.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('**/*', async route => {\n  // Runs last.\n  await route.abort();\n});\nawait page.route('**/*', async route => {\n  // Runs second.\n  await route.fallback();\n});\nawait page.route('**/*', async route => {\n  // Runs first.\n  await route.fallback();\n});\n```\n\n----------------------------------------\n\nTITLE: Playwright Asynchronous API Usage\nDESCRIPTION: Example demonstrating asynchronous API usage with asyncio for modern Python projects\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        page = await browser.new_page()\n        await page.goto(\"https://playwright.dev\")\n        print(await page.title())\n        await browser.close()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Locating Button by ARIA Role in Python\nDESCRIPTION: Demonstrates using role selectors to find and click a button element by its accessible name\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Click a button with accessible name \"log in\"\npage.locator(\"role=button[name='log in']\").click()\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with Grep Pattern in Playwright Test\nDESCRIPTION: Configuration to run only tests with titles matching a specific pattern, useful for running subsets of tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  grep: /smoke/,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeout in Playwright\nDESCRIPTION: Sets the base timeout for all tests in milliseconds. Default is 30 seconds. Can be overridden per test using Test.setTimeout().\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 5 * 60 * 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI for Playwright Tests (Multiple Languages)\nDESCRIPTION: This YAML configuration defines CircleCI executors for running Playwright tests in Docker containers for JavaScript, Python, Java, and C# projects. It specifies the appropriate Playwright Docker image for each language.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_32\n\nLANGUAGE: yml\nCODE:\n```\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n```\n\nLANGUAGE: yml\nCODE:\n```\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n```\n\nLANGUAGE: yml\nCODE:\n```\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n```\n\nLANGUAGE: yml\nCODE:\n```\nexecutors:\n  pw-noble-development:\n    docker:\n      - image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events in Java\nDESCRIPTION: Demonstrates how to add a one-time dialog handler in Java using Playwright. The handler accepts the dialog with a predefined value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_67\n\nLANGUAGE: java\nCODE:\n```\npage.onceDialog(dialog -> {\n  dialog.accept(\"foo\");\n});\n\n// prints 'foo'\nSystem.out.println(page.evaluate(\"prompt('Enter string:')\"));\n\n// prints 'null' as the dialog will be auto-dismissed because there are no handlers.\nSystem.out.println(page.evaluate(\"prompt('Enter string:'\"));\n```\n\n----------------------------------------\n\nTITLE: Using Playwright's Web-First Assertions in C#\nDESCRIPTION: Example of using Playwright's assertion library to validate page elements with automatic retrying until conditions are met or timeout is reached.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing static Microsoft.Playwright.Assertions;\n\n// Change the default 5 seconds timeout if you'd like.\nSetDefaultExpectTimeout(10_000);\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev/dotnet\");\nawait Expect(page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" })).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Emulation in Playwright Tests\nDESCRIPTION: Example showing how to configure isMobile flag to emulate a mobile device, which affects user agent, viewport, and touch events behavior in tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    isMobile: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks for Vue Component Testing with Playwright\nDESCRIPTION: Shows how to use beforeMount and afterMount hooks to configure the app for Vue component testing. It provides an example of setting up a router.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';\nimport { router } from '../src/router';\n\nexport type HooksConfig = {\n  enableRouting?: boolean;\n}\n\nbeforeMount<HooksConfig>(async ({ app, hooksConfig }) => {\n  if (hooksConfig?.enableRouting)\n    app.use(router);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport type { HooksConfig } from '../playwright';\nimport ProductsPage from './pages/ProductsPage.vue';\n\ntest('configure routing through hooks config', async ({ page, mount }) => {\n  const component = await mount<HooksConfig>(ProductsPage, {\n    hooksConfig: { enableRouting: true },\n  });\n  await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Video Path in Playwright - Python Sync\nDESCRIPTION: This code snippet in Python (synchronous) demonstrates how to obtain the path for a video recorded with Playwright's recordVideo option enabled. The method should be called to fetch the evolving path that is ultimately returned after the page closure.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(page.video.path())\n```\n\n----------------------------------------\n\nTITLE: Selecting Options from Dropdown using Frame.selectOption in Java\nDESCRIPTION: Examples of how to select options from a dropdown element using the Frame.selectOption method in Java. Shows single selection by value/label or multiple selections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_31\n\nLANGUAGE: java\nCODE:\n```\n// Single selection matching the value or label\nframe.selectOption(\"select#colors\", \"blue\");\n// single selection matching both the value and the label\nframe.selectOption(\"select#colors\", new SelectOption().setLabel(\"Blue\"));\n// multiple selection\nframe.selectOption(\"select#colors\", new String[] {\"red\", \"green\", \"blue\"});\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.press for Key Simulation and Screenshots in Playwright (Java)\nDESCRIPTION: This Java snippet demonstrates the usage of `page.keyboard().press()` to simulate pressing different keys ('A', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n```java\nPage page = browser.newPage();\npage.navigate(\"https://keycode.info\");\npage.keyboard().press(\"A\");\npage.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"A.png\")));\npage.keyboard().press(\"ArrowLeft\");\npage.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"ArrowLeft.png\")));\npage.keyboard().press(\"Shift+O\");\npage.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"O.png\")));\nbrowser.close();\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Options for a Specific Project in Playwright\nDESCRIPTION: Demonstrates how to set browser options for a specific project in the Playwright configuration file. This example sets the browserName to 'chromium' for a project named 'Chromium'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Chromium',\n      use: {\n        browserName: 'chromium',\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling a One-Off Dialog Event in Playwright (Java)\nDESCRIPTION: Demonstrates using `page.onceDialog` in Playwright for Java to register a handler that executes only the first time a dialog event occurs. The lambda expression provided handles the dialog by accepting it with the value '2021', triggered by `page.evaluate`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.onceDialog(dialog -> dialog.accept(\"2021\"));\npage.evaluate(\"prompt('Enter a number:')\");\n```\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Popup Window in Playwright (Async Python)\nDESCRIPTION: Illustrates waiting for a popup window using the `page.expect_popup` async context manager in Playwright for Python. The code within the `async with` block (`page.get_by_text(...).click()`) triggers the popup, and the context manager waits for it. The awaited value (`popup.value`) is the `Page` object of the popup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python async\nasync with page.expect_popup() as popup:\n  await page.get_by_text(\"open the popup\").click()\nchild_page = await popup.value\nawait child_page.goto(\"https://wikipedia.org\")\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Global Playwright Configuration\nDESCRIPTION: Demonstrates how to set global configuration options like locale using the Playwright config file. Uses TypeScript configuration format to define global settings that apply to all tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    locale: 'en-GB'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using hasTitle Assertion in Java\nDESCRIPTION: Example of using hasTitle assertion in Java to verify page title matches a string. This checks if the page title exactly matches 'Playwright'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page).hasTitle(\"Playwright\");\n```\n\n----------------------------------------\n\nTITLE: Testing Children in React Components with Playwright\nDESCRIPTION: Demonstrates how to test children in React components using Playwright's component testing framework. It shows how to mount a component with child content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('children', async ({ mount }) => {\n  const component = await mount(<Component>Child</Component>);\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Body ARIA Snapshot using Playwright JS\nDESCRIPTION: This JavaScript snippet demonstrates how to match the ARIA snapshot of the entire body element containing a simple heading. It uses `expect(page.locator('body')).toMatchAriaSnapshot()` with a template matching the 'heading' role and its name 'title'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait expect(page.locator('body')).toMatchAriaSnapshot(`\n  - heading \"title\"\n`);\n```\n```\n\n----------------------------------------\n\nTITLE: Focusing Tests with test.only in Playwright\nDESCRIPTION: Shows how to focus specific tests using test.only() so that only those tests run in the entire project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only('focus this test', async ({ page }) => {\n  // Run only focused tests in the entire project.\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Shadow DOM Example\nDESCRIPTION: This HTML snippet shows the structure of a custom web component with Shadow DOM, used to demonstrate element location techniques.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```\n\n----------------------------------------\n\nTITLE: Querying All Inner Texts with Playwright Python (Sync)\nDESCRIPTION: Synchronously retrieves all innerText values from 'link' elements using Playwright Python. The method returns a list of strings. Works in a sync Playwright session.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ntexts = page.get_by_role(\"link\").all_inner_texts()\n```\n\n----------------------------------------\n\nTITLE: Sign In Test with Java for Playwright\nDESCRIPTION: Illustrates using Java to automate GitHub login with Playwright, filling out the login form fields, and simulating button clicks. This sets up the browser context for subsequent interactions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nPage page = context.newPage();\npage.navigate(\"https://github.com/login\");\npage.getByLabel(\"Username or email address\").fill(\"username\");\npage.getByLabel(\"Password\").fill(\"password\");\npage.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Sign in\"))\n    .click();\n```\n\n----------------------------------------\n\nTITLE: Hover and Click on Locator Object in Python Sync\nDESCRIPTION: Utilizes a locator in sync Python to hover and click on 'Submit'. Each method call queries the DOM for the most current element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nlocator = page.get_by_text(\"Submit\")\nlocator.hover()\nlocator.click()\n```\n\n----------------------------------------\n\nTITLE: Routing WebSocket Connections in Python (Sync)\nDESCRIPTION: Example of routing WebSocket connections using Page.route_web_socket method in Python with synchronous syntax. It shows how to handle WebSocket messages synchronously.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_99\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\ndef handler(ws: WebSocketRoute):\n  ws.on_message(lambda message: message_handler(ws, message))\n\npage.route_web_socket(\"/ws\", handler)\n```\n\n----------------------------------------\n\nTITLE: Handling beforeunload Dialogs with Playwright (Java)\nDESCRIPTION: Registers a handler using `onDialog` specifically to handle `beforeunload` dialogs triggered by `page.close(new Page.CloseOptions().setRunBeforeUnload(true))`. The handler asserts the dialog type and then dismisses it.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.onDialog(dialog -> {\n  assertEquals(\"beforeunload\", dialog.type());\n  dialog.dismiss();\n});\npage.close(new Page.CloseOptions().setRunBeforeUnload(true));\n```\n```\n\n----------------------------------------\n\nTITLE: Running Bidi Tests with Custom Firefox Path\nDESCRIPTION: Command to run Bidi tests with a custom Firefox binary path specified through the BIDI_FFPATH environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/bidi/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nBIDI_FFPATH='/Users/myself/playwright/firefox/mac_arm-beta_138.0b5/Firefox.app/Contents/MacOS/firefox' npm run biditest -- --project='moz-firefox-*'\n```\n\n----------------------------------------\n\nTITLE: Test File Using Global Setup\nDESCRIPTION: Example test file that depends on the globally setup database.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('menu', async ({ page }) => {\n  // Your test that depends on the database\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Requests in C#\nDESCRIPTION: Shows how to wait for specific network requests in C# using both URL matching and predicate functions. Useful for ensuring requests have been made before proceeding with the test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_139\n\nLANGUAGE: csharp\nCODE:\n```\n// Waits for the next request with the specified url.\nawait page.RunAndWaitForRequestAsync(async () =>\n{\n    await page.GetByText(\"trigger request\").ClickAsync();\n}, \"http://example.com/resource\");\n\n// Alternative way with a predicate.\nawait page.RunAndWaitForRequestAsync(async () =>\n{\n    await page.GetByText(\"trigger request\").ClickAsync();\n}, request => request.Url == \"https://example.com\" && request.Method == \"GET\");\n```\n\n----------------------------------------\n\nTITLE: Sign In Test with Asynchronous Python for Playwright\nDESCRIPTION: This Python script demonstrates using asynchronous API calls in Playwright to automate a login process on GitHub. The script accesses and interacts with form fields before proceeding with authenticated test actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npage = await context.new_page()\nawait page.goto('https://github.com/login')\n\nawait page.get_by_label(\"Username or email address\").fill(\"username\")\nawait page.get_by_label(\"Password\").fill(\"password\")\nawait page.get_by_role(\"button\", name=\"Sign in\").click()\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Reporters in Playwright\nDESCRIPTION: Demonstrates how to use multiple reporters simultaneously, using 'list' for terminal output and 'json' for comprehensive test results.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [\n    ['list'],\n    ['json', {  outputFile: 'test-results.json' }]\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Timing with Playwright in CSharp\nDESCRIPTION: Demonstrates using Playwright in CSharp to wait for a request to finish during page navigation, capture the request object, and write the responseEnd timing property to the console. Requires Playwright .NET and an initialized page object. Uses RunAndWaitForRequestFinishedAsync for combined navigation and waiting. Outputs the responseEnd value of the timing object. Timing metrics are only accurate after request completion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = await page.RunAndWaitForRequestFinishedAsync(async () =>\\n{\\n    await page.GotoAsync(\\\"https://www.microsoft.com\\\");\\n});\\nConsole.WriteLine(request.Timing.ResponseEnd);\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Recording in Playwright Tests\nDESCRIPTION: JavaScript configuration for enabling trace recording in Playwright tests, including retry scenarios.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  retries: 1,\n  use: {\n    trace: 'on-first-retry',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Authentication State with Playwright Codegen for Java\nDESCRIPTION: Command to generate code for GitHub while saving authentication state (cookies, localStorage, IndexedDB) to auth.json using Java. This Maven execution allows reusing authentication in subsequent test recordings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen github.com/microsoft/playwright  --save-storage=auth.json\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Popup Window in Playwright (.NET/C#)\nDESCRIPTION: Shows how to wait for a popup window using `page.RunAndWaitForPopupAsync` in Playwright for .NET (C#). This method takes an asynchronous lambda expression containing the action (`page.GetByText(...).ClickAsync()`) that is expected to trigger the popup. It returns the `IPage` object for the popup window.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar popup = await page.RunAndWaitForPopupAsync(async =>\n{\n    await page.GetByText(\"open the popup\").ClickAsync();\n});\nawait popup.GotoAsync(\"https://wikipedia.org\");\n```\n```\n\n----------------------------------------\n\nTITLE: File Upload with Multipart Form Data in Java\nDESCRIPTION: Demonstrates how to upload files using multipart/form-data encoding with a file path.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-requestoptions.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPath path = Paths.get(\"members.csv\");\nAPIResponse response = context.request().post(\"https://example.com/upload_members\",\n  RequestOptions.create().setMultipart(FormData.create().set(\"membersList\", path)));\n```\n\n----------------------------------------\n\nTITLE: Advanced Routing with Fallback in Playwright\nDESCRIPTION: Examples of using route.fallback for advanced routing scenarios in Playwright. This allows chaining multiple routing handlers and selectively handling requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove a header from all requests.\ntest.beforeEach(async ({ page }) => {\n  await page.route('**/*', async route => {\n    const headers = await route.request().allHeaders();\n    delete headers['if-none-match'];\n    await route.fallback({ headers });\n  });\n});\n\ntest('should work', async ({ page }) => {\n  await page.route('**/*', async route => {\n    if (route.request().resourceType() === 'image')\n      await route.abort();\n    else\n      await route.fallback();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Automatic Logout after Inactivity in Python\nDESCRIPTION: Tests automatic user logout functionality after a period of inactivity by checking for a logout message. Uses Playwright's expect assertions to verify the logout text is visible after fast-forwarding time.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Check that the user was logged out automatically.\nexpect(page.get_by_text(\"You have been logged out due to inactivity.\")).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Not Having Child/Descendant in Playwright\nDESCRIPTION: Demonstrates filtering elements to exclude those that contain specific content. The snippet uses the 'filter' method with 'hasNot' option to select list items that don't contain 'Product 2'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page\n    .getByRole('listitem')\n    .filter({ hasNot: page.getByText('Product 2') }))\n    .toHaveCount(1);\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page\n    .getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasNot(page.getByText(\"Product 2\"))))\n    .hasCount(1);\n```\n\nLANGUAGE: python-async\nCODE:\n```\nawait expect(\n    page.get_by_role(\"listitem\").filter(\n        has_not=page.get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nexpect(\n    page.get_by_role(\"listitem\").filter(\n        has_not=page.get_by_role(\"heading\", name=\"Product 2\")\n    )\n).to_have_count(1)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() {\n        HasNot = page.GetByRole(AriaRole.Heading, new() { Name = \"Product 2\" })\n    }))\n    .ToHaveCountAsync(1);\n```\n\n----------------------------------------\n\nTITLE: Creating Emulated Context with Playwright (.NET/C#)\nDESCRIPTION: This C# snippet shows how to use the `Microsoft.Playwright` library to launch a Chromium browser and create a new context emulating an 'iPhone 13'. Device parameters are obtained from `playwright.Devices` and passed to `browser.NewContextAsync`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync(new()\n{\n    Headless = false\n});\nvar iphone13 = playwright.Devices[\"iPhone 13\"];\nawait using var context = await browser.NewContextAsync(iphone13);\n```\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests on a Single Project\nDESCRIPTION: Command to run tests on a specific Playwright project using the --project flag, which allows targeting tests to a particular browser or configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --project=firefox\n\nRunning 1 test using 1 worker\n\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n```\n\n----------------------------------------\n\nTITLE: Emulating Geolocation, Language and Timezone with Playwright Codegen for Java\nDESCRIPTION: Command to generate code while emulating Rome, Italy location, Italian language, and European/Rome timezone for Bing Maps using Java. This Maven execution demonstrates testing location-aware applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args='codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for C# Playwright\nDESCRIPTION: This document snippet provides a GitHub Actions workflow for running Playwright tests in C# projects. It handles setup and execution on push/pull to main branches, manages dependencies and test execution, particularly for the .NET environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_12\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\njobs:\\n  test:\\n    timeout-minutes: 60\\n    runs-on: ubuntu-latest\\n    steps:\\n    - uses: actions/checkout@v4\\n    - name: Setup dotnet\\n      uses: actions/setup-dotnet@v4\\n      with:\\n        dotnet-version: 8.0.x\\n    - name: Build & Install\\n      run: dotnet build\\n    - name: Ensure browsers are installed\\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\\n    - name: Run your tests\\n      run: dotnet test\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage State in APIRequestContext (Java/C#)\nDESCRIPTION: Returns the current storage state for an API request context as a string. This variant is specific to Java and C# languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n## async method: APIRequestContext.storageState\n* since: v1.16\n* langs: java, csharp\n- returns: <[string]>\n\n### option: APIRequestContext.storageState.path = %%-storagestate-option-path-%%\n* since: v1.16\n\n### option: APIRequestContext.storageState.indexedDB\n* since: v1.51\n- `indexedDB` ?<boolean>\n\nSet to `true` to include IndexedDB in the storage state snapshot.\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event on ElementHandle in Python (Async)\nDESCRIPTION: Illustrates dispatching a click event on an ElementHandle using the dispatch_event method in Python with async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nawait element_handle.dispatch_event(\"click\")\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using ElementHandle (Stale Potential) in Python (Sync)\nDESCRIPTION: Shows finding an element using `page.query_selector` to get an [ElementHandle] and performing actions (hover, click) in synchronous Python. This method can lead to errors if the element becomes stale due to page updates.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nhandle = page.query_selector(\"text=Submit\")\nhandle.hover()\nhandle.click()\n```\n```\n\n----------------------------------------\n\nTITLE: Opening Playwright UI Mode\nDESCRIPTION: Command to launch Playwright's UI Mode for test exploration and debugging\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-ui-mode-js.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function to BrowserContext in Java\nDESCRIPTION: This Java example shows how to expose a SHA256 hashing function to all pages in a browser context using Playwright. It creates a new context, exposes the function, and then uses it in a page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType webkit = playwright.webkit();\n      Browser browser = webkit.launch(new BrowserType.LaunchOptions().setHeadless(false));\n      BrowserContext context = browser.newContext();\n      context.exposeFunction(\"sha256\", args -> {\n        String text = (String) args[0];\n        MessageDigest crypto;\n        try {\n          crypto = MessageDigest.getInstance(\"SHA-256\");\n        } catch (NoSuchAlgorithmException e) {\n          return null;\n        }\n        byte[] token = crypto.digest(text.getBytes(StandardCharsets.UTF_8));\n        return Base64.getEncoder().encodeToString(token);\n      });\n      Page page = context.newPage();\n      page.setContent(\"<script>\\n\" +\n        \"  async function onClick() {\\n\" +\n        \"    document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\\n\" +\n        \"  }\\n\" +\n        \"</script>\\n\" +\n        \"<button onclick=\\\"onClick()\\\">Click me</button>\\n\" +\n        \"<div></div>\\n\");\n      page.getByRole(AriaRole.BUTTON).click();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Authentication Credentials for Browser Context\nDESCRIPTION: Defines the httpCredentials option for browser contexts. This allows setting username and password for HTTP authentication, with optional origin restriction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_62\n\nLANGUAGE: js\nCODE:\n```\n- `httpCredentials` <[Object]>\n  - `username` <[string]>\n  - `password` <[string]>\n  - `origin` ?<[string]> Restrain sending http credentials on specific origin (scheme://host:port).\n  - `send` ?<[HttpCredentialsSend]<\"unauthorized\"|\"always\">> This option only applies to the requests sent from corresponding [APIRequestContext] and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\nCredentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).\nIf no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n```\n\n----------------------------------------\n\nTITLE: Handling beforeunload Dialogs with Playwright (Python Async)\nDESCRIPTION: Registers an asynchronous handler for the 'dialog' event to manage `beforeunload` dialogs triggered by `page.close(run_before_unload=True)`. The handler function asserts the dialog type and then dismisses it.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python async\nasync def handle_dialog(dialog):\n    assert dialog.type == 'beforeunload'\n    await dialog.dismiss()\n\npage.on('dialog', lambda: handle_dialog)\nawait page.close(run_before_unload=True)\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Count using LocatorAssertions in Multiple Languages\nDESCRIPTION: Examples of using toHaveCount/hasCount to verify that a locator resolves to an exact number of DOM nodes. This is useful for testing lists, tables, or other collections of elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = page.locator('list > .component');\nawait expect(list).toHaveCount(3);\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.locator(\"list > .component\")).hasCount(3);\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import expect\n\nlocator = page.locator(\"list > .component\")\nawait expect(locator).to_have_count(3)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import expect\n\nlocator = page.locator(\"list > .component\")\nexpect(locator).to_have_count(3)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.Locator(\"list > .component\");\nawait Expect(locator).ToHaveCountAsync(3);\n```\n\n----------------------------------------\n\nTITLE: Using Locator.waitFor to Wait for Element State\nDESCRIPTION: Example showing how to use the waitFor method on locators to wait for an element to reach a specified state (visible by default), which is useful when working with dynamic elements and lists.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ page }) => {\n  const completeness = page.locator('text=Success');\n  await completeness.waitFor();\n  expect(await page.screenshot()).toMatchSnapshot('screen.png');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Failed HTTP Requests (JavaScript)\nDESCRIPTION: Attaches a handler to the Playwright page's 'requestfailed' event to log the URL and failure reason of any failed requests. Prints to the terminal when network or other transport errors occur. Dependencies: Playwright and an instantiated page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\npage.on('requestfailed', request => {\n  console.log(request.url() + ' ' + request.failure().errorText);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Editability using Playwright LocatorAssertions\nDESCRIPTION: Ensures the Playwright Locator points to an element that is currently editable by the user. It accepts an optional `editable` boolean parameter (v1.26+) to explicitly assert for editable or non-editable states. A `timeout` option (placeholder `%%-js-assertions-timeout-%%` or `%%-csharp-java-python-assertions-timeout-%%`) is also available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst locator = page.getByRole('textbox');\nawait expect(locator).toBeEditable();\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nassertThat(page.getByRole(AriaRole.TEXTBOX)).isEditable();\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nfrom playwright.async_api import expect\n\nlocator = page.get_by_role(\"textbox\")\nawait expect(locator).to_be_editable()\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nfrom playwright.sync_api import expect\n\nlocator = page.get_by_role(\"textbox\")\nexpect(locator).to_be_editable()\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar locator = Page.GetByRole(AriaRole.Textbox);\nawait Expect(locator).ToBeEditableAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Teardown in Playwright Test\nDESCRIPTION: Configuration to specify a global teardown file that runs after all tests, useful for environment cleanup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTeardown: './global-teardown',\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Docker for JavaScript E2E Tests\nDESCRIPTION: Command to run the Playwright Docker container for JavaScript end-to-end testing where code is trusted.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Handling Security Details Confirmation with Locator Handler in JavaScript\nDESCRIPTION: Sets up a locator handler to automatically skip a security details confirmation page when it appears. The handler activates when text matching 'Confirm your security details' is detected and clicks 'Remind me later' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// Setup the handler.\nawait page.addLocatorHandler(page.getByText('Confirm your security details'), async () => {\n  await page.getByRole('button', { name: 'Remind me later' }).click();\n});\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Mode in Playwright Tests\nDESCRIPTION: Example showing how to disable headless mode for tests, which makes the browser visible during test execution. Useful for debugging and visual inspection of test behavior.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    headless: false\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators by Regular Expression using Playwright\nDESCRIPTION: This code shows how to filter locators using a regular expression and click a specific button using Playwright in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: /Product 2/ })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions()\n        .setHasText(Pattern.compile(\"Product 2\")))\n    .getByRole(AriaRole.BUTTON,\n               new Page.GetByRoleOptions().setName(\"Add to cart\"))\n    .click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"listitem\").filter(has_text=re.compile(\"Product 2\")).get_by_role(\n    \"button\", name=\"Add to cart\"\n).click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() { HasTextRegex = new Regex(\"Product 2\") })\n    .GetByRole(AriaRole.Button, new() { Name = \"Add to cart\" })\n    .ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.press for Key Simulation and Screenshots in Playwright (Python Async)\nDESCRIPTION: This asynchronous Python snippet demonstrates the usage of `page.keyboard.press` to simulate pressing different keys ('a', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n```python async\npage = await browser.new_page()\nawait page.goto(\"https://keycode.info\")\nawait page.keyboard.press(\"a\")\nawait page.screenshot(path=\"a.png\")\nawait page.keyboard.press(\"ArrowLeft\")\nawait page.screenshot(path=\"arrow_left.png\")\nawait page.keyboard.press(\"Shift+O\")\nawait page.screenshot(path=\"o.png\")\nawait browser.close()\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Clock and Manipulating Time in C#\nDESCRIPTION: This snippet demonstrates how to use the new Clock API to manipulate time within tests. It shows setting a predefined time, pausing at a specific time, and fast-forwarding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.Clock.InstallAsync(new()\n{\n  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0)\n});\nawait Page.GotoAsync(\"http://localhost:3333\");\n\nawait Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));\n\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:00:00 AM\");\n\nawait Page.Clock.FastForwardAsync(\"30:00\");\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:30:00 AM\");\n```\n\n----------------------------------------\n\nTITLE: Loading Authentication State with Playwright Codegen for C#\nDESCRIPTION: Command to generate code for GitHub while loading previously saved authentication state from auth.json using C#. This PowerShell execution maintains login sessions without requiring re-authentication.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 codegen --load-storage=auth.json github.com/microsoft/playwright\n```\n\n----------------------------------------\n\nTITLE: Emulating Offline Mode in Playwright Config\nDESCRIPTION: Configures all tests to run in offline mode using the Playwright Test configuration file. This allows testing how applications handle network unavailability.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    offline: true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expect Assertion Settings in Playwright Test\nDESCRIPTION: Configuration for the expect assertion library, including timeout settings and screenshot comparison options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    timeout: 10000,\n    toMatchSnapshot: {\n      maxDiffPixels: 10,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Files for Playwright File Input Actions\nDESCRIPTION: Defines the `files` parameter for Playwright file input actions. It accepts a single file path, an array of file paths, a single file object (`{ name, mimeType, buffer }`), or an array of file objects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- `files` <[path]|[Array]<[path]>|[Object]|[Array]<[Object]>>\n  - `name` <[string]> File name\n  - `mimeType` <[string]> File type\n  - `buffer` <[Buffer]> File content\n```\n\n----------------------------------------\n\nTITLE: Using Frame Locators to Interact with Elements in iframes\nDESCRIPTION: Example showing how to use frame locators in Playwright to locate and interact with elements inside iframes, which can wait for iframe to appear and be used in Web-First assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.frameLocator('#my-iframe').locator('text=Submit');\nawait locator.click();\n```\n\n----------------------------------------\n\nTITLE: Debugging Specific Playwright Test File with Inspector\nDESCRIPTION: Debug a specific test file using the Playwright Inspector by specifying the file name and using the --debug flag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test example.spec.ts --debug\n```\n\n----------------------------------------\n\nTITLE: Skipping Test Steps in Playwright\nDESCRIPTION: Demonstrates how to use test.step.skip() to temporarily disable the execution of a test step. This is useful for steps that are currently failing and planned for a near-term fix.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page }) => {\n  // ...\n  await test.step.skip('not yet ready', async () => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Accessing Popup Windows (C#)\nDESCRIPTION: Uses Playwright's RunAndWaitForPopupAsync method in C# to handle popups triggered by a click event. Awaits both the popup and its evaluation for the location URL. Playwright for .NET is required.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar popup = await page.RunAndWaitForPopupAsync(async () =>\n{\n    await page.GetByText(\"open the popup\").ClickAsync();\n});\nConsole.WriteLine(await popup.EvaluateAsync<string>(\"location.href\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Specific Test Groups in Playwright\nDESCRIPTION: This JavaScript code demonstrates how to configure retries for a specific group of tests using the test.describe.configure method in Playwright. It sets 2 retry attempts for all tests within the describe block.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe(() => {\n  // All tests in this describe group will get 2 retry attempts.\n  test.describe.configure({ retries: 2 });\n\n  test('test 1', async ({ page }) => {\n    // ...\n  });\n\n  test('test 2', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Geolocation in JavaScript\nDESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright JavaScript library. This sets up the browser environment to emulate a specific geographic location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation']\n});\n\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Headed Mode\nDESCRIPTION: Execute tests in headed mode to visually see how Playwright interacts with the website during test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --headed\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Codegen from Command Line - C# - Bash\nDESCRIPTION: This PowerShell command launches Playwright's code generator from the .NET build output. The path should be adjusted to your build's runtime version (\\\"netX\\\"). Requires the C# version of Playwright to be built and available, plus PowerShell support. Takes a URL parameter as the target for recorded actions, and opens the interactive test recording windows.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 codegen demo.playwright.dev/todomvc\n```\n\n----------------------------------------\n\nTITLE: Injecting Initialization Function with Serializable Arg (JavaScript)\nDESCRIPTION: Shows how to use Playwright's addInitScript to inject an in-line function with a serializable argument into the browser context. The window object is extended via the injected function. Used for advanced test setup or mocking prior to page scripts. Requires Playwright in a Node.js environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nawait page.addInitScript(mock => {\n  window.mock = mock;\n}, mock);\n```\n\n----------------------------------------\n\nTITLE: Customizing Playwright Options in JUnit\nDESCRIPTION: Demonstrates how to customize Playwright options by implementing an OptionsFactory interface for configuring browser and context options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.junit.Options;\nimport com.microsoft.playwright.junit.OptionsFactory;\nimport com.microsoft.playwright.junit.UsePlaywright;\n\n@UsePlaywright(MyTest.CustomOptions.class)\npublic class MyTest {\n\n  public static class CustomOptions implements OptionsFactory {\n    @Override\n    public Options getOptions() {\n      return new Options()\n          .setHeadless(false)\n          .setContextOption(new Browser.NewContextOptions()\n              .setBaseURL(\"https://github.com\"))\n          .setApiRequestOptions(new APIRequest.NewContextOptions()\n              .setBaseURL(\"https://playwright.dev\"));\n    }\n  }\n\n  @Test\n  public void testWithCustomOptions(Page page, APIRequestContext request) {\n    page.navigate(\"/\");\n    assertThat(page).hasURL(Pattern.compile(\"github\"));\n\n    APIResponse response = request.get(\"/\");\n    assertTrue(response.text().contains(\"Playwright\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Browser via CDP Using Playwright Java\nDESCRIPTION: Demonstrates using Playwright Java API to attach to an existing Chromium instance over the Chrome DevTools Protocol (CDP). Requires a running browser with the correct debugging port exposed and the Playwright library. Inputs are the CDP URL endpoint. Expected output is access to browser context/pages; not all features may be available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = playwright.chromium().connectOverCDP(\\\"http://localhost:9222\\\");\\nBrowserContext defaultContext = browser.contexts().get(0);\\nPage page = defaultContext.pages().get(0);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Playwright Server with C# API\nDESCRIPTION: C# code to connect to a remote Playwright server using the Playwright API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.ConnectAsync(\"ws://127.0.0.1:3000/\");\n```\n\n----------------------------------------\n\nTITLE: Dynamic Battery Status Mock Updates\nDESCRIPTION: Implements a complete mock class for battery API with support for dynamic updates and event listeners to test UI reactions to battery status changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest('update battery status (no golden)', async ({ page }) => {\n  await page.addInitScript(() => {\n    // Mock class that will notify corresponding listeners when battery status changes.\n    class BatteryMock {\n      level = 0.10;\n      charging = false;\n      chargingTime = 1800;\n      dischargingTime = Infinity;\n      _chargingListeners = [];\n      _levelListeners = [];\n      addEventListener(eventName, listener) {\n        if (eventName === 'chargingchange')\n          this._chargingListeners.push(listener);\n        if (eventName === 'levelchange')\n          this._levelListeners.push(listener);\n      }\n      // Will be called by the test.\n      _setLevel(value) {\n        this.level = value;\n        this._levelListeners.forEach(cb => cb());\n      }\n      _setCharging(value) {\n        this.charging = value;\n        this._chargingListeners.forEach(cb => cb());\n      }\n    }\n    const mockBattery = new BatteryMock();\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => mockBattery;\n    // Save the mock object on window for easier access.\n    window.mockBattery = mockBattery;\n  });\n\n  await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('10%');\n\n  // Update level to 27.5%\n  await page.evaluate(() => window.mockBattery._setLevel(0.275));\n  await expect(page.locator('.battery-percentage')).toHaveText('27.5%');\n  await expect(page.locator('.battery-status')).toHaveText('Battery');\n\n  // Emulate connected adapter\n  await page.evaluate(() => window.mockBattery._setCharging(true));\n  await expect(page.locator('.battery-status')).toHaveText('Adapter');\n  await expect(page.locator('.battery-fully')).toHaveText('00:30');\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Fixtures with Custom Functions in Playwright Tests\nDESCRIPTION: Shows how to override a fixture by providing a custom function. In this example, the locale is read from a configuration file before being used in the tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  locale: async ({}, use) => {\n    // Read locale from some configuration file.\n    const locale = await fs.promises.readFile('test-locale', 'utf-8');\n    await use(locale);\n  },\n});\n\ntest('test with locale', async ({ page }) => {\n  // Default context and page have locale as specified\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Redirect Chain Relationship in Playwright Request (Multi-Language)\nDESCRIPTION: Illustrates the relationship between the `redirectedFrom()` and `redirectedTo()` methods of the Playwright Request object. It shows that calling `redirectedTo()` on the request returned by `redirectedFrom()` yields the original request object, confirming their inverse relationship within a redirect chain.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconsole.log(request.redirectedFrom().redirectedTo() === request); // true\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nSystem.out.println(request.redirectedFrom().redirectedTo() == request); // true\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```py\nassert request.redirected_from.redirected_to == request\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nConsole.WriteLine(request.RedirectedFrom?.RedirectedTo == request); // True\n```\n```\n\n----------------------------------------\n\nTITLE: Locating Parent Elements in Playwright\nDESCRIPTION: Shows techniques for locating parent elements, including using the filter method with a child locator and using XPath for direct parent selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst child = page.getByText('Hello');\nconst parent = page.getByRole('listitem').filter({ has: child });\n\nconst parent = page.getByText('Hello').locator('xpath=..');\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator child = page.getByText(\"Hello\");\nLocator parent = page.getByRole(AriaRole.LISTITEM).filter(new Locator.FilterOptions().setHas(child));\n\nLocator parent = page.getByText(\"Hello\").locator(\"xpath=..\");\n```\n\nLANGUAGE: python\nCODE:\n```\nchild = page.get_by_text(\"Hello\")\nparent = page.get_by_role(\"listitem\").filter(has=child)\n\nparent = page.get_by_text(\"Hello\").locator('xpath=..')\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar child = page.GetByText(\"Hello\");\nvar parent = page.GetByRole(AriaRole.Listitem).Filter(new () { Has = child });\n\nvar parent = page.GetByText(\"Hello\").Locator(\"xpath=..\");\n```\n\n----------------------------------------\n\nTITLE: Emulating Mobile Devices with Playwright Codegen for JavaScript\nDESCRIPTION: Command to generate code while emulating an iPhone 13 for the playwright.dev website using JavaScript. This sets appropriate viewport size, user agent, and other device-specific configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright codegen --device=\"iPhone 13\" playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Testing Automatic Logout after Inactivity in Java\nDESCRIPTION: Tests automatic user logout by simulating user inactivity with Playwright's clock.fastForward method. This example shows installing a clock, navigating to a page, interacting with it, then fast-forwarding time by 5 minutes to trigger inactivity logout.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n// Initial time does not matter for the test, so we can pick current time.\npage.clock().install();\npage.navigate(\"http://localhost:3333\");\nLocator locator = page.getByRole(\"button\");\n\n// Interact with the page\nlocator.click();\n\n// Fast forward time 5 minutes as if the user did not do anything.\n// Fast forward is like closing the laptop lid and opening it after 5 minutes.\n// All the timers due will fire once immediately, as in the real browser.\npage.clock().fastForward(\"05:00\");\n\n// Check that the user was logged out automatically.\nassertThat(page.getByText(\"You have been logged out due to inactivity.\")).isVisible();\n```\n\n----------------------------------------\n\nTITLE: Saving Authentication State with Playwright Codegen for Python\nDESCRIPTION: Command to generate code for GitHub while saving authentication state (cookies, localStorage, IndexedDB) to auth.json using Python. This allows reusing authentication in subsequent test recordings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen github.com/microsoft/playwright --save-storage=auth.json\n```\n\n----------------------------------------\n\nTITLE: Unmounting React Components in Playwright Tests\nDESCRIPTION: Demonstrates how to unmount a mounted React component in Playwright component tests. This is useful for testing component behavior upon unmounting.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('unmount', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.unmount();\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with List Reporter\nDESCRIPTION: Shows how to use the 'list' reporter, which is the default reporter (except on CI) and prints a line for each test being run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --reporter=list\n```\n\n----------------------------------------\n\nTITLE: Java Init Script Implementation\nDESCRIPTION: Example of adding an initialization script in Java using Playwright\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\npage.addInitScript(Paths.get(\"mocks/preload.js\"));\n```\n\n----------------------------------------\n\nTITLE: Using New Locator Methods in C#\nDESCRIPTION: Demonstrates the usage of new locator methods introduced in Playwright 1.27, including getByLabel, getByRole, and getByText. These methods simplify element selection based on various attributes and properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByLabel(\"User Name\").FillAsync(\"John\");\n\nawait page.GetByLabel(\"Password\").FillAsync(\"secret-password\");\n\nawait page.GetByRole(AriaRole.Button, new() { NameString = \"Sign in\" }).ClickAsync();\n\nawait Expect(Page.GetByText(\"Welcome, John!\")).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Using to_match_aria_snapshot with an inline snapshot in Python (async)\nDESCRIPTION: Asynchronous Python example of verifying accessibility structure using to_match_aria_snapshot. The method confirms that the body element contains the expected accessibility elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nawait page.goto(\"https://demo.playwright.dev/todomvc/\")\nawait expect(page.locator('body')).to_match_aria_snapshot('''\n  - heading \"todos\"\n  - textbox \"What needs to be done?\"\n''')\n```\n\n----------------------------------------\n\nTITLE: Using SearchPage in Java Tests\nDESCRIPTION: Example of how to use the SearchPage class in Java tests. The code demonstrates initializing the page object with a browser page and using its methods to navigate and perform searches.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport models.SearchPage;\nimport com.microsoft.playwright.*;\n// ...\n\n// In the test\nPage page = browser.newPage();\nSearchPage searchPage = new SearchPage(page);\nsearchPage.navigate();\nsearchPage.search(\"search query\");\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout for Individual Tests (TypeScript)\nDESCRIPTION: This snippet shows how to set timeouts for individual tests using the test.slow() and test.setTimeout() methods. It demonstrates both tripling the default timeout and setting a specific timeout value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('slow test', async ({ page }) => {\n  test.slow(); // Easy way to triple the default timeout\n  // ...\n});\n\ntest('very slow test', async ({ page }) => {\n  test.setTimeout(120_000);\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Trace Files Using CLI Commands\nDESCRIPTION: Commands to open saved trace files using Playwright CLI across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-trace path/to/trace.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace trace.zip\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nplaywright show-trace trace.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip\n```\n\n----------------------------------------\n\nTITLE: Setting up Playwright with JUnit in Java\nDESCRIPTION: Example of integrating Playwright with JUnit for browser automation testing. It demonstrates how to initialize Playwright and Browser instances in @BeforeAll, create new BrowserContext and Page for each test, and release resources properly in @AfterAll and @AfterEach methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  static Playwright playwright;\n  static Browser browser;\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeAll\n  static void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterAll\n  static void closeBrowser() {\n    playwright.close();\n  }\n\n  @BeforeEach\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterEach\n  void closeContext() {\n    context.close();\n  }\n\n  @Test\n  void shouldClickButton() {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox() {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertTrue((Boolean) page.evaluate(\"() => window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki() {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertEquals(\"https://en.wikipedia.org/wiki/Playwright\", page.url());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Playwright Tests (C#)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests with C#. It sets up the .NET environment, builds the project, installs Playwright browsers, and runs the tests using dotnet test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_25\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: UseDotNet@2\n  inputs:\n    packageType: sdk\n    version: '8.0.x'\n  displayName: 'Use .NET SDK'\n- script: dotnet build --configuration Release\n  displayName: 'Build'\n- script: pwsh bin/Release/net8.0/playwright.ps1 install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: dotnet test --configuration Release\n  displayName: 'Run tests'\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Locator with AND Operation in Java\nDESCRIPTION: Demonstrates how to create a locator that matches both a button role and specific title using the new .and() method\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nLocator button = page.getByRole(AriaRole.BUTTON).and(page.getByTitle(\"Subscribe\"));\n```\n\n----------------------------------------\n\nTITLE: Parallel Test Execution Example with Playwright\nDESCRIPTION: Shows how to structure test classes for parallel execution with Playwright and JUnit, demonstrating multiple test classes running concurrently.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@UsePlaywright\nclass Test1 {\n  @Test\n  void shouldClickButton(Page page) {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox(Page page) {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertEquals(true, page.evaluate(\"window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki(Page page) {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertThat(page).hasURL(\"https://en.wikipedia.org/wiki/Playwright\");\n  }\n}\n\n@UsePlaywright\nclass Test2 {\n  @Test\n  void shouldReturnInnerHTML(Page page) {\n    page.setContent(\"<div>hello</div>\");\n    assertEquals(\"hello\", page.innerHTML(\"css=div\"));\n  }\n\n  @Test\n  void shouldClickButton(Page page) {\n    Page popup = page.waitForPopup(() -> {\n      page.evaluate(\"window.open('about:blank');\");\n    });\n    assertEquals(\"about:blank\", popup.url());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Text with Keyboard.insertText in Playwright (Java)\nDESCRIPTION: Demonstrates using `page.keyboard().insertText()` in Java to dispatch an `input` event with the specified text ('嗨'). This method bypasses `keydown`, `keyup`, and `keypress` events and is useful for directly inserting text, including non-ASCII characters. Modifier keys do not affect this method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.keyboard().insertText(\"嗨\");\n```\n```\n\n----------------------------------------\n\nTITLE: Recording Video with Browser Context (Python)\nDESCRIPTION: These snippets show how to create a new browser context with video recording enabled in Python, using both async and sync syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(record_video_dir=\"videos/\")\n# Make sure to await close, so that videos are saved.\nawait context.close()\n```\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context(record_video_dir=\"videos/\")\n# Make sure to close, so that videos are saved.\ncontext.close()\n```\n\n----------------------------------------\n\nTITLE: Handling Console Messages in Multiple Languages\nDESCRIPTION: These snippets show how to handle console messages emitted by the page in JavaScript, Java, Python, and C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npage.on('console', async msg => {\n  const values = [];\n  for (const arg of msg.args())\n    values.push(await arg.jsonValue());\n  console.log(...values);\n});\nawait page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));\n```\n\nLANGUAGE: java\nCODE:\n```\npage.onConsoleMessage(msg -> {\n  for (int i = 0; i < msg.args().size(); ++i)\n    System.out.println(i + \": \" + msg.args().get(i).jsonValue());\n});\npage.evaluate(\"() => console.log('hello', 5, { foo: 'bar' })\");\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def print_args(msg):\n    values = []\n    for arg in msg.args:\n        values.append(await arg.json_value())\n    print(values)\n\npage.on(\"console\", print_args)\nawait page.evaluate(\"console.log('hello', 5, { foo: 'bar' })\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\npage.Console += async (_, msg) =>\n{\n    foreach (var arg in msg.Args)\n        Console.WriteLine(await arg.JsonValueAsync<object>());\n};\n\nawait page.EvaluateAsync(\"console.log('hello', 5, { foo: 'bar' })\");\n```\n\n----------------------------------------\n\nTITLE: Starting Playwright Tracing (Python Async)\nDESCRIPTION: Demonstrates starting asynchronous Playwright tracing in Python using `await context.tracing.start()`. Options like `screenshots` and `snapshots` can be passed as arguments. Recording continues until `await context.tracing.stop()` is called.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait context.tracing.start(screenshots=True, snapshots=True)\npage = await context.new_page()\nawait page.goto(\"https://playwright.dev\")\nawait context.tracing.stop(path = \"trace.zip\")\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Stylesheet for Screenshot Comparison (CSS)\nDESCRIPTION: This CSS snippet shows how to create a custom stylesheet to hide specific elements (in this case, iframes) during screenshot capture, improving determinism.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\niframe {\n  visibility: hidden;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating API Setup in Browser-based Playwright Tests\nDESCRIPTION: Describes integrating API requests into Playwright browser tests. It reuses a request context to create an issue, navigate the browser to the issues page, and validate the new issue. Requires Playwright and a GitHub token.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n});\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be first in the list', async ({ page }) => {\n  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();\n  await expect(firstIssue).toHaveText('[Feature] request 1');\n});\n```\n\n----------------------------------------\n\nTITLE: Convert Response Body to Text\nDESCRIPTION: The `Response.text` async method retrieves the textual representation of the response body, suitable for working with text-based responses like HTML or JSON. It must be called within an asynchronous context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nasync function responseBodyText() {\\n  const text = await response.text();\\n  console.log('Response Text:', text);\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Browser Contexts in Playwright (.NET/C#)\nDESCRIPTION: Shows the C# code for creating multiple independent `BrowserContext` instances (`userContext`, `adminContext`) from a single browser object using `browser.NewContextAsync()`. This is essential for testing scenarios involving multiple users or roles concurrently in C# applications using the `Microsoft.Playwright` library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        // Create a Chromium browser instance\n        await using var browser = await playwright.Chromium.LaunchAsync();\n        await using var userContext = await browser.NewContextAsync();\n        await using var adminContext = await browser.NewContextAsync();\n        // Create pages and interact with contexts independently.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions in Playwright Tests\nDESCRIPTION: Shows how to use soft assertions in Playwright Test v1.19. Soft assertions do not terminate test execution when they fail, but still mark the test as failed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.locator('#status')).toHaveText('Success');\nawait expect.soft(page.locator('#eta')).toHaveText('1 day');\n\n// ... and continue the test to check more things.\nawait page.locator('#next-page').click();\nawait expect.soft(page.locator('#title')).toHaveText('Make another order');\n```\n\n----------------------------------------\n\nTITLE: Typing Text with Playwright Keyboard in C#\nDESCRIPTION: Illustrates the use of the Keyboard.TypeAsync method in C# for inputting text, both instantly and with a delay to simulate user typing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Keyboard.TypeAsync(\"Hello\"); // types instantly\nawait page.Keyboard.TypeAsync(\"World\", new() { Delay = 100 }); // types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies in Playwright Tests\nDESCRIPTION: Setting up project dependencies to run certain tests before others. This example shows how to configure a setup project that must run before any browser-specific projects, allowing global setup to produce traces and artifacts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: /global.setup\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Running asynchronous main function in Python\nDESCRIPTION: Uses Python's asyncio module to run the main asynchronous function. This pattern is common when working with async code in Python to ensure the event loop properly executes the async function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Selecting Options by Text in C#\nDESCRIPTION: Shows how to use the Locator.selectOption method to select an option in a dropdown by its text content rather than its value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nawait element.SelectOptionAsync(\"Red\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Chromium Channel for New Headless Mode in Playwright\nDESCRIPTION: This code snippet shows how to opt into the new headless mode for Chromium by using the 'chromium' channel in the Playwright test configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'], channel: 'chromium' },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Keyboard Modifiers for Playwright Input Actions\nDESCRIPTION: Defines the `modifiers` array parameter for Playwright input actions, specifying which modifier keys (Alt, Control, Meta, Shift, ControlOrMeta) should be pressed during the operation. Only the specified modifiers will be active, and the original state is restored afterward. 'ControlOrMeta' adapts based on the operating system (Control for Windows/Linux, Meta for macOS). If unspecified, current modifiers are used.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- `modifiers` <[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"ControlOrMeta\"|\"Meta\"|\"Shift\">>>\n```\n\n----------------------------------------\n\nTITLE: Asserting Locator Text Asynchronously with Playwright in Python\nDESCRIPTION: Illustrates using `await expect(locator).to_have_text()` in an asynchronous Python test function using `playwright.async_api` to assert that an element located by `.status` has the text \"Submitted\" following a button click. Depends on the `playwright` Python package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python async\nfrom playwright.async_api import Page, expect\n\nasync def test_status_becomes_submitted(page: Page) -> None:\n    # ..\n    await page.get_by_role(\"button\").click()\n    await expect(page.locator(\".status\")).to_have_text(\"Submitted\")\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Permissions in Python (Sync)\nDESCRIPTION: Creates a new browser context with notification permissions using the Playwright Python sync API. This enables notification capabilities for all pages within the context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context(\n  permissions=['notifications'],\n)\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a Browser Context in Playwright Library (JavaScript)\nDESCRIPTION: Illustrates how to manually create an isolated `BrowserContext` and a new `Page` within it using the Playwright library in JavaScript. This approach requires launching a browser instance first and is used when not utilizing the Playwright Test Runner's automatic context management.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\nconst page = await context.newPage();\n```\n\n----------------------------------------\n\nTITLE: Handling Array Option Values in Playwright Test Fixtures\nDESCRIPTION: Example showing how to correctly provide array values as fixture options. When the option value itself is an array, it needs to be wrapped in another array with a scope specifier.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntype Person = { name: string };\nconst test = base.extend<{ persons: Person[] }>({\n  // Declare the option, default value is an empty array.\n  persons: [[], { option: true }],\n});\n\n// Option value is an array of persons.\nconst actualPersons = [{ name: 'Alice' }, { name: 'Bob' }];\ntest.use({\n  // CORRECT: Wrap the value into an array and pass the scope.\n  persons: [actualPersons, { scope: 'test' }],\n});\n\ntest.use({\n  // WRONG: passing an array value directly will not work.\n  persons: actualPersons,\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Test Timeout in Playwright\nDESCRIPTION: This snippet demonstrates how to change the timeout for a test using test.setTimeout. It shows examples of changing timeout for individual tests, hooks, and test groups.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ntest('very slow test', async ({ page }) => {\n  test.setTimeout(120000);\n  // ...\n});\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  test.setTimeout(testInfo.timeout + 30000);\n});\n\ntest.beforeAll(async () => {\n  // Set timeout for this hook.\n  test.setTimeout(60000);\n});\n\ntest.describe('group', () => {\n  // Applies to all tests in this group.\n  test.describe.configure({ timeout: 60000 });\n\n  test('test one', async () => { /* ... */ });\n  test('test two', async () => { /* ... */ });\n  test('test three', async () => { /* ... */ });\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Object Subsets with toMatchObject in JavaScript\nDESCRIPTION: Demonstrates using `expect().toMatchObject()` in Playwright tests to perform a deep equality check between an actual value and an expected object or array. This assertion allows the actual value to have extra properties not present in the expected value, making it suitable for checking subsets of data. When comparing arrays, the number of items must match, and each item is checked recursively.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst value = {\n  a: 1,\n  b: 2,\n  c: true,\n};\nexpect(value).toMatchObject({ a: 1, c: true });\nexpect(value).toMatchObject({ b: 2, c: true });\n\nexpect([{ a: 1, b: 2 }]).toMatchObject([{ a: 1 }]);\n```\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Accessing Popup Windows (Java)\nDESCRIPTION: Illustrates Playwright for Java's waitForPopup to handle popups. Clicks UI to trigger the popup, acquires the page object for the popup, and evaluates its URL. Requires Playwright Java context and a clickable element matching the locator.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nPage popup = page.waitForPopup(() -> {\n  page.getByText(\"open the popup\").click();\n});\nSystem.out.println(popup.evaluate(\"location.href\"));\n```\n\n----------------------------------------\n\nTITLE: Simulating Keyboard Input with Shift Modifier in Playwright (Python Sync)\nDESCRIPTION: This synchronous Python snippet demonstrates how to use the Playwright Keyboard API to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It utilizes the `page.keyboard` object and its synchronous methods `type`, `press`, `down`, and `up`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.keyboard.type(\"Hello World!\")\npage.keyboard.press(\"ArrowLeft\")\npage.keyboard.down(\"Shift\")\nfor i in range(6):\n    page.keyboard.press(\"ArrowLeft\")\npage.keyboard.up(\"Shift\")\npage.keyboard.press(\"Backspace\")\n# result text will end up saying \"Hello!\"\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Multipart Form Data in Java\nDESCRIPTION: Example of uploading files using multipart/form-data encoding in Java. The example shows two approaches: passing a file path directly to the FormData constructor, and creating a FilePayload object with file content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Pass file path to the form data constructor:\nPath file = Paths.get(\"team.csv\");\nAPIResponse response = request.post(\"https://example.com/api/uploadTeamList\",\n  RequestOptions.create().setMultipart(\n    FormData.create().set(\"fileField\", file)));\n\n// Or you can pass the file content directly as FilePayload object:\nFilePayload filePayload1 = new FilePayload(\"f1.js\", \"text/javascript\",\n      \"console.log(2022);\".getBytes(StandardCharsets.UTF_8));\nAPIResponse response = request.post(\"https://example.com/api/uploadScript\",\n  RequestOptions.create().setMultipart(\n    FormData.create().set(\"fileField\", filePayload)));\n```\n\n----------------------------------------\n\nTITLE: Get Element by Test ID\nDESCRIPTION: Shows how to locate elements using test IDs added to the DOM elements\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByTestId('orange').click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_test_id(\"orange\").click()\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByTestId(\"orange\").click();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByTestId(\"orange\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Geolocation in Python (Sync)\nDESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright Python sync API. This sets up the browser environment to emulate a specific geographic location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context(\n  geolocation={\"longitude\": 41.890221, \"latitude\": 12.492348},\n  permissions=[\"geolocation\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots to Buffer in Playwright\nDESCRIPTION: Examples of capturing screenshots to a buffer instead of a file. This allows for post-processing or sending the image data to other services, with examples of converting to base64 encoding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/screenshots.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst buffer = await page.screenshot();\nconsole.log(buffer.toString('base64'));\n```\n\nLANGUAGE: java\nCODE:\n```\nbyte[] buffer = page.screenshot();\nSystem.out.println(Base64.getEncoder().encodeToString(buffer));\n```\n\nLANGUAGE: python\nCODE:\n```\n# Capture into Image\nscreenshot_bytes = await page.screenshot()\nprint(base64.b64encode(screenshot_bytes).decode())\n```\n\nLANGUAGE: python\nCODE:\n```\nscreenshot_bytes = page.screenshot()\nprint(base64.b64encode(screenshot_bytes).decode())\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar bytes = await page.ScreenshotAsync();\nConsole.WriteLine(Convert.ToBase64String(bytes));\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Assertion Example\nDESCRIPTION: Demonstrates a simple assertion using Playwright's expect function with toBeTruthy matcher.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(success).toBeTruthy();\n```\n\n----------------------------------------\n\nTITLE: Negated Assertion Examples\nDESCRIPTION: Demonstrates how to use negated assertions with Playwright's expect function using the .not modifier.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(value).not.toEqual(0);\nawait expect(locator).not.toContainText('some text');\n```\n\n----------------------------------------\n\nTITLE: Mocking API Endpoints in JavaScript\nDESCRIPTION: Shows how to intercept and mock API endpoints by handling network requests in JavaScript. The example fulfills a request with custom status code and body data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('**/api/fetch_data', route => route.fulfill({\n  status: 200,\n  body: testData,\n}));\nawait page.goto('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard.press for Key Simulation and Screenshots in Playwright (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the usage of `page.keyboard.press` to simulate pressing different keys ('A', 'ArrowLeft', 'Shift+O') on a webpage (`https://keycode.info`). It navigates to the page, simulates key presses, and takes screenshots after each press to visually verify the event. This method simulates a full key press, including `keydown` and `keyup` events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst page = await browser.newPage();\nawait page.goto('https://keycode.info');\nawait page.keyboard.press('A');\nawait page.screenshot({ path: 'A.png' });\nawait page.keyboard.press('ArrowLeft');\nawait page.screenshot({ path: 'ArrowLeft.png' });\nawait page.keyboard.press('Shift+O');\nawait page.screenshot({ path: 'O.png' });\nawait browser.close();\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Playwright Project via npm - Bash\nDESCRIPTION: Initializes a new Playwright end-to-end testing project using npm, creating a ready-to-use folder structure and configuration. Requires Node.js and npm installed. Prompts for setup options like test folder, language, GitHub Actions, and browser installation. Runs interactively and sets up Playwright dependencies in the current directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init playwright@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Geolocation in Playwright Tests\nDESCRIPTION: Example showing how to spoof geolocation for tests to simulate a user visiting from a specific location, providing longitude and latitude coordinates.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Playwright Frame - JavaScript\nDESCRIPTION: Dispatches the specified event type, such as 'click', on an element within a frame. Supported in JavaScript with various initialization options provided by event-specific parameters. Handles async event initialization and bubbling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait frame.dispatchEvent('button#submit', 'click');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dataTransfer = await frame.evaluateHandle(() => new DataTransfer());\nawait frame.dispatchEvent('#source', 'dragstart', { dataTransfer });\n```\n\n----------------------------------------\n\nTITLE: Waiting for Specific URL After Click in Python (Sync)\nDESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element using Playwright's synchronous API in Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_text(\"Click me\").click()\npage.wait_for_url(\"**/login\")\n```\n\n----------------------------------------\n\nTITLE: Starting Playwright Tracing (C#)\nDESCRIPTION: Shows how to initiate asynchronous Playwright tracing in C# using `await context.Tracing.StartAsync()`. Options like `Screenshots` and `Snapshots` are set within a new anonymous object or `TracingStartOptions` instance. Recording is completed with `await context.Tracing.StopAsync()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Chromium.LaunchAsync();\nawait using var context = await browser.NewContextAsync();\nawait context.Tracing.StartAsync(new()\n{\n  Screenshots = true,\n  Snapshots = true\n});\nvar page = await context.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev\");\nawait context.Tracing.StopAsync(new()\n{\n  Path = \"trace.zip\"\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Test Options in a Test\nDESCRIPTION: This snippet demonstrates how to use a custom test option 'person' within a test, similar to using fixtures in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from './my-test';\n\ntest('test 1', async ({ page, person }) => {\n  await page.goto(`/index.html`);\n  await expect(page.locator('#node')).toContainText(person);\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Dragging Elements with Locator.drag_to in Python (Async)\nDESCRIPTION: Shows how to drag a source element to a target element in Python using Playwright's async drag_to method. Includes specifying custom positions for more precise dragging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nsource = page.locator(\"#source\")\ntarget = page.locator(\"#target\")\n\nawait source.drag_to(target)\n# or specify exact positions relative to the top-left corners of the elements:\nawait source.drag_to(\n  target,\n  source_position={\"x\": 34, \"y\": 7},\n  target_position={\"x\": 10, \"y\": 20}\n)\n```\n\n----------------------------------------\n\nTITLE: Using Negated PageAssertions in Java\nDESCRIPTION: Example of using the .not() method to negate an assertion in Java, checking that a page URL doesn't contain 'error'. This demonstrates how to verify the absence of a pattern.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page).not().hasURL(\"error\");\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport for a Test Suite in Playwright Test (JavaScript)\nDESCRIPTION: This snippet shows how to apply a specific viewport size to a group of tests (a suite) using `test.describe` and `test.use` in a Playwright Test file (`example.spec.ts`). All tests within this describe block will use the specified viewport.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-test title=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test';\n\ntest.describe('specific viewport block', () => {\n  test.use({ viewport: { width: 1600, height: 1200 } });\n\n  test('my test', async ({ page }) => {\n    // ...\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Ignoring HTTPS Errors in Playwright Tests\nDESCRIPTION: Example showing how to configure tests to ignore HTTPS errors, which is useful for testing sites with self-signed certificates or in development environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    ignoreHTTPSErrors: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright with Detailed Logs\nDESCRIPTION: Commands to run Playwright tests with detailed debug logs using the DEBUG environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 npx playwright test\n```\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 pytest --browser chromium\n```\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 mvn test\n```\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 dotnet test\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Accessing Popup Windows (Python Sync)\nDESCRIPTION: Uses Playwright's sync Python API to block on popup creation. The code manages the event context to wait for the popup after a click, then prints the URL of the popup page. Assumes the target element exists and is actionable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_16\n\nLANGUAGE: python sync\nCODE:\n```\nwith page.expect_event(\"popup\") as page_info:\n    page.get_by_text(\"open the popup\").click()\npopup = page_info.value\nprint(popup.evaluate(\"location.href\"))\n```\n\n----------------------------------------\n\nTITLE: Handling a One-Off Dialog Event in Playwright (JavaScript)\nDESCRIPTION: Shows how to use `page.once` in Playwright for JavaScript to handle a specific event ('dialog') exactly once. This is useful for automatically handling prompts or alerts. Here, it accepts a prompt dialog with the value '2021' when triggered by `page.evaluate`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\npage.once('dialog', dialog => dialog.accept('2021'));\nawait page.evaluate(\"prompt('Enter a number:')\");\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Recording in Playwright Test (JavaScript)\nDESCRIPTION: This snippet shows how to configure video recording options in the Playwright Test configuration file. It demonstrates setting the video mode to 'on-first-retry'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    video: 'on-first-retry',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting WebSocket Messages with Playwright in JavaScript\nDESCRIPTION: Use Playwright to route WebSocket messages to a server and intercept and modify certain messages before sending them. JavaScript environment is required along with Playwright page instance.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.routeWebSocket('/ws', ws => {\n  const server = ws.connectToServer();\n  ws.onMessage(message => {\n    if (message === 'request')\n      server.send('request2');\n    else\n      server.send(message);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions on Frame in C#\nDESCRIPTION: Shows how to use the EvaluateAsync method in C# to execute a JavaScript expression within a frame and return its result as a specific type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await frame.EvaluateAsync<int>(\"([x, y]) => Promise.resolve(x * y)\", new[] { 7, 8 });\nConsole.WriteLine(result);\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selector on ElementHandle in JavaScript\nDESCRIPTION: Demonstrates how to evaluate a selector on an ElementHandle and extract inner text in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst tweetHandle = await page.$('.tweet');\nexpect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\nexpect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n```\n\n----------------------------------------\n\nTITLE: Evaluating Asynchronous JavaScript in Browser\nDESCRIPTION: Shows how to run asynchronous JavaScript code in the browser context, including fetching data. The evaluate function automatically waits for promises to resolve before returning the result.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst status = await page.evaluate(async () => {\n  const response = await fetch(location.href);\n  return response.status;\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nint status = (int) page.evaluate(\"async () => {\\n\" +\n  \"  const response = await fetch(location.href);\\n\" +\n  \"  return response.status;\\n\" +\n  \"}\");\n```\n\nLANGUAGE: python\nCODE:\n```\nstatus = await page.evaluate(\"\"\"async () => {\n  response = await fetch(location.href)\n  return response.status\n}\"\"\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nint status = await page.EvaluateAsync<int>(@\"async () => {\n  const response = await fetch(location.href);\n  return response.status;\n}\");\n```\n\n----------------------------------------\n\nTITLE: Limited-Use Locator Handler with Times Option in Python (Asynchronous)\nDESCRIPTION: Asynchronous Python implementation of a locator handler that automatically removes itself after one use by setting the times parameter to 1. This handler clicks on a close button when it appears.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_94\n\nLANGUAGE: python\nCODE:\n```\ndef handler(locator):\n  await locator.click()\nawait page.add_locator_handler(page.get_by_label(\"Close\"), handler, times=1)\n```\n\n----------------------------------------\n\nTITLE: Basic Page Navigation in Java\nDESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Navigate the page\npage.navigate(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Exceptions in Playwright (Python Async)\nDESCRIPTION: This asynchronous Python snippet demonstrates subscribing to the 'weberror' event on a Playwright context. It uses a lambda function as a handler to print the error message from `web_error.error` when an uncaught exception is detected. The `await page.goto` command navigates to a test page that intentionally throws an error, triggering the event handler in an async environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Log all uncaught errors to the terminal\ncontext.on(\"weberror\", lambda web_error: print(f\"uncaught exception: {web_error.error}\"))\n\n# Navigate to a page with an exception.\nawait page.goto(\"data:text/html,<script>throw new Error('test')</script>\")\n```\n\n----------------------------------------\n\nTITLE: Testing Slots in Vue Components with Playwright\nDESCRIPTION: Shows how to test slots in Vue components using Playwright's component testing framework. It demonstrates two approaches: using the options API and the JSX-style syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('slot', async ({ mount }) => {\n  const component = await mount(Component, { slots: { default: 'Slot' } });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('children', async ({ mount }) => {\n  const component = await mount(<Component>Child</Component>);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Frame Locator in Java\nDESCRIPTION: Demonstrates how to create and use a frame locator to interact with elements inside an iframe\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.frameLocator(\"#my-frame\").locator(\"text=Submit\");\nlocator.click();\n```\n\n----------------------------------------\n\nTITLE: Modifying API Response Data in C#\nDESCRIPTION: Shows how to use the new Route.fetch method to intercept an API request, modify the response data, and fulfill the request with the modified data. This example forces a specific theme setting in the response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.RouteAsync(\"**/api/settings\", async route => {\n  // Fetch original settings.\n  var response = await route.FetchAsync();\n\n  // Force settings theme to a predefined value.\n  var json = await response.JsonAsync<MyDataType>();\n  json.Theme = \"Solarized\";\n\n  // Fulfill with modified data.\n  await route.FulfillAsync(new() {\n    Json = json\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating Multiple Selectors on ElementHandle in Python (Sync)\nDESCRIPTION: Demonstrates evaluating multiple selectors on an ElementHandle and extracting inner text from multiple elements in Python using synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfeed_handle = page.query_selector(\".feed\")\nassert feed_handle.eval_on_selector_all(\".tweet\", \"nodes => nodes.map(n => n.innerText)\") == [\"hello!\", \"hi!\"]\n```\n\n----------------------------------------\n\nTITLE: Exposing Page URL Binding in Playwright\nDESCRIPTION: Examples demonstrating how to expose a page URL function to all frames using Page.exposeBinding across different languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\n\n(async () => {\n  const browser = await webkit.launch({ headless: false });\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  await page.exposeBinding('pageURL', ({ page }) => page.url());\n  await page.setContent(`\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.pageURL();\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n  `);\n  await page.click('button');\n})();\n```\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType webkit = playwright.webkit();\n      Browser browser = webkit.launch(new BrowserType.LaunchOptions().setHeadless(false));\n      BrowserContext context = browser.newContext();\n      Page page = context.newPage();\n      page.exposeBinding(\"pageURL\", (source, args) -> source.page().url());\n      page.setContent(\"<script>\\n\" +\n        \"  async function onClick() {\\n\" +\n        \"    document.querySelector('div').textContent = await window.pageURL();\\n\" +\n        \"  }\\n\" +\n        \"</script>\\n\" +\n        \"<button onclick=\\\"onClick()\\\">Click me</button>\\n\" +\n        \"<div></div>\");\n      page.click(\"button\");\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = await webkit.launch(headless=False)\n    context = await browser.new_context()\n    page = await context.new_page()\n    await page.expose_binding(\"pageURL\", lambda source: source[\"page\"].url)\n    await page.set_content(\"\"\"\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.pageURL();\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n    \"\"\")\n    await page.click(\"button\")\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass PageExamples\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        await using var browser = await playwright.Webkit.LaunchAsync(new()\n        {\n            Headless = false,\n        });\n        var page = await browser.NewPageAsync();\n\n        await page.ExposeBindingAsync(\"pageUrl\", (source) => source.Page.Url);\n        await page.SetContentAsync(\"<script>\\n\" +\n        \"  async function onClick() {\\n\" +\n        \"    document.querySelector('div').textContent = await window.pageURL();\\n\" +\n        \"  }\\n\" +\n        \"</script>\\n\" +\n        \"<button onclick=\\\"onClick()\\\">Click me</button>\\n\" +\n        \"<div></div>\");\n\n        await page.ClickAsync(\"button\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Content Assertion HTML List\nDESCRIPTION: HTML list structure for demonstrating text content assertions with multiple list items.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Item Text 1</li>\n  <li>Item Text 2</li>\n  <li>Item Text 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView2 Test Environment in Python\nDESCRIPTION: This Python code sets up fixtures for testing WebView2 applications with Playwright. It manages the WebView2 process, connects Playwright to it, and provides isolated contexts for each test run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport socket\nimport tempfile\nimport pytest\nfrom pathlib import Path\nfrom playwright.sync_api import Playwright, Browser, BrowserContext\nimport subprocess\n\nEXECUTABLE_PATH = (\n    Path(__file__).parent\n    / \"..\"\n    / \"webview2-app\"\n    / \"bin\"\n    / \"Debug\"\n    / \"net8.0-windows\"\n    / \"webview2.exe\"\n)\n\n\n@pytest.fixture(scope=\"session\")\ndef data_dir():\n    with tempfile.TemporaryDirectory(\n        prefix=\"playwright-webview2-tests\", ignore_cleanup_errors=True\n    ) as tmpdirname:\n        yield tmpdirname\n\n\n@pytest.fixture(scope=\"session\")\ndef webview2_process_cdp_port(data_dir: str):\n    cdp_port = _find_free_port()\n    process = subprocess.Popen(\n        [EXECUTABLE_PATH],\n        env={\n            **dict(os.environ),\n            \"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS\": f\"--remote-debugging-port={cdp_port}\",\n            \"WEBVIEW2_USER_DATA_FOLDER\": data_dir,\n        },\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        universal_newlines=True,\n    )\n    while True:\n        line = process.stdout.readline()\n        if \"WebView2 initialized\" in line:\n            break\n    yield cdp_port\n    process.terminate()\n\n\n@pytest.fixture(scope=\"session\")\ndef browser(playwright: Playwright, webview2_process_cdp_port: int):\n    browser = playwright.chromium.connect_over_cdp(\n        f\"http://127.0.0.1:{webview2_process_cdp_port}\"\n    )\n    yield browser\n\n\n@pytest.fixture(scope=\"function\")\ndef context(browser: Browser):\n    context = browser.contexts[0]\n    yield context\n\n\n@pytest.fixture(scope=\"function\")\ndef page(context: BrowserContext):\n    page = context.pages[0]\n    yield page\n\n\ndef _find_free_port(port=9000, max_port=65535):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    while port <= max_port:\n        try:\n            sock.bind((\"\", port))\n            sock.close()\n            return port\n        except OSError:\n            port += 1\n    raise IOError(\"no free ports\")\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams for API Request Query Parameters in Playwright\nDESCRIPTION: This snippet shows how to use URLSearchParams or a string to pass query parameters to an API request using Playwright's APIRequestContext.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntest('query params', async ({ request }) => {\n  const searchParams = new URLSearchParams();\n  searchParams.set('userId', 1);\n  const response = await request.get(\n      'https://jsonplaceholder.typicode.com/posts',\n      {\n        params: searchParams // or as a string: 'userId=1'\n      }\n  );\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Accessibility Assertions in Python\nDESCRIPTION: These snippets demonstrate how to use new accessibility assertions in Playwright, including checking for accessible names, descriptions, and ARIA roles.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.get_by_role(\"button\")\nexpect(locator).to_have_accessible_name(\"Submit\")\n\nlocator = page.get_by_role(\"button\")\nexpect(locator).to_have_accessible_description(\"Upload a photo\")\n\nlocator = page.get_by_test_id(\"save-button\")\nexpect(locator).to_have_role(\"button\")\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a Browser Context in Playwright (.NET/C#)\nDESCRIPTION: Demonstrates the C# code for initializing Playwright (`Playwright.CreateAsync()`), launching a Chromium browser (`playwright.Chromium.LaunchAsync()`), creating a new isolated `BrowserContext` (`browser.NewContextAsync()`), and then opening a `Page` (`context.NewPageAsync()`) within that context using the `Microsoft.Playwright` library. This illustrates manual context creation in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Chromium.LaunchAsync();\nvar context = await browser.NewContextAsync();\nvar page = await context.NewPageAsync();\n```\n\n----------------------------------------\n\nTITLE: Checking API State after Browser Issue Creation using Playwright in Java\nDESCRIPTION: This example demonstrates using Playwright for Java to create an issue in the GitHub web UI, extract the issue ID from the URL, and then validate its existence and content via API call. Prerequisites include an initialized Playwright browser and API context, as well as an existing GitHub repository. The test ensures UI actions reflect immediately in backend state, focusing on end-to-end validation with page navigation, locators, and API assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class TestGitHubAPI {\n  @Test\n  void lastCreatedIssueShouldBeOnTheServer() {\n    page.navigate(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues\");\n    page.locator(\"text=New Issue\").click();\n    page.locator(\"[aria-label='Title']\").fill(\"Bug report 1\");\n    page.locator(\"[aria-label='Comment body']\").fill(\"Bug description\");\n    page.locator(\"text=Submit new issue\").click();\n    String issueId = page.url().substring(page.url().lastIndexOf('/'));\n\n    APIResponse newIssue = request.get(\"https://github.com/\" + USER + \"/\" + REPO + \"/issues/\" + issueId);\n    assertThat(newIssue).isOK();\n    assertTrue(newIssue.text().contains(\"Bug report 1\"));\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Emulating Pinch Gesture in JavaScript with Playwright\nDESCRIPTION: This snippet demonstrates how to emulate a pinch gesture using JavaScript and Playwright. It includes a function to perform the pinch gesture and a test case that applies the gesture to zoom out a Google Maps page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect, devices, type Locator } from '@playwright/test';\n\ntest.use({ ...devices['Pixel 7'] });\n\nasync function pinch(locator: Locator,\n  arg: { deltaX?: number, deltaY?: number, steps?: number, direction?: 'in' | 'out' }) {\n  const { centerX, centerY } = await locator.evaluate((target: HTMLElement) => {\n    const bounds = target.getBoundingClientRect();\n    const centerX = bounds.left + bounds.width / 2;\n    const centerY = bounds.top + bounds.height / 2;\n    return { centerX, centerY };\n  });\n\n  const deltaX = arg.deltaX ?? 50;\n  const steps = arg.steps ?? 5;\n  const stepDeltaX = deltaX / (steps + 1);\n\n  // Two touch points equally distant from the center of the element.\n  const touches = [\n    {\n      identifier: 0,\n      clientX: centerX - (arg.direction === 'in' ? deltaX : stepDeltaX),\n      clientY: centerY,\n    },\n    {\n      identifier: 1,\n      clientX: centerX + (arg.direction === 'in' ? deltaX : stepDeltaX),\n      clientY: centerY,\n    },\n  ];\n  await locator.dispatchEvent('touchstart',\n      { touches, changedTouches: touches, targetTouches: touches });\n\n  // Move the touch points towards or away from each other.\n  for (let i = 1; i <= steps; i++) {\n    const offset = (arg.direction === 'in' ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1)));\n    const touches = [\n      {\n        identifier: 0,\n        clientX: centerX - offset,\n        clientY: centerY,\n      },\n      {\n        identifier: 0,\n        clientX: centerX + offset,\n        clientY: centerY,\n      },\n    ];\n    await locator.dispatchEvent('touchmove',\n        { touches, changedTouches: touches, targetTouches: touches });\n  }\n\n  await locator.dispatchEvent('touchend', { touches: [], changedTouches: [], targetTouches: [] });\n}\n\ntest(`pinch in gesture to zoom out the map`, async ({ page }) => {\n  await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z',\n      { waitUntil: 'commit' });\n  await page.getByRole('button', { name: 'Keep using web' }).click();\n  await expect(page.getByRole('button', { name: 'Keep using web' })).not.toBeVisible();\n  // Get the map element.\n  const met = page.locator('[data-test-id=\"met\"]');\n  for (let i = 0; i < 5; i++)\n    await pinch(met, { deltaX: 40, direction: 'in' });\n  // Ensure the map has been zoomed out.\n  await expect(met).toHaveScreenshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Aria Snapshots in Playwright Python (Sync)\nDESCRIPTION: Shows a sync Playwright Python call to acquire the ARIA snapshot (in YAML format) of a 'link' role node for comparison or assertion in accessibility testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\npage.get_by_role(\"link\").aria_snapshot()\n```\n\n----------------------------------------\n\nTITLE: Tracing Groups in Java\nDESCRIPTION: Shows how to use the new Tracing.group method to visually group actions in the trace viewer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// All actions between group and groupEnd\n// will be shown in the trace viewer as a group.\npage.context().tracing().group(\"Open Playwright.dev > API\");\npage.navigate(\"https://playwright.dev/\");\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"API\")).click();\npage.context().tracing().groupEnd();\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Recording (JavaScript)\nDESCRIPTION: Sets up video recording for browser context in JavaScript. Specifies directory and optional video dimensions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n- `recordVideo` <[Object]>\n  - `dir` <[path]> Path to the directory to put videos into.\n  - `size` ?<[Object]> Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport`\n    scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450.\n    Actual picture of each page will be scaled down if necessary to fit the specified size.\n    - `width` <[int]> Video frame width.\n    - `height` <[int]> Video frame height.\n```\n\n----------------------------------------\n\nTITLE: Using afterEach Hook in Playwright Tests\nDESCRIPTION: Shows how to use the afterEach hook that runs after each test. This example demonstrates accessing test information and logging test status and current page URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({ page }) => {\n  console.log(`Finished ${test.info().title} with status ${test.info().status}`);\n\n  if (test.info().status !== test.info().expectedStatus)\n    console.log(`Did not run as expected, ended up at ${page.url()}`);\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator with Locators for Conditional UI Handling\nDESCRIPTION: Shows how to handle conditional UI elements using the .or() operator to wait for either a button or dialog\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nLocator newEmail = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"New email\"));\nLocator dialog = page.getByText(\"Confirm security settings\");\nassertThat(newEmail.or(dialog)).isVisible();\nif (dialog.isVisible())\n  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Dismiss\")).click();\nnewEmail.click();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routes on Browser Context in Java\nDESCRIPTION: Demonstrates setting up route handling on the entire browser context using browserContext.route() in Java. This applies to popup windows and opened links.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nbrowserContext.route(\"**/api/login\", route -> route.fulfill(new Route.FulfillOptions()\n  .setStatus(200)\n  .setBody(\"accept\")));\npage.navigate(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Saving Downloads in Playwright (Java)\nDESCRIPTION: Illustrates the Java approach using `page.waitForDownload()` which accepts a lambda function to perform the action that triggers the download. The returned `Download` object is then used to save the file via `download.saveAs()`, constructing the path using `Paths.get()` and `download.suggestedFilename()`. Requires a Playwright `Page` object and an element that initiates a download.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Wait for the download to start\nDownload download = page.waitForDownload(() -> {\n    // Perform the action that initiates download\n    page.getByText(\"Download file\").click();\n});\n\n// Wait for the download process to complete and save the downloaded file somewhere\ndownload.saveAs(Paths.get(\"/path/to/save/at/\", download.suggestedFilename()));\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Playwright Instances on Different Threads in Java\nDESCRIPTION: Example showing how to create multiple Playwright instances each on its own thread. The implementation creates a thread for each browser type (Chromium, WebKit, Firefox), launches a browser process, and captures a screenshot from each browser.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/threading-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.*;\n\nimport java.nio.file.Paths;\n\nimport static java.util.Arrays.asList;\n\npublic class PlaywrightThread extends Thread {\n  private final String browserName;\n\n  private PlaywrightThread(String browserName) {\n    this.browserName = browserName;\n  }\n\n  public static void main(String[] args) throws InterruptedException {\n    // Create separate playwright thread for each browser.\n    for (String browserName: asList(\"chromium\", \"webkit\", \"firefox\")) {\n      Thread thread = new PlaywrightThread(browserName);\n      thread.start();\n    }\n  }\n\n  @Override\n  public void run() {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType browserType = getBrowserType(playwright, browserName);\n      Browser browser = browserType.launch();\n      Page page = browser.newPage();\n      page.navigate(\"https://playwright.dev/\");\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"user-agent-\" + browserName + \".png\")));\n    }\n  }\n\n  private static BrowserType getBrowserType(Playwright playwright, String browserName) {\n    switch (browserName) {\n      case \"chromium\":\n        return playwright.chromium();\n      case \"webkit\":\n        return playwright.webkit();\n      case \"firefox\":\n        return playwright.firefox();\n      default:\n        throw new IllegalArgumentException();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Locator in Playwright\nDESCRIPTION: React locator allows finding elements by their component name and property values. Component names are transcribed with CamelCase. This example demonstrates clicking on a BookItem component.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('_react=BookItem').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"_react=BookItem\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"_react=BookItem\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"_react=BookItem\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"_react=BookItem\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Job for Merging Reports\nDESCRIPTION: GitHub Actions job configuration that merges blob reports from all shards into a single HTML report after the test shards have completed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n...\n  merge-reports:\n    # Merge reports after playwright-tests, even if some shards have failed\n    if: ${{ !cancelled() }}\n    needs: [playwright-tests]\n\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Download blob reports from GitHub Actions Artifacts\n      uses: actions/download-artifact@v4\n      with:\n        path: all-blob-reports\n        pattern: blob-report-*\n        merge-multiple: true\n\n    - name: Merge into HTML Report\n      run: npx playwright merge-reports --reporter html ./all-blob-reports\n\n    - name: Upload HTML report\n      uses: actions/upload-artifact@v4\n      with:\n        name: html-report--attempt-${{ github.run_attempt }}\n        path: playwright-report\n        retention-days: 14\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for C# Playwright in Containers\nDESCRIPTION: The YAML configuration defines a workflow for running C# Playwright tests using Docker containers in GitHub Actions, ensuring a controlled environment. The setup is efficient for CI operations, triggered upon main branch activities.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_16\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\\non:\\n  push:\\n    branches: [ main, master ]\\n  pull_request:\\n    branches: [ main, master ]\\njobs:\\n  playwright:\\n    name: 'Playwright Tests'\\n    runs-on: ubuntu-latest\\n    container:\\n      image: mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\\n      options: --user 1001\\n    steps:\\n      - uses: actions/checkout@v4\\n      - name: Setup dotnet\\n        uses: actions/setup-dotnet@v4\\n        with:\\n          dotnet-version: 8.0.x\\n      - run: dotnet build\\n      - name: Run your tests\\n        run: dotnet test\n```\n\n----------------------------------------\n\nTITLE: Custom Options Configuration for Playwright JUnit Tests\nDESCRIPTION: Shows how to implement custom OptionsFactory to initialize Playwright fixtures with custom configuration including headless mode and base URLs for browser context and API requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.junit.Options;\nimport com.microsoft.playwright.junit.OptionsFactory;\nimport com.microsoft.playwright.junit.UsePlaywright;\n\n@UsePlaywright(MyTest.CustomOptions.class)\npublic class MyTest {\n\n  public static class CustomOptions implements OptionsFactory {\n    @Override\n    public Options getOptions() {\n      return new Options()\n          .setHeadless(false)\n          .setContextOption(new Browser.NewContextOptions()\n              .setBaseURL(\"https://github.com\"))\n          .setApiRequestOptions(new APIRequest.NewContextOptions()\n              .setBaseURL(\"https://playwright.dev\"));\n    }\n  }\n\n  @Test\n  public void testWithCustomOptions(Page page, APIRequestContext request) {\n    page.navigate(\"/\");\n    assertThat(page).hasURL(Pattern.compile(\"github\"));\n\n    APIResponse response = request.get(\"/\");\n    assertTrue(response.text().contains(\"Playwright\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching viewport size changes in Java\nDESCRIPTION: Shows how to use waitForFunction in Java to monitor viewport size changes. The function resolves when the window's inner width becomes less than 100 pixels after setting the viewport size.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_111\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType webkit = playwright.webkit();\n      Browser browser = webkit.launch();\n      Page page = browser.newPage();\n      page.setViewportSize(50,  50);\n      page.waitForFunction(\"() => window.innerWidth < 100\");\n      browser.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Frame.waitForFunction in JavaScript\nDESCRIPTION: This JavaScript example shows how to pass an argument to the predicate function in Frame.waitForFunction. It waits for an element matching a specific selector to appear in the document.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst selector = '.foo';\nawait frame.waitForFunction(selector => !!document.querySelector(selector), selector);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Server with Host Access\nDESCRIPTION: Command to run Playwright server in Docker with access to local servers on the host machine through 'hostmachine' hostname.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --add-host=hostmachine:host-gateway -p 3000:3000 --rm --init -it --workdir /home/pwuser --user pwuser mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/sh -c \"npx -y playwright@%%VERSION%% run-server --port 3000 --host 0.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining a JSHandle using evaluateHandle in JavaScript\nDESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.evaluateHandle` method in JavaScript. This handle can subsequently be used for further JavaScript evaluations within the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst jsHandle = await page.evaluateHandle('window');\n//  Use jsHandle for evaluations.\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Failed HTTP Requests (Java)\nDESCRIPTION: Sets up Playwright for Java's onRequestFailed handler to print failed request URLs and details. Used for logging and troubleshooting failed page resources. The snippet assumes a running Playwright session and a ready page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npage.onRequestFailed(request -> {\n  System.out.println(request.url() + \" \" + request.failure());\n});\n```\n\n----------------------------------------\n\nTITLE: Reusing Authentication State Across API and Browser Contexts in Playwright (C#)\nDESCRIPTION: Shows how to capture storage state from an authenticated API context and initialize a new browser context with that state using Playwright for .NET in C#. The code first authenticates via API with HTTP credentials, saves the resulting state, and applies it to a browser context to maintain login sessions across testing boundaries. Requires Playwright installed and suitable API endpoints; input parameters include authentication credentials and target URLs, with state sharing limited to compatible browser/API contexts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar requestContext = await Playwright.APIRequest.NewContextAsync(new()\n{\n    HttpCredentials = new()\n    {\n        Username = \"user\",\n        Password = \"passwd\"\n    },\n});\nawait requestContext.GetAsync(\"https://api.example.com/login\");\n// Save storage state into a variable.\nvar state = await requestContext.StorageStateAsync();\n\n// Create a new context with the saved storage state.\nvar context = await Browser.NewContextAsync(new() { StorageState = state });\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Hidden DOM Elements in Playwright\nDESCRIPTION: Examples of using toBeHidden assertion to verify if a locator either doesn't resolve to any DOM node or resolves to a non-visible one.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('.my-element');\nawait expect(locator).toBeHidden();\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.locator(\".my-element\")).isHidden();\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import expect\n\nlocator = page.locator('.my-element')\nawait expect(locator).to_be_hidden()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.Locator(\".my-element\");\nawait Expect(locator).ToBeHiddenAsync();\n```\n\n----------------------------------------\n\nTITLE: Python Page Evaluation Example\nDESCRIPTION: Demonstrates evaluating JavaScript with mixed serializable objects and handles in Python using Playwright\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npage.evaluate(\"\"\"\n    x => x.button1.textContent + x.list[0].textContent + String(x.foo)\"\"\",\n    { 'button1': button1, 'list': [button2], 'foo': None })\n```\n\n----------------------------------------\n\nTITLE: Using PageAssertions to Verify URL Pattern in Python (Sync)\nDESCRIPTION: Example of using expect assertions in synchronous Python to verify URL pattern after clicking a sign-in button. Uses regular expressions for pattern matching in the URL assertion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.sync_api import Page, expect\n\ndef test_navigates_to_login_page(page: Page) -> None:\n    # ..\n    page.get_by_text(\"Sign in\").click()\n    expect(page).to_have_url(re.compile(r\".*/login\"))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Timing with Playwright in JavaScript\nDESCRIPTION: Demonstrates how to wait for a finished request event in Playwright, navigate to a page, and then retrieve detailed timing metrics for the request using the timing() method. Requires Playwright installed and a browser page object. Key parameters include the event name ('requestfinished') and the page navigation URL. Outputs timing data to the console. Limitations include that most timing values are only available after the response is received, and responseEnd after the request fully finishes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst requestFinishedPromise = page.waitForEvent('requestfinished');\\nawait page.goto('http://example.com');\\nconst request = await requestFinishedPromise;\\nconsole.log(request.timing());\n```\n\n----------------------------------------\n\nTITLE: Simulating Keyboard Input with Shift Modifier in Playwright (Java)\nDESCRIPTION: This snippet demonstrates how to use the Playwright Keyboard API in Java to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It relies on the `page.keyboard()` object and its methods `type()`, `press()`, `down()`, and `up()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.keyboard().type(\"Hello World!\");\npage.keyboard().press(\"ArrowLeft\");\npage.keyboard().down(\"Shift\");\nfor (int i = 0; i < \" World\".length(); i++)\n  page.keyboard().press(\"ArrowLeft\");\npage.keyboard().up(\"Shift\");\npage.keyboard().press(\"Backspace\");\n// Result text will end up saying \"Hello!\"\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Playwright Test-Level Configuration\nDESCRIPTION: Demonstrates how to override configuration options for a specific test using test.use(). Shows setting locale to French for an individual test case.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.use({ locale: 'fr-FR' });\n\ntest('example', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using APIResponseAssertions with negation in Java\nDESCRIPTION: Example of using the .not() method to negate an assertion and check that a response is not OK in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nassertThat(response).not().isOK();\n```\n\n----------------------------------------\n\nTITLE: Mocking Read-only Browser APIs\nDESCRIPTION: Demonstrates how to mock read-only browser APIs using Object.defineProperty to override navigator properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.addInitScript(() => {\n  Object.defineProperty(Object.getPrototypeOf(navigator), 'cookieEnabled', { value: false });\n});\n```\n\n----------------------------------------\n\nTITLE: FormData File Upload in Java Playwright\nDESCRIPTION: Shows how to use FormData to append multiple files with the same field name for multipart form uploads\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nFormData formData = FormData.create();\nformData.append(\"file\", new FilePayload(\"f1.js\", \"text/javascript\",\n\"var x = 2024;\".getBytes(StandardCharsets.UTF_8)));\nformData.append(\"file\", new FilePayload(\"f2.txt\", \"text/plain\",\n  \"hello\".getBytes(StandardCharsets.UTF_8)));\nAPIResponse response = context.request().post(\"https://example.com/uploadFile\", RequestOptions.create().setMultipart(formData));\n```\n\n----------------------------------------\n\nTITLE: Manual Time Control with Playwright in Java\nDESCRIPTION: Demonstrates manual time control in Java using Playwright's clock API with SimpleDateFormat for parsing dates. The example initializes a clock, pauses time at a specific point, and then advances time while verifying the UI updates correctly.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nSimpleDateFormat format = new SimpleDateFormat(\"yyy-MM-dd'T'HH:mm:ss\");\n// Initialize clock with a specific time, let the page load naturally.\npage.clock().install(new Clock.InstallOptions()\n    .setTime(format.parse(\"2024-02-02T08:00:00\")));\npage.navigate(\"http://localhost:3333\");\nLocator locator = page.getByTestId(\"current-time\");\n\n// Pause the time flow, stop the timers, you now have manual control\n// over the page time.\npage.clock().pauseAt(format.parse(\"2024-02-02T10:00:00\"));\nassertThat(locator).hasText(\"2/2/2024, 10:00:00 AM\");\n\n// Tick through time manually, firing all timers in the process.\n// In this case, time will be updated in the screen 2 times.\npage.clock().runFor(2000);\nassertThat(locator).hasText(\"2/2/2024, 10:00:02 AM\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI on macOS\nDESCRIPTION: Command to install the Azure Command Line Interface (CLI) using Homebrew on macOS.\nSOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew update && brew install azure-cli\n```\n\n----------------------------------------\n\nTITLE: Using beforeMount Hook in Vue.js Component Tests\nDESCRIPTION: Example of using the beforeMount hook in Playwright component tests for Vue.js. This allows setting up the app configuration before mounting components.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-vue';\nimport { Component } from './mycomponent';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(Component, {\n    hooksConfig: {\n      /* anything to configure your app */\n    }\n  });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '../router';\nimport { beforeMount } from '@playwright/experimental-ct-vue/hooks';\n\nbeforeMount(async ({ app, hooksConfig }) => {\n  app.use(router);\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Element Screenshots in Playwright\nDESCRIPTION: Examples of taking screenshots of specific DOM elements. This is useful when you need to capture only a particular part of the page identified by a CSS selector.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/screenshots.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('.header').screenshot({ path: 'screenshot.png' });\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\".header\").screenshot(new Locator.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\".header\").screenshot(path=\"screenshot.png\")\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\".header\").screenshot(path=\"screenshot.png\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\".header\").ScreenshotAsync(new() { Path = \"screenshot.png\" });\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in C#\nDESCRIPTION: Shows how to serve static files as responses to specific routes using Playwright in C#. This example demonstrates serving a JSON file for a specific endpoint.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"**/xhr_endpoint\", route => route.FulfillAsync(new() { Path = \"mock_data.json\" }));\n```\n\n----------------------------------------\n\nTITLE: Opening UI Mode and Trace Viewer in Browser Tabs\nDESCRIPTION: Shows how to open Playwright's UI mode and trace viewer in browser tabs by specifying a port.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ npx playwright test --ui-port 0 # open UI mode in a tab on a random port\n$ npx playwright show-trace --port 0 # open trace viewer in tab on a random port\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose API Logs in Playwright\nDESCRIPTION: Commands to enable verbose API logging in Playwright using the DEBUG environment variable, which helps with detailed debugging of API calls.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pw:api npx playwright test\n```\n\nLANGUAGE: batch\nCODE:\n```\nset DEBUG=pw:api\nnpx playwright test\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:DEBUG=\"pw:api\"\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by ARIA Role\nDESCRIPTION: Demonstrates locating elements by their ARIA roles and accessible names, supporting web accessibility standards.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_132\n\nLANGUAGE: html\nCODE:\n```\n<h3>Sign up</h3>\n<label>\n  <input type=\"checkbox\" /> Subscribe\n</label>\n<br/>\n<button>Submit</button>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();\n\nawait page.getByRole('checkbox', { name: 'Subscribe' }).check();\n\nawait page.getByRole('button', { name: /submit/i }).click();\n```\n\n----------------------------------------\n\nTITLE: Browser Context Request Cookie Sharing Example\nDESCRIPTION: Demonstrates how APIRequestContext associated with a browser context automatically shares and updates cookies between API requests and the browser context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntest('context request will share cookie storage with its browser context', async ({\n  page,\n  context,\n}) => {\n  await context.route('https://www.github.com/', async route => {\n    // Send an API request that shares cookie storage with the browser context.\n    const response = await context.request.fetch(route.request());\n    const responseHeaders = response.headers();\n\n    // The response will have 'Set-Cookie' header.\n    const responseCookies = new Map(responseHeaders['set-cookie']\n        .split('\\n')\n        .map(c => c.split(';', 2)[0].split('=')));\n    // The response will have 3 cookies in 'Set-Cookie' header.\n    expect(responseCookies.size).toBe(3);\n    const contextCookies = await context.cookies();\n    // The browser context will already contain all the cookies from the API response.\n    expect(new Map(contextCookies.map(({ name, value }) =>\n      [name, value])\n    )).toEqual(responseCookies);\n\n    await route.fulfill({\n      response,\n      headers: { ...responseHeaders, foo: 'bar' },\n    });\n  });\n  await page.goto('https://www.github.com/');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling JSON WebSocket Messages with Playwright in C#\nDESCRIPTION: Uses Playwright for C# to process JSON messages, utilizing System.Text.Json for JSON parsing and response construction. Requires a setup with Playwright in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteWebSocketAsync(\"wss://example.com/ws\", ws => {\n  ws.OnMessage(frame => {\n    using var jsonDoc = JsonDocument.Parse(frame.Text);\n    JsonElement root = jsonDoc.RootElement;\n    if (root.TryGetProperty(\"request\", out JsonElement requestElement) && requestElement.GetString() == \"question\")\n    {\n      var response = new Dictionary<string, string> { [\"response\"] = \"answer\" };\n      string jsonResponse = JsonSerializer.Serialize(response);\n      ws.Send(jsonResponse);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Message in JavaScript\nDESCRIPTION: Gets the error message. This is set when an Error (or its subclass) has been thrown during test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfoerror.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntestInfoError.message\n```\n\n----------------------------------------\n\nTITLE: Combining Locators via Logical 'And' in Playwright Python (Sync)\nDESCRIPTION: Shows a sync Playwright Python call combining 'button' role and title locator via `and_`, yielding a new locator reflecting both constraints.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nbutton = page.get_by_role(\"button\").and_(page.getByTitle(\"Subscribe\"))\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Headed Mode\nDESCRIPTION: Command to run tests with browser window visible using the --headed flag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest --headed\n```\n\n----------------------------------------\n\nTITLE: Checking the Installed Version of Playwright (Bash)\nDESCRIPTION: Lists commands to display the currently installed version of Playwright via the command line. Works with NPM, Yarn, and PNPM executions. Input: none. Output: Playwright version string to STDOUT. Requires the Playwright CLI to be installed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright --version\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright --version\n```\n\n----------------------------------------\n\nTITLE: Using Page.waitForTimeout() Instead of Thread.sleep() for Event Handling in Playwright Java\nDESCRIPTION: Example demonstrating how to properly pause execution while allowing Playwright events to be dispatched. This snippet shows the difference between Thread.sleep() (which blocks event dispatching) and Page.waitForTimeout() (which maintains event handling during the pause).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/threading-java.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npage.onResponse(response -> System.out.println(response.url()));\npage.navigate(\"https://playwright.dev\");\nSystem.out.println(\"-- did navigate --\");\n// Block current thread for 60s and ensure the events are dispatched.\npage.waitForTimeout(60_000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Server Output in Playwright Config\nDESCRIPTION: Shows how to configure output handling for the web server in Playwright configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n    stdout: 'pipe',\n    stderr: 'pipe',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Service Worker Configuration in C#\nDESCRIPTION: Shows how to disable service workers using browser context options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await Browser.NewContextAsync(new()\n{\n    ServiceWorkers = ServiceWorkerPolicy.Block\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Multiple Trace Chunks (Java)\nDESCRIPTION: Demonstrates how to record multiple, distinct trace files in Java using `tracing().startChunk()` and `tracing().stopChunk()`. Requires `tracing().start()` to be called beforehand. Each chunk records the actions executed between its start and stop points, saving to the specified path via `Tracing.StopChunkOptions`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true));\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\n\ncontext.tracing().startChunk();\npage.getByText(\"Get Started\").click();\n// Everything between startChunk and stopChunk will be recorded in the trace.\ncontext.tracing().stopChunk(new Tracing.StopChunkOptions()\n  .setPath(Paths.get(\"trace1.zip\")));\n\ncontext.tracing().startChunk();\npage.navigate(\"http://example.com\");\n// Save a second trace file with different actions.\ncontext.tracing().stopChunk(new Tracing.StopChunkOptions()\n  .setPath(Paths.get(\"trace2.zip\")));\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript on All Matching Elements with Locator.evaluateAll in Java\nDESCRIPTION: Demonstrates how to execute JavaScript code on all matching elements using Locator.evaluateAll in Java. Passes an array of matching elements to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nLocator locator = page.locator(\"div\");\nboolean moreThanTen = (boolean) locator.evaluateAll(\"(divs, min) => divs.length > min\", 10);\n```\n\n----------------------------------------\n\nTITLE: Time Manipulation Using Clock API\nDESCRIPTION: Demonstrates usage of the new Clock API for controlling time within tests, including setting predefined times and fast-forwarding through time intervals.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize clock and let the page load naturally.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pretend that the user closed the laptop lid and opened it again at 10am,\n// Pause the time once reached that point.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\n\n// Assert the page state.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Close the laptop lid again and open it at 10:30am.\nawait page.clock.fastForward('30:00');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\n----------------------------------------\n\nTITLE: Setting up and Tearing Down GitHub Test Repository with Playwright MSTest in C#\nDESCRIPTION: This snippet illustrates how to automate the creation and deletion of a GitHub test repository as test setup and teardown actions using Playwright's APIRequestContext in C#. The CreateTestRepository and DeleteTestRepository private methods issue POST and DELETE requests to the relevant GitHub API endpoints. The hooks ensure that resource state is managed automatically at the start and end of test classes. Dependencies include Playwright, MSTest, GITHUB_USER, and GITHUB_API_TOKEN environment variables.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-csharp.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    // ...\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n        await CreateTestRepository();\n    }\n\n    private async Task CreateTestRepository()\n    {\n        var resp = await Request.PostAsync(\"/user/repos\", new()\n        {\n            DataObject = new Dictionary<string, string>()\n            {\n                [\"name\"] = REPO,\n            },\n        });\n        await Expect(resp).ToBeOKAsync();\n    }\n\n    [TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await DeleteTestRepository();\n        await Request.DisposeAsync();\n    }\n\n    private async Task DeleteTestRepository()\n    {\n        var resp = await Request.DeleteAsync(\"/repos/\" + USER + \"/\" + REPO);\n        await Expect(resp).ToBeOKAsync();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: File Upload Operations in C#\nDESCRIPTION: Shows various file upload scenarios in C# including single file, multiple files, directory upload, clearing files, and uploading from memory buffer. Uses Playwright's SetInputFilesAsync method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_94\n\nLANGUAGE: csharp\nCODE:\n```\n// Select one file\nawait page.GetByLabel(\"Upload file\").SetInputFilesAsync(\"myfile.pdf\");\n\n// Select multiple files\nawait page.GetByLabel(\"Upload files\").SetInputFilesAsync(new[] { \"file1.txt\", \"file12.txt\" });\n\n// Select a directory\nawait page.GetByLabel(\"Upload directory\").SetInputFilesAsync(\"mydir\");\n\n// Remove all the selected files\nawait page.GetByLabel(\"Upload file\").SetInputFilesAsync(new[] {});\n\n// Upload buffer from memory\nawait page.GetByLabel(\"Upload file\").SetInputFilesAsync(new FilePayload\n{\n    Name = \"file.txt\",\n    MimeType = \"text/plain\",\n    Buffer = System.Text.Encoding.UTF8.GetBytes(\"this is a test\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Codegen in Java\nDESCRIPTION: This command executes the Playwright code generator through Maven for a specified URL using Java. It generates test scripts based on user interactions in the browser. Prerequisites include a Maven setup with Playwright dependency, and the target URL is optional.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen-intro.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"codegen demo.playwright.dev/todomvc\\\"\n```\n\n----------------------------------------\n\nTITLE: Recording HAR File in C#\nDESCRIPTION: C# implementation for recording network traffic to a HAR file using Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// Get the response from the HAR file\nawait page.RouteFromHARAsync(\"./hars/fruit.har\", new () {\n  Url = \"*/**/api/v1/fruits\",\n  Update = true,\n});\n\n// Go to the page\nawait page.GotoAsync(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the fruit is visible\nawait Expect(page.GetByText(\"Strawberry\")).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Newsletter Dialog with Locator Handler in Python (Synchronous)\nDESCRIPTION: Synchronous Python implementation of a locator handler that automatically closes a newsletter signup dialog when it appears. The handler detects text matching 'Sign up to the newsletter' and clicks the 'No thanks' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_78\n\nLANGUAGE: python\nCODE:\n```\n# Setup the handler.\ndef handler():\n  page.get_by_role(\"button\", name=\"No thanks\").click()\npage.add_locator_handler(page.get_by_text(\"Sign up to the newsletter\"), handler)\n\n# Write the test as usual.\npage.goto(\"https://example.com\")\npage.get_by_role(\"button\", name=\"Start here\").click()\n```\n\n----------------------------------------\n\nTITLE: Dragging Elements with Locator.drag_to in Python (Sync)\nDESCRIPTION: Demonstrates how to drag a source element to a target element in Python using Playwright's synchronous drag_to method. Includes custom position specification.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nsource = page.locator(\"#source\")\ntarget = page.locator(\"#target\")\n\nsource.drag_to(target)\n# or specify exact positions relative to the top-left corners of the elements:\nsource.drag_to(\n  target,\n  source_position={\"x\": 34, \"y\": 7},\n  target_position={\"x\": 10, \"y\": 20}\n)\n```\n\n----------------------------------------\n\nTITLE: Emulating Pinch Gesture in Python with Playwright\nDESCRIPTION: This snippet illustrates how to implement a pinch gesture using Python and Playwright. It includes an asynchronous function for performing the pinch gesture, which can be used in a test case to zoom out a Google Maps page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import async_playwright, expect\n\nasync def pinch(locator, arg):\n    bounds = await locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2\n\n    deltaX = arg.get('deltaX', 50)\n    steps = arg.get('steps', 5)\n    stepDeltaX = deltaX / (steps + 1)\n\n    touches = [\n        {\n            'identifier': 0,\n            'clientX': centerX - (deltaX if arg.get('direction') == 'in' else stepDeltaX),\n            'clientY': centerY,\n        },\n        {\n            'identifier': 1,\n            'clientX': centerX + (deltaX if arg.get('direction') == 'in' else stepDeltaX),\n            'clientY': centerY,\n        },\n    ]\n    await locator.dispatch_event('touchstart', {\n        'touches': touches,\n        'changedTouches': touches,\n        'targetTouches': touches\n    })\n\n    for i in range(1, steps + 1):\n        offset = deltaX - i * stepDeltaX if arg.get('direction') == 'in' else stepDeltaX * (i + 1)\n        touches = [\n            {\n                'identifier': 0,\n                'clientX': centerX - offset,\n                'clientY': centerY,\n            },\n            {\n                'identifier': 1,\n                'clientX': centerX + offset,\n                'clientY': centerY,\n            },\n        ]\n        await locator.dispatch_event('touchmove', {\n            'touches': touches,\n            'changedTouches': touches,\n            'targetTouches': touches\n        })\n\n    await locator.dispatch_event('touchend', {\n        'touches': [],\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Screenshot Comparison with maxDiffPixels (JavaScript)\nDESCRIPTION: This example shows how to configure the `toHaveScreenshot()` method with the `maxDiffPixels` option to allow for a certain number of pixel differences in the comparison.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({ maxDiffPixels: 100 });\n});\n```\n\n----------------------------------------\n\nTITLE: Using select_option by Label Text in Playwright Python\nDESCRIPTION: Demonstrates how to select options in a dropdown by their label text rather than value, using the improved selectOption method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<select multiple>\n  <option value=\"red\">Red</option>\n  <option value=\"green\">Green</option>\n  <option value=\"blue\">Blue</option>\n</select>\n```\n\nLANGUAGE: python\nCODE:\n```\nelement.select_option(\"Red\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Evaluation Arguments in JavaScript\nDESCRIPTION: Comprehensive examples of passing different types of arguments to evaluate, including primitives, arrays, objects, and JSHandles. Shows various techniques for working with complex data structures and object destructuring.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// A primitive value.\nawait page.evaluate(num => num, 42);\n\n// An array.\nawait page.evaluate(array => array.length, [1, 2, 3]);\n\n// An object.\nawait page.evaluate(object => object.foo, { foo: 'bar' });\n\n// A single handle.\nconst button = await page.evaluateHandle('window.button');\nawait page.evaluate(button => button.textContent, button);\n\n// Alternative notation using JSHandle.evaluate.\nawait button.evaluate((button, from) => button.textContent.substring(from), 5);\n\n// Object with multiple handles.\nconst button1 = await page.evaluateHandle('window.button1');\nconst button2 = await page.evaluateHandle('window.button2');\nawait page.evaluate(\n    o => o.button1.textContent + o.button2.textContent,\n    { button1, button2 });\n\n// Object destructuring works. Note that property names must match\n// between the destructured object and the argument.\n// Also note the required parenthesis.\nawait page.evaluate(\n    ({ button1, button2 }) => button1.textContent + button2.textContent,\n    { button1, button2 });\n\n// Array works as well. Arbitrary names can be used for destructuring.\n// Note the required parenthesis.\nawait page.evaluate(\n    ([b1, b2]) => b1.textContent + b2.textContent,\n    [button1, button2]);\n\n// Any mix of serializables and handles works.\nawait page.evaluate(\n    x => x.button1.textContent + x.list[0].textContent + String(x.foo),\n    { button1, list: [button2], foo: null });\n```\n\nLANGUAGE: java\nCODE:\n```\n// A primitive value.\npage.evaluate(\"num => num\", 42);\n\n// An array.\npage.evaluate(\"array => array.length\", Arrays.asList(1, 2, 3));\n\n// An object.\nMap<String, Object> obj = new HashMap<>();\nobj.put(\"foo\", \"bar\");\npage.evaluate(\"object => object.foo\", obj);\n\n// A single handle.\nElementHandle button = page.evaluateHandle(\"window.button\");\npage.evaluate(\"button => button.textContent\", button);\n\n// Alternative notation using JSHandle.evaluate.\nbutton.evaluate(\"(button, from) => button.textContent.substring(from)\", 5);\n\n// Object with multiple handles.\nElementHandle button1 = page.evaluateHandle(\"window.button1\");\nElementHandle button2 = page.evaluateHandle(\"window.button2\");\nMap<String, ElementHandle> arg = new HashMap<>();\narg.put(\"button1\", button1);\narg.put(\"button2\", button2);\npage.evaluate(\"o => o.button1.textContent + o.button2.textContent\", arg);\n\n// Object destructuring works. Note that property names must match\n// between the destructured object and the argument.\n// Also note the required parenthesis.\nMap<String, ElementHandle> arg = new HashMap<>();\narg.put(\"button1\", button1);\narg.put(\"button2\", button2);\npage.evaluate(\"({ button1, button2 }) => button1.textContent + button2.textContent\", arg);\n\n// Array works as well. Arbitrary names can be used for destructuring.\n// Note the required parenthesis.\npage.evaluate(\n  \"([b1, b2]) => b1.textContent + b2.textContent\",\n  Arrays.asList(button1, button2));\n\n// Any mix of serializables and handles works.\nMap<String, Object> arg = new HashMap<>();\narg.put(\"button1\", button1);\narg.put(\"list\", Arrays.asList(button2));\narg.put(\"foo\", 0);\npage.evaluate(\n  \"x => x.button1.textContent + x.list[0].textContent + String(x.foo)\",\n  arg);\n```\n\nLANGUAGE: python\nCODE:\n```\n# A primitive value.\nawait page.evaluate('num => num', 42)\n\n# An array.\nawait page.evaluate('array => array.length', [1, 2, 3])\n\n# An object.\nawait page.evaluate('object => object.foo', { 'foo': 'bar' })\n\n# A single handle.\nbutton = await page.evaluate_handle('button')\nawait page.evaluate('button => button.textContent', button)\n\n# Alternative notation using JSHandle.evaluate.\nawait button.evaluate('(button, from) => button.textContent.substring(from)', 5)\n\n# Object with multiple handles.\nbutton1 = await page.evaluate_handle('window.button1')\nbutton2 = await page.evaluate_handle('window.button2')\nawait page.evaluate(\"\"\"\n    o => o.button1.textContent + o.button2.textContent\"\"\",\n    { 'button1': button1, 'button2': button2 })\n\n# Object destructuring works. Note that property names must match\n# between the destructured object and the argument.\n# Also note the required parenthesis.\nawait page.evaluate(\"\"\"\n    ({ button1, button2 }) => button1.textContent + button2.textContent\"\"\",\n    { 'button1': button1, 'button2': button2 })\n\n# Array works as well. Arbitrary names can be used for destructuring.\n# Note the required parenthesis.\nawait page.evaluate(\"\"\"\n    ([b1, b2]) => b1.textContent + b2.textContent\"\"\",\n    [button1, button2])\n\n# Any mix of serializables and handles works.\nawait page.evaluate(\"\"\"\n    x => x.button1.textContent + x.list[0].textContent + String(x.foo)\"\"\",\n    { 'button1': button1, 'list': [button2], 'foo': None })\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Contexts with Sync Playwright (Python)\nDESCRIPTION: Provides the synchronous Python code using `playwright.sync_api` to launch a browser and create two separate, isolated `BrowserContext` instances (`user_context`, `admin_context`) via `browser.new_context()`. This facilitates testing multi-user interactions in synchronous Python scripts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    # create a chromium browser instance\n    chromium = playwright.chromium\n    browser = chromium.launch()\n\n    # create two isolated browser contexts\n    user_context = browser.new_context()\n    admin_context = browser.new_context()\n\n    # create pages and interact with contexts independently\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Event Listeners in Playwright (.NET/C#)\nDESCRIPTION: Demonstrates adding event handlers using the standard C# event pattern (`+=`) and removing them (`-=`) in Playwright for .NET. Handlers are attached to the `page.Request` and `page.RequestFinished` events. The `RequestFinished` handler is later detached using the stored delegate reference.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npage.Request += (_, request) => Console.WriteLine(\"Request sent: \" + request.Url);\nvoid listener(object sender, IRequest request)\n{\n    Console.WriteLine(\"Request finished: \" + request.Url);\n};\npage.RequestFinished += listener;\nawait page.GotoAsync(\"https://wikipedia.org\");\n\n// Remove previously added listener.\npage.RequestFinished -= listener;\nawait page.GotoAsync(\"https://www.openstreetmap.org/\");\n```\n```\n\n----------------------------------------\n\nTITLE: Device Emulation in Playwright\nDESCRIPTION: Examples demonstrating how to use device emulation for responsive testing across different browsers and devices using Playwright's device presets.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwright.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webkit, devices } = require('playwright');\nconst iPhone = devices['iPhone 6'];\n\n(async () => {\n  const browser = await webkit.launch();\n  const context = await browser.newContext({\n    ...iPhone\n  });\n  const page = await context.newPage();\n  await page.goto('http://example.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass PlaywrightExample\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        await using var browser = await playwright.Webkit.LaunchAsync();\n        await using var context = await browser.NewContextAsync(playwright.Devices[\"iPhone 6\"]);\n\n        var page = await context.NewPageAsync();\n        await page.GotoAsync(\"https://www.theverge.com\");\n        // other actions...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mapped Paths in Playwright TypeScript Tests\nDESCRIPTION: This TypeScript snippet demonstrates how to use mapped paths in a Playwright test file. It imports credentials from a custom path and uses them in a login test scenario.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport { username, password } from '@myhelper/credentials';\n\ntest('example', async ({ page }) => {\n  await page.getByLabel('User Name').fill(username);\n  await page.getByLabel('Password').fill(password);\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Merge-Reports CLI Usage\nDESCRIPTION: Example of using the merge-reports CLI with multiple reporters, showing how to combine different report types like HTML and GitHub in a single command.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright merge-reports --reporter=html,github ./blob-reports\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Options in Playwright Config\nDESCRIPTION: Sets additional launch options for the browser in the Playwright configuration file. This example demonstrates setting the slowMo option to slow down Playwright operations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    launchOptions: {\n      slowMo: 50,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Codegen in C#\nDESCRIPTION: This PowerShell command launches the Playwright code generator for a specified URL in a C# environment, storing interactions to construct tests. Requires Playwright setup in C#, with an optional URL to initiate testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen-intro.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/net8.0/playwright.ps1 codegen demo.playwright.dev/todomvc\n```\n\n----------------------------------------\n\nTITLE: Using waitForEvent to Respond to Electron Window Creation\nDESCRIPTION: Example showing how to wait for a window to be created in response to a user action, using the waitForEvent method to handle asynchronous events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electronapplication.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst windowPromise = electronApp.waitForEvent('window');\nawait mainWindow.click('button');\nconst window = await windowPromise;\n```\n\n----------------------------------------\n\nTITLE: Specifying Click Count for Playwright Mouse Actions\nDESCRIPTION: Defines the `clickCount` integer parameter for Playwright click actions, simulating multiple clicks (e.g., double-click). Defaults to 1. Corresponds to the `UIEvent.detail` property.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- `clickCount` <[int]>\n```\n\n----------------------------------------\n\nTITLE: Waiting for Load State After Button Click in Java\nDESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in Java. The method resolves after the 'load' event is fired.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_121\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.BUTTON).click(); // Click triggers navigation.\npage.waitForLoadState(); // The promise resolves after \"load\" event.\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Playwright Frame - Python\nDESCRIPTION: Provides Python examples for dispatching events on frame elements using Playwright. Supports both asynchronous and synchronous execution of event dispatch with configuration of event properties such as data transfer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nawait frame.dispatch_event(\"button#submit\", \"click\")\n```\n\nLANGUAGE: Python\nCODE:\n```\ndata_transfer = await frame.evaluate_handle(\"new DataTransfer()\")\nawait frame.dispatch_event(\"#source\", \"dragstart\", { \"dataTransfer\": data_transfer })\n```\n\nLANGUAGE: Python\nCODE:\n```\nframe.dispatch_event(\"button#submit\", \"click\")\n```\n\nLANGUAGE: Python\nCODE:\n```\ndata_transfer = frame.evaluate_handle(\"new DataTransfer()\")\nframe.dispatch_event(\"#source\", \"dragstart\", { \"dataTransfer\": data_transfer })\n```\n\n----------------------------------------\n\nTITLE: Using toEqual Method for Deep Equality Comparison\nDESCRIPTION: Demonstrates the use of 'toEqual' method for comparing contents of objects or arrays. It performs a deep equality check rather than comparing references.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = { prop: 1 };\nexpect(value).toEqual({ prop: 1 });\n```\n\n----------------------------------------\n\nTITLE: Recording Video with Browser Context (Java)\nDESCRIPTION: This code shows how to create a new browser context with video recording enabled in Java, specifying the directory where videos will be saved.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ncontext = browser.newContext(new Browser.NewContextOptions().setRecordVideoDir(Paths.get(\"videos/\")));\n// Make sure to close, so that videos are saved.\ncontext.close();\n```\n\n----------------------------------------\n\nTITLE: Automatic Scrolling with Element Interaction\nDESCRIPTION: Demonstrates Playwright's automatic scrolling behavior when interacting with elements. No explicit scroll commands needed for basic interactions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('button').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.BUTTON).click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"button\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Button).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Pressing an Uppercase Character using Shift in Playwright (Python Async)\nDESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in asynchronous Python. It shows two ways to achieve this using `page.keyboard.press`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait page.keyboard.press(\"Shift+KeyA\")\n# or\nawait page.keyboard.press(\"Shift+A\")\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Trace Recording on Test Failure with NUnit\nDESCRIPTION: Implements conditional trace recording that only saves traces when tests fail in NUnit. Includes configuration for screenshots, snapshots, and source capturing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [SetUp]\n    public async Task Setup()\n    {\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TearDown]\n    public async Task TearDown()\n    {\n        var failed = TestContext.CurrentContext.Result.Outcome == NUnit.Framework.Interfaces.ResultState.Error\n            || TestContext.CurrentContext.Result.Outcome == NUnit.Framework.Interfaces.ResultState.Failure;\n\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = failed ? Path.Combine(\n                TestContext.CurrentContext.WorkDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip\"\n            ) : null,\n        });\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        // ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Avoid Fragile Accessibility Snapshot Expectations in JavaScript\nDESCRIPTION: Illustrates capturing a less fragile snapshot of accessibility scan results by using violation fingerprints rather than the entire violations array.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Don't do this! This is fragile.\nexpect(accessibilityScanResults.violations).toMatchSnapshot();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This is less fragile than snapshotting the entire violations array.\nexpect(violationFingerprints(accessibilityScanResults)).toMatchSnapshot();\n\n// my-test-utils.js\nfunction violationFingerprints(accessibilityScanResults) {\n  const violationFingerprints = accessibilityScanResults.violations.map(violation => ({\n    rule: violation.id,\n    // These are CSS selectors which uniquely identify each element with\n    // a violation of the rule in question.\n    targets: violation.nodes.map(node => node.target),\n  }));\n\n  return JSON.stringify(violationFingerprints, null, 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Elements with Playwright Locator\nDESCRIPTION: Demonstrates how to count elements matching a locator using Playwright's count method. Returns the number of elements matching the specified locator.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = await page.getByRole('listitem').count();\n```\n\nLANGUAGE: java\nCODE:\n```\nint count = page.getByRole(AriaRole.LISTITEM).count();\n```\n\nLANGUAGE: python\nCODE:\n```\ncount = await page.get_by_role(\"listitem\").count()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nint count = await page.GetByRole(AriaRole.Listitem).CountAsync();\n```\n\n----------------------------------------\n\nTITLE: Dragging Elements with Locator.DragToAsync in C#\nDESCRIPTION: Shows how to drag a source element to a target element in C# using Playwright's DragToAsync method. Demonstrates basic usage and advanced positioning options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nvar source = Page.Locator(\"#source\");\nvar target = Page.Locator(\"#target\");\n\nawait source.DragToAsync(target);\n// or specify exact positions relative to the top-left corners of the elements:\nawait source.DragToAsync(target, new()\n{\n    SourcePosition = new() { X = 34, Y = 7 },\n    TargetPosition = new() { X = 10, Y = 20 },\n});\n```\n\n----------------------------------------\n\nTITLE: API Testing with Page.request in Playwright\nDESCRIPTION: Example showing how to perform API testing by making HTTP requests on behalf of a page using the page.request API, which allows testing server APIs within the browser context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ page }) => {\n  // Do a GET request on behalf of page\n  const response = await page.request.get('http://example.com/foo.json');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Passing arguments to waitForFunction in JavaScript\nDESCRIPTION: Shows how to pass a selector argument to the waitForFunction predicate in JavaScript. The function waits until an element matching the selector appears in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nconst selector = '.foo';\nawait page.waitForFunction(selector => !!document.querySelector(selector), selector);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins for Playwright Tests (Multiple Languages)\nDESCRIPTION: These Groovy scripts configure Jenkins pipelines to run Playwright tests using Docker agents for JavaScript, Python, Java, and C# projects. Each configuration uses the appropriate Playwright Docker image and runs the necessary build and test commands.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_34\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright:v%%VERSION%%-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'npm ci'\n            sh 'npx playwright test'\n         }\n      }\n   }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright/python:v%%VERSION%%-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'pip install -r requirements.txt'\n            sh 'pytest'\n         }\n      }\n   }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright/java:v%%VERSION%%-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'mvn -B install -D skipTests --no-transfer-progress'\n            sh 'mvn test'\n         }\n      }\n   }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'dotnet build'\n            sh 'dotnet test'\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Banner ARIA Snapshot using Playwright Java\nDESCRIPTION: This Java snippet demonstrates ARIA snapshot testing using Playwright's Java binding. It navigates to 'https://playwright.dev/', locates the 'banner' element, and uses `assertThat` with `matchesAriaSnapshot` to compare its accessibility tree against the provided YAML snapshot template.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.navigate(\"https://playwright.dev/\");\nassertThat(page.locator(\"banner\")).matchesAriaSnapshot(\"\"\"\n  - banner:\n    - heading /Playwright enables reliable end-to-end/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n\"\"\");\n```\n```\n\n----------------------------------------\n\nTITLE: Pressing an Uppercase Character using Shift in Playwright (C#)\nDESCRIPTION: Demonstrates pressing an uppercase 'A' using the Playwright Keyboard API in C#. It shows two ways to achieve this using `page.Keyboard.PressAsync`: combining 'Shift' with the specific key code 'KeyA', or combining 'Shift' with the character 'A'. Both methods simulate pressing Shift, then A, then releasing both.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait page.Keyboard.PressAsync(\"Shift+KeyA\");\n// or\nawait page.Keyboard.PressAsync(\"Shift+A\");\n```\n```\n\n----------------------------------------\n\nTITLE: Opening Playwright HTML Report via npx - Bash\nDESCRIPTION: Opens the Playwright-generated HTML report after test execution using npx. Shows interactive details on test outcomes, including pass/fail status, steps, and browser-specific results. Assumes tests have already been run. Useful for inspecting results visually post-test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-report\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events with C# in Playwright\nDESCRIPTION: Example of handling a browser dialog event in Playwright using C#. The code creates a Playwright instance, launches Chromium, sets up a dialog event handler that logs the message and dismisses the dialog, then triggers an alert.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass DialogExample\n{\n    public static async Task Run()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        await using var browser = await playwright.Chromium.LaunchAsync();\n        var page = await browser.NewPageAsync();\n\n        page.Dialog += async (_, dialog) =>\n        {\n            System.Console.WriteLine(dialog.Message);\n            await dialog.DismissAsync();\n        };\n\n        await page.EvaluateAsync(\"alert('1');\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Playwright in Non-Headless Mode with SlowMo\nDESCRIPTION: C# code demonstrating how to launch Firefox in non-headless mode with slowed execution for debugging purposes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var browser = await playwright.Firefox.LaunchAsync(new()\n{\n    Headless = false,\n    SlowMo = 50,\n});\n```\n\n----------------------------------------\n\nTITLE: Using ToHaveTitleAsync Assertion in C#\nDESCRIPTION: Example of using ToHaveTitleAsync assertion in C# to verify page title matches a string. This checks if the page title exactly matches 'Playwright'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page).ToHaveTitleAsync(\"Playwright\");\n```\n\n----------------------------------------\n\nTITLE: TestID Locator Parameter in Playwright\nDESCRIPTION: Defines the `testId` parameter for locating elements by test ID, supporting both string and regular expression values.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `testId` <[string]|[RegExp]>\n```\n\n----------------------------------------\n\nTITLE: Recording Traces with xUnit in Playwright\nDESCRIPTION: Example showing how to configure trace recording in an xUnit test class using Playwright. Implements custom test name tracking and trace recording in initialization and disposal methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-csharp.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\nusing Xunit.Sdk;\n\nnamespace PlaywrightTests;\n\n[WithTestName]\npublic class UnitTest1 : PageTest\n{\n    public override async Task InitializeAsync()\n    {\n        await base.InitializeAsync().ConfigureAwait(false);\n        await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    public override async Task DisposeAsync()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n               $\"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}.zip\"\n            )\n        });\n        await base.DisposeAsync().ConfigureAwait(false);\n    }\n\n    [Fact]\n    public async Task GetStartedLink()\n    {\n        // ...\n        await Page.GotoAsync(\"https://playwright.dev/dotnet/docs/intro\");\n    }\n}\n\npublic class WithTestNameAttribute : BeforeAfterTestAttribute\n{\n    public static string CurrentTestName = string.Empty;\n    public static string CurrentClassName = string.Empty;\n\n    public override void Before(MethodInfo methodInfo)\n    {\n        CurrentTestName = methodInfo.Name;\n        CurrentClassName = methodInfo.DeclaringType!.Name;\n    }\n\n    public override void After(MethodInfo methodInfo)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Playwright via npm - Bash\nDESCRIPTION: Updates Playwright test dependencies and browser binaries using npm. Installs the latest @playwright/test package (as a dev dependency) and fetches browser binaries with updated dependencies. Required for staying current with Playwright features/releases.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @playwright/test@latest\n# Also download new browser binaries and their dependencies:\nnpx playwright install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Vue Component Test Setup with Playwright\nDESCRIPTION: This example demonstrates setting up a component test for a Vue app using Playwright Test. It shows how to mount the App component and verify its content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport App from './App.vue';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(App);\n  await expect(component).toContainText('Learn Vue');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting isMobile via Context Options (Python Async)\nDESCRIPTION: This asynchronous Python snippet demonstrates setting the `isMobile` property when creating a new browser context using `playwright.async_api`. The `isMobile` parameter is passed directly to `browser.new_context`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python async\ncontext = await browser.new_context(\n  isMobile=false\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript with Locator.evaluate in JavaScript\nDESCRIPTION: Demonstrates how to execute JavaScript code on a matched element using Locator.evaluate in JavaScript. Includes passing arguments to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await page.getByTestId('myId').evaluate((element, [x, y]) => {\n  return element.textContent + ' ' + x * y;\n}, [7, 8]);\nconsole.log(result); // prints \"myId text 56\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Initialization Script via Path (Python Sync)\nDESCRIPTION: Uses Playwright's sync Python API to inject a script file for all newly created documents or frames. Ensures environment consistency before application scripts run. Path can be absolute or relative. Python Playwright (sync API) is needed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_26\n\nLANGUAGE: python sync\nCODE:\n```\n# in your playwright script, assuming the preload.js file is in same directory\npage.add_init_script(path=\"./preload.js\")\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Browser Launch with TypeScript\nDESCRIPTION: Sets up a basic browser instance and context with Playwright using TypeScript. It launches a browser, creates a context and page, navigates to a URL, and then closes resources afterward.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/file-to-upload-2.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from 'playwright';\n\nasync function run() {\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  await page.goto('https://example.com');\n  // Do something with the page\n  await browser.close();\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Overriding Request Headers with Playwright Route.resume - Java\nDESCRIPTION: Shows how to intercept and override headers for network requests in Playwright using Java. Requires the Playwright Java API. The handler receives a Route object, creates a copy of headers, adds foo and removes bar, and invokes route.resume with the new headers. Input: route object. Output: modified request sent to the network. Cannot override 'Cookie' header using this method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"**/*\", route -> {\n  // Override headers\n  Map<String, String> headers = new HashMap<>(route.request().headers());\n  headers.put(\"foo\", \"foo-value\"); // set \"foo\" header\n  headers.remove(\"bar\"); // remove \"bar\" header\n  route.resume(new Route.ResumeOptions().setHeaders(headers));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution Mode with Test.describe.configure in JavaScript\nDESCRIPTION: Demonstrates how to configure the execution mode for tests using test.describe.configure. This example shows how to run tests in parallel.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Run all the tests in the file concurrently using parallel workers.\ntest.describe.configure({ mode: 'parallel' });\ntest('runs in parallel 1', async ({ page }) => {});\ntest('runs in parallel 2', async ({ page }) => {});\n```\n\n----------------------------------------\n\nTITLE: Running Specific Playwright Test File\nDESCRIPTION: Execute a single test file by passing the file name to the playwright test command.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test landing-page.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Recording HAR Files in Browser Context (JavaScript)\nDESCRIPTION: Configures HAR (HTTP Archive) recording options for browser context in JavaScript. Controls content management, file path, mode, and URL filtering.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n- `recordHar` <[Object]>\n  - `omitContent` ?<[boolean]> Optional setting to control whether to omit request content from the HAR. Defaults to\n    `false`. Deprecated, use `content` policy instead.\n  - `content` ?<[HarContentPolicy]<\"omit\"|\"embed\"|\"attach\">> Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.\n  - `path` <[path]> Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.\n  - `mode` ?<[HarMode]<\"full\"|\"minimal\">> When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.\n  - `urlFilter` ?<[string]|[RegExp]> A glob or regex pattern to filter requests that are stored in the HAR. When a [`option: Browser.newContext.baseURL`] via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.\n```\n\n----------------------------------------\n\nTITLE: Recording HAR File in JavaScript\nDESCRIPTION: Example of recording network traffic to a HAR file using Playwright in JavaScript. Shows how to route requests through a HAR file with update option enabled.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntest('records or updates the HAR file', async ({ page }) => {\n  // Get the response from the HAR file\n  await page.routeFromHAR('./hars/fruit.har', {\n    url: '*/**/api/v1/fruits',\n    update: true,\n  });\n\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the fruit is visible\n  await expect(page.getByText('Strawberry')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Trace Files with Playwright CLI\nDESCRIPTION: Command line example showing how to open a recorded trace file using the Playwright CLI tool.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-csharp.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/net8.0/playwright.ps1 show-trace bin/Debug/net8.0/playwright-traces/PlaywrightTests.ExampleTest.GetStartedLink.zip\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchPage in Python (Sync)\nDESCRIPTION: Synchronous Python implementation of a SearchPage class for Playwright. It provides methods for page navigation and searching, demonstrating the page object model pattern with synchronous API in Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pom.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass SearchPage:\n    def __init__(self, page):\n        self.page = page\n        self.search_term_input = page.locator('[aria-label=\"Enter your search term\"]')\n\n    def navigate(self):\n        self.page.goto(\"https://bing.com\")\n\n    def search(self, text):\n        self.search_term_input.fill(text)\n        self.search_term_input.press(\"Enter\")\n```\n\n----------------------------------------\n\nTITLE: Returning Step Value in Playwright Test\nDESCRIPTION: Example of using test.step to return a value from a test step. This allows capturing and using the result of a step in subsequent test code.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should work', async ({ page }) => {\n  const pageTitle = await test.step('get title', async () => {\n    await page.goto('https://playwright.dev');\n    return await page.title();\n  });\n  console.log(pageTitle);\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests in Playwright\nDESCRIPTION: This example demonstrates various ways to skip tests in Playwright, including declaring skipped tests, conditionally skipping tests, and skipping multiple tests based on a condition.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.skip('never run', async ({ page }) => {\n  // ...\n});\n\ntest('Safari-only test', async ({ page, browserName }) => {\n  test.skip(browserName !== 'webkit', 'This feature is Safari-only');\n  // ...\n});\n\ntest.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');\n\ntest('Safari-only test 1', async ({ page }) => {\n  // ...\n});\ntest('Safari-only test 2', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events - Multiple Languages\nDESCRIPTION: Shows how to handle JavaScript dialogs (alert, prompt, confirm) in the browser context to prevent page freezing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.on('dialog', dialog => {\n  dialog.accept();\n});\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.onDialog(dialog -> {\n  dialog.accept();\n});\n```\n\nLANGUAGE: python\nCODE:\n```\ncontext.on(\"dialog\", lambda dialog: dialog.accept())\n```\n\nLANGUAGE: csharp\nCODE:\n```\nContext.Dialog += async (_, dialog) =>\n{\n    await dialog.AcceptAsync();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Test Options in JavaScript\nDESCRIPTION: This code defines a custom test option 'person' with a default value, which can be overridden in the configuration. It extends the base test object with this new option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting User Agent in Playwright Test\nDESCRIPTION: Configures a custom user agent for tests using the TestOptions.userAgent property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    userAgent: 'some custom ua',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Frame.wait_for_function Example in Python\nDESCRIPTION: This Python snippet demonstrates the asynchronous usage of Frame.wait_for_function. It launches a WebKit browser, creates a new page, sets a timeout to change a variable, and then waits for that variable to change using wait_for_function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = await webkit.launch()\n    page = await browser.new_page()\n    await page.evaluate(\"window.x = 0; setTimeout(() => { window.x = 100 }, 1000);\")\n    await page.main_frame.wait_for_function(\"() => window.x > 0\")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Custom Callback on Every Actionability Check with Locator Handler in Java\nDESCRIPTION: Java implementation of a locator handler with the body element that runs a custom JavaScript function before every actionability check. Uses the noWaitAfter option since the handler doesn't hide the body element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_87\n\nLANGUAGE: java\nCODE:\n```\n// Setup the handler.\npage.addLocatorHandler(page.locator(\"body\"), () -> {\n  page.evaluate(\"window.removeObstructionsForTestIfNeeded()\");\n}, new Page.AddLocatorHandlerOptions().setNoWaitAfter(true));\n\n// Write the test as usual.\npage.navigate(\"https://example.com\");\npage.getByRole(\"button\", Page.GetByRoleOptions().setName(\"Start here\")).click();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Options in Fixtures in JavaScript\nDESCRIPTION: This code demonstrates how to use a custom option 'person' within a fixture, overriding the default 'page' fixture to set up a chat room with the person's name before each test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n\n  // Override default \"page\" fixture.\n  page: async ({ page, person }, use) => {\n    await page.goto('/chat');\n    // We use \"person\" parameter as a \"name\" for the chat room.\n    await page.getByLabel('User Name').fill(person);\n    await page.getByText('Enter chat room').click();\n    // Each test will get a \"page\" that already has the person name.\n    await use(page);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Specific Test Function\nDESCRIPTION: Commands to debug a specific test function using Playwright Inspector across different shells.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=1 pytest -s -k test_get_started_link\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PWDEBUG=1\npytest -s -k test_get_started_link\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PWDEBUG=1\npytest -s -k test_get_started_link\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Scale Factor in Playwright Tests\nDESCRIPTION: Example showing how to set the device scale factor (pixel ratio) for testing high-DPI or Retina display scenarios, typically used together with viewport settings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    viewport: { width: 2560, height: 1440 },\n    deviceScaleFactor: 2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Browser Context\nDESCRIPTION: Defines the permissions option for browser contexts. This allows granting a list of permissions to all pages in the context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_59\n\nLANGUAGE: js\nCODE:\n```\n- `permissions` <[Array]<[string]>>\n\nA list of permissions to grant to all pages in this context. See\n[`method: BrowserContext.grantPermissions`] for more details. Defaults to none.\n```\n\n----------------------------------------\n\nTITLE: Parallelizing Tests in a Single File (JavaScript)\nDESCRIPTION: Configures a test suite to run tests in parallel within a single file using test.describe.configure.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'parallel' });\n\ntest('runs in parallel 1', async ({ page }) => { /* ... */ });\ntest('runs in parallel 2', async ({ page }) => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Using toBeUndefined Method for Undefined Checking\nDESCRIPTION: Shows how to use the 'toBeUndefined' method to check if a value is undefined.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = undefined;\nexpect(value).toBeUndefined();\n```\n\n----------------------------------------\n\nTITLE: Global Setup Test Implementation\nDESCRIPTION: Example of a global setup test file that initializes a database before test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as setup } from '@playwright/test';\n\nsetup('create new database', async ({ }) => {\n  console.log('creating new database...');\n  // Initialize the database\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Popup Window in Playwright (JavaScript)\nDESCRIPTION: Shows how to wait for a popup window event using `page.waitForEvent('popup')` in Playwright for JavaScript. The waiting is initiated before the action (`page.getByText(...).click()`) that triggers the popup. The resolved promise yields the `Page` object representing the popup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Start waiting for popup before clicking. Note no await.\nconst popupPromise = page.waitForEvent('popup');\nawait page.getByText('open the popup').click();\nconst popup = await popupPromise;\nawait popup.goto('https://wikipedia.org');\n```\n```\n\n----------------------------------------\n\nTITLE: Using nth and visible Selector Engines in C# Playwright\nDESCRIPTION: These snippets demonstrate the usage of the new nth and visible selector engines for more precise element selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nawait button.ClickAsync(\"button >> nth=0\");\nawait page.Locator(\"button\").First.ClickAsync();\n\nawait button.ClickAsync(\"button >> visible=true\");\n```\n\n----------------------------------------\n\nTITLE: Dispatching Dragstart Event with DataTransfer in Python (Async)\nDESCRIPTION: Illustrates dispatching a dragstart event with a DataTransfer object on an ElementHandle in Python using async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndata_transfer = await page.evaluate_handle(\"new DataTransfer()\")\nawait element_handle.dispatch_event(\"#source\", \"dragstart\", {\"dataTransfer\": data_transfer})\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple Elements' CSS Classes using LocatorAssertions in Multiple Languages\nDESCRIPTION: Examples of using toHaveClass/hasClass with arrays to verify that a list of elements have corresponding expected CSS classes. This is useful for testing collections of similar elements with varying states.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('list > .component');\nawait expect(locator).toHaveClass(['component', 'component selected', 'component']);\n```\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.locator(\"list > .component\")).hasClass(new String[] {\"component\", \"component selected\", \"component\"});\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import expect\n\nlocator = page.locator(\"list > .component\")\nawait expect(locator).to_have_class([\"component\", \"component selected\", \"component\"])\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import expect\n\nlocator = page.locator(\"list > .component\")\nexpect(locator).to_have_class([\"component\", \"component selected\", \"component\"])\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.Locator(\"list > .component\");\nawait Expect(locator).ToHaveClassAsync(new string[]{\"component\", \"component selected\", \"component\"});\n```\n\n----------------------------------------\n\nTITLE: Configuring Transpiler Build Settings in Playwright Test\nDESCRIPTION: Configuration for Playwright's transpiler to exclude specific files from transpilation using glob patterns.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  build: {\n    external: ['**/*bundle.js'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Selector Engine with Playwright in Python (Asynchronous)\nDESCRIPTION: This Python async example demonstrates how to set up a custom selector engine for tag-based queries by registering JavaScript code as a string with Playwright's async API. It requires the 'playwright.async_api' dependency, provides selector and locator usage, and counts elements matching the tag. Inputs are the JS engine code and the selector name; outputs are button element objects or their counts. Must be run within an asynchronous context using asyncio and async_playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\nfrom playwright.async_api import async_playwright, Playwright\\n\\nasync def run(playwright: Playwright):\\n    tag_selector = \"\"\"\\n      {\\n          // Returns the first element matching given selector in the root's subtree.\\n          query(root, selector) {\\n              return root.querySelector(selector);\\n          },\\n          // Returns all elements matching given selector in the root's subtree.\\n          queryAll(root, selector) {\\n              return Array.from(root.querySelectorAll(selector));\\n          }\\n      }\"\"\"\\n\\n    # Register the engine. Selectors will be prefixed with \\\"tag=\\\".\\n    await playwright.selectors.register(\\\"tag\\\", tag_selector)\\n    browser = await playwright.chromium.launch()\\n    page = await browser.new_page()\\n    await page.set_content('<div><button>Click me</button></div>')\\n\\n    # Use the selector prefixed with its name.\\n    button = await page.query_selector('tag=button')\\n    # Combine it with built-in locators.\\n    await page.locator('tag=div').get_by_text('Click me').click()\\n    # Can use it in any methods supporting selectors.\\n    button_count = await page.locator('tag=button').count()\\n    print(button_count)\\n    await browser.close()\\n\\nasync def main():\\n    async with async_playwright() as playwright:\\n        await run(playwright)\\n\\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Locator Handlers in Python\nDESCRIPTION: This code shows how to add and remove locator handlers in Playwright, which can be used to handle overlays or interstitials that may interrupt tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.get_by_text(\"This interstitial covers the button\")\npage.add_locator_handler(locator, lambda overlay: overlay.locator(\"#close\").click(), times=3, no_wait_after=True)\n# Run your tests that can be interrupted by the overlay.\n# ...\npage.remove_locator_handler(locator)\n```\n\n----------------------------------------\n\nTITLE: Await Response Completion (JavaScript)\nDESCRIPTION: The `Response.finished` method pauses the execution until the response has completely loaded. It returns `null` on completion, signifying no further data is expected. In JavaScript, this method can also return an error if something goes wrong.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function awaitFinish() {\\n  await response.finished();\\n  console.log('Response finished loading.');\\n}\n```\n\n----------------------------------------\n\nTITLE: Using selectOption in Playwright with Java\nDESCRIPTION: Shows how to select options in a <select> element using different selection methods in Java. Demonstrates single selection by value, single selection by label, and multiple selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_79\n\nLANGUAGE: java\nCODE:\n```\n// single selection matching the value or label\nelement.selectOption(\"blue\");\n// single selection matching the label\nelement.selectOption(new SelectOption().setLabel(\"Blue\"));\n// multiple selection for blue, red and second option\nelement.selectOption(new String[] {\"red\", \"green\", \"blue\"});\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL Navigation in JavaScript\nDESCRIPTION: This snippet shows how to use Frame.waitForURL to wait for navigation to a specific URL after clicking a link in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nawait frame.click('a.delayed-navigation'); // Clicking the link will indirectly cause a navigation\nawait frame.waitForURL('**/target.html');\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Setup and Teardown in Playwright Config\nDESCRIPTION: Shows how to define a project configuration with setup, teardown, and dependencies between projects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: /global.setup\\.ts/,\n      teardown: 'teardown',\n    },\n    {\n      name: 'teardown',\n      testMatch: /global.teardown\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Headers in Java\nDESCRIPTION: Shows how to modify request headers while falling back to the subsequent handler in Playwright using Java. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"**/*\", route -> {\n  // Override headers\n  Map<String, String> headers = new HashMap<>(route.request().headers());\n  headers.put(\"foo\", \"foo-value\"); // set \"foo\" header\n  headers.remove(\"bar\"); // remove \"bar\" header\n  route.fallback(new Route.ResumeOptions().setHeaders(headers));\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Video Size with Browser Context (Python)\nDESCRIPTION: These snippets demonstrate how to create a new browser context with video recording enabled in Python, specifying both the directory and the video size, using both async and sync syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(\n    record_video_dir=\"videos/\",\n    record_video_size={\"width\": 640, \"height\": 480}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context(\n    record_video_dir=\"videos/\",\n    record_video_size={\"width\": 640, \"height\": 480}\n)\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Class with Playwright Python\nDESCRIPTION: Example showing how to use the new toContainClass method to assert class names on elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexpect(page.get_by_role('listitem', name='Ship v1.52')).to_contain_class('done')\n```\n\n----------------------------------------\n\nTITLE: Creating New Test Project with .NET CLI\nDESCRIPTION: Commands to create a new test project using dotnet CLI for different test frameworks (NUnit, MSTest, xUnit)\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new nunit -n PlaywrightTests\ncd PlaywrightTests\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new mstest -n PlaywrightTests\ncd PlaywrightTests\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new xunit -n PlaywrightTests\ncd PlaywrightTests\n```\n\n----------------------------------------\n\nTITLE: Running WebView2 Test with Playwright in Python\nDESCRIPTION: This Python test demonstrates how to use the custom WebView2 test environment to run a simple test. It navigates to a webpage and checks for the presence of an element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import Page, expect\n\n\ndef test_webview2(page: Page):\n    page.goto(\"https://playwright.dev\")\n    get_started = page.get_by_text(\"Get Started\")\n    expect(get_started).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Declaration\nDESCRIPTION: Shows explicit type importing and declaration in TypeScript files\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet page: import('playwright').Page;\n```\n\n----------------------------------------\n\nTITLE: Hover and Click Using ElementHandle in Java\nDESCRIPTION: Illustrates the use of ElementHandle in Java to hover and click on a text element. This requires querying the DOM for the text and performing hover and click actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nElementHandle handle = page.querySelector(\"text=Submit\");\nhandle.hover();\nhandle.click();\n```\n\n----------------------------------------\n\nTITLE: Calculating Locator Bounding Box in Playwright Java\nDESCRIPTION: Uses Playwright for Java to get the bounding box of a 'button' role node and trigger a mouse click at its center. The bounding box is relative to the main frame's viewport. Handling is required for the null return value if the element is invisible.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nBoundingBox box = page.getByRole(AriaRole.BUTTON).boundingBox();\npage.mouse().click(box.x + box.width / 2, box.y + box.height / 2);\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Responses in JavaScript\nDESCRIPTION: This code snippet demonstrates how to intercept WebSocket connections and mock the entire communication in JavaScript. It responds to a 'request' message with a 'response'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.routeWebSocket('wss://example.com/ws', ws => {\n  ws.onMessage(message => {\n    if (message === 'request')\n      ws.send('response');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using PageAssertions to Verify URL Pattern in C#\nDESCRIPTION: Example of using Expect assertions in C# to verify URL pattern after clicking a sign-in button. Uses System.Text.RegularExpressions for pattern matching in the URL assertion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTests : PageTest\n{\n    [TestMethod]\n    public async Task NavigateToLoginPage()\n    {\n        await Page.GetByRole(AriaRole.Button, new() { Name = \"Sign In\" }).ClickAsync();\n        await Expect(Page).ToHaveURLAsync(new Regex(\".*/login\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Content on Label Elements\nDESCRIPTION: While label-to-control retargeting works for input operations, assertions like toHaveText will target the label itself. This example demonstrates asserting the text content of a label element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Fill the input by targeting the label.\nawait expect(page.locator('label')).toHaveText('Password');\n```\n\nLANGUAGE: java\nCODE:\n```\n// Fill the input by targeting the label.\nassertThat(page.locator(\"label\")).hasText(\"Password\");\n```\n\nLANGUAGE: python\nCODE:\n```\n# Fill the input by targeting the label.\nawait expect(page.locator(\"label\")).to_have_text(\"Password\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Fill the input by targeting the label.\nexpect(page.locator(\"label\")).to_have_text(\"Password\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Fill the input by targeting the label.\nawait Expect(Page.Locator(\"label\")).ToHaveTextAsync(\"Password\");\n```\n\n----------------------------------------\n\nTITLE: Asserting Specific Accessibility Violations Using Fingerprints in Java Playwright Tests\nDESCRIPTION: This Java snippet demonstrates how to test for specific, known accessibility violations using Playwright and Axe. It performs a scan using `AxeBuilder.analyze()`, converts the resulting violations into custom `ViolationFingerprint` record objects (containing rule ID and target selector), and then asserts that these generated fingerprints match an expected list using JUnit's `assertEquals`. This approach allows for precise tracking of expected violations without broadly excluding rules or elements. Requires Playwright, Axe core, and JUnit dependencies.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class HomepageTests {\n  @Test\n  shouldOnlyHaveAccessibilityViolationsMatchingKnownFingerprints() throws Exception {\n    page.navigate(\"https://your-site.com/\");\n\n    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();\n\n    List<ViolationFingerprint> violationFingerprints = fingerprintsFromScanResults(accessibilityScanResults);\n\n    assertEquals(Arrays.asList(\n      new ViolationFingerprint(\"aria-roles\", \"[span[role=\\\"invalid\\\"]]\"),\n      new ViolationFingerprint(\"color-contrast\", \"[li:nth-child(2) > span]\"),\n      new ViolationFingerprint(\"label\", \"[input]\")\n    ), violationFingerprints);\n  }\n\n  // You can make your \"fingerprint\" as specific as you like. This one considers a violation to be\n  // \"the same\" if it corresponds the same Axe rule on the same element.\n  //\n  // Using a record type makes it easy to compare fingerprints with assertEquals\n  public record ViolationFingerprint(String ruleId, String target) { }\n\n  public List<ViolationFingerprint> fingerprintsFromScanResults(AxeResults results) {\n    return results.getViolations().stream()\n      // Each violation refers to one rule and multiple \"nodes\" which violate it\n      .flatMap(violation -> violation.getNodes().stream()\n        .map(node -> new ViolationFingerprint(\n          violation.getId(),\n          // Each node contains a \"target\", which is a CSS selector that uniquely identifies it\n          // If the page involves iframes or shadow DOMs, it may be a chain of CSS selectors\n          node.getTarget().toString()\n        )))\n      .collect(Collectors.toList());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Request Routing in C#\nDESCRIPTION: Shows how to implement advanced request routing with header modification and resource type filtering.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n// Remove a header from all requests.\nawait page.RouteAsync(\"**/*\", async route =>\n{\n    var headers = route.Request.Headers;\n    headers.Remove(\"X-Secret\");\n    await route.ContinueAsync(new() { Headers = headers });\n});\n\n// Abort all images.\nawait page.RouteAsync(\"**/*\", async route =>\n{\n    if (route.Request.ResourceType == \"image\")\n    {\n        await route.AbortAsync();\n    }\n    else\n    {\n        await route.FallbackAsync();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Exceptions in Playwright (Python Sync)\nDESCRIPTION: This synchronous Python snippet shows how to listen for the 'weberror' event on a Playwright context. A lambda function is registered as the event handler, which prints the uncaught exception's message using `web_error.error`. The `page.goto` command is used to navigate to a page designed to throw an error, thereby demonstrating the error handling mechanism in a synchronous context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-weberror.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Log all uncaught errors to the terminal\ncontext.on(\"weberror\", lambda web_error: print(f\"uncaught exception: {web_error.error}\"))\n\n# Navigate to a page with an exception.\npage.goto(\"data:text/html,<script>throw new Error('test')</script>\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Nth Element in Playwright\nDESCRIPTION: Shows how to select the nth matching element using Playwright's nth method across different programming languages. Returns a locator to the n-th matching element (zero-based index).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nconst banana = await page.getByRole('listitem').nth(2);\n```\n\nLANGUAGE: python-async\nCODE:\n```\nbanana = await page.get_by_role(\"listitem\").nth(2)\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nbanana = page.get_by_role(\"listitem\").nth(2)\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator banana = page.getByRole(AriaRole.LISTITEM).nth(2);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar banana = await page.GetByRole(AriaRole.Listitem).Nth(2);\n```\n\n----------------------------------------\n\nTITLE: Catching TimeoutException in Playwright (.NET/C#)\nDESCRIPTION: This C# example uses the Playwright .NET library (`Microsoft.Playwright`) to asynchronously launch a Chromium browser and create a page. It demonstrates how to specify a 100ms timeout directly within the `ClickAsync` method call for the 'Example' selector and how to catch the standard .NET `TimeoutException` when the operation fails to complete within the allotted time.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\ntry\n{\n    await page.ClickAsync(\"text=Example\", new() { Timeout = 100 });\n}\ncatch (TimeoutException)\n{\n    Console.WriteLine(\"Timeout!\");\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Modifying WebSocket Messages in C#\nDESCRIPTION: This code snippet shows how to connect to the actual WebSocket server while intercepting and modifying messages in C#. It modifies 'request' messages to 'request2' and passes through other messages unmodified.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteWebSocketAsync(\"wss://example.com/ws\", ws => {\n  var server = ws.ConnectToServer();\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      server.Send(\"request2\");\n    else\n      server.Send(frame.Text);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in JavaScript\nDESCRIPTION: Shows how to serve static files as responses to specific routes using Playwright in JavaScript. This example demonstrates serving a JSON file for a specific endpoint.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.route('**/xhr_endpoint', route => route.fulfill({ path: 'mock_data.json' }));\n```\n\n----------------------------------------\n\nTITLE: Handling GET and POST Requests in C#\nDESCRIPTION: Shows how to set up separate route handlers for GET and POST requests using Playwright in C#. The handlers check the request method and either process the request or fall back to the default behavior.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n// Handle GET requests.\nawait page.RouteAsync(\"**/*\", route => {\n    if (route.Request.Method != \"GET\") {\n        await route.FallbackAsync();\n        return;\n    }\n    // Handling GET only.\n    // ...\n});\n\n// Handle POST requests.\nawait page.RouteAsync(\"**/*\", route => {\n    if (route.Request.Method != \"POST\") {\n        await route.FallbackAsync();\n        return;\n    }\n    // Handling POST only.\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Routing by HTTP Method (GET/POST) with Route.fallback - Python (Async)\nDESCRIPTION: Provides Playwright Python async handlers for GET/POST method-specific routing. Each function checks the route.request.method, falls back if not handled, and continues otherwise. Structured for concurrent request handling. Input: route object. Output: method-specific logic executed or fallback continues. Constraints: care needed to avoid unhandled requests if all handlers fallback.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Handle GET requests.\nasync def handle_get(route):\n    if route.request.method != \"GET\":\n        await route.fallback()\n        return\n  # Handling GET only.\n  # ...\n\n# Handle POST requests.\nasync def handle_post(route):\n    if route.request.method != \"POST\":\n        await route.fallback()\n        return\n  # Handling POST only.\n  # ...\n\nawait page.route(\"**/*\", handle_get)\nawait page.route(\"**/*\", handle_post)\n```\n\n----------------------------------------\n\nTITLE: Converting Locator to FrameLocator with contentFrame in JavaScript\nDESCRIPTION: Demonstrates how to convert a Locator object to a FrameLocator using the contentFrame method to interact with content inside an iframe in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.locator('iframe[name=\"embedded\"]');\n// ...\nconst frameLocator = locator.contentFrame();\nawait frameLocator.getByRole('button').click();\n```\n\n----------------------------------------\n\nTITLE: Using WaitForSelectorAsync across navigations in C#\nDESCRIPTION: This snippet demonstrates how to use the WaitForSelectorAsync method to wait for an image element across multiple page navigations in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_148\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System;\nusing System.Threading.Tasks;\n\nclass FrameExamples\n{\n  public static async Task Images()\n  {\n      using var playwright = await Playwright.CreateAsync();\n      await using var browser = await playwright.Chromium.LaunchAsync();\n      var page = await browser.NewPageAsync();\n\n      foreach (var currentUrl in new[] { \"https://www.google.com\", \"https://bbc.com\" })\n      {\n          await page.GotoAsync(currentUrl);\n          var element = await page.WaitForSelectorAsync(\"img\");\n          Console.WriteLine($\"Loaded image: {await element.GetAttributeAsync(\"src\")}\");\n      }\n\n      await browser.CloseAsync();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screenshot Masking Color in JavaScript\nDESCRIPTION: Shows how to use the maskColor option when taking screenshots to change the default color used for masking elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.goto('https://playwright.dev');\nawait expect(page).toHaveScreenshot({\n  mask: [page.locator('img')],\n  maskColor: '#00FF00', // green\n});\n```\n\n----------------------------------------\n\nTITLE: Using Locator.and Method for Combining Locators\nDESCRIPTION: Demonstrates how to use the Locator.and method to create a locator that matches both specified locators.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n```\n\n----------------------------------------\n\nTITLE: Asserting Error Throwing with toThrowError Alias in JavaScript\nDESCRIPTION: Provides an example of using `expect().toThrowError()`, which is an alias for `expect().toThrow()`. It asserts that the provided function throws an error when called. Like `toThrow`, it can optionally take an argument to match the error details.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrowError();\n```\n```\n\n----------------------------------------\n\nTITLE: Element Masking for Screenshots\nDESCRIPTION: Defines the `mask` option that allows specifying elements to be masked when taking screenshots. Masked elements are covered with a pink overlay box.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\n- `mask` <[Array]<[Locator]>>\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Storage State with IndexedDB\nDESCRIPTION: Example showing how to save and restore IndexedDB contents using BrowserContext.storageState.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Save storage state into the file. Make sure to include IndexedDB.\nawait context.StorageStateAsync(new()\n{\n    Path = \"../../../playwright/.auth/state.json\",\n    IndexedDB = true\n});\n\n// Create a new context with the saved storage state.\nvar context = await browser.NewContextAsync(new()\n{\n    StorageStatePath = \"../../../playwright/.auth/state.json\"\n});\n```\n\n----------------------------------------\n\nTITLE: Using SocksProxyAgent with TypeScript and HTTPS\nDESCRIPTION: Example showing how to create a SOCKS proxy agent and make HTTPS requests in TypeScript. Demonstrates configuring proxy credentials and making a request to jsonip.org.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { SocksProxyAgent } from 'socks-proxy-agent';\n\nconst info = {\n\thost: 'br41.nordvpn.com',\n\tuserId: 'your-name@gmail.com',\n\tpassword: 'abcdef12345124'\n};\nconst agent = new SocksProxyAgent(info);\n\nhttps.get('https://jsonip.org', { agent }, (res) => {\n\tconsole.log(res.headers);\n\tres.pipe(process.stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Permissions in Playwright Config\nDESCRIPTION: Configures browser permissions for notifications using Playwright Test configuration file. This allows the browser to show system notifications during test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Grants specified permissions to the browser context.\n    permissions: ['notifications'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload with FileChooser in C#\nDESCRIPTION: Shows how to wait for a file chooser, trigger it, and set a file for upload using Playwright in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-filechooser.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar fileChooser = await page.RunAndWaitForFileChooserAsync(async () =>\n{\n    await page.GetByText(\"Upload file\").ClickAsync();\n});\nawait fileChooser.SetFilesAsync(\"temp.txt\");\n```\n\n----------------------------------------\n\nTITLE: Using Regex for Text Matching in Playwright\nDESCRIPTION: Demonstrates how to use JavaScript-like regex for text matching in Playwright. This allows for more flexible text matching patterns.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('text=/Log\\\\s*in/i').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"text=/Log\\\\s*in/i\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"text=/Log\\s*in/i\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"text=/Log\\\\s*in/i\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating DataTransfer and Dispatching DragStart Event in Python (Async)\nDESCRIPTION: This snippet illustrates how to create a DataTransfer object and use it to dispatch a dragstart event in Python with async syntax. Note that DataTransfer can only be created in Chromium and Firefox.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndata_transfer = await page.evaluate_handle(\"new DataTransfer()\")\nawait page.dispatch_event(\"#source\", \"dragstart\", { \"dataTransfer\": data_transfer })\n```\n\n----------------------------------------\n\nTITLE: Triggering Select-All Keyboard Shortcut in Playwright (Python Async)\nDESCRIPTION: This asynchronous Python snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.keyboard.press` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait page.keyboard.press(\"ControlOrMeta+A\")\n```\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Debug Mode with Command Line (JavaScript)\nDESCRIPTION: Commands to run Playwright tests in debug mode using the command line. The --debug flag opens the inspector, runs browsers in headed mode, and sets the default timeout to 0.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test example.spec.ts:10 --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --project=chromium --debug\nnpx playwright test --project=\"Mobile Safari\" --debug\nnpx playwright test --project=\"Microsoft Edge\" --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test example.spec.ts:10 --project=webkit --debug\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events with JavaScript in Playwright\nDESCRIPTION: Example of handling a browser dialog event in Playwright using JavaScript. The code launches Chromium, sets up a dialog event listener that logs the message and dismisses the dialog, then triggers an alert via page evaluation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  page.on('dialog', async dialog => {\n    console.log(dialog.message());\n    await dialog.dismiss();\n  });\n  await page.evaluate(() => alert('1'));\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Custom Tag Name Selector in Playwright for Async Python\nDESCRIPTION: This Python async example demonstrates how to register and use a custom selector engine in Playwright to query elements by tag name. It details interactions with page elements using asynchronous methods to perform actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntag_selector = \"\"\"\n    // Must evaluate to a selector engine instance.\n    {\n      // Returns the first element matching given selector in the root's subtree.\n      query(root, selector) {\n        return root.querySelector(selector);\n      },\n\n      // Returns all elements matching given selector in the root's subtree.\n      queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n      }\n    }\"\"\"\n\n# register the engine. selectors will be prefixed with \"tag=\".\nawait playwright.selectors.register(\"tag\", tag_selector)\n\n# now we can use \"tag=\" selectors.\nbutton = page.locator(\"tag=button\")\nawait button.click()\n\n# we can combine it with built-in locators.\nawait page.locator(\"tag=div\").get_by_text(\"click me\").click()\n\n# we can use it in any methods supporting selectors.\nbutton_count = await page.locator(\"tag=button\").count()\n```\n\n----------------------------------------\n\nTITLE: Simulating Keyboard Input with Shift Modifier in Playwright (Python Async)\nDESCRIPTION: This asynchronous Python snippet demonstrates how to use the Playwright Keyboard API to simulate complex keyboard interactions. It types initial text, moves the cursor, holds the 'Shift' key down, moves the cursor again (selecting text), releases 'Shift', and presses 'Backspace' to delete the selected text. It utilizes the `page.keyboard` object and its asynchronous methods `type`, `press`, `down`, and `up`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait page.keyboard.type(\"Hello World!\")\nawait page.keyboard.press(\"ArrowLeft\")\nawait page.keyboard.down(\"Shift\")\nfor i in range(6):\n    await page.keyboard.press(\"ArrowLeft\")\nawait page.keyboard.up(\"Shift\")\nawait page.keyboard.press(\"Backspace\")\n# result text will end up saying \"Hello!\"\n```\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Playwright Locator\nDESCRIPTION: Shows how to programmatically dispatch events on elements using Playwright's dispatchEvent method, including basic events and complex events with custom initialization.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nawait locator.dispatchEvent('click');\n\nconst dataTransfer = await page.evaluateHandle(() => new DataTransfer());\nawait locator.dispatchEvent('dragstart', { dataTransfer });\n```\n\nLANGUAGE: java\nCODE:\n```\nlocator.dispatchEvent(\"click\");\n\nJSHandle dataTransfer = page.evaluateHandle(\"() => new DataTransfer()\");\nMap<String, Object> arg = new HashMap<>();\narg.put(\"dataTransfer\", dataTransfer);\nlocator.dispatchEvent(\"dragstart\", arg);\n```\n\nLANGUAGE: python\nCODE:\n```\nawait locator.dispatch_event(\"click\")\n\ndata_transfer = await page.evaluate_handle(\"new DataTransfer()\")\nawait locator.dispatch_event(\"#source\", \"dragstart\", {\"dataTransfer\": data_transfer})\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelectorAll in Python (Sync)\nDESCRIPTION: Example of using the eval_on_selector_all method in Python with synchronous calls to evaluate expressions on all elements matching a selector. This method finds all matching elements and passes them to the provided JavaScript expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_49\n\nLANGUAGE: python\nCODE:\n```\ndiv_counts = page.eval_on_selector_all(\"div\", \"(divs, min) => divs.length >= min\", 10)\n```\n\n----------------------------------------\n\nTITLE: Setting Form Fields with Files in C#\nDESCRIPTION: Shows how to use the Set method to add text and file fields to a FormData object in C#, including creating FilePayload objects with specific MIME types and file contents.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar multipart = Context.APIRequest.CreateFormData();\n// Only name and value are set.\nmultipart.Set(\"firstName\", \"John\");\n// Name, value, filename and Content-Type are set.\nmultipart.Set(\"profilePicture\", new FilePayload()\n{\n    Name = \"john.jpg\",\n    MimeType = \"image/jpeg\",\n    Buffer = File.ReadAllBytes(\"john.jpg\")\n});\nmultipart.Set(\"age\", 30);\nawait Page.APIRequest.PostAsync(\"https://localhost/submit\", new() { Multipart = multipart });\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in Java\nDESCRIPTION: Demonstrates how to serve static files as responses to specific routes using Playwright in Java. This example shows serving a JSON file for a specific endpoint.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_32\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"**/xhr_endpoint\", route -> route.fulfill(\n  new Route.FulfillOptions().setPath(Paths.get(\"mock_data.json\"))));\n```\n\n----------------------------------------\n\nTITLE: Aborting Network Requests in Python (Async)\nDESCRIPTION: Shows how to abort specific network requests in asynchronous Python. Examples include aborting image requests and conditionally aborting requests based on resource type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nawait page.route(\"**/*.{png,jpg,jpeg}\", lambda route: route.abort())\n\n# Abort based on the request type\nawait page.route(\"**/*\", lambda route: route.abort() if route.request.resource_type == \"image\"  else route.continue_())\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Playwright Tests (Python)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests with Python. It sets up the Python environment, installs dependencies, installs Playwright browsers, and runs the tests using pytest.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_23\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: UsePythonVersion@0\n  inputs:\n    versionSpec: '3.11'\n  displayName: 'Use Python'\n- script: |\n    python -m pip install --upgrade pip\n    pip install -r requirements.txt\n  displayName: 'Install dependencies'\n- script: playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: pytest\n  displayName: 'Run Playwright tests'\n```\n\n----------------------------------------\n\nTITLE: Running WebView2 Test with Playwright in JavaScript\nDESCRIPTION: This code demonstrates how to write a simple test for a WebView2 application using the custom test environment set up in JavaScript. It navigates to a webpage and checks for the presence of an element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from './webView2Test';\n\ntest('test WebView2', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  const getStarted = page.getByText('Get Started');\n  await expect(getStarted).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring and Creating Playwright Executable in CMake\nDESCRIPTION: Uses WebKit-specific CMake macros to declare and create the Playwright executable target with the previously defined sources and dependencies.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nWEBKIT_EXECUTABLE_DECLARE(Playwright)\nWEBKIT_EXECUTABLE(Playwright)\n```\n\n----------------------------------------\n\nTITLE: Using afterEach Hook with Title in Playwright Tests\nDESCRIPTION: Demonstrates how to create an afterEach hook with a descriptive title. This example checks if the test ran as expected by comparing the actual and expected status.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest.afterEach('Status check', async ({ page }) => {\n  if (test.info().status !== test.info().expectedStatus)\n    console.log(`Did not run as expected, ended up at ${page.url()}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating PDF with Screen Media Type - Python\nDESCRIPTION: Demonstrates how to generate a PDF with screen media type using Playwright in Python. Sets the media type to screen and saves the PDF to a file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_72\n\nLANGUAGE: python\nCODE:\n```\npage.emulate_media(media=\"screen\")\npage.pdf(path=\"page.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with Pip Bash\nDESCRIPTION: This snippet installs Playwright for Python environments using pip. It involves installing the Playwright dependencies necessary by executing `playwright install --with-deps`. This is essential to run Playwright tests within a CI environment efficiently.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install playwright\\nplaywright install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a Browser Context with Sync Playwright (Python)\nDESCRIPTION: Provides the synchronous Python code for launching a browser (`playwright.chromium.launch()`), creating an isolated `BrowserContext` (`browser.new_context()`), and obtaining a `Page` (`context.new_page()`) using the `playwright.sync_api`. This demonstrates manual context creation in a synchronous Python script.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbrowser = playwright.chromium.launch()\ncontext = browser.new_context()\npage = context.new_page()\n```\n\n----------------------------------------\n\nTITLE: Handling beforeunload Dialogs with Playwright (Python Sync)\nDESCRIPTION: Registers a synchronous handler for the 'dialog' event to manage `beforeunload` dialogs triggered by `page.close(run_before_unload=True)`. The handler function asserts the dialog type and then dismisses it.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python sync\ndef handle_dialog(dialog):\n    assert dialog.type == 'beforeunload'\n    dialog.dismiss()\n\npage.on('dialog', lambda: handle_dialog)\npage.close(run_before_unload=True)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificates in Java Playwright\nDESCRIPTION: Shows how to set up client-side TLS certificates for browser context authentication using Playwright's Browser.newContext method\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setClientCertificates(asList(new ClientCertificate(\"https://example.com\")\n          .setCertPath(Paths.get(\"client-certificates/cert.pem\"))\n          .setKeyPath(Paths.get(\"client-certificates/key.pem\")))));\n```\n\n----------------------------------------\n\nTITLE: Using a Custom AxeBuilder Fixture in Java Playwright Tests\nDESCRIPTION: This Java test class `HomepageTests` extends `AxeTestFixtures` to utilize the shared configuration. The test method `exampleUsingCustomFixture` calls the inherited `makeAxeBuilder()` fixture to get a pre-configured `AxeBuilder`. It then applies additional test-specific configurations (e.g., `include(\"#specific-element-under-test\")`) before running the accessibility analysis with `analyze()` and asserting the results (expecting no violations after shared exclusions and specific inclusions). Requires Playwright, Axe core, JUnit, and the `AxeTestFixtures` class.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class HomepageTests extends AxeTestFixtures {\n  @Test\n  void exampleUsingCustomFixture() throws Exception {\n    page.navigate(\"https://your-site.com/\");\n\n    AxeResults accessibilityScanResults = makeAxeBuilder()\n      // Automatically uses the shared AxeBuilder configuration,\n      // but supports additional test-specific configuration too\n      .include(\"#specific-element-under-test\")\n      .analyze();\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Last Element in Playwright\nDESCRIPTION: Demonstrates how to select the last matching element using Playwright's last method across different programming languages. Returns a locator to the last matching element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nconst banana = await page.getByRole('listitem').last();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nbanana = await page.get_by_role(\"listitem\").last\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nbanana = page.get_by_role(\"listitem\").last\n```\n\nLANGUAGE: java\nCODE:\n```\nLocator banana = page.getByRole(AriaRole.LISTITEM).last();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar banana = await page.GetByRole(AriaRole.Listitem).Last(1);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode via pnpm - Bash\nDESCRIPTION: Invokes Playwright's UI mode through pnpm, giving access to an enhanced interface for running tests interactively. Supports advanced features like watch mode and inspection. Useful for developers iterating on tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Custom Expect Messages in Playwright Tests\nDESCRIPTION: Demonstrates how to specify a custom error message for expect assertions in Playwright tests. This can provide more context when a test fails.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.locator('text=Name'), 'should be logged in').toBeVisible();\n```\n\n----------------------------------------\n\nTITLE: Evaluating Handles on Frame in JavaScript\nDESCRIPTION: Demonstrates how to use the evaluateHandle method to evaluate an expression and return a JSHandle for the window object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Handle for the window object\nconst aWindowHandle = await frame.evaluateHandle(() => Promise.resolve(window));\n```\n\n----------------------------------------\n\nTITLE: Calculating Locator Bounding Box in Playwright C#\nDESCRIPTION: Obtains the bounding box for a button and clicks its center using Playwright for C#. Coordinates are relative to the main content viewport, returns null if invisible.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nvar box = await page.GetByRole(AriaRole.Button).BoundingBoxAsync();\nawait page.Mouse.ClickAsync(box.X + box.Width / 2, box.Y + box.Height / 2);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Test with Specific Title\nDESCRIPTION: Execute a test with a specific title using the -g flag followed by the test title.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test -g \"add a todo item\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Routing by HTTP Method (GET/POST) with Route.fallback - JavaScript\nDESCRIPTION: Illustrates splitting request handlers in Playwright JavaScript based on HTTP method. Each handler checks route.request().method() and either falls back or processes the request. This allows modular request logic for GET vs POST or API vs static assets. Inputs: route object. Outputs: specific processing based on HTTP method. Limitations: must ensure fallback logic to prevent double-handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Handle GET requests.\nawait page.route('**/*', async route => {\n  if (route.request().method() !== 'GET') {\n    await route.fallback();\n    return;\n  }\n  // Handling GET only.\n  // ...\n});\n\n// Handle POST requests.\nawait page.route('**/*', async route => {\n  if (route.request().method() !== 'POST') {\n    await route.fallback();\n    return;\n  }\n  // Handling POST only.\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Trace in Python\nDESCRIPTION: Command to open and view a recorded trace file using Playwright CLI with Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nplaywright show-trace trace.zip\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Errors with Playwright Events (C#)\nDESCRIPTION: Uses Playwright's C# bindings to subscribe to the PageError event and log exceptions. A lambda callback logs uncaught exceptions to the console. Requires a Playwright page instance. No navigation is included. Outputs error strings for further reporting or diagnostics.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// Log all uncaught errors to the terminal\npage.PageError += (_, exception) =>\n{\n  Console.WriteLine(\"Uncaught exception: \" + exception);\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Request Headers with Playwright Route.continue_ - Python (Async)\nDESCRIPTION: Illustrates asynchronous header override in Playwright using Python. Requires Playwright's async API and a valid event loop. The route handler merges original headers, adds foo, removes bar, and calls await route.continue_ to send the modified request. Used with page.route helper. The 'Cookie' header is not overridable via this method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def handle(route, request):\n    # override headers\n    headers = {\n        **request.headers,\n        \"foo\": \"foo-value\", # set \"foo\" header\n        \"bar\": None # remove \"bar\" header\n    }\n    await route.continue_(headers=headers)\n\nawait page.route(\"**/*\", handle)\n```\n\n----------------------------------------\n\nTITLE: Using Aria Snapshots for Accessibility Testing in Playwright\nDESCRIPTION: This snippet demonstrates how to use the new toMatchAriaSnapshot assertion to verify page structure by comparing it to an expected accessibility tree represented as YAML.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.goto('https://playwright.dev');\nawait expect(page.locator('body')).toMatchAriaSnapshot(`\n  - banner:\n    - heading /Playwright enables reliable/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n  - main:\n    - img \"Browsers (Chromium, Firefox, WebKit)\"\n    - heading \"Any browser • Any platform • One API\"\n`);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter in Playwright Configuration\nDESCRIPTION: Demonstrates how to configure the 'html' reporter in the Playwright configuration file, setting the option to never open the report automatically.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { open: 'never' }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Popups with Event Listeners in Playwright\nDESCRIPTION: Examples of monitoring all popups in a page using event listeners, which is useful when the action triggering popups is unknown.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/pages.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Get all popups when they open\npage.on('popup', async popup => {\n  await popup.waitForLoadState();\n  console.log(await popup.title());\n});\n```\n\nLANGUAGE: java\nCODE:\n```\n// Get all popups when they open\npage.onPopup(popup -> {\n  popup.waitForLoadState();\n  System.out.println(popup.title());\n});\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get all popups when they open (async)\nasync def handle_popup(popup):\n    await popup.wait_for_load_state()\n    print(await popup.title())\n\npage.on(\"popup\", handle_popup)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get all popups when they open (sync)\ndef handle_popup(popup):\n    popup.wait_for_load_state()\n    print(popup.title())\n\npage.on(\"popup\", handle_popup)\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Get all popups when they open\npage.Popup += async  (_, popup) => {\n    await popup.WaitForLoadStateAsync();\n    Console.WriteLine(await page.TitleAsync());\n};\n```\n\n----------------------------------------\n\nTITLE: Programmatic HAR Recording in Java\nDESCRIPTION: Code to programmatically record network traffic to HAR file using browser context options with URL filtering\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setRecordHarPath(Paths.get(\"example.har\"))\n    .setRecordHarUrlFilter(\"**/api/**\"));\n\n// ... Perform actions ...\n\n// Close context to ensure HAR is saved to disk.\ncontext.close();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Browser API Mock in Playwright\nDESCRIPTION: Demonstrates how to create a basic mock for the browser's battery API using Page.addInitScript(). Sets up mock battery information with predefined values.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock-browser-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.addInitScript(() => {\n  const mockBattery = {\n    level: 0.75,\n    charging: true,\n    chargingTime: 1800,\n    dischargingTime: Infinity,\n    addEventListener: () => { }\n  };\n  // Override the method to always return mock battery info.\n  window.navigator.getBattery = async () => mockBattery;\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Accessibility Snapshot with Playwright in C#\nDESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `SnapshotAsync()`. Logs the JSON serialized snapshot to the console. Requires setup with Playwright and a page instance in C#. Returns a JsonElement representing the accessible node tree.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar accessibilitySnapshot = await page.Accessibility.SnapshotAsync();\nConsole.WriteLine(System.Text.Json.JsonSerializer.Serialize(accessibilitySnapshot));\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Locator Results Using Playwright Python (Async)\nDESCRIPTION: Illustrates Playwright's async Python syntax for accessing all matched 'listitem' nodes and clicking each one in sequence. `page` must be an async context, and Playwright for Python installed. Input is the role selector; output is the effect of clicked items. Dynamic page content during iteration may yield flaky results.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfor li in await page.get_by_role('listitem').all():\n  await li.click();\n```\n\n----------------------------------------\n\nTITLE: Interacting with GitHub Login Page in Playwright - C#\nDESCRIPTION: This C# snippet demonstrates how to automate interactions with the GitHub login page using Playwright. It includes navigating to the login page and filling in the username and password fields before clicking the sign-in button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar page = await context.NewPageAsync();\nawait page.GotoAsync(\"https://github.com/login\");\n// Interact with login form\nawait page.GetByLabel(\"Username or email address\").FillAsync(\"username\");\nawait page.GetByLabel(\"Password\").FillAsync(\"password\");\nawait page.GetByRole(AriaRole.Button, new() { Name = \"Sign in\" }).ClickAsync();\n// Continue with the test\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Usage Across Environments\nDESCRIPTION: Demonstrates an incorrect approach to accessing test environment variables in browser context. This example shows what NOT to do, as variables from the test script are not directly accessible in the browser.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = 'some data';\nconst result = await page.evaluate(() => {\n  // WRONG: there is no \"data\" in the web page.\n  window.myApp.use(data);\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nString data = \"some data\";\nObject result = page.evaluate(\"() => {\\n\" +\n  \"  // WRONG: there is no 'data' in the web page.\\n\" +\n  \"  window.myApp.use(data);\\n\" +\n  \"}\");\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = \"some data\"\nresult = await page.evaluate(\"\"\"() => {\n  // WRONG: there is no \"data\" in the web page.\n  window.myApp.use(data)\n}\"\"\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar data = \"some data\";\nvar result = await page.EvaluateAsync(@\"() => {\n  // WRONG: there is no 'data' in the web page.\n  window.myApp.use(data);\n}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Reporter in Playwright Config\nDESCRIPTION: Example of how to configure a custom reporter in the Playwright configuration file using defineConfig.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-reporter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['./my-awesome-reporter.ts', { customOption: 'some value' }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching a Screenshot to Test Results in Playwright\nDESCRIPTION: This snippet shows how to capture a screenshot and attach it to the test results using TestInfo.attach method, which makes the screenshot available in test reports.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }, testInfo) => {\n  await page.goto('https://playwright.dev');\n  const screenshot = await page.screenshot();\n  await testInfo.attach('screenshot', { body: screenshot, contentType: 'image/png' });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Message with Soft Assertions\nDESCRIPTION: Demonstrates how to apply a custom message to soft assertions, which allows tests to continue execution even when the assertion fails.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.soft(value, 'my soft assertion').toBe(56);\n```\n\n----------------------------------------\n\nTITLE: Simple HTML Structure for Snapshot Matching Example\nDESCRIPTION: This HTML snippet provides a basic example of an H1 heading element within the document structure. This simple DOM is used in subsequent code examples to demonstrate basic ARIA snapshot matching.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n```html\n<h1>title</h1>\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dialog Handling Causing Stall (Python Async)\nDESCRIPTION: Demonstrates incorrect usage where an asynchronous 'dialog' listener is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the asynchronous action that triggered the dialog because web dialogs are modal.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python async\npage.on(\"dialog\", lambda dialog: print(dialog.message))\nawait page.get_by_role(\"button\").click() # Will hang here\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL with Web Server Configuration\nDESCRIPTION: Configuration showing how to set up both web server and baseURL for simplified URL handling in tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: 'http://localhost:3000',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors on Frame in C#\nDESCRIPTION: Demonstrates how to use the EvalOnSelectorAllAsync method in C# to evaluate a selector on a frame and return a boolean result based on the number of matching elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar divsCount = await frame.EvalOnSelectorAllAsync<bool>(\"div\", \"(divs, min) => divs.length >= min\", 10);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Timing with Playwright in Python (Asynchronous)\nDESCRIPTION: Demonstrates asynchronous usage of Playwright to listen for a finished request, navigate to a page, capture the request object, and print its timing information. Requires Playwright installed, an async-capable environment, and a page object. Uses \"expect_event\" context manager and \"await\" for async flow. The timing data is accessed after the request completes. Limitations: Only works in async Python contexts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync with page.expect_event(\\\"requestfinished\\\") as request_info:\\n    await page.goto(\\\"http://example.com\\\")\\nrequest = await request_info.value\\nprint(request.timing)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Selector Engine with Playwright in Python (Synchronous)\nDESCRIPTION: This Python sync Playwright snippet shows registration of a custom selector engine for tag-based selection, utilizing the synchronous API with the Playwright context manager. It depends on 'playwright.sync_api', and demonstrates usage for element querying and combination with built-in locators. Inputs are the engine's JavaScript code and engine name; outputs include button locators and their counts. Code must be run inside a sync_playwright context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\\n\\ndef run(playwright: Playwright):\\n    tag_selector = \"\"\"\\n      {\\n          // Returns the first element matching given selector in the root's subtree.\\n          query(root, selector) {\\n              return root.querySelector(selector);\\n          },\\n          // Returns all elements matching given selector in the root's subtree.\\n          queryAll(root, selector) {\\n              return Array.from(root.querySelectorAll(selector));\\n          }\\n      }\"\"\"\\n\\n    # Register the engine. Selectors will be prefixed with \\\"tag=\\\".\\n    playwright.selectors.register(\\\"tag\\\", tag_selector)\\n    browser = playwright.chromium.launch()\\n    page = browser.new_page()\\n    page.set_content('<div><button>Click me</button></div>')\\n\\n    # Use the selector prefixed with its name.\\n    button = page.locator('tag=button')\\n    # Combine it with built-in locators.\\n    page.locator('tag=div').get_by_text('Click me').click()\\n    # Can use it in any methods supporting selectors.\\n    button_count = page.locator('tag=button').count()\\n    print(button_count)\\n    browser.close()\\n\\nwith sync_playwright() as playwright:\\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors on Frame in JavaScript\nDESCRIPTION: Demonstrates how to use the evalOnSelectorAll method to evaluate a selector on a frame and return a boolean result based on the number of matching elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst divsCounts = await frame.$$eval('div', (divs, min) => divs.length >= min, 10);\n```\n\n----------------------------------------\n\nTITLE: Manual Time Control with Playwright in C#\nDESCRIPTION: Demonstrates manual time control in C# using Playwright's Clock API. This example initializes a clock with a specific date and timezone, pauses time flow, and manually advances time while verifying the UI updates correctly.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n// Initialize clock with a specific time, let the page load naturally.\nawait Page.Clock.InstallAsync(new()\n{\n  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0, DateTimeKind.Pst)\n});\nawait page.GotoAsync(\"http://localhost:3333\");\nvar locator = page.GetByTestId(\"current-time\");\n\n// Pause the time flow, stop the timers, you now have manual control\n// over the page time.\nawait Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));\nawait Expect(locator).ToHaveTextAsync(\"2/2/2024, 10:00:00 AM\");\n\n// Tick through time manually, firing all timers in the process.\n// In this case, time will be updated in the screen 2 times.\nawait Page.Clock.RunForAsync(2000);\nawait Expect(locator).ToHaveTextAsync(\"2/2/2024, 10:00:02 AM\");\n```\n\n----------------------------------------\n\nTITLE: Creating Fixture Options with TypeScript in Playwright Test\nDESCRIPTION: Example showing how to create type-safe configuration options for fixtures using TypeScript. This defines a 'defaultItem' option that can be configured in the project configuration and used by the todoPage fixture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\n\n// Declare your options to type-check your configuration.\nexport type MyOptions = {\n  defaultItem: string;\n};\ntype MyFixtures = {\n  todoPage: TodoPage;\n};\n\n// Specify both option and fixture types.\nexport const test = base.extend<MyOptions & MyFixtures>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  defaultItem: ['Something nice', { option: true }],\n\n  // Our \"todoPage\" fixture depends on the option.\n  todoPage: async ({ page, defaultItem }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo(defaultItem);\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Custom Tag Name Selector in Playwright for Sync Python\nDESCRIPTION: This Python synchronous example illustrates how to register and employ a custom selector engine with Playwright to select elements based on tag names. It involves selector engine registration and element querying with Playwright’s API synchronously.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntag_selector = \"\"\"\n    // Must evaluate to a selector engine instance.\n    {\n      // Returns the first element matching given selector in the root's subtree.\n      query(root, selector) {\n        return root.querySelector(selector);\n      },\n\n      // Returns all elements matching given selector in the root's subtree.\n      queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n      }\n    }\"\"\"\n\n# register the engine. selectors will be prefixed with \"tag=\".\nplaywright.selectors.register(\"tag\", tag_selector)\n\n# now we can use \"tag=\" selectors.\nbutton = page.locator(\"tag=button\")\nbutton.click()\n\n# we can combine it with built-in locators.\npage.locator(\"tag=div\").get_by_text(\"click me\").click()\n\n# we can use it in any methods supporting selectors.\nbutton_count = page.locator(\"tag=button\").count()\n```\n\n----------------------------------------\n\nTITLE: Hover and Click on Locator Object in JavaScript\nDESCRIPTION: Illustrates the use of a locator to hover and click a text element in JavaScript. Each action performs a fresh DOM query to ensure it targets the correct element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst locator = page.getByText('Submit');\n// ...\nawait locator.hover();\nawait locator.click();\n```\n\n----------------------------------------\n\nTITLE: Inserting Text with Keyboard.insert_text in Playwright (Python Async)\nDESCRIPTION: Demonstrates using `page.keyboard.insert_text` in asynchronous Python to dispatch an `input` event with the specified text ('嗨'). This method bypasses `keydown`, `keyup`, and `keypress` events and is useful for directly inserting text, including non-ASCII characters. Modifier keys do not affect this method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait page.keyboard.insert_text(\"嗨\")\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Requests in Java\nDESCRIPTION: Shows how to modify outgoing network requests in Java. Examples include deleting headers from requests and changing the HTTP method to POST.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// Delete header\npage.route(\"**/*\", route -> {\n  Map<String, String> headers = new HashMap<>(route.request().headers());\n  headers.remove(\"X-Secret\");\n    route.resume(new Route.ResumeOptions().setHeaders(headers));\n});\n\n// Continue requests as POST.\npage.route(\"**/*\", route -> route.resume(new Route.ResumeOptions().setMethod(\"POST\")));\n```\n\n----------------------------------------\n\nTITLE: WebSocket Routing Example\nDESCRIPTION: Shows how to intercept and mock WebSocket connections using the new RouteWebSocket method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteWebSocketAsync(\"/ws\", ws => {\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      ws.Send(\"response\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Locator Bounding Box in Playwright Python (Sync)\nDESCRIPTION: Shows the synchronous Playwright Python call to get a bounding box and click its center for a 'button' element. Output is interaction and the box dictionary or None.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nbox = page.get_by_role(\"button\").bounding_box()\npage.mouse.click(box[\"x\"] + box[\"width\"] / 2, box[\"y\"] + box[\"height\"] / 2)\n```\n\n----------------------------------------\n\nTITLE: Converting Locator to FrameLocator with content_frame in Python (Sync)\nDESCRIPTION: Shows how to convert a Locator object to a FrameLocator in Python sync mode using the content_frame property to interact with elements inside an iframe.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\"iframe[name=\\\"embedded\\\"]\")\n# ...\nframe_locator = locator.content_frame\nframe_locator.get_by_role(\"button\").click()\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators by Text and Clicking Button using Playwright\nDESCRIPTION: This code demonstrates how to filter locators by text and click a specific button using Playwright in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'Product 2' })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.LISTITEM)\n    .filter(new Locator.FilterOptions().setHasText(\"Product 2\"))\n    .getByRole(AriaRole.BUTTON,\n               new Page.GetByRoleOptions().setName(\"Add to cart\"))\n    .click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"listitem\").filter(has_text=\"Product 2\").get_by_role(\n    \"button\", name=\"Add to cart\"\n).click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page\n    .GetByRole(AriaRole.Listitem)\n    .Filter(new() { HasText = \"Product 2\" })\n    .GetByRole(AriaRole.Button, new() { Name = \"Add to cart\" })\n    .ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Negating Locator Assertions with '.Not' in C#\nDESCRIPTION: Example of using the `.Not` property with Playwright MSTest assertions (`Expect`) in C#. This code asynchronously asserts that the provided `locator` does *not* contain the text \"error\".\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait Expect(locator).Not.ToContainTextAsync(\"error\");\n```\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Specific Keywords\nDESCRIPTION: Execute tests with specific keywords in their file names by passing those keywords to the playwright test command.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test landing login\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Browser Channel\nDESCRIPTION: Example of running tests with a specific browser channel like Chrome or Edge from the command line.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest --browser-channel chrome\n```\n\n----------------------------------------\n\nTITLE: Blocking WebSocket Messages in Both Directions with Playwright in Python (Asynchronous)\nDESCRIPTION: An asynchronous approach using Playwright in Python to block specific messages between client and server over WebSocket. Requires asyncio setup and WebSocket configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef ws_message_handler(server: WebSocketRoute, message: Union[str, bytes]):\n  if message != \"blocked-from-the-page\":\n    server.send(message)\n\ndef server_message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message != \"blocked-from-the-server\":\n    ws.send(message)\n\ndef handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: ws_message_handler(server, message))\n  server.on_message(lambda message: server_message_handler(ws, message))\n\nawait page.route_web_socket(\"/ws\", handler)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Single Element Resolution with Playwright Input Strict Mode\nDESCRIPTION: Defines the `strict` boolean option for Playwright input actions. When set to true, it mandates that the provided selector must resolve to exactly one element. If the selector matches multiple elements, an exception is thrown.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- `strict` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Simulating Text Input using Keyboard.PressAsync in Playwright (C#)\nDESCRIPTION: This C# snippet demonstrates inserting text ('嗨') using `page.Keyboard.PressAsync`. Although presented in the context of `insertText`, `PressAsync` typically simulates full key press events (`keydown`, `keypress`/`input`, `keyup`). It can be used for inserting characters, including non-ASCII ones.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait page.Keyboard.PressAsync(\"嗨\");\n```\n```\n\n----------------------------------------\n\nTITLE: Fast Forwarding and Pausing Time - Playwright Python Sync\nDESCRIPTION: Exploits Playwright's synchronous Python API to manage the virtual clock, including pausing, fast forwarding, and asserting changes in the UI. The snippet is meant for synchronous test environments and expects datetime and a browser page. Dependencies are Playwright sync Python bindings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Initialize clock with some time before the test time and let the page load\n# naturally. `Date.now` will progress as the timers fire.\npage.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))\npage.goto(\"http://localhost:3333\")\n\n# Pretend that the user closed the laptop lid and opened it again at 10am.\n# Pause the time once reached that point.\npage.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))\n\n# Assert the page state.\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:00:00 AM\")\n\n# Close the laptop lid again and open it at 10:30am.\npage.clock.fast_forward(\"30:00\")\nexpect(page.get_by_test_id(\"current-time\")).to_have_text(\"2/2/2024, 10:30:00 AM\")\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Trace Recording (C#)\nDESCRIPTION: Demonstrates recording a Playwright trace in C#. It involves creating a Playwright instance, launching a browser, creating a context, starting tracing asynchronously with specified options (screenshots, snapshots), performing page navigation, and stopping the trace asynchronously, saving it to 'trace.zip'. Requires `async/await` and using declarations for resource management.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Chromium.LaunchAsync();\nawait using var context = await browser.NewContextAsync();\nawait context.Tracing.StartAsync(new()\n{\n  Screenshots = true,\n  Snapshots = true\n});\nvar page = await context.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev\");\nawait context.Tracing.StopAsync(new()\n{\n  Path = \"trace.zip\"\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Reporter Output Folder\nDESCRIPTION: Shows how to customize the output folder for the HTML reporter in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { outputFolder: 'my-report' }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage State in APIRequestContext (JavaScript/Python/TypeScript)\nDESCRIPTION: Returns the current storage state for an API request context, including cookies and localStorage. This method returns the state as an object with cookies and origins properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n## async method: APIRequestContext.storageState\n* since: v1.16\n- returns: <[Object]>\n  - `cookies` <[Array]<[Object]>>\n    - `name` <[string]>\n    - `value` <[string]>\n    - `domain` <[string]>\n    - `path` <[string]>\n    - `expires` <[float]> Unix time in seconds.\n    - `httpOnly` <[boolean]>\n    - `secure` <[boolean]>\n    - `sameSite` <[SameSiteAttribute]<\"Strict\"|\"Lax\"|\"None\">>\n  - `origins` <[Array]<[Object]>>\n    - `origin` <[string]>\n    - `localStorage` <[Array]<[Object]>>\n      - `name` <[string]>\n      - `value` <[string]>\n\nReturns storage state for this request context, contains current cookies and local storage snapshot if it was passed to the constructor.\n```\n\n----------------------------------------\n\nTITLE: Converting Between Locator and FrameLocator in Python\nDESCRIPTION: These examples show how to convert between Locator and FrameLocator objects using the new contentFrame and owner methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\"iframe[name='embedded']\")\n# ...\nframe_locator = locator.content_frame\nframe_locator.getByRole(\"button\").click()\n\nframe_locator = page.frame_locator(\"iframe[name='embedded']\")\n# ...\nlocator = frame_locator.owner\nexpect(locator).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Inserting Text with Keyboard.insert_text in Playwright (Python Sync)\nDESCRIPTION: Demonstrates using `page.keyboard.insert_text` in synchronous Python to dispatch an `input` event with the specified text ('嗨'). This method bypasses `keydown`, `keyup`, and `keypress` events and is useful for directly inserting text, including non-ASCII characters. Modifier keys do not affect this method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.keyboard.insert_text(\"嗨\")\n```\n```\n\n----------------------------------------\n\nTITLE: Using Page.evaluate in JavaScript\nDESCRIPTION: Examples of using the evaluate method in JavaScript to execute JavaScript expressions in the page context. This method can accept arguments, return promises, and work with strings or functions expressions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await page.evaluate(([x, y]) => {\n  return Promise.resolve(x * y);\n}, [7, 8]);\nconsole.log(result); // prints \"56\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(await page.evaluate('1 + 2')); // prints \"3\"\nconst x = 10;\nconsole.log(await page.evaluate(`1 + ${x}`)); // prints \"11\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst bodyHandle = await page.evaluate('document.body');\nconst html = await page.evaluate<string, HTMLElement>(([body, suffix]) =>\n  body.innerHTML + suffix, [bodyHandle, 'hello']\n);\nawait bodyHandle.dispose();\n```\n\n----------------------------------------\n\nTITLE: Running NUnit Tests in Parallel Using CLI\nDESCRIPTION: Command to configure the number of parallel test workers for NUnit test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -- NUnit.NumberOfTestWorkers=5\n```\n\n----------------------------------------\n\nTITLE: Routing WebSocket Connections in Java\nDESCRIPTION: Example of routing WebSocket connections using Page.routeWebSocket method in Java. It shows how to intercept and respond to specific WebSocket messages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_97\n\nLANGUAGE: java\nCODE:\n```\npage.routeWebSocket(\"/ws\", ws -> {\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      ws.send(\"response\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Headers in Python (Sync)\nDESCRIPTION: Shows how to modify request headers while falling back to the subsequent handler in Playwright using Python with synchronous syntax. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef handle(route, request):\n    # override headers\n    headers = {\n        **request.headers,\n        \"foo\": \"foo-value\", # set \"foo\" header\n        \"bar\": None # remove \"bar\" header\n    }\n    route.fallback(headers=headers)\n\npage.route(\"**/*\", handle)\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using ElementHandle (Stale Potential) in Java\nDESCRIPTION: Shows finding an element using `page.querySelector` to get an [ElementHandle] and performing actions (hover, click) in Java. This method can lead to errors if the element becomes stale due to page updates.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n```java\nElementHandle handle = page.querySelector(\"text=Submit\");\nhandle.hover();\nhandle.click();\n```\n```\n\n----------------------------------------\n\nTITLE: Viewing Playwright HTML Report Locally (JavaScript)\nDESCRIPTION: This Bash command utilizes the Playwright CLI to serve a previously generated HTML report. It requires Node.js and Playwright to be installed. Execute this command in your terminal, replacing `name-of-my-extracted-playwright-report` with the actual path to the folder containing the extracted report files downloaded from CI artifacts. It starts a local web server, allowing you to view the interactive report in your browser.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-report name-of-my-extracted-playwright-report\n\n```\n\n----------------------------------------\n\nTITLE: Passing arguments to WaitForFunctionAsync in C#\nDESCRIPTION: Shows how to pass a selector argument to the WaitForFunctionAsync predicate in C#. The function waits until an element matching the selector appears in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_119\n\nLANGUAGE: csharp\nCODE:\n```\nvar selector = \".foo\";\nawait page.WaitForFunctionAsync(\"selector => !!document.querySelector(selector)\", selector);\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelectorAll in C#\nDESCRIPTION: Example of using the EvalOnSelectorAllAsync method in C# to evaluate expressions on all elements matching a selector. This method finds all matching elements and passes them to the provided JavaScript expression, returning the expression's typed result.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\nvar divsCount = await page.EvalOnSelectorAllAsync<bool>(\"div\", \"(divs, min) => divs.length >= min\", 10);\n```\n\n----------------------------------------\n\nTITLE: Manual File Payload Upload in Java\nDESCRIPTION: Shows how to manually construct and upload a file payload using FilePayload class.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-requestoptions.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nFilePayload filePayload = new FilePayload(\"members.csv\", \"text/csv\",\n  \"Alice, 33\\nJohn, 35\\n\".getBytes(StandardCharsets.UTF_8));\nAPIResponse response = context.request().post(\"https://example.com/upload_members\",\n  RequestOptions.create().setMultipart(FormData.create().set(\"membersList\", filePayload)));\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with HTTPS Proxy (Python)\nDESCRIPTION: Commands to install Playwright browsers through an HTTPS proxy for Python implementations. Includes examples for bash, batch, and powershell environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npip install playwright\nHTTPS_PROXY=https://192.0.2.1 playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset HTTPS_PROXY=https://192.0.2.1\npip install playwright\nplaywright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\npip install playwright\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Intercepting WebSocket Messages with Playwright in Python (Synchronous)\nDESCRIPTION: Synchronously intercept and modify certain WebSocket messages before they are handled by a server, using Playwright for Python. Requires WebSocket server setup and Playwright configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(server: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    server.send(\"request2\")\n  else:\n    server.send(message)\n\ndef handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: message_handler(server, message))\n\npage.route_web_socket(\"/ws\", handler)\n```\n\n----------------------------------------\n\nTITLE: Handling beforeunload Dialogs with Playwright (C#)\nDESCRIPTION: Registers an asynchronous event handler for `Page.Dialog` to manage `beforeunload` dialogs triggered by `Page.CloseAsync(new() { RunBeforeUnload = true })`. The handler asserts the dialog type and then dismisses it using `dialog.DismissAsync()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nPage.Dialog += async (_, dialog) =>\n{\n    Assert.AreEqual(\"beforeunload\", dialog.Type);\n    await dialog.DismissAsync();\n};\nawait Page.CloseAsync(new() { RunBeforeUnload = true });\n```\n```\n\n----------------------------------------\n\nTITLE: Intercepting WebSocket Messages with Playwright in Python (Asynchronous)\nDESCRIPTION: An asynchronous setup using Playwright to intercept and modify messages before they're relayed to a WebSocket server. Python environment setup with Playwright is necessary.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(server: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    server.send(\"request2\")\n  else:\n    server.send(message)\n\ndef handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: message_handler(server, message))\n\nawait page.route_web_socket(\"/ws\", handler)\n```\n\n----------------------------------------\n\nTITLE: Clicking Anchor Element with ElementHandle in JavaScript\nDESCRIPTION: Demonstrates how to click on an anchor ('a') DOM element using ElementHandle in JavaScript. Requires a Playwright Page instance. The snippet waits for a DOM element matching the 'a' selector then clicks it.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst hrefElement = await page.$('a');\nawait hrefElement.click();\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors on Frame in Python (Sync)\nDESCRIPTION: Shows the synchronous usage of eval_on_selector_all method in Python to evaluate a selector on a frame and return a result based on the number of matching elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndivs_counts = frame.eval_on_selector_all(\"div\", \"(divs, min) => divs.length >= min\", 10)\n```\n\n----------------------------------------\n\nTITLE: Overriding Math.random in Page Initialization Script (JavaScript - Browser Context)\nDESCRIPTION: Demonstrates a preload script (`preload.js`) that overrides Math.random to always return 42. The script is meant to be injected into all new pages/frames via Playwright's addInitScript. Raw script for use with addInitScript in supported languages. No dependencies besides Node.js if run standalone.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_21\n\nLANGUAGE: js browser\nCODE:\n```\n// preload.js\nMath.random = () => 42;\n```\n\n----------------------------------------\n\nTITLE: Matching Strings Against Patterns with expect.stringMatching in JavaScript\nDESCRIPTION: Demonstrates `expect.stringMatching(expectedPattern)` used inside `expect().toEqual()` in Playwright. This matcher asserts that the received string matches the provided regular expression or string pattern. It allows for more complex string validation than simple substring checks.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexpect('123ms').toEqual(expect.stringMatching(/\\d+m?s/));\n\n// Inside another matcher.\nexpect({\n  status: 'passed',\n  time: '123ms',\n}).toEqual({\n  status: expect.stringMatching(/passed|failed/),\n  time: expect.stringMatching(/\\d+m?s/),\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Messages with Playwright in Python (Asynchronous)\nDESCRIPTION: Implements a WebSocket route to mock responses asynchronously using Playwright's async API for Python. Requires asyncio setup and Playwright for Python. A page instance is needed to route WebSockets.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\nawait page.route_web_socket(\"wss://example.com/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n----------------------------------------\n\nTITLE: Dragging and Dropping Elements in Playwright\nDESCRIPTION: Demonstrates how to use the dragAndDrop method to move elements on a page. It shows examples of basic usage and specifying exact positions for source and target elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.dragAndDrop('#source', '#target');\n// or specify exact positions relative to the top-left corners of the elements:\nawait page.dragAndDrop('#source', '#target', {\n  sourcePosition: { x: 34, y: 7 },\n  targetPosition: { x: 10, y: 20 },\n});\n```\n\nLANGUAGE: java\nCODE:\n```\npage.dragAndDrop(\"#source\", \"#target\");\n// or specify exact positions relative to the top-left corners of the elements:\npage.dragAndDrop(\"#source\", \"#target\", new Page.DragAndDropOptions()\n  .setSourcePosition(34, 7).setTargetPosition(10, 20));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.drag_and_drop(\"#source\", \"#target\")\n# or specify exact positions relative to the top-left corners of the elements:\nawait page.drag_and_drop(\n  \"#source\",\n  \"#target\",\n  source_position={\"x\": 34, \"y\": 7},\n  target_position={\"x\": 10, \"y\": 20}\n)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.DragAndDropAsync(\"#source\", \"#target\");\n// or specify exact positions relative to the top-left corners of the elements:\nawait Page.DragAndDropAsync(\"#source\", \"#target\", new()\n{\n    SourcePosition = new() { X = 34, Y = 7 },\n    TargetPosition = new() { X = 10, Y = 20 },\n});\n```\n\n----------------------------------------\n\nTITLE: Using matchesAriaSnapshot with an inline snapshot in Java\nDESCRIPTION: Java example of verifying accessibility structure using matchesAriaSnapshot (alias for toMatchAriaSnapshot). The method confirms that the body element contains the expected accessibility elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_42\n\nLANGUAGE: java\nCODE:\n```\npage.navigate(\"https://demo.playwright.dev/todomvc/\");\nassertThat(page.locator(\"body\")).matchesAriaSnapshot(\"\"\"\n  - heading \"todos\"\n  - textbox \"What needs to be done?\"\n\"\"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Playwright Tests on Deployment (Java)\nDESCRIPTION: This YAML configuration sets up GitHub Actions to run Playwright tests with Java after a successful deployment. It sets up the Java environment, builds the project, installs Playwright, and runs the tests with the deployment URL as the base URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_19\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n    - name: Build & Install\n      run: mvn -B install -D skipTests --no-transfer-progress\n    - name: Install Playwright\n      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n    - name: Run tests\n      run: mvn test\n      env:\n        # This might depend on your test-runner\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors with Playwright Frame - Java\nDESCRIPTION: Demonstrates selector evaluation in Java using Playwright. Allows Java expressions on frame elements to access and manipulate element attributes, string conversion, or DOM node properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nString searchValue = (String) frame.evalOnSelector(\"#search\", \"el => el.value\");\nString preloadHref = (String) frame.evalOnSelector(\"link[rel=preload\", \"el => el.href\");\nString html = (String) frame.evalOnSelector(\".main-container\", \"(e, suffix) => e.outerHTML + suffix\", \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Event Listeners in Playwright (JavaScript)\nDESCRIPTION: Demonstrates adding persistent event listeners using `page.on` and removing them using `page.off` in Playwright for JavaScript. Listeners are added for 'request' and 'requestfinished' events. After navigating, the 'requestfinished' listener is removed using the stored listener function reference.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\npage.on('request', request => console.log(`Request sent: ${request.url()}`));\nconst listener = request => console.log(`Request finished: ${request.url()}`);\npage.on('requestfinished', listener);\nawait page.goto('https://wikipedia.org');\n\npage.off('requestfinished', listener);\nawait page.goto('https://www.openstreetmap.org/');\n```\n```\n\n----------------------------------------\n\nTITLE: Checking a Checkbox or Radio via Playwright Python (Sync)\nDESCRIPTION: Shows the synchronous Python Playwright method for checking a checkbox, including error handling for incorrect element types and detached DOM nodes, ensuring statefulness.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\npage.get_by_role(\"checkbox\").check()\n```\n\n----------------------------------------\n\nTITLE: Uploading Playwright Report in Azure Pipelines (JavaScript)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests, publish test results, and upload the playwright-report as an artifact. It uses the PublishTestResults and PublishPipelineArtifact tasks to integrate test results with Azure DevOps.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_26\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n- task: PublishTestResults@2\n  displayName: 'Publish test results'\n  inputs:\n    searchFolder: 'test-results'\n    testResultsFormat: 'JUnit'\n    testResultsFiles: 'e2e-junit-results.xml'\n    mergeTestResults: true\n    failTaskOnFailedTests: true\n    testRunTitle: 'My End-To-End Tests'\n  condition: succeededOrFailed()\n- task: PublishPipelineArtifact@1\n  inputs:\n    targetPath: playwright-report\n    artifact: playwright-report\n    publishLocation: 'pipeline'\n  condition: succeededOrFailed()\n```\n\n----------------------------------------\n\nTITLE: Using React and Vue Selectors in Python\nDESCRIPTION: Demonstrates how to use the experimental React and Vue selector engines to select elements by component name and properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"_react=SubmitButton[enabled=true]\").click()\npage.locator(\"_vue=submit-button[enabled=true]\").click()\n```\n\n----------------------------------------\n\nTITLE: Modifying Test Timeout with TestInfo.setTimeout\nDESCRIPTION: Demonstrates how to dynamically modify test timeout duration using setTimeout. Shows extending the timeout in a beforeEach hook.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture in C# with Playwright\nDESCRIPTION: C# implementation of pan gesture emulation using Playwright. The code provides a Pan method that simulates touch events for moving elements on a touch-enabled device.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class TouchEvents\n{\n    public static async Task Main(string[] args)\n    {\n        using var playwright = await Playwright.CreateAsync();\n        var browser = await playwright.Chromium.LaunchAsync();\n        var context = await browser.NewContextAsync(playwright.Devices[\"Pixel 7\"]);\n        var page = await context.NewPageAsync();\n\n        await page.GotoAsync(\n            \"https://www.google.com/maps/place/@37.4117722,-122.0713234,15z\",\n            new PageGotoOptions { WaitUntil = WaitUntilState.Commit }\n        );\n        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = \"Keep using web\" }).ClickAsync();\n        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = \"Keep using web\" })\n            .WaitForAsync(new LocatorWaitForOptions { State = WaitForSelectorState.Hidden });\n\n        var met = page.Locator(\"[data-test-id='met']\");\n        for (int i = 0; i < 5; i++)\n        {\n            await Pan(met, 200, 100);\n        }\n        await page.ScreenshotAsync(new PageScreenshotOptions { Path = \"screenshot.png\" });\n    }\n\n    public static async Task Pan(ILocator locator, int deltaX, int deltaY, int steps = 5)\n    {\n        var bounds = await locator.BoundingBoxAsync();\n        double centerX = bounds.X + bounds.Width / 2;\n        double centerY = bounds.Y + bounds.Height / 2;\n\n        var touches = new List<Dictionary<string, object>>\n        {\n            new Dictionary<string, object>\n            {\n                { \"identifier\", 0 },\n                { \"clientX\", centerX },\n                { \"clientY\", centerY }\n            }\n        };\n        await locator.DispatchEventAsync(\"touchstart\", new { touches, changedTouches = touches, targetTouches = touches });\n\n        for (int i = 1; i <= steps; i++)\n        {\n            touches = new List<Dictionary<string, object>>\n            {\n                new Dictionary<string, object>\n                {\n                    { \"identifier\", 0 },\n                    { \"clientX\", centerX + deltaX * i / steps },\n                    { \"clientY\", centerY + deltaY * i / steps }\n                }\n            };\n            await locator.DispatchEventAsync(\"touchmove\", new { touches, changedTouches = touches, targetTouches = touches });\n        }\n\n        await locator.DispatchEventAsync(\"touchend\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using isOK assertion with Java\nDESCRIPTION: Usage example of the isOK method which ensures the response status code is within 200-299 range in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nassertThat(response).isOK();\n```\n\n----------------------------------------\n\nTITLE: Fast Forwarding and Pausing Time - Playwright C#\nDESCRIPTION: Leverages Playwright's C# bindings to manipulate the page clock in end-to-end tests through async methods. It demonstrates clock installation, pausing at specific times, fast forwarding, and verifying time-related changes on the page. Prerequisites are Playwright C#, async/await constructs, and correct date/time use.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Initialize clock with some time before the test time and let the page load naturally.\n// `Date.now` will progress as the timers fire.\nawait Page.Clock.InstallAsync(new()\n{\n  TimeDate = new DateTime(2024, 2, 2, 8, 0, 0)\n});\nawait Page.GotoAsync(\"http://localhost:3333\");\n\n// Pretend that the user closed the laptop lid and opened it again at 10am.\n// Pause the time once reached that point.\nawait Page.Clock.PauseAtAsync(new DateTime(2024, 2, 2, 10, 0, 0));\n\n// Assert the page state.\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:00:00 AM\");\n\n// Close the laptop lid again and open it at 10:30am.\nawait Page.Clock.FastForwardAsync(\"30:00\");\nawait Expect(Page.GetByTestId(\"current-time\")).ToHaveTextAsync(\"2/2/2024, 10:30:00 AM\");\n```\n\n----------------------------------------\n\nTITLE: Handling beforeunload Dialogs with Playwright (JavaScript)\nDESCRIPTION: Registers a handler for the 'dialog' event specifically to handle `beforeunload` dialogs triggered by `page.close({ runBeforeUnload: true })`. The handler asserts the dialog type and then dismisses it.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\npage.on('dialog', async dialog => {\n  assert(dialog.type() === 'beforeunload');\n  await dialog.dismiss();\n});\nawait page.close({ runBeforeUnload: true });\n```\n```\n\n----------------------------------------\n\nTITLE: Transparent Background Option for Screenshots\nDESCRIPTION: Defines the `omitBackground` option that allows capturing screenshots with transparency by hiding the default white background.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\n- `omitBackground` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Frame.WaitForFunctionAsync in C#\nDESCRIPTION: This C# example shows how to pass an argument to the predicate function in Frame.WaitForFunctionAsync. It waits for an element matching a specific selector to appear in the document.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nvar selector = \".foo\";\nawait page.MainFrame.WaitForFunctionAsync(\"selector => !!document.querySelector(selector)\", selector);\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Publishing Playwright Reports\nDESCRIPTION: GitHub Actions workflow step to upload Playwright HTML reports to Azure Storage using azcopy. Includes environment configuration for service principal authentication.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload HTML report to Azure\n  shell: bash\n  run: |\n    REPORT_DIR='run-${{ github.run_id }}-${{ github.run_attempt }}'\n    azcopy cp --recursive \"./playwright-report/*\" \"https://<STORAGE_ACCOUNT_NAME>.blob.core.windows.net/$web/$REPORT_DIR\"\n    echo \"::notice title=HTML report url::https://<STORAGE_ACCOUNT_NAME>.z1.web.core.windows.net/$REPORT_DIR/index.html\"\n  env:\n    AZCOPY_AUTO_LOGIN_TYPE: SPN\n    AZCOPY_SPA_APPLICATION_ID: '${{ secrets.AZCOPY_SPA_APPLICATION_ID }}'\n    AZCOPY_SPA_CLIENT_SECRET: '${{ secrets.AZCOPY_SPA_CLIENT_SECRET }}'\n    AZCOPY_TENANT_ID: '${{ secrets.AZCOPY_TENANT_ID }}'\n```\n\n----------------------------------------\n\nTITLE: Waiting for Specific URL After Click in Java\nDESCRIPTION: Demonstrates how to explicitly wait for navigation to a specific URL pattern after clicking an element in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npage.getByText(\"Click me\").click();\npage.waitForURL(\"**/login\");\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events with Python Sync in Playwright\nDESCRIPTION: Example of handling a browser dialog event in Playwright using Python's synchronous API. The code defines a dialog handler function, launches Chromium, registers the handler, and triggers an alert dialog.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-dialog.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef handle_dialog(dialog):\n    print(dialog.message)\n    dialog.dismiss()\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.launch()\n    page = browser.new_page()\n    page.on(\"dialog\", handle_dialog)\n    page.evaluate(\"alert('1')\")\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: JUnit Reporter Configuration Example\nDESCRIPTION: TypeScript configuration for JUnit reporter with XML output file specification.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['junit', { outputFile: 'results.xml' }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport and High-DPI via Context/Page (Python Sync)\nDESCRIPTION: This synchronous Python snippet demonstrates using `playwright.sync_api` for: creating a context with a specific viewport, resizing a page's viewport with `page.set_viewport_size`, and creating a high-DPI context using `viewport` and `device_scale_factor` options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python sync\n# Create context with given viewport\ncontext = browser.new_context(\n  viewport={ 'width': 1280, 'height': 1024 }\n)\n\n# Resize viewport for individual page\npage.set_viewport_size({\"width\": 1600, \"height\": 1200})\n\n# Emulate high-DPI\ncontext = browser.new_context(\n  viewport={ 'width': 2560, 'height': 1440 },\n  device_scale_factor=2,\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Proxy Settings in Playwright\nDESCRIPTION: Defines the `proxy` object for configuring network proxy settings when launching a browser with Playwright. Requires a `server` (URL like `http://myproxy.com:3128` or `socks5://myproxy.com:3128`). Optionally takes `bypass` (comma-separated domains), `username`, and `password` for authentication.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n- `proxy` <[Object]>\n  - `server` <[string]> Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example\n    `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP\n    proxy.\n  - `bypass` ?<[string]> Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org,\n    .domain.com\"`.\n  - `username` ?<[string]> Optional username to use if HTTP proxy requires authentication.\n  - `password` ?<[string]> Optional password to use if HTTP proxy requires authentication.\n```\n\n----------------------------------------\n\nTITLE: Obtaining a JSHandle using evaluateHandle in Python (Async)\nDESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.evaluate_handle` method in asynchronous Python. This handle can subsequently be used for further JavaScript evaluations within the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python async\njs_handle = await page.evaluate_handle('window')\n#  Use jsHandle for evaluations.\n```\n```\n\n----------------------------------------\n\nTITLE: Chaining Route Handlers with Route.abort and Route.fallback - Python (Async)\nDESCRIPTION: Demonstrates reversing handler execution order with Playwright async API in Python. Each lambda or handler either aborts or falls back. Facilitates complex or multi-step request handling including prioritization or filtering logic.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait page.route(\"**/*\", lambda route: route.abort())  # Runs last.\nawait page.route(\"**/*\", lambda route: route.fallback())  # Runs second.\nawait page.route(\"**/*\", lambda route: route.fallback())  # Runs first.\n```\n\n----------------------------------------\n\nTITLE: Calculating Locator Bounding Box in Playwright JavaScript\nDESCRIPTION: Retrieves the bounding box of a 'button' element then performs a click at its center using Playwright for JS. The method returns an object with x, y, width, height used to calculate click position. Returns null if not visible.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst box = await page.getByRole('button').boundingBox();\nawait page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);\n```\n\n----------------------------------------\n\nTITLE: Routing WebSocket Connections in Playwright\nDESCRIPTION: This example demonstrates how to intercept and mock WebSocket connections using the new routeWebSocket method, responding to a 'request' message with a 'response'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.routeWebSocket('/ws', ws => {\n  ws.onMessage(message => {\n    if (message === 'request')\n      ws.send('response');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing TestResult Properties in JavaScript\nDESCRIPTION: This snippet demonstrates how to access various properties of a TestResult object in JavaScript. It includes examples of accessing attachments, annotations, duration, errors, and other test execution details.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-testresult.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing TestResult properties\nconst testResult = getTestResult(); // Assume we have a TestResult object\n\n// Attachments\nconst attachments = testResult.attachments;\nattachments.forEach(attachment => {\n  console.log(`Attachment: ${attachment.name}, Type: ${attachment.contentType}`);\n});\n\n// Annotations\nconst annotations = testResult.annotations;\nannnotations.forEach(annotation => {\n  console.log(`Annotation: ${annotation.type}, Description: ${annotation.description}`);\n});\n\n// Duration and status\nconsole.log(`Test duration: ${testResult.duration}ms`);\nconsole.log(`Test status: ${testResult.status}`);\n\n// Errors\nif (testResult.error) {\n  console.error(`Test error: ${testResult.error}`);\n}\n\n// Steps\ntestResult.steps.forEach(step => {\n  console.log(`Step: ${step.title}`);\n});\n\n// Worker information\nconsole.log(`Worker index: ${testResult.workerIndex}`);\nconsole.log(`Parallel index: ${testResult.parallelIndex}`);\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll and afterAll Hooks Together in Playwright Tests\nDESCRIPTION: Shows how to use beforeAll and afterAll hooks together to set up and teardown resources for all tests in a file or group. This is useful for one-time setup operations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.beforeAll(async () => {\n  console.log('Before tests');\n});\n\ntest.afterAll(async () => {\n  console.log('After tests');\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Route Handlers with Route.AbortAsync and Route.FallbackAsync - C#\nDESCRIPTION: Exhibits C# idioms for ordering multiple Playwright route handlers, using async lambdas for abort and fallback. Can be used for layered request interception, prioritization, or central error handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"**/*\", route => {\n    // Runs last.\n    await route.AbortAsync();\n});\n\nawait page.RouteAsync(\"**/*\", route => {\n    // Runs second.\n    await route.FallbackAsync();\n});\n\nawait page.RouteAsync(\"**/*\", route => {\n    // Runs first.\n    await route.FallbackAsync();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Playwright Tests (JavaScript)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests in a containerized environment for a JavaScript project. It uses the official Playwright Docker image, installs Node.js, runs npm ci, and executes the tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_28\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n----------------------------------------\n\nTITLE: WebSocketRoute.onMessage Handler - JavaScript/Python\nDESCRIPTION: Handler for processing WebSocket messages. Can be used to handle messages from page or server.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(string): Promise<any>|any\n```\n\n----------------------------------------\n\nTITLE: Global Setup with Environment Variables\nDESCRIPTION: Example showing how to pass data from global setup to tests using environment variables.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  process.env.FOO = 'some data';\n  // Or a more complicated data structure as JSON:\n  process.env.BAR = JSON.stringify({ some: 'data' });\n}\n\nexport default globalSetup;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Proxy in Playwright Test\nDESCRIPTION: Configures proxy settings for the test environment using the TestOptions.proxy property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      bypass: 'localhost',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Locator with 'has' Option in Playwright\nDESCRIPTION: Shows how to use the new 'has' option with locators to ensure one locator contains another. This example clicks an article element that contains a highlight class.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('article', {\n  has: page.locator('.highlight'),\n}).click();\n```\n\n----------------------------------------\n\nTITLE: Locator Handler Implementation for Cookie Dialog\nDESCRIPTION: Example showing how to use Page.addLocatorHandler to automatically handle cookie consent dialogs by registering a callback that closes the dialog when it appears.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Setup the handler.\npage.addLocatorHandler(\n    page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Hej! You are in control of your cookies.\")),\n    () -> {\n        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Accept all\")).click();\n    });\n// Write the test as usual.\npage.navigate(\"https://www.ikea.com/\");\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Collection of blue and white\")).click();\nassertThat(page.getByRole(AriaRole.HEADING, new Page.GetByRoleOptions().setName(\"Light and easy\"))).isVisible();\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Response Headers in Playwright (JavaScript and Python)\nDESCRIPTION: The `Response.allHeaders` method retrieves an object containing all HTTP headers associated with the response. It returns header names in their original casing and includes security-related headers, such as cookies. This method requires async context, as it is asynchronous.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function allHeaders() {\\n  const headers = await response.allHeaders();\\n  console.log(headers);\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport and High-DPI via Context/Page (Java)\nDESCRIPTION: This Java snippet demonstrates using the Playwright Java library for: creating a context with a specific viewport using `setViewportSize`, resizing the viewport for an individual page using `page.setViewportSize`, and creating a context that emulates a high-DPI screen by setting both `setViewportSize` and `setDeviceScaleFactor`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n```java\n// Create context with given viewport\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setViewportSize(1280, 1024));\n\n// Resize viewport for individual page\npage.setViewportSize(1600, 1200);\n\n// Emulate high-DPI\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setViewportSize(2560, 1440)\n  .setDeviceScaleFactor(2));\n```\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fixture in Test File (TypeScript)\nDESCRIPTION: Demonstrates how to import and use a custom fixture in a test file, utilizing the isolated database user created for each worker.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Important: import our fixtures.\nimport { test, expect } from '../playwright/fixtures';\n\ntest('test', async ({ dbUserName }) => {\n  // Use the user name in the test.\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Frame Text Payload – Playwright SDK – C#\nDESCRIPTION: This method, WebSocketFrame.text, fetches the text payload from a WebSocket frame using Playwright in C#. It returns either a string containing the text data or null if the frame is not text. Requires an active Playwright environment and a valid WebSocketFrame object. Inputs: None. Output: string|null. Use this to handle WebSocket events or inspect textual messages passed through WebSocket connections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketframe.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar textPayload = webSocketFrame.text(); // returns string|null\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript on All Matching Elements with Locator.EvaluateAllAsync in C#\nDESCRIPTION: Shows how to execute JavaScript code on all matching elements using the EvaluateAllAsync method in C#. Passes the array of matching elements to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = page.Locator(\"div\");\nvar moreThanTen = await locator.EvaluateAllAsync<bool>(\"(divs, min) => divs.length > min\", 10);\n```\n\n----------------------------------------\n\nTITLE: Filtering Visible Elements with Playwright v1.51\nDESCRIPTION: Code example showing how to use the visible option with Locator.filter to match only visible elements in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('some test', async ({ page }) => {\n  // Ignore invisible todo items.\n  const todoItems = page.getByTestId('todo-item').filter({ visible: true });\n  // Check there are exactly 3 visible ones.\n  await expect(todoItems).toHaveCount(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Playwright Tests (Java)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests with Java. It sets up the Java environment, builds and installs the project, installs Playwright browsers, and runs the tests using Maven.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_24\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: JavaToolInstaller@0\n  inputs:\n    versionSpec: '17'\n    jdkArchitectureOption: 'x64'\n    jdkSourceOption: AzureStorage\n- script: mvn -B install -D skipTests --no-transfer-progress\n  displayName: 'Build and install'\n- script: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n  displayName: 'Install Playwright browsers'\n- script: mvn test\n  displayName: 'Run tests'\n```\n\n----------------------------------------\n\nTITLE: Playwright WebView2 Test Example\nDESCRIPTION: Example test class demonstrating navigation to Playwright website and verifying visibility of 'Get Started' link using WebView2 test base class.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : WebView2Test\n{\n    [TestMethod]\n    public async Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n        var getStarted = Page.GetByText(\"Get Started\");\n        await Expect(getStarted).ToBeVisibleAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Regex Pattern Match\nDESCRIPTION: YAML snapshot using regular expression to match dynamic heading content\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n- heading /Issues \\d+/\n```\n\n----------------------------------------\n\nTITLE: Emulating Geolocation, Language and Timezone with Playwright Codegen for JavaScript\nDESCRIPTION: Command to generate code while emulating Rome, Italy location, Italian language, and European/Rome timezone for Bing Maps using JavaScript. This demonstrates testing location-aware applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps\n```\n\n----------------------------------------\n\nTITLE: Initializing Playwright Logger with Custom Implementation in JavaScript\nDESCRIPTION: This snippet demonstrates how to launch a Chromium browser with a custom logger implementation. The logger is configured to only enable logs for the 'api' name and to log messages to the console.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-logger.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch({\n    logger: {\n      isEnabled: (name, severity) => name === 'api',\n      log: (name, severity, message, args) => console.log(`${name} ${message}`)\n    }\n  });\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Testing Status Text with Playwright\nJava\nDESCRIPTION: This Java snippet showcases an example of using Playwright Assertions to verify that a status element has the text 'Submitted' following a button click. It imports static Playwright assertions for functionality.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightassertions.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class TestExample {\n  // ...\n  @Test\n  void statusBecomesSubmitted() {\n    // ...\n    page.locator(\"#submit-button\").click();\n    assertThat(page.locator(\".status\")).hasText(\"Submitted\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitForURL in JavaScript\nDESCRIPTION: This snippet shows how to use the waitForURL method to wait for the main frame to navigate to a specific URL after clicking a link in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_151\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.click('a.delayed-navigation'); // Clicking the link will indirectly cause a navigation\nawait page.waitForURL('**/target.html');\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selector on ElementHandle in Java\nDESCRIPTION: Shows how to evaluate a selector on an ElementHandle and extract inner text in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nElementHandle tweetHandle = page.querySelector(\".tweet\");\nassertEquals(\"100\", tweetHandle.evalOnSelector(\".like\", \"node => node.innerText\"));\nassertEquals(\"10\", tweetHandle.evalOnSelector(\".retweets\", \"node => node.innerText\"));\n```\n\n----------------------------------------\n\nTITLE: Managing Color Scheme and Media in Java\nDESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright Java client.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_59\n\nLANGUAGE: java\nCODE:\n```\n// Create context with dark mode\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setColorScheme(ColorScheme.DARK)); // or \"light\"\n\n// Create page with dark mode\nPage page = browser.newPage(new Browser.NewPageOptions()\n  .setColorScheme(ColorScheme.DARK)); // or \"light\"\n\n// Change color scheme for the page\npage.emulateMedia(new Page.EmulateMediaOptions().setColorScheme(ColorScheme.DARK));\n\n// Change media for page\npage.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.PRINT));\n```\n\n----------------------------------------\n\nTITLE: Selecting Options from Dropdown using Frame.select_option in Python (Async)\nDESCRIPTION: Examples of how to select options from a dropdown element using the Frame.select_option method in Python's async mode. Shows single and multiple selections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# Single selection matching the value or label\nawait frame.select_option(\"select#colors\", \"blue\")\n# single selection matching the label\nawait frame.select_option(\"select#colors\", label=\"blue\")\n# multiple selection\nawait frame.select_option(\"select#colors\", value=[\"red\", \"green\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Sharding Tests Between Multiple Machines (Bash)\nDESCRIPTION: Command to run a specific shard of tests, allowing distribution of test execution across multiple machines.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --shard=2/3\n```\n\n----------------------------------------\n\nTITLE: Loading Chrome Extension with Playwright in Headless Mode - JavaScript\nDESCRIPTION: This snippet demonstrates loading and running a Chrome extension in headless mode using the Playwright library in JavaScript. It launches a persistent browser context with specified extension-related arguments. It waits for the background page of the extension and closes the browser context after testing. Dependencies include the Playwright library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { chromium } = require('playwright');\n\n(async () => {\n  const pathToExtension = require('path').join(__dirname, 'my-extension');\n  const userDataDir = '/tmp/test-user-data-dir';\n  const browserContext = await chromium.launchPersistentContext(userDataDir, {\n    channel: 'chromium',\n    args: [\n      `--disable-extensions-except=${pathToExtension}`,\n      `--load-extension=${pathToExtension}`\n    ]\n  });\n  let [backgroundPage] = browserContext.backgroundPages();\n  if (!backgroundPage)\n    backgroundPage = await browserContext.waitForEvent('backgroundpage');\n\n  // Test the background page as you would any other page.\n  await browserContext.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Event in Playwright (Multiple Languages)\nDESCRIPTION: Demonstrates how to wait for a specific event in Playwright using different programming languages. This method waits for an event to fire and handles it accordingly.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst pagePromise = context.waitForEvent('page');\nawait page.getByRole('button').click();\nconst page = await pagePromise;\n```\n\nLANGUAGE: java\nCODE:\n```\nPage newPage = context.waitForPage(() -> page.getByRole(AriaRole.BUTTON).click());\n```\n\nLANGUAGE: python\nCODE:\n```\nasync with context.expect_event(\"page\") as event_info:\n    await page.get_by_role(\"button\").click()\npage = await event_info.value\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar page = await context.RunAndWaitForPageAsync(async () =>\n{\n    await page.GetByRole(AriaRole.Button).ClickAsync();\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function in Playwright Page (Python Async)\nDESCRIPTION: This Python code demonstrates how to expose a SHA256 function to the browser page using Playwright's async API. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport hashlib\nfrom playwright.async_api import async_playwright, Playwright\n\ndef sha256(text):\n    m = hashlib.sha256()\n    m.update(bytes(text, \"utf8\"))\n    return m.hexdigest()\n\n\nasync def run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = await webkit.launch(headless=False)\n    page = await browser.new_page()\n    await page.expose_function(\"sha256\", sha256)\n    await page.set_content(\"\"\"\n        <script>\n          async function onClick() {\n            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n          }\n        </script>\n        <button onclick=\"onClick()\">Click me</button>\n        <div></div>\n    \"\"\")\n    await page.click(\"button\")\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using CDPSession with Chrome DevTools Protocol in Python (Async)\nDESCRIPTION: Demonstrates using the CDPSession in async Python code to enable animation tracking, set up an event listener, get the playback rate and modify it. Shows how to work with Chrome DevTools Protocol methods and events asynchronously.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = await page.context.new_cdp_session(page)\nawait client.send(\"Animation.enable\")\nclient.on(\"Animation.animationCreated\", lambda: print(\"animation created!\"))\nresponse = await client.send(\"Animation.getPlaybackRate\")\nprint(\"playback rate is \" + str(response[\"playbackRate\"]))\nawait client.send(\"Animation.setPlaybackRate\", {\n    \"playbackRate\": response[\"playbackRate\"] / 2\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounding Box with ElementHandle in Python Sync\nDESCRIPTION: Illustrates how to get an element's bounding box and click its center using ElementHandle in sync Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nbox = element_handle.bounding_box()\npage.mouse.click(box[\"x\"] + box[\"width\"] / 2, box[\"y\"] + box[\"height\"] / 2)\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Headed Mode (PowerShell)\nDESCRIPTION: Commands to run Playwright tests in headed mode, opening a browser window for each test, using PowerShell.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n$env:HEADED=\"1\"\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Mounting React Component for Testing in Playwright\nDESCRIPTION: Demonstrates how to test a React component using Playwright's experimental component testing feature. It shows mounting the component, making assertions, and taking screenshots.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport App from './App';\n\n// Let's test component in a dark scheme!\ntest.use({ colorScheme: 'dark' });\n\ntest('should render', async ({ mount }) => {\n  const component = await mount(<App></App>);\n\n  // As with any Playwright test, assert locator text.\n  await expect(component).toContainText('React');\n  // Or do a screenshot 🚀\n  await expect(component).toHaveScreenshot();\n  // Or use any Playwright method\n  await component.click();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-configured Expect Instances with expect.configure\nDESCRIPTION: Shows how to create customized expect instances with specific configuration for timeouts and soft assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst slowExpect = expect.configure({ timeout: 10000 });\nawait slowExpect(locator).toHaveText('Submit');\n\n// Always do soft assertions.\nconst softExpect = expect.configure({ soft: true });\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with Dotnet Bash\nDESCRIPTION: This snippet showcases Playwright installation for C# projects on CI using dotnet and PowerShell. It builds the project and installs Playwright dependencies for running tests successfully in a .NET environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build\\npwsh bin/Debug/netX/playwright.ps1 install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Using waitForCondition in Java\nDESCRIPTION: This snippet shows how to use the waitForCondition method to wait for a condition that depends on page events in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_149\n\nLANGUAGE: java\nCODE:\n```\nList<String> messages = new ArrayList<>();\npage.onConsoleMessage(m -> messages.add(m.text()));\npage.getByText(\"Submit button\").click();\npage.waitForCondition(() -> messages.size() > 3);\n```\n\n----------------------------------------\n\nTITLE: Setting Color Scheme in Playwright Tests\nDESCRIPTION: Example showing how to set the preferred color scheme for pages (dark or light mode), which affects CSS media queries and the color-scheme meta tag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    colorScheme: 'dark',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL Navigation in Java\nDESCRIPTION: This snippet demonstrates how to use Frame.waitForURL to wait for navigation to a specific URL after clicking a link in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nframe.click(\"a.delayed-navigation\"); // Clicking the link will indirectly cause a navigation\nframe.waitForURL(\"**/target.html\");\n```\n\n----------------------------------------\n\nTITLE: Loading Authentication State with Playwright Codegen for Python\nDESCRIPTION: Command to generate code for GitHub while loading previously saved authentication state from auth.json using Python. This maintains login sessions without requiring re-authentication.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen --load-storage=auth.json github.com/microsoft/playwright\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Timezone via Context Options (Java)\nDESCRIPTION: This Java snippet demonstrates setting the locale and timezone when creating a new browser context using the Playwright Java library. The `setLocale` and `setTimezoneId` methods are used on the `NewContextOptions` object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setLocale(\"de-DE\")\n  .setTimezoneId(\"Europe/Berlin\"));\n```\n```\n\n----------------------------------------\n\nTITLE: WebSocketRoute.onClose Handler - Java\nDESCRIPTION: Java implementation of WebSocket closure handler. Takes nullable Integer code and String reason parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nfunction(Integer code, String reason)\n```\n\n----------------------------------------\n\nTITLE: Handling Console Messages in JavaScript\nDESCRIPTION: Demonstrates how to listen for console messages, filter by type, wait for console events, and extract argument values in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen for all console logs\npage.on('console', msg => console.log(msg.text()));\n\n// Listen for all console events and handle errors\npage.on('console', msg => {\n  if (msg.type() === 'error')\n    console.log(`Error text: \"${msg.text()}\"`);\n});\n\n// Get the next console log\nconst msgPromise = page.waitForEvent('console');\nawait page.evaluate(() => {\n  console.log('hello', 42, { foo: 'bar' });  // Issue console.log inside the page\n});\nconst msg = await msgPromise;\n\n// Deconstruct console log arguments\nawait msg.args()[0].jsonValue(); // hello\nawait msg.args()[1].jsonValue(); // 42\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Parallel\nDESCRIPTION: Command to run tests in parallel using multiple processes with pytest-xdist.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest --numprocesses 2\n```\n\n----------------------------------------\n\nTITLE: Form Data Submission with RequestOptions in Java\nDESCRIPTION: Shows how to submit form data using application/x-www-form-urlencoded encoding.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-requestoptions.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncontext.request().post(\"https://example.com/signup\", RequestOptions.create().setForm(\n  FormData.create()\n    .set(\"firstName\", \"John\")\n    .set(\"lastName\", \"Doe\")));\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Cause in JavaScript\nDESCRIPTION: Retrieves the cause of the error, if available. The cause is set when there is a cause for the error and it's an instance of Error.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfoerror.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ntestInfoError.cause\n```\n\n----------------------------------------\n\nTITLE: Creating JSHandle with Page.evaluate_handle in Python (Sync)\nDESCRIPTION: Shows how to create a JSHandle for the window object using Page.evaluate_handle method in Python with synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwindow_handle = page.evaluate_handle(\"window\")\n```\n\n----------------------------------------\n\nTITLE: Key Press Example - Python\nDESCRIPTION: Demonstrates keyboard input simulation using Playwright in Python with both async and sync implementations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_75\n\nLANGUAGE: python\nCODE:\n```\npage = browser.new_page()\npage.goto(\"https://keycode.info\")\npage.press(\"body\", \"A\")\npage.screenshot(path=\"a.png\")\npage.press(\"body\", \"ArrowLeft\")\npage.screenshot(path=\"arrow_left.png\")\npage.press(\"body\", \"Shift+O\")\npage.screenshot(path=\"o.png\")\nbrowser.close()\n```\n\n----------------------------------------\n\nTITLE: Merging Blob Reports from Shards\nDESCRIPTION: Command to merge blob reports from multiple shards into a single HTML report, allowing a comprehensive view of test results across all shards.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright merge-reports --reporter html ./all-blob-reports\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Timezone via Context Options (Python Sync)\nDESCRIPTION: This synchronous Python snippet demonstrates setting the locale and timezone when creating a new browser context using `playwright.sync_api`. The `locale` and `timezone_id` parameters are passed to `browser.new_context`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n```python sync\ncontext = browser.new_context(\n  locale='de-DE',\n  timezone_id='Europe/Berlin',\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup with IndexedDB Storage in Playwright v1.51\nDESCRIPTION: Example code demonstrating how to set up authentication that saves IndexedDB content using the storageState method with the indexedDB option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as setup, expect } from '@playwright/test';\nimport path from 'path';\n\nconst authFile = path.join(__dirname, '../playwright/.auth/user.json');\n\nsetup('authenticate', async ({ page }) => {\n  await page.goto('/');\n  // ... perform authentication steps ...\n\n  // make sure to save indexedDB\n  await page.context().storageState({ path: authFile, indexedDB: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Vue Locator in Playwright\nDESCRIPTION: Vue locator allows finding elements by their component name and property values. Component names are transcribed with kebab-case. This example demonstrates clicking on a book-item component.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('_vue=book-item').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"_vue=book-item\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"_vue=book-item\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"_vue=book-item\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"_vue=book-item\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Using nth and visible Selector Engines in Python\nDESCRIPTION: Shows how to use the new nth and visible selector engines for element selection based on position or visibility.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# select the first button among all buttons\nbutton.click(\"button >> nth=0\")\n# or if you are using locators, you can use first, nth() and last\npage.locator(\"button\").first.click()\n\n# click a visible button\nbutton.click(\"button >> visible=true\")\n```\n\n----------------------------------------\n\nTITLE: Recording Multiple Trace Chunks (C#)\nDESCRIPTION: Illustrates recording multiple trace files asynchronously in C# using `await context.Tracing.StartChunkAsync()` and `await context.Tracing.StopChunkAsync()`. Requires tracing to be started first via `StartAsync`. Each chunk captures actions between its start/stop calls and saves to the path specified in `StopChunkAsync` options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Chromium.LaunchAsync();\nawait using var context = await browser.NewContextAsync();\nawait context.Tracing.StartAsync(new()\n{\n  Screenshots = true,\n  Snapshots = true\n});\nvar page = await context.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev\");\n\nawait context.Tracing.StartChunkAsync();\nawait page.GetByText(\"Get Started\").ClickAsync();\n// Everything between StartChunkAsync and StopChunkAsync will be recorded in the trace.\nawait context.Tracing.StopChunkAsync(new()\n{\n  Path = \"trace1.zip\"\n});\n\nawait context.Tracing.StartChunkAsync();\nawait page.GotoAsync(\"http://example.com\");\n// Save a second trace file with different actions.\nawait context.Tracing.StopChunkAsync(new()\n{\n  Path = \"trace2.zip\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Playwright in CMake\nDESCRIPTION: Defines the private include directories for the Playwright executable, including the binary directory and WebCore framework headers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(Playwright_PRIVATE_INCLUDE_DIRECTORIES\n    ${CMAKE_BINARY_DIR}\n    ${WebCore_PRIVATE_FRAMEWORK_HEADERS_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Global Teardown Implementation\nDESCRIPTION: Example of a global teardown test file that cleans up the database after all tests have completed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as teardown } from '@playwright/test';\n\nteardown('delete database', async ({ }) => {\n  console.log('deleting test database...');\n  // Delete the database\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Test Status with TestInfo.status\nDESCRIPTION: Shows how to compare actual test status with expected status in an afterEach hook for test result validation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Print Dialogs with Playwright (C#)\nDESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()`. It uses `Page.EvaluateAsync` to inject JavaScript that replaces `window.print` with a function resolving a Promise, then uses `Page.WaitForFunctionAsync` to await the promise after clicking the print trigger.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait Page.GotoAsync(\"<url>\");\n\nawait Page.EvaluateAsync(\"(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()\");\nawait Page.GetByText(\"Print it!\").ClickAsync();\n\nawait Page.WaitForFunctionAsync(\"window.waitForPrintDialog\");\n```\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Specific Playwright Tests\nDESCRIPTION: Command to run a set of Playwright test files using the filter flag with multiple class names.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter \"ExampleTest1|ExampleTest2\"\n```\n\n----------------------------------------\n\nTITLE: Watching viewport size changes in C#\nDESCRIPTION: Example of using WaitForFunctionAsync in C# to monitor viewport size changes. The function resolves when the window's inner width is less than 100 pixels, after setting the viewport size.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_114\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nclass FrameExamples\n{\n  public static async Task WaitForFunction()\n  {\n    using var playwright = await Playwright.CreateAsync();\n    await using var browser = await playwright.Webkit.LaunchAsync();\n    var page = await browser.NewPageAsync();\n    await page.SetViewportSizeAsync(50, 50);\n    await page.MainFrame.WaitForFunctionAsync(\"window.innerWidth < 100\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Storage State in Playwright Test\nDESCRIPTION: Configures the storage state for tests using the TestOptions.storageState property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    storageState: 'storage-state.json',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Tracing a Square with Mouse Movements in C#\nDESCRIPTION: This snippet demonstrates how to use the 'Page.Mouse' object in C# to trace a 100x100 square by moving the mouse and performing click actions using async methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.Mouse.MoveAsync(0, 0);\nawait Page.Mouse.DownAsync();\nawait Page.Mouse.MoveAsync(0, 100);\nawait Page.Mouse.MoveAsync(100, 100);\nawait Page.Mouse.MoveAsync(100, 0);\nawait Page.Mouse.MoveAsync(0, 0);\nawait Page.Mouse.UpAsync();\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Trace Recording (Python Async)\nDESCRIPTION: Illustrates the asynchronous approach to recording a Playwright trace in Python. It launches a browser, creates a context, starts tracing (enabling screenshots and snapshots), navigates a page using `await`, and finally stops tracing, saving the result to 'trace.zip'. Requires an asynchronous Playwright setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbrowser = await chromium.launch()\ncontext = await browser.new_context()\nawait context.tracing.start(screenshots=True, snapshots=True)\npage = await context.new_page()\nawait page.goto(\"https://playwright.dev\")\nawait context.tracing.stop(path = \"trace.zip\")\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using ElementHandle (Stale Potential) in Python (Async)\nDESCRIPTION: Shows finding an element using `page.query_selector` to get an [ElementHandle] and performing actions (hover, click) in asynchronous Python. This method can lead to errors if the element becomes stale due to page updates.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python async\nhandle = await page.query_selector(\"text=Submit\")\nawait handle.hover()\nawait handle.click()\n```\n```\n\n----------------------------------------\n\nTITLE: Creating New Browser Context in Playwright Java\nDESCRIPTION: This Java code sample shows how to create a new browser context using Playwright. It demonstrates context isolation and proper cleanup after browsing, requiring the Playwright Java library and a setup for Java development.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nBrowser browser = playwright.firefox().launch();  // Or 'chromium' or 'webkit'.\n// Create a new incognito browser context.\nBrowserContext context = browser.newContext();\n// Create a new page in a pristine context.\nPage page = context.newPage();\npage.navigate(\"https://example.com\");\n\n// Graceful close up everything\ncontext.close();\nbrowser.close();\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Routes with Custom Responses in Python (Sync)\nDESCRIPTION: Shows how to fulfill routes with custom responses using Playwright in Python with synchronous syntax. This example demonstrates responding with a 404 status code and a custom message for all requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\npage.route(\"**/*\", lambda route: route.fulfill(\n    status=404,\n    content_type=\"text/plain\",\n    body=\"not found!\"))\n```\n\n----------------------------------------\n\nTITLE: Tracing a Square with Mouse Movements in Python (Sync)\nDESCRIPTION: This snippet shows how to use the 'page.mouse' object in Python with synchronous syntax to trace a 100x100 square by moving the mouse and performing click actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# using 'page.mouse' to trace a 100x100 square.\npage.mouse.move(0, 0)\npage.mouse.down()\npage.mouse.move(0, 100)\npage.mouse.move(100, 100)\npage.mouse.move(100, 0)\npage.mouse.move(0, 0)\npage.mouse.up()\n```\n\n----------------------------------------\n\nTITLE: Setting Color Scheme for Specific Test in Playwright\nDESCRIPTION: Configures the color scheme for a specific test using Playwright Test. This allows testing the site's appearance in dark or light mode for individual tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  colorScheme: 'dark' // or 'light'\n});\n\ntest('my test with dark mode', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: IndexedDB Storage State Management in Java\nDESCRIPTION: Shows how to save and restore IndexedDB contents using BrowserContext.storageState with the new indexedDB option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Save storage state into the file. Make sure to include IndexedDB.\ncontext.storageState(new BrowserContext.StorageStateOptions()\n    .setPath(Paths.get(\"state.json\"))\n    .setIndexedDB(true));\n\n// Create a new context with the saved storage state.\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setStorageStatePath(Paths.get(\"state.json\")));\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Events in Playwright using Java\nDESCRIPTION: This Java snippet shows how to use event listeners (`onWorker`, `onClose`) in Playwright's Java binding to react to WebWorker creation and destruction. It registers listeners using lambda expressions to print the worker's URL upon creation and destruction. The snippet also demonstrates how to retrieve and iterate over the list of current workers associated with the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-worker.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npage.onWorker(worker -> {\n  System.out.println(\"Worker created: \" + worker.url());\n  worker.onClose(worker1 -> System.out.println(\"Worker destroyed: \" + worker1.url()));\n});\nSystem.out.println(\"Current workers:\");\nfor (Worker worker : page.workers())\n  System.out.println(\"  \" + worker.url());\n```\n\n----------------------------------------\n\nTITLE: Teardown Configuration in Playwright Config\nDESCRIPTION: Configuration example showing how to set up project teardown after all dependent projects have run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n      teardown: 'cleanup db',\n    },\n    {\n      name: 'cleanup db',\n      testMatch: /global\\.teardown\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup db'],\n    },\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Download Host in PowerShell\nDESCRIPTION: Configures a custom download host for Playwright browser binaries using PowerShell environment variables\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Text Content\nDESCRIPTION: Demonstrates different ways to locate elements by their text content, including exact matches, substrings, and regular expressions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_128\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello <span>world</span></div>\n<div>Hello</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Matches <span>\npage.getByText('world');\n\n// Matches first <div>\npage.getByText('Hello world');\n\n// Matches second <div>\npage.getByText('Hello', { exact: true });\n\n// Matches both <div>s\npage.getByText(/Hello/);\n\n// Matches second <div>\npage.getByText(/^hello$/i);\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Location for Java Debugging in Playwright\nDESCRIPTION: Commands to configure source code locations for Java debugging by setting the PLAYWRIGHT_JAVA_SRC environment variable. This tells Playwright where to look for the source code being debugged.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nPWDEBUG=1 PLAYWRIGHT_JAVA_SRC=<java source dirs> mvn test\n```\n\nLANGUAGE: batch\nCODE:\n```\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nset PLAYWRIGHT_JAVA_SRC=<java source dirs>\nset PWDEBUG=1\nmvn test\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Source directories in the list are separated by : on macos and linux and by ; on win.\n$env:PLAYWRIGHT_JAVA_SRC=\"<java source dirs>\"\n$env:PWDEBUG=1\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Configuring Setup and Teardown Projects in Playwright\nDESCRIPTION: Demonstrates how to set up projects with dependencies and teardown in a Playwright configuration file. It includes setup, teardown, and browser-specific projects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: /global.setup\\.ts/,\n      teardown: 'teardown',\n    },\n    {\n      name: 'teardown',\n      testMatch: /global.teardown\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using toHaveProperty Method for Object Property Checking\nDESCRIPTION: Shows various uses of the 'toHaveProperty' method to check for the existence and value of properties in objects, including nested properties and array items.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = {\n  a: {\n    b: [42],\n  },\n  c: true,\n};\nexpect(value).toHaveProperty('a.b');\nexpect(value).toHaveProperty('a.b', [42]);\nexpect(value).toHaveProperty('a.b[0]', 42);\nexpect(value).toHaveProperty('c');\nexpect(value).toHaveProperty('c', true);\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.waitForSelector in Python (async)\nDESCRIPTION: Demonstrates the usage of waitForSelector method on an ElementHandle in async Python to wait for a child element to appear in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nawait page.set_content(\"<div><span></span></div>\")\ndiv = await page.query_selector(\"div\")\n# waiting for the \"span\" selector relative to the div.\nspan = await div.wait_for_selector(\"span\", state=\"attached\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Headers in C#\nDESCRIPTION: Demonstrates how to modify request headers while falling back to the subsequent handler in Playwright using C#. This allows for intermediate route handlers to modify the URL, method, headers, and post data of the request.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteAsync(\"**/*\", async route =>\n{\n    var headers = new Dictionary<string, string>(route.Request.Headers) { { \"foo\", \"foo-value\" } };\n    headers.Remove(\"bar\");\n    await route.FallbackAsync(new() { Headers = headers });\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Open Browser Contexts in Playwright C#\nDESCRIPTION: This C# code snippet demonstrates using Playwright to get the number of open browser contexts. The example shows Playwright’s capability for context management and requires .NET and the Playwright C# library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Webkit.LaunchAsync();\nSystem.Console.WriteLine(browser.Contexts.Count); // prints \"0\"\nvar context = await browser.NewContextAsync();\nSystem.Console.WriteLine(browser.Contexts.Count); // prints \"1\"\n```\n\n----------------------------------------\n\nTITLE: Sending Form URL-encoded Data in Java\nDESCRIPTION: Example of sending a POST request with URL-encoded form data using Playwright's API request context in Java. The form data is created using FormData.create() and submitted with application/x-www-form-urlencoded content type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nrequest.post(\"https://example.com/api/findBook\", RequestOptions.create().setForm(\n    FormData.create().set(\"title\", \"Book Title\").set(\"body\", \"John Doe\")\n));\n```\n\n----------------------------------------\n\nTITLE: Loading Authentication State with Playwright Codegen for Java\nDESCRIPTION: Command to generate code for GitHub while loading previously saved authentication state from auth.json using Java. This Maven execution maintains login sessions without requiring re-authentication.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen --load-storage=auth.json github.com/microsoft/playwright\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Playwright Tests (Python)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests in a containerized environment for a Python project. It uses the official Playwright Python Docker image, sets up Python 3.11, installs dependencies, and runs the tests using pytest.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_29\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n\nsteps:\n- task: UsePythonVersion@0\n  inputs:\n    versionSpec: '3.11'\n  displayName: 'Use Python'\n\n- script: |\n    python -m pip install --upgrade pip\n    pip install -r requirements.txt\n  displayName: 'Install dependencies'\n- script: pytest\n  displayName: 'Run tests'\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser Using Playwright Python (Sync)\nDESCRIPTION: Demonstrates synchronous usage of Playwright to launch a Chromium browser, open a webpage, and close the browser. Requires the 'playwright' Python package and sync API. The Playwright context manager manages resources automatically. No direct inputs; expected output is automated browsing actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\\n\\ndef run(playwright: Playwright):\\n    chromium = playwright.chromium\\n    browser = chromium.launch()\\n    page = browser.new_page()\\n    page.goto(\\\"https://example.com\\\")\\n    # other actions...\\n    browser.close()\\n\\nwith sync_playwright() as playwright:\\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL for Playwright Tests\nDESCRIPTION: Command to run tests with a specified base URL which will be prepended to relative navigation URLs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npytest --base-url http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Traditional Test Setup\nDESCRIPTION: Example of traditional test setup using beforeEach/afterEach hooks for managing test environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test } = require('@playwright/test');\nconst { TodoPage } = require('./todo-page');\n\ntest.describe('todo tests', () => {\n  let todoPage;\n\n  test.beforeEach(async ({ page }) => {\n    todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n  });\n\n  test.afterEach(async () => {\n    await todoPage.removeAll();\n  });\n\n  test('should add an item', async () => {\n    await todoPage.addToDo('my item');\n    // ...\n  });\n\n  test('should remove an item', async () => {\n    await todoPage.remove('item1');\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using to_match_aria_snapshot with an inline snapshot in Python (sync)\nDESCRIPTION: Synchronous Python example of verifying accessibility structure using to_match_aria_snapshot. The method confirms that the body element contains the expected accessibility elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\npage.goto(\"https://demo.playwright.dev/todomvc/\")\nexpect(page.locator('body')).to_match_aria_snapshot('''\n  - heading \"todos\"\n  - textbox \"What needs to be done?\"\n''')\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Debug Mode with Environment Variables (C#)\nDESCRIPTION: Commands to run Playwright tests in debug mode by setting the PWDEBUG environment variable for C# projects. This opens the inspector and configures helpful debugging defaults.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=1 dotnet test\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PWDEBUG=1\ndotnet test\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PWDEBUG=1\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Injecting Initialization Scripts into Playwright BrowserContext (JS, Java, Python, C#)\nDESCRIPTION: Shows how to use `addInitScript` to add a script (specified by path or content) that runs early in the lifecycle of any new page or frame within the BrowserContext. This example loads the `preload.js` script to modify the environment. The script executes after the document is created but before other scripts run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// In your playwright script, assuming the preload.js file is in same directory.\nawait browserContext.addInitScript({\n  path: 'preload.js'\n});\n```\n\nLANGUAGE: java\nCODE:\n```\n// In your playwright script, assuming the preload.js file is in same directory.\nbrowserContext.addInitScript(Paths.get(\"preload.js\"));\n```\n\nLANGUAGE: python\nCODE:\n```\n# in your playwright script, assuming the preload.js file is in same directory.\nawait browser_context.add_init_script(path=\"preload.js\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# in your playwright script, assuming the preload.js file is in same directory.\nbrowser_context.add_init_script(path=\"preload.js\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Context.AddInitScriptAsync(scriptPath: \"preload.js\");\n```\n\n----------------------------------------\n\nTITLE: Create and Use a Custom Test Fixture for AxeBuilder in JavaScript\nDESCRIPTION: Shows how to extend base test with a custom fixture that configures AxeBuilder with common tags and exclusion patterns in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst base = require('@playwright/test');\nconst AxeBuilder = require('@axe-core/playwright').default;\n\n// Extend base test by providing \"makeAxeBuilder\"\n//\n// This new \"test\" can be used in multiple test files, and each of them will get\n// a consistently configured AxeBuilder instance.\nexports.test = base.test.extend({\n  makeAxeBuilder: async ({ page }, use) => {\n    const makeAxeBuilder = () => new AxeBuilder({ page })\n        .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n        .exclude('#commonly-reused-element-with-known-issue');\n\n    await use(makeAxeBuilder);\n  }\n});\nexports.expect = base.expect;\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Responses in C#\nDESCRIPTION: Demonstrates how to modify network responses in C#. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.RouteAsync(\"**/title.html\", async route =>\n{\n    // Fetch original response.\n    var response = await route.FetchAsync();\n    // Add a prefix to the title.\n    var body = await response.TextAsync();\n    body = body.Replace(\"<title>\", \"<title>My prefix:\");\n\n    var headers = response.Headers;\n    headers.Add(\"Content-Type\", \"text/html\");\n\n    await route.FulfillAsync(new()\n    {\n        // Pass all fields from the response.\n        Response = response,\n        // Override response body.\n        Body = body,\n        // Force content type to be html.\n        Headers = headers,\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility Assertions in Playwright\nDESCRIPTION: Examples of using new accessibility assertion methods including toHaveAccessibleName, toHaveAccessibleDescription, and toHaveRole\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByRole('button');\nawait expect(locator).toHaveAccessibleName('Submit');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByRole('button');\nawait expect(locator).toHaveAccessibleDescription('Upload a photo');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByTestId('save-button');\nawait expect(locator).toHaveRole('button');\n```\n\n----------------------------------------\n\nTITLE: Granting Domain-Specific Permissions in Python (Sync)\nDESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright Python sync API. This allows showing notifications only for the specified origin.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ncontext.grant_permissions(['notifications'], origin='https://skype.com')\n```\n\n----------------------------------------\n\nTITLE: Visual Regression Test with Tolerance\nDESCRIPTION: This test compares images with a specified tolerance level for differences.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should return true for different images when tolerance is higher than difference', async ({ page }) => {\n  const image1 = await page.screenshot();\n  await compareImageFile(image1, 'different/1.png', { tolerance: 50 });\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Dragstart Event with DataTransfer in C#\nDESCRIPTION: Shows how to dispatch a dragstart event with a DataTransfer object on an ElementHandle in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nvar dataTransfer = await page.EvaluateHandleAsync(\"() => new DataTransfer()\");\nawait elementHandle.DispatchEventAsync(\"dragstart\", new Dictionary<string, object>\n{\n    { \"dataTransfer\", dataTransfer }\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript with Locator.EvaluateAsync in C#\nDESCRIPTION: Demonstrates how to execute JavaScript code on a matched element using the EvaluateAsync method in C#. Includes passing arguments to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_53\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await page.GetByTestId(\"myId\").EvaluateAsync<string>(\"(element, [x, y]) => element.textContent + ' ' + x * y)\", new[] { 7, 8 });\nConsole.WriteLine(result); // prints \"myId text 56\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies with Filters in Playwright\nDESCRIPTION: Examples of using the clearCookies method with various filtering options\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Clear all cookies.\nawait context.clearCookies();\n// New: clear cookies with a particular name.\nawait context.clearCookies({ name: 'session-id' });\n// New: clear cookies for a particular domain.\nawait context.clearCookies({ domain: 'my-origin.com' });\n```\n\n----------------------------------------\n\nTITLE: Enabling Mobile Emulation in Browser Context\nDESCRIPTION: Defines the isMobile option for browser contexts. This controls whether the meta viewport tag is respected and touch events are enabled, used for mobile device emulation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_53\n\nLANGUAGE: js\nCODE:\n```\n- `isMobile` <[boolean]>\n\nWhether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation.md#ismobile).\n```\n\n----------------------------------------\n\nTITLE: Passing arguments to wait_for_function in sync Python\nDESCRIPTION: Demonstrates how to pass a selector argument to the wait_for_function predicate in synchronous Python. The function waits until an element matching the selector appears in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_118\n\nLANGUAGE: python\nCODE:\n```\nselector = \".foo\"\npage.wait_for_function(\"selector => !!document.querySelector(selector)\", selector)\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation for Browser Context\nDESCRIPTION: Defines the geolocation option for browser contexts. This allows specifying latitude, longitude, and optional accuracy for geolocation emulation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_57\n\nLANGUAGE: js\nCODE:\n```\n- `geolocation` <[Object]>\n  - `latitude` <[float]> Latitude between -90 and 90.\n  - `longitude` <[float]> Longitude between -180 and 180.\n  - `accuracy` ?<[float]> Non-negative accuracy value. Defaults to `0`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Screenshot Options in Playwright Config (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set default options for screenshot comparisons in the Playwright configuration file, applying to all tests in the project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  expect: {\n    toHaveScreenshot: { maxDiffPixels: 100 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Body ARIA Snapshot using Playwright Java\nDESCRIPTION: This Java snippet demonstrates matching the ARIA snapshot of the body element using Playwright Java. It uses `assertThat(page.locator(\"body\")).matchesAriaSnapshot()` with a template specifying the expected 'heading' role and its name 'title'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n```java\nassertThat(page.locator(\"body\")).matchesAriaSnapshot(\"\"\"\n  - heading \"title\"\n\"\"\");\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced Element Screenshot Options in Playwright\nDESCRIPTION: Takes a screenshot with customized options like disabling animations and specifying a file path. Demonstrates the advanced capabilities of the screenshot API for elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('link').screenshot({ animations: 'disabled', path: 'link.png' });\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.LINK).screenshot(new Locator.ScreenshotOptions()\n    .setAnimations(ScreenshotAnimations.DISABLED)\n    .setPath(Paths.get(\"example.png\")));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"link\").screenshot(animations=\"disabled\", path=\"link.png\")\n```\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_role(\"link\").screenshot(animations=\"disabled\", path=\"link.png\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Link).ScreenshotAsync(new() {\n  Animations = ScreenshotAnimations.Disabled,\n  Path = \"link.png\"\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounding Box with ElementHandle in CSharp\nDESCRIPTION: Demonstrates obtaining an element's bounding box and performing a center click using ElementHandle in CSharp. This is used to interact with the element based on its dimensions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_19\n\nLANGUAGE: CSharp\nCODE:\n```\nvar box = await elementHandle.BoundingBoxAsync();\nawait page.Mouse.ClickAsync(box.X + box.Width / 2, box.Y + box.Height / 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Emulation in Playwright Tests\nDESCRIPTION: Example of emulating a specific device by overriding browser context arguments with predefined device settings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture(scope=\"session\")\ndef browser_context_args(browser_context_args, playwright):\n    iphone_11 = playwright.devices['iPhone 11 Pro']\n    return {\n        **browser_context_args,\n        **iphone_11,\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Build for Playwright Tests (JavaScript)\nDESCRIPTION: This YAML configuration sets up Google Cloud Build to run Playwright tests using the official Playwright Docker image for JavaScript projects. It specifies the Docker image and sets the CI environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_39\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n- name: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n  script: \n  ...\n  env:\n  - 'CI=true'\n```\n\n----------------------------------------\n\nTITLE: Exposing Page URL Using C# in Playwright\nDESCRIPTION: C# implementation of page URL exposure using browser context binding. Shows context creation, binding exposure, and interaction with the bound function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nvar browser = await playwright.Webkit.LaunchAsync(new() { Headless = false });\nvar context = await browser.NewContextAsync();\n\nawait context.ExposeBindingAsync(\"pageURL\", source => source.Page.Url);\nvar page = await context.NewPageAsync();\nawait page.SetContentAsync(\"<script>\\n\" +\n\"  async function onClick() {\\n\" +\n\"    document.querySelector('div').textContent = await window.pageURL();\\n\" +\n\"  }\\n\" +\n\"</script>\\n\" +\n\"<button onclick=\\\"onClick()\\\">Click me</button>\\n\" +\n\"<div></div>\");\nawait page.GetByRole(AriaRole.Button).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Test Files\nDESCRIPTION: Command to run multiple specific test files by providing their paths.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_todo_page.py tests/test_landing_page.py\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelectorAll in Java\nDESCRIPTION: Example of using the evalOnSelectorAll method in Java to evaluate expressions on all elements matching a selector. This method finds all matching elements and passes them as an array to the provided JavaScript expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nboolean divCounts = (boolean) page.evalOnSelectorAll(\"div\", \"(divs, min) => divs.length >= min\", 10);\n```\n\n----------------------------------------\n\nTITLE: Recording Traces with MSTest in Playwright\nDESCRIPTION: Example showing how to configure trace recording in an MSTest class using Playwright. Implements trace recording in TestInitialize and TestCleanup methods with screenshots, snapshots and source capture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-csharp.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n         await Context.Tracing.StartAsync(new()\n        {\n            Title = $\"{TestContext.FullyQualifiedTestClassName}.{TestContext.TestName}\",\n            Screenshots = true,\n            Snapshots = true,\n            Sources = true\n        });\n    }\n\n    [TestCleanup]\n    public async Task TestCleanup()\n    {\n        await Context.Tracing.StopAsync(new()\n        {\n            Path = Path.Combine(\n                Environment.CurrentDirectory,\n                \"playwright-traces\",\n                $\"{TestContext.FullyQualifiedTestClassName}.{TestContext.TestName}.zip\"\n            )\n        });\n    }\n\n    [TestMethod]\n    public async Task GetStartedLink()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using APIResponseAssertions to verify API response in Java\nDESCRIPTION: Example of making a GET request to a website and asserting that the response is OK (status code 200-299) using Java in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// ...\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class TestPage {\n  // ...\n  @Test\n  void navigatesToLoginPage() {\n    // ...\n    APIResponse response = page.request().get(\"https://playwright.dev\");\n    assertThat(response).isOK();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Playwright\nDESCRIPTION: Examples showing how to handle timeouts and other errors in Playwright using try-catch blocks and specific error classes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwright.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await page.locator('.foo').waitFor();\n} catch (e) {\n  if (e instanceof playwright.errors.TimeoutError) {\n    // Do something if this is a timeout.\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  await page.wait_for_selector(\".foo\")\nexcept TimeoutError as e:\n  pass\n  # do something if this is a timeout.\n```\n\n----------------------------------------\n\nTITLE: Evaluating Multiple Selectors on ElementHandle in JavaScript\nDESCRIPTION: Demonstrates how to evaluate multiple selectors on an ElementHandle and extract inner text from multiple elements in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst feedHandle = await page.$('.feed');\nexpect(await feedHandle.$$eval('.tweet', nodes =>\n  nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!'],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Page within Viewport-Configured Context (JavaScript Library)\nDESCRIPTION: This snippet demonstrates creating a new browser context with a specified viewport size and then creating a new page within that context using the Playwright JavaScript library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-library\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1600, height: 1200 }\n});\nconst page = await context.newPage();\n```\n```\n\n----------------------------------------\n\nTITLE: Limited-Use Locator Handler with Times Option in JavaScript\nDESCRIPTION: Example of a locator handler that automatically removes itself after one use by setting the times option to 1. This handler clicks on a close button when it appears.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.addLocatorHandler(page.getByLabel('Close'), async locator => {\n  await locator.click();\n}, { times: 1 });\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function in Playwright Page (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to expose a custom SHA256 function to the browser page using Playwright in JavaScript. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\nconst crypto = require('crypto');\n\n(async () => {\n  const browser = await webkit.launch({ headless: false });\n  const page = await browser.newPage();\n  await page.exposeFunction('sha256', text =>\n    crypto.createHash('sha256').update(text).digest('hex'),\n  );\n  await page.setContent(`\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n  `);\n  await page.click('button');\n})();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Image Elements Across Multiple URLs in Python (Sync)\nDESCRIPTION: This snippet shows how to use Frame.wait_for_selector to wait for and retrieve image elements across multiple URLs in a Playwright script using Python's sync API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.launch()\n    page = browser.new_page()\n    for current_url in [\"https://google.com\", \"https://bbc.com\"]:\n        page.goto(current_url, wait_until=\"domcontentloaded\")\n        element = page.main_frame.wait_for_selector(\"img\")\n        print(\"Loaded image: \" + str(element.get_attribute(\"src\")))\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Testing a Wrapped Component with Playwright\nDESCRIPTION: This snippet demonstrates how to test a wrapped component using Playwright Test. It shows mounting the test wrapper, simulating file input, and asserting the expected behavior.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport { InputMediaForTest } from './input-media.story.tsx';\n\ntest('changes the image', async ({ mount }) => {\n  let mediaSelected: string | null = null;\n\n  const component = await mount(\n    <InputMediaForTest\n      onMediaChange={mediaName => {\n        mediaSelected = mediaName;\n      }}\n    />\n  );\n  await component\n    .getByTestId('imageInput')\n    .setInputFiles('src/assets/logo.png');\n\n  await expect(component.getByAltText(/selected image/i)).toBeVisible();\n  await expect.poll(() => mediaSelected).toBe('logo.png');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Class Names with LocatorAssertions\nDESCRIPTION: Example showing how to use the new ToContainClass method to assert individual class names on an element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page.GetByRole(AriaRole.Listitem, new() { Name = \"Ship v1.52\" })).ToContainClassAsync(\"done\");\n```\n\n----------------------------------------\n\nTITLE: Querying All Text Contents with Playwright Java\nDESCRIPTION: Uses Playwright Java API to get an array of textContent values from all nodes with the 'link' role. Outputs an array of strings mapped from textContent properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nString[] texts = page.getByRole(AriaRole.LINK).allTextContents();\n```\n\n----------------------------------------\n\nTITLE: Direct Browser Control Example - Python\nDESCRIPTION: Python example showing direct browser control using Playwright API\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    # Channel can be \"chrome\", \"msedge\", \"chrome-beta\", \"msedge-beta\" or \"msedge-dev\".\n    browser = p.chromium.launch(channel=\"msedge\")\n    page = browser.new_page()\n    page.goto(\"https://playwright.dev\")\n    print(page.title())\n    browser.close()\n```\n\n----------------------------------------\n\nTITLE: Capturing Accessibility Snapshot with Playwright in JavaScript\nDESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `snapshot()`. The function logs the snapshot to the console. Requires setup with Playwright and a page instance. Returns the root accessible node as a JavaScript object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst snapshot = await page.accessibility.snapshot();\nconsole.log(snapshot);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture in Python (Async) with Playwright\nDESCRIPTION: Asynchronous Python implementation of pan gesture emulation using Playwright. The code provides async functions for simulating touch events in an asynchronous context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import async_playwright, expect\n\nasync def pan(locator, deltaX=0, deltaY=0, steps=5):\n    bounds = await locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2\n\n    touches = [{\n        'identifier': 0,\n        'clientX': centerX,\n        'clientY': centerY,\n    }]\n    await locator.dispatch_event('touchstart', {\n        'touches': touches,\n        'changedTouches': touches,\n        'targetTouches': touches\n    })\n\n    for i in range(1, steps + 1):\n        touches = [{\n            'identifier': 0,\n            'clientX': centerX + deltaX * i / steps,\n            'clientY': centerY + deltaY * i / steps,\n        }]\n        await locator.dispatch_event('touchmove', {\n            'touches': touches,\n            'changedTouches': touches,\n            'targetTouches': touches\n        })\n\n    await locator.dispatch_event('touchend')\n```\n\n----------------------------------------\n\nTITLE: Matrix Sharding for Playwright Tests in GitLab CI (JavaScript)\nDESCRIPTION: This YAML configuration sets up matrix sharding for Playwright tests in GitLab CI using JavaScript. It defines a matrix of projects and shards, resulting in multiple parallel jobs with different combinations of project and shard values.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_38\n\nLANGUAGE: yml\nCODE:\n```\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n  parallel:\n    matrix:\n      - PROJECT: ['chromium', 'webkit']\n        SHARD: ['1/10', '2/10', '3/10', '4/10', '5/10', '6/10', '7/10', '8/10', '9/10', '10/10']\n  script:\n    - npm ci\n    - npx playwright test --project=$PROJECT --shard=$SHARD\n```\n\n----------------------------------------\n\nTITLE: Using Page.evaluate in Python (Async)\nDESCRIPTION: Examples of using the evaluate method in Python with async/await to execute JavaScript expressions in the page context. This async method can accept arguments, evaluate strings with variables, and work with ElementHandle objects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nresult = await page.evaluate(\"([x, y]) => Promise.resolve(x * y)\", [7, 8])\nprint(result) # prints \"56\"\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(await page.evaluate(\"1 + 2\")) # prints \"3\"\nx = 10\nprint(await page.evaluate(f\"1 + {x}\")) # prints \"11\"\n```\n\nLANGUAGE: python\nCODE:\n```\nbody_handle = await page.evaluate(\"document.body\")\nhtml = await page.evaluate(\"([body, suffix]) => body.innerHTML + suffix\", [body_handle, \"hello\"])\nawait body_handle.dispose()\n```\n\n----------------------------------------\n\nTITLE: Querying All Inner Texts with Playwright Java\nDESCRIPTION: Demonstrates the method to acquire all innerText strings from 'link' role elements in Java with Playwright. Returns an array of strings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nString[] texts = page.getByRole(AriaRole.LINK).allInnerTexts();\n```\n\n----------------------------------------\n\nTITLE: Example Playwright Test in Python\nDESCRIPTION: A sample Playwright test script demonstrating how to navigate to a webpage, check its title, click a link, and verify page content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.sync_api import Page, expect\n\ndef test_has_title(page: Page):\n    page.goto(\"https://playwright.dev/\")\n\n    # Expect a title \"to contain\" a substring.\n    expect(page).to_have_title(re.compile(\"Playwright\"))\n\ndef test_get_started_link(page: Page):\n    page.goto(\"https://playwright.dev/\")\n\n    # Click the get started link.\n    page.get_by_role(\"link\", name=\"Get started\").click()\n\n    # Expects page to have a heading with the name of Installation.\n    expect(page.get_by_role(\"heading\", name=\"Installation\")).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Events in Playwright using C#\nDESCRIPTION: This C# snippet illustrates how to subscribe to the `Worker` event on the Playwright Page object and the `Close` event on the Worker object using event handlers (`+=`). It logs messages to the console when a worker is created or closed, including the worker's URL. The example also shows how to loop through the `page.Workers` collection to list the URLs of all currently active workers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-worker.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npage.Worker += (_, worker) =>\n{\n    Console.WriteLine($\"Worker created: {worker.Url}\");\n    worker.Close += (_, _) => Console.WriteLine($\"Worker closed {worker.Url}\");\n};\n\nConsole.WriteLine(\"Current Workers:\");\nforeach(var pageWorker in page.Workers)\n{\n    Console.WriteLine($\"\\tWorker: {pageWorker.Url}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Global Setup/Teardown Configuration\nDESCRIPTION: Basic configuration for global setup and teardown using configuration file options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalSetup: require.resolve('./global-setup'),\n  globalTeardown: require.resolve('./global-teardown'),\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Responses in Java\nDESCRIPTION: Shows how to modify network responses in Java. The example fetches the original response, modifies the HTML content, and then fulfills the request with the modified response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_28\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"**/title.html\", route -> {\n  // Fetch original response.\n  APIResponse response = route.fetch();\n  // Add a prefix to the title.\n  String body = response.text();\n  body = body.replace(\"<title>\", \"<title>My prefix:\");\n  Map<String, String> headers = response.headers();\n  headers.put(\"content-type\", \"text/html\");\n  route.fulfill(new Route.FulfillOptions()\n    // Pass all fields from the response.\n    .setResponse(response)\n    // Override response body.\n    .setBody(body)\n    // Force content type to be html.\n    .setHeaders(headers));\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Dotnet Bash\nDESCRIPTION: This snippet demonstrates running C# Playwright tests using the `dotnet test` command. Ideal for CI setups for .NET projects, it ensures that the code is verified through comprehensive test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Options in Playwright Config\nDESCRIPTION: Sets various network-related options such as download behavior, HTTP headers, credentials, HTTPS error handling, offline mode, and proxy settings for all tests in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Whether to automatically download all the attachments.\n    acceptDownloads: false,\n\n    // An object containing additional HTTP headers to be sent with every request.\n    extraHTTPHeaders: {\n      'X-My-Header': 'value',\n    },\n\n    // Credentials for HTTP authentication.\n    httpCredentials: {\n      username: 'user',\n      password: 'pass',\n    },\n\n    // Whether to ignore HTTPS errors during navigation.\n    ignoreHTTPSErrors: true,\n\n    // Whether to emulate network being offline.\n    offline: true,\n\n    // Proxy settings used for all pages in the test.\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      bypass: 'localhost',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Service Worker with Custom Request Handling in JavaScript\nDESCRIPTION: A Service Worker implementation that demonstrates various request handling strategies including caching, request rewriting, response generation, and fallthrough. It pre-caches an addressbook.json file during installation and handles different URL patterns differently.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n      caches.open('v1').then(function(cache) {\n      // 1. Pre-fetches and caches /addressbook.json\n        return cache.add('/addressbook.json');\n      })\n  );\n});\n\n// Opt to handle FetchEvent's from the page\nself.addEventListener('fetch', event => {\n  event.respondWith(\n      (async () => {\n        // 1. Try to first serve directly from caches\n        const response = await caches.match(event.request);\n        if (response)\n          return response;\n\n        // 2. Re-write request for /foo to /bar\n        if (event.request.url.endsWith('foo'))\n          return fetch('./bar');\n\n        // 3. Prevent tracker.js from being retrieved, and returns a placeholder response\n        if (event.request.url.endsWith('tracker.js')) {\n          return new Response('console.log(\"no trackers!\")', {\n            status: 200,\n            headers: { 'Content-Type': 'text/javascript' },\n          });\n        }\n\n        // 4. Otherwise, fallthrough, perform the fetch and respond\n        return fetch(event.request);\n      })()\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(clients.claim());\n});\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshot with WebKit\nDESCRIPTION: Script showing how to navigate to a website and take a screenshot using WebKit browser\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.webkit.launch()\n    page = browser.new_page()\n    page.goto(\"https://playwright.dev/\")\n    page.screenshot(path=\"example.png\")\n    browser.close()\n```\n\n----------------------------------------\n\nTITLE: Setting isMobile via Context Options (Python Sync)\nDESCRIPTION: This synchronous Python snippet shows setting the `isMobile` property when creating a new browser context using `playwright.sync_api`. The `isMobile` parameter is passed directly to `browser.new_context`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python sync\ncontext = browser.new_context(\n  isMobile=false\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Capturing Aria Snapshots in Playwright C#\nDESCRIPTION: Utilizes the C# API for Playwright to asynchronously retrieve the ARIA snapshot for a 'link' role element, providing a YAML accessibility representation for later validation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nawait page.GetByRole(AriaRole.Link).AriaSnapshotAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Console Messages in C#\nDESCRIPTION: Demonstrates how to work with console messages in C#, including event subscription, error filtering, and argument extraction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Listen for all console messages and print them to the standard output.\npage.Console += (_, msg) => Console.WriteLine(msg.Text);\n\n// Listen for all console messages and print errors to the standard output.\npage.Console += (_, msg) =>\n{\n    if (\"error\".Equals(msg.Type))\n        Console.WriteLine(\"Error text: \" + msg.Text);\n};\n\n// Get the next console message\nvar waitForMessageTask = page.WaitForConsoleMessageAsync();\nawait page.EvaluateAsync(\"console.log('hello', 42, { foo: 'bar' });\");\nvar message = await waitForMessageTask;\n// Deconstruct console.log arguments\nawait message.Args.ElementAt(0).JsonValueAsync<string>(); // hello\nawait message.Args.ElementAt(1).JsonValueAsync<int>(); // 42\n```\n\n----------------------------------------\n\nTITLE: Limited-Use Locator Handler with Times Option in Python (Synchronous)\nDESCRIPTION: Synchronous Python implementation of a locator handler that automatically removes itself after one use by setting the times parameter to 1. This handler clicks on a close button when it appears.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_93\n\nLANGUAGE: python\nCODE:\n```\ndef handler(locator):\n  locator.click()\npage.add_locator_handler(page.get_by_label(\"Close\"), handler, times=1)\n```\n\n----------------------------------------\n\nTITLE: Saving a Downloaded File using saveAs in Playwright (JavaScript)\nDESCRIPTION: This snippet specifically demonstrates how to call the `download.saveAs()` method in JavaScript to save a previously obtained `Download` object to a specified path, using the `download.suggestedFilename()` for the file name. Assumes a `download` object is already available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nawait download.saveAs('/path/to/save/at/' + download.suggestedFilename());\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests\nDESCRIPTION: Command to execute the Playwright tests using dotnet test runner\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Creating JSHandle with Page.evaluate_handle in Python (Async)\nDESCRIPTION: Illustrates creating a JSHandle for the window object using Page.evaluate_handle method in Python with async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwindow_handle = await page.evaluate_handle(\"window\")\n```\n\n----------------------------------------\n\nTITLE: Handling Console Messages from Electron Main Process\nDESCRIPTION: Shows how to listen for console events from the Electron main process and process the arguments passed to console methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electronapplication.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelectronApp.on('console', async msg => {\n  const values = [];\n  for (const arg of msg.args())\n    values.push(await arg.jsonValue());\n  console.log(...values);\n});\nawait electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));\n```\n\n----------------------------------------\n\nTITLE: Using Worker Fixture for Authentication - JavaScript\nDESCRIPTION: This JavaScript code showcases authenticating using a worker-scoped fixture in Playwright. It highlights the approach for handling unique accounts per test worker and saving state to a JSON file for concurrent test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { test as baseTest, request } from '@playwright/test';\nimport fs from 'fs';\nimport path from 'path';\n\nexport * from '@playwright/test';\nexport const test = baseTest.extend<{}, { workerStorageState: string }>({\n  // Use the same storage state for all tests in this worker.\n  storageState: ({ workerStorageState }, use) => use(workerStorageState),\n\n  // Authenticate once per worker with a worker-scoped fixture.\n  workerStorageState: [async ({}, use) => {\n    // Use parallelIndex as a unique identifier for each worker.\n    const id = test.info().parallelIndex;\n    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);\n\n    if (fs.existsSync(fileName)) {\n      // Reuse existing authentication state if any.\n      await use(fileName);\n      return;\n    }\n\n    // Important: make sure we authenticate in a clean environment by unsetting storage state.\n    const context = await request.newContext({ storageState: undefined });\n\n    // Acquire a unique account, for example create a new one.\n    const account = await acquireAccount(id);\n\n    // Send authentication request. Replace with your own.\n    await context.post('https://github.com/login', {\n      form: {\n        'user': 'user',\n        'password': 'password'\n      }\n    });\n\n    await context.storageState({ path: fileName });\n    await context.dispose();\n    await use(fileName);\n  }, { scope: 'worker' }],\n});\n\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Multipart Form Data in JavaScript\nDESCRIPTION: Example of uploading files using multipart/form-data encoding in JavaScript. The example demonstrates how to create FormData with text fields and file attachments and submit it via a POST request.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new FormData();\nform.set('name', 'John');\nform.append('name', 'Doe');\n// Send two file fields with the same name.\nform.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));\nform.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));\nawait request.post('https://example.com/api/uploadForm', {\n  multipart: form\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests and Collecting Traces Locally (Bash)\nDESCRIPTION: Explains how to run Playwright tests with tracing enabled on all tests for local development. The --trace on flag triggers trace recording to aid in debugging. Supported by NPM, Yarn, and PNPM. Dependency: Playwright installed, relevant config enabled for tracing. Input: entire test suite. Output: trace files viewable in the HTML report.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --trace on\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright test --trace on\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright test --trace on\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounding Box with ElementHandle in Python Async\nDESCRIPTION: Describes retrieving the bounding box of an element in async Python using ElementHandle and subsequently clicking the element's center.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nbox = await element_handle.bounding_box()\nawait page.mouse.click(box[\"x\"] + box[\"width\"] / 2, box[\"y\"] + box[\"height\"] / 2)\n```\n\n----------------------------------------\n\nTITLE: Updating Geolocation in C#\nDESCRIPTION: Changes the geolocation of a browser context using the Playwright C# client. This allows testing how an application responds to location changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.SetGeolocationAsync(new Geolocation() { Longitude = 48.858455, Latitude = 2.294474 });\n```\n\n----------------------------------------\n\nTITLE: Specifying Relative Position for Playwright Input Actions\nDESCRIPTION: Defines the `position` object parameter for Playwright input actions, allowing specification of coordinates (`x`, `y`) relative to the top-left corner of the target element's padding box. If omitted, Playwright targets a visible point within the element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- `position` <[Object]>\n  - `x` <[float]>\n  - `y` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Handling Failed HTTP Requests (Python)\nDESCRIPTION: Adds an event handler to Playwright for Python's page object to print out the URL and error text of any failed HTTP requests. Used for diagnostics and test debugging. Python bindings for Playwright must be installed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\npage.on(\"requestfailed\", lambda request: print(request.url + \" \" + request.failure.error_text))\n```\n\n----------------------------------------\n\nTITLE: Basic JUnit Test Example with Playwright in Java\nDESCRIPTION: Demonstrates basic test methods using Playwright fixtures with JUnit annotations for browser automation testing. Shows examples of button clicking, checkbox checking, and Wikipedia search testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.junit.UsePlaywright;\nimport org.junit.jupiter.api.Test;\n\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@UsePlaywright\npublic class TestExample {\n  @Test\n  void shouldClickButton(Page page) {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox(Page page) {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertEquals(true, page.evaluate(\"window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki(Page page) {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertThat(page).hasURL(\"https://en.wikipedia.org/wiki/Playwright\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Responses in Java\nDESCRIPTION: This code snippet shows how to intercept WebSocket connections and mock the entire communication in Java. It responds to a 'request' message with a 'response'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npage.routeWebSocket(\"wss://example.com/ws\", ws -> {\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      ws.send(\"response\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Security Details Confirmation with Locator Handler in Java\nDESCRIPTION: Java implementation of a locator handler to automatically skip a security details confirmation page. The handler detects text matching 'Confirm your security details' and clicks the 'Remind me later' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_82\n\nLANGUAGE: java\nCODE:\n```\n// Setup the handler.\npage.addLocatorHandler(page.getByText(\"Confirm your security details\"), () -> {\n  page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Remind me later\")).click();\n});\n\n// Write the test as usual.\npage.navigate(\"https://example.com\");\npage.getByRole(\"button\", Page.GetByRoleOptions().setName(\"Start here\")).click();\n```\n\n----------------------------------------\n\nTITLE: Passing arguments to wait_for_function in async Python\nDESCRIPTION: Shows how to pass a selector argument to the wait_for_function predicate in async Python. The function waits until an element matching the selector appears in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_117\n\nLANGUAGE: python\nCODE:\n```\nselector = \".foo\"\nawait page.wait_for_function(\"selector => !!document.querySelector(selector)\", selector)\n```\n\n----------------------------------------\n\nTITLE: Fetch Response URL\nDESCRIPTION: Use the `Response.url` method to access the URL of the response, useful for debugging and verifying redirection paths. It provides a simple string output of the URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = response.url();\\nconsole.log('URL:', url);\n```\n\n----------------------------------------\n\nTITLE: Grouping Actions in Trace Viewer using C#\nDESCRIPTION: This snippet shows how to group actions in the Playwright trace viewer using C#. It performs the same actions as the Python example, navigating to the Playwright website and clicking on the API link, with all actions between GroupAsync and GroupEndAsync shown as a group in the trace viewer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n// All actions between GroupAsync and GroupEndAsync\n// will be shown in the trace viewer as a group.\nawait Page.Context.Tracing.GroupAsync(\"Open Playwright.dev > API\");\nawait Page.GotoAsync(\"https://playwright.dev/\");\nawait Page.GetByRole(AriaRole.Link, new() { Name = \"API\" }).ClickAsync();\nawait Page.Context.Tracing.GroupEndAsync();\n```\n\n----------------------------------------\n\nTITLE: Inactivity Monitoring Demo - HTML\nDESCRIPTION: Provides sample HTML and JavaScript for an inactivity timeout feature. The code counts down the time remaining and updates the DOM, logging out the user after a 5-minute window. No external requirements; serves as a basis for automated UI tests of inactivity logic.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\\\"remaining-time\\\" data-testid=\\\"remaining-time\\\"></div>\\n<script>\\n  const endTime = Date.now() + 5 * 60_000;\\n  const renderTime = () => {\\n    const diffInSeconds = Math.round((endTime - Date.now()) / 1000);\\n    if (diffInSeconds <= 0) {\\n      document.getElementById('remaining-time').textContent =\\n        'You have been logged out due to inactivity.';\\n    } else {\\n      document.getElementById('remaining-time').textContent =\\n        `You will be logged out in ${diffInSeconds} seconds.`;\\n    }\\n    setTimeout(renderTime, 1000);\\n  };\\n  renderTime();\\n</script>\\n<button type=\\\"button\\\">Interaction</button>\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Message in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a prominent warning message about the experimental nature of a Playwright package. It includes a link to the official documentation for further details.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-ct-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n> **BEWARE** This package is EXPERIMENTAL and does not respect semver.\n\nRead more at https://playwright.dev/docs/test-components\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript Expressions in Browser Context\nDESCRIPTION: Specifies the expression parameter for browser evaluation functions. Allows executing JavaScript expressions in the browser context, automatically invoking expressions that evaluate to functions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_42\n\nLANGUAGE: js\nCODE:\n```\n- `expression` <[string]>\n\nJavaScript expression to be evaluated in the browser context. If the expression evaluates\nto a function, the function is automatically invoked.\n```\n\n----------------------------------------\n\nTITLE: Running Vue 3 Development Server with Hot-Reload\nDESCRIPTION: Command to start the development server with hot-reload functionality for local development.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-vite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Playwright Tests with Pattern Matching\nDESCRIPTION: Shows how to configure Playwright to include or exclude specific test files using glob patterns or regular expressions through testMatch and testIgnore properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-configuration-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Glob patterns or regular expressions to ignore test files.\n  testIgnore: '*test-assets',\n\n  // Glob patterns or regular expressions that match test files.\n  testMatch: '*todo-tests/*.spec.ts',\n});\n```\n\n----------------------------------------\n\nTITLE: Querying All Inner Texts with Playwright JavaScript\nDESCRIPTION: Retrieves the innerText from all elements matching the 'link' role using Playwright's JavaScript API. Requires Playwright for JavaScript and a live `page` object. The only input is the selector, yielding an array of innerText strings for further use.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst texts = await page.getByRole('link').allInnerTexts();\n```\n\n----------------------------------------\n\nTITLE: Setting isMobile via Context Options (Java)\nDESCRIPTION: This Java snippet shows how to set the `isMobile` property when creating a new browser context using the Playwright Java library. The `setIsMobile` method is used on the `NewContextOptions` object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n```java\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .isMobile(false));\n```\n```\n\n----------------------------------------\n\nTITLE: Opening Remote Traces Using CLI\nDESCRIPTION: Commands to open remote trace files directly from URLs using Playwright CLI.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-trace https://example.com/trace.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace https://example.com/trace.zip\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nplaywright show-trace https://example.com/trace.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 show-trace https://example.com/trace.zip\n```\n\n----------------------------------------\n\nTITLE: Using TestInfo.timeout Property\nDESCRIPTION: Example of accessing and modifying test timeout value using the timeout property in a beforeEach hook.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Specific Cookies in Python\nDESCRIPTION: This snippet demonstrates how to use the clearCookies method with filters to remove only specific cookies based on name or domain.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Clear all cookies.\ncontext.clear_cookies()\n# New: clear cookies with a particular name.\ncontext.clear_cookies(name=\"session-id\")\n# New: clear cookies for a particular domain.\ncontext.clear_cookies(domain=\"my-origin.com\")\n```\n\n----------------------------------------\n\nTITLE: Locating Form Elements by Label\nDESCRIPTION: Demonstrates locating form inputs using associated label text, aria-labelledby, or aria-label attributes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_130\n\nLANGUAGE: html\nCODE:\n```\n<input aria-label=\"Username\">\n<label for=\"password-input\">Password:</label>\n<input id=\"password-input\">\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByLabel('Username').fill('john');\nawait page.getByLabel('Password').fill('secret');\n```\n\n----------------------------------------\n\nTITLE: Capturing Aria Snapshots in Playwright Java\nDESCRIPTION: Requests an ARIA snapshot of a 'link' role node using Playwright's Java API for accessibility inspection. The output is a YAML string representing the accessibility structure.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\npage.getByRole(AriaRole.LINK).ariaSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Use Custom AxeBuilder Fixture in JavaScript Test\nDESCRIPTION: Demonstrates using the custom AxeBuilder fixture in a test to analyze a specific page element and verify no violations exist.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { test, expect } = require('./axe-test');\n\ntest('example using custom fixture', async ({ page, makeAxeBuilder }) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await makeAxeBuilder()\n      // Automatically uses the shared AxeBuilder configuration,\n      // but supports additional test-specific configuration too\n      .include('#specific-element-under-test')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Page Errors with Playwright Events (Python Async)\nDESCRIPTION: Registers a lambda callback with Playwright's async Python API to print uncaught page exceptions. The example shows setting up the event handler and navigating to a page that throws an error. Requires an async Playwright context. Outputs are printed to the terminal.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_10\n\nLANGUAGE: python async\nCODE:\n```\n# Log all uncaught errors to the terminal\npage.on(\"pageerror\", lambda exc: print(f\"uncaught exception: {exc}\"))\n\n# Navigate to a page with an exception.\nawait page.goto(\"data:text/html,<script>throw new Error('test')<\\/script>\")\n```\n\n----------------------------------------\n\nTITLE: Attaching Screenshots to Test Steps\nDESCRIPTION: Shows how to capture and attach screenshots to test steps during execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await test.step('check page rendering', async step => {\n    const screenshot = await page.screenshot();\n    await step.attach('screenshot', { body: screenshot, contentType: 'image/png' });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting WebSocket Messages with Playwright in C#\nDESCRIPTION: Configure Playwright in C# to intercept and possibly modify WebSocket messages before forwarding them to a server. Requires a Playwright setup in a C# environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteWebSocketAsync(\"/ws\", ws => {\n  var server = ws.ConnectToServer();\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      server.Send(\"request2\");\n    else\n      server.Send(frame.Text);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Taking a Screenshot with Playwright Library (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Playwright Library to launch WebKit, navigate to a page, and take a screenshot. It includes browser launch, page creation, navigation, and screenshot capture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webkit } = require('playwright');\n\n(async () => {\n  const browser = await webkit.launch();\n  const page = await browser.newPage();\n  await page.goto('https://playwright.dev/');\n  await page.screenshot({ path: `example.png` });\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Suite with Flaky Tests in Playwright\nDESCRIPTION: This snippet demonstrates how to define a test suite with beforeAll and afterAll hooks, and multiple tests including a potentially flaky one. It showcases the structure of a typical Playwright test file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest.describe('suite', () => {\n  test.beforeAll(async () => { /* ... */ });\n  test('first good', async ({ page }) => { /* ... */ });\n  test('second flaky', async ({ page }) => { /* ... */ });\n  test('third good', async ({ page }) => { /* ... */ });\n  test.afterAll(async () => { /* ... */ });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Expect Message in Python\nDESCRIPTION: Demonstrates how to add a custom message to Playwright expect assertions for better error reporting.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexpect(page.get_by_text(\"Name\"), \"should be logged in\").to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Handling Network Requests in Playwright Component Tests\nDESCRIPTION: Demonstrates how to handle network requests in Playwright component tests using the experimental router fixture. It shows how to use MSW library handlers for mocking network requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { handlers } from '@src/mocks/handlers';\n\ntest.beforeEach(async ({ router }) => {\n  // install common handlers before each test\n  await router.use(...handlers);\n});\n\ntest('example test', async ({ mount }) => {\n  // test as usual, your handlers are active\n  // ...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { http, HttpResponse } from 'msw';\n\ntest('example test', async ({ mount, router }) => {\n  await router.use(http.get('/data', async ({ request }) => {\n    return HttpResponse.json({ value: 'mocked' });\n  }));\n\n  // test as usual, your handler is active\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Responses in C#\nDESCRIPTION: This code snippet demonstrates how to intercept WebSocket connections and mock the entire communication in C#. It responds to a 'request' message with a 'response'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteWebSocketAsync(\"wss://example.com/ws\", ws => {\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      ws.Send(\"response\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Banner ARIA Snapshot using Playwright Python (Async)\nDESCRIPTION: This Python snippet demonstrates the asynchronous usage of ARIA snapshot testing. It asynchronously navigates to 'https://playwright.dev/', selects the 'banner' element using a query selector, and awaits the assertion of its accessibility tree against the provided YAML snapshot template using `to_match_aria_snapshot`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait page.goto('https://playwright.dev/')\nawait expect(page.query_selector('banner')).to_match_aria_snapshot(\"\"\"\n  - banner:\n    - heading /Playwright enables reliable end-to-end/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n\"\"\")\n```\n```\n\n----------------------------------------\n\nTITLE: Focusing Elements with Playwright\nDESCRIPTION: Demonstrates how to programmatically focus an element using Playwright's focus() method. Shows implementation across different programming languages targeting a password input field.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByLabel('Password').focus();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByLabel(\"Password\").focus();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_label('password').focus()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByLabel(\"Password\").FocusAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Color Scheme Emulation for C# and Python Browser Context\nDESCRIPTION: Defines the colorScheme option for browser contexts in C# and Python. This emulates the prefers-color-scheme media feature with values 'light', 'dark', or 'null' to reset to system defaults.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_64\n\nLANGUAGE: csharp\nCODE:\n```\n- `colorScheme` <[ColorScheme]<\"light\"|\"dark\"|\"no-preference\"|\"null\">>\n\nEmulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See\n[`method: Page.emulateMedia`] for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'light'`.\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelectorAll in Python (Async)\nDESCRIPTION: Example of using the eval_on_selector_all method in Python with async/await to evaluate expressions on all elements matching a selector. This async method finds all matching elements and passes them to the provided JavaScript expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ndiv_counts = await page.eval_on_selector_all(\"div\", \"(divs, min) => divs.length >= min\", 10)\n```\n\n----------------------------------------\n\nTITLE: Passing arguments to waitForFunction in Java\nDESCRIPTION: Demonstrates how to pass a selector argument to the waitForFunction predicate in Java. The function waits until an element matching the selector appears in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_116\n\nLANGUAGE: java\nCODE:\n```\nString selector = \".foo\";\npage.waitForFunction(\"selector => !!document.querySelector(selector)\", selector);\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors on Frame in Python (Async)\nDESCRIPTION: Demonstrates the async usage of eval_on_selector_all method in Python to evaluate a selector on a frame and return a result based on the number of matching elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndivs_counts = await frame.eval_on_selector_all(\"div\", \"(divs, min) => divs.length >= min\", 10)\n```\n\n----------------------------------------\n\nTITLE: Testing Callbacks and Events in React Components with Playwright\nDESCRIPTION: Demonstrates how to test callbacks and events in React components using Playwright's component testing framework. It shows how to mount a component with an onClick callback.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-react';\n\ntest('callback', async ({ mount }) => {\n  const component = await mount(<Component onClick={() => {}} />);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieve Multiple Header Values\nDESCRIPTION: The `Response.headerValues` method returns an array of values for specified header names, handling repeated headers comprehensively. It's asynchronous and should be used within an async function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function headerValues(headerName) {\\n  const values = await response.headerValues(headerName);\\n  console.log(`${headerName} values:`, values);\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Vue CLI project\nDESCRIPTION: Installs all required dependencies for the Vue.js project as defined in package.json.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies with Chrome Configuration\nDESCRIPTION: Extended playwright config showing how to set up Chrome project with database dependencies and device configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n    },\n    {\n      name: 'chromium with db',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup db'],\n    },\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Unmounting Vue Components in Playwright Tests\nDESCRIPTION: Illustrates how to unmount a mounted Vue component in Playwright component tests. It shows two approaches: using the options API and the JSX-style syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('unmount', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.unmount();\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('unmount', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.unmount();\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding isMobile in Device Emulation Config (JavaScript)\nDESCRIPTION: This snippet demonstrates overriding the default `isMobile` property provided by a device preset in the Playwright Test configuration (`playwright.config.ts`). It spreads the 'Desktop Chrome' device settings and then explicitly sets `isMobile` to `false`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"playwright.config.ts\"\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // It is important to define the `isMobile` property after destructuring `devices`,\n        // since devices also define the `isMobile` for that device.\n        isMobile: false,\n      },\n    },\n  ]\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Messages with Playwright in Java\nDESCRIPTION: Uses Playwright for Java to set up a WebSocket route where incoming messages are intercepted and responded to based on conditions. Requires setting up a page instance to route WebSockets.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npage.routeWebSocket(\"wss://example.com/ws\", ws -> {\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      ws.send(\"response\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Test Steps in Playwright v1.50\nDESCRIPTION: Example showing how to set a timeout for an individual test step using the new timeout option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('some test', async ({ page }) => {\n  await test.step('a step', async () => {\n    // This step can time out separately from the test\n  }, { timeout: 1000 });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request with Query Parameters using Playwright APIRequestContext `get`\nDESCRIPTION: Illustrates how to send an HTTP GET request and include URL query parameters using the `get` method of Playwright's `APIRequestContext`. Parameters are usually passed via the `params` option (or `setQueryParam` in Java) using various formats like objects, maps, or strings depending on the language. Requires an initialized `APIRequestContext`. Returns an `APIResponse` (or equivalent Promise/Task).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Passing params as object\nawait request.get('https://example.com/api/getText', {\n  params: {\n    'isbn': '1234',\n    'page': 23,\n  }\n});\n\n// Passing params as URLSearchParams\nconst searchParams = new URLSearchParams();\nsearchParams.set('isbn', '1234');\nsearchParams.append('page', 23);\nsearchParams.append('page', 24);\nawait request.get('https://example.com/api/getText', { params: searchParams });\n\n// Passing params as string\nconst queryString = 'isbn=1234&page=23&page=24';\nawait request.get('https://example.com/api/getText', { params: queryString });\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nrequest.get(\"https://example.com/api/getText\", RequestOptions.create()\n  .setQueryParam(\"isbn\", \"1234\")\n  .setQueryParam(\"page\", 23));\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python\nquery_params = {\n  \"isbn\": \"1234\",\n  \"page\": \"23\"\n}\napi_request_context.get(\"https://example.com/api/getText\", params=query_params)\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar queryParams = new Dictionary<string, object>()\n{\n  { \"isbn\", \"1234\" },\n  { \"page\", 23 },\n};\nawait request.GetAsync(\"https://example.com/api/getText\", new() { Params = queryParams });\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced URL Assertion Examples in JavaScript\nDESCRIPTION: Examples of different ways to use toHaveURL assertion in JavaScript, including exact matching, pattern matching with regex, and using a predicate function to check URL parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Check for the page URL to be 'https://playwright.dev/docs/intro' (including query string)\nawait expect(page).toHaveURL('https://playwright.dev/docs/intro');\n\n// Check for the page URL to contain 'doc', followed by an optional 's', followed by '/'\nawait expect(page).toHaveURL(/docs?\\//);\n\n// Check for the predicate to be satisfied\n// For example: verify query strings\nawait expect(page).toHaveURL(url => {\n  const params = url.searchParams;\n  return params.has('search') && params.has('options') && params.get('id') === '5';\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Saving Downloads in Playwright (Python Sync)\nDESCRIPTION: Shows the synchronous Python pattern using the `with page.expect_download()` context manager. Similar to the async version, the download action occurs within the context, the `Download` object is obtained from `download_info.value`, and the file is saved using `download.save_as()` and `download.suggested_filename`. Requires a sync Playwright `page` object and an element that initiates a download.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Start waiting for the download\nwith page.expect_download() as download_info:\n    # Perform the action that initiates download\n    page.get_by_text(\"Download file\").click()\ndownload = download_info.value\n\n# Wait for the download process to complete and save the downloaded file somewhere\ndownload.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Detection with requestGC\nDESCRIPTION: Shows how to detect memory leaks using WeakRef and garbage collection requests in different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.evaluate(() => globalThis.suspectWeakRef = new WeakRef(suspect));\nawait page.requestGC();\nexpect(await page.evaluate(() => !globalThis.suspectWeakRef.deref())).toBe(true);\n```\n\nLANGUAGE: java\nCODE:\n```\npage.evaluate(\"globalThis.suspectWeakRef = new WeakRef(suspect)\");\npage.requestGC();\nassertTrue(page.evaluate(\"!globalThis.suspectWeakRef.deref()\"));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.evaluate(\"globalThis.suspectWeakRef = new WeakRef(suspect)\")\nawait page.request_gc()\nassert await page.evaluate(\"!globalThis.suspectWeakRef.deref()\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.EvaluateAsync(\"globalThis.suspectWeakRef = new WeakRef(suspect)\");\nawait Page.RequestGCAsync();\nAssert.True(await Page.EvaluateAsync(\"!globalThis.suspectWeakRef.deref()\"));\n```\n\n----------------------------------------\n\nTITLE: Catching TimeoutError in Playwright (Async Python)\nDESCRIPTION: This asynchronous Python example uses `async_playwright` to launch a Chromium browser and create a page. It demonstrates catching the `PlaywrightTimeoutError` (aliased from `playwright.async_api.TimeoutError`) within a try-except block when attempting to click an element ('Example') with a short timeout of 100ms.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python async\nimport asyncio\nfrom playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError, Playwright\n\nasync def run(playwright: Playwright):\n    browser = await playwright.chromium.launch()\n    page = await browser.new_page()\n    try:\n      await page.locator(\"text=Example\").click(timeout=100)\n    except PlaywrightTimeoutError:\n      print(\"Timeout!\")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\n\nasyncio.run(main())\n```\n```\n\n----------------------------------------\n\nTITLE: Python Init Script Examples\nDESCRIPTION: Async and sync examples of adding initialization scripts in Python\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\nawait page.add_init_script(path=\"mocks/preload.js\")\n\n# In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\npage.add_init_script(path=\"mocks/preload.js\")\n```\n\n----------------------------------------\n\nTITLE: Marking Tests as Slow in Playwright\nDESCRIPTION: Demonstrates how to mark tests as slow using test.slow() in Playwright. This can be done for individual tests, conditionally, or for all tests in a file or group.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('slow test', async ({ page }) => {\n  test.slow();\n  // ...\n});\n\ntest('slow in Safari', async ({ page, browserName }) => {\n  test.slow(browserName === 'webkit', 'This feature is slow in Safari');\n  // ...\n});\n\ntest.slow(({ browserName }) => browserName === 'webkit', 'all tests are slow in Safari');\n\ntest('slow in Safari 1', async ({ page }) => {\n  // ...\n});\ntest('fail in Safari 2', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using to_have_url Assertion in Python (Async)\nDESCRIPTION: Example of using to_have_url assertion in async Python to verify page URL matches a pattern. This checks if the page URL contains 'checkout' using a regular expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.async_api import expect\n\n# ...\nawait expect(page).to_have_url(re.compile(\".*checkout\"))\n```\n\n----------------------------------------\n\nTITLE: Using CSS :text() Pseudo-class in Playwright\nDESCRIPTION: Demonstrates how to use the :text() pseudo-class to match the smallest element containing specific text, shown across multiple programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('#nav-bar :text(\"Home\")').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"#nav-bar :text('Home')\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"#nav-bar :text('Home')\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"#nav-bar :text('Home')\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"#nav-bar :text('Home')\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Hover and Click on Locator Object in CSharp\nDESCRIPTION: Shows how to use locators in CSharp to hover and click a text element. Each interaction dynamically fetches the DOM element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nvar locator = page.GetByText(\"Submit\");\nawait locator.HoverAsync();\nawait locator.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Selecting Options from Dropdown using Frame.select_option in Python (Sync)\nDESCRIPTION: Examples of how to select options from a dropdown element using the Frame.select_option method in Python's synchronous mode. Shows single and multiple selections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# Single selection matching the value or label\nframe.select_option(\"select#colors\", \"blue\")\n# single selection matching both the label\nframe.select_option(\"select#colors\", label=\"blue\")\n# multiple selection\nframe.select_option(\"select#colors\", value=[\"red\", \"green\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Uploading Directory with SetInputFiles in C#\nDESCRIPTION: This snippet demonstrates how to upload a directory using the SetInputFiles method for input elements that support directory upload.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByLabel(\"Upload directory\").SetInputFilesAsync(\"mydir\");\n```\n\n----------------------------------------\n\nTITLE: Performing Trial Run with Modifiers in Playwright\nDESCRIPTION: Defines the `trial` boolean option for Playwright actions, specifically noting behavior with modifiers. When `true`, only actionability checks are performed, skipping the action itself. However, specified keyboard `modifiers` will still be pressed, allowing testing of elements visible only when those keys are active. Defaults to `false`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n- `trial` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Using Test Steps with Attachments and Skip Conditions in Playwright v1.51\nDESCRIPTION: Example demonstrating how to work with the new TestStepInfo object to add attachments or conditionally skip test steps.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest('some test', async ({ page, isMobile }) => {\n  // Note the new \"step\" argument:\n  await test.step('here is my step', async step => {\n    step.skip(isMobile, 'not relevant on mobile layouts');\n\n    // ...\n    await step.attach('my attachment', { body: 'some text' });\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Data in C#\nDESCRIPTION: Example of sending a POST request with JSON data using Playwright's API request context in C#. The dictionary is passed as DataObject in the request options and automatically serialized to JSON.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apirequestcontext.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar data = new Dictionary<string, object>() {\n  { \"firstName\", \"John\" },\n  { \"lastName\", \"Doe\" }\n};\nawait request.PostAsync(\"https://example.com/api/createBook\", new() { DataObject = data });\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose API Logs in C#\nDESCRIPTION: Commands to enable verbose API logging in Playwright C# tests using the DEBUG environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pw:api dotnet run\n```\n\nLANGUAGE: batch\nCODE:\n```\nset DEBUG=pw:api\ndotnet run\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:DEBUG=\"pw:api\"\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Setting Video Size with Browser Context (C#)\nDESCRIPTION: This snippet demonstrates how to create a new browser context with video recording enabled in C#, specifying both the directory and the video size.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await browser.NewContextAsync(new()\n{\n    RecordVideoDir = \"videos/\",\n    RecordVideoSize = new RecordVideoSize() { Width = 640, Height = 480 }\n});\n// Make sure to close, so that videos are saved.\nawait context.CloseAsync();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Configuration with Merge-Reports\nDESCRIPTION: Command to merge blob reports using a custom configuration file, allowing for more control over the report generation process.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright merge-reports --config=merge.config.ts ./blob-reports\n```\n\n----------------------------------------\n\nTITLE: Recording Video with Browser Context (JavaScript)\nDESCRIPTION: This code demonstrates how to create a new browser context with video recording enabled, specifying the directory where videos will be saved.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({ recordVideo: { dir: 'videos/' } });\n// Make sure to await close, so that videos are saved.\nawait context.close();\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Alt Text\nDESCRIPTION: Shows how to locate elements using the alt text attribute, commonly used for images.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_129\n\nLANGUAGE: html\nCODE:\n```\n<img alt='Playwright logo'>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByAltText('Playwright logo').click();\n```\n\n----------------------------------------\n\nTITLE: Excluding Elements from Accessibility Scan with axe-core and Playwright - JavaScript\nDESCRIPTION: This code demonstrates how to use AxeBuilder.exclude to prevent specific elements (and their descendants) from being included in the accessibility scan, useful when suppressing known violations temporarily. The test targets a page with a known issue, excludes the problematic selector, runs the scan, and asserts zero violations. Dependencies include Playwright and @axe-core/playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-js.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntest('should not have any accessibility violations outside of elements with known issues', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/page-with-known-issues');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .exclude('#element-with-known-issue')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Browser Context\nDESCRIPTION: Defines the locale option for browser contexts. This affects navigator.language, Accept-Language header, and formatting rules, defaulting to the system locale.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_58\n\nLANGUAGE: js\nCODE:\n```\n- `locale` <[string]>\n\nSpecify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation.md#locale--timezone).\n```\n\n----------------------------------------\n\nTITLE: Creating and Submitting Basic FormData in Java\nDESCRIPTION: Example of creating a FormData object with basic text fields and submitting it via an API request in Java. This demonstrates setting simple field values like strings and numbers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.options.FormData;\n// ...\nFormData form = FormData.create()\n    .set(\"firstName\", \"John\")\n    .set(\"lastName\", \"Doe\")\n    .set(\"age\", 30);\npage.request().post(\"http://localhost/submit\", RequestOptions.create().setForm(form));\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Codegen from Command Line - Python - Bash\nDESCRIPTION: This snippet demonstrates launching the Playwright code generator in Python environments. By running 'playwright codegen' with the desired URL, a recording session is started for the specified site. Requires the Playwright Python package to be installed and accessible in the system's PATH. Outputs: opens browser and inspector windows for interactive test creation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen demo.playwright.dev/todomvc\n```\n\n----------------------------------------\n\nTITLE: Using Page.evaluate in Java\nDESCRIPTION: Examples of using the evaluate method in Java to execute JavaScript expressions in the page context. This method can accept arguments, evaluate strings, and work with ElementHandle objects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_52\n\nLANGUAGE: java\nCODE:\n```\nObject result = page.evaluate(\"([x, y]) => {\\n\" +\n  \"  return Promise.resolve(x * y);\\n\" +\n  \"}\", Arrays.asList(7, 8));\nSystem.out.println(result); // prints \"56\"\n```\n\nLANGUAGE: java\nCODE:\n```\nSystem.out.println(page.evaluate(\"1 + 2\")); // prints \"3\"\n```\n\nLANGUAGE: java\nCODE:\n```\nElementHandle bodyHandle = page.evaluate(\"document.body\");\nString html = (String) page.evaluate(\"([body, suffix]) => body.innerHTML + suffix\", Arrays.asList(bodyHandle, \"hello\"));\nbodyHandle.dispose();\n```\n\n----------------------------------------\n\nTITLE: Exposing Page URL Using Java in Playwright\nDESCRIPTION: Java implementation of exposing a page URL through browser context binding. Shows how to create a context, expose the binding, and use it in a web page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType webkit = playwright.webkit();\n      Browser browser = webkit.launch(new BrowserType.LaunchOptions().setHeadless(false));\n      BrowserContext context = browser.newContext();\n      context.exposeBinding(\"pageURL\", (source, args) -> source.page().url());\n      Page page = context.newPage();\n      page.setContent(\"<script>\\n\" +\n        \"  async function onClick() {\\n\" +\n        \"    document.querySelector('div').textContent = await window.pageURL();\\n\" +\n        \"  }\\n\" +\n        \"</script>\\n\" +\n        \"<button onclick=\\\"onClick()\\\">Click me</button>\\n\" +\n        \"<div></div>\");\n      page.getByRole(AriaRole.BUTTON).click();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Worker Parallel Index in JavaScript\nDESCRIPTION: Retrieves the index of the worker between 0 and workers - 1. This index is unique for concurrently running workers and is also available as an environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-workerinfo.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nworkerInfo.parallelIndex\n```\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.TEST_PARALLEL_INDEX\n```\n\n----------------------------------------\n\nTITLE: Launching Browser and Navigating Page in Async Playwright Python\nDESCRIPTION: This Python snippet demonstrates asynchronous browser automation using Playwright to launch a Firefox browser and navigate to a URL. It requires the use of Playwright's async API and Python's asyncio library. Ensures the browser is closed after use.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    firefox = playwright.firefox\n    browser = await firefox.launch()\n    page = await browser.new_page()\n    await page.goto(\"https://example.com\")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using expect_event with async context in Python\nDESCRIPTION: Shows how to use Python's async context manager to wait for a framenavigated event while performing an action. The function returns the navigation event data after completion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nasync with page.expect_event(\"framenavigated\") as event_info:\n    await page.get_by_role(\"button\")\nframe = await event_info.value\n```\n\n----------------------------------------\n\nTITLE: Setting Up TLS Client Certificates in Python\nDESCRIPTION: This snippet demonstrates how to configure client-side certificates for TLS Client Authentication when creating a new browser context in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncontext = browser.new_context(\n    client_certificates=[\n        {\n            \"origin\": \"https://example.com\",\n            \"certPath\": \"client-certificates/cert.pem\",\n            \"keyPath\": \"client-certificates/key.pem\",\n        }\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request from Route in Playwright\nDESCRIPTION: This snippet documents the Route.request method, which returns the Request object associated with the route. This method has been available since version 1.8 of Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n## method: Route.request\n* since: v1.8\n- returns: <[Request]>\n\nA request to be routed.\n```\n\n----------------------------------------\n\nTITLE: Hover and Click Using ElementHandle in CSharp\nDESCRIPTION: Shows hovering and clicking operations on a text element in CSharp using ElementHandle in Playwright. Utilizes async selectors for interaction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\nvar handle = await page.QuerySelectorAsync(\"text=Submit\");\nawait handle.HoverAsync();\nawait handle.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Recording HAR File in Python (Async)\nDESCRIPTION: Asynchronous Python implementation for recording network traffic to a HAR file using Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync def test_records_or_updates_the_har_file(page: Page):\n    # Get the response from the HAR file\n    await page.route_from_har(\"./hars/fruit.har\", url=\"*/**/api/v1/fruits\", update=True)\n\n    # Go to the page\n    await page.goto(\"https://demo.playwright.dev/api-mocking\")\n\n    # Assert that the fruit is visible\n    await expect(page.get_by_text(\"Strawberry\")).to_be_visible()\n```\n\n----------------------------------------\n\nTITLE: Emulating Offline Mode in C#\nDESCRIPTION: Creates a new browser context with offline mode enabled using the Playwright C# client. This allows testing how applications handle network unavailability.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_73\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await browser.NewContextAsync(new() { Offline = true });\n```\n\n----------------------------------------\n\nTITLE: ARIA Checked Option for Role Selectors\nDESCRIPTION: Defines the `checked` option for role-based selectors to match elements with a specific checked state.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `checked` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Appending Form Fields with Files in Java\nDESCRIPTION: Demonstrates how to append multiple values to the same key in a FormData object in Java, including text fields and file uploads using both file paths and direct file payloads.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.options.FormData;\n// ...\nFormData form = FormData.create()\n    // Only name and value are set.\n    .append(\"firstName\", \"John\")\n    // Name and value are set, filename and Content-Type are inferred from the file path.\n    .append(\"attachment\", Paths.get(\"pic.jpg\"))\n    // Name, value, filename and Content-Type are set.\n    .append(\"attachment\", new FilePayload(\"table.csv\", \"text/csv\", Files.readAllBytes(Paths.get(\"my-tble.csv\"))));\npage.request().post(\"http://localhost/submit\", RequestOptions.create().setForm(form));\n```\n\n----------------------------------------\n\nTITLE: Using to_have_title Assertion in Python (Async)\nDESCRIPTION: Example of using to_have_title assertion in async Python to verify page title matches a pattern. This checks if the page title contains 'checkout' using a regular expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.async_api import expect\n\n# ...\nawait expect(page).to_have_title(re.compile(r\".*checkout\"))\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript on All Matching Elements with Locator.evaluate_all in Python (Sync)\nDESCRIPTION: Demonstrates how to execute JavaScript code on all matching elements using the evaluate_all method in Python sync mode. Passes an array of matching elements to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\"div\")\nmore_than_ten = locator.evaluate_all(\"(divs, min) => divs.length > min\", 10)\n```\n\n----------------------------------------\n\nTITLE: Storage State Management with IndexedDB in Playwright\nDESCRIPTION: Shows how to save and restore IndexedDB contents using storage state functionality.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Save storage state into the file. Make sure to include IndexedDB.\nstorage = await context.storage_state(path=\"state.json\", indexed_db=True)\n\n# Create a new context with the saved storage state.\ncontext = await browser.new_context(storage_state=\"state.json\")\n```\n\n----------------------------------------\n\nTITLE: Accepting Standard Dialogs with Playwright (C#)\nDESCRIPTION: Registers an asynchronous event handler for the `Page.Dialog` event. The handler automatically accepts any dialog (`alert`, `confirm`, `prompt`) that appears using `dialog.AcceptAsync()`. This listener must be registered *before* the asynchronous action that triggers the dialog (e.g., clicking a button).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nPage.Dialog += async (_, dialog) =>\n{\n    await dialog.AcceptAsync();\n};\nawait Page.GetByRole(AriaRole.Button).ClickAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying All Text Contents with Playwright JavaScript\nDESCRIPTION: Obtains the `textContent` property from every node matched by the 'link' role selector with Playwright's JS API. Returns an array of textContent strings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst texts = await page.getByRole('link').allTextContents();\n```\n\n----------------------------------------\n\nTITLE: Clearing Browser Permissions in JavaScript\nDESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright JavaScript library. This removes any permission settings that were applied earlier.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// Library\nawait context.clearPermissions();\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Docker for Python Web Scraping\nDESCRIPTION: Command to run the Playwright Docker container for Python web scraping with security measures for untrusted websites.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/python:v%%VERSION%%-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Sharding Playwright Tests in CircleCI (JavaScript)\nDESCRIPTION: This YAML configuration demonstrates how to set up sharding for Playwright tests in CircleCI using JavaScript. It uses parallelism and adjusts the shard index to run tests across multiple nodes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_33\n\nLANGUAGE: yml\nCODE:\n```\nplaywright-job-name:\n  executor: pw-noble-development\n  parallelism: 4\n  steps:\n    - run: SHARD=\"$((${CIRCLE_NODE_INDEX}+1))\"; npx playwright test --shard=${SHARD}/${CIRCLE_NODE_TOTAL}\n```\n\n----------------------------------------\n\nTITLE: Using toEqual with Pattern Matching in GenericAssertions\nDESCRIPTION: Shows an advanced use of 'toEqual' method with pattern matching. It uses various matchers to partially compare complex objects and arrays.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexpect({\n  list: [1, 2, 3],\n  obj: { prop: 'Hello world!', another: 'some other value' },\n  extra: 'extra',\n}).toEqual(expect.objectContaining({\n  list: expect.arrayContaining([2, 3]),\n  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Using CDPSession with Chrome DevTools Protocol in C#\nDESCRIPTION: C# implementation for working with CDPSession. Demonstrates creating a session, enabling runtime features, handling animation events, and adjusting playback rates using the Chrome DevTools Protocol API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = await Page.Context.NewCDPSessionAsync(Page);\nawait client.SendAsync(\"Runtime.enable\");\nclient.Event(\"Animation.animationCreated\").OnEvent += (_, _) => Console.WriteLine(\"Animation created!\");\nvar response = await client.SendAsync(\"Animation.getPlaybackRate\");\nvar playbackRate = response.Value.GetProperty(\"playbackRate\").GetDouble();\nConsole.WriteLine(\"playback rate is \" + playbackRate);\nawait client.SendAsync(\"Animation.setPlaybackRate\", new() { { \"playbackRate\", playbackRate / 2 } });\n```\n\n----------------------------------------\n\nTITLE: Using Exact Text Matching in Playwright\nDESCRIPTION: Shows how to use exact text matching with single or double quotes. This method is case-sensitive and matches the entire text content after trimming whitespace.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('text=\"Log in\"').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"text='Log in'\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"text='Log in'\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"text='Log in'\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Disabling Fixed Viewport in Python Browser Context\nDESCRIPTION: Defines the noViewport option for browser contexts in Python. When set to true, it allows resizing the window in headed mode without enforcing a fixed viewport.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n- `noViewport` <[boolean]>\n\nDoes not enforce fixed viewport, allows resizing window in the headed mode.\n```\n\n----------------------------------------\n\nTITLE: Using afterAll Hook in Playwright Tests\nDESCRIPTION: Shows how to use the afterAll hook that runs once per worker after all tests are complete. The hook can be used for cleanup operations or logging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest.afterAll(async () => {\n  console.log('Done with tests');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Selector for Playwright Element Resolution\nDESCRIPTION: Defines the `selector` string parameter used specifically for resolving a DOM element in certain Playwright contexts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n- `selector` <[string]>\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function to BrowserContext in Python (Sync)\nDESCRIPTION: This Python synchronous example shows how to expose a SHA256 hashing function to all pages in a browser context using Playwright. It creates a new context, exposes the function, and then uses it in a page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nfrom playwright.sync_api import sync_playwright\n\ndef sha256(text: str) -> str:\n    m = hashlib.sha256()\n    m.update(bytes(text, \"utf8\"))\n    return m.hexdigest()\n\n\ndef run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = webkit.launch(headless=False)\n    context = browser.new_context()\n    context.expose_function(\"sha256\", sha256)\n    page = context.new_page()\n    page.set_content(\"\"\"\n        <script>\n          async function onClick() {\n            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n          }\n        </script>\n        <button onclick=\"onClick()\">Click me</button>\n        <div></div>\n    \"\"\")\n    page.get_by_role(\"button\").click()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Docker for Java E2E Tests\nDESCRIPTION: Command to run the Playwright Docker container for Java end-to-end testing where code is trusted.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright/java:v%%VERSION%%-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Updating Geolocation in Python (Async)\nDESCRIPTION: Changes the geolocation of a browser context using the Playwright Python async API. This allows testing how an application responds to location changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nawait context.set_geolocation({\"longitude\": 48.858455, \"latitude\": 2.294474})\n```\n\n----------------------------------------\n\nTITLE: Installing Edge Browser via CLI\nDESCRIPTION: Command to install the stable version of Microsoft Edge browser using Playwright CLI on Linux\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install msedge\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Hooks for Each Parameterized Test in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement hooks for each individual parameterized test by placing them inside a test.describe() block within the forEach loop.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  test.describe(() => {\n    test.beforeEach(async ({ page }) => {\n      await page.goto(`https://example.com/greet?name=${name}`);\n    });\n    test(`testing with ${expected}`, async ({ page }) => {\n      await expect(page.getByRole('heading')).toHaveText(expected);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using waitForAngular Polyfill in Playwright Tests\nDESCRIPTION: An example showing how to use the waitForAngular polyfill function in a Playwright test scenario.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst page = await context.newPage();\nawait page.goto('https://example.org');\nawait waitForAngular(page);\n```\n\n----------------------------------------\n\nTITLE: Using Combined Custom Matchers in Tests\nDESCRIPTION: Shows how to use custom matchers from merged modules in Playwright tests, enabling specialized assertions from different testing domains.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from './fixtures';\n\ntest('passes', async ({ database }) => {\n  await expect(database).toHaveDatabaseUser('admin');\n});\n```\n\n----------------------------------------\n\nTITLE: Querying All Text Contents with Playwright Python (Async)\nDESCRIPTION: Collects the textContent from all 'link' role nodes using Playwright in async Python. The result is a list of textContent strings. Best used for DOM content assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ntexts = await page.get_by_role(\"link\").all_text_contents()\n```\n\n----------------------------------------\n\nTITLE: Aria Snapshot Testing in Playwright Python\nDESCRIPTION: Demonstrates using Aria snapshots with new properties for strict matching and URL assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nexpect(locator).to_match_aria_snapshot(\"\"\"\n    - list\n      - /children: equal\n      - listitem: Feature A\n      - listitem:\n        - link \"Feature B\":\n          - /url: \"https://playwright.dev\"\n  \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Responses in Python (Async)\nDESCRIPTION: This code snippet demonstrates how to intercept WebSocket connections and mock the entire communication in Python using async syntax. It responds to a 'request' message with a 'response'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\nawait page.route_web_socket(\"wss://example.com/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n----------------------------------------\n\nTITLE: Setting Form Fields with Files in Java\nDESCRIPTION: Example of using the set method to add various types of fields to a FormData object in Java, including text values, file uploads using file paths, and file uploads using FilePayload objects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-formdata.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.options.FormData;\n// ...\nFormData form = FormData.create()\n    // Only name and value are set.\n    .set(\"firstName\", \"John\")\n    // Name and value are set, filename and Content-Type are inferred from the file path.\n    .set(\"profilePicture1\", Paths.get(\"john.jpg\"))\n    // Name, value, filename and Content-Type are set.\n    .set(\"profilePicture2\", new FilePayload(\"john.jpg\", \"image/jpeg\", Files.readAllBytes(Paths.get(\"john.jpg\"))))\n    .set(\"age\", 30);\npage.request().post(\"http://localhost/submit\", RequestOptions.create().setForm(form));\n```\n\n----------------------------------------\n\nTITLE: Updating Geolocation During Test in Playwright\nDESCRIPTION: Changes the geolocation during test execution using Playwright Test. This allows testing how an application responds to location changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation'],\n});\n\ntest('my test with geolocation', async ({ page, context }) => {\n  // overwrite the location for this test\n  await context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });\n});\n```\n\n----------------------------------------\n\nTITLE: Emulating Offline Mode in Python (Async)\nDESCRIPTION: Creates a new browser context with offline mode enabled using the Playwright Python async API. This allows testing how applications handle network unavailability.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_71\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(\n  offline=True\n)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Playwright Browser Downloads in CI Workflows (Bash)\nDESCRIPTION: Presents bash commands to selectively install only required browsers with Playwright for CI optimization, reducing download size and time. Demonstrates how to install all browsers or just Chromium. Prerequisite: Playwright installed in CI environment. Parameters: browser names as arguments. Inputs: target browsers. Output: installed browsers and system dependencies.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/best-practices-js.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright install --with-deps\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright install chromium --with-deps\n```\n\n----------------------------------------\n\nTITLE: Emulating Mobile Devices with Playwright Codegen for Python\nDESCRIPTION: Command to generate code while emulating an iPhone 13 for the playwright.dev website using Python. This sets appropriate viewport size, user agent, and other device-specific configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen --device=\"iPhone 13\" playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Basic Test Step Usage with Skip Condition\nDESCRIPTION: Demonstrates how to use test steps with conditional skipping based on browser type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page, browserName }) => {\n  await test.step('check some behavior', async step => {\n    step.skip(browserName === 'webkit', 'The feature is not available in WebKit');\n    // ... rest of the step code\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors with Playwright Frame - JavaScript\nDESCRIPTION: Evaluates JavaScript expressions on elements matching a selector within the frame. Commonly retrieves or manipulates element properties and attributes, and handles promises via await syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst searchValue = await frame.$eval('#search', el => el.value);\nconst preloadHref = await frame.$eval('link[rel=preload]', el => el.href);\nconst html = await frame.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User Agent in Python (Async)\nDESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright Python async API. This allows testing how websites respond to different browser identifications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_66\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(\n  user_agent='My user agent'\n)\n```\n\n----------------------------------------\n\nTITLE: Handling GET and POST Requests in Python\nDESCRIPTION: Demonstrates how to handle GET and POST requests separately using Playwright in Python. The code sets up route handlers that check the request method and either handle the request or fall back to the default behavior.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Handle POST requests.\ndef handle_post(route):\n    if route.request.method != \"POST\":\n        route.fallback()\n        return\n  # Handling POST only.\n  # ...\n\npage.route(\"**/*\", handle_get)\npage.route(\"**/*\", handle_post)\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial Mode for Tests (JavaScript)\nDESCRIPTION: Sets up a test suite to run in serial mode, where tests are executed sequentially and dependent on each other's success.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, type Page } from '@playwright/test';\n\n// Annotate entire file as serial.\ntest.describe.configure({ mode: 'serial' });\n\nlet page: Page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks for React Component Testing with Playwright\nDESCRIPTION: Demonstrates how to use beforeMount and afterMount hooks to configure the app for React component testing. It shows an example of setting up a router using BrowserRouter.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-react/hooks';\nimport { BrowserRouter } from 'react-router-dom';\n\nexport type HooksConfig = {\n  enableRouting?: boolean;\n}\n\nbeforeMount<HooksConfig>(async ({ App, hooksConfig }) => {\n  if (hooksConfig?.enableRouting)\n    return <BrowserRouter><App /></BrowserRouter>;\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport type { HooksConfig } from '../playwright';\nimport { ProductsPage } from './pages/ProductsPage';\n\ntest('configure routing through hooks config', async ({ page, mount }) => {\n  const component = await mount<HooksConfig>(<ProductsPage />, {\n    hooksConfig: { enableRouting: true },\n  });\n  await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');\n});\n```\n\n----------------------------------------\n\nTITLE: Text Locator Parameters in Playwright\nDESCRIPTION: Defines the `text` and `exact` parameters for locating elements by their text content. The exact option enables case-sensitive, whole-string matching.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `text` <[string]|[RegExp]>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `exact` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Playwright Test\nDESCRIPTION: A simple Playwright test that navigates to the Playwright website, extracts text content from an element, and verifies it matches the expected value using assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_69\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  const name = await page.innerText('.navbar__title');\n  expect(name).toBe('Playwright');\n});\n```\n\n----------------------------------------\n\nTITLE: Granting Domain-Specific Permissions in Java\nDESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright Java client. This allows showing notifications only for the specified origin.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_34\n\nLANGUAGE: java\nCODE:\n```\ncontext.grantPermissions(Arrays.asList(\"notifications\"),\n  new BrowserContext.GrantPermissionsOptions().setOrigin(\"https://skype.com\"));\n```\n\n----------------------------------------\n\nTITLE: Fast Forwarding and Pausing Time - Playwright Java\nDESCRIPTION: Illustrates Playwright's Java API for installing, pausing, and fast forwarding the clock in browser-based tests. The code fragment creates and parses date strings, interacts with test elements, and performs text assertions. Requires Playwright for Java, proper date formatting, and runtime context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Initialize clock with some time before the test time and let the page load\n// naturally. `Date.now` will progress as the timers fire.\nSimpleDateFormat format = new SimpleDateFormat(\"yyy-MM-dd'T'HH:mm:ss\");\npage.clock().install(new Clock.InstallOptions().setTime(format.parse(\"2024-02-02T08:00:00\")));\npage.navigate(\"http://localhost:3333\");\nLocator locator = page.getByTestId(\"current-time\");\n\n// Pretend that the user closed the laptop lid and opened it again at 10am.\n// Pause the time once reached that point.\npage.clock().pauseAt(format.parse(\"2024-02-02T10:00:00\"));\n\n// Assert the page state.\nassertThat(locator).hasText(\"2/2/2024, 10:00:00 AM\");\n\n// Close the laptop lid again and open it at 10:30am.\npage.clock().fastForward(\"30:00\");\nassertThat(locator).hasText(\"2/2/2024, 10:30:00 AM\");\n```\n\n----------------------------------------\n\nTITLE: Triggering Select-All Keyboard Shortcut in Playwright (Java)\nDESCRIPTION: This Java snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.keyboard().press()` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.keyboard().press(\"ControlOrMeta+A\");\n```\n```\n\n----------------------------------------\n\nTITLE: Chaining Route Handlers with Route.abort and Route.fallback - Java\nDESCRIPTION: Shows the equivalent handler chaining in Java using Playwright. Multiple handlers registered; fallback passes control, abort terminates the chain. This facilitates structured request processing and is valuable for scenarios needing extensibility or prioritized middleware.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"**/*\", route -> {\n  // Runs last.\n  route.abort();\n});\n\npage.route(\"**/*\", route -> {\n  // Runs second.\n  route.fallback();\n});\n\npage.route(\"**/*\", route -> {\n  // Runs first.\n  route.fallback();\n});\n```\n\n----------------------------------------\n\nTITLE: Fulfilling Routes with Custom Responses in Java\nDESCRIPTION: Shows how to fulfill routes with custom responses using Playwright in Java. This example demonstrates responding with a 404 status code and a custom message for all requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_27\n\nLANGUAGE: java\nCODE:\n```\npage.route(\"**/*\", route -> {\n  route.fulfill(new Route.FulfillOptions()\n    .setStatus(404)\n    .setContentType(\"text/plain\")\n    .setBody(\"Not Found!\"));\n});\n```\n\n----------------------------------------\n\nTITLE: MSTest Test Class with Custom Context Options\nDESCRIPTION: Example of an MSTest test class that customizes BrowserContext options including color scheme, viewport size, and base URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync(\"/login\");\n    }\n\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = \"https://github.com\",\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic CSS Locator in Playwright\nDESCRIPTION: Demonstrates how to use a basic CSS selector to locate and click a button element across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('css=button').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"css=button\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"css=button\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"css=button\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"css=button\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Playwright Proxy Configuration in Node.js\nDESCRIPTION: This snippet configures a proxy server for tests using Playwright. The proxy settings include a server address, username, and password. It requires Node.js and Playwright to be configured in conjunction with an active proxy server.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://my-proxy:8080',\n      username: 'user',\n      password: 'secret'\n    },\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Snapshot Assertions Without Explicit Names Using SnapshotAssertions.toMatchSnapshot (JavaScript)\nDESCRIPTION: These examples cover using toMatchSnapshot without passing a file name, letting Playwright derive the snapshot name from the test context. Options can be supplied for customizing maxDiffPixels and threshold or providing an explicit name within the options object. This style supports organizing and parameterizing snapshots in tests run under the Playwright test runner, helping automate pixel-perfect UI verification.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-snapshotassertions.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Basic usage and the file name is derived from the test name.\nexpect(await page.screenshot()).toMatchSnapshot();\n```\n\nLANGUAGE: js\nCODE:\n```\n// Pass options to customize the snapshot comparison and have a generated name.\nexpect(await page.screenshot()).toMatchSnapshot({\n  maxDiffPixels: 27, // allow no more than 27 different pixels.\n});\n```\n\nLANGUAGE: js\nCODE:\n```\n// Configure image matching threshold and snapshot name.\nexpect(await page.screenshot()).toMatchSnapshot({\n  name: 'landing-page.png',\n  threshold: 0.3,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Client Requests in Node.js\nDESCRIPTION: This function allows access to HTTP client requests with options for socket creation. It enables customization of how socket connections are established for HTTP requests, with special handling for HTTPS requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncallback(http.ClientRequest req, Object options, Function cb) → undefined\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Test Declaration in JavaScript\nDESCRIPTION: Demonstrates how to import the test and expect functions from Playwright and write a basic test that navigates to a page and verifies content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  const name = await page.innerText('.navbar__title');\n  expect(name).toBe('Playwright');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Viewport Size for Playwright Tests\nDESCRIPTION: Example of setting a custom viewport size for all browser contexts created during tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture(scope=\"session\")\ndef browser_context_args(browser_context_args):\n    return {\n        **browser_context_args,\n        \"viewport\": {\n            \"width\": 1920,\n            \"height\": 1080,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Negated PageAssertions in C#\nDESCRIPTION: Example of using the .Not property to negate an assertion in C#, checking that a page URL doesn't contain 'error'. This demonstrates how to verify the absence of a pattern.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(Page).Not.ToHaveURLAsync(\"error\");\n```\n\n----------------------------------------\n\nTITLE: Global Timeout Configuration in Python\nDESCRIPTION: Shows how to set a global timeout for all Playwright assertions in Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import expect\n\nexpect.set_options(timeout=10_000)\n```\n\n----------------------------------------\n\nTITLE: Isolated API Request Context Cookie Management\nDESCRIPTION: Shows how to create and use an isolated APIRequestContext that maintains its own cookie storage separate from the browser context, with manual cookie state management.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntest('global context request has isolated cookie storage', async ({\n  page,\n  context,\n  browser,\n  playwright\n}) => {\n  // Create a new instance of APIRequestContext with isolated cookie storage.\n  const request = await playwright.request.newContext();\n  await context.route('https://www.github.com/', async route => {\n    const response = await request.fetch(route.request());\n    const responseHeaders = response.headers();\n\n    const responseCookies = new Map(responseHeaders['set-cookie']\n        .split('\\n')\n        .map(c => c.split(';', 2)[0].split('=')));\n    // The response will have 3 cookies in 'Set-Cookie' header.\n    expect(responseCookies.size).toBe(3);\n    const contextCookies = await context.cookies();\n    // The browser context will not have any cookies from the isolated API request.\n    expect(contextCookies.length).toBe(0);\n\n    // Manually export cookie storage.\n    const storageState = await request.storageState();\n    // Create a new context and initialize it with the cookies from the global request.\n    const browserContext2 = await browser.newContext({ storageState });\n    const contextCookies2 = await browserContext2.cookies();\n    // The new browser context will already contain all the cookies from the API response.\n    expect(\n        new Map(contextCookies2.map(({ name, value }) => [name, value]))\n    ).toEqual(responseCookies);\n\n    await route.fulfill({\n      response,\n      headers: { ...responseHeaders, foo: 'bar' },\n    });\n  });\n  await page.goto('https://www.github.com/');\n  await request.dispose();\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dialog Handling Causing Stall (Python Sync)\nDESCRIPTION: Demonstrates incorrect usage where a synchronous 'dialog' listener is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the synchronous action that triggered the dialog because web dialogs are modal.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.on(\"dialog\", lambda dialog: print(dialog.message))\npage.get_by_role(\"button\").click() # Will hang here\n```\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Popup Window in Playwright (Java)\nDESCRIPTION: Demonstrates waiting for a popup window using `page.waitForPopup` in Playwright for Java. This method accepts a lambda expression containing the code (`page.getByText(...).click()`) expected to open the popup. It returns the `Page` object for the newly opened popup window.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n```java\n// The callback lambda defines scope of the code that is expected to\n// create popup window.\nPage popup = page.waitForPopup(() -> {\n  page.getByText(\"open the popup\").click();\n});\npopup.navigate(\"https://wikipedia.org\");\n```\n```\n\n----------------------------------------\n\nTITLE: Hidden Elements Option for Role Selectors\nDESCRIPTION: Defines the `includeHidden` option for role-based selectors to control whether hidden elements are matched. By default, only visible elements are matched.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `includeHidden` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Video Path in Playwright - Java\nDESCRIPTION: This snippet demonstrates the use of Playwright to obtain the path of a video recording in Java. Users must ensure that the browser context is created with the recordVideo option for the path retrieval to function. It outputs the video path which is guaranteed to be complete and written upon closing the browser context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSystem.out.println(page.video().path());\n```\n\n----------------------------------------\n\nTITLE: Launching Browser and Navigating Page in Sync Playwright Python\nDESCRIPTION: This Python code snippet uses synchronous Playwright API to automate browser tasks. It requires the Playwright package and Python environment, demonstrating how to launch a Firefox browser, create a new page, and navigate to a webpage synchronously.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    firefox = playwright.firefox\n    browser = firefox.launch()\n    page = browser.new_page()\n    page.goto(\"https://example.com\")\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Asserting Banner ARIA Snapshot using Playwright Python (Sync)\nDESCRIPTION: This Python snippet shows the synchronous usage of ARIA snapshot testing. It navigates to 'https://playwright.dev/', selects the 'banner' element using a query selector, and asserts its accessibility tree against the provided YAML snapshot template using `to_match_aria_snapshot`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.goto('https://playwright.dev/')\nexpect(page.query_selector('banner')).to_match_aria_snapshot(\"\"\"\n  - banner:\n    - heading /Playwright enables reliable end-to-end/ [level=1]\n    - link \"Get started\"\n    - link \"Star microsoft/playwright on GitHub\"\n    - link /[\\\\d]+k\\\\+ stargazers on GitHub/\n\"\"\")\n```\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selectors with Playwright Frame - C#\nDESCRIPTION: Illustrates how to use Playwright in C# for selector evaluation on frame elements. Suitable for accessing element values or HTML content, while supporting tasks like joining HTML strings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar searchValue = await frame.EvalOnSelectorAsync<string>(\"#search\", \"el => el.value\");\nvar preloadHref = await frame.EvalOnSelectorAsync<string>(\"link[rel=preload]\", \"el => el.href\");\nvar html = await frame.EvalOnSelectorAsync(\".main-container\", \"(e, suffix) => e.outerHTML + suffix\", \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Debugging Playwright Tests with Inspector (Batch)\nDESCRIPTION: Commands to debug Playwright tests using the Playwright Inspector in Batch.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nset PWDEBUG=1\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions in Playwright Test\nDESCRIPTION: Sets up permissions for the test environment using the TestOptions.permissions property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    permissions: ['notifications'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Emulated Context with Playwright Library (JavaScript)\nDESCRIPTION: This snippet demonstrates using the Playwright library to create a new browser context that emulates an 'iPhone 13'. It retrieves the device parameters from `playwright.devices` and applies them when creating the context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-library\nconst { chromium, devices } = require('playwright');\nconst browser = await chromium.launch();\n\nconst iphone13 = devices['iPhone 13'];\nconst context = await browser.newContext({\n  ...iphone13,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Matching Body ARIA Snapshot using Playwright Python (Async)\nDESCRIPTION: This Python snippet demonstrates the asynchronous way to match the ARIA snapshot of the body element. It uses `await expect(page.locator(\"body\")).to_match_aria_snapshot()` with a template defining the expected 'heading' role and its name 'title'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait expect(page.locator(\"body\")).to_match_aria_snapshot(\"\"\"\n  - heading \"title\"\n\"\"\")\n```\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in Python (Sync)\nDESCRIPTION: Demonstrates how to serve static files as responses to specific routes using Playwright in Python with synchronous syntax. This example shows serving a JSON file for a specific endpoint.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\npage.route(\"**/xhr_endpoint\", lambda route: route.fulfill(path=\"mock_data.json\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Permissions in Python (Async)\nDESCRIPTION: Creates a new browser context with notification permissions using the Playwright Python async API. This enables notification capabilities for all pages within the context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(\n  permissions=['notifications'],\n)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Load State After Button Click in Python (Async)\nDESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in Python using async syntax. The method resolves after the 'load' event is fired.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_122\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"button\").click() # click triggers navigation.\nawait page.wait_for_load_state() # the promise resolves after \"load\" event.\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode via yarn - Bash\nDESCRIPTION: Executes Playwright test suites in UI mode with yarn, supplying a visual environment for managing and debugging tests. Useful for development and troubleshooting. Requires Playwright installed and configured.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Implementing Setup/Teardown for GitHub Repository in Playwright API Tests (Java)\nDESCRIPTION: This snippet enhances the test class by adding setup and teardown logic for managing a GitHub repository specific to the test run. It introduces `createTestRepository` (using POST to `/user/repos`) called in `@BeforeAll` and `deleteTestRepository` (using DELETE to `/repos/{user}/{repo}`) called in `@AfterAll`. This ensures a clean environment for the tests by creating the necessary repository before tests start and removing it afterward. Requires GITHUB_USER environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-java.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class TestGitHubAPI {\n  // ... (Previous setup and test code assumed here)\n\n  void createTestRepository() {\n    APIResponse newRepo = request.post(\"/user/repos\",\n      RequestOptions.create().setData(Collections.singletonMap(\"name\", REPO)));\n    assertTrue(newRepo.ok(), newRepo.text());\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n    createTestRepository();\n  }\n\n  void deleteTestRepository() {\n    if (request != null) {\n      APIResponse deletedRepo = request.delete(\"/repos/\" + USER + \"/\" + REPO);\n      assertTrue(deletedRepo.ok());\n    }\n  }\n  // ...\n\n  @AfterAll\n  void afterAll() {\n    deleteTestRepository();\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Certificates in Playwright Tests\nDESCRIPTION: Example showing how to provide client certificates for authentication with websites that require certificate-based authentication.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    clientCertificates: [{\n      origin: 'https://example.com',\n      certPath: './cert.pem',\n      keyPath: './key.pem',\n      passphrase: 'mysecretpassword',\n    }],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Page Navigation in Python (Async)\nDESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright's async API in Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Navigate the page\nawait page.goto(\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Passing a JSHandle as an Argument to page.evaluate in Python (Async)\nDESCRIPTION: Illustrates creating a JavaScript array in the page using `page.evaluate_handle`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.evaluate` to interact with the array (get length, add elements) and finally disposing of the handle using `dispose()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python async\n# Create new array in page.\nmy_array_handle = await page.evaluate_handle(\"\"\"() => {\n  window.myArray = [1];\n  return myArray;\n}\"\"\")\n\n# Get current length of the array.\nlength = await page.evaluate(\"a => a.length\", my_array_handle)\n\n# Add one more element to the array using the handle\nawait page.evaluate(\"(arg) => arg.myArray.push(arg.newElement)\", {\n  'myArray': my_array_handle,\n  'newElement': 2\n})\n\n# Release the object when it's no longer needed.\nawait my_array_handle.dispose()\n```\n```\n\n----------------------------------------\n\nTITLE: Evaluating Handles on Frame in Python (Sync)\nDESCRIPTION: Shows the synchronous usage of evaluate_handle method in Python to evaluate an expression and return a handle for the window object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\na_window_handle = frame.evaluate_handle(\"Promise.resolve(window)\")\na_window_handle # handle for the window object.\n```\n\n----------------------------------------\n\nTITLE: Monitoring JavaScript variables with sync Python\nDESCRIPTION: Shows how to wait for a JavaScript variable to change using wait_for_function in synchronous Python. The script sets a timer to change a variable and waits for that change to occur.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = webkit.launch()\n    page = browser.new_page()\n    page.evaluate(\"window.x = 0; setTimeout(() => { window.x = 100 }, 1000);\")\n    page.wait_for_function(\"() => window.x > 0\")\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Catching TimeoutError in Playwright (Sync Python)\nDESCRIPTION: This synchronous Python example uses `sync_playwright` to launch a Chromium browser and manage a page. It illustrates handling the `PlaywrightTimeoutError` (aliased from `playwright.sync_api.TimeoutError`) within a try-except block when an element click operation on 'Example' exceeds the specified 100ms timeout.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-timeouterror.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nfrom playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    try:\n      page.locator(\"text=Example\").click(timeout=100)\n    except PlaywrightTimeoutError:\n      print(\"Timeout!\")\n    browser.close()\n```\n```\n\n----------------------------------------\n\nTITLE: Using Strict Mode with Locators in C# Playwright\nDESCRIPTION: This code shows how to enable strict mode when creating a Locator, which ensures the selector points to a single element and throws an exception otherwise.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"button\", new() { Strict = true });\n```\n\n----------------------------------------\n\nTITLE: Generating Trusted Client Certificate\nDESCRIPTION: Creates a server-signed client certificate for valid authentication testing. Includes steps for generating the certificate request, signing with server certificate, and creating a PFX file with password protection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/client-certificates/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p client/trusted\n# generate server-signed (valid) certifcate\nopenssl req \\\n\t-newkey rsa:4096 \\\n\t-keyout client/trusted/key.pem \\\n\t-out client/trusted/csr.pem \\\n\t-nodes \\\n\t-days 365 \\\n\t-subj \"/CN=Alice\"\n\n# sign with server_cert.pem\nopenssl x509 \\\n\t-req \\\n\t-in client/trusted/csr.pem \\\n\t-CA server/server_cert.pem \\\n\t-CAkey server/server_key.pem \\\n\t-out client/trusted/cert.pem \\\n\t-set_serial 01 \\\n\t-days 365\n# create pfx\nopenssl pkcs12 -export -out client/trusted/cert.pfx -inkey client/trusted/key.pem -in client/trusted/cert.pem -passout pass:secure\n```\n\n----------------------------------------\n\nTITLE: Multi-language Aria Snapshot Examples\nDESCRIPTION: Examples of programmatically creating aria snapshots in different programming languages\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst snapshot = await page.locator('body').ariaSnapshot();\nconsole.log(snapshot);\n```\n\nLANGUAGE: python\nCODE:\n```\nsnapshot = page.locator(\"body\").aria_snapshot()\nprint(snapshot)\n```\n\nLANGUAGE: java\nCODE:\n```\nString snapshot = page.locator(\"body\").ariaSnapshot();\nSystem.out.println(snapshot);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar snapshot = await page.Locator(\"body\").AriaSnapshotAsync();\nConsole.WriteLine(snapshot);\n```\n\n----------------------------------------\n\nTITLE: Creating Emulated Context with Playwright Async API (Python)\nDESCRIPTION: This asynchronous Python snippet shows how to use `playwright.async_api` to launch a WebKit browser and create a new context emulating an 'iPhone 13'. Device parameters are retrieved from `playwright.devices` and passed to `browser.new_context`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python async\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    iphone_13 = playwright.devices['iPhone 13']\n    browser = await playwright.webkit.launch(headless=False)\n    context = await browser.new_context(\n        **iphone_13,\n    )\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n```\n\n----------------------------------------\n\nTITLE: Simple Playwright Fixture Usage in JUnit\nDESCRIPTION: Shows basic usage of Playwright fixtures in JUnit tests using the @UsePlaywright annotation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/junit-java.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@UsePlaywright\npublic class TestExample {\n\n  @Test\n  void basicTest(Page page) {\n    page.navigate(\"https://playwright.dev/\");\n\n    assertThat(page).hasTitle(Pattern.compile(\"Playwright\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CDPSession with Chrome DevTools Protocol in Python (Sync)\nDESCRIPTION: Shows synchronous Python code for working with CDPSession, enabling animation tracking, handling events, and modifying playback rates. This is the non-async version of the Python CDPSession API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = page.context.new_cdp_session(page)\nclient.send(\"Animation.enable\")\nclient.on(\"Animation.animationCreated\", lambda: print(\"animation created!\"))\nresponse = client.send(\"Animation.getPlaybackRate\")\nprint(\"playback rate is \" + str(response[\"playbackRate\"]))\nclient.send(\"Animation.setPlaybackRate\", {\n    \"playbackRate\": response[\"playbackRate\"] / 2\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Accessibility Rules\nDESCRIPTION: Shows how to disable individual accessibility rules when dealing with known violations that cannot be immediately fixed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/accessibility-testing-java.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nAxeResults accessibilityScanResults = new AxeBuilder(page)\n  .disableRules(Arrays.asList(\"duplicate-id\"))\n  .analyze();\n\nAssertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n```\n\n----------------------------------------\n\nTITLE: Typing Text with Playwright Keyboard in Python (Sync)\nDESCRIPTION: Shows how to use the Keyboard.type method in Python with synchronous syntax for both instant and delayed typing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\npage.keyboard.type(\"Hello\") # types instantly\npage.keyboard.type(\"World\", delay=100) # types slower, like a user\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Canary Release via NPM in Bash\nDESCRIPTION: This Bash snippet installs the latest canary (unreleased) version of the @playwright/test package using npm with the '@next' tag. To use, developers should have Node.js and npm installed, and should run this in the root directory of their Node.js project. The '@next' tag ensures that the prerelease version is installed as a dev dependency, unlocking access to daily features before they reach stable release. The command takes no parameters and produces no direct output; instead, it updates the project's package.json and installs the prerelease package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/canary-releases-js.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @playwright/test@next\n```\n\n----------------------------------------\n\nTITLE: Enabling Touch Events in Browser Context\nDESCRIPTION: Defines the hasTouch option for browser contexts. This specifies whether the viewport supports touch events, defaulting to false.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_54\n\nLANGUAGE: js\nCODE:\n```\n- `hasTouch` <[boolean]>\n\nSpecifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation.md#devices).\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Position for Playwright Drag Actions\nDESCRIPTION: Defines the `sourcePosition` object parameter for Playwright drag-and-drop actions. It specifies the coordinates (`x`, `y`) relative to the top-left corner of the source element's padding box where the drag should initiate. If not provided, a visible point on the element is used.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n- `sourcePosition` <[Object]>\n  - `x` <[float]>\n  - `y` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Matching Arrays Containing Elements with expect.arrayContaining in JavaScript\nDESCRIPTION: Illustrates `expect.arrayContaining(expectedArray)` used within `expect().toEqual()` in Playwright. This matcher asserts that the received array contains all elements from the `expectedArray`, regardless of order. The received array can contain additional elements not present in the expected array.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexpect([1, 2, 3]).toEqual(expect.arrayContaining([3, 1]));\nexpect([1, 2, 3]).not.toEqual(expect.arrayContaining([1, 4]));\n```\n```\n\n----------------------------------------\n\nTITLE: WebSocket Routing in Java\nDESCRIPTION: Demonstrates how to intercept and mock WebSocket connections using the new routeWebSocket method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npage.routeWebSocket(\"/ws\", ws -> {\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      ws.send(\"response\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Sharded Tests\nDESCRIPTION: GitHub Actions workflow configuration for running Playwright tests across multiple shards and uploading blob reports as artifacts for later merging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright-tests:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        shardIndex: [1, 2, 3, 4]\n        shardTotal: [4]\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: lts/*\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright browsers\n      run: npx playwright install --with-deps\n\n    - name: Run Playwright tests\n      run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}\n\n    - name: Upload blob report to GitHub Actions Artifacts\n      if: ${{ !cancelled() }}\n      uses: actions/upload-artifact@v4\n      with:\n        name: blob-report-${{ matrix.shardIndex }}\n        path: blob-report\n        retention-days: 1\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Default Browser Arguments in Playwright (CSharp/Java)\nDESCRIPTION: Defines the `ignoreDefaultArgs` browser launch option for Playwright in C# and Java. Expects an array of strings specifying which default launch arguments to filter out. This is a potentially dangerous option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n- `ignoreDefaultArgs` <[Array]<[string]>>\n```\n\n----------------------------------------\n\nTITLE: Recording HAR File in Java\nDESCRIPTION: Java implementation for recording network traffic to a HAR file using Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Get the response from the HAR file\npage.routeFromHAR(Path.of(\"./hars/fruit.har\"), new RouteFromHAROptions()\n  .setUrl(\"*/**/api/v1/fruits\")\n  .setUpdate(true)\n);\n\n// Go to the page\npage.navigate(\"https://demo.playwright.dev/api-mocking\");\n\n// Assert that the fruit is visible\nassertThat(page.getByText(\"Strawberry\")).isVisible();\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators with Negative Conditions\nDESCRIPTION: Demonstrates using hasNot and hasNotText filters to exclude elements based on specific conditions\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nLocator rowLocator = page.locator(\"tr\");\nrowLocator\n    .filter(new Locator.FilterOptions().setHasNotText(\"text in column 1\"))\n    .filter(new Locator.FilterOptions().setHasNot(\n      page.getByRole(AriaRole.BUTTON,\n        new Page.GetByRoleOptions().setName(\"column 2 button\" ))))\n    .screenshot();\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelector in Python (Async)\nDESCRIPTION: Examples of using the eval_on_selector method in Python with async/await to evaluate expressions on elements matching a selector. This async method finds an element and passes it to the provided JavaScript expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nsearch_value = await page.eval_on_selector(\"#search\", \"el => el.value\")\npreload_href = await page.eval_on_selector(\"link[rel=preload]\", \"el => el.href\")\nhtml = await page.eval_on_selector(\".main-container\", \"(e, suffix) => e.outer_html + suffix\", \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport via Context Options (JavaScript Library)\nDESCRIPTION: This snippet shows how to create a new browser context with a specific viewport size using the Playwright JavaScript library. The `viewport` option is passed directly to `browser.newContext`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-library\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1280, height: 1024 }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Timezone via Context Options (Python Async)\nDESCRIPTION: This asynchronous Python snippet shows setting the locale and timezone when creating a new browser context using `playwright.async_api`. The `locale` and `timezone_id` parameters are passed to `browser.new_context`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n```python async\ncontext = await browser.new_context(\n  locale='de-DE',\n  timezone_id='Europe/Berlin',\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright for Sequential Test Execution with Test List File\nDESCRIPTION: This Playwright configuration file disables parallel execution by setting workers to 1 and specifies the test list file to use. These settings are necessary when using the test list approach to control test execution order.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 1,\n  testMatch: 'test.list.ts',\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Screenshots with toHaveScreenshot in JavaScript\nDESCRIPTION: Shows how to use the toHaveScreenshot method to compare a locator's screenshot with an expected image. This method waits for two consecutive screenshots to be the same before comparison. Note that this only works with the Playwright test runner.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByRole('button');\nawait expect(locator).toHaveScreenshot('image.png');\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Permissions in Java\nDESCRIPTION: Creates a new browser context with notification permissions using the Playwright Java client. This allows pages within this context to display notifications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setPermissions(Arrays.asList(\"notifications\")));\n```\n\n----------------------------------------\n\nTITLE: Programmatic HAR Recording in C#\nDESCRIPTION: Demonstrates how to programmatically record network traffic to a HAR file using browser context options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await browser.NewContextAsync(new()\n{\n  RecordHarPath = harPath,\n  RecordHarUrlFilterString = \"**/api/**\",\n});\n\n// ... Perform actions ...\n\n// Close context to ensure HAR is saved to disk.\ncontext.CloseAsync();\n```\n\n----------------------------------------\n\nTITLE: Mocking WebSocket Responses in Python (Sync)\nDESCRIPTION: This code snippet shows how to intercept WebSocket connections and mock the entire communication in Python using synchronous syntax. It responds to a 'request' message with a 'response'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    ws.send(\"response\")\n\npage.route_web_socket(\"wss://example.com/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Option for Tests in Playwright\nDESCRIPTION: Demonstrates how to use `test.use` to set the locale option for all tests in a file. This affects the default context and page configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.use({ locale: 'en-US' });\n\ntest('test with locale', async ({ page }) => {\n  // Default context and page have locale as specified\n});\n```\n\n----------------------------------------\n\nTITLE: Using Locator Handlers in Playwright\nDESCRIPTION: Implementation of locator handlers with options for overlay handling and maximum execution times\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = page.getByText('This interstitial covers the button');\nawait page.addLocatorHandler(locator, async overlay => {\n  await overlay.locator('#close').click();\n}, { times: 3, noWaitAfter: true });\n// Run your tests that can be interrupted by the overlay.\n// ...\nawait page.removeLocatorHandler(locator);\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Playwright Tests (Java/Maven)\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for running Playwright tests in a Java project managed by Maven. Triggered by pushes and pull requests to main/master, it checks out the code, sets up Java 17 (Temurin distribution), builds the project and installs dependencies using `mvn install` (skipping tests during this phase), installs Playwright browsers via the Playwright CLI invoked through Maven's exec plugin, and finally runs the tests using `mvn test`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n    - name: Build & Install\n      run: mvn -B install -D skipTests --no-transfer-progress\n    - name: Ensure browsers are installed\n      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps\"\n    - name: Run tests\n      run: mvn test\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Request Headers with Playwright Route.continue_ - Python (Sync)\nDESCRIPTION: Shows synchronous usage of Playwright's route.continue_ for overriding headers in Python. Requires the synchronous Playwright API. The handler is registered via page.route, modifies headers, and calls route.continue_. Limitations: does not allow overriding 'Cookie', and must be run in an environment where synchronous handlers are supported.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-route.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef handle(route, request):\n    # override headers\n    headers = {\n        **request.headers,\n        \"foo\": \"foo-value\", # set \"foo\" header\n        \"bar\": None # remove \"bar\" header\n    }\n    route.continue_(headers=headers)\n\npage.route(\"**/*\", handle)\n```\n\n----------------------------------------\n\nTITLE: Creating Fixtures for Extension Testing - Python\nDESCRIPTION: This Python test configuration file demonstrates how to create fixtures for running and testing extensions using Playwright. It prepares a browser context, retrieves the extension ID, and includes test functions to evaluate the extension's functionality. It depends on pytest and Playwright libraries.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Generator\nfrom pathlib import Path\nfrom playwright.sync_api import Playwright, BrowserContext\nimport pytest\n\n\n@pytest.fixture()\ndef context(playwright: Playwright) -> Generator[BrowserContext, None, None]:\n    path_to_extension = Path(__file__).parent.joinpath(\"my-extension\")\n    context = playwright.chromium.launch_persistent_context(\n        \"\",\n        channel=\"chromium\",\n        args=[\n            f\"--disable-extensions-except={path_to_extension}\",\n            f\"--load-extension={path_to_extension}\",\n        ],\n    )\n    yield context\n    context.close()\n\n\n@pytest.fixture()\ndef extension_id(context) -> Generator[str, None, None]:\n    # for manifest v2:\n    # background = context.background_pages[0]\n    # if not background:\n    #     background = context.wait_for_event(\"backgroundpage\")\n\n    # for manifest v3:\n    background = context.service_workers[0]\n    if not background:\n        background = context.wait_for_event(\"serviceworker\")\n\n    extension_id = background.url.split(\"/\")[2]\n    yield extension_id\n\n```\n\n----------------------------------------\n\nTITLE: Capturing Accessibility Snapshot with Playwright in Python (Async)\nDESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `snapshot()`. Logs the snapshot to the console. Requires setup with Playwright and a page instance, utilizing Python's async capabilities. Returns the root accessible node as a Python dictionary.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsnapshot = await page.accessibility.snapshot()\nprint(snapshot)\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript on DOM Elements by Selector\nDESCRIPTION: Defines the pageFunction parameter for evalOnSelector method in JavaScript. This function will be evaluated in the page context with the selected DOM element as its argument.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_44\n\nLANGUAGE: js\nCODE:\n```\n- `pageFunction` <[function]\\([Element]\\)|[string]>\n\nFunction to be evaluated in the page context.\n```\n\n----------------------------------------\n\nTITLE: Boxing Test Steps in Playwright\nDESCRIPTION: Explains how to use the 'box' option in test.step() to change error reporting behavior. Boxed steps report errors at the step call site rather than inside the step implementation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nasync function login(page) {\n  await test.step('login', async () => {\n    // ...\n  }, { box: true });  // Note the \"box\" option here.\n}\n\ntest('example', async ({ page }) => {\n  await page.goto('https://github.com/login');\n  await login(page);\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Multiple Elements in C#\nDESCRIPTION: Demonstrates using the new Locator.all method to iterate over all matching elements and perform an action on each. This example checks all checkboxes on a page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n// Check all checkboxes!\nvar checkboxes = Page.GetByRole(AriaRole.Checkbox);\nforeach (var checkbox in await checkboxes.AllAsync())\n  await checkbox.CheckAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart Form Data in Playwright\nDESCRIPTION: Example of using FormData with apiRequestContext.fetch() for handling multiple file uploads\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst formData = new FormData();\nformData.append('file', new File(['let x = 2024;'], 'f1.js', { type: 'text/javascript' }));\nformData.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));\ncontext.request.post('https://example.com/uploadFiles', {\n  multipart: formData\n});\n```\n\n----------------------------------------\n\nTITLE: Blocking WebSocket Messages in Both Directions with Playwright in C#\nDESCRIPTION: Configures Playwright in C# to block specific WebSocket messages in both client and server directions. Requires .NET environment with Playwright setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteWebSocketAsync(\"/ws\", ws => {\n  var server = ws.ConnectToServer();\n  ws.OnMessage(frame => {\n    if (frame.Text != \"blocked-from-the-page\")\n      server.Send(frame.Text);\n  });\n  server.OnMessage(frame => {\n    if (frame.Text != \"blocked-from-the-server\")\n      ws.Send(frame.Text);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Puppeteer tests to Playwright Test\nDESCRIPTION: Equivalent testing example using Playwright Test, showcasing the simplified syntax and built-in fixtures for web testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/puppeteer-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Playwright homepage', () => {\n  test('contains hero title', async ({ page }) => {\n    await page.goto('https://playwright.dev/');\n    const titleLocator = page.locator('.hero__title');\n    await expect(titleLocator).toContainText(\n        'Playwright enables reliable end-to-end testing'\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Focused Parallel Test Group with Test.describe.parallel.only in JavaScript\nDESCRIPTION: Shows how to use test.describe.parallel.only to declare a focused group of tests that could be run in parallel.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe.parallel.only('group', () => {\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Worker Policy\nDESCRIPTION: Controls whether Service Workers can be registered in the browser context. Can be set to allow or block Service Workers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n- `serviceWorkers` <[ServiceWorkerPolicy]<\"allow\"|\"block\">>\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificates for Browser Context in C#\nDESCRIPTION: This code shows how to provide client certificates when creating a new browser context for TLS Client Authentication. It sets up a client certificate for a specific origin.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await Browser.NewContextAsync(new() {\n  ClientCertificates = [\n    new() {\n      Origin = \"https://example.com\",\n      CertPath = \"client-certificates/cert.pem\",\n      KeyPath = \"client-certificates/key.pem\",\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Traces Using Playwright Library API\nDESCRIPTION: Code example showing how to programmatically record traces using the Playwright library API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\n\n// Start tracing before creating / navigating a page.\nawait context.tracing.start({ screenshots: true, snapshots: true });\n\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Wait For Function Timeout (JavaScript)\nDESCRIPTION: Sets the maximum waiting time in milliseconds for `waitForFunction` operations in Playwright for JavaScript. It defaults to 0 (no timeout). This default can be altered via the `actionTimeout` option in the configuration or by using `BrowserContext.setDefaultTimeout` or `Page.setDefaultTimeout` methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- `timeout` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Configuration for Playwright\nDESCRIPTION: Basic configuration setup for using Vite with Playwright component testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/experimental-ct-react';\n\nexport default defineConfig({\n  use: {\n    ctViteConfig: {\n      // ...\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing APK Files onto AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.installApk installs an APK file via a file path or Buffer. Optional args (array of strings) may be supplied for shell:cmd package install. This enables automation of app deployment for testing. Inputs: file path/Buffer, optional shell arguments. No outputs; throws on error.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Installs an apk on the device.\nawait androidDevice.installApk({\n  file: '/path/to/app.apk',\n  args: ['-r', '-t', '-S'] // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Using the 'not' Property in GenericAssertions\nDESCRIPTION: Demonstrates how to use the 'not' property to invert an assertion. This example shows a passing test where a value is not equal to 2.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = 1;\nexpect(value).not.toBe(2);\n```\n\n----------------------------------------\n\nTITLE: Recording Playwright Tests with Custom Setup in C#\nDESCRIPTION: C# example demonstrating Playwright recording in a custom environment. The code launches Chrome in headed mode, creates a new browser context with route handling, and pauses the page to enable manual recording through codegen.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nvar chromium = playwright.Chromium;\n// Make sure to run headed.\nvar browser = await chromium.LaunchAsync(new() { Headless = false });\n\n// Setup context however you like.\nvar context = await browser.NewContextAsync(); // Pass any options\nawait context.RouteAsync(\"**/*\", route => route.ContinueAsync());\n\n// Pause the page, and start recording manually.\nvar page = await context.NewPageAsync();\nawait page.PauseAsync();\n```\n\n----------------------------------------\n\nTITLE: Pulling Playwright Docker Image for Python\nDESCRIPTION: Command to pull the Playwright Docker image for Python applications from Microsoft Artifact Registry.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mcr.microsoft.com/playwright/python:v%%VERSION%%-noble\n```\n\n----------------------------------------\n\nTITLE: Using Aria Snapshots with Children and URL Properties\nDESCRIPTION: Demonstrates using Aria Snapshots with the new /children property for strict matching and /url for links.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Expect(locator).ToMatchAriaSnapshotAsync(@\"\n    - list\n      - /children: equal\n      - listitem: Feature A\n      - listitem:\n        - link \"\"Feature B\"\":\n          - /url: \"\"https://playwright.dev\"\"\n  \");\n```\n\n----------------------------------------\n\nTITLE: Evaluating JSHandle in Python (Async)\nDESCRIPTION: Illustrates evaluating a JSHandle to get the innerText of a tweet's retweets element in Python with async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntweet_handle = await page.query_selector(\".tweet .retweets\")\nassert await tweet_handle.evaluate(\"node => node.innerText\") == \"10 retweets\"\n```\n\n----------------------------------------\n\nTITLE: JUnit Parallel Execution Configuration\nDESCRIPTION: Configuration settings for JUnit parallel test execution with Playwright. This configuration enables parallel execution at the class level while ensuring tests within the same class run sequentially for thread safety.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njunit.jupiter.execution.parallel.enabled = true\njunit.jupiter.execution.parallel.mode.default = same_thread\njunit.jupiter.execution.parallel.mode.classes.default = concurrent\njunit.jupiter.execution.parallel.config.strategy=dynamic\njunit.jupiter.execution.parallel.config.dynamic.factor=0.5\n```\n\n----------------------------------------\n\nTITLE: Injecting Initialization Script via Path (JavaScript)\nDESCRIPTION: Illustrates injecting a JavaScript initialization file into the page before scripts run using addInitScript with a file path. The preload.js file should be present in the current directory. Used to manipulate or seed the page's environment prior to any user scripts. Requires Playwright and access to the file system.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n// In your playwright script, assuming the preload.js file is in same directory\nawait page.addInitScript({ path: './preload.js' });\n```\n\n----------------------------------------\n\nTITLE: Obtain Response Status Text\nDESCRIPTION: The `Response.statusText` method returns a string representing the status text of a response, such as 'OK' for successful requests. This is useful for readability and logging purposes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst statusText = response.statusText();\\nconsole.log('Status Text:', statusText);\n```\n\n----------------------------------------\n\nTITLE: Multiple Elements Class List HTML\nDESCRIPTION: HTML structure showing a list of div elements with different class combinations for testing array-based class assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div class='list'></div>\n  <div class='component inactive'></div>\n  <div class='component active'></div>\n  <div class='component inactive'></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Emulating Geolocation, Language and Timezone with Playwright Codegen for Python\nDESCRIPTION: Command to generate code while emulating Rome, Italy location, Italian language, and European/Rome timezone for Bing Maps using Python. This demonstrates testing location-aware applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport and High-DPI via Context/Page (JavaScript Library)\nDESCRIPTION: This snippet provides examples using the Playwright JavaScript library for: creating a context with a specific viewport, resizing the viewport for an individual page using `page.setViewportSize`, and creating a context that emulates a high-DPI screen by setting both `viewport` and `deviceScaleFactor`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab=js-library\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1280, height: 1024 }\n});\n\n// Resize viewport for individual page\nawait page.setViewportSize({ width: 1600, height: 1200 });\n\n// Emulate high-DPI\nconst context = await browser.newContext({\n  viewport: { width: 2560, height: 1440 },\n  deviceScaleFactor: 2,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using toBeLessThan Method for Numeric Comparisons\nDESCRIPTION: Demonstrates the use of 'toBeLessThan' method to check if a value is less than another value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = 42;\nexpect(value).toBeLessThan(100);\n```\n\n----------------------------------------\n\nTITLE: Using toContainClass Assertion in Playwright v1.52\nDESCRIPTION: Code example demonstrating the new toContainClass method in LocatorAssertions to assert that an element contains a specific class name.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait expect(page.getByRole('listitem', { name: 'Ship v1.52' })).toContainClass('done');\n```\n\n----------------------------------------\n\nTITLE: Tagging Tests with Test.describe in JavaScript\nDESCRIPTION: Demonstrates how to tag all tests in a group by providing additional details. Each tag must start with the @ symbol.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two tagged tests', {\n  tag: '@smoke',\n}, () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Stylesheet in Playwright Config (JavaScript)\nDESCRIPTION: This snippet shows how to set a default custom stylesheet for all screenshot comparisons in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  expect: {\n    toHaveScreenshot: {\n      stylePath: './screenshot.css'\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Dragstart Event with DataTransfer in Python (Sync)\nDESCRIPTION: Demonstrates dispatching a dragstart event with a DataTransfer object on an ElementHandle in Python using synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndata_transfer = page.evaluate_handle(\"new DataTransfer()\")\nelement_handle.dispatch_event(\"#source\", \"dragstart\", {\"dataTransfer\": data_transfer})\n```\n\n----------------------------------------\n\nTITLE: Async Role Selector Usage in Python\nDESCRIPTION: Demonstrates async/await pattern for using role selectors with button elements\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Click a button with accessible name \"log in\"\nawait page.locator(\"role=button[name='log in']\").click()\n```\n\n----------------------------------------\n\nTITLE: Navigation Example in Playwright\nDESCRIPTION: Shows how to perform basic page navigation in Playwright tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.GotoAsync(\"https://playwright.dev\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync Pinch Gesture for Google Maps with Playwright\nDESCRIPTION: This synchronous Python script uses Playwright to simulate a pinch-in gesture on Google Maps. It includes functions for creating touch events, navigating to Google Maps, performing the pinch gesture, and taking a screenshot.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, expect\n\ndef pinch(locator, arg):\n    bounds = locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2\n\n    deltaX = arg.get('deltaX', 50)\n    steps = arg.get('steps', 5)\n    stepDeltaX = deltaX / (steps + 1)\n\n    touches = [\n        {\n            'identifier': 0,\n            'clientX': centerX - (deltaX if arg.get('direction') == 'in' else stepDeltaX),\n            'clientY': centerY,\n        },\n        {\n            'identifier': 1,\n            'clientX': centerX + (deltaX if arg.get('direction') == 'in' else stepDeltaX),\n            'clientY': centerY,\n        },\n    ]\n    locator.dispatch_event('touchstart', {\n        'touches': touches,\n        'changedTouches': touches,\n        'targetTouches': touches\n    })\n\n    for i in range(1, steps + 1):\n        offset = deltaX - i * stepDeltaX if arg.get('direction') == 'in' else stepDeltaX * (i + 1)\n        touches = [\n            {\n                'identifier': 0,\n                'clientX': centerX - offset,\n                'clientY': centerY,\n            },\n            {\n                'identifier': 1,\n                'clientX': centerX + offset,\n                'clientY': centerY,\n            },\n        ]\n        locator.dispatch_event('touchmove', {\n            'touches': touches,\n            'changedTouches': touches,\n            'targetTouches': touches\n        })\n\n    locator.dispatch_event('touchend', {\n        'touches': [],\n        'changedTouches': [],\n        'targetTouches': []\n    })\n\ndef test_pinch_in_gesture_to_zoom_out_the_map(page):\n    page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')\n    page.get_by_role('button', name='Keep using web').click()\n    expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()\n    met = page.locator('[data-test-id=\"met\"]')\n    for _ in range(5):\n        pinch(met, {'deltaX': 40, 'direction': 'in'})\n    page.screenshot(path=\"screenshot.png\")\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    context = browser.new_context(**p.devices['Pixel 7'])\n    page = context.new_page()\n    test_pinch_in_gesture_to_zoom_out_the_map(page)\n    browser.close()\n```\n\n----------------------------------------\n\nTITLE: Filtering Visible Elements in Playwright Python\nDESCRIPTION: Example of using the new filter option to match only visible elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Ignore invisible todo items.\ntodo_items = page.get_by_test_id(\"todo-item\").filter(visible=True)\n# Check there are exactly 3 visible ones.\nawait expect(todo_items).to_have_count(3)\n```\n\n----------------------------------------\n\nTITLE: Alternative Dialog Handling in Java\nDESCRIPTION: Shows an alternative way to handle dialogs in Java using Playwright, equivalent to the onceDialog method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_68\n\nLANGUAGE: java\nCODE:\n```\nConsumer<Dialog> handler = new Consumer<Dialog>() {\n  @Override\n  public void accept(Dialog dialog) {\n    dialog.accept(\"foo\");\n    page.offDialog(this);\n  }\n};\npage.onDialog(handler);\n\n// prints 'foo'\nSystem.out.println(page.evaluate(\"prompt('Enter string:')\"));\n\n// prints 'null' as the dialog will be auto-dismissed because there are no handlers.\nSystem.out.println(page.evaluate(\"prompt('Enter string:'\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Model Name from AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.model returns the device model as a string synchronously. Requires no parameters, outputs a string identifier for the hardware—useful for device-specific logic branches.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// Gets the device model.\nconst model = androidDevice.model();\nconsole.log(model);\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL Navigation in C#\nDESCRIPTION: This snippet shows how to use Frame.WaitForURLAsync to wait for navigation to a specific URL after clicking a link in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_54\n\nLANGUAGE: csharp\nCODE:\n```\nawait frame.ClickAsync(\"a.delayed-navigation\"); // clicking the link will indirectly cause a navigation\nawait frame.WaitForURLAsync(\"**/target.html\");\n```\n\n----------------------------------------\n\nTITLE: Debugging Playwright Tests with Inspector (Bash)\nDESCRIPTION: Command to debug Playwright tests using the Playwright Inspector in Bash.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nPWDEBUG=1 dotnet test\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameterized Projects in TypeScript\nDESCRIPTION: This TypeScript configuration file defines multiple test projects with different values for the custom 'person' option, allowing tests to be run in multiple configurations with proper type checking.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport type { TestOptions } from './my-test';\n\nexport default defineConfig<TestOptions>({\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Error Output Example for Failed Assertion with Custom Message\nDESCRIPTION: Shows how error reporting displays the custom message when an assertion fails, providing better context in error logs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n    Error: should be logged in\n\n    Call log:\n      - expect.toBeVisible with timeout 5000ms\n      - waiting for \"getByText('Name')\"\n\n\n      2 |\n      3 | test('example test', async({ page }) => {\n    > 4 |   await expect(page.getByText('Name'), 'should be logged in').toBeVisible();\n        |                                                                  ^\n      5 | });\n      6 |\n```\n\n----------------------------------------\n\nTITLE: Recording Playwright Tests with Custom Setup in Python (Async)\nDESCRIPTION: Asynchronous Python example for Playwright recording with custom setup. It launches Chrome in headed mode, sets up context with custom routing, and uses page.pause() to enable manual recording through the codegen UI.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        # Make sure to run headed.\n        browser = await p.chromium.launch(headless=False)\n\n        # Setup context however you like.\n        context = await browser.new_context() # Pass any options\n        await context.route('**/*', lambda route: route.continue_())\n\n        # Pause the page, and start recording manually.\n        page = await context.new_page()\n        await page.pause()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Handling WebView2 Initialization in C#\nDESCRIPTION: This snippet shows how to handle the CoreWebView2InitializationCompleted event in C# to ensure that the WebView2 control is ready for use.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nthis.webView.CoreWebView2InitializationCompleted += (_, e) =>\n{\n    if (e.IsSuccess)\n    {\n        Console.WriteLine(\"WebView2 initialized\");\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Partial ARIA Snapshot Matching List with Specific Child in YAML\nDESCRIPTION: This YAML snippet demonstrates a partial ARIA snapshot template for a list. It matches the 'list' role and specifically requires a child 'listitem' with the name 'Feature B'. Other list items ('Feature A', 'Feature C') are ignored, showcasing how to verify specific parts of a structure while allowing variations elsewhere.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n- list\n  - listitem: Feature B\n```\n```\n\n----------------------------------------\n\nTITLE: Evaluating JSHandle in Python (Sync)\nDESCRIPTION: Shows how to evaluate a JSHandle to get the innerText of a tweet's retweets element in Python with synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntweet_handle = page.query_selector(\".tweet .retweets\")\nassert tweet_handle.evaluate(\"node => node.innerText\") == \"10 retweets\"\n```\n\n----------------------------------------\n\nTITLE: Opening Playwright HTML Report via yarn - Bash\nDESCRIPTION: Uses yarn to launch the Playwright HTML test report for interactive review. Requires prior test execution and an available report. Allows filtering and investigation of test runs by various criteria such as result type or browser.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright show-report\n```\n\n----------------------------------------\n\nTITLE: Handling Page Load Event in Multiple Languages\nDESCRIPTION: These snippets show how to listen for the 'load' event on a page in JavaScript, Java, Python, and C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npage.once('load', () => console.log('Page loaded!'));\n```\n\nLANGUAGE: java\nCODE:\n```\npage.onLoad(p -> System.out.println(\"Page loaded!\"));\n```\n\nLANGUAGE: python\nCODE:\n```\npage.once(\"load\", lambda: print(\"page loaded!\"))\n```\n\nLANGUAGE: csharp\nCODE:\n```\npage.Load += (_, _) => Console.WriteLine(\"Page loaded!\");\n```\n\n----------------------------------------\n\nTITLE: JavaScript Empty Snapshot Generation\nDESCRIPTION: Code showing how to generate a new snapshot using an empty template\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(locator).toMatchAriaSnapshot('');\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Locator in C# using Playwright\nDESCRIPTION: This C# code snippet demonstrates how to use the WaitForAsync method on a Locator to wait for an element to become visible on the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderSent = page.Locator(\"#order-sent\");\norderSent.WaitForAsync();\n```\n\n----------------------------------------\n\nTITLE: Filling Input Fields on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.fill fills an input field located by selector with the specified text. Parameters are selector (AndroidSelector) and text (string). Timeout may be set. The method automates text entry for form fields and credentials. Inputs: selector and text values. No outputs except UI state change.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Fills an input box with text.\nawait androidDevice.fill({\n  selector: mySelector,\n  text: 'Hello World',\n  timeout: 3000 // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Group of Tests with Test.describe in JavaScript\nDESCRIPTION: Demonstrates how to use test.describe to group tests with a title. The title will be visible in the test report as part of each test's title.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe('two tests', () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: HTML List for Partial ARIA Snapshot Matching Example\nDESCRIPTION: This HTML snippet presents an unordered list (ul) containing three list items (li). It serves as an example for demonstrating partial matching of child elements within a parent in an ARIA snapshot.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n```html\n<ul>\n  <li>Feature A</li>\n  <li>Feature B</li>\n  <li>Feature C</li>\n</ul>\n```\n```\n\n----------------------------------------\n\nTITLE: Using Playwright for JavaScript Coverage Analysis\nDESCRIPTION: This JavaScript snippet demonstrates how to use Playwright to gather JavaScript coverage data and convert it into an Istanbul report format. It initializes a Chromium browser instance, starts JavaScript coverage, navigates to a URL, and then processes the coverage information using the v8-to-istanbul library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-coverage.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { chromium } = require('playwright');\nconst v8toIstanbul = require('v8-to-istanbul');\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.coverage.startJSCoverage();\n  await page.goto('https://chromium.org');\n  const coverage = await page.coverage.stopJSCoverage();\n  for (const entry of coverage) {\n    const converter = v8toIstanbul('', 0, { source: entry.source });\n    await converter.load();\n    converter.applyCoverage(entry.functions);\n    console.log(JSON.stringify(converter.toIstanbul()));\n  }\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Emulating Dark Color Scheme with Playwright Codegen for C#\nDESCRIPTION: Command to generate code while emulating dark color scheme for the playwright.dev website using C#. This PowerShell execution allows testing appearance and functionality in dark mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 codegen --color-scheme=dark playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Using Specific Browser Channel in Playwright Tests\nDESCRIPTION: Example showing how to configure a specific browser channel (e.g., 'msedge' for Microsoft Edge) to use for testing instead of the default browser version.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Microsoft Edge',\n      use: {\n        ...devices['Desktop Edge'],\n        channel: 'msedge'\n      },\n    },\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling a One-Off Dialog Event in Playwright (Sync Python)\nDESCRIPTION: Illustrates using `page.once` in synchronous Playwright for Python to handle the 'dialog' event just once. A lambda function is used to accept the dialog with '2021' when the prompt is triggered by `page.evaluate`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.once(\"dialog\", lambda dialog: dialog.accept(\"2021\"))\npage.evaluate(\"prompt('Enter a number:')\")\n```\n```\n\n----------------------------------------\n\nTITLE: Observing Viewport Size Change with Frame.waitForFunction in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Frame.waitForFunction to observe changes in the viewport size. It launches a Firefox browser, creates a new page, sets up a watchdog to wait for the inner width to become less than 100 pixels, and then changes the viewport size.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');\n  await page.setViewportSize({ width: 50, height: 50 });\n  await watchDog;\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: ARIA Role Parameter for Accessibility Selectors\nDESCRIPTION: Defines the `role` parameter that accepts standard ARIA role values for finding elements based on their accessibility roles.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\n- `role` <[AriaRole]<\"alert\"|\"alertdialog\"|\"application\"|\"article\"|\"banner\"|\"blockquote\"|\"button\"|\"caption\"|\"cell\"|\"checkbox\"|\"code\"|\"columnheader\"|\"combobox\"|\"complementary\"|\"contentinfo\"|\"definition\"|\"deletion\"|\"dialog\"|\"directory\"|\"document\"|\"emphasis\"|\"feed\"|\"figure\"|\"form\"|\"generic\"|\"grid\"|\"gridcell\"|\"group\"|\"heading\"|\"img\"|\"insertion\"|\"link\"|\"list\"|\"listbox\"|\"listitem\"|\"log\"|\"main\"|\"marquee\"|\"math\"|\"meter\"|\"menu\"|\"menubar\"|\"menuitem\"|\"menuitemcheckbox\"|\"menuitemradio\"|\"navigation\"|\"none\"|\"note\"|\"option\"|\"paragraph\"|\"presentation\"|\"progressbar\"|\"radio\"|\"radiogroup\"|\"region\"|\"row\"|\"rowgroup\"|\"rowheader\"|\"scrollbar\"|\"search\"|\"searchbox\"|\"separator\"|\"slider\"|\"spinbutton\"|\"status\"|\"strong\"|\"subscript\"|\"superscript\"|\"switch\"|\"tab\"|\"table\"|\"tablist\"|\"tabpanel\"|\"term\"|\"textbox\"|\"time\"|\"timer\"|\"toolbar\"|\"tooltip\"|\"tree\"|\"treegrid\"|\"treeitem\">>\n```\n\n----------------------------------------\n\nTITLE: Using React and Vue Selectors in C# Playwright\nDESCRIPTION: These examples show how to use the experimental React and Vue selector engines to locate elements based on component names and properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"_react=SubmitButton[enabled=true]\").ClickAsync();\nawait page.Locator(\"_vue=submit-button[enabled=true]\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Hooks with xUnit in Playwright\nDESCRIPTION: Example of using InitializeAsync and DisposeAsync hooks in xUnit with Playwright. Demonstrates initialization, test execution, and cleanup phases with custom disposal handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1: PageTest\n{\n    [Fact]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync(\"https://playwright.dev/\");\n    }\n\n    override public async Task InitializeAsync()\n    {\n        await base.InitializeAsync();\n        await Page.GotoAsync(\"https://playwright.dev\");\n    }\n\n    public override async Task DisposeAsync()\n    {\n        Console.WriteLine(\"After each test cleanup\");\n        await base.DisposeAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upload File Buffer from Memory in Python\nDESCRIPTION: Demonstrates how to upload a file buffer directly from memory using Playwright's Python API. The code creates a file with specified name, MIME type, and content buffer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_93\n\nLANGUAGE: python\nCODE:\n```\npage.get_by_label(\"Upload file\").set_input_files(\n    files=[\n        {\"name\": \"test.txt\", \"mimeType\": \"text/plain\", \"buffer\": b\"this is a test\"}\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a Locator Handler in C#\nDESCRIPTION: Example of using Page.AddLocatorHandlerAsync to register a callback that closes a cookie dialog when it appears.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Setup the handler.\nawait Page.AddLocatorHandlerAsync(\n    Page.GetByRole(AriaRole.Heading, new() { Name = \"Hej! You are in control of your cookies.\" }),\n    async () =>\n    {\n        await Page.GetByRole(AriaRole.Button, new() { Name = \"Accept all\" }).ClickAsync();\n    });\n// Write the test as usual.\nawait Page.GotoAsync(\"https://www.ikea.com/\");\nawait Page.GetByRole(AriaRole.Link, new() { Name = \"Collection of blue and white\" }).ClickAsync();\nawait Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Light and easy\" })).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Navigation After Timeout Click in Java\nDESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in Java. This method returns after navigation has finished.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_131\n\nLANGUAGE: java\nCODE:\n```\n// The method returns after navigation has finished\nResponse response = page.waitForNavigation(() -> {\n  // This action triggers the navigation after a timeout.\n  page.getByText(\"Navigate after timeout\").click();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State in Playwright with C#\nDESCRIPTION: Demonstrates how to set the checked state of a checkbox element using the SetCheckedAsync method in C#. This example sets the checkbox to checked (true).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_88\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Checkbox).SetCheckedAsync(true);\n```\n\n----------------------------------------\n\nTITLE: Basic Page Navigation in Python (Sync)\nDESCRIPTION: Navigates to a URL and waits for the page's load event to fire using Playwright's synchronous API in Python.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/navigations.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Navigate the page\npage.goto(\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Running Basic Playwright Tests\nDESCRIPTION: Basic command to run Playwright tests using pytest. Tests run in headless mode on Chromium by default.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser with Custom Arguments Using Playwright Java\nDESCRIPTION: Illustrates launching a browser and omitting default launch arguments, such as '--mute-audio', using Playwright's Java API. Requires Java Playwright bindings. Main input is configuration options; output is the browser instance. Only recognized options will apply.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Or \\\"firefox\\\" or \\\"webkit\\\".\\nBrowser browser = chromium.launch(new BrowserType.LaunchOptions()\\n  .setIgnoreDefaultArgs(Arrays.asList(\\\"--mute-audio\\\")));\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests by Browser Type in Playwright\nDESCRIPTION: Example of using the skip_browser marker to skip tests on specific browsers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.mark.skip_browser(\"firefox\")\ndef test_visit_example(page):\n    page.goto(\"https://example.com\")\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Synchronous REPL Usage\nDESCRIPTION: Interactive REPL example showing Playwright usage in synchronous mode\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\nplaywright = sync_playwright().start()\n# Use playwright.chromium, playwright.firefox or playwright.webkit\n# Pass headless=False to launch() to see the browser UI\nbrowser = playwright.chromium.launch()\npage = browser.new_page()\npage.goto(\"https://playwright.dev/\")\npage.screenshot(path=\"example.png\")\nbrowser.close()\nplaywright.stop()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timeout for AndroidDevice Methods with Playwright JS\nDESCRIPTION: androidDevice.setDefaultTimeout(timeout) sets the default maximum time in milliseconds for all device-level operations that accept a timeout option. Useful for configuring global responsiveness. Input: timeout (float, ms). No output.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n// Set the default timeout for device actions.\nandroidDevice.setDefaultTimeout(10000); // 10 seconds\n```\n\n----------------------------------------\n\nTITLE: Saving a Downloaded File using saveAs in Playwright (Java)\nDESCRIPTION: This snippet shows the Java syntax for calling `download.saveAs()`. It uses `Paths.get()` to construct the file path and `download.suggestedFilename()` for the file name. Assumes a `Download` object is already available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-download.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndownload.saveAs(Paths.get(\"/path/to/save/at/\", download.suggestedFilename()));\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Docker for Python E2E Tests\nDESCRIPTION: Command to run the Playwright Docker container for Python end-to-end testing where code is trusted.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright/python:v%%VERSION%%-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: React Component Testing Example\nDESCRIPTION: Demonstrates how to test a React component using Playwright's experimental React testing package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport HelloWorld from './HelloWorld';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<HelloWorld msg=\"greetings\" />);\n  await expect(component).toContainText('Greetings');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Test Example with MSTest\nDESCRIPTION: Shows how to implement Playwright tests using MSTest framework, including page navigation and assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/writing-tests-csharp.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Expect a title \"to contain\" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex(\"Playwright\"));\n    }\n\n    [TestMethod]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync(\"https://playwright.dev\");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = \"Installation\" })).ToBeVisibleAsync();\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Using PageAssertions to Verify URL Pattern in Python (Async)\nDESCRIPTION: Example of using expect assertions with async/await in Python to verify URL pattern after clicking a sign-in button. Uses regular expressions for pattern matching in the URL assertion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.async_api import Page, expect\n\nasync def test_navigates_to_login_page(page: Page) -> None:\n    # ..\n    await page.get_by_text(\"Sign in\").click()\n    await expect(page).to_have_url(re.compile(r\".*/login\"))\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Dot Reporter\nDESCRIPTION: Shows how to use the 'dot' reporter, which is very concise and produces a single character per successful test run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --reporter=dot\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Maven Bash\nDESCRIPTION: Executes Java-based Playwright tests using Maven. The command `mvn test` runs the tests in the existing project. It's essential for integration in CI workflows where Java applications are tested.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Title Attribute in HTML\nDESCRIPTION: Example showing HTML element with title attribute for locating.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span title='Issues count'>25 issues</span>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event on ElementHandle in Java\nDESCRIPTION: Shows how to dispatch a click event on an ElementHandle using the dispatchEvent method in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nelementHandle.dispatchEvent(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Opening Playwright HTML Report via pnpm - Bash\nDESCRIPTION: Invokes the Playwright HTML test report using pnpm, enabling detailed review of browser test results, steps, and errors. The HTML report file must exist from a previous test run. Useful for sharing test outcomes with the team.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright show-report\n```\n\n----------------------------------------\n\nTITLE: Interacting with an Element using ElementHandle (Stale Potential) in JavaScript\nDESCRIPTION: Shows finding an element using `page.$` to get an [ElementHandle] and performing actions (hover, click) in JavaScript. This method can lead to errors if the element becomes stale due to page updates.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst handle = await page.$('text=Submit');\n// ...\nawait handle.hover();\nawait handle.click();\n```\n```\n\n----------------------------------------\n\nTITLE: Service Worker Registration in HTML Page\nDESCRIPTION: HTML snippet showing how to register a Service Worker in a web page. The registration promise is stored in a window variable for later access.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- filename: index.html -->\n<script>\n  window.registrationPromise = navigator.serviceWorker.register('/transparent-service-worker.js');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with Maven Bash\nDESCRIPTION: The code installs Playwright and its dependencies in Java projects within a CI environment using Maven. With `mvn exec:java`, it configures the Java environment to be ready for Playwright testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"install --with-deps\\\"\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tests in Playwright Test\nDESCRIPTION: Demonstrates how to run tests in parallel within the same file using the test.describe.parallel() function. This allows independent tests to execute simultaneously rather than sequentially.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe.parallel('group', () => {\n  test('runs in parallel 1', async ({ page }) => {\n  });\n  test('runs in parallel 2', async ({ page }) => {\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser with Custom Arguments Using Playwright Python (Sync)\nDESCRIPTION: Demonstrates synchronous launch of a Playwright browser while disabling selected default arguments with the 'ignore_default_args' option. Requires Playwright sync API. Arguments customize the browser's launch behavior. Outputs a browser instance.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbrowser = playwright.chromium.launch( # or \\\"firefox\\\" or \\\"webkit\\\".\\n    ignore_default_args=[\\\"--mute-audio\\\"]\\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Parallelism in Playwright Test (Bash)\nDESCRIPTION: Command to run Playwright Test with parallelism disabled by setting the number of workers to 1.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --workers=1\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Agent with agent-base\nDESCRIPTION: Example showing how to create a custom HTTP agent that establishes new socket connections for each request using the agent-base module. Demonstrates both HTTP and HTTPS connection handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar net = require('net');\nvar tls = require('tls');\nvar url = require('url');\nvar http = require('http');\nvar agent = require('agent-base');\n\nvar endpoint = 'http://nodejs.org/api/';\nvar parsed = url.parse(endpoint);\n\n// This is the important part!\nparsed.agent = agent(function (req, opts) {\n  var socket;\n  // `secureEndpoint` is true when using the https module\n  if (opts.secureEndpoint) {\n    socket = tls.connect(opts);\n  } else {\n    socket = net.connect(opts);\n  }\n  return socket;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Custom Tag Name Selector in Playwright for Java\nDESCRIPTION: This Java snippet shows how to register and use a custom selector engine that selects elements by tag name in Playwright. It operates in a Java context, demonstrating selector registration and element interaction through Playwright's API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// Must be a script that evaluates to a selector engine instance.  The script is evaluated in the page context.\nString createTagNameEngine = \"{\\n\" +\n  \"  // Returns the first element matching given selector in the root's subtree.\\n\" +\n  \"  query(root, selector) {\\n\" +\n  \"    return root.querySelector(selector);\\n\" +\n  \"  },\\n\" +\n  \"\\n\" +\n  \"  // Returns all elements matching given selector in the root's subtree.\\n\" +\n  \"  queryAll(root, selector) {\\n\" +\n  \"    return Array.from(root.querySelectorAll(selector));\\n\" +\n  \"  }\\n\" +\n  \"}\";\n\n// Register the engine. Selectors will be prefixed with \"tag=\".\nplaywright.selectors().register(\"tag\", createTagNameEngine);\n\n// Now we can use \"tag=\" selectors.\nLocator button = page.locator(\"tag=button\");\nbutton.click();\n\n// We can combine it with built-in locators.\npage.locator(\"tag=div\").getByText(\"Click me\").click();\n\n// We can use it in any methods supporting selectors.\nint buttonCount = (int) page.locator(\"tag=button\").count();\n```\n\n----------------------------------------\n\nTITLE: Getting Response Body as Buffer (JavaScript and Python)\nDESCRIPTION: This method, `Response.body`, returns the response body as a Buffer, allowing binary data manipulation. It is useful for working with non-textual responses. Since it is an asynchronous method, it must be called within an async function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function responseBody() {\\n  const buffer = await response.body();\\n  console.log(buffer);\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User Agent in C#\nDESCRIPTION: Creates a new browser context with a custom user agent string using the Playwright C# client. This allows testing how websites respond to different browser identifications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await browser.NewContextAsync(new() { UserAgent = \"My User Agent\" });\n```\n\n----------------------------------------\n\nTITLE: Using the BrowserName Fixture for Test Annotations\nDESCRIPTION: Demonstrates how to use the browserName fixture to conditionally skip tests based on the browser being used. Useful for browser-specific test annotations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fixtures.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('skip this test in Firefox', async ({ page, browserName }) => {\n  test.skip(browserName === 'firefox', 'Still working on it');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Manual TypeScript Compilation\nDESCRIPTION: This JSON snippet shows how to configure package.json scripts for manual TypeScript compilation before running Playwright tests. It includes a pretest script for compilation and a test script to run the compiled tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"pretest\": \"tsc --incremental -p tests/tsconfig.json\",\n    \"test\": \"playwright test -c tests-out\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching and Controlling an Electron Application with Playwright\nDESCRIPTION: Example demonstrating how to launch an Electron app, evaluate expressions in the main process, interact with windows, and capture screenshots using Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electronapplication.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { _electron: electron } = require('playwright');\n\n(async () => {\n  // Launch Electron app.\n  const electronApp = await electron.launch({ args: ['main.js'] });\n\n  // Evaluation expression in the Electron context.\n  const appPath = await electronApp.evaluate(async ({ app }) => {\n    // This runs in the main Electron process, parameter here is always\n    // the result of the require('electron') in the main app script.\n    return app.getAppPath();\n  });\n  console.log(appPath);\n\n  // Get the first window that the app opens, wait if necessary.\n  const window = await electronApp.firstWindow();\n  // Print the title.\n  console.log(await window.title());\n  // Capture a screenshot.\n  await window.screenshot({ path: 'intro.png' });\n  // Direct Electron console to Node terminal.\n  window.on('console', console.log);\n  // Click button.\n  await window.click('text=Click me');\n  // Exit app.\n  await electronApp.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event in Python (Async)\nDESCRIPTION: This snippet illustrates how to dispatch a click event on a button element using the Page.dispatch_event method in Python with async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nawait page.dispatch_event(\"button#submit\", \"click\")\n```\n\n----------------------------------------\n\nTITLE: Limiting Workers in Playwright Test Configuration (TypeScript)\nDESCRIPTION: Configures the number of worker processes for Playwright Test, limiting workers on CI environments while using default locally.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Limit the number of workers on CI, use default locally\n  workers: process.env.CI ? 2 : undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: xUnit Test Class with Custom Context Options\nDESCRIPTION: Example of an xUnit test class that customizes BrowserContext options including color scheme, viewport size, and base URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1 : PageTest\n{\n    [Fact]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync(\"/login\");\n    }\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = \"https://github.com\",\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blob Reporter in Playwright Config\nDESCRIPTION: Configuration for using the blob reporter in Playwright config file. This setup enables blob reporting when running in CI environments, which is necessary for later merging reports from multiple shards.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default defineConfig({\n  testDir: './tests',\n  reporter: process.env.CI ? 'blob' : 'html',\n});\n```\n\n----------------------------------------\n\nTITLE: Load State Configuration for Navigation Waiting\nDESCRIPTION: Defines which page load state to wait for. Supports load, domcontentloaded, or networkidle states.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n- `state` ?<[LoadState]<\"load\"|\"domcontentloaded\"|\"networkidle\">>\n```\n\n----------------------------------------\n\nTITLE: Configuring Recording Options in Playwright Config\nDESCRIPTION: Sets options for capturing screenshots, recording videos, and tracing for all tests in the Playwright configuration file. These settings control when and how test artifacts are generated.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Capture screenshot after each test failure.\n    screenshot: 'only-on-failure',\n\n    // Record trace only when retrying a test for the first time.\n    trace: 'on-first-retry',\n\n    // Record video only when retrying a test for the first time.\n    video: 'on-first-retry'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript on All Matching Elements with Locator.evaluate_all in Python (Async)\nDESCRIPTION: Shows how to execute JavaScript code on all matching elements using the evaluate_all method in Python async mode. Passes the array of matching elements to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\"div\")\nmore_than_ten = await locator.evaluate_all(\"(divs, min) => divs.length > min\", 10)\n```\n\n----------------------------------------\n\nTITLE: Checking Playwright Version via pnpm - Bash\nDESCRIPTION: Invokes Playwright via pnpm to show the package's current version. Suitable for verifying installation status or after a dependency update. Outputs version information to the terminal.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright --version\n```\n\n----------------------------------------\n\nTITLE: Capturing Accessibility Snapshot with Playwright in Python (Sync)\nDESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `snapshot()`. Logs the snapshot to the console. Requires setup with Playwright and a page instance using synchronous Python code. Returns the root accessible node as a Python dictionary.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsnapshot = page.accessibility.snapshot()\nprint(snapshot)\n```\n\n----------------------------------------\n\nTITLE: Combining Locators via Logical 'And' in Playwright Python (Async)\nDESCRIPTION: Demonstrates use of the `and_` method in async Python Playwright to combine two locators, selecting a button with a specific title. Returns a locator instance representing the intersection of the given locators.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nbutton = page.get_by_role(\"button\").and_(page.getByTitle(\"Subscribe\"))\n```\n\n----------------------------------------\n\nTITLE: Dispatching Dragstart Event with DataTransfer in JavaScript\nDESCRIPTION: Demonstrates how to dispatch a dragstart event with a DataTransfer object on an ElementHandle in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataTransfer = await page.evaluateHandle(() => new DataTransfer());\nawait elementHandle.dispatchEvent('dragstart', { dataTransfer });\n```\n\n----------------------------------------\n\nTITLE: Waiting for Image Elements Across Multiple URLs in Python (Async)\nDESCRIPTION: This snippet demonstrates how to use Frame.wait_for_selector to wait for and retrieve image elements across multiple URLs in a Playwright script using Python's async API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n    page = await browser.new_page()\n    for current_url in [\"https://google.com\", \"https://bbc.com\"]:\n        await page.goto(current_url, wait_until=\"domcontentloaded\")\n        element = await page.main_frame.wait_for_selector(\"img\")\n        print(\"Loaded image: \" + str(await element.get_attribute(\"src\")))\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Projects with Fixture Options in Playwright\nDESCRIPTION: Configuration file showing how to set fixture options for different test projects. This defines two projects with different defaultItem values that will be used by the todoPage fixture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport type { MyOptions } from './my-test';\n\nexport default defineConfig<MyOptions>({\n  projects: [\n    {\n      name: 'shopping',\n      use: { defaultItem: 'Buy milk' },\n    },\n    {\n      name: 'wellbeing',\n      use: { defaultItem: 'Exercise!' },\n    },\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Comma-separated CSS Selectors in Playwright\nDESCRIPTION: Demonstrates how to use comma-separated selectors to match elements that fulfill any of multiple conditions, such as buttons with different text content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\nawait page.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\npage.locator(\"button:has-text(\\\"Log in\\\"), button:has-text(\\\"Sign in\\\")\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\n# Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\nawait page.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\npage.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\nawait page.Locator(\"button:has-text(\\\"Log in\\\"), button:has-text(\\\"Sign in\\\")\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Using CSS :visible Pseudo-class in Playwright\nDESCRIPTION: Shows how to use the :visible pseudo-class to match only visible elements on the page, which helps avoid strictness violations when multiple similar elements exist.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('button').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"button\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"button\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"button\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"button\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser with Custom Arguments Using Playwright JavaScript\nDESCRIPTION: Demonstrates launching a browser while filtering out default arguments such as '--mute-audio' with Playwright JS. Requires Playwright Node.js, and the browser type (e.g., chromium). The input is an options object with 'ignoreDefaultArgs'. Output is a browser instance with altered launch parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\\n  ignoreDefaultArgs: ['--mute-audio']\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting isMobile via Context Options (C#)\nDESCRIPTION: This C# snippet demonstrates setting the `IsMobile` property when creating a new browser context using `Microsoft.Playwright`. The `IsMobile` property is set on the options object passed to `NewContextAsync`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait using var context = await browser.NewContextAsync(new()\n{\n    IsMobile = false\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Reporters for Local and CI Environments\nDESCRIPTION: Shows how to use different reporters locally and on CI, using 'dot' reporter for CI and 'list' when running locally.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Concise 'dot' for CI, default 'list' when running locally\n  reporter: process.env.CI ? 'dot' : 'list',\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Scrolling with ScrollIntoView\nDESCRIPTION: Shows how to manually scroll elements into view, useful for infinite lists or specific positioning needs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByText('Footer text').scrollIntoViewIfNeeded();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByText(\"Footer text\").scrollIntoViewIfNeeded();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_text(\"Footer text\").scroll_into_view_if_needed()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByText(\"Footer text\").ScrollIntoViewIfNeededAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Geolocation in Java\nDESCRIPTION: Creates a new browser context with geolocation settings and permissions using the Playwright Java client. This sets up the browser environment to emulate a specific geographic location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setGeolocation(41.890221, 12.492348)\n  .setPermissions(Arrays.asList(\"geolocation\")));\n```\n\n----------------------------------------\n\nTITLE: Custom Matcher Extension in Playwright\nDESCRIPTION: Example of extending Playwright assertions with custom matchers using expect.extend(), showing how to add custom assertion methods.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect as baseExpect } from '@playwright/test';\nexport const expect = baseExpect.extend({\n  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {\n    // ... see documentation for how to write matchers.\n  },\n});\n\ntest('pass', async ({ page }) => {\n  await expect(page.getByTestId('cart')).toHaveAmount(5);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Navigation Timeout (JavaScript)\nDESCRIPTION: Specifies the maximum time in milliseconds for navigation operations in Playwright for JavaScript. It defaults to 0 (no timeout). The default value can be modified through the `navigationTimeout` option in the configuration file or by using methods like `BrowserContext.setDefaultNavigationTimeout` or `Page.setDefaultNavigationTimeout`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `timeout` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Handling Retries in Playwright Test Code\nDESCRIPTION: This JavaScript code snippet shows how to detect retries at runtime within a Playwright test. It uses the TestInfo object to check if the test is being retried and performs a cleanup action if so.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page }, testInfo) => {\n  if (testInfo.retry)\n    await cleanSomeCachesOnTheServer();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Modifying WebSocket Messages in Python (Sync)\nDESCRIPTION: This code snippet demonstrates how to connect to the actual WebSocket server while intercepting and modifying messages in Python using synchronous syntax. It modifies 'request' messages to 'request2' and passes through other messages unmodified.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/mock.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(server: WebSocketRoute, message: Union[str, bytes]):\n  if message == \"request\":\n    server.send(\"request2\")\n  else:\n    server.send(message)\n\ndef handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: message_handler(server, message))\n\npage.route_web_socket(\"wss://example.com/ws\", handler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Playwright Tests (Java)\nDESCRIPTION: This YAML configuration sets up Azure Pipelines to run Playwright tests in a containerized environment for a Java project. It uses the official Playwright Java Docker image, sets up Java 17, builds the project with Maven, and runs the tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_30\n\nLANGUAGE: yml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n\nsteps:\n- task: JavaToolInstaller@0\n  inputs:\n    versionSpec: '17'\n    jdkArchitectureOption: 'x64'\n    jdkSourceOption: AzureStorage\n\n- script: mvn -B install -D skipTests --no-transfer-progress\n  displayName: 'Build and install'\n- script: mvn test\n  displayName: 'Run tests'\n```\n\n----------------------------------------\n\nTITLE: JSON Reporter Configuration Example\nDESCRIPTION: TypeScript configuration for JSON reporter specifying output file location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['json', { outputFile: 'results.json' }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Python Select Options Label Configuration\nDESCRIPTION: Configuration for selecting options by label in a select element. Supports both single and multiple selections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_97\n\nLANGUAGE: python\nCODE:\n```\nlabel: Union[str, List[str]]\n```\n\n----------------------------------------\n\nTITLE: Using CSS :visible Selector for Visible Elements Only\nDESCRIPTION: Demonstrates how to specifically target only visible elements using the :visible pseudo-class, which is useful for distinguishing between hidden and displayed elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('button:visible').click();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"button:visible\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"button:visible\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\npage.locator(\"button:visible\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"button:visible\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Grid URL\nDESCRIPTION: Command to start a Selenium node with the SE_NODE_GRID_URL environment variable set to point to the Selenium hub.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSE_NODE_GRID_URL=\"http://<selenium-hub-ip>:4444\" java -jar selenium-server-<version>.jar node\n```\n\n----------------------------------------\n\nTITLE: Global beforeAll/afterAll Hooks Implementation\nDESCRIPTION: Shows how to implement global beforeAll and afterAll hooks using worker-scoped auto fixtures.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend<{}, { forEachWorker: void }>({\n  forEachWorker: [async ({}, use) => {\n    // This code runs before all the tests in the worker process.\n    console.log(`Starting test worker ${test.info().workerIndex}`);\n    await use();\n    // This code runs after all the tests in the worker process.\n    console.log(`Stopping test worker ${test.info().workerIndex}`);\n  }, { scope: 'worker', auto: true }],  // automatically starts for every worker.\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from './fixtures';\nimport { expect } from '@playwright/test';\n\ntest('basic', async ({ }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Event Listeners in Playwright (Java)\nDESCRIPTION: Shows how to add event listeners using methods like `page.onRequest` and `page.onRequestFinished`, and remove them using corresponding `off*` methods (`page.offRequestFinished`) in Playwright for Java. A listener (Consumer<Request>) is added for 'requestFinished' and later removed using its reference.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.onRequest(request -> System.out.println(\"Request sent: \" + request.url()));\nConsumer<Request> listener = request -> System.out.println(\"Request finished: \" + request.url());\npage.onRequestFinished(listener);\npage.navigate(\"https://wikipedia.org\");\n\n// Remove previously added listener, each on* method has corresponding off*\npage.offRequestFinished(listener);\npage.navigate(\"https://www.openstreetmap.org/\");\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Programmatic Click Events in Playwright\nDESCRIPTION: Demonstrates how to simulate click events programmatically using the dispatchEvent method across different programming languages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByRole('button').dispatchEvent('click');\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByRole(AriaRole.BUTTON).dispatchEvent(\"click\");\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_role(\"button\").dispatch_event('click')\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Button).DispatchEventAsync(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript on Multiple DOM Elements by Selector\nDESCRIPTION: Defines the pageFunction parameter for evalOnSelectorAll method in JavaScript. This function will be evaluated with an array of selected DOM elements as its argument.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_45\n\nLANGUAGE: js\nCODE:\n```\n- `pageFunction` <[function]\\([Array]<[Element]>\\)|[string]>\n\nFunction to be evaluated in the page context.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Browser Preload Script\nDESCRIPTION: Example of a preload script that mocks Math.random() function\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// preload.js\nMath.random = () => 42;\n```\n\n----------------------------------------\n\nTITLE: Reusing Authenticated State Between Playwright Contexts\nDESCRIPTION: Demonstrates how to save an authenticated state from an API context and reuse it in a browser context using Playwright. Useful for tests that require authentication continuity across different testing contexts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst requestContext = await request.newContext({\n  httpCredentials: {\n    username: 'user',\n    password: 'passwd'\n  }\n});\nawait requestContext.get(`https://api.example.com/login`);\n// Save storage state into the file.\nawait requestContext.storageState({ path: 'state.json' });\n\n// Create a new context with the saved storage state.\nconst context = await browser.newContext({ storageState: 'state.json' });\n```\n\n----------------------------------------\n\nTITLE: Handling Newsletter Dialog with Locator Handler in JavaScript\nDESCRIPTION: Sets up a locator handler to automatically close a newsletter signup dialog when it appears, allowing tests to continue without interruption. The handler activates when text matching 'Sign up to the newsletter' is detected on the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// Setup the handler.\nawait page.addLocatorHandler(page.getByText('Sign up to the newsletter'), async () => {\n  await page.getByRole('button', { name: 'No thanks' }).click();\n});\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\n----------------------------------------\n\nTITLE: Installing specific browsers using Playwright CLI\nDESCRIPTION: This snippet demonstrates how to install a specific browser in Playwright by specifying it as an argument. This is useful when you need only a particular browser for your testing environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nnpx playwright install webkit\n```\n\nLANGUAGE: java\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"install webkit\\\"\n```\n\nLANGUAGE: python\nCODE:\n```\nplaywright install webkit\n```\n\nLANGUAGE: csharp\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 install webkit\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for To-Do List Application\nDESCRIPTION: The CSS styles define the visual appearance of the to-do list application. It includes styles for the task list items, form elements, and buttons, providing a clean and organized user interface.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/to-do-notifications/README.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml {\n  font-family: sans-serif;\n}\n\nbody {\n  margin: 50px auto;\n  max-width: 800px;\n}\n\nh1 {\n  margin-bottom: 16px;\n  font-size: 2rem;\n}\n\n.note-wrapper {\n  margin-bottom: 16px;\n}\n\n#new-task-form div {\n  margin-bottom: 10px;\n}\n\n#new-task-form label, #new-task-form input {\n  display: inline-block;\n}\n\n#new-task-form label {\n  margin-right: 10px;\n  width: 30%;\n}\n\n#task-title {\n  width: 65%;\n}\n\n#deadline-hours, #deadline-minutes {\n  width: 30%;\n  margin-right: 3%;\n}\n\n#new-task-form button {\n  width: 100px;\n  height: 30px;\n  margin-left: 30%;\n  background-color: #666;\n  color: white;\n  border: 0;\n  border-radius: 6px;\n  cursor: pointer;\n}\n\n#task-list {\n  list-style-type: none;\n}\n\n#task-list li {\n  padding: 16px;\n  width: 100%;\n  border-bottom: 1px solid #eee;\n}\n\n.task-list-item {\n  padding: 16px;\n  width: 100%;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  flex-direction: column;\n}\n\n.task-title {\n  font-weight: bold;\n  margin-bottom: 6px;\n}\n\n.task-deadline {\n  margin-bottom: 6px;\n  color: #aaa;\n}\n\n.task-controls {\n  display: flex;\n}\n\n.task-controls button {\n  width: 100px;\n  height: 30px;\n  background-color: #666;\n  color: white;\n  border: 0;\n  border-radius: 6px;\n  cursor: pointer;\n  margin-right: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Locator to FrameLocator with content_frame in Python (Async)\nDESCRIPTION: Demonstrates how to convert a Locator object to a FrameLocator in Python async mode using the content_frame property to interact with elements inside an iframe.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nlocator = page.locator(\"iframe[name=\\\"embedded\\\"]\")\n# ...\nframe_locator = locator.content_frame\nawait frame_locator.get_by_role(\"button\").click()\n```\n\n----------------------------------------\n\nTITLE: Matching Any Non-Null/Undefined Value with expect.anything in JavaScript\nDESCRIPTION: Shows how to use `expect.anything()` inside `expect().toEqual()` for pattern matching in Playwright assertions. This matcher matches any value except for `null` and `undefined`, useful when the presence of a property matters more than its specific value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst value = { prop: 1 };\nexpect(value).toEqual({ prop: expect.anything() });\nexpect(value).not.toEqual({ otherProp: expect.anything() });\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying State for Playwright `waitForSelector`\nDESCRIPTION: Defines the `state` parameter for Playwright's `waitForSelector` method, determining the condition to wait for. Options are 'attached' (in DOM), 'detached' (not in DOM), 'visible' (in DOM, non-empty bounding box, not hidden), or 'hidden' (detached, empty bounding box, or hidden). Defaults to 'visible'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n- `state` <[WaitForSelectorState]<\"attached\"|\"detached\"|\"visible\"|\"hidden\">>\n```\n\n----------------------------------------\n\nTITLE: Clicking Anchor Element with ElementHandle in CSharp\nDESCRIPTION: Describes clicking an anchor ('a') DOM element using ElementHandle in CSharp with Playwright. It involves asynchronous querying and clicking of the DOM element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nvar handle = await page.QuerySelectorAsync(\"a\");\nawait handle.ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling a One-Off Dialog Event in Playwright (Async Python)\nDESCRIPTION: Illustrates using `page.once` in asynchronous Playwright for Python to handle the 'dialog' event just once. A lambda function is used to accept the dialog with '2021' when the prompt is triggered by `page.evaluate`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python async\npage.once(\"dialog\", lambda dialog: dialog.accept(\"2021\"))\nawait page.evaluate(\"prompt('Enter a number:')\")\n```\n```\n\n----------------------------------------\n\nTITLE: Saving Authentication State with Playwright Codegen for C#\nDESCRIPTION: Command to generate code for GitHub while saving authentication state (cookies, localStorage, IndexedDB) to auth.json using C#. This PowerShell execution allows reusing authentication in subsequent test recordings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 codegen github.com/microsoft/playwright --save-storage=auth.json\n```\n\n----------------------------------------\n\nTITLE: PyInstaller Script Example\nDESCRIPTION: Sample script for creating standalone executables with PyInstaller\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto(\"https://playwright.dev/\")\n    page.screenshot(path=\"example.png\")\n    browser.close()\n```\n\n----------------------------------------\n\nTITLE: Capturing Aria Snapshots in Playwright Python (Async)\nDESCRIPTION: Demonstrates use of async Playwright Python to extract a YAML-formatted ARIA tree from a 'link' element, facilitating accessibility checks and assertions in test code.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nawait page.get_by_role(\"link\").aria_snapshot()\n```\n\n----------------------------------------\n\nTITLE: Using toMatchAriaSnapshot with file-based snapshots in JavaScript\nDESCRIPTION: JavaScript example of using toMatchAriaSnapshot with file-based snapshots instead of inline ones. This approach stores snapshots in .aria.yml files and can use sequential or custom naming for the snapshot files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page.locator('body')).toMatchAriaSnapshot();\nawait expect(page.locator('body')).toMatchAriaSnapshot({ name: 'body.aria.yml' });\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Selector Engine with Playwright in C#\nDESCRIPTION: This C# code sample registers a custom selector engine by supplying JavaScript as a string to the Playwright Selectors API, enabling element selection with the 'tag=' prefix in test queries. It uses async/await patterns, dependencies include Microsoft.Playwright, and the selector can be used in combination with other locators for interaction and counting. Engine script, name, and selectors are inputs; outputs are found DOM elements. Must be run in an async context and uses Playwright's browser automation capabilities.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-selectors.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\\n\\nusing var playwright = await Playwright.CreateAsync();\\n// Script that evaluates to a selector engine instance. The script is evaluated in the page context.\\nawait playwright.Selectors.RegisterAsync(\\\"tag\\\", new()\\n{\\n    Script = @\\\"{\\n    // Returns the first element matching given selector in the root's subtree.\\n    query(root, selector) {\\n        return root.querySelector(selector);\\n      },\\n      // Returns all elements matching given selector in the root's subtree.\\n      queryAll(root, selector) {\\n        return Array.from(root.querySelectorAll(selector));\\n      }\\n    }\\\"\\n});\\n\\nawait using var browser = await playwright.Chromium.LaunchAsync();\\nvar page = await browser.NewPageAsync();\\nawait page.SetContentAsync(\\\"<div><button>Click me</button></div>\\\");\\n// Use the selector prefixed with its name.\\nvar button = page.Locator(\\\"tag=button\\\");\\n// Combine it with built-in locators.\\nawait page.Locator(\\\"tag=div\\\").GetByText(\\\"Click me\\\").ClickAsync();\\n// Can use it in any methods supporting selectors.\\nint buttonCount = await page.Locator(\\\"tag=button\\\").CountAsync();\n```\n\n----------------------------------------\n\nTITLE: Removed Playwright `noWaitAfter` Option (Deprecated)\nDESCRIPTION: Defines the `noWaitAfter` boolean option for Playwright actions. This option is deprecated and currently has no effect on execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- `noWaitAfter` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: WebSocketRoute.onClose Handler - C#\nDESCRIPTION: C# implementation of WebSocket closure handler. Accepts nullable int for code and string for reason.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nfunction(int?, string)\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Any Type with expect.any in JavaScript\nDESCRIPTION: Demonstrates `expect.any(constructor)` used within `expect().toEqual()` for pattern matching in Playwright tests. It matches any object instance created from the specified constructor (like a class) or a corresponding primitive type (like `Number` or `String`), allowing flexible assertions where the exact value is unknown but the type is expected.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Match instance of a class.\nclass Example {}\nexpect(new Example()).toEqual(expect.any(Example));\n\n// Match any number.\nexpect({ prop: 1 }).toEqual({ prop: expect.any(Number) });\n\n// Match any string.\nexpect('abc').toEqual(expect.any(String));\n```\n```\n\n----------------------------------------\n\nTITLE: Evaluating Handles on Frame in Java\nDESCRIPTION: Shows how to use the evaluateHandle method in Java to evaluate an expression and return a JSHandle for the window object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n// Handle for the window object.\nJSHandle aWindowHandle = frame.evaluateHandle(\"() => Promise.resolve(window)\");\n```\n\n----------------------------------------\n\nTITLE: Testing with Puppeteer and Jest\nDESCRIPTION: Example of using Puppeteer with Jest for web testing, including setup, navigation, and element assertion.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/puppeteer-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport puppeteer from 'puppeteer';\n\ndescribe('Playwright homepage', () => {\n  let browser;\n  let page;\n\n  beforeAll(async () => {\n    browser = await puppeteer.launch();\n    page = await browser.newPage();\n  });\n\n  it('contains hero title', async () => {\n    await page.goto('https://playwright.dev/');\n    await page.waitForSelector('.hero__title');\n    const text = await page.$eval('.hero__title', e => e.textContent);\n    expect(text).toContain('Playwright enables reliable end-to-end testing');\n  });\n\n  afterAll(() => browser.close());\n});\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.waitForSelector in JavaScript\nDESCRIPTION: Demonstrates how to use the waitForSelector method on an ElementHandle to wait for a child element to appear in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.setContent(`<div><span></span></div>`);\nconst div = await page.$('div');\n// Waiting for the 'span' selector relative to the div.\nconst span = await div.waitForSelector('span', { state: 'attached' });\n```\n\n----------------------------------------\n\nTITLE: Asserting Locator Text Synchronously with Playwright in Python\nDESCRIPTION: Provides an example of using `expect(locator).to_have_text()` in a synchronous Python test function with `playwright.sync_api` to check if the element identified by `.status` contains the text \"Submitted\" after a button interaction. Depends on the `playwright` Python package.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nfrom playwright.sync_api import Page, expect\n\ndef test_status_becomes_submitted(page: Page) -> None:\n    # ..\n    page.get_by_role(\"button\").click()\n    expect(page.locator(\".status\")).to_have_text(\"Submitted\")\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Tag Name Selector in Playwright for JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to register a custom selector engine in Playwright that selects elements based on their tag name. Dependencies include Playwright library and a test base. Inputs include a root element and a selector string, with outputs being queried DOM elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport { expect } from '@playwright/test';\n\n// Must be a function that evaluates to a selector engine instance.\nconst createTagNameEngine = () => ({\n  // Returns the first element matching given selector in the root's subtree.\n  query(root, selector) {\n    return root.querySelector(selector);\n  },\n\n  // Returns all elements matching given selector in the root's subtree.\n  queryAll(root, selector) {\n    return Array.from(root.querySelectorAll(selector));\n  }\n});\n\nexport const test = base.extend<{}, { selectorRegistration: void }>({\n  // Register selectors once per worker.\n  selectorRegistration: [async ({ playwright }, use) => {\n    // Register the engine. Selectors will be prefixed with \"tag=\".\n    await playwright.selectors.register('tag', createTagNameEngine);\n    await use();\n  }, { scope: 'worker', auto: true }],\n});\n```\n\n----------------------------------------\n\nTITLE: Forcing a Mouse Click in Playwright\nDESCRIPTION: Explains how to bypass Playwright's actionability checks (like visibility, stability, and pointer-events) and force a click action on an element. This is achieved by setting the `force: true` option (or `Force = true` in C#, `setForce(true)` in Java) within the `click` (or `ClickAsync`) method options. This can be useful in scenarios where an element is interactable but gets covered by another element just before the click, which Playwright might otherwise interpret as non-actionable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait page.getByRole('button').click({ force: true });\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.getByRole(AriaRole.BUTTON).click(new Locator.ClickOptions().setForce(true));\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nawait page.get_by_role(\"button\").click(force=True)\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\npage.get_by_role(\"button\").click(force=True)\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait page.GetByRole(AriaRole.Button).ClickAsync(new() { Force = true });\n```\n```\n\n----------------------------------------\n\nTITLE: URL Matching for Navigation Waiting\nDESCRIPTION: Specifies URL patterns to match when waiting for navigation. Supports string, regular expression, or predicate function that receives URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n- `url` <[string]|[RegExp]|[function]\\([URL]\\):[boolean]>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Test Init Script Setup\nDESCRIPTION: Test setup using Playwright test framework with initialization script\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport path from 'path';\n\ntest.beforeEach(async ({ page }) => {\n  // Add script for every test in the beforeEach hook.\n  // Make sure to correctly resolve the script path.\n  await page.addInitScript({ path: path.resolve(__dirname, '../mocks/preload.js') });\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll Hook with Title in Playwright Tests\nDESCRIPTION: Demonstrates how to create a beforeAll hook with a descriptive title, making test reports more readable and providing better context for the hook's purpose.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntest.beforeAll('Setup', async () => {\n  console.log('Before tests');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating DataTransfer and Dispatching DragStart Event in Python (Sync)\nDESCRIPTION: This snippet demonstrates how to create a DataTransfer object and use it to dispatch a dragstart event in Python with synchronous syntax. Note that DataTransfer can only be created in Chromium and Firefox.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndata_transfer = page.evaluate_handle(\"new DataTransfer()\")\npage.dispatch_event(\"#source\", \"dragstart\", { \"dataTransfer\": data_transfer })\n```\n\n----------------------------------------\n\nTITLE: Using TestInfo.outputPath to Create Temporary Files in Playwright Tests\nDESCRIPTION: Example that demonstrates how to use the outputPath method from TestInfo to create a temporary file during test execution. This creates a unique file in the test's output directory to avoid conflicts when running tests in parallel.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating Multiple Selectors on ElementHandle in Python (Async)\nDESCRIPTION: Illustrates evaluating multiple selectors on an ElementHandle and extracting inner text from multiple elements in Python using async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfeed_handle = await page.query_selector(\".feed\")\nassert await feed_handle.eval_on_selector_all(\".tweet\", \"nodes => nodes.map(n => n.innerText)\") == [\"hello!\", \"hi!\"]\n```\n\n----------------------------------------\n\nTITLE: Using toMatchAriaSnapshot with an inline snapshot in JavaScript\nDESCRIPTION: Example of using the toMatchAriaSnapshot method to verify the accessibility structure of a page in JavaScript. The snapshot defines the expected accessibility elements like headings and textboxes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.goto('https://demo.playwright.dev/todomvc/');\nawait expect(page.locator('body')).toMatchAriaSnapshot(`\n  - heading \"todos\"\n  - textbox \"What needs to be done?\"\n`);\n```\n\n----------------------------------------\n\nTITLE: Using toBeCloseTo Method for Floating Point Comparisons\nDESCRIPTION: Demonstrates the use of 'toBeCloseTo' method for comparing floating point numbers with a specified precision. This is useful for avoiding issues with floating point arithmetic.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(0.1 + 0.2).not.toBe(0.3);\nexpect(0.1 + 0.2).toBeCloseTo(0.3, 5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Limits for Projects in Playwright\nDESCRIPTION: Shows how to set worker limits for different projects in Playwright. It demonstrates setting a global worker limit and a specific limit for one project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testproject.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 10,  // total workers limit\n\n  projects: [\n    {\n      name: 'runs in parallel',\n    },\n    {\n      name: 'one at a time',\n      workers: 1,  // workers limit for this project\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using toContain Method for String and Array Checking\nDESCRIPTION: Demonstrates two uses of the 'toContain' method: one for checking substrings in a string, and another for checking if an array or Set contains a specific item.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = 'Hello, World';\nexpect(value).toContain('World');\nexpect(value).toContain(',');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = [1, 2, 3];\nexpect(value).toContain(2);\nexpect(new Set(value)).toContain(2);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Codegen from Command Line - Java - Bash\nDESCRIPTION: This Java-oriented command uses Maven to execute Playwright's CLI, specifying the main CLI class and passing arguments to trigger code generation for a testable site. Requires Maven and the Java version of Playwright included as a dependency in the project. The URL provided is the target web application for test recording. Launches a browser and the Playwright Inspector in a Java runtime context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"codegen demo.playwright.dev/todomvc\\\"\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Executing Playwright C# Console Application\nDESCRIPTION: Command to run the .NET console application that uses Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Handling Console Messages in Java\nDESCRIPTION: Shows how to capture console messages, filter error messages, wait for console events, and extract argument values in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Listen for all console messages and print them to the standard output.\npage.onConsoleMessage(msg -> System.out.println(msg.text()));\n\n// Listen for all console messages and print errors to the standard output.\npage.onConsoleMessage(msg -> {\n  if (\"error\".equals(msg.type()))\n    System.out.println(\"Error text: \" + msg.text());\n});\n\n// Get the next console message\nConsoleMessage msg = page.waitForConsoleMessage(() -> {\n  // Issue console.log inside the page\n  page.evaluate(\"console.log('hello', 42, { foo: 'bar' });\");\n});\n\n// Deconstruct console.log arguments\nmsg.args().get(0).jsonValue(); // hello\nmsg.args().get(1).jsonValue(); // 42\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Playwright Server with Java API\nDESCRIPTION: Java code to connect to a remote Playwright server using the Playwright API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class App {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.chromium().connect(\"ws://127.0.0.1:3000/\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Page URL Using Python Sync in Playwright\nDESCRIPTION: Synchronous Python implementation showing how to expose page URL through context binding. Demonstrates synchronous context management and event handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = webkit.launch(headless=False)\n    context = browser.new_context()\n    context.expose_binding(\"pageURL\", lambda source: source[\"page\"].url)\n    page = context.new_page()\n    page.set_content(\"\"\"\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.pageURL();\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n    \"\"\")\n    page.get_by_role(\"button\").click()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Default Project Structure Created by Playwright - Bash\nDESCRIPTION: Shows the directory and file structure generated by Playwright after initialization. Includes configuration, example tests, and dependency declarations. Contains no direct executable command but documents what files/folders users should expect after setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nplaywright.config.ts\npackage.json\npackage-lock.json\ntests/\n  example.spec.ts\ntests-examples/\n  demo-todo-app.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Using toHaveLength Method for Length Checking\nDESCRIPTION: Demonstrates the use of 'toHaveLength' method to check the length property of strings and arrays.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('Hello, World').toHaveLength(12);\nexpect([1, 2, 3]).toHaveLength(3);\n```\n\n----------------------------------------\n\nTITLE: Running Specific Playwright Test by Class Name\nDESCRIPTION: Command to run a single Playwright test file using the filter flag with the class name.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter \"ExampleTest\"\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Tests in Playwright\nDESCRIPTION: Demonstrates how to add annotations to tests using the test details object. Annotations provide additional context like issue links that get displayed in test reports.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Headed Mode (Bash)\nDESCRIPTION: Command to run Playwright tests in headed mode, opening a browser window for each test, using Bash.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nHEADED=1 dotnet test\n```\n\n----------------------------------------\n\nTITLE: Updating Geolocation in Python (Sync)\nDESCRIPTION: Changes the geolocation of a browser context using the Playwright Python sync API. This allows testing how an application responds to location changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_54\n\nLANGUAGE: python\nCODE:\n```\ncontext.set_geolocation({\"longitude\": 48.858455, \"latitude\": 2.294474})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Image Elements Across Multiple URLs in C#\nDESCRIPTION: This snippet demonstrates how to use Frame.WaitForSelectorAsync to wait for and retrieve image elements across multiple URLs in a Playwright script using C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System;\nusing System.Threading.Tasks;\n\nclass FrameExamples\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        await using var browser = await playwright.Chromium.LaunchAsync();\n        var page = await browser.NewPageAsync();\n\n        foreach (var currentUrl in new[] { \"https://www.google.com\", \"https://bbc.com\" })\n        {\n            await page.GotoAsync(currentUrl);\n            element = await page.MainFrame.WaitForSelectorAsync(\"img\");\n            Console.WriteLine($\"Loaded image: {await element.GetAttributeAsync(\"src\")}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function in Playwright Page (Java)\nDESCRIPTION: This Java code exposes a SHA256 function to the browser page using Playwright. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType webkit = playwright.webkit();\n      Browser browser = webkit.launch(new BrowserType.LaunchOptions().setHeadless(false));\n      Page page = browser.newPage();\n      page.exposeFunction(\"sha256\", args -> {\n        try {\n          String text = (String) args[0];\n          MessageDigest crypto = MessageDigest.getInstance(\"SHA-256\");\n          byte[] token = crypto.digest(text.getBytes(StandardCharsets.UTF_8));\n          return Base64.getEncoder().encodeToString(token);\n        } catch (NoSuchAlgorithmException e) {\n          return null;\n        }\n      });\n      page.setContent(\n        \"<script>\\n\" +\n        \"  async function onClick() {\\n\" +\n        \"    document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\\n\" +\n        \"  }\\n\" +\n        \"</script>\\n\" +\n        \"<button onclick=\\\"onClick()\\\">Click me</button>\\n\" +\n        \"<div></div>\"\n      );\n      page.click(\"button\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Timing with Playwright in Java\nDESCRIPTION: Shows how to attach an event handler for finished requests with Playwright in Java, access timing information from the request object, and compute timing deltas. Requires Playwright for Java and an initialized page object. It uses onRequestFinished event handling and prints the difference between responseEnd and startTime. Input is the page navigation URL; output is timing metrics written to standard output. Timing properties are only available when the request finishes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npage.onRequestFinished(request -> {\\n  Timing timing = request.timing();\\n  System.out.println(timing.responseEnd - timing.startTime);\\n});\\npage.navigate(\\\"http://example.com\\\");\n```\n\n----------------------------------------\n\nTITLE: Granting Domain-Specific Permissions in Python (Async)\nDESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright Python async API. This allows showing notifications only for the specified origin.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nawait context.grant_permissions(['notifications'], origin='https://skype.com')\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelector in Python (Sync)\nDESCRIPTION: Examples of using the eval_on_selector method in Python with synchronous calls to evaluate expressions on elements matching a selector. This method finds an element and passes it to the provided JavaScript expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nsearch_value = page.eval_on_selector(\"#search\", \"el => el.value\")\npreload_href = page.eval_on_selector(\"link[rel=preload]\", \"el => el.href\")\nhtml = page.eval_on_selector(\".main-container\", \"(e, suffix) => e.outer_html + suffix\", \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Intercepting WebSocket Messages with Playwright in Java\nDESCRIPTION: Using Playwright for Java, set up WebSocket communication to intercept and modify outgoing messages before they reach the server. Requires Playwright setup and a WebSocket server.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npage.routeWebSocket(\"/ws\", ws -> {\n  WebSocketRoute server = ws.connectToServer();\n  ws.onMessage(frame -> {\n    if (\"request\".equals(frame.text()))\n      server.send(\"request2\");\n    else\n      server.send(frame.text());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte App for Production\nDESCRIPTION: Command to create an optimized production build of the Svelte application, which will generate files in the public directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using an ElementHandle with waitForSelector in Python (Async)\nDESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.wait_for_selector` in asynchronous Python, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python async\n# Get the element handle\nelement_handle = page.wait_for_selector('#box')\n\n# Assert bounding box for the element\nbounding_box = await element_handle.bounding_box()\nassert bounding_box.width == 100\n\n# Assert attribute for the element\nclass_names = await element_handle.get_attribute('class')\nassert 'highlighted' in class_names\n```\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a Browser Context in Playwright (Java)\nDESCRIPTION: Shows the Java syntax for launching a browser (`chromium.launch()`), creating a new isolated `BrowserContext` (`browser.newContext()`), and then creating a `Page` (`context.newPage()`) within that context using the Playwright Java library. This demonstrates manual isolation setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browser-contexts.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = chromium.launch();\nBrowserContext context = browser.newContext();\nPage page = context.newPage();\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Event Listeners in Playwright (Async Python)\nDESCRIPTION: Illustrates adding event listeners using `page.on` and removing them using `page.remove_listener` in asynchronous Playwright for Python. Separate functions handle 'request' and 'requestfinished' events. The 'requestfinished' listener is removed by passing the event name and the function reference.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python async\ndef print_request_sent(request):\n  print(\"Request sent: \" + request.url)\n\ndef print_request_finished(request):\n  print(\"Request finished: \" + request.url)\n\npage.on(\"request\", print_request_sent)\npage.on(\"requestfinished\", print_request_finished)\nawait page.goto(\"https://wikipedia.org\")\n\npage.remove_listener(\"requestfinished\", print_request_finished)\nawait page.goto(\"https://www.openstreetmap.org/\")\n```\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in Playwright Python (Sync)\nDESCRIPTION: Illustrates synchronous handling of file downloads in Playwright Python. Involves triggering the download, waiting for it to complete, and saving the file. Requires the Playwright module and Python's synchronous capabilities.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/downloads.md#2025-04-22_snippet_3\n\nLANGUAGE: python sync\nCODE:\n```\n# Start waiting for the download\nwith page.expect_download() as download_info:\n    # Perform the action that initiates download\n    page.get_by_text(\"Download file\").click()\ndownload = download_info.value\n\n# Wait for the download process to complete and save the downloaded file somewhere\ndownload.save_as(\"/path/to/save/at/\" + download.suggested_filename)\n```\n\nLANGUAGE: python sync\nCODE:\n```\npage.on(\"download\", lambda download: print(download.path()))\n```\n\n----------------------------------------\n\nTITLE: Correct Way to Configure Custom Parameters in Playwright Config\nDESCRIPTION: Example showing the correct approach to defining custom parameters in Playwright configuration in v1.18 and later, using the option: true flag to make fixtures configurable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT: THIS SNIPPET WORKS SINCE v1.18.\n\n// fixtures.js\nconst test = base.extend({\n  // Fixtures marked as \"option: true\" will get a value specified in the config,\n  // or fallback to the default value.\n  myParameter: ['default', { option: true }],\n});\n\n// playwright.config.js\nmodule.exports = {\n  use: {\n    myParameter: 'value',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Waiting for Navigation After Timeout Click in C#\nDESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in C#. The method continues execution after navigation has finished.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_134\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RunAndWaitForNavigationAsync(async () =>\n{\n    // This action triggers the navigation after a timeout.\n    await page.GetByText(\"Navigate after timeout\").ClickAsync();\n});\n\n// The method continues after navigation has finished\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript with Locator.evaluate in Java\nDESCRIPTION: Shows how to execute JavaScript code on a matched element using Locator.evaluate in Java. Demonstrates passing arguments to the evaluation function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nObject result = page.getByTestId(\"myId\").evaluate(\"(element, [x, y]) => {\\n\" +\n  \"  return element.textContent + ' ' + x * y;\\n\" +\n  \"}\", Arrays.asList(7, 8));\nSystem.out.println(result); // prints \"myId text 56\"\n```\n\n----------------------------------------\n\nTITLE: Precise Scrolling Control\nDESCRIPTION: Demonstrates precise scrolling control using mouse wheel events or programmatic scrolling with evaluate(). Includes both mouse-based and programmatic approaches.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.getByTestId('scrolling-container').hover();\nawait page.mouse.wheel(0, 10);\n\nawait page.getByTestId('scrolling-container').evaluate(e => e.scrollTop += 100);\n```\n\nLANGUAGE: java\nCODE:\n```\npage.getByTestId(\"scrolling-container\").hover();\npage.mouse.wheel(0, 10);\n\npage.getByTestId(\"scrolling-container\").evaluate(\"e => e.scrollTop += 100\");\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_by_test_id(\"scrolling-container\").hover()\nawait page.mouse.wheel(0, 10)\n\nawait page.get_by_test_id(\"scrolling-container\").evaluate(\"e => e.scrollTop += 100\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByTestId(\"scrolling-container\").HoverAsync();\nawait page.Mouse.WheelAsync(0, 10);\n\nawait page.GetByTestId(\"scrolling-container\").EvaluateAsync(\"e => e.scrollTop += 100\");\n```\n\n----------------------------------------\n\nTITLE: Using Base URL in Playwright Tests\nDESCRIPTION: Example test demonstrating how to use relative paths with configured baseURL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-webserver-js.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // This will navigate to http://localhost:3000/login\n  await page.goto('./login');\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Locators via Logical 'And' in Playwright C#\nDESCRIPTION: Combines 'button' role and a 'Subscribe' title locator into a single locator using Playwright for C#. Produces a locator narrowed by both role and title, suitable for detailed element selection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nvar button = page.GetByRole(AriaRole.Button).And(page.GetByTitle(\"Subscribe\"));\n```\n\n----------------------------------------\n\nTITLE: Soft Assertions with Error Check\nDESCRIPTION: Demonstrates how to verify if there were any soft assertion failures during test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\nawait expect.soft(page.getByTestId('eta')).toHaveText('1 day');\n\n// Avoid running further if there were soft assertion failures.\nexpect(test.info().errors).toHaveLength(0);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Docker for .NET Web Scraping\nDESCRIPTION: Command to run the Playwright Docker container for .NET web scraping with security measures for untrusted websites.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Creating JSHandle with Page.evaluateHandle in Java\nDESCRIPTION: Shows how to create a JSHandle for the window object using Page.evaluateHandle method in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nJSHandle windowHandle = page.evaluateHandle(\"() => window\");\n```\n\n----------------------------------------\n\nTITLE: Using toBeTruthy Method for Truthy Checking\nDESCRIPTION: Demonstrates the use of 'toBeTruthy' method to check if a value is truthy in a boolean context. This is useful when you don't care about the specific truthy value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = { example: 'value' };\nexpect(value).toBeTruthy();\n```\n\n----------------------------------------\n\nTITLE: Configuring sirv for Single-Page Application Mode\nDESCRIPTION: JavaScript configuration in package.json to enable single-page application mode in sirv, allowing it to respond to requests for any path rather than just matching files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n\"start\": \"sirv public --single\"\n```\n\n----------------------------------------\n\nTITLE: HTML Button for Partial ARIA Snapshot Matching Example\nDESCRIPTION: This HTML snippet provides a simple button element. It serves as the basis for demonstrating partial ARIA snapshot matching where the snapshot template might only match the role, ignoring the name.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n```html\n<button>Submit</button>\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Console Messages in Python (Async)\nDESCRIPTION: Demonstrates asyncio-based console message handling in Python, including listening for events, filtering by type, and accessing message arguments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-consolemessage.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Listen for all console logs\npage.on(\"console\", lambda msg: print(msg.text))\n\n# Listen for all console events and handle errors\npage.on(\"console\", lambda msg: print(f\"error: {msg.text}\") if msg.type == \"error\" else None)\n\n# Get the next console log\nasync with page.expect_console_message() as msg_info:\n    # Issue console.log inside the page\n    await page.evaluate(\"console.log('hello', 42, { foo: 'bar' })\")\nmsg = await msg_info.value\n\n# Deconstruct print arguments\nawait msg.args[0].json_value() # hello\nawait msg.args[1].json_value() # 42\n```\n\n----------------------------------------\n\nTITLE: Configuring Blob Reporter with Command Line\nDESCRIPTION: Basic command to run Playwright tests with blob reporter that generates detailed test reports.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --reporter=blob\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Headed Mode (Batch)\nDESCRIPTION: Commands to run Playwright tests in headed mode, opening a browser window for each test, using Batch.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nset HEADED=1\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Screenshot Type Selection Option\nDESCRIPTION: Defines the `type` option that allows specifying whether screenshots should be saved as PNG or JPEG. Defaults to PNG.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\n- `type` <[ScreenshotType]<\"png\"|\"jpeg\">>\n```\n\n----------------------------------------\n\nTITLE: Frame Locator Owner Example\nDESCRIPTION: Demonstrates how to convert a FrameLocator back to a Locator using the owner() method for iframe element interaction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-framelocator.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst frameLocator = page.locator('iframe[name=\"embedded\"]').contentFrame();\n// ...\nconst locator = frameLocator.owner();\nawait expect(locator).toBeVisible();\n```\n\nLANGUAGE: java\nCODE:\n```\nFrameLocator frameLocator = page.locator(\"iframe[name=\\\"embedded\\\"]\").contentFrame();\n// ...\nLocator locator = frameLocator.owner();\nassertThat(locator).isVisible();\n```\n\nLANGUAGE: python\nCODE:\n```\nframe_locator = page.locator(\"iframe[name=\\\"embedded\\\"]\").content_frame\n# ...\nlocator = frame_locator.owner\nawait expect(locator).to_be_visible()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar frameLocator = Page.Locator(\"iframe[name=\\\"embedded\\\"]\").ContentFrame;\n// ...\nvar locator = frameLocator.Owner;\nawait Expect(locator).ToBeVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Options in JavaScript\nDESCRIPTION: Shows how to set various options for the fetch method in JavaScript, including URL parameters, headers, and request body.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  params: { key: \"value\" },\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 30000,\n  failOnStatusCode: false,\n  form: { username: \"john\", password: \"doe\" },\n  multipart: new FormData(),\n  data: JSON.stringify({ key: \"value\" }),\n  ignoreHTTPSErrors: false,\n  maxRedirects: 20\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking WebSocket Messages in Both Directions with Playwright in Java\nDESCRIPTION: Using Playwright in Java, block specified messages from being sent in both directions over a WebSocket. Requires connection to a WebSocket and Java environment with Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npage.routeWebSocket(\"/ws\", ws -> {\n  WebSocketRoute server = ws.connectToServer();\n  ws.onMessage(frame -> {\n    if (!\"blocked-from-the-page\".equals(frame.text()))\n      server.send(frame.text());\n  });\n  server.onMessage(frame -> {\n    if (!\"blocked-from-the-server\".equals(frame.text()))\n      ws.send(frame.text());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronous Frame.wait_for_function Example in Python\nDESCRIPTION: This Python example shows the synchronous usage of Frame.wait_for_function. It performs the same operation as the asynchronous example, launching a WebKit browser, setting a timeout to change a variable, and waiting for that change.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = webkit.launch()\n    page = browser.new_page()\n    page.evaluate(\"window.x = 0; setTimeout(() => { window.x = 100 }, 1000);\")\n    page.main_frame.wait_for_function(\"() => window.x > 0\")\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Checking Playwright Version via yarn - Bash\nDESCRIPTION: Uses yarn to print the installed Playwright version in the current project context. Assists in version tracking and troubleshooting. Outputs the version to console.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright --version\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dialog Handling Causing Stall (C#)\nDESCRIPTION: Demonstrates incorrect usage where a `Page.Dialog` event handler is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the asynchronous action that triggered the dialog because web dialogs are modal.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npage.Dialog += (_, dialog) => Console.WriteLine(dialog.Message);\nawait page.GetByRole(AriaRole.Button).ClickAsync(); // Will hang here\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Test to be Fixed in Playwright\nDESCRIPTION: This example shows how to declare a test as 'to be fixed' using test.fixme. Playwright will not run tests marked with fixme.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.fixme('to be fixed', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Load State After Button Click in C#\nDESCRIPTION: Demonstrates how to wait for a page to reach the 'load' state after a button click in C#. The method resolves after the 'load' event is fired.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_124\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GetByRole(AriaRole.Button).ClickAsync(); // Click triggers navigation.\nawait page.WaitForLoadStateAsync(); // The promise resolves after 'load' event.\n```\n\n----------------------------------------\n\nTITLE: Using afterAll Hook with Title in Playwright Tests\nDESCRIPTION: Demonstrates how to create an afterAll hook with a descriptive title, which can make test reports more readable and provide better context for the hook's purpose.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest.afterAll('Teardown', async () => {\n  console.log('Done with tests');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating DataTransfer and Dispatching DragStart Event in Java\nDESCRIPTION: This snippet shows how to create a DataTransfer object and use it to dispatch a dragstart event in Java. Note that DataTransfer can only be created in Chromium and Firefox.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nJSHandle dataTransfer = page.evaluateHandle(\"() => new DataTransfer()\");\nMap<String, Object> arg = new HashMap<>();\narg.put(\"dataTransfer\", dataTransfer);\npage.dispatchEvent(\"#source\", \"dragstart\", arg);\n```\n\n----------------------------------------\n\nTITLE: Triggering Select-All Keyboard Shortcut in Playwright (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to simulate the 'Select All' keyboard shortcut (Ctrl+A or Cmd+A) using Playwright's `page.keyboard.press` method. The 'ControlOrMeta' modifier automatically resolves to 'Control' on Windows/Linux and 'Meta' (Command) on macOS.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait page.keyboard.press('ControlOrMeta+A');\n```\n```\n\n----------------------------------------\n\nTITLE: Simulating Current Time Display with Timers - HTML\nDESCRIPTION: This HTML snippet sets up a demo page element that continually displays the current time. It uses setInterval to re-render the time every second. Intended for use with time manipulation tests, it relies on basic web APIs and targets an element by id.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\\\"current-time\\\" data-testid=\\\"current-time\\\"></div>\\n<script>\\n  const renderTime = () => {\\n    document.getElementById('current-time').textContent =\\n        new Date().toLocaleString();\\n  };\\n  setInterval(renderTime, 1000);\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript in Python (Async)\nDESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright Python async API. This allows testing how web applications behave in environments without JavaScript support.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_77\n\nLANGUAGE: python\nCODE:\n```\ncontext = await browser.new_context(\n  java_script_enabled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Multiple Selectors on ElementHandle in Java\nDESCRIPTION: Shows how to evaluate multiple selectors on an ElementHandle and extract inner text from multiple elements in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nElementHandle feedHandle = page.querySelector(\".feed\");\nassertEquals(Arrays.asList(\"Hello!\", \"Hi!\"), feedHandle.evalOnSelectorAll(\".tweet\", \"nodes => nodes.map(n => n.innerText)\"));\n```\n\n----------------------------------------\n\nTITLE: Connecting Playwright to WebView2 using Java\nDESCRIPTION: This snippet shows how to connect Playwright to a running WebView2 application using Java. It establishes a connection over CDP and retrieves the browser context and page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = playwright.chromium().connectOverCDP(\"http://localhost:9222\");\nBrowserContext context = browser.contexts().get(0);\nPage page = context.pages().get(0);\n```\n\n----------------------------------------\n\nTITLE: Handling Security Details Confirmation with Locator Handler in C#\nDESCRIPTION: C# implementation of a locator handler to automatically skip a security details confirmation page. The handler detects text matching 'Confirm your security details' and clicks the 'Remind me later' button.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_85\n\nLANGUAGE: csharp\nCODE:\n```\n// Setup the handler.\nawait page.AddLocatorHandlerAsync(page.GetByText(\"Confirm your security details\"), async () => {\n  await page.GetByRole(AriaRole.Button, new() { Name = \"Remind me later\" }).ClickAsync();\n});\n\n// Write the test as usual.\nawait page.GotoAsync(\"https://example.com\");\nawait page.GetByRole(\"button\", new() { Name = \"Start here\" }).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Emulating Mobile Devices with Playwright Codegen for Java\nDESCRIPTION: Command to generate code while emulating an iPhone 13 for the playwright.dev website using Java. This Maven execution sets device-specific configurations like viewport size and user agent.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args='codegen --device=\"iPhone 13\" playwright.dev'\n```\n\n----------------------------------------\n\nTITLE: HTML Dynamic Header Example\nDESCRIPTION: Sample HTML heading with dynamic number for regex matching demonstration\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<h1>Issues 12</h1>\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser with Custom Arguments Using Playwright C#\nDESCRIPTION: Shows launching a Chromium browser while excluding specific default arguments, using C# Playwright. Requires Microsoft.Playwright and browser options object with IgnoreDefaultArgs. Output is a browser instance suitable for custom automation flows.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar browser = await playwright.Chromium.LaunchAsync(new() {\\n    IgnoreDefaultArgs = new[] { \\\"--mute-audio\\\" }\\n});\n```\n\n----------------------------------------\n\nTITLE: Using toMatch Method for Regular Expression Matching\nDESCRIPTION: Demonstrates how to use the 'toMatch' method to check if a string matches a given regular expression pattern.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = 'Is 42 enough?';\nexpect(value).toMatch(/Is \\d+ enough/);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Navigation After Timeout Click in Python (Sync)\nDESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in Python using synchronous syntax. Resolves after navigation has finished.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_133\n\nLANGUAGE: python\nCODE:\n```\nwith page.expect_navigation():\n    # This action triggers the navigation after a timeout.\n    page.get_by_text(\"Navigate after timeout\").click()\n# Resolves after navigation has finished\n```\n\n----------------------------------------\n\nTITLE: Android WebView Selector Configuration\nDESCRIPTION: Defines the selector object structure for identifying Android WebViews. Includes optional package identifier and socket name parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  pkg?: string,\n  socketName?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using toBeLessThanOrEqual Method for Numeric Comparisons\nDESCRIPTION: Shows how to use the 'toBeLessThanOrEqual' method to check if a value is less than or equal to another value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = 42;\nexpect(value).toBeLessThanOrEqual(42);\n```\n\n----------------------------------------\n\nTITLE: Select Options Configuration (Java, JavaScript, C#)\nDESCRIPTION: Defines options for selecting elements in dropdowns. Supports selection by value, label, index, or element handle.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n- `values` <[null]|[string]|[ElementHandle]|[Array]<[string]>|[Object]|[Array]<[ElementHandle]>|[Array]<[Object]>>\n  - `value` ?<[string]> Matches by `option.value`. Optional.\n  - `label` ?<[string]> Matches by `option.label`. Optional.\n  - `index` ?<[int]> Matches by the index. Optional.\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Timezone via Context Options (C#)\nDESCRIPTION: This C# snippet shows setting the `Locale` and `TimezoneId` properties when creating a new browser context using `Microsoft.Playwright`. These properties are set on the options object passed to `NewContextAsync`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait using var context = await browser.NewContextAsync(new()\n{\n    Locale = \"de-DE\",\n    TimezoneId = \"Europe/Berlin\"\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests from Command Line\nDESCRIPTION: Command to execute Playwright tests using the CLI runner, which will automatically run the tests across configured browsers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Test with Specific Title\nDESCRIPTION: Command to run a Playwright test with a specific title using the filter flag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter \"Name~GetStartedLink\"\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests on Specific Browser (Bash)\nDESCRIPTION: Command to run Playwright tests on a specific browser (WebKit in this example) using environment variable in Bash.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nBROWSER=webkit dotnet test\n```\n\n----------------------------------------\n\nTITLE: Emulating Mobile Devices with Playwright Codegen for C#\nDESCRIPTION: Command to generate code while emulating an iPhone 13 for the playwright.dev website using C#. This PowerShell execution sets device-specific configurations like viewport size and user agent.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 codegen --device=\"iPhone 13\" playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Chromium Tracing with Playwright (sync) - Python\nDESCRIPTION: Provides a synchronous example of using Playwright's Chromium tracing in Python. The synchronous browser.start_tracing function initializes the trace session for a specific page, writing trace output to a designated file. The trace is ended with browser.stop_tracing after actions are performed. Prerequisites are Playwright's synchronous Python bindings. Parameters mirror those of the asynchronous variant, supporting output paths and optional configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nbrowser.start_tracing(page, path=\"trace.json\")\npage.goto(\"https://www.google.com\")\nbrowser.stop_tracing()\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function to BrowserContext in JavaScript\nDESCRIPTION: This snippet demonstrates how to expose a SHA256 hashing function to all pages in a browser context using Playwright with JavaScript. It creates a new context, exposes the function, and then uses it in a page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\nconst crypto = require('crypto');\n\n(async () => {\n  const browser = await webkit.launch({ headless: false });\n  const context = await browser.newContext();\n  await context.exposeFunction('sha256', text =>\n    crypto.createHash('sha256').update(text).digest('hex'),\n  );\n  const page = await context.newPage();\n  await page.setContent(`\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n  `);\n  await page.getByRole('button').click();\n})();\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Chromium Tracing with Playwright (async) - Python\nDESCRIPTION: Shows usage of Playwright's browser tracing methods in Python with async syntax. The await browser.start_tracing function begins a new trace for the given page and writes output to the specified path. After navigation, await browser.stop_tracing completes the capture. Requires the async Playwright package for Python and asyncio-compatible code. Accepts page and path as inputs, returning a trace file buffer. Options for screenshots and categories are available.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nawait browser.start_tracing(page, path=\"trace.json\")\nawait page.goto(\"https://www.google.com\")\nawait browser.stop_tracing()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Browser in Playwright Tests\nDESCRIPTION: Example showing how to connect to a remote browser instance using WebSocket endpoint instead of launching a browser locally, useful for special testing environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    connectOptions: {\n      wsEndpoint: 'ws://localhost:5678',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Routing WebSocket Connections in C#\nDESCRIPTION: Example of routing WebSocket connections using Page.RouteWebSocketAsync method in C#. It demonstrates how to intercept and respond to specific WebSocket messages asynchronously.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_100\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.RouteWebSocketAsync(\"/ws\", ws => {\n  ws.OnMessage(frame => {\n    if (frame.Text == \"request\")\n      ws.Send(\"response\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Time for Page Testing - Playwright JavaScript\nDESCRIPTION: Demonstrates the use of Playwright's Clock API to set and validate a fixed time within a web page test. Uses setFixedTime to control Date.now() output, navigates to a test page, and asserts that the displayed time updates as expected. Dependencies include Playwright and a running test server; it expects page fixture objects and updates DOM elements displaying time.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.clock.setFixedTime(new Date('2024-02-02T10:00:00'));\nawait page.goto('http://localhost:3333');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\nawait page.clock.setFixedTime(new Date('2024-02-02T10:30:00'));\n// We know that the page has a timer that updates the time every second.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions on Frame in Python (Sync)\nDESCRIPTION: Demonstrates the synchronous usage of the evaluate method in Python to execute a JavaScript expression within a frame and return its result.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nresult = frame.evaluate(\"([x, y]) => Promise.resolve(x * y)\", [7, 8])\nprint(result) # prints \"56\"\n```\n\n----------------------------------------\n\nTITLE: Querying All Text Contents with Playwright C#\nDESCRIPTION: Fetches the textContent of all 'link' role nodes using Playwright for C#. The asynchronous result is a list of strings, each representing the text content of a matched node.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nvar texts = await page.GetByRole(AriaRole.Link).AllTextContentsAsync();\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Reporter Configuration\nDESCRIPTION: Configuration example for GitHub Actions reporter with conditional reporter selection based on CI environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // 'github' for GitHub Actions CI to generate annotations, plus a concise 'dot'\n  // default 'list' when running locally\n  reporter: process.env.CI ? 'github' : 'list',\n});\n```\n\n----------------------------------------\n\nTITLE: Using nth Element Locator in Playwright\nDESCRIPTION: Demonstrates how to use the nth= locator to select specific elements from a list of matches, including the first and last elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Click first button\nawait page.locator('button').locator('nth=0').click();\n\n// Click last button\nawait page.locator('button').locator('nth=-1').click();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Click first button\npage.locator(\"button\").locator(\"nth=0\").click();\n\n// Click last button\npage.locator(\"button\").locator(\"nth=-1\").click();\n```\n\nLANGUAGE: python\nCODE:\n```\n# Click first button\nawait page.locator(\"button\").locator(\"nth=0\").click()\n\n# Click last button\nawait page.locator(\"button\").locator(\"nth=-1\").click()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Click first button\nawait page.Locator(\"button\").Locator(\"nth=0\").ClickAsync();\n\n// Click last button\nawait page.Locator(\"button\").Locator(\"nth=-1\").ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Video Path in Playwright - C#\nDESCRIPTION: An example in C# for retrieving the path of a video recorded by Playwright when the recordVideo option is active. The method asynchronously fetches the path which will become accessible after the browser context is closed and the video fully recorded.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(await page.Video.GetPathAsync());\n```\n\n----------------------------------------\n\nTITLE: Setting Storage State for Browser Context in C# and Java\nDESCRIPTION: Specifies how to set the storage state for initializing a browser context in C# and Java using a file path.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  storageState: \"path/to/storage/state.json\",\n  storageStatePath: \"path/to/storage/state.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Stack in JavaScript\nDESCRIPTION: Retrieves the error stack trace. This is set when an Error (or its subclass) has been thrown during test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfoerror.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntestInfoError.stack\n```\n\n----------------------------------------\n\nTITLE: Recording Multiple Trace Chunks (Python Async)\nDESCRIPTION: Shows how to record separate trace chunks asynchronously in Python using `await context.tracing.start_chunk()` and `await context.tracing.stop_chunk()`. Global tracing must be active (`await context.tracing.start()`). Each chunk captures intermediate actions and saves them to a specified file path.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nawait context.tracing.start(screenshots=True, snapshots=True)\npage = await context.new_page()\nawait page.goto(\"https://playwright.dev\")\n\nawait context.tracing.start_chunk()\nawait page.get_by_text(\"Get Started\").click()\n# Everything between start_chunk and stop_chunk will be recorded in the trace.\nawait context.tracing.stop_chunk(path = \"trace1.zip\")\n\nawait context.tracing.start_chunk()\nawait page.goto(\"http://example.com\")\n# Save a second trace file with different actions.\nawait context.tracing.stop_chunk(path = \"trace2.zip\")\n```\n\n----------------------------------------\n\nTITLE: Recording Playwright Tests with Custom Setup in Java\nDESCRIPTION: Java implementation for using Playwright's recording features with custom configurations. The code launches Chrome in headed mode, sets up a browser context with custom routing, and pauses for manual recording via the page.pause() method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      BrowserType chromium = playwright.chromium();\n      // Make sure to run headed.\n      Browser browser = chromium.launch(new BrowserType.LaunchOptions().setHeadless(false));\n      // Setup context however you like.\n      BrowserContext context = browser.newContext(/* pass any options */);\n      context.route(\"**/*\", route -> route.resume());\n      // Pause the page, and start recording manually.\n      Page page = context.newPage();\n      page.pause();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Android Devices with Playwright in JavaScript\nDESCRIPTION: This snippet demonstrates how to automate Android devices with Playwright, including device connections, interacting with WebView and Browser, and taking screenshots. Dependencies include an Android device or AVD Emulator and ADB daemon. Key parameters include the device model and serial, and paths for screenshots. The output includes device model, serial, and screenshot files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-android.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { _android: android } = require('playwright');\n\n(async () => {\n  // Connect to the device.\n  const [device] = await android.devices();\n  console.log(`Model: ${device.model()}`);\n  console.log(`Serial: ${device.serial()}`);\n  // Take screenshot of the whole device.\n  await device.screenshot({ path: 'device.png' });\n\n  {\n    // --------------------- WebView -----------------------\n\n    // Launch an application with WebView.\n    await device.shell('am force-stop org.chromium.webview_shell');\n    await device.shell('am start org.chromium.webview_shell/.WebViewBrowserActivity');\n    // Get the WebView.\n    const webview = await device.webView({ pkg: 'org.chromium.webview_shell' });\n\n    // Fill the input box.\n    await device.fill({\n      res: 'org.chromium.webview_shell:id/url_field',\n    }, 'github.com/microsoft/playwright');\n    await device.press({\n      res: 'org.chromium.webview_shell:id/url_field',\n    }, 'Enter');\n\n    // Work with WebView's page as usual.\n    const page = await webview.page();\n    await page.waitForNavigation({ url: /.*microsoft\\/playwright.*/ });\n    console.log(await page.title());\n  }\n\n  {\n    // --------------------- Browser -----------------------\n\n    // Launch Chrome browser.\n    await device.shell('am force-stop com.android.chrome');\n    const context = await device.launchBrowser();\n\n    // Use BrowserContext as usual.\n    const page = await context.newPage();\n    await page.goto('https://webkit.org/');\n    console.log(await page.evaluate(() => window.location.href));\n    await page.screenshot({ path: 'page.png' });\n\n    await context.close();\n  }\n\n  // Close the device.\n  await device.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Reusing a Single Page Between Tests in Playwright (TypeScript)\nDESCRIPTION: This TypeScript code shows how to reuse a single Page object between multiple tests in Playwright. It creates a page in beforeAll, uses it in tests, and closes it in afterAll, with proper TypeScript typing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-retries-js.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, type Page } from '@playwright/test';\n\ntest.describe.configure({ mode: 'serial' });\n\nlet page: Page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```\n\n----------------------------------------\n\nTITLE: Watching viewport size changes in JavaScript\nDESCRIPTION: Example of using waitForFunction to monitor changes in the viewport size. The function resolves when the window's inner width becomes less than 100 pixels, typically after resizing the viewport.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\n\n(async () => {\n  const browser = await webkit.launch();\n  const page = await browser.newPage();\n  const watchDog = page.waitForFunction(() => window.innerWidth < 100);\n  await page.setViewportSize({ width: 50, height: 50 });\n  await watchDog;\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView2 Test Environment in C#\nDESCRIPTION: This C# code sets up a test class for WebView2 applications using Playwright. It manages the WebView2 process, connects Playwright to it, and provides an isolated environment for each test run.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// WebView2Test.cs\nusing System.Diagnostics;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PlaywrightTest\n{\n    public IBrowser Browser { get; internal set; } = null!;\n    public IBrowserContext Context { get; internal set; } = null!;\n    public IPage Page { get; internal set; } = null!;\n    private Process? _webView2Process = null;\n    private string _userDataDir = null!;\n    private string _executablePath = Path.Join(Directory.GetCurrentDirectory(), @\"..\\..\\..\\..\\webview2-app\\bin\\Debug\\net8.0-windows\\webview2.exe\");\n\n    [TestInitialize]\n    public async Task BrowserTestInitialize()\n    {\n        var cdpPort = 10000 + WorkerIndex;\n        Assert.IsTrue(File.Exists(_executablePath), \"Make sure that the executable exists\");\n        _userDataDir = Path.Join(Path.GetTempPath(), $\"playwright-webview2-tests/user-data-dir-{WorkerIndex}\");\n        // WebView2 does some lazy cleanups on shutdown so we can't clean it up after each test\n        if (Directory.Exists(_userDataDir))\n        {\n            Directory.Delete(_userDataDir, true);\n        }\n        _webView2Process = Process.Start(new ProcessStartInfo(_executablePath)\n        {\n            EnvironmentVariables =\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Pytest Options in pytest.ini\nDESCRIPTION: Example configuration file for setting default pytest options to run tests in Firefox with UI.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\n# Run firefox with UI\naddopts = --headed --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Pytest via Anaconda\nDESCRIPTION: Commands to install the Playwright Pytest plugin using Anaconda package manager, including adding necessary channels.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda config --add channels conda-forge\nconda config --add channels microsoft\nconda install pytest-playwright\n```\n\n----------------------------------------\n\nTITLE: Handling Popups and Waiting for DOM Content in C#\nDESCRIPTION: Shows how to wait for a popup to be triggered by a button click and then wait for the 'domcontentloaded' state before interacting with the popup in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_129\n\nLANGUAGE: csharp\nCODE:\n```\nvar popup = await page.RunAndWaitForPopupAsync(async () =>\n{\n    await page.GetByRole(AriaRole.Button).ClickAsync(); // click triggers the popup\n});\n// Wait for the \"DOMContentLoaded\" event.\nawait popup.WaitForLoadStateAsync(LoadState.DOMContentLoaded);\nConsole.WriteLine(await popup.TitleAsync()); // popup is ready to use.\n```\n\n----------------------------------------\n\nTITLE: HAR Recording Configuration in C#\nDESCRIPTION: Demonstrates various HAR recording options including auto-zipping and minimal mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await Browser.NewContextAsync(new() { RecordHarPath = \"example.har.zip\" });\n```\n\n----------------------------------------\n\nTITLE: Declaring a Focused Test Group with Test.describe.only in JavaScript\nDESCRIPTION: Shows how to use test.describe.only to declare a focused group of tests. If there are some focused tests or suites, all of them will be run but nothing else.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe.only('focused group', () => {\n  test('in the focused group', async ({ page }) => {\n    // This test will run\n  });\n});\ntest('not in the focused group', async ({ page }) => {\n  // This test will not run\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript in Java\nDESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright Java client. This allows testing how web applications behave in environments without JavaScript support.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_76\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .javaScriptEnabled(false));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Error Handling in Playwright\nDESCRIPTION: Example of customizing browser context arguments to ignore HTTPS errors across all tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture(scope=\"session\")\ndef browser_context_args(browser_context_args):\n    return {\n        **browser_context_args,\n        \"ignore_https_errors\": True\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameterized Projects in JavaScript\nDESCRIPTION: This configuration file defines multiple test projects with different values for the custom 'person' option, allowing tests to be run in multiple configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nmodule.exports = defineConfig({\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Color Scheme and Media in C#\nDESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright C# client.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\n// Create context with dark mode\nawait using var context = await browser.NewContextAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Create page with dark mode\nvar page = await browser.NewPageAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Change color scheme for the page\nawait page.EmulateMediaAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Change media for page\nawait page.EmulateMediaAsync(new()\n{\n    Media = Media.Print\n});\n```\n\n----------------------------------------\n\nTITLE: Using APIResponseAssertions with negation in JavaScript\nDESCRIPTION: Example of using the .not property to negate an assertion and check that a response is not OK in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-apiresponseassertions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(response).not.toBeOK();\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with HTTPS Proxy (C#)\nDESCRIPTION: Commands to install Playwright browsers through an HTTPS proxy for C# implementations. Includes examples for bash, batch, and powershell environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS_PROXY=https://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset HTTPS_PROXY=https://192.0.2.1\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n----------------------------------------\n\nTITLE: Emulating Media Features in Playwright\nDESCRIPTION: Shows how to use the emulateMedia method to change CSS media type and emulate color schemes. It includes examples of changing media type between 'screen' and 'print', and setting color scheme to 'dark'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.evaluate(() => matchMedia('screen').matches);\n// → true\nawait page.evaluate(() => matchMedia('print').matches);\n// → false\n\nawait page.emulateMedia({ media: 'print' });\nawait page.evaluate(() => matchMedia('screen').matches);\n// → false\nawait page.evaluate(() => matchMedia('print').matches);\n// → true\n\nawait page.emulateMedia({});\nawait page.evaluate(() => matchMedia('screen').matches);\n// → true\nawait page.evaluate(() => matchMedia('print').matches);\n// → false\n```\n\nLANGUAGE: java\nCODE:\n```\npage.evaluate(\"() => matchMedia('screen').matches\");\n// → true\npage.evaluate(\"() => matchMedia('print').matches\");\n// → false\n\npage.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.PRINT));\npage.evaluate(\"() => matchMedia('screen').matches\");\n// → false\npage.evaluate(\"() => matchMedia('print').matches\");\n// → true\n\npage.emulateMedia(new Page.EmulateMediaOptions());\npage.evaluate(\"() => matchMedia('screen').matches\");\n// → true\npage.evaluate(\"() => matchMedia('print').matches\");\n// → false\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.evaluate(\"matchMedia('screen').matches\")\n# → True\nawait page.evaluate(\"matchMedia('print').matches\")\n# → False\n\nawait page.emulate_media(media=\"print\")\nawait page.evaluate(\"matchMedia('screen').matches\")\n# → False\nawait page.evaluate(\"matchMedia('print').matches\")\n# → True\n\nawait page.emulate_media()\nawait page.evaluate(\"matchMedia('screen').matches\")\n# → True\nawait page.evaluate(\"matchMedia('print').matches\")\n# → False\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.EvaluateAsync(\"() => matchMedia('screen').matches\");\n// → true\nawait page.EvaluateAsync(\"() => matchMedia('print').matches\");\n// → false\n\nawait page.EmulateMediaAsync(new() { Media = Media.Print });\nawait page.EvaluateAsync(\"() => matchMedia('screen').matches\");\n// → false\nawait page.EvaluateAsync(\"() => matchMedia('print').matches\");\n// → true\n\nawait page.EmulateMediaAsync(new() { Media = Media.Screen });\nawait page.EvaluateAsync(\"() => matchMedia('screen').matches\");\n// → true\nawait page.EvaluateAsync(\"() => matchMedia('print').matches\");\n// → false\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Path Templates in Playwright Config\nDESCRIPTION: Demonstrates how to configure snapshot path templates globally and for specific assertion types using TestConfig. Shows both single template and assertion-specific template configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_133\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n\n  // Single template for all assertions\n  snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',\n\n  // Assertion-specific templates\n  expect: {\n    toHaveScreenshot: {\n      pathTemplate: '{testDir}/__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',\n    },\n    toMatchAriaSnapshot: {\n      pathTemplate: '{testDir}/__snapshots__/{testFilePath}/{arg}{ext}',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Event Listeners in Playwright (Sync Python)\nDESCRIPTION: Illustrates adding event listeners using `page.on` and removing them using `page.remove_listener` in synchronous Playwright for Python. Separate functions handle 'request' and 'requestfinished' events. The 'requestfinished' listener is removed by passing the event name and the function reference.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/events.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python sync\ndef print_request_sent(request):\n  print(\"Request sent: \" + request.url)\n\ndef print_request_finished(request):\n  print(\"Request finished: \" + request.url)\n\npage.on(\"request\", print_request_sent)\npage.on(\"requestfinished\", print_request_finished)\npage.goto(\"https://wikipedia.org\")\n\npage.remove_listener(\"requestfinished\", print_request_finished)\npage.goto(\"https://www.openstreetmap.org/\")\n```\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to dispatch a click event on a button element using the Page.dispatchEvent method in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.dispatchEvent('button#submit', 'click');\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript in JavaScript\nDESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright JavaScript library. This allows testing how web applications behave in environments without JavaScript support.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  javaScriptEnabled: false\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Frame.wait_for_function in Python (Async)\nDESCRIPTION: This asynchronous Python example shows how to pass an argument to the predicate function in Frame.wait_for_function. It waits for an element matching a specific selector to appear in the document.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nselector = \".foo\"\nawait frame.wait_for_function(\"selector => !!document.querySelector(selector)\", selector)\n```\n\n----------------------------------------\n\nTITLE: Using Aria Snapshots with Strict Matching in Playwright v1.52\nDESCRIPTION: Code example showing how to use Aria Snapshots with the new /children property for strict matching and /url property for links.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait expect(locator).toMatchAriaSnapshot(`\n    - list\n      - /children: equal\n      - listitem: Feature A\n      - listitem:\n        - link \"Feature B\":\n          - /url: \"https://playwright.dev\"\n  `);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Parallel with JUnit\nDESCRIPTION: Implementation pattern for running Playwright tests in parallel using JUnit. It creates a base TestFixtures class with shared Playwright and Browser instances per class instance, allowing multiple test classes to run concurrently while ensuring thread safety.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Subclasses will inherit PER_CLASS behavior.\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass TestFixtures {\n  // Shared between all tests in the class.\n  Playwright playwright;\n  Browser browser;\n\n  @BeforeAll\n  void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterAll\n  void closeBrowser() {\n    playwright.close();\n  }\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeEach\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterEach\n  void closeContext() {\n    context.close();\n  }\n}\n\nclass Test1 extends TestFixtures {\n  @Test\n  void shouldClickButton() {\n    page.navigate(\"data:text/html,<script>var result;</script><button onclick='result=\\\"Clicked\\\"'>Go</button>\");\n    page.locator(\"button\").click();\n    assertEquals(\"Clicked\", page.evaluate(\"result\"));\n  }\n\n  @Test\n  void shouldCheckTheBox() {\n    page.setContent(\"<input id='checkbox' type='checkbox'></input>\");\n    page.locator(\"input\").check();\n    assertTrue((Boolean) page.evaluate(\"() => window['checkbox'].checked\"));\n  }\n\n  @Test\n  void shouldSearchWiki() {\n    page.navigate(\"https://www.wikipedia.org/\");\n    page.locator(\"input[name=\\\"search\\\"]\").click();\n    page.locator(\"input[name=\\\"search\\\"]\").fill(\"playwright\");\n    page.locator(\"input[name=\\\"search\\\"]\").press(\"Enter\");\n    assertEquals(\"https://en.wikipedia.org/wiki/Playwright\", page.url());\n  }\n}\n\nclass Test2 extends TestFixtures {\n  @Test\n  void shouldReturnInnerHTML() {\n    page.setContent(\"<div>hello</div>\");\n    assertEquals(\"hello\", page.innerHTML(\"css=div\"));\n  }\n\n  @Test\n  void shouldClickButton() {\n    Page popup = page.waitForPopup(() -> {\n      page.evaluate(\"window.open('about:blank');\");\n    });\n    assertEquals(\"about:blank\", popup.url());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Test Options in TypeScript\nDESCRIPTION: This TypeScript code defines a custom test option 'person' with a default value and proper type annotations. It extends the base test object with this new option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.extend<TestOptions>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n});\n```\n\n----------------------------------------\n\nTITLE: Global Timeout Configuration in C# xUnit\nDESCRIPTION: Demonstrates setting global timeout for Playwright assertions in C# using xUnit framework.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.Xunit;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1: PageTest\n{\n    UnitTest1()\n    {\n        SetDefaultExpectTimeout(10_000);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Timeout in Playwright Tests\nDESCRIPTION: Example showing how to configure a timeout for navigation actions in tests, after which the test will fail if navigation hasn't completed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    navigationTimeout: 3000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Downloaded Files to Test Results in Playwright\nDESCRIPTION: This example demonstrates how to attach files from external operations to the test results, automatically handling file copying to the test output directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport { download } from './my-custom-helpers';\n\ntest('basic test', async ({}, testInfo) => {\n  const tmpPath = await download('a');\n  await testInfo.attach('downloaded', { path: tmpPath });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright from Custom Artifact Repository (C#)\nDESCRIPTION: Commands to install Playwright browsers from a custom artifact repository for C# implementations using the PLAYWRIGHT_DOWNLOAD_HOST environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript in C#\nDESCRIPTION: Creates a new browser context with JavaScript disabled using the Playwright C# client. This allows testing how web applications behave in environments without JavaScript support.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_79\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = await browser.NewContextAsync(new() { JavaScriptEnabled = false });\n```\n\n----------------------------------------\n\nTITLE: Clicking Anchor Element with ElementHandle in Python Sync\nDESCRIPTION: Demonstrates the use of ElementHandle to click on an anchor ('a') DOM element in sync Python. Retrieves the element and performs a click action.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nhref_element = page.query_selector(\"a\")\nhref_element.click()\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Selectors Mode\nDESCRIPTION: Controls whether to enable strict selectors mode for browser context. In strict mode, operations that target a single element will throw if multiple elements match.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n- `strictSelectors` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Time Display HTML Implementation with Interval Timer\nDESCRIPTION: HTML implementation of a time display component that updates every second using setInterval. This component displays the current time in a div element with a data-testid attribute for testing purposes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>\n```\n\n----------------------------------------\n\nTITLE: WebSocketRoute.onMessage Handler - C#/Java\nDESCRIPTION: WebSocket message handler implementation for C# and Java. Processes WebSocketFrame objects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nfunction(WebSocketFrame)\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests on Specific Browser (Batch)\nDESCRIPTION: Commands to run Playwright tests on a specific browser (WebKit in this example) using environment variable in Batch.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nset BROWSER=webkit\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Returning Open Browser Contexts in Sync Playwright Python\nDESCRIPTION: This Python snippet uses Playwright’s sync API to print the number of open browser contexts in a browser instance. It requires the Playwright sync API and a Python environment. Demonstrates checking context count before and after creating a new context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nbrowser = pw.webkit.launch()\nprint(len(browser.contexts)) # prints `0`\ncontext = browser.new_context()\nprint(len(browser.contexts)) # prints `1`\n```\n\n----------------------------------------\n\nTITLE: Setting Reduced Motion Emulation for C# and Python Browser Context\nDESCRIPTION: Defines the reducedMotion option for browser contexts in C# and Python. This emulates the prefers-reduced-motion media feature with values 'reduce', 'no-preference', or 'null' to reset to system defaults.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_66\n\nLANGUAGE: csharp\nCODE:\n```\n- `reducedMotion` <[ReducedMotion]<\"reduce\"|\"no-preference\"|\"null\">>\n\nEmulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [`method: Page.emulateMedia`] for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Geolocation in Playwright Config\nDESCRIPTION: Sets up geolocation and required permissions in the Playwright Test configuration file. This allows testing location-based features by emulating a specific geographic position.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Context geolocation\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n    permissions: ['geolocation'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Initialization Script via Path (C#)\nDESCRIPTION: Calls the AddInitScriptAsync method in Playwright for C# to inject an initialization script file into every new page/frame. The preload.js file must exist at the specified path. Used to ensure consistent test setup. C# Playwright bindings are required.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.AddInitScriptAsync(scriptPath: \"./preload.js\");\n```\n\n----------------------------------------\n\nTITLE: Installing Browsers with Custom Path - Multiple Languages\nDESCRIPTION: Commands to install Playwright browsers in a custom location using environment variables across different shells and programming languages\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nnpx playwright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Emulating Dark Color Scheme with Playwright Codegen for JavaScript\nDESCRIPTION: Command to generate code while emulating dark color scheme for the playwright.dev website using JavaScript. This allows testing appearance and functionality in dark mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright codegen --color-scheme=dark playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Tests in Playwright\nDESCRIPTION: Shows two methods for tagging tests in Playwright: using the test details object or including tags in the test title. Tags can be used for filtering tests during execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', {\n  tag: '@smoke',\n}, async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n\ntest('another test @smoke', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring JavaScript variables with async Python\nDESCRIPTION: Demonstrates how to wait for a JavaScript variable to change using wait_for_function in async Python. The script sets a timer to change a variable and waits for that change to occur.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = await webkit.launch()\n    page = await browser.new_page()\n    await page.evaluate(\"window.x = 0; setTimeout(() => { window.x = 100 }, 1000);\")\n    await page.wait_for_function(\"() => window.x > 0\")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Updating Svelte Components in Playwright Tests\nDESCRIPTION: Shows how to update props, slots, and events of a mounted Svelte component in Playwright component tests. This allows testing component reactivity to changing inputs.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('update', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.update({\n    props: { msg: 'greetings' },\n    on: { click() {} },\n    slots: { default: 'Child' }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Text with Keyboard.insertText in Playwright (JavaScript)\nDESCRIPTION: Demonstrates using `page.keyboard.insertText` in JavaScript to dispatch an `input` event with the specified text ('嗨'). This method bypasses `keydown`, `keyup`, and `keypress` events and is useful for directly inserting text, including non-ASCII characters. Modifier keys do not affect this method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-keyboard.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\npage.keyboard.insertText('嗨');\n```\n```\n\n----------------------------------------\n\nTITLE: Waiting for Console Message in Playwright (Java)\nDESCRIPTION: Shows how to wait for a specific console message in Playwright using Java. This method waits for a condition based on page events and console messages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nList<String> failedUrls = new ArrayList<>();\ncontext.onResponse(response -> {\n  if (!response.ok()) {\n    failedUrls.add(response.url());\n  }\n});\npage1.getByText(\"Create user\").click();\npage2.getByText(\"Submit button\").click();\ncontext.waitForCondition(() -> failedUrls.size() > 3);\n```\n\n----------------------------------------\n\nTITLE: Handling JSON WebSocket Messages with Playwright in Java\nDESCRIPTION: Utilizes Playwright for Java to parse JSON messages and respond accordingly. Relies on Gson for JSON handling and Playwright setup in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npage.routeWebSocket(\"wss://example.com/ws\", ws -> {\n  ws.onMessage(frame -> {\n    JsonObject json = new JsonParser().parse(frame.text()).getAsJsonObject();\n    if (\"question\".equals(json.get(\"request\").getAsString())) {\n      Map<String, String> result = new HashMap();\n      result.put(\"response\", \"answer\");\n      ws.send(gson.toJson(result));\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Test with Snapshot Update Options in v1.50\nDESCRIPTION: Command line example showing how to update only changed snapshots and specify a 3-way merge source update method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --update-snapshots=changed --update-source-method=3way\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dialog Handling Causing Stall (JavaScript)\nDESCRIPTION: Demonstrates incorrect usage where a 'dialog' listener is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the action that triggered the dialog because web dialogs are modal.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\npage.on('dialog', dialog => console.log(dialog.message()));\nawait page.getByRole('button').click(); // Will hang here\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Callback on Every Actionability Check with Locator Handler in C#\nDESCRIPTION: C# implementation of a locator handler with the body element that runs a custom JavaScript function before every actionability check. Uses the NoWaitAfter option since the handler doesn't hide the body element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_90\n\nLANGUAGE: csharp\nCODE:\n```\n// Setup the handler.\nawait page.AddLocatorHandlerAsync(page.Locator(\"body\"), async () => {\n  await page.EvaluateAsync(\"window.removeObstructionsForTestIfNeeded()\");\n}, new() { NoWaitAfter = true });\n\n// Write the test as usual.\nawait page.GotoAsync(\"https://example.com\");\nawait page.GetByRole(\"button\", new() { Name = \"Start here\" }).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Emulating Dark Color Scheme with Playwright Codegen for Python\nDESCRIPTION: Command to generate code while emulating dark color scheme for the playwright.dev website using Python. This allows testing appearance and functionality in dark mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen --color-scheme=dark playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Handling JSON WebSocket Messages with Playwright in Python (Synchronous)\nDESCRIPTION: Synchronously processes JSON messages using Playwright in Python, checking message content and responding with JSON. Requires json module and page setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  json_message = json.loads(message)\n  if json_message[\"request\"] == \"question\":\n    ws.send(json.dumps({ \"response\": \"answer\" }))\n\npage.route_web_socket(\"wss://example.com/ws\", lambda ws: ws.on_message(\n    lambda message: message_handler(ws, message)\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Workers in Playwright\nDESCRIPTION: Example of disabling service workers in Playwright tests using the serviceWorkers option in the configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  use: {\n    serviceWorkers: 'block',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Test Module with Helper Function and Test Configuration in Playwright (Feature B)\nDESCRIPTION: This TypeScript file defines tests for 'feature-b' with custom viewport settings using the wrapper function pattern. It includes test.use() for configuration and exports a function containing the test definitions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\nexport default function createTests() {\n  test.use({ viewport: { width: 500, height: 500 } });\n\n  test('feature-b example test', async ({ page }) => {\n    // ... test goes here\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Playwright Docker Image for Java\nDESCRIPTION: Command to pull the Playwright Docker image for Java applications from Microsoft Artifact Registry.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mcr.microsoft.com/playwright/java:v%%VERSION%%-noble\n```\n\n----------------------------------------\n\nTITLE: Test Using Authentication State\nDESCRIPTION: Example test that uses the authenticated state set up by global setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await page.goto('/');\n  // You are signed in!\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Environment Variables in Playwright (JS/Python)\nDESCRIPTION: Defines the `env` browser launch option for Playwright in JavaScript and Python. It accepts an object mapping string keys to string, number, or boolean values, specifying environment variables for the launched browser process. Defaults to `process.env`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n- `env` <[Object]<[string], [string]|[float]|[boolean]>>\n```\n\n----------------------------------------\n\nTITLE: Checking for Redirects with Playwright Request (Multi-Language)\nDESCRIPTION: Demonstrates the behavior of `request.redirectedFrom()` when navigating to a URL that does not involve any server redirects. In such cases, the `redirectedFrom()` method returns null (or None in Python, or null check needed in C#), indicating that the request was not the result of a redirection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst response = await page.goto('https://google.com');\nconsole.log(response.request().redirectedFrom()); // null\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nResponse response = page.navigate(\"https://google.com\");\nSystem.out.println(response.request().redirectedFrom()); // null\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python async\nresponse = await page.goto(\"https://google.com\")\nprint(response.request.redirected_from) # None\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python sync\nresponse = page.goto(\"https://google.com\")\nprint(response.request.redirected_from) # None\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar response = await page.GotoAsync(\"https://www.google.com\");\nConsole.WriteLine(response.Request.RedirectedFrom?.Url); // null\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Locators in Python\nDESCRIPTION: Shows how to filter an existing locator to find a specific button with text\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nbuttons = page.locator(\"role=button\")\n# ...\nsubmit_button = buttons.filter(has_text=\"Submit\")\nsubmit_button.click()\n```\n\n----------------------------------------\n\nTITLE: Running UI Mode in Docker/Codespaces with External Access\nDESCRIPTION: Command to run Playwright UI Mode with host binding for Docker and GitHub Codespaces environments\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-ui-mode-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui-host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Reporter in Playwright Configuration\nDESCRIPTION: Demonstrates how to configure the 'line' reporter in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'line',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Annotations for Playwright Pages in Python\nDESCRIPTION: Example of using type annotations with Playwright's Page object for better IDE auto-completion and type checking.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import Page\n\ndef test_visit_admin_dashboard(page: Page):\n    page.goto(\"/admin\")\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Input Action Timeout (Python/Java/CSharp)\nDESCRIPTION: Specifies the maximum time in milliseconds for input actions in Playwright for Python, Java, and C#. Defaults to 30000 ms (30 seconds). Setting it to 0 disables the timeout. The default value can be changed using `BrowserContext.setDefaultTimeout` or `Page.setDefaultTimeout`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- `timeout` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Stylesheet Path for Screenshots\nDESCRIPTION: Defines the `stylePath` option for specifying file(s) containing CSS to apply when taking screenshots.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\n- `stylePath` <[string]|[Array]<[string]>>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using an ElementHandle with waitForSelector in Java\nDESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.waitForSelector` in Java, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n```java\n// Get the element handle\nJSHandle jsHandle = page.waitForSelector(\"#box\");\nElementHandle elementHandle = jsHandle.asElement();\n\n// Assert bounding box for the element\nBoundingBox boundingBox = elementHandle.boundingBox();\nassertEquals(100, boundingBox.width);\n\n// Assert attribute for the element\nString classNames = elementHandle.getAttribute(\"class\");\nassertTrue(classNames.contains(\"highlighted\"));\n```\n```\n\n----------------------------------------\n\nTITLE: Matching Strings Containing Substrings with expect.stringContaining in JavaScript\nDESCRIPTION: Illustrates `expect.stringContaining(expectedSubstring)` used within `expect().toEqual()` in Playwright tests. This matcher asserts that the received string contains the specified `expectedSubstring`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexpect('Hello world!').toEqual(expect.stringContaining('Hello'));\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport in Playwright Test\nDESCRIPTION: Configures the viewport size for tests using the TestOptions.viewport property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    viewport: { width: 100, height: 100 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: ElementHandle Screenshot Implementation\nDESCRIPTION: Method for capturing screenshots of specific elements, with support for clipping, masks and styling options. The method handles scrolling and actionability checks before taking the screenshot.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nasync screenshot(options?: ScreenshotOptions): Promise<Buffer>;\n```\n\n----------------------------------------\n\nTITLE: Running Single Test File\nDESCRIPTION: Command to run a specific test file by providing the file name.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest test_login.py\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Connection through SOCKS Proxy using Node.js\nDESCRIPTION: This code demonstrates how to establish a WebSocket connection through a SOCKS proxy server. It uses the 'ws' package for WebSocket functionality and 'socks-proxy-agent' to route the connection through a SOCKS proxy. The example connects to a WebSocket endpoint, sends a message, and handles responses.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar WebSocket = require('ws');\nvar SocksProxyAgent = require('socks-proxy-agent');\n\n// SOCKS proxy to connect to\nvar proxy = process.env.socks_proxy || 'socks://127.0.0.1:1080';\nconsole.log('using proxy server %j', proxy);\n\n// WebSocket endpoint for the proxy to connect to\nvar endpoint = process.argv[2] || 'ws://echo.websocket.org';\nconsole.log('attempting to connect to WebSocket %j', endpoint);\n\n// create an instance of the `SocksProxyAgent` class with the proxy server information\nvar agent = new SocksProxyAgent(proxy);\n\n// initiate the WebSocket connection\nvar socket = new WebSocket(endpoint, { agent: agent });\n\nsocket.on('open', function () {\n\tconsole.log('\"open\" event!');\n\tsocket.send('hello world');\n});\n\nsocket.on('message', function (data, flags) {\n\tconsole.log('\"message\" event! %j %j', data, flags);\n\tsocket.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Network HAR using Playwright CLI\nDESCRIPTION: Command to record network traffic into a HAR file using Playwright CLI with URL filtering capabilities\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"open --save-har=example.har --save-har-glob='**/api/**' https://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for and Accessing Popup Windows (JavaScript)\nDESCRIPTION: Shows how to use Playwright's 'popup' event and waitForEvent API to handle popups created by user actions (e.g., clicking a link). Registers a promise for a popup, clicks to trigger it, waits for the new page, and logs its URL. Requires a Playwright page object ready for interaction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// Start waiting for popup before clicking. Note no await.\nconst popupPromise = page.waitForEvent('popup');\nawait page.getByText('open the popup').click();\nconst popup = await popupPromise;\nconsole.log(await popup.evaluate('location.href'));\n```\n\n----------------------------------------\n\nTITLE: Browser Launch Configuration\nDESCRIPTION: Configuration options for launching a browser instance, including command line arguments, headless mode, and timeout settings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  args: string[],\n  channel: string,\n  chromiumSandbox: boolean,\n  downloadsPath: string,\n  executablePath: string,\n  headless: boolean,\n  timeout: number\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing supported browsers with Playwright CLI\nDESCRIPTION: This snippet shows how to use the Playwright CLI to view all supported browsers available for installation. This information is critical for selecting the right browser for testing purposes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnpx playwright install --help\n```\n\nLANGUAGE: java\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\\\"install --help\\\"\n```\n\nLANGUAGE: python\nCODE:\n```\nplaywright install --help\n```\n\nLANGUAGE: csharp\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 install --help\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routes on Browser Context in Python (Sync)\nDESCRIPTION: Demonstrates setting up route handling on the entire browser context in synchronous Python. This method applies to popup windows and opened links.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ncontext.route(\n    \"**/api/login\",\n    lambda route: route.fulfill(status=200, body=\"accept\"))\npage.goto(\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Using ControlOrMeta Modifier Key in C#\nDESCRIPTION: This code shows how to use the ControlOrMeta modifier key, which maps to Meta on macOS and Control on Windows and Linux, for keyboard shortcuts.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Keyboard.PressAsync(\"ControlOrMeta+S\");\n```\n\n----------------------------------------\n\nTITLE: Asserting Class Names with LocatorAssertions in Java\nDESCRIPTION: Example showing how to use the new toContainClass method to assert specific class names on elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nassertThat(page.getByRole(AriaRole.LISTITEM, new Page.GetByRoleOptions().setName(\"Ship v1.52\"))).containsClass(\"done\");\n```\n\n----------------------------------------\n\nTITLE: Transparent Service Worker Implementation\nDESCRIPTION: Example of a Service Worker that acts as a transparent proxy, forwarding fetch requests and immediately claiming clients upon activation. This is a common pattern for Service Workers that provide optimization without changing functionality.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nself.addEventListener('fetch', event => {\n  // actually make the request\n  const responsePromise = fetch(event.request);\n  // send it back to the page\n  event.respondWith(responsePromise);\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(clients.claim());\n});\n```\n\n----------------------------------------\n\nTITLE: Increasing Connection Timeout for Playwright Install (Java)\nDESCRIPTION: Commands to increase the connection timeout when downloading Playwright browsers on slow networks for Java implementations. The PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT value is in milliseconds.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n----------------------------------------\n\nTITLE: Basic Test with Custom Browser Channel\nDESCRIPTION: A simple test that uses the specified browser channel from the command line.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef test_example(page):\n    page.goto(\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Video Path in Playwright - Python Async\nDESCRIPTION: This Python asynchronous code snippet prints the path of the video recorded in a Playwright browser context when the recordVideo option is enabled. The method is expected to be called asynchronously and waits until the path is finalized once the context is closed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-video.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(await page.video.path())\n```\n\n----------------------------------------\n\nTITLE: Emulating Viewport Size with Playwright Codegen - C# - Bash\nDESCRIPTION: This command shows launching the Playwright codegen session with a specific viewport size on a .NET platform via PowerShell. Replace 'netX' with your .NET target. Requires Playwright for .NET built and accessible. The '--viewport-size' parameter controls the browser window size during test recording.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 codegen --viewport-size=\\\"800,600\\\" playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Using toBeGreaterThan Method for Numeric Comparisons\nDESCRIPTION: Shows how to use the 'toBeGreaterThan' method to compare numeric values. This example checks if a value is greater than 1.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = 42;\nexpect(value).toBeGreaterThan(1);\n```\n\n----------------------------------------\n\nTITLE: Waiting on Selector State or Presence with AndroidDevice in Playwright JS\nDESCRIPTION: androidDevice.wait pauses test execution until a given selector is present or absent (with 'state' option). Supports waiting for UI to appear or disappear, vital for synchronization. Input: selector, optional state ('gone'), and timeout. No output except synchronization.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n// Wait for a UI element to disappear.\nawait androidDevice.wait({\n  selector: mySelector,\n  state: 'gone', // Waits for element to be removed\n  timeout: 3000  // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Scrolling Widgets on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.scroll scrolls a widget in a specified direction (\"up\",\"down\",\"left\",\"right\") by a percent of widget size. Supports optional speed and timeout. Inputs: selector, direction, percent. No return value. Used to trigger UI scrolling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// Scroll a widget.\nawait androidDevice.scroll({\n  selector: mySelector,\n  direction: 'down',\n  percent: 0.5,\n  speed: 300, // Optional\n  timeout: 2000 // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Events in C#\nDESCRIPTION: This snippet demonstrates how to handle WebSocket events in Playwright using C#. It shows logging for WebSocket opening, frame sending/receiving, and closing events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\npage.WebSocket += (_, ws) =>\n{\n    Console.WriteLine(\"WebSocket opened: \" + ws.Url);\n    ws.FrameSent += (_, f) => Console.WriteLine(f.Text);\n    ws.FrameReceived += (_, f) => Console.WriteLine(f.Text);\n    ws.Close += (_, ws1) => Console.WriteLine(\"WebSocket closed\");\n};\n```\n\n----------------------------------------\n\nTITLE: Playwright Test Configuration in XML\nDESCRIPTION: XML configuration for specifying browser name in a runsettings file for Playwright tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <RunSettings>\n    <Playwright>\n      <BrowserName>chromium</BrowserName>\n    </Playwright>\n  </RunSettings>\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Frame Text Payload – Playwright SDK – Java\nDESCRIPTION: The WebSocketFrame.text method retrieves text payloads from WebSocket frames in Playwright for Java, returning the string data or null if the payload is not text. This requires an existing WebSocketFrame instance from an active Playwright session. Inputs: None. Output: string|null. Useful for message inspection and validating communication via text-based WebSocket messages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketframe.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString textPayload = webSocketFrame.text(); // returns String|null\n```\n\n----------------------------------------\n\nTITLE: Conditionally Marking a Test as Fixme in Playwright\nDESCRIPTION: This snippet demonstrates how to conditionally mark a test as 'fixme' based on a specific browser. The test will be aborted immediately after the test.fixme call in the specified condition.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('to be fixed in Safari', async ({ page, browserName }) => {\n  test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Slots in Svelte Components with Playwright\nDESCRIPTION: Illustrates testing slots in Svelte components using Playwright's component testing framework. It shows how to mount a component with slot content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('slot', async ({ mount }) => {\n  const component = await mount(Component, { slots: { default: 'Slot' } });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Color Scheme in Playwright Config\nDESCRIPTION: Configures the color scheme for all tests in the Playwright Test configuration file. This allows testing the site's appearance in dark or light mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    colorScheme: 'dark',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Emulating Pinch Gesture in C# with Playwright\nDESCRIPTION: This snippet shows how to implement a pinch gesture using C# and Playwright. It includes a static method for performing the pinch gesture and a test method that applies the gesture to zoom out a Google Maps page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class TouchEvents\n{\n    public static async Task Pinch(ILocator locator, int deltaX = 50, int steps = 5, string direction = \"in\")\n    {\n        var bounds = await locator.BoundingBoxAsync();\n        double centerX = bounds.X + bounds.Width / 2;\n        double centerY = bounds.Y + bounds.Height / 2;\n        double stepDeltaX = deltaX / (steps + 1.0);\n\n        var touches = new List<Dictionary<string, object>>\n        {\n            new Dictionary<string, object>\n            {\n                { \"identifier\", 0 },\n                { \"clientX\", centerX - (direction == \"in\" ? deltaX : stepDeltaX) },\n                { \"clientY\", centerY }\n            },\n            new Dictionary<string, object>\n            {\n                { \"identifier\", 1 },\n                { \"clientX\", centerX + (direction == \"in\" ? deltaX : stepDeltaX) },\n                { \"clientY\", centerY }\n            }\n        };\n        await locator.DispatchEventAsync(\"touchstart\", new { touches, changedTouches = touches, targetTouches = touches });\n\n        for (int i = 1; i <= steps; i++)\n        {\n            double offset = direction == \"in\" ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1));\n            touches = new List<Dictionary<string, object>>\n            {\n                new Dictionary<string, object>\n                {\n                    { \"identifier\", 0 },\n                    { \"clientX\", centerX - offset },\n                    { \"clientY\", centerY }\n                },\n                new Dictionary<string, object>\n                {\n                    { \"identifier\", 1 },\n                    { \"clientX\", centerX + offset },\n                    { \"clientY\", centerY }\n                }\n            };\n            await locator.DispatchEventAsync(\"touchmove\", new { touches, changedTouches = touches, targetTouches = touches });\n        }\n\n        await locator.DispatchEventAsync(\"touchend\", new { touches = new List<object>(), changedTouches = new List<object>(), targetTouches = new List<object>() });\n    }\n\n    public static async Task TestPinchInGestureToZoomOutTheMap(IPage page)\n    {\n        await page.GotoAsync(\"https://www.google.com/maps/place/@37.4117722,-122.0713234,15z\", new PageGotoOptions { WaitUntil = WaitUntilState.Commit });\n        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = \"Keep using web\" }).ClickAsync();\n        await page.GetByRole(AriaRole.Button, new PageGetByRoleOptions { Name = \"Keep using web\" }).WaitForAsync(new LocatorWaitForOptions { State = WaitForSelectorState.Hidden });\n\n        var met = page.Locator(\"[data-test-id='met']\");\n        for (int i = 0; i < 5; i++)\n        {\n            await Pinch(met, 40, 5, \"in\");\n        }\n        await page.ScreenshotAsync(new PageScreenshotOptions { Path = \"screenshot.png\" });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Actions in Trace Viewer using Python\nDESCRIPTION: This snippet demonstrates how to group actions in the Playwright trace viewer using Python. It navigates to the Playwright website and clicks on the API link, with all actions between group and group_end shown as a group in the trace viewer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# will be shown in the trace viewer as a group.\nawait page.context.tracing.group(\"Open Playwright.dev > API\")\nawait page.goto(\"https://playwright.dev/\")\nawait page.get_by_role(\"link\", name=\"API\").click()\nawait page.context.tracing.group_end()\n```\n\n----------------------------------------\n\nTITLE: Logging Focused Node Name in Accessibility Snapshot with JavaScript\nDESCRIPTION: Traverses the accessibility snapshot to find and log the name of the focused node. Uses a recursive helper function `findFocusedNode()` to extract focused nodes from a snapshot structure. The snapshot itself is captured using Playwright's Accessibility class.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst snapshot = await page.accessibility.snapshot();\nconst node = findFocusedNode(snapshot);\nconsole.log(node && node.name);\n\nfunction findFocusedNode(node) {\n  if (node.focused)\n    return node;\n  for (const child of node.children || []) {\n    const foundNode = findFocusedNode(child);\n    if (foundNode)\n      return foundNode;\n  }\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Run Clock For Duration Example\nDESCRIPTION: Shows how to advance the clock while firing all time-related callbacks\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-clock.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.clock.runFor(1000);\nawait page.clock.runFor('30:00');\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.clock.run_for(1000);\nawait page.clock.run_for(\"30:00\")\n```\n\nLANGUAGE: java\nCODE:\n```\npage.clock().runFor(1000);\npage.clock().runFor(\"30:00\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Clock.RunForAsync(1000);\nawait page.Clock.RunForAsync(\"30:00\");\n```\n\n----------------------------------------\n\nTITLE: Setting HAR Recording Path in Browser Context (C#, Java, Python)\nDESCRIPTION: Specifies the path for HAR recording in non-JavaScript language bindings. This enables HTTP Archive recording for all pages in a browser context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_75\n\nLANGUAGE: python\nCODE:\n```\n- `recordHarPath` <[path]>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Playwright Frame - Java\nDESCRIPTION: Demonstrates how to dispatch events on frame elements in Java using Playwright. Provides examples for handling event types like 'click' and 'dragstart', including setting event-specific properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nframe.dispatchEvent(\"button#submit\", \"click\");\n```\n\nLANGUAGE: Java\nCODE:\n```\nJSHandle dataTransfer = frame.evaluateHandle(\"() => new DataTransfer()\");\nMap<String, Object> arg = new HashMap<>();\narg.put(\"dataTransfer\", dataTransfer);\nframe.dispatchEvent(\"#source\", \"dragstart\", arg);\n```\n\n----------------------------------------\n\nTITLE: Returning Open Browser Contexts in Playwright JavaScript\nDESCRIPTION: This JavaScript code example uses Playwright to print the number of open browser contexts after initialization and after creating a new one. It demonstrates leveraging Playwright for context management. Requires Playwright package and Node.js.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst browser = await pw.webkit.launch();\nconsole.log(browser.contexts().length); // prints `0`\n\nconst context = await browser.newContext();\nconsole.log(browser.contexts().length); // prints `1`\n```\n\n----------------------------------------\n\nTITLE: Generating Tests with Assertions in Playwright\nDESCRIPTION: Example test script demonstrating generated assertions using Playwright Test Generator, including visibility checks, value assertions, and text content verification.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  await page.getByRole('link', { name: 'Get started' }).click();\n  await expect(page.getByLabel('Breadcrumbs').getByRole('list')).toContainText('Installation');\n  await expect(page.getByLabel('Search')).toBeVisible();\n  await page.getByLabel('Search').click();\n  await page.getByPlaceholder('Search docs').fill('locator');\n  await expect(page.getByPlaceholder('Search docs')).toHaveValue('locator');\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Print Dialogs with Playwright (Java)\nDESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()`. It uses `page.evaluate` to inject JavaScript that replaces `window.print` with a function resolving a Promise, then uses `page.waitForFunction` to wait for the promise after clicking the print trigger.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.navigate(\"<url>\");\n\npage.evaluate(\"(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()\");\npage.getByText(\"Print it!\").click();\n\npage.waitForFunction(\"window.waitForPrintDialog\");\n```\n```\n\n----------------------------------------\n\nTITLE: Running Last Failed Playwright Tests\nDESCRIPTION: Execute only the tests that failed in the last test run using the --last-failed flag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --last-failed\n```\n\n----------------------------------------\n\nTITLE: Manual Drag and Drop Control\nDESCRIPTION: Provides fine-grained control over drag and drop operations using individual mouse events like hover(), down(), and up().\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('#item-to-be-dragged').hover();\nawait page.mouse.down();\nawait page.locator('#item-to-drop-at').hover();\nawait page.mouse.up();\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"#item-to-be-dragged\").hover();\npage.mouse().down();\npage.locator(\"#item-to-drop-at\").hover();\npage.mouse().up();\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator(\"#item-to-be-dragged\").hover()\nawait page.mouse.down()\nawait page.locator(\"#item-to-drop-at\").hover()\nawait page.mouse.up()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Locator(\"#item-to-be-dragged\").HoverAsync();\nawait page.Mouse.DownAsync();\nawait page.Locator(\"#item-to-drop-at\").HoverAsync();\nawait page.Mouse.UpAsync();\n```\n\n----------------------------------------\n\nTITLE: Accessing the Initiating Frame URL with Playwright Request (Multi-Language)\nDESCRIPTION: Illustrates how to retrieve the URL of the Frame that initiated a specific network Request using the `request.frame().url()` method chain. This is useful for understanding the context from which a request originated.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-request.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst frameUrl = request.frame().url();\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nString frameUrl = request.frame().url();\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```py\nframe_url = request.frame.url\n```\n```\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar frameUrl = request.Frame.Url;\n```\n```\n\n----------------------------------------\n\nTITLE: Matching Text in Locators with TypeScript\nDESCRIPTION: Defines locator options for matching elements based on text content. The `hasNotText` option matches elements that do not contain the specified text.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\n- `hasNotText` <[string]|[RegExp]>\n```\n\n----------------------------------------\n\nTITLE: Creating JSHandle with Page.EvaluateHandleAsync in C#\nDESCRIPTION: Demonstrates creating a JSHandle for the window object using Page.EvaluateHandleAsync method in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar windowHandle = await page.EvaluateHandleAsync(\"() => window\");\n```\n\n----------------------------------------\n\nTITLE: Setting Global Timeout in Playwright Test\nDESCRIPTION: Configuration to set a maximum time for the entire test suite to run, useful for preventing hanging tests in CI.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTimeout: process.env.CI ? 60 * 60 * 1000 : undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Global Timeout Configuration in C# MSTest\nDESCRIPTION: Shows how to set global timeout for Playwright assertions in C# using MSTest framework.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class UnitTest1 : PageTest\n{\n    [ClassInitialize]\n    public static void GlobalSetup(TestContext context)\n    {\n        SetDefaultExpectTimeout(10_000);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Compiler in Watch Mode\nDESCRIPTION: This shell command demonstrates how to run the TypeScript compiler in watch mode during local development. It uses the tsconfig.json file and the --noEmit flag to check types without generating output files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsc -p tsconfig.json --noEmit -w\n```\n\n----------------------------------------\n\nTITLE: Using toBeNull Method for Null Checking\nDESCRIPTION: Shows how to use the 'toBeNull' method to check if a value is null.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = null;\nexpect(value).toBeNull();\n```\n\n----------------------------------------\n\nTITLE: Importing Playwright Electron Module in JavaScript\nDESCRIPTION: Demonstrates how to import the experimental Electron module from the Playwright library in a Node.js environment. This is the necessary first step to utilize Playwright's Electron automation capabilities.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-electron.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { _electron } = require('playwright');\n```\n\n----------------------------------------\n\nTITLE: Removing the TypeScript Setup Script\nDESCRIPTION: Command to remove the TypeScript setup script if you don't plan to use TypeScript in your Svelte project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm scripts/setupTypeScript.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Blob Reporter in Configuration File\nDESCRIPTION: TypeScript configuration for blob reporter with custom output file path using platform-specific naming.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['blob', { outputFile: `./blob-report/report-${os.platform()}.zip` }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling CDP in WebView2 using C#\nDESCRIPTION: This snippet shows how to enable CDP connections in a WebView2 control by setting the AdditionalBrowserArguments when creating the CoreWebView2Environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()\n{\n  AdditionalBrowserArguments = \"--remote-debugging-port=9222\",\n})).ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Opening Playwright HTML Report (Bash)\nDESCRIPTION: This command shows how to open the Playwright HTML report, which displays test results and provides access to traces.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-js.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-report\n```\n\n----------------------------------------\n\nTITLE: Specifying Playwright Drag Source Element Selector\nDESCRIPTION: Defines the `source` string parameter, which is a selector used to find the element to be dragged in a Playwright drag-and-drop operation. If multiple elements match, the first one is selected.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- `source` <[string]>\n```\n\n----------------------------------------\n\nTITLE: Increasing Connection Timeout for Playwright Install (C#)\nDESCRIPTION: Commands to increase the connection timeout when downloading Playwright browsers on slow networks for C# implementations. The PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT value is in milliseconds.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 pwsh bin/Debug/netX/playwright.ps1 install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Browser on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.launchBrowser starts the default or specified browser package and returns its BrowserContext. Optional pkg, proxy, and args parameters configure launch. Used for web testing or automation in an Android browser environment. Inputs: parameters for customization. Output: BrowserContext handle.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// Launches Chrome browser on the device.\nconst context = await androidDevice.launchBrowser({\n  pkg: 'com.android.chrome', // Optional\n  proxy: { server: 'http://proxy:3128' }, // Optional\n  args: [ '--no-sandbox' ]   // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Headless Shell - Maven\nDESCRIPTION: Maven command to install Playwright with headless shell dependencies\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install --with-deps --only-shell\"\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Multiple Workers (MSTest)\nDESCRIPTION: Command to run Playwright tests with multiple workers using MSTest.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -- MSTest.Parallelize.Workers=5\n```\n\n----------------------------------------\n\nTITLE: ARIA Disabled Option for Role Selectors\nDESCRIPTION: Defines the `disabled` option for role-based selectors to match elements with a specific disabled state. This attribute is inherited through the DOM hierarchy.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `disabled` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: File Path Option for Saving Screenshots\nDESCRIPTION: Defines the `path` option that specifies where to save screenshot images. The image type is inferred from the file extension.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\n- `path` <[path]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Screenshots in Playwright Test\nDESCRIPTION: Sets up automatic screenshot capture after each test using the TestOptions.screenshot property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    screenshot: 'only-on-failure',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Library Tests\nDESCRIPTION: Commands for running library tests in Playwright, including a fast path for Chromium and a slow path for all three browsers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# fast path runs all tests in Chromium\nnpm run ctest\n\n# slow path runs all tests in three browsers\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Opening Playwright HTML Test Report\nDESCRIPTION: Open the HTML report of Playwright tests, which provides a detailed view of test results including filters for browsers and test status.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-report\n```\n\n----------------------------------------\n\nTITLE: Checking Playwright Version via npx - Bash\nDESCRIPTION: Displays the currently installed version of Playwright using npx. Useful for debugging environment issues, ensuring compatibility, and confirming updates. Outputs the version string to standard output.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright --version\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests in Playwright\nDESCRIPTION: Demonstrates how to skip tests using test.skip() annotation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest.skip('skip this test', async ({ page }) => {\n  // This test is not run\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tag Name Selector in Playwright for JavaScript\nDESCRIPTION: Illustrates the usage of a custom tag name selector in a Playwright test suite. It shows how to interact with elements selected using custom selectors alongside built-in locators. The test sets up a page context and performs actions on selected elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/extensibility.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { test, expect } from './baseTest';\n\ntest('selector engine test', async ({ page }) => {\n  // Now we can use 'tag=' selectors.\n  const button = page.locator('tag=button');\n  await button.click();\n\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n\n  // We can use it in any methods supporting selectors.\n  await expect(page.locator('tag=button')).toHaveCount(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Event Action for Wait For Event (C#)\nDESCRIPTION: Specifies the action that triggers the event when waiting for an event in C#. This action is executed to generate the event being waited for.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_93\n\nLANGUAGE: csharp\nCODE:\n```\n- `action` <[Func<Task>]>\n```\n\n----------------------------------------\n\nTITLE: Locating Image by Alt Text in HTML\nDESCRIPTION: HTML example showing an image with alt text attribute that can be used for locating.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<img alt=\"playwright logo\" src=\"/img/playwright-logo.svg\" width=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Running Java Tests with Console Debugging\nDESCRIPTION: Commands to run Playwright Java tests with console debugging enabled, including setting the Java source directories for proper source mapping.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nPWDEBUG=console PLAYWRIGHT_JAVA_SRC=<java source dirs> mvn test\n```\n\nLANGUAGE: batch\nCODE:\n```\n# Source directories in the list are separated by : on macos and linux and by ; on win.\nset PLAYWRIGHT_JAVA_SRC=<java source dirs>\nset PWDEBUG=console\nmvn test\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Source directories in the list are separated by : on macos and linux and by ; on win.\n$env:PLAYWRIGHT_JAVA_SRC=\"<java source dirs>\"\n$env:PWDEBUG=console\nmvn test\n```\n\n----------------------------------------\n\nTITLE: JavaScript Snapshot Configuration\nDESCRIPTION: Configuration example for customizing snapshot file paths\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  expect: {\n    toMatchAriaSnapshot: {\n      pathTemplate: '__snapshots__/{testFilePath}/{arg}{ext}',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Checkbox for Partial ARIA Snapshot Matching Example\nDESCRIPTION: This HTML snippet shows an input element of type checkbox, which is checked. It is used to illustrate partial ARIA snapshot matching where attributes like 'checked' can be omitted in the snapshot template.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n```html\n<input type=\"checkbox\" checked>\n```\n```\n\n----------------------------------------\n\nTITLE: Simulating Long Tap on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.longTap simulates a long tap on a UI element identified by selector. Optional timeout sets operation wait. Used for invoking context menus or other long press behaviors. Input: selector and optional timeout. Output: none.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// Performs a long tap gesture.\nawait androidDevice.longTap({\n  selector: mySelector,\n  timeout: 2000 // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Component Testing Configuration Update\nDESCRIPTION: Demonstrates the breaking change in component testing configuration requiring the use of defineConfig function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\n\nimport { type PlaywrightTestConfig, devices } from '@playwright/experimental-ct-react';\nconst config: PlaywrightTestConfig = {\n  // ... config goes here ...\n};\nexport default config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After\n\nimport { defineConfig, devices } from '@playwright/experimental-ct-react';\nexport default defineConfig({\n  // ... config goes here ...\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Browser Permissions in Python (Sync)\nDESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright Python sync API. This removes any permission settings that were applied earlier.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ncontext.clear_permissions()\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Events in Java\nDESCRIPTION: This snippet shows how to handle WebSocket events in Playwright using Java. It demonstrates logging WebSocket opening, frame sending/receiving, and closing events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_33\n\nLANGUAGE: java\nCODE:\n```\npage.onWebSocket(ws -> {\n  log(\"WebSocket opened: \" + ws.url());\n  ws.onFrameSent(frameData -> log(frameData.text()));\n  ws.onFrameReceived(frameData -> log(frameData.text()));\n  ws.onClose(ws1 -> log(\"WebSocket closed\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Element Handle Selection for Python\nDESCRIPTION: Python-specific option for selecting elements by ElementHandle in dropdowns. Allows passing element handles directly.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_94\n\nLANGUAGE: python\nCODE:\n```\n- `element` ?<[ElementHandle]|[Array]<[ElementHandle]>>\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Events in Python\nDESCRIPTION: This snippet illustrates how to manage WebSocket events in Playwright using Python. It shows how to log WebSocket opening, frame sending/receiving, and closing events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef on_web_socket(ws):\n    print(f\"WebSocket opened: {ws.url}\")\n    ws.on(\"framesent\", lambda payload: print(payload))\n    ws.on(\"framereceived\", lambda payload: print(payload))\n    ws.on(\"close\", lambda payload: print(\"WebSocket closed\"))\n\npage.on(\"websocket\", on_web_socket)\n```\n\n----------------------------------------\n\nTITLE: Boxing Fixtures in Playwright Tests\nDESCRIPTION: Demonstrates how to box fixtures to reduce noise in test reports and UI by hiding fixture steps.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  helperFixture: [async ({}, use, testInfo) => {\n    // ...\n  }, { box: true }],\n});\n```\n\n----------------------------------------\n\nTITLE: Using dotenv for Environment Variables in Configuration\nDESCRIPTION: This configuration file shows how to use the dotenv package to load environment variables from a .env file, making it easier to manage different configurations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parameterize-js.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport dotenv from 'dotenv';\nimport path from 'path';\n\n// Read from \".env\" file.\ndotenv.config({ path: path.resolve(__dirname, '.env') });\n\n// Alternatively, read from \"../my.env\" file.\ndotenv.config({ path: path.resolve(__dirname, '..', 'my.env') });\n\nexport default defineConfig({\n  use: {\n    baseURL: process.env.STAGING === '1' ? 'http://staging.example.test/' : 'http://example.test/',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running C# Tests with Console Debugging\nDESCRIPTION: Commands to run Playwright C# tests with console debugging enabled using dotnet test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=console dotnet test\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PWDEBUG=console\ndotnet test\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PWDEBUG=console\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Creating Fixtures for Extension Testing - JavaScript\nDESCRIPTION: This JavaScript fixture file defines custom test workers to run browser contexts with extensions for testing using Playwright. It includes an example test to validate the extension's impact on a web page using an extension ID. It requires @playwright/test and Node.js path module.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { test as base, chromium, type BrowserContext } from '@playwright/test';\nimport path from 'path';\n\nexport const test = base.extend<{\n  context: BrowserContext;\n  extensionId: string;\n}>({\n  context: async ({ }, use) => {\n    const pathToExtension = path.join(__dirname, 'my-extension');\n    const context = await chromium.launchPersistentContext('', {\n      channel: 'chromium',\n      args: [\n        `--disable-extensions-except=${pathToExtension}`,\n        `--load-extension=${pathToExtension}`,\n      ],\n    });\n    await use(context);\n    await context.close();\n  },\n  extensionId: async ({ context }, use) => {\n    /*\n    // for manifest v2:\n    let [background] = context.backgroundPages()\n    if (!background)\n      background = await context.waitForEvent('backgroundpage')\n    */\n\n    // for manifest v3:\n    let [background] = context.serviceWorkers();\n    if (!background)\n      background = await context.waitForEvent('serviceworker');\n\n    const extensionId = background.url().split('/')[2];\n    await use(extensionId);\n  },\n});\nexport const expect = test.expect;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Stylesheet in Screenshot Comparison (JavaScript)\nDESCRIPTION: This example demonstrates how to use a custom stylesheet in the `toHaveScreenshot()` method to modify the page appearance during screenshot capture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-snapshots-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({ stylePath: path.join(__dirname, 'screenshot.css') });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Input Action Timeout (JavaScript)\nDESCRIPTION: Specifies the maximum time in milliseconds for input actions in Playwright for JavaScript. Defaults to 0 (no timeout). The default value can be changed via the `actionTimeout` option in the config or by using `BrowserContext.setDefaultTimeout` or `Page.setDefaultTimeout`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- `timeout` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Splitting Playwright Tests into Different Projects\nDESCRIPTION: Configuration that splits tests into separate projects based on file patterns. This example defines a 'Smoke' project for critical tests with no retries and a 'Default' project for all other tests with retries.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-projects-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 60000, // Timeout is shared between all tests.\n  projects: [\n    {\n      name: 'Smoke',\n      testMatch: /.*smoke.spec.ts/,\n      retries: 0,\n    },\n    {\n      name: 'Default',\n      testIgnore: /.*smoke.spec.ts/,\n      retries: 2,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Events in JavaScript\nDESCRIPTION: This snippet demonstrates how to listen for WebSocket events in Playwright using JavaScript. It shows how to log WebSocket opening, frame sending/receiving, and closing events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/network.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\npage.on('websocket', ws => {\n  console.log(`WebSocket opened: ${ws.url()}>');\n  ws.on('framesent', event => console.log(event.payload));\n  ws.on('framereceived', event => console.log(event.payload));\n  ws.on('close', () => console.log('WebSocket closed'));\n});\n```\n\n----------------------------------------\n\nTITLE: Annotating Tests with Test.describe in JavaScript\nDESCRIPTION: Shows how to annotate all tests in a group by providing additional details, including type and description.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two annotated tests', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Serving Modernizr Test File in Markdown\nDESCRIPTION: Instructions for serving the Modernizr test file from a remote HTTPS origin and navigating to it using specific browsers. This is crucial for updating test expectations in the Playwright project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/modernizr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Serve `tests/assets/modernizr/index.html` from a remote (localhost results will be different) https origin (e.g. https://pages.github.com).\n1. Navigate to `https://your-domain.com/tests/assets/modernizr/index.html`\n\nDo this with:\n\n- Safari Technology Preview\n- Apple iPhone\n\nMake sure to change the updated file's name.\n```\n\n----------------------------------------\n\nTITLE: Custom Fixture Titles in Playwright\nDESCRIPTION: Shows how to customize fixture titles for better readability in test reports and error messages.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-fixtures-js.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  innerFixture: [async ({}, use, testInfo) => {\n    // ...\n  }, { title: 'my fixture' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Client Certificate\nDESCRIPTION: Creates a self-signed client certificate for invalid authentication testing. Includes steps for generating the certificate request and self-signing it.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/client-certificates/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p client/self-signed\nopenssl req \\\n\t-newkey rsa:4096 \\\n\t-keyout client/self-signed/key.pem \\\n\t-out client/self-signed/csr.pem \\\n\t-nodes \\\n\t-days 365 \\\n\t-subj \"/CN=Bob\"\n\n# sign with self-signed/key.pem\nopenssl x509 \\\n\t-req \\\n\t-in client/self-signed/csr.pem \\\n\t-signkey client/self-signed/key.pem \\\n\t-out client/self-signed/cert.pem \\\n\t-days 365\n```\n\n----------------------------------------\n\nTITLE: Asserting Accessibility Properties in C#\nDESCRIPTION: These snippets demonstrate new accessibility assertions for checking accessible name, description, and ARIA role of elements.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.GetByRole(AriaRole.Button);\nawait Expect(locator).ToHaveAccessibleNameAsync(\"Submit\");\n\nvar locator = Page.GetByRole(AriaRole.Button);\nawait Expect(locator).ToHaveAccessibleDescriptionAsync(\"Upload a photo\");\n\nvar locator = Page.GetByTestId(\"save-button\");\nawait Expect(locator).ToHaveRoleAsync(AriaRole.Button);\n```\n\n----------------------------------------\n\nTITLE: Recording Playwright Tests with Custom Setup in Python (Sync)\nDESCRIPTION: Synchronous Python implementation for Playwright recording with custom configuration. This script launches a headed Chrome browser, configures a context with request routing, and pauses execution to start manual recording.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    # Make sure to run headed.\n    browser = p.chromium.launch(headless=False)\n\n    # Setup context however you like.\n    context = browser.new_context() # Pass any options\n    context.route('**/*', lambda route: route.continue_())\n\n    # Pause the page, and start recording manually.\n    page = context.new_page()\n    page.pause()\n```\n\n----------------------------------------\n\nTITLE: Partial ARIA Snapshot Matching Checkbox Role in YAML\nDESCRIPTION: This YAML snippet provides a partial ARIA snapshot template for a checkbox. By specifying only '- checkbox', it matches any element with the checkbox role, ignoring its attributes like the 'checked' state. This allows the test to pass regardless of whether the checkbox is checked or not.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n- checkbox\n```\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Chromium Channel - Python\nDESCRIPTION: Python pytest command for running tests with Chromium channel\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npytest test_login.py --browser-channel chromium\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Removal Behavior (JavaScript, C#, Python)\nDESCRIPTION: Controls how to handle currently running route handlers when removing routes. Specifies waiting behavior and error handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n- `behavior` <[UnrouteBehavior]<\"wait\"|\"ignoreErrors\"|\"default\">>\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Codegen in Python\nDESCRIPTION: This command utilizes Playwright's codegen feature for a specified URL in the Python environment, facilitating interaction recording to create test scripts. It operates without additional prerequisites and accommodates an optional URL.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen-intro.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen demo.playwright.dev/todomvc\n```\n\n----------------------------------------\n\nTITLE: Overriding Test Options for Specific Test Files\nDESCRIPTION: Example demonstrating how to override test options for a specific test file using test.use(), configuring a portrait-like viewport for tests in that file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\n// Run tests in this file with portrait-like viewport.\ntest.use({ viewport: { width: 600, height: 900 } });\n\ntest('my portrait test', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Workers in Playwright Test\nDESCRIPTION: Sets the service workers policy for tests using the TestOptions.serviceWorkers property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    serviceWorkers: 'allow'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing waitForAngular Polyfill for Angular 2+\nDESCRIPTION: A simpler implementation of waitForAngular specifically for Angular 2+ applications, without requiring the Protractor dependency.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nasync function waitForAngular(page) {\n  await page.evaluate(async () => {\n    // @ts-expect-error\n    if (window.getAllAngularTestabilities) {\n      // @ts-expect-error\n      await Promise.all(window.getAllAngularTestabilities().map(whenStable));\n      // @ts-expect-error\n      async function whenStable(testability) {\n        return new Promise(res => testability.whenStable(res));\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Clicking Anchor Element with ElementHandle in Python Async\nDESCRIPTION: Illustrates clicking an anchor ('a') DOM element in Python using Playwright's async API with ElementHandle. The element is retrieved asynchronously and clicked.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nhref_element = await page.query_selector(\"a\")\nawait href_element.click()\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Version for Playwright Development\nDESCRIPTION: Checks the installed Node.js version to ensure it's 20 or later, which is required for Playwright development.\nSOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: ARIA Expanded Option for Role Selectors\nDESCRIPTION: Defines the `expanded` option for role-based selectors to match elements with a specific expanded state.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `expanded` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Download Acceptance in Playwright\nDESCRIPTION: Example showing how to configure acceptDownloads option to control whether the browser accepts downloads in tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    acceptDownloads: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Python Select Options Value Configuration\nDESCRIPTION: Configuration for selecting options by value in a select element. Supports both single and multiple selections.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nvalue: Union[str, List[str]]\n```\n\n----------------------------------------\n\nTITLE: Using toContainEqual Method for Deep Equality Checking in Arrays\nDESCRIPTION: Shows how to use the 'toContainEqual' method to check if an array or Set contains an item that is deeply equal to the expected value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = [\n  { example: 1 },\n  { another: 2 },\n  { more: 3 },\n];\nexpect(value).toContainEqual({ another: 2 });\nexpect(new Set(value)).toContainEqual({ another: 2 });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reporter in TypeScript\nDESCRIPTION: TypeScript implementation of a custom test reporter with proper type annotations. Provides the same functionality as the JavaScript version but with type safety.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-reporter.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  Reporter, FullConfig, Suite, TestCase, TestResult, FullResult\n} from '@playwright/test/reporter';\n\nclass MyReporter implements Reporter {\n  constructor(options: { customOption?: string } = {}) {\n    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);\n  }\n\n  onBegin(config: FullConfig, suite: Suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test: TestCase) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result: FullResult) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\nexport default MyReporter;\n```\n\n----------------------------------------\n\nTITLE: Taking Page Screenshot with Playwright in TypeScript\nDESCRIPTION: Example that navigates to the Playwright homepage and captures a screenshot, saving it as a PNG file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('Page Screenshot', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  await page.screenshot({ path: `example.png` });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal for Storage Access\nDESCRIPTION: Azure CLI command to create a service principal with Storage Blob Data Contributor role for accessing Azure Storage.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci-intro.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp create-for-rbac --name \"github-actions\" --role \"Storage Blob Data Contributor\" --scopes /subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<RESOURCE_GROUP_NAME>/providers/Microsoft.Storage/storageAccounts/<STORAGE_ACCOUNT_NAME>\n```\n\n----------------------------------------\n\nTITLE: Sharding Playwright Tests in GitLab CI (JavaScript)\nDESCRIPTION: This YAML configuration demonstrates how to set up sharding for Playwright tests in GitLab CI using JavaScript. It uses the 'parallel' keyword to split the job into multiple parallel jobs and passes the shard information to the test command.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_37\n\nLANGUAGE: yml\nCODE:\n```\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v%%VERSION%%-noble\n  parallel: 7\n  script:\n    - npm ci\n    - npx playwright test --shard=$CI_NODE_INDEX/$CI_NODE_TOTAL\n```\n\n----------------------------------------\n\nTITLE: Performing Fling Gestures on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.fling simulates a fast swipe in a specified direction on a widget. Needs selector and direction (\"down\",\"up\",\"left\",\"right\"). Optional speed and timeout tweak behavior. Used to quickly scroll UI lists or pages. Inputs: selector and direction. No return value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Performs a fling gesture.\nawait androidDevice.fling({\n  selector: mySelector,\n  direction: 'up',\n  speed: 800,     // Optional\n  timeout: 2000   // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Obtaining a JSHandle using evaluateHandle in Java\nDESCRIPTION: Demonstrates how to get a reference ([JSHandle]) to the global `window` object within the browser context using the `page.evaluateHandle` method in Java. This handle can subsequently be used for further JavaScript evaluations within the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\nJSHandle jsHandle = page.evaluateHandle(\"window\");\n//  Use jsHandle for evaluations.\n```\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation for To-Do List with Notifications\nDESCRIPTION: This JavaScript code implements the functionality for a to-do list application with browser notifications. It handles task creation, editing, deletion, and sending notifications when tasks are due. The code utilizes the Notifications API and manages task deadlines with timers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/to-do-notifications/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieve the elements we'll be using\nconst form = document.querySelector('#new-task-form');\nconst taskTitle = document.querySelector('#task-title');\nconst deadlineHours = document.querySelector('#deadline-hours');\nconst deadlineMinutes = document.querySelector('#deadline-minutes');\nconst taskList = document.querySelector('#task-list');\n\n// Store tasks in an array\nlet tasks = [];\n\n// Request notification permission when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  if (\"Notification\" in window && Notification.permission !== \"denied\") {\n    Notification.requestPermission();\n  }\n});\n\n// Function to format time based on hours and minutes\nfunction getTimeString(hours, minutes) {\n  let timeString = '';\n  if (hours > 0) {\n    timeString += `${hours} hour${hours !== 1 ? 's' : ''} `;\n  }\n  if (minutes > 0) {\n    timeString += `${minutes} minute${minutes !== 1 ? 's' : ''}`;\n  }\n  return timeString;\n}\n\n// Add a new task when the form is submitted\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n  \n  // Get form values\n  const title = taskTitle.value.trim();\n  const hours = parseInt(deadlineHours.value) || 0;\n  const minutes = parseInt(deadlineMinutes.value) || 0;\n  \n  if (title === '' || (hours === 0 && minutes === 0)) {\n    alert('Please enter a task title and deadline.');\n    return;\n  }\n  \n  // Create a new task object\n  const task = {\n    id: Date.now(),\n    title,\n    hours,\n    minutes,\n    deadline: Date.now() + (hours * 60 * 60 * 1000) + (minutes * 60 * 1000)\n  };\n  \n  // Add the task to our array\n  tasks.push(task);\n  \n  // Add the task to the UI\n  renderTask(task);\n  \n  // Schedule a notification for this task\n  scheduleNotification(task);\n  \n  // Reset the form\n  form.reset();\n});\n\n// Render a task in the UI\nfunction renderTask(task) {\n  const taskElement = document.createElement('div');\n  taskElement.className = 'task-list-item';\n  taskElement.dataset.id = task.id;\n  \n  const titleElement = document.createElement('div');\n  titleElement.className = 'task-title';\n  titleElement.textContent = task.title;\n  \n  const deadlineElement = document.createElement('div');\n  deadlineElement.className = 'task-deadline';\n  deadlineElement.textContent = `Time left: ${getTimeString(task.hours, task.minutes)}`;\n  \n  const controlsElement = document.createElement('div');\n  controlsElement.className = 'task-controls';\n  \n  const editButton = document.createElement('button');\n  editButton.className = 'edit';\n  editButton.textContent = 'Edit';\n  editButton.addEventListener('click', () => editTask(task.id));\n  \n  const deleteButton = document.createElement('button');\n  deleteButton.className = 'delete';\n  deleteButton.textContent = 'Delete';\n  deleteButton.addEventListener('click', () => deleteTask(task.id));\n  \n  controlsElement.appendChild(editButton);\n  controlsElement.appendChild(deleteButton);\n  \n  taskElement.appendChild(titleElement);\n  taskElement.appendChild(deadlineElement);\n  taskElement.appendChild(controlsElement);\n  \n  // Replace the example task if it exists, otherwise append the new task\n  const existingTask = document.querySelector('.task-list-item');\n  if (existingTask && existingTask.querySelector('.task-title').textContent === 'My Task Title') {\n    taskList.replaceChild(taskElement, existingTask);\n  } else {\n    taskList.appendChild(taskElement);\n  }\n  \n  // Update the time remaining every minute\n  const intervalId = setInterval(() => {\n    const now = Date.now();\n    const timeLeft = task.deadline - now;\n    \n    if (timeLeft <= 0) {\n      deadlineElement.textContent = 'Time up!';\n      clearInterval(intervalId);\n    } else {\n      const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));\n      const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n      deadlineElement.textContent = `Time left: ${getTimeString(hoursLeft, minutesLeft)}`;\n    }\n  }, 60000); // Update every minute\n}\n\n// Edit a task\nfunction editTask(id) {\n  const task = tasks.find(task => task.id === id);\n  if (!task) return;\n  \n  const newTitle = prompt('Enter new task title:', task.title);\n  if (!newTitle) return;\n  \n  const newHours = parseInt(prompt('Enter new deadline hours:', task.hours));\n  const newMinutes = parseInt(prompt('Enter new deadline minutes:', task.minutes));\n  \n  if (isNaN(newHours) || isNaN(newMinutes)) return;\n  \n  // Update the task\n  task.title = newTitle;\n  task.hours = newHours;\n  task.minutes = newMinutes;\n  task.deadline = Date.now() + (newHours * 60 * 60 * 1000) + (newMinutes * 60 * 1000);\n  \n  // Update the UI\n  const taskElement = document.querySelector(`[data-id=\"${id}\"] .task-title`);\n  const deadlineElement = document.querySelector(`[data-id=\"${id}\"] .task-deadline`);\n  \n  if (taskElement) taskElement.textContent = task.title;\n  if (deadlineElement) deadlineElement.textContent = `Time left: ${getTimeString(task.hours, task.minutes)}`;\n  \n  // Reschedule notification\n  scheduleNotification(task);\n}\n\n// Delete a task\nfunction deleteTask(id) {\n  const taskIndex = tasks.findIndex(task => task.id === id);\n  if (taskIndex === -1) return;\n  \n  // Remove from array\n  tasks.splice(taskIndex, 1);\n  \n  // Remove from UI\n  const taskElement = document.querySelector(`[data-id=\"${id}\"]`);\n  if (taskElement) taskElement.remove();\n}\n\n// Schedule a notification for when the task is due\nfunction scheduleNotification(task) {\n  if (!window.Notification || Notification.permission !== \"granted\") {\n    return;\n  }\n  \n  const timeToNotify = task.deadline - Date.now();\n  \n  if (timeToNotify <= 0) return;\n  \n  setTimeout(() => {\n    const notification = new Notification('Task Due!', {\n      body: `Your task \"${task.title}\" is now due.`,\n      icon: '/path/to/icon.png' // You would need to provide an actual icon\n    });\n    \n    notification.onclick = function() {\n      window.focus();\n      this.close();\n    };\n  }, timeToNotify);\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Accessibility Snapshot with Playwright in Java\nDESCRIPTION: Captures the current state of the accessibility tree in a web page using Playwright's deprecated Accessibility class method `snapshot()`. Logs the snapshot to the console. Requires setup with Playwright and a page instance. The returned object is a string representation of the accessibility data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString snapshot = page.accessibility().snapshot();\nSystem.out.println(snapshot);\n```\n\n----------------------------------------\n\nTITLE: Repository Setup and Teardown with Playwright Hooks\nDESCRIPTION: This snippet uses Playwright hooks to create a GitHub repository before tests run and delete it afterwards. It demonstrates the use of beforeAll and afterAll for setup and teardown operations. Requires Playwright and a GitHub access token.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api-testing-js.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.beforeAll(async ({ request }) => {\n  // Create a new repository\n  const response = await request.post('/user/repos', {\n    data: {\n      name: REPO\n    }\n  });\n  expect(response.ok()).toBeTruthy();\n});\n\ntest.afterAll(async ({ request }) => {\n  // Delete the repository\n  const response = await request.delete(`/repos/${USER}/${REPO}`);\n  expect(response.ok()).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright from Custom Artifact Repository (Python)\nDESCRIPTION: Commands to install Playwright browsers from a custom artifact repository for Python implementations using the PLAYWRIGHT_DOWNLOAD_HOST environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npip install playwright\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npip install playwright\nplaywright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\npip install playwright\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Visual Regression Test for Different Images\nDESCRIPTION: This test compares two different images to ensure they are recognized as different.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should return false for different images', async ({ page }) => {\n  const image1 = await page.screenshot();\n  await expect(compareImageFile(image1, 'different/1.png')).rejects.toThrow();\n});\n```\n\n----------------------------------------\n\nTITLE: Runtime Annotations in Playwright\nDESCRIPTION: Demonstrates how to add annotations during test execution using test.info().annotations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntest('example test', async ({ page, browser }) => {\n  test.info().annotations.push({\n    type: 'browser version',\n    description: browser.version(),\n  });\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for To-Do List Application with Notifications\nDESCRIPTION: The HTML structure defines the UI for a to-do list application with notification support. It includes a form for adding new tasks, a list to display existing tasks, and references to the necessary JavaScript and CSS files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/to-do-notifications/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n\n    <title>To-do list with notifications example</title>\n\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n\n  <body>\n    <h1>My to-do list</h1>\n    <div class=\"note-wrapper\">\n      <form id=\"new-task-form\">\n        <div>\n          <label for=\"task-title\">Task title:</label>\n          <input type=\"text\" id=\"task-title\" name=\"task-title\">\n        </div>\n        <div>\n          <label for=\"deadline-hours\">Deadline:</label>\n          <input type=\"text\" id=\"deadline-hours\" name=\"deadline-hours\" placeholder=\"Hours\">\n          <input type=\"text\" id=\"deadline-minutes\" name=\"deadline-minutes\" placeholder=\"Minutes\">\n        </div>\n        <button>Add Task</button>\n      </form>\n    </div>\n\n    <div id=\"task-list\">\n      <div class=\"task-list-item\">\n        <div class=\"task-title\">My Task Title</div>\n        <div class=\"task-deadline\">Time left: 4 hours 30 minutes</div>\n        <div class=\"task-controls\">\n          <button class=\"edit\">Edit</button>\n          <button class=\"delete\">Delete</button>\n        </div>\n      </div>\n    </div>\n    <script src=\"scripts/todo.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: ARIA Pressed Option for Role Selectors\nDESCRIPTION: Defines the `pressed` option for role-based selectors to match elements with a specific pressed state.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_125\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `pressed` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Blocking WebSocket Messages in Both Directions with Playwright in Python (Synchronous)\nDESCRIPTION: Handles blocking of messages in both directions using Playwright in a synchronous Python setup. Involves setting up message handlers and WebSocket configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketroute.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef ws_message_handler(server: WebSocketRoute, message: Union[str, bytes]):\n  if message != \"blocked-from-the-page\":\n    server.send(message)\n\ndef server_message_handler(ws: WebSocketRoute, message: Union[str, bytes]):\n  if message != \"blocked-from-the-server\":\n    ws.send(message)\n\ndef handler(ws: WebSocketRoute):\n  server = ws.connect_to_server()\n  ws.on_message(lambda message: ws_message_handler(server, message))\n  server.on_message(lambda message: server_message_handler(ws, message))\n\npage.route_web_socket(\"/ws\", handler)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User Agent in Playwright Test\nDESCRIPTION: Configures a custom user agent string for a specific test using Playwright Test. This allows testing how websites respond to different browser identifications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.use({ userAgent: 'My user agent' });\n\ntest('my user agent test', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Managing HAR Content Policy (C#, Java, Python)\nDESCRIPTION: Controls how resource content is managed in HAR recordings for non-JavaScript language bindings. Supports omitting, embedding, or attaching content separately.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_77\n\nLANGUAGE: python\nCODE:\n```\n- `recordHarContent` ?<[HarContentPolicy]<\"omit\"|\"embed\"|\"attach\">>\n```\n\n----------------------------------------\n\nTITLE: Overriding Context Options for a Single Test\nDESCRIPTION: Example of using the browser_context_args marker to customize browser context options for a specific test.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.mark.browser_context_args(timezone_id=\"Europe/Berlin\", locale=\"en-GB\")\ndef test_browser_context_args(page):\n    assert page.evaluate(\"window.navigator.userAgent\") == \"Europe/Berlin\"\n    assert page.evaluate(\"window.navigator.languages\") == [\"de-DE\"]\n```\n\n----------------------------------------\n\nTITLE: Running All Playwright Tests in C#\nDESCRIPTION: Command to run all Playwright tests using the dotnet CLI.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Fast Forwarding and Pausing Time - Playwright JavaScript\nDESCRIPTION: Showcases installing the clock, pausing execution at a specific time, fast forwarding the virtual clock, and verifying the updated time in tests using Playwright. The snippet demonstrates a workflow of loading a page, manipulating time, and asserting time-dependent UI changes. Requires Playwright and a proper page context; key parameters include date objects and durations in string format.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/clock.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize clock with some time before the test time and let the page load\n// naturally. `Date.now` will progress as the timers fire.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pretend that the user closed the laptop lid and opened it again at 10am,\n// Pause the time once reached that point.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\n\n// Assert the page state.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Close the laptop lid again and open it at 10:30am.\nawait page.clock.fastForward('30:00');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\n----------------------------------------\n\nTITLE: Attaching Screenshots to Test Information in Playwright\nDESCRIPTION: This snippet demonstrates how to use test.info() to attach a screenshot to the test information during test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ntest('example test', async ({ page }) => {\n  // ...\n  await test.info().attach('screenshot', {\n    body: await page.screenshot(),\n    contentType: 'image/png',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Geolocation in Java\nDESCRIPTION: Changes the geolocation of a browser context using the Playwright Java client. This allows testing how an application responds to location changes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_52\n\nLANGUAGE: java\nCODE:\n```\ncontext.setGeolocation(new Geolocation(48.858455, 2.294474));\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation in Playwright (Multiple Languages)\nDESCRIPTION: Demonstrates how to set geolocation for a browser context in Playwright using different programming languages. This method emulates the browser's geographic location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nawait browserContext.setGeolocation({ latitude: 59.95, longitude: 30.31667 });\n```\n\nLANGUAGE: java\nCODE:\n```\nbrowserContext.setGeolocation(new Geolocation(59.95, 30.31667));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait browser_context.set_geolocation({\"latitude\": 59.95, \"longitude\": 30.31667})\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.SetGeolocationAsync(new Geolocation()\n{\n    Latitude = 59.95f,\n    Longitude = 30.31667f\n});\n```\n\n----------------------------------------\n\nTITLE: Emulating Pinch Gesture in Java with Playwright\nDESCRIPTION: This snippet demonstrates how to implement a pinch gesture using Java and Playwright. It includes a static method for performing the pinch gesture and a main method that applies the gesture to zoom out a Google Maps page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\nimport com.microsoft.playwright.options.*;\n\npublic class TouchEvents {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.chromium().launch();\n      BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n        .setViewportSize(412, 839)\n        .setDeviceScaleFactor(2.625)\n        .setUserAgent(\"Mozilla/5.0 (Linux; Android 12; Pixel 7 Build/SP1A.210812.015) AppleWebKit/537.36\" +\n          \" (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36\")\n        .setHasTouch(true)\n        .setIsMobile(true)\n      );\n      Page page = context.newPage();\n\n      page.navigate(\"https://www.google.com/maps/place/@37.4117722,-122.0713234,15z\", new Page.NavigateOptions().setWaitUntil(WaitUntilState.COMMIT));\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Keep using web\")).click();\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Keep using web\")).waitFor(\n        new Locator.WaitForOptions().setState(WaitForSelectorState.HIDDEN));\n\n      Locator met = page.locator(\"[data-test-id='met']\");\n      for (int i = 0; i < 5; i++) {\n        pinch(met, 40, \"in\");\n      }\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n    }\n  }\n\n  public static void pinch(Locator locator, int deltaX, String direction) {\n    pinch(locator, deltaX, direction, 5);\n  }\n\n  public static void pinch(Locator locator, int deltaX, String direction, int steps) {\n    BoundingBox bounds = locator.boundingBox();\n    double centerX = bounds.x + bounds.width / 2;\n    double centerY = bounds.y + bounds.height / 2;\n    double stepDeltaX = deltaX / (steps + 1.0);\n\n    List<Map<String, Object>> touches = List.of(\n      Map.of(\"identifier\", 0, \"clientX\", centerX - (direction.equals(\"in\") ? deltaX : stepDeltaX), \"clientY\", centerY),\n      Map.of(\"identifier\", 1, \"clientX\", centerX + (direction.equals(\"in\") ? deltaX : stepDeltaX), \"clientY\", centerY)\n    );\n    locator.dispatchEvent(\"touchstart\", Map.of(\"touches\", touches, \"changedTouches\", touches, \"targetTouches\", touches));\n\n    for (int i = 1; i <= steps; i++) {\n      double offset = direction.equals(\"in\") ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1));\n      touches = List.of(\n        Map.of(\"identifier\", 0, \"clientX\", centerX - offset, \"clientY\", centerY),\n        Map.of(\"identifier\", 1, \"clientX\", centerX + offset, \"clientY\", centerY)\n      );\n      locator.dispatchEvent(\"touchmove\", Map.of(\"touches\", touches, \"changedTouches\", touches, \"targetTouches\", touches));\n    }\n\n    locator.dispatchEvent(\"touchend\", Map.of(\"touches\", List.of(), \"changedTouches\", List.of(), \"targetTouches\", List.of()));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering URLs in HAR Recording (C#, Java, Python)\nDESCRIPTION: Allows filtering which requests are stored in the HAR file based on URL patterns for non-JavaScript language bindings.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_79\n\nLANGUAGE: python\nCODE:\n```\n- `recordHarUrlFilter` ?<[string]|[RegExp]>\n```\n\n----------------------------------------\n\nTITLE: Using Fixme in beforeEach Hook\nDESCRIPTION: Shows how to use fixme annotation in test hooks to conditionally skip setup for certain conditions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest.beforeEach(async ({ page, isMobile }) => {\n  test.fixme(isMobile, 'Settings page does not work in mobile yet');\n\n  await page.goto('http://localhost:3000/settings');\n});\n\ntest('user profile', async ({ page }) => {\n  await page.getByText('My Profile').click();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Browser Context Events - JavaScript\nDESCRIPTION: Method for waiting on browser context events with optional predicate function and timeout settings. The predicate function receives event data and should resolve to a truthy value when waiting condition is met.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WaitForEventOptions {\n  predicate?: function;\n  timeout?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Handles on Frame in Python (Async)\nDESCRIPTION: Demonstrates the asynchronous usage of evaluate_handle method in Python to evaluate an expression and return a handle for the window object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\na_window_handle = await frame.evaluate_handle(\"Promise.resolve(window)\")\na_window_handle # handle for the window object.\n```\n\n----------------------------------------\n\nTITLE: Evaluating Multiple Selectors on ElementHandle in C#\nDESCRIPTION: Shows how to evaluate multiple selectors on an ElementHandle and extract inner text from multiple elements in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nvar feedHandle = await page.QuerySelectorAsync(\".feed\");\nAssert.AreEqual(new [] { \"Hello!\", \"Hi!\" }, await feedHandle.EvalOnSelectorAllAsync<string[]>(\".tweet\", \"nodes => nodes.map(n => n.innerText)\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Reporter Implementation\nDESCRIPTION: Example of implementing a custom reporter with test lifecycle hooks for logging test execution details.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  FullConfig, FullResult, Reporter, Suite, TestCase, TestResult\n} from '@playwright/test/reporter';\n\nclass MyReporter implements Reporter {\n  onBegin(config: FullConfig, suite: Suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test: TestCase, result: TestResult) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result: FullResult) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\n\nexport default MyReporter;\n```\n\n----------------------------------------\n\nTITLE: Omitting Content from HAR Recording (C#, Java, Python)\nDESCRIPTION: Controls whether to include request content in HAR recordings for non-JavaScript language bindings. Defaults to false, which includes content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_76\n\nLANGUAGE: python\nCODE:\n```\n- `recordHarOmitContent` ?<[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Clearing Browser Permissions in Python (Async)\nDESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright Python async API. This removes any permission settings that were applied earlier.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nawait context.clear_permissions()\n```\n\n----------------------------------------\n\nTITLE: Skipping Browser Download in Batch\nDESCRIPTION: Prevents browser downloads during package installation by setting the PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD environment variable in Windows Batch\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Test with Command Line Reporter Option\nDESCRIPTION: Demonstrates how to run Playwright tests with a specific reporter using the command line interface.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --reporter=line\n```\n\n----------------------------------------\n\nTITLE: Setting Reduced Motion Emulation for JavaScript Browser Context\nDESCRIPTION: Defines the reducedMotion option for browser contexts in JavaScript and Java. This emulates the prefers-reduced-motion media feature with values 'reduce' or 'no-preference'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_65\n\nLANGUAGE: js\nCODE:\n```\n- `reducedMotion` <null|[ReducedMotion]<\"reduce\"|\"no-preference\">>\n\nEmulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [`method: Page.emulateMedia`] for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Chromium Channel - C# RunSettings\nDESCRIPTION: XML RunSettings configuration for using Chromium channel in C# tests\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <LaunchOptions>\n      <Channel>chromium</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n----------------------------------------\n\nTITLE: Specifying Playwright Drop Target Element Selector\nDESCRIPTION: Defines the `target` string parameter, which is a selector used to find the element onto which another element will be dropped in a Playwright drag-and-drop operation. If multiple elements match, the first one is selected.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- `target` <[string]>\n```\n\n----------------------------------------\n\nTITLE: Building Vue project for production\nDESCRIPTION: Compiles and minifies the Vue.js application for production deployment, creating optimized assets.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: PyInstaller Browser Bundling Commands\nDESCRIPTION: Commands for bundling browsers with PyInstaller executables in different shells\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_BROWSERS_PATH=0 playwright install chromium\npyinstaller -F main.py\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_BROWSERS_PATH=0\nplaywright install chromium\npyinstaller -F main.py\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PLAYWRIGHT_BROWSERS_PATH=\"0\"\nplaywright install chromium\npyinstaller -F main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Surge CLI for Deployment\nDESCRIPTION: Command to globally install the Surge CLI tool, which is needed for deploying Svelte applications to Surge's hosting platform.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g surge\n```\n\n----------------------------------------\n\nTITLE: Defining Error.name Property in Playwright (Python)\nDESCRIPTION: Describes the optional name property for the Playwright Error class. This string property provides the name of the error thrown inside the browser, if available. It enables more granular error categorization when handling exceptions. The value can be None if not set, and this property relies only on information from the error itself.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-error.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    @property\n    def name(self) -> str:\n        \"\"\"Name of the error which got thrown inside the browser. Optional.\"\"\"\n        return getattr(self, '_error_name', None)\n\n```\n\n----------------------------------------\n\nTITLE: Generating PDF with Screen Media in Python (Async)\nDESCRIPTION: Demonstrates how to generate a PDF with 'screen' media type using Playwright in Python with async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_71\n\nLANGUAGE: python\nCODE:\n```\n# generates a pdf with \"screen\" media type.\nawait page.emulate_media(media=\"screen\")\nawait page.pdf(path=\"page.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Playwright Java Programs with Maven - Bash\nDESCRIPTION: Shows the Maven command-line invocation to compile and execute the Playwright Java example main class. Requires Maven, an appropriate pom.xml, and a main Java class under the specified path. The key input is the exec.mainClass property set to org.example.App, and the output is execution of the main Playwright script, which may include browser automation tasks.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java -D exec.mainClass=\\\"org.example.App\\\"\n```\n\n----------------------------------------\n\nTITLE: Basic POST Request with RequestOptions in Java\nDESCRIPTION: Demonstrates how to create a basic POST request with query parameters and data using RequestOptions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-requestoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncontext.request().post(\n  \"https://example.com/submit\",\n  RequestOptions.create()\n    .setQueryParam(\"page\", 1)\n    .setData(\"My data\"));\n```\n\n----------------------------------------\n\nTITLE: Partial ARIA Snapshot Matching Button Role in YAML\nDESCRIPTION: This YAML snippet demonstrates a partial ARIA snapshot template for a button. By specifying only '- button', it matches any element with the button role, regardless of its accessible name (like 'Submit' in the example HTML).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n- button\n```\n```\n\n----------------------------------------\n\nTITLE: Asynchronous REPL Usage\nDESCRIPTION: Interactive REPL example showing Playwright usage in asynchronous mode\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import async_playwright\nplaywright = await async_playwright().start()\nbrowser = await playwright.chromium.launch()\npage = await browser.new_page()\nawait page.goto(\"https://playwright.dev/\")\nawait page.screenshot(path=\"example.png\")\nawait browser.close()\nawait playwright.stop()\n```\n\n----------------------------------------\n\nTITLE: Setting Video Recording Directory (C#, Java, Python)\nDESCRIPTION: Specifies the directory for video recording in non-JavaScript language bindings. Enables video recording for all pages in the context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_81\n\nLANGUAGE: python\nCODE:\n```\n- `recordVideoDir` <[path]>\n```\n\n----------------------------------------\n\nTITLE: Evaluating JSHandle in C#\nDESCRIPTION: Demonstrates evaluating a JSHandle to get the innerText of a tweet's retweets element in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar tweetHandle = await page.QuerySelectorAsync(\".tweet .retweets\");\nAssert.AreEqual(\"10 retweets\", await tweetHandle.EvaluateAsync(\"node => node.innerText\"));\n```\n\n----------------------------------------\n\nTITLE: Exact Name Matching Option for Role Selectors\nDESCRIPTION: Defines the `exact` option for role-based name matching to enable case-sensitive whole-string comparison when searching by accessible name.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.28\n- `exact` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with HTTPS Proxy (Java)\nDESCRIPTION: Commands to install Playwright browsers through an HTTPS proxy for Java implementations. Includes examples for bash, batch, and powershell environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS_PROXY=https://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\nLANGUAGE: batch\nCODE:\n```\nset HTTPS_PROXY=https://192.0.2.1\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n----------------------------------------\n\nTITLE: Setting Color Scheme Emulation for JavaScript Browser Context\nDESCRIPTION: Defines the colorScheme option for browser contexts in JavaScript and Java. This emulates the prefers-color-scheme media feature with values 'light' or 'dark'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_63\n\nLANGUAGE: js\nCODE:\n```\n- `colorScheme` <null|[ColorScheme]<\"light\"|\"dark\"|\"no-preference\">>\n\nEmulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See\n[`method: Page.emulateMedia`] for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.\n```\n\n----------------------------------------\n\nTITLE: Automating browser actions with Puppeteer\nDESCRIPTION: Example of browser automation using Puppeteer, including launching a browser, navigating to a page, and taking a screenshot.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/puppeteer-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst puppeteer = require('puppeteer');\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.setViewport({ width: 1280, height: 800 });\n  await page.goto('https://playwright.dev/', {\n    waitUntil: 'networkidle2',\n  });\n  await page.screenshot({ path: 'example.png' });\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Text Caret Handling in Screenshots\nDESCRIPTION: Defines the `caret` option for controlling whether the text cursor is hidden in screenshots. Defaults to hiding the caret.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\n- `caret` <[ScreenshotCaret]<\"hide\"|\"initial\">>\n```\n\n----------------------------------------\n\nTITLE: Visual Regression Test for Identical Images\nDESCRIPTION: This test compares two identical images to ensure they are recognized as the same.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should return true for similar images', async ({ page }) => {\n  const image1 = await page.screenshot();\n  await compareImageFile(image1, 'identical/1.png');\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Playwright Java Programs with Maven - Bash\nDESCRIPTION: Repeats the command to compile and execute Playwright main programs via Maven. This is identical in function to the earlier bash snippet, reinforcing usage patterns for running examples and scripts. No inputs or outputs beyond main class execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-java.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java -D exec.mainClass=\\\"org.example.App\\\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Vue 3 Project\nDESCRIPTION: Command to install all required dependencies for the Vue 3 project as defined in package.json.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining PlaywrightException Class Structure - Java\nDESCRIPTION: Class declaration showing PlaywrightException extending RuntimeException. This exception is thrown when Playwright operations terminate abnormally, such as when a browser closes during page evaluation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-playwrightexception.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class PlaywrightException extends RuntimeException {\n    // Implementation details not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Building Project and Installing Browsers\nDESCRIPTION: Commands to build the project and install required browser dependencies using PowerShell\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build\n```\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/net8.0/playwright.ps1 install\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Frame Binary Payload – Playwright SDK – Java\nDESCRIPTION: The WebSocketFrame.binary method retrieves binary payloads from WebSocket frames in Playwright for Java. It produces a Buffer object with the binary content or null when the frame contains no binary data. To use, instantiate or receive a WebSocketFrame via the Playwright API. Output: Buffer|null. This supports binary message analysis or data synchronization use cases.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-websocketframe.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBuffer binaryPayload = webSocketFrame.binary(); // returns Buffer|null\n```\n\n----------------------------------------\n\nTITLE: Clearing Browser Permissions in Java\nDESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright Java client. This removes any permission settings that were applied earlier.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_39\n\nLANGUAGE: java\nCODE:\n```\ncontext.clearPermissions();\n```\n\n----------------------------------------\n\nTITLE: Configuring Linker Flags and Application Names in CMake\nDESCRIPTION: Sets the linker flags to include the Cocoa framework and defines the executable and product names for the Playwright application.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS \"-framework Cocoa\")\n\nset(EXECUTABLE_NAME Playwright)\nset(PRODUCT_NAME Playwright)\n```\n\n----------------------------------------\n\nTITLE: YAML Partial Match Snapshot\nDESCRIPTION: YAML snapshot showing partial matching of list elements\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n- list\n  - listitem: Feature B\n```\n\n----------------------------------------\n\nTITLE: Generating PDF with Screen Media Type - C#\nDESCRIPTION: Shows PDF generation with screen media type using Playwright in C#. Uses async/await pattern to set media type and generate PDF.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_73\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.EmulateMediaAsync(new() { Media = Media.Screen });\nawait page.PdfAsync(new() { Path = \"page.pdf\" });\n```\n\n----------------------------------------\n\nTITLE: Opening Playwright HTML Test Report\nDESCRIPTION: Shows how to open the last test run HTML report using the Playwright CLI.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-report\n```\n\n----------------------------------------\n\nTITLE: Setting Device Scale Factor for Emulation\nDESCRIPTION: Defines the deviceScaleFactor option for browser contexts. This allows specifying the device pixel ratio for emulation, defaulting to 1.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_52\n\nLANGUAGE: js\nCODE:\n```\n- `deviceScaleFactor` <[float]>\n\nSpecify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation.md#devices).\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Recording in Playwright Test\nDESCRIPTION: Sets up video recording for tests using the TestOptions.video property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    video: 'on-first-retry',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fast Forward Clock Example\nDESCRIPTION: Demonstrates advancing the clock by a specified duration in milliseconds or time string format\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-clock.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.clock.fastForward(1000);\nawait page.clock.fastForward('30:00');\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.clock.fast_forward(1000)\nawait page.clock.fast_forward(\"30:00\")\n```\n\nLANGUAGE: java\nCODE:\n```\npage.clock().fastForward(1000);\npage.clock().fastForward(\"30:00\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Clock.FastForwardAsync(1000);\nawait page.Clock.FastForwardAsync(\"30:00\");\n```\n\n----------------------------------------\n\nTITLE: Simulating Tap Gestures on AndroidDevice with Playwright JS\nDESCRIPTION: androidDevice.tap performs a tap on a UI element specified by selector. Optional duration and timeout parameters control the tap length and operation deadline. Used for UI interactions triggering click or select. Input: selector, optional duration/timeout. Output: none.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n// Tap a widget.\nawait androidDevice.tap({\n  selector: mySelector,\n  duration: 150, // Optional\n  timeout: 1500 // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Dumping Frame Tree using Playwright in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use Playwright to launch a Firefox browser, navigate to a specific URL, and then recursively dump the frame tree structure to the console. It utilizes the `page.mainFrame()` method to get the root frame and `frame.childFrames()` to access child frames, printing each frame's URL with indentation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.goto('https://www.google.com/chrome/browser/canary.html');\n  dumpFrameTree(page.mainFrame(), '');\n  await browser.close();\n\n  function dumpFrameTree(frame, indent) {\n    console.log(indent + frame.url());\n    for (const child of frame.childFrames())\n      dumpFrameTree(child, indent + '  ');\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Managing Color Scheme and Media in Python (Async)\nDESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright Python async API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_60\n\nLANGUAGE: python\nCODE:\n```\n# Create context with dark mode\ncontext = await browser.new_context(\n  color_scheme='dark' # or 'light'\n)\n\n# Create page with dark mode\npage = await browser.new_page(\n  color_scheme='dark' # or 'light'\n)\n\n# Change color scheme for the page\nawait page.emulate_media(color_scheme='dark')\n\n# Change media for page\nawait page.emulate_media(media='print')\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture in Python (Sync) with Playwright\nDESCRIPTION: Synchronous Python implementation of pan gesture emulation using Playwright. The code provides functions for simulating touch events with configurable parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, expect\n\ndef pan(locator, deltaX=0, deltaY=0, steps=5):\n    bounds = locator.bounding_box()\n    centerX = bounds['x'] + bounds['width'] / 2\n    centerY = bounds['y'] + bounds['height'] / 2\n\n    touches = [{\n        'identifier': 0,\n        'clientX': centerX,\n        'clientY': centerY,\n    }]\n    locator.dispatch_event('touchstart', {\n        'touches': touches,\n        'changedTouches': touches,\n        'targetTouches': touches\n    })\n\n    for i in range(1, steps + 1):\n        touches = [{\n            'identifier': 0,\n            'clientX': centerX + deltaX * i / steps,\n            'clientY': centerY + deltaY * i / steps,\n        }]\n        locator.dispatch_event('touchmove', {\n            'touches': touches,\n            'changedTouches': touches,\n            'targetTouches': touches\n        })\n\n    locator.dispatch_event('touchend')\n```\n\n----------------------------------------\n\nTITLE: Using ToMatchAriaSnapshotAsync with an inline snapshot in C#\nDESCRIPTION: C# example of verifying accessibility structure using ToMatchAriaSnapshotAsync. The method confirms that the body element contains the expected accessibility elements, with proper escaping for nested quotes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locatorassertions.md#2025-04-22_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.GotoAsync(\"https://demo.playwright.dev/todomvc/\");\nawait Expect(page.Locator(\"body\")).ToMatchAriaSnapshotAsync(@\"\n  - heading \"\"todos\"\"\n  - textbox \"\"What needs to be done?\"\"\n\");\n```\n\n----------------------------------------\n\nTITLE: Character-by-Character Text Input in Playwright\nDESCRIPTION: Shows how to input text character by character using pressSequentially method, simulating real keyboard input with optional delay.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/input.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.locator('#area').pressSequentially('Hello World!');\n```\n\nLANGUAGE: java\nCODE:\n```\npage.locator(\"#area\").pressSequentially(\"Hello World!\");\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.locator('#area').press_sequentially('Hello World!')\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.Locator(\"#area\").PressSequentiallyAsync(\"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Evaluating Handles on Frame in C#\nDESCRIPTION: Demonstrates how to use the EvaluateHandleAsync method in C# to evaluate an expression and return a JSHandle for the window object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n// Handle for the window object.\nvar aWindowHandle = await frame.EvaluateHandleAsync(\"() => Promise.resolve(window)\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Vite Configuration with Plugins\nDESCRIPTION: Comprehensive Vite configuration example including plugins and path resolution for Vue testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/experimental-ct-vue';\n\nimport { resolve } from 'path';\nimport vue from '@vitejs/plugin-vue';\nimport AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';\n\nexport default defineConfig({\n  testDir: './tests/component',\n  use: {\n    trace: 'on-first-retry',\n    ctViteConfig: {\n      plugins: [\n        vue(),\n        AutoImport({\n          imports: [\n            'vue',\n            'vue-router',\n            '@vueuse/head',\n            'pinia',\n            {\n              '@/store': ['useStore'],\n            },\n          ],\n          dts: 'src/auto-imports.d.ts',\n          eslintrc: {\n            enabled: true,\n          },\n        }),\n        Components({\n          dirs: ['src/components'],\n          extensions: ['vue'],\n        }),\n      ],\n      resolve: {\n        alias: {\n          '@': resolve(__dirname, './src'),\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context with Permissions in JavaScript\nDESCRIPTION: Creates a new browser context with notification permissions using the Playwright JavaScript library. This enables notification capabilities for all pages within the context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  permissions: ['notifications'],\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Properties from JSHandle in JavaScript\nDESCRIPTION: Illustrates how to get properties from a JSHandle, specifically window and document objects, in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst handle = await page.evaluateHandle(() => ({ window, document }));\nconst properties = await handle.getProperties();\nconst windowHandle = properties.get('window');\nconst documentHandle = properties.get('document');\nawait handle.dispose();\n```\n\n----------------------------------------\n\nTITLE: Setting Fixture Timeout (TypeScript)\nDESCRIPTION: This code demonstrates how to set a separate timeout for a fixture, particularly useful for slow fixtures. It sets a 60-second timeout for a custom fixture named 'slowFixture'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-timeouts-js.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, expect } from '@playwright/test';\n\nconst test = base.extend<{ slowFixture: string }>({\n  slowFixture: [async ({}, use) => {\n    // ... perform a slow operation ...\n    await use('hello');\n  }, { timeout: 60_000 }]\n});\n\ntest('example test', async ({ slowFixture }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Chrome Extensions - JavaScript\nDESCRIPTION: This test script defines functions to validate that a Chrome extension is affecting web pages as expected. It checks for specific text changes made by an extension, utilizing earlier fixture setups and Playwright's testing capabilities.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/chrome-extensions-js-python.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { test, expect } from './fixtures';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://example.com');\n  await expect(page.locator('body')).toHaveText('Changed by my-extension');\n});\n\ntest('popup page', async ({ page, extensionId }) => {\n  await page.goto(`chrome-extension://${extensionId}/popup.html`);\n  await expect(page.locator('body')).toHaveText('my-extension popup');\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript Functions in Page Context\nDESCRIPTION: Defines the pageFunction parameter for evaluation functions in JavaScript. Allows executing JavaScript functions in the page context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_43\n\nLANGUAGE: js\nCODE:\n```\n- `pageFunction` <[function]|[string]>\n\nFunction to be evaluated in the page context.\n```\n\n----------------------------------------\n\nTITLE: Get Server Address for Response\nDESCRIPTION: By using the `Response.serverAddr` method, one can retrieve the IP address and port of the server responding to the request, useful for diagnosing network paths. It's an async operation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync function serverAddress() {\\n  const address = await response.serverAddr();\\n  console.log('Server Address:', address);\\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Playwright to WebView2 using C#\nDESCRIPTION: This snippet demonstrates how to connect Playwright to a running WebView2 application using C#. It establishes a connection over CDP and retrieves the browser context and page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar browser = await playwright.Chromium.ConnectOverCDPAsync(\"http://localhost:9222\");\nvar context = browser.Contexts[0];\nvar page = context.Pages[0];\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function in Playwright Page (Python Sync)\nDESCRIPTION: This Python code shows how to expose a SHA256 function to the browser page using Playwright's sync API. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef sha256(text):\n    m = hashlib.sha256()\n    m.update(bytes(text, \"utf8\"))\n    return m.hexdigest()\n\n\ndef run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = webkit.launch(headless=False)\n    page = browser.new_page()\n    page.expose_function(\"sha256\", sha256)\n    page.set_content(\"\"\"\n        <script>\n          async function onClick() {\n            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n          }\n        </script>\n        <button onclick=\"onClick()\">Click me</button>\n        <div></div>\n    \"\"\")\n    page.click(\"button\")\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fixme Test Group with Test.describe.fixme in JavaScript\nDESCRIPTION: Demonstrates how to use test.describe.fixme to declare a group of tests that are marked as \"fixme\" and will not be executed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe.fixme('broken tests that should be fixed', () => {\n  test('example', async ({ page }) => {\n    // This test will not run\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Increasing Connection Timeout for Playwright Install (Python)\nDESCRIPTION: Commands to increase the connection timeout when downloading Playwright browsers on slow networks for Python implementations. The PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT value is in milliseconds.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npip install playwright\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\npip install playwright\nplaywright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\npip install playwright\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Bypassing Actionability Checks with Playwright `force` Option\nDESCRIPTION: Defines the `force` boolean option for Playwright actions. When set to `true`, it bypasses the standard actionability checks (e.g., visibility, enabled state) before performing the action. Defaults to `false`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- `force` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Updates\nDESCRIPTION: Controls how test snapshots are updated with actual results. Supports 'all', 'changed', 'missing', or 'none' modes.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  updateSnapshots: 'missing',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting TypeScript Configuration Path\nDESCRIPTION: Specifies a single tsconfig path applicable to all imported files. Overrides default behavior of looking up tsconfig for each file separately.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  tsconfig: './tsconfig.test.json',\n});\n```\n\n----------------------------------------\n\nTITLE: HttpsProxyAgent Class Configuration Options\nDESCRIPTION: Configuration options for initializing an HttpsProxyAgent instance that implements an http.Agent subclass for proxying HTTPS and WebSocket requests through an HTTP CONNECT tunnel.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n{\n  host: String,     // Proxy host to connect to (may use hostname as well)\n  port: Number,     // Proxy port to connect to\n  protocol: String, // If 'https:', then use TLS to connect to the proxy\n  headers: Object,  // Additional HTTP headers for CONNECT method\n  // Any other options are passed to net.connect()/tls.connect()\n}\n```\n\n----------------------------------------\n\nTITLE: Using SocksProxyAgent with HTTP Module\nDESCRIPTION: Example demonstrating how to use SocksProxyAgent with Node.js HTTP module to make requests through a SOCKS proxy. Shows proxy configuration and request handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar url = require('url');\nvar http = require('http');\nvar SocksProxyAgent = require('socks-proxy-agent');\n\nvar proxy = process.env.socks_proxy || 'socks://127.0.0.1:1080';\nconsole.log('using proxy server %j', proxy);\n\nvar endpoint = process.argv[2] || 'http://nodejs.org/api/';\nconsole.log('attempting to GET %j', endpoint);\nvar opts = url.parse(endpoint);\n\nvar agent = new SocksProxyAgent(proxy);\nopts.agent = agent;\n\nhttp.get(opts, function (res) {\n\tconsole.log('\"response\" event!', res.headers);\n\tres.pipe(process.stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers and search engine bots to access all parts of the website. The file includes a reference to the robots.txt standard documentation.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/stress/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: HTML List Structure Example\nDESCRIPTION: Example HTML structure showing an unordered list with three features for demonstrating partial matching\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Feature A</li>\n  <li>Feature B</li>\n  <li>Feature C</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Skipping Test Steps in Playwright v1.50\nDESCRIPTION: Code example demonstrating how to skip execution of a test step using the new step.skip method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('some test', async ({ page }) => {\n  await test.step('before running step', async () => {\n    // Normal step\n  });\n\n  await test.step.skip('not yet ready', async () => {\n    // This step is skipped\n  });\n\n  await test.step('after running step', async () => {\n    // This step still runs even though the previous one was skipped\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for a Svelte Project\nDESCRIPTION: Commands to navigate to the project directory and install the required Node.js dependencies using npm.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd svelte-app\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Pinia Store Testing Configuration\nDESCRIPTION: Setup for testing Vue components that use Pinia state management, including hook configuration.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';\nimport { createTestingPinia } from '@pinia/testing';\nimport type { StoreState } from 'pinia';\nimport type { useStore } from '../src/store';\n\nexport type HooksConfig = {\n  store?: StoreState<ReturnType<typeof useStore>>;\n}\n\nbeforeMount<HooksConfig>(async ({ hooksConfig }) => {\n  createTestingPinia({\n    initialState: hooksConfig?.store,\n    stubActions: false,\n    createSpy(args) {\n      console.log('spy', args)\n      return () => console.log('spy-returns')\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Building the Playwright Application in CMake\nDESCRIPTION: Finalizes the build configuration by including the necessary directories, defining the macOS bundle executable target, setting the Info.plist file, linking libraries, and establishing dependencies on the NIB resources.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${Playwright_INCLUDE_DIRECTORIES})\nadd_executable(Playwright MACOSX_BUNDLE ${Playwright_SOURCES})\nset_target_properties(Playwright PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${PLAYWRIGHT_DIR}/Info.plist)\ntarget_link_libraries(Playwright ${Playwright_LIBRARIES})\nadd_dependencies(Playwright PlaywrightNibs)\n```\n\n----------------------------------------\n\nTITLE: Defining FullConfig Class Properties in Markdown\nDESCRIPTION: This snippet defines the structure and properties of the FullConfig class using Markdown syntax. It includes type information, descriptions, and references to related TestConfig properties.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-fullconfig.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# class: FullConfig\n* since: v1.10\n* langs: js\n\nResolved configuration which is accessible via [`property: TestInfo.config`] and is passed to the test reporters. To see the format of Playwright configuration file, please see [TestConfig] instead.\n\n## property: FullConfig.configFile\n* since: v1.20\n- type: ?<[string]>\n\nPath to the configuration file used to run the tests. The value is an empty string if no config file was used.\n\n## property: FullConfig.forbidOnly\n* since: v1.10\n- type: <[boolean]>\n\nSee [`property: TestConfig.forbidOnly`].\n\n## property: FullConfig.fullyParallel\n* since: v1.20\n- type: <[boolean]>\n\nSee [`property: TestConfig.fullyParallel`].\n\n## property: FullConfig.globalSetup\n* since: v1.10\n- type: <[null]|[string]>\n\nSee [`property: TestConfig.globalSetup`].\n\n## property: FullConfig.globalTeardown\n* since: v1.10\n- type: <[null]|[string]>\n\nSee [`property: TestConfig.globalTeardown`].\n\n## property: FullConfig.globalTimeout\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestConfig.globalTimeout`].\n\n## property: FullConfig.grep\n* since: v1.10\n- type: <[RegExp]|[Array]<[RegExp]>>\n\nSee [`property: TestConfig.grep`].\n\n## property: FullConfig.grepInvert\n* since: v1.10\n- type: <[null]|[RegExp]|[Array]<[RegExp]>>\n\nSee [`property: TestConfig.grepInvert`].\n\n## property: FullConfig.maxFailures\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestConfig.maxFailures`].\n\n## property: FullConfig.metadata\n* since: v1.10\n- type: <[Metadata]>\n\nSee [`property: TestConfig.metadata`].\n\n## property: FullConfig.preserveOutput\n* since: v1.10\n- type: <[PreserveOutput]<\"always\"|\"never\"|\"failures-only\">>\n\nSee [`property: TestConfig.preserveOutput`].\n\n## property: FullConfig.projects\n* since: v1.10\n- type: <[Array]<[FullProject]>>\n\nList of resolved projects.\n\n## property: FullConfig.quiet\n* since: v1.10\n- type: <[boolean]>\n\nSee [`property: TestConfig.quiet`].\n\n## property: FullConfig.reporter\n* since: v1.10\n- type: <[string]|[Array]<[Object]>|[BuiltInReporter]<\"list\"|\"dot\"|\"line\"|\"github\"|\"json\"|\"junit\"|\"null\"|\"html\">>\n  - `0` <[string]> Reporter name or module or file path\n  - `1` <[Object]> An object with reporter options if any\n\nSee [`property: TestConfig.reporter`].\n\n## property: FullConfig.reportSlowTests\n* since: v1.10\n- type: <[null]|[Object]>\n  - `max` <[int]> The maximum number of slow test files to report.\n  - `threshold` <[float]> Test file duration in milliseconds that is considered slow.\n\nSee [`property: TestConfig.reportSlowTests`].\n\n## property: FullConfig.rootDir\n* since: v1.20\n- type: <[string]>\n\nBase directory for all relative paths used in the reporters.\n\n## property: FullConfig.shard\n* since: v1.10\n- type: <[null]|[Object]>\n  - `total` <[int]> The total number of shards.\n  - `current` <[int]> The index of the shard to execute, one-based.\n\nSee [`property: TestConfig.shard`].\n\n## property: FullConfig.updateSnapshots\n* since: v1.10\n- type: <[UpdateSnapshots]<\"all\"|\"changed\"|\"missing\"|\"none\">>\n\nSee [`property: TestConfig.updateSnapshots`].\n\n## property: FullConfig.updateSourceMethod\n* since: v1.50\n- type: <[UpdateSourceMethod]<\"overwrite\"|\"3way\"|\"patch\">>\n\nSee [`property: TestConfig.updateSourceMethod`].\n\n## property: FullConfig.version\n* since: v1.20\n- type: <[string]>\n\nPlaywright version.\n\n## property: FullConfig.webServer\n* since: v1.10\n- type: <[null]|[Object]>\n\nSee [`property: TestConfig.webServer`].\n\n## property: FullConfig.workers\n* since: v1.10\n- type: <[int]>\n\nSee [`property: TestConfig.workers`].\n```\n\n----------------------------------------\n\nTITLE: YAML Equal Children Match\nDESCRIPTION: YAML snapshot demonstrating exact children matching with equal property\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n- list\n  - /children: equal\n  - listitem: Feature A\n  - listitem: Feature B\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Size in Browser Context (JavaScript)\nDESCRIPTION: Defines the videoSize option for browser context. This option is deprecated in favor of recordVideo. It allows setting video frame dimensions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n- `videoSize` <[Object]>\n  - `width` <[int]> Video frame width.\n  - `height` <[int]> Video frame height.\n```\n\n----------------------------------------\n\nTITLE: Bash Update Snapshots Command\nDESCRIPTION: Command to update Playwright snapshots using the test runner\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Performing Trial Run (Actionability Check Only) in Playwright\nDESCRIPTION: Defines the `trial` boolean option for Playwright actions. When set to `true`, the method only performs actionability checks (e.g., visibility, enabled) without executing the actual action. Useful for waiting until an element is ready. Defaults to `false`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- `trial` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Creating DataTransfer and Dispatching DragStart Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DataTransfer object and use it to dispatch a dragstart event in JavaScript. Note that DataTransfer can only be created in Chromium and Firefox.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataTransfer = await page.evaluateHandle(() => new DataTransfer());\nawait page.dispatchEvent('#source', 'dragstart', { dataTransfer });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Playwright Build Directories and Definitions in CMake\nDESCRIPTION: Defines the Playwright directory path and adds compiler definitions including a prefix header. The definition includes setting WEBCORE_EXPORT to an empty string which is noted as a FIXME item.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLAYWRIGHT_DIR \"${TOOLS_DIR}/Playwright/mac\")\n\n#FIXME: This should not need WEBCORE_EXPORT defined.  This means we are including WebCore headers, and we should not.\nadd_definitions(\"-include Playwright_Prefix.pch -DWEBCORE_EXPORT=\")\n```\n\n----------------------------------------\n\nTITLE: Simple Test Step Skip Example\nDESCRIPTION: Shows how to unconditionally skip a test step.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page }) => {\n  await test.step('check expectations', async step => {\n    step.skip();\n    // step body below will not run\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with Rollup\nDESCRIPTION: Command to launch the development server using Rollup, which enables hot reloading for a smoother development experience.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Playwright and Test Utilities for Visual Regression Testing\nDESCRIPTION: This snippet imports the necessary modules from Playwright and sets up test utility functions for visual comparison testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, expect } = require('./fixture');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction compareImages(image1, image2, options = {}) {\n  return expect(image1).toMatchImage(image2, options);\n}\n\nfunction compareImageFile(image1, image2File, options = {}) {\n  const buffer = fs.readFileSync(path.join(__dirname, 'data', image2File));\n  return compareImages(image1, buffer, options);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting WebView Package Identifier\nDESCRIPTION: This method returns the package identifier of the WebView. It is a synchronous method that returns a string.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androidwebview.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmethod: AndroidWebView.pkg\n- returns: <[string]>\n```\n\n----------------------------------------\n\nTITLE: Installing Chromium Package Reference\nDESCRIPTION: Package name reference for installing Chromium browser support in Playwright, with a recommendation to use @playwright/test for end-to-end testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-browser-chromium/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @playwright/browser-chromium\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Authentication Credentials in Playwright Tests\nDESCRIPTION: Example showing how to configure HTTP authentication credentials for websites that require Basic HTTP authentication, providing username and password.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    httpCredentials: {\n      username: 'user',\n      password: 'pass',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Conditional Path Templates\nDESCRIPTION: Demonstrates configuration using conditional path templates based on project names, showing how paths are resolved differently for named and unnamed projects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_136\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  snapshotPathTemplate: '__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',\n  testMatch: 'example.spec.ts',\n  projects: [\n    { use: { browserName: 'firefox' } },\n    { name: 'chromium', use: { browserName: 'chromium' } },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture in Java with Playwright\nDESCRIPTION: Java implementation of pan gesture emulation using Playwright. The code implements touch event simulation for map navigation with configurable delta movements and steps.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/touch-events.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.microsoft.playwright.*;\nimport com.microsoft.playwright.options.*;\n\npublic class TouchEvents {\n  public static void main(String[] args) {\n    try (Playwright playwright = Playwright.create()) {\n      Browser browser = playwright.chromium().launch();\n      BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n        .setViewportSize(412, 839)\n        .setDeviceScaleFactor(2.625)\n        .setUserAgent(\"Mozilla/5.0 (Linux; Android 12; Pixel 7 Build/SP1A.210812.015) AppleWebKit/537.36\" +\n          \" (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36\")\n        .setHasTouch(true)\n        .setIsMobile(true)\n      );\n      Page page = context.newPage();\n\n      page.navigate(\"https://www.google.com/maps/place/@37.4117722,-122.0713234,15z\", new Page.NavigateOptions().setWaitUntil(WaitUntilState.COMMIT));\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Keep using web\")).click();\n      page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Keep using web\")).waitFor(\n        new Locator.WaitForOptions().setState(WaitForSelectorState.HIDDEN));\n\n      Locator met = page.locator(\"[data-test-id='met']\");\n      for (int i = 0; i < 5; i++) {\n        pan(met, 200, 100);\n      }\n      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n    }\n  }\n\n  public static void pan(Locator locator, int deltaX, int deltaY) {\n    pan(locator, deltaX, deltaY, 5);\n  }\n\n  public static void pan(Locator locator, int deltaX, int deltaY, int steps) {\n    BoundingBox bounds = locator.boundingBox();\n    double centerX = bounds.x + bounds.width / 2;\n    double centerY = bounds.y + bounds.height / 2;\n\n    List<Map<String, Object>> touches = List.of(Map.of(\n      \"identifier\", 0,\n      \"clientX\", centerX,\n      \"clientY\", centerY\n    ));\n    locator.dispatchEvent(\"touchstart\", Map.of(\n      \"touches\", touches,\n      \"changedTouches\", touches,\n      \"targetTouches\", touches\n    ));\n\n    for (int i = 1; i <= steps; i++) {\n      touches = List.of(Map.of(\n        \"identifier\", 0,\n        \"clientX\", centerX + deltaX * i / steps,\n        \"clientY\", centerY + deltaY * i / steps\n      ));\n      locator.dispatchEvent(\"touchmove\", Map.of(\n        \"touches\", touches,\n        \"changedTouches\", touches,\n        \"targetTouches\", touches\n      ));\n    }\n\n    locator.dispatchEvent(\"touchend\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeMount Hook in Next.js Component Tests\nDESCRIPTION: Example of using the beforeMount hook in Playwright component tests for Next.js. This demonstrates mocking the router for component testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-react';\nimport { Component } from './mycomponent';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<Component></Component>, {\n    // Pass mock value from test into `beforeMount`.\n    hooksConfig: {\n      router: {\n        query: { page: 1, per_page: 10 },\n        asPath: '/posts'\n      }\n    }\n  });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport router from 'next/router';\nimport { beforeMount } from '@playwright/experimental-ct-react/hooks';\n\nbeforeMount(async ({ hooksConfig }) => {\n  // Before mount, redefine useRouter to return mock value from test.\n  router.useRouter = () => hooksConfig.router;\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Widget Information on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.info retrieves metadata about a widget specified by selector. The method returns an AndroidElementInfo object with details such as position, bounds, and attributes. Input: selector. Output: structured widget information for assertions or UI introspection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Gets information about a widget.\nconst info = await androidDevice.info({ selector: mySelector });\nconsole.log(info);\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Recording Size (C#, Java, Python)\nDESCRIPTION: Sets the dimensions for recorded videos in non-JavaScript language bindings. Defaults to viewport size scaled to fit 800x800.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_82\n\nLANGUAGE: python\nCODE:\n```\n- `recordVideoSize` <[Object]>\n  - `width` <[int]> Video frame width.\n  - `height` <[int]> Video frame height.\n```\n\n----------------------------------------\n\nTITLE: Matching Body ARIA Snapshot using Playwright C#\nDESCRIPTION: This C# snippet shows how to asynchronously match the ARIA snapshot of the body element. It uses `await Expect(page.Locator(\"body\")).ToMatchAriaSnapshotAsync()` with a verbatim string literal template specifying the 'heading' role and its name 'title'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/aria-snapshots.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nawait Expect(page.Locator(\"body\")).ToMatchAriaSnapshotAsync(@\"\n  - heading \"\"title\"\"\n\");\n```\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Locator Handlers in C#\nDESCRIPTION: This code demonstrates how to add and remove locator handlers, including specifying options like the number of times to run and whether to wait after execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.GetByText(\"This interstitial covers the button\");\nawait Page.AddLocatorHandlerAsync(locator, async (overlay) =>\n{\n    await overlay.Locator(\"#close\").ClickAsync();\n}, new() { Times = 3, NoWaitAfter = true });\n// Run your tests that can be interrupted by the overlay.\n// ...\nawait Page.RemoveLocatorHandlerAsync(locator);\n```\n\n----------------------------------------\n\nTITLE: Configuring xUnit Playwright Tests with .runsettings\nDESCRIPTION: This XML configuration specifies xUnit-specific settings for parallelization, environment variables for debugging, and Playwright options such as browser selection and launch parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <!-- See https://xunit.net/docs/runsettings -->\n  <xUnit>\n    <MaxParallelThreads>1</MaxParallelThreads>\n  </xUnit>\n  <!-- General run configuration -->\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <!-- For debugging selectors, it's recommend to set the following environment variable -->\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n  <!-- Playwright -->  \n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selector on ElementHandle in C#\nDESCRIPTION: Shows how to evaluate a selector on an ElementHandle and extract inner text in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nvar tweetHandle = await page.QuerySelectorAsync(\".tweet\");\nAssert.AreEqual(\"100\", await tweetHandle.EvalOnSelectorAsync(\".like\", \"node => node.innerText\"));\nAssert.AreEqual(\"10\", await tweetHandle.EvalOnSelectorAsync(\".retweets\", \"node => node.innerText\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Contrast Emulation for C# and Python Browser Context\nDESCRIPTION: Defines the contrast option for browser contexts in C# and Python. This emulates the prefers-contrast media feature with values 'no-preference', 'more', or 'null' to reset to system defaults.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_70\n\nLANGUAGE: csharp\nCODE:\n```\n- `contrast` <[Contrast]<\"no-preference\"|\"more\"|\"null\">>\n\nEmulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [`method: Page.emulateMedia`] for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.\n```\n\n----------------------------------------\n\nTITLE: Setting Forced Colors Emulation for C# and Python Browser Context\nDESCRIPTION: Defines the forcedColors option for browser contexts in C# and Python. This emulates the forced-colors media feature with values 'active', 'none', or 'null' to reset to system defaults.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\n- `forcedColors` <[ForcedColors]<\"active\"|\"none\"|\"null\">>\n\nEmulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [`method: Page.emulateMedia`] for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'none'`.\n```\n\n----------------------------------------\n\nTITLE: Viewing Recorded Playwright Traces\nDESCRIPTION: Command to open the Playwright Trace Viewer GUI tool, which allows examination of recorded traces including DOM state, page rendering, and network activity.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-trace trace.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Properties for Playwright in CMake\nDESCRIPTION: Sets Windows-specific properties for the Playwright executable and adds conditional compile definitions for the Cairo platform if needed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(Playwright PROPERTIES WIN32_EXECUTABLE ON)\nif (${WTF_PLATFORM_WIN_CAIRO})\n    target_compile_definitions(Playwright PRIVATE WIN_CAIRO)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: HTML List Structure Example\nDESCRIPTION: Basic HTML unordered list structure used as example DOM for locator demonstrations\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Error.message Property in Playwright (Python)\nDESCRIPTION: Declares the message property on the Playwright Error class, available since v1.11. This property returns a string representing the message of the error for programmatic access, allowing error details to be examined in exception handling logic. It is useful for logging or displaying user-friendly error messages and does not require additional dependencies.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-error.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    @property\n    def message(self) -> str:\n        \"\"\"Message of the error.\"\"\"\n        return str(self)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Logger for JavaScript Browser Context\nDESCRIPTION: Defines the logger option for browser contexts in JavaScript. This allows setting a custom logger sink for Playwright logging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_71\n\nLANGUAGE: js\nCODE:\n```\n- `logger` <[Logger]>\n\nLogger sink for Playwright logging.\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with Browser-Specific Download Hosts (Python)\nDESCRIPTION: Commands to install Playwright browsers using different download hosts for specific browsers. These use browser-specific environment variables that take precedence over the general PLAYWRIGHT_DOWNLOAD_HOST variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\npip install playwright\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npip install playwright\nplaywright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\npip install playwright\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Workers in CI JavaScript\nDESCRIPTION: The configuration file sets Playwright to run tests sequentially in CI by setting workers to 1. It avoids resource conflicts in CI, facilitating stable execution. The setup is based on environment variables, with an optional parallel setup depending on resources.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/ci.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\\n\\nexport default defineConfig({\\n  // Opt out of parallel tests on CI.\\n  workers: process.env.CI ? 1 : undefined,\\n});\n```\n\n----------------------------------------\n\nTITLE: Screenshot Animation Control in Playwright\nDESCRIPTION: Defines the `animations` option for screenshots that can disable CSS animations and transitions. When set to 'disabled', it handles finite and infinite animations differently.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\n- `animations` <[ScreenshotAnimations]<\"disabled\"|\"allow\">>\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listener Removal Behavior (JavaScript)\nDESCRIPTION: Specifies how to handle currently running event listeners when removing all listeners. Controls whether to wait for completion and error handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n- `behavior` <[RemoveAllListenersBehavior]<\"wait\"|\"ignoreErrors\"|\"default\">>\n```\n\n----------------------------------------\n\nTITLE: HTTPS Proxy Connection Example with Node.js https Module\nDESCRIPTION: Example showing how to create an HTTPS connection through a proxy server using the https-proxy-agent module. Uses the built-in https module to make a GET request to an HTTPS endpoint via a proxy.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar url = require('url');\nvar https = require('https');\nvar HttpsProxyAgent = require('https-proxy-agent');\n\n// HTTP/HTTPS proxy to connect to\nvar proxy = process.env.http_proxy || 'http://168.63.76.32:3128';\nconsole.log('using proxy server %j', proxy);\n\n// HTTPS endpoint for the proxy to connect to\nvar endpoint = process.argv[2] || 'https://graph.facebook.com/tootallnate';\nconsole.log('attempting to GET %j', endpoint);\nvar options = url.parse(endpoint);\n\n// create an instance of the `HttpsProxyAgent` class with the proxy server information\nvar agent = new HttpsProxyAgent(proxy);\noptions.agent = agent;\n\nhttps.get(options, function (res) {\n  console.log('\"response\" event!', res.headers);\n  res.pipe(process.stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with Browser-Specific Download Hosts (Java)\nDESCRIPTION: Commands to install Playwright browsers using different download hosts for specific browsers. These use browser-specific environment variables that take precedence over the general PLAYWRIGHT_DOWNLOAD_HOST variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Playwright Tests with PDB\nDESCRIPTION: Example of using the breakpoint() statement to pause test execution and enter the Python debugger for interactive debugging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef test_bing_is_working(page):\n    page.goto(\"https://bing.com\")\n    breakpoint()\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Expect Instances with expect.configure\nDESCRIPTION: Shows how to create pre-configured expect instances with custom timeout values or soft assertion settings that can be reused throughout tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst slowExpect = expect.configure({ timeout: 10000 });\nawait slowExpect(locator).toHaveText('Submit');\n\n// Always do soft assertions.\nconst softExpect = expect.configure({ soft: true });\nawait softExpect(locator).toHaveText('Submit');\n```\n\n----------------------------------------\n\nTITLE: Identifying Response Frame in Playwright\nDESCRIPTION: The `Response.frame` method returns the frame associated with the given response. This is useful for understanding which iframe or main frame initiated the HTTP request behind the response.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst frame = response.frame();\\nconsole.log('Response initiated by frame:', frame);\n```\n\n----------------------------------------\n\nTITLE: Logging Focused Node Name in Accessibility Snapshot with Python (Async)\nDESCRIPTION: Analyzes the accessibility snapshot to find and log the name of the focused node in a web page using Python's async features. Utilizes a helper function `find_focused_node()` to recursively find focused nodes within the structure. Requires Playwright setup and Python's async capabilities.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef find_focused_node(node):\n    if node.get(\"focused\"):\n        return node\n    for child in (node.get(\"children\") or []):\n        found_node = find_focused_node(child)\n        if found_node:\n            return found_node\n    return None\n\nsnapshot = await page.accessibility.snapshot()\nnode = find_focused_node(snapshot)\nif node:\n    print(node[\"name\"])\n```\n\n----------------------------------------\n\nTITLE: Tracing a Square with Mouse Movements in Python (Async)\nDESCRIPTION: This snippet demonstrates how to use the 'page.mouse' object in Python with async/await syntax to trace a 100x100 square by moving the mouse and performing click actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# using 'page.mouse' to trace a 100x100 square.\nawait page.mouse.move(0, 0)\nawait page.mouse.down()\nawait page.mouse.move(0, 100)\nawait page.mouse.move(100, 100)\nawait page.mouse.move(100, 0)\nawait page.mouse.move(0, 0)\nawait page.mouse.up()\n```\n\n----------------------------------------\n\nTITLE: Evaluating Window Handle in Playwright\nDESCRIPTION: Examples showing how to get a handle for the window object using Page.evaluateHandle across different languages. Returns a JSHandle that resolves to the window object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nconst aWindowHandle = await page.evaluateHandle(() => Promise.resolve(window));\n```\n\nLANGUAGE: java\nCODE:\n```\nJSHandle aWindowHandle = page.evaluateHandle(\"() => Promise.resolve(window)\");\n```\n\nLANGUAGE: python\nCODE:\n```\na_window_handle = await page.evaluate_handle(\"Promise.resolve(window)\")\na_window_handle # handle for the window object.\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar aWindowHandle = await page.EvaluateHandleAsync(\"() => Promise.resolve(window)\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Ignoring in Playwright Tests\nDESCRIPTION: Configuration to skip snapshot expectations based on environment conditions using ignoreSnapshots property.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  ignoreSnapshots: !process.env.CI,\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Step Skip with Description\nDESCRIPTION: Demonstrates conditional test step skipping with a custom description based on a mobile condition.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page, isMobile }) => {\n  await test.step('check desktop expectations', async step => {\n    step.skip(isMobile, 'not present in the mobile layout');\n    // step body below will not run\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous Test Suites in Playwright\nDESCRIPTION: Example of using test.describe without a title to create an anonymous suite. This is useful for grouping tests with common options using test.use.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe(() => {\n  test.use({ colorScheme: 'dark' });\n\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Image Quality Setting for Screenshots\nDESCRIPTION: Defines the `quality` option that controls the quality of screenshot images on a scale of 0-100. This option is not applicable to PNG images.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\n- `quality` <[int]>\n```\n\n----------------------------------------\n\nTITLE: Recording Trace in Java\nDESCRIPTION: Demonstrates trace recording implementation in Java using the BrowserContext.tracing API. Includes configuration for screenshots, snapshots, and source capture.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer-intro-java-python.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nBrowser browser = browserType.launch();\nBrowserContext context = browser.newContext();\n\n// Start tracing before creating / navigating a page.\ncontext.tracing().start(new Tracing.StartOptions()\n  .setScreenshots(true)\n  .setSnapshots(true)\n  .setSources(true));\n\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\n\n// Stop tracing and export it into a zip archive.\ncontext.tracing().stop(new Tracing.StopOptions()\n  .setPath(Paths.get(\"trace.zip\")));\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with Browser-Specific Download Hosts (C#)\nDESCRIPTION: Commands to install Playwright browsers using different download hosts for specific browsers. These use browser-specific environment variables that take precedence over the general PLAYWRIGHT_DOWNLOAD_HOST variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 pwsh bin/Debug/netX/playwright.ps1 install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\npwsh bin/Debug/netX/playwright.ps1 install\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Parallelism using pytest-xdist\nDESCRIPTION: Commands to install pytest-xdist and run tests in parallel across multiple processes for faster execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# install dependency\npip install pytest-xdist\n# use the --numprocesses flag\npytest --numprocesses auto\n```\n\n----------------------------------------\n\nTITLE: Using toBeDefined Method in GenericAssertions\nDESCRIPTION: Shows how to use the 'toBeDefined' method to ensure a value is not undefined. This example demonstrates a passing test with a null value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = null;\nexpect(value).toBeDefined();\n```\n\n----------------------------------------\n\nTITLE: Custom Stylesheet for Screenshots\nDESCRIPTION: Defines the `style` option for applying custom CSS while capturing screenshots, useful for hiding dynamic elements or modifying appearance.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\n- `style` <string>\n```\n\n----------------------------------------\n\nTITLE: Tagging Tests in Playwright\nDESCRIPTION: Shows different ways to tag tests for filtering and organization, including single tags and multiple tags.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('test login page', {\n  tag: '@fast',\n}, async ({ page }) => {\n  // ...\n});\n\ntest('test full report @slow', async ({ page }) => {\n  // ...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('group', {\n  tag: '@report',\n}, () => {\n  test('test report header', async ({ page }) => {\n    // ...\n  });\n\n  test('test full report', {\n    tag: ['@slow', '@vrt'],\n  }, async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript in Electron Main Process\nDESCRIPTION: Defines the pageFunction parameter for Electron evaluation functions in JavaScript. This allows executing JavaScript functions in the main Electron process.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_47\n\nLANGUAGE: js\nCODE:\n```\n- `pageFunction` <[function]|[Electron]>\n\nFunction to be evaluated in the main Electron process.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Directory and .gitignore Entry with Batch\nDESCRIPTION: Creates a directory named 'playwright\\.auth' with batch commands and adds the path to '.gitignore' to avoid version control. This is crucial for securely storing authentication states.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nmd playwright\\.auth\necho. >> .gitignore\necho \"playwright/.auth\" >> .gitignore\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Test Block Options\nDESCRIPTION: Shows how to set configuration options for a group of tests within a describe block. Demonstrates setting French locale for all tests in a test block.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-use-options-js.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('french language block', () => {\n\n  test.use({ locale: 'fr-FR' });\n\n  test('example', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating PDF with Screen Media in JavaScript\nDESCRIPTION: Demonstrates how to generate a PDF with 'screen' media type using Playwright in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// Generates a PDF with 'screen' media type.\nawait page.emulateMedia({ media: 'screen' });\nawait page.pdf({ path: 'page.pdf' });\n```\n\n----------------------------------------\n\nTITLE: Setting Video Size with Browser Context (Java)\nDESCRIPTION: This snippet demonstrates how to create a new browser context with video recording enabled in Java, specifying both the directory and the video size.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/videos.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setRecordVideoDir(Paths.get(\"videos/\"))\n  .setRecordVideoSize(640, 480));\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelector in Java\nDESCRIPTION: Examples of using the evalOnSelector method in Java to evaluate expressions on elements matching a selector. This method finds an element and passes it to the provided JavaScript expression, returning the expression's result.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nString searchValue = (String) page.evalOnSelector(\"#search\", \"el => el.value\");\nString preloadHref = (String) page.evalOnSelector(\"link[rel=preload]\", \"el => el.href\");\nString html = (String) page.evalOnSelector(\".main-container\", \"(e, suffix) => e.outerHTML + suffix\", \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Using toBeNaN Method for NaN Checking\nDESCRIPTION: Demonstrates how to use the 'toBeNaN' method to check if a value is NaN (Not a Number).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = NaN;\nexpect(value).toBeNaN();\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for Browser Context\nDESCRIPTION: Defines the timezoneId option for browser contexts. This changes the timezone of the context using ICU timezone identifiers, defaulting to the system timezone.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_56\n\nLANGUAGE: js\nCODE:\n```\n- `timezoneId` <[string]>\n\nChanges the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)\nfor a list of supported timezone IDs. Defaults to the system timezone.\n```\n\n----------------------------------------\n\nTITLE: Emulating Dark Color Scheme with Playwright Codegen for Java\nDESCRIPTION: Command to generate code while emulating dark color scheme for the playwright.dev website using Java. This Maven execution allows testing appearance and functionality in dark mode.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"codegen --color-scheme=dark playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event in C#\nDESCRIPTION: This snippet shows how to dispatch a click event on a button element using the Page.DispatchEventAsync method in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.DispatchEventAsync(\"button#submit\", \"click\");\n```\n\n----------------------------------------\n\nTITLE: Limiting Test Failures in Playwright Config (TypeScript)\nDESCRIPTION: Configures Playwright Test to limit the number of test failures before stopping the test run, particularly useful in CI environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-parallel-js.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Limit the number of failures on CI to save resources\n  maxFailures: process.env.CI ? 10 : undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Limited-Use Locator Handler with Times Option in Java\nDESCRIPTION: Java implementation of a locator handler that automatically removes itself after one use by setting the times option to 1. This handler clicks on a close button when it appears.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_92\n\nLANGUAGE: java\nCODE:\n```\npage.addLocatorHandler(page.getByLabel(\"Close\"), locator -> {\n  locator.click();\n}, new Page.AddLocatorHandlerOptions().setTimes(1));\n```\n\n----------------------------------------\n\nTITLE: Accessing WorkerInfo Configuration in JavaScript\nDESCRIPTION: Retrieves the processed configuration from the configuration file. This property provides access to the full configuration object.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-workerinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nworkerInfo.config\n```\n\n----------------------------------------\n\nTITLE: HTML Password Input Example\nDESCRIPTION: Example showing password input with label for demonstrating label-based location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<label>Password <input type=\"password\" /></label>\n```\n\n----------------------------------------\n\nTITLE: Setting Extra HTTP Headers for Browser Context\nDESCRIPTION: Defines the extraHTTPHeaders option for browser contexts. This allows specifying additional HTTP headers to be sent with every request.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_60\n\nLANGUAGE: js\nCODE:\n```\n- `extraHTTPHeaders` <[Object]<[string], [string]>>\n\nAn object containing additional HTTP headers to be sent with every request. Defaults to none.\n```\n\n----------------------------------------\n\nTITLE: WebView2 Browser Process Configuration and Connection\nDESCRIPTION: Sets up WebView2 browser process with debugging port, manages process output, and establishes connection through CDP. Includes cleanup logic to properly terminate the browser instance.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n{\n    [\"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS\"] = $\"--remote-debugging-port={cdpPort}\",\n    [\"WEBVIEW2_USER_DATA_FOLDER\"] = _userDataDir,\n},\n    RedirectStandardOutput = true,\n});\nwhile (!_webView2Process!.HasExited)\n{\n    var output = await _webView2Process!.StandardOutput.ReadLineAsync();\n    if (_webView2Process!.HasExited)\n    {\n        throw new Exception(\"WebView2 process exited unexpectedly\");\n    }\n    if (output != null && output.Contains(\"WebView2 initialized\"))\n    {\n        break;\n    }\n}\nvar cdpAddress = $\"http://127.0.0.1:{cdpPort}\";\nBrowser = await Playwright.Chromium.ConnectOverCDPAsync(cdpAddress);\nContext = Browser.Contexts[0];\nPage = Context.Pages[0];\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Browser Binaries with Playwright CLI\nDESCRIPTION: Demonstrates CLI commands for uninstalling Playwright browser binaries, either for the current installation or all installations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ npx playwright uninstall # remove browsers installed by this installation\n$ npx playwright uninstall --all # remove all ever-install Playwright browsers\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose API Logs in Java\nDESCRIPTION: Commands to enable verbose API logging in Playwright Java tests using the DEBUG environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pw:api mvn test\n```\n\nLANGUAGE: batch\nCODE:\n```\nset DEBUG=pw:api\nmvn test\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:DEBUG=\"pw:api\"\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Using XPath Union in Playwright\nDESCRIPTION: XPath union allows selecting elements that match any of multiple XPath expressions using the pipe (|) operator. This example demonstrates waiting for either a spinner or confirmation dialog.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/other-locators.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Waits for either confirmation dialog or load spinner.\nawait page.locator(\n    `//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']`\n).waitFor();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Waits for either confirmation dialog or load spinner.\npage.locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").waitFor();\n```\n\nLANGUAGE: python\nCODE:\n```\n# Waits for either confirmation dialog or load spinner.\nawait page.locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").wait_for()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Waits for either confirmation dialog or load spinner.\npage.locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").wait_for()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Waits for either confirmation dialog or load spinner.\nawait page.Locator(\"//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']\").WaitForAsync();\n```\n\n----------------------------------------\n\nTITLE: C# Init Script Configuration\nDESCRIPTION: Example of adding an initialization script in C# using Playwright\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/evaluating.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// In your test, assuming the \"preload.js\" file is in the \"mocks\" directory.\nawait Page.AddInitScriptAsync(scriptPath: \"mocks/preload.js\");\n```\n\n----------------------------------------\n\nTITLE: Setting User Agent for Browser Context\nDESCRIPTION: Defines the userAgent option for browser contexts. This allows specifying a custom user agent string to be used in the context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_51\n\nLANGUAGE: js\nCODE:\n```\n- `userAgent` <[string]>\n\nSpecific user agent to use in this context.\n```\n\n----------------------------------------\n\nTITLE: Emulating Offline Network in Browser Context\nDESCRIPTION: Defines the offline option for browser contexts. This allows emulating a disconnected network state, defaulting to false.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_61\n\nLANGUAGE: js\nCODE:\n```\n- `offline` <[boolean]>\n\nWhether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation.md#offline).\n```\n\n----------------------------------------\n\nTITLE: Network HAR Recording via Command Line\nDESCRIPTION: Shows how to record network traffic to a HAR file using Playwright CLI command.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n```\n\n----------------------------------------\n\nTITLE: Aria Snapshots with Children and URL Properties in Java\nDESCRIPTION: Demonstrates the use of new Aria Snapshot properties for strict matching and URL handling in assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-java.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nassertThat(locator).toMatchAriaSnapshot(\"\"\"\n    - list\n      - /children: equal\n      - listitem: Feature A\n      - listitem:\n        - link \"Feature B\":\n          - /url: \"https://playwright.dev\"\n  \"\"\");\n```\n\n----------------------------------------\n\nTITLE: Marking Tests as Expected to Fail in JavaScript\nDESCRIPTION: Shows how to mark a test as 'should fail' using test.fail(). This is useful for documenting known issues or acknowledging broken functionality until it's fixed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.fail('not yet ready', async ({ page }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Downloaded Files to Test Steps\nDESCRIPTION: Demonstrates how to attach files from custom download operations to test steps.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-teststepinfo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport { download } from './my-custom-helpers';\n\ntest('basic test', async ({}) => {\n  await test.step('check download behavior', async step => {\n    const tmpPath = await download('a');\n    await step.attach('downloaded', { path: tmpPath });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Managing WebView2 Process in Java\nDESCRIPTION: This Java class handles the launching and management of a WebView2 process for testing. It sets up a unique user data directory and CDP port for each instance, ensuring isolated test environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/webview2.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.ServerSocket;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class WebView2Process {\n  public int cdpPort;\n  private Path _dataDir;\n  private Process _process;\n  private Path _executablePath = Path.of(\"../webview2-app/bin/Debug/net8.0-windows/webview2.exe\");\n\n  public WebView2Process() throws IOException {\n    cdpPort = nextFreePort();\n    _dataDir = Files.createTempDirectory(\"pw-java-webview2-tests-\");\n\n    if (!Files.exists(_executablePath)) {\n      throw new RuntimeException(\"Executable not found: \" + _executablePath);\n    }\n    ProcessBuilder pb = new ProcessBuilder().command(_executablePath.toAbsolutePath().toString());\n    Map<String, String> envMap = pb.environment();\n    envMap.put(\"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS\", \"--remote-debugging-port=\" + cdpPort);\n    envMap.put(\"WEBVIEW2_USER_DATA_FOLDER\", _dataDir.toString());\n    _process = pb.start();\n    // wait until \"WebView2 initialized\" got printed\n    BufferedReader reader = new BufferedReader(new InputStreamReader(_process.getInputStream()));\n    while (true) {\n      String line = reader.readLine();\n      if (line == null) {\n        throw new RuntimeException(\"WebView2 process exited\");\n      }\n      if (line.contains(\"WebView2 initialized\")) {\n        break;\n      }\n    }\n  }\n\n  private static final AtomicInteger nextUnusedPort = new AtomicInteger(9000);\n\n  private static boolean available(int port) {\n    try (ServerSocket ignored = new ServerSocket(port)) {\n      return true;\n    } catch (IOException ignored) {\n      return false;\n    }\n  }\n\n  static int nextFreePort() {\n    for (int i = 0; i < 100; i++) {\n      int port = nextUnusedPort.getAndIncrement();\n      if (available(port)) {\n        return port;\n      }\n    }\n    throw new RuntimeException(\"Cannot find free port: \" + nextUnusedPort.get());\n  }\n\n  public void dispose() {\n    _process.destroy();\n    try {\n      _process.waitFor();\n    } catch (InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Flakiness Dashboard\nDESCRIPTION: Commands to navigate to the flakiness dashboard directory and install NPM dependencies, which will be published as-is.\nSOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd utils/flakiness-dashboard/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for WPT Source\nDESCRIPTION: Git commit hash reference indicating the specific version of web-platform-tests from which files were copied.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/wpt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n5adfe4e8cd223779aa2942915e8a515c079ed0ef\n```\n\n----------------------------------------\n\nTITLE: Conditional Group Skipping in Playwright\nDESCRIPTION: Demonstrates how to conditionally skip groups of tests based on browser type.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-annotations-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe('chromium only', () => {\n  test.skip(({ browserName }) => browserName !== 'chromium', 'Chromium only!');\n\n  test.beforeAll(async () => {\n    // This hook is only run in Chromium.\n  });\n\n  test('test 1', async ({ page }) => {\n    // This test is only run in Chromium.\n  });\n\n  test('test 2', async ({ page }) => {\n    // This test is only run in Chromium.\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using toBeFalsy Method in GenericAssertions\nDESCRIPTION: Demonstrates the use of 'toBeFalsy' method to check if a value is falsy in a boolean context. This is useful when you don't care about the specific falsy value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = null;\nexpect(value).toBeFalsy();\n```\n\n----------------------------------------\n\nTITLE: Pause Clock At Specific Time\nDESCRIPTION: Demonstrates pausing the clock at a specific date and time, including initialization best practices\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-clock.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.clock.install({ time: new Date('2024-12-10T08:00:00') });\nawait page.goto('http://localhost:3333');\nawait page.clock.pauseAt(new Date('2024-12-10T10:00:00'));\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.clock.install(time=datetime.datetime(2024, 12, 10, 8, 0, 0))\nawait page.goto(\"http://localhost:3333\")\nawait page.clock.pause_at(datetime.datetime(2024, 12, 10, 10, 0, 0))\n```\n\nLANGUAGE: java\nCODE:\n```\nSimpleDateFormat format = new SimpleDateFormat(\"yyy-MM-dd'T'HH:mm:ss\");\npage.clock().install(new Clock.InstallOptions().setTime(format.parse(\"2024-12-10T08:00:00\")));\npage.navigate(\"http://localhost:3333\");\npage.clock().pauseAt(format.parse(\"2024-12-10T10:00:00\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reporter in JavaScript\nDESCRIPTION: Example of implementing a custom test reporter class in JavaScript that logs test execution events. The reporter includes handlers for test begin/end events and overall test run lifecycle.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-reporter.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/** @implements {import('@playwright/test/reporter').Reporter} */\nclass MyReporter {\n  constructor(options) {\n    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);\n  }\n\n  onBegin(config, suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test, result) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\n\nmodule.exports = MyReporter;\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker in HTML Page\nDESCRIPTION: A simple HTML page that registers the complex Service Worker using the navigator.serviceWorker API. The registration promise is stored in the window object for later reference.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- filename: index.html -->\n<script>\n  window.registrationPromise = navigator.serviceWorker.register('/complex-service-worker.js');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Background Page Events - Multiple Languages\nDESCRIPTION: Shows how to listen for and handle background page creation events in a browser context, specific to Chromium browser's persistent context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst backgroundPage = await context.waitForEvent('backgroundpage');\n```\n\nLANGUAGE: java\nCODE:\n```\ncontext.onBackgroundPage(backgroundPage -> {\n  System.out.println(backgroundPage.url());\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nbackground_page = context.wait_for_event(\"backgroundpage\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.BackgroundPage += (_, backgroundPage) =>\n{\n    Console.WriteLine(backgroundPage.Url);\n};\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests from Multiple Directories\nDESCRIPTION: Execute tests from multiple directories by passing the directory names to the playwright test command.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-js.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test tests/todo-page/ tests/landing-page/\n```\n\n----------------------------------------\n\nTITLE: Recording Minimal HAR in Playwright\nDESCRIPTION: Example of recording a minimal HAR file containing only essential information for replaying, useful for manual editing of HAR files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browser.newContext({\n  recordHar: {\n    path: 'github.har',\n    mode: 'minimal',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Options via CLI\nDESCRIPTION: Command line configuration for customizing browser launch options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Headless=false Playwright.LaunchOptions.Channel=msedge\n```\n\n----------------------------------------\n\nTITLE: Hover and Click Using ElementHandle in Python Sync\nDESCRIPTION: Explains how to hover and click a specific DOM element using ElementHandle in sync Python. Uses a text selector to identify the element for user interaction.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nhandle = page.query_selector(\"text=Submit\")\nhandle.hover()\nhandle.click()\n```\n\n----------------------------------------\n\nTITLE: Bypassing Content Security Policy in Playwright Tests\nDESCRIPTION: Example showing how to bypass website's Content Security Policy (CSP) by enabling the bypassCSP option, which can be useful for testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    bypassCSP: true,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Synchronous Usage\nDESCRIPTION: Example showing basic synchronous usage of Playwright to launch Chromium browser and navigate to a page\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto(\"https://playwright.dev\")\n    print(page.title())\n    browser.close()\n```\n\n----------------------------------------\n\nTITLE: Test Using Environment Variables\nDESCRIPTION: Example test that accesses environment variables set in global setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-global-setup-teardown-js.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // environment variables which are set in globalSetup are only available inside test().\n  const { FOO, BAR } = process.env;\n\n  // FOO and BAR properties are populated.\n  expect(FOO).toEqual('some data');\n\n  const complexData = JSON.parse(BAR);\n  expect(BAR).toEqual({ some: 'data' });\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event in Java\nDESCRIPTION: This snippet shows how to dispatch a click event on a button element using the Page.dispatchEvent method in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_29\n\nLANGUAGE: java\nCODE:\n```\npage.dispatchEvent(\"button#submit\", \"click\");\n```\n\n----------------------------------------\n\nTITLE: Using toBeInstanceOf Method for Type Checking\nDESCRIPTION: Shows how to use the 'toBeInstanceOf' method to check if a value is an instance of a specific class or constructor function.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(page).toBeInstanceOf(Page);\n\nclass Example {}\nexpect(new Example()).toBeInstanceOf(Example);\n```\n\n----------------------------------------\n\nTITLE: Customizing Test ID Attribute in Playwright Test\nDESCRIPTION: Sets a custom attribute for test IDs using the TestOptions.testIdAttribute property in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'pw-test-id',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Browser Download in Bash\nDESCRIPTION: Prevents browser downloads during package installation by setting the PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD environment variable in Bash\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 npm install\n```\n\n----------------------------------------\n\nTITLE: Dumping Frame Tree using Playwright in C#\nDESCRIPTION: This C# example demonstrates initializing Playwright asynchronously, launching Firefox, navigating to a URL, and then dumping the frame tree structure. It uses a recursive static method `DumpFrameTree` which takes an `IFrame` and an indent string, printing the frame's URL and iterating through `frame.ChildFrames` to process child frames.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-frame.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System;\nusing System.Threading.Tasks;\n\nclass FrameExamples\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        await using var browser = await playwright.Firefox.LaunchAsync();\n        var page = await browser.NewPageAsync();\n\n        await page.GotoAsync(\"https://www.bing.com\");\n        DumpFrameTree(page.MainFrame, string.Empty);\n    }\n\n    private static void DumpFrameTree(IFrame frame, string indent)\n    {\n        Console.WriteLine($\"{indent}{frame.Url}\");\n        foreach (var child in frame.ChildFrames)\n            DumpFrameTree(child, indent + \" \");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Touch Support in Playwright Tests\nDESCRIPTION: Example showing how to enable touch support for tests to simulate touch devices, which affects the presence of the 'ontouchstart' property and touch-related events.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    hasTouch: true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Boxed Step Decorators in Playwright\nDESCRIPTION: Shows how to create a TypeScript decorator for boxed steps in Playwright. This combines the step decorator approach with the boxing feature for improved error reporting.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nfunction boxedStep(target: Function, context: ClassMethodDecoratorContext) {\n  return function replacementMethod(...args: any) {\n    const name = this.constructor.name + '.' + (context.name as string);\n    return test.step(name, async () => {\n      return await target.call(this, ...args);\n    }, { box: true });  // Note the \"box\" option here.\n  };\n}\n\nclass LoginPage {\n  constructor(readonly page: Page) {}\n\n  @boxedStep\n  async login() {\n    // ....\n  }\n}\n\ntest('example', async ({ page }) => {\n  const loginPage = new LoginPage(page);\n  await loginPage.login();  // <-- Error will be reported on this line.\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Specific Browser Types\nDESCRIPTION: Example of using the only_browser marker to run tests exclusively on a specific browser.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.mark.only_browser(\"chromium\")\ndef test_visit_example(page):\n    page.goto(\"https://example.com\")\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Dot Reporter in Playwright Configuration\nDESCRIPTION: Demonstrates how to configure the 'dot' reporter in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'dot',\n});\n```\n\n----------------------------------------\n\nTITLE: Appending Multiple Files to FormData in C#\nDESCRIPTION: This snippet shows how to use the new FormData.append method to add multiple files with the same field name for multipart form data in API requests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar formData = Context.APIRequest.CreateFormData();\nformData.Append(\"file\", new FilePayload()\n{\n    Name = \"f1.js\",\n    MimeType = \"text/javascript\",\n    Buffer = System.Text.Encoding.UTF8.GetBytes(\"var x = 2024;\")\n});\nformData.Append(\"file\", new FilePayload()\n{\n    Name = \"f2.txt\",\n    MimeType = \"text/plain\",\n    Buffer = System.Text.Encoding.UTF8.GetBytes(\"hello\")\n});\nvar response = await Context.APIRequest.PostAsync(\"https://example.com/uploadFiles\", new() { Multipart = formData });\n```\n\n----------------------------------------\n\nTITLE: Using Playwright with unittest.TestCase\nDESCRIPTION: Example of integrating Playwright with Python's unittest framework by using pytest fixtures in a TestCase class.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-python.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport unittest\n\nfrom playwright.sync_api import Page\n\n\nclass MyTest(unittest.TestCase):\n    @pytest.fixture(autouse=True)\n    def setup(self, page: Page):\n        self.page = page\n\n    def test_foobar(self):\n        self.page.goto(\"https://microsoft.com\")\n        self.page.locator(\"#foobar\").click()\n        assert self.page.evaluate(\"1 + 1\") == 2\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Using Init Command in Shell\nDESCRIPTION: Shows how to initialize a new Playwright project using the init command, which creates a configuration file, optional examples, GitHub Actions workflow, and a first test file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Run from your project's root directory\nnpm init playwright@latest\n# Or create a new project\nnpm init playwright@latest new-project\n```\n\n----------------------------------------\n\nTITLE: Global Timeout Configuration in C# NUnit\nDESCRIPTION: Demonstrates setting global timeout for Playwright assertions in C# using NUnit test framework.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-csharp-java-python.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class Tests : PageTest\n{\n    [OneTimeSetUp]\n    public void GlobalSetup()\n    {\n        SetDefaultExpectTimeout(10_000);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Name in Playwright Tests\nDESCRIPTION: Example showing how to specify which browser (chromium, firefox, or webkit) should be used to run tests, with firefox configured in this example.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    browserName: 'firefox',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Print Dialogs with Playwright (JavaScript)\nDESCRIPTION: Demonstrates how to detect if a print dialog was triggered by `window.print()`. It injects JavaScript to replace `window.print` with a function that resolves a Promise, then waits for that Promise to be resolved after clicking the print trigger element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nawait page.goto('<url>');\n\nawait page.evaluate('(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()');\nawait page.getByText('Print it!').click();\n\nawait page.waitForFunction('window.waitForPrintDialog');\n```\n```\n\n----------------------------------------\n\nTITLE: Emulating Color Scheme in Playwright\nDESCRIPTION: Demonstrates how to use the emulateMedia method to change the color scheme preference. It shows examples of setting the color scheme to 'dark' and checking the results using matchMedia.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.emulateMedia({ colorScheme: 'dark' });\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n// → false\n```\n\nLANGUAGE: java\nCODE:\n```\npage.emulateMedia(new Page.EmulateMediaOptions().setColorScheme(ColorScheme.DARK));\npage.evaluate(\"() => matchMedia('(prefers-color-scheme: dark)').matches\");\n// → true\npage.evaluate(\"() => matchMedia('(prefers-color-scheme: light)').matches\");\n// → false\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.emulate_media(color_scheme=\"dark\")\nawait page.evaluate(\"matchMedia('(prefers-color-scheme: dark)').matches\")\n# → True\nawait page.evaluate(\"matchMedia('(prefers-color-scheme: light)').matches\")\n# → False\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.EmulateMediaAsync(new() { ColorScheme = ColorScheme.Dark });\nawait page.EvaluateAsync(\"matchMedia('(prefers-color-scheme: dark)').matches\");\n// → true\nawait page.EvaluateAsync(\"matchMedia('(prefers-color-scheme: light)').matches\");\n// → false\n```\n\n----------------------------------------\n\nTITLE: Playwright Merge Config for Cross-OS Reports\nDESCRIPTION: Example of a custom merge configuration file for merging reports from different operating systems, specifying the test directory and HTML reporter options.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  testDir: 'e2e',\n  reporter: [['html', { open: 'never' }]],\n};\n```\n\n----------------------------------------\n\nTITLE: Capturing Git Information in Playwright Test Configuration\nDESCRIPTION: Configuration to capture git commit information and diff data in test metadata, useful for reporting and debugging.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  captureGitInfo: { commit: true, diff: true }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Different .NET Version in Docker\nDESCRIPTION: Command to install a different version of .NET SDK in the Playwright Docker container using the .NET install script.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --install-dir /usr/share/dotnet --channel 9.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright to Use a Specific tsconfig File\nDESCRIPTION: This TypeScript snippet shows how to configure Playwright to use a specific tsconfig file in the playwright.config.ts file. This configuration will be used for loading test files and reporters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  tsconfig: './tsconfig.test.json',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring List Reporter in Playwright Configuration\nDESCRIPTION: Demonstrates how to configure the 'list' reporter in the Playwright configuration file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'list',\n});\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for Playwright in Groovy\nDESCRIPTION: Gradle build configuration script in Groovy for a Playwright Java project. It sets up dependencies, defines the main class, and creates a custom task for running Playwright CLI commands.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-java.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  application\n  id 'java'\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation 'com.microsoft.playwright:playwright:%%VERSION%%'\n}\n\napplication {\n  mainClass = 'org.example.App'\n}\n\n// Usage: ./gradlew playwright --args=\"help\"\ntask playwright(type: JavaExec) {\n  classpath sourceSets.test.runtimeClasspath\n  mainClass = 'com.microsoft.playwright.CLI'\n}\n\ntest {\n  useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Headers to Selenium Grid\nDESCRIPTION: Commands to run Playwright tests with additional headers for the Selenium Grid using the SELENIUM_REMOTE_HEADERS environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" npx playwright test\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" pytest --browser chromium\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" mvn test\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'Basic b64enc'}\" dotnet test\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Retry Options in Playwright\nDESCRIPTION: Defines the maxRetries option for network requests, which specifies the maximum number of times network errors (specifically ECONNRESET) should be retried. Defaults to 0 (no retries).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_41\n\nLANGUAGE: js\nCODE:\n```\n- `maxRetries` <[int]>\n\nMaximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with Browser-Specific Download Hosts (JavaScript)\nDESCRIPTION: Commands to install Playwright browsers using different download hosts for specific browsers. These use browser-specific environment variables that take precedence over the general PLAYWRIGHT_DOWNLOAD_HOST variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nnpx playwright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Environment Variables in Playwright (CSharp/Java)\nDESCRIPTION: Defines the `env` browser launch option for Playwright in C# and Java. It accepts an object mapping string keys to string values, specifying environment variables to be made visible to the launched browser process. Defaults to the environment variables of the parent process.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n- `env` <[Object]<[string], [string]>>\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Browser via CDP Using Playwright JavaScript\nDESCRIPTION: Shows how to connect to an existing Chromium-based browser via Chrome DevTools Protocol (CDP) using Playwright JS API. Requires Playwright and a running browser exposing its debug endpoint (e.g., with '--remote-debugging-port'). Input parameter is the CDP endpoint URL; output is access to the default context and open pages. Limitation: only Chromium-based browsers are supported and fidelity is lower than protocol connection.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\\nconst defaultContext = browser.contexts()[0];\\nconst page = defaultContext.pages()[0];\n```\n\n----------------------------------------\n\nTITLE: Using CDPSession with Chrome DevTools Protocol in Java\nDESCRIPTION: Java implementation for CDPSession that shows how to create a session, enable runtime features, listen for animation creation events, retrieve and modify animation playback rates using the Chrome DevTools Protocol.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCDPSession client = page.context().newCDPSession(page);\nclient.send(\"Runtime.enable\");\n\nclient.on(\"Animation.animationCreated\", (event) -> System.out.println(\"Animation created!\"));\n\nJsonObject response = client.send(\"Animation.getPlaybackRate\");\ndouble playbackRate = response.get(\"playbackRate\").getAsDouble();\nSystem.out.println(\"playback rate is \" + playbackRate);\n\nJsonObject params = new JsonObject();\nparams.addProperty(\"playbackRate\", playbackRate / 2);\nclient.send(\"Animation.setPlaybackRate\", params);\n```\n\n----------------------------------------\n\nTITLE: Installing browsers via .NET API\nDESCRIPTION: This snippet illustrates how to install browsers using the .NET API, allowing the integration of browser installation into .NET applications.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar exitCode = Microsoft.Playwright.Program.Main(new[] {\\\"install\\\"});\nif (exitCode != 0)\n{\n    throw new Exception($\\\"Playwright exited with code {exitCode}\\\");\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests with GrepInvert Pattern in Playwright Test\nDESCRIPTION: Configuration to exclude tests with titles matching a specific pattern, useful for skipping certain categories of tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  grepInvert: /manual/,\n});\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc Type Annotations\nDESCRIPTION: Demonstrates how to use JSDoc annotations to specify Playwright types in JavaScript\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('playwright').Page} */\nlet page;\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Components in Playwright Tests\nDESCRIPTION: Illustrates how to update props, slots, and events of a mounted Vue component in Playwright component tests. It shows two approaches: using the options API and the JSX-style syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('update', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.update({\n    props: { msg: 'greetings' },\n    on: { click() {} },\n    slots: { default: 'Child' }\n  });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Or alternatively, using the `jsx` style\nimport { test } from '@playwright/experimental-ct-vue';\n\ntest('update', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.update(\n      <Component msg=\"greetings\" v-on:click={() => {}}>Child</Component>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Pushing Files to AndroidDevice Using Playwright JS\nDESCRIPTION: AndroidDevice.push copies files onto the device by accepting a local file path or Buffer and remote path. Optional mode (default 644) sets file permissions. Used for test assets or data injection. Inputs: file data and target path. No return values.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// Push a file onto the device.\nawait androidDevice.push({\n  file: Buffer.from('testdata'),\n  path: '/data/local/tmp/testfile.txt',\n  mode: 600 // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Passing a JSHandle as an Argument to EvaluateAsync in C#\nDESCRIPTION: Illustrates creating a JavaScript array in the page using `page.EvaluateHandleAsync`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.EvaluateAsync` to interact with the array (get length, add elements) and finally disposing of the handle using `DisposeAsync()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Create new array in page.\nvar myArrayHandle = await page.EvaluateHandleAsync(@\"() => {\n    window.myArray = [1];\n    return myArray;\n}\");\n\n// Get the length of the array.\nvar length = await page.EvaluateAsync<int>(\"a => a.length\", myArrayHandle);\n\n// Add one more element to the array using the handle\nawait page.EvaluateAsync(\"arg => arg.myArray.add(arg.newElement)\",\n    new { myArray = myArrayHandle, newElement = 2 });\n\n// Release the object when it is no longer needed.\nawait myArrayHandle.DisposeAsync();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter with External Attachments Storage\nDESCRIPTION: Demonstrates how to configure the HTML reporter when attachments are uploaded to an external storage location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { attachmentsBaseURL: 'https://external-storage.com/' }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Platform Drivers in .NET Project Files\nDESCRIPTION: XML configuration options for specifying which platform drivers to include when bundling Playwright in a .NET project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <PlaywrightPlatform>all</PlaywrightPlatform>\n</PropertyGroup>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <PlaywrightPlatform>osx;linux</PlaywrightPlatform>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Emulating Viewport Size with Playwright Codegen - Python - Bash\nDESCRIPTION: In Python setups, this command invokes Playwright's codegen tool with a custom viewport size using the '--viewport-size' option. Enter the target website as the next argument. Requires Playwright Python to be installed and accessible via command line. The browser launches at the specified resolution, providing a controlled environment to record and test UI behavior.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen --viewport-size=\\\"800,600\\\" playwright.dev\n```\n\n----------------------------------------\n\nTITLE: Generating Test Assertions in C#\nDESCRIPTION: Example of a generated test with assertions using new tools in the Playwright Test Generator.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-csharp.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nawait Page.GotoAsync(\"https://playwright.dev/\");\nawait Page.GetByRole(AriaRole.Link, new() { Name = \"Get started\" }).ClickAsync();\nawait Expect(Page.GetByLabel(\"Breadcrumbs\").GetByRole(AriaRole.List)).ToContainTextAsync(\"Installation\");\nawait Expect(Page.GetByLabel(\"Search\")).ToBeVisibleAsync();\nawait Page.GetByLabel(\"Search\").ClickAsync();\nawait Page.GetByPlaceholder(\"Search docs\").FillAsync(\"locator\");\nawait Expect(Page.GetByPlaceholder(\"Search docs\")).ToHaveValueAsync(\"locator\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - TestStep Properties\nDESCRIPTION: Type definitions for TestStep class properties including category, duration, location, error handling, timing, and test hierarchy information.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-teststep.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TestStep {\n  category: string;  // Step category (hook, expect, pw:api, test.step)\n  duration: number;  // Running time in milliseconds\n  location?: Location;  // Source location of step definition\n  error?: TestError;  // Error thrown during execution\n  parent?: TestStep;  // Parent step reference\n  startTime: Date;  // Start time of test step\n  steps: TestStep[];  // Nested steps\n  annotations: Array<{\n    type: string,\n    description?: string\n  }>;  // Test step annotations\n  attachments: Array<{\n    name: string,\n    contentType: string,\n    path?: string,\n    body?: Buffer\n  }>;  // Attached files/buffers\n  title: string;  // User-friendly step title\n  titlePath(): string[];  // Path of step titles from root\n}\n```\n\n----------------------------------------\n\nTITLE: Pressing Keys on Widgets with AndroidDevice in Playwright JS\nDESCRIPTION: AndroidDevice.press simulates a key press (AndroidKey) within the context of a selector. Optional timeout is available. Useful for filling forms or triggering key events on UI components. Inputs: selector and key. No returned value.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// Press a key in the context of a selector.\nawait androidDevice.press({\n  selector: mySelector,\n  key: 'Enter',\n  timeout: 1000 // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Playwright in CMake\nDESCRIPTION: Sets up the include directories for the Playwright build, including the main source directory, forwarding headers directory, and the Playwright-specific directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(Playwright_INCLUDE_DIRECTORIES\n    ${CMAKE_SOURCE_DIR}/Source\n    ${FORWARDING_HEADERS_DIR}\n    ${PLAYWRIGHT_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Working with JSHandle Arguments in Playwright\nDESCRIPTION: Examples showing how to pass JSHandle instances as arguments to Page.evaluateHandle and process the results.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nconst aHandle = await page.evaluateHandle(() => document.body);\nconst resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\nconsole.log(await resultHandle.jsonValue());\nawait resultHandle.dispose();\n```\n\nLANGUAGE: java\nCODE:\n```\nJSHandle aHandle = page.evaluateHandle(\"() => document.body\");\nJSHandle resultHandle = page.evaluateHandle(\"([body, suffix]) => body.innerHTML + suffix\", Arrays.asList(aHandle, \"hello\"));\nSystem.out.println(resultHandle.jsonValue());\nresultHandle.dispose();\n```\n\nLANGUAGE: python\nCODE:\n```\na_handle = await page.evaluate_handle(\"document.body\")\nresult_handle = await page.evaluate_handle(\"body => body.innerHTML\", a_handle)\nprint(await result_handle.json_value())\nawait result_handle.dispose()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = await page.EvaluateHandleAsync(\"() => document.body\");\nvar resultHandle = await page.EvaluateHandleAsync(\"([body, suffix]) => body.innerHTML + suffix\", new object[] { handle, \"hello\" });\nConsole.WriteLine(await resultHandle.JsonValueAsync<string>());\nawait resultHandle.DisposeAsync();\n```\n\n----------------------------------------\n\nTITLE: Listening for Device Connection Close Event with Playwright JS\nDESCRIPTION: The AndroidDevice.close event signals when the device connection is closed, allowing for teardown or cleanup logic. No explicit parameters other than the AndroidDevice instance itself are required. The event is emitted by Playwright during the device lifecycle. Input is a device instance; there is no output except the notification.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Emitted when the device connection gets closed.\nandroidDevice.on('close', () => {\n  // Handle device disconnect logic\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page.evalOnSelector in JavaScript\nDESCRIPTION: Examples of using the evalOnSelector (alias $eval) method in JavaScript to evaluate expressions on elements matching a selector. This method finds an element and passes it to the provided function expression, returning the expression's result.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchValue = await page.$eval('#search', el => el.value);\nconst preloadHref = await page.$eval('link[rel=preload]', el => el.href);\nconst html = await page.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');\n// In TypeScript, this example requires an explicit type annotation (HTMLLinkElement) on el:\nconst preloadHrefTS = await page.$eval('link[rel=preload]', (el: HTMLLinkElement) => el.href);\n```\n\n----------------------------------------\n\nTITLE: Hover and Click Using ElementHandle in Python Async\nDESCRIPTION: Depicts the use of async Python to hover and click a text element using ElementHandle in Playwright. The text 'Submit' is queried asynchronously and manipulated.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nhandle = await page.query_selector(\"text=Submit\")\nawait handle.hover()\nawait handle.click()\n```\n\n----------------------------------------\n\nTITLE: Declaring Parallel-Only Test Group in JavaScript\nDESCRIPTION: Demonstrates how to declare a focused group of tests that run in parallel using test.describe.parallel.only(). This method is used when you want to run only this specific group of tests in parallel.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe.parallel.only('group', () => {\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Custom Browser Executable\nDESCRIPTION: Example of how to run Playwright tests using a custom browser executable by specifying the path using environment variables.\nSOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCRPATH=<path-to-executable> npm run ctest\n```\n\n----------------------------------------\n\nTITLE: Tracing a Square with Mouse Movements in Java\nDESCRIPTION: This snippet shows how to use the 'page.mouse()' object in Java to trace a 100x100 square by moving the mouse and performing click actions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-mouse.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Using 'page.mouse' to trace a 100x100 square.\npage.mouse().move(0, 0);\npage.mouse().down();\npage.mouse().move(0, 100);\npage.mouse().move(100, 100);\npage.mouse().move(100, 0);\npage.mouse().move(0, 0);\npage.mouse().up();\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Headless Shell - C#\nDESCRIPTION: PowerShell command to install Playwright with headless shell dependencies for C#\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 install --with-deps --only-shell\n```\n\n----------------------------------------\n\nTITLE: Setting Forced Colors Emulation for JavaScript Browser Context\nDESCRIPTION: Defines the forcedColors option for browser contexts in JavaScript and Java. This emulates the forced-colors media feature with values 'active' or 'none'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_67\n\nLANGUAGE: js\nCODE:\n```\n- `forcedColors` <null|[ForcedColors]<\"active\"|\"none\">>\n\nEmulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [`method: Page.emulateMedia`] for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Codegen in JavaScript\nDESCRIPTION: This command runs the Playwright code generator for testing a specified URL in JavaScript. It launches a browser where you can interact with the site, recording actions and assertions to build test scripts. No external dependencies are specified, and the URL to be tested is optional.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/codegen-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright codegen demo.playwright.dev/todomvc\n```\n\n----------------------------------------\n\nTITLE: Dispatching Dragstart Event with DataTransfer in Java\nDESCRIPTION: Shows how to dispatch a dragstart event with a DataTransfer object on an ElementHandle in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nJSHandle dataTransfer = page.evaluateHandle(\"() => new DataTransfer()\");\nMap<String, Object> arg = new HashMap<>();\narg.put(\"dataTransfer\", dataTransfer);\nelementHandle.dispatchEvent(\"dragstart\", arg);\n```\n\n----------------------------------------\n\nTITLE: Getting Document Handle in Playwright\nDESCRIPTION: Examples demonstrating how to get a handle for the document object using a string expression with Page.evaluateHandle.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nconst aHandle = await page.evaluateHandle('document'); // Handle for the 'document'\n```\n\nLANGUAGE: java\nCODE:\n```\nJSHandle aHandle = page.evaluateHandle(\"document\"); // Handle for the \"document\".\n```\n\nLANGUAGE: python\nCODE:\n```\na_handle = await page.evaluate_handle(\"document\") # handle for the \"document\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar docHandle = await page.EvaluateHandleAsync(\"document\"); // Handle for the `document`\n```\n\n----------------------------------------\n\nTITLE: Skipping Browser Download in PowerShell\nDESCRIPTION: Prevents browser downloads during package installation by setting the PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD environment variable in PowerShell\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Placeholder Text\nDESCRIPTION: Shows how to locate input elements using their placeholder text attribute.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_131\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"email\" placeholder=\"name@example.com\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait page\n    .getByPlaceholder('name@example.com')\n    .fill('playwright@microsoft.com');\n```\n\n----------------------------------------\n\nTITLE: Event Name for Wait For Event (JavaScript, Python, Java)\nDESCRIPTION: Specifies the event name to wait for when using waitForEvent method. Uses the same event names as those passed to event listeners.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n- `event` <[string]>\n```\n\n----------------------------------------\n\nTITLE: Unmounting Svelte Components in Playwright Tests\nDESCRIPTION: Shows how to unmount a mounted Svelte component in Playwright component tests. This can be used to test cleanup behavior or unmounting effects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-svelte';\n\ntest('unmount', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.unmount();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Playwright via pnpm - Bash\nDESCRIPTION: Updates the Playwright dev dependency via pnpm and downloads the latest supported browser binaries and dependencies. Keeps both test runner and browser infrastructure up to date. Should be run periodically or after significant Playwright releases.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --save-dev @playwright/test@latest\n# Also download new browser binaries and their dependencies:\npnm exec playwright install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Chromium Tracing with Playwright - JavaScript\nDESCRIPTION: Demonstrates how to start and stop Chromium tracing using Playwright in JavaScript. The browser.startTracing method initiates the tracing session, optionally scoped to a page and with the output written to a specified JSON file. After performing actions such as navigation, call browser.stopTracing to end tracing and persist the trace file. Requires Playwright for JavaScript; expects a Browser and Page object. Inputs include the page object and options such as the output path. Outputs a trace file for analysis in Chrome DevTools. Screenshots and custom categories are optionally configurable. Not compatible with Playwright's own tracing feature.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait browser.startTracing(page, { path: 'trace.json' });\nawait page.goto('https://www.google.com');\nawait browser.stopTracing();\n```\n\n----------------------------------------\n\nTITLE: Playwright Browser Configuration in RunSettings\nDESCRIPTION: XML configuration for customizing browser launch options using a RunSettings file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n----------------------------------------\n\nTITLE: Configuring MSTest Playwright Tests with .runsettings\nDESCRIPTION: This XML configuration specifies MSTest-specific settings for parallelization, environment variables for debugging, and Playwright options such as browser selection and launch parameters.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-runners-csharp.md#2025-04-22_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<RunSettings>\n  <!-- MSTest adapter -->  \n  <MSTest>\n    <Parallelize>\n      <Workers>4</Workers>\n      <Scope>ClassLevel</Scope>\n    </Parallelize>\n  </MSTest>\n  <!-- General run configuration -->\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <!-- For debugging selectors, it's recommend to set the following environment variable -->\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n  <!-- Playwright -->  \n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Position for Playwright Drop Actions\nDESCRIPTION: Defines the `targetPosition` object parameter for Playwright drag-and-drop actions. It specifies the coordinates (`x`, `y`) relative to the top-left corner of the target element's padding box where the drop should occur. If not provided, a visible point on the element is used.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n- `targetPosition` <[Object]>\n  - `x` <[float]>\n  - `y` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Waiting for Custom Events on AndroidDevice with Playwright JS\nDESCRIPTION: androidDevice.waitForEvent asynchronously waits for an event to fire and resolves when a provided predicate evaluates truthy. Useful for handling asynchronous UI or device behavior. Input: event name (string), optional predicate. Output: value passed to predicate.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n// Waits for an event and processes its value.\nawait androidDevice.waitForEvent('webView', webView => webView.url().includes('login'));\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.screenshot captures the device's current screen buffer, optionally saving to a file path. Returns a Buffer of the image. Used for regression, validation, or visual monitoring. Input: path (optional). Output: image buffer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// Take a screenshot and save to a file.\nconst buffer = await androidDevice.screenshot({ path: 'screen.jpg' });\n```\n\n----------------------------------------\n\nTITLE: Enabling WebKit in Playwright CMake Configuration\nDESCRIPTION: Adds WebKit-specific definitions, source files, and libraries to the Playwright build configuration, ensuring WebKit integration is enabled and properly linked.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND Playwright_PRIVATE_DEFINITIONS ENABLE_WEBKIT)\nlist(APPEND Playwright_SOURCES\n    WebKitBrowserWindow.cpp\n)\nlist(APPEND Playwright_PRIVATE_LIBRARIES\n    WebKit::WebKit\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Playwright Tracing (JavaScript)\nDESCRIPTION: Shows how to initiate Playwright tracing using `context.tracing.start()` in JavaScript, typically enabling options like `screenshots` and `snapshots`. This call begins the trace recording, which must be concluded with `context.tracing.stop()` to save the file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-tracing.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nawait context.tracing.start({ screenshots: true, snapshots: true });\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\n----------------------------------------\n\nTITLE: Emulating Mobile Device with Geolocation in TypeScript\nDESCRIPTION: Example that demonstrates mobile emulation by configuring iPhone 13 Pro device settings with custom geolocation, navigating to Google Maps, and taking a screenshot.\nSOURCE: https://github.com/microsoft/playwright/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test, devices } from '@playwright/test';\n\ntest.use({\n  ...devices['iPhone 13 Pro'],\n  locale: 'en-US',\n  geolocation: { longitude: 12.492507, latitude: 41.889938 },\n  permissions: ['geolocation'],\n})\n\ntest('Mobile and geolocation', async ({ page }) => {\n  await page.goto('https://maps.google.com');\n  await page.getByText('Your location').click();\n  await page.waitForRequest(/.*preview\\/pwa/);\n  await page.screenshot({ path: 'colosseum-iphone.png' });\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Agent Passthrough Example\nDESCRIPTION: Example showing how to create an HTTP agent that delegates requests to the global HTTP or HTTPS agent based on the endpoint security.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nagent(function (req, opts) {\n  return opts.secureEndpoint ? https.globalAgent : http.globalAgent;\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating JSHandle in Java\nDESCRIPTION: Demonstrates evaluating a JSHandle to get the innerText of a tweet's retweets element in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nElementHandle tweetHandle = page.querySelector(\".tweet .retweets\");\nassertEquals(\"10 retweets\", tweetHandle.evaluate(\"node => node.innerText\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Contrast Emulation for JavaScript Browser Context\nDESCRIPTION: Defines the contrast option for browser contexts in JavaScript and Java. This emulates the prefers-contrast media feature with values 'no-preference' or 'more'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_69\n\nLANGUAGE: js\nCODE:\n```\n- `contrast` <null|[Contrast]<\"no-preference\"|\"more\">>\n\nEmulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [`method: Page.emulateMedia`] for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.\n```\n\n----------------------------------------\n\nTITLE: Managing Color Scheme and Media in JavaScript\nDESCRIPTION: Creates browser contexts and pages with specific color schemes, and demonstrates how to update color scheme and media type during test execution using the Playwright JavaScript library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// Create context with dark mode\nconst context = await browser.newContext({\n  colorScheme: 'dark' // or 'light'\n});\n\n// Create page with dark mode\nconst page = await browser.newPage({\n  colorScheme: 'dark' // or 'light'\n});\n\n// Change color scheme for the page\nawait page.emulateMedia({ colorScheme: 'dark' });\n\n// Change media for page\nawait page.emulateMedia({ media: 'print' });\n```\n\n----------------------------------------\n\nTITLE: Protractor Example for AngularJS Todo List\nDESCRIPTION: A typical Protractor test example for an AngularJS todo list application, demonstrating element selection, interaction, and expectations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ndescribe('angularjs homepage todo list', function() {\n  it('should add a todo', function() {\n    browser.get('https://angularjs.org');\n\n    element(by.model('todoList.todoText')).sendKeys('first test');\n    element(by.css('[value=\"add\"]')).click();\n\n    const todoList = element.all(by.repeater('todo in todoList.todos'));\n    expect(todoList.count()).toEqual(3);\n    expect(todoList.get(2).getText()).toEqual('first test');\n\n    // You wrote your first test, cross it off the list\n    todoList.get(2).element(by.css('input')).click();\n    const completedAmount = element.all(by.css('.done-true'));\n    expect(completedAmount.count()).toEqual(2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Linting Vue project files\nDESCRIPTION: Runs linting tools to check for code errors and enforce coding standards, with automatic fixes where possible.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Extending Test Object with Fixtures and Options in JavaScript\nDESCRIPTION: Demonstrates how to extend the test object by defining custom fixtures and options. This allows for creating reusable setups and configurations for tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst base = require('@playwright/test');\nconst { TodoPage } = require('./todo-page');\n\nexports.test = base.test.extend({\n  defaultItem: ['Do stuff', { option: true }],\n\n  todoPage: async ({ page, defaultItem }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo(defaultItem);\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building Vue 3 Project for Production\nDESCRIPTION: Command to compile and minify the Vue 3 project for production deployment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-vite/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Server for Playwright Tests\nDESCRIPTION: Shows how to configure a web server to launch before running tests using the webServer option in Playwright config. The server will wait for the specified URL before starting tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start', // command to launch\n    url: 'http://127.0.0.1:3000', // url to await for\n    timeout: 120 * 1000,\n    reuseExistingServer: !process.env.CI,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Granting Domain-Specific Permissions in C#\nDESCRIPTION: Grants notification permissions for a specific domain (skype.com) using the Playwright C# client. This allows showing notifications only for the specified origin.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.GrantPermissionsAsync(new[] { \"notifications\" }, origin: \"https://skype.com\");\n```\n\n----------------------------------------\n\nTITLE: Hermetic Browser Installation\nDESCRIPTION: Commands to install browsers in a local folder for hermetic installations\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n# Places binaries to node_modules/playwright-core/.local-browsers\nPLAYWRIGHT_BROWSERS_PATH=0 npx playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\n# Places binaries to node_modules\\playwright-core\\.local-browsers\nset PLAYWRIGHT_BROWSERS_PATH=0\nnpx playwright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Places binaries to node_modules\\playwright-core\\.local-browsers\n$Env:PLAYWRIGHT_BROWSERS_PATH=0\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Obtain Response Security Details\nDESCRIPTION: The `Response.securityDetails` method gives SSL and other security information associated with a response. It includes details like the protocol, issuer, and validity period, obtainable asynchronously.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-response.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function securityDetails() {\\n  const security = await response.securityDetails();\\n  console.log('Security Details:', security);\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling Strategy for Playwright `waitForFunction` (JS/Python)\nDESCRIPTION: Defines the `polling` parameter for Playwright's `waitForFunction` in JavaScript and Python. It controls how often the provided expression is evaluated. It can be set to 'raf' (use `requestAnimationFrame`, default) or a number specifying the polling interval in milliseconds.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n- `polling` <[float]|\"raf\">\n```\n\n----------------------------------------\n\nTITLE: Deploying a Svelte App to Surge\nDESCRIPTION: Commands to build the Svelte application and then deploy the compiled files in the public directory to Surge with a custom domain.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nsurge public my-project.surge.sh\n```\n\n----------------------------------------\n\nTITLE: Describing Injected Directory Contents in Markdown\nDESCRIPTION: This markdown snippet explains the purpose of the 'injected' directory, which contains helper sources injected into the page. It also mentions that these sources are bundled into the build process.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/injected/src/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Injected\n\nThis directory contains helper sources which are injected into the page.\n\nThese sources are bundled with the ebuild into `src/generated` as compile-time source constants. See `utils/generate_injected` for details.\n```\n\n----------------------------------------\n\nTITLE: Set Fixed Clock Time Example\nDESCRIPTION: Shows how to set a fixed time for Date.now and new Date() while keeping timers running\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-clock.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.clock.setFixedTime(Date.now());\nawait page.clock.setFixedTime(new Date('2020-02-02'));\nawait page.clock.setFixedTime('2020-02-02');\n```\n\nLANGUAGE: python\nCODE:\n```\nawait page.clock.set_fixed_time(datetime.datetime.now())\nawait page.clock.set_fixed_time(datetime.datetime(2020, 2, 2))\nawait page.clock.set_fixed_time(\"2020-02-02\")\n```\n\nLANGUAGE: java\nCODE:\n```\npage.clock().setFixedTime(new Date());\npage.clock().setFixedTime(new SimpleDateFormat(\"yyy-MM-dd\").parse(\"2020-02-02\"));\npage.clock().setFixedTime(\"2020-02-02\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.Clock.SetFixedTimeAsync(DateTime.Now);\nawait page.Clock.SetFixedTimeAsync(new DateTime(2020, 2, 2));\nawait page.Clock.SetFixedTimeAsync(\"2020-02-02\");\n```\n\n----------------------------------------\n\nTITLE: Passing a JSHandle as an Argument to page.evaluate in Java\nDESCRIPTION: Illustrates creating a JavaScript array in the page using `page.evaluateHandle`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.evaluate` to interact with the array (get length, add elements) and finally disposing of the handle using `dispose()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n```java\n// Create new array in page.\nJSHandle myArrayHandle = page.evaluateHandle(\"() => {\\n\" +\n  \"  window.myArray = [1];\\n\" +\n  \"  return myArray;\\n\" +\n  \"}\");\n\n// Get the length of the array.\nint length = (int) page.evaluate(\"a => a.length\", myArrayHandle);\n\n// Add one more element to the array using the handle\nMap<String, Object> arg = new HashMap<>();\narg.put(\"myArray\", myArrayHandle);\narg.put(\"newElement\", 2);\npage.evaluate(\"arg => arg.myArray.add(arg.newElement)\", arg);\n\n// Release the object when it is no longer needed.\nmyArrayHandle.dispose();\n```\n```\n\n----------------------------------------\n\nTITLE: Running UI Mode with Custom Port\nDESCRIPTION: Command to run Playwright UI Mode with a specific port and host binding for external access\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-ui-mode-js.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui-port=8080 --ui-host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event in Python (Sync)\nDESCRIPTION: This snippet demonstrates how to dispatch a click event on a button element using the Page.dispatch_event method in Python with synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\npage.dispatch_event(\"button#submit\", \"click\")\n```\n\n----------------------------------------\n\nTITLE: Skipping Browser Downloads\nDESCRIPTION: Commands to skip browser downloads when browsers are managed separately\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 mvn test\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nmvn test\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Multiple Workers (NUnit)\nDESCRIPTION: Command to run Playwright tests with multiple workers using NUnit.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -- NUnit.NumberOfTestWorkers=5\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Specific Browser\nDESCRIPTION: Command to run tests on a specific browser using the --browser flag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest --browser webkit\n```\n\n----------------------------------------\n\nTITLE: Passing a JSHandle as an Argument to page.evaluate in JavaScript\nDESCRIPTION: Illustrates creating a JavaScript array in the page using `page.evaluateHandle`, obtaining a [JSHandle] to it. Subsequently demonstrates passing this handle into `page.evaluate` to interact with the array (get length, add elements) and finally disposing of the handle using `dispose()`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Create new array in page.\nconst myArrayHandle = await page.evaluateHandle(() => {\n  window.myArray = [1];\n  return myArray;\n});\n\n// Get the length of the array.\nconst length = await page.evaluate(a => a.length, myArrayHandle);\n\n// Add one more element to the array using the handle\nawait page.evaluate(arg => arg.myArray.push(arg.newElement), {\n  myArray: myArrayHandle,\n  newElement: 2\n});\n\n// Release the object when it's no longer needed.\nawait myArrayHandle.dispose();\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Playwright Input Element Selector\nDESCRIPTION: Defines the `selector` string parameter used to find an element for an input action in Playwright. If the selector matches multiple elements, the first one found will be used.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- `selector` <[string]>\n```\n\n----------------------------------------\n\nTITLE: Exposing Page URL Using Python Async in Playwright\nDESCRIPTION: Asynchronous Python example demonstrating page URL exposure through context binding. Includes async context management and event handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsercontext.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    webkit = playwright.webkit\n    browser = await webkit.launch(headless=False)\n    context = await browser.new_context()\n    await context.expose_binding(\"pageURL\", lambda source: source[\"page\"].url)\n    page = await context.new_page()\n    await page.set_content(\"\"\"\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.pageURL();\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n    \"\"\")\n    await page.get_by_role(\"button\").click()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Screenshot Clipping Area Configuration\nDESCRIPTION: Defines the `clip` option for specifying a rectangular area to capture in screenshots. Requires x, y coordinates and width, height dimensions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\n- `clip` <[Object]>\n  - `x` <[float]> x-coordinate of top-left corner of clip area\n  - `y` <[float]> y-coordinate of top-left corner of clip area\n  - `width` <[float]> width of clipping area\n  - `height` <[float]> height of clipping area\n```\n\n----------------------------------------\n\nTITLE: Setting Context Options in Playwright Tests\nDESCRIPTION: Example showing how to provide specific browser context options, such as reducedMotion setting, which can be useful for accessibility testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    contextOptions: {\n      reducedMotion: 'reduce',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Navigation After Timeout Click in JavaScript\nDESCRIPTION: Demonstrates how to wait for navigation that happens after a timeout-based click in JavaScript. This pattern is useful when navigation is triggered indirectly after some delay.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_130\n\nLANGUAGE: javascript\nCODE:\n```\n// Start waiting for navigation before clicking. Note no await.\nconst navigationPromise = page.waitForNavigation();\nawait page.getByText('Navigate after timeout').click();\nawait navigationPromise;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Web Servers in Playwright Config\nDESCRIPTION: Example of configuring multiple web servers in the Playwright config file. This allows launching multiple servers, databases, or processes for testing.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://127.0.0.1:3000',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://127.0.0.1:3333',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://localhost:3000/',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Pulling Playwright Docker Image for .NET\nDESCRIPTION: Command to pull the Playwright Docker image for .NET applications from Microsoft Artifact Registry.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript in Playwright Tests\nDESCRIPTION: Example showing how to disable JavaScript execution in the browser for tests, which can be useful for testing graceful degradation scenarios or fallback behavior.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testoptions.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    javaScriptEnabled: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Playwright Project via yarn - Bash\nDESCRIPTION: Sets up a new Playwright project using yarn, interactively scaffolding configuration and directory structure for end-to-end tests. Requires Node.js and yarn. Prompts the user for choices on test folder, setup language, CI integration, and browsers. Installs and configures Playwright as a development dependency.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create playwright\n```\n\n----------------------------------------\n\nTITLE: Migrating Puppeteer automation to Playwright\nDESCRIPTION: Equivalent browser automation example using Playwright, demonstrating the differences in API and syntax compared to Puppeteer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/puppeteer-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chromium } = require('playwright');\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.setViewportSize({ width: 1280, height: 800 });\n  await page.goto('https://playwright.dev/', {\n    waitUntil: 'networkidle',\n  });\n  await page.screenshot({ path: 'example.png' });\n  await browser.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Frame Locator Strictness Examples\nDESCRIPTION: Shows how frame locators handle multiple matching elements and demonstrates proper usage with first() selector.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-framelocator.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Throws if there are several frames in DOM:\nawait page.locator('.result-frame').contentFrame().getByRole('button').click();\n\n// Works because we explicitly tell locator to pick the first frame:\nawait page.locator('.result-frame').contentFrame().first().getByRole('button').click();\n```\n\nLANGUAGE: python\nCODE:\n```\n# Throws if there are several frames in DOM:\nawait page.locator('.result-frame').content_frame.get_by_role('button').click()\n\n# Works because we explicitly tell locator to pick the first frame:\nawait page.locator('.result-frame').first.content_frame.get_by_role('button').click()\n```\n\nLANGUAGE: java\nCODE:\n```\n// Throws if there are several frames in DOM:\npage.locator(\".result-frame\").contentFrame().getByRole(AriaRole.BUTTON).click();\n\n// Works because we explicitly tell locator to pick the first frame:\npage.locator(\".result-frame\").first().contentFrame().getByRole(AriaRole.BUTTON).click();\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Throws if there are several frames in DOM:\nawait page.Locator(\".result-frame\").ContentFrame.GetByRole(AriaRole.Button).ClickAsync();\n\n// Works because we explicitly tell locator to pick the first frame:\nawait page.Locator(\".result-frame\").First.ContentFrame.getByRole(AriaRole.Button).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Sync Role Selector Usage in Python\nDESCRIPTION: Shows synchronous usage of role selectors for button elements\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Click a button with accessible name \"log in\"\npage.locator(\"role=button[name='log in']\").click()\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Visibility in Playwright\nDESCRIPTION: Shows how to check if an element is visible using Playwright's isVisible method across different programming languages. Returns a boolean indicating whether the element is visible.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nconst visible = await page.getByRole('button').isVisible();\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean visible = page.getByRole(AriaRole.BUTTON).isVisible();\n```\n\nLANGUAGE: python-async\nCODE:\n```\nvisible = await page.get_by_role(\"button\").is_visible()\n```\n\nLANGUAGE: python-sync\nCODE:\n```\nvisible = page.get_by_role(\"button\").is_visible()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nBoolean visible = await page.GetByRole(AriaRole.Button).IsVisibleAsync();\n```\n\n----------------------------------------\n\nTITLE: Building PrintDeps on Windows\nDESCRIPTION: Instructions for building the PrintDeps tool using Visual Studio 2019. The tool is built in x64/Release configuration and the output binary is committed to bin/PrintDeps.exe for npm distribution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/winldd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPrintDeps.sln\n```\n\n----------------------------------------\n\nTITLE: Converting Locator to FrameLocator with ContentFrame in C#\nDESCRIPTION: Demonstrates how to convert a Locator object to a FrameLocator in C# using the ContentFrame property to interact with elements inside an iframe.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nvar locator = Page.Locator(\"iframe[name=\\\"embedded\\\"]\");\n// ...\nvar frameLocator = locator.ContentFrame;\nawait frameLocator.GetByRole(AriaRole.Button).ClickAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Test Failures in Playwright\nDESCRIPTION: Configuration to set maximum number of test failures before stopping test execution, with different values for CI and local environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  maxFailures: process.env.CI ? 1 : 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Unique Worker Index in JavaScript\nDESCRIPTION: Retrieves the unique index of the worker process running the test. This index changes when a worker is restarted and is also available as an environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-workerinfo.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nworkerInfo.workerIndex\n```\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.TEST_WORKER_INDEX\n```\n\n----------------------------------------\n\nTITLE: Simulating Pinch Close and Open Gestures on AndroidDevice with Playwright JS\nDESCRIPTION: AndroidDevice.pinchClose and pinchOpen simulate pinch gestures on a widget—closing or opening—specified by a selector. Both take percent (float for size relative to widget), optional speed, and timeout. Used for automating zoom controls. Input: selector and gesture parameters. No return value. Both gestures are similar but for inverse operations.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// Pinch close gesture.\nawait androidDevice.pinchClose({\n  selector: mySelector,\n  percent: 0.8,\n  speed: 200, // Optional\n  timeout: 1500 // Optional\n});\n\n// Pinch open gesture.\nawait androidDevice.pinchOpen({\n  selector: mySelector,\n  percent: 1.2,\n  speed: 200, // Optional\n  timeout: 1500 // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright via conda\nDESCRIPTION: Commands to install Playwright using conda package manager by adding required channels\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda config --add channels conda-forge\nconda config --add channels microsoft\nconda install playwright\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Capabilities to Selenium Grid\nDESCRIPTION: Commands to run Playwright tests with additional capabilities for the Selenium Grid using the SELENIUM_REMOTE_CAPABILITIES environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" npx playwright test\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" pytest --browser chromium\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" mvn test\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" dotnet test\n```\n\n----------------------------------------\n\nTITLE: Creating an External Svelte Store for HMR State Preservation\nDESCRIPTION: This code demonstrates how to create a simple external store in Svelte to preserve component state during Hot Module Replacement (HMR). By using an external store, the state remains intact when components are reloaded during development.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// store.ts\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Browser via CDP Using Playwright Python (Sync)\nDESCRIPTION: Shows Playwright's synchronous CDP connection to a Chromium browser running with debugging enabled. Requires Playwright's sync API and a valid CDP endpoint. Expected returns are browser context and page objects; limited to Chromium-derived browsers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbrowser = playwright.chromium.connect_over_cdp(\\\"http://localhost:9222\\\")\\ndefault_context = browser.contexts[0]\\npage = default_context.pages[0]\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Manual TypeScript Compilation\nDESCRIPTION: This JSON snippet provides a tsconfig.json configuration for manually compiling TypeScript tests. It sets the target to ESNext, uses CommonJS modules, and specifies an output directory for compiled files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-typescript-js.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ESNext\",\n        \"module\": \"commonjs\",\n        \"moduleResolution\": \"Node\",\n        \"sourceMap\": true,\n        \"outDir\": \"../tests-out\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharding Tests with Playwright CLI\nDESCRIPTION: Commands for splitting test suites into multiple shards. Each command runs a portion of the tests, allowing them to be executed in parallel across different machines to speed up the testing process.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-sharding-js.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --shard=1/4\nnpx playwright test --shard=2/4\nnpx playwright test --shard=3/4\nnpx playwright test --shard=4/4\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright via pip\nDESCRIPTION: Commands to install Playwright Python package using pip package manager and download browser binaries\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-python.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pip\npip install playwright\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Example Test File Structure\nDESCRIPTION: Shows the directory structure for test files using snapshot assertions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_134\n\nLANGUAGE: plaintext\nCODE:\n```\nplaywright.config.ts\ntests/\n└── page/\n    └── page-click.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Certificate Authority for Playwright Install\nDESCRIPTION: Commands to set custom root certificates when using a proxy that intercepts requests with a custom untrusted certificate authority. This prevents 'self signed certificate in certificate chain' errors during browser downloads.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_EXTRA_CA_CERTS=\"/path/to/cert.pem\"\n```\n\nLANGUAGE: batch\nCODE:\n```\nset NODE_EXTRA_CA_CERTS=\"C:\\certs\\root.crt\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:NODE_EXTRA_CA_CERTS=\"C:\\certs\\root.crt\"\n```\n\n----------------------------------------\n\nTITLE: Defining Playwright Error Class in Python\nDESCRIPTION: Defines the base Error class specific to Playwright as a subclass of Python's Exception. This class is raised for abnormal terminations, such as when the browser closes unexpectedly during an operation like Page.evaluate. It features properties like message, name, and stack to provide detailed error context. This structure helps developers uniformly handle and inspect errors encountered during browser automation tasks. This class has no external dependencies other than Python 3 and acts as the superclass for all custom Playwright exceptions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-error.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# class: Error\n# * since: v1.11\n# * langs: python\n# * extends: [Exception]\n#\n# Error is raised whenever certain operations are terminated abnormally, e.g.\n# browser closes while [`method: Page.evaluate`] is running. All Playwright exceptions\n# inherit from this class.\n\nclass Error(Exception):\n    \"\"\"Base class for Playwright errors raised for abnormal operation terminations.\"\"\"\n    pass\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Step Rendering in List Reporter\nDESCRIPTION: Shows how to enable step rendering in the 'list' reporter by passing a configuration option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporters-js.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['list', { printSteps: true }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Required Browsers for Playwright\nDESCRIPTION: Command to install the required browsers for Playwright after installing the Pytest plugin.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-python.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Visual Regression Test with Pixel Comparison\nDESCRIPTION: This test compares specific pixels between two images.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should return true for different images when comparing specific pixels', async ({ page }) => {\n  const image1 = await page.screenshot();\n  await compareImageFile(image1, 'different/3.png', { includeAA: false });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounding Box with ElementHandle in Java\nDESCRIPTION: Depicts obtaining an element's bounding box using ElementHandle in Java. It uses the resulting coordinates to perform a centered mouse click.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nBoundingBox box = elementHandle.boundingBox();\npage.mouse().click(box.x + box.width / 2, box.y + box.height / 2);\n```\n\n----------------------------------------\n\nTITLE: Initializing GenericAssertions in Playwright Test\nDESCRIPTION: Shows how to import and use the GenericAssertions class in a Playwright test. It demonstrates a simple assertion using the 'toBe' method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-genericassertions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('assert a value', async ({ page }) => {\n  const value = 1;\n  expect(value).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tools in Experimental Dev Mode with HMR\nDESCRIPTION: Commands for running various Playwright tools in experimental development mode with Hot Module Replacement (HMR) enabled.\nSOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPW_HMR=1 npm run watch\nPW_HMR=1 npx playwright show-trace\nPW_HMR=1 npm run ctest -- --ui\nPW_HMR=1 npx playwright codegen\nPW_HMR=1 npx playwright show-report\n```\n\n----------------------------------------\n\nTITLE: Clearing Browser Permissions in C#\nDESCRIPTION: Revokes all previously granted permissions for the browser context using the Playwright C# client. This removes any permission settings that were applied earlier.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/emulation.md#2025-04-22_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.ClearPermissionsAsync();\n```\n\n----------------------------------------\n\nTITLE: Docker seccomp Profile for Chromium Sandbox\nDESCRIPTION: JSON configuration for a Docker seccomp profile that allows user namespace cloning permissions, needed to run Chromium with sandbox.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"comment\": \"Allow create user namespaces\",\n  \"names\": [\n    \"clone\",\n    \"setns\",\n    \"unshare\"\n  ],\n  \"action\": \"SCMP_ACT_ALLOW\",\n  \"args\": [],\n  \"includes\": {},\n  \"excludes\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to AndroidWebView and Returning a Page\nDESCRIPTION: This method connects to the WebView and returns a regular Playwright Page object for interaction. It is an asynchronous method that returns a Promise resolving to a Page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androidwebview.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync method: AndroidWebView.page\n- returns: <[Page]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Forbid Only Option in Playwright Test\nDESCRIPTION: Configuration to exit with an error if tests are marked as .only, preventing accidental inclusion of focused tests in CI.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  forbidOnly: !!process.env.CI,\n});\n```\n\n----------------------------------------\n\nTITLE: Using to_have_url Assertion in Python (Sync)\nDESCRIPTION: Example of using to_have_url assertion in synchronous Python to verify page URL matches a pattern. This checks if the page URL contains 'checkout' using a regular expression.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom playwright.sync_api import expect\n\n# ...\nexpect(page).to_have_url(re.compile(\".*checkout\"))\n```\n\n----------------------------------------\n\nTITLE: Python Trace Recording Implementation\nDESCRIPTION: Python examples for recording traces using both async and sync APIs in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/trace-viewer.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbrowser = chromium.launch()\ncontext = browser.new_context()\n\n# Start tracing before creating / navigating a page.\ncontext.tracing.start(screenshots=True, snapshots=True, sources=True)\n\npage = context.new_page()\npage.goto(\"https://playwright.dev\")\n\n# Stop tracing and export it into a zip archive.\ncontext.tracing.stop(path = \"trace.zip\")\n```\n\n----------------------------------------\n\nTITLE: Handling CDPSessionEvent in C#\nDESCRIPTION: The CDPSessionEvent class provides an onEvent method for handling named events. It takes a JsonElement? argument and is used to process events raised by the CDPSession.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsessionevent.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nevent: CDPSessionEvent.onEvent\n- argument: <[JsonElement?]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failure on Flaky Tests in Playwright Test\nDESCRIPTION: Configuration to exit with an error if any tests are marked as flaky, especially useful in CI environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testconfig.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  failOnFlakyTests: !!process.env.CI,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Svelte Project with degit\nDESCRIPTION: Commands to create a new Svelte application using the degit tool to clone the official template repository and navigate to the project directory.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit sveltejs/template svelte-app\ncd svelte-app\n```\n\n----------------------------------------\n\nTITLE: Using Screenshot Assertions in JavaScript\nDESCRIPTION: Example of using screenshot assertions in JavaScript to verify visual appearance of a page. This waits for consistent screenshots before comparing with the expected image.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-pageassertions.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(page).toHaveScreenshot('image.png');\n```\n\n----------------------------------------\n\nTITLE: Connecting Playwright to Selenium Grid\nDESCRIPTION: Commands to run Playwright tests connected to a Selenium Grid using the SELENIUM_REMOTE_URL environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 npx playwright test\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 pytest --browser chromium\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 mvn test\n```\n\nLANGUAGE: bash\nCODE:\n```\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 dotnet test\n```\n\n----------------------------------------\n\nTITLE: Launching and Connecting to Playwright Android Server in JavaScript\nDESCRIPTION: This snippet shows how to launch a Playwright Android server and connect a client to it. The server-side code launches the server and retrieves the WebSocket endpoint, while the client-side connects to the server using this endpoint. Required dependencies include an Android device and the Playwright library. The server setup includes optional parameters like device serial number and host settings. Outputs include server endpoint and connected device details.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-android.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { _android } = require('playwright');\n\n(async () => {\n  const browserServer = await _android.launchServer({\n    // If you have multiple devices connected and want to use a specific one.\n    // deviceSerialNumber: '<deviceSerialNumber>',\n  });\n  const wsEndpoint = browserServer.wsEndpoint();\n  console.log(wsEndpoint);\n})();\n```\n\nLANGUAGE: js\nCODE:\n```\nconst { _android } = require('playwright');\n\n(async () => {\n  const device = await _android.connect('<wsEndpoint>');\n\n  console.log(device.model());\n  console.log(device.serial());\n  await device.shell('am force-stop com.android.chrome');\n  const context = await device.launchBrowser();\n\n  const page = await context.newPage();\n  await page.goto('https://webkit.org/');\n  console.log(await page.evaluate(() => window.location.href));\n  await page.screenshot({ path: 'page-chrome-1.png' });\n\n  await context.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Event Callback for Wait For Event (Java)\nDESCRIPTION: Specifies the callback that triggers the event when waiting for an event in Java. The callback performs the action that should generate the event.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_92\n\nLANGUAGE: java\nCODE:\n```\n- `callback` <[Runnable]>\n```\n\n----------------------------------------\n\nTITLE: Getting Properties from JSHandle in Python (Async)\nDESCRIPTION: Demonstrates getting properties from a JSHandle, specifically window and document objects, in Python with async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nhandle = await page.evaluate_handle(\"({ window, document })\")\nproperties = await handle.get_properties()\nwindow_handle = properties.get(\"window\")\ndocument_handle = properties.get(\"document\")\nawait handle.dispose()\n```\n\n----------------------------------------\n\nTITLE: Full Page Screenshot Option\nDESCRIPTION: Defines the `fullPage` option that enables capturing the entire scrollable page instead of just the visible viewport.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\n- `fullPage` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Multiple Configurations\nDESCRIPTION: Commands to run Playwright tests on multiple browsers or configurations using separate runsettings files.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --settings:chromium.runsettings\ndotnet test --settings:firefox.runsettings\ndotnet test --settings:webkit.runsettings\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Workers and Waiting for Registration in Playwright\nDESCRIPTION: Demonstrates how to wait for a Service Worker to be registered when a page loads. This snippet uses the waitForEvent method to capture the Service Worker instance when it's registered by the page.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/service-workers-experimental-network-events-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst serviceWorkerPromise = context.waitForEvent('serviceworker');\nawait page.goto('/example-with-a-service-worker.html');\nconst serviceworker = await serviceWorkerPromise;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounding Box with ElementHandle in JavaScript\nDESCRIPTION: Illustrates using ElementHandle to obtain the bounding box of an element in JavaScript. Using these coordinates, it performs a mouse click in the element's center.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst box = await elementHandle.boundingBox();\nawait page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);\n```\n\n----------------------------------------\n\nTITLE: Installing Browsers with playwright-core CLI\nDESCRIPTION: Demonstrates how to install browsers when using the playwright-core package with the renamed binary.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ npx playwright-core install # the new way to install browsers when using playwright-core\n```\n\n----------------------------------------\n\nTITLE: Describing Playwright-Core Package in Markdown\nDESCRIPTION: A simple Markdown snippet that introduces the playwright-core package. It explains that this is a no-browser version of the main Playwright library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# playwright-core\n\nThis package contains the no-browser flavor of [Playwright](http://github.com/microsoft/playwright).\n```\n\n----------------------------------------\n\nTITLE: Running Playwright CLI Help Command\nDESCRIPTION: Demonstrates how to use the newly included Playwright command line interface to display help information.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-python.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nplaywright --help\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Manually in Shell\nDESCRIPTION: Demonstrates how to manually install Playwright Test by adding the dependency and installing supported browsers using npm.\nSOURCE: https://github.com/microsoft/playwright/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i -D @playwright/test\n# install supported browsers\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Running Vue project in development mode\nDESCRIPTION: Starts the development server with hot-reload functionality for real-time updates during development.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-vue-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Multiple Workers (xUnit)\nDESCRIPTION: Command to run Playwright tests with multiple workers using xUnit.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-csharp.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -- xUnit.MaxParallelThreads=5\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Device Event Waiting Parameters\nDESCRIPTION: Defines parameters for waiting on Android Device events, including predicate function and timeout options. Default timeout is 30 seconds but can be modified using setDefaultTimeout method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androiddevice.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  predicate: function,\n  timeout: number\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Text Content in HTML\nDESCRIPTION: Example HTML structure showing a simple span element with text content.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span>Welcome, John</span>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Function\nDESCRIPTION: Command to run a specific test function using the -k flag.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/running-tests-python.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest -k test_add_a_todo_item\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Playwright Server with Python Sync API\nDESCRIPTION: Python code to connect to a remote Playwright server using the synchronous API.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.connect(\"ws://127.0.0.1:3000/\")\n```\n\n----------------------------------------\n\nTITLE: Using CDPSession with Chrome DevTools Protocol in JavaScript\nDESCRIPTION: Creates a new CDP session, enables animation tracking, sets up an event listener, gets the current playback rate and modifies it. This demonstrates the core functionality of CDPSession for working with Chrome DevTools Protocol.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsession.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = await page.context().newCDPSession(page);\nawait client.send('Animation.enable');\nclient.on('Animation.animationCreated', () => console.log('Animation created!'));\nconst response = await client.send('Animation.getPlaybackRate');\nconsole.log('playback rate is ' + response.playbackRate);\nawait client.send('Animation.setPlaybackRate', {\n  playbackRate: response.playbackRate / 2\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dialog Handling Causing Stall (Java)\nDESCRIPTION: Demonstrates incorrect usage where a dialog listener (`onDialog`) is registered but does not handle the dialog (e.g., by accepting or dismissing it). This causes the script execution to hang at the action that triggered the dialog because web dialogs are modal.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/dialogs.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n```java\npage.onDialog(dialog -> System.out.println(dialog.message()));\npage.getByRole(AriaRole.BUTTON).click(); // Will hang here\n```\n```\n\n----------------------------------------\n\nTITLE: Creating DataTransfer and Dispatching DragStart Event in C#\nDESCRIPTION: This snippet shows how to create a DataTransfer object and use it to dispatch a dragstart event in C#. Note that DataTransfer can only be created in Chromium and Firefox.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nvar dataTransfer = await page.EvaluateHandleAsync(\"() => new DataTransfer()\");\nawait page.DispatchEventAsync(\"#source\", \"dragstart\", new { dataTransfer });\n```\n\n----------------------------------------\n\nTITLE: Declaring a Focused Failing Test in Playwright\nDESCRIPTION: This snippet demonstrates how to declare a focused failing test using test.fail.only. It ensures that Playwright runs only this test and verifies that it actually fails.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.fail.only('focused failing test', async ({ page }) => {\n  // This test is expected to fail\n});\ntest('not in the focused group', async ({ page }) => {\n  // This test will not run\n});\n```\n\n----------------------------------------\n\nTITLE: Visual Regression Test with Antialiasing\nDESCRIPTION: This test compares images while considering antialiasing effects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/image_tools/fixtures/should-match/looks-same-tests/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should return true for different images when antialiasing is disabled', async ({ page }) => {\n  const image1 = await page.screenshot();\n  await compareImageFile(image1, 'different/2.png', { antialiasing: false });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Properties from JSHandle in C#\nDESCRIPTION: Shows how to get properties from a JSHandle, specifically window and document objects, in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = await page.EvaluateHandleAsync(\"() => ({ window, document }\");\nvar properties = await handle.GetPropertiesAsync();\nvar windowHandle = properties[\"window\"];\nvar documentHandle = properties[\"document\"];\nawait handle.DisposeAsync();\n```\n\n----------------------------------------\n\nTITLE: Getting Properties from JSHandle in Java\nDESCRIPTION: Shows how to get properties from a JSHandle, specifically window and document objects, in Java.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-jshandle.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nJSHandle handle = page.evaluateHandle(\"() => ({ window, document })\");\nMap<String, JSHandle> properties = handle.getProperties();\nJSHandle windowHandle = properties.get(\"window\");\nJSHandle documentHandle = properties.get(\"document\");\nhandle.dispose();\n```\n\n----------------------------------------\n\nTITLE: Updating Playwright via yarn - Bash\nDESCRIPTION: Upgrades Playwright packages to the latest version using yarn and installs updated browser binaries and dependencies. Ensures the project is aligned with the latest Playwright release. The two commands install the package and then fetch browser assets.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @playwright/test@latest\n# Also download new browser binaries and their dependencies:\nyarn playwright install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Browser via CDP Using Playwright Python (Async)\nDESCRIPTION: Displays connecting asynchronously to a running Chromium browser over CDP using Playwright Python async API. Requires 'playwright' Python package and a properly configured debug port. Input is a CDP endpoint URL; returns browser and page objects. Limitations: async environment required; only Chromium is supported.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browsertype.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbrowser = await playwright.chromium.connect_over_cdp(\\\"http://localhost:9222\\\")\\ndefault_context = browser.contexts[0]\\npage = default_context.pages[0]\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Information Capture in Playwright v1.51\nDESCRIPTION: Example configuration showing how to enable git information capture in the HTML report using the captureGitInfo option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  captureGitInfo: { commit: true, diff: true }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Thrown Value in JavaScript\nDESCRIPTION: Retrieves the value that was thrown. This is set when anything except an Error (or its subclass) has been thrown during test execution.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-testinfoerror.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntestInfoError.value\n```\n\n----------------------------------------\n\nTITLE: Hover and Click Using ElementHandle in JavaScript\nDESCRIPTION: Demonstrates how to use ElementHandle to hover and click a specific text element in JavaScript. This involves querying the element and invoking hover and click methods on it.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst handle = await page.$('text=Submit');\n// ...\nawait handle.hover();\nawait handle.click();\n```\n\n----------------------------------------\n\nTITLE: Initializing Playwright Project via pnpm - Bash\nDESCRIPTION: Creates a Playwright test project using pnpm, generating configuration and example tests interactively. Requires Node.js and pnpm installed. Allows customization of test folder, test language, browser download, and CI workflow setup. Installs Playwright-related packages as development dependencies within the project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-js.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create playwright\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Test Runner Tests\nDESCRIPTION: Command for running the test runner tests in Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ttest\n```\n\n----------------------------------------\n\nTITLE: Exposing SHA256 Function in Playwright Page (C#)\nDESCRIPTION: This C# code demonstrates how to expose a SHA256 function to the browser page using Playwright. It creates a new page, exposes the function, sets page content with a button, and handles the button click to display the hash.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_64\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Playwright;\nusing System;\nusing System.Security.Cryptography;\nusing System.Threading.Tasks;\n\nclass PageExamples\n{\n    public static async Task Main()\n    {\n        using var playwright = await Playwright.CreateAsync();\n        await using var browser = await playwright.Webkit.LaunchAsync(new()\n        {\n            Headless = false\n        });\n        var page = await browser.NewPageAsync();\n\n        await page.ExposeFunctionAsync(\"sha256\", (string input) =>\n        {\n            return Convert.ToBase64String(\n                SHA256.Create().ComputeHash(System.Text.Encoding.UTF8.GetBytes(input)));\n        });\n\n        await page.SetContentAsync(\"<script>\\n\" +\n        \"  async function onClick() {\\n\" +\n        \"    document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\\n\" +\n        \"  }\\n\" +\n        \"</script>\\n\" +\n        \"<button onclick=\\\"onClick()\\\">Click me</button>\\n\" +\n        \"<div></div>\");\n\n        await page.ClickAsync(\"button\");\n        Console.WriteLine(await page.TextContentAsync(\"div\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Console Debugging\nDESCRIPTION: Commands to run Playwright Python tests with console debugging enabled using pytest.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/debug.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=console pytest -s\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PWDEBUG=console\npytest -s\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PWDEBUG=console\npytest -s\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Package Dependencies\nDESCRIPTION: Commands to add Playwright NuGet packages for different test frameworks\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/intro-csharp.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.Playwright.NUnit\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.Playwright.MSTest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.Playwright.Xunit\n```\n\n----------------------------------------\n\nTITLE: Event Predicate Configuration\nDESCRIPTION: Function configuration for event handling that determines when waiting should resolve based on event data.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\npredicate: (eventData) => boolean\n```\n\n----------------------------------------\n\nTITLE: Setting Up TypeScript in a Svelte Project\nDESCRIPTION: Command to run the included setup script that configures a TypeScript development environment for a Svelte project.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode scripts/setupTypeScript.js\n```\n\n----------------------------------------\n\nTITLE: Custom Callback on Every Actionability Check with Locator Handler in JavaScript\nDESCRIPTION: Sets up a locator handler with the body element to run a custom JavaScript function before every actionability check. Uses the noWaitAfter option since the handler doesn't hide the body element.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n// Setup the handler.\nawait page.addLocatorHandler(page.locator('body'), async () => {\n  await page.evaluate(() => window.removeObstructionsForTestIfNeeded());\n}, { noWaitAfter: true });\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event on ElementHandle in Python (Sync)\nDESCRIPTION: Demonstrates dispatching a click event on an ElementHandle using the dispatch_event method in Python with synchronous syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nelement_handle.dispatch_event(\"click\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Directory and .gitignore Entry with PowerShell\nDESCRIPTION: Uses PowerShell to create an 'playwright\\.auth' directory and to append its path to '.gitignore'. This ensures authentication states are not stored in version control systems.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/auth.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Item -ItemType Directory -Force -Path playwright\\.auth\nAdd-Content -path .gitignore \"`r`nplaywright/.auth\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Mouse Button for Playwright Click Actions\nDESCRIPTION: Defines the `button` parameter for Playwright click-related actions, specifying which mouse button to use ('left', 'right', or 'middle'). Defaults to 'left'.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- `button` <[MouseButton]<\"left\"|\"right\"|\"middle\">>\n```\n\n----------------------------------------\n\nTITLE: Declaring Serial Test Group in JavaScript\nDESCRIPTION: Shows how to declare a group of tests that should always be run serially using test.describe.serial(). This is used when tests need to be executed in a specific order, but is generally discouraged in favor of isolated tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-test.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe.serial('group', () => {\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Browser Storage Usage\nDESCRIPTION: Command to check disk space usage of installed browsers in the cache directory\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ndu -hs ~/Library/Caches/ms-playwright/*\n281M  chromium-XXXXXX\n187M  firefox-XXXX\n180M  webkit-XXXX\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Headless Shell - Python\nDESCRIPTION: Python command to install Playwright with headless shell dependencies\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nplaywright install --with-deps --only-shell\n```\n\n----------------------------------------\n\nTITLE: Accessing CDPSessionEvent Name in C#\nDESCRIPTION: The CDPSessionEvent class has a property called eventName that returns the name of the event as a string. This property can be used to identify the specific event being handled.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-cdpsessionevent.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nproperty: CDPSessionEvent.eventName\n- returns: <[string]>\n```\n\n----------------------------------------\n\nTITLE: Logging Focused Node Name in Accessibility Snapshot with Python (Sync)\nDESCRIPTION: Searches and logs the name of the focused node within an accessibility snapshot in a synchronous Python environment. Utilizes `find_focused_node()`, a helper function for recursive node analysis, provided a snapshot captured through Playwright's deprecated method.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-accessibility.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef find_focused_node(node):\n    if node.get(\"focused\"):\n        return node\n    for child in (node.get(\"children\") or []):\n        found_node = find_focused_node(child)\n        if found_node:\n            return found_node\n    return None\n\nsnapshot = page.accessibility.snapshot()\nnode = find_focused_node(snapshot)\nif node:\n    print(node[\"name\"])\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event on ElementHandle in JavaScript\nDESCRIPTION: Demonstrates how to dispatch a click event on an ElementHandle using the dispatchEvent method in JavaScript.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nawait elementHandle.dispatchEvent('click');\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Linter\nDESCRIPTION: Command to run the linter for checking coding style and other issues in the Playwright codebase.\nSOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Returning Open Browser Contexts in Async Playwright Python\nDESCRIPTION: This Python snippet demonstrates using Playwright's async API to return the number of open browser contexts. It is part of context management, showcasing Playwright's features for handling browser contexts. Requires Playwright installed in a Python async environment.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nbrowser = await pw.webkit.launch()\nprint(len(browser.contexts)) # prints `0`\ncontext = await browser.new_context()\nprint(len(browser.contexts)) # prints `1`\n```\n\n----------------------------------------\n\nTITLE: Evaluating Selector on ElementHandle in Python (Async)\nDESCRIPTION: Illustrates evaluating a selector on an ElementHandle and extracting inner text in Python using async syntax.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ntweet_handle = await page.query_selector(\".tweet\")\nassert await tweet_handle.eval_on_selector(\".like\", \"node => node.innerText\") == \"100\"\nassert await tweet_handle.eval_on_selector(\".retweets\", \"node => node.innerText\") == \"10\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Chromium Path\nDESCRIPTION: Example of setting a custom Chromium binary path using the BIDI_CRPATH environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/bidi/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nBIDI_CRPATH='/Users/myself/Downloads/chrome-mac-arm64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing'\n```\n\n----------------------------------------\n\nTITLE: Implementing waitForAngular Polyfill Using Protractor\nDESCRIPTION: A function that polyfills Protractor's waitForAngular functionality in Playwright by utilizing Protractor's clientSideScripts. This is useful for edge cases where auto-waiting is insufficient.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/protractor-js.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nasync function waitForAngular(page) {\n  const clientSideScripts = require('protractor/built/clientsidescripts.js');\n\n  async function executeScriptAsync(page, script, ...scriptArgs) {\n    await page.evaluate(`\n      new Promise((resolve, reject) => {\n        const callback = (errMessage) => {\n          if (errMessage)\n            reject(new Error(errMessage));\n          else\n            resolve();\n        };\n        (function() {${script}}).apply(null, [...${JSON.stringify(scriptArgs)}, callback]);\n      })\n    `);\n  }\n\n  await executeScriptAsync(page, clientSideScripts.waitForAngular, '');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright from Custom Artifact Repository (Java)\nDESCRIPTION: Commands to install Playwright browsers from a custom artifact repository for Java implementations using the PLAYWRIGHT_DOWNLOAD_HOST environment variable.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching Click Event on ElementHandle in C#\nDESCRIPTION: Shows how to dispatch a click event on an ElementHandle using the DispatchEventAsync method in C#.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nawait elementHandle.DispatchEventAsync(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript in Worker Context\nDESCRIPTION: Defines the pageFunction parameter for worker evaluation functions in JavaScript. This allows executing JavaScript functions in a web worker context.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_46\n\nLANGUAGE: js\nCODE:\n```\n- `pageFunction` <[function]|[string]>\n\nFunction to be evaluated in the worker context.\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Component Testing with Playwright\nDESCRIPTION: This HTML file serves as the template for rendering components during testing. It includes a root div for mounting components and links to a script file for runtime setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-components-js.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./index.ts\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using SocksProxyAgent with HTTPS Module\nDESCRIPTION: Example showing how to use SocksProxyAgent with Node.js HTTPS module for secure requests through a SOCKS proxy. Demonstrates proxy setup and HTTPS request handling.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar url = require('url');\nvar https = require('https');\nvar SocksProxyAgent = require('socks-proxy-agent');\n\nvar proxy = process.env.socks_proxy || 'socks://127.0.0.1:1080';\nconsole.log('using proxy server %j', proxy);\n\nvar endpoint = process.argv[2] || 'https://encrypted.google.com/';\nconsole.log('attempting to GET %j', endpoint);\nvar opts = url.parse(endpoint);\n\nvar agent = new SocksProxyAgent(proxy);\nopts.agent = agent;\n\nhttps.get(opts, function (res) {\n\tconsole.log('\"response\" event!', res.headers);\n\tres.pipe(process.stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Standalone Docker Container\nDESCRIPTION: Command to start a Selenium standalone Docker container with Chrome support.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 4444:4444 --shm-size=\"2g\" -e SE_NODE_GRID_URL=\"http://localhost:4444\" selenium/standalone-chromium:latest\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebView Process PID\nDESCRIPTION: This method returns the process ID (PID) of the WebView. It is a synchronous method that returns an integer.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-androidwebview.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmethod: AndroidWebView.pid\n- returns: <[int]>\n```\n\n----------------------------------------\n\nTITLE: ARIA Level Option for Role Selectors\nDESCRIPTION: Defines the `level` option for role-based selectors to match elements with a specific level number, typically used with headings and list items.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.27\n- `level` <[int]>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using an ElementHandle with waitForSelector in Python (Sync)\nDESCRIPTION: Shows how to obtain an [ElementHandle] for a DOM element (`#box`) using `page.wait_for_selector` in synchronous Python, which waits for visibility. It then demonstrates asserting the element's bounding box dimensions and class attribute. Note: Using [ElementHandle] is discouraged in favor of [Locator].\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/handles.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python sync\n# Get the element handle\nelement_handle = page.wait_for_selector('#box')\n\n# Assert bounding box for the element\nbounding_box = element_handle.bounding_box()\nassert bounding_box.width == 100\n\n# Assert attribute for the element\nclass_names = element_handle.get_attribute('class')\nassert 'highlighted' in class_names\n```\n```\n\n----------------------------------------\n\nTITLE: Using ElementHandle.waitForSelector in C#\nDESCRIPTION: Demonstrates the usage of waitForSelector method on an ElementHandle in C# to wait for a child element to appear in the DOM.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nawait page.SetContentAsync(\"<div><span></span></div>\");\nvar div = await page.QuerySelectorAsync(\"div\");\n// Waiting for the \"span\" selector relative to the div.\nvar span = await page.WaitForSelectorAsync(\"span\", WaitForSelectorState.Attached);\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server\nDESCRIPTION: Starts the React application in development mode with hot-reloading enabled, serving on localhost:3000.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Playwright for Bidi Testing\nDESCRIPTION: Initial setup commands to clone Playwright repository, build the project, install Chromium, and run Bidi tests for Firefox projects.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/bidi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/microsoft/playwright.git\ncd playwright\nnpm run build # call `npm run watch` for watch mode\nnpx playwright install chromium\nnpm run biditest -- --project='moz-firefox-*'\n```\n\n----------------------------------------\n\nTITLE: Setting Delay Between Mouse Down and Up in Playwright\nDESCRIPTION: Defines the `delay` float parameter for Playwright click actions, specifying the time in milliseconds to wait between the `mousedown` and `mouseup` events. Defaults to 0 ms.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- `delay` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Using waitForTimeout for debugging in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the waitForTimeout method for debugging purposes in JavaScript. It waits for 1 second.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-page.md#2025-04-22_snippet_150\n\nLANGUAGE: javascript\nCODE:\n```\n// wait for 1 second\nawait page.waitForTimeout(1000);\n```\n\n----------------------------------------\n\nTITLE: Returning Open Browser Contexts in Playwright Java\nDESCRIPTION: This Java snippet shows how to use Playwright to return the count of open browser contexts before and after creating a new one. It highlights Playwright’s context management capabilities. Requires Playwright Java library and a Java development setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-browser.md#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nBrowser browser = pw.webkit().launch();\nSystem.out.println(browser.contexts().size()); // prints \"0\"\nBrowserContext context = browser.newContext();\nSystem.out.println(browser.contexts().size()); // prints \"1\"\n```\n\n----------------------------------------\n\nTITLE: Mask Color Customization for Screenshots\nDESCRIPTION: Defines the `maskColor` option for customizing the color of masked element overlays in screenshots. Defaults to pink (#FF00FF).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\n* since: v1.35\n- `maskColor` <[string]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling Interval for Playwright `waitForFunction` (CSharp/Java)\nDESCRIPTION: Defines the `pollingInterval` parameter for Playwright's `waitForFunction` in C# and Java. If specified, it sets the interval in milliseconds at which the expression is evaluated. If omitted, the expression is evaluated using `requestAnimationFrame`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n- `pollingInterval` <[float]>\n```\n\n----------------------------------------\n\nTITLE: Output Example for Passed Assertion with Custom Message\nDESCRIPTION: Displays how a passing assertion with a custom message appears in test reports, showing the message as part of the passing step.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-assertions-js.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n✅ should be logged in    @example.spec.ts:18\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub and Node Docker Containers\nDESCRIPTION: Commands to start Selenium hub and node Docker containers for a distributed setup.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/selenium-grid.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.25.0\ndocker run -d -p 5555:5555 \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_HOST=<selenium-hub-ip> \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -e SE_NODE_GRID_URL=\"http://<selenium-hub-ip>:4444\"\n    selenium/node-chromium:4.25.0\n```\n\n----------------------------------------\n\nTITLE: WebSocket Proxy Connection Example with ws Module\nDESCRIPTION: Example demonstrating how to establish a WebSocket connection through a proxy server using the https-proxy-agent module with the ws WebSocket client library.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar url = require('url');\nvar WebSocket = require('ws');\nvar HttpsProxyAgent = require('https-proxy-agent');\n\n// HTTP/HTTPS proxy to connect to\nvar proxy = process.env.http_proxy || 'http://168.63.76.32:3128';\nconsole.log('using proxy server %j', proxy);\n\n// WebSocket endpoint for the proxy to connect to\nvar endpoint = process.argv[2] || 'ws://echo.websocket.org';\nvar parsed = url.parse(endpoint);\nconsole.log('attempting to connect to WebSocket %j', endpoint);\n\n// create an instance of the `HttpsProxyAgent` class with the proxy server information\nvar options = url.parse(proxy);\n\nvar agent = new HttpsProxyAgent(options);\n\n// finally, initiate the WebSocket connection\nvar socket = new WebSocket(endpoint, { agent: agent });\n\nsocket.on('open', function () {\n  console.log('\"open\" event!');\n  socket.send('hello world');\n});\n\nsocket.on('message', function (data, flags) {\n  console.log('\"message\" event! %j %j', data, flags);\n  socket.close();\n});\n```\n\n----------------------------------------\n\nTITLE: ElementHandle Methods Overview\nDESCRIPTION: Collection of element interaction methods including getAttribute, hover, innerHTML, innerText, inputValue, and various state checks. Many methods are marked as discouraged in favor of Locator-based alternatives.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// Example method signatures\nasync getAttribute(name: string): Promise<string|null>;\nasync hover(options?: HoverOptions): Promise<void>;\nasync innerHTML(): Promise<string>;\nasync innerText(): Promise<string>;\nasync inputValue(): Promise<string>;\nasync isChecked(): Promise<boolean>;\nasync isDisabled(): Promise<boolean>;\nasync isEditable(): Promise<boolean>;\nasync isEnabled(): Promise<boolean>;\nasync isHidden(): Promise<boolean>;\nasync isVisible(): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Deploying a Svelte App to Vercel\nDESCRIPTION: Commands to navigate to the public directory and deploy the Svelte application to Vercel with a custom project name.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd public\nvercel deploy --name my-project\n```\n\n----------------------------------------\n\nTITLE: Screenshot Scale Option for Device vs CSS Pixels\nDESCRIPTION: Defines the `scale` option that determines whether screenshots use CSS pixels or device pixels, affecting image size on high-DPI devices.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\n- `scale` <[ScreenshotScale]<\"css\"|\"device\">>\n```\n\n----------------------------------------\n\nTITLE: TestError Class Properties Implementation\nDESCRIPTION: Properties definition of TestError class for handling test execution errors in Playwright. Includes properties for error cause, message, stack trace, thrown value, location, and code snippet.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-reporter-api/class-testerror.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass TestError {\n  cause: ?TestError;       // Error cause when available\n  message: ?string;       // Error message for Error instances\n  stack: ?string;         // Error stack trace\n  value: ?string;         // Thrown value for non-Error instances\n  location: ?Location;    // Error location in source code\n  snippet: ?string;       // Source code snippet with error highlight\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Playwright in a .NET Console Project\nDESCRIPTION: Commands to create a new console project, add the Playwright package, build the project, and install required browsers.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-csharp.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create project\ndotnet new console -n PlaywrightDemo\ncd PlaywrightDemo\n\n# Add project dependency\ndotnet add package Microsoft.Playwright\n# Build the project\ndotnet build\n# Install required browsers - replace netX with actual output folder name, e.g. net8.0.\npwsh bin/Debug/netX/playwright.ps1 install\n\n# If the pwsh command does not work (throws TypeNotFound), make sure to use an up-to-date version of PowerShell.\ndotnet tool update --global PowerShell\n```\n\n----------------------------------------\n\nTITLE: Ignoring All Default Browser Arguments in Playwright (CSharp/Java)\nDESCRIPTION: Defines the `ignoreAllDefaultArgs` boolean browser launch option for Playwright in C# and Java. If `true`, Playwright omits all its default launch arguments, using only those provided in `args`. This is a potentially dangerous option. Defaults to `false`.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n- `ignoreAllDefaultArgs` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Checking in JavaScript\nDESCRIPTION: Adds TypeScript checking to JavaScript files using @ts-check directive\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/library-js.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Firefox Beta Channel\nDESCRIPTION: Command to install the beta version of Firefox browser using Puppeteer's browser installation utility.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/bidi/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @puppeteer/browsers install firefox@beta\n```\n\n----------------------------------------\n\nTITLE: Location Class Properties Definition in Playwright JavaScript API\nDESCRIPTION: Defines three core properties of the Location class: file path as string, line number as integer, and column number as integer. Used to pinpoint exact positions of test cases and suites in source code.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/test-api/class-location.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Location {\n  file: string;    // Path to the source file\n  line: number;    // Line number in the source file\n  column: number;  // Column number in the source file\n}\n```\n\n----------------------------------------\n\nTITLE: ElementHandle Selector Methods\nDESCRIPTION: Methods for finding elements within the subtree of an ElementHandle using CSS selectors. These methods are discouraged in favor of Locator-based alternatives.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-elementhandle.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nasync querySelector(selector: string): Promise<ElementHandle|null>;\nasync querySelectorAll(selector: string): Promise<Array<ElementHandle>>;\n```\n\n----------------------------------------\n\nTITLE: Generating Server Certificate with OpenSSL\nDESCRIPTION: Creates a self-signed server certificate and private key for localhost testing. Includes subject alternative names for localhost and local.playwright domains.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/client-certificates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req \\\n\t-x509 \\\n\t-newkey rsa:4096 \\\n\t-keyout server/server_key.pem \\\n\t-out server/server_cert.pem \\\n\t-nodes \\\n\t-days 365 \\\n\t-subj \"/CN=localhost/O=Client\\ Certificate\\ Demo\" \\\n\t-addext \"subjectAltName=DNS:localhost,DNS:local.playwright\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Way to Configure Custom Parameters in Playwright Config\nDESCRIPTION: Example showing the incorrect approach to defining custom parameters in Playwright configuration prior to v1.18, which no longer works in the current version.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/release-notes-js.md#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// WRONG: THIS SNIPPET DOES NOT WORK SINCE v1.18.\n\n// fixtures.js\nconst test = base.extend({\n  myParameter: 'default',\n});\n\n// playwright.config.js\nmodule.exports = {\n  use: {\n    myParameter: 'value',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Pulling Playwright Docker Image for JavaScript\nDESCRIPTION: Command to pull the Playwright Docker image for JavaScript applications from Microsoft Artifact Registry.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/docker.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mcr.microsoft.com/playwright:v%%VERSION%%-noble\n```\n\n----------------------------------------\n\nTITLE: Controlling Navigation Wait Behavior with Playwright `noWaitAfter` (Deprecated)\nDESCRIPTION: Defines the `noWaitAfter` boolean option for Playwright actions that trigger navigation. When true, Playwright does not wait for the navigation to complete or the page to start loading. This is intended for exceptional cases like navigating to inaccessible pages. Defaults to `false`, but will default to `true` in the future. (Deprecated - Behavior is changing).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- `noWaitAfter` <[boolean]>\n```\n\n----------------------------------------\n\nTITLE: Increasing Connection Timeout for Playwright Install (JavaScript)\nDESCRIPTION: Commands to increase the connection timeout when downloading Playwright browsers on slow networks for JavaScript implementations. The PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT value is in milliseconds.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 npx playwright install\n```\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\nnpx playwright install\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Defining Web Crawler Access Rules in robots.txt\nDESCRIPTION: This configuration allows all web crawlers unrestricted access to the website. It specifies that any user agent (*) has no disallowed paths, effectively permitting complete crawling of the site.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Playwright Repository\nDESCRIPTION: Instructions for cloning the Playwright repository, installing dependencies, and running the build in watch mode. Also includes steps for installing Playwright.\nSOURCE: https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/playwright\ncd playwright\nnpm ci\nnpm run watch\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: HTML Form Controls Example\nDESCRIPTION: Example HTML structure showing heading, checkbox and button elements for demonstrating role-based locators.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h3>Sign up</h3>\n<label>\n  <input type=\"checkbox\" /> Subscribe\n</label>\n<br/>\n<button>Submit</button>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Browsers\nDESCRIPTION: Commands to uninstall Playwright browsers for different programming languages\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/browsers.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright uninstall\nnpx playwright uninstall --all\n```\n\nLANGUAGE: java\nCODE:\n```\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"uninstall\"\nmvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"uninstall --all\"\n```\n\nLANGUAGE: python\nCODE:\n```\nplaywright uninstall\nplaywright uninstall --all\n```\n\nLANGUAGE: csharp\nCODE:\n```\npwsh bin/Debug/netX/playwright.ps1 uninstall\npwsh bin/Debug/netX/playwright.ps1 uninstall --all\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel CLI for Deployment\nDESCRIPTION: Command to globally install the Vercel CLI tool, which is needed for deploying Svelte applications to Vercel's hosting platform.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-svelte/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g vercel\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Removes the single build dependency and copies all configuration files into the project for full control. This is a one-way operation that cannot be reversed.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/components/ct-react17/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Select Element\nDESCRIPTION: HTML markup showing a <select> element with multiple selection enabled and three color options (Red, Green, Blue).\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/class-locator.md#2025-04-22_snippet_83\n\nLANGUAGE: html\nCODE:\n```\n<select multiple>\n  <option value=\"red\">Red</option>\n  <option value=\"green\">Green</option>\n  <option value=\"blue\">Blue</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Functions Core Tools for macOS\nDESCRIPTION: Commands to install Azure Functions Core Tools version 4 using Homebrew on macOS, including a note for upgrading from previous versions.\nSOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap azure/functions\nbrew install azure-functions-core-tools@4\n# if upgrading on a machine that has 2.x or 3.x installed:\nbrew link --overwrite azure-functions-core-tools@4\n```\n\n----------------------------------------\n\nTITLE: Defining Playwright Source Files in CMake\nDESCRIPTION: Specifies the source files to be compiled for the Playwright application, including Objective-C files for the app delegate, browser window controller, main entry point, and a toolbar item.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(Playwright_SOURCES\n    ${PLAYWRIGHT_DIR}/AppDelegate.m\n    ${PLAYWRIGHT_DIR}/BrowserWindowController.m\n    ${PLAYWRIGHT_DIR}/main.m\n    ${TOOLS_DIR}/Playwright/MBToolbarItem.m\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Required Libraries for Playwright in CMake\nDESCRIPTION: Defines the libraries that Playwright depends on, with WebKit as the primary dependency.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(Playwright_LIBRARIES\n    WebKit\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Button Example\nDESCRIPTION: Simple HTML button element example used to demonstrate role-based location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button>Sign in</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Up NIB Resources Compilation in CMake\nDESCRIPTION: Creates the directory structure for the application bundle and sets up custom commands to compile XIB interface files into NIB format using the ibtool utility.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/mac/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(Playwright_Contents_Directory ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Playwright.app/Contents)\nmake_directory(${Playwright_Contents_Directory}/Resources)\nadd_custom_command(OUTPUT ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib\n    COMMAND ibtool --compile ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib ${PLAYWRIGHT_DIR}/BrowserWindow.xib VERBATIM)\nadd_custom_command(OUTPUT ${Playwright_Contents_Directory}/Resources/MainMenu.nib\n    COMMAND ibtool --compile ${Playwright_Contents_Directory}/Resources/MainMenu.nib ${PLAYWRIGHT_DIR}/MainMenu.xib VERBATIM)\nadd_custom_target(PlaywrightNibs ALL DEPENDS\n    ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib\n    ${Playwright_Contents_Directory}/Resources/MainMenu.nib\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Playwright in CMake\nDESCRIPTION: Specifies the source files to be compiled for the Playwright executable, including the main window implementation, WebKit browser window, and Windows entry point.\nSOURCE: https://github.com/microsoft/playwright/blob/main/browser_patches/webkit/embedder/Playwright/win/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(Playwright_SOURCES\n    Common.cpp\n    MainWindow.cpp\n    PlaywrightLib.rc\n    WebKitBrowserWindow.cpp\n    WinMain.cpp\n    stdafx.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Email Input Example\nDESCRIPTION: Example showing email input with placeholder for demonstrating placeholder-based location.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/locators.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"email\" placeholder=\"name@example.com\" />\n```\n\n----------------------------------------\n\nTITLE: Logging into Azure CLI\nDESCRIPTION: Command to log into Azure CLI, which will open a popup for authentication.\nSOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Creating Async HTTP Agent with Promises\nDESCRIPTION: Example demonstrating how to create an HTTP agent using async/await and Promises with the agent-base module.\nSOURCE: https://github.com/microsoft/playwright/blob/main/packages/playwright-core/ThirdPartyNotices.txt#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nagent(async function (req, opts) {\n  await sleep(1000);\n  // etc…\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing the Flakiness Dashboard Function to Azure\nDESCRIPTION: Command to publish the flakiness dashboard function to Azure using Azure Functions Core Tools.\nSOURCE: https://github.com/microsoft/playwright/blob/main/utils/flakiness-dashboard/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfunc azure functionapp publish folio-flakiness-dashboard --javascript\n```\n\n----------------------------------------\n\nTITLE: Setting Videos Path for JavaScript Browser Context (Deprecated)\nDESCRIPTION: Defines the deprecated videosPath option for browser contexts in JavaScript. This has been replaced by the recordVideo option.\nSOURCE: https://github.com/microsoft/playwright/blob/main/docs/src/api/params.md#2025-04-22_snippet_72\n\nLANGUAGE: js\nCODE:\n```\n- `videosPath` <[path]>\n\n```\n\n----------------------------------------\n\nTITLE: Running Dependency Mapping Script for Ubuntu Bionic\nDESCRIPTION: This command demonstrates how to run the mapping script for Ubuntu Bionic. The script executes in a Docker container with the specified distribution and saves results to a 'RUN_RESULT' file.\nSOURCE: https://github.com/microsoft/playwright/blob/main/utils/linux-browser-dependencies/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./run.sh ubuntu:bionic\n```\n\n----------------------------------------\n\nTITLE: React License Headers for Production Files\nDESCRIPTION: This snippet contains the license headers for multiple React production minified JavaScript files including react-dom, react-jsx-runtime, react, and scheduler. Each header indicates that the respective file is licensed under the MIT license by Facebook, Inc.\nSOURCE: https://github.com/microsoft/playwright/blob/main/tests/assets/stress/static/js/main.cc4a7955.js.LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n----------------------------------------\n\nTITLE: Specifying Black Formatter Version\nDESCRIPTION: Defines the exact version of the Black code formatter required for the project. This specification ensures consistent code formatting across all development environments.\nSOURCE: https://github.com/microsoft/playwright/blob/main/utils/doclint/linting-code-snippets/python/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblack==24.3.0\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Links in Playwright Support Documentation\nDESCRIPTION: This snippet defines markdown links used throughout the document for easy reference to important resources such as GitHub issues, documentation, and the Discord server.\nSOURCE: https://github.com/microsoft/playwright/blob/main/SUPPORT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[gh-issues]: https://github.com/microsoft/playwright/issues/\n[docs]: https://playwright.dev/\n[discord-server]: https://aka.ms/playwright/discord\n```"
  }
]