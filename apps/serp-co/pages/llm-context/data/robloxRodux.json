[
  {
    "owner": "roblox",
    "repo": "rodux",
    "content": "TITLE: Implementing Rodux Store with Phone Number and Friends Tracking in Lua\nDESCRIPTION: This code demonstrates a complete Rodux implementation that manages a user's phone number and friends list. It shows how to create action creators, define reducers for different pieces of state, combine reducers, initialize a store with middleware, and dispatch actions. The example includes logger middleware to show state changes in the console.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/example.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Rodux = require(ReplicatedStorage.Rodux)\n\n-- Action creator for the ReceivedNewPhoneNumber action\nlocal function ReceivedNewPhoneNumber(phoneNumber)\n\treturn {\n\t\ttype = \"ReceivedNewPhoneNumber\",\n\t\tphoneNumber = phoneNumber,\n\t}\nend\n\n-- Action creator for the MadeNewFriends action\nlocal function MadeNewFriends(listOfNewFriends)\n\treturn {\n\t\ttype = \"MadeNewFriends\",\n\t\tnewFriends = listOfNewFriends,\n\t}\nend\n\n-- Reducer for the current user's phone number\nlocal phoneNumberReducer = Rodux.createReducer(\"\", {\n\tReceivedNewPhoneNumber = function(state, action)\n\t\treturn action.phoneNumber\n\tend,\n})\n\n-- Reducer for the current user's list of friends\nlocal friendsReducer = Rodux.createReducer({}, {\n\tMadeNewFriends = function(state, action)\n\t\tlocal newState = {}\n\n\t\t-- Since state is read-only, we copy it into newState\n\t\tfor index, friend in ipairs(state) do\n\t\t\tnewState[index] = friend\n\t\tend\n\n\t\tfor _, friend in ipairs(action.newFriends) do\n\t\t\ttable.insert(newState, friend)\n\t\tend\n\n\t\treturn newState\n\tend,\n})\n\nlocal reducer = Rodux.combineReducers({\n\tmyPhoneNumber = phoneNumberReducer,\n\tmyFriends = friendsReducer,\n})\n\nlocal store = Rodux.Store.new(reducer, nil, {\n\tRodux.loggerMiddleware,\n})\n\nstore:dispatch(ReceivedNewPhoneNumber(\"15552345678\"))\nstore:dispatch(MadeNewFriends({\n\t\"Cassandra\",\n\t\"Joe\",\n}))\n\n--[[\n\tExpected output to the developer console:\n\n\tAction dispatched: {\n\t    phoneNumber = \"12345678\" (string)\n\t    type = \"ReceivedNewPhoneNumber\" (string)\n\t}\n\tState changed to: {\n\t    myPhoneNumber = \"12345678\" (string)\n\t    myFriends = {\n\t    }\n\t}\n\tAction dispatched: {\n\t    newFriends = {\n\t        1 = \"Cassandra\" (string)\n\t        2 = \"Joe\" (string)\n\t    }\n\t    type = \"MadeNewFriends\" (string)\n\t}\n\tState changed to: {\n\t    myPhoneNumber = \"12345678\" (string)\n\t    myFriends = {\n\t        1 = \"Cassandra\" (string)\n\t        2 = \"Joe\" (string)\n\t    }\n\t}\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic Rodux Store Implementation with Reducer in Lua\nDESCRIPTION: Demonstrates the creation of a basic Rodux store with a reducer that handles a 'frobulate' action to increment a counter. Shows store initialization, state retrieval, and dispatching an action.\nSOURCE: https://github.com/roblox/rodux/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Rodux = require(script.Parent.Rodux)\n\nlocal function reducer(state, action)\n\tstate = state or {\n\t\tfrobulations = 0,\n\t}\n\n\tif action.type == \"frobulate\" then\n\t\treturn {\n\t\t\tfrobulations = state.frobulations + 1,\n\t\t}\n\tend\n\n\treturn state\nend\n\nlocal store = Rodux.Store.new(reducer)\n\nstore:getState() -- { frobulations = 0 }\n\nstore:dispatch({\n\ttype = \"frobulate\",\n})\n\nstore:getState() -- { frobulations = 1 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Delay Middleware in Rodux (Lua)\nDESCRIPTION: This code snippet demonstrates how to create and use a custom middleware in Rodux that delays the processing of actions by one second. It shows the structure of a middleware function and how to initialize a store with the custom middleware.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/advanced/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal reducer = function(state, action)\n\t-- the body of your reducer\nend\n\nlocal initialState = {}\n\nlocal delayOneSecondMiddleware = function(nextDispatch, store)\n\treturn function(action)\n\t\tdelay(1, function()\n\t\t\t--[[\n\t\t\t\tnextDispatch passes the action to the next middleware provided\n\t\t\t\tto the store at initialization or to the reducer if the action\n\t\t\t\thas already been processed by all the provided middleware.\n\t\t\t]]\n\t\t\tnextDispatch(action)\n\t\tend)\n\tend\nend\n\nlocal store = Rodux.Store.new(reducer, initialState, {\n\tdelayOneSecondMiddleware,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Rodux Store and Accessing State in Lua\nDESCRIPTION: This code snippet shows how to create a new Rodux store with a reducer function and how to access the current state using the getState method.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/store.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal store = Rodux.Store.new(function(action, currentState)\n\t-- The body of your reducer\nend)\n\nlocal state = store:getState()\n```\n\n----------------------------------------\n\nTITLE: Rodux Helper Functions Implementation in Lua\nDESCRIPTION: Shows how to use Rodux.createReducer and Rodux.combineReducers to create more concise and maintainable reducer implementations with the same functionality as the manual approach.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/reducers.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal phoneNumberReducer = Rodux.createReducer(nil, {\n\tReceivedNewPhoneNumber = function(state, action)\n\t\treturn action.phoneNumber\n\tend,\n})\n\nlocal friendsReducer = Rodux.createReducer({}, {\n\tMadeNewFriends = function(state, action)\n\t\tlocal newState = {}\n\n\t\t-- Since state is read-only, we copy it into newState\n\t\tfor index, friend in ipairs(state) do\n\t\t\tnewState[index] = friend\n\t\tend\n\n\t\tfor _, friend in ipairs(action.friends)\n\t\t\ttable.insert(newState, friend)\n\t\tend\n\n\t\treturn newState\n\tend,\n})\n\nlocal reducer = Rodux.combineReducers({\n\tmyPhoneNumber = phoneNumberReducer,\n\tmyFriends = friendsReducer,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Thunk Middleware for Asynchronous Actions in Rodux\nDESCRIPTION: Demonstrates how to set up a Rodux store with thunk middleware and dispatch an asynchronous action using a function. The thunk middleware intercepts function actions and executes them with the store as an argument, allowing for complex logic and dispatching multiple actions.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/advanced/thunks.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal reducer = function(state, action)\n\t--[[\n\t\tReducer that handles all actions for our store,\n\t\tincluding actions of the type \"MadeNewFriends\".\n\t]]\nend\n\nlocal initialState = {}\n\nlocal store = Rodux.Store.new(reducer, initialState, {\n\tRodux.thunkMiddleware,\n})\n\n--[[\n\tOur thunkMiddleware will process this action as a thunk\n\tsince it is a Lua function\n]]\nstore:dispatch(function(store)\n\tgetAsyncNewFriendsForUser(\"Sarah\", function(result)\n\t\tstore:dispatch({\n\t\t\ttype = \"MadeNewFriends\",\n\t\t\tnewFriends = result,\n\t\t})\n\tend)\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rodux Store in Lua\nDESCRIPTION: Creates and returns a new Store instance with optional initial state, middlewares, error reporter, and devtools.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nStore.new(reducer, [initialState, [middlewares, [errorReporter, [devtools]]]])\n```\n\n----------------------------------------\n\nTITLE: Creating a Reducer with Rodux in Lua\nDESCRIPTION: Demonstrates how to use the createReducer helper function to create a reducer with initial state and action handlers.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal reducer = createReducer(initialState, {\n\tsetFoo = function(state, action)\n\t\t-- Handle the setFoo action\n\tend,\n\n\tsetBar = function(state, action)\n\t\t-- Handle the setBar action\n\tend\n})\n```\n\n----------------------------------------\n\nTITLE: Defining State Structure in Lua for Rodux Store\nDESCRIPTION: This snippet demonstrates how to structure the state object in a Rodux store. It shows an example state with a phone number and a list of friends.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/store.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal exampleState = {\n\tmyPhoneNumber = \"15552345678\",\n\tmyFriends = {\n\t\t\"Joe\",\n\t\t\"Cassandra\",\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Combined Reducers Implementation in Lua\nDESCRIPTION: Demonstrates combining multiple reducers manually for handling different parts of the application state. Includes friends list management and phone number state management with proper state immutability handling.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/reducers.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal friendsReducer = function(state, action)\n\t--[[\n\t\tThe state might be nil the first time this reducer is executed.\n\t\tIn that case, we need to initialize our state to be the empty table.\n\t]]\n\tstate = state or {}\n\n\tif action.type == \"MadeNewFriends\" then\n\t\tlocal newState = {}\n\n\t\t-- Since state is read-only, we copy it into newState\n\t\tfor index, friend in ipairs(state) do\n\t\t\tnewState[index] = friend\n\t\tend\n\n\t\tfor _, friend in ipairs(action.newFriends)\n\t\t\ttable.insert(newState, friend)\n\t\tend\n\n\t\treturn newState\n\tend\n\n\treturn state\nend\n\n--[[\n\tnote that the reducer for our entire application is defined by a table of\n\tsub-reducers where each sub-reducer is responsible for one portion of the\n\toverall state.\n]]\nlocal reducer = function(state, action)\n\treturn {\n\t\tmyPhoneNumber = phoneNumberReducer(state.myPhoneNumber, action),\n\t\tmyFriends = friendsReducer(state.myFriends, action),\n\t}\nend\n```\n\n----------------------------------------\n\nTITLE: Combining Reducers in Rodux with Lua\nDESCRIPTION: Shows how to use the combineReducers helper function to combine multiple reducers into a single reducer.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal reducer = combineReducers({\n\tkey1 = reducer1,\n\tkey2 = reducer2,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Action Creator in Lua\nDESCRIPTION: Demonstrates how to create a basic action creator function that returns an action object with a type and payload for handling phone numbers.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/actions.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function ReceivedNewPhoneNumber(phoneNumber)\n\treturn {\n\t\ttype = \"ReceivedNewPhoneNumber\",\n\t\tphoneNumber = phoneNumber,\n\t}\nend\n\nreturn ReceivedNewPhoneNumber\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Thunk Middleware with Additional Arguments in Rodux\nDESCRIPTION: Shows how to create custom thunk middleware with extra arguments using Rodux.makeThunkMiddleware. This approach allows injecting custom dependencies like API services that can be accessed within thunk functions alongside the store.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/advanced/thunks.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal myThunkMiddleware = Rodux.makeThunkMiddleware(myCustomArg)\nlocal store = Rodux.Store.new(reducer, initialState, {\n\tmyThunkMiddleware,\n})\n\nstore:dispatch(function(store, myCustomArg)\n\tprint(\"Hello from a thunk with extra argument:\", myCustomArg)\n\tstore:dispatch({\n\t\ttype = \"thunkAction\"\n\t})\nend)\n```\n\n----------------------------------------\n\nTITLE: Basic Phone Number Reducer Implementation in Lua\nDESCRIPTION: A simple reducer function that handles phone number state updates. It demonstrates the basic pattern of checking action types and returning new state without modifying the existing state.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/reducers.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal phoneNumberReducer = function(state, action)\n\tif action.type == \"ReceivedNewPhoneNumber\" then\n\t\treturn action.phoneNumber\n\tend\n\n\treturn state\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an Action Creator with Rodux in Lua\nDESCRIPTION: Shows how to use the makeActionCreator helper function to create an action creator that automatically populates the action type.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nreturn makeActionCreator(\"SetFoo\", function(value)\n\t-- The action creator will automatically add the 'type' field\n\treturn {\n\t\tvalue = value,\n\t}\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorReporter Interface Structure\nDESCRIPTION: Defines the structure of the ErrorReporter interface used by Rodux.Store.new for handling errors during reducer execution and state updates.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/advanced/error-reporters.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nErrorReporter = {\n\treportReducerError(prevState, action, errorResult) -> (),\n\treportUpdateError(prevState, currentState, actionLog, errorResult) -> (),\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Rodux Store Changes in Lua\nDESCRIPTION: Demonstrates how to connect a listener function to the store's changed signal, which fires when the store's state changes.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nstore.changed:connect(function(newState, oldState)\n\t-- do something with newState or oldState\nend)\n```\n\n----------------------------------------\n\nTITLE: Using makeActionCreator Helper in Lua\nDESCRIPTION: Demonstrates using Rodux's makeActionCreator helper method to create an action creator with automatic type field population.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/actions.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nreturn makeActionCreator(\"ReceivedNewPhoneNumber\", function(phoneNumber)\n\treturn {\n\t\tphoneNumber = phoneNumber,\n\t}\nend)\n```\n\n----------------------------------------\n\nTITLE: Using Thunk Middleware in Rodux with Lua\nDESCRIPTION: Shows how to use the thunkMiddleware to dispatch functions that can perform asynchronous tasks and dispatch additional actions.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal store = Store.new(reducer, initialState, { thunkMiddleware })\n\nstore:dispatch(function(store)\n\tprint(\"Hello from a thunk!\")\n\n\tstore:dispatch({\n\t\ttype = \"thunkAction\"\n\t})\nend)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions to Store in Lua\nDESCRIPTION: Shows how to dispatch an action to a Rodux store using Store:dispatch method with a reducer function.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/actions.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal store = Store.new(function(currentState, action)\n\t-- The body of your reducer\nend)\n\nstore:dispatch(ReceivedNewPhoneNumber(\"15552345678\"))\n```\n\n----------------------------------------\n\nTITLE: Default Rodux Error Reporter Implementation\nDESCRIPTION: Shows the default error reporter implementation in Rodux that simply rethrows errors with formatted messages for both reducer and update errors.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/advanced/error-reporters.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal rethrowErrorReporter = {\n\treportReducerError = function(prevState, action, errorResult)\n\t\terror(string.format(\"Received error: %s\\n\\n%s\", errorResult.message, errorResult.thrownValue))\n\tend,\n\treportUpdateError = function(prevState, currentState, lastActions, errorResult)\n\t\terror(string.format(\"Received error: %s\\n\\n%s\", errorResult.message, errorResult.thrownValue))\n\tend,\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Arguments to Thunk Middleware in Rodux\nDESCRIPTION: Demonstrates how to pass multiple dependencies to thunk middleware by combining them into a single table. This allows thunks to access multiple services or utilities within the same context.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/advanced/thunks.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal myThunkMiddleware = Rodux.makeThunkMiddleware({\n    [RoactNetworking] = networking,\n    AvatarEditorService = AvatarEditorService,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Logger Middleware in Rodux with Lua\nDESCRIPTION: Demonstrates how to create a simple logger middleware that prints the type of each dispatched action.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal function simpleLogger(nextDispatch, store)\n\treturn function(action)\n\t\tprint(\"Dispatched action of type\", action.type)\n\n\t\treturn nextDispatch(action)\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Profiling Devtools for Roblox Rodux Store\nDESCRIPTION: A Lua implementation of a devtools object for Rodux that provides profiling and logging capabilities. The devtools hooks into store operations to track reducer execution time, state changes, and flush events. Includes functionality to maintain an event log with timestamps and performance metrics.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/advanced/devtools.md#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Devtools = {}\nDevtools.__className = \"Devtools\"\nDevtools.__index = Devtools\n\n-- Creates a new Devtools object\nfunction Devtools.new()\n\tlocal self = setmetatable({\n\t\t_events = table.create(100),\n\t\t_eventsIndex = 0,\n\t}, Devtools)\n\n\treturn self\nend\n\n-- Overwrites the store's reducer and flushHandler with wrapped versions that contain logging and profiling\nfunction Devtools:_hookIntoStore(store)\n\tself._store = store\n\tself._source = store._source\n\n\tself._originalReducer = store._reducer\n\tstore._reducer = function(state: any, action: any): any\n\t\tlocal startClock = os.clock()\n\t\tlocal result = self._originalReducer(state, action)\n\t\tlocal stopClock = os.clock()\n\n\t\tself:_addEvent(\"Reduce\", {\n\t\t\tname = action.type or tostring(action),\n\t\t\telapsedMs = (stopClock - startClock) * 1000,\n\t\t\taction = action,\n\t\t\tstate = result,\n\t\t})\n\t\treturn result\n\tend\n\n\tself._originalFlushHandler = store._flushHandler\n\tstore._flushHandler = function(...)\n\t\tlocal startClock = os.clock()\n\t\tself._originalFlushHandler(...)\n\t\tlocal stopClock = os.clock()\n\n\t\tself:_addEvent(\"Flush\", {\n\t\t\tname = \"@@FLUSH\",\n\t\t\telapsedMs = (stopClock - startClock) * 1000,\n\t\t\tlisteners = table.clone(store.changed._listeners),\n\t\t})\n\tend\nend\n\n-- Adds an event to the log\n-- Automatically adds event.timestamp and event.source\nfunction Devtools:_addEvent(eventType: \"Reduce\" | \"Flush\", props: { [any]: any })\n\tself._eventsIndex = (self._eventsIndex or 0) + 1\n\tself._events[self._eventsIndex] = {\n\t\teventType = eventType,\n\t\tsource = self._source,\n\t\ttimestamp = DateTime.now().UnixTimestampMillis,\n\t\tprops = props,\n\t}\nend\n\n-- Returns a shallow copy of the event log\nfunction Devtools:GetLoggedEvents()\n\treturn table.clone(self._events)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Thunk Middleware in Rodux with Lua\nDESCRIPTION: Demonstrates how to create a custom thunk middleware that injects an extra argument when invoking thunks.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal myThunkMiddleware = Rodux.makeThunkMiddleware(myCustomArg)\nlocal store = Store.new(reducer, initialState, { myThunkMiddleware })\n\nstore:dispatch(function(store, myCustomArg)\n\tprint(\"Hello from a thunk with extra argument:\", myCustomArg)\n\n\tstore:dispatch({\n\t\ttype = \"thunkAction\"\n\t})\nend)\n```\n\n----------------------------------------\n\nTITLE: Custom Analytics Error Reporter Implementation\nDESCRIPTION: Demonstrates a custom error reporter that sends detailed error information to an analytics backend, including state diffs and action logs.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/advanced/error-reporters.md#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal rethrowErrorReporter = {\n\treportReducerError = function(prevState, action, errorResult)\n\t\tlocal message = string.format(\n\t\t\t\"%s\\n\\nAction:\\n%s\\n\\nError contents:\\n%s\",\n\t\t\terrorResult.message,\n\t\t\tinspectObject(action),\n\t\t\ttostring(errorResult.thrownValue)\n\t\t)\n\t\tsendToAnalyticsBackend(message)\n\tend,\n\treportUpdateError = function(prevState, currentState, lastActions, errorResult)\n\t\tlocal message = string.format(\n\t\t\t\"%s\\n\\n\" ..\n\t\t\t\t\"Store changes in the last flush:\\n%s\\n\\n\" ..\n\t\t\t\t\"Most recent actions (starting with the oldest):\\n%s\\n\\n\" ..\n\t\t\t\t\"Error contents:\\n%s\",\n\t\t\terrorResult.message,\n\t\t\tinspectObject(tableDiff(prevState, currentState)),\n\t\t\tinspectObject(actionLog),\n\t\t\ttostring(errorResult.thrownValue)\n\t\t)\n\t\tsendToAnalyticsBackend(message)\n\tend,\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Actions by Creator Name in Lua\nDESCRIPTION: Shows how to identify actions using the action creator's name property in a reducer.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/introduction/actions.md#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n\tlocal MyAction = require(MyAction)\n\t...\n\tif action.type == MyAction.name then\n\t\t-- change some state!\n\tend\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handler for Rodux Store Updates\nDESCRIPTION: Function signature for error reporting callback that executes when errors occur during store updates. Receives the previous and current state, recent action history (last 3 actions), and error details. By default, it rethrows the caught error.\nSOURCE: https://github.com/roblox/rodux/blob/master/docs/api-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nreportUpdateError(prevState, currentState, actionLog, errorResult) -> ()\n```\n\n----------------------------------------\n\nTITLE: Running Rodux Tests\nDESCRIPTION: Command to run all of Rodux's tests using the Lemur testing framework.\nSOURCE: https://github.com/roblox/rodux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nlua test/lemur.lua\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report\nDESCRIPTION: Commands to run tests with LuaCov and generate a coverage report to ensure code quality.\nSOURCE: https://github.com/roblox/rodux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nlua -lluacov spec.lua\nluacov\n```\n\n----------------------------------------\n\nTITLE: Cloning Rodux Repository with Submodules\nDESCRIPTION: Command to clone the Rodux repository with all Git submodules initialized, which is necessary for the tests to work.\nSOURCE: https://github.com/roblox/rodux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --recurse-submodules https://github.com/Roblox/rodux.git\n```\n\n----------------------------------------\n\nTITLE: Running StyLua Code Formatter\nDESCRIPTION: Command to run StyLua to check if code formatting complies with the Roblox Lua Style Guide.\nSOURCE: https://github.com/roblox/rodux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nstylua -c src/\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules for Existing Repo\nDESCRIPTION: Command to initialize and update Git submodules for an already cloned Rodux repository.\nSOURCE: https://github.com/roblox/rodux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Roblox Rodux Documentation\nDESCRIPTION: This snippet lists the required Python packages for building the Roblox Rodux project documentation. It includes MkDocs for documentation generation, the Material theme for MkDocs for styling, and PyMdown Extensions for enhanced Markdown functionality.\nSOURCE: https://github.com/roblox/rodux/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs\nmkdocs-material\npymdown-extensions\n```"
  }
]