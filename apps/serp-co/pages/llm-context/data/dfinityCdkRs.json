[
  {
    "owner": "dfinity",
    "repo": "cdk-rs",
    "content": "TITLE: Implementing Query Entry Point in Rust\nDESCRIPTION: Example of implementing a simple query entry point using ic-cdk macros in Rust. Shows how to create a basic hello world function that returns a string.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk/README.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[ic_cdk::query]\nfn hello() -> String {\n    \"world\".to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Query Function with IC-CDK\nDESCRIPTION: A minimal example of a query function in Rust using the ic_cdk query macro. This function responds with a simple string and demonstrates the basic pattern for exposing canister endpoints.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[ic_cdk::query]\nfn hello() -> String{\n    \"world\".to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Reply and Reject Functions in Rust for IC Canisters\nDESCRIPTION: Defines functions for appending reply data, sending replies, and rejecting messages. These are crucial for responding to incoming calls in canisters.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nic0.msg_reply_data_append : (src : i32, size : i32) -> ();                  // U Q CQ Ry Rt CRy CRt\nic0.msg_reply : () -> ();                                                   // U Q CQ Ry Rt CRy CRt\nic0.msg_reject : (src : i32, size : i32) -> ();                             // U Q CQ Ry Rt CRy CRt\n```\n\n----------------------------------------\n\nTITLE: Implementing Inter-Canister Calls in Rust for IC\nDESCRIPTION: Defines functions for setting up and performing inter-canister calls. These are essential for enabling communication between different canisters on the Internet Computer.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nic0.call_new :                                                              // U CQ Ry Rt CRy CRt T\n  ( callee_src  : i32,\n    callee_size : i32,\n    name_src : i32,\n    name_size : i32,\n    reply_fun : i32,\n    reply_env : i32,\n    reject_fun : i32,\n    reject_env : i32\n  ) -> ();\nic0.call_on_cleanup : (fun : i32, env : i32) -> ();                         // U CQ Ry Rt CRy CRt T\nic0.call_data_append : (src : i32, size : i32) -> ();                       // U CQ Ry Rt CRy CRt T\nic0.call_cycles_add : (amount : i64) -> ();                                 // U Ry Rt T\nic0.call_cycles_add128 : (amount_high : i64, amount_low: i64) -> ();        // U Ry Rt T\nic0.call_perform : () -> ( err_code : i32 );                                // U CQ Ry Rt CRy CRt T\n```\n\n----------------------------------------\n\nTITLE: Message Argument and Caller API Functions in WebAssembly\nDESCRIPTION: System API functions for accessing message arguments, caller information, and handling message rejections. These functions allow canisters to read input data, identify the caller, and access rejection information.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_0\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.msg_arg_data_size : () -> i32;                                          // I U Q CQ Ry CRy F\nic0.msg_arg_data_copy : (dst : i32, offset : i32, size : i32) -> ();        // I U Q CQ Ry CRy F\nic0.msg_caller_size : () -> i32;                                            // *\nic0.msg_caller_copy : (dst : i32, offset: i32, size : i32) -> ();           // *\nic0.msg_reject_code : () -> i32;                                            // Ry Rt CRy CRt\nic0.msg_reject_msg_size : () -> i32;                                        // Rt CRt\nic0.msg_reject_msg_copy : (dst : i32, offset : i32, size : i32) -> ();      // Rt CRt\n```\n\n----------------------------------------\n\nTITLE: Message Response API Functions in WebAssembly\nDESCRIPTION: System API functions for constructing and sending responses to messages. These functions allow canisters to append data to replies, send replies, and reject messages with custom error information.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_1\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.msg_reply_data_append : (src : i32, size : i32) -> ();                  // U Q CQ Ry Rt CRy CRt\nic0.msg_reply : () -> ();                                                   // U Q CQ Ry Rt CRy CRt\nic0.msg_reject : (src : i32, size : i32) -> ();                             // U Q CQ Ry Rt CRy CRt\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Canister Project in Cargo.toml\nDESCRIPTION: Basic Cargo.toml configuration for a Rust canister project. Specifies cdylib crate type for WebAssembly compilation and includes essential dependencies for Internet Computer development.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nic-cdk = \"0.15\"\ncandid = \"0.10\" # required if you want to define Candid data types\n```\n\n----------------------------------------\n\nTITLE: Handling Method Calls in Rust for IC Canisters\nDESCRIPTION: Defines functions for retrieving method names and accepting messages. These are crucial for implementing flexible message handling in canisters.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nic0.msg_method_name_size : () -> i32;                                       // F\nic0.msg_method_name_copy : (dst : i32, offset : i32, size : i32) -> ();     // F\nic0.accept_message : () -> ();                                              // F\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for IC Canister Development\nDESCRIPTION: Required Cargo.toml configuration for building Internet Computer canisters using ic-cdk. Specifies the crate type as cdylib and includes necessary dependencies for ic-cdk and candid.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nic-cdk = \"0.15\"\ncandid = \"0.10\" # required if you want to define Candid data types\n```\n\n----------------------------------------\n\nTITLE: Using Generated Bindings in Canister Code\nDESCRIPTION: This snippet illustrates how to use the generated Rust bindings in canister code. It imports the generated 'counter' module and makes an asynchronous call to the 'inc' function of the counter canister.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-bindgen/README.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nmod declarations;\nuse declarations::counter::counter;\n\ncounter.inc().await?\n```\n\n----------------------------------------\n\nTITLE: Defining Message Handling Functions in Rust for IC Canisters\nDESCRIPTION: Defines functions for handling message arguments, caller information, and reject messages. These are essential for processing incoming calls to canisters.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nic0.msg_arg_data_size : () -> i32;                                          // I U Q CQ Ry CRy F\nic0.msg_arg_data_copy : (dst : i32, offset : i32, size : i32) -> ();        // I U Q CQ Ry CRy F\nic0.msg_caller_size : () -> i32;                                            // *\nic0.msg_caller_copy : (dst : i32, offset: i32, size : i32) -> ();           // *\nic0.msg_reject_code : () -> i32;                                            // Ry Rt CRy CRt\nic0.msg_reject_msg_size : () -> i32;                                        // Rt CRt\nic0.msg_reject_msg_copy : (dst : i32, offset : i32, size : i32) -> ();      // Rt CRt\n```\n\n----------------------------------------\n\nTITLE: Retrieving Canister Information in Rust for IC\nDESCRIPTION: Defines functions for obtaining canister-specific information such as its ID, cycle balance, status, and version. These are useful for canister self-awareness and management.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nic0.canister_self_size : () -> i32;                                         // *\nic0.canister_self_copy : (dst : i32, offset : i32, size : i32) -> ();       // *\nic0.canister_cycle_balance : () -> i64;                                     // *\nic0.canister_cycle_balance128 : (dst : i32) -> ();                          // *\nic0.canister_status : () -> i32;                                            // *\nic0.canister_version : () -> i64;                                           // *\n```\n\n----------------------------------------\n\nTITLE: Managing Cycles in Rust for IC Canisters\nDESCRIPTION: Defines functions for checking available cycles, accepting cycles, and handling refunded cycles. These are essential for managing computational resources in canisters.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nic0.msg_cycles_available : () -> i64;                                       // U Rt Ry\nic0.msg_cycles_available128 : (dst : i32) -> ();                            // U Rt Ry\nic0.msg_cycles_refunded : () -> i64;                                        // Rt Ry\nic0.msg_cycles_refunded128 : (dst : i32) -> ();                             // Rt Ry\nic0.msg_cycles_accept : (max_amount : i64) -> (amount : i64);               // U Rt Ry\nic0.msg_cycles_accept128 : (max_amount_high : i64, max_amount_low: i64, dst : i32)\n                       -> ();                                               // U Rt Ry\n```\n\n----------------------------------------\n\nTITLE: Inter-Canister Call API Functions in WebAssembly\nDESCRIPTION: System API functions for making calls to other canisters. These functions allow setting up calls with callbacks, appending data, adding cycles, and performing the actual calls with error handling.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_5\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.call_new :                                                              // U CQ Ry Rt CRy CRt T\n  ( callee_src  : i32,\n    callee_size : i32,\n    name_src : i32,\n    name_size : i32,\n    reply_fun : i32,\n    reply_env : i32,\n    reject_fun : i32,\n    reject_env : i32\n  ) -> ();\nic0.call_on_cleanup : (fun : i32, env : i32) -> ();                         // U CQ Ry Rt CRy CRt T\nic0.call_data_append : (src : i32, size : i32) -> ();                       // U CQ Ry Rt CRy CRt T\nic0.call_cycles_add : (amount : i64) -> ();                                 // U Ry Rt T\nic0.call_cycles_add128 : (amount_high : i64, amount_low: i64) -> ();        // U Ry Rt T\nic0.call_perform : () -> ( err_code : i32 );                                // U CQ Ry Rt CRy CRt T\n```\n\n----------------------------------------\n\nTITLE: Scheduling a One-Shot Task with ic-cdk-timers in Rust\nDESCRIPTION: This example demonstrates how to use the ic-cdk-timers library to schedule a one-shot task that will be executed after a 1-second delay. It uses the set_timer function to schedule a closure that prints a message.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-timers/README.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nic_cdk_timers::set_timer(Duration::from_secs(1), || ic_cdk::println!(\"Hello from the future!\"));\n```\n\n----------------------------------------\n\nTITLE: Managing Stable Memory in Rust for IC Canisters\nDESCRIPTION: Defines functions for interacting with stable memory, including reading, writing, and growing the memory. These are crucial for persistent data storage in canisters.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nic0.stable_size : () -> (page_count : i32);                                 // * s\nic0.stable_grow : (new_pages : i32) -> (old_page_count : i32);              // * s\nic0.stable_write : (offset : i32, src : i32, size : i32) -> ();             // * s\nic0.stable_read : (dst : i32, offset : i32, size : i32) -> ();              // * s\nic0.stable64_size : () -> (page_count : i64);                               // * s\nic0.stable64_grow : (new_pages : i64) -> (old_page_count : i64);            // * s\nic0.stable64_write : (offset : i64, src : i64, size : i64) -> ();           // * s\nic0.stable64_read : (dst : i64, offset : i64, size : i64) -> ();            // * s\n```\n\n----------------------------------------\n\nTITLE: Stable Memory Operations API Functions in WebAssembly\nDESCRIPTION: System API functions for working with stable memory. These include functions for checking size, growing memory, and reading/writing data in both 32-bit and 64-bit addressing modes for persistent storage.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_6\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.stable_size : () -> (page_count : i32);                                 // * s\nic0.stable_grow : (new_pages : i32) -> (old_page_count : i32);              // * s\nic0.stable_write : (offset : i32, src : i32, size : i32) -> ();             // * s\nic0.stable_read : (dst : i32, offset : i32, size : i32) -> ();              // * s\nic0.stable64_size : () -> (page_count : i64);                               // * s\nic0.stable64_grow : (new_pages : i64) -> (old_page_count : i64);            // * s\nic0.stable64_write : (offset : i64, src : i64, size : i64) -> ();           // * s\nic0.stable64_read : (dst : i64, offset : i64, size : i64) -> ();            // * s\n```\n\n----------------------------------------\n\nTITLE: Accessing System Information in Rust for IC Canisters\nDESCRIPTION: Defines functions for retrieving system time, setting global timers, accessing performance counters, and checking controller status. These provide essential system-level information to canisters.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nic0.time : () -> (timestamp : i64);                                         // *\nic0.global_timer_set : (timestamp : i64) -> i64;                            // I G U Ry Rt C T\nic0.performance_counter : (counter_type : i32) -> (counter : i64);          // * s\nic0.is_controller: (src: i32, size: i32) -> ( result: i32);                 // * s\nic0.in_replicated_execution: () -> (result: i32);                           // * s\n```\n\n----------------------------------------\n\nTITLE: Canister Self-Information API Functions in WebAssembly\nDESCRIPTION: System API functions for accessing canister information. These functions allow canisters to get their own ID, cycle balance, status, and version information.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_3\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.canister_self_size : () -> i32;                                         // *\nic0.canister_self_copy : (dst : i32, offset : i32, size : i32) -> ();       // *\nic0.canister_cycle_balance : () -> i64;                                     // *\nic0.canister_cycle_balance128 : (dst : i32) -> ();                          // *\nic0.canister_status : () -> i32;                                            // *\nic0.canister_version : () -> i64;                                           // *\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running ic-cdk-bindgen in build.rs\nDESCRIPTION: This code snippet demonstrates how to set up and run ic-cdk-bindgen in a build.rs file. It creates a configuration for a 'counter' canister, adds it to a builder, and generates Rust bindings in the default source directory.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-bindgen/README.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse ic_cdk_bindgen::{Builder, Config};\nfn main() {\n    let counter = Config::new(\"counter\");\n    let mut builder = Builder::new();\n    builder.add(counter);\n    builder.build(None);  // default write to src/declarations\n}\n```\n\n----------------------------------------\n\nTITLE: Message Response Functions (ic0)\nDESCRIPTION: Functions for sending replies, rejecting messages, and managing response data.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic0/ic0.txt#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nic0.msg_reply_data_append : (src : i32, size : i32) -> ();\nic0.msg_reply : () -> ();\nic0.msg_reject : (src : i32, size : i32) -> ();\n```\n\n----------------------------------------\n\nTITLE: Message Handling Functions (ic0)\nDESCRIPTION: Core message handling functions for reading arguments, managing caller info, and handling message responses.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic0/ic0.txt#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nic0.msg_arg_data_size : () -> i32;\nic0.msg_arg_data_copy : (dst : i32, offset : i32, size : i32) -> ();\nic0.msg_caller_size : () -> i32;\nic0.msg_caller_copy : (dst : i32, offset: i32, size : i32) -> ();\nic0.msg_reject_code : () -> i32;\nic0.msg_reject_msg_size : () -> i32;\nic0.msg_reject_msg_copy : (dst : i32, offset : i32, size : i32) -> ();\n```\n\n----------------------------------------\n\nTITLE: Inter-Canister Call Functions (ic0)\nDESCRIPTION: Functions for making calls to other canisters and managing call data.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic0/ic0.txt#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nic0.call_new : (callee_src : i32, callee_size : i32, name_src : i32, name_size : i32, reply_fun : i32, reply_env : i32, reject_fun : i32, reject_env : i32) -> ();\nic0.call_on_cleanup : (fun : i32, env : i32) -> ();\nic0.call_data_append : (src : i32, size : i32) -> ();\nic0.call_cycles_add : (amount : i64) -> ();\nic0.call_cycles_add128 : (amount_high : i64, amount_low: i64) -> ();\nic0.call_perform : () -> ( err_code : i32 );\n```\n\n----------------------------------------\n\nTITLE: Cycles Management API Functions in WebAssembly\nDESCRIPTION: System API functions for managing cycles (computational resources). These functions allow canisters to check available and refunded cycles, and accept cycles from messages in both 64-bit and 128-bit precision.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_2\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.msg_cycles_available : () -> i64;                                       // U Rt Ry\nic0.msg_cycles_available128 : (dst : i32) -> ();                            // U Rt Ry\nic0.msg_cycles_refunded : () -> i64;                                        // Rt Ry\nic0.msg_cycles_refunded128 : (dst : i32) -> ();                             // Rt Ry\nic0.msg_cycles_accept : (max_amount : i64) -> (amount : i64);               // U Rt Ry\nic0.msg_cycles_accept128 : (max_amount_high : i64, max_amount_low: i64, dst : i32)\n                       -> ();                                               // U Rt Ry\n\nic0.cycles_burn128 : (amount_high : i64, amount_low : i64, dst : i32) -> ();               // I G U Ry Rt C T\n```\n\n----------------------------------------\n\nTITLE: Function Call Method Information and Acceptance in WebAssembly\nDESCRIPTION: System API functions for handling method names and call acceptance. These functions are used particularly in the fallback context to identify the method being called and to explicitly accept messages.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_4\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.msg_method_name_size : () -> i32;                                       // F\nic0.msg_method_name_copy : (dst : i32, offset : i32, size : i32) -> ();     // F\nic0.accept_message : () -> ();                                              // F\n```\n\n----------------------------------------\n\nTITLE: Handling Certified Data in Rust for IC Canisters\nDESCRIPTION: Defines functions for setting and retrieving certified data. These are important for implementing data certification mechanisms in canisters.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nic0.certified_data_set : (src: i32, size: i32) -> ();                       // I G U Ry Rt T\nic0.data_certificate_present : () -> i32;                                   // *\nic0.data_certificate_size : () -> i32;                                      // Q CQ\nic0.data_certificate_copy : (dst: i32, offset: i32, size: i32) -> ();       // Q CQ\n```\n\n----------------------------------------\n\nTITLE: Certification and Data Certificate API Functions in WebAssembly\nDESCRIPTION: System API functions for working with certified data. These functions allow canisters to set certified data, check for certificate presence, and retrieve certificate information for verification purposes.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_7\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.certified_data_set : (src: i32, size: i32) -> ();                       // I G U Ry Rt T\nic0.data_certificate_present : () -> i32;                                   // *\nic0.data_certificate_size : () -> i32;                                      // Q CQ\nic0.data_certificate_copy : (dst: i32, offset: i32, size: i32) -> ();       // Q CQ\n```\n\n----------------------------------------\n\nTITLE: Cycles Management Functions (ic0)\nDESCRIPTION: Functions for handling cycles, including checking available cycles, accepting cycles, and managing refunds.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic0/ic0.txt#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nic0.msg_cycles_available : () -> i64;\nic0.msg_cycles_available128 : (dst : i32) -> ();\nic0.msg_cycles_refunded : () -> i64;\nic0.msg_cycles_refunded128 : (dst : i32) -> ();\nic0.msg_cycles_accept : (max_amount : i64) -> (amount : i64);\nic0.msg_cycles_accept128 : (max_amount_high : i64, max_amount_low: i64, dst : i32) -> ();\n```\n\n----------------------------------------\n\nTITLE: Stable Memory Operations (ic0)\nDESCRIPTION: Functions for managing stable memory operations including reading, writing, and memory growth.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic0/ic0.txt#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nic0.stable_size : () -> (page_count : i32);\nic0.stable_grow : (new_pages : i32) -> (old_page_count : i32);\nic0.stable_write : (offset : i32, src : i32, size : i32) -> ();\nic0.stable_read : (dst : i32, offset : i32, size : i32) -> ();\nic0.stable64_size : () -> (page_count : i64);\nic0.stable64_grow : (new_pages : i64) -> (old_page_count : i64);\nic0.stable64_write : (offset : i64, src : i64, size : i64) -> ();\nic0.stable64_read : (dst : i64, offset : i64, size : i64) -> ();\n```\n\n----------------------------------------\n\nTITLE: Burning Cycles in Rust for IC Canisters\nDESCRIPTION: Defines a function for burning cycles, which is used to consume computational resources intentionally.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nic0.cycles_burn128 : (amount_high : i64, amount_low : i64, dst : i32) -> ();               // I G U Ry Rt C T\n```\n\n----------------------------------------\n\nTITLE: Utility and System Information API Functions in WebAssembly\nDESCRIPTION: System API functions for various utility operations. These include getting current time, setting timers, accessing performance counters, checking controller status, and determining execution context, as well as debug and error handling functions.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/ic0.txt#2025-04-20_snippet_8\n\nLANGUAGE: webassembly\nCODE:\n```\nic0.time : () -> (timestamp : i64);                                         // *\nic0.global_timer_set : (timestamp : i64) -> i64;                            // I G U Ry Rt C T\nic0.performance_counter : (counter_type : i32) -> (counter : i64);          // * s\nic0.is_controller: (src: i32, size: i32) -> ( result: i32);                 // * s\nic0.in_replicated_execution: () -> (result: i32);                           // * s\n\nic0.debug_print : (src : i32, size : i32) -> ();                            // * s\nic0.trap : (src : i32, size : i32) -> ();                                   // * s\n```\n\n----------------------------------------\n\nTITLE: Canister Info Functions (ic0)\nDESCRIPTION: Functions for accessing canister-specific information and status.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic0/ic0.txt#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nic0.canister_self_size : () -> i32;\nic0.canister_self_copy : (dst : i32, offset : i32, size : i32) -> ();\nic0.canister_cycle_balance : () -> i64;\nic0.canister_cycle_balance128 : (dst : i32) -> ();\nic0.canister_status : () -> i32;\nic0.canister_version : () -> i64;\n```\n\n----------------------------------------\n\nTITLE: Debugging and Error Handling in Rust for IC Canisters\nDESCRIPTION: Defines functions for debug printing and intentionally trapping execution. These are useful for development, testing, and implementing error handling in canisters.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/ic0.txt#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nic0.debug_print : (src : i32, size : i32) -> ();                            // * s\nic0.trap : (src : i32, size : i32) -> ();                                   // * s\n```\n\n----------------------------------------\n\nTITLE: System Utility Functions (ic0)\nDESCRIPTION: Utility functions for system operations, debugging, and performance monitoring.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic0/ic0.txt#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nic0.certified_data_set : (src: i32, size: i32) -> ();\nic0.data_certificate_present : () -> i32;\nic0.data_certificate_size : () -> i32;\nic0.data_certificate_copy : (dst: i32, offset: i32, size: i32) -> ();\nic0.time : () -> (timestamp : i64);\nic0.global_timer_set : (timestamp : i64) -> i64;\nic0.performance_counter : (counter_type : i32) -> (counter : i64);\nic0.is_controller: (src: i32, size: i32) -> ( result: i32);\nic0.in_replicated_execution: () -> (result: i32);\nic0.debug_print : (src : i32, size : i32) -> ();\nic0.trap : (src : i32, size : i32) -> ();\n```\n\n----------------------------------------\n\nTITLE: Adding ic-cdk-bindgen as a Build Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add ic-cdk-bindgen as a build dependency in the Cargo.toml file of a canister project. It specifies the version of the tool to be used.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-bindgen/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build-dependencies]\nic-cdk-bindgen = \"0.1\"\n```\n\n----------------------------------------\n\nTITLE: Using Candid Extractor CLI\nDESCRIPTION: Example command showing how to use candid-extractor to process a WASM file and extract its Candid definition.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncandid-extractor path/to/canister.wasm\n```\n\n----------------------------------------\n\nTITLE: Adding ic-cdk-timers Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the ic-cdk-timers crate as a dependency in a Rust project's Cargo.toml file. It specifies version 0.9.0 of the library.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-timers/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nic-cdk-timers = \"0.9.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Candid Extractor using Cargo\nDESCRIPTION: Command to install the candid-extractor tool using Rust's package manager Cargo.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/candid-extractor/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install candid-extractor\n```\n\n----------------------------------------\n\nTITLE: Example Canister Endpoint Configuration with Decoding Quotas\nDESCRIPTION: Example showing how to configure decoding quotas and debug settings for canister endpoints using update attributes.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[update(decoding_quota = 10000, skipping_quota = 100, debug = true)]\n```\n\n----------------------------------------\n\nTITLE: Candid Import Configuration Example\nDESCRIPTION: Example of configuring Candid imports in build.rs and using the generated bindings in canister code.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse ic_cdk_bindgen::{Builder, Config};\nfn main() {\n    let counter = Config::new(\"counter\");\n    let mut builder = Builder::new();\n    builder.add(counter);\n    builder.build(None);  // default write to src/declarations\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nmod declarations;\nuse declarations::counter::counter;\n\ncounter.inc().await?\n```\n\n----------------------------------------\n\nTITLE: Candid Export Build Configuration\nDESCRIPTION: Build commands for exporting Candid interface from a canister WASM module.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --target wasm32-unknown-unknown \\\n    --release \\\n    --package \"$package\" --features \"ic-cdk/wasi\"\n\nwasmtime \"target/wasm32-unknown-unknown/release/$package.wasm\" > $did_file\n\ncargo build --target wasm32-unknown-unknown \\\n    --release \\\n    --package \"$package\"\n\nic-wasm \"target/wasm32-unknown-unknown/release/$package.wasm\" \\\n    -o \"target/wasm32-unknown-unknown/release/$package.wasm\" \\\n    metadata candid:service -v public -f $did_file\n```\n\n----------------------------------------\n\nTITLE: Documenting Unreleased Changes in Markdown\nDESCRIPTION: This snippet shows the structure for documenting unreleased changes in the project. It includes additions, changes, and fixes that are not yet associated with a specific version release.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-bindgen/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [unreleased]\n\n- Support canister setting `log_visibility`.\n\n### Changed\n\n- Refactor!: move Rust code generation logic from candid_parser. (#480)\n\n### Fixed\n\n- Re-generate bindings if the canister ids changed (e.g. when switching networks) or when the path to the candid file of a dependency changed. (#479)\n```\n\n----------------------------------------\n\nTITLE: Documenting Released Version 0.1.3 in Markdown\nDESCRIPTION: This snippet shows the structure for documenting the changes in version 0.1.3 of the project, released on 2024-02-27. It includes additions related to environment variable resolution.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-bindgen/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.1.3] - 2024-02-27\n\n### Added\n\n- Resolve CANISTER_CANDID_PATH and CANISTER_ID from standardized environment variables (uppercase canister names). (#467)\n  - The support for legacy (non-uppercase) env vars is kept.\n  - It will be removed in next major release (v0.2).\n```\n\n----------------------------------------\n\nTITLE: Documenting Released Version 0.1.1 in Markdown\nDESCRIPTION: This snippet shows the structure for documenting the changes in version 0.1.1 of the project, released on 2023-09-18. It includes changes related to updating the candid dependency.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-bindgen/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.1.1] - 2023-09-18\n\n### Changed\n\n- Update `candid` dependency to 0.9.6 which change the Rust bindings. (#424)\n```\n\n----------------------------------------\n\nTITLE: Documenting Released Version 0.1.2 in Markdown\nDESCRIPTION: This snippet shows the structure for documenting the changes in version 0.1.2 of the project, released on 2023-11-23. It includes changes related to the candid dependency.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-bindgen/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.1.2] - 2023-11-23\n\n### Changed\n\n- Change `candid` dependency to the new `candid_parser` library. (#448)\n  More details here: https://github.com/dfinity/candid/blob/master/Changelog.md#2023-11-16-rust-0100\n```\n\n----------------------------------------\n\nTITLE: Documenting Released Version 0.1.0 in Markdown\nDESCRIPTION: This snippet shows the structure for documenting the initial release (version 0.1.0) of the project on 2023-07-13.\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk-bindgen/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.1.0] - 2023-07-13\n\n### Added\n\n- First release. (#416)\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Format in Markdown\nDESCRIPTION: This code snippet shows the structure of a changelog entry, including the version number, release date, and categorized changes (Changed, Added, Fixed).\nSOURCE: https://github.com/dfinity/cdk-rs/blob/main/library/ic-ledger-types/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.14.0] - 2024-11-08\n\n### Changed\n\n- Upgrade `ic-cdk` to v0.17.\n\n### Added\n- as_bytes method to AccountIdentifier in ic-ledger-types\n```"
  }
]